[
  {
    "owner": "dhtmlx",
    "repo": "docs-suite",
    "content": "TITLE: Initializing DHTMLX TimePicker using JavaScript Constructor\nDESCRIPTION: Illustrates the basic JavaScript code required to initialize the DHTMLX TimePicker. It involves creating a new instance of `dhx.Timepicker`, passing the ID of the target HTML container ('timepicker_container') and an optional configuration object as arguments.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/timepicker/initialization.md#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n// creating DHTMLX TimePicker\nconst timepicker = new dhx.Timepicker(\"timepicker_container\", {\n    // config options\n});\n```\n\n----------------------------------------\n\nTITLE: Complete HTML Example for Initializing DHTMLX Slider\nDESCRIPTION: This HTML snippet provides a full example of setting up a basic webpage to display a DHTMLX Slider. It includes linking the necessary DHTMLX Suite JavaScript and CSS files, defining a `div` container with the ID `slider_container`, and using a script block to instantiate `dhx.Slider` with initial configuration (min, max, step, value).\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/slider/initializing_slider.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n    <head>\n        <title>How to Start with DHTMLX Slider</title>         \n        <script type=\"text/javascript\" src=\"../../codebase/suite.js\"></script>\n        <link rel=\"stylesheet\" href=\"../../codebase/suite.css\">\n    </head>\n    <body>\n        <div id=\"slider_container\"></div>\n        <script>\n            // creating DHTMLX Slider \n            const slider = new dhx.Slider(\"slider_container\", {\n                min: 0,\n                max: 100,\n                step: 1,\n                value: 30\n            });\n        </script>\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Accessing Form Control Object in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the getItem() method to access a Form control object and set its value. It retrieves the 'colorpicker' control and sets its value to a specific color.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/form_getitem_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nform.getItem(\"colorpicker\").setValue(\"#02F7C6\");\n```\n\n----------------------------------------\n\nTITLE: Grouping Controls in Form with Complex Layout\nDESCRIPTION: Demonstrates how to group Form controls using rows and columns with nested configurations and radio buttons\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/configuration.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst form = new dhx.Form(\"form_container\", {\n    css: \"dhx_widget--bordered\",\n    cols: [\n        {\n            align: \"center\",\n            rows: [\n                {\n                    title: \"Align:\",\n                    padding: \"10px\",\n                    align: \"around\",\n                    css: \"dhx_layout-cell--bordered\",\n                    rows: [\n                        {\n                            type: \"radioGroup\",\n                            name: \"align\",\n                            options: {\n                                padding: \"10px\",\n                                align: \"center\",\n                                rows: [\n                                    {\n                                        type: \"radioButton\",\n                                        text: \"start\",\n                                        value: \"start\",\n                                        checked: true,\n                                        autoWidth: true,\n                                    },\n                                    {\n                                        type: \"radioButton\",\n                                        text: \"center\",\n                                        value: \"center\",\n                                        autoWidth: true,\n                                    }\n                                ],\n                            },\n                        },\n                    ],\n                }\n            ],\n        }\n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Custom CSS to Grid Cell in JavaScript\nDESCRIPTION: This example demonstrates how to add a custom CSS class to a specific cell in a DHTMLX Grid. It defines a CSS class and then applies it to a cell using the addCellCss() method.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_addcellcss_method.md#2025-04-22_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<style>\n    .myCustomClass{\n        background:greenyellow;\n    }\n</style>\n\n<script>\n    ...\n    grid.addCellCss(\"1\", \"b\", \"myCustomClass\");\n</script>\n```\n\n----------------------------------------\n\nTITLE: Handling afterValidate Event in DHTMLX Combo Box\nDESCRIPTION: This code demonstrates how to attach an event handler to the afterValidate event of a Combo Box control in a DHTMLX Form. The handler logs the IDs of validated options and the validation result to the console.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/combo/combo_aftervalidate_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"combo\").events.on(\"afterValidate\", function(ids, isValidate) {\n    console.log(\"afterValidate\", ids, isValidate);\n});\n```\n\n----------------------------------------\n\nTITLE: Basic HTML Structure for DHTMLX Form\nDESCRIPTION: This snippet shows the basic HTML structure required to set up a DHTMLX Form, including the necessary script and CSS file references, and a container div for the form.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/how_to_start.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n    <head>\n        <title>How to start with DHTMLX Form</title>         \n        <script type=\"text/javascript\" src=\"../../codebase/suite.js\"></script>\n        <link rel=\"stylesheet\" href=\"../../codebase/suite.css\">\n    </head>\n    <body>\n        <div id=\"form_container\"></div>\n        <script>\n            // creating DHTMLX Form\n            const form = new dhx.Form(\"form_container\");\n        </script>\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating High-Contrast Themes in DHTMLX Suite\nDESCRIPTION: An interactive iframe snippet showcasing the high-contrast themes available in DHTMLX Suite. These themes are designed to improve visibility for users with visual impairments.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/common_features/accessibility_support.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<iframe src=\"https://snippet.dhtmlx.com/85fbitnu?mode=result\" frameborder=\"0\" class=\"snippet_iframe\" width=\"100%\" height=\"700\"></iframe>\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX Form with Configuration\nDESCRIPTION: This snippet shows how to initialize a DHTMLX Form using the dhx.Form constructor. It includes the container id and a configuration object with CSS class and form controls.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/how_to_start.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst form = new dhx.Form(\"form_container\", {\n    css: \"dhx_widget--bordered\",\n    rows: [\n        {\n            type: \"input\",\n            label: \"Name\",\n            icon: \"dxi dxi-magnify\",\n            placeholder: \"John Doe\",\n            name: \"name\"\n        },\n        // more form controls\n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Grid Cell Edit Events in JavaScript\nDESCRIPTION: Example shows how to attach an event handler to the beforeEditStart event of a Grid component. The event fires before cell editing begins and can be used to control whether editing should proceed.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_beforeeditstart_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngrid.events.on(\"beforeEditStart\", (row, column, editorType) => {\n    // your logic here\n    return false;\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Add Window Function for DHTMLX Grid\nDESCRIPTION: Function to open a window for adding new items to the grid. It updates the window title, clears the form, and displays the window.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tutorial/binding_components/step6.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction openAddWindow(){\n    dhxWindow.header.data.update(\"title\", {value: \"Adding item\"});\n    form.clear();\n    dhxWindow.show();\n};\n```\n\n----------------------------------------\n\nTITLE: Global API Methods in DHTMLX Optimus\nDESCRIPTION: Overview of global API methods available in DHTMLX Optimus, including show(), use(), on(), fire(), and detach(). These methods are accessible from any point in the application and handle view rendering, component initialization, and event management.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/optimus_guides/index.md#2025-04-22_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nshow(cell, view, params)\nuse(component, params)\non(name, handler)\nfire(name, params)\ndetach(name)\n```\n\n----------------------------------------\n\nTITLE: Including DHTMLX Suite Source Files\nDESCRIPTION: This snippet demonstrates how to include the necessary JavaScript and CSS files for DHTMLX Suite in the HTML header.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/how_to_start.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"text/javascript\" src=\"../../codebase/suite.js\"></script>\n<link rel=\"stylesheet\" href=\"../../codebase/suite.css\">\n```\n\n----------------------------------------\n\nTITLE: Complete Grid Initialization HTML Example\nDESCRIPTION: Full HTML page example showing how to initialize DHTMLX Grid with basic configuration including columns setup and container definition\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/initialization.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n    <head>\n        <title>How to start with DHTMLX Grid</title>         \n        <script type=\"text/javascript\" src=\"../../codebase/grid.js\"></script>\n        <link rel=\"stylesheet\" href=\"../../codebase/grid.css\">\n    </head>\n    <body>\n        <div style=\"height:500px; width:600px\" id=\"grid_container\"></div>\n        <script>\n            // creating DHTMLX Grid \n            const grid = new dhx.Grid(\"grid_container\", {\n                columns: [\n                    { width: 100, id: \"a\", header: [{ text: \"#\" }] },\n                    { width: 100, id: \"b\", header: [{ text: \"Title\" }] },\n                    { width: 200, id: \"c\", header: [{ text: \"Name\" }] },\n                    { width: 200, id: \"d\", header: [{ text: \"Address\" }] }\n                ],\n                headerRowHeight: 50,\n                data: dataset\n            });\n        </script>\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Handling DHTMLX Form Send Events (JSX)\nDESCRIPTION: Demonstrates how to attach event handlers for before and after sending form data to the server in DHTMLX.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/work_with_form.md#2025-04-22_snippet_21\n\nLANGUAGE: jsx\nCODE:\n```\n// fires before sending a form to the server\nform.events.on(\"BeforeSend\", function(){\n   // your logic here\n});\n\n// fires after sending a form to the server\nform.events.on(\"AfterSend\", function(){\n   // your logic here\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Global Event Handling in TopLayout View\nDESCRIPTION: Updates the TopLayout.js file to listen for the viewChange global event and respond by showing the EmptyView with the clicked button's ID as content parameter.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/optimus_guides/how_to_start_optimus.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport { View } from \"dhx-optimus\";\n\nimport { ToolbarView } from \"./ToolbarView\";\nimport { EmptyView } from \"./EmptyView\";\n\nexport class TopLayout extends View {\n    init() {\n        ...\n    }\n\n    ready() {\n        // initialize the global event handler\n        this.on(\"viewChange\", id => {\n            this.show(this.layout.getCell(\"content\"), EmptyView, { content: id });\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Input Control Properties in DHTMLX Form\nDESCRIPTION: Complete configuration object for the Input control in DHTMLX Form, showing all available properties with their types and default values. Includes options for basic configuration, masking, validation, styling, and label positioning.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/input/api_input_properties.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    type: \"input\",\n    name?: string,\n    id?: string,\n    value?: string | number,\n    numberMask?:\n        | {\n                prefix?: string; // \"\" by default (before the value)\n                suffix?: string; // \"\" by default (after the value)\n                groupSeparator?: string; // \",\" by default\n                decSeparator?: string; // \".\" by default\n                allowNegative?: boolean; // true by default\n                maxIntLength?: number; // 16 by default (for the number type)\n                maxDecLength?: number; // 2 by default (for the number type)\n                minDecLength?: number; // 0 by default\n            }\n        | boolean,\n    patternMask?:\n        |   {\n                pattern: ((value: string | number) => string) | string;\n                charFormat?: {\n                    [char: string]: RegExp;\n                };\n            }\n        | string,\n    \n    css?: string,\n    disabled?: boolean, // false by default\n    height?: string | number | \"content\", // \"content\" by default\n    hidden?: boolean, // false by default\n    padding?: string | number, \n    required?: boolean, // false by default\n    validation?: string | (input: string | number) => boolean,\n    width?: string | number | \"content\", // \"content\" by default\n\n    autocomplete?: boolean, // false by default\n    icon?: string,\n    inputType?: \"text\" | \"password\" | \"number\", // \"text\" by default\n    max?: number | string,\n    maxlength?: number | string,\n    min?: number | string,\n    minlength?: number | string,\n    placeholder?: string,\n    readOnly?: boolean, // false by default\n\n    hiddenLabel?: boolean, // false by default\n    label?: string,\n    labelPosition?: \"left\" | \"top\", // \"top\" by default\n    labelWidth?: string | number,\n\n    helpMessage?: string,\n    preMessage?: string,\n    successMessage?: string,\n    errorMessage?: string,\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Container for DHTMLX Form\nDESCRIPTION: This snippet shows how to create a container div for the DHTMLX Form with a specific id.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/how_to_start.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"form_container\"></div>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Cell Parameters in JavaScript Grid\nDESCRIPTION: This snippet demonstrates how to use the getCellRect() method to obtain the parameters of a specific cell in a DHTMLX Grid. It returns an object containing the cell's coordinates, height, and width.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_getcellrect_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst rect = grid.getCellRect(\"1\", \"c\");\n// -> {x: 200, y: -40, height: 40, width: 200}\n```\n\n----------------------------------------\n\nTITLE: Including Grid Standalone Source Files\nDESCRIPTION: HTML code showing how to include the required CSS and JavaScript files for standalone DHTMLX Grid usage\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/initialization.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"text/javascript\" src=\"../../codebase/grid.js\"></script>\n<link rel=\"stylesheet\" href=\"../../codebase/grid.css\">\n```\n\n----------------------------------------\n\nTITLE: Implementing Grid Column Type\nDESCRIPTION: Demonstrates how to create a Grid instance with a column configuration that specifies the number type. This affects both the content alignment and the editor type used for the column.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/gridcolumn_properties/gridcolumn_type_property.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst grid = new dhx.Grid(\"grid_container\", {\n    columns: [\n        { id: \"quantity\", type: \"number\", header: [{ text: \"Quantity\" }] },\n        // more columns configuration objects\n    ],\n    // more options\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Inline Editing for DataView in JavaScript\nDESCRIPTION: This code snippet demonstrates how to initialize a DataView component with inline editing enabled. The 'editable' config is set to true, allowing users to edit items directly in the DataView.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/dataview/api/dataview_editable_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst dataview = new dhx.DataView(\"dataview_container\", {editable:true});\n```\n\n----------------------------------------\n\nTITLE: Initializing CheckboxGroup in DHTMLX Form\nDESCRIPTION: This code snippet demonstrates how to add a CheckboxGroup control during the initialization of a DHTMLX Form. It includes various configuration options such as label, required field, help message, and individual checkbox options.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/checkboxgroup.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst form = new dhx.Form(\"form_container\", { \n    rows: [\n        {\n            id: \"checkboxGroup\",\n            type: \"checkboxGroup\",\n            name: \"checkboxGroup\",\n            required: true,\n            label: \"Checkbox Group\",\n            labelWidth: 140,\n            labelPosition: \"left\",\n            helpMessage: \"Help information\",\n            padding: \"50px\",\n            value: {\n                first: true,\n            },\n            options: {\n                padding: \"50px\",\n                rows: [\n                    {\n                        id: \"first\",\n                        type: \"checkbox\",\n                        text: \"Select 1\",\n                    },\n                    {\n                        id: \"second\",\n                        type: \"checkbox\",\n                        text: \"Select 2\",\n                        checked: true\n                    }\n                ]\n            }\n        }\n     ]\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX Sidebar with JavaScript\nDESCRIPTION: This JavaScript code initializes a DHTMLX Sidebar instance using the dhx.Sidebar constructor. It takes the container id as the first parameter and an optional configuration object as the second parameter.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/sidebar/initialization.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst sidebar = new dhx.Sidebar(\"sidebar_container\", {\n    // config options\n});\n```\n\n----------------------------------------\n\nTITLE: DataCollection Save Method Implementation\nDESCRIPTION: Example of using save() method in DataCollection for handling CRUD operations with GET, PUT, POST, and DELETE requests\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/integration/suite_and_backend.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// DataCollection save() method implementation\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX DataCollection for Component Data\nDESCRIPTION: Updates the main app class to initialize DHTMLX DataCollection with sample data, making it available to all components through the params property for simplified data exchange between widgets.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/optimus_guides/how_to_start_optimus.md#2025-04-22_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n...\nimport { data } from \"./assets/data/data\";\n...\n\nexport class MyApp extends App {\n    init() {\n        ...\n        this.persons = new dhx.DataCollection();\n        this.persons.parse(data);\n\n        this.show(null, TopLayout, { persons: this.persons });\n        ...\n    }\n\n    subscribe() {\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Grid Data Change Event\nDESCRIPTION: Event handler that updates chart data when grid data is changed using the Change event.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tutorial/basic_application/step7.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ngrid.data.events.on(\"Change\", function(id,status,updatedItem){\n    chart.data.parse(getCountUsers());\n});\n```\n\n----------------------------------------\n\nTITLE: Handling focus Event for Button Control in DHTMLX Form\nDESCRIPTION: This snippet demonstrates how to attach an event listener to the focus event of a Button control in a DHTMLX Form. The event fires when the Button receives focus and provides the current text value of the control.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/button/button_focus_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"button\").events.on(\"focus\", (text) => {\n    console.log(\"focus\", text);\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Input Validation Events in DHTMLX Form\nDESCRIPTION: Example of attaching an event handler to the afterValidate event of an Input control in a DHTMLX Form. The handler receives the validated value and the validation result.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/input/input_aftervalidate_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"input\").events.on(\"afterValidate\", function(value, isValidate) {\n    console.log(\"afterValidate\", value, isValidate);\n});\n```\n\n----------------------------------------\n\nTITLE: Filtering Grid Data in JavaScript\nDESCRIPTION: Demonstrates how to filter grid data using the filter() method of DataCollection. It shows examples of filtering with a function and with an object containing filtering criteria.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/usage.md#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\ngrid.data.filter(function (item) {\n  return item.a > 0 && item.b !== \"Apple\";\n});\n\ngrid.data.filter(function (item) {\n  return item.a > 0 && item.b !== \"Apple\";\n}, {\n  add: true\n});\n\ngrid.data.filter({\n  by: \"a\",\n  match: \"Orange\",\n  compare: function (value, match, item) {\n    if (item.a !== \"Some\") {\n      return val === \"New\";\n    }\n    return false;\n  }\n}, {\n  add: true,\n});\n```\n\n----------------------------------------\n\nTITLE: DataCollection Method Syntax in JavaScript\nDESCRIPTION: Basic syntax for calling DataCollection methods on DHTMLX components. The component represents any compatible DHTMLX widget like chart, combobox, dataview, grid, or list.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/guides/datacollection_guide.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\ncomponent.data.method();\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Container for DHTMLX Layout\nDESCRIPTION: Creates a div container that will host the DHTMLX layout component\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tutorial/basic_application/step2.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"layout\"></div>\n```\n\n----------------------------------------\n\nTITLE: Getting Focused List Item ID in JavaScript\nDESCRIPTION: Shows how to retrieve the id of the currently focused List item using the getFocus() method. The method returns the id of the item in focus.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/list/work_with_list.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlist.getFocus(); // -> \"6\"\n```\n\n----------------------------------------\n\nTITLE: Sorting Grid Data in JSX\nDESCRIPTION: Shows how to sort grid data using the sort() method of DataCollection. The example demonstrates sorting by a single column with additional parameters like direction and custom sorting function.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/usage.md#2025-04-22_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\ngrid.data.sort(\n    {\n        by:\"a\",\n        dir:\"desc\",\n        as: item => (item.toUpperCase())\n    },\n    { smartSorting: true }\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX Ribbon with Inline Data Configuration in JavaScript\nDESCRIPTION: This example shows how to configure and initialize a DHTMLX Ribbon component in JavaScript. It first defines the ribbon's structure and content using a JavaScript array of objects (`data`), specifying blocks, items, icons, and other properties. Then, it creates a new `dhx.Ribbon` instance, linking it to an HTML container ('ribbon_container'), applying CSS styles, and passing the defined `data` for population. Note that `id` fields should be unique if specified, otherwise they are automatically generated.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/ribbon/api/ribbon_data_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = [\n    {\n        id: \"fileBlock\",\n        type: \"block\",\n        title: \"File\",\n        items: [\n            {\n                type: \"block\",\n                direction: \"col\",\n                items: [\n                    {\n                        value: \"File\",\n                        id: \"file\",\n                        icon: \"mdi mdi-file-outline\",\n                        size: \"small\",\n                        ribbonHeight: \"auto\"\n                    },\n                    {\n                        type: \"block\",\n                        items: [\n                            { id: \"folder\", icon: \"mdi mdi-folder-outline\" },\n                            { id: \"cloud\", icon: \"mdi mdi-weather-cloudy\" }\n                        ]\n                    }\n                ]\n            },\n            {\n                id: \"save\",\n                value: \"Save\",\n                icon: \"mdi mdi-content-save\",\n                size: \"auto\"\n            }\n        ]\n    }\n];\n\nconst ribbon = new dhx.Ribbon(\"ribbon_container\", {\n    css: \"dhx_widget--bordered dhx_widget--bg_white\", \n    data: data\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Asynchronous Data Loading with Promise\nDESCRIPTION: Example showing how to handle asynchronous data loading using promises and perform actions after data is loaded.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/data_collection/api/datacollection_load_method.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\ncomponent.data.load(url).then(function(){\n    //do something after load;\n});\n```\n\n----------------------------------------\n\nTITLE: App Rendering Method in DHTMLX Optimus\nDESCRIPTION: The render() method provided by the App constructor in DHTMLX Optimus. This method is used to render the application inside a specified container and can be called from outside the application.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/optimus_guides/index.md#2025-04-22_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nrender(container: string|cell|HTMLElement)\n```\n\n----------------------------------------\n\nTITLE: Applying DataProxy to DHTMLX Grid Component in JavaScript\nDESCRIPTION: Shows how to use DataProxy with a DHTMLX Grid component for loading data. This example illustrates the versatility of DataProxy in working with various DHTMLX Suite components that handle data operations.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/data_proxy/index.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst grid = new dhx.Grid(...);\nconst proxy = new dhx.DataProxy(\"https://myCustomUrl.com\");\ngrid.data.load(proxy);\n```\n\n----------------------------------------\n\nTITLE: Implementing Form Click Event Listener in JavaScript\nDESCRIPTION: Example of how to attach a click event listener to a DHTMLX form. This captures button clicks and logs both the button name and the event object to the console. The click event fires whenever a user clicks on any button in the form.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/form_click_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.events.on(\"click\", function(name, events) {\n    console.log(\"click\", name, events); \n});\n```\n\n----------------------------------------\n\nTITLE: Binding Toolbar Events to DHTMLX Grid\nDESCRIPTION: Event handler for toolbar buttons that triggers appropriate actions (add, edit, delete) on the grid.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tutorial/binding_components/step6.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ntoolbar.events.on(\"Click\", function(id,e){\n    switch(id) {\n        case 'add': {\n            openAddWindow();\n            break;\n        }\n        case 'edit': {\n            row = grid.selection.getCell().row;\n            openEditWindow(row);\n            break;\n        }\n        case 'delete': {\n            deleteItem();\n            break;\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX Layout in HTML and JavaScript\nDESCRIPTION: This snippet demonstrates how to set up an HTML page with DHTMLX Layout. It includes the necessary source files, creates a container, and initializes the Layout with a complex nested structure.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/layout/initialization.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n    <head>\n        <title>How to start with DHTMLX Layout</title>         \n        <script type=\"text/javascript\" src=\"../../codebase/suite.js\"></script>\n        <link rel=\"stylesheet\" href=\"../../codebase/suite.css\">\n    </head>\n    <body>\n        <div id=\"layout_container\"></div>\n        <script>\n            // creating Layout\n            const layout = new dhx.Layout(\"layout_container\", {\n                cols: [\n                    { header: \"Column 1\" },\n                    { header: \"Column 2\", cols: [\n                        { header:\"Left cols\"},\n                        { header:\"Center cols\",cols: [\n                            { header: \"Sub Block Header cols 1\" },\n                            { header: \"Sub Block Header cols 2\" },\n                            { header: \"Sub Block Header cols 3\" }]\n                        }]\n                    }\n                ]\n            });\n        </script>\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Highlighting Min/Max Values in DHTMLX Grid Cells\nDESCRIPTION: This example shows how to highlight cells with minimum and maximum values in a DHTMLX Grid using the 'mark' property as an object with 'min' and 'max' parameters. Custom CSS classes are used to style the highlighted cells.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/customization.md#2025-04-22_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<style>\n    .max_cell {\n        background: #f44336;\n        color: #FFF;\n    }\n\n    .min_cell {\n        background: #4CAF50;\n        color: #FFF\n    }\n</style>\n\n<script>\n    const grid = new dhx.Grid(\"grid_container\", {\n        columns: [\n            { width: 200, id: \"country\", header: [{ text: \"Country\" }] },\n            {\n                width: 150, id: \"population\", header: [{ text: \"Population\" }],\n                mark: {\n                    min: \"min_cell\",\n                    max: \"max_cell\"\n                }\n            },\n            // more options\n        ],\n        data: dataset\n    });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Creating Date Picker with DHTMLX Calendar and Popup\nDESCRIPTION: This code demonstrates how to create a date picker by combining DHTMLX Calendar with a Popup component. It shows the complete implementation including creating an input field, initializing calendar and popup, attaching the calendar to the popup, and handling show/hide functionality based on user interactions.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar2/functionality_and_features/date_picker.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<iframe src=\"https://snippet.dhtmlx.com/mj7jr6ro?mode=result\" frameborder=\"0\" class=\"snippet_iframe\" width=\"100%\" height=\"550\"></iframe>\n```\n\n----------------------------------------\n\nTITLE: Implementing Toolbar Click Events for Grid Operations in JavaScript\nDESCRIPTION: Code showing how to handle Toolbar click events to load data into and clear data from a Grid component. Uses the parse() method to load data and removeAll() method to clear the grid.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tutorial/basic_application/step5.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntoolbar.events.on(\"Click\", function(id,e){ \n//id - toolbar button id, e - default mouse event of browser\n    switch(id) {\n        case 'load': {\n            grid.data.parse(grid_dataset); \n            break;\n        }\n        case 'clear': {\n            grid.data.removeAll(); \n            break;\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Grid Column Sort Event in JavaScript\nDESCRIPTION: Example showing how to attach an event handler to the Grid's afterSort event. The event fires after a column is sorted and provides column configuration and sort direction information.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_aftersort_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngrid.events.on(\"afterSort\", (column, dir) => {\n    // your logic here\n});\n```\n\n----------------------------------------\n\nTITLE: Handling cellDblClick Event in DHTMLX Grid (JavaScript)\nDESCRIPTION: This snippet demonstrates how to attach an event listener for the cellDblClick event on a DHTMLX Grid instance. The event fires when a user double-clicks on a grid cell. The callback function receives the row object, column object, and the native MouseEvent object as parameters.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_celldblclick_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngrid.events.on(\"cellDblClick\", (row, column, event) => {\n    // your logic here\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Form Control Properties Example\nDESCRIPTION: Demonstrates creating a form with input and button controls and retrieving their properties using getProperties() method.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/form_getproperties_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst form = new dhx.Form(\"form_container\", {\n    css: \"dhx_widget--bordered\",\n    rows: [\n        {\n            type: \"input\",\n            label: \"Name\",\n            icon: \"dxi dxi-magnify\",\n            placeholder: \"John Doe\",\n            name: \"name\"\n        },\n        {\n            type: \"input\",\n            inputType: \"password\",\n            label: \"Password\",\n            placeholder: \"********\",\n            name: \"password\"\n        },\n        {\n            type: \"button\",\n            text: \"Send\",\n            size: \"medium\",\n            view: \"flat\",\n            submit: true\n        }\n    ]\n});\n\nform.getProperties();\n// or\nform.getProperties(\"password\");\n```\n\n----------------------------------------\n\nTITLE: Defining Colorpicker Properties in JavaScript Form Configuration\nDESCRIPTION: This code snippet demonstrates the complete configuration object structure for the Colorpicker control in DHTMLX Form. It includes all available properties that can be used when initializing a colorpicker, such as type, name, appearance settings, color options, validation, and label configuration.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/colorpicker/api_colorpicker_properties.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    type: \"colorpicker\",\n    name?: string,\n    id?: string,\n    value?: string,\n    \n    css?: string,\n    disabled?: boolean, // false by default\n    editable?: boolean, // false by default\n    height?: string | number | \"content\", // \"content\" by default\n    hidden?: boolean, // false by default\n    padding?: string | number,\n    required?: boolean, // false by default\n    validation?: (value: string) => boolean,\n    width?: string | number | \"content\", // \"content\" by default\n    \n    customColors?: string[],\n    grayShades?: boolean, // true by default\n    icon?: string,\n    mode?: \"palette\" | \"picker\", // \"palette\" by default\n    palette?: string[][],\n    paletteOnly?: boolean, // false by default\n    pickerOnly?: boolean, // false by default\n    placeholder?: string,\n\n    hiddenLabel?: boolean, // false by default\n    label?: string,\n    labelPosition?: \"left\" | \"top\", // \"top\" by default\n    labelWidth?: string | number,\n\n    helpMessage?: string,\n    preMessage?: string,\n    successMessage?: string,\n    errorMessage?: string,\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Focus on Form Control in JavaScript\nDESCRIPTION: Sets focus to a form control using its name or ID. This method works with various form controls including Button, DatePicker, Checkbox, CheckboxGroup, ColorPicker, Combo, Input, RadioGroup, Select, Slider, Textarea, and TimePicker controls.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/form_setfocus_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.setFocus(\"checkbox\");\n```\n\n----------------------------------------\n\nTITLE: Defining DHTMLX Form Structure in JavaScript\nDESCRIPTION: This code defines the structure of a DHTMLX Form with various input fields, a checkbox, and a submit button. It demonstrates how to arrange controls vertically using the 'rows' attribute.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/how_to_start.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nrows: [\n    {\n        type: \"input\",\n        label: \"Name\",\n        icon: \"dxi dxi-magnify\",\n        placeholder: \"John Doe\",\n        name: \"name\"\n    },\n    {\n        type: \"input\",\n        label: \"Email\",\n        placeholder: \"jd@mail.name\",\n        name: \"email\"\n    },        \n    {\n        type: \"input\",\n        inputType: \"password\",\n        label: \"Password\",\n        placeholder: \"********\",\n        name: \"password\"\n    },\n    {\n        type: \"checkbox\",\n        text: \"I agree\",\n        value: \"checkboxvalue\",\n        id: \"agree\",\n        name: \"agree\"\n    },\n    {\n        type: \"button\",\n        text: \"Send\",\n        size: \"medium\",\n        view: \"flat\",\n        submit: true,\n        color: \"primary\"\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Creating Sample Data for DHTMLX Components\nDESCRIPTION: Creates a data.js file in the assets folder to provide sample data for DHTMLX components like DataView, Chart, and Grid, with employee information structured as an array of objects.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/optimus_guides/how_to_start_optimus.md#2025-04-22_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nexport const data = [\n    {\n        name: \"Theo Fisher\",\n        post: \"Head of department\",\n        phone: \"(405) 632-1372\",\n        mail: \"tfisher@gmail.com\",\n        birthday: \"09.12.1987\",\n        start: \"04.02.2018\",\n    },\n    {\n        name: \"Francesca Saunders\",\n        post: \"Attending physician\",\n        phone: \"(402) 371-6736\",\n        mail: \"fsaunders@gmail.com\",\n        birthday: \"25.05.1997\",\n        start: \"12.09.2019\",\n    },\n    {\n        name: \"Jenson Brown\",\n        post: \"Fellow\",\n        phone: \"(346) 622-8633\",\n        mail: \"jbrown@gmail.com\",\n        birthday: \"03.10.1970\",\n        start: \"06.02.1998\",\n    },\n// more options\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring Columns in DHTMLX Grid (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to initialize a DHTMLX Grid with custom column configurations. It defines four columns with specified widths, IDs, and header texts. The grid is created with these column definitions and a dataset for the content.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_columns_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst grid = new dhx.Grid(\"grid_container\", {\n    columns: [\n        { width: 100, id: \"a\", header: [{ text: \"#\" }] },\n        { width: 100, id: \"b\", header: [{ text: \"Title\" }] },\n        { width: 200, id: \"c\", header: [{ text: \"Name\" }] },\n        { width: 200, id: \"d\", header: [{ text: \"Address\" }] }\n    ],\n    data: dataset\n});\n```\n\n----------------------------------------\n\nTITLE: Attaching Event Listener in DHTMLX\nDESCRIPTION: Demonstrates how to attach an event listener to a DHTMLX component using the events.on() method. The function takes the event name and a handler function as parameters.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/guides/events_guide.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncomponent.events.on(\"eventName\", function() {\n    do_something();\n});\n```\n\n----------------------------------------\n\nTITLE: Destructing DHTMLX Grid Instance - JavaScript\nDESCRIPTION: Destroys the grid instance, releasing all occupied DOM elements, events, and resources. The destructor method is called on the grid when it is no longer needed, preventing memory leaks during dynamic UI updates.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/usage.md#2025-04-22_snippet_49\n\nLANGUAGE: JavaScript\nCODE:\n```\ngrid.destructor();\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX Layout Configuration\nDESCRIPTION: Creates a layout object with specific dimensions and structure including rows and columns for toolbar, grid and chart components. Configures cell properties like width, padding and styling.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tutorial/basic_application/step2.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar layout = new dhx.Layout(\"layout\", {  \n    height: \"700px\", // it's important to set the height of the layout\n    width: \"1600px\",\n    rows: [\n        {    \n            id: \"toolbar-cell\", //here the toolbar will be placed\n            gravity: false, //remove automatic cell stretching\n        }, \n        {\n            cols: [ \n                {\n                    id: \"grid-cell\", //here the grid will be placed\n                    width: \"65%\" // width in % for this cell\n                },\n                {\n                    css: \"dhx_widget--bg_gray\", \n                    // pass the css class to make the background gray\n                    id: \"chart-cell\", //here the chart will be placed\n                    width: \"35%\", // width in% for this cell\n                    padding: \"20px\" // padding inside the cell\n                }\n            ]\n        }\n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: Handling beforeFilter Event in JavaScript Grid\nDESCRIPTION: This snippet demonstrates how to attach an event handler to the beforeFilter event of a Grid component. The handler logs the column ID and filter value, and can optionally block the filtering process.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_beforefilter_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngrid.events.on(\"beforeFilter\", (value, colId) => {\n    console.log(\"The\", colId, \"column is filtered by\", value, \"value\");\n    // return false;\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX Calendar with HTML and JavaScript\nDESCRIPTION: This snippet demonstrates how to include DHTMLX Calendar files, create a container, and initialize the calendar with basic configuration options. It shows the minimal setup required to use the calendar component in a web page.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar2/how_to_start.mdx#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<html>\n\n<head>\n    <title>How to Start with dhtmlxCalendar</title>\n    <!-- includes JS/CSS files from Calendar package -->\n    <script type=\"text/javascript\" src=\"../../codebase/calendar.js\"></script>\n    <link rel=\"stylesheet\" href=\"../../codebase/calendar.css\">\n</head>\n\n<body>\n    <!-- component container -->\n    <div id=\"calendar_container\"></div>\n\n    <script>\n        const calendar = new dhx.Calendar(\"calendar_container\", { //creating dhtmlxCalendar\n                css: \"dhx_widget--bordered\", //configuration options\n                mode: \"calendar\", //configuration options\n        });\n    </script>\n</body>\n\n</html>\n```\n\n----------------------------------------\n\nTITLE: Creating Window Component View in DHTMLX Optimus\nDESCRIPTION: Shows how to create a view based on DHTMLX Window component. The example includes initialization with configuration options and handling of lifecycle events.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/optimus_guides/index.md#2025-04-22_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nimport { View } from \"dhx-optimus\";\n\nexport class WindowView extends View {\n    init() {\n        return this.window = new dhx.Window({\n            title: \"DHX Window\",\n            resizable: true,\n            movable: true\n        });\n    }\n    ready() {\n        console.log(\"DHX Window is ready\");\n    }\n    destroy() {\n        console.log(\"DHX Window is destroy\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic DHTMLX Calendar Initialization\nDESCRIPTION: Complete HTML template showing how to initialize a basic DHTMLX Calendar. It includes necessary file references and creates a calendar within a container.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar/how_to_start.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n    <head>\n        <title>How to start with DHTMLX Calendar</title>         \n        <script type=\"text/javascript\" src=\"../../codebase/calendar.js\"></script>\n        <link rel=\"stylesheet\" href=\"../../codebase/calendar.css\">\n    </head>\n    <body>\n        <div id=\"calendar_container\"></div>\n        <script>\n            // creating Calendar \n            const calendar = new dhx.Calendar(\"calendar_container\");\n        </script>\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Including DHTMLX Suite Source Files - HTML\nDESCRIPTION: This snippet shows the minimal HTML required to include the dhtmlxSuite JavaScript and CSS files necessary for using DHTMLX UI components. suite.js and suite.css must be present in the specified relative path for the library to function. These lines should be placed within the <head> section of the HTML file.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tabbar/init.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script type=\\\"text/javascript\\\" src=\\\"../../codebase/suite.js\\\"></script>\\n<link rel=\\\"stylesheet\\\" href=\\\"../../codebase/suite.css\\\">\n```\n\n----------------------------------------\n\nTITLE: Linking Two Calendars for Date Range Selection\nDESCRIPTION: Demonstrates how to link two calendar instances to create a date range picker, where the first calendar selects the start date and the second calendar selects the end date.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar/operating_calendar.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst calendar = new dhx.Calendar(\"calendar1\", { css: \"dhx_calendar--bordered\" });\nconst calendar2 = new dhx.Calendar(\"calendar2\", { css: \"dhx_calendar--bordered\" });\n\ncalendar.link(calendar2);\n\ncalendar.events.on(\"change\", function (date) {\n    document.querySelector(\"#resultFrom\").innerHTML = \n        \"Date from: \" + calendar.getValue() + \"</br>\";\n});\n\ncalendar2.events.on(\"change\", function (date) {\n    document.querySelector(\"#resultTo\").innerHTML = \n        \"Date to: \" + calendar2.getValue() + \"</br>\";\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX Grid with Data Array in JavaScript\nDESCRIPTION: This snippet demonstrates how to initialize a DHTMLX Grid with a dataset array. It shows the structure of data objects including properties like country, population, and yearly change.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_data_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst dataset = [\n    {\n        \"country\": \"China\",\n        \"population\": \"1415045928\",\n        \"yearlyChange\": \"0.0039\",\n        \"netChange\": \"5528531\",\n        \"id\": \"1\"\n    },\n    {\n        \"country\": \"India\",\n        \"population\": \"1354051854\",\n        \"yearlyChange\": \"0.0111\",\n        \"netChange\": \"14871727\",\n        \"id\": \"2\"\n    },\n    // more columns\n];\n\nconst grid = new dhx.Grid(\"grid_container\", {\n    columns: [\n        // columns config\n    ],\n    data: dataset\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Avatar Control to DHTMLX Form\nDESCRIPTION: This snippet demonstrates how to initialize a DHTMLX Form with an Avatar control. It includes configuration for label, placeholder, and initial value.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/avatar.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst form = new dhx.Form(\"form_container\", {\n    rows: [\n        {\n            type: \"avatar\",\n            name: \"avatar\",\n            required: true,\n            labelWidth: 140,\n            label: \"Employee photo\",\n            labelPosition: \"top\",\n            placeholder: \"Add a photo\",\n            value: {\n                src: \"https://server.domain/upload/image.jpg\"\n            }\n        }\n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: Including DHTMLX Suite Source Files - HTML\nDESCRIPTION: This snippet shows the required HTML elements to include the DHTMLX Suite library files in your project. It demonstrates adding suite.js and suite.css to the page header. These files are prerequisites for using any DHTMLX Suite components, including the List. The snippet should be placed inside the <head> section of your HTML file.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/list/initialization.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script type=\\\"text/javascript\\\" src=\\\"../../codebase/suite.js\\\"></script>\\n<link rel=\\\"stylesheet\\\" href=\\\"../../codebase/suite.css\\\">\n```\n\n----------------------------------------\n\nTITLE: Grid Data Operations\nDESCRIPTION: Implementation of Grid component with GET and PUT operations for data retrieval and updates\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/integration/suite_and_backend.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Grid operations using GET and PUT methods\n```\n\n----------------------------------------\n\nTITLE: Handling Text Input Validation Events in DHTMLX Form\nDESCRIPTION: Example showing how to attach an event handler for the beforeValidate event on a text form control. The handler receives the input value and can return false to prevent default validation.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/text/text_beforevalidate_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"text\").events.on(\"beforeValidate\", function(value) {\n    console.log(\"beforeValidate\", value);\n    return true;\n});\n```\n\n----------------------------------------\n\nTITLE: Attaching beforeRowShow Event Handler in JavaScript\nDESCRIPTION: This code snippet demonstrates how to attach an event handler for the beforeRowShow event of a Grid component. The event fires before a row is shown on a page and allows preventing the row from being displayed by returning false.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_beforerowshow_event.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ngrid.events.on(\"beforeRowShow\", (row) => {\n    // your logic here\n    return false;\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Toolbar Buttons with Data Parser\nDESCRIPTION: Demonstrates how to configure toolbar buttons by parsing a JSON structure. Each button is defined with properties like id, icon, and value. The example shows the configuration for Load and Clear buttons using Material Design Icons.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tutorial/basic_application/step3.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst toolbar = new dhx.Toolbar();\ntoolbar.data.parse([\n    {\n      \"id\": \"load\",\n      \"icon\": \"mdi mdi-download\",\n      \"value\": \"Load\"\n    },\n    {\n      \"id\": \"clear\",\n      \"icon\": \"mdi mdi-delete\",\n      \"value\": \"Clear\"\n    }\n      // more buttons\n\n]);\n```\n\n----------------------------------------\n\nTITLE: Updating DataCollection Item in JavaScript\nDESCRIPTION: Demonstrates how to update properties of an existing item in a DataCollection using the update() method. The method takes an item ID and an object containing the new properties to be updated.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/data_collection/api/datacollection_update_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncomponent.data.update(123, { text:\"New text\" });\n```\n\n----------------------------------------\n\nTITLE: Handling Grid Cell Right Click Event in JavaScript\nDESCRIPTION: Example demonstrating how to attach an event listener for right-click events on grid cells. The event handler receives row and column objects containing configuration data, along with the native MouseEvent object.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_cellrightclick_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngrid.events.on(\"cellRightClick\", (row, column, event) => {\n     // your logic here\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Complex Layout with Multiple Views\nDESCRIPTION: Demonstrates creating a layout with multiple nested views using DHTMLX Layout component and show() method.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/optimus_guides/index.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { View } from \"dhx-optimus\";\n\nimport { ToolbarView } from \"./ToolbarView\";\nimport { DataView } from \"./content/DataView\";\n\nexport class TopLayout extends View {\n    init() {\n        this.layout = new dhx.Layout(null, {\n            rows: [\n                {\n                    id: \"toolbar\",\n                    height: \"content\",\n                    init: cell => this.show(cell, ToolbarView),\n                },\n                {\n                    id: \"content\",\n                    init: cell => this.show(cell, DataView, {\n                        dataCollection: this.params.persons,\n                    }),\n                },\n            ],\n        });\n        return this.layout;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Multi-selection and Drag-and-Drop in DataView\nDESCRIPTION: Demonstrates how to enable both multi-selection and drag-and-drop functionality for DataView items.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/dataview/configuration.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst dataview = new dhx.DataView(\"dataview_container\", { \n    dragMode:\"source\",\n    multiselection:true\n});\n```\n\n----------------------------------------\n\nTITLE: Exporting Chart to PNG in JavaScript\nDESCRIPTION: Demonstrates how to export a DHTMLX chart to PNG format using both default settings and custom configuration options. The method supports customization of export URL, file name, theme, styles, header, and footer.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/chart/api/export/chart_png_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// default export\nchart.export.png();\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// export with config settings\nchart.export.png({\n    url: \"https://export.dhtmlx.com/chart/png/8.0.0\",\n    name: \"result.png\"\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX Combo Box with Custom Item Height in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a new Combo Box instance with a custom item height. The 'itemHeight' config is set to 50 pixels, which will make each option in the dropdown list 50 pixels tall.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/combobox/api/combobox_itemheight_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst combo = new dhx.Combobox(\"combo_container\",{\n    itemHeight:50\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Textarea Control Properties in DHTMLX Form\nDESCRIPTION: This code snippet demonstrates the complete property structure for configuring a Textarea control in DHTMLX Form. It includes all available properties such as basic settings, validation options, masking capabilities, layout properties, and messaging configurations.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/textarea/api_textarea_properties.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    type: \"textarea\",\n    name?: string,\n    id?: string,\n    value?: string,\n    numberMask?:\n        | {\n                prefix?: string; // \"\" by default (before the value)\n                suffix?: string; // \"\" by default (after the value)\n                groupSeparator?: string; // \",\" by default\n                decSeparator?: string; // \".\" by default\n                allowNegative?: boolean; // true by default\n                maxIntLength?: number; // 16 by default (for the number type)\n                maxDecLength?: number; // 2 by default (for the number type)\n                minDecLength?: number; // 0 by default\n            }\n        | boolean,\n    patternMask?:\n        |   {\n                pattern: ((value: string | number) => string) | string;\n                charFormat?: {\n                    [char: string]: RegExp;\n                };\n            }\n        | string,\n    \n    css?: string,\n    disabled?: boolean, // false by default\n    height?: string | number | \"content\", // \"content\" by default\n    hidden?: boolean, // false by default\n    padding?: string | number, \n    required?: boolean, // false by default\n    validation?: string | (input: string | number) => boolean,\n    width?: string | number | \"content\", // \"content\" by default\n\n    maxlength?: number | string,\n    minlength?: number | string,\n    placeholder?: string, \n    readOnly?: boolean, // false by default\n    resizable?: boolean, // false by default\n\n    hiddenLabel?: boolean, // false by default\n    label?: string,\n    labelPosition?: \"left\" | \"top\", // \"top\" by default\n    labelWidth?: string | number,\n\n    helpMessage?: string,\n    preMessage?: string,\n    successMessage?: string,\n    errorMessage?: string,\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Predefined Validation Rule in DHTMLX Form Input (JSX)\nDESCRIPTION: Shows how to use a predefined validation rule (email validation in this case) for an input field in a DHTMLX form.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/work_with_form.md#2025-04-22_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\n{\n    type: \"input\",\n    inputType: \"text\",\n    label: \"Email\",\n    placeholder: \"jd@mail.name\",\n    validation: \"email\"\n}\n```\n\n----------------------------------------\n\nTITLE: Including Dependencies and Initializing App in HTML - HTML\nDESCRIPTION: This full HTML example shows inclusion of the DHTMLX Suite library via CDN, along with local app.js and app.css files for application logic and styling. The application is initialized by creating an instance of the custom MyApp class and calling its render() method with the selector of the previously defined container. Both JavaScript and CSS dependencies must be loaded for the app to function.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/optimus_guides/index.md#2025-04-22_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n    <head>\\n        <title>dhtmlxOptimus guide</title>\\n        <!-- Suite -->\\n        <script type=\\\"text/javascript\\\" src=\\\"https://cdn.dhtmlx.com/suite/edge/suite.js\\\"></script>\\n        <link rel=\\\"stylesheet\\\" href=\\\"https://cdn.dhtmlx.com/suite/edge/suite.css\\\" />\\n        <!-- App -->\\n        <script type=\\\"text/javascript\\\" src=\\\"./app.js\\\"></script>\\n        <link rel=\\\"stylesheet\\\" href=\\\"./app.css\\\" />\\n    </head>\\n    <body>\\n        <section id=\\\"app\\\" class=\\\"main__container\\\"></section>\\n        <script>\\n            const app = new optimusguide.MyApp();\\n            app.render(\\\"#app\\\");\\n        </script>\\n    </body>\\n</html>\n```\n\n----------------------------------------\n\nTITLE: Handling Input change Event in DHTMLX Form\nDESCRIPTION: This example demonstrates how to attach an event handler to the change event of an Input control in a DHTMLX Form. The handler logs the new value to the console whenever the input value changes.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/input/input_change_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"input\").events.on(\"change\", function(value) {\n    console.log(\"change\", value);\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX Chart with HTML and JavaScript\nDESCRIPTION: This snippet demonstrates how to set up a basic HTML structure and initialize a DHTMLX Chart. It includes the necessary source files, creates a container, and initializes the Chart with configuration options.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/chart/initialization.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n    <head>\n        <title>How to start with DHTMLX Chart</title>         \n        <script type=\"text/javascript\" src=\"../../codebase/chart.js\"></script>\n        <link rel=\"stylesheet\" href=\"../../codebase/chart.css\">\n    </head>\n    <body>\n        <div id=\"chart_container\"></div>\n        <script>\n            // creating Chart \n            const chart = new dhx.Chart(\"chart_container\", {\n                type: \"bar\",\n                scales: {\n                    \"bottom\" : {\n                        text: \"month\"\n                    },\n                    \"left\" : {\n                        maxTicks: 10,\n                        max: 100,\n                        min: 0\n                    }\n                },\n                series: [\n                    {\n                        id: \"A\",\n                        value: \"company C\",\n                        color: \"#5E83BA\",                        \n                        fill: \"#5E83BA\"                        \n                    }\n                ]\n            });\n        </script>\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Setting License Plate Format Mask in DHTMLX Form Input (JSX)\nDESCRIPTION: Shows how to set a pattern mask for license plate input in a DHTMLX form. The mask combines letters, numbers, and symbols.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/work_with_form.md#2025-04-22_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n{\n    type: \"input\",\n    patternMask: \"0-aaa-000\",\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic View Switching in Layout with State Observation\nDESCRIPTION: Combines Layout initialization with dynamic view switching based on state changes. This approach observes the global active state and shows different views in the content cell depending on which tab is active.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/optimus_guides/index.md#2025-04-22_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nimport { View } from \"dhx-optimus\";\n\nimport { ToolbarView } from \"./ToolbarView\";\nimport { DataView } from \"./content/DataView\";\nimport { ChartView } from \"./content/ChartView\";\nimport { GridView } from \"./content/GridView\";\n\nexport class TopLayout extends View {\n    init() {\n        return (this.layout = new dhx.Layout(null, {\n            rows: [\n                {\n                    id: \"toolbar\",\n                    height: \"content\",\n                    init: cell => this.show(cell, ToolbarView),\n                },\n                {\n                    id: \"content\",\n                }\n            ]\n        }));\n    }\n\n    ready() {\n        this.observe(\n            state => state.active,\n            active => {\n                switch (active) {\n                    case \"first\":\n                        this.show(this.layout.getCell(\"content\"), DataView);\n                        break;\n                    case \"second\":\n                        this.show(this.layout.getCell(\"content\"), ChartView);\n                        break;\n                    case \"third\":\n                        this.show(this.layout.getCell(\"content\"), GridView);\n                        break;\n                }\n            }\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Columns Configuration in DHTMLX Grid\nDESCRIPTION: Use the setColumns() method to specify the configuration of Grid columns dynamically. It takes an array of column objects as a parameter.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/usage.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngrid.setColumns([\n    { id: \"a\", header: [{ text: \"New header for column a\" }] },\n    { id: \"b\", header: [{ text: \"New header for column b\" }] },\n    // more columns objects\n]);\n```\n\n----------------------------------------\n\nTITLE: Initializing TreeGrid Mode in DHTMLX Grid\nDESCRIPTION: Basic initialization of Grid component in TreeGrid mode with column configuration and dataset loading.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/treegrid_mode.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst Grid = new dhx.Grid(\"grid_container\", {\n    type: \"tree\",\n    columns: [\n        { id: \"name\", header: [{ text: \"Name\" }], gravity: 1.5 },\n        { id: \"native\", type: \"string\", header: [{ text: \"Native name\" }], gravity: 1.5 },\n        { id: \"capital\", type: \"string\", header: [{ text: \"Capital\" }] },\n        { id: \"currency\", type: \"string\", header: [{ text: \"Currency\" }] }\n    ],\n    data: dataset,\n    autoWidth: true\n});\n```\n\n----------------------------------------\n\nTITLE: Including DHTMLX Suite Scripts and Styles in HTML\nDESCRIPTION: This snippet demonstrates how to include the essential JS and CSS files of the DHTMLX Suite in your HTML document. Both files ('suite.js' and 'suite.css') are required as prerequisites for using any DHTMLX components, including Pagination and related widgets. The script and link tags should reside within the head section of your HTML.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/pagination/init.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script type=\\\"text/javascript\\\" src=\\\"../../codebase/suite.js\\\"></script>\\n<link rel=\\\"stylesheet\\\" href=\\\"../../codebase/suite.css\\\">\n```\n\n----------------------------------------\n\nTITLE: Implementing Toolbar with State Management in DHTMLX Optimus\nDESCRIPTION: Creates a toolbar view that interacts with the global state. The component listens for clicks and fires events to update the global state, while also observing state changes to update the toolbar's active button.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/optimus_guides/index.md#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport { View } from \"dhx-optimus\";\n\nexport class ToolbarView extends View {\n    init() {\n        return (this.toolbar = new dhx.Toolbar(null, {...}));\n    }\n\n    ready() {\n        this.observe(\n            state => state.active,\n            active => {\n                this.toolbar.data.update(active, { active: true });\n            }\n        );\n\n        this.toolbar.events.on(\"click\", id => {\n            this.fire(\"viewChange\", [id]);\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling afterChangeProperties Event in DHTMLX Combo Box (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to attach an event handler to the afterChangeProperties event of a Combo Box control in a DHTMLX form. The event fires after configuration attributes of the control have been changed dynamically and provides access to the modified properties.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/combo/combo_afterchangeproperties_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"combo\").events.on(\"afterChangeProperties\", function(properties) {\n    console.log(\"afterChangeProperties\", properties);\n});\n```\n\n----------------------------------------\n\nTITLE: Searching Items in DataCollection using Function\nDESCRIPTION: Demonstrates how to search for items in a DataCollection using a custom function that checks for specific text values\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/data_collection/api/datacollection_find_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst item = component.data.find(function(item){\n    if(item.text===\"Manager\"||item.text===\"Marketer\"){return true}\n});\n```\n\n----------------------------------------\n\nTITLE: Attaching Event Listener in JavaScript Tabbar\nDESCRIPTION: Demonstrates how to attach an event listener to a Tabbar component using the events.on() method. The example shows attaching an afterClose event handler that logs the tab ID to the console.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tabbar/events.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntabbar.events.on(\"afterClose\", function(id){\n    console.log(id);\n});\n```\n\n----------------------------------------\n\nTITLE: Handling cellClick Event in DHTMLX Grid (JavaScript)\nDESCRIPTION: This snippet demonstrates how to attach an event listener for the cellClick event in a DHTMLX Grid. The event fires when a user clicks on a grid cell and provides information about the clicked row, column, and the original mouse event.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_cellclick_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngrid.events.on(\"cellClick\", (row, column, event) => {\n     // your logic here\n});\n```\n\n----------------------------------------\n\nTITLE: HTML Tutorial Links and Descriptions\nDESCRIPTION: HTML markup showcasing two main tutorials: Basic Application and Binding Components. Each tutorial section includes a title link and descriptive text about the tutorial contents.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tutorial/index.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"item-tutorial\">\n       <div class=\"central-part-tutorial\" style=\"margin-top:20px;\"><a class=\"link-to-tutorial\" href=\"tutorial/basic_application.md\">Basic Application</a><div>This tutorial describes how to create a basic application and helps to understand the main principles of working with DHTMLX components.<br/><br/><i>The main elements of the app:  layout, toolbar, grid, chart.</i></div></div>\n</div>\n\n<div class=\"item-tutorial\" style=\"margin-top:20px;\">\n       <div class=\"central-part-tutorial\"><a class=\"link-to-tutorial\" href=\"tutorial/binding_components.md\">Binding Components</a><div>This tutorial will help you to learn how to edit data in the Grid, add or delete them. The tutorial contains detailed information about the work of individual components, such as a Window, a Form, a Context menu.<br/><br/><i>The main elements of the app:  form, window, contextMenu, grid.</i></div></div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Attaching Event Listener in DataView\nDESCRIPTION: Demonstrates how to attach a click event listener to a DataView component. The handler logs the ID of the clicked item to the console.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/dataview/events.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndataview.events.on(\"click\", function(id, e){\n   console.log(\"The item with the id \"+ dataview.selection.getId(id) +\" was clicked.\");\n});\n```\n\n----------------------------------------\n\nTITLE: Window View with State Observation\nDESCRIPTION: Extends the Window component view with state observation to show or hide the window based on the active state. The window is displayed when the active state is 'second' and hidden otherwise.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/optimus_guides/index.md#2025-04-22_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nimport { View } from \"dhx-optimus\";\n\nexport class WindowView extends View {\n    init() {\n        return this.window = new dhx.Window({ ... });\n    }\n    ready() {\n        console.log(\"DHX Window is ready\");\n        this.observe(\n            state => state.active,\n            active => {\n                if (active === \"second\") {\n                    this.window.show();\n                } else {\n                    this.window.hide();\n                }\n            }\n        );\n    }\n    destroy() { ... }\n}\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Form Controls with forEach in DHTMLX Form (JavaScript)\nDESCRIPTION: Demonstrates how to use the forEach method to iterate through all controls of a DHTMLX form. The method takes a callback function that receives the control item, its index, and the array of all controls.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/form_foreach_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.forEach(function(item, index, array) {\n    console.log(\"This is the form control: \", item);\n    console.log(\"This is the index of form control : \", index);\n    console.log(\"This is the array with form controls: \", array);\n});\n```\n\n----------------------------------------\n\nTITLE: Sending Form Data to Server in JavaScript using DHTMLX Form Component\nDESCRIPTION: Example demonstrating how to use the send() method to submit form data to a server with a POST request. The method returns a promise object and supports different HTTP methods.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/form_send_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst send = form.send(\"myserver.com\", \"POST\");\n```\n\n----------------------------------------\n\nTITLE: Defining DHTMLX Form Configuration Object - JavaScript\nDESCRIPTION: This code defines the configuration object for a DHTMLX Form, specifying controls such as input fields, checkboxes, and select boxes organized into two columns. Dependencies include DHTMLX Form (dhx.Form) and a predefined countries array for the select box options. Required parameters are control types, required flags, unique IDs, and labels. Inputs are user-provided field values; outputs depend on the form usage. All fields' attributes are customizable for flexible form creation.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tutorial/binding_components/step3.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nvar formConfig = {\n    gravity: false,\n    cols: [\n        {\n            padding: 10,\n               rows: [\n                  { type: \"input\", hidden: true, gravity: false, id: \"id\"},\n                  {\n                   type: \"input\", gravity: false, label: \"First Name\",\n                       required: true, id: \"first_name\"\n                },\n                {\n                      type: \"input\",gravity: false,required: true,\n                     label: \"Email\", id: \"email\", validation: \"email\"\n                },\n                {\n                      type: \"checkbox\", gravity: false, label: \"Premium\",\n                       id: \"vip\", labelInline: true \n                }\n               ]\n        },\n        {\n            padding: 10,\n            rows:[\n                { type: \"input\", label: \"Last Name\", required: true,\n                     gravity: false, id: \"last_name\"\n                },\n                {\n                   id: \"country\", gravity: false, type: \"select\",\n                     required: true, label: \"Country\", options: countries\n                }\n            ]\n        }\n    ]\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Dark Theme Variables in DHTMLX Suite - CSS\nDESCRIPTION: This CSS code snippet demonstrates how to configure the DHTMLX Suite components to use a \"dark\" theme by overriding root and theme-specific CSS variables within a [data-dhx-theme='dark'] block. It sets font colors, border colors, color schemes, and service variables targeted at Toolbar, Grid, Calendar, and Slider widgets to maintain a coherent dark appearance. No external dependencies are required beyond DHTMLX Suite; the variables here should be included in a global or theme-specific CSS file. There are no required parameters, but variables may reference each other or default theme variables. The code assumes integration with DHTMLX Suite's theming infrastructure and applies only when the dark theme attribute is present.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/themes/dark_theme.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n[data-dhx-theme='dark'] {\n    /* font */\n    --dhx-font-color-primary: var(--dhx-color-white);\n    --dhx-font-color-secondary: rgba(255, 255, 255, .7);\n    --dhx-font-color-additional: rgba(255, 255, 255, .5);\n    --dhx-font-color-disabled: rgba(255, 255, 255, .5);\n    --dhx-font-color-contrast: var(--dhx-color-white);\n    --dhx-font-color-contrast-disabled: var(--dhx-font-color-disabled);\n    /* end font */\n\n    /* border */\n    --dhx-border-color: rgba(255, 255, 255, 0.3);\n    --dhx-border-color-focused: rgba(255, 255, 255, 0.5);\n    /* end border */\n\n    /* color scheme */\n    --dhx-l-secondary: 60%; /* lightness contrast theme offset */\n\n    --dhx-h-background: 226;\n    --dhx-s-background: 12%;\n    --dhx-l-background: 20%;\n    /* end color scheme */\n\n    /* theme colors */\n    --dhx-background-primary: hsl(var(--dhx-h-background), var(--dhx-s-background), var(--dhx-l-background));\n    --dhx-background-secondary: hsl(var(--dhx-h-background), var(--dhx-s-background), calc(var(--dhx-l-background) + 8%));\n    --dhx-background-additional: hsl(var(--dhx-h-background), var(--dhx-s-background), calc(var(--dhx-l-background) + 12%));\n    /* end theme colors */\n\n    /* DHTMLX Toolbar service variables*/\n    --dhx-s-toolbar-background: var(--dhx-color-black);\n    --dhx-s-toolbar-button-background-hover: rgba(255, 255, 255, .07);\n    --dhx-s-toolbar-button-background-active: rgba(255, 255, 255, .15);\n    /* end DHTMLX Toolbar service variables */\n\n    /* DHTMLX Grid service variables*/\n    --dhx-s-grid-header-background: #212329;\n    --dhx-s-grid-selection-background: var(--dhx-color-gray-100);\n    /* end DHTMLX Grid service variables*/\n    \n    /* DHTMLX Calendar service variables*/\n    --dhx-s-calendar-muffled: .6;\n    /* end DHTMLX Calendar service variables*/\n\n    /* DHTMLX Slider service variables*/\n    --dhx-s-tick-font-size: calc(var(--dhx-font-size-small) / 1.2);\n    /* end DHTMLX Slider service variables*/\n}\n```\n\n----------------------------------------\n\nTITLE: Individual Theme Customization\nDESCRIPTION: Comprehensive example demonstrating how to customize a specific theme (light theme) with custom color values and initialize a calendar component with the custom theme.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/themes/change_base_themes.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<style>\n    [data-dhx-theme='light'] {\n        /* border */\n        --dhx-border-color: #ced4da;\n        /* end border */\n\n        /* color scheme */\n        --dhx-h-primary: 210;\n        --dhx-s-primary: 30%;\n        --dhx-l-primary: 20%;\n\n        --dhx-h-secondary: 185;\n        --dhx-s-secondary: 5%;\n        --dhx-l-secondary: 50%;\n\n        --dhx-h-danger: 6;\n        --dhx-s-danger: 78%;\n        --dhx-l-danger: 57%;\n\n        --dhx-h-success: 168;\n        --dhx-s-success: 77%;\n        --dhx-l-success: 42%;\n\n        --dhx-l-background: 98%;\n        /* end color scheme */\n    }\n</style>\n\n<script>\n    const firstDate = new Date();\n    const secondDate = new Date(Date.now() + 1000000000);\n    \n    const calendar = new dhx.Calendar(\"calendar\", {\n        range: true,\n        value: [firstDate, secondDate],\n        css: \"custom dhx_widget--bordered\"\n    });\n    \n    dhx.setTheme(\"light\");\n</script>\n```\n\n----------------------------------------\n\nTITLE: Attaching Event Listener for afterChangeProperties in DHTMLX Form\nDESCRIPTION: This snippet demonstrates how to attach an event listener for the afterChangeProperties event in a DHTMLX Form. The event fires after configuration attributes of a Form control have been changed dynamically.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/form_afterchangeproperties_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.events.on(\"afterChangeProperties\", function(name, properties) {\n    console.log(\"afterChangeProperties\", name,  properties);\n});\n```\n\n----------------------------------------\n\nTITLE: Using getCell Method in JavaScript Layout\nDESCRIPTION: Demonstrates how to use the getCell method to retrieve a cell configuration object by its ID. The method returns an object containing properties like gravity, id, and header.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/layout/api/layout_getcell_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlayout.getCell(\"toolbar\");\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{gravity: false, id: \"toolbar\", header: \"Header\"}\n```\n\n----------------------------------------\n\nTITLE: Handling Select Control Value Changes in DHTMLX Form\nDESCRIPTION: Example showing how to attach a beforeChange event handler to a Select form control. The handler logs the new value and returns true to allow the change. The event fires before the control's value changes and can prevent the change by returning false.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/select/select_beforechange_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"select\").events.on(\"beforeChange\", function(value) {\n    console.log(\"beforeChange\", value);\n    return true;\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing App Class for DHTMLX Optimus - JavaScript\nDESCRIPTION: This JavaScript snippet shows how to set up the main App class for a DHTMLX Optimus application. It imports custom CSS styles and the App base class from the framework, then defines a new class (MyApp) that extends App. This class structure is required as the bootstrapping entry point for the project.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/optimus_guides/index.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport \\\"./assets/css/index.css\\\"; // import css styles\\nimport { App } from \\\"dhx-optimus\\\";\\n\\nexport class MyApp extends App {}\n```\n\n----------------------------------------\n\nTITLE: Getting Column Configuration in DHTMLX Grid\nDESCRIPTION: Use the getColumn() method to return an object with attributes of a specific column by its id.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/usage.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst column = grid.getColumn(\"b\"); // ->\n// -> { width: 100, id: \"b\", header: Array(1), $cellCss: {…}, type: \"string\" }\n```\n\n----------------------------------------\n\nTITLE: Getting Form Values with getValue() Method in JavaScript\nDESCRIPTION: Demonstrates how to retrieve the current values of form controls using the getValue() method. The method returns an object containing control names/IDs and their values.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/form_getvalue_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst state = form.getValue();\n// -> {\"name\":\"John Doe\"}\n```\n\n----------------------------------------\n\nTITLE: Implementing Delete Function for DHTMLX Grid\nDESCRIPTION: Function to remove selected items from the grid while maintaining proper selection state after deletion.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tutorial/binding_components/step6.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction deleteItem() {\n    var item = grid.selection.getCell();\n    var index = grid.data.getIndex(item.row.id);\n    grid.data.remove(item.row.id);\n    index = index > grid.data.getLength() - 1 ? grid.data.getLength() - 1 : index;\n    grid.selection.setCell(grid.data.getId(index));\n};\n```\n\n----------------------------------------\n\nTITLE: Disabling and Enabling Slider in JavaScript\nDESCRIPTION: Demonstrates how to disable and enable a slider using the disable() and enable() methods of the Slider API.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/slider/usage.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// disable a slider on a page\nslider.disable();\n\n// make the slider active again\nslider.enable();\n```\n\n----------------------------------------\n\nTITLE: Basic DataCollection save() Usage\nDESCRIPTION: Examples showing how to save DataCollection changes to a server using either a URL string or DataProxy object.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/data_collection/api/datacollection_save_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngrid.data.save(\"http://userurl/\");\n\n//or\ngrid.data.save(new DataProxy({url:\"http://userurl/\"}));\n```\n\n----------------------------------------\n\nTITLE: Creating Toolbar View using DHTMLX Suite Component JavaScript\nDESCRIPTION: Defines a `ToolbarView` class extending `dhx-optimus`'s `View`. Its `init()` method initializes a DHTMLX Suite `dhx.Toolbar` instance with specific configuration (CSS, items) and returns the toolbar object. This demonstrates integrating DHTMLX Suite components as views within an Optimus application. The container argument for the Toolbar constructor is `null`, as Optimus handles the rendering.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/optimus_guides/how_to_start_optimus.md#2025-04-22_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nimport { View } from \"dhx-optimus\";\n\nexport class ToolbarView extends View {\n    init() {\n        this.toolbar = new dhx.Toolbar(null, {\n            css: \"toolbar\",\n            data: [\n                {\n                    type: \"spacer\",\n                },\n                {\n                    id: \"first\",\n                    value: \"First\",\n                    group: \"views\",\n                },\n                {\n                    id: \"second\",\n                    value: \"Second\",\n                    group: \"views\",\n                },\n                {\n                    id: \"third\",\n                    value: \"Third\",\n                    group: \"views\",\n                },\n                {\n                    type: \"spacer\",\n                },\n            ],\n        });\n\n        return this.toolbar;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting Calendar selection to HTML input in JavaScript\nDESCRIPTION: Demonstrates how to initialize a Calendar component and connect its 'Change' event to update an input field with the selected date in yyyy-mm-dd format.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar2/functionality_and_features/events.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar calendar = new dhx.Calendar(\"calendar_container\");\ncalendar.events.on(\"Change\",(date)=>{ \n    document.getElementById(\"date\").value = date.getFullYear() +\n        \"-\" + (date.getMonth() + 1) + \"-\" +date.getDate();\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Grid Row Hide Event in JavaScript\nDESCRIPTION: Example showing how to attach an event handler to the afterRowHide event of a DHTMLX Grid. The event fires after a row is hidden and receives the row configuration object as a parameter.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_afterrowhide_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngrid.events.on(\"afterRowHide\", (row) => {\n    // your logic here\n});\n```\n\n----------------------------------------\n\nTITLE: Updating ComboBox Options in JavaScript\nDESCRIPTION: Demonstrates how to update existing options in a ComboBox using the update() method of the Data Collection API.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/combobox/work_with_combo.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\ncombo.data.update(\"option_id\",{\n    value:\"Russia\", src: \"../common/flags/ru.png\"\n});\n```\n\n----------------------------------------\n\nTITLE: Setting List Height in DHTMLX JavaScript Library\nDESCRIPTION: The examples demonstrate how to set the height of a DHTMLX List component using either a numeric value or a string value with CSS units. By default, the list automatically adjusts to the container height.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/list/api/list_height_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// sets the height as a number\nconst list = new dhx.List(\"list_container\", {height: 700});\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// sets the height as a string value\nconst list = new dhx.List(\"list_container\", {height: \"700px\"});\n```\n\n----------------------------------------\n\nTITLE: Form Visibility Control\nDESCRIPTION: Methods for showing, hiding and checking visibility of forms and form controls\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/work_with_form.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nform.hide();\n```\n\nLANGUAGE: jsx\nCODE:\n```\nform.show();\n```\n\nLANGUAGE: jsx\nCODE:\n```\nform.isVisible(); // -> true/false\n```\n\nLANGUAGE: jsx\nCODE:\n```\nform.isVisible(\"input\"); // -> returns true/false\n```\n\n----------------------------------------\n\nTITLE: Handling Form Change Event in JavaScript\nDESCRIPTION: Example of attaching an event handler to the 'change' event of a form. This event fires whenever the value of any control in the form changes, providing the control name and new value as parameters.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/form_change_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.events.on(\"change\",function(name, new_value){\n    // your code here\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Grid Event Handlers for Item Management\nDESCRIPTION: Adds event handlers for removing and adding items in the Grid view, including positioning of new items relative to selection.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/optimus_guides/how_to_start_optimus.md#2025-04-22_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nthis.on(\"removeItem\", () => {\n    const selected = this.grid.selection.getCell();\n    if (selected) {\n        this.grid.data.remove(selected.row.id);\n    }\n});\n\nthis.on(\"addItem\", () => {\n    const selected = this.grid.selection.getCell();\n    if (selected) {\n        this.grid.data.add({ ...emptyItem }, this.grid.data.getIndex(selected.row.id) + 1);\n    } else {\n        this.grid.data.add({ ...emptyItem }, 0);\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX Grid with Resizable Columns in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a new DHTMLX Grid instance with resizable columns. The 'resizable' option is set to true, allowing users to adjust column widths. The grid is initialized with a container ID, column configuration, and dataset.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_resizable_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst grid = new dhx.Grid(\"grid_container\", {\n    columns: [\n        // columns config\n    ],\n    data: dataset,\n    resizable: true\n});\n```\n\n----------------------------------------\n\nTITLE: View Constructor Methods in DHTMLX Optimus\nDESCRIPTION: Methods provided by the View constructor in DHTMLX Optimus. The init() method is obligatory for initializing and returning the view. ready() implements additional logic after rendering, and destroy() handles view destruction and DOM unmounting.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/optimus_guides/index.md#2025-04-22_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\ninit(): string|DHXWidget\nready(root: HTMLElement)\ndestroy()\n```\n\n----------------------------------------\n\nTITLE: Initializing Grid with autoWidth Configuration\nDESCRIPTION: Example of creating a new Grid instance with autoWidth enabled. This configuration makes columns automatically fit the size of the grid container, considering minWidth/maxWidth column properties if set. Note that this property is ignored when 'adjust' property is used and won't work for columns with explicit width settings.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_autowidth_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst grid = new dhx.Grid(\"grid_container\", {\n    columns: [\n        // columns config\n    ],\n    autoWidth:true,\n    data: dataset\n});\n```\n\n----------------------------------------\n\nTITLE: App Constructor Method in DHTMLX Optimus\nDESCRIPTION: The init() method provided by the App constructor in DHTMLX Optimus. This method is mandatory and is used for initializing available views and component logic within the application.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/optimus_guides/index.md#2025-04-22_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\ninit()\n```\n\n----------------------------------------\n\nTITLE: Basic Grid PDF Export in JavaScript\nDESCRIPTION: Examples showing both default PDF export and export with custom configuration options for DHTMLX Grid. The configuration example demonstrates setting format, scale, header/footer display and theme options.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/export/grid_pdf_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// default export\ngrid.export.pdf();\n\n// export with config settings\ngrid.export.pdf({\n    format: \"A4\",\n    scale: 0.75,\n    displayHeaderFooter: true,\n    theme: \"dark\",\n});\n```\n\n----------------------------------------\n\nTITLE: Using getIndex Method in JavaScript DataCollection\nDESCRIPTION: This snippet demonstrates how to use the getIndex() method of a DataCollection object to retrieve the index of an item by its id. The method takes an id as a parameter and returns the corresponding index.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/data_collection/api/datacollection_getindex_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst index = component.data.getIndex(\"1\"); // -> returns 0\n```\n\n----------------------------------------\n\nTITLE: Initializing Form with Avatar Control and Using getProperties Method\nDESCRIPTION: This snippet demonstrates how to create a Form with an Avatar control and use the getProperties() method to retrieve its configuration attributes.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/avatar/avatar_getproperties_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst form = new dhx.Form(\"form_container\", {\n    rows: [\n        {\n            type: \"avatar\",\n            name:\"avatar\",\n            helpMessage: \"Help information\",\n            required: true,\n            label: \"Avatar\",\n            labelWidth: 140,\n            target: \"https://docs.dhtmlx.com/suite/backend/upload\",\n        }\n    ]\n});\n\nform.getItem(\"avatar\").getProperties();\n```\n\n----------------------------------------\n\nTITLE: Creating a Container for DHTMLX Chart in HTML\nDESCRIPTION: This snippet demonstrates how to create a container element in HTML for initializing DHTMLX Chart. The container is given an id which will be used during Chart initialization.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/chart/initialization.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"chart_container\"></div>\n```\n\n----------------------------------------\n\nTITLE: Rendering Views with init Option in Layout Configuration\nDESCRIPTION: Demonstrates how to render views using the init option in Layout configuration. This approach is useful for static layouts where views won't change during the application lifecycle.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/optimus_guides/index.md#2025-04-22_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nimport { View } from \"dhx-optimus\";\n\nimport { ToolbarView } from \"./ToolbarView\";\nimport { EmptyView } from \"./EmptyView\";\n\nexport class TopLayout extends View {\n    init() {\n        return new dhx.Layout(null, {\n            rows: [\n                {\n                    id: \"toolbar\",\n                    height: \"content\",\n                    init: cell => this.show(cell, ToolbarView),\n                },\n                {\n                    id: \"content\",\n                    init: cell = this.show(cell, EmptyView)\n                }\n            ]\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting DatePicker Properties in JavaScript Form\nDESCRIPTION: Example showing how to modify DatePicker properties dynamically using the setProperties method. This allows changing attributes like editable state, label width, and required status.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/calendar/calendar_setproperties_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"datepicker\").setProperties({\n    editable: true,\n    labelWidth: \"100px\",\n    required: true\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Tree afterCheck Event in JavaScript\nDESCRIPTION: An example demonstrating how to attach an event handler to the afterCheck event of a Tree component. This event fires after an item's checked state changes, providing the index, id, and new value.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree/api/tree_aftercheck_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntree.events.on(\"afterCheck\", function (index, id, value) {\n    console.log(\"afterCheck\", index, id, value);\n});\n```\n\n----------------------------------------\n\nTITLE: Setting DHTMLX Timepicker Value using JavaScript\nDESCRIPTION: Demonstrates setting the value of a DHTMLX Timepicker instance using different data types. The `setValue` method accepts a value which can be a string (HH:MM), a JavaScript Date object, an array ([hour, minute, \"AM/PM\"]), a number (milliseconds since epoch), or an object ({hour: H, minute: M, AM: boolean}).\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/timepicker/api/timepicker_setvalue_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// set the value as a string\ntimepicker.setValue(\"00:39\");\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// set the value as a Date\ntimepicker.setValue(new Date('January 10, 2019 17:54:00'));\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// set the value as an array\ntimepicker.setValue([6,20,\"AM\"]);\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// set the value as a number\ntimepicker.setValue(1559288966422);\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// set the value as an object\ntimepicker.setValue({hour: 10, minute: 50, AM: true});\n```\n\n----------------------------------------\n\nTITLE: Intercepting Toolbar Item Hiding with beforeHide Event in JavaScript\nDESCRIPTION: This snippet demonstrates attaching an event listener to the `beforeHide` event of a DHTMLX Toolbar instance (`toolbar`). The callback function receives the `id` of the toolbar sub-item that is about to be hidden and the native browser `event` object. Returning `false` from this function will prevent the sub-item from being hidden, allowing developers to implement custom logic or validation before the hiding occurs. Returning `true` or nothing allows the default hide action.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/toolbar/api/toolbar_beforehide_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntoolbar.events.on(\"beforeHide\", function(id, event){\n    // your code here\n    return false;\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Edit Window Function for DHTMLX Grid\nDESCRIPTION: Function to open an editing window for modifying existing grid items. It handles row selection, populates form fields with selected data, and displays the window.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tutorial/binding_components/step6.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction openEditWindow(row){\n    dhxWindow.header.data.update(\"title\", {value: \"Editing item\"});\n    form.clear();\n    if (!row){\n        var itemId = grid.data.getId(0);\n        grid.selection.setCell(itemId);\n        row = grid.data.getItem(itemId);\n    }\n    form.setValue(row);\n    dhxWindow.show();\n};\n```\n\n----------------------------------------\n\nTITLE: Exporting Grid Data to CSV in JavaScript\nDESCRIPTION: Demonstrates exporting grid data to a CSV file using the csv() method of the Export module, with custom delimiters.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/usage.md#2025-04-22_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\ngrid.export.csv({\n    name:\"grid_data\", // grid data will be exported to a CSV file named \"grid_data\"\n    rowDelimiter: \"\\t\", // the tab delimiter will be used to separate rows\n    columnDelimiter: \";\" // the semicolon delimiter will be used to separate columns\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Hidden Column in DHTMLX Grid Configuration (JavaScript/JSX)\nDESCRIPTION: This snippet demonstrates how to configure a hidden column in a DHTMLX Grid. The 'hidden' property is set to true for the 'population' column, making it invisible in the grid layout.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/gridcolumn_properties/gridcolumn_hidden_property.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst grid = new dhx.Grid(\"grid_container\", {\n    columns: [\n        { id: \"population\", header: [{ text: \"Population\" }], hidden: true },\n        // more columns configuration objects\n    ],\n    // more options\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Timepicker Values in JavaScript\nDESCRIPTION: Examples of using getValue() method to retrieve time values in different formats. The method can return either string or object values in both 24-hour and 12-hour time formats.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/timepicker/api/timepicker_getvalue_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// return value as a string in the 24-hour format\nconst val1 = timepicker.getValue(); // -> \"00:39\" \n\n// return value as an object in the 24-hour format\nconst val2 = timepicker.getValue(true);// -> {hour: 0, minute: 39}\n\n// return value as a string in the 12-hour format\nconst val3 = timepicker2.getValue(); // -> \"06:00AM\"\n\n// return value as an object in the 12-hour format\nconst val4 = timepicker2.getValue(true); // -> {hour: 6, minute: 0, AM: true}\n```\n\n----------------------------------------\n\nTITLE: Handling beforeEditEnd Event in DHTMLX Grid\nDESCRIPTION: This code snippet demonstrates how to attach an event handler to the beforeEditEnd event of a DHTMLX Grid. The event fires before editing of a cell is completed, allowing custom logic to be executed and potentially preventing the editor from closing.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_beforeeditend_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngrid.events.on(\"beforeEditEnd\", (value, row, column) => {\n    // your logic here\n    return false;\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Event Handlers to Custom Templates in DHTMLX Grid\nDESCRIPTION: This example demonstrates how to assign event handlers to HTML elements within custom templates of DHTMLX Grid cells using the 'eventHandlers' configuration property. It shows a mouseover event handler for a custom checkbox template.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/customization.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst grid = new dhx.Grid(\"grid_container\", {\n    columns: [\n        { width: 200, id: \"country\", header: [{ text: \"Country\" }], htmlEnable: true },\n        { width: 150, id: \"netChange\", header: [{text: \"Net Change\"}],\n            htmlEnable: true,\n            tooltip: false,\n            template: function (text, row, column) { \n                return \"<div class='cell__template'><input type='checkbox' \n                    disabled \" + (text > 3000000 ? \"checked\" : \"\") + \" ></div>\";\n            }\n        },\n        // more options\n    ],\n    data: data,\n    eventHandlers: { \n        onmouseover: { \n            cell__template: function(event, data) { \n                console.log(JSON.stringify(data.row, null, 2)); \n            } \n        } \n    } \n});\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX Timepicker with 12-Hour Format in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to initialize a DHTMLX Timepicker instance within a container element (`timepicker_container`). It sets the `timeFormat` configuration option to `12` to activate the 12-hour clock format (AM/PM) instead of the default 24-hour format. The DHTMLX Suite library (`dhx`) is required.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/timepicker/api/timepicker_timeformat_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst timepicker = new dhx.Timepicker(\"timepicker_container\", {\n    timeFormat: 12\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Grid Columns in JavaScript\nDESCRIPTION: This example demonstrates how to configure various properties of Grid columns using the DHTMLX JavaScript UI library. It showcases features like column alignment, width adjustment, editing, and custom templates.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/api_gridcolumn_properties.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst grid = new dhx.Grid(\"grid\", {\n    columns: [\n        { width: 200, id: \"country\", header: [{ text: \"Country\" }] },\n        { width: 150, id: \"population\", header: [{ text: \"Population\" }] },\n        { width: 150, id: \"yearlyChange\", header: [{ text: \"Yearly Change\" }] },\n        { width: 150, id: \"netChange\", header: [{ text: \"Net Change\" }] },\n        { width: 150, id: \"destiny\", header: [{ text: \"Density (P/Km²)\" }] },\n        { width: 150, id: \"area\", header: [{ text: \"Land Area (Km²)\" }] },\n        { width: 150, id: \"migrants\", header: [{ text: \"Migrants (net)\" }] },\n        { width: 150, id: \"fert\", header: [{ text: \"Fert. Rate\" }] },\n        { width: 150, id: \"age\", header: [{ text: \"Med. Age\" }] },\n        { width: 150, id: \"urban\", header: [{ text: \"Urban Pop\" }] }\n    ],\n    data: dataset\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring rowCss for Custom Row Styling in DHTMLX Grid\nDESCRIPTION: This snippet demonstrates how to use the rowCss config to apply custom styles to rows in a DHTMLX Grid. It defines a CSS class and uses a function to conditionally apply the class based on row data.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_rowcss_config.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n<style>\n    .my_custom_row {\n        background: coral;\n    }\n</style>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst grid = new dhx.Grid(\"grid_container\", {\n    columns: [\n        // columns config\n    ],\n    rowCss: (row) => { return row.custom ? \"my_custom_row\" : \"\" },\n    data: dataset\n});\n```\n\n----------------------------------------\n\nTITLE: Handling beforeDrag Event in DHTMLX List (JavaScript)\nDESCRIPTION: This example shows how to attach an event handler to the beforeDrag event of a List component in DHTMLX. The event fires before a dragging operation starts and can be used to implement custom logic or prevent dragging by returning false.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/list/api/list_beforedrag_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlist.events.on(\"beforeDrag\", function(data, events) {\n    // your logic here\n    return false;\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing TopLayout with State Observation in DHTMLX Optimus\nDESCRIPTION: Creates a layout view that observes changes in the global state and renders different content based on the active state. The component shows an EmptyView in the content cell and passes the active state value as a parameter.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/optimus_guides/index.md#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nimport { View } from \"dhx-optimus\";\n\nimport { ToolbarView } from \"./ToolbarView\";\nimport { EmptyView } from \"./EmptyView\";\n\nexport class TopLayout extends View {\n    init() {\n        return (this.layout = new dhx.Layout(null, {...}));\n    }\n\n    ready() {\n        this.observe(\n            state => state.active,\n            active => {\n              this.show(this.layout.getCell(\"content\"), EmptyView, {content: active});\n            }\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Button Properties in DHTMLX Toolbar - JavaScript\nDESCRIPTION: This JavaScript snippet illustrates how to define a configuration object for a toolbar button in DHTMLX Suite. It outlines the set of supported properties as keys, detailing their types and usage via inline comments for clarity. Prerequisites include having DHTMLX Suite installed and available in your project. Inputs are JavaScript objects conforming to the structure shown, where each property customizes the button's function, look, and integration within toolbars. The resulting configuration is used when instantiating or updating a DHTMLX Toolbar; improper or missing required properties (e.g., 'type') may result in fallback behavior.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/toolbar/api/api_button_properties.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst data = [\n    {\n        type: \"button\",\n        id?: string | number,\n        parent?: string,\n        value?: string,\n        items?: IMenuElement[], // ISpacer | ISeparator | INavItem | IMenuItem | ICustomHTML\n\n        circle?: boolean,\n        color?: \"danger\" | \"secondary\" | \"primary\" | \"success\",\n        count?: number,\n        countColor?: \"danger\" | \"secondary\" | \"primary\" | \"success\",\n        full?: boolean,\n        group?: string,\n        hotkey?: string,\n        html?: string,\n        icon?: string,\n        loading?: boolean,\n        multiClick?: boolean,\n        size?: \"small\" | \"medium\",\n        tooltip?: string,\n        view?: \"flat\" | \"link\",\n\n        css?: string | string[],\n        disabled?: boolean,\n        hidden?: boolean,\n    },\n    // more Toolbar controls\n]\n```\n\n----------------------------------------\n\nTITLE: Iterating Through DataCollection Items with map() in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the map() method to iterate through all items of a DataCollection component and return an array of item IDs. The method takes a callback function that is applied to each item in the collection.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/data_collection/api/datacollection_map_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ncomponent.data.map(function(item, index, array){\n    return item.id;\n});\n```\n\n----------------------------------------\n\nTITLE: Adding and Updating Tree Items\nDESCRIPTION: Examples of adding new items and updating existing items in the tree.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree/work_with_tree.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ntree.data.add({\"value\": \"Life\"}, -1, \"Magazines\");\ntree.data.update(\"item_id\", {value: \"New value\"});\ntree.data.update(\"Books\", {checkbox:false});\n```\n\n----------------------------------------\n\nTITLE: Initializing Grid with Editable Columns in JavaScript\nDESCRIPTION: Example of creating a DHTMLX Grid instance with editable columns enabled. The editable property is set to true to allow editing of grid data. This configuration applies to all columns in the grid.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_editable_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst grid = new dhx.Grid(\"grid_container\", {\n    columns: [\n        // columns config\n    ],\n    editable:true,\n    data: dataset\n});\n```\n\n----------------------------------------\n\nTITLE: Serializing TreeCollection Data in JavaScript\nDESCRIPTION: Demonstrates different ways to serialize TreeCollection data into JSON, XML, and CSV formats. The method accepts an optional driver parameter to specify the output format and returns either an array of JSON objects or a formatted string.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree_collection/api/treecollection_serialize_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// serialize data into an array of JSON objects\ncomponent.data.serialize();\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// serialize data into an XML string\ncomponent.data.serialize(\"xml\");\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// serialize data into a CSV string\ncomponent.data.serialize(\"csv\");\n```\n\n----------------------------------------\n\nTITLE: Detaching Event Listener in DHTMLX\nDESCRIPTION: Shows how to detach an event listener from a DHTMLX component using the events.detach() method. The method takes the event name as a parameter.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/guides/events_guide.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncomponent.events.detach(\"eventName\");\n```\n\n----------------------------------------\n\nTITLE: Getting Form Values in JavaScript\nDESCRIPTION: Demonstrates retrieving form control values using getValue() method, with options to return data as regular object or FormData\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/work_with_form.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst state = form.getValue();\n//->{ \"name\": \"John Doe\", \"email\": \"jd@mail.com\", \"agree\": true }\n```\n\nLANGUAGE: jsx\nCODE:\n```\nconst state = form.getValue(true);\n```\n\n----------------------------------------\n\nTITLE: Rendering Views in DHTMLX Optimus Layout\nDESCRIPTION: This code creates a TopLayout class that extends the View class from dhx-optimus. It initializes a layout with two rows - one for a toolbar and one for content. The init() method returns a new dhx.Layout instance with the ToolbarView and EmptyView components rendered in their respective cells using the show() method.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/optimus_guides/how_to_start_optimus.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { View } from \"dhx-optimus\";\n\nimport { ToolbarView } from \"./ToolbarView\";\nimport { EmptyView } from \"./EmptyView\";\n\nexport class TopLayout extends View {\n    init() {\n        return (this.layout = new dhx.Layout(null, {\n            rows: [\n                {\n                    id: \"toolbar\",\n                    height: \"content\",\n                    init: cell => this.show(cell, ToolbarView),\n                },\n                {\n                    id: \"content\",\n                    init: cell => this.show(cell, EmptyView),\n                },\n            ],\n        }));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Slider with Initial Value\nDESCRIPTION: Creates a new Slider instance with a predefined initial value of 20.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/slider/configuring_slider.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst slider = new dhx.Slider(\"slider_container\", { \n    value:20\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Form with Combo Control in JavaScript\nDESCRIPTION: This snippet demonstrates how to add a Combo control during the initialization of a DHTMLX Form. It includes configuration for multiselection, select all button, and predefined data.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/combo.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst form = new dhx.Form(\"form_container\", {\n    rows: [\n        {\n            type: \"combo\",\n            name: \"combo\",\n            label: \"count\",\n            labelPosition: \"left\",\n            multiselection: true,\n            selectAllButton: true,\n            value: [\n                \"id_1\",\n                \"id_2\"\n            ],\n            data: [\n                { value: \"1\", id: \"id_1\" },\n                { value: \"2\", id: \"id_2\" },\n                { value: \"3\", id: \"id_3\" },\n                { value: \"4\", id: \"id_4\" },\n                { value: \"5\", id: \"id_5\" }\n            ]\n        }\n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Empty Item Template\nDESCRIPTION: Defines a template for empty items to be used when adding new entries to the grid or dataview.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/optimus_guides/how_to_start_optimus.md#2025-04-22_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nexport const emptyItem = {\n    name: \"\",\n    post: \"\",\n    phone: \"\",\n    mail: \"\",\n    birthday: \"\",\n    start: \"\",\n};\n```\n\n----------------------------------------\n\nTITLE: Handling Timepicker Change Event in JavaScript\nDESCRIPTION: Example demonstrating how to attach an event listener to the timepicker's change event. The event fires whenever the timepicker value changes and provides the new value as a parameter. The value format can be either a string or an object depending on the valueFormat and timeFormat configurations.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/timepicker/api/timepicker_change_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntimepicker.events.on(\"change\", function(value){\n    console.log(\"The value of a timepicker has changed to \"+ value);\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing autoload backend with Express.js\nDESCRIPTION: Server-side implementation using Express.js to handle the autoload requests. This endpoint filters tree data based on the parent ID provided in the query parameter and returns matching child items.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree/api/tree_autoload_config.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\napp.get(\"/backend/autoload\", (req, res) => {\n    const currentData = treeData.filter(i => i.parent === req.query.id);\n    return res.send(currentData);\n})\n```\n\n----------------------------------------\n\nTITLE: Getting Slider Value in JavaScript\nDESCRIPTION: Demonstrates how to retrieve the current value of a slider using the getValue() method of the Slider API. It shows examples for both single and range sliders.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/slider/usage.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst value = slider.getValue(); // -> [20]\n \n// for a range slider as an array\nconst value = slider.getValue(); // -> [20,50]\n```\n\n----------------------------------------\n\nTITLE: Implementing Grid Column Editor Type\nDESCRIPTION: Demonstrates how to initialize a Grid with a specific editor type for a column. The example shows setting up a textarea editor for a Project column with editable and autoHeight options enabled.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/gridcolumn_properties/gridcolumn_editortype_property.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst grid = new dhx.Grid(\"grid_container\", {\n    columns: [\n        { id: \"project\", header: [{ text: \"Project\" }], editorType: \"textarea\" }, \n        // more columns configuration objects\n    ],\n    editable: true,\n    autoHeight: true,\n    // more options\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Chart Series Configuration in JavaScript\nDESCRIPTION: Demonstrates how to use the getSeries() method to retrieve the configuration object of a specific chart series. The method takes a series ID as a parameter and returns an object containing all configuration properties of that series.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/chart/api/chart_getseries_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = chart.getSeries(\"A\");\n/* => \n{\n    \"strokeWidth\": 2, \"active\": true,\n    \"tooltip\": true, \"paddings\": 5,\n    \"color\": \"none\", \"fill\": \"none\",\n    \"pointType\": \"circle\", \"id\": \"A\",\n    \"value\": \"company A\", \"pointColor\": \"blue\",\n    \"type\": \"radar\",\n    \"scales\": [\n        \"radial\"\n    ]\n}\n*/\n```\n\n----------------------------------------\n\nTITLE: Handling afterRowResize Event in DHTMLX Grid\nDESCRIPTION: This snippet demonstrates how to attach an event listener for the afterRowResize event in a DHTMLX Grid. The event fires after the height of a row is changed and provides access to the row object, event object, and the current height of the row.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_afterrowresize_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngrid.events.on(\"afterRowResize\", (row, event, currentHeight) => {\n    console.log(\"Current row height:\", currentHeight);\n});\n```\n\n----------------------------------------\n\nTITLE: Chart Tooltip Template Configuration\nDESCRIPTION: Shows implementation of custom tooltip templates for displaying data item values in chart tooltips.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/chart/customization.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction tooltipTemplate(p) {\n  return \"x: \" + p[1] + \", y: \" + p[0];\n};\n\nconst chart = new dhx.Chart(\"chart_container\", {\n    css: \"dhx_widget--bg_white dhx_widget--bordered\",\n    scales: {\n        bottom:{\n            locator: \"value B\", title: \"value B\", max: 70\n        },\n        left:{\n            title: \"value A\", max: 70\n        }\n    },\n    series: [{\n        id: \"A\", type: \"scatter\", value: \"value A\", valueY:\"value B\",\n        pointType: \"circle\", color: \"#EEB98E\",\n        tooltipTemplate: tooltipTemplate\n    },\n    {\n        id: \"B\", type: \"scatter\", value: \"value B\", valueY: \"value A\",\n        pointType: \"rect\", color: \"#5E83BA\",\n        tooltipTemplate: tooltipTemplate\n    }],\n    legend: {\n        series: [\"A\", \"B\"],\n        usePointType: true,\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Form Input Pattern Mask Configuration\nDESCRIPTION: Implementation of pattern-based input masking for date and time formats\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/work_with_form.md#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n{\n    type: \"input\",\n    label: \"DD/MM/YYYY HH:MM\",\n    placeholder: \"01/01/2001 00:00\",\n    patternMask: {\n        pattern: \"00/00/0000 H0:M0\",\n        charFormat: {\n            \"H\": /[0-2]/,\n            \"M\": /[0-5]/,\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Component Class for DHTMLX Uploader\nDESCRIPTION: Shows how to create a Component class for handling file uploads using DHTMLX Uploader widget.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/optimus_guides/index.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Component } from \"dhx-optimus\";\n\nexport default class Uploader extends Component {\n    init() {\n        this.uploader = new dhx.Uploader({\n            target: this.params.target,\n        });\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring DHTMLX Form CheckboxGroup Properties\nDESCRIPTION: Configuration object showing all available properties for the CheckboxGroup control including options for individual checkboxes, layout settings, styling, and validation messages.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/checkbox_group/api_checkboxgroup_properties.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    type: \"checkboxGroup\",\n    name?: string,\n    id?: string,\n    options: {\n        rows?: [\n            {\n                type: \"checkbox\",\n                id?: string,\n                value?: string,\n                checked?: boolean, \n                css?: string,\n                height?: string | number | \"content\",\n                hidden?: boolean,\n                padding?: string | number,\n                text?: string,\n                width?: string | number | \"content\",\n            },\n            // more checkboxes\n        ],\n        cols?: [\n            {\n                type: \"checkbox\",\n                id?: string,\n                value?: string,\n                checked?: boolean,\n                css?: string,\n                height?: string | number | \"content\",\n                hidden?: boolean,\n                padding?: string | number,\n                text?: string,\n                width?: string | number | \"content\",\n            },\n            // more checkboxes\n        ],\n        css?: string,\n        height?: string | number | \"content\",\n        padding?: string | number, \n        width?: string | number | \"content\",\n    },\n    value?: {\n        [id: string]: boolean | string,\n        // more values\n    },\n    css?: string,\n    disabled?: boolean,\n    height?: string | number | \"content\",\n    hidden?: boolean,\n    padding?: string | number,\n    required?: boolean,\n    width?: string | number | \"content\",\n    hiddenLabel?: boolean,\n    label?: string,\n    labelPosition?: \"left\"|\"top\",\n    labelWidth?: string | number,\n    helpMessage?: string,\n    preMessage?: string,\n    successMessage?: string,\n    errorMessage?: string\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Data from External File in DataCollection\nDESCRIPTION: Basic example of loading XML data from an external file using the load() method.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/data_collection/api/datacollection_load_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncomponent.data.load(\"../common/data.xml\", \"xml\");\n```\n\n----------------------------------------\n\nTITLE: Grid Column Editor Configuration Example\nDESCRIPTION: Demonstrates how to configure a combobox editor for a Grid column with the ability to add new options.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/gridcolumn_properties/gridcolumn_editorconfig_property.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst grid = new dhx.Grid(\"grid_container\", {\n    columns: [\n        {\n            id: \"status\",\n            header: [{ text: \"Status\" }],\n            editorType: \"combobox\",\n            // enables the ability to add new values into the combobox editor of the \"Status\" column\n            editorConfig: { newOptions: true },\n            options: [ \"Done\", \"In Progress\", \"Not Started\" ]\n        },\n        // more columns configuration objects\n    ],\n    // more options\n});\n```\n\n----------------------------------------\n\nTITLE: Using Form validate method with silent parameter\nDESCRIPTION: This example demonstrates how to use the validate() method with the silent parameter set to true, which returns the validation result without visually modifying the form or triggering validation events.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/form_validate_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst result = form.validate(true); // -> true/false\n```\n\n----------------------------------------\n\nTITLE: Handling keydown Event for Avatar Control in DHTMLX Form\nDESCRIPTION: This snippet demonstrates how to attach a keydown event listener to an Avatar control in a DHTMLX Form. It logs the event object to the console when any key is pressed while the Avatar is in focus.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/avatar/avatar_keydown_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"avatar\").events.on(\"keydown\", event => {\n    console.log(\"keydown\", event);\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Loading in Grid\nDESCRIPTION: Example showing how to set up dynamic data loading in DHTMLX Grid using LazyDataProxy.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/data_loading.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nnew dhx.LazyDataProxy(\"https://docs.dhtmlx.com/suite/backend/lazyload\", {\n    limit: 30,\n    prepare: 5,\n    delay: 150,\n    from: 0\n});\n\nconst grid = new dhx.Grid(\"grid_container\");\ngrid.data.load(lazyDataProxy);\n```\n\n----------------------------------------\n\nTITLE: Adding Options to ComboBox in JavaScript\nDESCRIPTION: Shows how to add new options to an initialized ComboBox using the add() method of the Data Collection API.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/combobox/work_with_combo.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\ncombobox.data.add({value:\"Russia\"},1);\n```\n\n----------------------------------------\n\nTITLE: Adding a Row in DHTMLX Grid\nDESCRIPTION: Use the add() method of DataCollection to add a new row to the grid. Pass an object with row data and optionally specify the position.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/usage.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ngrid.data.add({\n    \"country\": \"Estonia\",\n    \"population\": \"1326535\",\n    \"yearlyChange\": \"0.0070\",\n    \"netChange\": \"3782\",\n    \"density\": \"31\",\n    \"area\": \"45339\",\n    \"migrants\": \"3911\",\n    \"fert\": \"1.59\",\n    \"age\": \"42.4\",\n    \"urban\": \"0.6790\",\n    \"id\": \"136\"\n}, 0);\n```\n\n----------------------------------------\n\nTITLE: Initializing a DHTMLX Form Instance - JavaScript\nDESCRIPTION: This code snippet creates a new DHTMLX Form instance using the form configuration object. It expects the 'dhx.Form' constructor from the DHTMLX Suite and the previously defined configuration. The first argument is the container (null, since it attaches to a window), and the second is the form configuration object. Output is a ready-to-use form component.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tutorial/binding_components/step3.md#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nvar form = new dhx.Form(null, formConfig);\n```\n\n----------------------------------------\n\nTITLE: Setting Character Length Limits in DHTMLX Form Input (JSX)\nDESCRIPTION: Demonstrates how to limit the number of characters in an input or textarea field using minlength and maxlength attributes in a DHTMLX form.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/work_with_form.md#2025-04-22_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\n{\n    type: \"input\",\n    inputType: \"text\",\n    label: \"Name\",\n    placeholder: \"John Doe\",\n    minlength: 3,\n    maxlength: 10\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Grid Keyboard Events in JavaScript\nDESCRIPTION: Example showing how to attach an event listener for the beforeKeyDown event in DHTMLX Grid. This event fires before a shortcut key is pressed when a grid cell has keyboard focus.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_beforekeydown_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngrid.events.on(\"beforeKeyDown\", (event) => {\n    // your logic here\n    // return false;\n});\n```\n\n----------------------------------------\n\nTITLE: Styling DHTMLX Grid with Custom CSS\nDESCRIPTION: Example showing how to apply custom CSS styling to a DHTMLX Grid component using CSS variables for colors and borders, along with grid initialization code.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_css_config.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<style>\n    .custom {\n        --dhx-font-color-primary: #fff;\n        --dhx-background-primary: #3A434A;\n        --dhx-s-grid-header-background: #2C3338;\n\n        --dhx-border-color: #4A555E;\n        --dhx-border: var(--dhx-border-width) solid var(--dhx-border-color);\n    }\n</style>\n\n<script>\n    const grid = new dhx.Grid(\"grid_container\", {\n        columns: [\n            { minWidth: 150, id: \"country\", header: [{ text: \"Country\" }] },\n            { id: \"population\", header: [{ text: \"Population\" }] },\n            { id: \"yearlyChange\", header: [{ text: \"Yearly Change\" }] },\n            // more columns\n        ],\n        adjust: true,\n        data: dataset,\n        css: \"custom\",\n    });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX Slider with JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to initialize the DHTMLX Slider using its constructor `dhx.Slider`. It takes the ID of the HTML container (`slider_container`) as the first argument and an optional configuration object as the second argument. This example sets the minimum value, maximum value, and step size for the slider.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/slider/initializing_slider.md#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n// creating DHTMLX Slider\nconst slider = new dhx.Slider(\"slider_container\", {\n    min: 0,\n    max: 100,\n    step: 1\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX Layout with Nested Rows and Columns\nDESCRIPTION: Demonstrates how to create a complex layout structure using the rows configuration option. The example shows a layout with nested rows and columns, including header definitions and size specifications.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/layout/api/layout_rows_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst layout = new dhx.Layout(\"layout_container\", {\n    header: \"Main Block Header\",\n    rows: [\n        {\n            cols: [\n                {\n                    header: \"Block 1\",\n                    width: \"40%\"                                \n                },\n                {\n                    header: \"Block 2\",                  \n                    width: \"60%\"\n                }\n            ]\n        },\n        {\n            rows: [\n                {\n                    header: \"Block 3\",\n                    height: \"200px\"                             \n                },\n                {\n                    header: \"Block 4\",                              \n                    height: \"300px\"\n                }\n            ]\n        }\n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Grouping Order and Aggregation with Objects in dhtmlx Grid (JSX)\nDESCRIPTION: Illustrates complex grouping configuration using objects within the `group.order` array in dhtmlx Grid. It defines grouping by 'country' with a top summary row showing the count, and then further groups by 'population'. The `group.fields` property defines additional aggregations (average age and population) for the 'population' group, also displayed in a top summary row. Custom column templates are used to display the summary data conditionally based on `row.$groupSummary`. Requires the dhtmlx Grid library and a dataset.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/usage.md#2025-04-22_snippet_32\n\nLANGUAGE: jsx\nCODE:\n```\nconst grid = new dhx.Grid(\"grid_container\", {\n    columns: [\n        {\n            id: \"country\",\n            header: [{ text: \"Country\" }],\n            template: (value, row) => {\n                // the $groupSummary service property helps defining the resulting row\n                if (row.$groupSummary) { \n                    return `count: ${row.count}`;\n                }\n                return value;\n            }\n        },\n        {\n            id: \"population\",\n            header: [{ text: \"Population\" }],\n            template: (value, { $groupSummary, ageAvg, populationAvg }) => {\n                if (!$groupSummary) return value;\n                return `Age avg: ${ageAvg}; Population avg: ${populationAvg}`;\n            },\n        },\n        { id: \"city\", header: [{ text: \"City\" }],  },\n        { id: \"age\", header: [{ text: \"Age\" }] },       \n    ],\n    group: {\n        fields: {\n            population: {\n                summary: \"top\",\n                map: {\n                    ageAvg: [\"age\", \"avg\"],\n                    populationAvg: [\"population\", \"avg\"],\n                }\n            },\n        },\n        order: [\n            {\n                by: \"country\",\n                summary: \"top\",\n                map: {\n                    count: [\"country\", \"count\"]\n                }\n            },\n            \"population\",\n        ],\n        hideableColumns: false,\n    },\n    groupable: true,\n    data: dataset\n});\n```\n\n----------------------------------------\n\nTITLE: Repainting Grid using paint() Method in JavaScript\nDESCRIPTION: This code snippet demonstrates how to use the paint() method to repaint a grid on a page. The method is called on a grid instance and doesn't require any parameters.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_paint_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngrid.paint();\n```\n\n----------------------------------------\n\nTITLE: Initializing and Displaying a DHTMLX Window - JavaScript\nDESCRIPTION: This JavaScript snippet details the creation and display of a DHTMLX Window widget. The dhx.Window constructor instantiates a window with specified configuration: modal, resizable, and movable properties set to false, true, and true respectively. After construction, the show() method is called to render the component on the page. Dependencies are the DHTMLX Suite library loaded in advance, and the dhx.Window class must be available globally. Inputs involve window configuration options; output is a visible DHTMLX Window in the DOM. The dhxWindow variable serves as a handle for future API interactions with the window. Avoid using 'window' as a variable name to prevent conflicts.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/window/how_to_start.md#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n// creating DHTMLX Window\\nconst dhxWindow = new dhx.Window({\\n    modal: false,\\n    resizable: true,\\n    movable: true\\n});\\ndhxWindow.show();\n```\n\n----------------------------------------\n\nTITLE: Implementing Window Footer Click Handler\nDESCRIPTION: Handles click events on window footer buttons to process form data. Includes logic for both Cancel and Apply actions, with Apply handling both new item creation and updates to existing items.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tutorial/binding_components/step2.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndhxWindow.footer.events.on(\"Click\", function(id, e){\n    item = form.getValue(); \n     \n    switch(id) {\n        case 'cancel': {\n            dhxWindow.hide();\n            break;           \n        }\n        case 'apply': {\n            if (form.validate()){\n                if (item.id == \"\"){\n                    item.id = grid.data.getLength() + 1;\n                    grid.data.add(item, 0);\n                   } else {                       \n                    grid.data.update(item.id, item);    \n                }\n            }\n            dhxWindow.hide();        \n            break;\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Available Configuration Properties for Combo Box Control\nDESCRIPTION: This code snippet lists all the configuration properties that can be modified using the setProperties() method for a Combo Box control. It includes properties for styling, validation, behavior, and appearance.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/combo/combo_setproperties_method.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n    css: string,\n    errorMessage: string,\n    filter: function, \n    height: string|number|\"content\",\n    helpMessage: string,\n    hiddenLabel: boolean,\n    itemHeight: number,\n    itemsCount: boolean | function,\n    label: string,\n    labelPosition: string,\n    labelWidth: string|number,\n    listHeight: number,\n    multiselection: boolean,\n    padding: string|number,\n    placeholder: string,\n    preMessage: string,\n    readOnly: boolean,\n    required: boolean,\n    selectAllButton: boolean,\n    successMessage: string,\n    template: function,\n    validation: function,\n    virtual: boolean,\n    width: string|number|\"content\"\n}\n```\n\n----------------------------------------\n\nTITLE: Grid Initialization JavaScript\nDESCRIPTION: JavaScript code showing how to initialize DHTMLX Grid with basic configuration including columns setup\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/initialization.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst grid = new dhx.Grid(\"grid_container\", {\n    columns: [\n        { width: 100, id: \"a\", header: [{ text: \"#\" }] },\n        { width: 100, id: \"b\", header: [{ text: \"Title\" }] },\n        { width: 200, id: \"c\", header: [{ text: \"Name\" }] },\n        { width: 200, id: \"d\", header: [{ text: \"Address\" }] }\n    ],\n    headerRowHeight: 50,\n});\n```\n\n----------------------------------------\n\nTITLE: Handling dragStart Event in DHTMLX List Component (JavaScript)\nDESCRIPTION: This example demonstrates how to attach an event handler to the dragStart event of a DHTMLX List component. The event fires when a user starts dragging a list item and provides data about the drag operation and the original mouse event.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/list/api/list_dragstart_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlist.events.on(\"dragStart\", function(data, events) {\n    // your logic here\n});\n```\n\n----------------------------------------\n\nTITLE: Custom CSS Styling for Chart\nDESCRIPTION: Demonstrates how to apply custom CSS classes to style Chart components including background colors, font colors, and bar fills.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/chart/customization.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<style>\n    .custom {\n        --dhx-background-primary: #444;\n        --dhx-font-color-secondary: #fff;\n    }\n    .custom .chart.bar {\n        fill: orange;\n    }\n</style>\n\n<script>\n    const chart = new dhx.Chart(\"chart_container\", {\n        type: \"bar\",\n        css: \"custom dhx_widget--bordered\",\n        scales: {\n            \"top\": {\n                size: 100\n            },\n            \"bottom\" : {\n                text: \"month\", size: 100\n            },\n            \"left\" : {\n                size: 100, maxTicks: 10, max: 100, min: 0\n            },\n            \"right\": {\n                size: 100\n            }\n        },\n        series: [\n            {\n                id: \"A\", value: \"company C\", color: \"#5E83BA\",\n                pointType: \"circle\", fill: \"#5E83BA\", size: 35\n            }\n        ]\n    });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX Toolbar with Configuration Options\nDESCRIPTION: JavaScript code showing how to initialize a DHTMLX Toolbar with the object constructor, which accepts the container ID and an optional configuration object.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/toolbar/how_to_start.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst toolbar = new dhx.Toolbar(\"toolbar_container\", {\n    // config options\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Chart with Series Configuration in JavaScript\nDESCRIPTION: This snippet demonstrates how to initialize a bar chart with multiple series, including color settings, labels, and custom formatting.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/chart/api/chart_series_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst chart = new dhx.Chart(\"chart_container\", {\n    type: \"bar\",\n    scales: {\n        \"bottom\": {\n            text: \"month\"\n        },\n        \"left\": {\n            maxTicks: 10,\n            max: 100,\n            min: 0\n        }\n    },\n    series: [\n        {\n            id: \"A\",\n            value: \"A\",\n            color: \"#81C4E8\",\n            fill: \"#81C4E8\",\n            label: \"Company A\",\n        },\n        {\n            id: \"B\",\n            value: \"B\",\n            color: \"#74A2E7\",\n            fill: \"#74A2E7\",\n            label: ({ id }) => `Company ${id}`,\n        },\n        {\n            id: \"C\",\n            value: \"company C\",\n            color: \"#5E83BA\",\n            fill: \"#5E83BA\"\n        }\n    ]\n};\n```\n\n----------------------------------------\n\nTITLE: Setting the Position of a DHTMLX Window using JavaScript\nDESCRIPTION: This snippet shows how to set the position of a DHTMLX Window on the page using the `setPosition()` method. It takes two numerical parameters: the `left` and `top` coordinates (in pixels) for the window's top-left corner. Requires an existing `dhxWindow` instance.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/window/usage.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\ndhxWindow.setPosition(20,20);\ndhxWindow.show();\n```\n\n----------------------------------------\n\nTITLE: Enabling Virtual Rendering in DHTMLX List - JavaScript\nDESCRIPTION: This code snippet demonstrates how to initialize a DHTMLX List component with virtual rendering enabled by setting the 'virtual' configuration property to true. This feature optimizes the display and performance of lists with large numbers of items by rendering only visible elements. The snippet assumes that the DHTMLX Suite library is available and that there is an HTML element with the ID 'list_container' present in the DOM. The key parameter is 'virtual', which defaults to false and should be set to true to activate dynamic rendering; this setting is optional.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/list/api/list_virtual_config.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst list = new dhx.List(\"list_container\", {\n    virtual: true\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Combo Box with Custom Template in JavaScript\nDESCRIPTION: Demonstrates how to initialize a DHTMLX Combo Box with a custom template that displays an image alongside the option value. The template function receives an item object and returns HTML markup for rendering each option in the dropdown list.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/combobox/api/combobox_template_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst combo = new dhx.Combobox(\"combo_container\", {\n    template: function (item) {\n      return \"<div style='display:inline-block'>\"\n      +\"<img style='width:20px;height:20px;margin-right:10px;' src=\"+item.src+\"></div>\" \n      + item.value + \"</div>\";\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Loading Data into DHTMLX DataView using parse()\nDESCRIPTION: Demonstrates how to load JSON data into a DHTMLX DataView component using the parse() method. The example shows loading an array of objects containing information about animals with properties like value, short description, and thumbnail image.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/data_collection/api/datacollection_parse_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst dataset = [\n    {\n        \"value\": \"Ben\",\n        \"short\": \"Ben is a very cautious 5-year-old Siberian Husky.\",\n        \"thumbnailName\": \"01.jpg\"\n    },\n    {\n        \"value\": \"Izzy\",\n        \"short\": \"This is our most beloved kingfisher bird Izzy.\",\n        \"thumbnailName\": \"02.jpg\"\n    },\n    {\n        \"value\": \"Momo\",\n        \"short\": \"Momo is a 25-year-old elephant with a big heart.\",\n        \"thumbnailName\": \"03.jpg\"\n    }\n]\n\nconst dataview = new dhx.DataView(\"dataview_container\");\n\n// loads data into the dataview from the JSON array\ndataview.data.parse(dataset);\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX Tree\nDESCRIPTION: JavaScript code showing how to initialize the DHTMLX Tree component with configuration options.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree/initialization_of_dhtmlxtree.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst tree = new dhx.Tree(\"tree_container\", {\n    checkbox: true\n});\n```\n\n----------------------------------------\n\nTITLE: Attaching Event Listeners in DHTMLX Toolbar\nDESCRIPTION: This snippet demonstrates how to attach an event listener to the 'click' event of a toolbar. The handler logs the ID of the clicked item to the console when a toolbar item is clicked.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/toolbar/handling_events.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntoolbar.events.on(\"click\", function(id,e){\n    console.log(id);\n});\n```\n\n----------------------------------------\n\nTITLE: Styling Individual Form Controls\nDESCRIPTION: Example showing how to style both the form container and individual form controls using CSS classes\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/customization.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<style>\n    .custom {\n        --dhx-background-primary: rgb(238, 238, 238);\n        --dhx-color-primary: #118d8d;\n        --dhx-color-primary-active: #118d8d;\n        --dhx-color-primary-hover: #1ad1d1;\n    }\n    .name {\n        --dhx-color-primary-active: #d1b81a;\n    }\n</style>\n\n<script>\n    const form = new dhx.Form(\"form_container\", {\n        padding: 40,\n        width: 400,\n        css: \"custom\",\n        rows: [\n            {    \n                css: \"name\",\n                type: \"input\",\n                label: \"Name\",\n                placeholder: \"John Doe\"\n            },\n            {\n                type: \"input\",\n                label: \"Email\",\n                placeholder: \"jd@mail.name\"\n            }\n        ]\n    });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Basic Grid CSS Styling Setup\nDESCRIPTION: Example of adding custom CSS classes to style a DHTMLX Grid component with custom colors and backgrounds.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/customization.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<style>\n    .custom {\n        --dhx-font-color-primary: #fff;\n        --dhx-background-primary: #3A434A;\n        --dhx-s-grid-header-background: #2C3338;\n        --dhx-border-color: #4A555E;\n        --dhx-border: var(--dhx-border-width) solid var(--dhx-border-color);\n    }\n</style>\n\n<script>\n    const grid = new dhx.Grid(\"grid_container\", {\n        columns: [\n            { minWidth: 150, id: \"country\", header: [{ text: \"Country\" }] },\n            { id: \"population\", header: [{ text: \"Population\" }] },\n            { id: \"yearlyChange\", header: [{ text: \"Yearly Change\" }] }\n        ],\n        adjust: true,\n        data: dataset,\n        css: \"custom\"\n    });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Searching Items in DataCollection using Attribute Key\nDESCRIPTION: Shows how to search for items in a DataCollection using an object with 'by' and 'match' criteria to find items by specific attribute values\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/data_collection/api/datacollection_find_method.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst item = component.data.find({by:\"text\",match:\"Manager\"});\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX DataView with JavaScript\nDESCRIPTION: This snippet shows how to initialize DHTMLX DataView using JavaScript, including setting the container and configuration options.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/dataview/initialization.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// creating DHTMLX DataView\nconst dataview = new dhx.DataView(\"dataview_container\", {\n    itemsInRow: 5\n});\n```\n\n----------------------------------------\n\nTITLE: Setting the Active Tab in DHTMLX Tabbar using JavaScript\nDESCRIPTION: This JavaScript example initializes a DHTMLX Tabbar component within the 'tabbar_container' element, configured with several tabs ('views'). Subsequently, it calls the setActive() method on the tabbar instance, passing the ID '2' to make the corresponding tab the currently active and visible one. This requires the DHTMLX Suite library to be included.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tabbar/api/tabbar_setactive_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst tabbar = new dhx.Tabbar(\"tabbar_container\", {\n    mode: \"top\",            \n    views:[\n        { id: \"1\", tab: \"tab-1\", css:\"panel flex\"},\n        { id: \"2\", tab: \"tab-2\", css:\"panel flex\"},\n        { id: \"3\", tab: \"tab-3\", css:\"panel flex\"},\n        { id: \"4\", tab: \"tab-4\", css:\"panel flex\"}\n    ]\n});\n\ntabbar.setActive(\"2\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Form Spacer Properties in JavaScript\nDESCRIPTION: Configuration object for initializing a Spacer control in DHTMLX Form. Defines properties like type, name, id, css, height, hidden status, padding and width. The type property is required and must be set to 'spacer'.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/spacer/api_spacer_properties.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    type: \"spacer\",\n    name?: string,\n    id?: string,\n\n    css?: string,\n    height?: string | number | \"content\", // \"content\" by default\n    hidden?: boolean, // false by default\n    padding?: string | number, \n    width?: string | number | \"content\", // \"content\" by default\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Data on Grid Initialization\nDESCRIPTION: Example showing how to load data into DHTMLX Grid during component initialization using the data config property.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/data_loading.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst grid = new dhx.Grid(\"grid_container\", {\n    columns: [\n        // columns config\n    ],\n    data: dataset\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Date Selection and Hiding Popup\nDESCRIPTION: Creates an event handler for the calendar's change event that updates the input field with the selected date and hides the popup once a date is chosen.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar/datepicker.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ncalendar.events.on(\"change\", function() {\n    dateInput.value = calendar.getValue();\n    popup.hide();\n});\n```\n\n----------------------------------------\n\nTITLE: Using the Ajax get() Method in JavaScript\nDESCRIPTION: Demonstrates how to send a GET request using the dhx.ajax.get() method, along with handling the response and potential errors with promises.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/ajax/api/ajax_get_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndhx.ajax.get(url).then(function (data) {\n    console.log(data);\n}).catch(function (err) {\n    console.log(err);\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Min and Max Values\nDESCRIPTION: Initializes a slider with custom minimum (1) and maximum (150) values.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/slider/configuring_slider.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst slider = new dhx.Slider(\"slider_container\", { \n    min:1,\n    max:150\n});\n```\n\n----------------------------------------\n\nTITLE: Handling keydown Event in DHTMLX Form Input Control\nDESCRIPTION: This example shows how to attach an event listener to the keydown event of an Input control in a DHTMLX Form. The event fires whenever any key is pressed while the Input control has focus, providing a KeyboardEvent object that can be used for further processing.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/input/input_keydown_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"input\").events.on(\"keydown\", function(event) {\n    console.log(event);\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Options for Grid Column Editor in JavaScript\nDESCRIPTION: This snippet demonstrates how to configure the 'options' property for a Grid column. It shows setting up a select editor with predefined options for a 'Status' column.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/gridcolumn_properties/gridcolumn_options_property.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst grid = new dhx.Grid(\"grid_container\", {\n    columns: [\n        {\n            id: \"status\", header: [{ text: \"Status\" }],\n            editorType: \"select\", options: [ \"Done\", \"In Progress\", \"Not Started\" ]\n        },\n        // more columns configuration objects\n    ],\n    // more options\n});\n```\n\n----------------------------------------\n\nTITLE: TreeGrid Data Structure Example\nDESCRIPTION: Example of data structure for TreeGrid mode showing parent-child relationships with nested data.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/treegrid_mode.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst dataset = [\n    {\n        \"id\": 0,\n        \"a\": 1,\n        \"b\": \"Linwood Long long long\",\n        \"c\": \"Petersen\",\n        \"d\": \"Dahlgreen Place\"\n    },\n    {\n        \"id\": 1,\n        \"parent\": 0,\n        \"a\": 2,\n        \"b\": \"Edenburg\",\n        \"c\": \"Agnes\",\n        \"d\": \"Gem Street\"\n    }\n];\n```\n\n----------------------------------------\n\nTITLE: Filtering DataCollection with a Function in JavaScript\nDESCRIPTION: This snippet demonstrates how to filter data in a grid component using a custom function. The function checks if the 'a' property is greater than 0 and the 'b' property is not 'Apple'.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/data_collection/api/datacollection_filter_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngrid.data.filter(function (item) {\n    return item.a > 0 && item.b !== \"Apple\";\n});\n```\n\n----------------------------------------\n\nTITLE: Loading Data with DataProxy in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the load() method of a DataProxy object to load data asynchronously. The method returns a Promise, which allows for chaining actions after the data is loaded.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/data_proxy/api/dataproxy_load_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nproxy.load().then(function () {\n   console.log(\"Loading is done!\");\n});\n```\n\n----------------------------------------\n\nTITLE: Select Properties Configuration\nDESCRIPTION: Configuration object for Select control defining dropdown-related properties including validation and styling options.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/form_getproperties_method.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    css: string,\n    errorMessage: string,\n    height: string | number | \"content\",\n    helpMessage: string,\n    hiddenLabel: boolean,\n    icon: string,\n    label: string,\n    labelPosition: string,\n    labelWidth: string | number,\n    padding: string | number,\n    preMessage: string,\n    successMessage: string,\n    validation: function,\n    width: string | number | \"content\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using collapseAll() Method in DHTMLX Grid (JavaScript/JSX)\nDESCRIPTION: This code snippet demonstrates how to initialize a DHTMLX Grid in TreeGrid mode and use the collapseAll() method to collapse all expanded rows. The method works for both default mode with subRow configuration and TreeGrid mode.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_collapseall_method.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst grid = new dhx.Grid(\"grid_container\", {\n    type: \"tree\",\n    columns: [\n       // columns config\n    ],\n    data: dataset,\n});\n\ngrid.collapseAll();\n```\n\n----------------------------------------\n\nTITLE: Handling footerCellClick Event in DHTMLX Grid\nDESCRIPTION: This code snippet demonstrates how to attach an event listener for the footerCellClick event in a DHTMLX Grid. The event fires when a user clicks on a grid footer cell. The callback function receives the clicked cell object, the column configuration, and the native MouseEvent object.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_footercellclick_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngrid.events.on(\"footerCellClick\", (cell, column, event) => {\n    // your logic here\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX Grid in TreeGrid Mode\nDESCRIPTION: Example showing how to initialize a DHTMLX Grid component with TreeGrid mode enabled using the type property. The grid is configured with a specified width and container element.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_type_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst grid = new dhx.Grid(\"grid_container\", {\n    type: \"tree\",\n    columns: [\n        // columns config\n    ],\n    width: 400, \n    data: dataset\n});\n```\n\n----------------------------------------\n\nTITLE: Applying Custom CSS Classes to Sidebar\nDESCRIPTION: This JavaScript snippet demonstrates how to apply custom CSS classes to a DHTMLX Sidebar instance using the css configuration property.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/sidebar/customization.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst sidebar = new dhx.Sidebar(\"sidebar_container\", {\n    css:\"my_first_class my_second_class\"\n});\n```\n\n----------------------------------------\n\nTITLE: Scrolling to Coordinates in DHTMLX Grid - JavaScript\nDESCRIPTION: Scrolls the grid content to the position specified by x and y pixel coordinates using the scroll method. Requires two parameters: x and y (numbers representing horizontal and vertical scroll positions). Assumes the grid instance is initialized; returns void.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/usage.md#2025-04-22_snippet_45\n\nLANGUAGE: JavaScript\nCODE:\n```\ngrid.scroll(75, 230);\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX List Instance - JavaScript\nDESCRIPTION: This snippet shows how to instantiate a DHTMLX List using the dhx.List constructor in JavaScript. It accepts two parameters: the ID of the HTML container and an optional configuration object (here specifying itemHeight). Dependencies include dhx.List (from suite.js) and a pre-existing HTML element with the given ID. The function creates and renders the List with provided settings; additional configuration properties can be added as needed.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/list/initialization.md#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n// creating DHTMLX List\\nconst list = new dhx.List(\\\"list_container\\\", {\\n    itemHeight:30,\\n    // more config options\\n});\n```\n\n----------------------------------------\n\nTITLE: Async TreeCollection Save with Promise Handling\nDESCRIPTION: Example showing how to handle asynchronous data saving using promises and the saveData property.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree_collection/api/treecollection_save_method.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = new TreeCollection();\ndata.save(loader);\nreturn data.saveData.then(function () {\n    // now your data is saved\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Item Properties After Retrieval\nDESCRIPTION: Shows how to access specific properties of an item after retrieving it from the DataCollection using getItem(). The example demonstrates accessing the text property of the retrieved item.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/data_collection/api/datacollection_getitem_method.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst item = component.data.getItem(123);\nconst text = item.text;\n```\n\n----------------------------------------\n\nTITLE: Handling afterHide Event for Button Control in DHTMLX Form\nDESCRIPTION: This snippet demonstrates how to attach an event handler to the afterHide event of a Button control in a DHTMLX Form. The event fires after the button is hidden and provides the button's text and initialization status.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/button/button_afterhide_event.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nform.getItem(\"button\").events.on(\"afterHide\", function(text, init) {\n    console.log(\"afterHide\", text, init);\n});\n```\n\n----------------------------------------\n\nTITLE: Loading Data on DHTMLX Tree Initialization in JavaScript\nDESCRIPTION: Shows how to load a predefined dataset into DHTMLX Tree during the initialization stage using the 'data' configuration property.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree/loading_data.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst tree = new dhx.Tree(\"tree_container\", {\n    data: dataset\n});\n```\n\n----------------------------------------\n\nTITLE: Creating JSON Data Structure for DHTMLX ContextMenu in JavaScript\nDESCRIPTION: Defines an array of menu item objects for the DHTMLX ContextMenu. Each menu item has an 'id', an icon (using Material Design Icons), and a display value. This JSON structure is later used to populate the context menu using the 'parse' method. No external dependencies beyond DHTMLX and icon fonts are required. The expected output is a ready-to-use menu item array.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tutorial/binding_components/step4.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar contextmenu_data = [\n    {\n        \"id\": \"edit\",\n        \"icon\": \"mdi mdi-pencil\",\n        \"value\": \"Edit\"\n    },\n    {\n        \"id\": \"delete\",\n        \"icon\": \"mdi mdi-delete\",\n        \"value\": \"Delete\"\n    }\n];\n```\n\n----------------------------------------\n\nTITLE: Retrieving States of All Controls without ID using getState in DHTMLX Toolbar - JavaScript\nDESCRIPTION: This snippet illustrates how calling getState with no arguments returns an object mapping all control ids to their current values or states in the Toolbar. The Toolbar component must be initialized with relevant controls. The output object can be iterated or serialized, making it suitable for saving UI configuration or debugging.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/toolbar/api/toolbar_getstate_method.md#2025-04-22_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst state = toolbar.getState(); \n// -> {\"search\":\"toolbar\",\"edit\":true,\"align\":\"right\"}\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Series in JavaScript Chart\nDESCRIPTION: Illustrates how to iterate over chart series using the eachSeries method. The example shows creating a radar chart and then iterating over its series to access the fill color of each series.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/chart/usage.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst chart = new dhx.Chart(\"chart_container\", {\n    type: \"radar\",\n    scales: {\n        radial:{\n            value: \"month\",\n            maxTicks: 7\n        }\n    },\n    series: [\n        {\n            id: \"A\",\n            value: \"company A\",\n            fill: \"#000000\",\n            alpha: 0.3,\n            color: \"#000000\"\n        },\n        {\n            id: \"B\",\n            value: \"company B\",\n            fill: \"#FFFF33\",\n            alpha: 0.3,\n            color: \"#FFFF33\"\n        }\n    ]\n});\n \nchart.eachSeries(function(seria){\n    seria.config.fill\n});\n// -> [\"#394E79\", \"#5E83BA\", \"#C2D2E9\"]\n```\n\n----------------------------------------\n\nTITLE: Getting Item Index from Focused Item (JavaScript)\nDESCRIPTION: Illustrates how to retrieve the index of a focused item in List component by combining getFocus() and getIndex() methods of Data Collection, as an alternative to the deprecated getFocusIndex() method.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/migration.md#2025-04-22_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\n// get the id of an item using the getFocus() method\nconst id = list.getFocus();\n// and pass this id as a parameter of the getIndex method of Data Collection\nconst index = list.data.getIndex(id);\n```\n\n----------------------------------------\n\nTITLE: Handling Radiogroup Change Events in DHTMLX Form\nDESCRIPTION: Example showing how to attach a change event listener to a Radiogroup control in a DHTMLX Form. The event fires whenever the selected radio button value changes and provides the new value as a parameter.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/radiogroup/radiogroup_change_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"radiogroup\").events.on(\"change\", function(value) {\n    console.log(\"change\", value);\n});\n```\n\n----------------------------------------\n\nTITLE: Repainting the DHTMLX Grid - JavaScript\nDESCRIPTION: Forces the grid to repaint its content on the page, typically after configuration changes. The paint method requires no parameters and is called on the grid instance. Ensures the UI reflects the latest configuration and data.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/usage.md#2025-04-22_snippet_48\n\nLANGUAGE: JavaScript\nCODE:\n```\ngrid.paint();\n```\n\n----------------------------------------\n\nTITLE: Setting Form Values in JavaScript\nDESCRIPTION: Shows how to set new values for form controls using setValue() method with a key-value object\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/work_with_form.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nform.setValue({\n    \"input_name\":\"Jack London\", \n    \"slider_id\":10\n    // more name:value pairs\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Chart View with DHTMLX Suite in JavaScript\nDESCRIPTION: Initializes a Chart widget using DHTMLX Suite, configuring it as a donut chart with data from a collection. Uses a helper function to prepare chart data.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/optimus_guides/how_to_start_optimus.md#2025-04-22_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nimport { View } from \"dhx-optimus\";\nimport { getChartStatistic } from \"../../utils/helpers\";\n\nexport class ChartView extends View {\n    init() {\n        return new dhx.Chart(null, {\n            css: \"chart\",\n            type: \"donut\",\n            series: [\n                {\n                    value: \"value\",\n                    color: \"color\",\n                    text: \"post\",\n                },\n            ],\n            legend: {\n                values: {\n                    id: \"id\",\n                    text: \"post\",\n                    color: \"color\",\n                },\n                halign: \"center\",\n                valign: \"bottom\",\n            },\n            data: getChartStatistic(this.params.dataCollection.serialize()),\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Unselecting Tree Items in JavaScript\nDESCRIPTION: Demonstrates how to unselect Tree items using the selection object's remove() method, either for a specific item or all selected items.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree/usage_selection.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ntree.selection.remove(\"2\"); \ntree.selection.remove();\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX Window with Full HTML Structure - HTML\nDESCRIPTION: This snippet demonstrates a complete HTML file setup for initializing a DHTMLX Window component. It shows how to include DHTMLX Suite JavaScript and CSS source files in the document head. In the body, a script block creates a new Window using dhx.Window with configuration parameters for title, modal, resizable, and movable. Inputs needed are the correct paths to suite.js and suite.css. Outputs are the creation (but not display) of a DHTMLX Window. Dependencies include DHTMLX Suite's codebase JS and CSS, and the dhx.Window object. The code must run in a browser environment, and you should avoid using 'window' as a variable name to prevent clashing with the global window object.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/window/how_to_start.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\\n<html>\\n    <head>\\n        <title>How to Start with DHTMLX Window</title>         \\n        <script type=\\\"text/javascript\\\" src=\\\"../../codebase/suite.js\\\"></script>\\n        <link rel=\\\"stylesheet\\\" href=\\\"../../codebase/suite.css\\\">\\n    </head>\\n    <body>\\n        <script>\\n            // creating DHTMLX Window \\n            const dhxWindow = new dhx.Window({\\n                title: \\\"DHX Window\\\",\\n                modal: false,\\n                resizable: true,\\n                movable: true\\n            });\\n        </script>\\n    </body>\\n</html>\n```\n\n----------------------------------------\n\nTITLE: Setting States of Controls in DHTMLX Ribbon - JavaScript\nDESCRIPTION: Demonstrates how to use the setState() method of a DHTMLX Ribbon instance to update the value or state of several controls at once. Requires an initialized DHTMLX Ribbon object. The setState method expects a plain object where each key matches a control ID and the value is the new state or value for that control. No value is returned. Expected input is an object with string keys and values of appropriate types (e.g., string, boolean).\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/ribbon/api/ribbon_setstate_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nribbon.setState({\n    \"search\": \"Hello\",\n    \"edit\": true,\n    \"align\": \"right\"\n});\n```\n\n----------------------------------------\n\nTITLE: Resetting DataCollection Filters in JavaScript\nDESCRIPTION: Examples of using resetFilter() method to reset data filters. The method can reset all non-permanent filters, all filters including permanent ones, or a specific filter by ID.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/data_collection/api/datacollection_resetfilter_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// resets all the filters, except for those that have the \"permanent\" property in the config\ncomponent.data.resetFilter();\n\n// resets all the filters, including those that have the \"permanent\" property in the config\ncomponent.data.resetFilter({ permanent: true });\n\n// resets the filter with the specified id\ncomponent.data.resetFilter({ id: \"filter_id\" });\n```\n\n----------------------------------------\n\nTITLE: Using the destructor method with DHTMLX Layout\nDESCRIPTION: This example demonstrates how to properly destroy a Layout instance from the DHTMLX library. The destructor method removes the Layout instance and releases all occupied resources.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/layout/api/layout_destructor_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlayout.destructor();\n```\n\n----------------------------------------\n\nTITLE: Implementing custom summary calculations for DHTMLX Grid in JavaScript\nDESCRIPTION: This example demonstrates how to define a custom method for calculating population density and use it in the grid's summary configuration. It also shows how to initialize column summaries and retrieve summary values.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_summary_config.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// defining the method for calculating the density of population\ndhx.methods.populationDensity = (rows) => {\n    const totalPopulation = rows.reduce((sum, row) => sum + row.population, 0);\n    const totalArea = rows.reduce((sum, row) => sum + row.area, 0);\n    return totalArea ? (totalPopulation / totalArea).toFixed(2) : 0;\n};\n\n// adjusting a grid and using the method for calculating density\nconst grid = new dhx.Grid(\"grid_container\", {\n    columns: [\n        { \n            width: 150, \n            id: \"population\", \n            header: [{ text: () => `<mark>Population</mark>`, htmlEnable: true }],\n            footer: [{ text: ({ totalPopulation, count }) => `Total: ${totalPopulation}, Count: ${count}` }],\n            // initializing column summary as a string\n            summary: \"count\" \n        },\n        {\n            width: 150,\n            id: \"area\",\n            header: [{ text: ({ customSum }) => `Area: ${customSum}` }],\n            // initializing column summary as an object\n            summary: {\n                customSum: rows => {\t\t\n                    return dhx.methods.sum(rows, \"population\") + dhx.methods.sum(rows, \"area\");\t\t\n                },\n            }\n        },\n        {\n            width: 150,\n            id: \"density\",\n            header: [{ text: \"Density\" }],\n            footer: [{ text: ({ density }) => `Density: ${density}` }],\n        }\n    ],\n    // initializing grid summary\n    summary: {\n        totalPopulation: [\"population\", \"sum\"],\n        totalArea: [\"area\", \"sum\"],\n        density: \"populationDensity\" // adding the summary value for density\n    },\n    data: dataset\n});\n\n// an example of getting the values of population density\nconst summary = grid.getSummary();\nconsole.log(summary); // { totalPopulation: 1000000, totalArea: 50000, density: 20.00 }\n```\n\n----------------------------------------\n\nTITLE: Initializing Global State with DHTMLX Optimus Store\nDESCRIPTION: Creates a global application state using DHTMLX Optimus Store and subscribes to changes. The example sets up an initial state with an 'active' property and handles view change events to update the state.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/optimus_guides/index.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport { App } from \"dhx-optimus\";\nimport Store from \"dhx-optimus-store\";\n\nimport { TopLayout } from \"./views/TopLayout\";\n\nconst initialState = {\n    active: \"first\",\n};\n\nexport class MyApp extends App {\n    init() {\n        // create a global store\n        this.store = new Store(initialState);\n        this.params.store = this.store;\n        this.state = this.store.getState();\n\n        this.show(null, TopLayout);\n\n        // subscribe to Store changes\n        this.on(\"viewChange\", id => {\n            this.state.active = id;\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling filterChange Event in DHTMLX Grid\nDESCRIPTION: This code snippet demonstrates how to attach an event listener to the filterChange event of a DHTMLX Grid. It logs a message to the console when a user enters text into a column's filter input.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_filterchange_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngrid.events.on(\"filterChange\", (value, colId, filterId) => {\n    console.log(\"You've entered \"+value+\" into the \"+colId+\" column\");\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX Pie Chart\nDESCRIPTION: Creates a new pie chart instance with custom configuration including paddings, lines between sectors, percentage display, and custom tooltips. The chart is configured to display user data with specific styling and interactive features.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tutorial/basic_application/step6.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar chart = new dhx.Chart(null, { \n    type: \"pie\", //the type of the chart is pie\n    series: [ \n        //an array of series objects\n        {\n            paddings: 170, // paddings between the chart and layout borders\n            useLines: true, // shows lines between chart sectors and labels\n            subType: \"percentOnly\", // puts % on the chart\n            // for data communication: \n            // a chart value takes the value from a dataset (see step 7)\n            value: \"value\",             \n               color: \"color\",\n            // sets templates \"Premium\"/\"Default Users\" \n            // for labels of data items rendered on a scale \n            text: \"text\", \n            stroke: \"#FFFFFF\",\n            strokeWidth: 2,\n            tooltip: true, //shows values of data items in tooltips\n            // the template function takes the \"point\" array as an argument \n            tooltipTemplate: function(point) {             \n                //The array elements are value and text\n                   return point[0] + (point[0] > 1 ? \" Users\" : \" User\");\n            }\n        }\n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: Exporting Grid Data to PNG in JavaScript\nDESCRIPTION: Demonstrates exporting grid data to a PNG file using the png() method of the Export module, with a custom theme.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/usage.md#2025-04-22_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\ngrid.export.png({\n    theme: \"dark\",\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling a Form with the enable() Method in DHTMLX\nDESCRIPTION: A simple example showing how to enable a form that was previously disabled using the enable() method. This method takes no parameters and returns void.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/form_enable_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.enable();\n```\n\n----------------------------------------\n\nTITLE: Using Form validate method without parameters\nDESCRIPTION: This example shows how to use the validate() method without parameters, which triggers validation events and visually updates the form to show validation status.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/form_validate_method.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst result = form.validate(); // -> true/false\n```\n\n----------------------------------------\n\nTITLE: Show/Hide Ribbon Controls\nDESCRIPTION: Demonstrates how to show and hide specific Ribbon controls by their IDs.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/ribbon/operating_ribbon.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nribbon.hide(\"add_btn\");\nribbon.show([\"save_btn\",\"del_btn\"]);\n```\n\n----------------------------------------\n\nTITLE: Removing a Row in DHTMLX Grid\nDESCRIPTION: Use the remove() method of DataCollection to remove a specific row from the grid. Pass the id of the row to be removed.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/usage.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ngrid.data.remove(\"5\");\n```\n\n----------------------------------------\n\nTITLE: Initializing Toggle Control in DHTMLX Form\nDESCRIPTION: Creates a new Form instance with a Toggle control. The toggle includes icons and text for both on/off states, allowing visual representation of the current state.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/toggle.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst form = new dhx.Form(\"form_container\", {\n    rows: [\n        {            \n            type: \"toggle\",\n            name: \"toggle\",\n            icon: \"dxi dxi-eye\",\n            offIcon: \"dxi dxi-eye-off\",\n            text: \"Visible\",\n            offText: \"Invisible\"\n        }\n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Grid Column Pattern Mask\nDESCRIPTION: Example of implementing a pattern mask in a Grid column configuration to format employee IDs with a specific pattern 'ID.000'.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/gridcolumn_properties/gridcolumn_patternmask_property.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst grid = new dhx.Grid(\"grid_container\", {\n    columns: [\n        {  \n            id: \"employee_id\", \n            header: [{ text: \"Employee ID\" }], \n            patternMask: \"ID.000\" \n        },\n        // more columns configuration objects\n    ],\n    // more options\n});\n```\n\n----------------------------------------\n\nTITLE: Canceling File Upload in DHTMLX Uploader\nDESCRIPTION: Demonstrates how to cancel the upload of a specific file using its ID in the DHTMLX Uploader component. The abort() method can be called with or without a file ID - if no ID is provided, it cancels all pending uploads.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/uploader/api/uploader_abort_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvault.uploader.abort(\"file_id\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Avatar Control Properties in DHTMLX Form\nDESCRIPTION: This code snippet demonstrates the available properties for configuring an Avatar control within a DHTMLX Form. It includes options for customizing appearance, behavior, and functionality of the Avatar component.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/avatar/api_avatar_properties.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    type: \"avatar\",\n    name?: string,\n    id?: string,\n\n    target?: string,\n    value?: object,\n\n    hidden?: boolean, // false by default\n    disabled?: boolean, // false by default\n    readOnly?: boolean, // false by default\n\n    removeIcon?: boolean, // true by default \n    circle?: boolean, // false by default\n    icon?: string,\n    placeholder?: string,\n    preview?: string,\n    alt?: string,\n    size?: \"small\" | \"medium\" | \"large\" | number, // \"medium\" by default\n    \n    css?: string,\n    width?: string | number | \"content\", // \"content\" by default\n    height?: string | number | \"content\", // \"content\" by default\n    padding?: string | number, \n\n    label?: string,\n    labelWidth?: string | number,\n    labelPosition?: \"left\" | \"top\", // \"top\" by default\n    hiddenLabel?: boolean, // false by default\n    helpMessage?: string,\n    required?: boolean, // false by default\n\n    preMessage?: string,\n    successMessage?: string,\n    errorMessage?: string,\n\n    validation?: (value: object) => boolean,\n\n    accept?: string, // \"image/*\" by default\n    fieldName?: string, // \"file\" by default\n    autosend?: boolean, // false by default\n    params?: { [key: string]: any },\n    headerParams?: { [key: string]: any },\n    updateFromResponse?: boolean  // true by default \n}\n```\n\n----------------------------------------\n\nTITLE: Loading Menu Options from JSON Array in JavaScript\nDESCRIPTION: Demonstrates how to parse menu options from a JSON array, including nested items, separators, and icons.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/menu/creating_context_menu.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = [\n    { value: \"File\", \n        items: [\n            { value: \"New File\", icon: \"dxi dxi-file-outline\"},                      \n            { value: \"Remove File\", icon: \"dxi dxi-delete\"}        \n        ]\n    },\n    {\n        type: \"separator\"\n    },\n    { value: \"Edit\",\n        items: [\n            { value: \"Undo\", icon: \"dxi dxi-undo\"},\n            { value: \"Redo\", icon: \"dxi dxi-redo\"}\n         ]\n    },\n    {\n        type: \"spacer\"\n    }\n];\n\ncmenu.data.parse(data);\n```\n\n----------------------------------------\n\nTITLE: Pie Chart Value Template Implementation\nDESCRIPTION: Shows how to add custom templates for displaying percentage values in Pie, Pie3D and Donut charts.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/chart/customization.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst chart = new dhx.Chart(\"chart_container\", {\n    type: \"pie\",\n    series: [\n        {\n            value: \"value\",\n            valueTemplate: value => {\n                return (value * 100).toFixed(2) + \"%\";\n            }\n        }\n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Grid Dataset Structure in JavaScript\nDESCRIPTION: Example of preparing a JSON dataset structure for DHTMLX Grid with required fields like id and column content.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/data_loading.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst dataset = [\n    {\n        \"id\": 0,\n        \"a\": 1,\n        \"b\": \"Linwood Long long long\",\n        \"c\": \"Petersen\",\n        \"d\": \"Dahlgreen Place\"\n    },\n    {\n        \"id\": 1,\n        \"a\": 2,\n        \"b\": \"Edenburg\",\n        \"c\": \"Agnes\",\n        \"d\": \"Gem Street\"\n    }\n    // more columns\n];\n```\n\n----------------------------------------\n\nTITLE: Implementing eventHandlers in DataView Initialization\nDESCRIPTION: This example shows how to initialize a DataView with a custom template and eventHandlers. It defines click and mouseover handlers for elements with a specific CSS class.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/dataview/api/dataview_eventhandlers_config.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction template() {\n    return \"<div class='class_name'></div>\";\n}\n\nconst dataview = new dhx.DataView(\"dataview_container\", {\n    template: template,\n    eventHandlers: {\n        onclick: {\n            class_name: function(event) {\n                console.log(\"You clicked on \" + event.target.tagName);\n                // return false;\n            },\n        },\n        onmouseover: {\n            class_name: function(event, id) {\n                console.log(\"Item ID: \" + id);\n            },\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing afterHide Event Handler for Checkbox Group in DHTMLX Form\nDESCRIPTION: This code example shows how to attach an event handler to the afterHide event of a Checkbox Group control in a DHTMLX form. The handler logs the current value of the control, the ID of the hidden checkbox (if applicable), and whether the event was triggered during initialization.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/checkbox_group/checkboxgroup_afterhide_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"CheckboxGroup\").events.on(\"afterHide\", function(value, id, init) {\n    console.log(\"afterHide\", value, id, init);\n});\n```\n\n----------------------------------------\n\nTITLE: Working with ID-based Form Values in JavaScript\nDESCRIPTION: Shows how the getValue() method returns form values when the name attribute is not specified. In this case, the object uses control IDs as keys instead of names.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/form_getvalue_method.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst state = form.getValue();\n// -> {\"id\":\"John Doe\"}\n```\n\n----------------------------------------\n\nTITLE: Localizing Grouping Labels in DHTMLX Grid - JavaScript/JSX\nDESCRIPTION: Defines a locale configuration object for customizing grid grouping label text. Each property corresponds to a label or placeholder in the grid's grouping user interface. The configuration is meant to be used for translating UI elements and setting the grid locale, enabling support for multiple languages.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/usage.md#2025-04-22_snippet_44\n\nLANGUAGE: JSX\nCODE:\n```\nconst en = {\\n    total: \\\"Total\\\", // the name of the total row \\n    groupText: \\\"Group\\\", // the name of the column with grouped data\\n    dropAreaTitle: \\\"Group by:\\\", // the name of the area to drop column headers at\\n    dropAreaPlaceholder: \\\"Drag the column header here\\\", // the placeholder of the dropping area\\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Selected Items in DHTMLX Ribbon with JavaScript\nDESCRIPTION: This snippet demonstrates how to use the getSelected() method of a DHTMLX Ribbon instance to retrieve an array of currently selected item IDs. The method returns an array of strings or numbers, depending on the IDs assigned to the ribbon items. No special dependencies are required beyond an initialized DHTMLX Ribbon instance. The output is an array such as [\\\"selected_1\\\", \\\"selected_1.1\\\"], representing the currently selected items. This method is available from DHTMLX Suite version 7.0 and does not modify the ribbon state.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/ribbon/api/ribbon_getselected_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nribbon.getSelected(); // -> [\"selected_1\", \"selected_1.1\"]\n```\n\n----------------------------------------\n\nTITLE: Handling Row Resize Event in DHTMLX Grid\nDESCRIPTION: Example showing how to attach an event handler for the beforeRowResize event. The handler logs the current height and returns true to allow resizing. Requires PRO version with autoHeight and editable config options enabled.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_beforerowresize_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngrid.events.on(\"beforeRowResize\", (row, event, currentHeight) => {\n    console.log(\"Current row height:\", currentHeight);\n    return true;\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX Tabbar with Bottom Mode in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates initializing a DHTMLX Tabbar component within an HTML container identified by 'tabbar_container'. It specifically sets the `mode` configuration option to 'bottom', causing the tabs to be displayed below the content area. The default mode is 'top'. This requires the DHTMLX Suite library and an HTML element with the ID 'tabbar_container'.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tabbar/api/tabbar_mode_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst tabbar = new dhx.Tabbar(\"tabbar_container\", {\n    mode: \"bottom\"\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Cell Configuration in DHTMLX Grid\nDESCRIPTION: Use the getCellRect() method to return an object with coordinates of a specific cell. It takes the ids of the row and column as parameters.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/usage.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst rect = grid.getCellRect(\"1\", \"c\");\n// -> { x: 200, y: -40, height: 40, width: 200 }\n```\n\n----------------------------------------\n\nTITLE: Handling Input Creation in DHTMLX Sidebar\nDESCRIPTION: Example showing how to attach an event listener to the inputCreated event of a DHTMLX Sidebar. The event provides the ID of the new input and the input element itself.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/sidebar/api/sidebar_inputcreated_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsidebar.events.on(\"inputCreated\", function(id, el){\n    console.log(id);\n});\n```\n\n----------------------------------------\n\nTITLE: Checking Item Existence in DataCollection\nDESCRIPTION: Demonstrates how to use the exists() method to verify if an item with a specific ID exists in a DataCollection component. The method returns a boolean value indicating the item's existence.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/data_collection/api/datacollection_exists_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst item = component.data.exists(\"1\");\n```\n\n----------------------------------------\n\nTITLE: Setting Grid Columns Configuration in JavaScript\nDESCRIPTION: Demonstrates how to use the setColumns() method to define new column configurations for a DHTMLX Grid. The method accepts an array of column objects, each specifying properties like ID and header text.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_setcolumns_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngrid.setColumns([\n    { id: \"a\", header: [{ text: \"New header for column a\" }] },\n    { id: \"b\", header: [{ text: \"New header for column b\" }] },\n    // more columns objects\n]);\n```\n\n----------------------------------------\n\nTITLE: Adding Custom CSS Classes to Calendar\nDESCRIPTION: Example of how to add custom CSS classes to style a calendar. Shows the pattern of creating CSS classes and applying them via the css configuration property.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar2/functionality_and_features/calendar_stylization.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n<style>\n    .my_first_class {\n        /*some styles*/\n    }\n    \n    .my_second_class {\n        /*some styles*/\n    }\n</style>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar calendar = new dhx.Calendar({\n    css:\"my_first_class my_second_class\"\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Value for Text Control in DHTMLX Form (JavaScript)\nDESCRIPTION: This snippet demonstrates how to use the setValue() method to set a value for a Text control in a DHTMLX Form. The method takes a string or number parameter and sets it as the value of the specified Text control.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/text/text_setvalue_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nform.getItem(\"text\").setValue(\"This is the Text control\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Form Alignment in JavaScript\nDESCRIPTION: Example shows how to configure alignment for Form controls using rows and columns with various alignment options\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/configuration.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst form = new dhx.Form(\"form_container\", {\n    css: \"dhx_widget--bordered\",\n    height: \"150px\",\n    width: \"400px\",\n    // sets alignment for rows\n    align: \"start\", // \"center\", \"end\", \"between\", \"around\", \"evenly\"\n    padding: \"20px\",   \n    rows: [\n        {\n            padding: \"10px\", \n            // sets alignment for columns\n            align: \"start\",  // \"center\", \"end\", \"between\", \"around\", \"evenly\"\n            cols: [\n                {\n                    name: \"radiogroup\",\n                    type: \"radioGroup\",\n                    label: \"Do you agree with our terms and conditions?\",\n                    value: \"agree\",\n                    options: {\n                        cols: [\n                            {\n                                type: \"radioButton\",\n                                text: \"Yes\",\n                                value: \"agree\",\n                            },\n                            {\n                                type: \"radioButton\",\n                                text: \"No\",\n                                value: \"disagree\"\n                            },\n                        ]\n                    },\n                },\n            ]\n        }\n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: Styling DHTMLX Form with Custom CSS\nDESCRIPTION: This example demonstrates how to apply custom CSS to a DHTMLX Form component using the css config option. It includes custom CSS variables for styling and shows the complete Form initialization with custom styling.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/form_css_config.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<style>\n    .custom {\n        --dhx-background-primary: rgb(238, 238, 238);\n        --dhx-color-primary: #118d8d;\n        --dhx-color-primary-active: #118d8d;\n        --dhx-color-primary-hover: #1ad1d1;\n    }\n</style>\n\n<script>\n    const form = new dhx.Form(\"form_container\", {\n        padding: 40,\n        width: 400,\n        css: \"custom\",\n        rows: [\n            {\n                type: \"input\",\n                label: \"Name\",\n                placeholder: \"John Doe\",\n            },\n            {\n                type: \"input\",\n                label: \"Email\",\n                placeholder: \"jd@mail.name\"\n            },\n            // more controls\n        ]\n    });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Showing a Popup using DHTMLX Popup (JavaScript)\nDESCRIPTION: Demonstrates how to show a Popup by calling the show() method on a DHTMLX Popup instance, passing in the identifier or reference to the container element. No additional configuration is provided in this basic usage. The input is the container's ID or DOM element, and the Popup is displayed anchored to it.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/popup/work_with_popup.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\npopup.show(\"popup_container\");\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX Layout with JavaScript Constructor\nDESCRIPTION: This JavaScript code initializes the DHTMLX Layout using the dhx.Layout constructor. It takes two parameters: the id of the container element and a configuration object that defines the layout structure.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/layout/initialization.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst layout = new dhx.Layout(\"layout_container\", {cols});\n```\n\n----------------------------------------\n\nTITLE: Setting Dates with setValue() Method in DHTMLX Calendar (JavaScript)\nDESCRIPTION: This code demonstrates different ways to set dates in a DHTMLX Calendar component using the setValue() method. It shows examples of setting the current date, specific dates as strings, and date ranges in both Date object and string formats.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar/api/calendar_setvalue_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// sets the current date\ncalendar.setValue(new Date());\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// sets the current date as an array of Date value\ncalendar.setValue([new Date()]);\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// sets a date as a string\ncalendar.setValue(\"30/05/19\");\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// sets a date as an array of string value\ncalendar.setValue([\"30/05/19\"]);\n```\n\nLANGUAGE: javascript\nCODE:\n```\n//sets dates as an array of Date values(for the range mode)\ncalendar.setValue([new Date(2019,05,03), new Date(2019,05,19)]);\n```\n\nLANGUAGE: javascript\nCODE:\n```\n//sets dates as an array of string values(for the range mode)\ncalendar.setValue([\"03/06/19\", \"15/06/19\"]);\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX DataView in HTML\nDESCRIPTION: This snippet demonstrates how to include DHTMLX DataView source files, create a container, and initialize the DataView component in an HTML file.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/dataview/initialization.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n    <head>\n        <title>How to start with DHTMLX DataView</title>         \n        <script type=\"text/javascript\" src=\"../../codebase/suite.js\"></script>\n        <link rel=\"stylesheet\" href=\"../../codebase/suite.css\">\n    </head>\n    <body>\n        <div id=\"dataview_container\"></div>\n        <script>\n            // creating DHTMLX DataView\n            const dataview = new dhx.DataView(\"dataview_container\", {\n                itemsInRow: 5\n            });\n        </script>\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Detaching Event Listener in DHTMLX Form\nDESCRIPTION: Demonstrates how to attach and then detach an event listener from a form component using the form.events.detach() method.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/handling_events.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nform.events.on(\"click\", function(name,e){\n    console.log(id);\n});\n\nform.events.detach(\"click\");\n```\n\n----------------------------------------\n\nTITLE: Handling afterRowDrag Event in DHTMLX Grid\nDESCRIPTION: This code snippet demonstrates how to attach an event listener for the afterRowDrag event in a DHTMLX Grid. The event fires after dragging a row is finished and provides data about the drag operation.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_afterrowdrag_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngrid.events.on(\"afterRowDrag\", (data, event) => {\n    // your logic here\n});\n```\n\n----------------------------------------\n\nTITLE: Calendar Year Mode Example\nDESCRIPTION: Shows how to set calendar to year selection mode\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar2/operating_calendar.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncalendar.showDate(new Date(2020,11,12),\"year\");\n\n// shows the current year\ncalendar.showDate(null,\"year\");\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX Grid with HTML Content Enabled\nDESCRIPTION: This snippet demonstrates how to initialize a DHTMLX Grid with the htmlEnable option set to true, allowing HTML content to be displayed in Grid columns. It includes configuration for columns and data.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_htmlenable_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst grid = new dhx.Grid(\"grid_container\", {\n    columns: [\n        // columns config\n    ],\n    data: dataset,\n    htmlEnable: true\n});\n```\n\n----------------------------------------\n\nTITLE: Destroying Timepicker Instance in JavaScript\nDESCRIPTION: Demonstrates how to properly destroy a Timepicker instance and free up resources using the destructor() method. This method removes the timepicker from the DOM and cleans up any associated event listeners and memory.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/timepicker/api/timepicker_destructor_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntimepicker.destructor();\n```\n\n----------------------------------------\n\nTITLE: Initializing Form with Toggle Group and Using getProperties() Method\nDESCRIPTION: This example demonstrates how to initialize a Form with a Toggle Group control and use the getProperties() method to retrieve configuration attributes of the control and individual toggles.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/togglegroup/togglegroup_getproperties_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst form = new dhx.Form(\"form_container\", { \n    rows: [\n        {\n            id: \"toggleGroup\",\n            name: \"align\",\n            type: \"toggleGroup\",\n            value: {\n                \"left\": true,\n            },\n            options: [\n                {\n                    id: \"left\",\n                    icon: \"dxi dxi-format-align-left\",\n                },\n                {\n                    id: \"center\",\n                    icon: \"dxi dxi-format-align-center\",\n                    value: \"center\",\n                },\n                {\n                    id: \"right\",\n                    icon: \"dxi dxi-format-align-right\",\n                    value: 1,\n                }\n            ]\n        },\n    ]\n});\n\n// return the object of the ToggleGroup control \nform.getItem(\"ToggleGroup\").getProperties();\n\n// return the object of a toggle of the ToggleGroup control \nform.getItem(\"ToggleGroup\").getProperties(\"second\");\n```\n\n----------------------------------------\n\nTITLE: AwaitRedraw Implementation in DHTMLX Grid\nDESCRIPTION: Example showing how to use awaitRedraw in a Grid component's AfterSelect event to ensure accurate selection count after rendering.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/helpers/await_redraw.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ngrid.events.on(\"AfterSelect\", function (row, col) {\n    dhx.awaitRedraw().then(function () {\n        console.log(grid.selection.getCells().length);\n    })\n});\n```\n\n----------------------------------------\n\nTITLE: Linking Two Calendars for Date Range\nDESCRIPTION: Example of linking two calendars together to create a date range selector\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar2/operating_calendar.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar calendar = new dhx.Calendar(\"calendar1\", { css: \"dhx_calendar--bordered\" });\nvar calendar2 = new dhx.Calendar(\"calendar2\", { css: \"dhx_calendar--bordered\" });\n\ncalendar.link(calendar2);\n\ncalendar.events.on(\"change\", function (date) {\n    document.querySelector(\"#resultFrom\").innerHTML = \n        \"Date from: \" + calendar.getValue() + \"</br>\";\n});\n\ncalendar2.events.on(\"change\", function (date) {\n    document.querySelector(\"#resultTo\").innerHTML = \n        \"Date to: \" + calendar2.getValue() + \"</br>\";\n});\n```\n\n----------------------------------------\n\nTITLE: Toggling a Tree Item in JavaScript\nDESCRIPTION: This code snippet demonstrates how to use the toggle() method to open or close a specific tree item by its ID. The method takes a single parameter, which is the ID of the tree item to be toggled.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree/api/tree_toggle_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ntree.toggle(\"history\");\n```\n\n----------------------------------------\n\nTITLE: Attaching Calendar Change Event Listener in JavaScript\nDESCRIPTION: Demonstrates how to attach a Change event listener to a dhtmlx Calendar instance. The example shows how to access the date values and click information passed to the event handler.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar2/handling_events.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncalendar.events.on(\"Change\",function(date, oldDate, click){\n    console.log(\"Change selection from \"+oldDate+\" to \"+date);\n    console.log(click);\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Values for Form Controls using setValue() method in JavaScript\nDESCRIPTION: This example demonstrates how to use the setValue() method to set values for form controls. The method takes an object where keys are control names/ids and values are the new values to set.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/form_setvalue_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.setValue({\"input_name\":\"Jack London\", \"slider_id\":10});\n```\n\n----------------------------------------\n\nTITLE: Getting Select Control Value\nDESCRIPTION: Demonstrates how to retrieve the value of a Select control using the getItem() method\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/select.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst value = form.getItem(\"select\").getValue();\n```\n\n----------------------------------------\n\nTITLE: Initializing Second List and Data Parse\nDESCRIPTION: Creating a second list instance and parsing the serialized data from the first list.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/guides/datacollection_guide.md#2025-04-22_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n//creating list2\n list2 = new dhx.List(\"list2\", {\n    css: \"dhx_widget--bordered\",\n    template: template\n});\n\n//parsing the state of list into list2\nlist2.data.parse(state);\n```\n\n----------------------------------------\n\nTITLE: Attaching afterColumnDrag Event Handler in JavaScript\nDESCRIPTION: This snippet demonstrates how to attach an event handler for the afterColumnDrag event in a DHTMLX Grid. The event fires after column dragging is completed, providing data about the drag operation and the original mouse event.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_aftercolumndrag_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngrid.events.on(\"afterColumnDrag\", (data, event) => {\n    // your logic here\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Dates in Calendar with setValue Method in JavaScript\nDESCRIPTION: Examples of using the setValue method in DHTMLX Calendar to select dates in various formats including single Date object, array of Date objects, string, and array of strings. The method supports both single date selection and range mode.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar2/api/calendar_setvalue_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// sets the current date\ncalendar.setValue(new Date());\n\n// sets the current date as an array of Date value\ncalendar.setValue([new Date()]);\n\n// sets a date as a string\ncalendar.setValue(\"30/05/19\");\n\n// sets a date as an array of string value\ncalendar.setValue([\"30/05/19\"]);\n\n//sets dates as an array of Date values(for the range mode)\ncalendar.setValue([new Date(2019,05,03), new Date(2019,05,19)]);\n\n//sets dates as an array of string values(for the range mode)\ncalendar.setValue([\"03/06/19\", \"15/06/19\"]);\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Templates to Grid Cells in DHTMLX\nDESCRIPTION: This snippet illustrates how to customize the content of cells in a DHTMLX Grid using the 'template' property of a column configuration. The example shows a custom checkbox template based on cell value.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/customization.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst grid = new dhx.Grid(\"grid_container\", {\n    columns: [\n        { width: 200, id: \"country\", header: [{text: \"Country\"}] },\n        { width: 150, id: \"population\", header: [{text: \"Population\"}] },\n        { width: 150, id: \"netChange\", header: [{text: \"Net Change\"}],\n          htmlEnable: true,\n          template: function (text, row, column) {\n            return \"<input type=\\\"checkbox\\\" \" + (text > 300000 ? \"checked\": \"\")  + \">\";\n          }\n        }\n    ],\n    data: dataset\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Alert Box in DHTMLX JavaScript\nDESCRIPTION: Illustrates the usage and configuration options for creating an alert box using the dhx.alert() function. Includes parameters for text, header, CSS, buttons, button alignment, and HTML content enablement.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/message/api/api_message_properties.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ndhx.alert({\n    text: string,\n    header?: string,\n    css?: string,\n    buttons?: string[],\n    buttonsAlignment?: \"left\" | \"center\" | \"right\", // \"left\" by default\n    blockerCss?: string,\n    htmlEnable?: boolean, // true by default \n});\n```\n\n----------------------------------------\n\nTITLE: Handling DataView beforeDrop Event in JavaScript\nDESCRIPTION: Event handler example for the beforeDrop event in DHTMLX DataView. The event fires before completing an item drag operation and allows preventing the default drop behavior by returning false.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/dataview/api/dataview_beforedrop_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndataview.events.on(\"beforeDrop\", function(data, events) {\n    // your logic here\n    return false;\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing Popup with CSS in HTML and JavaScript\nDESCRIPTION: Defines a custom CSS class in a <style> block and applies it to a DHTMLX Popup component instance via the css property when initializing with JavaScript. Requires DHTMLX library to be included in the page. The 'custom' class sets font and background variables, adds margin and an opacity animation. The css option in the constructor enables combining built-in and custom classes for granular control of the popup's appearance. No data is passed to the popup; this only affects visual theming.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/popup/api/popup_css_config.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<style>\n    .custom {\n        --dhx-font-color-primary: var(--dhx-color-white);\n        --dhx-background-primary: var(--dhx-color-primary);\n\n        margin-top: 25px;\n        animation: opacity .4s ease-in-out forwards;\n    }\n</style>\n\n<script>\n    const popup = new dhx.Popup({\n        css: \"dhx_widget--border-shadow custom\"\n    });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Removing Options from ComboBox in JavaScript\nDESCRIPTION: Illustrates how to remove options from a ComboBox using the remove() method of the Data Collection API.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/combobox/work_with_combo.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\ncombo.data.remove(\"option_id\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Price Format Mask in DHTMLX Form Input (JSX)\nDESCRIPTION: Illustrates how to configure a number mask for price input in a DHTMLX form. It sets a currency prefix and specifies the number of decimal places.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/work_with_form.md#2025-04-22_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n {\n    type: \"input\",\n    numberMask: {\n        prefix: \"$ \",\n        maxDecLength: 2\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Expanding All Rows in DHTMLX Grid (JavaScript)\nDESCRIPTION: This example demonstrates how to use the expandAll() method to expand all collapsed rows in a DHTMLX Grid configured as a TreeGrid. The method is called after initializing the grid with specific options.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_expandall_method.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst grid = new dhx.Grid(\"grid_container\", {\n    type: \"tree\",\n    columns: [\n       // columns config\n    ],\n    data: dataset,\n});\n\ngrid.expandAll();\n```\n\n----------------------------------------\n\nTITLE: Handling Asynchronous Data Loading in JavaScript\nDESCRIPTION: Shows how to handle asynchronous data loading using promises. This ensures that code execution waits for the data to be loaded before proceeding.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree_collection/api/treecollection_load_method.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ntoolbar.data.load(url).then(function(){\n    //do something after load;\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing LazyDataProxy for Dynamic Loading in JavaScript\nDESCRIPTION: This snippet demonstrates how to initialize the LazyDataProxy object for dynamic data loading in DHTMLX components. It specifies the URL for data loading and configuration parameters such as limit, prepare, delay, and starting index.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/helpers/lazydataproxy.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nnew dhx.LazyDataProxy(\"https://docs.dhtmlx.com/suite/backend/lazyload\", {\n    limit: 30,\n    prepare: 5,\n    delay: 150,\n    from: 0\n});\n```\n\n----------------------------------------\n\nTITLE: REST API Integration Example with DataCollection\nDESCRIPTION: Demonstrates how to use DataCollection helper to load data from a backend service into DHTMLX Suite components via the load() method\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/integration/suite_and_backend.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nDataCollection.load()\n```\n\n----------------------------------------\n\nTITLE: Form Request Implementation\nDESCRIPTION: Example showing form data submission using POST request method in DHTMLX Form component\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/integration/suite_and_backend.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Form implementation using POST request\n```\n\n----------------------------------------\n\nTITLE: Sending DHTMLX Form Data to Server (JSX)\nDESCRIPTION: Shows how to send form data to a server using the send() method in DHTMLX, specifying the URL and request method.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/work_with_form.md#2025-04-22_snippet_20\n\nLANGUAGE: jsx\nCODE:\n```\nconst send = form.send(\"myserver.com\", \"POST\");\n```\n\n----------------------------------------\n\nTITLE: Retrieving Input Value with getValue Method in DHTMLX Form\nDESCRIPTION: This example demonstrates how to use the getValue() method to retrieve the current value from an Input control in a DHTMLX Form. The method returns the value as a string or number depending on the input type.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/input/input_getvalue_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst value = form.getItem(\"input\").getValue();\n// -> \"John\"\n```\n\n----------------------------------------\n\nTITLE: Defining Editor Types for Grid Columns\nDESCRIPTION: Shows the available editor type options that can be used for Grid columns. Options include input, select, datePicker, combobox, multiselect, and textarea.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/gridcolumn_properties/gridcolumn_editortype_property.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\neditorType?: \"input\" | \"select\" | \"datePicker\" | \"combobox\" | \"multiselect\" | \"textarea\";\n```\n\n----------------------------------------\n\nTITLE: Form Input Number Mask Configuration\nDESCRIPTION: Configuration for numeric input masking with custom formatting options\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/work_with_form.md#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n{\n    type: \"input\",\n    numberMask:{\n        prefix: \"$\",\n        groupSeparator: \",\",\n        decSeparator: \".\",\n        maxIntLength: 7,\n        maxDecLength: 2,\n        minDecLength: 0\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Preparing Dataset for DHTMLX Combo Box\nDESCRIPTION: Example of creating a properly formatted dataset for DHTMLX Combo Box with country names and flag images. Each object requires a value property and can include additional attributes.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/combobox/adding_options.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst dataset = [\n    {\n        value: \"Austria\",\n        src: \"../common/flags/at.png\"\n    },\n    {\n        value: \"Belgium\",\n        src: \"../common/flags/be.png\"\n    },\n    {\n        value: \"Bulgaria\",\n        src: \"../common/flags/bg.png\"\n    },\n    {\n        value: \"Cyprus\",\n        src: \"../common/flags/cy.png\"\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Attaching a DHTMLX Grid to a Container in JavaScript Form\nDESCRIPTION: This example demonstrates how to create a DHTMLX Form with a Container control, initialize a Grid widget, and then attach the Grid to the Container using the attach() method. The Form includes a Container named 'grid' with specific styling and dimensions.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/container/container_attach_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst form = new dhx.Form(\"form_container\", {\n    css: \"dhx_widget--bordered\",\n    padding: \"40px\",\n    rows: [\n        {\n            type: \"container\",\n            name: \"grid\",\n            padding: \"12px 0px\",\n            height: \"100px\"\n        },\n    ]\n});\n\nconst grid = new dhx.Grid(null, {\n    columns: [\n        { width: 200, id: \"country\", header: [{ text: \"Country\" }] },\n        { width: 200, id: \"population\", header: [{ text: \"Population\" }] },\n        { width: 200, id: \"yearlyChange\", header: [{ text: \"Yearly Change\" }] },\n    ],\n});\n\nform.getItem(\"grid\").attach(grid);\n```\n\n----------------------------------------\n\nTITLE: Custom Fuzzy Search Filter Implementation\nDESCRIPTION: Implements a custom fuzzy search filter function for the Combo Box that matches letters regardless of their order in the word.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/combobox/customization.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction fuzzySearch(item, target) {\n    const source = item.value.toLowerCase();\n    target = target.toLowerCase();\n    const sourceLen = source.length;\n    const targetLen = target.length;\n    if (targetLen > sourceLen) {\n        return false;\n    }\n    let sourceIndex = 0;\n    let targetIndex = 0;\n    while (sourceIndex < sourceLen && targetIndex < targetLen) {\n        if (source[sourceIndex] === target[targetIndex]) {\n            targetIndex++;\n        }\n        sourceIndex++;\n    }\n    return targetIndex === targetLen;\n}\n\nconst combo = new dhx.Combobox(\"combo_container\", {\n    filter: fuzzySearch\n});\n```\n\n----------------------------------------\n\nTITLE: Grid subRow with HTML Content\nDESCRIPTION: Demonstrates how to create a Grid with a sub-row that displays HTML content. The subRow callback function receives the row object and returns an HTML string.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_subrow_config.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst grid = new dhx.Grid(\"grid_container\", {\n    columns: [\n        { id: \"zone_name\", header: [{ text: \"Zone name\" }] },\n        { id: \"temperature\", header: [{ text: \"Temperature\" }] },\n        { id: \"status\", header: [{ text: \"Status\" }] },\n    ],\n    data: dataset,\n    subRow: ({ zone_name }) => {\n        return `<div>Details for ${zone_name}</div>`;\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Attaching Event Listener in DHTMLX Combo Box\nDESCRIPTION: Demonstrates how to attach an event listener to a combo box component using the events.on() method. The example shows attaching a handler for the 'open' event.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/combobox/handling_events.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncombo.events.on(\"open\", function() {\n    // your logic here\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Container for DHTMLX Layout\nDESCRIPTION: This HTML snippet creates a div element that serves as a container for the DHTMLX Layout. The container is given an id of 'layout_container' for easy reference in JavaScript.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/layout/initialization.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"layout_container\"></div>\n```\n\n----------------------------------------\n\nTITLE: Setting ComboBox Values in JavaScript\nDESCRIPTION: Demonstrates how to set single and multiple values in a ComboBox using the setValue() method. The method accepts either a single ID or an array of IDs corresponding to options in the data collection.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/combobox/work_with_combo.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// select one option\ncombo.setValue(combo.data.getId(1));\n\n// selects several options at once\ncombo.setValue([combo.data.getId(1), combo.data.getId(3)]);\n```\n\n----------------------------------------\n\nTITLE: Form Enable/Disable Operations\nDESCRIPTION: Examples of enabling, disabling and checking disabled state of forms and individual controls\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/work_with_form.md#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nform.enable();\n```\n\nLANGUAGE: jsx\nCODE:\n```\nform.disable();\n```\n\nLANGUAGE: jsx\nCODE:\n```\nform.isDisabled(); // -> true/false\n```\n\nLANGUAGE: jsx\nCODE:\n```\nform.isDisabled(\"input\"); // -> returns true/false\n```\n\n----------------------------------------\n\nTITLE: JSON Template for MenuItem in DHTMLX Menu\nDESCRIPTION: JSON format template for a MenuItem object in DHTMLX Menu, showing various properties like id, type, value, icon, hotkey, and nested items.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/menu/data_loading.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": \"print\",             \n    \"type\": \"menuItem\",             \n    \"value\": \"Print\",             \n    \"icon\": \"dxi-printer\",        \n    \"hotkey\": \"Alt+P\",                 \n    \"items\": [                        \n        {\n            \"type\": \"menuItem\",\n            \"value\": \"Print\"\n        },\n        {\n            \"type\": \"menuItem\",\n            \"value\": \"Preview and print\",\n            \"icon\": \"dxi-magnify\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Hiding a Grid Column in JavaScript using DHTMLX\nDESCRIPTION: This snippet demonstrates how to use the hideColumn() method to hide a specific column in a DHTMLX Grid. The method takes a column ID as a parameter and hides the corresponding column.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_hidecolumn_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ngrid.hideColumn(\"colId\");\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX Calendar with Date Range Strings (JavaScript)\nDESCRIPTION: Creates a new Calendar instance with a date range selected using string representations of dates. The range mode is enabled.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar2/api/calendar_value_config.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar calendar = new dhx.Calendar(\"calendar_container\", {\n    value: ([\"03/06/19\", \"15/06/19\"]),\n    range: true  \n});\n```\n\n----------------------------------------\n\nTITLE: Handling Grid Cell Edit Completion in JavaScript\nDESCRIPTION: Example demonstrating how to attach an event handler to the afterEditEnd event of a DHTMLX Grid. This event fires after cell editing is completed and provides access to the new value, row, and column information.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_aftereditend_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngrid.events.on(\"afterEditEnd\", (value, row, column) => {\n    // your logic here\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Timepicker Properties Change Event in JavaScript\nDESCRIPTION: Example showing how to attach an event handler to the beforeChangeProperties event of a Timepicker control. The handler logs the changed properties and returns true to allow the change.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/timepicker/timepicker_beforechangeproperties_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"timepicker\").events.on(\"beforeChangeProperties\", function(properties) {\n    console.log(\"beforeChangeProperties\", properties);\n    return true;\n});\n```\n\n----------------------------------------\n\nTITLE: Combining Column IDs and Functions for Grouping Order in dhtmlx Grid (JSX)\nDESCRIPTION: Demonstrates a mixed approach to defining the grouping order in dhtmlx Grid using the `group.order` array. It first groups by a static column ID ('country') and then applies a dynamic grouping based on the first letter of the 'city' name using a callback function. This allows for flexible, multi-level grouping logic. Requires the dhtmlx Grid library and a dataset.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/usage.md#2025-04-22_snippet_33\n\nLANGUAGE: jsx\nCODE:\n```\nconst grid = new dhx.Grid(\"grid_container\", {\n    columns: [\n        { id: \"country\", header: [{ text: \"Country\" }] },\n        { id: \"city\", header: [{ text: \"City\" }],  },\n        { id: \"population\", header: [{ text: \"Population\" }] },\n    ],\n    group: {\n        order: [\n            \"country\", // grouping by a country\n            (row) => row.city[0].toUpperCase() // grouping by the first letter of the city name\n        ]\n    },\n    groupable: true,\n    data: dataset\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Marks to Grid Cells in DHTMLX\nDESCRIPTION: This snippet demonstrates how to add custom marks to specific cells in a DHTMLX Grid using the 'mark' property of a column configuration. It includes both conditional marking for individual cells and marking all cells in a column.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/customization.md#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<style>\n    .my_custom_mark {\n        background: lightcoral;\n    }\n    \n    .total_col {\n        background: #f2f2f2;\n    }\n</style>\n\n<script>\n    const grid = new dhx.Grid(\"grid_container\", {\n        columns: [\n            {\n                id: \"population\", header: [{ text: \"Population\" }],\n                // marks specified cells in a column\n                mark: function (cell, data, row, column) {\n                    return cell > 100000000 ? \"my_custom_mark\" : \"\"\n                }\n            }, \n            {\n                id: \"density\", header: [{ text: \"Density (P/Km²)\" }],\n                // marks all cells in a column\n                mark: function (cell, data) { return \"total_col\"; }\n            },\n        ],\n        data: dataset\n    });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Defining a View Module for DHTMLX Optimus - JavaScript\nDESCRIPTION: This code defines a custom View class (TopLayout) by extending the Optimus View base class and implementing the init() method. The init() method returns an inline HTML string to render as the view's content. To use this view, it should be imported and rendered from the main App class. This pattern is flexible for component-based app structure.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/optimus_guides/index.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { View } from \\\"dhx-optimus\\\";\\n\\nexport class TopLayout extends View {\\n    init() {\\n        return `<h1>Hello Optimus!</h1>`;\\n    }\\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Movability of DHTMLX Window - JavaScript\nDESCRIPTION: Demonstrates how to instantiate a DHTMLX Window with the \\\"movable\\\" property set to true, making the window draggable by the user. Requires the DHTMLX Suite JavaScript library (\\\"dhx\\\"). The \\\"dhx.Window\\\" constructor is passed an object specifying \\\"movable: true\\\"; then, the window is shown using the \\\"show()\\\" method. No additional parameters are required, and the window will be movable by default only if explicitly set, since the default is false.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/window/api/window_movable_config.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst dhxWindow = new dhx.Window({\n    movable:true\n});\n\ndhxWindow.show();\n```\n\n----------------------------------------\n\nTITLE: Defining Complex DHTMLX Layout Structure in JavaScript\nDESCRIPTION: This JavaScript code defines a complex nested structure for DHTMLX Layout. It creates a three-level layout with columns and nested columns, each with headers.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/layout/initialization.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst cols = [\n    {\n        header: \"Sub Block Header row\"\n    },\n    {\n        header: \"Sub Block Header row\",\n        cols: [\n            {\n                header:\"Left cols\"\n            },\n            {\n                header:\"Center cols\",\n                cols: [\n                    { header: \"Sub Block Header cols 1\" },\n                    { header: \"Sub Block Header cols 2\" },\n                    { header: \"Sub Block Header cols 3\" }\n                ]\n            },\n            {\n                header:\"Right\"\n            }\n        ]\n    },\n    { header: \"Sub Block Header\" },\n    { header: \"Sub Block Header\" }\n]\n```\n\n----------------------------------------\n\nTITLE: Moving Items in DataCollection using move() Method\nDESCRIPTION: Demonstrates how to use the move() method to relocate an item to a specific index position within a DataCollection. The method accepts an item ID and target index, optionally allowing movement between different collections.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/data_collection/api/datacollection_move_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncomponent.data.move(\"4\",5);\n```\n\n----------------------------------------\n\nTITLE: Enabling Column Grouping via Groupable Property in DHTMLX Grid - JSX\nDESCRIPTION: Shows how to enable data grouping in DHTMLX Grid by setting both 'group' and 'groupable' properties to true in the configuration. The example uses the DHTMLX Grid/Suite PRO package. The configuration initializes grouping for all columns and includes the necessary data. Useful for enabling drag-and-drop grouping in the Grid UI, it requires the setup of proper columns and supplying a dataset.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/usage.md#2025-04-22_snippet_23\n\nLANGUAGE: JSX\nCODE:\n```\nconst grid = new dhx.Grid(\"grid_container\", {\n    columns: [\n        // columns config\n    ],\n    group: true, \n    groupable: true // allowing grouping row data by the values of all columns\n    data: dataset\n});\n```\n\n----------------------------------------\n\nTITLE: Exporting Grid Data to Excel in JavaScript\nDESCRIPTION: Shows how to export grid data to an Excel file using the xlsx() method of the Export module.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/usage.md#2025-04-22_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\ngrid.export.xlsx({\n    name:\"grid_data\",\n    url: \"//export.dhtmlx.com/excel\"\n});\n```\n\n----------------------------------------\n\nTITLE: Hiding Timepicker Control in DHTMLX Form\nDESCRIPTION: Example showing how to hide a Timepicker control in a form using the hide() method. The method is called on a specific Timepicker control retrieved via the form's getItem() method.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/timepicker/timepicker_hide_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"timepicker\").hide();\n```\n\n----------------------------------------\n\nTITLE: Attaching Event Listeners with DHTMLX Timepicker in JavaScript\nDESCRIPTION: This snippet demonstrates how to attach an event listener to a DHTMLX Timepicker instance using the events.on() method. The 'change' event is monitored, and whenever the timepicker value changes, the new value is logged to the console. Requires an initialized 'timepicker' object from the DHTMLX Suite. The key parameter is the event name, with a case-insensitive match, and a callback function that receives the new value.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/timepicker/handling_events.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ntimepicker.events.on(\"change\", function(value){\n    console.log(\"The value of a timepicker has changed to \"+ value);\n});\n```\n\n----------------------------------------\n\nTITLE: Clearing Both Form Values and Validation in JavaScript\nDESCRIPTION: This code snippet illustrates how to use the clear() method without parameters to clear both form values and validation. This is useful for completely resetting the form to its initial state.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/form_clear_method.md#2025-04-22_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nform.clear();\n```\n\n----------------------------------------\n\nTITLE: Setting Values in JavaScript Combo Box using setValue Method\nDESCRIPTION: The setValue method is used to select one or multiple options in a ComboBox. It accepts either a single ID or an array of IDs corresponding to items in the data collection that should be selected.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/combobox/api/combobox_setvalue_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// selects one option\ncombo.setValue(combo.data.getId(1));\n\n// selects several options at once\ncombo.setValue([combo.data.getId(1), combo.data.getId(3)]);\n```\n\n----------------------------------------\n\nTITLE: Checking the Visibility Status of a DHTMLX Window using JavaScript\nDESCRIPTION: This snippet illustrates how to check if a DHTMLX Window instance (referenced by the variable `window` in this specific example) is currently visible on the page using the `isVisible()` method. It returns `true` if the window is visible and `false` if it is hidden.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/window/usage.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst visible = window.isVisible(); // -> true/false\n```\n\n----------------------------------------\n\nTITLE: Handling Slider Value Changes in DHTMLX Form - JavaScript\nDESCRIPTION: Example demonstrating how to attach an event handler to the beforeChange event of a Slider control in a DHTMLX Form. The handler receives the new value and can prevent the change by returning false.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/slider/slider_beforechange_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"slider\").events.on(\"beforeChange\", function(value) {\n    console.log(\"beforeChange\", value);\n    return true;\n});\n```\n\n----------------------------------------\n\nTITLE: Sorting DataCollection Items in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the sort() method of DataCollection to sort data items in a grid component. It includes options for specifying the sorting field, direction, and a custom function for sorting uppercase values.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/data_collection/api/datacollection_sort_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ngrid.data.sort(\n    {\n        by:\"a\",\n        dir:\"desc\",\n        as: item => (item.toUpperCase())\n    },\n    { smartSorting: true }\n);\n```\n\n----------------------------------------\n\nTITLE: Adding Button with Custom HTML Content\nDESCRIPTION: Creates a button with custom HTML content instead of standard text label. This example shows how to add an image within a custom div container.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/toolbar/button.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    type: \"button\",\n    html: \"<div class='user-button'><img src='../avatars/Avatar.jpg'/></div>\",\n}\n```\n\n----------------------------------------\n\nTITLE: Clearing Combo Box Value in JavaScript\nDESCRIPTION: This code snippet demonstrates how to use the clear() method to remove the currently set value in a Combo Box component. The method takes no parameters and returns void.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/combobox/api/combobox_clear_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ncombo.clear();\n```\n\n----------------------------------------\n\nTITLE: Defining Default Locale for DHTMLX Grid in JavaScript\nDESCRIPTION: This snippet shows the structure of the default English locale for the DHTMLX Grid. It defines translations for various UI elements such as total, group text, and drop area placeholders.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/localization.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst en = {\n    total: \"Total\",\n    groupText: \"Group\",\n    dropAreaTitle: \"Group by:\",\n    dropAreaPlaceholder: \"Drag the column header here\",\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Statistical Function in Grid and Footer - DHTMLX Grid (v9.0+) - JavaScript\nDESCRIPTION: Defines and assigns a custom aggregation (doubleSum) to a DHTMLX Grid via the dhx.methods API, and configures a grid column to use this function for its footer and summary. Requires dhtmlx v9+, a dataset, and grid/column summary configurations. Outputs results (e.g., double the sum) in the column's footer, accessible via 'summary' and 'text' callback.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/migration.md#2025-04-22_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\ndhx.methods.doubleSum = (rows, field) => {\n    return rows.reduce((sum, row) => sum + row[field] * 2, 0);\n};\n\nconst grid = new dhx.Grid(\"grid_container\", {\n    columns: [\n        {\n            id: \"population\",\n            header: [{ text: \"Population\" }],\n            footer: [{ text: (content) => content.doubleSum }],\n            summary: \"doubleSum\"\n        },\n    ],\n    data: dataset\n});\n```\n\n----------------------------------------\n\nTITLE: Attaching Event Listeners to DHTMLX Window in JavaScript\nDESCRIPTION: Demonstrates how to attach an event listener to a DHTMLX Window instance using the `dhxWindow.events.on()` method. This example specifically attaches a listener to the 'move' event, which logs the new window coordinates when the window is moved. The callback function receives the new position, old position, and the side involved in the move.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/window/handling_events.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\ndhxWindow.events.on(\"move\", function(position, oldPosition, side) {\n    console.log(\"The window is moved to \" + position.left, position.top)\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Form beforeSend Event in JavaScript\nDESCRIPTION: Example of attaching an event handler to the beforeSend event of a DHTMLX Form. The handler can return true/false to control whether the form submission proceeds.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/form_beforesend_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.events.on(\"beforeSend\", function(){\n   // your logic here\n   return true;\n});\n```\n\n----------------------------------------\n\nTITLE: Checking Popup Visibility with DHTMLX Suite - JavaScript\nDESCRIPTION: This code snippet demonstrates invoking the isVisible method on a DHTMLX Popup instance to check whether the popup is currently visible. Requires the DHTMLX Suite library and an existing popup object instance. Returns true if the popup is visible, false otherwise. Commonly used to conditionally display UI controls or trigger actions depending on the popup state.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/popup/api/popup_isvisible_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\npopup.isVisible(); // -> true/false\n```\n\n----------------------------------------\n\nTITLE: Attaching Chart Event Listeners in JavaScript\nDESCRIPTION: Demonstrates how to attach event listeners to a chart using the chart.events.on() method. Shows handling of a resize event with width and height parameters.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/chart/events.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nchart.events.on(\"resize\", function({width:500, height:500}){\n    console.log(\"The size of the chart has changed\");\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Closable Group Panel Elements in DHTMLX Grid\nDESCRIPTION: Configuration that allows users to close group panel elements using the closable property. When enabled, users can collapse or expand grouped sections of data in the grid.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/usage.md#2025-04-22_snippet_37\n\nLANGUAGE: jsx\nCODE:\n```\nconst grid = new dhx.Grid(\"grid_container\", {\n    columns: [\n        { width: 150, id: \"country\", header: [{ text: \"Country\" }] },\n        { width: 150, id: \"population\", header: [{ text: \"Population\" }] },\n        { width: 150, id: \"density\", header: [{ text: \"Density (P/Km²)\" }] },\n        { width: 150, id: \"area\", header: [{ text: \"Land Area (Km²)\" }] },\n    ],\n    group: true,\n    groupable: true,\n    closable: true,\n    data: dataset\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring SimpleVault Control in DHTMLX Suite\nDESCRIPTION: This snippet shows the configuration options for the SimpleVault control in DHTMLX Suite. It includes various attributes such as css, width, height, padding, label, and more. Each attribute is specified with its corresponding data type.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/form_setproperties_method.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    css: string,\n    width: string | number | \"content\",\n    height: string | number | \"content\",\n    padding: string | number,\n    label: string,\n    labelWidth: string | number,\n    labelPosition: \"left\" | \"top\",\n    hiddenLabel: boolean,\n    helpMessage: string,\n    required: boolean,\n    preMessage: string,\n    successMessage: string,\n    errorMessage: string,\n    params: { [key: string]: any },\n    headerParams: { [key: string]: any },\n    target: string,\n    fieldName: string,\n    singleRequest: boolean,\n    updateFromResponse: boolean,\n    autosend: boolean,\n    accept: string,\n    validation: (value: ISimpleVaultValue) => boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Grid with Selective autoHeight in JavaScript\nDESCRIPTION: This example shows how to enable autoHeight for the grid content while disabling it for the header and footer. It uses the headerAutoHeight and footerAutoHeight options to control the behavior separately for different parts of the grid.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_autoheight_config.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst grid = new dhx.Grid(\"grid_container\", {\n    columns: [\n        // columns config\n    ],\n    data: dataset,\n    autoHeight: true, // enable autoHeight in the data (content)\n    headerAutoHeight: false, // disable autoHeight in the header\n    footerAutoHeight: false, // disable autoHeight in the footer\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Event Handlers for Combobox Template\nDESCRIPTION: Demonstrates how to assign event handlers to HTML elements within a custom Combobox template using the eventHandlers configuration. The example shows implementation of a delete button functionality in template items.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/combobox/configuration.md#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst combobox = new dhx.Combobox(\"combobox\", {\n    newOptions: true,\n    itemHeight: 40,\n    template: ({ value, src }) => {\n        return `\n            <div class=\"list-item\">\n                <div class=\"list-item__content\">\n                    <img class=\"list-item__image\" src=\"${src}\" alt=\"${value}\">\n                    <span class=\"list-item__value\">${value}</span>\n                </div>\n                <button class=\"list-item__button list-item__button--delete\">\n                    <i class=\"dxi dxi-delete-forever\"></i>\n                </button>\n            </div>\n        `;\n    },\n    eventHandlers: {\n        onclick: { \n            \"list-item__button--delete\": (event, id) => {\n                combobox.data.remove(id);\n                combobox.clear();    \n            } \n        } \n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring GridView with Editing Capabilities\nDESCRIPTION: Initializes a GridView with editable cells, row selection, and custom column configurations including date formatting and dropdown selection options.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/optimus_guides/how_to_start_optimus.md#2025-04-22_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nimport { View } from \"dhx-optimus\";\nimport { emptyItem } from \"../../assets/data/data\";\n\nexport class GridView extends View {\n    init() {\n        const postUniq = this.params.dataCollection\n            .map(item => {\n                return item.post;\n            })\n            .filter((value, index, self) => {\n                return self.indexOf(value) === index;\n            });\n\n        this.grid = new dhx.Grid(null, {\n            columns: [\n                { id: \"name\", header: [{ text: \"Name\" }] },\n                { id: \"post\", header: [{ text: \"Post\" }], editorType: \"select\", \n                    options: postUniq },\n                { id: \"phone\", header: [{ text: \"Phone\" }] },\n                { id: \"mail\", header: [{ text: \"Mail\" }] },\n                { id: \"birthday\", header: [{ text: \"Birthday\" }], type: \"date\", \n                    dateFormat: \"%d.%m.%Y\" },\n                { id: \"start\", header: [{ text: \"Start\" }], type: \"date\", \n                    dateFormat: \"%d.%m.%Y\" },\n            ],\n            autoWidth: true,\n            selection: \"row\",\n            editable: true,\n            data: this.params.dataCollection,\n        });\n\n        return this.grid;\n    }\n```\n\n----------------------------------------\n\nTITLE: Initializing RadioGroup Control in DHTMLX Form\nDESCRIPTION: Creates a Form instance with a RadioGroup control that includes two radio button options. The control features label positioning, help message, and required field validation.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/radiogroup.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst form = new dhx.Form(\"form_container\", {    \n    rows: [\n        {\n            id: \"radiogroup\",\n            name: \"radiogroup\",\n            type: \"radioGroup\",\n            required: true,\n            label: \"Radio Group\",\n            labelWidth: 140,\n            labelPosition: \"left\",\n            helpMessage: \" Help information\",\n            value: \"1\",\n            options: {\n                rows: [\n                    {\n                        type: \"radioButton\",\n                        text: \"Select 1\",\n                        value: \"1\",\n                    },\n                    {\n                        type: \"radioButton\",\n                        text: \"Select 2\",\n                        value: \"2\"\n                    },\n                ]\n            }\n        }\n     ]\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX Grid with Custom Height in JavaScript\nDESCRIPTION: This code snippet demonstrates how to create a new DHTMLX Grid instance with a custom height of 400 pixels. It includes placeholders for column configuration and dataset.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_height_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst grid = new dhx.Grid(\"grid_container\", {\n    columns: [\n        // columns config\n    ],\n    height: 400,\n    data: dataset\n});\n```\n\n----------------------------------------\n\nTITLE: Loading Data into DHTMLX Tree from Local Source in JavaScript\nDESCRIPTION: Demonstrates how to load data into DHTMLX Tree from a local data source after initialization using the 'parse' method of Tree Collection.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree/loading_data.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst tree = new dhx.Tree(\"tree_container\");\ntree.data.parse(dataset);\n```\n\n----------------------------------------\n\nTITLE: Enabling Data Grouping in DHTMLX Grid - JSX\nDESCRIPTION: Demonstrates how to instantiate a DHTMLX Grid with row data grouping by enabling the 'group' property. Requires the DHTMLX Grid/Suite PRO package. The configuration sets up required columns, enables grouping and groupable functionality, and provides a dataset to the grid. Input is configuration object for the constructor; output is a grid instance with grouping activated. The groupable property allows interaction for grouping via the UI.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/usage.md#2025-04-22_snippet_22\n\nLANGUAGE: JSX\nCODE:\n```\nconst grid = new dhx.Grid(\"grid_container\", {\n    columns: [\n        // columns config\n    ],\n    group: true, // enabling grouping in a grid\n    groupable: true \n    data: dataset\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Main Application Class extending Optimus App JavaScript\nDESCRIPTION: Creates the core application class `MyApp` by inheriting from the `App` class provided by the `dhx-optimus` library. This snippet also shows importing the necessary CSS styles for the application. This class forms the foundation of the Optimus application.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/optimus_guides/how_to_start_optimus.md#2025-04-22_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n// import css styles\nimport \"./assets/css/index.css\"; \n// import the App class from the \"dhx-optimus\" library\nimport { App } from \"dhx-optimus\";\n\nexport class MyApp extends App {}\n```\n\n----------------------------------------\n\nTITLE: Handling Right-Click Events to Show Custom ContextMenu in DHTMLX Grid with JavaScript\nDESCRIPTION: Implements a complete event handler for the DHTMLX Grid's 'CellRightClick' event. When a cell is right-clicked, this handler selects the cell, suppresses the default browser menu, and shows the custom context menu at the pointer location. Assumes initialized grid and context menu instances. Inputs are row and column objects and the mouse event.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tutorial/binding_components/step4.md#2025-04-22_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\ngrid.events.on(\"CellRightClick\", function(row,column,e){\n    grid.selection.setCell(row.id);\n    e.preventDefault();\n    contextMenu.showAt(e);\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Tooltip\nDESCRIPTION: Configures slider to display a tooltip showing the current value when moving the thumb.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/slider/configuring_slider.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst slider = new dhx.Slider(\"slider_container\", { \n    tooltip:true\n});\n```\n\n----------------------------------------\n\nTITLE: Removing Focus from Input Control in DHTMLX Form (JavaScript)\nDESCRIPTION: This snippet demonstrates how to use the blur() method to remove focus from an Input control in a DHTMLX Form. The method is called on a specific form item retrieved using the getItem() method.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/input/input_blur_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nform.getItem(\"input\").blur();\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Grid Summary and Tooltip Customization - DHTMLX Grid (v9.0+) - JavaScript\nDESCRIPTION: Provides an advanced example of Grid configuration that uses summary, tooltips, and spans in headers/footers with callback functions. This demonstrates new capabilities in v9.0+ such as passing computed summary data into custom text and tooltipTemplate properties, and accessing summary data with getSummary. Requires dhtmlx v9+, a compatible data set, and facilitates granular display and access to statistical data for columns and custom spans.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/migration.md#2025-04-22_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nconst grid = new dhx.Grid(\"grid\", {\n    columns: [\n        { width: 200, id: \"country\", header: [{ text: \"Country\" }] },\n        { \n            width: 150, \n            id: \"population\", \n            header: [\n                { \n                    text: \"Population\" , \n                    tooltipTemplate: ({ totalPopulation, count }) => `Total: ${totalPopulation}, Count: ${ count }`\n                }\n            ],\n            summary: \"count\"\n        },\n        {\n            width: 150,\n            id: \"age\",\n            header: [{ text: \"Med. Age\" }],\n            summary: { avgAge: \"avg\" } \n        }\n    ],\n    summary: {\n        totalPopulation: [\"population\", \"sum\"],\n    },\n    spans: [\n        {\n            row: \"6\",\n            column: \"population\",\n            rowspan: 9,\n            text: ({ count }) => (\"Count population:\" + count),\n            tooltipTemplate: ({ value, count }) => (`value: ${value}; count: ${count}`),\n        },\n    ],\n    data: dataset\n});\n\n// getting summary data for the component\nconst totalSummary = grid.getSummary();\nconsole.log(totalSummary); //{ totalPopulation: 1000000 } - sum of all the values in the \"population\" column\n\n// getting summary data for the \"age\" column\nconst columnSummary = grid.getSummary(\"age\");\nconsole.log(columnSummary); //{ totalPopulation: 1000000, avgAge: 28 } - the value of the \"age\" column only\n```\n\n----------------------------------------\n\nTITLE: Setting Group Panel Height in dhtmlx Grid (JSX)\nDESCRIPTION: Configures a dhtmlx Grid instance, setting a custom height for the group panel using the `group.panelHeight` property. In this example, the panel height is set to 60 pixels, overriding the default of 40. Requires the dhtmlx Grid library and a dataset.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/usage.md#2025-04-22_snippet_26\n\nLANGUAGE: jsx\nCODE:\n```\nconst grid = new dhx.Grid(\"grid_container\", {\n    columns: [\n        { id: \"country\", header: [{ text: \"Country\" }], groupable: true },\n        { id: \"city\", header: [{ text: \"City\" }] },\n        { id: \"population\", header: [{ text: \"Population\" }] }\n    ],\n    group: {\n        panel: true,\n        panelHeight: 60\n    },\n    data: dataset\n});\n```\n\n----------------------------------------\n\nTITLE: Saving and Restoring Combo Box State\nDESCRIPTION: Demonstrates how to save the current state of a combo box and restore it in another instance using serialize() and parse() methods.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/combobox/adding_options.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst state = combo1.data.serialize();\n\n// creating a new combo\nconst combo2 = new dhx.Combo(document.body);\n// parsing the state of combo1 into combo2\ncombo2.data.parse(state);\n```\n\n----------------------------------------\n\nTITLE: Processing Grid Data for Chart Display in JavaScript\nDESCRIPTION: Function that processes grid data to count VIP and default users, returning formatted data for chart display. Creates an array of user statistics with color coding and labels.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tutorial/basic_application/step7.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction getCountUsers(){     \n    vipUser = grid.data.reduce(function(acc, item) {    \n        return item.vip ? acc + 1 : acc;           \n    }, 0);\n    defUser = grid.data.getLength() - vipUser; \n\n    var pieData = []; \n\n    if (vipUser > 0) { \n        pieData.push( { value: vipUser, color: \"#394E79\", \n            text: \"Premium Users\" })\n        }\n    if  (defUser > 0) {\n        pieData.push( { value: defUser, color: \"#5E83BA\", \n            text: \"Default Users\" })\n        }            \n    return pieData; \n};\n```\n\n----------------------------------------\n\nTITLE: Calling Events in DHTMLX\nDESCRIPTION: Illustrates how to manually fire an event in DHTMLX using the events.fire() method. The method takes the event name and an optional array of arguments as parameters.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/guides/events_guide.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncomponent.events.fire(\"eventName\", args);\n```\n\n----------------------------------------\n\nTITLE: Customizing Scale Settings\nDESCRIPTION: Configures slider scale with custom tick intervals and value template adding degree symbol.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/slider/configuring_slider.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst slider = new dhx.Slider(\"slider_container\", { \n   tick: 5,\n   majorTick:10,\n   tickTemplate: function(major_tick){\n        return major_tick + \"°\";\n   } \n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Grid Header Filter in JavaScript\nDESCRIPTION: Demonstrates how to get access to a column's header filter and set its value. The method returns an object with methods for managing the filter including blur(), clear(), focus(), getFilter(), and setValue().\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_getheaderfilter_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst countryFilter = grid.getHeaderFilter(\"country\");\ncountryFilter.setValue(\"Brazil\");\n```\n\n----------------------------------------\n\nTITLE: Handling the 'move' Event in DHTMLX Window (JavaScript Example)\nDESCRIPTION: Demonstrates how to attach an event listener to the 'move' event of a DHTMLX Window instance (`dhxWindow`) using the `events.on()` method. The provided callback function receives the new position, old position, and side objects as arguments and logs the window's new coordinates (`position.left`, `position.top`) to the console. Requires an initialized DHTMLX Window instance named `dhxWindow`.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/window/api/window_move_event.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ndhxWindow.events.on(\"move\", function(position, oldPosition, side) {\n    console.log(\"The window is moved to \" + position.left, position.top)\n});\n```\n\n----------------------------------------\n\nTITLE: Pie Chart Data Structure in JavaScript\nDESCRIPTION: Example data structure for Pie, Pie3D and Donut charts including color properties for each sector.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/chart/data_loading.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst pie_dataset = [\n    { \"id\": \"Jan\", \"value\": 44.33, \"color\": \"#394E79\", \"month\": \"Jan\"},\n    { \"id\": \"Feb\", \"value\": 22.12, \"color\": \"#5E83BA\", \"month\": \"Feb\"},\n    { \"id\": \"Mar\", \"value\": 53.21, \"color\": \"#C2D2E9\", \"month\": \"Mar\"},\n    { \"id\": \"Apr\", \"value\": 34.25, \"color\": \"#9A8BA5\", \"month\": \"Apr\"},\n    { \"id\": \"May\", \"value\": 24.65, \"color\": \"#E3C5D5\", \"month\": \"May\"}\n];\n```\n\n----------------------------------------\n\nTITLE: Validating TimePicker in JavaScript DHTMLX Form\nDESCRIPTION: This code demonstrates how to use the validate() method for a TimePicker control in a DHTMLX Form. It shows examples of validating both a specified value and the current value of the control, with and without the silent parameter.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/timepicker/timepicker_validate_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// the method validates the specified value\nform.getItem(\"timepicker\").validate(true, \"10:20\"); // -> true/false\n\n// the method validates the current value\nform.getItem(\"timepicker\").validate(true); // -> true/false\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// the method validates the specified value\nform.getItem(\"timepicker\").validate(false, \"10:20\"); // -> true/false\n\n// the method validates the current value\nform.getItem(\"timepicker\").validate(); // -> true/false\n```\n\n----------------------------------------\n\nTITLE: Selecting a Specific Item in JavaScript List\nDESCRIPTION: Selects a particular item in the List by its ID using the add() method of the selection object.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/list/usage_selection.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst id = list.selection.getId(); // -> \"2\"\nlist.selection.add(\"2\");\n```\n\n----------------------------------------\n\nTITLE: Getting Selected Menu Items in JavaScript\nDESCRIPTION: Shows how to get the selected menu items using the getSelected() method. The method returns an array of string values with IDs of selected items.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/menu/work_with_menu.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmenu.getSelected(); // -> [\"selected_1\", \"selected_1.1\"]\n```\n\n----------------------------------------\n\nTITLE: Implementing beforeChange Event Handler in JavaScript Timepicker\nDESCRIPTION: Example of attaching a beforeChange event handler to a timepicker instance. The handler logs the new value and returns true to allow the change. The event fires before the timepicker value changes and can prevent the change by returning false.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/timepicker/api/timepicker_beforechange_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntimepicker.events.on(\"beforeChange\", function(value){\n    console.log(\"The value of a timepicker has beforeChanged to \"+ value);\n    return true;\n});\n```\n\n----------------------------------------\n\nTITLE: Checking Datepicker Visibility in DHTMLX Form (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to use the isVisible() method to check if a Datepicker control is visible on the page. The method returns a boolean value indicating the control's visibility state.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/calendar/calendar_isvisible_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"datepicker\").isVisible(); \n// -> true/false\n```\n\n----------------------------------------\n\nTITLE: Setting Initial Values for Combo Box in JavaScript\nDESCRIPTION: Demonstrates how to set initial values for a Combo Box, both for single and multi-selection modes.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/combobox/configuration.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst combobox = new dhx.Combobox(\"combo_container\", {\n    multiselection: true,\n    value: [\"austria\", \"estonia\"]\n});\n\n// or\nconst combobox = new dhx.Combobox(\"combo_container\", {\n    value: \"austria\"\n});\n```\n\n----------------------------------------\n\nTITLE: Grid getSummary Method Usage Example\nDESCRIPTION: Example demonstrating how to use getSummary method with DHTMLX Grid, including column configuration with summary calculations and retrieving summary data both for the entire grid and specific columns\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_getsummary_method.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst grid = new dhx.Grid(\"grid_container\", {\n    columns: [\n        { width: 150, id: \"population\", header: [{ text: \"Population\" }] },\n        {\n            width: 150,\n            id: \"age\",\n            header: [{ text: \"Med. Age\" }],\n            summary: { avgAge: \"avg\" } \n        }\n    ],\n    summary: {\n        totalPopulation: [\"population\", \"sum\"],\n    },\n    data: dataset\n});\n\n// getting summary data for the component\nconst totalSummary = grid.getSummary();\nconsole.log(totalSummary); //{ totalPopulation: 1000000 } - the sum of all the values in the \"population\" column\n\n// getting summary data for a column\nconst columnSummary = grid.getSummary(\"age\");\nconsole.log(columnSummary); //{ totalPopulation: 1000000, avgAge: 28 } - the value of the \"age\" column only\n```\n\n----------------------------------------\n\nTITLE: Handling Checkbox Properties Change Event in DHTMLX Form\nDESCRIPTION: Event handler for the afterChangeProperties event that triggers after the configuration attributes of a Checkbox control are changed. The handler receives an object containing the modified properties and their new values.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/checkbox/checkbox_afterchangeproperties_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"checkbox\").events.on(\"afterChangeProperties\", function(properties) {\n    console.log(\"afterChangeProperties\", properties);\n});\n```\n\n----------------------------------------\n\nTITLE: Exporting Grid Data to PDF in JavaScript\nDESCRIPTION: Shows how to export grid data to a PDF file using the pdf() method of the Export module, with custom formatting options.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/usage.md#2025-04-22_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\ngrid.export.pdf({\n    format: \"A4\",\n    scale: 0.75,\n    displayHeaderFooter: true,\n    theme: \"dark\",\n});\n```\n\n----------------------------------------\n\nTITLE: Attaching Grid Event Listener in JavaScript\nDESCRIPTION: Demonstrates how to attach an event listener to a grid component using the grid.events.on() method. The example shows handling of the scroll event.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/events.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngrid.events.on(\"scroll\", function({top,left}){\n    console.log(\"The grid is scrolled to \"+top,left);\n});\n```\n\n----------------------------------------\n\nTITLE: Attaching Event Listener to Calendar in JavaScript\nDESCRIPTION: Demonstrates how to attach an event listener to the 'change' event of a Calendar object using the events.on() method. The listener logs the old and new dates, as well as whether the change was triggered by a click.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar/handling_events.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncalendar.events.on(\"change\",function(date, oldDate, byClick){\n    console.log(\"Change selection from \"+oldDate+\" to \"+date);\n    console.log(click);\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Tree components with drag-and-drop settings in JavaScript\nDESCRIPTION: This snippet demonstrates how to create two Tree instances with different drag modes and drop behaviors. The 'source' tree allows dragging items out, while the 'target' tree accepts items being dragged in.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree/drag_and_drop_handling.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst source = new dhx.Tree(\"tree-source\",{dragMode:\"source\", dropBehaviour:\"complex\"});\nconst target = new dhx.Tree(\"tree-target\",{dragMode:\"target\", dropBehaviour:\"complex\"});\n```\n\n----------------------------------------\n\nTITLE: Initializing Calendar with timePicker in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a new Calendar instance with the timePicker feature enabled. When set to true, this option adds a timepicker component into the calendar allowing users to select both date and time.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar/api/calendar_timepicker_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst calendar = new dhx.Calendar(\"calendar_container\", {\n    timePicker: true      \n});\n```\n\n----------------------------------------\n\nTITLE: Setting Calendar Value\nDESCRIPTION: Shows various ways to select a date in the calendar using the setValue method, including selecting single dates or date ranges in different formats.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar/operating_calendar.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// selects the current date\ncalendar.setValue(new Date());\n\n// sets the current date as an array of Date value\ncalendar.setValue([new Date()]);\n \n// sets a date as a string\ncalendar.setValue(\"30/05/19\");\n\n// sets a date as an array of string value\ncalendar.setValue([\"30/05/19\"]);\n\n//sets dates as an array of Date values(for the range mode)\ncalendar.setValue([new Date(2019,05,03), new Date(2019,05,19)]);\n\n//sets dates as an array of string values(for the range mode)\ncalendar.setValue([\"03/06/19\", \"15/06/19\"]);\n```\n\n----------------------------------------\n\nTITLE: Enabling Grid Cell Selection in JavaScript\nDESCRIPTION: Method to enable the selection functionality for cells in a DHTMLX Grid component. This method allows users to select cells in the grid after being called.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/selection/selection_enable_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngrid.selection.enable();\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Row Height in DHTMLX Grid Data\nDESCRIPTION: This example shows how to set a custom height for specific rows in the DHTMLX Grid by adding a 'height' property to the data object. This feature is available from version 7.1 onwards.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_data_config.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst dataset = [\n    {\n        \"country\": \"China\",\n        \"population\": \"1415045928\",\n        \"height\": 80,\n        \"id\": \"1\"\n    },\n    {\n        \"country\": \"India\",\n        \"population\": \"1354051854\",\n        \"id\": \"2\",\n    }\n];\n```\n\n----------------------------------------\n\nTITLE: Complete HTML Example for DHTMLX Message Initialization\nDESCRIPTION: This HTML code provides a full example demonstrating how to set up a basic DHTMLX message. It includes linking the necessary `suite.js` and `suite.css` files, defining an optional `div` container with the ID `message_container`, and initializing an error message within a script tag using `dhx.message`. This illustrates the basic structure needed to use the component.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/message/creating_message.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n    <head>\n        <title>How to Start with DHTMLX Message</title>         \n        <script type=\"text/javascript\" src=\"../../codebase/suite.js\"></script>\n        <link rel=\"stylesheet\" href=\"../../codebase/suite.css\">\n    </head>\n    <body>\n        <!--optional-->\n        <div id=\"message_container\"></div>\n        <script>\n            // creating DHTMLX Message \n            dhx.message({\n                node:\"message_container\",\n                text:\"This is an error message\",\n                css:\"dhx_message--error\",\n                icon:\"dxi-close\"\n            });\n        </script>\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Observing State Changes in ToolbarView\nDESCRIPTION: Enhances ToolbarView with the observe() method to react asynchronously to changes in the global application state, automatically selecting the correct toolbar item based on the active state.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/optimus_guides/how_to_start_optimus.md#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport { View } from \"dhx-optimus\";\n\nexport class ToolbarView extends View {\n    init() { ... }\n\n    ready() {\n        this.observe(\n            state => state.active,\n            active => {\n                this.toolbar.select(active);\n            }\n        );\n\n        this.toolbar.events.on(\"click\", id => {\n            this.fire(\"viewChange\", [id]);\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Select Control Validation Examples\nDESCRIPTION: Shows different ways to call the validate() method, both with and without the silent parameter. When silent is false or omitted, the method triggers BeforeValidate and AfterValidate events and provides visual feedback.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/select/select_validate_method.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"select\").validate(); // -> true/false\nform.getItem(\"select\").validate(false); // -> true/false\n```\n\n----------------------------------------\n\nTITLE: Linking Two Calendars for Date Range Selection in DHTMLX\nDESCRIPTION: To create a date range selector using two separate calendars, the first calendar should be linked to the second using the link() method. This enables the first calendar to set the start date and the second calendar to set the end date of the range.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar2/functionality_and_features/ranges_mode.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncalendar1.link(calendar2);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Value from Select Control in DHTMLX Form (JavaScript)\nDESCRIPTION: This snippet demonstrates how to use the getValue() method to retrieve the current value of a Select control in a DHTMLX Form. The method returns a string or number representing the selected value.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/select/select_getvalue_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst value = form.getItem(\"select\").getValue();\n// -> \"1\"\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Column Configuration for Grouped Data\nDESCRIPTION: Detailed example of all possible configuration properties for a column with grouped data, including header, footer, alignment, and formatting options. This shows the full range of customization available for grouped data columns.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/usage.md#2025-04-22_snippet_36\n\nLANGUAGE: jsx\nCODE:\n```\ncolumn: {\n    id: string | number,\n    header: [\n        {\n            text?: string | ((content: ISummaryList) => string),\n            tooltip?: boolean | object, // true by default\n            tooltipTemplate?: (\n                content: { value: string } & ISummaryList,\n                header: IHeader,\n                column: ICol\n            ) => string | boolean,\n            align?: \"left\" | \"center\" | \"right\", // \"left\" by default\n            css?: string,\n            content?: \"inputFilter\" | \"selectFilter\" | \"comboFilter\",\n            filterConfig?: {\n                filter?: (item: any, input: string) => boolean,\n                multiselection?: boolean,\n                readonly?: boolean,\n                placeholder?: string,\n                virtual?: boolean,\n                template?: function\n            },\n            customFilter?: (item: any, input: string) => boolean,\n            headerSort?: boolean, // true by default\n            sortAs?: (cellValue: any) => string | number,\n            htmlEnable?: boolean, // false by default\n        }\n    ],\n    footer?: [\n        {\n            text?: string | ((content: ISummaryList) => string),\n            tooltip?: boolean | object, // true by default\n            tooltipTemplate?: (\n                content: { value: string } & ISummaryList,\n                header: IHeader,\n                column: ICol\n            ) => string | boolean,\n            align?: \"left\" | \"center\" | \"right\", // \"left\" by default\n            css?: string,\n            htmlEnable?: boolean, // false by default\n        },\n    ],\n    align?: \"left\" | \"center\" | \"right\", // \"left\" by default\n    resizable?: boolean, // false by default\n    sortable?: boolean, // true by default\n    mark?: { min?: string, max?: string } |\n           (cell: any, columnCells: any[], row?: object, column?: object) => string,\n    template?: (cellValue: any, row: object, column: object) => string,\n    tooltip?: boolean | object, // true by default\n    tooltipTemplate?: (cellValue: any, row: object, column: object) => string,\n}\n```\n\n----------------------------------------\n\nTITLE: Preparing Dataset for DHTMLX Tree in JavaScript\nDESCRIPTION: Demonstrates how to structure a dataset in JSON format for loading into DHTMLX Tree. The dataset includes nested items with various properties such as value, id, opened, and items.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree/loading_data.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst dataset = [\n    {\n        \"value\": \"Books\",\n        \"id\": \"Books\",\n        \"opened\": true,\n        \"items\": [\n            {\n                \"value\": \"Thrillers\",\n                \"id\": \"Thrillers\",\n                \"opened\": true,\n                \"items\": [\n                    {\n                        \"value\": \"Bestsellers\",\n                        \"id\": \"Bestsellers\",\n                        \"items\": [\n                            {\n                                \"value\": \"Lawrence Block\",\n                                \"id\": \"Lawrence Block\",\n                            }\n                        ]\n                    },\n                    {\n                        \"value\": \"Robert Crais\",\n                        \"id\": \"Robert Crais\",\n                    },\n                    {\n                        \"value\": \"Ian Rankin\",\n                        \"id\": \"Ian Rankin\",\n                    },\n                    {\n                        \"value\": \"James Johns\",\n                        \"id\": \"James Johns\",\n                        \"checked\": true,\n                    },\n                    {\n                        \"value\": \"Nancy Atherton\",\n                        \"id\": \"Nancy Atherton\",\n                        \"checked\": true\n                    }\n                ]\n            },            \n            {\n                \"value\": \"Fiction & Fantasy\",\n                \"id\": \"Fiction & Fantasy\",\n                \"items\": [\n                    {\n                        \"value\": \"Audrey Niffenegger\",\n                        \"id\": \"Audrey Niffenegger\"\n                    },\n                    {\n                        \"value\": \"Philip Roth\",\n                        \"id\": \"Philip Roth\"\n                    }\n                ]\n            },\n        ]\n    },\n];\n\nconst tree = new dhx.Tree(\"tree\", {\n    checkbox: true,\n});\n\ntree.data.parse(dataset);\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Styling to DHTMLX List in HTML and JavaScript\nDESCRIPTION: Shows a complete example of applying custom CSS styles to a DHTMLX List, including custom color variables and additional CSS classes.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/list/customization.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<style>\n    .custom {\n        --dhx-color-primary: #118d8d;\n        --dhx-background-primary: rgba(209, 250, 250, 0.3);\n        --dhx-background-secondary: rgba(17, 141, 141, 0.1);\n        --dhx-background-additional: rgba(17, 141, 141, 0.3);\n    }\n</style>\n\n<script>\n    const list = new dhx.List(\"list_container\", {\n        css: \"custom dhx_widget--bordered\", //the names of the CSS classes separated by space\n        template,\n        data,\n    });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Multi-column Sorting in Grid with JSX\nDESCRIPTION: Illustrates how to enable and use multi-column sorting in DHTMLX Grid. It shows initialization of the grid with grouping and sorting by multiple columns.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/usage.md#2025-04-22_snippet_16\n\nLANGUAGE: jsx\nCODE:\n```\nconst grid = new dhx.Grid(\"grid_container\", {\n    columns: [\n        // columns config\n    ],\n    editable: true,\n    group: {\n        order: [\"animal_type\"] // group by the `animal_type` field\n    },\n    groupable: true, // enables grouping functionality, false by default\n    data: dataset\n});\n\ngrid.data.sort({ by: \"volunteer_name\", dir: \"desc\" }, { smartSorting: true });\ngrid.data.sort({ by: \"task_status\", dir: \"asc\" });\ngrid.data.sort({ by: \"animal_type\", dir: \"asc\" });\n```\n\n----------------------------------------\n\nTITLE: Moving Items in TreeCollection using move() Method in JavaScript\nDESCRIPTION: This code snippet demonstrates how to use the move() method of the TreeCollection to move an item to a new position. In this example, an item with the id 'profile_btn' is moved to the end of the collection.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree_collection/api/treecollection_move_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntoolbar.data.move(\"profile_btn\",-1);\n```\n\n----------------------------------------\n\nTITLE: Complete Tabbar Styling Example\nDESCRIPTION: Full example demonstrating custom styling of active tab buttons and header with specific colors and positioning.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tabbar/customization.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<style>\n    .custom .dhx_tabbar-tab-button--active {\n        background-color: rgb(2, 136, 209);\n        color: var(--dhx-color-white);\n    }\n    .custom .dhx_tabbar-header-active {\n        background-color: #ff5252;\n    }\n</style>\n\n<script>\n    const tabbar = new dhx.Tabbar(\"tabbar_container\", {\n        mode: \"top\",\n        css: \"custom\",\n        tabAlign: \"center\",\n        views: [\n            // view objects\n        ]\n    });\n</script>\n```\n\n----------------------------------------\n\nTITLE: DELETE Request with Ajax in JavaScript\nDESCRIPTION: Demonstrates how to make a DELETE request using the DHTMLX Ajax module. The example shows sending a DELETE request with an ID parameter and handling the response with a Promise.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/ajax/api/ajax_delete_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndhx.ajax.delete(url, {id: \"2\"}).then(function (data){\n    console.log(data);\n});\n```\n\n----------------------------------------\n\nTITLE: Showing a Basic DHTMLX Popup in JavaScript\nDESCRIPTION: This snippet demonstrates how to instantiate a DHTMLX Popup object using `new dhx.Popup()` and then display it within a specified HTML container element using the `show()` method. The `show()` method takes the ID of the container (`\"popup_container\"` in this case) as its mandatory argument. Optional configuration parameters can also be passed.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/popup/api/popup_show_method.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"popup_container\"></div>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst popup = new dhx.Popup();\n\npopup.show(\"popup_container\");\n```\n\n----------------------------------------\n\nTITLE: Collapsing a Tree Item in DHTMLX Tree with JavaScript\nDESCRIPTION: This example demonstrates how to collapse a tree item identified by the ID 'history' using the collapse() method of the DHTMLX Tree component.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree/api/tree_collapse_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntree.collapse(\"history\");\n```\n\n----------------------------------------\n\nTITLE: Attaching HTML content to Layout cell in JavaScript\nDESCRIPTION: Demonstrates how to attach HTML content to a Layout cell using the attachHTML method.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/layout/work_with_layout.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst layout = new dhx.Layout(\"layout_container\", {\n    width:\"400px\", height:\"600px\"\n});\nconst html = \"<p>Hello world</p>\";\nlayout.getCell(\"content\").attachHTML(html);\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Layout Cells with forEach in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the forEach method to iterate over layout cells. It takes a callback function that processes each cell, and optional parameters for specifying the parent ID and iteration level.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/layout/api/layout_foreach_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nlayout.forEach(function(cell, index, array) {\n    console.log(\"This is a cell: \", cell);\n    console.log(\"This is a cell index: \", index);\n    console.log(\"This is an array of cells: \", array);\n}, parentID, level);\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX TimePicker with HTML Structure\nDESCRIPTION: Complete HTML example demonstrating the basic setup for DHTMLX TimePicker. It includes linking the necessary `suite.js` and `suite.css` files, defining a `div` container with the ID `timepicker_container`, and initializing the TimePicker component within a `<script>` tag using `new dhx.Timepicker()`. A placeholder for configuration options is shown.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/timepicker/initialization.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n    <head>\n        <title>How to Start with DHTMLX TimePicker</title>         \n        <script type=\"text/javascript\" src=\"../../codebase/suite.js\"></script>\n        <link rel=\"stylesheet\" href=\"../../codebase/suite.css\">\n    </head>\n    <body>\n        <div id=\"timepicker_container\"></div>\n        <script>\n            // creating DHTMLX TimePicker \n            const timepicker = new dhx.Timepicker(\"timepicker_container\", {\n                // config options\n            });\n        </script>\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Configuring Form Alignment in JavaScript with DHTMLX\nDESCRIPTION: This code snippet demonstrates how to initialize a DHTMLX Form with custom alignment settings. It creates a form with two rows: a text input and a group of checkboxes. The alignment is set for both the main form and the nested column group.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/form_align_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst form = new dhx.Form(\"form_container\", {\n    css: \"dhx_widget--bordered\",\n    height: \"200px\",\n    width: \"400px\",\n    align: \"end\", // sets the alignment for rows \n    padding: \"20px\",  \n    rows: [\n        {\n            type: \"text\",\n            name: \"text\",\n            value: \"Do you agree with our terms and conditions?\"\n        },\n        {\n            padding: \"10px\",  \n            align: \"start\", // sets the alignment for cols \n            cols: [{\n                type: \"checkbox\",\n                width: \"80px\",\n                label: \"I agree\",\n                name: \"agree\",\n                id: \"agree\",\n                checked: true\n            },\n            {\n                type: \"checkbox\",\n                label: \"I disagree\",\n                name: \"align\",\n            }]\n        }\n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: Grouping with Missing Values Handling\nDESCRIPTION: Example showing how to handle missing values in grouped data using the showMissed configuration option\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/data_collection/api/datacollection_group_method.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nconst grid = new dhx.Grid(\"grid_container\", {\n    columns: [\n        { id: \"name\", header: [{ text: \"Name\" }] },\n        { id: \"age\", header: [{ text: \"Age\" }] },\n        { id: \"city\", header: [{ text: \"City\" }] }\n    ],\n    group: true,\n    groupable: true,\n    data: dataset\n});\n\ngrid.data.group([\"city\"], {\n    // the group elements that don't have the \"city\" value\n    // will be rendered in the \"Unknown City\" group\n    showMissed: \"Unknown City\" \n});\n```\n\n----------------------------------------\n\nTITLE: Removing Focus from Toggle Control in DHTMLX Form\nDESCRIPTION: Demonstrates how to remove focus from a Toggle control using the blur() method. The method is called on a Toggle form item retrieved using the getItem() method.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/toggle/toggle_blur_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"toggle\").blur();\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Locale to DHTMLX Calendar in JavaScript\nDESCRIPTION: This code snippet demonstrates how to define custom language settings for German localization of DHTMLX Calendar. It includes translations for month and day names, both in full and short forms. The locale is then applied using the dhx.i18n.setLocale() method before initializing the Calendar component.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar2/localizing_calendar.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n//define language settings\nconst de = {\n    // short names of months\n    monthsShort: [\"Jan\", \"Feb\", \"Mär\", \"Apr\", \"Mai\", \"Jun\",\n        \"Jul\", \"Aug\", \"Sep\", \"Okt\", \"Nov\", \"Dez\"],\n    // full names of months             \n    months: [\"Januar\", \"Februar\", \"März\", \"April\", \"Mai\", \"Juni\",\n        \"Juli\", \"August\", \"September\", \"Oktober\", \"November\", \"Dezember\"],\n    // short names of days\n    daysShort: [\"Son\", \"Mon\", \"Die\", \"Mit\", \"Don\", \"Fre\", \"Sam\"],\n    // full names of days\n    days: [\"Sonntag\", \"Montag\", \"Dienstag\", \"Mittwoch\", \"Donnerstag\",\n        \"Freitag\", \"Samstag\"]\n};\n\n//apply language settings\ndhx.i18n.setLocale(\"calendar\", de);\nconst calendar = new dhx.Calendar(\"calendar\", {\n    css: \"dhx_widget--bordered\"\n});\n```\n\n----------------------------------------\n\nTITLE: Including DHTMLX Suite via CDN\nDESCRIPTION: Basic HTML template that includes DHTMLX Suite JavaScript and CSS files from CDN. Sets up the initial structure for a contact manager application.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tutorial/basic_application/step1.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n<head>\n    <!-- meta block -->\n    <title>Contact manager</title>\n    <script src=\"https://cdn.dhtmlx.com/suite/edge/suite.js\"></script>\n    <link rel=\"stylesheet\" href=\"https://cdn.dhtmlx.com/suite/edge/suite.css\">\n</head>\n<body>\n    <script type=\"text/javascript\">\n        //the code of your application\n    </script>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Initializing Checkbox in DHTMLX Form\nDESCRIPTION: Creates a new Form instance with a Checkbox control. The checkbox includes basic configuration options like label, name, ID, and value properties.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/checkbox.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst form = new dhx.Form(\"form_container\", {\n    rows: [\n        {    \n            type: \"checkbox\",\n            label: \"I agree\",\n            name: \"agree\",\n            id: \"agree\",\n            value: \"checkboxvalue\"\n        }\n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Grid Column Resizing in DHTMLX\nDESCRIPTION: Example demonstrating how to configure a non-resizable population column while enabling global resizing for the Grid component. Shows the column configuration within the Grid initialization.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/gridcolumn_properties/gridcolumn_resizable_property.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst grid = new dhx.Grid(\"grid_container\", {\n    columns: [\n        { id: \"population\", header: [{ text: \"Population\" }], resizable: false },\n        // more columns configuration objects\n    ],\n    resizable: true,\n    // more options \n});\n```\n\n----------------------------------------\n\nTITLE: Adding Items to List Using Data Collection API in JavaScript\nDESCRIPTION: Demonstrates how to add new items to an initialized List using the add() method of Data Collection. The method takes a configuration object for the new item and an optional index for positioning.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/list/work_with_list.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nlist.data.add({value:\"New item\"},1);\n```\n\n----------------------------------------\n\nTITLE: Adding Tooltips to Calendar Dates\nDESCRIPTION: Shows how to implement tooltips for specific dates in the calendar\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar2/operating_calendar.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar special_days = {\n    \"20__8\": \"Mum's birthday\",\n    \"28__8\": \"Trip to Canada\"\n}\n\ncalendar.events.on(\"DateMouseOver\", function(date, e) {\n    var key = date.getDate() + \"__\" + (date.getMonth() + 1);\n    if (key in special_days) {\n        dhx.tooltip(special_days[key], {node: e.target, position: \"bottom\"});\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Tree Drop Behavior in JavaScript\nDESCRIPTION: This example demonstrates how to configure the dropBehaviour property for source and target Tree components. The 'complex' mode is set for both trees, allowing dragged items to become either children or siblings depending on the drop position.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree/api/tree_dropbehaviour_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst source = new dhx.Tree(\"tree-source\",{dragMode:\"source\", dropBehaviour:\"complex\"});\nconst target = new dhx.Tree(\"tree-target\",{dragMode:\"target\", dropBehaviour:\"complex\"});\n```\n\n----------------------------------------\n\nTITLE: Getting Item ID in TreeCollection - JavaScript\nDESCRIPTION: This code snippet demonstrates how to use the getId() method of the TreeCollection to retrieve the ID of an item. It takes the index of the item and optionally the parent ID as parameters, returning the ID of the specified item.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree_collection/api/treecollection_getid_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst id = tree.data.getId(2, \"1\"); // returns \"3\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Bar or X-Bar Chart\nDESCRIPTION: Provides a full configuration for a Bar or X-Bar chart, including scales, series, and legend settings.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/chart/configuration_properties.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n    type: \"bar\", // or type: \"x-bar\"\n    scales: {\n        \"bottom\": {\n            text: \"month\"\n        },\n        \"left\": {\n            maxTicks: 10,\n            max: 100,\n            min: 0\n        }\n    },\n    series: [\n        {\n            id: \"A\",\n            value: \"company A\",\n            color: \"#81C4E8\",\n            fill: \"#81C4E8\"\n        },\n        {\n            id: \"B\",\n            value: \"company B\",\n            color: \"#74A2E7\",\n            fill: \"#74A2E7\"\n        },\n        {\n            id: \"C\",\n            value: \"company C\",\n            color: \"#5E83BA\",\n            fill: \"#5E83BA\"\n        }\n    ],\n    legend: {\n        series: [\"A\", \"B\", \"C\"],\n        halign: \"right\",\n        valign: \"top\"\n    }\n};\n\nconst chart = new dhx.Chart(\"chart_container\", config);\nchart.data.parse(dataset);\n```\n\n----------------------------------------\n\nTITLE: Saving and Restoring Menu State in JavaScript\nDESCRIPTION: Example of saving the current state of a menu using 'serialize' method and then parsing it into a new menu instance.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/menu/data_loading.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst state = menu1.data.serialize();\n\n// creating a new menu\nconst menu2 = new dhx.Menu(document.body);\n// parsing the state of menu1 into menu2\nmenu2.data.parse(state);\n```\n\n----------------------------------------\n\nTITLE: Using Built-in DHTMLX CSS Classes with Tree Component\nDESCRIPTION: This example shows how to apply DHTMLX's predefined CSS classes to a Tree component. It uses the dhx_widget--bg-gray class to set a gray background for the Tree widget.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree/api/tree_css_config.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst tree = new dhx.Tree(\"tree_container\", {\n    css: \"dhx_widget--bg-gray\"\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Object of Selected Item in JavaScript List\nDESCRIPTION: Retrieves the object of the selected item in the List using the getItem() method of the selection object.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/list/usage_selection.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst item = list.selection.getItem();\n```\n\n----------------------------------------\n\nTITLE: Removing All Rows in DHTMLX Grid\nDESCRIPTION: Use the removeAll() method of DataCollection to remove all rows from the grid at once.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/usage.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ngrid.data.removeAll();\n```\n\n----------------------------------------\n\nTITLE: Handling focusChange Event in DHTMLX Tree (JavaScript)\nDESCRIPTION: This snippet demonstrates how to attach an event handler to the focusChange event of a DHTMLX Tree component. The event fires when focus moves to a new item in the tree, providing the index and id of the newly focused item.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree/api/tree_focuschange_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntree.events.on(\"focusChange\", function(index, id){\n    // your code here\n});\n```\n\n----------------------------------------\n\nTITLE: Attaching a DHTMLX Component to a Layout Cell in JavaScript\nDESCRIPTION: This code snippet demonstrates how to create a Layout, initialize a Sidebar component, and attach the Sidebar to a specific cell in the Layout. It showcases the usage of the attach() method.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/layout/api/cell/layout_cell_attach_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst layout = new dhx.Layout(\"layout_container\", {\n    width:\"400px\", height:\"600px\"\n});\n\nconst sidebar = new dhx.Sidebar(null, {\n    css: \"dhx_widget--border_right dhx_widget--bg\"\n});\n\nlayout.getCell(\"sidebar\").attach(sidebar);\n```\n\n----------------------------------------\n\nTITLE: Handling Grid Column Resize Event in JavaScript\nDESCRIPTION: This snippet demonstrates how to attach an event listener for the resize event on a DHTMLX Grid. The event fires when a column is resized and provides access to the column configuration and the native mouse event.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_resize_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngrid.events.on(\"resize\", (column, event) => {\n    // your code here\n});\n```\n\n----------------------------------------\n\nTITLE: Including DHTMLX Suite Source Files in HTML\nDESCRIPTION: This snippet demonstrates how to properly include the DHTMLX Suite library's JavaScript and CSS files within the <head> section of an HTML page. 'suite.js' provides the core DHTMLX logic, while 'suite.css' defines the component's styles. Both files must be referenced by their correct path in the project directory. This is a necessary step for any application utilizing DHTMLX UI components.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/popup/initialization.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script type=\\\"text/javascript\\\" src=\\\"../../codebase/suite.js\\\"></script>\\n<link rel=\\\"stylesheet\\\" href=\\\"../../codebase/suite.css\\\">\n```\n\n----------------------------------------\n\nTITLE: Disabling a Slider in DHTMLX JavaScript UI\nDESCRIPTION: This code snippet demonstrates how to use the disable() method to disable a slider component in the DHTMLX JavaScript UI library. The method is called on a slider instance and doesn't require any parameters.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/slider/api/slider_disable_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nslider.disable();\n```\n\n----------------------------------------\n\nTITLE: Copying Item in DataCollection using JavaScript\nDESCRIPTION: This code snippet demonstrates how to use the copy() method of the DataCollection to create a copy of an item at a specified index. It copies the item with id:4 to the position with index 5.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/data_collection/api/datacollection_copy_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ncomponent.data.copy(\"4\",5);\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Locale for DHTMLX Calendar in JavaScript\nDESCRIPTION: This snippet demonstrates how to define custom language settings for a German locale and apply them to a DHTMLX Calendar. It includes translations for month and day names, both in full and short forms.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar2/functionality_and_features/localization.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n//define language settings\nconst de = {\n    // short names of months\n    monthsShort: [\"Jan\", \"Feb\", \"Mär\", \"Apr\", \"Mai\", \"Jun\",\n        \"Jul\", \"Aug\", \"Sep\", \"Okt\", \"Nov\", \"Dez\"],\n    // full names of months             \n    months: [\"Januar\", \"Februar\", \"März\", \"April\", \"Mai\", \"Juni\",\n        \"Juli\", \"August\", \"September\", \"Oktober\", \"November\", \"Dezember\"],\n    // short names of days\n    daysShort: [\"Son\", \"Mon\", \"Die\", \"Mit\", \"Don\", \"Fre\", \"Sam\"],\n    // full names of days\n    days: [\"Sonntag\", \"Montag\", \"Dienstag\", \"Mittwoch\", \"Donnerstag\",\n        \"Freitag\", \"Samstag\"]\n};\n\n//apply language settings\ndhx.i18n.setLocale(\"calendar\", de);\nconst calendar = new dhx.Calendar(\"calendar\", {\n    css: \"dhx_widget--bordered\"\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing DataView Widget in JavaScript\nDESCRIPTION: Creates a DataView widget using DHTMLX Suite and configures it with data from a collection. Defines the layout and template for displaying items.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/optimus_guides/how_to_start_optimus.md#2025-04-22_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nimport { View } from \"dhx-optimus\";\n\nexport class DataView extends View {\n    init() {\n        return new dhx.DataView(null, {\n            data: this.params.dataCollection,\n            itemsInRow: 2,\n            gap: 20,\n            template: ({ name, post }) => `\n                <div class=\"personal-card\">\n                    <div class=\"personal-card__container\">\n                        <h3>${name}</h3>\n                        <p>${post}</p>\n                    </div>\n                </div>\n            `,\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling dragRowIn Event in DHTMLX Grid (JavaScript)\nDESCRIPTION: This snippet demonstrates how to attach an event listener for the dragRowIn event in a DHTMLX Grid. The event fires when a row is dragged to another potential target within the grid.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_dragrowin_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngrid.events.on(\"dragRowIn\", (data, event) => {\n  // your logic here\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Ribbon Control States using getState() in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to use the `getState()` method on a DHTMLX Ribbon instance (`ribbon`) to retrieve an object representing the current values and states of its controls. The method returns an object where keys are the control IDs and values are their current states or values. The example comment shows a potential returned object mapping control IDs ('search', 'edit', 'align') to their respective values ('Hello', true, 'right').\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/ribbon/api/ribbon_getstate_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst state = ribbon.getState(); // -> {\"search\":\"Hello\",\"edit\":true,\"align\":\"right\"}\n```\n\n----------------------------------------\n\nTITLE: Implementing Global Event Handling in Views\nDESCRIPTION: Demonstrates how to implement global event handling between components using on() and fire() methods.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/optimus_guides/index.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport { View } from \"dhx-optimus\";\n\nexport class ToolbarView extends View {\n    init() {\n        return (this.toolbar = new dhx.Toolbar(null, {\n            css: \"toolbar\",\n            data: [\n                {\n                    type: \"spacer\",\n                },\n                {\n                    id: \"first\",\n                    value: \"First\",\n                    group: \"views\",\n                },\n                {\n                    id: \"second\",\n                    value: \"Second\",\n                    group: \"views\",\n                },\n                {\n                    id: \"third\",\n                    value: \"Third\",\n                    group: \"views\",\n                },\n                {\n                    type: \"spacer\",\n                },\n            ],\n        }));\n    }\n\n    ready() {\n        this.toolbar.events.on(\"click\", id => {\n            this.fire(\"viewChange\", [id]);\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Scrolling Grid to Specific Cell in JavaScript\nDESCRIPTION: The scrollTo() method is used to programmatically scroll the grid to a specified cell. It takes two parameters: the row ID and the column ID of the target cell.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_scrollto_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ngrid.scrollTo(\"15\", \"c\");\n```\n\n----------------------------------------\n\nTITLE: Adding Input Control to DHTMLX Form in JavaScript\nDESCRIPTION: This snippet demonstrates how to add an Input control during the initialization of a DHTMLX Form. It sets up an input field with a label, icon, and placeholder.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/input.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst form = new dhx.Form(\"form_container\", {\n    rows: [\n        {\n            type: \"input\",\n            name: \"input\",\n            label: \"Name\",\n            icon: \"dxi dxi-magnify\",\n            placeholder: \"John Doe\"           \n         } \n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: Attaching afterShow Event Handler to Combo Box in DHTMLX Form\nDESCRIPTION: This snippet demonstrates how to attach an event handler for the afterShow event of a Combo Box control in a DHTMLX Form. The event fires after the control is shown and provides the IDs of the currently selected options.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/combo/combo_aftershow_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"combo\").events.on(\"afterShow\", function(ids) {\n    console.log(\"afterShow\", ids);\n});\n```\n\n----------------------------------------\n\nTITLE: Handling beforeDrop Event in DHTMLX List\nDESCRIPTION: This snippet demonstrates how to attach an event handler for the beforeDrop event of a DHTMLX List component. The event fires before the user finishes dragging an item and releases the mouse button. The handler can be used to implement custom logic and optionally prevent the default drop action.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/list/api/list_beforedrop_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlist.events.on(\"beforeDrop\", function(data, events) {\n    // your logic here\n    return false;\n});\n```\n\n----------------------------------------\n\nTITLE: Destroying RadioGroup Control in DHTMLX Form\nDESCRIPTION: Demonstrates how to properly destroy a RadioGroup instance within a DHTMLX form using the destructor() method. This removes the control and releases any occupied resources.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/radiogroup/radiogroup_destructor_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"radiogroup\").destructor();\n```\n\n----------------------------------------\n\nTITLE: Adding Input to Toolbar in JavaScript\nDESCRIPTION: Demonstrates how to add an Input control to a toolbar using the add() method of Tree Collection. The input is configured with an empty initial value and a placeholder text.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/toolbar/input.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntoolbar.data.add({\n    type:\"input\",\n    value:\"\",\n    placeholder:\"Type to search\"\n});\n```\n\n----------------------------------------\n\nTITLE: Unselecting All Items in JavaScript List\nDESCRIPTION: Unselects all previously selected items in the List when calling the remove() method without parameters.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/list/usage_selection.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nlist.selection.remove();\n```\n\n----------------------------------------\n\nTITLE: Scrolling to Grid Cell in DHTMLX Grid - JavaScript\nDESCRIPTION: Scrolls grid content to the location of a specific cell identified by a row ID and a column ID. The scrollTo method accepts both IDs as string parameters. Used to programmatically focus on or reveal particular cells in large data sets.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/usage.md#2025-04-22_snippet_46\n\nLANGUAGE: JavaScript\nCODE:\n```\ngrid.scrollTo(\\\"15\\\", \\\"c\\\");\n```\n\n----------------------------------------\n\nTITLE: Selecting a Specific Item in JavaScript DataView\nDESCRIPTION: Selects a particular DataView item by its id using the add() method of the selection object.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/dataview/usage_selection.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst id = dataview.selection.getId(); // -> \"2\"\ndataview.selection.add(\"2\");\n```\n\n----------------------------------------\n\nTITLE: Hiding DHTMLX Window Using JavaScript\nDESCRIPTION: A simple example demonstrating how to hide a DHTMLX Window instance using the hide() method. This method takes no parameters and returns void.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/window/api/window_hide_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndhxWindow.hide();\n```\n\n----------------------------------------\n\nTITLE: Handling doubleClick Event in DHTMLX List (JavaScript)\nDESCRIPTION: This snippet demonstrates how to attach an event listener for the doubleClick event on a DHTMLX List component. It logs a message with the id of the double-clicked item to the console.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/list/api/list_doubleclick_event.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nlist.events.on(\"doubleClick\", function(id, e){\n   console.log(\"The item \"+ list.selection.getId(id) +\" was double clicked.\");\n});\n```\n\n----------------------------------------\n\nTITLE: Detaching event listeners from DHTMLX Calendar\nDESCRIPTION: Shows how to attach an event listener to a Calendar and then detach it using the events.detach() method. This example demonstrates proper cleanup of event handlers.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar2/functionality_and_features/events.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ncalendar.events.on(\"Change\",function(date, oldDate, click){\n    console.log(\"Change selection from \"+oldDate+\" to \"+date);\n    console.log(click);\n});\ncalendar.events.detach(\"Change\");\n```\n\n----------------------------------------\n\nTITLE: Setting Focus on Form Control with DHTMLX Form API in JSX\nDESCRIPTION: Shows how to set focus on a specific form control using the setFocus() method. It takes either the name or id of the control as a parameter.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/work_with_form.md#2025-04-22_snippet_23\n\nLANGUAGE: jsx\nCODE:\n```\nform.setFocus(\"input\");\n```\n\n----------------------------------------\n\nTITLE: Attaching DHTMLX Component to Popup (JavaScript)\nDESCRIPTION: Illustrates attaching a DHTMLX Suite component (like Timepicker) to a Popup using the attach() method. The first argument is the component's name as a string, and the second (optional) argument can be a configuration object. The show() method then renders the Popup. This requires DHTMLX components to be properly initialized and available.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/popup/work_with_popup.md#2025-04-22_snippet_4\n\nLANGUAGE: js\nCODE:\n```\npopup.attach(\"Timepicker\"); \n\npopup.show();\n```\n\n----------------------------------------\n\nTITLE: Attaching a DHTMLX Component to a Tabbar Cell - JavaScript\nDESCRIPTION: Explains how to create a DataView component, parse data into it, and then attach it to a Tabbar cell using attach(). Requires dhx.DataView, an initialized Tabbar, a view in the tabbar with id 'dataview', and a data array. Designed for embedding interactive widgets in tabbed layouts.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tabbar/work_with_tabbar.md#2025-04-22_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst dataview = new dhx.DataView(null, {\\n    template: dataviewTemplate,\\n    itemsInRow: 3,\\n    gap: \\\"10px\\\"\\n});\\n\\ndataview.data.parse(dataset);\\n\\ntabbar.getCell(\\\"dataview\\\").attach(dataview);\n```\n\n----------------------------------------\n\nTITLE: Defining Tabbar Structure - JavaScript\nDESCRIPTION: This JavaScript snippet defines the configuration for the DHTMLX Tabbar's tabs using an array of objects. Each object in the array specifies a tab identifier; all objects are added to the 'views' array, which will be used during the Tabbar's initialization. The key parameter is the array of tab configuration objects. The output is a JavaScript array storing the tab definitions for subsequent use.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tabbar/init.md#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nconst views = [\\n    { tab: \\\"north\\\" },\\n    { tab: \\\"south\\\" },\\n    { tab: \\\"east\\\" },\\n    { tab: \\\"west\\\" },\\n];\n```\n\n----------------------------------------\n\nTITLE: Showing Layout Cell with JavaScript\nDESCRIPTION: Demonstrates how to show a previously hidden cell in a DHTMLX Layout using the show() method. The method is called on a specific cell referenced by its ID.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/layout/api/cell/layout_cell_show_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlayout.getCell(\"1\").show();\n```\n\n----------------------------------------\n\nTITLE: Handling Asynchronous Data Loading in DHTMLX Tree with JavaScript\nDESCRIPTION: Illustrates how to handle asynchronous data loading in DHTMLX Tree by wrapping after-loading code into a promise.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree/loading_data.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ntree.data.load(\"/some/data\").then(function(){\n   // some logic here\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Global State Manager with dhx-optimus-store\nDESCRIPTION: Updates the main index.js file to initialize the dhx-optimus-store state manager with an initial state, making it available throughout the application via the params property.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/optimus_guides/how_to_start_optimus.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"./assets/css/index.css\";\n\nimport { App } from \"dhx-optimus\";\n// import the state manager from \"dhx-optimus-store\"\nimport Store from \"dhx-optimus-store\";\n\nimport { TopLayout } from \"./views/TopLayout\";\n\n// define the initial state of the app\nconst initialState = {\n    active: \"first\",\n};\n\nexport class MyApp extends App {\n    init() {\n        // initialize a global store\n        this.store = new Store(initialState);\n        // assign the \"store\" key to the public \"params\" property\n        this.params.store = this.store;\n        // get the current state of the global store\n        this.state = this.store.getState();\n\n        this.show(null, TopLayout);\n\n        this.subscribe();\n    }\n\n    subscribe() {\n        this.on(\"viewChange\", id => {\n            this.state.active = id;\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Disabled State of Sidebar Item in JavaScript\nDESCRIPTION: Shows how to check if a specific sidebar item is disabled using the isDisabled() method of the DHTMLX Sidebar API.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/sidebar/work_with_sidebar.md#2025-04-22_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nsidebar.isDisabled(\"1\"); // -> true/false\n```\n\n----------------------------------------\n\nTITLE: Using Font Awesome Icons in Toolbar Controls\nDESCRIPTION: Example demonstrating how to use Font Awesome icons in DHTMLX Toolbar controls by setting the icon property to the appropriate Font Awesome class names.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/toolbar/customization.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst toolbarData = [\n    { type: \"button\", icon: \"fas fa-bold\", twoState: true },\n    { type: \"button\", icon: \"fas fa-underline\", twoState: true },\n    { type: \"button\", icon: \"fas fa-italic\", twoState: true },\n    { type: \"button\", icon: \"fas fa-strikethrough\", twoState: true }\n];\n```\n\n----------------------------------------\n\nTITLE: Disabling a Textarea Control in DHTMLX Form\nDESCRIPTION: This example demonstrates how to disable a Textarea control in a DHTMLX Form using the disable() method. The method is called on a specific form item retrieved by its ID.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/textarea/textarea_disable_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"textarea\").disable();\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Focused Item with getFocusItem Method in DHTMLX List\nDESCRIPTION: This example demonstrates how to retrieve the object of the currently focused item in a DHTMLX List component. Note that from v8.0, focusing is only available when key navigation is enabled.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/list/api/list_getfocusitem_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst focus = list.getFocusItem();\n```\n\n----------------------------------------\n\nTITLE: Attaching DHTMLX Components to DHTMLX Window using JavaScript\nDESCRIPTION: This snippet shows how to attach another DHTMLX component, such as 'richtext', inside an existing DHTMLX Window using the `attach()` method. The method takes the component type as a string (e.g., 'richtext') and an optional configuration object. Note that Message, Popup, and Window components cannot be attached due to architectural limitations.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/window/usage.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ndhxWindow.attach(\"richtext\",{mode: \"document\"});\ndhxWindow.show();\n```\n\n----------------------------------------\n\nTITLE: Using setProperties() Method with Fieldset in DHTMLX Form\nDESCRIPTION: Demonstrates how to dynamically change properties of a Fieldset control in a DHTMLX Form. The example shows changing the label and labelAlignment properties.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/fieldset/fieldset_setproperties_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"fieldset\").setProperties({\n    label: \"Personal info\", \n    labelAlignment: \"left\"\n});\n```\n\n----------------------------------------\n\nTITLE: DataCollection Event Handler Syntax in JavaScript\nDESCRIPTION: Basic syntax for attaching event handlers to DataCollection events. Shows how to bind callback functions to data-related events in DHTMLX components.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/guides/datacollection_guide.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\ncomponent.data.events.on(\"event\", function(){});\n```\n\n----------------------------------------\n\nTITLE: Grid Spans with Tooltip Template\nDESCRIPTION: Shows how to implement custom tooltip templates for spans with access to cell values and summary calculations.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_spans_config.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst grid = new dhx.Grid(\"grid_container\", {\n    columns: [\n        { width: 200, id: \"country\", header: [{ text: \"Country\" }] },\n        { \n            width: 150, \n            id: \"population\", \n            header: [{ text: \"Population\" }],\n            summary: \"count\"\n        }\n    ],\n    summary: { totalPopulation: [\"population\", \"sum\"] },\n    spans: [\n        {\n            row: \"rowid\",\n            column: \"population\",\n            rowspan: 9,\n            text: \"Some text\",\n            tooltipTemplate: ({ value, count }) => (`value: ${value}; count: ${count}`),\n        },\n    ],\n    data: dataset\n});\n```\n\n----------------------------------------\n\nTITLE: Including DHTMLX Source Files\nDESCRIPTION: Demonstrates how to include the required DHTMLX Suite library files in the HTML document.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/combobox/how_to_start.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"text/javascript\" src=\"../../codebase/suite.js\"></script>\n<link rel=\"stylesheet\" href=\"../../codebase/suite.css\">\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX Chart with Type Configuration\nDESCRIPTION: Demonstrates how to initialize a DHTMLX Chart component with a specific type configuration. The type property is required and determines the visual representation of the chart data.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/chart/api/chart_type_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst chart = new dhx.Chart(\"chart_container\", {\n    type:\"line\" \n});\n```\n\n----------------------------------------\n\nTITLE: Validating Input Control in JavaScript DHTMLX Form\nDESCRIPTION: This snippet demonstrates how to use the validate() method for an Input control in a DHTMLX Form. It shows validation of both specified and current values, with and without silent mode.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/input/input_validate_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// the method validates the specified value\nform.getItem(\"input\").validate(true, \"I am Input\"); // -> true/false\n\n// the method validates the current value\nform.getItem(\"input\").validate(true); // -> true/false\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// the method validates the specified value\nform.getItem(\"input\").validate(false, \"I am Input\"); // -> true/false\n\n// the method validates the current value\nform.getItem(\"input\").validate(); // -> true/false\n```\n\n----------------------------------------\n\nTITLE: Filtering List Data Using Data Collection API in JavaScript\nDESCRIPTION: Demonstrates how to filter List data based on specified criteria using the filter() method of Data Collection. The example filters even-numbered values.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/list/work_with_list.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nlist.data.filter({\n    by:\"value\",\n    match:2,\n    compare:(value,match,item)=>{ return parseFloat(value) % 2 == 0}\n});\n```\n\n----------------------------------------\n\nTITLE: Attaching Event Listener to Menu in JavaScript\nDESCRIPTION: Demonstrates how to attach an event listener to a Menu component using the events.on() method. This example listens for the 'click' event and logs the clicked item's ID to the console.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/menu/handling_events.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmenu.events.on(\"click\", function(id,e){\n    console.log(id);\n});\n```\n\n----------------------------------------\n\nTITLE: Attaching Event Listener in DHTMLX Form\nDESCRIPTION: Shows how to attach an event listener to a form component using the form.events.on() method. The example demonstrates logging the id when a click event occurs.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/handling_events.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.events.on(\"click\", function(name,e){\n    console.log(id);\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling All Toolbar Items with DHTMLX enable() Method in JavaScript\nDESCRIPTION: Shows how to enable all items in a DHTMLX Toolbar by calling the enable() method without arguments. This feature is available from DHTMLX v7.0 and later. The method impacts all items, regardless of their previous state. Requires a valid DHTMLX Toolbar instance; has no effect if no items are present.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/toolbar/api/toolbar_enable_method.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// enables all Toolbar items\ntoolbar.enable();\n```\n\n----------------------------------------\n\nTITLE: Configuring Layout Border Types in JavaScript\nDESCRIPTION: Example demonstrating how to configure different border types ('wide', 'line', 'space', 'none') for layout cells. The code shows a layout with two rows, each containing two columns with different border types.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/layout/api/cell/layout_cell_type_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst layout = new dhx.Layout(\"layout_container\", {\n    rows: [\n        {\n            type: \"wide\", // \"line\" | \"space\" | \"none\"\n            cols: [\n                {\n                    html: \"1\",\n                },\n                {\n                    html: \"2\",\n                }\n            ]\n        },\n        {\n            type: \"line\",\n            cols: [\n                {\n                    html: \"3\",\n                },\n                {\n                    html: \"4\",\n                },\n            ]\n        }\n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: Updating URL and Configuration for LazyDataProxy in JavaScript\nDESCRIPTION: This snippet shows how to use the updateUrl method to change the data loading URL or modify configuration parameters for the LazyDataProxy. It allows dynamic updating of the data source and loading behavior.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/helpers/lazydataproxy.md#2025-04-22_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nlazyDataProxy.updateUrl(\"https://docs.dhtmlx.com/suite/backend/lazyload\", {\n    limit: 30,\n    prepare: 5,\n    delay: 150,\n    from: 0\n});\n```\n\n----------------------------------------\n\nTITLE: Handling beforeApply Event in DHTMLX Timepicker\nDESCRIPTION: Example showing how to attach an event handler to the beforeApply event of a timepicker. The handler receives the timepicker value and can prevent the value from being saved by returning false.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/timepicker/api/timepicker_beforeapply_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntimepicker.events.on(\"beforeApply\", function(value) {\n    console.log(value);\n    return false;\n});\n```\n\n----------------------------------------\n\nTITLE: Searching Items with findAll Method in JavaScript DataCollection\nDESCRIPTION: Demonstrates how to use the findAll() method of DataCollection to search for items. It shows two examples: one using a function as a search criterion, and another using an object with 'by' and 'match' properties.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/data_collection/api/datacollection_findall_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n//searching for items by the function\nconst items = component.data.findAll(function(items){\n    if(items.text===\"Manager\"||items.text===\"Marketer\"){return true}\n});\n\n//searching for items by the attribute key\nconst items = component.data.findAll({by:\"text\",match:\"Manager\"});\n```\n\n----------------------------------------\n\nTITLE: Defining DHTMLX Toolbar Datepicker Configuration in JavaScript\nDESCRIPTION: This JavaScript snippet outlines the structure for configuring a Datepicker item within a DHTMLX Toolbar's data array. It showcases various optional properties to customize the datepicker, such as setting its initial value, format, appearance (icon, label, placeholder), interaction behavior (disabled dates, editable), time picking capabilities, and layout (width, css, hidden). The `type: \"datePicker\"` property is essential to specify the control type.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/toolbar/api/api_datepicker_properties.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = [\n    {\n        type: \"datePicker\",\n        id?: string | number,\n        parent?: string,\n        value?: string | Date,\n        valueFormat?: string | \"date\",\n\n        dateFormat?: string,\n        disabledDates?: (date: Date) => boolean,\n        icon?: string,\n        label?: string,\n        mark?: (date: Date) => string,\n        mode?: \"calendar\" | \"year\" | \"month\" | \"timepicker\", // \"calendar\" by default\n        placeholder?: string,\n        thisMonthOnly?: boolean, // false by default\n        timeFormat?: 24 | 12, // 24 by default\n        timePicker?: boolean, // false by default\n        weekNumbers?: boolean, // false by default\n        weekStart?: \"saturday\" | \"sunday\" | \"monday\", // \"sunday\" by default\n\n        css?: string | string[],\n        disabled?: boolean,\n        editable?: boolean,\n        hidden?: boolean,\n        width?: string,\n    },\n    // more Toolbar controls\n]\n```\n\n----------------------------------------\n\nTITLE: Initializing and Displaying DHTMLX Popup Using JavaScript\nDESCRIPTION: This HTML document creates a minimal working example for instantiating and displaying a DHTMLX Popup widget. It includes the necessary DHTMLX Suite files in the header and uses inline JavaScript to create a Popup instance. The 'dhx.Popup' constructor initializes the Popup, and the example assumes the standard structure for integrating DHTMLX components. The snippet is useful for quick prototyping or documentation purposes.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/popup/initialization.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\\n<html>\\n    <head>\\n        <title>How to Start with DHTMLX Popup</title>         \\n        <script type=\\\"text/javascript\\\" src=\\\"../../codebase/suite.js\\\"></script>\\n        <link rel=\\\"stylesheet\\\" href=\\\"../../codebase/suite.css\\\">\\n    </head>\\n    <body>       \\n        <script>\\n            // creating DHTMLX Popup\\n            const popup = new dhx.Popup();\\n        </script>\\n    </body>\\n</html>\n```\n\n----------------------------------------\n\nTITLE: Configuring Select Control Properties in DHTMLX Form\nDESCRIPTION: This code snippet demonstrates the structure and available properties for configuring a Select control within a DHTMLX Form. It includes options for setting the control type, name, id, options array, value, and various styling and validation properties.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/select/api_select_properties.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    type: \"select\",\n    name?: string,\n    id?: string,\n    options: [\n        {\n            value: string | number,\n            content: string,\n            disabled?: boolean,\n        },\n        // more options\n    ],\n    value?: string | number,\n\n    css?: string,\n    disabled?: boolean, // false by default\n    height?: string | number | \"content\", // \"content\" by default\n    hidden?: boolean, // false by default\n    padding?: string | number, \n    required?: boolean, // false by default\n    validation?: (input: string | number | boolean) => boolean,\n    width?: string | number | \"content\", // \"content\" by default\n    \n    icon?: string,\n\n    hiddenLabel?: boolean, // false by default\n    label?: string,\n    labelPosition?: \"left\" | \"top\", // \"top\" by default\n    labelWidth?: string | number,\n\n    helpMessage?: string,\n    preMessage?: string,\n    successMessage?: string,\n    errorMessage?: string,\n}\n```\n\n----------------------------------------\n\nTITLE: Handling beforeChange Event in DHTMLX Form Datepicker\nDESCRIPTION: This snippet demonstrates how to attach an event handler to the beforeChange event of a Datepicker control in a DHTMLX Form. The handler logs the new value and prevents the change by returning false.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/calendar/calendar_beforechange_event.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nform.getItem(\"datepicker\").events.on(\"beforeChange\", function(value) {\n    console.log(\"beforeChange\", value);\n    return false;\n});\n```\n\n----------------------------------------\n\nTITLE: Clearing Form Values in JavaScript\nDESCRIPTION: This example shows how to use the clear() method to clear only the form values. This is helpful when you want to reset the form data while maintaining the current validation state.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/form_clear_method.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nform.clear(\"value\");\n```\n\n----------------------------------------\n\nTITLE: Initializing DataProxy in JavaScript\nDESCRIPTION: Creates a new DataProxy instance with a URL and optional configuration parameters. This helper simplifies working with server-side backends by allowing custom URL creation and assignment to a variable.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/data_proxy/index.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst proxy = new dhx.DataProxy(\"someUrl\", {\n    // config options \n})\n```\n\n----------------------------------------\n\nTITLE: Showing and Hiding Columns in DHTMLX Grid\nDESCRIPTION: Use the showColumn() and hideColumn() methods to show and hide columns in the grid.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/usage.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n//showing a column\ngrid.showColumn(colId);\n//hiding a column\ngrid.hideColumn(colId);\n```\n\n----------------------------------------\n\nTITLE: Defining Main App with Initial View in DHTMLX Optimus - JavaScript\nDESCRIPTION: This snippet shows how to extend the DHTMLX Optimus App class and specify an initial View component to render by calling show(null, TopLayout) inside the init() method. The two required imports are \"dhx-optimus\" for App and the TopLayout view module. The TopLayout view should be defined separately as a class extending View.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/optimus_guides/index.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { App } from \\\"dhx-optimus\\\";\\nimport { TopLayout } from \\\"./views/TopLayout\\\";\\n\\nexport class MyApp extends App {\\n    init() {\\n        this.show(null, TopLayout);\\n    }\\n}\n```\n\n----------------------------------------\n\nTITLE: Server-side Response Format for Dynamic Loading in JavaScript\nDESCRIPTION: This code snippet illustrates the expected format of the server-side response for dynamic loading. It includes an array of data records, the starting position, and the total count of available records.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/helpers/lazydataproxy.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\ndata: [\n    {country: \"DR Congo\", population: \"84004989\", yearlyChange: \"0.0328\"}\n    {country: \"Germany\", population: \"82293457\", yearlyChange: \"0.0022\"}\n    {country: \"Iran\", population: \"82011735\", yearlyChange: \"0.0105\"}\n    {country: \"Turkey\", population: \"81916871\", yearlyChange: \"0.0145\"}\n], \ntotal_count: 233,\nfrom: 15\n```\n\n----------------------------------------\n\nTITLE: Iterating Over TreeCollection Items with forEach Method in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the forEach() method to iterate over items in a TreeCollection. It calls a callback function for each item, providing the element, index, and array as parameters.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree_collection/api/treecollection_foreach_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ncomponent.data.forEach(function(element, index, array) {\n    console.log(\"This is an item of treeCollection: \", element);\n    console.log(\"This is an index of the element: \", index);\n    console.log(\"This is an array of the elements: \", array);\n});\n```\n\n----------------------------------------\n\nTITLE: Repainting a Chart using the paint() Method in DHTMLX JavaScript UI\nDESCRIPTION: Demonstrates how to use the paint() method to manually repaint a chart on a page. This method is useful when you need to refresh the chart visualization after data or configuration changes.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/chart/api/chart_paint_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nchart.paint();\n```\n\n----------------------------------------\n\nTITLE: Global Theme Color Override Example\nDESCRIPTION: Example showing how to override primary colors for all Suite themes simultaneously using CSS root variables.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/themes/change_base_themes.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<style>\n    :root {\n        --dhx-h-primary: 0;\n        --dhx-l-primary: 30%;\n    }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Initializing Grid with Custom Row Height in JavaScript\nDESCRIPTION: Example of creating a new Grid instance with a custom row height of 30 pixels. The rowHeight property defines the uniform height for all rows in the grid.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_rowheight_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst grid = new dhx.Grid(\"grid_container\", {\n    columns: [\n        // columns config\n    ],\n    rowHeight: 30,\n    data: dataset\n});\n```\n\n----------------------------------------\n\nTITLE: Detaching Content from Layout Cell\nDESCRIPTION: Example showing how to attach HTML content to a Layout cell and then detach it using the detach() method. The method operates on a specific cell retrieved via getCell() and removes any attached content.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/layout/api/cell/layout_cell_detach_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// attach any HTML content\nlayout.getCell(\"two\").attachHTML(html);\n\n// detach the HTML content\nlayout.getCell(\"two\").detach();\n```\n\n----------------------------------------\n\nTITLE: Configuring Grid Column Header Object\nDESCRIPTION: Example showing the complete structure of a header configuration object with all possible properties and their types. Includes tooltip settings, filtering options, sorting and HTML content settings.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/gridcolumn_properties/gridcolumn_header_property.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nheader: [\n    {\n        text?: string | ((content: {\n            [key: string]: string | number | null\n        }) => string),\n        tooltip?: boolean | object,\n        tooltipTemplate?: (\n            content: {\n                [key: string]: string | number | null;\n                value: string;\n            },\n            header: IHeader,\n            column: ICol\n        ) => string | boolean,\n        align?: \"left\" | \"center\" | \"right\",\n        colspan?: number,\n        rowspan?: number,\n        css?: string,\n        content?: \"inputFilter\" | \"selectFilter\" | \"comboFilter\",\n        filterConfig?: {\n            filter?: (item, input: string) => boolean,\n            multiselection?: boolean,\n            readonly?: boolean,\n            placeholder?: string,\n            virtual?: boolean,\n            template?: function\n        },\n        customFilter?: (item, input: string) => boolean,\n        headerSort?: boolean,\n        sortAs?: (cellValue) => string | number,\n        htmlEnable?: boolean,\n    }\n];\n```\n\n----------------------------------------\n\nTITLE: Retrieving Item from TreeCollection using getItem Method in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the getItem() method of the TreeCollection to retrieve an item by its ID. The method takes an ID as a parameter and returns the corresponding item object.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree_collection/api/treecollection_getitem_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst add_btn = toolbar.data.getItem(\"add_btn\");\n```\n\n----------------------------------------\n\nTITLE: Implementing Range Mode Slider\nDESCRIPTION: Creates a range slider with two thumbs, setting initial range values between 25 and 75.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/slider/configuring_slider.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst slider = new dhx.Slider(\"slider_container\", {\n    min: 0,\n    max: 100,\n    value: 0,\n    step: 1,\n    range: true,\n    value: [25, 75]\n});\n```\n\n----------------------------------------\n\nTITLE: Clearing Validation of a Combo Box in DHTMLX Form\nDESCRIPTION: This example demonstrates how to clear validation state of a Combo Box control in a DHTMLX Form. The method resets any validation errors that might be displayed for the Combo Box.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/combo/combo_clearvalidate_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"combo\").clearValidate();\n```\n\n----------------------------------------\n\nTITLE: Getting Selected Cell Data\nDESCRIPTION: Examples of retrieving data for single and multiple selected cells\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/usage_selection.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst selectedCell = grid.selection.getCell();\n// -> {row: {…}, column: {…}}\n\nconst selectedCells = grid.selection.getCells();\n// -> [{…}, {…}, {…}]\n0: {row: {…}, column: {…}}\n1: {row: {…}, column: {…}}\n2: {row: {…}, column: {…}}\n```\n\n----------------------------------------\n\nTITLE: Handling dragIn Event in DHTMLX DataView (JavaScript)\nDESCRIPTION: This snippet demonstrates how to attach an event handler for the dragIn event of a DataView component. The event fires when an item is dragged to another potential target within the DataView.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/dataview/api/dataview_dragin_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndataview.events.on(\"dragIn\", function(data, events) {\n    // your logic here\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling a Single DHTMLX Ribbon Item\nDESCRIPTION: This snippet shows how to enable a single disabled Ribbon item using its unique ID. The `enable()` method is called on the Ribbon instance, passing the ID of the item to be enabled.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/ribbon/api/ribbon_enable_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nribbon.enable(\"save_btn\");\n```\n\n----------------------------------------\n\nTITLE: Removing Items from List Using Data Collection API in JavaScript\nDESCRIPTION: Illustrates how to remove a specific item or all items from a List using the remove() and removeAll() methods of Data Collection respectively.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/list/work_with_list.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nlist.data.remove(\"option_id\");\n\nlist.data.removeAll();\n```\n\n----------------------------------------\n\nTITLE: Loading Menu Data from External File in JavaScript\nDESCRIPTION: Shows how to load menu data from an external JSON file using the 'load' method of Tree Collection after menu initialization.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/menu/data_loading.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmenu.data.load(\"[path to this file]/file.json\");\n```\n\n----------------------------------------\n\nTITLE: Accessing DHTMLX ComboBox Widget in JavaScript\nDESCRIPTION: This example demonstrates how to access the underlying DHTMLX ComboBox widget from a Form's Combo control and use its methods, such as setting focus.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/combo.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst combo = form.getItem(\"combo\").getWidget();  // -> ComboBox\ncombo.focus(); // sets focus in the input\n```\n\n----------------------------------------\n\nTITLE: Using getSortingStates Method in JavaScript\nDESCRIPTION: This example demonstrates how to use the getSortingStates method to retrieve the current sorting parameters applied to the data in a component.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree_collection/api/treecollection_getsortingstates_method.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst state = component.data.getSortingStates();\n```\n\n----------------------------------------\n\nTITLE: Handling beforeCheck Event in DHTMLX Tree (JavaScript)\nDESCRIPTION: This snippet demonstrates how to attach an event handler to the beforeCheck event, which fires before a tree item's state is changed. The handler receives the item's index and ID, and can optionally return false to prevent the state change.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree/api/tree_beforecheck_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntree.events.on(\"beforeCheck\", function (index, id) {\n    console.log(\"beforeCheck\", index, id);\n    // return false;\n});\n```\n\n----------------------------------------\n\nTITLE: Handling List Item Edit Completion in DHTMLX JavaScript\nDESCRIPTION: Example showing how to attach an event handler to the afterEditEnd event of a DHTMLX List component. The event fires after editing of a list item ends and provides the new value and item ID.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/list/api/list_aftereditend_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlist.events.on(\"afterEditEnd\", function(value,id){\n    // your logic here\n});\n```\n\n----------------------------------------\n\nTITLE: Firing Chart Events in JavaScript\nDESCRIPTION: Demonstrates how to manually fire chart events using the chart.events.fire() method with custom arguments.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/chart/events.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nchart.events.fire(\"name\",args);\n// where args is an array of arguments\n```\n\n----------------------------------------\n\nTITLE: Editing a Tree Item on Double Click in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the editItem() method to enable editing of a Tree item when it's double-clicked. It shows two examples: one with default text editing and another with a select dropdown.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree/api/tree_edititem_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ntree.events.on(\"itemDblClick\", function (id) {\n    tree.editItem(id);\n});\n\n// or\n\ntree.events.on(\"itemDblClick\", function (id) {\n    tree.editItem(id,{ mode: \"select\", options: [1, 2, 3, 4, 5] });\n});\n```\n\n----------------------------------------\n\nTITLE: Displaying Calendar Modes in DHTMLX\nDESCRIPTION: This snippet demonstrates different calendar modes (calendar, month, year) using the DHTMLX library. It showcases how to set up and display various calendar views.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar2/functionality_and_features/calendar_modes.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<iframe src=\"https://snippet.dhtmlx.com/n9q0tc0q?mode=result\" frameborder=\"0\" class=\"snippet_iframe\" width=\"100%\" height=\"550\"></iframe>\n```\n\n----------------------------------------\n\nTITLE: Creating Initial HTML Structure with App Container HTML\nDESCRIPTION: Sets up the basic HTML document (`index.html`) for the DHTMLX Optimus application. It includes a `<section>` element with the unique ID 'app', which serves as the main container where the Optimus application will be rendered.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/optimus_guides/how_to_start_optimus.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n    <head>\n        <title>dhtmlxOptimus guide</title>\n    </head>\n    <body>\n        <!-- Create a container with the unique id -->\n        <section id=\"app\" class=\"main__container\"></section>\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Attaching Event Listener for afterResizeEnd Event in DHTMLX Grid\nDESCRIPTION: This code snippet demonstrates how to attach an event listener for the afterResizeEnd event in a DHTMLX Grid. The event fires after resizing of a column is ended and provides access to the column configuration and the native MouseEvent object.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_afterresizeend_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngrid.events.on(\"afterResizeEnd\", (column, event) => {\n    // your logic here\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Mixed Layout in DHTMLX\nDESCRIPTION: Creates a complex layout combining both rows and columns. The layout includes a top row with two columns (Block 1 and Block 2), and a bottom row with another two rows (Block 3 and Block 4).\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/layout/layout_structure.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst layout = new dhx.Layout(\"layout_container\", {   \n    rows: [\n        {\n            cols: [\n                {\n                    header: \"Block 1\"                        \n                },\n                {\n                    header: \"Block 2\"               \n                }\n            ]\n        },\n        {\n            rows: [\n                {\n                    header: \"Block 3\"                                       \n                },\n                {\n                    header: \"Block 4\"                                                \n                }\n            ]\n        }\n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: Adding a Span to DHTMLX Grid in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the addSpan() method to add a row span to a DHTMLX Grid. The method takes an object with configuration properties for the span, including the row and column identifiers, and the number of rows to span.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_addspan_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ngrid.addSpan({ \n    row: \"0\", \n    column: \"a\", \n    rowspan: 5 \n});\n// grid.paint();\n```\n\n----------------------------------------\n\nTITLE: Handling List Item Click Events in DHTMLX JavaScript\nDESCRIPTION: This example demonstrates how to attach an event handler to the 'click' event of a DHTMLX List component. The handler logs the ID of the clicked item using the selection.getId() method.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/list/api/list_click_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlist.events.on(\"click\", function(id, e){\n    console.log(\"The item with the id \"+ list.selection.getId(id) +\" was clicked.\");\n});\n```\n\n----------------------------------------\n\nTITLE: Loading Local Data into DataView in JavaScript\nDESCRIPTION: This snippet shows how to load data into a DHTMLX DataView from a local data source using the parse() method of DataCollection. It assumes a predefined dataset is available.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/dataview/data_loading.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst dataview = new dhx.DataView(\"dataview_container\");\ndataview.data.parse(dataset);\n```\n\n----------------------------------------\n\nTITLE: Enabling Modal Behavior for DHTMLX Window in JavaScript\nDESCRIPTION: This example enables modal functionality in DHTMLX Window by setting the 'modal' option to true. A modal window disables interaction with the underlying interface until it is closed. This property is set during instantiation and requires DHTMLX Suite. The window appears above a gray, inactive background, restricting focus to itself.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/window/configuration.md#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nconst dhxWindow = new dhx.Window({\n    modal:true\n});\n```\n\n----------------------------------------\n\nTITLE: Complete Example of Slider Customization with CSS and JavaScript\nDESCRIPTION: This example shows a complete setup for customizing a DHTMLX Slider. It includes defining a custom CSS class that changes the primary color and applying it to a Slider instance.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/slider/customization.md#2025-04-22_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<style>\n    .custom {\n        --dhx-color-primary: #118d8d;\n    }\n</style>\n\n<script>\n    const slider = new dhx.Slider(\"slider_container\", {\n        css: \"custom\"\n    });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Loading Data into DHTMLX Tree from External File in JavaScript\nDESCRIPTION: Shows how to load data into DHTMLX Tree from an external file after initialization using the 'load' method of Tree Collection.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree/loading_data.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst tree = new dhx.Tree(\"tree_container\");\ntree.data.load(\"../common/dataset.json\");\n```\n\n----------------------------------------\n\nTITLE: Making DHTMLX Window Resizable in JavaScript\nDESCRIPTION: This code snippet makes the DHTMLX Window resizable by setting the 'resizable' option to true. Once set, users can adjust the window's size using UI resize handles. Sizing restrictions can be applied using the 'minWidth' and 'minHeight' properties. Requires the DHTMLX Suite library and is useful for adaptative layouts.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/window/configuration.md#2025-04-22_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nconst dhxWindow = new dhx.Window({\n    resizable:true\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Button Control in DHTMLX Form\nDESCRIPTION: Creates a new Form instance with a Button control. The button is configured with medium size, flat view, and primary color scheme. The control supports various properties including text label, size, view type, and color.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/button.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst form = new dhx.Form(\"form_container\", {\n    rows: [\n        {\n            type: \"button\",\n            name: \"button\",\n            text: \"Send\",\n            size: \"medium\",\n            view: \"flat\",\n            color: \"primary\"\n        }   \n      ]\n});\n```\n\n----------------------------------------\n\nTITLE: Grid Header Cell Styling\nDESCRIPTION: Shows how to apply custom styles to grid header cells using inline styles and CSS classes.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/customization.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<style>\n    .title {\n        font-size: 1.2em;\n        color: tomato;\n    }\n</style>\n\n<script>\n    const grid = new dhx.Grid(\"grid_container\", {\n        columns: [\n              { width: 200, id: \"country\", header: [{ text: \"<span style='font-size:2em'>Country</span>\" }] },\n              { width: 150, id: \"population\", header: [{ text: \"<span class='title'>Population</span>\" }] },\n              { width: 150, id: \"yearlyChange\", header: [{ text: \"Yearly Change\" }] },\n              { width: 150, id: \"netChange\", header: [{ text: \"Net Change\" }] },\n              { width: 150, id: \"density\", header: [{ text: \"Density (P/Km²)\" }] },\n              { width: 150, id: \"area\", header: [{ text: \"Land Area (Km²)\" }] }\n        ],\n        data: dataset\n    });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Setting Focus on Checkbox in Checkbox Group using DHTMLX Form\nDESCRIPTION: This snippet demonstrates how to use the focus() method to set focus on a specific checkbox within a Checkbox Group control. It requires a Form instance with a Checkbox Group item.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/checkbox_group/checkboxgroup_focus_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nform.getItem(\"CheckboxGroup\").focus(\"checkbox_1\");\n```\n\n----------------------------------------\n\nTITLE: Initializing Scatter Chart in DHTMLX\nDESCRIPTION: Configuration for creating Scatter charts with custom scales and series. Includes setup for axis scales, point styling and data mapping.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/chart/configuration_properties.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n    type: \"scatter\",\n    scales: {\n        bottom: {\n            title: \"value B\",\n            min: 0,\n            max: 100,\n            scalePadding: 25\n        },\n        left: {\n            maxTicks: 10,\n            title: \"value A\",\n            max: 100\n        }\n    },\n    series: [\n        {\n            id: \"A_B\",\n            type: \"scatter\",\n            value: \"value A\",\n            valueY: \"value B\",\n            color: \"#81C4E8\",\n            pointType: \"circle\"\n        },\n        {\n            id: \"B_A\",\n            type: \"scatter\",\n            value: \"value B\",\n            valueY: \"value A\",\n            color: \"#74A2E7\",\n            pointType: \"circle\"\n        }\n    ]\n};\n\nconst chart = new dhx.Chart(\"chart_container\", config);\nchart.data.parse(dataset);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Options from a Select Control in DHTMLX Form (JavaScript)\nDESCRIPTION: This example demonstrates how to use the getOptions() method to retrieve all options from a Select control in a DHTMLX Form. The method returns an array of objects where each object represents an option with its properties.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/select/select_getoptions_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"select\").getOptions(); // -> [{…}, {…}]\n```\n\n----------------------------------------\n\nTITLE: Handling beforeDrag Event in DHTMLX Tree Component\nDESCRIPTION: This code snippet demonstrates how to attach an event handler to the beforeDrag event of a DHTMLX Tree component. The event fires before dragging of an item starts and allows you to implement custom logic or prevent the drag operation.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree/api/tree_beforedrag_event.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ntree.events.on(\"beforeDrag\", function(data, events) {\n    // your logic here\n    return false;\n});\n```\n\n----------------------------------------\n\nTITLE: Handling keydown Event in DHTMLX Combo Box\nDESCRIPTION: This snippet demonstrates how to attach an event listener for the 'keydown' event on a Combo Box instance. It logs the event object and the id of the focused option to the console when any key is pressed while an option is in focus.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/combobox/api/combobox_keydown_event.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ncombobox.events.on(\"keydown\", function(event, id) {\n    console.log(event, id);\n});\n```\n\n----------------------------------------\n\nTITLE: Removing Focus from a Combo Box Control in DHTMLX Form with JavaScript\nDESCRIPTION: This example demonstrates how to remove focus from a Combo Box control in a DHTMLX Form using the blur() method. The method takes no arguments and returns void.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/combo/combo_blur_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"combo\").blur();\n```\n\n----------------------------------------\n\nTITLE: Initializing Textarea Control in DHTMLX Form (JavaScript)\nDESCRIPTION: This snippet demonstrates how to add a Textarea control during the initialization of a DHTMLX form. It sets various properties such as name, label, value, and width.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/textarea.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst form = new dhx.Form(\"form_container\", {\n    rows: [\n        {\n            type: \"textarea\",\n            name:\"textarea\",\n            label: \"textarea\",\n            labelWidth: \"70px\",\n            value: \"Some nice text\",\n            width:400\n        }\n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: Using getProperties with Container Control in DHTMLX Form\nDESCRIPTION: This example demonstrates how to initialize a form with a container control and retrieve its configuration properties using the getProperties() method.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/container/container_getproperties_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst form = new dhx.Form(\"form_container\", {\n    css: \"dhx_widget--bordered\",\n    padding: \"40px\",\n    rows: [\n        {\n            type: \"container\",\n            name: \"grid\",\n            padding: \"12px 0px\",\n            height: \"400px\",\n        },\n    ]\n});\n\nform.getItem(\"container\").getProperties();\n```\n\n----------------------------------------\n\nTITLE: Enabling drag copy functionality for Tree components in JavaScript\nDESCRIPTION: This snippet illustrates how to set up two Tree components with drag copy enabled. The 'source' tree allows copying its items, while the 'target' tree can receive copied items.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree/drag_and_drop_handling.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst treeSource = new dhx.Tree(\"tree-source\", {dragMode: \"source\", dragCopy: true});\nconst treeTarget = new dhx.Tree(\"tree-target\", {dragMode: \"target\", dragCopy: true});\n```\n\n----------------------------------------\n\nTITLE: Handling Checkbox Change Event in DHTMLX Form (JavaScript)\nDESCRIPTION: This snippet demonstrates how to attach an event listener to the 'change' event of a Checkbox control in a DHTMLX Form. It logs the new value to the console when the checkbox state changes.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/checkbox/checkbox_change_event.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nform.getItem(\"checkbox\").events.on(\"change\", function(value) {\n    console.log(\"change\", value);\n});\n```\n\n----------------------------------------\n\nTITLE: Alternative Approach to Handle Data Loading\nDESCRIPTION: Alternative method using loadData property to handle actions after asynchronous data loading completes.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/data_collection/api/datacollection_load_method.md#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\ncomponent.data.load(url);\ncomponent.data.loadData.then(function(){\n    //do something after load;\n});\n// loadData executes a callback function after an asynchronous\n// data loading has completed\n```\n\n----------------------------------------\n\nTITLE: Creating Media Query-Based Responsive Layout in JavaScript\nDESCRIPTION: This code shows how to implement responsive behavior based on screen size using media queries. It creates a layout that responds to different screen widths by collapsing the sidebar on smaller screens and expanding it on larger screens.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/slider/constructor.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar layout = new dhx.Layout(\"layout_container\", {\n    cols: [\n        {\n            id: \"sidebar\",\n            width: \"200px\",\n            collapsable: true,\n            header: \"Sidebar\"\n        },\n        {\n            id: \"content\",\n            header: \"Content\"\n        }\n    ]\n});\n\n// Media query based responsiveness\nfunction adjustLayout() {\n    var sidebar = layout.getCell(\"sidebar\");\n    if (window.matchMedia(\"(max-width: 768px)\").matches) {\n        if (!sidebar.isCollapsed()) {\n            sidebar.collapse();\n        }\n    } else {\n        if (sidebar.isCollapsed()) {\n            sidebar.expand();\n        }\n    }\n}\n\n// Initial adjustment\nadjustLayout();\n\n// Listen for window resize\nwindow.addEventListener(\"resize\", adjustLayout);\n```\n\n----------------------------------------\n\nTITLE: Initializing Container Control in JavaScript Form\nDESCRIPTION: This snippet demonstrates how to initialize a Container control within a DHTMLX Form. It shows various configuration options including attaching HTML content and setting properties like height, padding, and CSS classes.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/container.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst form = new dhx.Form(\"form_container\", {\n    rows: [\n        {\n            type: \"container\",\n            name: \"container\",\n            height: 80,\n            padding: 10,\n            css: \"custom_class\",\n            html: \"<p>This is a custom HTML content inside the container</p>\"\n        }\n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Containers for Widgets and Pagination\nDESCRIPTION: This HTML snippet adds two div containers to serve as anchors for a DHTMLX widget and the Pagination component. Each div must have a distinct ID ('widget_container' for the main widget and 'pagination_container' for the pagination controls), which will be referenced during initialization in JavaScript. Place these elements in the body of the HTML file before running the related JavaScript code.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/pagination/init.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div id=\\\"widget_container\\\"></div>\\n<div id=\\\"pagination_container\\\"></div>\n```\n\n----------------------------------------\n\nTITLE: Defining Tab Structure in DHTMLX Tabbar\nDESCRIPTION: Shows how to configure the structure of tabs including their content and styling\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tabbar/configuring_tabbar.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst tabbar = new dhx.Tabbar(\"tabbar_container\", {\n    views:[\n        { tab: \"left\", css:\"panel flex\", header:\"Left\"},\n        { tab: \"west\", css:\"panel flex\", header:\"West\"},\n        { tab: \"east\", css:\"panel flex\", header:\"East\"},\n        { tab: \"right\", css:\"panel flex\", header:\"Right\" }\n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: Disabling Single and Multiple Toolbar Items - DHTMLX JavaScript\nDESCRIPTION: These code snippets demonstrate how to use the DHTMLX Toolbar's disable() method to disable either a specific toolbar item by its ID, or several items at once by passing an array of IDs. No special dependencies are required besides having a DHTMLX Toolbar instance (e.g., toolbar). The argument can be a string, number, or array, and executes in-place, disabling each targeted control as appropriate. Outputs are visual (dimmed/disabled controls), with no explicit return value.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/toolbar/api/toolbar_disable_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ntoolbar.disable(\"save_btn\");\n// several at a time\ntoolbar.disable([\"cancel_btn\",\"del_btn\"]);\n```\n\n----------------------------------------\n\nTITLE: Updating Tree Item Checkbox Visibility with TreeCollection in JSX\nDESCRIPTION: Demonstrates how to dynamically disable a checkbox for a specific tree item using the update method of the tree collection. This can be useful for modifying tree items after initial rendering.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree/api/tree_data_config.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\ntree.data.update(\"Books\", {checkbox:false});\n```\n\n----------------------------------------\n\nTITLE: Attaching Calendar to Input Field in HTML and JavaScript\nDESCRIPTION: Shows how to connect a Calendar object to an input field. The selected date in the calendar is displayed in the input field. Requires both HTML for the input and JavaScript for the event handling.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar/handling_events.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<input type=\"text\" id=\"date\" />\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst calendar = new dhx.Calendar(\"calendar_container\");\ncalendar.events.on(\"change\",(date)=>{ \n    document.getElementById(\"date\").value = date.getFullYear() +\n        \"-\" + (date.getMonth() + 1) + \"-\" +date.getDate();\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Checkbox blur Event in DHTMLX Form (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to attach an event listener to the blur event of a Checkbox control in a DHTMLX Form. The event fires when the Checkbox loses focus and provides the current value of the control.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/checkbox/checkbox_blur_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"checkbox\").events.on(\"blur\", (value) => {\n    console.log(\"blur\", value);\n});\n```\n\n----------------------------------------\n\nTITLE: Destroying ComboBox Instance in JavaScript\nDESCRIPTION: This code snippet demonstrates how to use the destructor() method to remove a ComboBox instance and release occupied resources. It's a simple one-line call to the method on a ComboBox object.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/combobox/api/combobox_destructor_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ncombo.destructor();\n```\n\n----------------------------------------\n\nTITLE: Handling Keydown Events in DHTMLX Timepicker\nDESCRIPTION: Example of attaching a keydown event listener to a Timepicker control in a DHTMLX Form. The event handler receives a native KeyboardEvent object and logs it to the console when any key is pressed while the control is focused.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/timepicker/timepicker_keydown_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"timepicker\").events.on(\"keydown\", function(event) {\n    console.log(event);\n});\n```\n\n----------------------------------------\n\nTITLE: Disabling and Enabling ComboBox in JavaScript\nDESCRIPTION: Demonstrates how to disable and enable a ComboBox using the disable() and enable() methods respectively.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/combobox/work_with_combo.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// disabling a combo box\ncombo.disable();\n// enabling a combo box\ncombo.enable();\n```\n\n----------------------------------------\n\nTITLE: Using dhtmlxColorPicker Widget Methods in DHTMLX Form\nDESCRIPTION: This example demonstrates how to access and use methods of the underlying dhtmlxColorPicker widget from a ColorPicker control in a DHTMLX Form. It retrieves the widget and then calls its setFocus() method to set focus on a specific color.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/colorpicker.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst colorpicker = form.getItem(\"colorpicker\").getWidget();  // -> ColorPicker\ncolorpicker.setFocus(\"#BDF0E9\"); // sets focus on the \"#BDF0E9\" color\n```\n\n----------------------------------------\n\nTITLE: Manipulating Header Filters in DHTMLX Grid\nDESCRIPTION: Use the getHeaderFilter() method to get an object with methods for manipulating the header filter of a column.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/usage.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// set a value by which a column will be filtered\ngrid.getHeaderFilter(\"country\").setValue(\"Brazil\");\n\n// set focus on the filter\ngrid.getHeaderFilter(\"country\").focus();\n\n// remove focus from the filter\ngrid.getHeaderFilter(\"country\").blur();\n\n// get an object of the filter\nconst filter = grid.getHeaderFilter(\"country\").getFilter();\nconsole.log(filter);\n// -> returns Combobox\n//  {config: {…}, _uid: 'u1670500020936', events: o, data: d, popup: f, …}\n\n// clear the value set in the filter\ngrid.getHeaderFilter(\"country\").clear();\n```\n\n----------------------------------------\n\nTITLE: Handling Checkbox Group Change Event in DHTMLX Form\nDESCRIPTION: Example demonstrating how to attach an event listener to the change event of a Checkbox Group control. The event fires whenever the value of any checkbox in the group changes and provides the current state of all checkboxes in the group.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/checkbox_group/checkboxgroup_change_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"CheckboxGroup\").events.on(\"change\", function(value) {\n    console.log(\"change\", value);\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Validation Function in DHTMLX Form Input (JSX)\nDESCRIPTION: Demonstrates how to create and apply a custom validation function for an input field in a DHTMLX form.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/work_with_form.md#2025-04-22_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\n{\n    type: \"input\",\n    inputType: \"text\",\n    label: \"Name\",\n    placeholder: \"John Doe\",\n    validation: function(value) {\n        return value && value.length > 4;\n    }    \n}\n```\n\n----------------------------------------\n\nTITLE: Getting DatePicker Value in DHTMLX Form\nDESCRIPTION: These snippets show how to retrieve the value of a DatePicker control in both string and Date object formats using the getValue() method.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/calendar.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst value = form.getItem(\"datepicker\").getValue();\n// -> \"03/06/19\"\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst value = form.getItem(\"datepicker\").getValue(true);\n// -> Mon Jun 03 2019 00:00:00 GMT+0300\n```\n\n----------------------------------------\n\nTITLE: Enabling Cell Editing in DHTMLX Grid (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to use the editCell() method to enable editing of a specific cell in a DHTMLX Grid. It targets the first row and the 'project' column for editing.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_editcell_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ngrid.editCell(grid.data.getId(0), \"project\");\n```\n\n----------------------------------------\n\nTITLE: Selecting a Grid Cell with DHTMLX Grid Selection API in JavaScript\nDESCRIPTION: Selects a specific cell in a DHTMLX grid by calling 'setCell' on the grid's selection object, passing in the row's id. Useful for giving visual focus or context before performing further actions (such as showing a context menu). Depends on having a DHTMLX grid instance with selection API enabled.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tutorial/binding_components/step4.md#2025-04-22_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\ngrid.selection.setCell(row.id);\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Grid Footer Tooltip in JavaScript\nDESCRIPTION: Demonstrates how to enable footer tooltips while disabling general tooltips in a DHTMLX Grid. The footerTooltip property can override the general tooltip configuration.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_footertooltip_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst grid = new dhx.Grid(\"grid_container\", {\n    columns: [\n        // columns config\n    ],\n    data: dataset,\n    tooltip: false, // Disable all tooltips\n    footerTooltip: true, // Enable all footer tooltips\n});\n```\n\n----------------------------------------\n\nTITLE: Saving and Restoring Sidebar State\nDESCRIPTION: Example showing how to save the current state of a sidebar using serialize() method and restore it to another sidebar instance using parse(). This allows transferring configuration between components.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/sidebar/data_loading.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst state = sidebar1.data.serialize();\n\n// creating a new sidebar\nconst sidebar2 = new dhx.Sidebar(\"sidebar_container2\");\n// parsing the state of sidebar1 into sidebar2\nsidebar2.data.parse(state);\n```\n\n----------------------------------------\n\nTITLE: Setting Multiple Values in Combo Box\nDESCRIPTION: Shows how to set multiple values in a Combo Box control when multiselection is enabled. The method requires an array of string/number IDs.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/combo/combo_setvalue_method.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst form = new dhx.Form(\"form_container\", {\n    rows: [\n        {\n            name: \"combo\",\n            type: \"combo\",\n            multiselection: true,\n            data: [\n                { value: \"value: 1\", id: \"id:1\" },\n                { value: \"value: 2\", id: \"id:2\" },\n                { value: \"value: 3\", id: 3 },\n                { value: \"value: 4\", id: 4 },\n                { value: \"value: 5\", id: 5 },\n            ]\n        },\n    ]\n});\n\n// selects several options\nform.getItem(\"combo\").setValue([\"id:1\", 4]);\n```\n\n----------------------------------------\n\nTITLE: Showing and Hiding a Button\nDESCRIPTION: Demonstrates how to dynamically show or hide buttons in a toolbar using the show() and hide() methods. Both methods require the button's ID as a parameter.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/toolbar/button.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ntoolbar.show(id);\ntoolbar.hide(id);\n```\n\n----------------------------------------\n\nTITLE: Configuring Date Range Selection with Date Objects\nDESCRIPTION: Creates a Calendar in range mode with a date range selected using Date objects for start and end dates.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar/configuring.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n// selects dates as an array of Date values(for the range mode)\nconst calendar = new dhx.Calendar(\"calendar_container\", {\n    value: ([new Date(2019,05,03), new Date(2019,05,19)]),\n    range: true  \n});\n```\n\n----------------------------------------\n\nTITLE: Using getValue() Method for Checkbox Group in DHTMLX Form\nDESCRIPTION: This code demonstrates how to use the getValue() method of a Checkbox Group control. It shows retrieving a value for a specific checkbox, getting the state of a checkbox without a defined value, and retrieving all checkbox values as an object.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/checkbox_group/checkboxgroup_getvalue_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// returns string value if the value is specified in the checkbox configuration\nform.getItem(\"CheckboxGroup\").getValue(\"checkbox_id_1\"); //-> \"some_value\"\n \n// returns a boolean state if the value is not specified for the checkbox\nform.getItem(\"CheckboxGroup\").getValue(\"checkbox_id_2\"); //-> true/false\n\n// returns an object with the current values/states of checkboxes\nform.getItem(\"CheckboxGroup\").getValue(); \n// -> { \"checkbox_id_1\": \"some_value_1\",  \"checkbox_id_2\": true }\n```\n\n----------------------------------------\n\nTITLE: Simple Data Grouping Example\nDESCRIPTION: Example showing how to group grid data using a callback function for salary ranges and a string field for city grouping\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/data_collection/api/datacollection_group_method.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst grid = new dhx.Grid(\"grid_container\", {\n    columns: [\n        { id: \"salary\", header: [{ text: \"Salary\" }] },\n        { id: \"experience\", header: [{ text: \"Experience (years)\" }] },\n        { id: \"city\", header: [{ text: \"City\" }] }\n    ],\n    group: true,\n    groupable: true,\n    data: dataset\n});\n\ngrid.data.group([\n    function(row) {\n        if (row.salary < 30000) return \"Low income\";\n        if (row.salary >= 30000 && row.salary < 70000) return \"Medium income\";\n        return \"High income\";\n    },\n    \"city\"\n]);\n```\n\n----------------------------------------\n\nTITLE: Sample Output of getProperties() for Checkbox in JavaScript\nDESCRIPTION: This code block shows the structure of the object returned by the getProperties() method when called on a Checkbox control. It includes various configuration attributes and their default or set values.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/checkbox/checkbox_getproperties_method.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    css:\"\",\n    errorMessage: \"\",\n    height: \"content\",\n    helpMessage: \"\",\n    hiddenLabel: false,\n    label: \"\",\n    labelPosition: \"top\",\n    labelWidth: \"\",\n    padding: 0,\n    preMessage: \"\",\n    required: false,\n    successMessage: \"\",\n    text: \"I agree\",\n    width: \"content\"\n}\n```\n\n----------------------------------------\n\nTITLE: Clearing Calendar Value in JavaScript\nDESCRIPTION: Demonstrates how to clear the currently selected date value in a DHTMLX Calendar component. This method removes any selected date from the calendar and resets its state.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar2/api/calendar_clear_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncalendar.clear()\n```\n\n----------------------------------------\n\nTITLE: Toggling Layout cells in JavaScript\nDESCRIPTION: Shows how to toggle (collapse/expand) a Layout cell using the toggle method.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/layout/work_with_layout.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nlayout.getCell(\"toolbar\").toggle();\n```\n\n----------------------------------------\n\nTITLE: Getting the Size of a DHTMLX Window using JavaScript\nDESCRIPTION: This snippet demonstrates retrieving the current size of a DHTMLX Window using the `getSize()` method. It returns an object containing the current `width` and `height` of the window in pixels. Requires an existing `dhxWindow` instance.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/window/usage.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst size = dhxWindow.getSize(); // -> {width: 960, height: 469}\n```\n\n----------------------------------------\n\nTITLE: Disabling a Form with the disable() Method in DHTMLX JavaScript UI\nDESCRIPTION: This code snippet demonstrates how to disable a form on a page using the disable() method of the DHTMLX Form component. When called, this method disables all controls in the form, preventing user interaction.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/form_disable_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.disable();\n```\n\n----------------------------------------\n\nTITLE: Initializing and Displaying View in Optimus App JavaScript\nDESCRIPTION: Updates the `MyApp` class (extending `dhx-optimus App`) to include an `init()` method. Within this method, it imports the previously defined `TopLayout` view and uses `this.show(null, TopLayout)` to render this view as the initial content of the application.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/optimus_guides/how_to_start_optimus.md#2025-04-22_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nimport \"./assets/css/index.css\";\n\nimport { App } from \"dhx-optimus\";\nimport { TopLayout } from \"./views/TopLayout\"; \n\nexport class MyApp extends App {\n    init() { \n        this.show(null, TopLayout); \n    } \n}\n```\n\n----------------------------------------\n\nTITLE: Handling focusChange Event in DHTMLX List (JavaScript)\nDESCRIPTION: This example demonstrates how to attach an event handler to the focusChange event in a DHTMLX List component. The event fires when focus moves to a new item and provides the position and ID of the newly focused item.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/list/api/list_focuschange_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlist.events.on(\"focusChange\", function(focusIndex, id){\n    // your code here\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX Combo Box\nDESCRIPTION: Demonstrates the JavaScript code needed to initialize a DHTMLX Combo Box with basic configuration options.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/combobox/how_to_start.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst combo = new dhx.Combobox(\"combo_container\", {\n    label: \"Countries:\", \n    placeholder: \"Сlick to select\",\n    // more config options\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Confirm Box in DHTMLX JavaScript\nDESCRIPTION: Shows the usage and configuration options for creating a confirm box using the dhx.confirm() function. Includes parameters for text, header, CSS, buttons, button alignment, and HTML content enablement.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/message/api/api_message_properties.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ndhx.confirm({\n    text: string,\n    header?: string,\n    css?: string,\n    buttons?: string[],\n    buttonsAlignment?: \"left\" | \"center\" | \"right\", // \"right\" by default\n    blockerCss?: string,\n    htmlEnable?: boolean, // true by default \n});\n```\n\n----------------------------------------\n\nTITLE: Handling beforeChange Event in DHTMLX Slider (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to attach an event listener to the beforeChange event of a DHTMLX Slider. The event fires before the slider value changes, allowing for validation or additional actions before the change occurs.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/slider/api/slider_beforechange_event.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nslider.events.on(\"beforeChange\", function(value, oldValue, isRange){\n    console.log(\"The value of a slider will be changed to \"+slider.getValue());\n    return true;\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Grid Column with Summary in JavaScript\nDESCRIPTION: This example demonstrates how to configure a Grid column with a summary. It sets up a 'quantity' column with a number type, header, footer, and summary. The summary is set to 'sum', and a number mask is applied to format the result with a dollar sign prefix.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/gridcolumn_properties/gridcolumn_summary_property.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst grid = new dhx.Grid(\"grid_container\", {\n    columns: [\n        {\n            id: \"quantity\",\n            type: \"number\",\n            header: [{ text: \"Quantity\" }],\n            footer: [{ text: ({ sum }) => sum }],\n            summary: \"sum\",\n            numberMask: { prefix: \"$\" },\n        },\n        // more columns configuration objects\n    ],\n    // more options\n});\n```\n\n----------------------------------------\n\nTITLE: Attaching DataCollection Event Handler (Common Syntax)\nDESCRIPTION: Demonstrates how to attach an event handler to a DataCollection event using the common syntax via the data object of the component.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/data_collection/index.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nchart.data.events.on(\"afterAdd\", function(newItem){\n    console.log(\"A new item is added\");\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a DHTMLX Window with Custom CSS Classes in JavaScript\nDESCRIPTION: Shows how to instantiate a DHTMLX Window and apply one or more CSS classes to customize its appearance using the 'css' config property. Requires class definitions to be available in the CSS and the DHTMLX library. The classes control the visual styling of the window; main parameters include window title and the css string.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/window/customization.md#2025-04-22_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nconst dhxWindow = new dhx.Window({\\n    title: \\\"Window\\\", \\n    css:\\\"my-first-class my-second-class\\\"\\n});\\ndhxWindow.show();\n```\n\n----------------------------------------\n\nTITLE: Changing Calendar Mode in DHTMLX\nDESCRIPTION: This code snippet illustrates how to change the calendar mode using the showDate() method in DHTMLX. It allows switching between calendar, month, and year views, and displaying specific dates.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar2/functionality_and_features/calendar_modes.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<iframe src=\"https://snippet.dhtmlx.com/nyfzc8cl?mode=result\" frameborder=\"0\" class=\"snippet_iframe\" width=\"100%\" height=\"450\"></iframe>\n```\n\n----------------------------------------\n\nTITLE: Handling Date Selection Events in JavaScript\nDESCRIPTION: Sets up an event listener for the calendar's 'change' event to update the input field with the selected date and hide the popup after selection.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar2/datepicker.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ncalendar.events.on(\"change\", function() {\n    dateInput.value = calendar.getValue();\n    popup.hide();\n});\n```\n\n----------------------------------------\n\nTITLE: Loading CSV Data into Grid with Custom Driver\nDESCRIPTION: Example demonstrating how to load CSV data into DHTMLX Grid using a custom data driver with header mapping.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/data_loading.md#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst grid = new dhx.Grid(\"grid\", {\n    columns: [\n        { width: 150, id: \"country\", header: [{ text: \"Country\" }] },\n        { width: 150, id: \"population\", header: [{ text: \"Population\" }] },\n        { width: 150, id: \"yearlyChange\", header: [{ text: \"Yearly Change\" }] },\n        { width: 150, id: \"netChange\", header: [{ text: \"Net Change\" }] },\n        { width: 150, id: \"density\", header: [{ text: \"Density (P/Km²)\" }] },\n        { width: 150, id: \"area\", header: [{ text: \"Land Area (Km²)\" }] },\n        { width: 150, id: \"migrants\", header: [{ text: \"Migrants (net)\" }] },\n        { width: 150, id: \"fert\", header: [{ text: \"Fert. Rate\" }] },\n        { width: 150, id: \"age\", header: [{ text: \"Med. Age\" }] },\n        { width: 150, id: \"urban\", header: [{ text: \"Urban Pop\" }] }\n    ]\n});\n\nconst csvData = \"country,population,yearlyChange,netChange,density,area,migrants,fert,age,urban,id\\nChina,1415045928,0.0039,5528531,151,9388211,-339690,1.6,37,0.5800,1\\nIndia,1354051854,0.0111,14871727,455,2973190,-515643,2.4,27,0.3200,2,true\\nU.S.,326766748,0.0071,2307285,36,9147420,900000,1.9,38,0.8300,3\";\nconst csvDataDriver = new dhx.dataDrivers.csv({ nameByHeader: true });\ngrid.data.parse(csvData, csvDataDriver);\n```\n\n----------------------------------------\n\nTITLE: Handling inputBlur Event in DHTMLX Ribbon (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates how to subscribe to the `inputBlur` event of a DHTMLX Ribbon instance (`ribbon`). It uses the `events.on()` method to attach a callback function that executes when any control within the ribbon loses focus. The callback function receives the `id` (string or number) of the blurred control as an argument and logs it to the console. Requires the DHTMLX Ribbon library to be initialized.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/ribbon/api/ribbon_inputblur_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nribbon.events.on(\"inputBlur\", function(id){\n    console.log(id);\n});\n```\n\n----------------------------------------\n\nTITLE: Selecting Tree Item in JavaScript\nDESCRIPTION: Example of how to select a specific Tree item using the selection object's add() method and get the selected item's ID.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree/usage_selection.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst id = tree.selection.getId(); // -> \"2\"\ntree.selection.add(\"2\");\n```\n\n----------------------------------------\n\nTITLE: Sending Avatar POST Request in JavaScript DHTMLX Form\nDESCRIPTION: This snippet demonstrates how to use the send() method of the Avatar control in a DHTMLX Form to initiate a file upload. The method sends a POST request to the URL specified by the target property of the Avatar control.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/avatar/avatar_send_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nform.getItem(\"avatar\").send();\n```\n\n----------------------------------------\n\nTITLE: Handling Layout Cell Addition Event in JavaScript\nDESCRIPTION: Example of attaching an event handler to the afterAdd event of a DHTMLX Layout. The event fires after a new cell is added to the layout and provides the cell's ID as a parameter.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/layout/api/layout_afteradd_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlayout.events.on(\"afterAdd\", function(id){\n    // your logic here\n});\n```\n\n----------------------------------------\n\nTITLE: Handling dateMouseOver Event in DHTMLX Calendar\nDESCRIPTION: An example of attaching an event handler to the dateMouseOver event to display a tooltip when the mouse hovers over a date.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar2/api/calendar_datemouseover_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncalendar.events.on(\"DateMouseOver\", function(date, e) {\n    dhx.tooltip(date, {node: e.target, position: \"bottom\"});\n});\n```\n\n----------------------------------------\n\nTITLE: Filtering DataView Data\nDESCRIPTION: Filters DataView data based on specified criteria using Data Collection API\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/dataview/manipulating_data.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ndataview.data.filter({\n    by:\"value\",\n    match:2,\n    compare:(value,match,item)=>{ return parseFloat(value) % 2 == 0}\n});\n```\n\n----------------------------------------\n\nTITLE: Styling Individual DataView Items\nDESCRIPTION: Demonstrates how to apply custom styling to alternate items in DataView using JavaScript.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/dataview/customization.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<style>\n    .bg-gray {\n        background: #efefef;\n    }\n</style>\n\n<script>\n    const dataview = new dhx.DataView(\"dataview_container\", {itemsInRow: 5});\n\n    dataview.data.parse(dataset);\n    dataview.data.map(function (item, i) {\n        if (i % 2) {\n            dataview.data.update(item.id, {css: \"bg-gray\"})\n        }\n    });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Enable/Disable Ribbon Controls\nDESCRIPTION: Shows how to enable and disable specific Ribbon controls using their IDs.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/ribbon/operating_ribbon.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nribbon.disable(\"add_btn\");\nribbon.enable([\"save_btn\",\"del_btn\"]);\n```\n\n----------------------------------------\n\nTITLE: Handling dragOut Event in DHTMLX DataView\nDESCRIPTION: This snippet demonstrates how to attach an event listener for the dragOut event in a DHTMLX DataView. The event fires when an item is dragged out of a potential target, providing data about the drag operation and the original mouse event.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/dataview/api/dataview_dragout_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndataview.events.on(\"DragOut\", function(data, events) {\n    // your logic here\n});\n```\n\n----------------------------------------\n\nTITLE: Disabling and Enabling Menu Items in JavaScript\nDESCRIPTION: Shows how to disable and enable menu options using the disable() and enable() methods. These methods can take an item ID or an array of IDs as parameters.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/menu/work_with_menu.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmenu.disable(\"1\");\nmenu.disable([\"2\",\"3\"]);\n\nmenu.enable(\"1\");\nmenu.enable([\"1\",\"3\"]);\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX List with Data Array in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a DHTMLX List component and populate it with an array of data objects. It shows the structure of the data array and how to pass it to the List constructor along with other configuration options.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/list/api/list_data_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = [\n    {\n        \"title\": \"The Hobbit and The Lord of the Rings\",\n        \"authors\": \"J.R.R. Tolkien\",\n        \"average_rating\": 4.59,\n        \"publication_date\": \"9/25/2012\",\n        \"in_store\": true,\n        \"isbn13\": 9780345538376,\n        \"language_code\": \"eng\",\n        \"num_pages\": 1728,\n        \"ratings_count\": 101233,\n        \"text_reviews_count\": 1550,\n        \"publisher\": \"Ballantine Books\"\n    },\n    // more options\n]\n\nconst list = new dhx.List(\"list_container\", {\n      css: \"dhx_widget--bordered\",\n      template: template,\n      itemHeight: 72,\n      data: data\n});\n```\n\n----------------------------------------\n\nTITLE: Setting HTML Content in DHTMLX Window with JavaScript\nDESCRIPTION: This example shows how to set arbitrary HTML content within a DHTMLX Window by specifying the 'html' property during construction. The value should be a valid HTML string, and it will be rendered as the main content area. Requires DHTMLX Suite and does not sanitize input, so ensure content is trusted to avoid XSS risks.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/window/configuration.md#2025-04-22_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nconst dhxWindow = new dhx.Window({\n    html:\"<h1>Header</h1><p>paragraph</p>\"\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Data Grouping in Grid - DHTMLX Grid (v9.0+) - JavaScript\nDESCRIPTION: Shows how to activate grouping in DHTMLX Grid v9.0+ using the group property in the grid configuration. Automatically sets hierarchical (tree) mode and integrates with the DataCollection API for flexible data grouping. Requires dhx.Grid PRO; configuration can be enriched for custom grouping settings.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/migration.md#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nconst grid = new dhx.Grid(\"grid_container\", {\n    group: true,\n    columns: [\n        // columns config\n    ],\n    data: dataset\n});\n```\n\n----------------------------------------\n\nTITLE: Copying Items in TreeCollection using copy() Method in JavaScript\nDESCRIPTION: This code snippet demonstrates how to use the copy() method of TreeCollection to add a copy of an item and place it in a specified position. It shows two examples: copying within the same toolbar and copying between different toolbars.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree_collection/api/treecollection_copy_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ntoolbar.data.copy(\"print_btn\",2)\n// another toolbar\ntoolbar2.data.copy(\"save_btn\",1,toolbar1.data);\n```\n\n----------------------------------------\n\nTITLE: Loading Data on Sidebar Initialization\nDESCRIPTION: Example showing how to initialize a DHTMLX Sidebar with predefined data using the data configuration property. This approach loads data directly during component creation.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/sidebar/data_loading.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst sidebar = new dhx.Sidebar(\"sidebar_container\", {\n    css: \"dhx_widget--border_right\",\n    data: data\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving TimePicker Values in Different Formats in JavaScript\nDESCRIPTION: Examples demonstrating how to use the getValue() method of a TimePicker control to retrieve time values in different formats. The method can return values as strings or objects in both 24-hour and 12-hour time formats.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/timepicker/timepicker_getvalue_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// return value as a string in the 24-hour format\nconst val1 = timepicker.getItem(\"timepicker\").getValue(); \n// -> \"00:39\" \n\n// return value as an object in the 24-hour format\nconst val2 = timepicker.getItem(\"timepicker\").getValue(true);\n// -> {hour: 0, minute: 39}\n\n// return value as a string in the 12-hour format\nconst val3 = timepicker.getItem(\"timepicker\").getValue(); \n// -> \"06:00AM\"\n\n// return value as an object in the 12-hour format\nconst val4 = timepicker.getItem(\"timepicker\").getValue(true); \n// -> {hour: 6, minute: 0, AM: true}\n```\n\n----------------------------------------\n\nTITLE: Restoring TreeCollection Order in JavaScript\nDESCRIPTION: Demonstrates how to use the restoreOrder() method to restore a toolbar's data collection to its original state after sorting or filtering operations.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree_collection/api/treecollection_restoreorder_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntoolbar.data.restoreOrder();\n```\n\n----------------------------------------\n\nTITLE: Enabling Autoheight for Layout Cell in JavaScript\nDESCRIPTION: This example shows how to set up a Layout cell with autoheight functionality. The height of the cell will automatically adjust to its content by setting the height option to 'content'.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/layout/api/cell/layout_cell_height_config.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst layout = new dhx.Layout(\"layout_container\", {\n    cols: [\n        { \n            header: \"Cell header\", \n            height: \"content\" \n        }\n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: Selecting Cell Range\nDESCRIPTION: Example of selecting a range of cells using shift and ctrl parameters\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/usage_selection.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ngrid.selection.setCell(grid.data.getId(1),\"yearlyChange\");\ngrid.selection.setCell(grid.data.getId(3),\"density\", false, true);\n```\n\n----------------------------------------\n\nTITLE: Configuring viewportOverflow Option in DHTMLX Window - JavaScript\nDESCRIPTION: This snippet demonstrates how to instantiate a DHTMLX Window component with the viewportOverflow property set to true, allowing the window to move beyond the browser's borders. It requires the DHTMLX Suite JavaScript library loaded in your environment. The dhx.Window constructor accepts a configuration object, where viewportOverflow (boolean) controls window placement bounds; the default is false. The show() method displays the initialized window. Inputs: no mandatory parameters except config; Outputs: a window instance shown in the DOM. Limitation: effectiveness depends on using this property in combination with the window_movable configuration.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/window/api/window_viewportoverflow_config.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst dhxWindow = new dhx.Window({\n    viewportOverflow:true\n});\n\ndhxWindow.show();\n```\n\n----------------------------------------\n\nTITLE: Using getParent() Method in DHTMLX Tabbar\nDESCRIPTION: Example demonstrating how to initialize a Tabbar with multiple views and retrieve the parent of a specific cell. The method returns the configuration object of the parent cell.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tabbar/api/cell/tabbar_cell_getparent_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst tabbar = new dhx.Tabbar(\"tabbar_container\", {\n    mode: \"top\",\n    css: \"dhx_widget--bordered\",\n    views: [\n        { id: \"vilnius\", tab: \"Vilnius\" },\n        { tab: \"dataview\", id: \"dataview\"}\n    ]\n});\n\ntabbar.getCell(\"vilnius\").getParent();\n```\n\n----------------------------------------\n\nTITLE: Exporting Grid Data to Excel using xlsx()\nDESCRIPTION: Demonstrates basic and configured usage of the xlsx() export method. The method supports optional configuration for customizing the export URL and output filename.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/export/grid_xlsx_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// default export\ngrid.export.xlsx();\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// export with config settings\ngrid.export.xlsx({\n    name:\"grid_data\",\n    url: \"//export.dhtmlx.com/excel\"\n});\n```\n\n----------------------------------------\n\nTITLE: Collapsing a Row in DHTMLX Grid (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to create a DHTMLX Grid instance in TreeGrid mode and use the collapse() method to collapse a specific row. The method takes the id of the row to be collapsed as an argument.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_collapse_method.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst grid = new dhx.Grid(\"grid_container\", {\n    type: \"tree\",\n    columns: [\n       // columns config\n    ],\n    data: dataset,\n});\n\ngrid.collapse(\"native\");\n```\n\n----------------------------------------\n\nTITLE: Linking Two Calendar Instances in DHTMLX JavaScript\nDESCRIPTION: Demonstrates how to link two calendar instances together using the link() method, which enables date range selection between two calendars.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar/api/calendar_link_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncalendar.link(calendar2);\n```\n\n----------------------------------------\n\nTITLE: Initializing ToggleGroup in DHTMLX Form\nDESCRIPTION: Creates a form with a ToggleGroup control containing three alignment options with icons. The ToggleGroup is configured to be full width with a 4-pixel gap between buttons.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/togglegroup.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst form = new dhx.Form(\"form_container\", { \n    rows: [\n           {\n            type: \"toggleGroup\",\n            full: true,\n            gap: 4,\n            options: [\n                {\n                    id: \"left\",\n                    icon: \"dxi dxi-format-align-left\",\n                },\n                {\n                    id: \"center\",\n                    icon: \"dxi dxi-format-align-center\",\n                },\n                {\n                    id: \"right\",\n                    icon: \"dxi dxi-format-align-right\",\n                },\n            ]\n        }\n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX Grid with Drag and Drop\nDESCRIPTION: Example of initializing a DHTMLX Grid with drag and drop enabled for both columns and rows. The dragItem property can be set to 'column', 'row', or 'both' to control which elements can be dragged.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_dragitem_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst grid = new dhx.Grid(\"grid_container\", {\n    columns: [\n        // columns config\n    ],\n    dragItem: \"both\",\n    data: dataset\n});\n```\n\n----------------------------------------\n\nTITLE: Attaching DataCollection Event Handler (Short Syntax)\nDESCRIPTION: Shows an alternative way to attach an event handler to a DataCollection event using the short syntax directly through the component.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/data_collection/index.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nchart.events.on(\"afterAdd\", function(newItem){\n    console.log(\"A new item is added\");\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Grid with Drag-and-Drop Mode\nDESCRIPTION: Example of initializing a DHTMLX Grid with drag-and-drop functionality enabled in 'source' mode. The dragMode property can be set to 'target', 'source', or 'both' to control how drag-and-drop operations work.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_dragmode_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst grid = new dhx.Grid(\"grid_container\", {\n    columns: [\n        // columns config\n    ],\n    dragMode:\"source\"\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Grid Tooltip Template\nDESCRIPTION: Example showing how to implement a custom tooltip template for a grid column with HTML content and image display. The template includes avatar images and timestamp information.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/gridcolumn_properties/gridcolumn_tooltiptemplate_property.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst grid = new dhx.Grid(\"grid_container\", {\n    columns: [\n        {\n            id: \"country\", header: [{ text: \"Country\" }], \n            htmlEnable: true, \n            tooltipTemplate: (cellValue, row, col) => `<div class=\"custom-tooltip\">\n                <img src=\"https://snippet.dhtmlx.com/codebase/data/common/img/02/${row.avatar}.jpg\" />\n                <span>Last edit time:<br>${row.editing.toUTCString()}</span>\n            </div>`\n        },\n        // more columns configuration objects\n    ],\n    // more options\n});\n```\n\n----------------------------------------\n\nTITLE: Validating DHTMLX Form (JSX)\nDESCRIPTION: Demonstrates how to trigger form validation in DHTMLX using the validate() method, which returns a boolean indicating if all fields are valid.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/work_with_form.md#2025-04-22_snippet_19\n\nLANGUAGE: jsx\nCODE:\n```\nconst result = form.validate();\n```\n\n----------------------------------------\n\nTITLE: Handling beforeShow Event in DHTMLX Form Combo Box\nDESCRIPTION: Example demonstrating how to attach an event handler to the beforeShow event of a Combo Box control. The handler receives the currently selected option IDs and can prevent the control from being shown by returning false.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/combo/combo_beforeshow_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"combo\").events.on(\"beforeShow\", function(ids) {\n    console.log(\"beforeShow\", ids);\n    return true;\n});\n```\n\n----------------------------------------\n\nTITLE: Providing a Container for DHTMLX Popup\nDESCRIPTION: This snippet adds a <div> element with the ID 'popup_container' to the HTML, which serves as the anchor or target element where the popup will be displayed. This container's ID is referenced in JavaScript when calling the 'popup.show()' method. This is a foundational step to control where the popup appears within the page layout.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/popup/initialization.md#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n<div id=\\\"popup_container\\\"></div>\n```\n\n----------------------------------------\n\nTITLE: Highlighting Dates in DHTMLX Calendar using JavaScript\nDESCRIPTION: This code snippet shows how to use the 'mark' property of a DHTMLX Calendar to highlight specific dates. The function takes a date as a parameter and returns a CSS class name for marked dates or an empty string for unmarked dates.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar2/functionality_and_features/highlighted_dates.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncalendar.config.mark = function(date) {\n    if (date.getDay() === 6) {\n        return \"highlight-red\";\n    }\n    if (date.getDay() === 0) {\n        return \"highlight-blue\";\n    }\n    return \"\";\n}\n```\n\n----------------------------------------\n\nTITLE: Attaching Calendar to Input Field\nDESCRIPTION: Demonstrates how to attach a calendar to an HTML input element, so clicking the input displays the calendar in a specific mode.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar/operating_calendar.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<input type=\"text\" onclick=\"showCalendar()\" />\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst calendar = new dhx.Calendar(\"calendar_container\");\nfunction showCalendar(){\n    calendar.showDate(new Date(11,11,11),\"month\");\n};\n```\n\n----------------------------------------\n\nTITLE: Defining SelectButton Configuration in DHTMLX Toolbar - JavaScript\nDESCRIPTION: Demonstrates how to define a SelectButton control within a DHTMLX Toolbar using a JavaScript configuration array. The snippet includes optional and required properties such as 'type', 'id', 'value', 'items', 'count', 'countColor', 'icon', 'tooltip', 'css', 'disabled', and 'hidden', describing their usage and default behaviors. Dependencies include the DHTMLX Toolbar component and correct type/value references; expected input is a configuration object for the Toolbar, and the output is a rendered SelectButton UI element.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/toolbar/api/api_selectbutton_properties.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst data = [\n    {\n        type: \"selectButton\",\n        id?: string | number,\n        parent?: string,\n        value?: string,\n        items?: IMenuElement[], // ISpacer | ISeparator | INavItem | IMenuItem | ICustomHTML\n\n        count?: number,\n        countColor?: \"danger\" | \"secondary\" | \"primary\" | \"success\",\n        icon?: string,\n        tooltip?: string,\n\n        css?: string | string[],\n        disabled?: boolean,\n        hidden?: boolean,\n    },\n    // more Toolbar controls\n]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Focused Item from DataView in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the getFocusItem method of a DataView object to retrieve the currently focused item. The method returns an object representing the item in focus.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/dataview/api/dataview_getfocusitem_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst focus = dataview.getFocusItem();\n```\n\n----------------------------------------\n\nTITLE: Selecting All Items in JavaScript DataView\nDESCRIPTION: Selects all unselected items in the DataView when calling the add() method without parameters.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/dataview/usage_selection.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ndataview.selection.add();\n```\n\n----------------------------------------\n\nTITLE: Initializing Slider Control in DHTMLX Form\nDESCRIPTION: Creates a new Form instance with a Slider control. The slider includes basic configuration like label, name, and min/max values.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/slider.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst form = new dhx.Form(\"form_container\", {\n    rows: [\n        {\n            type: \"slider\",\n            name:\"slider\",\n            label: \"slider\",\n            labelWidth: \"50px\",\n            min: 0,\n            max: 100\n        }\n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX Combo Box with Data Configuration in JavaScript\nDESCRIPTION: This code snippet demonstrates how to initialize a DHTMLX Combo Box with a custom data configuration. It shows how to specify an array of data objects with properties like 'value' and 'src' to create a list of country options with associated flag images.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/combobox/api/combobox_data_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst combo = new dhx.Combobox(\"combo_container\",{\n    data: [\n        {\n            \"value\": \"Austria\",\n            \"src\": \"../common/flags/at.png\"\n        },\n        {\n            \"value\": \"Belgium\",\n            \"src\": \"../common/flags/be.png\"\n        },\n        {\n            \"value\": \"Bulgaria\",\n            \"src\": \"../common/flags/bg.png\"\n        },\n        {\n            \"value\": \"Cyprus\",\n            \"src\": \"../common/flags/cy.png\"\n        }\n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX Pagination Component in JavaScript (JSX)\nDESCRIPTION: This snippet illustrates how to initialize the DHTMLX Pagination component by invoking the dhx.Pagination constructor. It binds the pagination to a specific HTML container and associates it with the data collection of another widget (such as a List). The constructor accepts configuration properties, including references to data and custom CSS classes. The related widget and its data must be initialized and available when this code executes.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/pagination/init.md#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n// creating DHTMLX Pagination\\nconst pagination = new dhx.Pagination(\\\"pagination_container\\\", {\\n    css: \\\"dhx_widget--bordered\\\",\\n    data: widget.data\\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Text Control in DHTMLX Suite\nDESCRIPTION: This snippet illustrates the configuration options for the Text control in DHTMLX Suite. It includes attributes such as css, errorMessage, height, helpMessage, and more. Each attribute is specified with its corresponding data type.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/form_setproperties_method.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    css: string,\n    errorMessage: string,\n    height: string | number | \"content\",\n    helpMessage: string,\n    hiddenLabel: boolean,\n    inputType: string,\n    label: string,\n    labelPosition: string,\n    labelWidth: string | number,\n    padding: string | number,\n    preMessage: string,\n    successMessage: string,\n    width: string | number | \"content\"\n}\n```\n\n----------------------------------------\n\nTITLE: Expanding and Collapsing Tree Items\nDESCRIPTION: Examples of expanding, collapsing, and toggling tree items using various methods.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree/work_with_tree.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ntree.expand(\"history\");\ntree.collapse(\"history\");\ntree.toggle(\"history\");\ntree.expandAll();\ntree.collapseAll();\n```\n\n----------------------------------------\n\nTITLE: Removing All Items from DataCollection in JavaScript\nDESCRIPTION: Demonstrates how to use the removeAll() method to delete all items from a DHTMLX DataCollection component. This method takes no parameters and returns void.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/data_collection/api/datacollection_removeall_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncomponent.data.removeAll();\n```\n\n----------------------------------------\n\nTITLE: Getting Window Position in DHTMLX JavaScript\nDESCRIPTION: Demonstrates how to retrieve the current position coordinates (left and top) of a DHTMLX window instance. Returns an object containing the window's position on the screen.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/window/api/window_getposition_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst position = dhxWindow.getPosition(); // -> {left: 480, top: 234}\n```\n\n----------------------------------------\n\nTITLE: Attaching HTML Content to DHTMLX Popup (JavaScript)\nDESCRIPTION: Demonstrates creating a new DHTMLX Popup and adding custom HTML content using attachHTML(). Requires the dhx.Popup() class from DHTMLX Suite. The method takes an HTML string as input, enabling rich content inside the Popup. Then the show() method is called to display the Popup anchored to a specified element.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/popup/work_with_popup.md#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nconst popup = new dhx.Popup();\npopup.attachHTML(\"<h1>Hello, I'm popup</h1>\");\npopup.show(\"popup\");\n```\n\n----------------------------------------\n\nTITLE: Removing Items with TreeCollection's removeAll() Method\nDESCRIPTION: Demonstrates how to use the removeAll() method to remove all items from either a specific branch (when ID is provided) or the entire component (when called without parameters).\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree_collection/api/treecollection_removeall_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntoolbar.data.removeAll(id);\n```\n\n----------------------------------------\n\nTITLE: Attaching Timepicker to DHTMLX Popup in JavaScript\nDESCRIPTION: This snippet demonstrates creating a DHTMLX Timepicker instance and attaching it to a previously defined DHTMLX Popup instance named `popup` using its `attach()` method. Finally, it calls the `show()` method on the popup to display it with the attached Timepicker. This requires the DHTMLX Suite library, specifically the `dhx.Timepicker` and Popup components. The `attach()` method returns the object of the attached component.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/popup/api/popup_attach_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst timepicker = new dhx.Timepicker();\npopup.attach(timepicker);\npopup.show();\n```\n\n----------------------------------------\n\nTITLE: Setting up Grid Widget in DHTMLX Optimus\nDESCRIPTION: Creates a Grid widget using DHTMLX Suite, defining columns and data source. Configures column headers and types for displaying person information.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/optimus_guides/how_to_start_optimus.md#2025-04-22_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nimport { View } from \"dhx-optimus\";\n\nexport class GridView extends View {\n    init() {\n        return new dhx.Grid(null, {\n            columns: [\n                { id: \"name\", header: [{ text: \"Name\" }] },\n                { id: \"post\", header: [{ text: \"Post\" }] },\n                { id: \"phone\", header: [{ text: \"Phone\" }] },\n                { id: \"mail\", header: [{ text: \"Mail\" }] },\n                { id: \"birthday\", header: [{ text: \"Birthday\" }], type: \"date\" },\n                { id: \"start\", header: [{ text: \"Start\" }], type: \"date\" },\n            ],\n            autoWidth: true,\n            data: this.params.dataCollection,\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Showing Sidebar Items in JavaScript\nDESCRIPTION: Demonstrates how to use the show() method to display specific sidebar items by their IDs or show all items at once without parameters.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/sidebar/api/sidebar_show_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsidebar.show(\"search\");\n// several at a time\nsidebar.show([\"search\",\"currentButton\",\"edit\"]);\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// shows all Sidebar items\nsidebar.show();\n```\n\n----------------------------------------\n\nTITLE: Adding Custom CSS to Grid Row in JavaScript and HTML\nDESCRIPTION: This example demonstrates how to add a custom CSS class to a specific row in a DHTMLX Grid. It includes the HTML style definition and the JavaScript code to apply the style.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_addrowcss_method.md#2025-04-22_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<style>\n    .myCustomClass{\n        background:greenyellow;\n    }\n</style>\n\n<script>\n    ...\n    grid.addRowCss(\"2\", \"myCustomClass\");\n</script>\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX Tabbar - HTML and JavaScript\nDESCRIPTION: This complete example demonstrates how to set up a DHTMLX Tabbar within an HTML page, including linking the required JavaScript and CSS files, creating an HTML container, and initializing the Tabbar instance in JavaScript. Dependencies include the dhtmlxSuite library's suite.js and suite.css files, which must be correctly referenced. The code creates a Tabbar with four tabs (north, south, east, west); the expected output is a rendered Tabbar component inside the designated container. All configuration occurs inline, and the initialization is triggered by direct JavaScript execution within a script tag.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tabbar/init.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\\n<html>\\n    <head>\\n        <title>How to Start with DHTMLX Tabbar</title>         \\n        <script type=\\\"text/javascript\\\" src=\\\"../../codebase/suite.js\\\"></script>\\n        <link rel=\\\"stylesheet\\\" href=\\\"../../codebase/suite.css\\\">\\n    </head>\\n    <body>\\n        <div id=\\\"tabbar_container\\\"></div>\\n        <script>\\n            // creating DHTMLX Tabbar\\n            const tabbar = new dhx.Tabbar(\\\"tabbar_container\\\",{\\n                views:[ \\n                    { tab: \\\"north\\\" },\\n                    { tab: \\\"south\\\" },\\n                    { tab: \\\"east\\\" },\\n                    { tab: \\\"west\\\" },\\n                ]\\n            });\\n        </script>\\n    </body>\\n</html>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Calendar Values in JavaScript/TypeScript\nDESCRIPTION: Demonstrates how to retrieve selected dates from a calendar using the getValue method. The method can return dates as string values or Date objects based on the provided parameter.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar2/api/calendar_getvalue_method.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nDate|Date[]|string|string[] getValue(boolean asDate);\ngetValue(asDatObj?: boolean): Date | Date[] | string | string[];\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar date = calendar.getValue(); // -> \"03/06/19\"\n\nvar date = calendar.getValue(true); // -> Fri Jan 11 2019 18:09:15 GMT+0300\n\n// for a range calendar as an array of Date values \nvar date = calendar.getValue(true); \n// -> [Mon Jun 03 2019 00:00:00 GMT+0300, Wed Jun 19 2019 00:00:00 GMT+0300]\n\n// for a range calendar as an array of string values \nvar date = calendar.getValue(); // ->  [\"03/06/19\", \"19/06/19\"]\n```\n\n----------------------------------------\n\nTITLE: Implementing Collapse/Expand Functionality for Layout Cells in JavaScript\nDESCRIPTION: This snippet demonstrates how to add collapse/expand functionality to layout cells. It creates a layout with collapsible sidebar and configures the collapse and expand events with toggleable button states.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/slider/constructor.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar layout = new dhx.Layout(\"layout_container\", {\n    cols: [\n        {\n            id: \"sidebar\",\n            width: \"200px\",\n            collapsable: true,\n            header: \"Sidebar\"\n        },\n        {\n            id: \"content\",\n            header: \"Content\"\n        }\n    ]\n});\n\n// Toggle sidebar with a button\nvar button = new dhx.Button(\"toggle_button\", {\n    text: \"Toggle Sidebar\"\n});\n\nbutton.events.on(\"click\", function() {\n    var sidebar = layout.getCell(\"sidebar\");\n    if (sidebar.isCollapsed()) {\n        sidebar.expand();\n    } else {\n        sidebar.collapse();\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Event Handlers in Tree Template\nDESCRIPTION: This example shows how to use the eventHandlers config to add a custom click handler for a remove button in a tree item template. It also demonstrates how to create a custom template for tree items.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree/api/tree_eventhandlers_config.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst tree = new dhx.Tree(\"tree_container\", {\n    template: ({ value }, isFolder) => {\n        const template = `\n            <div class=\"dhx_tree_template\">\n                <span class=\"dhx_tree_template__value\">${value}</span>\n                <div class=\"dhx_tree_template__rows\">\n                    <button class=\"dhx_tree_template__button remove\">\n                        <i class=\"far fa-trash-alt dhx_tree_template__icon dhx_tree_template__icon--danger\"></i>\n                    </button>\n                </div>\n            </div>\n        `\n        return isFolder ? null : template;\n    },\n    eventHandlers: {\n        onclick: {\n            remove: (event, { id }) => {\n                id && tree.data.remove(id);\n                // return false;\n            }\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Ungrouping Data in DHTMLX Grid - JavaScript/JSX\nDESCRIPTION: Invokes the ungroup method of DataCollection to revert grouped grid data to an ungrouped state. No additional dependencies beyond an initialized DHTMLX Grid instance are required. It operates directly on the grid's data property and does not take any parameters or return values.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/usage.md#2025-04-22_snippet_42\n\nLANGUAGE: JSX\nCODE:\n```\ngrid.data.ungroup();\n```\n\n----------------------------------------\n\nTITLE: Markdown Table Structure for Grid Events and Properties\nDESCRIPTION: Structured markdown tables documenting Grid events and properties, including column operations, row management, and configuration options\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/api_overview.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Description |\n| --- | --- |\n| [](grid/api/grid_aftercolumnhide_event.md) | @getshort(grid/api/grid_aftercolumnhide_event.md) |\n```\n\n----------------------------------------\n\nTITLE: Handling headerCellClick Event in DHTMLX Grid (JavaScript)\nDESCRIPTION: This snippet demonstrates how to attach an event listener for the headerCellClick event in a DHTMLX Grid. The event fires when a user clicks on a grid header cell, providing access to the cell and column configurations, as well as the native mouse event object.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_headercellclick_event.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ngrid.events.on(\"headerCellClick\", (cell, column, event) => {\n    // your logic here\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Colorpicker Value in DHTMLX Form in JavaScript\nDESCRIPTION: This example demonstrates how to set a color value in the Hex format for a Colorpicker control in a DHTMLX Form. The method accepts a string parameter representing the hex color code.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/colorpicker/colorpicker_setvalue_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nform.getItem(\"colorpicker\").setValue(\"#02F7C6\");\n```\n\n----------------------------------------\n\nTITLE: Handling beforeResizeStart Event in DHTMLX Grid\nDESCRIPTION: This code snippet demonstrates how to attach an event listener for the beforeResizeStart event in a DHTMLX Grid. The event fires before resizing of a column starts and allows preventing the resize action by returning false.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_beforeresizestart_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngrid.events.on(\"beforeResizeStart\", (column, event) => {\n    // your logic here\n    return false;\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing beforeEditEnd Event Handler in JavaScript List\nDESCRIPTION: This code example demonstrates how to add an event listener for the beforeEditEnd event in a DHTMLX List. The event fires before the editing of a list item ends, allowing custom logic to determine whether to continue closing the editor.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/list/api/list_beforeeditend_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlist.events.on(\"beforeEditEnd\", function(value,id){\n    // your logic here\n    return false;\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Tree in Collapsed Mode\nDESCRIPTION: Creates a Tree component that starts in a collapsed state where all items are initially folded.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree/configuration.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst tree = new dhx.Tree(\"tree_container\", {\n    collapsed: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Calendar with Range Mode in JavaScript\nDESCRIPTION: Creates a new Calendar instance with range selection mode enabled. The example configures a calendar widget with borders and sets the range property to true to allow selecting multiple dates as a range.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar2/api/calendar_range_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar calendar = new dhx.Calendar(\"calendar\", {\n    css: \"dhx_widget--bordered\",\n    range: true\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Toggle Change Event in DHTMLX Form\nDESCRIPTION: Example shows how to attach an event listener to the change event of a Toggle control in a DHTMLX Form. The event fires when the toggle value changes and provides the new value as a parameter.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/toggle/toggle_change_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"toggle\").events.on(\"change\", function(value) {\n    console.log(\"change\", value);\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing Tooltip Content in DHTMLX Grid\nDESCRIPTION: This snippet shows how to customize the content of tooltips for a column in a DHTMLX Grid using the 'tooltipTemplate' configuration option. It demonstrates a rich tooltip with an image and additional information.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/customization.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst grid = new dhx.Grid(\"grid_container\", {\n    columns: [\n        {\n            width: 200, id: \"country\", header: [{ text: \"Country\" }], align: \"left\",\n            htmlEnable: true, \n            tooltipTemplate: function (value, row, column) { \n                if (row.country === \"Bangladesh\") {\n                    return false; // prevent a tooltip from being shown\n                }\n                return `<div class=\"custom-tooltip\"> \n                    <img src=\"../data/common/img/02/${row.avatar}.jpg\" /> \n                    <span>Last edit time:<br>${row.editing.toUTCString()}</span> \n                </div>`; \n            } \n        },\n        { width: 150, id: \"population\", header: [{ text: \"Population\" }] },\n        { width: 150, id: \"yearlyChange\", header: [{ text: \"Yearly Change\" }] },\n        // more options\n    ],\n    data: dataset\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX Menu in JavaScript\nDESCRIPTION: This code shows how to initialize the DHTMLX Menu object using JavaScript. It uses the dhx.Menu constructor, passing the container ID as an argument.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/menu/how_to_start.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst menu = new dhx.Menu(\"menu_container\");\n```\n\n----------------------------------------\n\nTITLE: Saving and Restoring DataView State in JavaScript\nDESCRIPTION: This code demonstrates how to save the current state of a DHTMLX DataView using the serialize() method and then restore that state to a new DataView instance using the parse() method.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/dataview/data_loading.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst state = dataview1.data.serialize();\n\n// creating a new dataview\nconst dataview2 = new dhx.DataView(document.body);\n// parsing the state of dataview1 into dataview2\ndataview2.data.parse(state);\n```\n\n----------------------------------------\n\nTITLE: Disabling Tree Selection in JavaScript\nDESCRIPTION: Shows how to disable selection functionality for Tree items using the selection object's disable() method.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree/usage_selection.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ntree.selection.disable();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Child Items from TreeCollection in JavaScript\nDESCRIPTION: This code snippet demonstrates how to use the getItems() method of the TreeCollection to retrieve child items of a specific control. It takes the ID of a control as a parameter and returns an array of objects representing the child items.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree_collection/api/treecollection_getitems_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst items = toolbar.data.getItems(\"menu1\");\n```\n\n----------------------------------------\n\nTITLE: Calling Custom Events in DHTMLX Toolbar\nDESCRIPTION: This snippet shows how to manually fire a custom event on the toolbar using the fire() method. This allows triggering event handlers programmatically.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/toolbar/handling_events.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ntoolbar.events.fire(evName,[args]);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Grid Scroll Position with getScrollState()\nDESCRIPTION: Demonstrates how to get the current X and Y scroll coordinates of a DHTMLX Grid. The method returns an object containing the horizontal (x) and vertical (y) scroll positions.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_getscrollstate_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst state = grid.getScrollState(); // -> { x:0, y:0 }\n```\n\n----------------------------------------\n\nTITLE: Handling beforeHide Event in DHTMLX Sidebar\nDESCRIPTION: Example of attaching an event handler to the beforeHide event of a Sidebar component. The event fires before a sub-item is hidden and can prevent the hiding action by returning false.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/sidebar/api/sidebar_beforehide_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsidebar.events.on(\"beforeHide\", function(id, event){\n    // your code here\n    return false;\n});\n```\n\n----------------------------------------\n\nTITLE: Handling beforeChangeProperties Event in DHTMLX Form Input Control\nDESCRIPTION: This example shows how to attach an event handler to the beforeChangeProperties event of a Form Input control. The handler logs the properties being changed and returns true to allow the changes to proceed.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/input/input_beforechangeproperties_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"input\").events.on(\"beforeChangeProperties\", function(properties) {\n    console.log(\"beforeChangeProperties\", properties);\n    return true;\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Avatar Control in DHTMLX Form\nDESCRIPTION: Example shows how to enable a disabled Avatar control using the enable() method. The method is called on a form item retrieved using getItem() with the Avatar's id.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/avatar/avatar_enable_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"avatar\").enable();\n```\n\n----------------------------------------\n\nTITLE: Updating List Items Using Data Collection API in JavaScript\nDESCRIPTION: Shows how to update the configuration of a List item using the update() method of Data Collection. The method takes the item id and a new configuration object as parameters.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/list/work_with_list.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nlist.data.update(\"option_id\",{\n    value:\"Nice item\"\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing ColorPicker Control in DHTMLX Form\nDESCRIPTION: This snippet demonstrates how to add a ColorPicker control during the initialization of a DHTMLX Form. It creates a form with a single ColorPicker control, specifying its type, name, label width, and label text.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/colorpicker.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst form = new dhx.Form(\"form_container\", {\n    rows: [\n        {\n            type: \"colorpicker\",\n            name: \"colorpicker\",\n            labelWidth: \"200px\",\n            label: \"Choose your color\"\n        }\n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX Calendar with Date String Array (JavaScript)\nDESCRIPTION: Creates a new Calendar instance with a date selected using an array containing a string representation of the date.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar2/api/calendar_value_config.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar calendar = new dhx.Calendar(\"calendar_container\", {\n    value: ([\"10/02/19\"])\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Toggle Group Control in DHTMLX Form\nDESCRIPTION: Configuration object for initializing a Toggle Group control in DHTMLX Form. Demonstrates all available properties including options for individual toggle buttons, styling, and behavior settings.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/togglegroup/api_togglegroup_properties.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    type: \"toggleGroup\",\n    name?: string,\n    id?: string,\n\n    hidden?: boolean, // false by default\n    disabled?: boolean, // false by default\n\n    full?: boolean, // false by default\n    gap?: number, // 0 by default\n    multiselect?: boolean, // false by default\n\n    options: [\n        {\n             id?: string,\n             hidden?: boolean,\n             disabled?: boolean,\n             selected?: boolean,\n             full?: boolean,\n             text?: string,\n             icon?: string,\n             offText?: string,\n             offIcon?: string,\n             value?: string | number\n        },\n    ],\n    value?: {\n        [id: string]: boolean\n    };\n\n    css?: string,\n    width?: string | number | \"content\", // \"content\" by default\n    height?: string | number | \"content\", // \"content\" by default\n    padding?: string | number\n}\n```\n\n----------------------------------------\n\nTITLE: Attaching HTML Content to a Tabbar Cell - JavaScript\nDESCRIPTION: Shows how to add custom HTML content to a Tabbar cell using the attachHTML() method. The Tabbar is initialized with a single tab (id 'vilnius'), and an HTML string is injected into its cell. Suits displaying static content or supplemental markup in tab panels. Input is HTML string, which is rendered inside the specified cell.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tabbar/work_with_tabbar.md#2025-04-22_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst tabbar = new dhx.Tabbar(\\\"tabbar_container\\\", {\\n    mode: \\\"top\\\",\\n    css: \\\"dhx_widget--bordered\\\",\\n    views: [\\n        { id: \\\"vilnius\\\", tab: \\\"Vilnius\\\" },\\n    ]\\n});\\n\\ntabbar.getCell(\\\"vilnius\\\").attachHTML(\\\"<p>Information about Vilnius</p>\\\");\n```\n\n----------------------------------------\n\nTITLE: Firing Custom Events in DHTMLX Form\nDESCRIPTION: Shows how to manually fire a custom event using the events.fire() method, which takes an event name and optional arguments as parameters.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/handling_events.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nform.events.fire(evName,[args]);\n```\n\n----------------------------------------\n\nTITLE: Adding a Number Badge to a DHTMLX Ribbon Button (JavaScript)\nDESCRIPTION: Demonstrates how to add a numerical badge to a DHTMLX Ribbon Button using the `count` property in its configuration object. This is useful for displaying counts like new messages.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/ribbon/button.md#2025-04-22_snippet_6\n\nLANGUAGE: js\nCODE:\n```\n{\n    type:\"button\", value:\"Done\",\n    icon:\"dxi dxi-check\",\n    count:10\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring HTML Content Rendering in Combobox Options\nDESCRIPTION: Shows how to control HTML content rendering in Combobox options using the htmlEnable property. The example demonstrates disabling HTML rendering to display content as plain text for security purposes.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/combobox/configuration.md#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst combo = new dhx.Combobox(\"combo_container\", { \n    htmlEnable: false,\n    template: function (item) {\n        return \"<div style='user-select:none; display: flex; justify-content: space-between;'>\" +\n            \"<span>\" + item.value + \"</span>\" +\n            \"<img style='height: 20px; width: 30px; border: 1px solid gray' src=\" + item.src + \"></img>\" +\n            \"</div>\";\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Button blur Event in DHTMLX Form (JavaScript)\nDESCRIPTION: This snippet demonstrates how to attach an event listener to the blur event of a Button control in a DHTMLX Form. It logs the current text value of the button when it loses focus.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/button/button_blur_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"button\").events.on(\"blur\", (text) => {\n    console.log(\"blur\", text);\n});\n```\n\n----------------------------------------\n\nTITLE: Styling DHTMLX Layout with Custom CSS\nDESCRIPTION: Example showing how to apply custom CSS classes to a DHTMLX Layout component with custom styling for the layout container and header.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/layout/api/layout_css_config.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<style>\n    .layout {\n        color: #fff;\n        --dhx-background-secondary: #7a7a7a;\n        --dhx-border-color: #bababa;\n        --dhx-border: var(--dhx-border-width) solid var(--dhx-border-color);\n    }\n\n    .layout-header {\n        --dhx-background-primary: #3A434A;\n    }\n    .dhx_layout-cell-inner_html {\n        height: 100%;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n    }\n</style>\n\n<script>\n    const layout = new dhx.Layout(\"layout_container\", {\n        type: \"space\",\n        css: \"layout\",\n        rows: [\n            {\n                id: \"toolbar\",\n                html: \"Header\",\n                css: \"layout-header\",\n                height: \"60px\"\n            }\n            // more objects\n        ]\n    });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Changing Input Properties in DHTMLX Form\nDESCRIPTION: This snippet demonstrates how to use the setProperties() method to dynamically change the configuration of an Input control in a DHTMLX Form. It modifies the input type, label, placeholder, and minimum length.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/input/input_setproperties_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"input\").setProperties({\n    inputType: \"text\",\n    label: \"New label\", \n    placeholder: \"Enter your name\",\n    minLength: 4\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Calendar Mode in DHTMLX\nDESCRIPTION: Examples of showing calendar in different modes (calendar, month, year) using showDate() method\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar2/operating_calendar.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncalendar.showDate(new Date(2020,11,12),\"calendar\");\n```\n\n----------------------------------------\n\nTITLE: Advanced Data Grouping with Aggregation in DHTMLX Grid\nDESCRIPTION: Demonstrates complex grouping configuration using a configuration object with aggregation settings. This example shows how to sum employee numbers and combine unique locations when grouping by department.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/usage.md#2025-04-22_snippet_40\n\nLANGUAGE: jsx\nCODE:\n```\nconst grid = new dhx.Grid(\"grid_container\", {\n    columns: [\n        { id: \"department\", header: [{ text: \"Department\" }] },\n        { id: \"employees\", header: [{ text: \"Number of Employees\" }] },\n        { id: \"location\", header: [{ text: \"Location\" }] }\n    ],\n    group: true,\n    groupable: true,\n    data: dataset\n});\n\ngrid.data.group([{\n    by: \"department\", // grouping by the `department` field\n    map: {\n        employees: [\"employees\", \"sum\"], // aggregation: sums up the number of employees\n        location: (rows) => {\n            // a custom function for calculating unique locations\n            const uniqueLocations = [...new Set(rows.map(r => r.location))];\n            return uniqueLocations.join(\", \");\n        }\n    },\n    summary: \"top\" // the total row is rendered at the top of the group\n}]);\n```\n\n----------------------------------------\n\nTITLE: Configuring Timepicker Control Properties in DHTMLX Form\nDESCRIPTION: Comprehensive configuration object for the Timepicker control showing all available properties and their possible values. Includes options for time format, validation, styling, and layout configuration.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/timepicker/api_timepicker_properties.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    type: \"timepicker\",\n    name?: string,\n    id?: string,\n    value?: Date | number | string | array | object,\n\n    css?: string,\n    disabled?: boolean, // false by default\n    editable?: boolean, // false by default\n    height?: string | number | \"content\", // \"content\" by default\n    hidden?: boolean, // false by default\n    padding?: string | number, \n    required?: boolean, // false by default\n    validation?: (input: string) => boolean,\n    width?: string | number | \"content\", // \"content\" by default\n    \n    controls?: boolean, // false by default\n    icon?: string,\n    placeholder?: string,\n    timeFormat?: 12 | 24, // 24 by default\n    valueFormat?: \"string\" | \"timeObject\", // \"string\" by default\n\n    hiddenLabel?: boolean, // false by default \n    label?: string,\n    labelPosition?: \"left\" | \"top\", // \"top\" by default\n    labelWidth?: string | number,\n\n    helpMessage?: string,\n    preMessage?: string,\n    successMessage?: string,\n    errorMessage?: string\n}\n```\n\n----------------------------------------\n\nTITLE: Getting the State of a TwoState DHTMLX Ribbon Button (JavaScript)\nDESCRIPTION: Illustrates how to retrieve the current state of controls, including TwoState buttons, within a DHTMLX Ribbon using the `ribbon.getState()` method. It returns an object mapping control IDs to their current values or states (true/false for TwoState buttons).\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/ribbon/button.md#2025-04-22_snippet_11\n\nLANGUAGE: js\nCODE:\n```\n{\n    type:\"button\", value:\"Check\", twoState:true, id:\"check\"\n}\n...\nribbon.getState();\n// { check:true }\n// or\n// { check:false }\n```\n\n----------------------------------------\n\nTITLE: Styling Colorpicker with Custom CSS Classes\nDESCRIPTION: Example showing how to apply custom CSS classes to style a DHTMLX Colorpicker component. The CSS includes custom styling for the background, border, and circular elements within the colorpicker.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/colorpicker/api/colorpicker_css_config.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.custom-class {\n    background: #f2f2f2;\n    border: solid 1px lightblue;\n}\n\n.custom-class .dhx_palette__cell {\n    border-radius: 50%;\n}\n\n.custom-class .dhx_palette__cell:after {\n    border-radius: 50%;\n}\n\n.custom-class .dhx_colorpicker-custom-colors__picker {\n    border-radius: 50%;\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst colorpicker = new dhx.Colorpicker(\"colorpicker_container\", {\n    css: \"custom-class dhx_widget--bordered\"\n});\n```\n\n----------------------------------------\n\nTITLE: Expanding a Tree Item using expand() Method in JavaScript\nDESCRIPTION: This code snippet demonstrates how to use the expand() method to expand a specific item in a DHTMLX Tree component. The method takes the id of the item to be expanded as a parameter.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree/api/tree_expand_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntree.expand(\"history\");\n```\n\n----------------------------------------\n\nTITLE: Retrieving Selected Cells from DHTMLX Grid\nDESCRIPTION: Demonstrates how to get an array of selected cells from a Grid component. The method returns an array of objects containing row and column configurations for each selected cell.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/selection/selection_getcells_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst selectedCells = grid.selection.getCells();\n// -> [{…}, {…}, {…}]\n0: {row: {…}, column: {…}}\n1: {row: {…}, column: {…}}\n2: {row: {…}, column: {…}}\n```\n\n----------------------------------------\n\nTITLE: Setting Filter Value for Grid Column in JavaScript\nDESCRIPTION: This code snippet demonstrates how to use the setValue method to set a filter value for a specific column in a DHTMLX Grid. It sets the value 'Brazil' as a filter for the 'country' column.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/headerfilter/setvalue_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ngrid.getHeaderFilter(\"country\").setValue(\"Brazil\");\n```\n\n----------------------------------------\n\nTITLE: Adding Single Item to DataCollection in JavaScript\nDESCRIPTION: Demonstrates how to add a single new item at the beginning of a data collection using the add() method.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/data_collection/api/datacollection_add_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncomponent.data.add({\"value\": 57.44787660011765, \"id\": \"u1565340894584\"}, 0);\n```\n\n----------------------------------------\n\nTITLE: Adding HTML Content to DHTMLX Window\nDESCRIPTION: Demonstrates how to create a new Window instance and attach HTML content to it using the attachHTML() method. The example shows creation of a window with a title, adding HTML content with a header and paragraph, and displaying the window.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/window/api/window_attachhtml_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst dhxWindow = new dhx.Window({title: \"Window\"});\nconst html = \"<h1>Header</h1><p>paragraph</p>\";\ndhxWindow.attachHTML(html);\ndhxWindow.show();\n```\n\n----------------------------------------\n\nTITLE: Selecting and Unselecting Sidebar Items in JavaScript\nDESCRIPTION: Demonstrates how to select and unselect specific sidebar items or all items using the select() and unselect() methods of the DHTMLX Sidebar API.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/sidebar/work_with_sidebar.md#2025-04-22_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nsidebar.select(\"categoryPost\");\n\n// unselects a specified selected item\nsidebar.unselect(\"categoryPost\");\n\n// unselects all previously selected items\nsidebar.unselect();\n```\n\n----------------------------------------\n\nTITLE: Attaching a component to Layout cell in JavaScript\nDESCRIPTION: Illustrates how to attach a DHTMLX component (like List) to a Layout cell using the attach method.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/layout/work_with_layout.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst layout = new dhx.Layout(\"layout_container\", {\n    width:\"400px\", height:\"600px\"\n});\n\nconst list = new dhx.List(null, {\n    template: listTemplate,\n    itemHeight: 52,\n    height: \"100%\",\n    dragMode: \"both\"\n});\n        \nlist.data.load('../common/library.json');\n\nlayout.getCell(\"list\").attach(list);\n```\n\n----------------------------------------\n\nTITLE: Setting Textarea Properties in DHTMLX Form\nDESCRIPTION: Demonstrates how to dynamically change properties of a Textarea control in a DHTMLX Form, including label text, label width, and control width.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/textarea/textarea_setproperties_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"textarea\").setProperties({\n    label: \"New textarea\", \n    labelWidth: \"80px\",\n    width: 500\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Selected Sidebar Items in JavaScript\nDESCRIPTION: Demonstrates how to get an array of IDs of selected sidebar items using the getSelected() method of the DHTMLX Sidebar API.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/sidebar/work_with_sidebar.md#2025-04-22_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nsidebar.getSelected(); // -> [\"selected_1\", \"selected_1.1\"]\n```\n\n----------------------------------------\n\nTITLE: DatePicker Configuration Options Object\nDESCRIPTION: Complete list of available configuration properties that can be modified for the DatePicker control, including format settings, validation options, and visual customization parameters.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/calendar/calendar_setproperties_method.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    css: string,\n    dateFormat: string,\n    disabledDates: function,\n    editable: boolean,\n    errorMessage: string,\n    height: string|number|\"content\",\n    helpMessage: string,\n    hiddenLabel: boolean, \n    icon: string,\n    label: string,\n    labelPosition: string,\n    labelWidth: string|number,\n    mark: function,\n    mode: string,\n    padding: string|number,\n    placeholder: string,\n    preMessage: string,\n    required: boolean,\n    successMessage: string,\n    thisMonthOnly: boolean,\n    timeFormat: number,\n    timePicker: boolean,\n    validation: function,\n    valueFormat: string,\n    weekNumbers: boolean,\n    weekStart: string,\n    width: string|number|\"content\",\n}\n```\n\n----------------------------------------\n\nTITLE: Applying CSS Classes to Form Configuration\nDESCRIPTION: Demonstrates how to apply custom CSS classes to a DHTMLX Form instance\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/customization.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst form = new dhx.Form(\"form_container\", {\n    css:\"my_first_class my_second_class\"\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring dragCopy for DataView in JavaScript\nDESCRIPTION: This code snippet demonstrates how to initialize two DataView components with dragCopy enabled. It allows copying items from the source DataView to the target DataView during drag-and-drop operations.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/dataview/api/dataview_dragcopy_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst source = new dhx.DataView(\"dataview_source\", {dragMode: \"source\", dragCopy: true});\nconst target = new dhx.DataView(\"dataview_target\", {dragMode: \"target\", dragCopy: true});\n```\n\n----------------------------------------\n\nTITLE: Handling afterRowShow Event in DHTMLX Grid\nDESCRIPTION: This code snippet demonstrates how to attach an event handler to the afterRowShow event of a DHTMLX Grid. The event fires after a row is shown on a page and provides the row configuration object as a parameter.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_afterrowshow_event.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ngrid.events.on(\"afterRowShow\", (row) => {\n    // your logic here\n});\n```\n\n----------------------------------------\n\nTITLE: Showing DHTMLX Window with JavaScript\nDESCRIPTION: This snippet demonstrates how to use the `show()` method of a DHTMLX Window instance (`dhxWindow`). The first call shows the window at its default or last position. The second call shows the window at the specified coordinates (left: 550px, top: 230px). This method requires an initialized DHTMLX Window object.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/window/api/window_show_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndhxWindow.show();\n \n// showing a window at a specified position\ndhxWindow.show(\"550\", \"230\");\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Template to DHTMLX Tree Items in JavaScript\nDESCRIPTION: Demonstrates how to add a custom template to Tree items using the template property. It includes a template function and event handlers for custom buttons within the template.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree/setting_tree_appearance.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst tree = new dhx.Tree(\"tree_container\", {\n    template: ({ value }, isFolder) => {\n        const template = `\n            <div class=\"dhx_tree_template\">\n                <span class=\"dhx_tree_template__value\">${value}</span>\n                <div class=\"dhx_tree_template__rows\">\n                    <button class=\"dhx_tree_template__button remove\">\n                        <i class=\"far fa-trash-alt dhx_tree_template__icon dhx_tree_template__icon--danger\"></i>\n                    </button>\n                </div>\n            </div>\n        `\n        return isFolder ? null : template;\n    },\n    eventHandlers: {\n        onclick: {\n            remove: (event, { id }) => {\n                id && tree.data.remove(id);\n                // return false;\n            }\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Legend Configuration for Pie Charts\nDESCRIPTION: Example of legend configuration for charts without scales like Pie, Pie3D, and Donut charts\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/chart/api/chart_legend_config.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nlegend?: {\n    values: {\n        text: string;\n        color: string;\n    },\n    direction?: \"row\" | \"column\", // \"row\" by default\n    form?: \"rect\" | \"circle\", // \"rect\" by default\n    halign?: \"left\" | \"right\" | \"center\", // \"right\" by default\n    itemPadding?: number,\n    margin?: number,\n    size?: number,\n    valign?: \"top\" | \"middle\" | \"bottom\", // \"top\" by default\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Input Control in DHTMLX Suite\nDESCRIPTION: This snippet shows the configuration options for the Input control in DHTMLX Suite. It includes various attributes such as autocomplete, css, errorMessage, height, and more. Each attribute is specified with its corresponding data type.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/form_setproperties_method.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    autocomplete: boolean,\n    css: string,\n    errorMessage: string,\n    height: string | number | \"content\",\n    helpMessage: string,\n    hiddenLabel: boolean,\n    icon: string,\n    inputType: string,\n    label: string,\n    labelPosition: string,\n    labelWidth: string | number,\n    max: string | number,\n    maxlength: string | number,\n    min: string | number,\n    minlength: string | number,\n    padding: string | number,\n    placeholder: string,\n    preMessage: string,\n    readOnly: boolean,\n    required: boolean,\n    successMessage: string,\n    validation: object | function,\n    width: string | number | \"content\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Selected Color in JavaScript ColorPicker\nDESCRIPTION: Uses the setValue() method to set a specific color in the ColorPicker component. The color code is provided in Hex format.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/colorpicker/manipulating_colorpicker.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncolorpicker.setValue(\"#F9E6AD\");\n```\n\n----------------------------------------\n\nTITLE: Handling afterShow Event in DHTMLX Form Container Control\nDESCRIPTION: This example demonstrates how to attach an event handler to the afterShow event of a Container control within a DHTMLX Form. The event fires after the Container control is shown and does not provide any parameters.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/container/container_aftershow_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"container\").events.on(\"afterShow\", function() {\n    console.log(\"afterShow\");\n});\n```\n\n----------------------------------------\n\nTITLE: Attaching Event Handler to Ribbon\nDESCRIPTION: Demonstrates how to attach an event handler to a Ribbon click event using the events.on() method. The handler logs the event ID and event object to the console.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/ribbon/handling_events.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nribbon.events.on(\"click\", function(id,e){\n    console.log(id,e);\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Event Handlers to Custom Template in DataView\nDESCRIPTION: Demonstrates how to assign event handlers to HTML elements of a custom template for DataView items using the eventHandlers configuration option.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/dataview/configuration.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nfunction template(item) {\n    let template = \"<div class='item_wrap'>\";\n    template += \"<img class='image' src=\" + \"../images/\" + item.thumbnailName + \" />\";\n    template += \"<h2 class='title'>\" + item.value + \"</h2>\";\n    template += \"<p class='description'>\" + item.shortDescription + \"</p>\";\n    template += \"</div>\";\n    return template;\n}\n\nconst dataview = new dhx.DataView(\"dataview_container\", {\n    template: template,\n    eventHandlers: {\n        onclick: {\n            item_wrap: function(event, id) {\n                console.log(\"You clicked on \" + event.target.tagName);\n            },\n        },\n        onmouseover: {\n            item_wrap: function(event, id) {\n                console.log(dataview.data.getItem(id).short);\n            },\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Counting Child Items Using getLength Method in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the getLength() method of the TreeCollection to count the child items of a specific control. It takes an optional ID parameter and returns the number of child items.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree_collection/api/treecollection_getlength_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntoolbar.data.getLength(\"menu1\");\n```\n\n----------------------------------------\n\nTITLE: Using beforeChange Event in DHTMLX Calendar (JavaScript)\nDESCRIPTION: This example demonstrates how to implement an event handler for the beforeChange event in a DHTMLX Calendar. The handler prevents selection of future dates by checking if the selected date is greater than the current date and returning false in that case.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar/api/calendar_beforechange_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncalendar.events.on(\"beforeChange\",function(date, oldDate, byClick){\n    if (date > new Date())\n        return false;\n});\n```\n\n----------------------------------------\n\nTITLE: Embedding Calendar Tooltip Demo\nDESCRIPTION: HTML iframe element embedding a live demo of calendar tooltips implementation from DHTMLX snippet service\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar2/functionality_and_features/tooltips.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<iframe src=\"https://snippet.dhtmlx.com/t4jy4wrr?mode=result\" frameborder=\"0\" class=\"snippet_iframe\" width=\"100%\" height=\"450\"></iframe>\n```\n\n----------------------------------------\n\nTITLE: Configuring Message Box in DHTMLX JavaScript\nDESCRIPTION: Demonstrates the usage and configuration options for creating a message box using the dhx.message() function. Includes parameters for text, icon, CSS, HTML content, positioning, and expiration.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/message/api/api_message_properties.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndhx.message({\n    text?: string,\n    icon?: string,\n    css?: string,\n    html?: string,\n    node?: HTMLElement | string,\n    position?: \"top-left\" | \"top-right\" | \"bottom-left\" | \"bottom-right\", // \"top-right\" by default\n    expire?: number,\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Tree with autoload in JavaScript\nDESCRIPTION: Creates a new Tree component with autoload configuration that enables loading child items dynamically when parent nodes are opened. The path to the backend service is specified in the configuration.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree/api/tree_autoload_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst tree = new dhx.Tree(\"tree_container\", {autoload: \"/backend/autoload\"});\ntree.data.load(\"/backend/autoload?id=tree\");\n```\n\n----------------------------------------\n\nTITLE: Loading Data on Combo Box Initialization\nDESCRIPTION: Demonstrates how to initialize a DHTMLX Combo Box with a predefined dataset using the data configuration property.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/combobox/adding_options.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst combo = new dhx.Combobox(\"combo_container\",{\n    data: dataset\n});\n```\n\n----------------------------------------\n\nTITLE: Clearing ComboBox Input in JavaScript\nDESCRIPTION: Demonstrates how to clear the selected value(s) from a ComboBox input using the clear() method.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/combobox/work_with_combo.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ncombo.clear();\n```\n\n----------------------------------------\n\nTITLE: Implementing Column Gravity in DHTMLX Grid\nDESCRIPTION: Example showing how to configure columns with different gravity values to control their relative widths. The column with gravity:2 will be twice as wide as the column with gravity:1.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/gridcolumn_properties/gridcolumn_gravity_property.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst grid = new dhx.Grid(\"grid_container\", {\n    columns: [\n        { id: \"density\", header: [{ text: \"Density (P/Km²)\" }], gravity: 1 },\n        // the column with the \"area\" id is two times wider than the column with the \"density\" id\n        { id: \"area\", header: [{ text: \"Land Area (Km²)\" }], gravity: 2 },\n        // more columns configuration objects\n    ],\n    autoWidth: true,\n    // more options\n});\n```\n\n----------------------------------------\n\nTITLE: Validating Checkbox Group in DHTMLX Form (JavaScript)\nDESCRIPTION: Demonstrates how to use the validate() method of a CheckboxGroup control in a DHTMLX Form. The method returns true if the control is valid, false otherwise. It can be called with an optional 'silent' parameter to control event triggering and visual feedback.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/checkbox_group/checkboxgroup_validate_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nform.getItem(\"CheckboxGroup\").validate(true); // -> true/false\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nform.getItem(\"CheckboxGroup\").validate(); // -> true/false\nform.getItem(\"CheckboxGroup\").validate(false); // -> true/false\n```\n\n----------------------------------------\n\nTITLE: Initializing Vertical Layout in DHTMLX\nDESCRIPTION: Creates a vertical layout with four columns, each having a header. The columns are arranged side by side vertically within the specified container.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/layout/layout_structure.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst layout = new dhx.Layout(\"layout_container\", {   \n    cols: [\n        { header: \"The header of the column 1\" },\n        { header: \"The header of the column 2\" },\n        { header: \"The header of the column 3\" },\n        { header: \"The header of the column 4\" }\n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX Pagination with List Widget in HTML\nDESCRIPTION: This snippet provides a complete HTML example for initializing DHTMLX Pagination with a List widget. It includes the setup of HTML containers, linking the required JavaScript and CSS files for DHTMLX Suite, creating a List widget and loading data into it, and finally initializing the Pagination component with a reference to the List's data. Requires the 'suite.js' and 'suite.css' files, a valid 'widget_data' object, and two container divs with corresponding IDs. Outputs an interactive paginated list.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/pagination/init.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\\n<html>\\n    <head>\\n        <title>How to Start with DHTMLX Pagination</title>         \\n        <script type=\\\"text/javascript\\\" src=\\\"../../codebase/suite.js\\\"></script>\\n        <link rel=\\\"stylesheet\\\" href=\\\"../../codebase/suite.css\\\">\\n    </head>\\n    <body>\\n        <div id=\\\"widget_container\\\"></div>\\n        <div id=\\\"pagination_container\\\"></div>\\n        <script>\\n            // creating a related widget\\n            const widget = new dhx.List(\\\"widget_container\\\", {\\n                css: \\\"dhx_widget--bordered\\\",\\n                keyNavigation: true\\n            });\\n\\n            widget.data.parse(widget_data);\\n\\n            // creating DHTMLX Pagination\\n            const pagination = new dhx.Pagination(\\\"pagination_container\\\", {\\n                css: \\\"dhx_widget--bordered\\\",\\n                data: widget.data\\n            });\\n        </script>\\n    </body>\\n</html>\n```\n\n----------------------------------------\n\nTITLE: Adding Validation Messages to DHTMLX Form Input (JSX)\nDESCRIPTION: Shows how to add validation messages (error and success) to an input field with email validation in a DHTMLX form.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/work_with_form.md#2025-04-22_snippet_18\n\nLANGUAGE: jsx\nCODE:\n```\n{\n    type: \"input\",\n    label: \"Email\",\n    placeholder: \"jd@mail.name\",\n    errorMessage: \"Invalid email\",\n    successMessage: \"Valid email\",\n    validation: \"email\"\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Combo Box Options Template in JavaScript\nDESCRIPTION: Implements a custom template for rendering Combo Box options, allowing for rich HTML content including images and formatted text.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/combobox/configuration.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst combo = new dhx.Combobox(\"combo_container\", {\n    template: function (item) {\n      return \"<div style='display:inline-block'>\"\n      +\"<img style='width:20px;height:20px;margin-right:10px;' src=\"+item.src+\"></div>\" \n      + item.value + \"</div>\";\n    }\n});            \n```\n\n----------------------------------------\n\nTITLE: Retrieving DatePicker Value as Date Object\nDESCRIPTION: Shows how to get the current value from a DatePicker control as a JavaScript Date object by passing true as parameter.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/calendar/calendar_getvalue_method.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst value = form.getItem(\"datepicker\").getValue(true);\n// -> Mon Jun 03 2019 00:00:00 GMT+0300\n```\n\n----------------------------------------\n\nTITLE: Handling Calendar Change Event in JavaScript\nDESCRIPTION: Example of attaching an event handler to the Calendar's change event. The handler logs the old and new dates when selection changes, and indicates whether the change was triggered by a user click.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar/api/calendar_change_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncalendar.events.on(\"change\",function(date, oldDate, byClick){\n    console.log(\"Change selection from \"+oldDate+\" to \"+date);\n    console.log(click);\n});\n```\n\n----------------------------------------\n\nTITLE: Handling afterShow Event for Textarea in DHTMLX Form (JavaScript)\nDESCRIPTION: This snippet demonstrates how to attach an event listener to the afterShow event of a Textarea control in a DHTMLX Form. The event fires after the control is shown and provides the current value of the control.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/textarea/textarea_aftershow_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"textarea\").events.on(\"afterShow\", function(value) {\n    console.log(\"afterShow\", value);\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX Grid with Frozen Bottom Rows in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a new DHTMLX Grid instance with two frozen rows at the bottom. The 'bottomSplit' option is set to 2, which freezes the last two rows of the grid.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_bottomsplit_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst grid = new dhx.Grid(\"grid_container\", {\n    columns: [\n        // columns config\n    ],\n    bottomSplit: 2,\n    data: dataset\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Selection Event in JavaScript DHTMLX\nDESCRIPTION: Example of attaching an event handler to the afterUnSelect event using the selection events API. This event fires after an item is unselected and provides the ID of the unselected item.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/selection/api/selection_afterunselect_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncomponent.selection.events.on(\"afterUnSelect\", function(id){\n    console.log(\"An item is unselected\");\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Colorpicker with Custom CSS Classes\nDESCRIPTION: This JavaScript code initializes a DHTMLX Colorpicker and applies custom CSS classes for styling. It uses the 'css' property in the configuration object to specify the classes.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/colorpicker/customization.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst colorpicker = new dhx.Colorpicker(\"colorpicker_container\", {\n    css: \"custom-class dhx_widget--bordered\",\n});\n```\n\n----------------------------------------\n\nTITLE: Managing Tree State\nDESCRIPTION: Demonstrates how to get and set the state of the tree component.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree/work_with_tree.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst treeState = tree.getState();\ntree.setState(treeState);\n```\n\n----------------------------------------\n\nTITLE: Handling Grid Column Hide Event in JavaScript\nDESCRIPTION: Example of attaching an event listener to the beforeColumnHide event of a DHTMLX Grid. The event fires before a column is hidden and can prevent the hiding action by returning false.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_beforecolumnhide_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngrid.events.on(\"beforeColumnHide\", (column) => {\n    // your logic here\n    return false;\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Selected Values from Combo Box in JavaScript\nDESCRIPTION: Demonstrates how to use the getValue() method of a Combo Box to retrieve the id(s) of selected items. It shows three different ways of calling the method: getting a single id, getting multiple ids as a string, and getting multiple ids as an array.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/combobox/api/combobox_getvalue_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst id = combo.getValue();\n// -> \"u1556098582074\"\n \n// returns ids of selected options as strings\nconst ids = combo.getValue();\n// -> \"u1556097609214,u1556097609228,u1556097609244\"\n \n// returns ids of selected options as an array of strings\nconst array_ids = combo.getValue(true);\n// -> [\"u1556097609214\", \"u1556097609228\", \"u1556097609244\"]\n```\n\n----------------------------------------\n\nTITLE: Filtering DataCollection by Column with Custom Comparison in JavaScript\nDESCRIPTION: This snippet illustrates filtering data by a specific column ('a') with a custom comparison function. It checks for 'Orange' in column 'a' and applies additional logic based on the item's properties.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/data_collection/api/datacollection_filter_method.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ngrid.data.filter({\n    by: \"a\",\n    match: \"Orange\",\n    compare: function (value, match, item) {\n        if (item.a !== \"Some\") {\n            return val === \"New\";\n        }\n    return false;\n    }\n}, {\n    add: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Defining maxWidth for Grid Column in JavaScript\nDESCRIPTION: This snippet demonstrates how to set the maxWidth configuration for a column in a DHTMLX Grid. It sets a maximum width of 150 pixels for the 'country' column.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/gridcolumn_properties/gridcolumn_maxwidth_property.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst grid = new dhx.Grid(\"grid_container\", {\n    columns: [\n        { id: \"country\", header: [{ text: \"Country\" }], maxWidth: 150 },\n        // more columns configuration objects\n    ],\n    // more options\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Grid Column Type Configuration\nDESCRIPTION: Shows the available type options for Grid columns including string, number, boolean, and date. The type property is optional and defaults to string.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/gridcolumn_properties/gridcolumn_type_property.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\ntype?: \"string\" | \"number\" | \"boolean\" | \"date\";\n```\n\n----------------------------------------\n\nTITLE: Handling beforeChangeProperties Event in DHTMLX Form Combo Box\nDESCRIPTION: This example demonstrates how to attach an event handler to the beforeChangeProperties event of a Combo Box control in a DHTMLX Form. The handler logs the properties being changed and returns true to allow the change to proceed.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/combo/combo_beforechangeproperties_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"combo\").events.on(\"beforeChangeProperties\", function(properties) {\n    console.log(\"beforeChangeProperties\", properties);\n    return true;\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Current Mode in JavaScript ColorPicker\nDESCRIPTION: Uses the setCurrentMode() method to change the view mode of the ColorPicker. The method takes the name of the mode ('palette' or 'picker') as a parameter.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/colorpicker/manipulating_colorpicker.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ncolorpicker.setCurrentMode(\"picker\");\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX Pagination with List Data in JavaScript\nDESCRIPTION: This snippet demonstrates initializing a `dhx.List` widget and loading data into it using `list.data.parse()`. Subsequently, it initializes a `dhx.Pagination` widget, configuring its `data` property to reference the `DataCollection` (`list.data`) of the previously created List. This linkage enables the pagination component to control the navigation through the data displayed in the List widget. Requires the DHTMLX Suite library and a predefined `list_data` variable.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/pagination/api/pagination_data_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// initialize the List widget\nconst list = new dhx.List(\"list_container\", {\n    css: \"dhx_widget--bordered\"\n});\n\n// load data into the list\nlist.data.parse(list_data);\n\nconst pagination = new dhx.Pagination(\"pagination_container\", {\n    // load the list data into the pagination\n    data: list.data\n});\n```\n\n----------------------------------------\n\nTITLE: Grouping Grid Data with Callback Function in DHTMLX\nDESCRIPTION: Example of grouping Grid data using the group() method of DataCollection with a callback function that dynamically assigns rows to groups based on salary ranges. This demonstrates conditional grouping based on data values.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/usage.md#2025-04-22_snippet_39\n\nLANGUAGE: jsx\nCODE:\n```\nconst grid = new dhx.Grid(\"grid_container\", {\n    columns: [\n        { id: \"salary\", header: [{ text: \"Salary\" }] },\n        { id: \"experience\", header: [{ text: \"Experience (years)\" }] },\n        { id: \"city\", header: [{ text: \"City\" }] }\n    ],\n    group: true,\n    groupable: true,\n    data: dataset\n});\n\ngrid.data.group([\n    function(row) {\n        if (row.salary < 30000) return \"Low income\";\n        if (row.salary >= 30000 && row.salary < 70000) return \"Medium income\";\n        return \"High income\";\n    },\n    \"city\"\n]);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Text Control Value in DHTMLX Form - JavaScript\nDESCRIPTION: Demonstrates how to get the current value from a Text control in a DHTMLX Form. The method returns either a string or number value stored in the text control.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/text/text_getvalue_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst value = form.getItem(\"text\").getValue();\n// -> \"I am a nice text\"\n```\n\n----------------------------------------\n\nTITLE: Adding Icon to NavItem in JavaScript\nDESCRIPTION: Demonstrates how to configure a NavItem with an icon using the 'icon' property.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/toolbar/navitem.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    type:\"navItem\", value:\"Some\",\n    icon:\"dxi dxi-check\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Toggle Group Values in JavaScript\nDESCRIPTION: Demonstrates different ways to retrieve values from Toggle Group controls using the getValue() method. Shows examples of getting individual toggle values and getting all toggle values at once.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/togglegroup/togglegroup_getvalue_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// returns a string value if the value is specified in the toggle configuration\nform.getItem(\"ToggleGroup\").getValue(\"toggle_1\"); //-> \"some_value\"\n\n// returns a boolean state if the value is not specified for the toggle\nform.getItem(\"ToggleGroup\").getValue(\"toggle_2\"); //-> true/false\n\n// returns an object with the current values/states of toggles\nform.getItem(\"ToggleGroup\").getValue(); \n// -> { \"toggle_1\": \"some_value_1\",  \"toggle_2\": true }\n```\n\n----------------------------------------\n\nTITLE: Handling blur Event for Checkbox Group in DHTMLX Form (JavaScript)\nDESCRIPTION: This snippet demonstrates how to attach an event listener to the 'blur' event of a Checkbox Group control in a DHTMLX Form. The event fires when the Checkbox Group loses focus and provides the current value of the control and the id of the specific checkbox that triggered the event.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/checkbox_group/checkboxgroup_blur_event.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nform.getItem(\"checkboxGroup\").events.on(\"blur\", (value, id) => {\n    console.log(\"blur\", value, id);\n});\n```\n\n----------------------------------------\n\nTITLE: Advanced Grouping with Aggregation\nDESCRIPTION: Example demonstrating grouping with configuration object and custom aggregation settings including summary placement\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/data_collection/api/datacollection_group_method.md#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst grid = new dhx.Grid(\"grid_container\", {\n    columns: [\n        { id: \"department\", header: [{ text: \"Department\" }] },\n        { id: \"employees\", header: [{ text: \"Number of Employees\" }] },\n        { id: \"location\", header: [{ text: \"Location\" }] }\n    ],\n    group: true,\n    groupable: true,\n    data: dataset\n});\n\ngrid.data.group([{\n    by: \"department\", // grouping by the `department` field\n    map: {\n        employees: [\"employees\", \"sum\"], // aggregation: sums up the number of employees\n        location: (rows) => {\n            // a custom function for calculating unique locations\n            const uniqueLocations = [...new Set(rows.map(r => r.location))];\n            return uniqueLocations.join(\", \");\n        }\n    },\n    summary: \"top\" // the total row is rendered at the top of the group\n}]);\n```\n\n----------------------------------------\n\nTITLE: Implementing Grid Column Template with Checkbox\nDESCRIPTION: Shows how to create a Grid instance with a column that uses a template function to render checkboxes based on cell values. The template creates an HTML checkbox that is checked when the cell value exceeds 300000.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/gridcolumn_properties/gridcolumn_template_property.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst grid = new dhx.Grid(\"grid_container\", {\n    columns: [\n        { \n          id: \"netChange\", header: [{ text: \"Net Change\" }],\n          htmlEnable: true,\n          template: (cellValue, row, column) => {\n            return \"<input type=\\\"checkbox\\\" \" + (cellValue /> 300000 ? \"checked\": \"\")  + \">\";\n          }\n        },\n        // more columns configuration objects\n    ],\n    // more options\n});\n```\n\n----------------------------------------\n\nTITLE: Getting DHTMLX TimePicker Value using getValue() in JavaScript\nDESCRIPTION: This snippet illustrates how to retrieve the current value from a DHTMLX TimePicker using the `getValue()` method. By default (or with `false`), it returns the time as a formatted string (e.g., \"00:39\" for 24-hour format, \"06:00AM\" for 12-hour format). Passing `true` as the `asObject` parameter returns the value as an object containing `hour`, `minute`, and potentially an `AM` boolean property (e.g., `{hour: 0, minute: 39}` or `{hour: 6, minute: 0, AM: true}`).\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/timepicker/usage.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n// return value as a string in the 24-hour format\nconst val1 = timepicker.getValue(); // -> \"00:39\"\n\n// return value as an object in the 24-hour format\nconst val2 = timepicker.getValue(true);// -> {hour: 0, minute: 39}\n\n// return value as a string in the 12-hour format\nconst val3 = timepicker2.getValue(); // -> \"06:00AM\"\n\n// return value as an object in the 12-hour format\nconst val4 = timepicker2.getValue(true); // -> {hour: 6, minute: 0, AM: true}\n```\n\n----------------------------------------\n\nTITLE: Configuring Click Event to Show DatePicker in JavaScript\nDESCRIPTION: Sets up a click event listener on the input element to show the popup with calendar when the input is clicked, positioning the popup relative to the input element.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar2/datepicker.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar dateInput = document.getElementById(\"date-input\");\ndateInput.addEventListener(\"click\", function() {\n    popup.show(dateInput);\n});\n```\n\n----------------------------------------\n\nTITLE: Destroying Grid Instance in JavaScript\nDESCRIPTION: This code snippet demonstrates how to use the destructor() method to remove a Grid instance and release occupied resources. It's a simple one-line call to the method on a grid object.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_destructor_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngrid.destructor();\n```\n\n----------------------------------------\n\nTITLE: Handling Sidebar Collapse Event in JavaScript\nDESCRIPTION: Example showing how to attach an event handler to the beforeCollapse event of a DHTMLX Sidebar. The handler can prevent the sidebar from collapsing by returning false.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/sidebar/api/sidebar_beforecollapse_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsidebar.events.on(\"beforeCollapse\", function() {\n    // your logic here\n    return false;\n});\n```\n\n----------------------------------------\n\nTITLE: Checking Tree Items with JavaScript\nDESCRIPTION: Demonstrates how to check and uncheck tree items using the Tree API methods.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree/work_with_tree.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntree.checkItem(\"history\");\ntree.uncheckItem(\"history\");\n```\n\n----------------------------------------\n\nTITLE: Setting Control States in DHTMLX Toolbar using setState() in JavaScript\nDESCRIPTION: This example demonstrates how to use the setState() method to set values and states of multiple toolbar controls. The method accepts an object with key-value pairs where keys are control IDs and values are the new states to apply.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/toolbar/api/toolbar_setstate_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntoolbar.setState({\n    \"search\": \"Hello\",\n    \"edit\": true,\n    \"align\": \"right\"\n});\n```\n\n----------------------------------------\n\nTITLE: Clearing Form Data with DHTMLX Form API in JSX\nDESCRIPTION: Demonstrates different ways to clear form data using the clear() method. It can clear only form values, only validation, or both depending on the parameter passed.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/work_with_form.md#2025-04-22_snippet_22\n\nLANGUAGE: jsx\nCODE:\n```\n// clears only form validation\nform.clear(\"validation\");\n\n// clears only form values\nform.clear(\"value\");\n\n// clears both form values and validation\nform.clear();\n```\n\n----------------------------------------\n\nTITLE: Firing Grid Events in JavaScript\nDESCRIPTION: Demonstrates how to manually fire grid events using the grid.events.fire() method with custom arguments.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/events.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ngrid.events.fire(\"name\",args);\n// where args is an array of arguments\n```\n\n----------------------------------------\n\nTITLE: Initializing Select Control in DHTMLX Form\nDESCRIPTION: Creates a new Form instance with a Select control. The select control includes multiple options, with customizable properties like label width, control width, and disabled states for options.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/select.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst form = new dhx.Form(\"form_container\", {\n    rows: [\n        {\n            type: \"select\",\n            name: \"select\",\n            label: \"select\",\n            labelWidth: \"50px\",\n            width:\"200px\",\n            options: [\n                {\n                    value: \"1\",\n                    content: \"1\",\n                    disabled: true\n                },\n                {\n                    value: \"2\",\n                    content: \"2\"\n                },\n                {\n                    value: \"3\",\n                    content: \"3\"\n                },\n                {\n                    value: \"4\",\n                    content: \"4\"\n                }\n            ]        \n        }  \n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: Handling beforeColumnShow Event in DHTMLX Grid (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to attach an event handler to the beforeColumnShow event of a DHTMLX Grid. The event fires before a column is shown on the page, allowing custom logic to be executed and potentially preventing the column from being displayed.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_beforecolumnshow_event.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ngrid.events.on(\"beforeColumnShow\", (column) => {\n    // your logic here\n    return false;\n});\n```\n\n----------------------------------------\n\nTITLE: Using setProperties Method for Timepicker in DHTMLX Form\nDESCRIPTION: Demonstrates how to use the setProperties method to dynamically change attributes of a Timepicker control in a DHTMLX Form. This example modifies the editable, label, and timeFormat properties.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/timepicker/timepicker_setproperties_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"timepicker\").setProperties({\n    editable: true, \n    label: \"New time\", \n    timeFormat: 24, \n});\n```\n\n----------------------------------------\n\nTITLE: Setting Single Cell Selection\nDESCRIPTION: Example of selecting a single cell in the Grid with specific configuration for selection and multiselection\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/usage_selection.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst grid = new dhx.Grid(\"grid_container\", {\n    columns: [\n        // columns config\n    ],\n    selection:\"cell\",\n    multiselection: false,\n    data: dataset\n});\n\nconst row = grid.data.getItem(grid.data.getId(0));\nconst column = grid.getColumn(\"yearlyChange\");\ngrid.selection.setCell(row, column);\n```\n\n----------------------------------------\n\nTITLE: Configuring Date Range Selection with Strings\nDESCRIPTION: Initializes a Calendar in range mode with a date range selected using string values for start and end dates.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar/configuring.md#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n// selects dates as an array of string values(for the range mode)\nconst calendar = new dhx.Calendar(\"calendar_container\", {\n    value: ([\"03/06/19\", \"15/06/19\"]),\n    range: true  \n});\n```\n\n----------------------------------------\n\nTITLE: Adding Slider Label\nDESCRIPTION: Initializes a slider with a custom label positioned to the left of the trackbar.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/slider/configuring_slider.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst slider = new dhx.Slider(\"slider_container\", { \n   label:\"Volume\",\n   labelPosition:\"left\"\n});\n```\n\n----------------------------------------\n\nTITLE: Handling DataView canDrop Event in JavaScript\nDESCRIPTION: This snippet demonstrates how to attach an event listener to the canDrop event of a DataView component. The event fires when a dragged item is over a potential target item during a drag-and-drop operation.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/dataview/api/dataview_candrop_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndataview.events.on(\"canDrop\", function(data, events) {\n    // your logic here\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Sorting Function in TreeCollection\nDESCRIPTION: Shows how to implement custom sorting logic using the rule attribute to compare type properties of elements.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree_collection/api/treecollection_sort_method.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\ncomponent.data.sort({\n    rule: (a,b) => (a.type < b.type) ? -1 : ( (a.type > b.type) ? 1 : 0 )\n});\n```\n\n----------------------------------------\n\nTITLE: Handling the 'afterShow' Event for DHTMLX Popup in JavaScript\nDESCRIPTION: This snippet demonstrates how to subscribe to the 'afterShow' event of a DHTMLX Popup instance. The provided callback function is executed after the popup becomes visible, receiving the HTML container element of the popup as an argument. In this example, a message is logged to the console when the event fires.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/popup/api/popup_aftershow_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\npopup.events.on(\"afterShow\", function(element){\n    console.log(\"A popup is shown\");\n});\n```\n\n----------------------------------------\n\nTITLE: DHTMLX Ajax Methods Reference\nDESCRIPTION: Reference table showing the main AJAX methods available in the dhx.ajax object for making HTTP requests to a server. Includes DELETE, GET, POST, and PUT methods.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/ajax/index.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name                          | Description                            |\n| ----------------------------- | -------------------------------------- |\n| [](api/ajax_delete_method.md) | @getshort(api/ajax_delete_method.md)   |\n| [](api/ajax_get_method.md)    | @getshort(api/ajax_get_method.md)      |\n| [](api/ajax_post_method.md)   | @getshort(api/api/ajax_post_method.md) |\n| [](api/ajax_put_method.md)    | @getshort(api/ajax_put_method.md)      |\n```\n\n----------------------------------------\n\nTITLE: Hiding and Showing Sidebar Controls in JavaScript\nDESCRIPTION: Shows how to hide and show specific sidebar controls or all controls using the hide() and show() methods of the DHTMLX Sidebar API.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/sidebar/work_with_sidebar.md#2025-04-22_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nsidebar.hide(id); // hides a control\nsidebar.show(id); // shows a control\n\n// hides all Sidebar controls\nsidebar.hide();\n// shows all Sidebar controls\nsidebar.show();\n```\n\n----------------------------------------\n\nTITLE: Implementing Font Awesome Icons in Sidebar Configuration\nDESCRIPTION: This JavaScript example demonstrates how to use Font Awesome icons in a DHTMLX Sidebar by specifying the icon class names in the sidebar data configuration.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/sidebar/customization.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst sidebarData = [\n    {\n        icon: \"fas fa-bold\",\n        twoState: true,\n        value: \"Bold\"\n    },\n    {\n        icon: \"fas fa-underline\",\n        twoState: true,\n        value: \"Underline\"\n    },\n    {        \n        icon: \"fas fa-italic\",\n        twoState: true,\n        value: \"Italic\"\n    },\n    {\n        icon: \"fas fa-strikethrough\",\n        twoState: true,\n        value: \"Strikethrough\"\n    }\n];\n```\n\n----------------------------------------\n\nTITLE: Showing DHTMLX Form using show() Method\nDESCRIPTION: Simple example demonstrating how to make a Form visible using the show() method. This method takes no parameters and returns void.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/form_show_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.show();\n```\n\n----------------------------------------\n\nTITLE: Handling Chart Resize Event in JavaScript\nDESCRIPTION: This code snippet demonstrates how to attach an event listener to the 'resize' event of a DHTMLX Chart. It logs a message to the console when the chart's size changes. The event provides the new width and height of the chart.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/chart/api/chart_resize_event.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nchart.events.on(\"resize\", function({width:500, height:500}){\n    console.log(\"The size of the chart has changed\");\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving DatePicker Value as String\nDESCRIPTION: Demonstrates how to get the current value from a DatePicker control as a string representation.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/calendar/calendar_getvalue_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst value = form.getItem(\"datepicker\").getValue();\n// -> \"03/06/19\"\n```\n\n----------------------------------------\n\nTITLE: Handling Layout Cell Removal Event in JavaScript\nDESCRIPTION: Example showing how to attach an event handler for the afterRemove event of a Layout component. The event fires after a cell is removed from the layout and provides the id of the removed cell as a parameter.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/layout/api/layout_afterremove_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlayout.events.on(\"afterRemove\", function(id){\n    // your logic here\n});\n```\n\n----------------------------------------\n\nTITLE: Handling beforeHide Event in DHTMLX Form Avatar Control\nDESCRIPTION: Example showing how to attach an event handler to the beforeHide event of an Avatar form control. The handler logs the current value and returns true to allow hiding the control.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/avatar/avatar_beforehide_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"avatar\").events.on(\"beforeHide\", value => {\n    console.log(\"beforeHide\", value);\n    return true;\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Custom HTML Content to DHTMLX Toolbar in JavaScript\nDESCRIPTION: This snippet demonstrates how to add custom HTML content (like an image) to a DHTMLX toolbar using the add() method of Tree Collection. The example creates a customHTML type item with an image and applies a CSS class for styling.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/toolbar/customhtmlbutton.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntoolbar.data.add({\n    type: \"customHTML\",\n    html: \"<img src='../logo.svg' alt=''/>\",\n    css: \"logo-container\"\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Event Handlers to DHTMLX List Template\nDESCRIPTION: Assigns event handlers to HTML elements within a custom List item template using the eventHandlers configuration option.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/list/configuration.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nfunction template(item) {\n    let template = \"<div class='list_item'>\";\n    template += \"<div class='item_name'>\"+item.value;\n    template +=\"<span class='item_author'> by \"\n    template += item.authors.filter(function(item){return item}).join(\", \");\n    template += item.publishedDate ? \", \" \n    template += new Date(item.publishedDate.$date).getFullYear() : \"\";\n    template += \"</span>\";\n    template += \"</div>\";\n    template += \"<span class='item_categories'>\"+item.categories.join(\", \")+\"</span>\";\n    template += \"</div>\";\n    return template;\n}\n\nconst list = new dhx.List(\"list_container\", {\n    css: \"dhx_widget--bordered\",\n    template: template,\n    eventHandlers: { \n        onclick: {\n            list_item: function(event) {\n                console.log(\"You clicked on \" + event.target.tagName);\n            }, \n        },\n        onmouseover: {\n            list_item: function(event, id) { \n                console.log(list.data.getItem(id).value);\n            }, \n        } \n    } \n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Tabbar with Custom Tab Sizes\nDESCRIPTION: Demonstrates setting custom sizes for both individual tabs and global tab dimensions. Individual tab sizes take precedence over global settings.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tabbar/api/tabbar_views_config.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst tabbar = new dhx.Tabbar(\"tabbar_container\",{\n    tabHeight: 50,\n    tabWidth: 80,\n    views:[\n        { tab: \"left\", css:\"panel flex\", header:\"Left\", tabHeight: 45, tabWidth: 100},\n        // other tabs\n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Ribbon Button Configuration Schema - DHTMLX Suite - JavaScript\nDESCRIPTION: This JavaScript code snippet shows the structure of a Ribbon button configuration object for the DHTMLX Suite. It lists all available properties for buttons, indicates which are optional, and provides type hints and comments for clarity. Dependencies include the DHTMLX Suite JavaScript library, and the snippet is typically placed within the UI configuration section of an application. The input is an array of button configuration objects and the output is the properly structured definition used for initializing Ribbon controls in the UI.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/ribbon/api/api_button_properties.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst data = [\n    {\n        type: \"button\",\n        id?: string | number,\n        parent?: string,\n        value?: string,\n        items?: IMenuElement[], // ISpacer | ISeparator | INavItem | IMenuItem | ICustomHTML\n\n        active?: boolean,\n        circle?: boolean,\n        color?: \"danger\" | \"secondary\" | \"primary\" | \"success\",\n        count?: number,\n        countColor?: \"danger\" | \"secondary\" | \"primary\" | \"success\",\n        full?: boolean,\n        group?: string,\n        hotkey?: string,\n        html?: string,\n        icon?: string,\n        loading?: boolean,\n        multiClick?: boolean,\n        size?: \"small\" | \"medium\" | \"auto\",\n        tooltip?: string,\n        twoState?: boolean,\n        view?: \"flat\" | \"link\",\n\n        css?: string,\n        disabled?: boolean,\n        hidden?: boolean,\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Loading Data into TreeCollection in JavaScript\nDESCRIPTION: Demonstrates how to use the load() method to load data from an external XML file into a toolbar's data collection. The method takes a file path and data type as parameters.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree_collection/api/treecollection_load_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntoolbar.data.load(\"[path to this file]/file.xml\", \"xml\");\n```\n\n----------------------------------------\n\nTITLE: Configuring a Column Object for Grouped Data in DHTMLX Grid\nDESCRIPTION: Demonstrates how to define a column for grouped data using an object configuration inside the group property. This approach allows for more detailed configuration of the column that will display grouped data.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/usage.md#2025-04-22_snippet_35\n\nLANGUAGE: jsx\nCODE:\n```\nconst grid = new dhx.Grid(\"grid_container\", {\n    columns: [\n        { id: \"country\", header: [{ text: \"Country\" }], groupable: true },\n        { id: \"city\", header: [{ text: \"City\" }], groupable: true },\n        { id: \"population\", header: [{ text: \"Population\" }] }\n    ],\n    group: {\n        column: {\n            id: \"group\", // defines the id of a column with grouped data\n            sortable: false,\n            tooltip: false,\n        }\n    },\n    data: dataset\n});\n```\n\n----------------------------------------\n\nTITLE: Disabling Menu Items in JavaScript DHTMLX\nDESCRIPTION: This code demonstrates how to use the disable() method to disable single or multiple menu items. It also shows how to disable all menu items at once in DHTMLX Suite v7.0 and later.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/menu/api/menu_disable_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmenu.disable(\"save_btn\");\n// several at a time\nmenu.disable([\"cancel_btn\",\"del_btn\"]);\n\n// disables all Menu items\nmenu.disable();\n```\n\n----------------------------------------\n\nTITLE: Checking Full Screen State with DHTMLX Window in JavaScript\nDESCRIPTION: Demonstrates how to use the isFullScreen() method of a DHTMLX Window object to determine if the window is currently displayed in fullscreen mode. Requires an instantiated dhxWindow object from the DHTMLX Suite. Returns a boolean value: true if the window is in fullscreen mode, false otherwise. No parameters are required; expected output is a boolean, and this method is available from DHTMLX Suite version 7.1 onward.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/window/api/window_isfullscreen_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ndhxWindow.isFullScreen(); // -> true/false\n```\n\n----------------------------------------\n\nTITLE: Attaching Calendar to Popup in JavaScript\nDESCRIPTION: Attaches the calendar instance to the popup using the attach method, which enables the calendar to be displayed inside the popup container.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar2/datepicker.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\npopup.attach(calendar);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Selected Item ID in DHTMLX Components - JavaScript\nDESCRIPTION: Demonstrates how to use the getId() method to retrieve the ID of a selected item from a DHTMLX component. The method returns either a single ID or an array of IDs when multiselection is enabled.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/selection/api/selection_getid_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst id = component.selection.getId(); // -> \"2\"\n```\n\n----------------------------------------\n\nTITLE: Data Structure for Line/Bar/Area Charts in JavaScript\nDESCRIPTION: Example data structure for Line, Spline, Bar, X-Bar, Area, Spline Area, Radar, and Scatter charts showing monthly company data.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/chart/data_loading.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst dataset = [\n    { \"month\": \"`02\", \"company A\": 20, \"company B\": 52, \"company C\": 72},\n    { \"month\": \"`03\", \"company A\": 5, \"company B\": 33, \"company C\": 90},\n    { \"month\": \"`04\", \"company A\": 55, \"company B\": 30, \"company C\": 81},\n    { \"month\": \"`05\", \"company A\": 30, \"company B\": 11, \"company C\": 62},\n    { \"month\": \"`06\", \"company A\": 27, \"company B\": 14, \"company C\": 68},\n    { \"month\": \"`07\", \"company A\": 32, \"company B\": 31, \"company C\": 64},\n    { \"month\": \"`08\", \"company A\": 50, \"company B\": 22, \"company C\": 30},\n    { \"month\": \"`09\", \"company A\": 12, \"company B\": 19, \"company C\": 65},\n    { \"month\": \"`10\", \"company A\": 10, \"company B\": 24, \"company C\": 50},\n    { \"month\": \"`11\", \"company A\": 17, \"company B\": 40, \"company C\": 78}\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring headerAutoHeight in DHTMLX Grid\nDESCRIPTION: This snippet demonstrates how to enable the headerAutoHeight feature in a DHTMLX Grid instance. It allows adjusting the height of the header to fit the content while disabling autoHeight for the data and footer.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_headerautoheight_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst grid = new dhx.Grid(\"grid\", {\n    columns: [\n        // columns config\n    ],\n    data: dataset,\n    autoHeight: false, // disable autoHeight in the data, the header and the footer\n    headerAutoHeight: true // enable autoHeight in the header\n});\n```\n\n----------------------------------------\n\nTITLE: Disabling and Enabling Toolbar Controls\nDESCRIPTION: Methods for disabling and enabling toolbar controls, either by specifying individual control IDs or affecting all controls at once.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/toolbar/common_methods.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ntoolbar.disable(id); // disables a control\ntoolbar.enable(id);  // enables a control\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// disables all Toolbar controls\ntoolbar.disable();\n// enables all Toolbar controls\ntoolbar.enable();\n```\n\n----------------------------------------\n\nTITLE: Handling resize Event Listener in DHTMLX Window - JavaScript\nDESCRIPTION: This snippet demonstrates how to handle the resize event for a DHTMLX Window by adding an event listener in JavaScript. The event callback receives the new and previous window size/position objects, as well as an object indicating which window edge(s) initiated the resize. Dependencies include the DHTMLX Suite JavaScript UI library and an initialized dhxWindow instance. The key parameters are: state (new size/position), oldState (previous size/position), and side (resizing directions). The callback logs the current window position and dimensions when the resize occurs. Expected input is triggered by user interaction or API resize; output is a console log. Limited to supported DHTMLX Window instances.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/window/api/window_resize_event.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ndhxWindow.events.on(\"resize\", function(state, oldState, side) {\n    console.log(\"The window is resized\" + state.left, state.top, \n                state.width, state.height)\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Disabled Dates\nDESCRIPTION: Creates a Calendar with specific days of the week disabled using a function that evaluates each date and returns a boolean value. Sunday, Monday, and Saturday are disabled in this example.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar/configuring.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst calendar = new dhx.Calendar(\"calendar_container\", {\n    disabledDates: function(date) {\n        const disabled = {\n            0: true,\n            1: true,\n            2: false,\n            3: false,\n            4: false,\n            5: false,\n            6: true\n        }\n        return disabled[date.getDay()];\n    },\n    css: \"dhx_widget--bordered\"\n});\n```\n\n----------------------------------------\n\nTITLE: Changing Radiogroup Configuration in JavaScript\nDESCRIPTION: This snippet demonstrates how to use setProperties() to modify various attributes of a Radiogroup control, including label, label position, help message, and options.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/radiogroup/radiogroup_setproperties_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"radiogroup\").setProperties({\n    label: \"New label\",\n    labelPosition: \"top\",\n    helpMessage: \" Help information\",\n    options: {\n        rows: [\n            {\n                id: \"first\",\n                type: \"radioButton\",\n                text: \"Select 1\",\n                value: \"1\",\n            },\n            {\n                id: \"second\",\n                type: \"radioButton\",\n                text: \"Select 2\",\n                value: \"2\"\n            },\n            {\n                id: \"third\",\n                type: \"radioButton\",\n                text: \"Select 3\",\n                value: \"3\"\n            }\n        ]\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX Grid with Groupable Configuration\nDESCRIPTION: Example showing how to initialize a DHTMLX Grid with groupable functionality enabled. The grid is configured with columns for country data and includes both group and groupable properties.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_groupable_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst grid = new dhx.Grid(\"grid_container\", {\n    columns: [\n        { width: 150, id: \"country\", header: [{ text: \"Country\" }] },\n        { width: 150, id: \"population\", header: [{ text: \"Population\" }] },\n        { width: 150, id: \"destiny\", header: [{ text: \"Density (P/Km²)\" }] },\n        { width: 150, id: \"area\", header: [{ text: \"Land Area (Km²)\" }] },\n    ],\n    group: true,\n    groupable: true,\n    data: dataset\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Text Control in DHTMLX Form\nDESCRIPTION: Creates a new form instance with a Text control. The control includes basic configuration with name, label, and initial value properties.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/text.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst form = new dhx.Form(\"form_container\", {\n    rows: [\n        {\n            type: \"text\",\n            name: \"text\",\n            label: \"text\",                        \n            value: \"I am a nice text\"\n        }\n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Calendar Component View in DHTMLX Optimus\nDESCRIPTION: Demonstrates how to create a view based on DHTMLX Calendar component with lifecycle methods. The example shows initialization, ready and destroy event handling in the component lifecycle.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/optimus_guides/index.md#2025-04-22_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nimport { View } from \"dhx-optimus\";\n\nexport class CalendarView extends View {\n    init() {\n        return new dhx.Calendar(null, {\n            value: new Date,\n        });\n    }\n    ready() {\n        console.log(\"Calendar is ready\");\n    }\n    destroy() {\n        console.log(\"Calendar is destroy\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Calendar and Popup Components in JavaScript\nDESCRIPTION: Creates Calendar and Popup objects. The Calendar is initialized with null as container parameter since it will be attached to a popup, and configured with a specific date format.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar2/datepicker.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar calendar = new dhx.Calendar(null, {dateFormat: \"%d/%m/%y\"});\nconst popup = new dhx.Popup();\n```\n\n----------------------------------------\n\nTITLE: Adding a MenuItem with Sub-items to DHTMLX Toolbar in JavaScript\nDESCRIPTION: This example demonstrates how to dynamically add a `menuItem` to an existing DHTMLX Toolbar instance (`toolbar`) using the `toolbar.data.add()` method in JavaScript. The added item specifies its `type` as \"menuItem\", includes a `value` for display text, a `tooltip`, and defines a nested menu structure using the `items` array. This array contains sub-`menuItem` objects and a `separator` type for visual grouping.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/toolbar/api/api_menuitem_properties.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\ntoolbar.data.add(\n    {\n        type:\"menuItem\", \n        value:\"Toolbar menuItem\", \n        tooltip: \"Press me\",  \n        items:[\n            { type:\"menuItem\", value:\"Option 1\" },\n            { type:\"menuItem\", value:\"Option 2\" },\n            { type:\"separator\"},\n            { type:\"menuItem\", value:\"Option Infinite\" }\n        ]\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Aggregation and Summary via `group.fields` in dhtmlx Grid (JSX)\nDESCRIPTION: Demonstrates using `group.fields` to define advanced grouping configuration for specific columns ('population'). It specifies that the summary row should appear at the `bottom` and defines aggregation rules using `map`: summing the 'population' field and calculating a custom summary using a function. The `group.order` property applies the grouping. Requires the dhtmlx Grid library and a dataset.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/usage.md#2025-04-22_snippet_29\n\nLANGUAGE: jsx\nCODE:\n```\nconst grid = new dhx.Grid(\"grid_container\", {\n    columns: [\n        { id: \"country\", header: [{ text: \"Country\" }] },\n        { id: \"population\", header: [{ text: \"Population\" }] },\n        { id: \"density\", header: [{ text: \"Density (P/Km²)\" }] }\n    ],\n    group: {\n        panel: true,\n        fields: {\n            population: {\n                summary: \"bottom\",\n                map: {\n                    population: [\"population\", \"sum\"],\n                    customSummary: function(rows) {\n                        return rows.length;\n                    }\n                }\n            }\n        },\n        order: [\"population\"]\n    },\n    groupable: true,\n    data: dataset\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Combo Control Value in JavaScript\nDESCRIPTION: This code snippet shows how to retrieve the value of a Combo control in a DHTMLX Form using the getItem() and getValue() methods.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/combo.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst value = form.getItem(\"Combo\").getValue();\n```\n\n----------------------------------------\n\nTITLE: Editing Tree Items\nDESCRIPTION: Shows how to enable item editing with different modes including text and select options.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree/work_with_tree.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ntree.events.on(\"itemDblClick\", function (id) {\n    tree.editItem(id,{ mode: \"select\", options: [1, 2, 3, 4, 5] });\n});\n```\n\n----------------------------------------\n\nTITLE: Handling itemRightClick Event in DHTMLX Tree (JavaScript)\nDESCRIPTION: This snippet demonstrates how to attach an event listener for the itemRightClick event on a DHTMLX Tree component. It logs a message to the console when a tree item is right-clicked, including the id of the clicked item.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree/api/tree_itemrightclick_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntree.events.on(\"itemRightClick\", function(id, e){\n    console.log(\"The item with the id \"+ id +\" was right-clicked.\");\n});\n```\n\n----------------------------------------\n\nTITLE: Using unselect() Method in DHTMLX Toolbar in JavaScript\nDESCRIPTION: This example demonstrates how to use the unselect() method in DHTMLX Toolbar. It shows two use cases: unselecting all previously selected items and unselecting a specific item by its ID.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/toolbar/api/toolbar_unselect_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// unselects all previously selected items\ntoolbar.unselect();\n \n// unselects a specified selected item\ntoolbar.unselect(\"web\");\n```\n\n----------------------------------------\n\nTITLE: Unchecking Tree Items in JavaScript DHTMLX\nDESCRIPTION: Demonstrates how to check and uncheck items in a DHTMLX Tree component. The method takes an item ID as a parameter and unchecks both the specified item and all its sub-items.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree/api/tree_uncheckitemnew_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// checking an item\ntree.checkItem(\"history\");\n\n// unchecking an item \ntree.uncheckItem(\"history\");\n```\n\n----------------------------------------\n\nTITLE: Enabling/Disabling Datepicker Control in DHTMLX Toolbar\nDESCRIPTION: Shows how to enable or disable a Datepicker control by using the enable() and disable() methods of Toolbar with the control's ID.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/toolbar/datepicker.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ntoolbar.enable(id);\ntoolbar.disable(id);\n```\n\n----------------------------------------\n\nTITLE: Using getProperties() Method with Text Control in DHTMLX Form\nDESCRIPTION: This example demonstrates how to initialize a Form with a Text control and retrieve its properties using the getProperties() method. The method returns an object containing all available configuration attributes of the Text control.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/text/text_getproperties_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst form = new dhx.Form(\"form_container\", {\n    rows: [\n        {\n            type: \"text\",\n            name: \"text\",\n            label: \"text\",                      \n            value: \"I am a nice text\"\n        }\n    ]\n});\n\nform.getItem(\"text\").getProperties();\n```\n\n----------------------------------------\n\nTITLE: Handling beforeOpen Event in DHTMLX Combo Box\nDESCRIPTION: This snippet demonstrates how to attach an event handler to the beforeOpen event of a DHTMLX Combo Box. The event fires before opening the list of options and can be used to prevent the list from opening by returning false.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/combobox/api/combobox_beforeopen_event.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ncombo.events.on(\"beforeOpen\", function() {\n    // your logic here\n    return false;\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Tree with Custom Folder Definition\nDESCRIPTION: Example demonstrating how to configure a Tree component with custom folder definition logic using the isFolder property to prevent incorrect folder behavior when autoload is blocked.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree_collection/api/treecollection_beforeitemload_event.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst tree = new dhx.Tree(\"tree_container\", {\n    isFolder: obj => obj.items,\n    autoload:\"https://docs.dhtmlx.com/suite/backend/autoload\"\n});\n```\n\n----------------------------------------\n\nTITLE: Binding dragOut Event Handler in DHTMLX Tree\nDESCRIPTION: This code example demonstrates how to attach an event handler to the dragOut event of a DHTMLX Tree. This event fires when an item is dragged out of a potential target during drag-and-drop operations.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree/api/tree_dragout_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntree.events.on(\"dragOut\", function(data, events) {\n    // your logic here\n});\n```\n\n----------------------------------------\n\nTITLE: Managing ComboBox Focus in JavaScript\nDESCRIPTION: Shows how to set and remove focus from a ComboBox input using the focus() and blur() methods respectively.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/combobox/work_with_combo.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ncombo.focus();\n\ncombo.blur();\n```\n\n----------------------------------------\n\nTITLE: Getting Total Number of Pages - DHTMLX Pagination API - JavaScript\nDESCRIPTION: Obtains the total number of available pages in the widget using getPagesCount(). Returns an integer that denotes the count of pages and requires a configured pagination object. This is useful for dynamic page navigation and UI updates.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/pagination/usage.md#2025-04-22_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst totalPages = pagination.getPagesCount();\n// -> 10\n```\n\n----------------------------------------\n\nTITLE: Getting Input Value from DHTMLX Form in JavaScript\nDESCRIPTION: This snippet shows how to retrieve the value of an Input control in a DHTMLX Form using the getItem() method followed by getValue().\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/input.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst value = form.getItem(\"input\").getValue();\n```\n\n----------------------------------------\n\nTITLE: Adding New Grid Item\nDESCRIPTION: Handles the creation of new grid items when the form submission has an empty ID. Includes ID generation and data collection update.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tutorial/binding_components/step2.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nif (item.id == \"\"){\n    item.id = grid.data.getLength() + 1;\n    item.modified = getFormatDate();  \n    grid.data.add(item, 0);     \n    dhxWindow.hide();\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Confirm Box Response in JavaScript\nDESCRIPTION: Demonstrates how to use a callback function with a Promise to handle the user's response to a confirm box.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/message/configuration.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ndhx.confirm({\n    header: \"confirm the action\",\n    text: \"can you apply?\",\n    buttons: [\"cancel\", \"apply\"]\n}).then(function(answer){\n    if (answer){\n        console.log(\"confirmed\")\n    }\n    else {\n        console.log(\"cancelled\")\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Including DHTMLX Layout Source Files in HTML\nDESCRIPTION: This code snippet shows how to include the necessary JavaScript and CSS files for DHTMLX Layout in an HTML file. It uses relative paths to the suite.js and suite.css files.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/layout/initialization.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"text/javascript\" src=\"../../codebase/suite.js\"></script>\n<link rel=\"stylesheet\" href=\"../../codebase/suite.css\">\n```\n\n----------------------------------------\n\nTITLE: Adding a DHTMLX Ribbon Button Dynamically (JavaScript)\nDESCRIPTION: Shows how to dynamically add a Button control to a specific block within an existing DHTMLX Ribbon instance using the `ribbon.data.add()` method. The first argument is the button configuration object, the second (`-1`) indicates adding it to the end, and the third is the ID of the target block.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/ribbon/button.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nribbon.data.add({\n    type:\"button\", value:\"Best button\"\n},-1,\"blockId\");\n```\n\n----------------------------------------\n\nTITLE: Iterating Through Child Items Using eachChild Method in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the eachChild() method to iterate through child items of a control in a toolbar. It disables all child items of a specific menu item and then repaints the toolbar to apply the changes.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree_collection/api/treecollection_eachchild_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ntoolbar.data.eachChild(\"menu_1\", item => {\n    // disable items\n    item.$disabled = true;\n});\ntoolbar.paint();\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Locale to DHTMLX Grid in JavaScript\nDESCRIPTION: This snippet shows how to apply a custom locale to the DHTMLX Grid. It uses the dhx.i18n.setLocale() method to set the locale before initializing the Grid component.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/localization.md#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\ndhx.i18n.setLocale(\"grid\", de);\nconst grid = new dhx.Grid(\"grid_container\");\n```\n\n----------------------------------------\n\nTITLE: Initializing Tabbar with activeTab Config in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a new Tabbar instance with the activeTab configuration. It sets the third tab (id: '3') as active and defines multiple tab views with different properties.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tabbar/api/tabbar_activetab_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst tabbar = new dhx.Tabbar(\"tabbar_container\", {\n    activeTab:\"3\",\n    mode: \"top\",\n    views:[\n        { id:\"1\", tab: \"leftside\", css:\"panel flex\", header:\"Left\"},\n        { id:\"2\", tab: \"west\", css:\"panel flex\", header:\"West\"},\n        { id:\"3\", tab: \"east\", css:\"panel flex\", header:\"East\"},\n        { id:\"4\", tab: \"right\", css:\"panel flex\", header:\"Right\" }\n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Colors in JavaScript ColorPicker\nDESCRIPTION: Shows how to set custom colors in the ColorPicker palette using the setCustomColors() method. Custom colors are provided as an array of Hex color codes.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/colorpicker/manipulating_colorpicker.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncolorpicker.setCustomColors([\"#f2f2f2\",\"#8ac5d9\",\"#ec9875\",\"#7a8523\"]);\n```\n\n----------------------------------------\n\nTITLE: Clearing a CheckboxGroup in DHTMLX Form (JavaScript)\nDESCRIPTION: This example demonstrates how to clear the value of a CheckboxGroup control in a DHTMLX Form. The clear() method resets all selected checkboxes within the group to an unchecked state.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/checkbox_group/checkboxgroup_clear_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"CheckboxGroup\").clear();\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX Toolbar in HTML\nDESCRIPTION: A complete HTML example showing how to initialize a basic DHTMLX Toolbar by including required files, creating a container, and instantiating the toolbar object.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/toolbar/how_to_start.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n    <head>\n        <title>How to Start with DHTMLX Toolbar</title>         \n        <script type=\"text/javascript\" src=\"../../codebase/suite.js\"></script>\n        <link rel=\"stylesheet\" href=\"../../codebase/suite.css\">\n    </head>\n    <body>\n        <div id=\"toolbar_container\"></div>\n        <script>\n            // creating DHTMLX Toolbar\n            const toolbar = new dhx.Toolbar(\"toolbar_container\");\n        </script>\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Loading External Data After Initialization\nDESCRIPTION: Shows how to load data from an external JSON file into a DHTMLX Combo Box after initialization using the load() method.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/combobox/adding_options.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst combo = new dhx.Combo(\"combo_container\");\ncombo.data.load(\"../common/dataset.json\");\n```\n\n----------------------------------------\n\nTITLE: Initializing Toggle Control with Icons in DHTMLX Form\nDESCRIPTION: Example showing how to create a Form with a Toggle control that includes custom icons for enabled and disabled states, then retrieve its properties.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/toggle/toggle_getproperties_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst form = new dhx.Form(\"form_container\", {\n    rows: [\n        {\n            type: \"toggle\",\n            // renders an icon in the enabled state\n            icon: \"dxi dxi-eye\",\n            // renders an icon in the disabled state\n            offIcon: \"dxi dxi-eye-off\"\n        },\n    ]\n});\n\nform.getItem(\"toggle\").getProperties();\n```\n\n----------------------------------------\n\nTITLE: Handling Click Event in DHTMLX Menu (JavaScript)\nDESCRIPTION: This snippet demonstrates how to attach an event listener for the 'click' event on a DHTMLX Menu instance. It logs the ID of the clicked menu item to the console.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/menu/api/menu_click_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmenu.events.on(\"click\", function(id,e){\n    console.log(id);\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Tree State in JavaScript with DHTMLX\nDESCRIPTION: Demonstrates how to get the current state of a tree and then restore it using the setState() method. This is useful for preserving the tree's expanded/collapsed state and checkbox selections.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree/api/tree_setstate_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// getting the state of a tree\nconst treeState = tree.getState();\n\n// restoring the state of a tree\ntree.setState(treeState);\n```\n\n----------------------------------------\n\nTITLE: Changing Button Properties in DHTMLX Form\nDESCRIPTION: This code snippet demonstrates how to use the setProperties() method to dynamically change the size and view of a button in a DHTMLX Form. It sets the size to 'small' and changes the view to 'link'.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/button/button_setproperties_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nform.getItem(\"button\").setProperties({\n    size: \"small\", \n    view: \"link\"\n});\n```\n\n----------------------------------------\n\nTITLE: Handling loadError Event in JavaScript TreeCollection\nDESCRIPTION: This snippet demonstrates how to attach an event handler to the loadError event of a TreeCollection component. The event fires when data loading fails, providing information about the error.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree_collection/api/treecollection_loaderror_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncomponent.data.events.on(\"loadError\", function(response){\n    // your code here\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Grid Header Filter Configuration\nDESCRIPTION: Demonstrates two use cases of the getFilter() method - retrieving a Combobox configuration and an HTML object from different header filters. The method returns either a complete Combobox object or an HTML element object depending on the filter type.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/headerfilter/getfilter_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst filter1 = grid.getHeaderFilter(\"country\").getFilter();\nconsole.log(filter1);\n// -> returns Combobox\n//  {config: {…}, _uid: 'u1670500020936', events: o, data: d, popup: f, …}\n\n\nconst filter2 = grid.getHeaderFilter(\"netChange\").getFilter();\nconsole.log(filter2);\n// -> returns an HTML object\n// {type: 1, attrs: {…}, tag: 'div', _class: 'dhx_grid-filter__label dxi dxi-magnify', \n// ref: 'netChange_filter', …}\n```\n\n----------------------------------------\n\nTITLE: Setting Values for Slider Control in DHTMLX Form in JavaScript\nDESCRIPTION: Demonstrates how to use the setValue() method to set values for a Slider control in DHTMLX Form. Shows examples for both single value and range sliders.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/slider/slider_setvalue_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"slider\").setValue([2]);\n// or\nform.getItem(\"slider\").setValue([2,10]);\n```\n\n----------------------------------------\n\nTITLE: Disabling Specific Dates\nDESCRIPTION: Disables certain dates in the calendar by providing a function to the disabledDates property. This example disables Sundays, Mondays, and Saturdays.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar2/configuring.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar calendar = new dhx.Calendar(\"calendar\", {\n    disabledDates: function(date) {\n        var disabled = {\n            0: true,\n            1: true,\n            2: false,\n            3: false,\n            4: false,\n            5: false,\n            6: true\n        }\n        return disabled[date.getDay()];\n    },\n    css: \"dhx_widget--bordered\"\n});\n```\n\n----------------------------------------\n\nTITLE: Adding a New Tab to a JavaScript Tabbar\nDESCRIPTION: This code snippet demonstrates how to use the addTab() method to add a new tab to a DHTMLX Tabbar. It creates a tab with a dynamic name and CSS classes, and inserts it at the beginning of the tabbar.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tabbar/api/tabbar_addtab_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ntabbar.addTab({tab: \"tab-\" + nextTab++, css:\"panel flex\"}, 0);\n```\n\n----------------------------------------\n\nTITLE: Handling DataView beforeEditStart Event in JavaScript\nDESCRIPTION: Example showing how to attach an event handler to the beforeEditStart event of a DataView component. The handler can control whether editing should proceed by returning true or false.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/dataview/api/dataview_beforeeditstart_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndataview.events.on(\"beforeEditStart\", function(id){\n    // your logic here\n    return false;\n});\n```\n\n----------------------------------------\n\nTITLE: Showing Calendar in Different View Modes\nDESCRIPTION: Examples demonstrating how to use showDate method with different modes: month view, current month, year view, and current year.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar2/api/calendar_showdate_method.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// shows the month of the specified date\ncalendar.showDate(new Date(2020,11,12),\"month\");\n\n// shows the current month\ncalendar.showDate(null,\"month\");\n\n// shows the current year together with previous/next years\ncalendar.showDate(new Date(2020,11,12),\"year\");\n\n// shows the current year\ncalendar.showDate(null,\"year\");\n```\n\n----------------------------------------\n\nTITLE: Handling beforeRowHide Event in DHTMLX Grid\nDESCRIPTION: This snippet demonstrates how to attach an event handler to the beforeRowHide event of a DHTMLX Grid. The event fires before a row is hidden and allows preventing the row from being hidden by returning false.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_beforerowhide_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngrid.events.on(\"beforeRowHide\", (row) => {\n    // your logic here\n    return false;\n});\n```\n\n----------------------------------------\n\nTITLE: Binding Context Menu Events to DHTMLX Grid\nDESCRIPTION: Event handler for context menu items to trigger edit and delete operations on the grid.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tutorial/binding_components/step6.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ncontextMenu.events.on(\"Click\", function(id,e){\n    switch(id) {\n        case 'edit': {\n            openEditWindow(grid.selection.getCell().row);\n            break;\n        }\n        case 'delete': {\n            deleteItem();\n            break;\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Adding New Controls to Sidebar in JavaScript\nDESCRIPTION: Shows how to add new controls to an initialized sidebar using the add() method of the Tree Collection API in DHTMLX.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/sidebar/work_with_sidebar.md#2025-04-22_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nsidebar.data.add({\n    type:\"navItem\", value:\"Music\"\n});\nsidebar.data.add({\n    type:\"separator\"\n});\nsidebar.data.add({\n    type:\"menuItem\", value:\"Photos\"\n});\n```\n\n----------------------------------------\n\nTITLE: Getting ID of Selected Item in JavaScript List\nDESCRIPTION: Retrieves the ID of the currently selected item in the List using the getId() method of the selection object.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/list/usage_selection.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst selected = list.selection.getId(); // -> \"2\"\n```\n\n----------------------------------------\n\nTITLE: Enabling a Fieldset Control in DHTMLX Form\nDESCRIPTION: This code demonstrates how to enable a previously disabled Fieldset control in a DHTMLX Form by accessing the Fieldset item and calling its enable() method.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/fieldset/fieldset_enable_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"fieldset\").enable();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Selected Value from Combo Box in JavaScript\nDESCRIPTION: This example demonstrates how to use the getValue() method to retrieve the ID of the currently selected option in a Combo Box control when multiselection is disabled or not specified.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/combo/combo_getvalue_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst value = form.getItem(\"combo\").getValue();\n// -> \"id_2\"\n```\n\n----------------------------------------\n\nTITLE: Attaching a Click Event Listener to DHTMLX Popup (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates how to attach an event listener to the 'click' event of a DHTMLX Popup instance using the `events.on()` method. The provided callback function receives the native mouse event object (`e`) as an argument when the popup is clicked, allowing developers to implement custom logic within the handler.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/popup/api/popup_click_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\npopup.events.on(\"click\",function(e){\n    // your logic here\n});\n```\n\n----------------------------------------\n\nTITLE: Disabling Fieldset Control in DHTMLX Form (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to disable a Fieldset control within a DHTMLX Form using the disable() method. It retrieves the Fieldset item by its ID and then calls the disable() method on it.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/fieldset/fieldset_disable_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nform.getItem(\"fieldset\").disable();\n```\n\n----------------------------------------\n\nTITLE: Getting All States of Toolbar Controls with DHTMLX getState - JavaScript\nDESCRIPTION: This example shows calling getState on a DHTMLX Toolbar without any parameters, which returns an object where each key is the id of a control and each value is its current value or state. This is useful for retrieving a full snapshot of the current Toolbar state. Requires an initialized DHTMLX Toolbar instance; no arguments are passed. The output is an object suitable for state inspection or serialization.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/toolbar/api/toolbar_getstate_method.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst state2 = toolbar.getState(); \n// -> {\"search\":\"toolbar\",\"edit\":true,\"align\":\"right\"}\n```\n\n----------------------------------------\n\nTITLE: Handling blur Event in DHTMLX Colorpicker Control\nDESCRIPTION: This example demonstrates how to attach an event handler to the blur event of a Colorpicker control in a DHTMLX form. The event fires when the Colorpicker loses focus and provides the current value as a parameter.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/colorpicker/colorpicker_blur_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"colorpicker\").events.on(\"blur\", (value) => {\n    console.log(\"blur\", value);\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX Sidebar with Data Configuration\nDESCRIPTION: Example showing how to initialize a DHTMLX Sidebar component with data configuration. The data property accepts an array of objects, where each object represents a sidebar item with unique ID, display value, and icon.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/sidebar/api/sidebar_data_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst sidebar = dhx.Sidebar(\"sidebar_container\", {\n    data: [\n        {\n            \"id\": \"dashboard\",\n            \"value\": \"Dashboard\",\n            \"icon\": \"mdi mdi-view-dashboard\"\n        },\n        {\n            \"id\": \"statistics\",\n            \"value\": \"Statistics\",\n            \"icon\": \"mdi mdi-chart-line\"\n        }\n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: Alternative Approach to Handling Asynchronous Data Loading in JavaScript\nDESCRIPTION: Demonstrates an alternative method to handle asynchronous data loading using the loadData property, which executes a callback function after the asynchronous data loading has completed.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree_collection/api/treecollection_load_method.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ntoolbar.data.load(url);\ntoolbar.data.loadData.then(function(){\n    //do something after load;\n});\n// loadData executes a callback function after an asynchronous\n// data loading has completed\n```\n\n----------------------------------------\n\nTITLE: Initializing Calendar with 12-hour Time Format\nDESCRIPTION: Demonstrates how to initialize a DHTMLX Calendar with timePicker enabled and set to 12-hour time format. The timeFormat property accepts either 12 or 24 as values to specify the desired time display format.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar2/api/calendar_timeformat_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar calendar = new dhx.Calendar(\"calendar_container\", {\n    timePicker: true,\n    timeFormat: 12\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring autoWidth for Grid Columns in JavaScript\nDESCRIPTION: This snippet demonstrates how to set the autoWidth property for a column in a DHTMLX Grid. It shows the usage within the columns configuration array when initializing a new Grid instance.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/gridcolumn_properties/gridcolumn_autowidth_property.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst grid = new dhx.Grid(\"grid_container\", {\n    columns: [\n        { id: \"country\", header: [{ text: \"Country\" }], autoWidth: false },\n        // more columns configuration objects\n    ],\n    autoWidth: true,\n    // more options\n});\n```\n\n----------------------------------------\n\nTITLE: Detaching Event Listeners in DHTMLX Tree\nDESCRIPTION: Shows how to attach and then detach event listeners from a Tree component using the tree.events.detach() method.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree/events_handling.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ntree.events.on(\"itemClick\", function(id, e){\n    console.log(\"The item with the id \"+ id +\" was clicked.\");\n});\n\ntree.events.detach(\"itemClick\");\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX List with Data\nDESCRIPTION: Example of creating a new DHTMLX List instance and loading data during initialization using the 'data' configuration property.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/list/load_data.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst list = new dhx.List(\"list_container\", {\n    css: \"dhx_widget--bordered\",\n    template: template,\n    itemHeight: 72,\n    data: dataset\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing afterCollapse Event Handler in DHTMLX Grid\nDESCRIPTION: Example of initializing a Grid component in TreeGrid mode and adding an event listener for the afterCollapse event. The event fires after a row containing child rows is collapsed.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_aftercollapse_event.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst grid = new dhx.Grid(\"grid_container\", {\n    type: \"tree\",\n    columns: [\n       // columns config\n    ],\n    data: dataset,\n});\n\ngrid.events.on(\"afterCollapse\", (rowId) => {\n    // your logic here\n});\n```\n\n----------------------------------------\n\nTITLE: Handling ComboBox Popup Events in JavaScript\nDESCRIPTION: Illustrates how to attach event handlers for showing and hiding the ComboBox popup, including beforeShow, afterShow, beforeHide, and afterHide events.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/combobox/work_with_combo.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ncombo.popup.events.on(\"BeforeShow\", function(HTMLElement){\n    console.log(\"A popup will be shown\");\n    return true;                \n});\n\ncombo.popup.events.on(\"AfterShow\", function(HTMLElement){\n    console.log(\"A popup is shown\");                \n});\n\ncombo.popup.events.on(\"BeforeHide\", function(fromOuterClick,e){\n    console.log(\"A popup will be hidden\");\n    return true;                \n});\n\ncombo.popup.events.on(\"AfterHide\", function(e){\n    console.log(\"A popup is hidden\");            \n});\n```\n\n----------------------------------------\n\nTITLE: Attaching HTML Content to DHTMLX Window using JavaScript\nDESCRIPTION: This snippet demonstrates how to create a DHTMLX Window instance and attach raw HTML content to it using the `attachHTML()` method. The method takes a string containing the HTML markup as its parameter. Finally, `dhxWindow.show()` makes the window visible.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/window/usage.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst dhxWindow = new dhx.Window({title: \"Window\"});\nconst html = \"<h1>Header</h1><p>paragraph</p>\";\ndhxWindow.attachHTML(html);\ndhxWindow.show();\n```\n\n----------------------------------------\n\nTITLE: Using rootId with Layout and Autoload in DHTMLX Tree (JavaScript)\nDESCRIPTION: This complex example demonstrates how to use the rootId property when rendering a tree in a layout cell and using the autoload option. It shows the initialization of a Layout component, setting up a Tree with autoload and rootId, and attaching the Tree to a Layout cell.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree/api/tree_rootid_config.md#2025-04-22_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst layout = new dhx.Layout(\"layout\", {\n    type: \"space\",\n    rows: [\n        {\n            id: \"tree\"\n        }\n    ]\n});\n\nconst ROOT_ID = \"tree\";\nconst tree = new dhx.Tree(null, {\n    autoload: \"https://docs.dhtmlx.com/suite/backend/autoload\",\n    rootId: ROOT_ID\n});\ntree.data.load(`https://docs.dhtmlx.com/suite/backend/autoload/?id=${ROOT_ID}`);\n\nlayout.getCell(\"tree\").attach(tree);\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX Window with Custom Height\nDESCRIPTION: Demonstrates how to create a new Window instance with a specified height value. The height is set to 250 pixels, overriding the default behavior of 50% browser window height.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/window/api/window_height_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst dhxWindow = new dhx.Window({\n    height:250\n});\n\ndhxWindow.show();\n```\n\n----------------------------------------\n\nTITLE: Detaching Event Listener from Calendar in JavaScript\nDESCRIPTION: Illustrates how to detach an event listener from the 'change' event of a Calendar object using the events.detach() method. This removes the previously attached listener.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar/handling_events.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncalendar.events.on(\"change\",function(date, oldDate, byClick){\n    console.log(\"Change selection from \"+oldDate+\" to \"+date);\n    console.log(click);\n});\ncalendar.events.detach(\"change\");\n```\n\n----------------------------------------\n\nTITLE: Handling afterValidate Event for Radiogroup in DHTMLX Form (JavaScript)\nDESCRIPTION: This snippet demonstrates how to attach an event handler to the afterValidate event of a Radiogroup control in a DHTMLX Form. The event fires after the control value is validated, providing the validated value and the validation result.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/radiogroup/radiogroup_aftervalidate_event.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nform.getItem(\"radiogroup\").events.on(\"afterValidate\", function(value, isValidate) {\n    console.log(\"afterValidate\", value, isValidate);\n});\n```\n\n----------------------------------------\n\nTITLE: Attaching afterHide Event Handler to Form in JavaScript\nDESCRIPTION: This code snippet demonstrates how to attach an event handler for the afterHide event of a Form control. The handler logs the name and value of the hidden control to the console.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/form_afterhide_event.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nform.events.on(\"afterHide\", function(name, value) {\n    console.log(\"afterHide\", name, value); \n});\n```\n\n----------------------------------------\n\nTITLE: Changing Item ID in DataCollection using changeId Method (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to use the changeId() method of a DataCollection component to change the id of an item. It takes the old id as the first parameter and the new id as the second parameter.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/data_collection/api/datacollection_changeid_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ncomponent.data.changeId(\"1\", \"22\");\n```\n\n----------------------------------------\n\nTITLE: Getting Selected Date\nDESCRIPTION: Demonstrates how to get the currently selected date from the calendar, either as a string (default) or as a Date object by passing true to the getValue method.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar/operating_calendar.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst date1 = calendar.getValue(); // -> \"20/08/19\"\n\nconst date2 = calendar.getValue(true); // -> Tue Aug 20 2019 00:00:00 GMT+0300 \n```\n\n----------------------------------------\n\nTITLE: ToggleGroup Configuration Properties Structure\nDESCRIPTION: Shows the structure of available configuration properties for the ToggleGroup control.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/togglegroup/togglegroup_setproperties_method.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    css: string,\n    full: boolean,\n    gap: number,\n    height: string | number|\"content\",\n    multiselection: boolean,\n    options: object[],\n    padding: string | number,\n    width: string|number|\"content\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Resizable Window in DHTMLX Suite - JavaScript\nDESCRIPTION: This code demonstrates how to instantiate a DHTMLX Window with the 'resizable' option enabled using JavaScript. The window will allow the user to adjust its size dynamically. To use this code, the 'dhx.Window' class from the DHTMLX Suite library must be available in the runtime environment. The 'resizable' boolean parameter enables or disables window resizing (default: false). Inputs include window configuration properties, and the expected output is a visible, user-resizable window object rendered on the page. Note: Ensure DHTMLX Suite is included in your project before using this functionality.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/window/api/window_resizable_config.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst dhxWindow = new dhx.Window({\n    resizable:true\n});\n\ndhxWindow.show();\n```\n\n----------------------------------------\n\nTITLE: Initializing DataView with Data Configuration in JavaScript\nDESCRIPTION: This snippet demonstrates how to initialize a DataView component with a predefined set of data objects. Each object represents an item in the dataview with properties for value, short description, and thumbnail image.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/dataview/api/dataview_data_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst dataview = new dhx.DataView(\"dataview_container\", {\n    data: [\n        {\n            \"value\": \"Ben\",\n            \"short\": \"Ben is a very cautious 5-year-old Siberian Husky.\",\n            \"thumbnailName\": \"01.jpg\"\n        },\n        {\n            \"value\": \"Izzy\",\n            \"short\": \"This is our most beloved kingfisher bird Izzy.\",\n            \"thumbnailName\": \"02.jpg\"\n        },\n        {\n            \"value\": \"Momo\",\n            \"short\": \"Momo is a 25-year-old elephant with a big heart.\",\n            \"thumbnailName\": \"03.jpg\"\n        }\n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring TreeGrid Drag Expand Behavior\nDESCRIPTION: Configuration to disable automatic expansion of collapsed rows during drag-and-drop operations.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/treegrid_mode.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nconst grid = new dhx.Grid(\"grid_container\", {\n    type: \"tree\",\n    columns: [\n        // columns config\n    ],\n    dragItem: \"row\",\n    dragExpand: false,\n    data: dataset\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Color Change Event in DHTMLX Colorpicker\nDESCRIPTION: This code example demonstrates how to attach an event handler to the Colorpicker's change event. The event fires whenever a user selects a new color and provides the selected color value as a parameter.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/colorpicker/api/colorpicker_change_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncolorpicker.events.on(\"change\",function(color){\n    // your logic here\n});\n```\n\n----------------------------------------\n\nTITLE: Sending PUT Request with Ajax in JavaScript\nDESCRIPTION: Example of sending a PUT request to update data on the server using the dhx.ajax.put() method. The method returns a Promise that resolves with the server response data or rejects with an error.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/ajax/api/ajax_put_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndhx.ajax.put(url, {id: \"1\", updated: true}).then(function (data) {\n    console.log(data);\n}).catch(function (err) {\n    console.log(err);\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Layout afterResizeEnd Event in JavaScript\nDESCRIPTION: This example demonstrates how to attach a handler to the afterResizeEnd event of a DHTMLX Layout component. The event fires after resizing of a cell is ended and provides the id of the resized cell.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/layout/api/layout_afterresizeend_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlayout.events.on(\"afterResizeEnd\", function(id){\n    // your logic here\n});\n```\n\n----------------------------------------\n\nTITLE: Modifying Individual Radio Button Properties in JavaScript\nDESCRIPTION: This example shows how to change the configuration of a specific radio button within the Radiogroup control, adjusting its text and padding.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/radiogroup/radiogroup_setproperties_method.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"radiogroup\").setProperties(\"first\", {\n    text: \"New Text\",\n    padding: 20\n});\n```\n\n----------------------------------------\n\nTITLE: Checking for Child Items in TreeCollection with haveItems() Method\nDESCRIPTION: This code snippet demonstrates how to use the haveItems() method of TreeCollection to check if a specific item (identified by 'menu1') has any children. The method returns a boolean value.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree_collection/api/treecollection_haveitems_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nif (toolbar.data.haveItems(\"menu1\"))\n    //do something;\n```\n\n----------------------------------------\n\nTITLE: SimpleVault Properties Configuration\nDESCRIPTION: Configuration object for SimpleVault control defining file upload-related properties including validation and request options.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/form_getproperties_method.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    css: string,\n    width: string | number | \"content\",\n    height: string | number | \"content\",\n    padding: string | number,\n    label: string,\n    labelWidth: string | number,\n    labelPosition: \"left\" | \"top\",\n    hiddenLabel: boolean,\n    helpMessage: string,\n    required: boolean,\n    preMessage: string,\n    successMessage: string,\n    errorMessage: string,\n    params: { [key: string]: any },\n    headerParams: { [key: string]: any },\n    target: string,\n    fieldName: string,\n    singleRequest: boolean,\n    updateFromResponse: boolean,\n    autosend: boolean,\n    accept: string,\n    validation: (value: ISimpleVaultValue) => boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Chart Scales\nDESCRIPTION: Sets up scales for an Area chart, defining bottom and left axis properties.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/chart/configuration_properties.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst chart = new dhx.Chart(\"chart_container\", {\n    type:\"area\",\n    scales: {\n        \"bottom\" : {\n            text: 'month'\n        },\n        \"left\" : {\n            padding: 10,\n            max: 90\n        }\n    },\n    series: [\n        {\n           value: 'company A',\n           strokeWidth: 2\n           // more options   \n        }\n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX Colorpicker with Custom Palette in JavaScript\nDESCRIPTION: This example demonstrates how to initialize a DHTMLX Colorpicker with a custom color palette. It disables gray shades and sets a custom palette of 5 rows with 5 colors each.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/colorpicker/api/colorpicker_palette_config.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst colorpicker = new dhx.Colorpicker(\"colorpicker_container\", {\n    grayShades: false,\n    palette: [\n        [\"#ffffc0\", \"#ffff9c\", \"#ecd078\", \"#a59154\", \"#5e5330\"],\n        [\"#ff916b\", \"#ff7657\", \"#d95b43\", \"#973f2e\", \"#56241a\"],\n        [\"#ff4169\", \"#f93555\", \"#c02942\", \"#861c2e\", \"#4c101a\"],\n        [\"#863958\", \"#6d2e47\", \"#542437\", \"#3a1926\", \"#210e16\"],\n        [\"#84bec3\", \"#6b9a9e\", \"#53777a\", \"#3a5355\", \"#212f30\"]\n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Focus to Simple Vault Control in DHTMLX Form\nDESCRIPTION: This example demonstrates how to programmatically set focus to a Simple Vault control in a DHTMLX Form by using the focus() method. The method requires no parameters and returns void.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/simplevault/simplevault_focus_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"simplevault\").focus();\n```\n\n----------------------------------------\n\nTITLE: Showing a Specific Checkbox in CheckboxGroup with JavaScript\nDESCRIPTION: This example demonstrates how to show a specific checkbox within a CheckboxGroup control by passing its ID to the show() method. If no ID is provided, the method will show the entire CheckboxGroup with all its checkboxes.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/checkbox_group/checkboxgroup_show_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"CheckboxGroup\").show(\"checkbox_1\");\n```\n\n----------------------------------------\n\nTITLE: Initializing Layout with Resizable Cell in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a new Layout instance with a resizable cell. The 'resizable' property is set to true for the cell, allowing it to be resized by the user.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/layout/api/cell/layout_cell_resizable_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst layout = new dhx.Layout(\"layout_container\", {\n    cols: [\n        { header: \"Cell header\", resizable:true}\n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Focus on Input Control in Toolbar with JavaScript\nDESCRIPTION: Shows how to set focus on an Input control in the toolbar using the setFocus() method. This method takes the ID of the input control as a parameter.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/toolbar/input.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ntoolbar.setFocus(\"search\");\n```\n\n----------------------------------------\n\nTITLE: Saving and Restoring DHTMLX List State\nDESCRIPTION: Demonstrates how to save the current state of a DHTMLX List using 'serialize()' and restore it to another list using 'parse()'.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/list/load_data.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst state = list1.data.serialize();\n\n// creating a new list\nconst list2 = new dhx.List(\"list_container2\");\n// parsing the state of list1 into list2\nlist2.data.parse(state);\n```\n\n----------------------------------------\n\nTITLE: Enabling Grouping by Specific Column in DHTMLX Grid - JSX\nDESCRIPTION: Illustrates enabling data grouping on a specific column in DHTMLX Grid by setting the 'groupable' property on the column configuration. This example (PRO feature) initializes a grid with columns, specifying 'groupable: true' for the 'country' column to allow grouping via its values. The grid must be provided with data and 'group: true' at the grid level. The output groups rows by unique 'country' values using the UI.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/usage.md#2025-04-22_snippet_24\n\nLANGUAGE: JSX\nCODE:\n```\nconst grid = new dhx.Grid(\"grid_container\", {\n    columns: [\n        { id: \"country\", header: [{ text: \"Country\" }], groupable: true },\n        { id: \"population\", header: [{ text: \"Population\" }] },\n        { id: \"area\", header: [{ text: \"Land Area (Km²)\" }] }\n    ],\n    group: true,\n    data: dataset\n});\n```\n\n----------------------------------------\n\nTITLE: Getting ColorPicker Value in DHTMLX Form\nDESCRIPTION: This code snippet shows how to retrieve the value of a ColorPicker control in a DHTMLX Form. It uses the getItem() method to access the control and then calls getValue() to obtain its current value.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/colorpicker.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst value = form.getItem(\"colorpicker\").getValue();\n```\n\n----------------------------------------\n\nTITLE: Showing ColorPicker Control in DHTMLX Form\nDESCRIPTION: Demonstrates how to show a ColorPicker control using the show() method on a form item. This method makes the ColorPicker visible on the page after retrieving it using getItem().\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/colorpicker/colorpicker_show_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"colorpicker\").show();\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX Combo Box with Value Config\nDESCRIPTION: Examples showing how to initialize a Combo Box with predefined values. Demonstrates both multi-selection and single-selection scenarios using the value config property.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/combobox/api/combobox_value_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst combobox = new dhx.Combobox(\"combo_container\", {\n    multiselection: true,\n    value: [\"austria\", \"estonia\"]\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst combobox = new dhx.Combobox(\"combo_container\", {\n    value: \"austria\"\n});\n```\n\n----------------------------------------\n\nTITLE: Handling beforeAdd Event in TreeCollection\nDESCRIPTION: Example of attaching an event handler to the beforeAdd event of a TreeCollection. The handler logs a message and returns true to allow the item addition.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree_collection/api/treecollection_beforeadd_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncomponent.data.events.on(\"beforeAdd\", function(newItem){\n    console.log(\"A new item will be added\");\n    return true;\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing TreeGrid Mode Using Grid - DHTMLX Grid (v9.0+) - JavaScript\nDESCRIPTION: Illustrates the unified approach in DHTMLX v9.0 where TreeGrid functionality is enabled by using dhx.Grid with type: \"tree\". Requires the PRO version. Takes a DOM container, optional data, columns, and sets Grid configuration for hierarchical data display.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/migration.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nconst grid = new dhx.Grid(\"grid_container\", {\n    type: \"tree\",\n    columns: [\n        // columns config\n    ],\n    data: dataset\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Input Value in DHTMLX Form - JavaScript\nDESCRIPTION: Demonstrates how to set a value for an Input control in a DHTMLX Form using the setValue() method. The method accepts either a string or number value.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/input/input_setvalue_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"input\").setValue(\"Mike\");\n```\n\n----------------------------------------\n\nTITLE: Adding Action Buttons to DHTMLX Toolbar\nDESCRIPTION: Demonstrates how to add Add, Edit, and Delete buttons to a DHTMLX Toolbar using the data.parse() method. Each button is configured with an ID, MDI icon, and display value.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tutorial/binding_components/step5.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntoolbar.data.parse([\n    {\n        \"id\": \"add\",\n        \"icon\": \"mdi mdi-plus\",\n        \"value\": \"Add\"\n    },\n    {\n        \"id\": \"edit\",\n        \"icon\": \"mdi mdi-pencil\",\n        \"value\": \"Edit\"\n    },\n    {\n        \"id\": \"delete\",\n        \"icon\": \"mdi mdi-delete\",\n        \"value\": \"Delete\"\n    },\n\n]);\n```\n\n----------------------------------------\n\nTITLE: Showing and Hiding a DHTMLX Ribbon Datepicker in JavaScript\nDESCRIPTION: Illustrates how to dynamically control the visibility of a Datepicker control within a DHTMLX Ribbon using the `ribbon.show()` and `ribbon.hide()` methods. These methods require the unique ID of the specific Datepicker control as an argument.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/ribbon/datepicker.md#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nribbon.show(id);\nribbon.hide(id);\n```\n\n----------------------------------------\n\nTITLE: Getting Scroll State in DHTMLX Grid - JavaScript\nDESCRIPTION: Retrieves the current scroll position of the grid as an object with x and y properties. getScrollState returns an object indicating the horizontal and vertical scroll offsets in pixels. Useful for persisting and restoring view positions.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/usage.md#2025-04-22_snippet_47\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst state = grid.getScrollState(); // -> {x:0, y:0}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom CSS Classes to DHTMLX Calendar\nDESCRIPTION: This snippet demonstrates how to apply custom CSS classes to a DHTMLX Calendar instance. It includes both HTML for styling and JavaScript for calendar initialization.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar/api/calendar_css_config.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<style>\n    .custom {\n        --dhx-color-primary: #118d8d;\n    }\n</style>\n\n<script>\n    const calendar = new dhx.Calendar(\"calendar_container\", { \n        css: \"custom dhx_widget--bordered\"\n    });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Setting Fixed Width in DHTMLX Layout\nDESCRIPTION: Example showing how to initialize a DHTMLX Layout with a fixed width cell. The code sets a 300px width for a cell with a header.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/layout/api/cell/layout_cell_width_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst layout = new dhx.Layout(\"layout_container\", {\n    cols: [\n        { header: \"Cell header\", width: \"300px\" }\n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing DataView afterEditStart Event Handler in JavaScript\nDESCRIPTION: Example showing how to attach an event handler to the afterEditStart event of a DataView component. The event fires after editing of an item begins and receives the item's ID as a parameter.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/dataview/api/dataview_aftereditstart_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndataview.events.on(\"afterEditStart\", function(id){\n    // your logic here\n});\n```\n\n----------------------------------------\n\nTITLE: Updating TreeCollection Item in JavaScript\nDESCRIPTION: Shows how to update properties of an existing item in a TreeCollection using the update() method. The method takes an item ID and an object with new properties as parameters.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree_collection/api/treecollection_update_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntoolbar.data.update(\"add_btn\",{ value:\"Add new\" });\n```\n\n----------------------------------------\n\nTITLE: Getting Grid Column Example\nDESCRIPTION: Demonstrates how to retrieve column information using the getColumn() method in DHTMLX Grid.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_getcolumn_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst column = grid.getColumn(\"b\"); // ->\n// {width: 100, id: \"b\", header: Array(1), $cellCss: {…}, type: \"string\"}\n```\n\n----------------------------------------\n\nTITLE: Getting Parent Items and Removing Nodes\nDESCRIPTION: Shows how to retrieve parent items and remove nodes from the tree.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree/work_with_tree.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ntree.data.getItem(\"Thrillers\").parent;\ntree.data.remove(\"id\");\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Styling with mark Function in DHTMLX Calendar\nDESCRIPTION: Example of initializing a Calendar component with the mark function to highlight Saturday dates with a custom CSS class. The function evaluates each date and returns a CSS class name when the condition is met.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar2/api/calendar_mark_config.md#2025-04-22_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n<style>\n    .highlight-date {\n        color: #fff;\n    }\n</style>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar calendar = new dhx.Calendar(\"calendar\", {\n    mark: function(date) {\n        if (date.getDay() === 6) {\n            return \"highlight-date\";\n        }\n    },\n    css: \"dhx_widget--bordered\"\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling/Disabling MenuItem in JavaScript\nDESCRIPTION: These methods demonstrate how to enable or disable a MenuItem in the sidebar.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/sidebar/menuitem.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nsidebar.enable(id);\nsidebar.disable(id);\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX Calendar with Date String (JavaScript)\nDESCRIPTION: Creates a new Calendar instance with a date selected using a string representation of the date.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar2/api/calendar_value_config.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar calendar = new dhx.Calendar(\"calendar_container\", {\n    value: (\"10/02/19\")\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling a Disabled Input Control in DHTMLX Form\nDESCRIPTION: This example demonstrates how to enable a previously disabled Input control in a DHTMLX Form by accessing the control through its ID and calling the enable() method.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/input/input_enable_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"input\").enable();\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX Calendar with 12-hour Time Format\nDESCRIPTION: Example of creating a new Calendar instance with timePicker enabled and 12-hour time format configuration. The timeFormat property accepts either 12 or 24 as valid values, with 24 being the default.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar/api/calendar_timeformat_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst calendar = new dhx.Calendar(\"calendar_container\", {\n    timePicker: true,\n    timeFormat: 12\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Grid Footer Cell Right Click Event in JavaScript\nDESCRIPTION: Example showing how to attach an event handler for right-clicking on a grid footer cell. The event provides access to the cell configuration, column configuration, and the native mouse event object.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_footercellrightclick_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngrid.events.on(\"footerCellRightClick\", (cell, column, event) => {\n    // your logic here\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX Calendar with thisMonthOnly Property in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a new DHTMLX Calendar instance with the thisMonthOnly property set to true. This configuration hides dates from the previous and next months, showing only the current month's dates.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar2/api/calendar_thismonthonly_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar calendar = new dhx.Calendar(\"calendar_container\", {\n   thisMonthOnly:true\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Select All Button to Combo Box in JavaScript\nDESCRIPTION: Adds a 'Select All' button to the Combo Box, allowing users to easily select all available options in multi-selection mode.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/combobox/configuration.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst combo = new dhx.Combobox(\"combo_container\", {\n    // enables multiple selection of options\n    multiselection:true,\n    // shows the Select All button\n    selectAllButton: true\n});\n```\n\n----------------------------------------\n\nTITLE: Editing DataView Item\nDESCRIPTION: Enables editing of a specific DataView item using its ID\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/dataview/manipulating_data.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ndataview.editItem(\"1\");\n```\n\n----------------------------------------\n\nTITLE: Setting Input Values in JavaScript Ribbon\nDESCRIPTION: Example of changing the value of an input control in a DHTMLX Ribbon.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/ribbon/operating_ribbon.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{ type:\"input\", id: \"file_name\" }\n...\nribbon.setState({\"file_name\":\"My file\"});\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX Menu with Nested Data Structure in JavaScript\nDESCRIPTION: This snippet demonstrates how to initialize a DHTMLX Menu component with a nested data structure. It includes menu items with various properties such as IDs, values, hotkeys, counts, icons, and nested subitems. The example also shows how to use separators and disable specific menu items.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/menu/api/menu_data_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst menu = new dhx.Menu(\"menu_container\", {\n    data: [{\n        \"id\": \"edit\",\n        \"value\": \"Edit\",\n        \"hotKey\": \"ctrl-z\",\n        \"count\": 25,\n        \"countColor\": \"success\",\n        \"items\": [{\n            \"id\": \"undo\",\n            \"value\": \"Undo\",\n            \"icon\": \"dxi dxi-undo\",\n            \"hotKey\": \"Ctrl-z\",\n            \"count\": 25,\n            \"countColor\": \"danger\",\n            \"items\": [\n                {\n                    \"id\": \"redo1\",\n                    \"value\": \"Redo\",\n                    \"icon\": \"dxi dxi-redo\",\n                    \"disabled\": \"true\"\n                },\n                {\n                    \"type\": \"separator\"\n                },\n                {\n                    \"id\": \"lock1\",\n                    \"value\": \"Lock cell\",\n                    \"icon\": \"dxi dxi-key\"\n                }\n            ]\n        }]\n    }]\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Checked Items from a Tree in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the getChecked() method of a Tree component to retrieve an array of ids of all checked items. The method returns an array of strings or numbers representing the ids of checked tree items.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree/api/tree_getchecked_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ntree.getChecked(); // -> [\"jmf\", \"rle\", \"sk\", \"km\", \"af\", \"jw\"]\n```\n\n----------------------------------------\n\nTITLE: Handling beforeChange Event for Checkbox in DHTMLX Form (JavaScript)\nDESCRIPTION: This snippet demonstrates how to attach an event handler to the beforeChange event of a Checkbox control in a DHTMLX Form. The handler logs the new value and allows the change to proceed.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/checkbox/checkbox_beforechange_event.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nform.getItem(\"checkbox\").events.on(\"beforeChange\", function(value) {\n    console.log(\"beforeChange\", value);\n    return true;\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Series Configuration in JavaScript Chart\nDESCRIPTION: Shows how to retrieve the configuration of a specific series in a chart using the getSeries method. The example demonstrates getting the configuration for series with id 'A'.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/chart/usage.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = chart.getSeries(\"A\");\n/* => \n{\n    \"strokeWidth\": 2, \"active\": true,\n    \"tooltip\": true, \"paddings\": 5,\n    \"color\": \"none\", \"fill\": \"none\",\n    \"pointType\": \"circle\", \"id\": \"A\",\n    \"value\": \"company A\", \"pointColor\": \"blue\",\n    \"type\": \"radar\",\n    \"scales\": [\n        \"radial\"\n    ]\n}\n*/\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX Calendar with Range Selection in JavaScript\nDESCRIPTION: This code snippet demonstrates how to initialize a DHTMLX Calendar component with the range selection feature enabled. It creates a new Calendar instance with custom CSS and the range option set to true.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar/api/calendar_range_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst calendar = new dhx.Calendar(\"calendar_container\", {\n    css: \"dhx_widget--bordered\",\n    range: true\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Sidebar Items using enable() Method\nDESCRIPTION: Demonstrates how to enable single or multiple Sidebar items using the enable() method. The method can take either a single item ID or an array of item IDs as parameters.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/sidebar/api/sidebar_enable_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsidebar.enable(\"search\");\n// several at a time\nsidebar.enable([\"search\", \"currentButton\", \"edit\"]);\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// enables all Sidebar items\nsidebar.enable();\n```\n\n----------------------------------------\n\nTITLE: Sending Files with DHTMLX Uploader in JavaScript\nDESCRIPTION: Demonstrates how to use the send() method of DHTMLX Uploader to initiate a POST request for uploading files to a server. The method can accept optional parameters for customizing the request.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/uploader/api/uploader_send_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvault.uploader.send();\n```\n\n----------------------------------------\n\nTITLE: Configuring Light High Contrast Theme Variables - CSS\nDESCRIPTION: This CSS snippet defines and overrides theme-specific variables for the 'contrast-light' (light high contrast) theme in the DHTMLX Suite. It sets font sizes, font colors, border color, color schemes, and service variables for Toolbar, Grid, Calendar, and Slider components. To use these variables, apply the 'data-dhx-theme=\\'contrast-light\\'' attribute to your container element and ensure you have the DHTMLX Suite library included. Inputs include any customizations to CSS variables following this block, and output is the themed UI per definitions. Limitations: changes are scoped only to elements with the matching data attribute.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/themes/contrast_light_theme.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n[data-dhx-theme='contrast-light'] {\n    /* font */\n    --dhx-font-size-normal: 16px;\n    --dhx-font-size-small: var(--dhx-font-size-normal);\n\n    --dhx-font-color-secondary: rgba(0, 0, 0, .66);\n    --dhx-font-color-additional: var(--dhx-font-color-secondary);\n    /* end font */\n\n    /* border */\n    --dhx-border-color: rgba(0, 0, 0, .4);\n    /* end border */\n\n    /* color scheme */\n    --dhx-l-contrast-offset: 14%;\n    /* end color scheme */\n\n    /* DHTMLX Toolbar service variables*/\n    --dhx-s-toolbar-background: var(--dhx-background-primary);\n    --dhx-s-toolbar-button-background-hover: rgba(0, 0, 0, .07);\n    --dhx-s-toolbar-button-background-active: rgba(0, 0, 0, .15);\n    /* end DHTMLX Toolbar service variables */\n\n    /* DHTMLX Grid service variables*/\n    --dhx-s-grid-header-background: var(--dhx-background-secondary);\n    --dhx-s-grid-selection-background: var(--dhx-color-gray-700);\n    /* end DHTMLX Grid service variables*/\n    \n    /* DHTMLX Calendar service variables*/\n    --dhx-s-calendar-muffled: .8;\n    /* end DHTMLX Calendar service variables*/\n\n    /* DHTMLX Slider service variables*/\n    --dhx-s-tick-font-size: var(--dhx-font-size-small);\n    /* end DHTMLX Slider service variables*/\n}\n```\n\n----------------------------------------\n\nTITLE: Hiding Sidebar Items in JavaScript\nDESCRIPTION: Demonstrates how to hide individual and multiple Sidebar items using the hide() method. The method can take either a single item ID or an array of IDs as a parameter, or no parameter to hide all items.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/sidebar/api/sidebar_hide_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsidebar.hide(\"search\");\n// several at a time\nsidebar.hide([\"search\",\"currentButton\",\"edit\"]);\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// hides all Sidebar items\nsidebar.hide();\n```\n\n----------------------------------------\n\nTITLE: Handling TreeCollection filter Event in JavaScript\nDESCRIPTION: This snippet demonstrates how to attach an event handler to the 'filter' event of a TreeCollection. The event fires after filtering the collection and provides an object with all active filters.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree_collection/api/treecollection_filter_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncomponent.data.events.on(\"filter\", function(filter) {\n    console.log(\"Items were filtered\");\n});\n```\n\n----------------------------------------\n\nTITLE: Textarea Properties Object Structure\nDESCRIPTION: Example of the object structure returned by the getProperties() method showing all available configuration attributes of the Textarea control.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/textarea/textarea_getproperties_method.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    errorMessage: \"\",\n    height: \"content\",\n    helpMessage: \"\",\n    hiddenLabel: false,\n    label: \"textarea\",\n    labelPosition: \"top\",\n    labelWidth: \"70px\",\n    maxlength: undefined,\n    minlength: undefined,\n    padding: 0,\n    placeholder: \"\",\n    preMessage: \"\",\n    readOnly: false,\n    required: false,\n    successMessage: \"\",\n    validation: undefined,\n    width: 400\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Responsive Behavior for Layout Cells in JavaScript\nDESCRIPTION: This code shows how to configure responsive behavior for layout cells using the gravity property. It creates a responsive layout with a sidebar that has gravity 0 and content area with gravity 1, making the content area adapt to available space.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/slider/constructor.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar layout = new dhx.Layout(\"layout_container\", {\n    cols: [\n        {\n            id: \"sidebar\",\n            width: \"200px\",\n            gravity: false,  // fixed width\n            header: \"Sidebar\"\n        },\n        {\n            id: \"content\",\n            gravity: 1,      // responsive\n            header: \"Content\"\n        }\n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Masked Input Value in DHTMLX Form (JSX)\nDESCRIPTION: Shows how to get the text value of an input or textarea with an applied mask using the getText() method in DHTMLX form.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/work_with_form.md#2025-04-22_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nconst input = form.getItem(\"input\");\ninput.setValue(1000.01);\n\ninput.getValue(); // 1000.01 for the input type number\ninput.getValue(); // \"1000.01\" for the input type string\n\ninput.getText(); // \"1,000.01\" with the applied numberMask/patternMask\n```\n\n----------------------------------------\n\nTITLE: Handling DataView beforeEditEnd Event in JavaScript\nDESCRIPTION: Example showing how to attach an event handler to the beforeEditEnd event of a DataView component. The event fires before item editing is completed and can prevent the editor from closing by returning false.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/dataview/api/dataview_beforeeditend_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndataview.events.on(\"beforeEditEnd\", function(value,id){\n    // your logic here\n    return false;\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Combo Box Properties in JavaScript Form\nDESCRIPTION: This code snippet demonstrates the structure and available properties for configuring a Combo Box control within a DHTMLX Form. It includes options for data binding, styling, validation, and advanced features like multiselection and virtual scrolling.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/combo/api_combo_properties.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    type: \"combo\",\n    name?: string,\n    id?: string,\n    data?: object[],\n    value?: string | number | array,\n    \n    css?: string,\n    disabled?: boolean, // false by default\n    height?: string | number | \"content\", // \"content\" by default\n    hidden?: boolean, // false by default\n    padding?: string | number, \n    required?: boolean, // false by default\n    validation?: (id: (string | number) | (string | number)[], text: string | string[]) => boolean,\n    width?: string | number | \"content\", // \"content\" by default\n    \n    filter?: (item: any, input: string) => boolean,\n    eventHandlers?: {\n        [eventName: string]: {\n            [className: string]: (event: Event, id: string | number) => void | boolean; \n        };\n    },\n    itemHeight?: number | string, // 32 by default\n    itemsCount?: boolean | ((count: number) => string),\n    listHeight?: number | string, // 224 by default\n    multiselection?: boolean, // false by default\n    newOptions?: boolean, // false by default\n    placeholder?: string,\n    readOnly?: boolean, // false by default\n    selectAllButton?: boolean, // false by default\n    template?: (item: any) => string,\n    virtual?: boolean, // false by default\n    \n    hiddenLabel?: boolean, // false by default\n    label?: string,\n    labelPosition?: \"left\" | \"top\", // \"top\" by default\n    labelWidth?: string | number,\n\n    helpMessage?: string,\n    preMessage?: string,\n    successMessage?: string,\n    errorMessage?: string,\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Colors in Colorpicker\nDESCRIPTION: Shows how to initialize Colorpicker with predefined custom colors in the Hex format.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/colorpicker/configuration.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst colorpicker = new dhx.Colorpicker(\"colorpicker_container\", {\n    customColors: [\"#1d2de7\", \"#ab31ff\", \"#a3fa76\"]\n});\n```\n\n----------------------------------------\n\nTITLE: Defining editable property for Grid column in JavaScript\nDESCRIPTION: This code snippet demonstrates how to set the 'editable' property for a Grid column. It shows the usage of the property in the column configuration object within the Grid initialization.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/gridcolumn_properties/gridcolumn_editable_property.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\neditable?: boolean;\n```\n\nLANGUAGE: jsx\nCODE:\n```\nconst grid = new dhx.Grid(\"grid_container\", {\n    columns: [\n        { id: \"project\", header: [{ text: \"Project\" }], editable: false },\n        // more columns configuration objects\n    ],\n    editable: true,\n    // more options\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX List with Editable Config in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a new DHTMLX List instance with the editable option enabled. When set to true, it allows inline editing of list items.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/list/api/list_editable_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst list = new dhx.List(\"list_container\", {editable:true});\n```\n\n----------------------------------------\n\nTITLE: Handling beforeSelect Event in DHTMLX Components\nDESCRIPTION: Example showing how to attach a handler to the beforeSelect event using the selection events object. The handler receives the item ID and can prevent selection by returning false.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/selection/api/selection_beforeselect_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncomponent.selection.events.on(\"beforeSelect\", function(id) {\n    console.log(id);\n    return false;\n});\n```\n\n----------------------------------------\n\nTITLE: Setting the Size of a DHTMLX Window using JavaScript\nDESCRIPTION: This snippet shows how to change the dimensions of a DHTMLX Window using the `setSize()` method. It takes two numerical parameters: the desired width and height in pixels. Requires an existing `dhxWindow` instance.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/window/usage.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ndhxWindow.setSize(250,250);\n```\n\n----------------------------------------\n\nTITLE: Handling beforeEditStart Event in DHTMLX List (JavaScript)\nDESCRIPTION: This snippet demonstrates how to attach an event handler to the beforeEditStart event of a DHTMLX List component. The event fires before editing of an item starts and can be used to implement custom logic or prevent editing.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/list/api/list_beforeeditstart_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlist.events.on(\"beforeEditStart\", function(value,id){\n    // your logic here\n    return false;\n});\n```\n\n----------------------------------------\n\nTITLE: Handling afterHide Event in DHTMLX Form Combo Box in JavaScript\nDESCRIPTION: Example of attaching an event handler to the afterHide event of a Combo Box control in a DHTMLX Form. The handler receives the IDs of selected options and an initialization flag.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/combo/combo_afterhide_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"combo\").events.on(\"afterHide\", function(ids, init) {\n    console.log(\"afterHide\", ids, init);\n});\n```\n\n----------------------------------------\n\nTITLE: Handling afterRemove Event in DHTMLX Simple Vault (JavaScript)\nDESCRIPTION: This snippet demonstrates how to attach an event handler to the afterRemove event of a Simple Vault control in a DHTMLX Form. The event fires after a file is removed from the data collection and provides the removed file object as a parameter.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/simplevault/simplevault_afterremove_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"simplevault\").data.events.on(\"afterRemove\", function(file) {\n    console.log(\"afterRemove\", file);\n});\n```\n\n----------------------------------------\n\nTITLE: Detaching Event Listener in DHTMLX Combo Box\nDESCRIPTION: Shows how to attach and then detach an event listener from a combo box component using the events.detach() method.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/combobox/handling_events.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncombo.events.on(\"open\", function() {\n    // your logic here\n});\n\ncombo.events.detach(\"open\");\n```\n\n----------------------------------------\n\nTITLE: Getting Text Control Value\nDESCRIPTION: Demonstrates how to retrieve the value from a Text control using the getItem() method.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/text.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst value = form.getItem(\"text\").getValue();\n```\n\n----------------------------------------\n\nTITLE: Setting Value for Textarea Control in DHTMLX Form\nDESCRIPTION: This example demonstrates how to set a text value for a Textarea control in a DHTMLX Form using the setValue() method. The method accepts a string parameter that will become the control's new value.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/textarea/textarea_setvalue_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"textarea\").setValue(\"Some text\");\n```\n\n----------------------------------------\n\nTITLE: Scrolling Grid Using Coordinates in JavaScript\nDESCRIPTION: Demonstrates how to programmatically scroll a DHTMLX Grid to specific X and Y coordinates. The method accepts two optional numeric parameters for horizontal and vertical scroll positions.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_scroll_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngrid.scroll(75, 230);\n```\n\n----------------------------------------\n\nTITLE: Hiding Specific Toolbar Items using hide() in JavaScript\nDESCRIPTION: Demonstrates hiding specific items in a DHTMLX Toolbar using the `hide()` method. You can hide a single item by passing its string or number ID, or hide multiple items by passing an array of their IDs. This allows for dynamic control over the visibility of toolbar controls.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/toolbar/api/toolbar_hide_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntoolbar.hide(\"save_btn\");\n// several at a time\ntoolbar.hide([\"cancel_btn\",\"del_btn\"]);\n```\n\n----------------------------------------\n\nTITLE: Popup-based Colorpicker Initialization\nDESCRIPTION: JavaScript code showing how to initialize Colorpicker within a popup and handle color selection events.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/colorpicker/how_to_start.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst colorpicker = new dhx.Colorpicker(null, { customColors: [\"#f2f2f2\"] });\nconst popup = new dhx.Popup();\npopup.attach(colorpicker);\n\npopup.show(\"showButton\");\n\nconst colorExample = document.querySelector(\".dhx_color-sample\");\ncolorpicker.events.on(\"colorChange\", function (color) {\n    colorExample.style.backgroundColor = color;\n    popup.hide();\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Slider Value in DHTMLX Form\nDESCRIPTION: Demonstrates how to retrieve the current value of a Slider control using the getItem() method.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/slider.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst value = form.getItem(\"slider_id\").getValue();\n```\n\n----------------------------------------\n\nTITLE: Disabling Input Control in DHTMLX Form (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to disable an Input control on a form using the disable() method. It retrieves the Input item from the form and then calls the disable() method on it.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/input/input_disable_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nform.getItem(\"input\").disable();\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX Slider with value Config in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a new Slider instance with an initial value set to 20. The 'value' config determines the position of the slider's thumb upon initialization.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/slider/api/slider_value_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst slider = new dhx.Slider(\"slider_container\", { \n    value:20\n});\n```\n\n----------------------------------------\n\nTITLE: Form Methods Table Structure\nDESCRIPTION: Table structure listing common Form API methods with links to detailed documentation\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/api_overview.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name                                      | Description                                      |\n| ----------------------------------------- | ------------------------------------------------ |\n| [](form/api/form_blur_method.md)          | @getshort(form/api/form_blur_method.md)          |\n```\n\n----------------------------------------\n\nTITLE: Applying Custom CSS to DHTMLX Sidebar\nDESCRIPTION: Example demonstrating how to customize the appearance of a Sidebar widget by defining custom CSS variables and applying them with the css config option. The example defines color variables for backgrounds, primary colors, and font colors.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/sidebar/api/sidebar_css_config.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<style>\n    .custom,.custom--popup-menu {\n        --dhx-background-primary: #3A434A;\n        --dhx-background-secondary: #5a6872;\n        --dhx-background-additional: #5a6872;\n        --dhx-s-toolbar-background: var(--dhx-background-primary);\n\n        --dhx-color-primary: #118d8d;\n        --dhx-color-primary-hover: #49e9e9;\n        --dhx-color-primary-active: #49e9e9;\n\n        --dhx-font-color-primary: #fff;\n        --dhx-font-color-secondary: rgba(255, 255, 255, 0.75);\n        --dhx-font-color-additional: #fff;\n    }\n</style>\n\n<script>\n    const sidebar = new dhx.Sidebar(\"sidebar_container\", {\n        css: \"custom\",\n    });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Attaching HTML Content to a DHTMLX Popup using JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to create a DHTMLX Popup instance (`new dhx.Popup()`) and use the `attachHTML()` method to insert an HTML string (`<h1>Hello, I'm popup</h1>`) into it. The `show()` method is then called with the ID 'popup' to display the popup, likely associating it with an HTML element having that ID. It requires the DHTMLX Suite library.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/popup/api/popup_attachhtml_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst popup = new dhx.Popup();\npopup.attachHTML(\"<h1>Hello, I'm popup</h1>\");\npopup.show(\"popup\");\n```\n\n----------------------------------------\n\nTITLE: Initializing Slider with tick Configuration in JavaScript\nDESCRIPTION: This snippet demonstrates how to initialize a DHTMLX Slider component with the tick property set to 2, which defines the interval of steps for rendering the slider scale.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/slider/api/slider_tick_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst slider = new dhx.Slider(\"slider_container\", { \n    tick:2\n});\n```\n\n----------------------------------------\n\nTITLE: Radio Button Properties Object Structure\nDESCRIPTION: Example showing the structure of the object returned when getting properties of an individual radio button within a RadioGroup control.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/radiogroup/radiogroup_getproperties_method.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    height: \"content\"\n    padding: 0\n    text: \"Select 1\"\n    width: \"content\"\n}\n```\n\n----------------------------------------\n\nTITLE: Getting ComboBox Values in JavaScript\nDESCRIPTION: Shows how to retrieve selected values from a ComboBox using the getValue() method. The method can return values as a string, comma-separated string, or an array of strings.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/combobox/work_with_combo.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst id = combo.getValue();\n// -> \"u1556098582074\"\n\n// returns ids of selected options as strings\nconst ids = combo.getValue();\n// -> \"u1556097609214,u1556097609228,u1556097609244\"\n\n// returns ids of selected options as an array of strings\nconst array_ids = combo.getValue(true);\n// -> [\"u1556097609214\", \"u1556097609228\", \"u1556097609244\"]\n```\n\n----------------------------------------\n\nTITLE: Calling Custom Events in DHTMLX Sidebar using JavaScript\nDESCRIPTION: This snippet shows how to manually trigger (fire) an event in the DHTMLX Sidebar. The fire method takes an event name and optional arguments to pass to the event handlers.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/sidebar/events.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nsidebar.events.fire(evName,[args]);\n```\n\n----------------------------------------\n\nTITLE: Attaching Event Listener to List in JavaScript\nDESCRIPTION: Demonstrates how to attach a click event listener to a List component. The handler logs a message with the clicked item's ID.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/list/events.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nlist.events.on(\"click\", function(id, e){\n    console.log(\"The item with the id \"+ list.selection.getId(id) +\" was clicked.\");\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring dragCopy for Source and Target Grids in JavaScript\nDESCRIPTION: This code snippet demonstrates how to initialize two DHTMLX Grid instances with dragCopy enabled. The source grid is configured to allow dragging from it, while the target grid is set up to receive dragged items. Both grids have dragCopy set to true, enabling row copying during drag-and-drop operations.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_dragcopy_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst source = new dhx.Grid(\"grid-source\", {\n    columns: [\n        // columns config\n    ],\n    dragMode: \"source\", \n    dragCopy: true\n});\n\nconst target = new dhx.Grid(\"grid-target\", {\n    columns: [\n        // columns config\n    ],\n    dragMode: \"target\", \n    dragCopy: true\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Selected Item with getItem Method in JavaScript\nDESCRIPTION: Demonstrates how to use the getItem() method to retrieve a selected item from a DHTMLX component. The method returns either a single object for single selection or an array of objects when multiselection is enabled (v7.0+).\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/selection/api/selection_getitem_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst item = component.selection.getItem();\n// -> {…}\n```\n\n----------------------------------------\n\nTITLE: Updating Existing Grid Item\nDESCRIPTION: Updates an existing grid item when the form submission contains an ID. Uses the Data Collection update method.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tutorial/binding_components/step2.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nelse {                       \n    item.modified = getFormatDate(); \n    grid.data.update(item.id, item);     \n    dhxWindow.hide();\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling DatePicker Control in DHTMLX Form\nDESCRIPTION: This code snippet demonstrates how to enable a previously disabled DatePicker control within a DHTMLX Form. The enable() method is called on the DatePicker item retrieved from the form.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/calendar/calendar_enable_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nform.getItem(\"datepicker\").enable();\n```\n\n----------------------------------------\n\nTITLE: Rendering View in Main App using DHTMLX Optimus - JavaScript\nDESCRIPTION: This updated JavaScript snippet demonstrates importing both the App class and a specific View (TopLayout), then using the show() method in the init() lifecycle to render the view as the app's main content. This enables modular UI composition. It expects all dependencies (dhx-optimus and the view module) to be available and the CSS file imported.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/optimus_guides/index.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport \\\"./assets/css/index.css\\\";\\n\\nimport { App } from \\\"dhx-optimus\\\";\\nimport { TopLayout } from \\\"./views/TopLayout\\\";\\n\\nexport class MyApp extends App {\\n    init() {\\n        this.show(null, TopLayout); \\n    }\\n}\n```\n\n----------------------------------------\n\nTITLE: Toggling a Layout Cell in JavaScript\nDESCRIPTION: This code snippet demonstrates how to use the toggle() method to expand or collapse a specific cell in a DHTMLX Layout. The method is called on a cell object obtained using the getCell() method of the layout instance.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/layout/api/cell/layout_cell_toggle_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nlayout.getCell(\"id\").toggle();\n```\n\n----------------------------------------\n\nTITLE: Adding New Controls to Toolbar\nDESCRIPTION: Using the Tree Collection API to dynamically add new controls to an initialized Toolbar with the add() method.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/toolbar/common_methods.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\ntoolbar.data.add({\n    type:\"button\", value:\"Add\"\n});\ntoolbar.data.add({\n    type:\"separator\"\n});\ntoolbar.data.add({\n    type:\"button\", value:\"Remove\"\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Editable Combo Box in JavaScript\nDESCRIPTION: Allows users to add new items to the Combo Box options list directly from the UI, with an option to validate new entries.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/combobox/configuration.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst combobox = new dhx.Combobox(\"combo_container\", {\n    multiselection: true,\n      newOptions: true  \n});\n\n// blocks the ability to add an item with value: \"new\" into the collection of combobox items\ncombobox.data.events.on(\"beforeAdd\", item => item.value !== \"new\");\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX Combo Box with ReadOnly Mode\nDESCRIPTION: Demonstrates how to create a new Combo Box instance with readOnly mode enabled. In this mode, users can only select options from the dropdown list without being able to type in the input field.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/combobox/api/combobox_readonly_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst combo = new dhx.Combobox(\"combo_container\", { \n    readOnly:true\n});\n```\n\n----------------------------------------\n\nTITLE: DHTMLX Suite Default Theme CSS Variables\nDESCRIPTION: Core CSS variables defining the color scheme for DHTMLX Suite themes using HSL format. These variables control primary, secondary, danger, success, and background colors across all themes.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/themes/change_base_themes.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n--dhx-h-primary: 200;\n--dhx-s-primary: 98%;\n--dhx-l-primary: 40%;\n\n--dhx-h-secondary: 0;\n--dhx-s-secondary: 0%;\n--dhx-l-secondary: 30%;\n\n--dhx-h-danger: 0;\n--dhx-s-danger: 100%;\n--dhx-l-danger: 60%;\n\n--dhx-h-success: 154;\n--dhx-s-success: 89%;\n--dhx-l-success: 37%;\n\n--dhx-h-background: 0;\n--dhx-s-background: 0%;\n--dhx-l-background: 100%;\n--dhx-a-background: 0.5;\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX Form with Checkbox Control (JavaScript)\nDESCRIPTION: Shows how to initialize a DHTMLX Form with a checkbox control. The getValue() method in this case returns the state of the control (true/false) since no value is specified.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/checkbox/checkbox_getvalue_method.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst form = new dhx.Form(\"form_container\", {\n    rows: [\n        {   \n            type: \"checkbox\",\n            label: \"I agree\",\n            name: \"agree\",\n            id: \"agree\",\n            checked: true \n        }\n    ]\n});\n\nconst state = form.getItem(\"checkbox\").getValue(); // -> true/false\n```\n\n----------------------------------------\n\nTITLE: Handling keydown Event in DHTMLX Ribbon - JavaScript\nDESCRIPTION: This snippet demonstrates how to subscribe to the 'keydown' event for a DHTMLX Ribbon control in JavaScript, allowing developers to react to any key press when a control within the Ribbon UI is focused. Dependencies include the DHTMLX Suite Ribbon component properly initialized within the project. The event handler receives the native KeyboardEvent object and an optional control id, and in this example, logs the pressed key to the console. The handler expects a usable 'ribbon' instance; output appears in the developer console. No exception handling or key filtering is implemented, so all key presses are logged.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/ribbon/api/ribbon_keydown_event.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nribbon.events.on(\"keydown\", function(event, id) {\n    console.log(\"You've pressed the key: \" + event.key);\n});\n```\n\n----------------------------------------\n\nTITLE: Basic CSS Class Definition for DataView\nDESCRIPTION: Demonstrates how to define custom CSS classes for styling DataView widget.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/dataview/customization.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<style>\n    .my_first_class {\n        /*some styles*/\n    }\n    \n    .my_second_class {\n        /*some styles*/\n    }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Setting Focus to Tree Item in JavaScript\nDESCRIPTION: This code snippet demonstrates how to use the focusItem() method of the Tree component to set focus to a specific item by its id. The method also moves the scroll to the focused item.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree/api/tree_focusitem_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ntree.focusItem(\"1\");\n```\n\n----------------------------------------\n\nTITLE: Changing Calendar Mode to Month Selection\nDESCRIPTION: Demonstrates how to switch the calendar to 'month' mode for selecting entire months, with examples of showing a specific month or the current month.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar/operating_calendar.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncalendar.showDate(new Date(2020,11,12),\"month\");\n\n// shows the current month\ncalendar.showDate(null,\"month\");\n```\n\n----------------------------------------\n\nTITLE: Heatmap Chart Data Structure in JavaScript\nDESCRIPTION: Example data structure for Calendar Heatmap charts with date and value properties.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/chart/data_loading.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst heatMapData = [\n    { id: \"100\", value: 50, date: new Date(2022, 2, 2) },\n    { id: \"101\", value: 100, date: new Date(2022, 4, 1) },\n    { id: \"102\", value: 10, date: new Date(2022, 4, 4) },\n    { id: \"200\", value: 32, date: new Date(2022, 6, 1) },\n    { id: \"201\", value: 4, date: new Date(2022, 6, 15) },\n    { id: \"202\", value: 35, date: new Date(2022, 7, 21) },\n    { id: \"300\", value: 22, date: new Date(2022, 9, 6) },\n    { id: \"501\", value: 100, date: new Date(2023, 1, 1) }\n];\n```\n\n----------------------------------------\n\nTITLE: Customizing Grid Header Tooltip Behavior in JavaScript\nDESCRIPTION: This example shows how to customize the behavior of header tooltips in a DHTMLX Grid. It demonstrates setting the 'force' property to true, which ignores showDelay and hideDelay settings.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_headertooltip_config.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst grid = new dhx.Grid(\"grid_container\", {\n    columns: [\n        // columns config\n    ],\n    data: dataset,\n    headerTooltip: {\n       force: true\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Loading Data from Local Source After Sidebar Initialization\nDESCRIPTION: Example demonstrating how to load data into a sidebar from a local data source after initialization using the parse() method of TreeCollection.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/sidebar/data_loading.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nsidebar.data.parse(data);\n```\n\n----------------------------------------\n\nTITLE: Handling Input Focus Events in DHTMLX Sidebar\nDESCRIPTION: Example demonstrates how to attach an event handler to the inputFocus event of a Sidebar control. The event fires when a control receives focus and provides the ID of the focused control.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/sidebar/api/sidebar_inputfocus_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsidebar.events.on(\"inputFocus\", function(id){\n    console.log(id);\n});\n```\n\n----------------------------------------\n\nTITLE: Repainting Calendar using paint() Method in JavaScript\nDESCRIPTION: The paint() method is used to repaint a calendar on a page. It takes no parameters and returns void. This method is useful when you need to manually trigger a redraw of the calendar component.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar/api/calendar_paint_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncalendar.paint();\n```\n\n----------------------------------------\n\nTITLE: Disabling and Enabling Sidebar Controls in JavaScript\nDESCRIPTION: Demonstrates how to disable and enable specific sidebar controls or all controls using the disable() and enable() methods of the DHTMLX Sidebar API.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/sidebar/work_with_sidebar.md#2025-04-22_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nsidebar.disable(id); // disables a control\nsidebar.enable(id);  // enables a control\n\n// disables all Sidebar controls\nsidebar.disable();\n// enables all Sidebar controls\nsidebar.enable();\n```\n\n----------------------------------------\n\nTITLE: Attaching Event Listeners with pagination.events.on() in JavaScript\nDESCRIPTION: Demonstrates attaching a callback function to the 'change' event of a DHTMLX Pagination instance using the `pagination.events.on()` method. The callback function receives the newly active page index (`index`) and the previously active index (`previousIndex`) as arguments. Event names are case-insensitive.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/pagination/handling_events.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\npagination.events.on(\"change\", function(index, previousIndex){\n    console.log(\"The currently active page\", index);\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Multi-selection in Combo Box using JavaScript\nDESCRIPTION: Configures the Combo Box to allow selection of multiple options, enhancing its flexibility for complex selection scenarios.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/combobox/configuration.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst combo = new dhx.Combobox(\"combo_container\", {\n    multiselection:true\n});\n```\n\n----------------------------------------\n\nTITLE: Setting CheckboxGroup Values in DHTMLX Form\nDESCRIPTION: Demonstrates how to set multiple checkbox values within a CheckboxGroup control using the setValue() method. The method accepts an object with checkbox IDs as keys and boolean values representing their states.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/checkbox_group/checkboxgroup_setvalue_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"CheckboxGroup\").setValue({\n    \"checkbox_id_1\": true,\n    \"checkbox_id_2\": false,\n    \"checkbox_id_3\": true\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Initial Calendar Date\nDESCRIPTION: Initializes a Calendar with a specific date to display initially, showing January 2019 instead of the current month.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar/configuring.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst calendar = new dhx.Calendar(\"calendar_container\", {\n    date: new Date(2019, 0, 1)\n});\n```\n\n----------------------------------------\n\nTITLE: Handling dragIn Event in DHTMLX List (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to attach an event handler to the dragIn event of a DHTMLX List component. The event fires when an item is dragged to another potential target within the list.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/list/api/list_dragin_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlist.events.on(\"dragIn\", function(data, events) {\n    // your logic here\n});\n```\n\n----------------------------------------\n\nTITLE: Using getFocus Method in DHTMLX List (JavaScript)\nDESCRIPTION: This example demonstrates how to get the id of the currently focused item in a List component. The method returns the id of the focused item as a string or number.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/list/api/list_getfocus_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlist.getFocus(); // -> \"item_id\"\n```\n\n----------------------------------------\n\nTITLE: Keeping Grouped Columns Visible in dhtmlx Grid (JSX)\nDESCRIPTION: Initializes a dhtmlx Grid, configuring it to keep columns visible even after they are used for grouping by setting `group.hideableColumns` to `false`. By default (`true`), columns dragged to the group panel are hidden from the main grid area. Depends on the dhtmlx Grid library and a dataset.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/usage.md#2025-04-22_snippet_27\n\nLANGUAGE: jsx\nCODE:\n```\nconst grid = new dhx.Grid(\"grid_container\", {\n    columns: [\n        { id: \"country\", header: [{ text: \"Country\" }], groupable: true },\n        { id: \"city\", header: [{ text: \"City\" }] },\n        { id: \"population\", header: [{ text: \"Population\" }] },\n    ],\n    group: {\n        panel: true,\n        hideableColumns: false // columns remain visible after grouping\n    },\n    data: dataset\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Styled Input with Icon and Caption in DHTMLX Suite\nDESCRIPTION: HTML markup for styling an input with icon and caption. The example uses dhx_input classes to create a text input with a search icon, properly structured with container and wrapper elements.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/helpers/base_elements.md#2025-04-22_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<!-- Create a form-group and put an input and its label in one line-->\n<div class=\"dhx_form-group dhx_form-group--inline\">\n    <!-- Create the label for the input and style it-->\n    <label for=\"input\" class=\"dhx_label\" style=\"min-width: 100px; max-width: 100px;\">I am label</label>\n    <!-- Create a wrapper for the input container inside form-group -->        \n    <div class=\"dhx_input__wrapper\">\n        <!-- Create the container for the input with icon-->\n        <div class=\"dhx_input__container\">\n            <!-- Put the \"dxi-magnify\" icon into the container-->\n            <div class=\"dhx_input__icon dxi dxi-magnify\"></div>\n            <!-- Create the input with the padding for the icon-->\n            <input id=\"input\" placeholder=\"I am input\" name=\"\" class=\"dhx_input dhx_input--icon-padding\" autocomplete=\"off\">\n        </div>\n        <!--Create \"Message text\" caption -->\n        <span class=\"dhx_input__caption\">Message text</span>\n    </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Setting Focus on Grid Header Filter in JavaScript\nDESCRIPTION: Demonstrates how to programmatically set focus on a specific header filter in a DHTMLX Grid component. The method targets a filter by its column ID and requires no parameters.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/headerfilter/focus_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngrid.getHeaderFilter(\"country\").focus();\n```\n\n----------------------------------------\n\nTITLE: Handling Timepicker beforeClose Event in JavaScript\nDESCRIPTION: Example showing how to attach an event handler to the beforeClose event of a timepicker. The handler receives the current value and can prevent the timepicker from closing by returning false.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/timepicker/api/timepicker_beforeclose_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntimepicker.events.on(\"beforeClose\", function(value){\n    console.log(value);\n    return false;\n})\n```\n\n----------------------------------------\n\nTITLE: Applying Custom CSS to Tree Component in DHTMLX\nDESCRIPTION: This example demonstrates how to apply custom CSS classes to a Tree component, customizing font weight, colors, and folder styles. It creates a custom appearance by defining CSS variables within a custom class.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree/api/tree_css_config.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<style>\n    .custom {\n        --dhx-font-weight-regular: 500;\n        --dhx-font-color-primary: #0ab169;\n    }\n    .custom .dhx_tree-folder  {\n        --dhx-font-color-primary: #0288d1;\n    }\n</style>\n\n<script>\n    const tree = new dhx.Tree(\"tree_container\", {\n        css: \"custom\"\n    });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Attaching a blur Event Handler in DHTMLX Form\nDESCRIPTION: Example of attaching an event handler to the blur event of a DHTMLX Form. The event fires when a form control loses focus and provides the control name, its current value, and optionally the element ID for certain group controls.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/form_blur_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.events.on(\"blur\", function(name, value, id) {\n    console.log(name, value, id);\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Select Control Options in DHTMLX Form with JavaScript\nDESCRIPTION: This example demonstrates how to use the setOptions() method to dynamically change the options of a Select control in a DHTMLX form. The method accepts an array of option objects with value, content, and optional disabled properties.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/select/select_setoptions_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"select\").setOptions([\n    { value: \"new_1\", content: \"new_content-1\", disabled:true },\n    { value: \"new_2\", content: \"new_content-2\" }\n]);\n```\n\n----------------------------------------\n\nTITLE: Applying Custom CSS and DHTMLX Classes for Popup Styling in HTML and JavaScript\nDESCRIPTION: Combines CSS and JavaScript to define advanced customizations for the Popup widget. The <style> block creates a '.custom' selector with CSS variables and animation, while the JavaScript block initializes the Popup with both DHTMLX and user classes. The configuration expects DHTMLX Popup to be available and that CSS classes (in this case, 'dhx_widget--border-shadow' and 'custom') control layout and effects. The code does not include popup display logic, which is implied as a follow-up step.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/popup/customization.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<style>\\n    .custom {\\n        --dhx-font-color-primary: var(--dhx-color-white);\\n        --dhx-background-primary: var(--dhx-color-primary);\\n\\n        margin-top: 25px;\\n        animation: opacity .4s ease-in-out forwards;\\n    }\\n</style>\\n\\n<script>\\n    const popup = new dhx.Popup({\\n        css: \\\"dhx_widget--border-shadow custom\\\"\\n    });\\n\\n    // show popup\\n</script>\\n\n```\n\n----------------------------------------\n\nTITLE: Configuring List and Item Height for Combo Box in JavaScript\nDESCRIPTION: Sets custom heights for the Combo Box dropdown list and individual list items, allowing for better control over the component's appearance.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/combobox/configuration.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst combo = new dhx.Combobox(\"combo_container\", {\n    listHeight:300,\n    itemHeight:50\n});\n```\n\n----------------------------------------\n\nTITLE: Getting the Position of a DHTMLX Window using JavaScript\nDESCRIPTION: This snippet demonstrates retrieving the current position of a DHTMLX Window using the `getPosition()` method. It returns an object containing the current `left` and `top` coordinates of the window's top-left corner in pixels. Requires an existing `dhxWindow` instance.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/window/usage.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst position = dhxWindow.getPosition(); // -> {left: 480, top: 234}\n```\n\n----------------------------------------\n\nTITLE: Setting the Active Pagination Page (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to use the `setPage()` method of a DHTMLX Pagination instance (`pagination`). It sets the active page to the one specified by the provided index. In this example, the active page is set to the first page (index 0).\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/pagination/api/pagination_setpage_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\npagination.setPage(0);\n```\n\n----------------------------------------\n\nTITLE: Unselecting All Items with remove() Method in DHTMLX JavaScript\nDESCRIPTION: This example shows how to use the remove() method without parameters to unselect all previously selected items. This functionality is available starting from version 7.0 of the DHTMLX library.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/selection/api/selection_remove_method.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\ncomponent.selection.remove();\n```\n\n----------------------------------------\n\nTITLE: Simplified beforeUnSelect Event Handler in DHTMLX v7.0+\nDESCRIPTION: Demonstrates the simplified version of the beforeUnSelect event handler available from DHTMLX v7.0. This version attaches directly to the component's events interface.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/selection/api/selection_beforeunselect_event.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncomponent.events.on(\"beforeUnSelect\", function(id) {\n    console.log(id);\n    return false;\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Dynamic Rendering in DHTMLX List\nDESCRIPTION: Activates virtual scrolling for improved performance with large datasets by setting the virtual property to true.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/list/configuration.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst list = new dhx.List(\"list_container\", { \n    virtual:true\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Template for DataView Items\nDESCRIPTION: Shows how to create a custom template for rendering DataView items using the template configuration property.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/dataview/configuration.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst dataview = new dhx.DataView(\"dataview_container\", {\n    itemsInRow: 4, \n    template: function(item) {\n        let template = \"<div class='item_wrap'>\";\n        template += \"<img class='image' src=\" + \"../images/\" + item.thumbnailName + \" />\";\n        template += \"<h2 class='title'>\" + item.value + \"</h2>\";\n        template += \"<p class='description'>\" + item.shortDescription + \"</p>\";\n        template += \"</div>\";\n        return template;\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Sample Return Object from getCell Method in JavaScript\nDESCRIPTION: This code snippet shows an example of the object structure returned by the getCell method. The returned object includes properties such as _uid, config, _parent, and events, providing detailed information about the requested cell.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tabbar/api/tabbar_getcell_method.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  _uid: \"u1581524705962\",\n  config: {…},\n  _parent: Tabbar,\n  events: EventSystem,\n  …\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Calendar Heatmap Chart in DHTMLX\nDESCRIPTION: Configuration for creating Calendar Heatmap charts. Includes setup for date formatting, color schemes, and custom tooltips with contribution data.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/chart/configuration_properties.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst heatMapData = [\n    { id: \"100\", value: 50, date: new Date(2022, 2, 2) },\n    { id: \"201\", value: 4, date: new Date(2022, 6, 15) },\n    { id: \"400\", value: -14, date: new Date(2022, 9, 15) },\n    { id: \"500\", value: 9, date: new Date(2022, 9, 20) },\n    { id: \"501\", value: 100, date: new Date(2023, 1, 1) },\n];\n\nconst config = {\n    type: \"calendarHeatMap\",\n    css: \"dhx_widget--bordered\",\n    series: [\n        {\n            value: \"value\",\n            date: \"date\",\n            positiveColor: \"#04deb6\",\n            negativeColor: \"#ff457a\",\n            color: \"#e5e5e5\",\n            weekStart: \"monday\",\n            dateFormat: \"%d %M %Y\",\n            tooltipTemplate: point => `${point[1]} contributions on ${point[0]}`,\n            maxValue: 90,\n            minValue: 0,\n        }\n    ],\n    legend: {\n        values: {\n            text: \"Calendar heatmap chart\",\n            tick: 5,\n            majorTick: 2,\n            step: 1,\n            tickTemplate: value => `${value}c`,\n        },\n        halign: \"right\",\n        valign: \"top\",\n        margin: 0,\n        size: 60,\n    }\n};\n\nconst chart = new dhx.Chart(\"chart_container\", config);\nchart.data.parse(heatMapData);\n```\n\n----------------------------------------\n\nTITLE: Creating Dynamic CSS Classes with cssManager.add()\nDESCRIPTION: Demonstrates how to create new CSS classes dynamically using the cssManager.add() method. The method accepts an object with CSS properties and optional parameters for custom class naming and silent mode.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/css_manager/api/cssmanager_add_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// create a new CSS class\nconst cssClassName = dhx.cssManager.add({\n    display: \"flex\";\n    flexDirection: \"column\"\n});\n\nconst block = document.createElement(\"div\");\nblock.classList.add(cssClassName);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ndhx.cssManager.add({\n    display: \"flex\";\n    flexDirection: \"column\"\n}, \"myCustomClass\");\n\nconst block = document.createElement(\"div\");\nblock.classList.add(\"myCustomClass\");\n```\n\n----------------------------------------\n\nTITLE: Setting Values in DHTMLX JavaScript Slider\nDESCRIPTION: Demonstrates how to set values for a DHTMLX Slider using the setValue() method. The method can accept a single number for standard mode or an array of two numbers for range mode.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/slider/api/slider_setvalue_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// sets value as a number\nslider.setValue(2);\n\n// sets value as an array (for the range mode)\nslider.setValue([2,10]);\n```\n\n----------------------------------------\n\nTITLE: Disabling HTML Rendering in DHTMLX List\nDESCRIPTION: Prevents rendering of HTML content in List items by setting the htmlEnable property to false, displaying HTML as plain text for security purposes.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/list/configuration.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst list = new dhx.List(\"list_container\", {\n    htmlEnable: false, // disables render of HTML content\n    template: template,\n    data: data\n});\n```\n\n----------------------------------------\n\nTITLE: Interactive Menu with Custom HTML Example\nDESCRIPTION: This code snippet provides an interactive example of a menu with custom HTML items. It is embedded as an iframe, allowing users to see and interact with a live demonstration of the custom HTML menu functionality.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/menu/api/api_customhtml_properties.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<iframe src=\"https://snippet.dhtmlx.com/nk65jfmx?mode=js\" frameborder=\"0\" class=\"snippet_iframe\" width=\"100%\" height=\"350\"></iframe>\n```\n\n----------------------------------------\n\nTITLE: Handling change event for Colorpicker in DHTMLX Form (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to attach an event listener to the 'change' event of a Colorpicker control in a DHTMLX Form. The event fires when the value of the control changes and provides the new value as a parameter.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/colorpicker/colorpicker_change_event.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nform.getItem(\"colorpicker\").events.on(\"change\", function(value) {\n    console.log(\"change\", value);\n});\n```\n\n----------------------------------------\n\nTITLE: Grid Footer Cell Styling\nDESCRIPTION: Example of styling footer cells in DHTMLX Grid with custom CSS and dynamic content calculation.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/customization.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<style>\n    .custom_footer{\n        font-size: 18px;\n        text-decoration: underline;\n    }    \n</style>\n\n<script>\n    const grid = new dhx.Grid(\"grid_container\", {\n        columns: [\n            {\n                width: 200, id: \"country\", header: [{ text: \"Country\" }],\n                footer: [\n                    { text: '<div class=\"custom_footer\">Total</div>' },\n                    { text: '<div class=\"custom_footer\">Minimal value</div>' }\n                ],\n                htmlEnable: true\n            },\n            {\n                width: 150, id: \"population\", header: [{ text: \"Population\" }],\n                footer: [\n                    { text: ({ totalPopulation}) => `${totalPopulation}`},\n                    { text: ({ minimalValue }) => `${minimalValue}`}\n                ]\n            }\n        ],\n        summary: { \n            totalPopulation: [\"population\", \"sum\"],\n            minimalValue: [\"population\", \"min\"]\n        },\n        data: dataset\n    });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Setting Timepicker Initial Value (Object) - DHTMLX - JavaScript\nDESCRIPTION: Uses an object specifying 'hour', 'minute', and 'AM' boolean flag to initialize the Timepicker. The 'value' property can accept an object to provide granular time details. Requires DHTMLX library. Input: Object with keys {hour, minute, AM}; Output: Timepicker reflects specified initial hour, minute, and AM/PM.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/timepicker/configuration.md#2025-04-22_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\n// the value as an object\nconst timepicker = new dhx.Timepicker(\"timepicker_container\", {\n    value: {hour: 10, minute: 50, AM: true}\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Form beforeChangeProperties Event Handler in JavaScript\nDESCRIPTION: Example showing how to attach an event handler to the beforeChangeProperties event of a DHTMLX Form. This event fires before a control's properties are changed and allows you to intercept the change process.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/form_beforechangeproperties_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.events.on(\"beforeChangeProperties\", function(name, properties) {\n    console.log(\"beforeChangeProperties\", name, properties);\n    return true;\n});\n```\n\n----------------------------------------\n\nTITLE: Handling the afterExpand Event in DHTMLX Tree\nDESCRIPTION: This code demonstrates how to attach an event handler to the afterExpand event of a Tree component, which fires after expanding a tree item. The handler receives the id of the expanded item as a parameter.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree/api/tree_afterexpand_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntree.events.on(\"afterExpand\", function(id) {\n    // your logic here\n});\n```\n\n----------------------------------------\n\nTITLE: Repainting DHTMLX Combo Box in JavaScript\nDESCRIPTION: Demonstrates how to repaint a Combo Box component after modifying its configuration. The example shows disabling the combo box and then repainting it to reflect the changes.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/combobox/api/combobox_paint_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncombo.config.disabled = true;\n// repaints Combo with a new config\ncombo.paint();\n```\n\n----------------------------------------\n\nTITLE: Removing Layout Cell in JavaScript\nDESCRIPTION: Demonstrates how to remove a specific cell from a DHTMLX Layout using its ID. The method takes a single string parameter representing the cell ID and removes the corresponding cell from the layout.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/layout/api/layout_removecell_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlayout.removeCell(\"1\");\n```\n\n----------------------------------------\n\nTITLE: Setting Up Validation for Single-select Combo in DHTMLX Form (JSX)\nDESCRIPTION: Demonstrates how to configure validation for a single-select combo control in a DHTMLX form, checking for a specific selected value.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/work_with_form.md#2025-04-22_snippet_17\n\nLANGUAGE: jsx\nCODE:\n```\n{\n    name: \"combo\",\n    type: \"combo\",\n    multiselection: false,\n    value: 4,\n    data: [\n        { value: \"value: 1\", id: \"id:1\" },\n        { value: \"value: 2\", id: \"id:2\" },\n        { value: \"value: 3\", id: 3 },\n        { value: \"value: 4\", id: 4 },\n        { value: \"value: 5\", id: 5 },\n    ],\n    validation: (value, text) => {\n        return value === 4 || text === \"value:5\";\n    }\n},\n```\n\n----------------------------------------\n\nTITLE: Setting Colorpicker Properties Example\nDESCRIPTION: Demonstrates how to dynamically change properties of a Colorpicker control in a form using the setProperties method.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/colorpicker/colorpicker_setproperties_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"colorpicker\").setProperties({\n    editable: true, \n    labelWidth: \"300px\",\n    label: \"New label\"\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Grid beforeSort Event Handler in JavaScript\nDESCRIPTION: Example showing how to attach an event handler to the Grid's beforeSort event. This event fires before a column is sorted by clicking on its header and allows preventing the sorting operation by returning false.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_beforesort_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngrid.events.on(\"beforeSort\", (column, dir) => {\n    // your logic here\n    // return false;\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling a Slider in JavaScript using DHTMLX\nDESCRIPTION: This code snippet demonstrates how to enable a slider using the enable() method of the DHTMLX Slider component. The method is called on a slider instance and doesn't require any parameters.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/slider/api/slider_enable_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nslider.enable();\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX Sidebar in HTML and JavaScript\nDESCRIPTION: This snippet demonstrates how to set up a basic HTML structure and initialize a DHTMLX Sidebar component. It includes the necessary CSS and JavaScript files, creates a container div, and initializes the Sidebar using JavaScript.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/sidebar/initialization.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n    <head>\n        <title>How to Start with DHTMLX Sidebar</title>         \n        <script type=\"text/javascript\" src=\"../../codebase/suite.js\"></script>\n        <link rel=\"stylesheet\" href=\"../../codebase/suite.css\">\n    </head>\n    <body>\n        <div id=\"sidebar_container\"></div>\n        <script>\n            // creating DHTMLX Sidebar\n            const sidebar = new dhx.Sidebar(\"sidebar_container\");\n        </script>\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Enhancing Toolbar with Add and Remove Buttons in DHTMLX Optimus\nDESCRIPTION: Expands the ToolbarView class by adding 'Remove' and 'Add' buttons. Implements event handling for button clicks and manages button states based on the active view.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/optimus_guides/how_to_start_optimus.md#2025-04-22_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nimport { View } from \"dhx-optimus\";\n\nexport class ToolbarView extends View {\n    init() {\n        return (this.toolbar = new dhx.Toolbar(null, {\n            css: \"toolbar\",\n            data: [\n                {\n                    type: \"title\",\n                    value: \"DHTMLX Optimus Started Demo\",\n                },\n                {\n                    type: \"spacer\",\n                },\n                {\n                    id: \"first\",\n                    value: \"First\",\n                    group: \"views\",\n                },\n                {\n                    id: \"second\",\n                    value: \"Second\",\n                    group: \"views\",\n                },\n                {\n                    id: \"third\",\n                    value: \"Third\",\n                    group: \"views\",\n                },\n                {\n                    type: \"spacer\",\n                },\n                {\n                    id: \"remove\",\n                    icon: \"dxi dxi-delete\",\n                    circle: true,\n                },\n                {\n                    id: \"add\",\n                    icon: \"dxi dxi-plus\",\n                    circle: true,\n                },\n            ],\n        }));\n    }\n    ready() {\n        this.actionButtons = [\"remove\", \"add\"];\n\n        this.observe(\n            state => state.active,\n            active => {\n                this.showActionButtons();\n\n                switch (active) {\n                    case \"second\":\n                        this.hideActionButtons();\n                        break;\n\n                    case \"first\":\n                        this.toolbar.disable(\"add\");\n                        break;\n                }\n\n                this.toolbar.select(active);\n            }\n        );\n\n        this.toolbar.events.on(\"click\", id => {\n            switch (id) {\n                case \"first\":\n                case \"second\":\n                case \"third\":\n                    this.fire(\"viewChange\", [id]);\n                    break;\n                case \"remove\":\n                    this.fire(\"removeItem\", []);\n                    break;\n                case \"add\":\n                    this.fire(\"addItem\", []);\n                    break;\n            }\n        });\n    }\n\n    hideActionButtons() {\n        this.toolbar.disable(this.actionButtons);\n    }\n\n    showActionButtons() {\n        this.toolbar.enable(this.actionButtons);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Chart Series and Legend\nDESCRIPTION: Defines multiple data series for a Bar chart and configures the chart legend.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/chart/configuration_properties.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst chart = new dhx.Chart(\"chart_container\", {\n    type:\"bar\",\n    scales: {\n        \"bottom\" : {\n            text: \"month\"\n        },\n        \"left\" : {}\n    },\n    series: [\n        {\n            id: \"A\",\n            value: \"company A\",\n            fill: \"#394E79\",\n            stacked: stacked,\n            color: \"none\"\n        },\n        {\n            id: \"B\",\n            value:\"company B\",\n            fill: \"#5E83BA\",\n            stacked: stacked,\n            color: \"none\"\n        }\n    ],\n    legend: {\n        series: [\"A\", \"B\", \"C\"],\n        valign: \"top\",\n        halign: \"right\"\n    }    \n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Line or Spline Chart\nDESCRIPTION: Sets up a complete configuration for a Line or Spline chart, including scales, series, and legend.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/chart/configuration_properties.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n    type: \"line\", // or \"spline\"\n    scales: {\n        \"bottom\": {\n            text: \"month\"\n        },\n        \"left\": {\n            maxTicks: 10,\n            max: 100,\n            min: 0\n        }\n    },\n    series: [\n        {\n            id: \"A\",\n            value: \"company A\",\n            color: \"#81C4E8\",\n            strokeWidth: 3\n        },\n        {\n            id: \"B\",\n            value: \"company B\",\n            color: \"#74A2E7\",\n            strokeWidth: 3\n        },\n        {\n            id: \"C\",\n            value: \"company C\",\n            color: \"#5E83BA\",\n            strokeWidth: 3\n        }\n    ],\n    legend: {\n        series: [\"A\", \"B\", \"C\"],\n        halign: \"right\",\n        valign: \"top\"\n    }\n};\n\nconst chart = new dhx.Chart(\"chart_container\", config);\nchart.data.parse(dataset);\n```\n\n----------------------------------------\n\nTITLE: Sorting DataView Data\nDESCRIPTION: Sorts DataView data using specified field and direction\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/dataview/manipulating_data.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ndataview.data.sort({ \n    by:\"value\",\n    dir:\"desc\"\n});\n```\n\n----------------------------------------\n\nTITLE: Clearing Form Validation in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the clear() method to clear only the form validation. It's useful when you want to reset validation states without affecting the form values.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/form_clear_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nform.clear(\"validation\");\n```\n\n----------------------------------------\n\nTITLE: Setting Focus on ColorPicker Value\nDESCRIPTION: Example demonstrating how to get the ColorPicker widget and set focus on a specific color value using the setFocus() method\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/colorpicker/colorpicker_getwidget_method.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst colorpicker = form.getItem(\"colorpicker\").getWidget();  // -> ColorPicker\ncolorpicker.setFocus(\"#BDF0E9\"); // sets focus on the \"#BDF0E9\" color\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Item Template for DHTMLX List\nDESCRIPTION: Defines a custom template for rendering List items using the template property. The function receives an item object as a parameter.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/list/configuration.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst list = new dhx.List(\"list_container\", {\n    css: \"dhx_widget--bordered\", \n    template: function(item) {\n        const template = \"<div class='list_item'>\";\n        template += \"<div class='item_name'>\"+item.value;\n                \n        template+=\"<span class='item_author'> by \"\n        template += item.authors.filter(function(item){return item}).join(\", \");\n        template += item.publishedDate ? \", \" \n        template += new Date(item.publishedDate.$date).getFullYear() : \"\";\n        template += \"</span>\";\n        template += \"</div>\";\n                \n        template += \"<div class='item_categories'>\"+item.categories.join(\", \")+\"</div>\";\n        template += \"</div>\";\n        return template;\n    },\n    itemHeight: 72\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Initially Selected Date as String\nDESCRIPTION: Creates a Calendar with a date selected using a string value in the default format.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar/configuring.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// selects a date as a string\nconst calendar = new dhx.Calendar(\"calendar_container\", {\n    value: (\"10/02/19\")\n});\n```\n\n----------------------------------------\n\nTITLE: Detaching Event Listeners from DHTMLX Sidebar in JavaScript\nDESCRIPTION: This code shows how to attach an event listener to a sidebar and then detach it. First it attaches a click handler that logs the item ID, then removes that handler using the detach method.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/sidebar/events.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nsidebar.events.on(\"click\", function(id,e){\n    console.log(id);\n});\n\nsidebar.events.detach(\"click\");\n```\n\n----------------------------------------\n\nTITLE: Retrieving Item ID from DataCollection in JavaScript\nDESCRIPTION: Demonstrates how to use the getId() method to get the id of an item from a DataCollection by its index position. The method accepts a numeric index parameter and returns either a string or number representing the item's id.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/data_collection/api/datacollection_getid_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst id = component.data.getId(0); // -> returns \"1\"\n```\n\n----------------------------------------\n\nTITLE: Setting Multiple Cell Selection\nDESCRIPTION: Example of selecting multiple cells in the Grid using multiselection mode\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/usage_selection.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst grid = new dhx.Grid(\"grid_container\", {\n    columns: [\n        // columns config\n    ],\n    selection:\"cell\",\n    multiselection: true,\n    data: dataset\n});\n\ngrid.selection.setCell(grid.data.getId(0),\"yearlyChange\");\ngrid.selection.setCell(grid.data.getId(1),\"netChange\", true, false);\ngrid.selection.setCell(grid.data.getId(3),\"netChange\", true, false);\n```\n\n----------------------------------------\n\nTITLE: Initializing Tree with Checkboxes in JavaScript\nDESCRIPTION: This code demonstrates how to initialize a DHTMLX Tree component with checkboxes enabled for all tree items. The checkbox parameter is set to true to display checkboxes next to each item in the tree.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree/api/tree_checkbox_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst tree = new dhx.Tree(\"tree_container\", {checkbox: true});\n```\n\n----------------------------------------\n\nTITLE: Defining eventHandlers Config for DataView in JavaScript\nDESCRIPTION: This snippet demonstrates the structure of the eventHandlers configuration object for a DataView component. It allows adding custom event handlers to specific CSS classes within the item template.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/dataview/api/dataview_eventhandlers_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\neventHandlers?: {\n    [eventName: string]: {\n        [className: string]: (event: Event, id: string | number) => void | boolean;\n    };\n};\n```\n\n----------------------------------------\n\nTITLE: Applying Custom CSS to DHTMLX Menu in HTML and JavaScript\nDESCRIPTION: This example demonstrates how to apply custom CSS classes to a DHTMLX Menu component. It includes CSS variables for customizing colors and a JavaScript snippet for initializing the Menu with the custom class.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/menu/api/menu_css_config.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<style>\n    .custom,.custom--popup-menu {\n        --dhx-background-primary: #3A434A;\n        --dhx-background-secondary: #5a6872;\n        --dhx-background-additional: #5a6872;\n        --dhx-s-toolbar-background: var(--dhx-background-primary);\n\n        --dhx-color-primary: #118d8d;\n        --dhx-color-primary-hover: #49e9e9;\n        --dhx-color-primary-active: #49e9e9;\n\n        --dhx-font-color-primary: #fff;\n        --dhx-font-color-secondary: #fff;\n        --dhx-font-color-additional: #fff;\n    }\n</style>\n\n<script>\n    const menu = new dhx.Menu(\"menu_container\", {\n        css: \"custom\",\n    });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Handling Sidebar Collapse Event in JavaScript\nDESCRIPTION: Example of attaching an event handler to the afterCollapse event of a DHTMLX Sidebar component. The event fires after the sidebar is collapsed.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/sidebar/api/sidebar_aftercollapse_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsidebar.events.on(\"afterCollapse\", function() {\n    // your logic here\n});\n```\n\n----------------------------------------\n\nTITLE: Handling toggleSeries Event in DHTMLX Chart\nDESCRIPTION: Demonstrates how to attach an event listener to handle the toggleSeries event that fires when a series is toggled in the chart legend. The handler receives the id of the toggled series.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/chart/api/chart_toggleseries_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nchart.events.on(\"toggleSeries\", function(id){\n    console.log(\"The \"+id+\" series is toggled\");\n});\n```\n\n----------------------------------------\n\nTITLE: Attaching Layout Event Listener in JavaScript\nDESCRIPTION: Demonstrates how to attach an event listener to a Layout component using the events.on() method. The example shows attaching a beforeHide event handler that logs the cell ID.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/layout/events.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlayout.events.on(\"beforeHide\", function(id){\n    console.log(\"The id of a cell\", id);\n});\n```\n\n----------------------------------------\n\nTITLE: Hiding a Toggle Control in DHTMLX Form (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to hide a Toggle control in a DHTMLX Form using the hide() method. It retrieves the Toggle item from the form using getItem() and then calls the hide() method on it.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/toggle/toggle_hide_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"toggle\").hide();\n```\n\n----------------------------------------\n\nTITLE: Firing Custom Ribbon Events\nDESCRIPTION: Example of how to manually fire custom events using the events.fire() method with event name and optional parameters.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/ribbon/handling_events.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nribbon.events.fire(evName,[parameters]);\n```\n\n----------------------------------------\n\nTITLE: Handling monthSelected Event in DHTMLX Calendar (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to attach an event handler to the monthSelected event of a DHTMLX Calendar. The event fires after a month is selected, and the handler receives the month parameter (0-11) which is converted to a human-readable month number (1-12) for display in the console.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar/api/calendar_monthselected_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncalendar.events.on(\"monthSelected\", function(month) {\n   console.log(\"Selected month: \" + (month + 1));\n});\n```\n\n----------------------------------------\n\nTITLE: Handling dragRowOut Event in DHTMLX Grid\nDESCRIPTION: This snippet demonstrates how to attach an event listener for the dragRowOut event in a DHTMLX Grid. The event fires when a row is dragged out of a potential target, providing data about the drag operation and the original mouse event.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_dragrowout_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngrid.events.on(\"dragRowOut\", (data, event) => {\n  // your logic here\n});\n```\n\n----------------------------------------\n\nTITLE: Window API Reference Table Structure\nDESCRIPTION: Markdown tables documenting the API structure of the Window component, organized into Methods, Events, and Properties sections\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/window/api/api_overview.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name                                            | Description                                            |\n|-------------------------------------------------|--------------------------------------------------------|\n| [](window/api/window_attach_method.md)          | @getshort(window/api/window_attach_method.md)          |\n| [](window/api/window_attachhtml_method.md)      | @getshort(window/api/window_attachhtml_method.md)      |\n[...additional rows...]\n```\n\n----------------------------------------\n\nTITLE: Handling Group Panel Item Click in DHTMLX Grid\nDESCRIPTION: Example of attaching an event handler to the groupPanelItemClick event of a DHTMLX Grid. The handler logs the ID of the clicked group panel item to the console.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_grouppanelitemclick_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngrid.events.on(\"groupPanelItemClick\", (id) => {\n    console.log(\"Click on the group item:\", id)\n});\n```\n\n----------------------------------------\n\nTITLE: Attaching beforeValidate Event Handler in JavaScript\nDESCRIPTION: This snippet demonstrates how to attach an event handler for the beforeValidate event of a form. The handler logs the event name and value, and returns true to allow validation to proceed.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/form_beforevalidate_event.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nform.events.on(\"beforeValidate\", function(name, value) {\n    console.log(\"beforeValidate\", name, value); \n    return true;\n});\n```\n\n----------------------------------------\n\nTITLE: Repainting DHTMLX Toolbar with paint() Method in JavaScript\nDESCRIPTION: A simple example demonstrating how to call the paint() method to repaint a Toolbar instance on a page. This method is used to refresh the UI representation of the Toolbar component.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/toolbar/api/toolbar_paint_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ntoolbar.paint();\n```\n\n----------------------------------------\n\nTITLE: Handling beforeValidate Event in DHTMLX Timepicker Control\nDESCRIPTION: This example demonstrates how to attach an event handler to the beforeValidate event of a Timepicker control in a DHTMLX form. The handler logs the value being validated and returns true to allow the default validation to proceed.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/timepicker/timepicker_beforevalidate_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"timepicker\").events.on(\"beforeValidate\", function(value) {\n    console.log(\"beforeValidate\", value);\n    return true;\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Arrow Key Navigation in DHTMLX List\nDESCRIPTION: Enables navigation of List items using arrow keys. The keyNavigation property can be set to true/false or a custom function for custom navigation logic.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/list/configuration.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst list = new dhx.List(\"list_container\", {keyNavigation:true});\n```\n\n----------------------------------------\n\nTITLE: Adding a Tab to DHTMLX Tabbar - JavaScript\nDESCRIPTION: Demonstrates how to dynamically add a new tab to a DHTMLX Tabbar instance using the addTab() method. Requires an existing Tabbar instance and incrementing variable for tab content. The first parameter is a tab object with identifiers and classes; the second parameter is the insertion index. This allows dynamic UI modifications in realtime.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tabbar/work_with_tabbar.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// adding a new tab\\ntabbar.addTab({tab: \\\"tab-\\\" + nextTab++, css:\\\"panel flex\\\"}, 0);\n```\n\n----------------------------------------\n\nTITLE: Clearing validation of SimpleVault control in DHTMLX Form\nDESCRIPTION: This example demonstrates how to clear validation of a SimpleVault control in a DHTMLX Form by using the clearValidate() method on the form item instance.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/simplevault/simplevault_clearvalidate_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"simplevault\").clearValidate();\n```\n\n----------------------------------------\n\nTITLE: Initializing Tabbar with Basic Views Configuration\nDESCRIPTION: Example showing how to initialize a DHTMLX Tabbar with multiple tabs using the views configuration. Each tab has a name and CSS classes applied.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tabbar/api/tabbar_views_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst tabbar = new dhx.Tabbar(\"tabbar_container\", {\n    views:[\n        { tab: \"left\", css:\"panel flex\", header:\"Left\"},\n        { tab: \"west\", css:\"panel flex\", header:\"West\"},\n        { tab: \"east\", css:\"panel flex\", header:\"East\"},\n        { tab: \"right\", css:\"panel flex\", header:\"Right\" }\n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Inline Editing of DHTMLX List Items\nDESCRIPTION: Allows users to edit List items inline by setting the editable property to true.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/list/configuration.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst list = new dhx.List(\"list_container\", {editable:true});\n```\n\n----------------------------------------\n\nTITLE: Collapsing Layout Cell in JavaScript\nDESCRIPTION: Demonstrates how to collapse a specific cell in DHTMLX Layout using the collapse() method. The method is called on a cell object retrieved using getCell() with the cell's ID.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/layout/api/cell/layout_cell_collapse_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlayout.getCell(\"id\").collapse();\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Layout with Cell Configuration in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a basic layout with DHX Suite by configuring cells with specific patterns. The layout includes a header cell, a sidebar cell, and a main content cell with defined heights and widths.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/slider/constructor.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar layout = new dhx.Layout(\"layout_container\", {\n    type: \"line\",\n    rows: [\n        {\n            id: \"toolbar\",\n            header: \"Header\",\n            height: \"60px\"\n        },\n        {\n            cols: [\n                {\n                    id: \"sidebar\",\n                    width: \"200px\",\n                    header: \"Sidebar\"\n                },\n                {\n                    id: \"content\",\n                    header: \"Content\"\n                }\n            ]\n        }\n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: Showing a Single or Multiple Menu Items in DHTMLX Menu - JavaScript\nDESCRIPTION: Demonstrates how to display one or more specific menu items using the show() method on a DHTMLX Menu instance. Requires an initialized DHTMLX Menu object. The 'ids' parameter accepts either a single string/number identifying an item or an array of such IDs. This method has no return value. Both individual and multiple item displays are supported, and dependencies include the DHTMLX Suite library (Menu component).\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/menu/api/menu_show_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nmenu.show(\"save_btn\");\n// several at a time\nmenu.show([\"cancel_btn\",\"del_btn\"]);\n```\n\n----------------------------------------\n\nTITLE: Calling (Firing) Events on DHTMLX Window in JavaScript\nDESCRIPTION: Shows the syntax for programmatically triggering an event on a DHTMLX Window instance using the `dhxWindow.events.fire()` method. This method requires the name of the event to fire as the first argument and an array containing any arguments to pass to the event listeners as the second argument.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/window/handling_events.md#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\ndhxWindow.events.fire(\"name\",args);\n// where args is an array of arguments\n```\n\n----------------------------------------\n\nTITLE: Handling blur Event in DHTMLX Form Combo Box Control\nDESCRIPTION: This snippet demonstrates how to attach an event listener for the 'blur' event on a Combo Box control in a DHTMLX Form. The event fires when the control loses focus and provides the IDs of the currently selected options.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/combo/combo_blur_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"combo\").events.on(\"blur\", (ids) => {\n    console.log(\"blur\", ids);\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Item Editing in DHTMLX List (JavaScript)\nDESCRIPTION: This snippet demonstrates how to use the editItem() method to enable editing of a specific item in a DHTMLX List. The method takes the id of the item as a parameter.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/list/api/list_edititem_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlist.editItem(\"1\");\n```\n\n----------------------------------------\n\nTITLE: Initializing Grid with Multiselection in JavaScript\nDESCRIPTION: This snippet demonstrates how to initialize a DHTMLX Grid with multiselection enabled. It sets up a grid with custom columns, enables multiselection, sets the selection mode to 'row', and populates it with data from a dataset.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_multiselection_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst grid = new dhx.Grid(\"grid_container\", {\n    columns: [\n        // columns config\n    ],\n    multiselection:true,\n    selection:\"row\",\n    data: dataset\n});\n```\n\n----------------------------------------\n\nTITLE: Showing and Hiding DHTMLX Window using JavaScript\nDESCRIPTION: This snippet demonstrates controlling the visibility of a DHTMLX Window. The `show(left, top)` method displays the window at the specified coordinates (optional parameters). Calling `show()` without parameters uses the default position. The `hide()` method makes the window invisible. Requires an existing `dhxWindow` instance.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/window/usage.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// shows a window in the specified position\ndhxWindow.show(34,54);\n\n// hides a window\ndhxWindow.hide();\n```\n\n----------------------------------------\n\nTITLE: Defining Grid Column Width in DHTMLX JavaScript UI\nDESCRIPTION: This snippet demonstrates how to set the width of a column in a DHTMLX Grid. The 'width' property is optional and specifies the column width in pixels. Note that the minimum width is 20px, and this property is ignored if the 'adjust' property is used.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/gridcolumn_properties/gridcolumn_width_property.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nwidth?: number;\n```\n\n----------------------------------------\n\nTITLE: Applying Custom CSS to DataView\nDESCRIPTION: Example of applying custom CSS classes to style a DataView component with custom colors and borders.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/dataview/api/dataview_css_config.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<style>\n    .custom {\n        --dhx-font-color-primary: #fff;\n        --dhx-background-primary: #3A434A;\n        --dhx-color-primary: #118d8d;\n\n        --dhx-border-color: #4A555E;\n        --dhx-border: var(--dhx-border-width) solid var(--dhx-border-color);\n    }\n</style>\n\n<script>\n    const dataview = new dhx.DataView(\"dataview_container\", {\n        itemsInRow: 2, \n        gap: 10,\n        css: \"custom dhx_widget--bordered\",\n        template\n    });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Disabling a Specific Toggle Element in JavaScript Form's ToggleGroup\nDESCRIPTION: This snippet demonstrates how to use the disable() method to disable a specific toggle element within a ToggleGroup control in a DHTMLX Form. It disables the toggle element with the id 'toggle_1'.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/togglegroup/togglegroup_disable_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nform.getItem(\"ToggleGroup\").disable(\"toggle_1\");\n```\n\n----------------------------------------\n\nTITLE: Registering an input Event Handler in DHTMLX Ribbon - JavaScript\nDESCRIPTION: Demonstrates how to use the events API of the DHTMLX Ribbon to listen for the 'input' event and execute a custom callback each time the user enters text in an input field. This code requires DHTMLX Ribbon to be properly initialized as 'ribbon', and uses the events.on function to bind a handler with parameters for the field's ID and entered value. The function logs the entered value to the JavaScript console. Inputs are the input field's id and value strings; the output is a console message reflecting user input. This approach is suitable for real-time validation or data processing during text entry.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/ribbon/api/ribbon_input_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nribbon.events.on(\"input\", function(id, value){\n    console.log(\"You've entered: \" + value);\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling DHTMLX Form Slider Control\nDESCRIPTION: Demonstrates how to enable a previously disabled Slider control in a DHTMLX Form using the enable() method. The method is called on a Slider form control that is retrieved using the getItem() method.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/slider/slider_enable_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"slider\").enable();\n```\n\n----------------------------------------\n\nTITLE: Adding an Item to a Toolbar using TreeCollection in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the add() method of TreeCollection to insert a new button item into a toolbar at a specific position. The method takes an object with the item's configuration and an index parameter.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree_collection/api/treecollection_add_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ntoolbar.data.add({\n    type:\"button\",\n    icon:\"dxi-plus\",\n    value:\"New\"\n},1);\n```\n\n----------------------------------------\n\nTITLE: Getting State of Toolbar Controls with DHTMLX getState - JavaScript\nDESCRIPTION: This snippet demonstrates how to call the getState method on a DHTMLX Toolbar instance to retrieve the value or state of a specific control by its id (e.g., \\\"search\\\"). The method returns either a string (for text-based controls) or a boolean (for state/toggle controls). Requires the DHTMLX Toolbar component to be initialized. Pass the desired control's id as a string parameter to retrieve its current value; the return type depends on the control. For example, a search input would return its current text value.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/toolbar/api/toolbar_getstate_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst state1 = toolbar.getState(\"search\"); \n// -> \"toolbar\"\n```\n\n----------------------------------------\n\nTITLE: Selecting Toolbar Items\nDESCRIPTION: Using the select() method to select a particular toolbar item, with an option to unselect previously selected items.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/toolbar/common_methods.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ntoolbar.select(\"web\");\n```\n\n----------------------------------------\n\nTITLE: Handling beforeShow Event in DHTMLX Form Textarea Control\nDESCRIPTION: This example demonstrates how to attach an event handler to the beforeShow event of a Textarea control in a DHTMLX Form. The handler logs the current value and returns true to allow the control to be shown.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/textarea/textarea_beforeshow_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"textarea\").events.on(\"beforeShow\", function(value) {\n    console.log(\"beforeShow\", value);\n    return true;\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Text Control Properties Change Event in DHTMLX Form\nDESCRIPTION: Example showing how to attach an event handler for the beforeChangeProperties event of a Text form control. The handler logs the properties being changed and returns true to allow the change.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/text/text_beforechangeproperties_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"text\").events.on(\"beforeChangeProperties\", function(properties) {\n    console.log(\"beforeChangeProperties\", properties);\n    return true;\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Calendar with String Date Array\nDESCRIPTION: Example of creating a calendar instance with a date selected using an array containing a string date.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar/api/calendar_value_config.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst calendar = new dhx.Calendar(\"calendar_container\", {\n    value: ([\"10/02/19\"])\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Chart Legend Configuration Example\nDESCRIPTION: Shows how to initialize a chart with basic legend configuration including series list and alignment options\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/chart/api/chart_legend_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst chart = new dhx.Chart(\"chart_container\", {\n    scales: {\n        // scales config\n    },\n    series: [\n        // list of series \n    ],\n    legend: {\n        series: [\"A\", \"B\", \"C\"],\n        valign: \"top\",\n        halign: \"right\"\n    }    \n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Datepicker Properties in DHTMLX Form\nDESCRIPTION: This code snippet demonstrates the usage of various properties for configuring a Datepicker control in a DHTMLX Form. It includes options for setting the type, name, value, appearance, validation, and date-specific settings.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/calendar/api_calendar_properties.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    type: \"datepicker\",\n    name?: string,\n    id?: string,\n    value?: Date | string,\n\n    css?: string,\n    disabled?: boolean, // false by default\n    editable?: boolean, // false by default\n    height?: string | number | \"content\", // \"content\" by default\n    hidden?: boolean, // false by default\n    padding?: string | number, \n    required?: boolean, // false by default\n    validation?: (input: string | Date) => boolean,\n    width?: string | number | \"content\", // \"content\" by default\n\n    date?: Date | string,\n    dateFormat?: string, // \"%d/%m/%y\" by default\n    disabledDates?: (date: Date) => boolean,\n    icon?: string,\n    mark?: (date: Date) => string,\n    mode?: \"calendar\" | \"month\" | \"year\", // \"calendar\" by default\n    placeholder?: string,\n    thisMonthOnly?: boolean, // false by  default\n    timeFormat?: 24 | 12, // 24 by default\n    timePicker?: boolean, // false by default\n    valueFormat?: string | Date, // \"string\" by default\n    weekNumbers?: boolean, // false by default\n    weekStart?: \"saturday\" | \"sunday\" | \"monday\", // \"sunday\" by default\n\n    hiddenLabel?: boolean, // false by default\n    label?: string,\n    labelPosition?: \"left\" | \"top\", // \"top\" by default\n    labelWidth?: string | number,\n\n    helpMessage?: string,\n    preMessage?: string,\n    successMessage?: string,\n    errorMessage?: string,\n}\n```\n\n----------------------------------------\n\nTITLE: Handling afterLazyLoad Event in JavaScript DataCollection\nDESCRIPTION: This snippet demonstrates how to attach an event handler to the afterLazyLoad event of a DataCollection component. The event fires after receiving a response from the server during lazy loading of data.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/data_collection/api/datacollection_afterlazyload_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncomponent.data.events.on(\"afterLazyLoad\", function (from, count) {\n    // your code here\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Combo Box change Event in DHTMLX Form\nDESCRIPTION: This example demonstrates how to attach an event handler to the 'change' event of a Combo Box control in a DHTMLX Form. The handler logs the IDs of newly selected options to the console.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/combo/combo_change_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"combo\").events.on(\"change\", function(ids) {\n    console.log(\"change\", ids);\n});\n```\n\n----------------------------------------\n\nTITLE: Checking Disabled State of Checkbox Group Element\nDESCRIPTION: Demonstrates how to use the isDisabled() method to check if a specific checkbox element within a CheckboxGroup control is disabled. The method returns a boolean value indicating the disabled state.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/checkbox_group/checkboxgroup_isdisabled_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"CheckboxGroup\").isDisabled(\"id_1\"); // -> true/false\n```\n\n----------------------------------------\n\nTITLE: Enabling and Disabling MenuItem\nDESCRIPTION: Shows how to enable or disable a MenuItem using the enable() and disable() methods.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/toolbar/menuitem.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ntoolbar.enable(id);\ntoolbar.disable(id);\n```\n\n----------------------------------------\n\nTITLE: Handling afterRemove Event in DHTMLX TreeCollection\nDESCRIPTION: Example showing how to attach an event handler to the afterRemove event of a TreeCollection component. The handler receives the removed item as a parameter and logs a message to the console.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree_collection/api/treecollection_afterremove_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncomponent.data.events.on(\"afterRemove\", function(removedItem){\n    console.log(\"An item is removed\");\n});\n```\n\n----------------------------------------\n\nTITLE: Attaching afterDrop Event Handler in JavaScript\nDESCRIPTION: This snippet demonstrates how to attach an event handler for the afterDrop event of a Tree component. The event fires after the user releases the mouse button while dragging an item, but before the drag operation is completed.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree/api/tree_afterdrop_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntree.events.on(\"afterDrop\", function(data, events) {\n    // your logic here\n});\n```\n\n----------------------------------------\n\nTITLE: Getting the Active Tab ID from DHTMLX Tabbar - JavaScript\nDESCRIPTION: Demonstrates how to retrieve the id of the currently active tab using getActive(). The snippet initializes a Tabbar with four tabs, and invokes getActive() to get the id of the focused tab. Returns the id string. Useful for querying current state for logic or display updates.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tabbar/work_with_tabbar.md#2025-04-22_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst tabbar = new dhx.Tabbar(\\\"tabbar_container\\\", {\\n    mode: \\\"top\\\",            \\n    views:[\\n        { id: \\\"1\\\", tab: \\\"tab-1\\\", css:\\\"panel flex\\\"},\\n        { id: \\\"2\\\", tab: \\\"tab-2\\\", css:\\\"panel flex\\\"},\\n        { id: \\\"3\\\", tab: \\\"tab-3\\\", css:\\\"panel flex\\\"},\\n        { id: \\\"4\\\", tab: \\\"tab-4\\\", css:\\\"panel flex\\\"}\\n    ]\\n});\\n\\nconst active = tabbar.getActive(); // -> \\\"2\\\"\n```\n\n----------------------------------------\n\nTITLE: Removing a Tab from DHTMLX Tabbar - JavaScript\nDESCRIPTION: Shows how to remove a tab from a Tabbar component by obtaining its id with getId() and passing it to removeTab(). Requires an initialized Tabbar instance. Designed to cleanly remove user interface panels based on user action or logic. Input is the index; output is the removal of the specified tab.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tabbar/work_with_tabbar.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// removing a tab\\nconst id = tabbar.getId(0);\\ntabbar.removeTab(id);\n```\n\n----------------------------------------\n\nTITLE: Initializing SimpleVault Control in DHTMLX Form\nDESCRIPTION: Example showing how to initialize a SimpleVault control within a DHTMLX Form. The control includes configuration options for label, position, and validation settings.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/simplevault.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst form = new dhx.Form(\"form_container\", {\n    rows: [\n        {\n            type: \"simpleVault\",\n            name:\"simplevault\",\n            label: \"i am simpleVault\",\n            labelWidth: \"120px\",\n            labelPosition: \"left\",\n            disabled: false,\n            required: false\n        }\n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: Updating CSS Class with DHTMLX CSS Manager\nDESCRIPTION: Demonstrates how to add a CSS class silently and then update it using the CSS Manager. The method is used after silently adding CSS properties to ensure they are applied to the DOM.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/css_manager/api/cssmanager_update_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndhx.cssManager.add({\n    display: \"flex\";\n    flexDirection: \"column\"\n}, \"myClassName\", true);\n\ndhx.cssManager.update();\n```\n\n----------------------------------------\n\nTITLE: Removing Focus from Avatar Control in DHTMLX Form (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to use the blur() method to remove focus from an Avatar control in a DHTMLX Form. The method is called on the Avatar item retrieved from the form using the getItem() method.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/avatar/avatar_blur_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nform.getItem(\"avatar\").blur();\n```\n\n----------------------------------------\n\nTITLE: Unselecting Grid Cells using removeCell Method\nDESCRIPTION: Demonstrates three ways to use the removeCell() method to unselect cells in a DHTMLX Grid: removing all selections, unselecting cells in a specific row, and unselecting a specific cell.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/selection/selection_removecell_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// unselects all previously selected cells\ngrid.selection.removeCell();\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// unselects all previously selected cells of the specified row\ngrid.selection.removeCell(rowId);\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// removes selection from the specified cell\ngrid.selection.removeCell(rowId, colId);\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX Grid Component with Configuration\nDESCRIPTION: Creates a new Grid instance with custom column definitions, including filtering and templating capabilities. The grid is configured with container fitting and row selection enabled.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tutorial/basic_application/step4.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar grid = new dhx.Grid(null, {\n    columns: \n        [\n           { id: \"id\", header: [{ text: \"#\", rowspan: 2 }] },\n           { id: \"first_name\", header: [{ text: \"First name\" },\n                { content: \"inputFilter\" }] },\n           { id: \"last_name\", header: [{ text: \"Last name\" },\n                { content: \"inputFilter\" }] }, \n           { id: \"vip\", header: [{ text: \"Premium\", rowspan: 2 }], \n                template: function (text, row, col) { \n                   return text ? \"Premium user\" : \"Default user\"\n                } \n           }\n        ],\n       fitToContainer: true,\n    selection: \"row\",\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing DataView with Data in JavaScript\nDESCRIPTION: This code snippet shows how to initialize a DHTMLX DataView component with a predefined dataset. It sets various configuration options like itemsInRow, gap, CSS class, and a custom template.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/dataview/data_loading.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst dataview = new dhx.DataView(\"dataview_container\", {\n    itemsInRow: 2,\n    gap: 10,\n    css: \"dhx_widget--bordered\",\n    template: template,\n    data: dataset\n});\n```\n\n----------------------------------------\n\nTITLE: Getting the Active Page Index - DHTMLX Pagination API - JavaScript\nDESCRIPTION: Retrieves the index of the currently active page using the getPage() method. Returns an integer representing the zero-based page index. Requires an initialized pagination object and no parameters are needed.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/pagination/usage.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst pageIndex = pagination.getPage();\n// -> 3\n```\n\n----------------------------------------\n\nTITLE: Enabling Selection in JavaScript List\nDESCRIPTION: Activates the selection of items in a List component using the enable() method of the selection object.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/list/usage_selection.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlist.selection.enable();\n```\n\n----------------------------------------\n\nTITLE: Setting Form Control Group Width in DHTMLX JavaScript Form\nDESCRIPTION: This example demonstrates how to configure the width property for the entire form and nested components. The width property can be set at different levels: for the entire form, for rows/cols containers, and for individual form controls.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/form_width_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst form = new dhx.Form(\"form_container\", {\n    css: \"dhx_widget--bordered\",\n    width: \"400px\", // sets the common width for rows\n    padding: \"20px\",   \n    rows: [\n        {\n            type: \"text\",\n            name: \"text\",\n            value: \"Do you agree with our terms and conditions?\"\n        },\n        {\n            padding: \"10px\",\n            width: \"200px\", // sets the common width for cols\n            align: \"end\",\n            cols: [{\n                type: \"checkbox\",\n                width: \"80px\",\n                label: \"I agree\",\n                name: \"agree\",\n                id: \"agree\",\n                checked: true\n            },\n            {\n                type: \"checkbox\",\n                label: \"I disagree\",\n                name: \"align\",\n            }]\n        }\n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing TreeMap Chart with Custom Data in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a TreeMap chart using the DHTMLX Chart component. It includes setting up the data array, configuring chart options such as type, CSS, series, and legend, and finally initializing the chart with the specified data.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/chart/api/chart_data_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst treeMapData = [\n    { id: \"2020\", month: \"2020\" },\n    { id: \"Jan\", value: 144.33, month: \"Jan\", parent: \"2020\" },\n    { id: \"Feb\", value: 22.12, month: \"Feb\", parent: \"2020\" },\n    { id: \"Mar\", value: 53.21, month: \"Mar\", parent: \"2020\" },\n    { id: \"Apr\", value: 34.25, month: \"Apr\", parent: \"2020\" },\n    { id: \"May\", value: 64.65, month: \"May\", parent: \"2020\" },\n\n    // more data\n];\n\nconst chart = new dhx.Chart(\"chart_container\", {\n    type: \"treeMap\",\n    css: \"dhx_widget--bg_white dhx_widget--bordered\",\n    series: [\n        {\n            value: \"value\",\n            text: \"month\",\n            stroke: \"#eeeeee\",\n            strokeWidth: 6, \n            tooltipTemplate: item => `${item[1]} - ${item[0]}`,\n        }\n    ],\n    legend: {\n        treeSeries: [\n            { greater: 80 },\n            { from: 50, to: 80 },\n            { from: 25, to: 50 },\n            { less: 25, color: \"#CAC2D1\"},\n        ],\n        halign: \"right\",\n        valign: \"bottom\",\n    },\n    data: treeMapData\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Selected Tree Item Object in JavaScript\nDESCRIPTION: Demonstrates how to get the object of the selected Tree item using the selection object's getItem() method.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree/usage_selection.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst item = tree.selection.getItem();\n```\n\n----------------------------------------\n\nTITLE: Checking if a Fieldset is Disabled in DHTMLX Form (JavaScript)\nDESCRIPTION: This example demonstrates how to check whether a Fieldset control is disabled using the isDisabled() method. The method returns a boolean value indicating the disabled state of the Fieldset.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/fieldset/fieldset_isdisabled_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"fieldset\").isDisabled(); \n// -> true/false\n```\n\n----------------------------------------\n\nTITLE: Removing Custom CSS Class with cssManager\nDESCRIPTION: Demonstrates how to use the remove() method to delete a custom CSS class that was previously created using cssManager. The method takes a class name as a string parameter and removes both the class and its associated styles.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/css_manager/api/cssmanager_remove_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndhx.cssManager.remove(\"myCustomClass\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Text Control Properties in DHTMLX Form (JavaScript)\nDESCRIPTION: This snippet demonstrates the structure and available properties for configuring a Text control in a DHTMLX Form. It includes options for setting the control type, name, value, styling, dimensions, input type, label properties, and validation messages.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/text/api_text_properties.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    type: \"text\",\n    name?: string,\n    id?: string,\n    value?: number | string,\n\n    css?: string,\n    disabled?: boolean, // false by default\n    height?: string | number | \"content\", // \"content\" by default\n    hidden?: boolean, // false by default\n    padding?: string | number,\n    width?: string | number | \"content\", // \"content\" by default\n\n    inputType?: \"text\" | \"password\" | \"number\", // \"text\" by default\n    \n    hiddenLabel?: boolean, // false by default\n    label?: string,\n    labelPosition?: \"left\" | \"top\", // \"top\" by default\n    labelWidth?: string | number,\n\n    helpMessage?: string,\n    preMessage?: string,\n    successMessage?: string,\n    errorMessage?: string,\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Focus on Slider Thumbs with JavaScript\nDESCRIPTION: Demonstrates how to set focus on Slider thumbs using the focus() method. When range mode is active, you can specify which thumb to focus using the extra parameter.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/slider/api/slider_focus_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// sets focus to the thumb;  \n// if the range mode is activated, sets focus to the first thumb\nslider.focus();\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// sets focus to the second thumb if the range mode is activated\nslider.focus(true);\n```\n\n----------------------------------------\n\nTITLE: Handling DataCollection Load Event in JavaScript\nDESCRIPTION: Example showing how to attach an event handler to the load event of a DataCollection. The handler fires when items are loaded into the collection.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/data_collection/api/datacollection_load_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncomponent.data.events.on(\"load\", function(){\n    console.log(\"Items are loaded.\");\n});\n```\n\n----------------------------------------\n\nTITLE: Detaching Event Listeners in DHTMLX Toolbar\nDESCRIPTION: This example shows how to attach a click event listener and then detach it from the toolbar. After detaching, the handler will no longer respond to click events.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/toolbar/handling_events.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ntoolbar.events.on(\"click\", function(id,e){\n    console.log(id);\n});\n\ntoolbar.events.detach(\"click\");\n```\n\n----------------------------------------\n\nTITLE: Hiding Menu Items using DHTMLX Menu in JavaScript\nDESCRIPTION: Demonstrates how to programmatically hide specific or multiple menu items using the hide() method from the DHTMLX JavaScript Menu API. The method accepts a single item ID, an array of IDs, or no parameters (to hide all items). Dependencies include the DHTMLX Menu instance referenced by the menu variable. Inputs are item IDs (string or number) or an array thereof; omitting the parameter hides all items. Output is the menu item(s) being hidden in the UI; there are no return values. This method is available from DHTMLX Suite v7.0 onwards.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/menu/api/menu_hide_method.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nmenu.hide(\"save_btn\");\n// several at a time\nmenu.hide([\"cancel_btn\",\"del_btn\"]);\n```\n\nLANGUAGE: js\nCODE:\n```\n// hides all Menu items\nmenu.hide();\n```\n\n----------------------------------------\n\nTITLE: Handling canDrop Event in DHTMLX List\nDESCRIPTION: This code snippet demonstrates how to attach an event handler to the canDrop event of a DHTMLX List component. The event fires when a dragged item is over a potential target item during a drag-and-drop operation.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/list/api/list_candrop_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlist.events.on(\"canDrop\", function(data, events) {\n    // your logic here\n});\n```\n\n----------------------------------------\n\nTITLE: Using editEnd Method in JavaScript Grid\nDESCRIPTION: Demonstrates how to use the editEnd() method to finish editing in a grid cell. The method can be called with an optional boolean parameter to control whether edited data should be saved.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_editend_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngrid.editEnd(); // the edited data will be saved\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngrid.editEnd(true); // the edited data won't be saved\n```\n\n----------------------------------------\n\nTITLE: Adding Number Badge to MenuItem in JavaScript\nDESCRIPTION: This snippet illustrates how to add a number badge to a MenuItem using the 'count' property.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/sidebar/menuitem.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    type:\"menuItem\", value:\"Some\",\n    icon:\"dxi dxi-check\",\n    count:10\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Event Listener for beforeChangeProperties in DHTMLX Form Slider\nDESCRIPTION: This example demonstrates how to attach an event listener to the beforeChangeProperties event of a Slider control in a DHTMLX Form. The event fires before configuration attributes are changed and allows returning false to cancel the default action.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/slider/slider_beforechangeproperties_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"slider\").events.on(\"beforeChangeProperties\", function(properties) {\n    console.log(\"beforeChangeProperties\", properties);\n    return true;\n});\n```\n\n----------------------------------------\n\nTITLE: Hiding Button Control in DHTMLX Form using JavaScript\nDESCRIPTION: This code snippet demonstrates how to use the hide() method to hide a Button control in a DHTMLX Form. It retrieves the Button item from the form using getItem() and then calls the hide() method on it.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/button/button_hide_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nform.getItem(\"button\").hide();\n```\n\n----------------------------------------\n\nTITLE: Setting Focus to a Textarea Control in DHTMLX Form\nDESCRIPTION: This example demonstrates how to programmatically set focus to a Textarea control within a DHTMLX Form. The focus() method is used to direct user attention to a specific form field.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/textarea/textarea_focus_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"textarea\").focus();\n```\n\n----------------------------------------\n\nTITLE: Handling afterChangeProperties Event in DHTMLX Form Checkbox Group\nDESCRIPTION: This code shows how to attach an event handler to the afterChangeProperties event of a Checkbox Group control in a DHTMLX form. The event fires when configuration attributes of the control are changed dynamically, and provides an object containing the updated properties.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/checkbox_group/checkboxgroup_afterchangeproperties_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"checkboxGroup\").events.on(\"afterChangeProperties\", function(properties) {\n    console.log(\"afterChangeProperties\", properties);\n});\n```\n\n----------------------------------------\n\nTITLE: Checking Disabled State in DHTMLX Sidebar - JavaScript\nDESCRIPTION: Demonstrates how to check if a Sidebar item is disabled using the isDisabled() method. The method takes an item ID as a parameter and returns a boolean value indicating the disabled state.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/sidebar/api/sidebar_isdisabled_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsidebar.isDisable(\"id\"); // -> returns true/false\n```\n\n----------------------------------------\n\nTITLE: Exporting Chart to PDF in JavaScript\nDESCRIPTION: Examples of using the pdf() method to export a chart to PDF. Shows both default export and export with custom configuration settings.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/chart/api/export/chart_pdf_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// default export\nchart.export.pdf();\n\n// export with config settings\nchart.export.pdf({\n    url: \"https://export.dhtmlx.com/chart/pdf/8.0.0\",\n    name:\"result.pdf\"\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Select Value in DHTMLX Form\nDESCRIPTION: Demonstrates how to set a value for a Select control in a DHTMLX form using the setValue() method. The method accepts either a string or number value.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/select/select_setvalue_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"select\").setValue(\"2\");\n```\n\n----------------------------------------\n\nTITLE: Enabling Group Panel in dhtmlx Grid (JSX)\nDESCRIPTION: Initializes a dhtmlx Grid instance, enabling the interactive group panel by setting `group.panel` to `true`. This allows users to drag groupable column headers (like 'country' where `groupable: true` is set) to the panel to create groups. Requires the dhtmlx Grid library and a dataset.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/usage.md#2025-04-22_snippet_25\n\nLANGUAGE: jsx\nCODE:\n```\nconst grid = new dhx.Grid(\"grid_container\", {\n    columns: [\n        { id: \"country\", header: [{ text: \"Country\" }], groupable: true },\n        { id: \"population\", header: [{ text: \"Population\" }] },\n        { id: \"area\", header: [{ text: \"Land Area (Km²)\" }] }\n    ],\n    group: {\n        panel: true // enabling the group panel\n    },\n    data: dataset\n});\n```\n\n----------------------------------------\n\nTITLE: Hiding ToggleGroup Element in DHTMLX Form\nDESCRIPTION: Demonstrates how to use the hide() method to hide a specific toggle option within a ToggleGroup control. The method can hide either a single toggle element when an ID is provided, or the entire ToggleGroup when called without parameters.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/togglegroup/togglegroup_hide_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"ToggleGroup\").hide(\"toggle_1\");\n```\n\n----------------------------------------\n\nTITLE: Using ComboBox Widget Methods with Form Control\nDESCRIPTION: Shows how to use methods of the DHTMLX ComboBox widget by first accessing it through the getWidget() method. In this example, the focus() method is used to set focus in the Combo input without opening a popup.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/combo/combo_getwidget_method.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst combo = form.getItem(\"combo_id\").getWidget();  // -> ComboBox\ncombo.focus(); // sets focus in the input\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Colorpicker Palette\nDESCRIPTION: Demonstrates how to initialize a Colorpicker with a custom color palette and disabled gray shades.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/colorpicker/configuration.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst colorpicker = new dhx.Colorpicker(\"colorpicker_container\", {\n    grayShades: false,\n    palette: [\n        [\"#ffffc0\", \"#ffff9c\", \"#ecd078\", \"#a59154\", \"#5e5330\"],\n        [\"#ff916b\", \"#ff7657\", \"#d95b43\", \"#973f2e\", \"#56241a\"],\n        [\"#ff4169\", \"#f93555\", \"#c02942\", \"#861c2e\", \"#4c101a\"],\n        [\"#863958\", \"#6d2e47\", \"#542437\", \"#3a1926\", \"#210e16\"],\n        [\"#84bec3\", \"#6b9a9e\", \"#53777a\", \"#3a5355\", \"#212f30\"]\n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: SelectButton JSON Template for DHTMLX Ribbon (JavaScript/JSON)\nDESCRIPTION: Defines the JSON structure for a 'selectButton' control in a DHTMLX Ribbon, which acts like a dropdown button. It requires `id`, `type: \"selectButton\"`, an optional `icon`, and an `items` array to populate the dropdown list (shown empty here).\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/ribbon/data_loading.md#2025-04-22_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\n// selectButton\n{\n    id: \"select\",\n    type: \"selectButton\",\n    icon: \"dxi-some\",\n    items: []\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Asynchronous Data Loading in Sidebar\nDESCRIPTION: Example demonstrating how to handle asynchronous data loading by wrapping after-loading code in a promise. This ensures code executes only after data is fully loaded.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/sidebar/data_loading.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nsidebar.data.load(\"/some/data\").then(function(){\n   // some logic here\n});\n```\n\n----------------------------------------\n\nTITLE: Disabling a Tab in DHTMLX Tabbar - JavaScript\nDESCRIPTION: Illustrates disabling a tab by id via disableTab(). Returns a boolean indicating success. Requires a Tabbar instance with a tab matching the provided id ('London'). Prevents interaction with specific tabs, useful for conditional UI states.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tabbar/work_with_tabbar.md#2025-04-22_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\ntabbar.disableTab(\\\"London\\\");\\n// -> true|false\n```\n\n----------------------------------------\n\nTITLE: Handling Calendar Mode Changes with Event Listener in JavaScript\nDESCRIPTION: This example demonstrates how to attach an event listener to the modeChange event of a calendar component. The event is triggered when the calendar's view mode changes between calendar, year, month, or timepicker modes.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar2/api/calendar_modechange_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncalendar.events.on(\"ModeChange\", function(mode) {\n   console.log(\"Selected mode: \" + mode);\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Inline Editing in DataView\nDESCRIPTION: Demonstrates how to enable inline editing of DataView items using the editable configuration option.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/dataview/configuration.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst dataview = new dhx.DataView(\"dataview_container\", {editable:true});\n```\n\n----------------------------------------\n\nTITLE: Linking Two Calendar Instances in JavaScript\nDESCRIPTION: Example of how to link two calendar instances together using the link() method to create a date range selection functionality. This connects the first calendar to the second one, enabling users to select a date range spanning across both calendars.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar2/api/calendar_link_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncalendar.link(calendar2);\n```\n\n----------------------------------------\n\nTITLE: Hiding a Grid Row in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the hideRow method to hide a specific row in a DHTMLX Grid. The method takes the id of the row as a parameter and hides that row from view.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_hiderow_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ngrid.hideRow(rowId);\n```\n\n----------------------------------------\n\nTITLE: Setting Initially Selected Date as Array with String\nDESCRIPTION: Preselects a date by providing an array with a single date string.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar2/configuring.mdx#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// selects a date as an array of string value\nvar calendar = new dhx.Calendar(\"calendar_container\", {\n    value: ([\"10/02/19\"])\n});\n```\n\n----------------------------------------\n\nTITLE: Showing a Specific Toggle Option in DHTMLX Form\nDESCRIPTION: This snippet demonstrates how to use the show() method to display a specific toggle option within a Toggle Group control. It requires a form instance with a Toggle Group item.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/togglegroup/togglegroup_show_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nform.getItem(\"ToggleGroup\").show(\"toggle_1\");\n```\n\n----------------------------------------\n\nTITLE: Checking Disabled State of Simple Vault Control in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the isDisabled() method to check if a Simple Vault control in a DHTMLX Form is disabled. It returns a boolean value indicating the control's disabled state.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/simplevault/simplevault_isdisabled_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nform.getItem(\"simplevault\").isDisabled(); \n// -> true/false\n```\n\n----------------------------------------\n\nTITLE: Simplified Selection Event Handler in DHTMLX v7.0+\nDESCRIPTION: Simplified version of the afterUnSelect event handler introduced in DHTMLX v7.0. This version provides a more straightforward way to handle unselection events.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/selection/api/selection_afterunselect_event.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncomponent.events.on(\"afterUnSelect\", function(id) {\n    console.log(id);\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Grid beforeExpand Event Handler in JavaScript\nDESCRIPTION: Example showing how to attach an event listener to the beforeExpand event of a DHTMLX Grid. The event is triggered before expanding a row and can be used to control row expansion behavior through the return value.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_beforeexpand_event.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst grid = new dhx.Grid(\"grid_container\", {\n    type: \"tree\",\n    columns: [\n       // columns config\n    ],\n    data: dataset,\n});\n\ngrid.events.on(\"beforeExpand\", (rowId) => {\n    // your logic here\n    return false;\n});\n```\n\n----------------------------------------\n\nTITLE: Handling beforeHide Event in DHTMLX Form Select Control\nDESCRIPTION: This code snippet demonstrates how to attach an event handler to the beforeHide event of a Select control in a DHTMLX Form. The handler logs the current value and initialization state, and returns true to allow the control to be hidden.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/select/select_beforehide_event.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nform.getItem(\"select\").events.on(\"beforeHide\", function(value, init) {\n    console.log(\"beforeHide\", value, init);\n    return true;\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Items to JavaScript Chart Dynamically\nDESCRIPTION: Demonstrates how to add new data points to a chart dynamically using the add method of the Data Collection. The example shows creating a line chart and adding random data points to it.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/chart/usage.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n    type:\"line\",\n    scales: {\n        \"bottom\" : {\n            text: \"text\",\n            showText: false\n        },\n        \"left\" : {\n            maxTicks: 10,\n            max: 100,\n            min: 0\n        }\n    },\n    series: [\n        {\n            value: \"value\",\n            color: \"#5E83BA\",\n            strokeWidth: 2\n        }\n    ]\n};\n\nconst chart = new dhx.Chart(\"chart_container\", config);\nchart.data.parse([\n    {\n        value: Math.random() * 100,\n        text: \"u\" + Date.now() + 1\n    },\n    {\n        value: Math.random() * 100,\n        text: \"u\" + Date.now() + 2\n    },\n    {\n        value: Math.random() * 100,\n        text: \"u\" + Date.now() + 3\n    }\n]);\nfunction add() {\n    chart.data.add({\n        value: Math.random() * 100,\n        text: \"u\" + Date.now()\n    });\n};\n```\n\n----------------------------------------\n\nTITLE: Attaching mouseUp Event Handler to Slider in JavaScript\nDESCRIPTION: This snippet demonstrates how to attach an event handler for the mouseUp event to a Slider instance. The event fires when the left mouse button is released over the slider thumb.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/slider/api/slider_mouseup_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nslider.events.on(\"mouseUp\", function(e){\n    // your code here\n});\n```\n\n----------------------------------------\n\nTITLE: Applying DHTMLX Pre-defined CSS Class to List in JavaScript\nDESCRIPTION: This snippet shows how to use a pre-defined CSS class provided by the DHTMLX library to style a List component. It applies the 'dhx_widget--bg_white' class to change the background of the List.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/list/api/list_css_config.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst list = new dhx.List(\"list_container\", {\n    css: \"dhx_widget--bg_white\"\n});\n```\n\n----------------------------------------\n\nTITLE: Clearing Header Filter Value in DHTMLX Grid (JavaScript)\nDESCRIPTION: This example demonstrates how to set a value in a Grid's header filter and then clear it using the clear() method. It first sets the filter value for the 'country' column to 'Brazil', then clears this value.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/headerfilter/clear_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ngrid.getHeaderFilter(\"country\").setValue(\"Brazil\");\n\ngrid.getHeaderFilter(\"country\").clear();\n```\n\n----------------------------------------\n\nTITLE: Implementing afterGroup Event Handler in JavaScript\nDESCRIPTION: Example showing how to attach an event handler to the afterGroup event of a DataCollection component. The handler logs the grouped fields and configuration to the console.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/data_collection/api/datacollection_aftergroup_event.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncomponent.data.events.on(\"afterGroup\", (grouped, config) => {\n    console.log(\"Grouping complete. Fields:\", grouped, \"Configuration:\", config);\n});\n```\n\n----------------------------------------\n\nTITLE: Handling headerCellRightClick Event in JavaScript Grid\nDESCRIPTION: This snippet demonstrates how to attach an event listener for the headerCellRightClick event on a grid object. The event fires when a user right-clicks on a grid header cell. It provides access to the cell configuration, column configuration, and the native MouseEvent object.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_headercellrightclick_event.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ngrid.events.on(\"headerCellRightClick\", (cell, column, event) => {\n    // your logic here\n});\n```\n\n----------------------------------------\n\nTITLE: Handling changeOptions Event for Select Control in DHTMLX Form\nDESCRIPTION: This snippet demonstrates how to attach an event listener to the changeOptions event of a Select control in a DHTMLX Form. It logs the new options array to the console when the options change.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/select/select_changeoptions_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"select\").events.on(\"changeOptions\", function(options) {\n    console.log(\"changeOptions\", options);\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Icon or Image to Cell Header\nDESCRIPTION: Demonstrates adding an icon or image to a Layout cell header using headerIcon or headerImage attributes.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/layout/cell_configuration.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst layout = new dhx.Layout(\"layout_container\", {\n    cols: [\n        { header: \"Cell header\", headerIcon:\"/icon.png\"}\n    ]\n});\n\n// or\nconst layout = new dhx.Layout(\"layout_container\", {\n    cols: [\n        { header: \"Cell header\", headerImage:\"/img.png\"}\n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Combo Box with Hidden Label in JavaScript\nDESCRIPTION: Initializes a Combo Box with a hidden label, useful for form submissions where a label is needed for server-side identification but not for display.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/combobox/configuration.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst combo = new dhx.Combobox(\"combo_container\",{\n    label:\"My Combo\",\n    hiddenLabel:true\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX Ribbon with Data in JavaScript\nDESCRIPTION: Initializes a new DHTMLX Ribbon instance attached to the HTML element with the ID 'ribbon_container'. The configuration object includes CSS classes for styling and the `data` property, which is assigned the predefined `data` array to populate the ribbon upon creation.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/ribbon/data_loading.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst ribbon = new dhx.Ribbon(\"ribbon_container\", {\n    css: \"dhx_widget--bordered dhx_widget--bg_white\", \n    data: data\n});\n```\n\n----------------------------------------\n\nTITLE: Adding MenuItem to Toolbar\nDESCRIPTION: Demonstrates how to add a MenuItem with sub-items to a Toolbar using the add() method of Tree Collection.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/toolbar/menuitem.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntoolbar.data.add({\n    type:\"menuItem\", value:\"Toolbar menuItem\", tooltip: \"Press me\",  items:[\n        { type:\"menuItem\", value:\"Option 1\" },\n        { type:\"menuItem\", value:\"Option 2\" },\n        { type:\"separator\"},\n        { type:\"menuItem\", value:\"Option Infinite\" }\n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Toolbar Control Configuration\nDESCRIPTION: Using the update() method from Tree Collection API to change configuration properties of existing toolbar controls.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/toolbar/common_methods.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\ntoolbar.data.update(\"edit\", { \n    icon: \"mdi mdi-pencil\" \n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Layout with Centered Alignment in JavaScript\nDESCRIPTION: This code snippet demonstrates how to initialize a DHTMLX Layout with centered alignment for its content. It creates a layout with one row containing three columns, each with specific CSS classes and content.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/layout/api/cell/layout_cell_align_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst layout = dhx.Layout(\"layout_container\", {\n   rows: [\n        {\n            align: \"center\",\n            cols: [\n                {\n                    css: \"dhx_layout-cell--border_left dhx_layout-cell--border_right\",\n                    gravity: false,\n                    html: \"Horizontal Align\"\n                },\n                {\n                    css: \"dhx_layout-cell--border_left dhx_layout-cell--border_right\",\n                    gravity: false,\n                    html: \"Horizontal Align\"\n                },\n                {\n                    css: \"dhx_layout-cell--border_left dhx_layout-cell--border_right\",\n                    gravity: false,\n                    html: \"Horizontal Align\"\n                }\n            ]\n          }\n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: Clearing Colorpicker Value in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the clear() method to reset the Colorpicker component. It clears the currently selected color and removes focus from the colorpicker.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/colorpicker/api/colorpicker_clear_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncolorpicker.clear();\n```\n\n----------------------------------------\n\nTITLE: Getting DataCollection Length in JavaScript\nDESCRIPTION: Demonstrates how to use the getLength() method to retrieve the total number of elements in a DataCollection object. The method returns a numeric value representing the collection size.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/data_collection/api/datacollection_getlength_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncomponent.data.getLength();\n```\n\n----------------------------------------\n\nTITLE: Selecting Sidebar Item in JavaScript\nDESCRIPTION: Demonstrates how to select a specific item in a DHTMLX Sidebar using its ID. The method takes an item ID and an optional unselect parameter that determines whether previously selected items should be unselected.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/sidebar/api/sidebar_select_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsidebar.select(\"categoryPost\");\n```\n\n----------------------------------------\n\nTITLE: Creating Readonly Combo Box in JavaScript\nDESCRIPTION: Sets up a Combo Box in readonly mode, preventing direct text input but allowing selection from the dropdown list.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/combobox/configuration.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst combo = new dhx.Combobox(\"combo_container\",{\n    readOnly:true\n});\n```\n\n----------------------------------------\n\nTITLE: Filtering DataCollection with a Function and Configuration in JavaScript\nDESCRIPTION: This example shows how to filter data using a function with additional configuration. The 'add' property is set to true, which means the filter will be applied to the already filtered data.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/data_collection/api/datacollection_filter_method.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ngrid.data.filter(function (item) {\n    return item.a > 0 && item.b !== \"Apple\";\n}, {\n    add: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Applying Predefined DHTMLX CSS Classes to Form\nDESCRIPTION: This snippet shows how to apply one of the predefined DHTMLX CSS classes to a Form widget to change its appearance without creating custom styles.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/form_css_config.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst form = new dhx.Form(\"form_container\", {\n    css: \"dhx_widget--bg_white\"\n});\n```\n\n----------------------------------------\n\nTITLE: Validating Checkbox Control with Silent Parameter\nDESCRIPTION: Example of using the validate() method with the silent parameter set to true, which returns the validation result without triggering events or visual changes.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/checkbox/checkbox_validate_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"checkbox\").validate(true); // -> true/false\n```\n\n----------------------------------------\n\nTITLE: Removing Controls from Sidebar in JavaScript\nDESCRIPTION: Shows how to remove a control from the sidebar using the remove() method of the Tree Collection API in DHTMLX.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/sidebar/work_with_sidebar.md#2025-04-22_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nsidebar.data.remove(\"control-id\");\n```\n\n----------------------------------------\n\nTITLE: Setting Window Position with DHTMLX Window - JavaScript\nDESCRIPTION: Demonstrates how to set the position of a DHTMLX window using the setPosition method, which takes left and top coordinates as numeric parameters. Depends on the DHTMLX Suite library and an instantiated dhxWindow object. This example programmatically moves the window to (20, 20) and shows it; inputs are the left and top pixel values, output is a repositioned and visible window.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/window/api/window_setposition_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ndhxWindow.setPosition(20,20);\ndhxWindow.show();\n```\n\n----------------------------------------\n\nTITLE: Event Handling with Short Syntax in TreeCollection\nDESCRIPTION: Example showing how to attach an event listener to TreeCollection using the short syntax directly through the component\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree_collection/index.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nmenu.events.on(\"afterAdd\", function(newItem){\n    console.log(\"A new item is added\");\n});\n```\n\n----------------------------------------\n\nTITLE: Using isVisible() Method with DHTMLX Form in JavaScript\nDESCRIPTION: The isVisible() method can be used to check the visibility of an entire form or a specific form control by providing its name or id as an argument. It returns a boolean value indicating visibility status.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/form_isvisible_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// checks whether a form is visible\nform.isVisible(); // -> true/false\n\n// checks whether a form control is visible\nform.isVisible(\"combo\"); // -> true/false\n```\n\n----------------------------------------\n\nTITLE: Initializing Tree with Checkboxes\nDESCRIPTION: Creates a Tree component with checkbox functionality enabled, allowing both two-state and three-state checkboxes for tree items.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree/configuration.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst tree = new dhx.Tree(\"tree_container\", {checkbox: true});\n```\n\n----------------------------------------\n\nTITLE: Checking Disabled State of Radiogroup Element in JavaScript\nDESCRIPTION: This code snippet demonstrates how to use the isDisabled() method to check if a specific element within a Radiogroup control is disabled. The method returns a boolean value indicating the disabled state.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/radiogroup/radiogroup_isdisabled_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nform.getItem(\"radiogroup\").isDisabled(\"id_1\");\n// -> true/false\n```\n\n----------------------------------------\n\nTITLE: Handling beforeDrop Event in DHTMLX Tree\nDESCRIPTION: This example shows how to subscribe to the beforeDrop event in a DHTMLX Tree component. The event handler receives data about the drag-and-drop operation and the associated mouse event. By returning false, the default drop action is prevented.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree/api/tree_beforedrop_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntree.events.on(\"beforeDrop\", function(data, events) {\n    // your logic here\n    return false;\n});\n```\n\n----------------------------------------\n\nTITLE: Exporting Grid Data to PNG in JavaScript\nDESCRIPTION: Demonstrates how to use the png() method to export grid data to PNG format. Includes examples of default export and export with custom configuration settings.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/export/grid_png_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// default export\ngrid.export.png();\n\n// export with config settings\ngrid.export.png({\n    theme: \"dark\",\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Form with Textarea and Getting Properties\nDESCRIPTION: Example showing how to create a form with a textarea control and retrieve its properties using the getProperties() method.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/textarea/textarea_getproperties_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst form = new dhx.Form(\"form_container\", {\n    rows: [\n        {\n            type: \"textarea\",\n            name:\"textarea\",\n            label: \"textarea\",\n            labelWidth: \"70px\",\n            value: \"Some nice text\",\n            width:400\n        }\n    ]\n});\n\nform.getItem(\"textarea\").getProperties();\n```\n\n----------------------------------------\n\nTITLE: Checking Saved Status in DataCollection (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to use the isSaved() method of a DataCollection component. It checks whether the changes made in the data collection are saved.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/data_collection/api/datacollection_issaved_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ncomponent.data.isSaved();\n```\n\n----------------------------------------\n\nTITLE: Initializing Message Box in JavaScript\nDESCRIPTION: Demonstrates how to configure and display a message box with custom text, icon, CSS class, and expiration time.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/message/configuration.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndhx.message({\n    text:\"Message text\", \n    icon:\"dxi-clock\", \n    css:\"expire\", \n    expire:1000\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Selected Color from Colorpicker in JavaScript\nDESCRIPTION: This snippet demonstrates how to set a color value using setValue() and then retrieve it using getValue(). The method returns the color code in Hex format as a string.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/colorpicker/api/colorpicker_getvalue_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncolorpicker.setValue(\"#BDF0E9\");\n\nconst color = colorpicker.getValue();\n// -> \"#BDF0E9\"\n```\n\n----------------------------------------\n\nTITLE: Controlling ComboBox Popup Visibility in JavaScript\nDESCRIPTION: Demonstrates how to show and hide the ComboBox popup using the Popup API's show() and hide() methods.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/combobox/work_with_combo.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// showing a popup\ncombo.popup.show(container);\n\n// hiding a popup\ncombo.popup.hide();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Current Values from DHTMLX Slider Component\nDESCRIPTION: Demonstrates how to use the getValue() method to retrieve the current value from both regular and range sliders. For a regular slider, the method returns an array with a single value, while for a range slider it returns an array with two values in ascending order.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/slider/api/slider_getvalue_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst value = slider.getValue(); // -> [20]\n\n// for a range slider as an array\nconst value = slider.getValue(); // -> [20,50]\n```\n\n----------------------------------------\n\nTITLE: Configuring Tree Selection in JavaScript\nDESCRIPTION: This code snippet demonstrates how to initialize a Tree component with selection disabled. The 'selection' property is set to false in the configuration object passed to the Tree constructor.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree/api/tree_selection_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst tree = new dhx.Tree(\"tree_container\", {\n    selection: false,\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Item Height for DHTMLX Tree in JavaScript\nDESCRIPTION: This snippet demonstrates how to set a custom height for items in a DHTMLX Tree component. The itemHeight property is used to specify the height in pixels. Note that using CSS calc() function within itemHeight is not supported.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree/api/tree_itemheight_config.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst tree = new dhx.Tree(\"tree_container\", {\n    itemHeight: 30,\n});\n```\n\n----------------------------------------\n\nTITLE: Removing Grid Span in JavaScript\nDESCRIPTION: Demonstrates how to remove a span in a grid using the removeSpan() method. The method takes row ID and column ID as parameters to identify which span to remove.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_removespan_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngrid.removeSpan(\"10\",\"a\");\n```\n\n----------------------------------------\n\nTITLE: Checking Disabled State of ColorPicker in DHTMLX Form (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to use the isDisabled() method to check whether a ColorPicker control in a DHTMLX Form is disabled. The method returns a boolean value indicating the disabled state.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/colorpicker/colorpicker_isdisabled_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"colorpicker\").isDisabled(); \n// -> true/false\n```\n\n----------------------------------------\n\nTITLE: Handling beforeChangeProperties Event in DHTMLX Radiogroup\nDESCRIPTION: This code example demonstrates how to attach an event handler to the beforeChangeProperties event of a Radiogroup control in a DHTMLX form. The event fires before configuration attributes of the control are changed and allows you to intercept and validate these changes.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/radiogroup/radiogroup_beforechangeproperties_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"radiogroup\").events.on(\"beforeChangeProperties\", function(properties) {\n    console.log(\"beforeChangeProperties\", properties);\n    return true;\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Drag-and-Drop Mode for DHTMLX List\nDESCRIPTION: Sets up drag-and-drop functionality for List items. The dragMode property can be set to 'target', 'source', or 'both' to control drag-and-drop behavior.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/list/configuration.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst list = new dhx.List(\"list_container\", { \n    dragMode:\"source\"\n});\n```\n\n----------------------------------------\n\nTITLE: Loading Menu Data from Local Source in JavaScript\nDESCRIPTION: Demonstrates loading data into a menu from a local data source using the 'parse' method of TreeCollection after initialization.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/menu/data_loading.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmenu.data.parse(data);\n```\n\n----------------------------------------\n\nTITLE: Managing progress bar in Layout container in JavaScript\nDESCRIPTION: Illustrates how to show and hide a progress bar in the Layout container using progressShow and progressHide methods.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/layout/work_with_layout.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nlayout.progressShow();\n\nlayout.progressHide();\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Locale to DHTMLX Form\nDESCRIPTION: This snippet shows how to apply a custom locale to a DHTMLX Form. It uses the dhx.i18n.setLocale() method to set the locale before initializing the form.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/localization.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ndhx.i18n.setLocale(\"form\", de);\nconst form = new dhx.Form(\"form_container\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Area or SplineArea Chart\nDESCRIPTION: Demonstrates a complete configuration for an Area or SplineArea chart, including scales, series, and legend options.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/chart/configuration_properties.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n    type: \"area\", // or \"splineArea\"\n    scales: {\n        \"bottom\": {\n            text: \"month\"\n        },\n        \"left\": {\n            maxTicks: 10,\n            max: 100,\n            min: 0\n        }\n    },\n    series: [\n        {\n            id: \"A\",\n            value: \"company A\",\n            color: \"#81C4E8\",\n            strokeWidth: 3\n        },\n        {\n            id: \"B\",\n            value: \"company B\",\n            color: \"#74A2E7\",\n            strokeWidth: 3\n        },\n        {\n            id: \"C\",\n            value: \"company C\",\n            color: \"#5E83BA\",\n            strokeWidth: 3\n        }\n    ],\n    legend: {\n        series: [\"A\", \"B\", \"C\"],\n        halign: \"right\",\n        valign: \"top\"\n    }\n};\n\nconst chart = new dhx.Chart(\"chart_container\", config);\nchart.data.parse(dataset);\n```\n\n----------------------------------------\n\nTITLE: Hiding a Textarea Control in DHTMLX Form\nDESCRIPTION: This code snippet demonstrates how to hide a Textarea control in a form by using the hide() method on a form item identified by the \"textarea\" key.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/textarea/textarea_hide_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"textarea\").hide();\n```\n\n----------------------------------------\n\nTITLE: Creating Grid Container\nDESCRIPTION: HTML markup for creating a container element for the Grid component\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/initialization.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"grid_container\"></div>\n```\n\n----------------------------------------\n\nTITLE: Handling cellMouseDown Event in DHTMLX Grid (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to attach an event listener for the cellMouseDown event in a DHTMLX Grid. The event fires before releasing the left mouse button when clicking on a grid cell. It provides access to the row and column objects, as well as the native event object.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_cellmousedown_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngrid.events.on(\"cellMouseDown\", (row, column, event) => {\n     // your logic here\n});\n```\n\n----------------------------------------\n\nTITLE: Removing Tab from DHTMLX Tabbar using JavaScript\nDESCRIPTION: Demonstrates how to remove a tab from a DHTMLX Tabbar component by using its ID. First gets the ID of the first tab using getId() method, then removes it using removeTab().\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tabbar/api/tabbar_removetab_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst id = tabbar.getId(0);\ntabbar.removeTab(id);\n```\n\n----------------------------------------\n\nTITLE: Handling afterValidate Event in DHTMLX Form\nDESCRIPTION: This code snippet demonstrates how to attach an event listener to the afterValidate event of a DHTMLX Form. The event fires after validation of form fields is finished, providing the name of the control, its value, and the validation result.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/form_aftervalidate_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.events.on(\"afterValidate\", function(name, value, isValid) {\n    console.log(\"afterValidate\", name, value, isValid); \n});\n```\n\n----------------------------------------\n\nTITLE: Adding an Icon to Datepicker Control in DHTMLX Toolbar\nDESCRIPTION: Shows how to add an icon to a Datepicker control in a toolbar by setting the icon property.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/toolbar/datepicker.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    type: \"datePicker\",\n    icon: \"dxi dxi-calendar-today\",\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Slider Value in JavaScript\nDESCRIPTION: Illustrates how to programmatically set the value of a slider using the setValue() method of the Slider API.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/slider/usage.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nslider.setValue(20);\n```\n\n----------------------------------------\n\nTITLE: Handling beforeRemove Event in DHTMLX DataCollection\nDESCRIPTION: Example showing how to attach an event handler to the beforeRemove event of a DataCollection component. The handler logs a message and returns true to allow the removal operation to proceed.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/data_collection/api/datacollection_beforeremove_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncomponent.data.events.on(\"beforeRemove\", function(removedItem){\n    console.log(\"An item will be removed\");\n    return true;\n});\n```\n\n----------------------------------------\n\nTITLE: Removing Cell Selection\nDESCRIPTION: Examples of removing selection from cells using different parameters\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/usage_selection.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// unselects all previously selected cells\ngrid.selection.removeCell();\n\n// unselects all previously selected cells of the specified row\ngrid.selection.removeCell(rowId);\n\n// removes selection from the specified cell\ngrid.selection.removeCell(rowId, colId);\n```\n\n----------------------------------------\n\nTITLE: Setting Background Color for Calendar\nDESCRIPTION: Practical example of styling a calendar with a gray background color. Demonstrates defining a CSS class and applying it along with a built-in bordered style.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar2/functionality_and_features/calendar_stylization.md#2025-04-22_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n<style>\n    .bg-grey {\n        background: #efefef;\n    }\n</style>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar calendar = new dhx.Calendar(\"calendar\", { \n    css: \"bg-grey dhx_calendar--bordered\" \n});\n```\n\n----------------------------------------\n\nTITLE: Defining Custom CSS Classes for DHTMLX Window with HTML\nDESCRIPTION: Demonstrates how to declare custom CSS classes for styling the DHTMLX Window component. Classes are defined within a <style> block and may include any valid CSS properties. These classes are later referenced from the JavaScript configuration. No inputs or outputs; this prepares style definitions for later application.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/window/customization.md#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<style>\\n    .my-first-class {\\n        /*some styles*/\\n    }\\n    \\n    .my-second-class {\\n        /*some styles*/\\n    }\\n</style>\n```\n\n----------------------------------------\n\nTITLE: Adding Help Message to Combo Box in JavaScript\nDESCRIPTION: Adds a help message to the Combo Box, providing additional information or instructions to the user.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/combobox/configuration.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst combobox = new dhx.Combobox(\"combo_container\", {\n    helpMessage:\"Some text\"\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Focus in DHTMLX Combo Box - JavaScript\nDESCRIPTION: Demonstrates how to programmatically set focus to a Combo Box input field without triggering the dropdown options panel. This method is useful for directing user attention to the input field.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/combobox/api/combobox_focus_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncombo.focus();\n```\n\n----------------------------------------\n\nTITLE: Customizing Selected Options Display in Combo Box using JavaScript\nDESCRIPTION: Configures the Combo Box to display the count of selected options instead of individual options, with an option for a custom display template.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/combobox/configuration.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst combo = new dhx.Combobox(\"combo_container\", {\n    multiselection: true,\n    // simply enables the option\n    itemsCount: true\n});\n\n// or\n\nconst combo = new dhx.Combobox(\"combo_container\", {\n    multiselection: true,\n    // set a custom template function for showing total number of selected options\n    itemsCount: function (num) {\n        return num + (num === 1 ? \" item\" : \" items\") + \" selected\";\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Selecting and Unselecting Menu Items in JavaScript\nDESCRIPTION: Shows how to select and unselect menu items using the select() and unselect() methods. The select() method can take an optional second parameter to unselect previously selected items.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/menu/work_with_menu.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmenu.select(\"align-left\");\n\n// unselects a specified selected item\nmenu.unselect(\"align-left\");\n\n// unselects all previously selected items\nmenu.unselect();\n```\n\n----------------------------------------\n\nTITLE: Custom HTML Template for Sidebar\nDESCRIPTION: Template for creating a custom HTML button in sidebar using the customHTML type. This allows embedding custom HTML content within the sidebar interface.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/sidebar/data_loading.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// custom HTML button\n{\n    id: \"custom_html\",\n    type: \"customHTML\",\n    html: \"<div style='height:30px; border: 2px solid'>My HTML button</div>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Getting ComboBox Widget from Form Control\nDESCRIPTION: Demonstrates how to access the ComboBox widget attached to a Combo control in a DHTMLX Form. This allows developers to use the full API of DHTMLX ComboBox widget.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/combo/combo_getwidget_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst combo = form.getItem(\"combo\").getWidget();  \n// -> DHTMLX ComboBox\n```\n\n----------------------------------------\n\nTITLE: Handling Datepicker Validation Event in JavaScript\nDESCRIPTION: Example showing how to attach an event handler to the afterValidate event of a Datepicker form control. The handler receives the validated value and validation result as parameters.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/calendar/calendar_aftervalidate_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"datepicker\").events.on(\"afterValidate\", function(value, isValidate) {\n    console.log(\"afterValidate\", value, isValidate);\n});\n```\n\n----------------------------------------\n\nTITLE: Adding an Icon to a DHTMLX Ribbon Button (JavaScript)\nDESCRIPTION: Illustrates how to add an icon to a DHTMLX Ribbon Button by specifying the `icon` property in its configuration object. The value should be a CSS class corresponding to the desired icon (e.g., from the DHTMLX icon font).\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/ribbon/button.md#2025-04-22_snippet_5\n\nLANGUAGE: js\nCODE:\n```\n{\n    type:\"button\", value:\"Done\",\n    icon:\"dxi dxi-check\"\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Grid Scroll Event in JavaScript\nDESCRIPTION: Example showing how to attach an event listener to the grid's scroll event. The callback receives scroll coordinates and logs them to the console.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_scroll_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngrid.events.on(\"scroll\", ({ top, left }) => {\n    console.log(\"The grid is scrolled to \", top, left);\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Focus to Datepicker Control in DHTMLX Form\nDESCRIPTION: Demonstrates how to programmatically set focus to a Datepicker control within a DHTMLX Form. The method requires no parameters and returns void. Added in DHTMLX Suite v7.0.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/calendar/calendar_focus_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"datepicker\").focus();\n```\n\n----------------------------------------\n\nTITLE: Applying DHTMLX Theme to Layout Cells - JavaScript\nDESCRIPTION: Demonstrates initializing a DHTMLX Layout, attaching forms to its cells, and applying the 'dark' theme globally or to a specific layout cell using dhx.setTheme(). Prerequisites: DHTMLX Suite library (dhx), a valid 'config' object for configuring forms, and referenced DOM containers. The 'theme' parameter specifies the desired theme, while the optional second parameter targets a cell by its ID. Outputs a styled UI layout; applying theme by cell ID isolates the theming to that region.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/themes/api/themes_settheme_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst layout = new dhx.Layout(\"layout\", {\n    type: \"space\",\n    cols: [\n        { id: \"cell-1\" },\n        { id: \"cell-2\" },\n    ]\n});\n\nconst form_1 = new dhx.Form(null, config);\nlayout.getCell(\"cell-1\").attach(form_1);\n\nconst form_2 = new dhx.Form(null, config);\nlayout.getCell(\"cell-2\").attach(form_2);\n\ndhx.setTheme(\"dark\", \"cell-2\"); // apply the \"dark\" theme to the Layout cell with the \"cell-2\" ID\n\n//or\ndhx.setTheme(\"dark\"); // apply the \"dark\" theme to the body\n```\n\n----------------------------------------\n\nTITLE: Checking Layout Cell Visibility in JavaScript\nDESCRIPTION: Demonstrates how to check if a Layout cell is visible using the isVisible() method. The method returns a boolean value indicating the visibility state of the specified cell.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/layout/api/cell/layout_cell_isvisible_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlayout.getCell(\"1\").isVisible(); // -> true|false\n```\n\n----------------------------------------\n\nTITLE: Handling focus Event for Toggle Group in JavaScript\nDESCRIPTION: This code snippet demonstrates how to attach an event listener to the 'focus' event of a Toggle Group control in a DHTMLX Form. It logs the current value and id of the focused toggle to the console.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/togglegroup/togglegroup_focus_event.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nform.getItem(\"toggleGroup\").events.on(\"focus\", (value, id) => {\n    console.log(\"focus\", value, id);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Tab Size in DHTMLX Tabbar\nDESCRIPTION: Demonstrates how to set custom width and height for tabs in DHTMLX Tabbar\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tabbar/configuring_tabbar.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst tabbar = new dhx.Tabbar(\"tabbar_container\", {\n    tabWidth: 190,\n    tabHeight: 50\n});\n```\n\n----------------------------------------\n\nTITLE: Getting DHTMLX TimePicker Widget from Form\nDESCRIPTION: This example demonstrates how to obtain the TimePicker widget object from a form control, which allows you to access the full functionality of the underlying DHTMLX TimePicker widget.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/timepicker/timepicker_getwidget_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst timepicker = form.getItem(\"timepicker\").getWidget();  \n// -> DHTMLX TimePicker\n```\n\n----------------------------------------\n\nTITLE: Retrieving Slider Value - DHTMLX Form JavaScript\nDESCRIPTION: Demonstrates how to retrieve the current value from a Slider control in a DHTMLX Form. The method returns an array of numbers representing the current position(s) of the slider handle(s).\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/slider/slider_getvalue_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst value = form.getItem(\"slider\").getValue();\n// -> [1,20]\n```\n\n----------------------------------------\n\nTITLE: Setting Up a CSS Grid-Based Container for DHX Layout\nDESCRIPTION: This CSS snippet demonstrates how to use CSS Grid to create a responsive container for a DHX Layout. It sets up a grid with defined areas for header, sidebar, content, and footer with responsive behavior.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/slider/constructor.md#2025-04-22_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n.app-container {\n    display: grid;\n    grid-template-areas:\n        \"header header\"\n        \"sidebar content\"\n        \"footer footer\";\n    grid-template-rows: 60px 1fr 40px;\n    grid-template-columns: 200px 1fr;\n    height: 100vh;\n}\n\n@media (max-width: 768px) {\n    .app-container {\n        grid-template-areas:\n            \"header\"\n            \"content\"\n            \"footer\";\n        grid-template-rows: 60px 1fr 40px;\n        grid-template-columns: 1fr;\n    }\n    \n    .sidebar {\n        display: none;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Toggle Group Values in DHTMLX Form\nDESCRIPTION: Demonstrates how to use the setValue() method to set the states of multiple toggles within a Toggle Group. The method accepts an object with toggle IDs as keys and boolean states as values.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/togglegroup/togglegroup_setvalue_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"ToggleGroup\").setValue({\n    \"toggle1\": true,\n    \"toggle2\": false,\n    \"toggle3\": true\n});\n```\n\n----------------------------------------\n\nTITLE: Setting DHTMLX TimePicker Value using setValue() in JavaScript\nDESCRIPTION: This snippet demonstrates various ways to set the value of a DHTMLX TimePicker instance using the `setValue()` method. It accepts values as strings (e.g., \"HH:MM\"), JavaScript Date objects, arrays `[hour, minute, \"AM/PM\"]` (especially useful for 12-hour format), or numeric timestamps (milliseconds since the Unix epoch). The method updates the time displayed by the TimePicker component.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/timepicker/usage.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n// set the value as a string\ntimepicker.setValue(\"00:39\");\n\n// set the value as a Date object\ntimepicker.setValue(new Date('January 10, 2019 17:54:00'));\n\n// set the value as an array\ntimepicker.setValue([6,20,\"AM\"]);\n\n// set the value as a number\ntimepicker.setValue(1559288966422);\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX Grid with Collapsed Tree Structure in JavaScript\nDESCRIPTION: Demonstrates how to create a new Grid instance with tree structure in collapsed state. This configuration only works when the grid type is set to 'tree'. The collapsed property defaults to false if not specified.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_collapsed_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst grid = new dhx.Grid(\"grid_container\", {\n    type: \"tree\",\n    columns: [\n        // columns config\n    ],\n    data: dataset,\n    collapsed: true\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Ribbon Initialization\nDESCRIPTION: Shows how to load data into Ribbon using config.data parameter during initialization\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/ribbon/features.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlek4v9m7\n```\n\n----------------------------------------\n\nTITLE: Handling Upload Complete Event in DHTMLX Form Simple Vault\nDESCRIPTION: Example showing how to attach an event listener for the uploadComplete event of a Simple Vault control. The event fires when file upload is completed and provides access to both the uploaded files and current control value.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/simplevault/simplevault_uploadcomplete_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"simpleVault\").events.on(\"uploadComplete\", function(files, value) {\n    console.log(\"uploadComplete\", files, value);\n});\n```\n\n----------------------------------------\n\nTITLE: Handling afterHide Event in DHTMLX Form Input Control in JavaScript\nDESCRIPTION: This example demonstrates how to attach an event handler to the afterHide event of an Input control in a DHTMLX Form. The handler logs the current value of the control and the initialization state to the console when the control is hidden.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/input/input_afterhide_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"input\").events.on(\"afterHide\", function(value, init) {\n    console.log(\"afterHide\", value, init);\n});\n```\n\n----------------------------------------\n\nTITLE: Handling focus Event for Select Control in DHTMLX Form\nDESCRIPTION: This code snippet demonstrates how to attach an event handler to the 'focus' event of a Select control in a DHTMLX form. The handler receives the current value of the control when it receives focus.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/select/select_focus_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"select\").events.on(\"focus\", (value) => {\n    console.log(\"focus\", value);\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Focus to Checkbox Control in DHTMLX Form (JavaScript)\nDESCRIPTION: This snippet demonstrates how to use the focus() method to set focus to a Checkbox control within a DHTMLX Form. The method is called on a specific form item retrieved using the getItem() method.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/checkbox/checkbox_focus_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nform.getItem(\"checkbox\").focus();\n```\n\n----------------------------------------\n\nTITLE: Handling beforeSelect Event in DHTMLX Grid (JavaScript)\nDESCRIPTION: This snippet demonstrates how to attach a handler to the beforeSelect event of a DHTMLX Grid. The event fires before a cell is selected and allows preventing the selection by returning false.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/selection/selection_beforeselect_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngrid.selection.events.on(\"BeforeSelect\", (row, column) => {\n    console.log(\"beforeSelect\", row, column); \n    return false;\n});\n```\n\n----------------------------------------\n\nTITLE: Including Font Awesome Icons with DHTMLX Sidebar in HTML\nDESCRIPTION: This snippet shows how to include Font Awesome icon pack along with DHTMLX Sidebar by adding the Font Awesome CDN link after the Sidebar source files.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/sidebar/customization.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"text/javascript\" src=\"../../codebase/sidebar.js\"></script>\n<link rel=\"stylesheet\" href=\"../../codebase/sidebar.css\">\n\n<link rel=\"stylesheet\" href=\"https://use.fontawesome.com/releases/v5.5.0/css/all.css\" \n    integrity=\"sha384-B4dIYHKNBt8Bc12p+WXckhzcICo0wtJAoU8YZTY5qE0Id1GSseTk6S+L3BlXeVIU\" \n    crossorigin=\"anonymous\">\n```\n\n----------------------------------------\n\nTITLE: Implementing beforeShow Event Handler for Radiogroup in DHTMLX Form\nDESCRIPTION: This example demonstrates how to attach an event handler to the beforeShow event of a Radiogroup control. The handler logs the current value and optional radio button ID, then returns true to allow the control or button to be shown.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/radiogroup/radiogroup_beforeshow_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"radiogroup\").events.on(\"beforeShow\", function(value, id) {\n    console.log(\"beforeShow\", value, id);\n    return true;\n});\n```\n\n----------------------------------------\n\nTITLE: Attaching afterValidate Event to Timepicker in DHTMLX Form\nDESCRIPTION: This code snippet demonstrates how to attach the afterValidate event to a Timepicker control in a DHTMLX Form. The event fires after the control value is validated, providing the validated value and the result of validation.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/timepicker/timepicker_aftervalidate_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"timepicker\").events.on(\"afterValidate\", function(value, isValidate) {\n    console.log(\"afterValidate\", value, isValidate);\n});\n```\n\n----------------------------------------\n\nTITLE: Using destructor() Method with CheckboxGroup in DHTMLX Form\nDESCRIPTION: This example demonstrates how to call the destructor method on a CheckboxGroup instance to remove it and free up resources. The method is accessed through the form's getItem() method.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/checkbox_group/checkboxgroup_destructor_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"CheckboxGroup\").destructor();\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX Tree with Data Configuration in JavaScript\nDESCRIPTION: This example shows how to initialize a DHTMLX Tree component with a configured dataset. The data structure includes a parent item 'Books' with a nested child item 'Thrillers', demonstrating properties like opened state, checkbox visibility, and custom icons.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree/api/tree_data_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = [\n    {\n        \"value\": \"Books\",\n        \"id\": \"Books\",\n        \"opened\": true,\n        \"checkbox\": true,\n        \"items\": [\n            {\n                \"value\": \"Thrillers\",\n                \"id\": \"Thrillers\",\n                \"icon\": { \n                    \"folder\": \"fas fa-book\", \n                    \"openFolder\": \"fas fa-book-open\", \n                    \"file\": \"fas fa-file\"\n                }\n            }\n        ]\n    }\n];\n\nconst tree = new dhx.Tree(\"tree\", {\n    data: dataset\n});\n```\n\n----------------------------------------\n\nTITLE: Using select() Method in DHTMLX Toolbar (JavaScript)\nDESCRIPTION: Demonstrates how to select a specific item in a DHTMLX Toolbar using its ID. The method takes the item ID as a parameter and optionally allows controlling whether previously selected items should be unselected.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/toolbar/api/toolbar_select_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ntoolbar.select(\"web\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Tabbar Height in DHTMLX JavaScript\nDESCRIPTION: Demonstrates how to initialize a DHTMLX Tabbar with a custom tab height. The tabHeight property accepts either a number or string value and defaults to 45 pixels if not specified.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tabbar/api/tabbar_tabheight_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst tabbar = new dhx.Tabbar(\"tabbar_container\", {\n    tabHeight: 50\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Avatar Value in DHTMLX Form\nDESCRIPTION: Example demonstrating how to retrieve the current value of an Avatar control using the getValue() method. The method returns an object containing properties like id, src, and status of the avatar.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/avatar/avatar_getvalue_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst value = form.getItem(\"avatar\").getValue();\n/* =>\n{\n    \"id\": \"image\",\n    \"src\": \"http://domen/upload/files/image.png\",\n    \"status\": \"uploaded\"\n}\n*/\n```\n\n----------------------------------------\n\nTITLE: Retrieving Widget from DHTMLX Window\nDESCRIPTION: Demonstrates how to get the widget attached to a DHTMLX Window instance using the getWidget() method. Returns any widget that was previously attached to the window.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/window/api/window_getwidget_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst window = dhxWindow.getWidget();\n```\n\n----------------------------------------\n\nTITLE: Setting and Getting Input Value in Toolbar using JavaScript\nDESCRIPTION: Demonstrates how to set and get the value of an Input control using setState() and getState() methods of Toolbar. setState() takes a key-value pair, while getState() returns the current state.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/toolbar/input.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    type: \"input\",\n    id:\"search\",\n    value: \"\"\n}\n...\ntoolbar.setState({search:\"Summer\"});\n\ntoolbar.getState(); //-> {search:\"Summer\"}\n```\n\n----------------------------------------\n\nTITLE: Configuring Grid Key Navigation in JavaScript\nDESCRIPTION: Example showing how to initialize a DHTMLX Grid with keyboard navigation disabled. The configuration includes column setup, dataset binding, complex selection mode, and editing enabled.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_keynavigation_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst grid = new dhx.Grid(\"grid_container\", {\n    columns: [\n        // columns config\n    ],\n    data: dataset,\n    selection: \"complex\", \n    editing: true, \n    keyNavigation: false\n});\n```\n\n----------------------------------------\n\nTITLE: Using expand() Method in DHTMLX Grid\nDESCRIPTION: Demonstrates how to use the expand() method to expand a row in a TreeGrid configuration. The method takes a row ID as a parameter and works in both default mode with subRow configuration and TreeGrid mode.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_expand_method.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst grid = new dhx.Grid(\"grid_container\", {\n    type: \"tree\",\n    columns: [\n       // columns config\n    ],\n    data: dataset,\n});\n\ngrid.expand(\"native\");\n```\n\n----------------------------------------\n\nTITLE: Defining MenuItem Properties in JavaScript\nDESCRIPTION: This code snippet demonstrates the structure and available properties for defining menu items in a DHTMLX Menu. It includes optional properties for customizing appearance, behavior, and hierarchy of menu items.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/menu/api/api_menuitem_properties.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = [\n    {\n        type?: \"menuItem\",\n        id?: string | number,\n        parent?: string,\n        value?: string,\n        items?: IMenuElement[],\n    \n        count?: number,\n        countColor?: \"danger\" | \"secondary\" | \"primary\" | \"success\", // \"danger\" by default\n        hotkey?: string,\n        html?: string,\n        icon?: string,\n        \n        css?: string | string[],\n        disabled?: boolean, // false by default\n        hidden?: boolean, // false by default\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Adding Custom HTML Content to Ribbon\nDESCRIPTION: Demonstrates how to add custom HTML content to a DHTMLX Ribbon using the Tree Collection add() method. The example shows adding a preloader div element.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/ribbon/customhtmlbutton.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nribbon.data.add({\n    type: \"customHTML\",\n    html: \"<div id='preloader'><div id='loader'></div></div >\"\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling All DHTMLX Ribbon Items (v7.0+)\nDESCRIPTION: Starting from DHTMLX Suite v7.0, calling the `enable()` method without any parameters enables all items within the Ribbon instance. This provides a convenient way to enable all controls at once.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/ribbon/api/ribbon_enable_method.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// enables all Ribbon items\nribbon.enable();\n```\n\n----------------------------------------\n\nTITLE: Implementing beforeValidate Event Handler for Checkbox Group\nDESCRIPTION: Example showing how to attach a beforeValidate event handler to a Checkbox Group control in a DHTMLX form. The handler receives the checkbox group's current value and can prevent default validation by returning false.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/checkbox_group/checkboxgroup_beforevalidate_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"CheckboxGroup\").events.on(\"beforeValidate\", function(value) {\n    console.log(\"beforeValidate\", value);\n    return true;\n});\n```\n\n----------------------------------------\n\nTITLE: Attaching Event Listeners to DHTMLX Slider in JavaScript\nDESCRIPTION: This snippet demonstrates how to attach an event listener to a DHTMLX Slider component. It listens for the 'change' event and logs the new value of the slider when it changes.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/slider/handling_events.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nslider.events.on(\"change\", function(newValue, oldValue, isRange){\n    console.log(\"The value of a slider has changed to \"+slider.getValue());\n});\n```\n\n----------------------------------------\n\nTITLE: Handling beforeResizeStart Event in DHTMLX Layout\nDESCRIPTION: This code snippet demonstrates how to attach an event handler to the beforeResizeStart event of a DHTMLX Layout component. The event fires before resizing of a cell starts and allows preventing the resize operation by returning false.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/layout/api/layout_beforeresizestart_event.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nlayout.events.on(\"beforeResizeStart\", function(id){\n    // your logic here\n    return false;\n});\n```\n\n----------------------------------------\n\nTITLE: Including DHTMLX Suite Source Files in HTML\nDESCRIPTION: Shows how to include the required DHTMLX Suite JavaScript (`suite.js`) and CSS (`suite.css`) files in the `<head>` section of an HTML document. These files are necessary for the TimePicker component to function correctly.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/timepicker/initialization.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"text/javascript\" src=\"../../codebase/suite.js\"></script>\n<link rel=\"stylesheet\" href=\"../../codebase/suite.css\">\n```\n\n----------------------------------------\n\nTITLE: Getting Colorpicker Display Mode in JavaScript\nDESCRIPTION: This example demonstrates how to retrieve the current display mode of a Colorpicker instance. The method returns either 'palette' or 'picker' as a string value.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/colorpicker/api/colorpicker_getcurrentmode_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst mode = colorpicker.getCurrentMode(); // -> \"palette\"\n```\n\n----------------------------------------\n\nTITLE: Implementing DHTMLX DataView Widget\nDESCRIPTION: Shows how to create a View that initializes and returns a DHTMLX DataView widget with custom template and configuration.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/optimus_guides/index.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { View } from \"dhx-optimus\";\n\nexport class DataView extends View {\n    init() {\n        this.dataView = new dhx.DataView(null, {\n            data: this.params.dataCollection,\n            itemsInRow: 2,\n            gap: 20,\n            template: ({ name, post }) => `\n                <div class=\"personal-card\">\n                    <div class=\"personal-card__container\">\n                        <h3>${name}</h3>\n                        <p>${post}</p>\n                    </div>\n                </div>\n            `,\n        });\n        return this.dataView;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Iterating DataCollection Items using forEach in JavaScript\nDESCRIPTION: Demonstrates how to use the forEach method to iterate over items in a DataCollection. The callback function receives the current item, its index, and the complete array of items.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/data_collection/api/datacollection_foreach_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncomponent.data.forEach(function(item, index, array) {\n    console.log(\"This is an item of dataCollection: \", item);\n    console.log(\"This is an index of the element: \", index);\n    console.log(\"This is an array of the elements: \", array);\n});\n```\n\n----------------------------------------\n\nTITLE: Handling beforeCollapse Event in DHTMLX Tree (JavaScript)\nDESCRIPTION: This example demonstrates how to attach an event handler to the beforeCollapse event of a DHTMLX Tree component. The handler can return false to prevent an item from collapsing, or true to allow the default behavior.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree/api/tree_beforecollapse_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntree.events.on(\"beforeCollapse\", function(id) {\n    // your logic here\n    return false;\n});\n```\n\n----------------------------------------\n\nTITLE: Using getProperties() with Timepicker in DHTMLX Form\nDESCRIPTION: This example demonstrates how to initialize a form with a Timepicker control and then retrieve its properties using the getProperties() method. The Timepicker is configured with a 12-hour format and a time object value.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/timepicker/timepicker_getproperties_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst form = new dhx.Form(\"form_container\", {\n    rows: [\n        {\n            type: \"timepicker\",\n            name: \"timepicker\",\n            label: \"time\",\n            labelWidth: \"50px\",\n            timeFormat: 12,\n            valueFormat: \"timeObject\",\n            value: [6,20,\"AM\"]\n        }\n    ]\n});\n\nform.getItem(\"timepicker\").getProperties();\n```\n\n----------------------------------------\n\nTITLE: Checking if a Checkbox is Checked in DHTMLX Form (JavaScript)\nDESCRIPTION: This example demonstrates how to use the isChecked() method to determine if a checkbox control in a DHTMLX Form is currently checked. The method returns a boolean value indicating the checkbox state.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/checkbox/checkbox_ischecked_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"checkbox\").isChecked(); // -> true/false\n```\n\n----------------------------------------\n\nTITLE: Selecting a Menu Item Using DHTMLX Menu in JavaScript\nDESCRIPTION: This snippet demonstrates how to select a specific item in a DHTMLX Menu instance using the select() method. It requires an initialized DHTMLX Menu object and the ID of the menu item to be selected. The method takes the item ID and an optional boolean indicating whether to unselect previously selected items (defaults to true). No value is returned. This is useful for highlighting or changing the selection dynamically in the menu.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/menu/api/menu_select_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmenu.select(\"align-left\");\n```\n\n----------------------------------------\n\nTITLE: Adding Event Listener for afterValidate Event in DHTMLX Form Textarea\nDESCRIPTION: This code snippet demonstrates how to attach an event listener to the afterValidate event of a Textarea control in a DHTMLX Form. The event fires after the control value is validated, providing the validated value and the validation result.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/textarea/textarea_aftervalidate_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"textarea\").events.on(\"afterValidate\", function(value, isValidate) {\n    console.log(\"afterValidate\", value, isValidate);\n});\n```\n\n----------------------------------------\n\nTITLE: Handling DataCollection Change Event in JavaScript\nDESCRIPTION: This snippet demonstrates how to attach an event listener to the 'change' event of a DataCollection component. The event fires when the data collection is modified, providing information about the changed item's id, the operation status, and the updated item object.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/data_collection/api/datacollection_change_event.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ncomponent.data.events.on(\"change\", function(id,status,updatedItem){\n    console.log(\"An item is updated\");\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Spans in DHTMLX Grid\nDESCRIPTION: Use the addSpan() method to add a column/row span to the grid. Pass an object with span configuration.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/usage.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\ngrid.addSpan({ \n    row: \"0\", \n    column: \"a\", \n    rowspan: 5 \n});\n// grid.paint();\n```\n\n----------------------------------------\n\nTITLE: Collapsing and expanding Layout cells in JavaScript\nDESCRIPTION: Demonstrates how to collapse and expand Layout cells using the collapse and expand methods.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/layout/work_with_layout.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// collapsing a cell by its id\nlayout.getCell(\"sidebar\").collapse();\n\n// expanding a cell by its id\nlayout.getCell(\"sidebar\").expand();\n```\n\n----------------------------------------\n\nTITLE: Chart Initialization with Data in JavaScript\nDESCRIPTION: Example of initializing a DHTMLX Chart with predefined data and configuration options.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/chart/data_loading.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst chart = new dhx.Chart(\"chart_container\", {\n    type: \"area\",\n    scales: {\n        \"bottom\": {\n            text: \"month\"\n        },\n        \"left\": {\n            maxTicks: 10,\n            max: 100,\n            min: 0\n        }\n    },\n    series: [\n        {\n            id: \"A\",\n            value: \"company A\",\n            color: \"#81C4E8\",\n            strokeWidth: 3\n        },\n        {\n            id: \"B\",\n            value: \"company B\",\n            color: \"#74A2E7\",\n            strokeWidth: 3\n        },\n        {\n            id: \"C\",\n            value: \"company C\",\n            color: \"#5E83BA\",\n            strokeWidth: 3\n        }\n    ],\n    legend: {\n        series: [\"A\", \"B\", \"C\"],\n        halign: \"right\",\n        valign: \"top\"\n    },\n    data: dataset\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling a Disabled Combo Box Control in DHTMLX Form (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to enable a previously disabled Combo Box control in a DHTMLX Form. It uses the enable() method on the Combo Box item retrieved from the form.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/combo/combo_enable_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nform.getItem(\"combo\").enable();\n```\n\n----------------------------------------\n\nTITLE: Including DHTMLX Suite Source Files - HTML\nDESCRIPTION: This HTML snippet exemplifies the required steps to include DHTMLX Suite's JavaScript and CSS files in an HTML document. The <script> tag loads the main library (~suite.js~), and the <link> tag applies the corresponding styles (~suite.css~). Proper inclusion is necessary for any DHTMLX UI component to function. Dependencies are the library files relative to the source code directory. No direct inputs or outputs are present in this snippet; it solely provides the necessary resources for later JavaScript code to reference DHTMLX classes and styles.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/window/how_to_start.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script type=\\\"text/javascript\\\" src=\\\"../../codebase/suite.js\\\"></script>\\n<link rel=\\\"stylesheet\\\" href=\\\"../../codebase/suite.css\\\">\n```\n\n----------------------------------------\n\nTITLE: Getting Selected Toolbar Items\nDESCRIPTION: Using the getSelected() method to retrieve an array of IDs of all currently selected toolbar items.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/toolbar/common_methods.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\ntoolbar.getSelected(); // -> [\"selected_1\", \"selected_1.1\"]\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Colors in JavaScript Colorpicker\nDESCRIPTION: This snippet demonstrates how to use the setCustomColors() method to set custom colors for a DHTMLX Colorpicker. It adds an array of hex color codes that will be displayed at the bottom of the color palette.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/colorpicker/api/colorpicker_setcustomcolors_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ncolorpicker.setCustomColors([\"#f2f2f2\",\"#8ac5d9\",\"#ec9875\",\"#7a8523\"]);\n```\n\n----------------------------------------\n\nTITLE: Enabling Tree Selection in JavaScript\nDESCRIPTION: Demonstrates how to enable selection functionality for Tree items using the selection object's enable() method.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree/usage_selection.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntree.selection.enable();\n```\n\n----------------------------------------\n\nTITLE: Handling afterValidate Event in DHTMLX Form Select Control\nDESCRIPTION: This example demonstrates how to attach an event handler to the afterValidate event of a Select control in a DHTMLX Form. The handler receives the validated value and a boolean indicating whether validation passed.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/select/select_aftervalidate_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"select\").events.on(\"afterValidate\", function(value, isValidate) {\n    console.log(\"afterValidate\", value, isValidate);\n});\n```\n\n----------------------------------------\n\nTITLE: Using beforeHide Event Handler in DHTMLX Form (JavaScript)\nDESCRIPTION: Example of attaching a beforeHide event handler to a form that logs the event occurrence and prevents the control from being hidden by returning false.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/form_beforehide_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.events.on(\"beforeHide\", function(name, value) {\n    console.log(\"beforeHide\", name, value); \n    return false;\n});\n```\n\n----------------------------------------\n\nTITLE: Handling afterHide Event in DHTMLX Popup with JavaScript\nDESCRIPTION: Registers an event listener for the DHTMLX Popup's 'afterHide' event, allowing developers to execute custom logic once the popup has been hidden. The snippet uses the Popup component's events.on method, and the handler receives a native DOM Event object as parameter. No additional dependencies beyond DHTMLX Suite are required. 'e' is the mouse event that triggered the hide action, and the function logs a message to the console upon execution.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/popup/api/popup_afterhide_event.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\npopup.events.on(\"afterHide\", function(e){\n    console.log(\"A popup is hidden\");\n});\n```\n\n----------------------------------------\n\nTITLE: Basic DHTMLX Combo Box HTML Structure\nDESCRIPTION: Shows the basic HTML structure required to initialize DHTMLX Combo Box, including necessary CSS and JavaScript file references.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/combobox/how_to_start.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n    <head>\n        <title>How to start with DHTMLX ComboBox</title>\n        <link rel=\"stylesheet\" type=\"text/css\" href=\"/codebase/suite.css\">\n        <script type=\"text/javascript\" src=\"/codebase/suite.js\"></script>\n   </head>\n   <body>\n        <div id=\"combo_container\"></div>\n        <script>            \n            const combo = new dhx.Combobox(\"combo_container\", {\n                // configuration properties\n            });\n        </script>\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Handling Change Event in DHTMLX Combo Box\nDESCRIPTION: Example of attaching an event handler to the change event of a Combo Box component. The event fires when a user selects a new option and provides the ID(s) of the selected option(s).\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/combobox/api/combobox_change_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncombo.events.on(\"change\", function(id){\n    // your logic here\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Number Badge to NavItem in JavaScript Sidebar\nDESCRIPTION: Demonstrates adding a number badge to a NavItem using the 'count' property. This can be used to display information like the number of new messages.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/sidebar/navitem.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    type:\"navItem\", value:\"Some\",\n    icon:\"dxi dxi-check\",\n    count:10\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Combo Box afterClose Event in JavaScript\nDESCRIPTION: Example showing how to attach an event handler to the afterClose event of a DHTMLX Combo Box. This event fires after the options list is closed.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/combobox/api/combobox_afterclose_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncombo.events.on(\"afterClose\", function() {\n    // your logic here\n});\n```\n\n----------------------------------------\n\nTITLE: Linking Drop Area to DHTMLX Uploader\nDESCRIPTION: Demonstrates how to link an HTML element as a drop area for file uploads using the linkDropArea() method. The method accepts either an HTML element reference or its ID string as a parameter.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/uploader/api/uploader_linkdroparea_method.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"drophere\">DROP HERE</div>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvault.uploader.linkDropArea('drophere');\n```\n\n----------------------------------------\n\nTITLE: Handling beforeShow Event in DHTMLX Form Simple Vault Control\nDESCRIPTION: This code snippet demonstrates how to attach an event handler to the beforeShow event of a Simple Vault control in a DHTMLX Form. The handler logs the current value and returns true to allow the control to be shown.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/simplevault/simplevault_beforeshow_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"simplevault\").events.on(\"beforeShow\", function(value) {\n    console.log(\"beforeShow\", value);\n    return true;\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX Calendar with Date Range (JavaScript)\nDESCRIPTION: Creates a new Calendar instance with a date range selected. The value is set using an array of two Date objects, and the range mode is enabled.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar2/api/calendar_value_config.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar calendar = new dhx.Calendar(\"calendar_container\", {\n    value: ([new Date(2019,05,03), new Date(2019,05,19)]),\n    range: true  \n});\n```\n\n----------------------------------------\n\nTITLE: Textarea Properties Configuration\nDESCRIPTION: Configuration object for Textarea control defining multiline text input properties including validation options.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/form_getproperties_method.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    css: string,\n    errorMessage: string,\n    height: string | number | \"content\",\n    helpMessage: string,\n    hiddenLabel: boolean,\n    label: string,\n    labelPosition: string,\n    labelWidth: string | number,\n    maxlength: string | number,\n    minlength: string | number,\n    padding: string | number,\n    placeholder: string,\n    preMessage: string,\n    readOnly: boolean,\n    required: boolean,\n    successMessage: string,\n    validation: object | function,\n    width: string | number | \"content\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ToggleGroup Control in DHTMLX Suite\nDESCRIPTION: This snippet illustrates the configuration options for the ToggleGroup control in DHTMLX Suite. It includes attributes such as css, full, gap, height, multiselection, and more. Each attribute is specified with its corresponding data type.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/form_setproperties_method.md#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    css: string,\n    full: boolean,\n    gap: number,\n    height: string | number |\"content\",\n    multiselection: boolean,\n    options: object[],\n    padding: string | number,\n    width: string | number | \"content\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Button with Number Badge\nDESCRIPTION: Creates a button with a numeric badge. The badge is set via the count property and can be used to display notification counts or similar numeric indicators.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/toolbar/button.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    type:\"button\", value:\"Done\",\n    icon:\"dxi dxi-check\",\n    count:10\n}\n```\n\n----------------------------------------\n\nTITLE: Heat Map with Start Date Only (More Than Year)\nDESCRIPTION: Demonstrates heat map configuration with only start date specified, where data range is more than a year.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/chart/configuration_properties.md#2025-04-22_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nconst heatMapData = [\n    { id: \"100\", value: 50, date: new Date(2022, 2, 2) },\n    { id: \"101\", value: 100, date: new Date(2022, 4, 1) },\n    { id: \"200\", value: 32, date: new Date(2022, 6, 1) },\n    { id: \"202\", value: 35, date: new Date(2022, 7, 21) },\n    { id: \"500\", value: 9, date: new Date(2022, 9, 20) },\n    { id: \"501\", value: 100, date: new Date(2023, 3, 1) },\n    { id: \"502\", value: 40, date: new Date(2023, 4, 11) },\n    { id: \"503\", value: 23, date: new Date(2023, 5, 6) },\n];\n\nconst config = {\n    type: \"calendarHeatMap\",\n    series: [\n        {\n            value: \"value\",\n            date: \"date\",\n            startDate: \"15/03/22\",\n        }\n    ],\n};\n\nconst chart = new dhx.Chart(\"chart_container\", config);\nchart.data.parse(heatMapData);\n```\n\n----------------------------------------\n\nTITLE: Setting Focus on DataView Item\nDESCRIPTION: Sets focus on a specific DataView item using its ID\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/dataview/manipulating_data.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndataview.setFocus(\"7\");\n```\n\n----------------------------------------\n\nTITLE: Adding NavItem to Toolbar in JavaScript\nDESCRIPTION: Shows how to add a basic navigation item to a toolbar using the Tree Collection's add() method.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/toolbar/navitem.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntoolbar.data.add({\n    type:\"navItem\", value:\"My NavItem\"\n});\n```\n\n----------------------------------------\n\nTITLE: Including DHTMLX Suite Source Files in HTML\nDESCRIPTION: Demonstrates how to link the core DHTMLX Suite JavaScript (`suite.js`) and CSS (`suite.css`) files within the `<head>` section of an HTML document. These files are essential prerequisites for using any DHTMLX component, including Message. Ensure the paths are correct relative to your HTML file.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/message/creating_message.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"text/javascript\" src=\"../../codebase/suite.js\"></script>\n<link rel=\"stylesheet\" href=\"../../codebase/suite.css\">\n```\n\n----------------------------------------\n\nTITLE: Making Layout Cell Resizable\nDESCRIPTION: Shows how to make a Layout cell resizable using the resizable attribute.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/layout/cell_configuration.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst layout = new dhx.Layout(\"layout_container\", {\n    cols: [\n        { header: \"Cell header\", resizable:true}\n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: Adding HTML Content to MenuItem in JavaScript\nDESCRIPTION: This code demonstrates how to add custom HTML content to a MenuItem using the 'html' property.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/sidebar/menuitem.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    type: \"menuItem\",\n    html: \"<img class='item-avatar' src='../avatars/Avatar_07.jpg'/>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Clearing Text Control Value in DHTMLX Form (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to use the clear() method to reset the value of a Text control in a DHTMLX Form. The method is called on a specific form item retrieved using the getItem() method.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/text/text_clear_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nform.getItem(\"text\").clear();\n```\n\n----------------------------------------\n\nTITLE: Adding NavItem to Ribbon\nDESCRIPTION: Demonstrates how to add a basic NavItem control to a ribbon using the add() method of Tree Collection.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/ribbon/navitem.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nribbon.data.add({\n    type:\"navItem\", value:\"My NavItem\"\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring HTML Content Rendering in DHTMLX Combo Box\nDESCRIPTION: Example showing how to disable HTML content rendering in Combo Box options while using a template function to format the display of items. The template creates a flex container with text and an image, but the HTML will be displayed as plain text due to htmlEnable being false.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/combobox/api/combobox_htmlenable_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst combo = new dhx.Combobox(\"combo_container\", { \n    htmlEnable: false, // disables render of HTML content\n    template: function (item) {\n        return \"<div style='user-select:none; display: flex; justify-content: space-between;'>\" +\n            \"<span>\" + item.value + \"</span>\" +\n            \"<img style='height: 20px; width: 30px; border: 1px solid gray' src=\" + item.src + \"></img>\" +\n            \"</div>\";\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Attaching beforeDrag Event Handler in JavaScript\nDESCRIPTION: This code snippet demonstrates how to attach an event handler for the beforeDrag event of a DataView component. The event fires before dragging of an item starts and can be used to implement custom logic or prevent dragging.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/dataview/api/dataview_beforedrag_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndataview.events.on(\"beforeDrag\", function(data, events) {\n    // your logic here\n    return false;\n});\n```\n\n----------------------------------------\n\nTITLE: Registering afterHide Event Handler in DHTMLX Toolbar - JavaScript\nDESCRIPTION: Registers an event handler for the afterHide event on a DHTMLX Toolbar instance, allowing developers to execute custom logic whenever a sub-item is hidden. Requires the DHTMLX Suite library and a Toolbar instance named toolbar. The event parameter provides the native browser event object. No input is required beyond the Toolbar and event subscription; output is the execution of code within the handler.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/toolbar/api/toolbar_afterhide_event.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ntoolbar.events.on(\"afterHide\", function(event){\n    // your code here\n});\n```\n\n----------------------------------------\n\nTITLE: Manipulating Menu Items with Tree Collection API in JavaScript\nDESCRIPTION: Shows various operations on menu items using Tree collection API, including moving items, iterating over items, setting item text and hotkeys, and removing items.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/menu/work_with_menu.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nmenu.data.move(\"2\",0);\n\nmenu.data.getIndex(\"id\");\n\nmenu.data.forEach(function(item){\n    item.icon = \"\";\n});\nmenu.paint();\n\nmenu.data.getItem(\"id\").value = \"Open\";\nmenu.paint();\n\nmenu.data.getItem(\"id\").hotkey = \"Ctrl+N\";\nmenu.paint();\n\nmenu.data.remove(\"id\");\n\nmenu.data.removeAll();\nmenu.data.parse(new_options);\n```\n\n----------------------------------------\n\nTITLE: Initializing TimePicker in DHTMLX Form\nDESCRIPTION: Creates a new Form instance with a TimePicker control. The TimePicker is configured with a 12-hour format and initial value set to 6:20 AM.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/timepicker.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst form = new dhx.Form(\"form_container\", {\n    rows: [\n        {\n            type: \"timepicker\",\n            name: \"timepicker\",\n            label: \"time\",\n            labelWidth: \"50px\",\n            timeFormat: 12,\n            valueFormat: \"timeObject\",\n            value: [6,20,\"AM\"]\n        }\n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: Disabling Toggle Control in DHTMLX Form (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to disable a Toggle control in a DHTMLX Form using the disable() method. It retrieves the Toggle item from the form and then calls the disable() method on it.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/toggle/toggle_disable_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nform.getItem(\"toggle\").disable();\n```\n\n----------------------------------------\n\nTITLE: Firing Layout Events Programmatically in JavaScript\nDESCRIPTION: Demonstrates how to programmatically trigger Layout events using the events.fire() method with custom arguments.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/layout/events.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nlayout.events.fire(\"beforeHide\",args);\n// where args is an array of arguments\n```\n\n----------------------------------------\n\nTITLE: Disabling a Combo Box Control in DHTMLX Form\nDESCRIPTION: This example demonstrates how to disable a Combo Box control in a DHTMLX Form by accessing the control via its ID and calling the disable() method.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/combo/combo_disable_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"combo\").disable();\n```\n\n----------------------------------------\n\nTITLE: Clearing Textarea Validation in DHTMLX Form\nDESCRIPTION: Demonstrates how to clear validation state of a Textarea control in a DHTMLX Form. The method removes any validation marks and resets the validation state of the specified textarea.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/textarea/textarea_clearvalidate_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"textarea\").clearValidate();\n```\n\n----------------------------------------\n\nTITLE: Repainting a DHTMLX Window using JavaScript\nDESCRIPTION: This snippet demonstrates using the `paint()` method to redraw or repaint a DHTMLX Window. This is useful after changing configuration settings of the window to visually apply the updates. Requires an existing `dhxWindow` instance.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/window/usage.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ndhxWindow.paint();\n```\n\n----------------------------------------\n\nTITLE: Using selectFile() Method in DHTMLX Uploader\nDESCRIPTION: Demonstrates how to programmatically open a file selection dialog in DHTMLX Uploader. The method triggers the native file browser dialog allowing users to select files for upload.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/uploader/api/uploader_selectfile_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvault.uploader.selectFile();\n```\n\n----------------------------------------\n\nTITLE: Loading Menu Data on Initialization in JavaScript\nDESCRIPTION: Demonstrates how to load a predefined data set into DHTMLX Menu during initialization using the 'data' configuration property.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/menu/data_loading.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst menu = new dhx.Menu(\"menu_container\", {\n    data: data\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Window Hide Event in JavaScript\nDESCRIPTION: Example showing how to attach an event handler for the afterHide event of a DHTMLX Window. The handler receives the window position coordinates and optional event object.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/window/api/window_afterhide_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndhxWindow.events.on(\"afterHide\", function(position, events){\n    console.log(\"A window is hidden\", events);\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Input Event in DHTMLX Combo Box - JavaScript\nDESCRIPTION: Example of attaching an event listener to the input event of a Combo Box component. The event fires whenever text is typed into the combo box input field and provides the current input value as a parameter.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/combobox/api/combobox_input_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncombobox.events.on(\"input\", function(value) {\n    console.log(\"You've entered: \" + value);\n});\n```\n\n----------------------------------------\n\nTITLE: Handling the change event for Timepicker control in DHTMLX Form\nDESCRIPTION: This example demonstrates how to attach an event handler to the 'change' event of a Timepicker control. The event fires whenever the value of the control changes and provides the current value as a parameter.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/timepicker/timepicker_change_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"timepicker\").events.on(\"change\", function(value) {\n    console.log(\"change\", value);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring exportStyles with Custom Paths for DHTMLX Chart in JavaScript\nDESCRIPTION: This example shows how to configure the exportStyles option with an array of absolute paths to custom CSS files. These styles will be included when exporting the chart to PDF or PNG.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/chart/api/chart_exportstyles_config.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst chart = new dhx.Chart(\"chart_container\", {\n    type:\"area\",\n    scales: {\n        \"bottom\" : {\n            text: 'month'\n        },\n        \"left\" : {\n            padding: 10,\n            max: 90\n        }\n    },\n    series: [\n        {\n           value: 'company A',\n           strokeWidth: 2\n           // more options   \n        }\n    ],\n    exportStyles: [\n        \"https://mySite.com/exportStyle.css\",\n        \"https://mySite.com/secondExportStyle.css\"\n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: Handling CheckboxGroup Validation Events in DHTMLX Form\nDESCRIPTION: Example showing how to attach an event handler to the afterValidate event of a Checkbox Group control. The handler receives the validated value object containing checkbox states and a boolean indicating validation result.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/checkbox_group/checkboxgroup_aftervalidate_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"CheckboxGroup\").events.on(\"afterValidate\", function(value, isValidate) {\n    console.log(\"afterValidate\", value, isValidate);\n});\n```\n\n----------------------------------------\n\nTITLE: Sending Files from SimpleVault Control in DHTMLX Form\nDESCRIPTION: Demonstrates how to use the send() method of the SimpleVault control to upload files to a server. The target URL for the upload is specified by the control's target property.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/simplevault/simplevault_send_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"simplevault\").send();\n```\n\n----------------------------------------\n\nTITLE: Handling beforeHide Event in DHTMLX Layout (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to attach an event handler to the beforeHide event of a DHTMLX Layout component. The event fires before a cell is hidden and allows preventing the hiding action by returning false.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/layout/api/layout_beforehide_event.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nlayout.events.on(\"beforeHide\", function(id){\n    // your logic here\n    return false;\n});\n```\n\n----------------------------------------\n\nTITLE: Checking If a Toolbar Item Is Disabled in JavaScript\nDESCRIPTION: This example demonstrates how to use the isDisabled() method to check whether a specific toolbar item is disabled. The method takes an item ID as a parameter and returns true if the item is disabled or false otherwise.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/toolbar/api/toolbar_isdisabled_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ntoolbar.isDisabled(\"id\"); // -> returns true/false\n```\n\n----------------------------------------\n\nTITLE: Using setProperties Method with DHTMLX Form Slider\nDESCRIPTION: This example demonstrates how to dynamically change the properties of a Slider control in a DHTMLX Form. It modifies the minimum and maximum values, step size, and disables the tooltip.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/slider/slider_setproperties_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"slider\").setProperties({ \n    min: 5, max: 20, \n    step: 5, \n    tooltip: false\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX TimePicker with Configuration and Initial Value\nDESCRIPTION: Shows how to initialize DHTMLX TimePicker with specific configuration options. This example sets `controls` to true, applies a custom CSS class `dhx_widget--bordered`, and sets the initial `value` to the current date and time using `new Date`.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/timepicker/initialization.md#2025-04-22_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nconst timepicker = new dhx.Timepicker(\"timepicker_container\", {\n    controls: true,\n    css: \"dhx_widget--bordered\",\n    value: new Date,\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Radiogroup Value Changes in DHTMLX Form JavaScript\nDESCRIPTION: Example showing how to attach an event handler to the beforeChange event of a Radiogroup control. The handler logs the new value and returns true to allow the change to proceed.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/radiogroup/radiogroup_beforechange_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"radiogroup\").events.on(\"beforeChange\", function(value) {\n    console.log(\"beforeChange\", value);\n    return true;\n});\n```\n\n----------------------------------------\n\nTITLE: Handling cancelDrop Event in DHTMLX Tree\nDESCRIPTION: This example demonstrates how to attach an event handler to the cancelDrop event of a DHTMLX Tree component. The event fires when the mouse pointer moves out of an item's borders during drag and drop operations.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree/api/tree_canceldrop_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntree.events.on(\"cancelDrop\", function(data, events) {\n    // your logic here\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing beforeShow Event Handler for DHTMLX Form Text Control in JavaScript\nDESCRIPTION: This code example demonstrates how to attach an event handler to the beforeShow event of a Text control in a DHTMLX Form. The handler logs the current value and returns true to allow the control to be shown.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/text/text_beforeshow_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"text\").events.on(\"beforeShow\", function(value) {\n    console.log(\"beforeShow\", value);\n    return true;\n});\n```\n\n----------------------------------------\n\nTITLE: Getting ID of Selected Item in JavaScript DataView\nDESCRIPTION: Retrieves the id of the currently selected item using the getId() method of the selection object.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/dataview/usage_selection.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst selected = dataview.selection.getId(); // -> \"2\"\n```\n\n----------------------------------------\n\nTITLE: Destroying DHTMLX Window Instance using destructor()\nDESCRIPTION: Example demonstrates how to properly destroy a Window instance using the destructor() method. This removes the window and releases any occupied system resources.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/window/api/window_destructor_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndhxWindow.destructor();\n```\n\n----------------------------------------\n\nTITLE: Handling beforeValidate Event in DHTMLX Form Textarea Control\nDESCRIPTION: This example demonstrates how to attach an event handler to the beforeValidate event of a Textarea control in a DHTMLX form. The handler logs the value to be validated and returns true to allow the default validation to proceed.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/textarea/textarea_beforevalidate_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"textarea\").events.on(\"beforeValidate\", function(value) {\n    console.log(\"beforeValidate\", value);\n    return true;\n});\n```\n\n----------------------------------------\n\nTITLE: Creating SelectButton in DHTMLX Ribbon\nDESCRIPTION: Demonstrates how to add a new SelectButton control to a Ribbon interface using the add() method. The button includes a dropdown list with multiple options and hotkeys.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/ribbon/selectbutton.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nribbon.data.add({\n    id:\"select\",\n    type: \"selectButton\",\n    value: \"jpeg\",\n    size: \"small\",\n    count: 20,\n    items: [\n        {\n            value: \"jpeg\",\n            hotkey: \"alt+1\"\n        },\n        {\n            value: \"pdf\",\n            hotkey: \"alt+2\"\n        },\n        {\n            value: \"png\",\n            hotkey: \"alt+3\"\n        }\n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: Handling afterDrag Event in DHTMLX Tree\nDESCRIPTION: This code demonstrates how to attach an event handler to the afterDrag event of a DHTMLX Tree component. The event fires after the dragging of an item is finished and provides data about the drag operation and the associated mouse event.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree/api/tree_afterdrag_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntree.events.on(\"afterDrag\", function(data, events) {\n    // your logic here\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Focus in List and DataView (JavaScript)\nDESCRIPTION: Shows how to set focus to an item by its id in List and DataView components using the setFocus() method, which replaces the deprecated setFocusIndex() method.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/migration.md#2025-04-22_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nlist.setFocus(\"item_id\");\n\ndataview.setFocus(\"item_id\");\n```\n\n----------------------------------------\n\nTITLE: Applying Custom CSS to Layout Cells in HTML and JavaScript\nDESCRIPTION: This snippet demonstrates how to apply custom CSS classes to Layout cells using the 'css' config option. It includes HTML for styling and JavaScript for initializing the Layout with custom CSS.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/layout/api/cell/layout_cell_css_config.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<style>\n    .layout-header {\n        --dhx-background-primary: #3A434A;\n    }\n    .dhx_layout-cell-inner_html {\n        height: 100%;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n    }\n</style>\n\n<script>\n    const layout = new dhx.Layout(\"layout_container\", {\n        rows: [\n            {\n                id: \"toolbar\",\n                html: \"Header\",\n                css: \"layout-header\",\n                height: \"60px\"\n            }\n            // more objects\n        ]\n    });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Checking Text Control Visibility in DHTMLX Form (JavaScript)\nDESCRIPTION: Example of using the isVisible() method to check if a Text control is visible on the page. The method returns true if the control is visible, and false otherwise.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/text/text_isvisible_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"text\").isVisible(); \n// -> true/false\n```\n\n----------------------------------------\n\nTITLE: Disabling a Colorpicker Control in DHTMLX Form\nDESCRIPTION: This example demonstrates how to disable a Colorpicker control in a DHTMLX Form by using the disable() method on the form item identified by the \"colorpicker\" ID.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/colorpicker/colorpicker_disable_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"colorpicker\").disable();\n```\n\n----------------------------------------\n\nTITLE: Setting the Active Tab in DHTMLX Tabbar - JavaScript\nDESCRIPTION: Shows how to set a specific tab as active by calling setActive() with a tab id. In this example, Tabbar is initialized with four tabs, and the tab with id '2' is activated. Requires tabbar to be properly initialized with views containing ids, tabs, and CSS. Useful for programmatically changing UI focus.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tabbar/work_with_tabbar.md#2025-04-22_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst tabbar = new dhx.Tabbar(\\\"tabbar_container\\\", {\\n    mode: \\\"top\\\",            \\n    views:[\\n        { id: \\\"1\\\", tab: \\\"tab-1\\\", css:\\\"panel flex\\\"},\\n        { id: \\\"2\\\", tab: \\\"tab-2\\\", css:\\\"panel flex\\\"},\\n        { id: \\\"3\\\", tab: \\\"tab-3\\\", css:\\\"panel flex\\\"},\\n        { id: \\\"4\\\", tab: \\\"tab-4\\\", css:\\\"panel flex\\\"}\\n    ]\\n});\\n\\ntabbar.setActive(\\\"2\\\");\n```\n\n----------------------------------------\n\nTITLE: Loading Child Items in DHTMLX TreeCollection (JavaScript)\nDESCRIPTION: This snippet demonstrates how to use the loadItems() method to load child items of a control from a file. The method takes the ID of the control as a parameter and optionally accepts a DataDriver or data type.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree_collection/api/treecollection_loaditems_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nmyToolbar.data.loadItems(\"menu_id\");\n```\n\n----------------------------------------\n\nTITLE: Adding Icon to NavItem in JavaScript Sidebar\nDESCRIPTION: Shows how to add an icon to a NavItem in the sidebar configuration. The icon is specified using the 'icon' property with a CSS class.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/sidebar/navitem.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    type:\"navItem\", value:\"Some\",\n    icon:\"dxi dxi-check\"\n}\n```\n\n----------------------------------------\n\nTITLE: Attaching event listeners to DHTMLX Calendar in JavaScript\nDESCRIPTION: Demonstrates how to attach an event listener to a Calendar component using the events.on() method. The example shows handling the 'Change' event which triggers when a date selection changes.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar2/functionality_and_features/events.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncalendar.events.on(\"Change\",function(date, oldDate, click){\n    console.log(\"Change selection from \"+oldDate+\" to \"+date);\n    console.log(click);\n});\n```\n\n----------------------------------------\n\nTITLE: Applying DHTMLX Theme to Containers by HTMLElement Reference - HTML/JavaScript\nDESCRIPTION: Illustrates the use of an HTMLElement as the target argument for dhx.setTheme, allowing dynamic selection of the container to apply the theme. Requires DHTMLX Suite, valid configuration, and DOM containers. The snippet demonstrates fetching a container element with document.getElementById() and passing it as the second parameter to setTheme(). Inputs: theme name, container HTMLElement; output: only the targeted container is themed.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/themes/api/themes_settheme_method.md#2025-04-22_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<div id=\"container-1\"></div>\n<div id=\"container-2\"></div>\n\n<script>\n    const form_1 = new dhx.Form(\"container-1\", config);\n    const form_2 = new dhx.Form(\"container-2\", config);\n    \n    const container = document.getElementById(\"container-2\");\n    dhx.setTheme(\"dark\", container); //apply the \"dark\" theme to the container specified via an HTMLElement\n</script>\n```\n\n----------------------------------------\n\nTITLE: Setting Selected Date in Calendar\nDESCRIPTION: Examples of setting selected dates programmatically using the setValue() method, supporting various date formats and range selection.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar2/functionality_and_features/selected_date.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// selects the current date\ncalendar.setValue(new Date());\n\n// sets the current date as an array of Date value\ncalendar.setValue([new Date()]);\n \n// sets a date as a string\ncalendar.setValue(\"30/05/19\");\n\n// sets a date as an array of string value\ncalendar.setValue([\"30/05/19\"]);\n\n//sets dates as an array of Date values(for the range mode)\ncalendar.setValue([new Date(2019,05,03), new Date(2019,05,19)]);\n\n//sets dates as an array of string values(for the range mode)\ncalendar.setValue([\"03/06/19\", \"15/06/19\"]);\n```\n\n----------------------------------------\n\nTITLE: Method Signature for getHeaderFilter\nDESCRIPTION: Shows the TypeScript signature for the getHeaderFilter method, which takes a column ID as parameter and returns an object with filter methods.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_getheaderfilter_method.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ngetHeaderFilter(colId: string | number): object;\n```\n\n----------------------------------------\n\nTITLE: Checking if a Menu Item is Selected in JavaScript\nDESCRIPTION: Demonstrates how to check if a menu item is selected using the isSelected() method. The method takes the ID of the menu item as a parameter.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/menu/work_with_menu.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmenu.isSelected(\"align-left\"); // -> returns true/false\n```\n\n----------------------------------------\n\nTITLE: Initializing Tabbar with Custom CSS Classes\nDESCRIPTION: JavaScript code showing how to initialize a Tabbar component with custom CSS classes using the css configuration property.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tabbar/customization.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst tabbar = new dhx.Tabbar(\"tabbar_container\", {\n    css:\"my_first_class my_second_class\"\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Tooltip for MenuItem\nDESCRIPTION: Demonstrates how to add a tooltip to a MenuItem using the tooltip property.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/toolbar/menuitem.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    type:\"menuItem\", \n    value:\"Click\", \n    tooltip:\"Click me and find out why\"\n}\n```\n\n----------------------------------------\n\nTITLE: Handling openMenu Event in DHTMLX Menu (JavaScript)\nDESCRIPTION: This snippet demonstrates how to attach an event handler to the openMenu event of a DHTMLX Menu component. The event fires when a menu item is expanded, providing the ID of the opened item.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/menu/api/menu_openmenu_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmenu.events.on(\"openMenu\", function(id){\n    // your code here\n});\n```\n\n----------------------------------------\n\nTITLE: Subscribing to inputBlur Event in DHTMLX Toolbar - JavaScript\nDESCRIPTION: This code snippet shows how to subscribe to the inputBlur event on a DHTMLX Toolbar instance in JavaScript. It registers an event listener using toolbar.events.on, which receives the control ID as a parameter whenever any toolbar input loses focus. Requires that a DHTMLX Toolbar is instantiated and available as the variable 'toolbar'; DHTMLX Suite library must be loaded as a dependency. Expected input is the ID (string or number) of the blurred control, and output is a console log of that ID. This pattern can be reused for other event listeners in DHTMLX components.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/toolbar/api/toolbar_inputblur_event.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ntoolbar.events.on(\"inputBlur\", function(id){\n    console.log(id);\n});\n```\n\n----------------------------------------\n\nTITLE: Handling afterColumnDrop Event in DHTMLX Grid\nDESCRIPTION: This code snippet demonstrates how to attach an event listener for the afterColumnDrop event in a DHTMLX Grid. The event fires after the user has finished dragging a column and releases the mouse button. It provides data about the drag operation and the native mouse event.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_aftercolumndrop_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngrid.events.on(\"afterColumnDrop\", (data, event) => {\n    // your logic here\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Custom Scroll Globally in JavaScript\nDESCRIPTION: This snippet demonstrates how to enable custom scroll for all available DHTMLX widgets globally before initializing components.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/common_features/custom_scroll.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// enable the custom scroll for all available widgets\ndhx.scrollViewConfig.enable = true;\n\n// initialize a widget\nconst list = new dhx.List(\"list_container\", {\n    itemHeight: 30\n});\n```\n\n----------------------------------------\n\nTITLE: Setting DHTMLX Window Size using JavaScript\nDESCRIPTION: This snippet demonstrates how to set the dimensions of a DHTMLX Window instance using the `setSize()` method. It takes the desired width and height as numeric parameters. The example sets the window size to 250x250 pixels and then calls `show()` to display it. Requires an existing `dhxWindow` object.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/window/api/window_setsize_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndhxWindow.setSize(250, 250);\ndhxWindow.show();\n```\n\n----------------------------------------\n\nTITLE: Setting Focus on DataView Item in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the setFocus() method to set focus on a specific item in a DataView component. The method takes the item's ID as a parameter and scrolls to the item. Note that this method requires keyboard navigation to be enabled.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/dataview/api/dataview_setfocus_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ndataview.setFocus(\"item_id\");\n```\n\n----------------------------------------\n\nTITLE: Defining a Column for Grouping Data in DHTMLX Grid\nDESCRIPTION: Configures a Grid with a specific column for grouping data by specifying the column ID as a string value. This approach defines which column will be used as the main one for structuring and rendering grouped data.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/usage.md#2025-04-22_snippet_34\n\nLANGUAGE: jsx\nCODE:\n```\nconst grid = new dhx.Grid(\"grid_container\", {\n    columns: [\n        { id: \"country\", header: [{ text: \"Country\" }], groupable: true },\n        { id: \"city\", header: [{ text: \"City\" }], groupable: true },\n        { id: \"population\", header: [{ text: \"Population\" }] }\n    ],\n    group: {\n        column: \"group\" // defines the id of a column with grouped data\n    },\n    data: dataset\n});\n```\n\n----------------------------------------\n\nTITLE: JSON Format Template for Spacer Control\nDESCRIPTION: Template showing the structure and properties available for a spacer control in DHTMLX Toolbar.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/toolbar/load_data.md#2025-04-22_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\n// spacer\n{\n    id: \"spacerId\",          \n    type: \"spacer\"        \n}\n```\n\n----------------------------------------\n\nTITLE: Handling Sidebar afterHide Event in JavaScript\nDESCRIPTION: Example showing how to attach an event listener for the afterHide event of a DHTMLX Sidebar. The event fires after a sub-item is hidden and provides access to the native event object.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/sidebar/api/sidebar_afterhide_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsidebar.events.on(\"afterHide\", function(event){\n    // your code here\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Alert Box in JavaScript\nDESCRIPTION: Demonstrates how to configure and display an alert box with a custom header, text, and button alignment.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/message/configuration.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ndhx.alert({\n    header:\"Alert Header\",\n    text:\"Alert text\",\n    buttonsAlignment:\"center\"\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Filters from DataCollection - JavaScript\nDESCRIPTION: Demonstrates how to use the getFilters() method to retrieve applied filters from a DHTMLX DataCollection. Returns an object containing filter rules and configurations.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/data_collection/api/datacollection_getfilters_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst filters = grid.data.getFilters();\n```\n\n----------------------------------------\n\nTITLE: Initializing ComboBox with Label - JavaScript\nDESCRIPTION: Demonstrates how to create a new ComboBox instance with a custom label. The label parameter adds descriptive text above or beside the combo box control.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/combobox/api/combobox_label_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst combo = new dhx.Combobox(\"combo_container\", {\n    label:\"Countries:\"\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Custom CSS Classes for Colorpicker Styling\nDESCRIPTION: This snippet demonstrates how to define custom CSS classes to style a DHTMLX Colorpicker. It includes styles for changing the background, border, and shape of colorpicker elements.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/colorpicker/customization.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<style>\n    .custom-class {\n        background: #f2f2f2;\n        border: solid 1px lightblue;\n    }\n\n    .custom-class .dhx_palette__cell {\n        border-radius: 50%;\n    }\n\n    .custom-class .dhx_palette__cell:after {\n        border-radius: 50%;\n    }\n\n    .custom-class .dhx_colorpicker-custom-colors__picker {\n        border-radius: 50%;\n    }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Editing Grid Cell in JavaScript\nDESCRIPTION: Demonstrates how to edit a specific cell in the grid using the editCell() method. It also shows how to end editing with the editEnd() method.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/usage.md#2025-04-22_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\ngrid.editCell(grid.data.getId(0), \"project\");\n\ngrid.editEnd(); // the edited data will be saved\n\ngrid.editEnd(true); // the edited data won't be saved\n```\n\n----------------------------------------\n\nTITLE: Calling the destructor() Method for DHTMLX Pagination in JavaScript\nDESCRIPTION: This snippet demonstrates how to call the destructor() method on a DHTMLX Pagination instance (represented by the 'pagination' variable). This action removes the pagination UI element from the page and releases the memory and resources it occupied. It requires an existing DHTMLX Pagination instance to be called upon.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/pagination/api/pagination_destructor_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\npagination.destructor();\n```\n\n----------------------------------------\n\nTITLE: Handling afterChangeProperties Event in DHTMLX Form Fieldset\nDESCRIPTION: This code demonstrates how to attach an event handler to the afterChangeProperties event of a Fieldset control. The event fires after configuration attributes have been changed dynamically, providing access to the updated properties.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/fieldset/fieldset_afterchangeproperties_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"fieldset\").events.on(\"afterChangeProperties\", properties => {\n    console.log(\"afterChangeProperties\", properties);\n});\n```\n\n----------------------------------------\n\nTITLE: Showing Combo Box Control in DHTMLX Form (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to use the show() method to display a Combo Box control in a DHTMLX Form. The method is called on a specific form item retrieved using the getItem() method.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/combo/combo_show_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nform.getItem(\"combo\").show();\n```\n\n----------------------------------------\n\nTITLE: Handling Grid Column Drag Out Event in JavaScript\nDESCRIPTION: Example showing how to attach an event handler for the dragColumnOut event of DHTMLX Grid. This event fires when a column is dragged out of a potential target and provides data about the drag operation including source and target columns.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_dragcolumnout_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngrid.events.on(\"dragColumnOut\", (data, event) => {\n  // your logic here\n});\n```\n\n----------------------------------------\n\nTITLE: Working with DHTMLX Slider Widget\nDESCRIPTION: Shows how to access and manipulate the underlying Slider widget directly using the getWidget() method.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/slider.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst slider = form.getItem(\"slider_id\").getWidget();  // -> DHTMLX Slider\nslider.disable(); // disables slider\n```\n\n----------------------------------------\n\nTITLE: Hiding Combo Box in DHTMLX Form using JavaScript\nDESCRIPTION: This snippet demonstrates how to use the hide() method to hide a Combo Box control in a DHTMLX Form. The method is called on the Combo Box item retrieved from the form.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/combo/combo_hide_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nform.getItem(\"combo\").hide();\n```\n\n----------------------------------------\n\nTITLE: Handling beforeAdd Event in DHTMLX Form Simple Vault\nDESCRIPTION: This snippet demonstrates how to attach an event handler to the 'beforeAdd' event of a Simple Vault control in a DHTMLX Form. The event fires before a file is added to the data collection and allows for preventing the addition by returning false.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/simplevault/simplevault_beforeadd_event.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nform.getItem(\"simplevault\").data.events.on(\"beforeAdd\", function(file) {\n    console.log(\"beforeAdd\", file);\n    // return false;\n});\n```\n\n----------------------------------------\n\nTITLE: Unselecting an Item with remove() Method in DHTMLX JavaScript\nDESCRIPTION: This snippet demonstrates how to use the remove() method of the Selection object to unselect a specific item by its ID. The method returns true if the item is successfully unselected, otherwise false.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/selection/api/selection_remove_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ncomponent.selection.remove(\"1\"); // -> true\n```\n\n----------------------------------------\n\nTITLE: Applying Localization to Multiple Form Controls\nDESCRIPTION: This example demonstrates how to apply localization to multiple controls within a form, including ColorPicker, DatePicker, and Combo controls. It uses dhx.i18n.setLocale() for each control type.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/localization.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ndhx.i18n.setLocale(\"form\", de);\ndhx.i18n.setLocale(\"colorpicker\", de);\nconst form = new dhx.Form(\"form_container\");\n```\n\n----------------------------------------\n\nTITLE: Configurable Button Properties in DHTMLX Form\nDESCRIPTION: This code snippet shows the available configuration attributes that can be changed for the Button control using the setProperties() method. It includes properties like circle, color, css, full, height, icon, loading, padding, size, submit, text, url, view, and width.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/button/button_setproperties_method.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n    circle: boolean,\n    color: string,\n    css: string,\n    full: boolean,\n    height: string|number|\"content\",\n    icon: string,\n    loading: boolean,\n    padding: string|number,\n    size: string,\n    submit: boolean,\n    text: string,\n    url: string,\n    view: string,\n    width: string|number|\"content\",\n}\n```\n\n----------------------------------------\n\nTITLE: Tree State Object Structure in JavaScript\nDESCRIPTION: Illustrates the structure of a treeState object used with the setState() method. Each key represents a tree item ID, with properties for open status and checkbox selection state.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree/api/tree_setstate_method.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"books\": {\n        \"open\": true,\n        \"selected\": 2\n    },\n\n    \"mystery\": {\n        \"open\": true,\n        \"selected\": 2\n    },\n\n    \"thrillers\": {\n        \"selected\": 1\n    },\n\n    \"rc\": {\n        \"selected\": 0\n    },\n\n    \"ir\": {\n        \"selected\": 1\n    },\n\n    \"history\": {\n        \"selected\": 0\n    },\n\n    \"jmf\": {\n        \"selected\": 0\n    },\n\n    \"jd\": {\n        \"selected\": 0\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dynamic Loading for DHTMLX List\nDESCRIPTION: Example of setting up dynamic data loading for a DHTMLX List using LazyDataProxy and enabling virtual rendering.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/list/load_data.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nnew dhx.LazyDataProxy(\"https://docs.dhtmlx.com/suite/backend/lazyload\", {\n    limit: 30,\n    prepare: 5,\n    delay: 150,\n    from: 0\n});\n\nconst list = new dhx.list(\"list_container\", {\n    virtual: true\n});\n\nlist.data.load(lazyDataProxy);\n```\n\n----------------------------------------\n\nTITLE: Showing and Hiding Spacer Controls in JavaScript\nDESCRIPTION: Demonstrates how to show or hide a Spacer control in a toolbar using the show() and hide() methods. Each method requires the ID of the Spacer to be manipulated.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/toolbar/spacer.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ntoolbar.show(id);\ntoolbar.hide(id);\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX Pagination with Custom and Standard CSS Classes\nDESCRIPTION: This JavaScript snippet demonstrates initializing a DHTMLX Pagination component, applying a custom CSS class (`custom`) along with standard DHTMLX utility classes (`dhx_widget--bordered`, `dhx_widget--no-border_top`) via the `css` configuration property. It also associates data (`list.data`) with the pagination component.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/pagination/customization.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n<script>\n    const pagination = new dhx.Pagination(\"pagination_container\", {\n        css: \"custom dhx_widget--bordered dhx_widget--no-border_top\",\n        data: list.data\n    });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX Window with HTML Content - JavaScript\nDESCRIPTION: This snippet demonstrates how to create a new DHTMLX Window component in JavaScript while specifying HTML content to be displayed immediately upon initialization. The key dependency is the DHTMLX Suite library, and the 'html' property receives a string of HTML which becomes the inner content of the window. The dhxWindow instance is shown after creation using the .show() method. Inputs include a string for the HTML content, and output is a visible DHTMLX Window UI element populated with the specified content.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/window/api/window_html_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst dhxWindow = new dhx.Window({\n    html:\"<h1>Header</h1><p>paragraph</p>\"\n});\ndhxWindow.show();\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX Layout with Nested Columns in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a DHTMLX Layout with nested columns using the 'cols' configuration. It shows a complex structure with multiple levels of nesting, including headers for each block.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/layout/api/layout_cols_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst layout = new dhx.Layout(\"layout_container\", {\n    header: \"Main Block Header\",\n    cols: [\n        {\n            header: \"Sub Block Header row\"\n        },\n        {\n            header: \"Sub Block Header row\",\n            cols: [\n                {\n                    header:\"Left cols\"\n                },\n                {\n                    header:\"Center cols\",\n                    cols: [\n                        { header: \"Sub Block Header cols 1\" },\n                        { header: \"Sub Block Header cols 2\" },\n                        { header: \"Sub Block Header cols 3\" }\n                    ]\n                },\n \n            ]\n        }\n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: Multiple Controls Properties Configuration\nDESCRIPTION: Example showing how to set properties for multiple form controls simultaneously using a single method call.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/form_setproperties_method.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nform.setProperties({\n    \"simplevault_name\": {\n        label: \"new label\",\n        css: \"new-css\",\n        padding: 20,\n        required: true\n    },\n    \"input_name\": {\n        label: \"new label\",\n        css: \"new-css\",\n        padding: \"20px\",\n        height: 100,\n        maxlength: 15,\n        readOnly: true\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Hiding Checkbox Control in DHTMLX Form (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to hide a Checkbox control in a DHTMLX Form using the hide() method. It retrieves the Checkbox item from the form and then calls the hide() method on it.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/checkbox/checkbox_hide_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nform.getItem(\"checkbox\").hide();\n```\n\n----------------------------------------\n\nTITLE: Disabling Single or Multiple Ribbon Items - DHTMLX Suite JavaScript\nDESCRIPTION: This example demonstrates how to disable a specific Ribbon item by ID, as well as how to disable multiple items simultaneously by passing an array of IDs. Requires an instance of the Ribbon component (ribbon) from the DHTMLX Suite. The disable method accepts a string, number, or an array of those as item identifiers, and disables (dims) corresponding controls; no output is returned. Inputs are one or more item IDs, outputs are the respective UI items visually and functionally disabled.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/ribbon/api/ribbon_disable_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nribbon.disable(\"save_btn\");\n// several at a time\nribbon.disable([\"cancel_btn\",\"del_btn\"]);\n```\n\n----------------------------------------\n\nTITLE: Setting Cell Selection in DHTMLX Grid (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to create a DHTMLX Grid instance and use the setCell() method to select a specific cell. It shows the grid initialization with configuration options and the process of selecting a cell by specifying the row and column.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/selection/selection_setcell_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst grid = new dhx.Grid(\"grid_container\", {\n    columns: [\n        // columns config\n    ],\n    selection:\"cell\",\n    multiselection: false, \n    data: dataset\n});\n\nconst row = grid.data.getItem(grid.data.getId(0));\nconst column = grid.getColumn(\"yearlyChange\");\ngrid.selection.setCell(row, column);\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX Tree with Editable Config in JavaScript\nDESCRIPTION: This code snippet demonstrates how to initialize a DHTMLX Tree component with the 'editable' configuration option set to true. This enables editing of Tree items on double-click.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree/api/tree_editable_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst tree = new dhx.Tree(\"tree_container\", {editable: true});\n```\n\n----------------------------------------\n\nTITLE: RadioGroup Properties Configuration\nDESCRIPTION: Configuration object for RadioGroup control defining properties for radio button groups including validation and styling options.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/form_getproperties_method.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    css: string,\n    errorMessage: string,\n    height: string | number | \"content\",\n    helpMessage: string,\n    hiddenLabel: boolean,\n    label: string,\n    labelPosition: string,\n    labelWidth: string | number,\n    options: object,\n    padding: string | number,\n    preMessage: string,\n    required: boolean,\n    successMessage: string,\n    width: string | number | \"content\"\n}\n```\n\n----------------------------------------\n\nTITLE: Handling dragOut Event in DHTMLX List\nDESCRIPTION: This example shows how to attach an event handler to the dragOut event of a DHTMLX List component. The event fires when an item is dragged out of a potential target.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/list/api/list_dragout_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlist.events.on(\"dragOut\", function(data, events) {\n    // your logic here\n});\n```\n\n----------------------------------------\n\nTITLE: Refreshing Child Items in DHTMLX TreeCollection\nDESCRIPTION: This code snippet demonstrates how to use the refreshItems() method of the TreeCollection class to refresh child items of a specific control in a toolbar. It takes the ID of the control as a parameter.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree_collection/api/treecollection_refreshitems_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ntoolbar.data.refreshItems(\"menu_id\");\n```\n\n----------------------------------------\n\nTITLE: Standard DatePicker Validation\nDESCRIPTION: Example demonstrating validation without silent mode, which triggers validation events and visual modifications.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/calendar/calendar_validate_method.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// the method validates the specified value\nform.getItem(\"datepicker\").validate(false, \"03/10/20\"); // -> true/false\n\n// the method validates the current value\nform.getItem(\"datepicker\").validate(); // -> true/false\n```\n\n----------------------------------------\n\nTITLE: Enabling a Select Control or Specific Option in JavaScript\nDESCRIPTION: This code snippet demonstrates how to use the enable() method to activate a Select control or a specific option within it. The method can be called on a Form item retrieved using getItem(). If a value is provided, it enables a specific option; otherwise, it enables the entire control.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/select/select_enable_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"select\").enable(1);\n```\n\n----------------------------------------\n\nTITLE: Detaching Layout Event Listener in JavaScript\nDESCRIPTION: Shows how to attach and then detach an event listener from a Layout component using the events.detach() method.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/layout/events.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlayout.events.on(\"beforeHide\", function(id){\n    console.log(\"The id of a cell\", id);\n});\n\nlayout.events.detach(\"beforeHide\");\n```\n\n----------------------------------------\n\nTITLE: Calling DHTMLX Popup destructor() Method in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to invoke the `destructor()` method on a DHTMLX Popup instance (represented by the `popup` variable). Calling this method removes the popup component instance from the application and frees up the memory and resources it was consuming. It takes no parameters and returns void.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/popup/api/popup_destructor_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\npopup.destructor();\n```\n\n----------------------------------------\n\nTITLE: Setting TwoState Button States in JavaScript Ribbon\nDESCRIPTION: Example of setting the state of a twoState button control in a DHTMLX Ribbon using setState() method.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/ribbon/operating_ribbon.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{ type:\"button\", twoState:true, id:\"check\" }\n...\nribbon.setState({\"check\":true});\nribbon.setState({\"check\":false});\n```\n\n----------------------------------------\n\nTITLE: Configuring dragMode in DHTMLX Tree (JavaScript)\nDESCRIPTION: This code demonstrates how to initialize a DHTMLX Tree with the dragMode property set to 'source', which allows dragging items out of the tree but prevents taking items from other trees.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree/api/tree_dragmode_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst tree = new dhx.Tree(\"tree_container\", { \n    dragMode:\"source\"\n});\n```\n\n----------------------------------------\n\nTITLE: Attaching Event Handler to afterShow Event in DHTMLX Timepicker (JavaScript)\nDESCRIPTION: This code demonstrates how to attach an event handler to the afterShow event of a Timepicker control in a DHTMLX Form. The handler logs the control's current value to the console when the timepicker is shown.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/timepicker/timepicker_aftershow_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"timepicker\").events.on(\"afterShow\", function(value) {\n    console.log(\"afterShow\", value);\n});\n```\n\n----------------------------------------\n\nTITLE: Using stopPropagation() in Tree Event Handler\nDESCRIPTION: This snippet demonstrates an alternative way to stop event propagation in a tree item's event handler using the stopPropagation() method. This approach is available from DHTMLX version 7.3.6.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree/api/tree_eventhandlers_config.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\neventHandlers: {\n    onclick: {\n        class_name: (event) => {                              \n            evt = event || window.event;\n            evt.stopPropagation();\n            console.log(\"button click\");\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Toggle Blur Event in DHTMLX Form (JavaScript)\nDESCRIPTION: This snippet demonstrates how to attach an event listener for the blur event of a Toggle control in a DHTMLX Form. The event fires when the Toggle loses focus and provides the current value of the control.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/toggle/toggle_blur_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"toggle\").events.on(\"blur\", (value) => {\n    console.log(\"blur\", value);\n});\n```\n\n----------------------------------------\n\nTITLE: Using getProperties Method with Spacer Control in DHTMLX Form\nDESCRIPTION: Example showing how to create a form with a spacer control and retrieve its properties using the getProperties() method. This returns an object containing the spacer's configuration attributes.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/spacer/spacer_getproperties_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst form = new dhx.Form(\"form_container\", {\n    rows: [\n        {\n            type: \"spacer\",\n            name: \"spacer\"\n        }\n    ]\n});\n\nform.getItem(\"spacer\").getProperties();\n```\n\n----------------------------------------\n\nTITLE: Event Handler for Calendar beforeChange Event in JavaScript\nDESCRIPTION: This example demonstrates how to attach a handler to the BeforeChange event of a calendar component to prevent selecting dates in the future. The handler returns false for dates greater than the current date, blocking their selection.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar2/api/calendar_beforechange_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncalendar.events.on(\"BeforeChange\",function(date, oldDate, click){\n    if (date > new Date())\n        return false;\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Checkbox afterHide Event in DHTMLX Form\nDESCRIPTION: Example showing how to attach an event handler to the afterHide event of a Checkbox control. The event fires after the control is hidden and provides the current value and initialization state.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/checkbox/checkbox_afterhide_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"checkbox\").events.on(\"afterHide\", function(value, init) {\n    console.log(\"afterHide\", value, init);\n});\n```\n\n----------------------------------------\n\nTITLE: Detaching Event Listeners from DHTMLX Window in JavaScript\nDESCRIPTION: Illustrates how to remove an event listener from a DHTMLX Window instance using the `dhxWindow.events.detach()` method. The example first attaches a 'move' event listener (similar to the previous example) and then demonstrates how to remove all listeners associated with the 'move' event type by passing the event name to `detach()`.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/window/handling_events.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\ndhxWindow.events.on(\"move\", function(position, oldPosition, side) {\n    console.log(\"The window is moved to \" + position.left, position.top)\n});\n\ndhxWindow.events.detach(\"move\");\n```\n\n----------------------------------------\n\nTITLE: Handling Keydown Events in DHTMLX Form Button\nDESCRIPTION: Example demonstrating how to attach a keydown event listener to a Button control in a DHTMLX Form. The event fires whenever any key is pressed while the button has focus and provides access to the native KeyboardEvent object.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/button/button_keydown_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"button\").events.on(\"keydown\", function(event) {\n    console.log(event);\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Asynchronous Data Loading in DHTMLX Ribbon with Promises (JavaScript)\nDESCRIPTION: Demonstrates how to execute code after data has been asynchronously loaded into a DHTMLX Ribbon using the `load()` method. Since `load()` returns a promise, the `.then()` method is used to define a callback function that runs only after the data loading is successfully completed.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/ribbon/data_loading.md#2025-04-22_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nribbon.data.load(\"/some/data\").then(function(){\n   // some logic here\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Avatar Upload Start Event in DHTMLX Form\nDESCRIPTION: Example showing how to attach an event listener for the uploadBegin event on an Avatar form control. The event provides the current value of the control when a file upload starts.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/avatar/avatar_uploadbegin_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"avatar\").events.on(\"uploadBegin\", (value) => {\n    console.log(\"uploadBegin\", value);\n});\n```\n\n----------------------------------------\n\nTITLE: Setting TimePicker Value via Widget Method\nDESCRIPTION: This example shows how to get the TimePicker widget from a form control and then use the setValue() method of the widget to set a specific time value.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/timepicker/timepicker_getwidget_method.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst timepicker = form.getItem(\"timepicker\").getWidget();  // -> TimePicker\ntimepicker.setValue(\"00:39\"); //set the value as a string\n```\n\n----------------------------------------\n\nTITLE: Handling Container Property Changes in DHTMLX Form\nDESCRIPTION: Example showing how to attach an event handler to the beforeChangeProperties event of a Container control. The handler logs the properties being changed and returns true to allow the change.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/container/container_beforechangeproperties_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"container\").events.on(\"beforeChangeProperties\", function(properties) {\n    console.log(\"beforeChangeProperties\", properties);\n    return true;\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Legend for Calendar Heatmap Chart in JavaScript\nDESCRIPTION: This snippet shows the structure and options for configuring the legend of a calendar heatmap chart in DHTMLX. It includes properties for customizing the legend's content, alignment, margin, size, and more.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/chart/api/chart_legend_config.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nlegend?: {\n    values?: {\n        text?: string,\n        tick?: number, // 10 by default\n        majorTick?: number, // 1 by default\n        step?: number, // 1 by default\n        tickTemplate?: string => string,\n    },\n    halign?: \"left\" | \"right\" | \"center\", // \"right\" by default\n    margin?: number, // 0 by default\n    size?: number,\n    valign?: \"top\" | \"bottom\", // \"top\" by default\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving SimpleVault Control Values in DHTMLX Form with JavaScript\nDESCRIPTION: This example demonstrates how to use the getValue() method to retrieve the current values from a SimpleVault control in a DHTMLX Form. The method returns an array of objects containing file information such as id, name, and status.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/simplevault/simplevault_getvalue_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst value = form.getItem(\"simplevault\").getValue();\n/* => \n[\n    {\n        \"id\": \"file1\",\n        \"name\": \"file_name1.png\",\n        \"status\": \"uploaded\",\n    }, \n    {\n        \"id\": \"file2\",\n        \"name\": \"file_name2.png\",\n        \"status\": \"uploaded\",\n    } \n]\n*/\n```\n\n----------------------------------------\n\nTITLE: Enabling and Disabling Input in Toolbar with JavaScript\nDESCRIPTION: Demonstrates the use of enable() and disable() methods of Toolbar to activate or deactivate an Input control. These methods also take the ID of the input as a parameter.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/toolbar/input.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ntoolbar.enable(id);\ntoolbar.disable(id);\n```\n\n----------------------------------------\n\nTITLE: Example: Customizing Timepicker Colors and Border (HTML/JS)\nDESCRIPTION: Provides a complete example showing how to define a custom CSS class `.custom` using CSS variables to modify primary font and component colors. It then demonstrates instantiating a Timepicker in JavaScript, applying both the custom class `.custom` and a predefined DHTMLX class `dhx_widget--bordered` via the `css` property to achieve a customized look with a border.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/timepicker/customization.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<style>\n  .custom {\n    --dhx-font-color-primary: #c00;\n    --dhx-color-primary: #ff5c5c;\n  }\n</style>\n\n<script>\n    const timepicker = new dhx.Timepicker(\"timepicker_container\", {\n          css: \"custom dhx_widget--bordered\"\n    });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Handling dragRowStart Event in DHTMLX Grid\nDESCRIPTION: This snippet demonstrates how to attach an event listener for the dragRowStart event on a DHTMLX Grid instance. The event fires when dragging of a row has started, providing data about the drag operation and the original mouse event.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_dragrowstart_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngrid.events.on(\"dragRowStart\", (data, event) => {\n  // your logic here\n});\n```\n\n----------------------------------------\n\nTITLE: Detaching Grid Event Listener in JavaScript\nDESCRIPTION: Shows how to attach and then detach an event listener from a grid component using the grid.events.detach() method.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/events.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ngrid.events.on(\"scroll\", function({top,left}){\n    console.log(\"The grid is scrolled to \"+top,left);\n});\n\ngrid.events.detach(\"scroll\");\n```\n\n----------------------------------------\n\nTITLE: Setting Monday as Start of Week\nDESCRIPTION: Creates a Calendar that uses Monday as the first day of the week instead of the default Sunday.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar/configuring.md#2025-04-22_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nconst calendar = new dhx.Calendar(\"calendar_container\", {\n    weekStart: \"monday\"\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Double Sum Calculator in DHTMLX Grid\nDESCRIPTION: Shows how to define a custom doubleSum functor and use it for calculating summary values in a Grid component. The function doubles the sum of values in a specified column and displays it in the grid footer.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/helpers/data_calculation_functions.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\ndhx.methods.doubleSum = (rows, field) => {\n    return rows.reduce((sum, row) => sum + row[field] * 2, 0);\n};\n\nconst grid = new dhx.Grid(\"grid_container\", {\n    columns: [\n        {\n            id: \"population\",\n            header: [{ text: \"Population\" }],\n            footer: [{ text: (content) => content.doubleSum }],\n            summary: \"doubleSum\"\n        },\n    ],\n    data: dataset\n});\n\nconst customSummary = grid.getSummary(\"population\");\nconsole.log(customSummary); // { doubleSum: 2000000 } - a doubled sum of counted values in the \"population\" column\n```\n\n----------------------------------------\n\nTITLE: Handling Input Event in DHTMLX Form\nDESCRIPTION: Example showing how to attach an event listener to the input event of a Form Input control. The event fires whenever the user types text into the input field and provides the current input value as a parameter.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/input/input_input_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"input\").events.on(\"input\", function(inputValue) {\n    console.log(\"input\", inputValue);\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Tooltip for NavItem in JavaScript Sidebar\nDESCRIPTION: Demonstrates how to add a tooltip to a NavItem using the 'tooltip' property in the NavItem configuration object.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/sidebar/navitem.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    type:\"navItem\", \n    value:\"Click\", \n    tooltip:\"Click me and find out why\"\n}\n```\n\n----------------------------------------\n\nTITLE: Handling beforeValidate Event in DHTMLX Form Simple Vault Control\nDESCRIPTION: This example demonstrates how to attach an event handler to the beforeValidate event of a Simple Vault control. The handler logs the value to be validated and returns true to allow default validation to proceed.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/simplevault/simplevault_beforevalidate_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"simplevault\").events.on(\"beforeValidate\", function(value) {\n    console.log(\"beforeValidate\", value);\n    return true;\n});\n```\n\n----------------------------------------\n\nTITLE: Removing Fieldset Instance in DHTMLX Form (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to use the destructor() method to remove a fieldset instance from a DHTMLX Form. It retrieves the fieldset item and calls the destructor method on it.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/fieldset/fieldset_destructor_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nform.getItem(\"fieldset\").destructor();\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Container Node for DHTMLX Window in JavaScript\nDESCRIPTION: This code shows how to place a DHTMLX Window inside a specific HTML element by setting the 'node' property when instantiating the window. The 'node' value should match the ID or reference of the desired container element. If omitted, the window will default to the document body. Requires DHTMLX Suite library and an existing container element in the DOM.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/window/configuration.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst dhxWindow = new dhx.Window({\n    node:\"customDiv\"\n});\n```\n\n----------------------------------------\n\nTITLE: Disabling ComboBox in JavaScript using DHTMLX\nDESCRIPTION: This code snippet demonstrates how to use the disable() method to disable a ComboBox component on a page. The method takes no arguments and returns void.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/combobox/api/combobox_disable_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ncombo.disable();\n```\n\n----------------------------------------\n\nTITLE: Removing DataView Instance using destructor() Method in JavaScript\nDESCRIPTION: This code snippet demonstrates how to use the destructor() method to remove a DataView instance and release occupied resources. It is a simple method call on the dataview object.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/dataview/api/dataview_destructor_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ndataview.destructor();\n```\n\n----------------------------------------\n\nTITLE: Expanding All Tree Items in JavaScript using DHTMLX Tree\nDESCRIPTION: This code snippet demonstrates how to use the expandAll() method to expand all collapsed items in a DHTMLX Tree component. The method is called on a tree instance and doesn't require any parameters.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree/api/tree_expandall_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntree.expandAll();\n```\n\n----------------------------------------\n\nTITLE: Date Formatting in Grid Column - DHTMLX Grid (v9.0+) - JavaScript\nDESCRIPTION: Presents the updated Grid column configuration in v9.0+ for formatting dates, replacing 'format' with 'dateFormat'. Applied in column objects within grid definitions; ensures consistent display of date values as per the specified mask.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/migration.md#2025-04-22_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\n{ \n    width: 150, id: \"date\", header: [{ text: \"Date\" }], \n    type: \"date\", dateFormat: \"%M %d %Y\"\n}\n```\n\n----------------------------------------\n\nTITLE: Showing Toolbar Items using show() Method in JavaScript\nDESCRIPTION: Demonstrates how to use the show() method to display hidden toolbar items. The method can accept a single item ID, an array of IDs, or no parameters to show all items at once (available from v7.0).\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/toolbar/api/toolbar_show_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntoolbar.show(\"save_btn\");\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// several at a time\ntoolbar.show([\"cancel_btn\",\"del_btn\"]);\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// shows all Toolbar items\ntoolbar.show();\n```\n\n----------------------------------------\n\nTITLE: Adding Event Listener for cancelDrop Event in JavaScript\nDESCRIPTION: This snippet demonstrates how to add an event listener for the cancelDrop event on a DataView instance. The event fires when the mouse pointer moves out of an item's borders while dragging the item.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/dataview/api/dataview_canceldrop_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndataview.events.on(\"cancelDrop\", function(data, events) {\n    // your logic here\n});\n```\n\n----------------------------------------\n\nTITLE: Including DHTMLX Sidebar Source Files in HTML\nDESCRIPTION: This code snippet shows how to include the necessary JavaScript and CSS files for DHTMLX Sidebar in the HTML header. It uses relative paths to the suite.js and suite.css files.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/sidebar/initialization.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"text/javascript\" src=\"../../codebase/suite.js\"></script>\n<link rel=\"stylesheet\" href=\"../../codebase/suite.css\">\n```\n\n----------------------------------------\n\nTITLE: Getting Properties Return Format Example\nDESCRIPTION: Shows the two different formats returned by getProperties() method - with and without parameter.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/form_getproperties_method.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nform.getProperties();\n// -> {\n//     name: {\n//         autocomplete: false, errorMessage: \"\", height: \"content\", helpMessage: \"\",\n//         hiddenLabel: false, icon: \"dxi dxi-magnify\", inputType: \"text\", …\n//     },\n//     password: {\n//         autocomplete: false, errorMessage: \"\", height: \"content\",\n//         helpMessage: \"\", hiddenLabel: false, icon: \"\", inputType: \"password\", …\n//     },\n//     u1604577858827: {\n//         circle: false, color: \"primary\", full: false, height: \"content\",\n//         icon: \"\", loading: false, padding: 0, size: \"medium\", submit: true, …\n//     }\n}\n```\n\n----------------------------------------\n\nTITLE: Attaching modeChange Event Handler to Colorpicker in JavaScript\nDESCRIPTION: This snippet demonstrates how to attach an event handler for the modeChange event of a Colorpicker component. The handler logs the selected mode to the console when the colorpicker mode changes.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/colorpicker/api/colorpicker_modechange_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncolorpicker.events.on(\"modeChange\", function(view) {\n   console.log(\"Selected mode: \" + view); \n});\n```\n\n----------------------------------------\n\nTITLE: Footer Configuration Type Definition\nDESCRIPTION: Type definition for Grid column footer configuration, showing all available options and their types\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/gridcolumn_properties/gridcolumn_footer_property.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nfooter?: [\n    {\n        text?: \n            string |\n            ((content: {\n                [key: string]: string | number | null\n            }) => string),\n        tooltip?: boolean | object, // true by default\n        tooltipTemplate?: (\n            content: {\n                [key: string]: string | number | null;\n                value: string;\n            },\n            header: IHeader,\n            column: ICol\n        ) => string | boolean,\n        align?: \"left\" | \"center\" | \"right\", // \"left\" by default\n        colspan?: number,\n        rowspan?: number,\n        css?: string,\n        htmlEnable?: boolean, // false by default\n    },\n];\n```\n\n----------------------------------------\n\nTITLE: Enabling Fullscreen Mode for DHTMLX Window using JavaScript\nDESCRIPTION: This snippet shows how to activate the fullscreen mode for a DHTMLX Window instance using the `setFullScreen()` method. When called, the window will expand to occupy the entire screen. Requires an existing `dhxWindow` instance.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/window/usage.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ndhxWindow.setFullScreen();\n```\n\n----------------------------------------\n\nTITLE: Declaring Grid Column Alignment Types in JSX\nDESCRIPTION: Type definition showing the possible alignment options for grid columns.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/gridcolumn_properties/gridcolumn_align_property.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nalign?: \"left\" | \"center\" | \"right\";\n```\n\n----------------------------------------\n\nTITLE: Attaching Event Listener for afterCollapse Event in DHTMLX Layout\nDESCRIPTION: This snippet demonstrates how to attach an event listener for the afterCollapse event in a DHTMLX Layout. The event fires after a cell is collapsed and provides the id of the collapsed cell as a parameter.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/layout/api/layout_aftercollapse_event.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nlayout.events.on(\"afterCollapse\", function(id){\n    // your logic here\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX Calendar with Custom Initial Date\nDESCRIPTION: This code snippet demonstrates how to create a DHTMLX calendar and set its initial date to January 15, 2024. It uses the 'date' property to specify the desired starting date for the calendar view.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar2/functionality_and_features/initial_date.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst calendar = new dhx.Calendar(\"calendar\", {\n    date: new Date(2024, 0, 15)\n});\n```\n\n----------------------------------------\n\nTITLE: Detaching Event Handler from Ribbon\nDESCRIPTION: Shows how to attach and then detach an event handler from a Ribbon click event using the events.detach() method.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/ribbon/handling_events.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nribbon.events.on(\"click\", function(id,e){\n    console.log(id,e);\n});\n\nribbon.events.detach(\"click\");\n```\n\n----------------------------------------\n\nTITLE: Attaching Event Listener to TreeCollection change Event in JavaScript\nDESCRIPTION: This snippet demonstrates how to attach an event listener to the 'change' event of a TreeCollection. The event fires when the collection is modified, providing information about the modified item and the type of change.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree_collection/api/treecollection_change_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncomponent.data.events.on(\"change\", function(id,status,updatedItem){\n    console.log(\"An item is updated\");\n});\n```\n\n----------------------------------------\n\nTITLE: Counting VIP Users with Reduce Method\nDESCRIPTION: Uses the reduce method to count the number of VIP users in the grid data collection.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tutorial/basic_application/step7.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvipUser = grid.data.reduce(function(acc, item) {    \n    return item.vip ? acc + 1 : acc;           \n}, 0);\n```\n\n----------------------------------------\n\nTITLE: Enabling Week Numbers Display\nDESCRIPTION: Creates a Calendar with week numbers displayed along the left side of the calendar grid.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar/configuring.md#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst calendar = new dhx.Calendar(\"calendar_container\", {\n    weekNumbers: true\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Grid with Group Configuration in JavaScript\nDESCRIPTION: This example demonstrates how to initialize a DHTMLX Grid with the group configuration enabled. It sets up columns for Country, Population, and Land Area, and enables the grouping panel.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_group_config.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst grid = new dhx.Grid(\"grid_container\", {\n    columns: [\n        { id: \"country\", header: [{ text: \"Country\" }], groupable: true },\n        { id: \"population\", header: [{ text: \"Population\" }] },\n        { id: \"area\", header: [{ text: \"Land Area (Km²)\" }] }\n    ],\n    group: {\n        panel: true\n    },\n    data: dataset\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Form Input Validation Event in JavaScript\nDESCRIPTION: Example showing how to attach a beforeValidate event handler to a form input control. The handler receives the value to be validated and can return false to cancel validation or true to allow it.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/input/input_beforevalidate_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"input\").events.on(\"beforeValidate\", function(value) {\n    console.log(\"beforeValidate\", value);\n    return true;\n});\n```\n\n----------------------------------------\n\nTITLE: Showing a Specific Date in Calendar\nDESCRIPTION: Basic example showing how to display a specific date (December 12, 2020) in the calendar.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar2/api/calendar_showdate_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncalendar.showDate(new Date(2020,11,12));\n```\n\n----------------------------------------\n\nTITLE: Initializing Toggle Control in JavaScript DHTMLX Form\nDESCRIPTION: This code snippet shows how to initialize a Toggle control within a DHTMLX Form. It demonstrates setting various properties such as icon, text, and selected state. The getValue() method in this case returns a boolean value.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/toggle/toggle_getvalue_method.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst form = new dhx.Form(\"form_container\", {\n    rows: [\n        {\n            name: \"toggle\",\n            type: \"toggle\",\n            icon: \"dxi dxi-eye\",\n            offIcon: \"dxi dxi-eye-off\",\n            text: \"Visible\",\n            offText: \"Invisible\",\n            selected: true\n        }\n    ]\n});\n\nconst state = form.getItem(\"toggle\").getValue(); // -> true/false\n```\n\n----------------------------------------\n\nTITLE: Showing Multiple DHTMLX Ribbon Items by ID in JavaScript\nDESCRIPTION: This snippet illustrates how to make several hidden Ribbon items visible at once. It calls the `show()` method, passing an array containing the string IDs (\"cancel_btn\", \"del_btn\") of the items to be shown. Requires an initialized DHTMLX Ribbon instance (`ribbon`).\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/ribbon/api/ribbon_show_method.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// several at a time\nribbon.show([\"cancel_btn\",\"del_btn\"]);\n```\n\n----------------------------------------\n\nTITLE: Configuring Vertical Form Layout with rows in DHTMLX JavaScript Form\nDESCRIPTION: Example of creating a form with vertically arranged controls using the rows configuration. This example creates a form with input fields for name and email, and a submit button, all arranged vertically.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/form_rows_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst form = new dhx.Form(\"form_container\", {\n    css: \"dhx_widget--bordered dhx_layout-cell--bordered\",\n    height: \"300px\",\n    // rows\n    rows: [\n        {\n            type: \"input\",\n            label: \"Name\",\n            icon: \"dxi dxi-magnify\",\n            placeholder: \"John Doe\",\n            labelPosition: \"right\",\n        },\n        {\n            type: \"input\",\n            label: \"Email\",\n            placeholder: \"jd@mail.name\",\n            labelPosition: \"right\",\n        },\n        {\n            type: \"button\",\n            submit: true,\n            text: \"Send\",\n            size: \"medium\",\n            view: \"flat\",\n            color: \"primary\",\n        }\n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: Unselecting Menu Items in JavaScript\nDESCRIPTION: Demonstrates how to use the unselect() method to unselect all previously selected items or a specific item in a DHTMLX Menu. The method can be called without parameters to unselect all items, or with an item id to unselect a specific item.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/menu/api/menu_unselect_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// unselects all previously selected items\nmenu.unselect();\n\n// unselects a specified selected item\nmenu.unselect(\"align-left\");\n```\n\n----------------------------------------\n\nTITLE: Attaching Context Menu to Mouse Event in JavaScript\nDESCRIPTION: Shows how to attach dhtmlxContextMenu to a mouse event, displaying it at the cursor position. Prevents default context menu behavior.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/menu/creating_context_menu.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst cmenu = new dhx.ContextMenu(null, {css: \"dhx_widget--bg_gray\"});\n\ndocument.querySelector('#menu').oncontextmenu = function(e) {   \n    e.preventDefault();\n    cmenu.showAt(e);\n}\n```\n\n----------------------------------------\n\nTITLE: Handling afterItemLoad Event in DHTMLX TreeCollection\nDESCRIPTION: Example showing how to attach an event handler to the afterItemLoad event of TreeCollection. The event fires after an item is loaded and provides the ID of the loaded item as a parameter.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree_collection/api/treecollection_afteritemload_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncomponent.data.events.on(\"afterItemLoad\", function(id){\n    console.log(\"An \", id, \" item is loaded\");\n});\n```\n\n----------------------------------------\n\nTITLE: Handling beforeChange Event for Input Control in DHTMLX Form\nDESCRIPTION: This example demonstrates how to attach an event handler to the beforeChange event of an Input control. The handler logs the new value to the console and returns true to allow the change to proceed.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/input/input_beforechange_event.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nform.getItem(\"input\").events.on(\"beforeChange\", function(value) {\n    console.log(\"beforeChange\", value);\n    return true;\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Current Mode of DHTMLX Calendar in JavaScript\nDESCRIPTION: This code snippet demonstrates how to use the getCurrentMode() method to retrieve the current display mode of a DHTMLX Calendar instance. The method returns a string indicating the mode, which can be 'calendar', 'year', 'month', or 'timepicker'.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar/api/calendar_getcurrentmode_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst mode = calendar.getCurrentMode(); // -> \"calendar\"\n```\n\n----------------------------------------\n\nTITLE: Return Object Structure from getProperties() for Timepicker\nDESCRIPTION: This code snippet shows the structure of the object returned by the getProperties() method when called on a Timepicker control. It includes all available configuration attributes and their current values.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/timepicker/timepicker_getproperties_method.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    controls: false,\n    editable: false,\n    errorMessage: \"\",\n    height: \"content\",\n    helpMessage: \"\",\n    hiddenLabel: false,\n    icon: \"\",\n    label: \"time\",\n    labelPosition: \"top\",\n    labelWidth: \"50px\",\n    padding: 0,\n    placeholder: \"\",\n    preMessage: \"\",\n    required: false,\n    successMessage: \"\",\n    timeFormat: 12,\n    validation: undefined,\n    valueFormat: \"timeObject\",\n    width: \"content\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Progress Bar to Layout Cell\nDESCRIPTION: Demonstrates how to add a progress bar (loading spinner) to a Layout cell when it has no content.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/layout/cell_configuration.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst layout = new dhx.Layout(\"layout_container\", {\n    type: \"line\",\n    rows: [\n        {\n            id: \"one\",\n            header: \"Header\",\n            height: \"250px\",\n            resizable: true,\n            progressDefault: true\n        },\n        {\n            id: \"two\",\n            height: \"250px\",\n            progressDefault: true,\n        },\n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: Adjusting Grid Column Width in JavaScript\nDESCRIPTION: Demonstrates how to use the adjustColumnWidth method to automatically adjust a column's width based on its header content. The method takes a column ID and an optional adjustment mode parameter.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_adjustcolumnwidth_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngrid.adjustColumnWidth(\"b\", \"header\");\n```\n\n----------------------------------------\n\nTITLE: Using getProperties Method with DHTMLX Form Colorpicker\nDESCRIPTION: This snippet demonstrates how to initialize a Form with a Colorpicker control and use the getProperties() method to retrieve its configuration attributes.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/colorpicker/colorpicker_getproperties_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst form = new dhx.Form(\"form_container\", {\n    rows: [\n        {\n            type: \"colorpicker\",\n            name: \"colorpicker\",\n            labelWidth: \"200px\",\n            label: \"Choose your color\"\n        }\n    ]\n});\n\nform.getItem(\"colorpicker\").getProperties();\n```\n\n----------------------------------------\n\nTITLE: Complete Form Styling Example\nDESCRIPTION: Full example showing custom CSS variables for form styling and form initialization with controls\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/customization.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<style>\n    .custom {\n        --dhx-background-primary: rgb(238, 238, 238);\n        --dhx-color-primary: #118d8d;\n        --dhx-color-primary-active: #118d8d;\n        --dhx-color-primary-hover: #1ad1d1;\n    }\n</style>\n\n<script>\n    const form = new dhx.Form(\"form_container\", {\n        padding: 40,\n        width: 400,\n        css: \"custom\",\n        rows: [\n            {\n                type: \"input\",\n                label: \"Name\",\n                placeholder: \"John Doe\",\n            },\n            {\n                type: \"input\",\n                label: \"Email\",\n                placeholder: \"jd@mail.name\"\n            }\n        ]\n    });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Handling beforeShow Event in DHTMLX Timepicker\nDESCRIPTION: This code demonstrates how to attach an event handler to the beforeShow event of a Timepicker control in a DHTMLX Form. The handler logs the current value and returns true to allow the control to be shown.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/timepicker/timepicker_beforeshow_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"timepicker\").events.on(\"beforeShow\", function(value) {\n    console.log(\"beforeShow\", value);\n    return true;\n});\n```\n\n----------------------------------------\n\nTITLE: Defining getSortingStates Method Interface in JavaScript\nDESCRIPTION: This snippet defines the interface for the getSortingStates method, which returns an array of ISortingState objects. Each object contains parameters for sorting applied to the data, including the field to sort by, direction, and optional custom sorting functions.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree_collection/api/treecollection_getsortingstates_method.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\ninterface ISortingState {\n    by: string | number, \n    dir: \"asc\" | \"desc\", \n    as?: (a) => any, \n    rule?: (a, b) => number, \n    smartSorting?: boolean \n}\n\ngetSortingStates(): ISortingState[];\n```\n\n----------------------------------------\n\nTITLE: Handling Missing Data in Grid Grouping with showMissed Property\nDESCRIPTION: Shows how to handle elements that don't have values for grouping using the showMissed property. This configuration places rows without city values in a group named \"Unknown City\" instead of omitting them.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/usage.md#2025-04-22_snippet_41\n\nLANGUAGE: jsx\nCODE:\n```\nconst grid = new dhx.Grid(\"grid_container\", {\n    columns: [\n        { id: \"name\", header: [{ text: \"Name\" }] },\n        { id: \"age\", header: [{ text: \"Age\" }] },\n        { id: \"city\", header: [{ text: \"City\" }] }\n    ],\n    group: true,\n    groupable: true,\n    data: dataset\n});\n\ngrid.data.group([\"city\"], {\n    // the group elements that don't have the \"city\" value\n    // will be rendered in the \"Unknown City\" group\n    showMissed: \"Unknown City\" \n});\n```\n\n----------------------------------------\n\nTITLE: Using DataProxy save() Method in JavaScript\nDESCRIPTION: Demonstrates how to use the save() method to send a delete request to the server. The method takes data object and operation mode as parameters and returns a Promise.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/data_proxy/api/dataproxy_save_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nproxy.save({ a: \"bad\" }, \"delete\").then(function() {\n   console.log(\"'Bad' is deleted!\");\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing the beforeShow event handler in DHTMLX Form\nDESCRIPTION: This code demonstrates how to attach a handler to the beforeShow event of a DHTMLX Form component. The handler logs the control name and value, and prevents the control from being shown by returning false.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/form_beforeshow_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.events.on(\"beforeShow\", function(name, value) {\n    console.log(\"beforeShow\", name, value); \n    return false;\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Combo Box beforeHide Event in JavaScript\nDESCRIPTION: Example showing how to attach an event handler to the beforeHide event of a Combo Box control in a DHTMLX form. The handler receives the selected option IDs and initialization state, and can prevent hiding by returning false.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/combo/combo_beforehide_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"combo\").events.on(\"beforeHide\", function(ids, init) {\n    console.log(\"beforeHide\", ids, init);\n    return true;\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Grid Span Configuration in JavaScript\nDESCRIPTION: Example demonstrating how to use the getSpan() method to retrieve span configuration for a specific row and column in a DHTMLX Grid. The method returns an object containing span properties like colspan, text, and CSS class.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_getspan_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst span = grid.getSpan(\"10\", \"a\"); \n// -> { row: \"10\", column: \"a\", colspan: 4, text: \"Some header\", css: \"myCustomColspan\" }\n```\n\n----------------------------------------\n\nTITLE: Attaching Event Listeners in DHTMLX Tree\nDESCRIPTION: Demonstrates how to attach event listeners to a Tree component using the tree.events.on() method. The example shows listening for an itemClick event.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree/events_handling.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntree.events.on(\"itemClick\", function(id, e){\n    console.log(\"The item with the id \"+ id +\" was clicked.\");\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Text Control Properties in DHTMLX Form\nDESCRIPTION: Example showing how to dynamically change the label property of a Text control using the setProperties method.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/text/text_setproperties_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"text\").setProperties({\n    label: \" Some text\"\n});\n```\n\n----------------------------------------\n\nTITLE: Opening File Selection Dialog with SimpleVault in DHTMLX Form (JavaScript)\nDESCRIPTION: This example demonstrates how to use the selectFile() method to open a dialog for selecting new files to add to a SimpleVault control in a DHTMLX Form. The method returns true or false depending on whether the operation was successful.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/simplevault/simplevault_selectfile_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"simplevault\").selectFile(); \n// -> true/false\n```\n\n----------------------------------------\n\nTITLE: Repainting DataView Component with paint() Method\nDESCRIPTION: Demonstrates how to use the paint() method to repaint a DataView component. This method is used to refresh the visual representation of the DataView without requiring data reload.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/dataview/api/dataview_paint_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndataview.paint();\n```\n\n----------------------------------------\n\nTITLE: Showing Form Timepicker using JavaScript\nDESCRIPTION: Demonstrates how to show a Timepicker control in a DHTMLX Form using the show() method. The method displays a previously hidden Timepicker control on the page.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/timepicker/timepicker_show_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"timepicker\").show();\n```\n\n----------------------------------------\n\nTITLE: Handling File Addition in Simple Vault Form Control\nDESCRIPTION: Example showing how to attach an event handler to the afterAdd event of a Simple Vault control's data collection. The handler receives the added file object as a parameter and logs it to the console.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/simplevault/simplevault_afteradd_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"simplevault\").data.events.on(\"afterAdd\", function(file) {\n    console.log(\"afterAdd\", file);\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Menu Items using Tree Collection API in JavaScript\nDESCRIPTION: Demonstrates how to add menu items using the add() method of the Tree collection API. This allows for more complex menu structures including separators and nested items.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/menu/work_with_menu.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nmenu.data.add({\n    type:\"separator\"\n});\n\nmenu.data.add({\n    value:\"Open\", items:[\n        { value:\"File\", hotkey:\"Ctrl+F\" },\n        { value:\"Folder\" }\n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Avatar Change Event in DHTMLX Form (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to attach an event listener to the 'change' event of an Avatar control in a DHTMLX Form. It logs the new value to the console whenever the Avatar value changes.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/avatar/avatar_change_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"avatar\").events.on(\"change\", value => {\n    console.log(\"change\", value);\n});\n```\n\n----------------------------------------\n\nTITLE: Serializing List Data\nDESCRIPTION: Saving the current state of the list using the serialize method.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/guides/datacollection_guide.md#2025-04-22_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nconst state = list.data.serialize();\n```\n\n----------------------------------------\n\nTITLE: Enabling a Specific Radiogroup Element in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the enable() method to activate a specific element within a Radiogroup control. It requires a Form instance with a Radiogroup item.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/radiogroup/radiogroup_enable_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nform.getItem(\"radiogroup\").enable(\"id_1\");\n```\n\n----------------------------------------\n\nTITLE: Setting Avatar Value in DHTMLX Form\nDESCRIPTION: Demonstrates how to set a value for an Avatar control using the setValue() method. The method accepts an object containing properties like id, src, status, and other optional parameters for configuring the avatar image.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/avatar/avatar_setvalue_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"avatar\").setValue(\n    {\n        \"id\": \"image\",\n        \"src\": \"https://server.domain/upload/image.jpg\",\n        \"status\": \"uploaded\"\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Handling afterUnGroup Event in JavaScript Grid\nDESCRIPTION: This example demonstrates how to attach an event listener to the afterUnGroup event of a grid's data collection. It logs the ungrouped fields to the console when the event is triggered.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/data_collection/api/datacollection_afterungroup_event.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\ngrid.data.events.on(\"afterUnGroup\", (grouped, config) => {\n    console.log(\"Grouping deletion completed. Fields:\", grouped);\n});\n```\n\n----------------------------------------\n\nTITLE: Removing CSS Class from Grid Cell - JavaScript\nDESCRIPTION: Demonstrates how to remove a custom CSS class from a specific cell in a DHTMLX Grid. The method takes row ID, column ID, and CSS class name as parameters.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_removecellcss_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngrid.removeCellCss(\"1\", \"b\", \"myCustomClass\");\n```\n\n----------------------------------------\n\nTITLE: Handling Container afterHide Event in DHTMLX Form\nDESCRIPTION: This code demonstrates how to attach an event handler to the afterHide event of a Container control in a DHTMLX Form. The handler receives a boolean parameter indicating if the event was triggered during initialization.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/container/container_afterhide_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"container\").events.on(\"afterHide\", function(init) {\n    console.log(\"afterHide\", init);\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Calendar with Marked Dates in JavaScript\nDESCRIPTION: Example showing how to initialize a DHTMLX Calendar with custom CSS marking for specific dates. This example highlights all Saturdays with a custom CSS class.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar/api/calendar_mark_config.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.highlight-date {\n    color: #fff;\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst calendar = new dhx.Calendar(\"calendar_container\", {\n    mark: function(date) {\n        if (date.getDay() === 6) {\n            return \"highlight-date\";\n        }\n    },\n    css: \"dhx_widget--bordered\"\n});\n```\n\n----------------------------------------\n\nTITLE: Button JSON Template for DHTMLX Ribbon (JavaScript/JSON)\nDESCRIPTION: Shows the JSON configuration object for a 'button' control in a DHTMLX Ribbon. It includes properties like `id`, `type: \"button\"`, `icon` class, display `value`, an optional `count` badge, and a `tooltip` text.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/ribbon/data_loading.md#2025-04-22_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n// button\n{\n    id: \"add\",                  \n    type: \"button\",               \n    icon: \"dxi-plus\",             \n    value: \"Add\",                  \n    count: 11,                                        \n    tooltip: \"Add a new user\"    \n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Responsive Layout with DHTMLX Resizer\nDESCRIPTION: Demonstrates how to use the dhx.resizeHandler helper to create responsive layouts. The helper takes a container element and a callback function that receives the updated width and height values when the container is resized.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/helpers/resize_handler.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndhx.resizeHandler(container, function (width, height) {\n    // some logic here\n});\n```\n\n----------------------------------------\n\nTITLE: Using show() Method with Container Control in DHTMLX Form\nDESCRIPTION: This code example demonstrates how to show a previously hidden Container control inside a DHTMLX Form using the show() method. The method is called on a specific Container item retrieved by its ID.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/container/container_show_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nform.getItem(\"container\").show();\n```\n\n----------------------------------------\n\nTITLE: Handling Tree beforeExpand Event in JavaScript\nDESCRIPTION: Example of attaching an event handler to the beforeExpand event of a Tree component. The handler receives the ID of the expanded item and can return false to prevent expansion or true to allow it.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree/api/tree_beforeexpand_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntree.events.on(\"beforeExpand\", function(id) {\n    // your logic here\n    return false;\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Focus to an Input Control in DHTMLX Form\nDESCRIPTION: This snippet demonstrates how to set focus to an Input control in a DHTMLX Form using the focus() method. It retrieves a specific input by its ID and then focuses it.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/input/input_focus_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"input\").focus();\n```\n\n----------------------------------------\n\nTITLE: Setting Single Value in Combo Box\nDESCRIPTION: Demonstrates how to set a single value in a Combo Box control when multiselection is disabled. The method accepts string, number, or array with single value.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/combo/combo_setvalue_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst form = new dhx.Form(\"form_container\", {\n    rows: [\n        {\n            name: \"combo\",\n            type: \"combo\",\n            multiselection: false,\n            data: [\n                { value: \"value: 1\", id: \"id:1\" },\n                { value: \"value: 2\", id: \"id:2\" },\n                { value: \"value: 3\", id: 3 },\n                { value: \"value: 4\", id: 4 },\n                { value: \"value: 5\", id: 5 },\n            ]\n        },\n    ]\n});\n\n// selects one option\nform.getItem(\"combo\").setValue(4);\n// form.getItem(\"combo\").setValue(\"id_1\");\n// form.getItem(\"combo\").setValue([\"id_1\"]);\n```\n\n----------------------------------------\n\nTITLE: Adding Extended Option to DHTMLX Combo Box in JavaScript\nDESCRIPTION: This example shows how to add an option with extended configuration to a DHTMLX Combo Box. It demonstrates passing an object with multiple attributes as the value parameter.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/combobox/api/combobox_addoption_method.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncombobox.addOption({\n    \"value\": \"Austria\",\n    \"src\": \"../common/flags/at.png\"\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Click Event Handlers with Global Events in ToolbarView\nDESCRIPTION: Implements the ready() method in ToolbarView.js to add a click event handler that fires a global viewChange event when toolbar buttons are clicked, enabling communication between components.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/optimus_guides/how_to_start_optimus.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { View } from \"dhx-optimus\";\n\nexport class ToolbarView extends View {\n    init() {\n        ...\n    }\n\n    ready() {\n        this.toolbar.events.on(\"click\", id => {\n            this.fire(\"viewChange\", [id]);\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Button Control in DHTMLX Form (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to disable a Button control within a DHTMLX Form. It uses the getItem() method to retrieve the Button control and then calls the disable() method on it.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/button/button_disable_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nform.getItem(\"button\").disable();\n```\n\n----------------------------------------\n\nTITLE: Handling beforeHide Event in DHTMLX Form Text Control\nDESCRIPTION: Demonstrates how to attach an event handler to the beforeHide event of a Text control in a DHTMLX Form. The handler logs the current value and initialization state, then returns true to allow the control to be hidden.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/text/text_beforehide_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"text\").events.on(\"beforeHide\", function(value, init) {\n    console.log(\"beforeHide\", value, init);\n    return true;\n});\n```\n\n----------------------------------------\n\nTITLE: Highlighting Specific Dates\nDESCRIPTION: Marks certain dates in the calendar with a custom CSS class. This example highlights all Saturdays with a 'highlight-date' class.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar2/configuring.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar calendar = new dhx.Calendar(\"calendar\", {\n    mark: function(date) {\n        if (date.getDay() === 6) {\n            return \"highlight-date\";\n        }\n    },\n    css: \"dhx_widget--bordered\"\n});\n```\n\n----------------------------------------\n\nTITLE: Rearranging Toolbar Controls\nDESCRIPTION: Using the move() method from Tree Collection API to reposition controls within the toolbar to different locations.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/toolbar/common_methods.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\ntoolbar.data.move(\"2\",0);\n```\n\n----------------------------------------\n\nTITLE: Enabling Footer in DHTMLX Window with JavaScript\nDESCRIPTION: This snippet activates a simple footer in the DHTMLX Window by setting the 'footer' property to true at initialization. A footer can hold additional controls or information as needed. The default footer is empty, and further customization requires manipulating the related toolbar object. DHTMLX Suite must be present for this to function.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/window/configuration.md#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nconst dhxWindow = new dhx.Window({\n    footer:true\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Custom German Locale for DHTMLX Combo Box\nDESCRIPTION: This code defines a custom German locale for the DHTMLX Combo Box. It provides German translations for the same UI elements as in the default English locale.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/combobox/localization.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst de = {\n    notFound: \"Nicht gefunden\",\n    selectAll: \"Alle auswählen\",\n    unselectAll: \"Deaktivieren Sie Alle\",\n    selectedItems: \"Ausgewählte Elemente\",\n    createItem: \"Schaffen\",\n    placeholder: \"Klicken um auszuwählen\"\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX Calendar with Single Date Array (JavaScript)\nDESCRIPTION: Creates a new Calendar instance with a single date selected. The value is set using an array containing a Date object.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar2/api/calendar_value_config.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar calendar = new dhx.Calendar(\"calendar_container\", {\n    value: [new Date(2019,01,10)]\n});\n```\n\n----------------------------------------\n\nTITLE: Hiding a Text Control in DHTMLX Form\nDESCRIPTION: This example demonstrates how to hide a Text control in a DHTMLX Form by accessing the control using the getItem() method and then calling the hide() method on it.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/text/text_hide_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"text\").hide();\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Width for DHTMLX Sidebar\nDESCRIPTION: This code shows how to adjust the width of a DHTMLX Sidebar component using the width configuration property. The example sets the width to 450px, overriding the default value of 200px.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/sidebar/sidebar_config.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst sidebar = new dhx.Sidebar(\"sidebar_container\", {\n    css: \"dhx_widget--border_right\",\n    width: \"450\"\n});\n```\n\n----------------------------------------\n\nTITLE: Handling afterChangeProperties Event in DHTMLX Colorpicker Control\nDESCRIPTION: This example demonstrates how to attach an event handler to the afterChangeProperties event of a Colorpicker control in a DHTMLX Form. The event fires after the control's properties have been dynamically changed and provides access to the modified properties object.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/colorpicker/colorpicker_afterchangeproperties_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"colorpicker\").events.on(\"afterChangeProperties\", function(properties) {\n    console.log(\"afterChangeProperties\", properties);\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX Layout with Header Configuration in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a new Layout instance with a header for a cell. The header config is used to add text to the cell header.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/layout/api/cell/layout_cell_header_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst layout = new dhx.Layout(\"layout_container\", {\n    cols: [\n        { header: \"Cell header\"}\n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: Using DHTMLX Calendar Widget with DatePicker\nDESCRIPTION: This example demonstrates how to access the underlying DHTMLX Calendar widget of a DatePicker control and use its methods, specifically to show the current month.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/calendar.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst datepicker = form.getItem(\"datepicker\").getWidget();  // -> DHTMLX Calendar\ndatepicker.showDate(null,\"month\"); // shows the current month\n```\n\n----------------------------------------\n\nTITLE: Attaching Event Listener for afterHide Event in DHTMLX Menu (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to attach an event listener for the afterHide event of a DHTMLX Menu component. The event fires after hiding a sub-item of the Menu.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/menu/api/menu_afterhide_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmenu.events.on(\"afterHide\", function(event){\n    // your code here\n});\n```\n\n----------------------------------------\n\nTITLE: Showing a Column in DHTMLX Grid using JavaScript\nDESCRIPTION: This snippet demonstrates how to use the showColumn() method to make a specified column visible in a DHTMLX Grid. The method takes the column ID as a parameter and doesn't return any value.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_showcolumn_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngrid.showColumn(\"colId\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Toolbar ImageButton Items with DHTMLX Suite in JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to define a configuration array for imageButton controls in a DHTMLX Toolbar. The array contains objects with properties such as type, id, src, count, and others, allowing for detailed customization of toolbar image buttons, including support for CSS classes, hotkeys, tooltips, badge counts, and group activation behavior. Requires the DHTMLX Suite library; the configuration is intended to be consumed by the DHTMLX Toolbar component and expects correctly typed values as described (e.g., src as image path, type as \\\"imageButton\\\"). Each item is an object representing a button, and additional properties control state (disabled/hidden), style, and event behavior; missing required properties (like \\\"type\\\" or \\\"src\\\") will cause improper toolbar rendering.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/toolbar/api/api_imagebutton_properties.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst data = [\n    {\n        type: \"imageButton\",\n        id?: string | number,\n        parent?: string,\n        src: string,\n        \n        count?: number,\n        countColor?: \"danger\" | \"secondary\" | \"primary\" | \"success\",\n        group?: string,\n        hotkey?: string,\n        multiClick?: boolean,\n        tooltip?: string,\n\n        css?: string | string[],\n        disabled?: boolean,\n        hidden?: boolean,\n    },\n    // more Toolbar controls\n]\n```\n\n----------------------------------------\n\nTITLE: Applying Custom CSS Classes to Toolbar Menu Containers with menuCss\nDESCRIPTION: This example demonstrates how to add custom CSS style classes to all containers of Toolbar controls with nested items using the menuCss configuration property. The example includes both the CSS style definitions and the JavaScript code for initializing the Toolbar.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/toolbar/api/toolbar_menucss_config.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n<style>\n    .my_first_class {\n        /*some styles*/\n    }\n \n    .my_second_class {\n        /*some styles*/\n    }\n</style>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst toolbar = new dhx.Toolbar(\"toolbar_container\", {\n    menuCss:\"my_first_class my_second_class\"\n});\n```\n\n----------------------------------------\n\nTITLE: Repainting DHTMLX Calendar in JavaScript\nDESCRIPTION: Demonstrates how to use the paint method to repaint a calendar instance on the page. The method takes no parameters and returns void.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar2/api/calendar_paint_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncalendar.paint();\n```\n\n----------------------------------------\n\nTITLE: Initializing Timepicker in 12-hour Format - DHTMLX - JavaScript\nDESCRIPTION: Illustrates how to set up the DHTMLX Timepicker to display time in 12-hour format using the 'timeFormat' property. Including this property with value '12' adjusts the UI to show AM/PM. Ensure the DHTMLX Suite library is loaded. Key parameter is 'timeFormat', which determines the hour representation. Input: N/A; Output: Timepicker UI with 12-hour display and AM/PM identifier.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/timepicker/configuration.md#2025-04-22_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst timepicker = new dhx.Timepicker(\"timepicker_container\",{\n    timeFormat:12\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX Tabbar with Auto Width Configuration\nDESCRIPTION: Creates a new Tabbar instance with tabAutoWidth enabled. The example shows configuration of multiple tabs with automatic width adjustment. This feature works when the tabbar mode is set to either 'top' or 'bottom'.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tabbar/api/tabbar_tabautowidth_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst tabbar = new dhx.Tabbar(\"tabbar_container\", {\n    views:[\n        { tab: \"left\", css:\"panel flex\", header:\"Left\"},\n        { tab: \"west\", css:\"panel flex\", header:\"West\"},\n        { tab: \"east\", css:\"panel flex\", header:\"East\"},\n        { tab: \"right\", css:\"panel flex\", header:\"Right\" }\n    ],\n    tabAutoWidth: true,\n    mode: \"bottom\"\n});\n```\n\n----------------------------------------\n\nTITLE: Disabling Button Control in DHTMLX Form\nDESCRIPTION: Demonstrates how to disable a button control by accessing it through the form's getItem() method.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/button.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"button\").disable();\n```\n\n----------------------------------------\n\nTITLE: Showing a Button Control in DHTMLX Form (JavaScript)\nDESCRIPTION: This snippet demonstrates how to use the show() method to make a Button control visible in a DHTMLX Form. The method is called on a specific form item retrieved using the getItem() method.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/button/button_show_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"button\").show();\n// -> true/false\n```\n\n----------------------------------------\n\nTITLE: Standard Combo Box Validation\nDESCRIPTION: Examples of using the validate() method without the silent parameter, which triggers validation events and visual modifications to the control.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/combo/combo_validate_method.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// the method validates the specified item\nform.getItem(\"combo\").validate(false, \"id_2\"); // -> true/false\n\n// the method validates the currently selected item(s)\nform.getItem(\"combo\").validate(); // -> true/false\n```\n\n----------------------------------------\n\nTITLE: Adding Items to DataView\nDESCRIPTION: Adds new items to DataView using Data Collection API. Takes configuration object and optional index position.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/dataview/manipulating_data.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ndataview.data.add({\n    \"value\": \"Learning new DHTMLX\" + \" \" + (2019 + i),\n    \"thumbnailName\": \"61ot4vfL9HL.jpg\",\n    \"shortDescription\": \"Create your first single-page JavaScript application\"\n},0);\n```\n\n----------------------------------------\n\nTITLE: Handling Combo Box Blur Event in JavaScript\nDESCRIPTION: Demonstrates how to attach an event listener to the blur event of a DHTMLX Combo Box component. The event fires when the combo box loses focus.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/combobox/api/combobox_blur_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncombobox.events.on(\"blur\", function() {\n    console.log(\"the focus is off the element\");\n});\n```\n\n----------------------------------------\n\nTITLE: Checking Popup Visibility with DHTMLX Popup (JavaScript)\nDESCRIPTION: This code checks whether the Popup is currently visible by calling the isVisible() method on the DHTMLX Popup object. The return value is a boolean: true if the Popup is visible, false otherwise. There are no input parameters.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/popup/work_with_popup.md#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\npopup.isVisible(); // -> true/false\n```\n\n----------------------------------------\n\nTITLE: Handling Timepicker afterClose Event in JavaScript\nDESCRIPTION: Example showing how to attach an event handler to the afterClose event of a timepicker. The handler receives the current value of the timepicker which can be either a string or object depending on the valueFormat and timeFormat configuration.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/timepicker/api/timepicker_afterclose_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntimepicker.events.on(\"afterClose\", function(value){\n    console.log(value);\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Form with Input Control and Retrieving Properties in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a DHTMLX Form with an Input control and then use the getProperties() method to retrieve its configuration attributes. The method returns an object containing all available attributes and their current values.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/input/input_getproperties_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst form = new dhx.Form(\"form_container\", {\n    rows: [\n        {\n            type: \"input\",\n            name: \"input\",\n            label: \"Name\",\n            icon: \"dxi dxi-magnify\",\n            placeholder: \"John Doe\"           \n        } \n    ]\n});\n\nform.getItem(\"input\").getProperties();\n```\n\n----------------------------------------\n\nTITLE: Setting Focus to Toggle Control in DHTMLX Form\nDESCRIPTION: Demonstrates how to programmatically set focus to a Toggle control in a DHTMLX Form using the focus() method. The method requires a form instance and uses the getItem() method to target a specific toggle component.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/toggle/toggle_focus_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"toggle\").focus();\n```\n\n----------------------------------------\n\nTITLE: Initializing Calendar and Popup Components\nDESCRIPTION: Initializes a Calendar with date format configuration and a Popup component. Note that null is used instead of a container for the Calendar as it will be attached to the popup.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar/datepicker.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst calendar = new dhx.Calendar(null, {dateFormat: \"%d/%m/%y\"});\nconst popup = new dhx.Popup();\n```\n\n----------------------------------------\n\nTITLE: Initializing Fieldset Control in DHTMLX Form\nDESCRIPTION: Demonstrates how to initialize a Fieldset control within a DHTMLX Form component. The Fieldset includes configuration for labels, names, styling, and nested form controls like input fields.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/fieldset.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst form = new dhx.Form(\"form_container\", {\n    rows: [\n        {\n            type: \"fieldset\",\n            label: \"Section name\",\n            name: \"f1\",\n            disabled: false, \n            hidden: false, \n            css: \"mycss\",\n            rows: [\n                {\n                    type: \"input\",\n                    name: \"name\",\n                    required: true,\n                    label: \"Name\",\n                    placeholder: \"Type text\",\n                },\n                {\n                    type: \"input\",\n                    name: \"surname\",\n                    required: true,\n                    label: \"Surname\",\n                    placeholder: \"Type text\",\n                },\n                // more controls\n            ]\n        }\n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: Event Handler for Timepicker beforeHide Event\nDESCRIPTION: Example showing how to attach an event handler to the beforeHide event of a Timepicker control. The handler receives the current value and initialization state, and returns a boolean to control the hiding behavior.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/timepicker/timepicker_beforehide_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"timepicker\").events.on(\"beforeHide\", function(value, init) {\n    console.log(\"beforeHide\", value, init);\n    return true;\n});\n```\n\n----------------------------------------\n\nTITLE: Clearing Textarea Value in DHTMLX Form (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to use the clear() method to reset the value of a Textarea control in a DHTMLX Form. It retrieves the Textarea item from the form and calls the clear() method on it.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/textarea/textarea_clear_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nform.getItem(\"textarea\").clear();\n```\n\n----------------------------------------\n\nTITLE: Handling Focus Event in DHTMLX Combo Box (JavaScript)\nDESCRIPTION: This example demonstrates how to attach an event handler to the 'focus' event of a Combo Box control in a DHTMLX Form. The handler logs the IDs of the selected options when the control receives focus.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/combo/combo_focus_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"combo\").events.on(\"focus\", (ids) => {\n    console.log(\"focus\", ids);\n});\n```\n\n----------------------------------------\n\nTITLE: Repainting Timepicker with DHTMLX in JavaScript\nDESCRIPTION: This code demonstrates how to invoke the paint() method on a DHTMLX Timepicker instance in JavaScript to force a redraw or refresh of the timepicker UI element. The method can be used after configuration changes or when the UI needs to reflect updates. No parameters are required, and it does not return a value. DHTMLX Suite library and an existing timepicker instance are prerequisites.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/timepicker/api/timepicker_paint_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ntimepicker.paint();\n```\n\n----------------------------------------\n\nTITLE: Getting a cell object from Layout in JavaScript\nDESCRIPTION: Shows how to retrieve the object of a cell by its id using the getCell method.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/layout/work_with_layout.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlayout.getCell(\"header\");\n```\n\n----------------------------------------\n\nTITLE: Disabling a Tab in JavaScript Tabbar\nDESCRIPTION: This code snippet demonstrates how to use the disableTab() method to disable a specific tab in a DHTMLX Tabbar. The method takes the id of the tab as a parameter and returns a boolean indicating whether the tab was successfully disabled.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tabbar/api/tabbar_disabletab_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ntabbar.disableTab(\"London\");\n// -> true|false\n```\n\n----------------------------------------\n\nTITLE: Showing/Hiding MenuItem in JavaScript\nDESCRIPTION: These methods show how to hide or show a MenuItem by passing its ID to the hide() or show() Sidebar methods.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/sidebar/menuitem.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nsidebar.show(id);\nsidebar.hide(id);\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX Calendar with Custom Week Start\nDESCRIPTION: Example of initializing a DHTMLX Calendar instance with Monday as the first day of the week. The weekStart property accepts 'monday', 'sunday', or 'saturday' as valid values, with 'sunday' being the default.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar/api/calendar_weekstart_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst calendar = new dhx.Calendar(\"calendar_container\", {\n    weekStart:\"monday\"\n});\n```\n\n----------------------------------------\n\nTITLE: Handling blur Event in DHTMLX Radiogroup Control\nDESCRIPTION: Example of attaching an event handler to the blur event of a Radiogroup control in a DHTMLX form. This event fires when the Radiogroup loses focus and provides both the current value and the id of the radio button.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/radiogroup/radiogroup_blur_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"radiogroup\").events.on(\"blur\", (value, id) => {\n    console.log(\"blur\", value, id);\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Toolbar Item Values\nDESCRIPTION: Retrieving current values or states of Toolbar controls using the getState() method, which can return a specific control's value or all control values as an object.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/toolbar/common_methods.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{type:\"navItem\", twoState:true, id:\"check\"}\n...\ntoolbar.getState(\"check\"); // -> true/false\n// or\ntoolbar.getState(); // -> { \"check\":true } or { \"check\":false }\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{type:\"input\", id:\"name\", value:\"Maintenance\"}\n...\ntoolbar.getState(\"name\"); // -> \"Maintenance\"\n// or\ntoolbar.getState(); // -> {\"name\":\"Maintenance\"}\n```\n\n----------------------------------------\n\nTITLE: Using Built-in DHTMLX CSS Classes\nDESCRIPTION: Example demonstrating how to apply pre-defined DHTMLX CSS classes to customize the Grid appearance.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_css_config.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst grid = new dhx.Grid(\"grid_container\", {\n    css: \"dhx_widget--bg_white\"\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing beforeShow Event Handler for DHTMLX Form ToggleGroup\nDESCRIPTION: Example showing how to attach a beforeShow event listener to a ToggleGroup form control. The event fires before a control or its toggle is shown and can return a boolean to control the showing behavior.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/togglegroup/togglegroup_beforeshow_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"ToggleGroup\").events.on(\"beforeShow\", function(value, id) {\n    console.log(\"beforeShow\", value, id);\n    return true;\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Focus Event for Toggle Control in DHTMLX Form\nDESCRIPTION: This snippet demonstrates how to attach an event listener for the 'focus' event of a Toggle control in a DHTMLX Form. The event fires when the Toggle control receives focus and provides the current value of the control.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/toggle/toggle_focus_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"toggle\").events.on(\"focus\", (value) => {\n    console.log(\"focus\", value);\n});\n```\n\n----------------------------------------\n\nTITLE: Handling afterRemove Event in DHTMLX DataCollection\nDESCRIPTION: This code snippet demonstrates how to attach an event handler to the afterRemove event of a DHTMLX DataCollection. The event fires after an item is removed from the collection, providing the removed item as a parameter to the callback function.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/data_collection/api/datacollection_afterremove_event.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ncomponent.data.events.on(\"afterRemove\", function(removedItem){\n    console.log(\"An item is removed\");\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring eventHandlers for DHTMLX Grid in JavaScript\nDESCRIPTION: This snippet demonstrates how to initialize a DHTMLX Grid with custom event handlers for both header cells and custom cell templates. It includes handlers for click and mouseover events on specific CSS classes.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_eventhandlers_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst grid = new dhx.Grid(\"grid_container\", {\n    columns: [\n        { width: 200, id: \"country\", header: [{ text: \"Country\", css: \"header_country\" }] },\n        { width: 150, id: \"netChange\", header: [{text: \"Net Change\"}],\n            // define a custom template for the column's cells\n            template: (text, row, column) => {\n                return \"<div className='cell__template'><input type='checkbox' \n                    disabled \" + (text > 3000000 ? \"checked\" : \"\") + \" ></div>\";\n            } \n        },\n        htmlEnable: true,\n        // more options\n    ],\n    data: data,\n    eventHandlers: {\n        // add an event handler to the header cell\n        onclick: {\n           header_country: (event, data) => {\n                console.log(JSON.stringify(data.col, null, 2)); \n            }\n        },\n        // add an event handler to the HTML element of the custom template of cells\n        onmouseover: {\n            cell__template: (event, data) => {\n                console.log(JSON.stringify(data.row, null, 2)); \n            }\n        } ,\n    } \n});\n```\n\n----------------------------------------\n\nTITLE: Removing Items from DataCollection in JavaScript\nDESCRIPTION: Demonstrates how to remove single or multiple items from a DataCollection component using their IDs. The method accepts either a single ID or an array of IDs as parameters.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/data_collection/api/datacollection_remove_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncomponent.data.remove(\"2\");\n//or\ncomponent.data.remove([\"2\", \"4\"]);\n```\n\n----------------------------------------\n\nTITLE: Attaching Event Handler to afterHide Event in DHTMLX Form Textarea Control\nDESCRIPTION: Example of how to attach an event handler to the afterHide event of a Textarea control in DHTMLX Form. The handler receives the current value and initialization state as parameters.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/textarea/textarea_afterhide_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"textarea\").events.on(\"AfterHide\", function(value, init) {\n    console.log(\"afterHide\", value, init);\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Selected Items from DHTMLX Sidebar in JavaScript\nDESCRIPTION: Demonstrates how to use the getSelected() method to retrieve an array of IDs for selected items in a DHTMLX Sidebar. The method returns an array of strings or numbers representing the selected item IDs.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/sidebar/api/sidebar_getselected_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsidebar.getSelected(); // -> [\"selected_1\", \"selected_1.1\"]\n```\n\n----------------------------------------\n\nTITLE: Getting the Page Size - DHTMLX Pagination API - JavaScript\nDESCRIPTION: Retrieves the current number of items displayed per page using getPageSize(). The method returns an integer showing the page size. The only dependency is an active pagination object.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/pagination/usage.md#2025-04-22_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\npagination.getPageSize();\n// -> 22\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX Window with Custom Width - JavaScript\nDESCRIPTION: This code snippet demonstrates how to initialize a DHTMLX Window with a custom width set to 250 pixels using JavaScript. It requires the dhx.Window class provided by the DHTMLX Suite library as a dependency. The main parameter used is 'width', which is passed to the window's constructor; the default value is 50% of the browser window’s width if not specified. The example explicitly creates and displays the window using dhxWindow.show(); after initialization.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/window/api/window_width_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst dhxWindow = new dhx.Window({\n    width:250\n});\n\ndhxWindow.show();\n```\n\n----------------------------------------\n\nTITLE: Handling beforeValidate Event in DHTMLX Combo Box\nDESCRIPTION: This example demonstrates how to attach an event handler to the beforeValidate event of a Combo Box control in a DHTMLX form. The handler logs the IDs of the option(s) to be validated and returns true to allow the validation to proceed.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/combo/combo_beforevalidate_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"combo\").events.on(\"beforeValidate\", function(ids) {\n    console.log(\"beforeValidate\", ids);\n    return true;\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Focus to Avatar Control in DHTMLX Form (JavaScript)\nDESCRIPTION: This snippet demonstrates how to use the focus() method to set focus to an Avatar control in a DHTMLX Form. The method is called on the Form item object retrieved using the getItem() method.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/avatar/avatar_focus_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nform.getItem(\"avatar\").focus();\n```\n\n----------------------------------------\n\nTITLE: Dynamic Control Addition in Ribbon\nDESCRIPTION: Example of dynamically adding new controls to a DHTMLX Ribbon using TreeCollection API.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/ribbon/operating_ribbon.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nribbon.data.add({\n    type:\"button\",\n    icon:\"dxi-plus\",\n    value:\"New\"\n},-1,\"blockId\");\n```\n\n----------------------------------------\n\nTITLE: Firing Custom Events in JavaScript Tabbar\nDESCRIPTION: Demonstrates how to programmatically fire a custom event using the events.fire() method, which allows passing event name and optional arguments.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tabbar/events.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ntabbar.events.fire(evName,[args]);\n```\n\n----------------------------------------\n\nTITLE: JSON Format Template for Common Toolbar Structure\nDESCRIPTION: Basic template structure showing how to define multiple toolbar items in an array of JSON objects.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/toolbar/load_data.md#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n// common\n[\n    {id: \"item_a\", type: \"button\", ...},\n    {id: \"item_b\", type: \"input\", ...},\n    {id: \"item_c\", type: \"text\", ...}\n]\n```\n\n----------------------------------------\n\nTITLE: Handling itemMouseOver Event in DHTMLX List Component\nDESCRIPTION: This code snippet demonstrates how to attach an event handler to the itemMouseOver event of a DHTMLX List component. The handler logs the id of the item when the mouse pointer moves over it.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/list/api/list_itemmouseover_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlist.events.on(\"itemMouseOver\", function(id, event) {\n    console.log(\"Item id:\" + id);\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Window afterShow Event in JavaScript\nDESCRIPTION: Example showing how to attach an event handler to the afterShow event of a DHTMLX Window. The event fires after the window is shown and provides position coordinates of the window.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/window/api/window_aftershow_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndhxWindow.events.on(\"afterShow\", function(position){\n    console.log(\"A window is shown\");\n});\n```\n\n----------------------------------------\n\nTITLE: Showing DHTMLX ContextMenu at Mouse Event in JavaScript\nDESCRIPTION: Displays the DHTMLX ContextMenu at the mouse cursor position corresponding to the event object. The 'showAt' method expects an event as its argument and should be triggered by right-click or context menu related events. Requires a context menu instance and a valid pointer event.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tutorial/binding_components/step4.md#2025-04-22_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\ncontextMenu.showAt(e);\n```\n\n----------------------------------------\n\nTITLE: Handling afterChangeProperties Event for Toggle Group in DHTMLX Form\nDESCRIPTION: This snippet demonstrates how to attach an event listener to the afterChangeProperties event of a Toggle Group control in a DHTMLX Form. It logs the changed properties to the console when the event is triggered.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/togglegroup/togglegroup_afterchangeproperties_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"toggleGroup\").events.on(\"afterChangeProperties\", function(properties) {\n    console.log(\"afterChangeProperties\", properties);\n});\n```\n\n----------------------------------------\n\nTITLE: Disabling Fieldset Control\nDESCRIPTION: Shows how to disable a Fieldset control using the getItem() method to access and manipulate the control.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/fieldset.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"fieldset\").disable();\n```\n\n----------------------------------------\n\nTITLE: Clearing Select Control Value in DHTMLX Form\nDESCRIPTION: Demonstrates how to clear the value of a Select control in a DHTMLX form using the clear() method. The method removes any selected value from the control, returning it to its default empty state.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/select/select_clear_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"select\").clear();\n```\n\n----------------------------------------\n\nTITLE: Setting Autowidth in DHTMLX Layout\nDESCRIPTION: Example demonstrating how to set automatic content-based width for a Layout cell. The width property is set to 'content' to make the cell adjust to its content width.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/layout/api/cell/layout_cell_width_config.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst layout = new dhx.Layout(\"layout_container\", {\n    cols: [\n        { \n            header: \"Cell header\", \n            width: \"content\" \n        }\n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Multiple Selection in DHTMLX List\nDESCRIPTION: Allows selection of multiple List items by setting the multiselection property to true or 'ctrlClick' for Ctrl+click selection.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/list/configuration.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst list = new dhx.List(\"list_container\", {multiselection:true});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst list = new dhx.List(\"list_container\", {\n    multiselection:\"ctrlClick\"   \n});\n```\n\n----------------------------------------\n\nTITLE: Handling List Item Edit Start Event in JavaScript\nDESCRIPTION: Example showing how to attach an event handler to the afterEditStart event of a DHTMLX List component. The event fires after editing of a list item has started and provides the item's ID as a parameter.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/list/api/list_aftereditstart_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlist.events.on(\"afterEditStart\", function(id){\n    // your logic here\n});\n```\n\n----------------------------------------\n\nTITLE: Handling change Event for Select Control in DHTMLX Form\nDESCRIPTION: This code snippet demonstrates how to attach an event listener to the 'change' event of a Select control in a DHTMLX Form. The event fires when the value of the control changes and provides the new value as a parameter.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/select/select_change_event.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nform.getItem(\"select\").events.on(\"change\", function(value) {\n    console.log(\"change\", value);\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Selected Date Range\nDESCRIPTION: Shows how to retrieve the selected date range from a calendar in range mode, as either an array of Date objects or an array of string values.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar/operating_calendar.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// for a range calendar as an array of Date values \nconst date = calendar.getValue(true); \n// -> [Mon Jun 03 2019 00:00:00 GMT+0300, Wed Jun 19 2019 00:00:00 GMT+0300]\n\n// for a range calendar as an array of string values \nconst date = calendar.getValue(); // ->  [\"03/06/19\", \"19/06/19\"]\n```\n\n----------------------------------------\n\nTITLE: Attaching a DHTMLX DataView to a Tabbar Cell in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a DHTMLX Tabbar, initialize a DataView component, and attach it to a specific Tabbar cell. It includes configuration for both the Tabbar and DataView, as well as parsing data into the DataView.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tabbar/api/cell/tabbar_cell_attach_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst tabbar = new dhx.Tabbar(\"tabbar_container\", {\n    mode: \"top\",\n    css: \"dhx_widget--bordered\",\n    views: [\n        { tab: \"list\", id: \"list\" },\n        { tab: \"dataview\", id: \"dataview\" }\n    ]\n});\n\nconst dataview = new dhx.DataView(null, {\n    template: dataviewTemplate,\n    itemsInRow: 3,\n    gap: \"10px\"\n});\n\ndataview.data.parse(dataset);\n\ntabbar.getCell(\"dataview\").attach(dataview);\n```\n\n----------------------------------------\n\nTITLE: Hiding and Showing DHTMLX Ribbon Blocks Programmatically in JavaScript\nDESCRIPTION: Demonstrates using the `ribbon.hide()` and `ribbon.show()` methods to control the visibility of a Ribbon Block. Pass the unique ID of the block as an argument to dynamically hide or show it.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/ribbon/block.md#2025-04-22_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nribbon.show(id);\nribbon.hide(id);\n```\n\n----------------------------------------\n\nTITLE: Attaching keydown Event Listener to DHTMLX Slider in JavaScript\nDESCRIPTION: This example shows how to attach a listener for the keydown event of a DHTMLX Slider component. The event fires when any key is pressed while the slider thumb is in focus, providing access to the native KeyboardEvent object.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/slider/api/slider_keydown_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nslider.events.on(\"keydown\", function(event) {\n    console.log(\"the focus is on the element and any key is pressed\", event);\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Options to DHTMLX Combo Box in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the addOption() method to add new items to a DHTMLX Combo Box. It shows adding a simple string option and checking the updated value and data collection.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/combobox/api/combobox_addoption_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst combobox = new dhx.Combobox(\"combo_container\", {\n    multiselection: true\n});\ncombobox.data.parse(dataset);\n\ncombobox.setValue([combobox.data.getId(1), combobox.data.getId(3)]);\nconsole.log(combobox.getValue()); // -> u1664261657492,u1664261657494\n\ncombobox.addOption(\"Georgia\", false);\nconsole.log(combobox.getValue()); // -> u1664261657520\n\n// check that the new item is added into the data collection\nconsole.log(combobox.data.serialize());\n```\n\n----------------------------------------\n\nTITLE: Styling Ribbon with Custom CSS Variables and Rendering Data (HTML+JavaScript)\nDESCRIPTION: Provides a complete example embedding both custom CSS and Ribbon initialization. Defines a 'custom' CSS class with overrides for the DHTMLX color variables and uses it in combination with a built-in class. The JavaScript initializes the Ribbon with these classes and loads control configuration from the 'data' variable. Prerequisites: DHTMLX Suite library, pre-existing 'data' structure, and a 'ribbon_container' HTML element.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/ribbon/customization.md#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<style>\\n    .custom {\\n        --dhx-background-secondary: var(--dhx-color-white);\\n        --dhx-color-primary-light-hover: #aefafa;\\n        --dhx-color-primary-light-active: #118d8d;\\n    }\\n</style>\\n\\n<script>\\n    const ribbon = new dhx.Ribbon(\\\"ribbon_container\\\", {\\n        css: \\\"custom dhx_widget--bordered\\\"\\n    });\\n\\n    ribbon.data.parse(data);\\n</script>\n```\n\n----------------------------------------\n\nTITLE: Initializing Sidebar MenuItem Properties in JavaScript\nDESCRIPTION: This code snippet demonstrates how to define Sidebar MenuItem properties in a data array. It includes various optional properties such as id, parent, value, items, count, countColor, hotkey, html, icon, tooltip, css, disabled, and hidden.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/sidebar/api/api_menuitem_properties.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = [\n    {\n        type: \"menuItem\",\n        id?: string | number,\n        parent?: string,\n        value?: string,    \n        items?: IMenuElement[], // ISpacer | ISeparator | IMenuItem\n    \n        count?: number,\n        countColor?: \"danger\" | \"secondary\" | \"primary\" | \"success\",\n        hotkey?: string,\n        html?: string,\n        icon?: string,\n        tooltip?: string,\n\n        css?: string | string[],\n        disabled?: boolean,\n        hidden?: boolean,\n    },\n    // more Sidebar controls\n]\n```\n\n----------------------------------------\n\nTITLE: Hiding Layout Cell - JavaScript DHTMLX\nDESCRIPTION: Demonstrates how to hide a specific cell in a DHTMLX Layout using the hide() method. The method takes no parameters and hides the cell identified through getCell().\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/layout/api/cell/layout_cell_hide_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlayout.getCell(\"1\").hide();\n```\n\n----------------------------------------\n\nTITLE: Getting Spans in DHTMLX Grid\nDESCRIPTION: Use the getSpan() method to return the column/row span a cell is part of. It takes the ids of the row and column as parameters.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/usage.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst span = grid.getSpan(\"10\", \"a\"); \n// -> { row: \"10\", column: \"a\", colspan: 4, text: \"Some header\", css: \"myCustomColspan\" }\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Period Heat Map\nDESCRIPTION: Sets up a heat map configuration for a custom time period with specific start and end dates.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/chart/configuration_properties.md#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n    type: \"calendarHeatMap\",\n    series: [\n        {\n            value: \"value\",\n            date: \"date\",\n            startDate: \"01/03/22\",\n            endDate: \"01/07/24\",\n        }\n    ],\n};\n\nconst chart = new dhx.Chart(\"chart_container\", config);\nchart.data.parse(heatMapData);\n```\n\n----------------------------------------\n\nTITLE: Validating Radiogroup Control in JavaScript DHTMLX Form\nDESCRIPTION: This snippet demonstrates how to use the validate() method on a Radiogroup control in a DHTMLX Form. It returns true if the control is valid, and false otherwise. The method can be called with or without the silent parameter.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/radiogroup/radiogroup_validate_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nform.getItem(\"radiogroup\").validate();\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nform.getItem(\"radiogroup\").validate(false);\n```\n\n----------------------------------------\n\nTITLE: Using the destructor() Method with Form Select Control in JavaScript\nDESCRIPTION: Example showing how to call the destructor() method on a Select control to remove the instance and release occupied resources. The method is called on the Select item retrieved from a form instance.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/select/select_destructor_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nform.getItem(\"select\").destructor();\n```\n\n----------------------------------------\n\nTITLE: Loading External Data into DHTMLX List\nDESCRIPTION: Demonstrates how to load data from an external JSON file into a DHTMLX List after initialization using the 'load()' method.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/list/load_data.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst list = new dhx.List(\"list_container\", {\n    template: template,\n    itemHeight: 72\n});\nlist.data.load(\"../common/dataset.json\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Grid Header Tooltips in JavaScript\nDESCRIPTION: This snippet demonstrates how to configure header tooltips for a DHTMLX Grid. It shows how to disable all tooltips while enabling header tooltips specifically.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_headertooltip_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst grid = new dhx.Grid(\"grid_container\", {\n    columns: [\n        // columns config\n    ],\n    data: dataset,\n    tooltip: false, // Disable all tooltips\n    headerTooltip: true, // Enable all header tooltips\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Placeholder to Combo Box Input in JavaScript\nDESCRIPTION: Sets a placeholder text for the Combo Box input field, providing a hint or instruction to the user.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/combobox/configuration.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst combobox = new dhx.Combobox(\"combo_container\",{\n    placeholder: \"Some placeholder\"\n});\n```\n\n----------------------------------------\n\nTITLE: Handling beforeHide Event in DHTMLX Popup - JavaScript\nDESCRIPTION: This snippet registers a handler for the beforeHide event on a DHTMLX Popup instance. It logs a message to the console and allows the popup to hide by returning true. This requires the DHTMLX JS Suite library and a Popup object instantiated as popup. The handler receives a boolean indicating if the trigger was an outer click and the native mouse event. Returning false would instead prevent the popup from hiding.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/popup/api/popup_beforehide_event.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\npopup.events.on(\"beforeHide\", function(fromOuterClick,e){\n    console.log(\"A popup will be hidden\");\n    return true;\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Value from Colorpicker Control in JavaScript DHTMLX Form\nDESCRIPTION: This code demonstrates how to get the current value of a Colorpicker control from a DHTMLX Form. The method returns the color value in Hex format (e.g., \"#90D2AF\").\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/colorpicker/colorpicker_getvalue_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst value = form.getItem(\"colorpicker\").getValue();\n// -> \"#90D2AF\"\n```\n\n----------------------------------------\n\nTITLE: Handling File Upload Event in DHTMLX Form Avatar\nDESCRIPTION: Example showing how to attach an event handler to the uploadFile event of an Avatar control in a DHTMLX Form. The handler receives the uploaded file value and server response as parameters.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/avatar/avatar_uploadfile_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"avatar\").events.on(\"uploadFile\", (value, extra) => {\n    console.log(\"uploadFile\", value, extra);\n});\n```\n\n----------------------------------------\n\nTITLE: Returned Object Structure from getProperties() for Input Control in JavaScript\nDESCRIPTION: This code snippet shows the structure of the object returned by the getProperties() method when called on an Input control. It includes all available configuration attributes and their default or set values.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/input/input_getproperties_method.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n    autocomplete: false,\n    errorMessage: \"\",\n    height: \"content\",\n    helpMessage: \"\",\n    hiddenLabel: false,\n    icon: \"dxi dxi-magnify\",\n    inputType: \"text\",\n    label: \"Name\",\n    labelPosition: \"top\",\n    labelWidth: \"\",\n    max: undefined,\n    maxlength: undefined,\n    min: undefined,\n    minlength: undefined,\n    padding: 0,\n    placeholder: \"John Doe\",\n    preMessage: \"\",\n    readOnly: false,\n    required: false,\n    successMessage: \"\",\n    validation: undefined,\n    width: \"content\"    \n}\n```\n\n----------------------------------------\n\nTITLE: Defining sortable property for Grid column in JavaScript\nDESCRIPTION: This code snippet demonstrates how to set the 'sortable' property for a column when initializing a Grid component. The 'sortable' property is set to false for the 'land' column, making it non-sortable.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/gridcolumn_properties/gridcolumn_sortable_property.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst grid = new dhx.Grid(\"grid_container\", {\n    columns: [\n        { id: \"land\", header: [{ text: \"Land\" }], sortable: false },\n        // more columns configuration objects\n    ],\n    // more options\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Grid with MultiSort in JavaScript\nDESCRIPTION: Example demonstrating how to initialize a DHTMLX Grid with the multiSort property disabled. The grid is configured with columns and dataset while multi-column sorting is turned off.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_multisort_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst grid = new dhx.Grid(\"grid_container\", {\n    columns: [\n        // columns config\n    ],\n    multiSort: false,\n    data: dataset\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Grid Footer Cell Mouse Over Event in JavaScript\nDESCRIPTION: Example of attaching an event handler to the footerCellMouseOver event of a DHTMLX Grid. The event fires when the mouse pointer moves over a footer cell and provides access to the cell configuration, column details, and the native mouse event object.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_footercellmouseover_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngrid.events.on(\"footerCellMouseOver \", (cell, column, event) => {\n    // your logic here\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Grid Data Load Event\nDESCRIPTION: Event handler that updates chart data when grid data is loaded using the Load event.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tutorial/basic_application/step7.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ngrid.data.events.on(\"Load\", function(){\n    chart.data.parse(getCountUsers());\n});\n```\n\n----------------------------------------\n\nTITLE: Handling inputBlur Event in DHTMLX Sidebar\nDESCRIPTION: Example showing how to attach an event listener for the inputBlur event in a DHTMLX Sidebar. The event fires when a control loses focus and provides the ID of the control as a parameter.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/sidebar/api/sidebar_inputblur_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsidebar.events.on(\"inputBlur\", function(id){\n    console.log(id);\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Toggle Value in JavaScript DHTMLX Form\nDESCRIPTION: This snippet demonstrates how to use the getValue() method to retrieve the value or state of a Toggle control in a DHTMLX Form. It shows examples for both when a value is specified and when it's not.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/toggle/toggle_getvalue_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// returns a value if the value is specified for the toggle\nconst value = form.getItem(\"toggle\").getValue(); // -> \"toggle_value\"\n\n// returns a state if the value is not specified for the toggle\nconst state = form.getItem(\"toggle\").getValue(); // -> true/false\n```\n\n----------------------------------------\n\nTITLE: Container Control Properties Configuration in JavaScript\nDESCRIPTION: This code snippet demonstrates the structure and available properties for configuring a Container control in DHTMLX Form. It includes type specification, sizing options, labeling properties, and styling configurations.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/container/api_container_properties.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    type: \"container\",\n    name?: string,\n    id?: string,\n    html?: HTMLElement | string,\n    \n    css?: string,\n    disabled?: boolean, // false by default\n    height?: string | number | \"content\", // \"content\" by default\n    hidden?: boolean, // false by default\n    padding?: string | number, \n    width?: string | number | \"content\", // \"content\" by default\n\n    label?: string,\n    labelWidth?: string | number,\n    labelPosition?: \"left\" | \"top\", // \"top\" by default\n    hiddenLabel?: boolean, // false by default\n    helpMessage?: string\n}\n```\n\n----------------------------------------\n\nTITLE: Handling afterShow Event for Datepicker in DHTMLX Form (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to attach an event listener to the afterShow event of a Datepicker control in a DHTMLX Form. The event fires after the control is shown and provides the current value of the control.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/calendar/calendar_aftershow_event.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nform.getItem(\"datepicker\").events.on(\"afterShow\", function(value) {\n    console.log(\"afterShow\", value);\n});\n```\n\n----------------------------------------\n\nTITLE: Showing Progress Bar in DHTMLX Layout (JavaScript)\nDESCRIPTION: This snippet demonstrates how to use the progressShow() method to display a progress bar in a DHTMLX Layout container. The progress bar is a visual indicator that informs users about content loading or updating.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/layout/api/layout_progressshow_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlayout.progressShow();\n```\n\n----------------------------------------\n\nTITLE: Handling the Pagination 'change' Event in JavaScript\nDESCRIPTION: This snippet demonstrates how to attach an event listener to the 'change' event of a DHTMLX Pagination instance (`pagination`). The callback function receives the index of the newly active page (`index`) and the index of the previously active page (`previousIndex`) as arguments, allowing custom logic to be executed upon page change. Requires an initialized `pagination` object.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/pagination/api/pagination_change_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\npagination.events.on(\"change\", function(index, previousIndex) {\n  // your logic here\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing DHTMLX Slider Widget from Form Control\nDESCRIPTION: Basic example of how to get the DHTMLX Slider widget from a Form's Slider control. This allows direct access to the widget's methods and properties.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/slider/slider_getwidget_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst slider = form.getItem(\"slider\").getWidget();  \n// -> DHTMLX Slider\n```\n\n----------------------------------------\n\nTITLE: Initializing Form with Slider and Using getProperties Method in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a Form with a Slider control and use the getProperties() method to retrieve its configuration attributes.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/slider/slider_getproperties_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst form = new dhx.Form(\"form_container\", {\n    rows: [\n        {\n            type: \"slider\",\n            name:\"slider\",\n            label: \"slider\",\n            labelWidth: \"50px\",\n            min: 0,\n            max: 100\n        }\n    ]\n});\n\nform.getItem(\"slider\").getProperties();\n```\n\n----------------------------------------\n\nTITLE: Handling the beforeAdd Event in DHTMLX Layout (JavaScript)\nDESCRIPTION: This example demonstrates how to attach an event handler to the beforeAdd event of a DHTMLX Layout component. The event fires before a cell is added and allows preventing the addition by returning false.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/layout/api/layout_beforeadd_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlayout.events.on(\"beforeAdd\", function(id){\n    // your logic here\n    return false;\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Menu Items in JavaScript DHTMLX\nDESCRIPTION: This code snippet demonstrates how to use the enable() method to enable single or multiple menu items. It also shows how to enable all menu items at once starting from v7.0.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/menu/api/menu_enable_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nmenu.enable(\"save_btn\");\n// several at a time\nmenu.enable([\"cancel_btn\",\"del_btn\"]);\n\n// enables all Menu items\nmenu.enable();\n```\n\n----------------------------------------\n\nTITLE: Initializing Default Colorpicker Palette in JavaScript\nDESCRIPTION: Defines the default color palette structure for the Colorpicker component with predefined color values in hexadecimal format.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/colorpicker/configuration.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst palette = [\n    [\"#D4DAE4\",\"#B0B8CD\",\"#949DB1\",\"#727A8C\",\"#5E6677\",\"#3F4757\",\"#1D2534\"],\n    [\"#FFCDD2\",\"#FE9998\",\"#F35C4E\",\"#E94633\",\"#D73C2D\",\"#CA3626\",\"#BB2B1A\"],\n    [\"#F9E6AD\",\"#F4D679\",\"#EDB90F\",\"#EAA100\",\"#EA8F00\",\"#EA7E00\",\"#EA5D00\"],\n    [\"#BCE4CE\",\"#90D2AF\",\"#33B579\",\"#36955F\",\"#247346\",\"#1D5B38\",\"#17492D\"],\n    [\"#BDF0E9\",\"#92E7DC\",\"#02D7C5\",\"#11B3A5\",\"#018B80\",\"#026B60\",\"#024F43\"],\n    [\"#B3E5FC\",\"#81D4FA\",\"#29B6F6\",\"#039BE5\",\"#0288D1\",\"#0277BD\",\"#01579B\"],\n    [\"#AEC1FF\",\"#88A3F9\",\"#5874CD\",\"#2349AE\",\"#163FA2\",\"#083596\",\"#002381\"],\n    [\"#C5C0DA\",\"#9F97C1\",\"#7E6BAD\",\"#584A8F\",\"#4F4083\",\"#473776\",\"#3A265F\"],\n    [\"#D6BDCC\",\"#C492AC\",\"#A9537C\",\"#963A64\",\"#81355A\",\"#6E3051\",\"#4C2640\"],\n    [\"#D2C5C1\",\"#B4A09A\",\"#826358\",\"#624339\",\"#5D4037\",\"#4E342E\",\"#3E2723\"]\n];\n```\n\n----------------------------------------\n\nTITLE: Checking Input Visibility in DHTMLX Form with isVisible() Method\nDESCRIPTION: This code snippet demonstrates how to use the isVisible() method to check whether an Input control is visible on the page within a DHTMLX Form. The method returns a boolean value: true if the input is visible, false otherwise.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/input/input_isvisible_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"input\").isVisible(); \n// -> true/false\n```\n\n----------------------------------------\n\nTITLE: Handling afterSelect Event in DHTMLX Grid (JavaScript)\nDESCRIPTION: This snippet demonstrates how to attach an event listener to the afterSelect event of a DHTMLX Grid. The event fires after a cell is selected, providing the row and column objects as parameters.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/selection/selection_afterselect_event.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ngrid.selection.events.on(\"AfterSelect\", (row, column) => {\n    console.log(\"afterSelect\", row, column); \n});\n```\n\n----------------------------------------\n\nTITLE: Checking Ribbon Item Selection using isSelected() in JavaScript\nDESCRIPTION: This snippet demonstrates the usage of the `isSelected()` method to determine if a Ribbon item, identified by its ID ('print' in this case), is currently selected. It requires an instance of the DHTMLX Ribbon component (referenced as `ribbon`). The method accepts the item's ID (string or number) as an argument and returns a boolean value: `true` if the item is selected, `false` otherwise.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/ribbon/api/ribbon_isselected_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nribbon.isSelected(\"print\"); // -> returns true/false\n```\n\n----------------------------------------\n\nTITLE: Adding HTML Content to NavItem in JavaScript Sidebar\nDESCRIPTION: Shows how to add custom HTML content to a NavItem using the 'html' property. This allows for more complex and customized item content.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/sidebar/navitem.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    type: \"navItem\",\n    html: \"<img class='item-avatar' src='../avatars/Avatar_07.jpg'/>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Context Menu in JavaScript using DHTMLX\nDESCRIPTION: This snippet demonstrates how to use the showAt() method to display a context menu. It creates a new ContextMenu instance and attaches it to a right-click event on an element with the id 'menu'. The menu is shown to the right of the clicked element.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/menu/api/menu_showat_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst cmenu = new dhx.ContextMenu();\ndocument.querySelector('#menu').oncontextmenu = function(e) {\n    e.preventDefault();\n    cmenu.showAt(\"menu\", 'right');\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Item Object Using getItem Method\nDESCRIPTION: Demonstrates how to retrieve an item object from a DataCollection using its ID. The method returns the complete object associated with the specified identifier.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/data_collection/api/datacollection_getitem_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst item = component.data.getItem(123);\n```\n\n----------------------------------------\n\nTITLE: Handling inputChange Event in DHTMLX Ribbon (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to attach an event listener to the DHTMLX Ribbon widget that responds to the inputChange event. When the value in an Input control changes, the associated handler function is called with the control's id and the new value as its parameters. The handler logs these values to the console. Requires DHTMLX Suite v8.3 or above, the Ribbon widget, and a properly initialized ribbon instance. Key parameters: id (string or number) and newValue (string). The handler's return value is not used.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/ribbon/api/ribbon_inputchange_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nribbon.events.on(\"inputChange\", function(id, newValue){\n    console.log(id, newValue);\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Single Date Value from Calendar\nDESCRIPTION: Demonstrates getting a selected date from the calendar as a string format.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar/api/calendar_getvalue_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst date = calendar.getValue(); // -> \"03/06/19\"\n```\n\n----------------------------------------\n\nTITLE: Rearranging Sidebar Controls in JavaScript\nDESCRIPTION: Demonstrates how to move sidebar controls to different positions using the move() method of the Tree Collection API in DHTMLX.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/sidebar/work_with_sidebar.md#2025-04-22_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nsidebar.data.move(\"2\",0);\n```\n\n----------------------------------------\n\nTITLE: Enabling Selection in JavaScript DataView\nDESCRIPTION: Activates the selection of items in a DataView using the enable() method of the selection object.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/dataview/usage_selection.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndataview.selection.enable();\n```\n\n----------------------------------------\n\nTITLE: Checking if a Grid Row is Hidden in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the isRowHidden method to check if a specific row in a Grid is hidden. The method takes a row ID as a parameter and returns a boolean value.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_isrowhidden_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngrid.isRowHidden(\"1\"); //-> true/false\n```\n\n----------------------------------------\n\nTITLE: Embedding DHTMLX Theme Configurator Demo\nDESCRIPTION: HTML iframe code for embedding the interactive theme configurator demo that allows users to preview and copy different UI themes for DHTMLX Suite.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/themes/theme_configurator.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<iframe src=\"https://snippet.dhtmlx.com/kw89q481?mode=result\" frameborder=\"0\" class=\"snippet_iframe\" width=\"100%\" height=\"800\"></iframe>\n```\n\n----------------------------------------\n\nTITLE: Handling beforeChangeProperties Event for Checkbox in DHTMLX Form\nDESCRIPTION: This snippet demonstrates how to attach an event handler for the beforeChangeProperties event of a Checkbox control in a DHTMLX Form. The event fires before the control's configuration attributes are changed dynamically, allowing for interception and validation.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/checkbox/checkbox_beforechangeproperties_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"checkbox\").events.on(\"beforeChangeProperties\", function(properties) {\n    console.log(\"beforeChangeProperties\", properties);\n    return true;\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Initial Data from DHTMLX DataCollection\nDESCRIPTION: Demonstrates how to use the getInitialData() method to retrieve the initial values of items in a DataCollection widget. The method returns an array of item objects containing their original values.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/data_collection/api/datacollection_getinitialdata_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst startingData = component.data.getInitialData();\n```\n\n----------------------------------------\n\nTITLE: Attaching Event Handler for afterEditEnd Event in DHTMLX Tree\nDESCRIPTION: This snippet demonstrates how to attach an event handler for the afterEditEnd event in a DHTMLX Tree component. The event fires after editing of a tree item is finished, providing the new value and id of the edited item.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree/api/tree_aftereditend_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntree.events.on(\"afterEditEnd\", function(value, id) {\n    // your logic here\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Sub-Rows Globally in DHTMLX Grid\nDESCRIPTION: This snippet demonstrates how to set global configuration for sub-rows in a DHTMLX Grid. It specifies the height, padding, and full-width display of sub-rows for all rows in the grid.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_subrowconfig_config.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst grid = new dhx.Grid(\"grid_container\", {\n    columns: [\n        { id: \"zone_name\", header: [{ text: \"Zone name\" }] },\n        { id: \"temperature\", header: [{ text: \"Temperature\" }] },\n    ],\n    data: dataset,\n    subRowConfig: {\n        height: 200,\n        padding: 8,\n        fullWidth: true,\n    },\n    subRow: ({ zone_name }) => `<div>Details for ${zone_name}</div>`,\n});\n```\n\n----------------------------------------\n\nTITLE: Handling openMenu Event in DHTMLX Toolbar (JavaScript)\nDESCRIPTION: This example demonstrates how to attach an event handler to the openMenu event of a DHTMLX Toolbar. The event fires when a menu control is expanded and provides the ID of the opened menu item as a parameter.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/toolbar/api/toolbar_openmenu_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntoolbar.events.on(\"openMenu\", function(id){\n    // your code here\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Current Page Size with DHTMLX Pagination (JavaScript)\nDESCRIPTION: This JavaScript example demonstrates calling the `getPageSize()` method on a DHTMLX Pagination instance (`pagination`). The method returns the number of items currently configured to be displayed per page. In this example, the method returns `22`.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/pagination/api/pagination_getpagesize_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\npagination.getPageSize();\n// -> 22\n```\n\n----------------------------------------\n\nTITLE: Checking if a Toolbar Item is Disabled\nDESCRIPTION: Using the isDisabled() method to check whether a toolbar item is in a disabled state based on its ID.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/toolbar/common_methods.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmenu.isDisabled(\"1\"); // -> true/false\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX Grid with Disabled Sorting\nDESCRIPTION: Example showing how to initialize a DHTMLX Grid with the sortable property set to false, which disables column sorting functionality. The grid requires a container element and accepts configuration for columns and data.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_sortable_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst grid = new dhx.Grid(\"grid_container\", {\n    columns: [\n        // columns config\n    ],\n    sortable:false,  \n    data: dataset\n});\n```\n\n----------------------------------------\n\nTITLE: Detaching Event Listeners from DHTMLX Timepicker in JavaScript\nDESCRIPTION: This snippet illustrates how to detach an event listener from a DHTMLX Timepicker instance using events.detach(). A listener is first attached for the 'change' event, and then it is detached using a case-insensitive event name. Requires the DHTMLX Timepicker setup with event handling enabled. The key parameters are the event name and the function reference if selective detachment is needed; in this example, all listeners for 'Change' are removed.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/timepicker/handling_events.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\ntimepicker.events.on(\"change\", function(value){\n    console.log(\"The value of a timepicker has changed to \"+ value);\n});\ntimepicker.events.detach(\"Change\");\n```\n\n----------------------------------------\n\nTITLE: Handling Combo Box beforeClose Event in JavaScript\nDESCRIPTION: Example of attaching an event handler to the beforeClose event of a combo box. The handler can prevent the combo box from closing by returning false.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/combobox/api/combobox_beforeclose_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncombo.events.on(\"beforeClose\", function() {\n    // your logic here\n    return false;\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Tabbar Change Event in JavaScript\nDESCRIPTION: This snippet demonstrates how to attach an event listener to the 'change' event of a Tabbar. It logs the ID of the newly active tab to the console when the active tab changes.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tabbar/api/tabbar_change_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntabbar.events.on(\"change\", function(id, prev){\n    console.log(id);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Parameterized Child View in Optimus JavaScript\nDESCRIPTION: Defines an `EmptyView` class extending `dhx-optimus`'s `View`. The `init()` method returns an HTML string containing a `div`. The content of the `div` is dynamically generated based on the `this.params.content` property, demonstrating how views can receive and display data passed via parameters. If `content` is not provided, it defaults to displaying 'empty'.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/optimus_guides/how_to_start_optimus.md#2025-04-22_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nimport { View } from \"dhx-optimus\";\n\nexport class EmptyView extends View {\n    init() {\n        return `\n        <div class=\"empty__container\">\n            This is the ${this.params.content || \"empty\"} view\n        </div>`;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Grid with Custom Width in JavaScript\nDESCRIPTION: This code snippet demonstrates how to create a new Grid instance with a custom width of 400 pixels. It also includes placeholders for column configuration and data.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_width_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst grid = new dhx.Grid(\"grid_container\", {\n    columns: [\n        // columns config\n    ],\n    width: 400, \n    data: dataset\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Scroll Settings Globally in JavaScript\nDESCRIPTION: This code shows how to configure global settings for custom scrollbars, including auto-hide behavior and timeout duration.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/helpers/custom_scroll.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ndhx.scrollViewConfig.autoHide = false; \ndhx.scrollViewConfig.timeout = 10000; \n\n// initializing widgets\n```\n\n----------------------------------------\n\nTITLE: Handling beforeHide Event in DHTMLX Form Toggle Group\nDESCRIPTION: This snippet demonstrates how to attach an event handler to the beforeHide event of a Toggle Group control in a DHTMLX Form. The handler logs the event details and always allows the hide action to proceed.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/togglegroup/togglegroup_beforehide_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"ToggleGroup\").events.on(\"beforeHide\", function(value, id, init) {\n    console.log(\"beforeHide\", value, id, init);\n    return true;\n});\n```\n\n----------------------------------------\n\nTITLE: Using TimePicker Widget Methods\nDESCRIPTION: Demonstrates how to access and manipulate the underlying TimePicker widget directly using getWidget() method and set its value.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/timepicker.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst timepicker = form.getItem(\"timepicker\").getWidget();  // -> TimePicker\ntimepicker.setValue(\"00:39\"); //set the value as a string\n```\n\n----------------------------------------\n\nTITLE: Available Container Properties Object Structure - JavaScript\nDESCRIPTION: Structure showing all available properties that can be modified for a Container control, including CSS, dimensions, padding, label configurations, and help message.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/container/container_setproperties_method.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    css: string,\n    width: string | number | \"content\",\n    height: string | number | \"content\",\n    padding: string | number,\n    label: string,\n    labelWidth: string | number,\n    labelPosition: \"left\" | \"top\",\n    hiddenLabel: boolean,\n    helpMessage: string\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Label for Combo Box in JavaScript\nDESCRIPTION: Sets up a label for the Combo Box with custom positioning and width, enhancing the component's usability and appearance.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/combobox/configuration.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst combo = new dhx.Combobox(\"combo_container\",{\n    label:\"Label\",\n    labelPosition: \"left\",\n    labelWidth: 100\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Autosize for Tabs in DHTMLX Tabbar\nDESCRIPTION: Demonstrates how to enable automatic sizing of tabs based on container size\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tabbar/configuring_tabbar.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst tabbar = new dhx.Tabbar(\"tabbar_container\", {\n    views:[\n        { tab: \"left\", css:\"panel flex\", header:\"Left\"},\n        { tab: \"west\", css:\"panel flex\", header:\"West\"},\n        { tab: \"east\", css:\"panel flex\", header:\"East\"},\n        { tab: \"right\", css:\"panel flex\", header:\"Right\" }\n    ],\n    tabAutoWidth: true,\n    mode: \"top\"\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Input Field for DatePicker in HTML\nDESCRIPTION: Creates a read-only input element with ID 'date-input' that will display the selected date and trigger the date picker popup when clicked.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar2/datepicker.mdx#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<input type=\"text\" id=\"date-input\" style=\"width: 200px;\" readonly/>\n```\n\n----------------------------------------\n\nTITLE: Using DHTMLX Calendar Methods with DatePicker Control in JavaScript\nDESCRIPTION: This example shows how to use the getWidget() method to access the DHTMLX Calendar widget and then use its showDate() method to display the current month in the DatePicker control.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/calendar/calendar_getwidget_method.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst datepicker = form.getItem(\"datepicker\").getWidget();  // -> DHTMLX Calendar\ndatepicker.showDate(null,\"month\"); // shows the current month\n```\n\n----------------------------------------\n\nTITLE: Applying Custom CSS to DHTMLX Chart in JavaScript\nDESCRIPTION: This example demonstrates how to apply custom CSS classes to a DHTMLX Chart using the 'css' configuration option. It includes custom styles for chart elements and uses DHTMLX CSS variables.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/chart/api/chart_css_config.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<style>\n    .custom {\n        --dhx-background-primary: #444;\n        --dhx-font-color-secondary: #fff;\n    }\n    .custom .chart.bar {\n        fill: orange;\n    }\n</style>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst chart = new dhx.Chart(\"chart_container\", {\n    type: \"bar\",\n    css: \"custom dhx_widget--bordered\",\n    scales: {\n        \"top\": {\n            size: 100\n        },\n        \"bottom\" : {\n            text: \"month\", size: 100\n        },\n        \"left\" : {\n            size: 100, maxTicks: 10, max: 100, min: 0\n        },\n        \"right\": {\n            size: 100\n        }\n    },\n    series: [\n        {\n            id: \"A\", value: \"company C\", color: \"#5E83BA\",\n            pointType: \"circle\", fill: \"#5E83BA\", size: 35\n        }\n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Column Hide Event in DHTMLX Grid - JavaScript\nDESCRIPTION: Example showing how to attach an event handler for the afterColumnHide event in DHTMLX Grid. The event fires after a column is hidden and provides access to the column configuration object.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_aftercolumnhide_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngrid.events.on(\"afterColumnHide\", (column) => {\n    // your logic here\n});\n```\n\n----------------------------------------\n\nTITLE: Legend Configuration for Charts with Scales\nDESCRIPTION: Example of legend configuration options for charts with scales like line, spline, bar, area charts\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/chart/api/chart_legend_config.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlegend?: {\n    series: string[],\n    direction?: \"row\" | \"column\", // \"row\" by default\n    form?: \"rect\" | \"circle\", // \"rect\" by default\n    halign?: \"left\" | \"right\" | \"center\", // \"right\" by default\n    itemPadding?: number,\n    margin?: number,\n    size?: number,\n    valign?: \"top\" | \"middle\" | \"bottom\", // \"top\" by default\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Combo Box with Silent Parameter\nDESCRIPTION: Examples of using the validate() method with the silent parameter to validate specific or currently selected items in a Combo Box control.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/combo/combo_validate_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// the method validates the specified value\nform.getItem(\"combo\").validate(true, \"id_2\"); // -> true/false\n\n// the method validates the currently selected items\nform.getItem(\"combo\").validate(true); // -> true/false\n```\n\n----------------------------------------\n\nTITLE: Setting Focus to Colorpicker Control in DHTMLX Form\nDESCRIPTION: This snippet demonstrates how to use the focus() method to set focus to a Colorpicker control within a DHTMLX Form. It retrieves the Colorpicker item from the form and calls the focus() method on it.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/colorpicker/colorpicker_focus_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nform.getItem(\"colorpicker\").focus();\n```\n\n----------------------------------------\n\nTITLE: Simplified Selection Event Handler in DHTMLX v7.0+\nDESCRIPTION: Simplified version of the afterSelect event handler introduced in DHTMLX v7.0. This version directly uses the events API to handle selection.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/selection/api/selection_afterselect_event.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncomponent.events.on(\"afterSelect\", function(id) {\n    console.log(id);\n});\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Locale to DHTMLX Combo Box\nDESCRIPTION: This snippet demonstrates how to apply a custom locale (in this case, German) to a DHTMLX Combo Box instance. It uses the dhx.i18n.setLocale() method before initializing the Combo Box.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/combobox/localization.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ndhx.i18n.setLocale(\"combo_container\", de);\nconst combo = new dhx.Combobox(\"combo_container\");\n```\n\n----------------------------------------\n\nTITLE: Retrieving Grid Sorting State - DHTMLX Grid - JavaScript\nDESCRIPTION: Demonstrates the deprecated getSortingState method in DHTMLX Grid prior to v9.1 for retrieving the current column sorting state. No external dependencies, used on a dhtmlx.Grid instance. Returns the main (single) sorting state applied to the grid, output varies by grid configuration and current user state.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/migration.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\ngrid.getSortingState();\n```\n\n----------------------------------------\n\nTITLE: DataCollection group() Method Type Definition\nDESCRIPTION: TypeScript interface and type definitions for the group() method parameters and configuration options\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/data_collection/api/datacollection_group_method.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\ntype TGroupOrderFunc = (item: IDataItem) => string;\ntype TAggregate = \"sum\" | \"count\" | \"min\" | \"max\" | \"avg\" | string;\ninterface IGroupOrder {\n    by: string | TGroupOrderFunc;\n    map?: {\n        [field: string]: [string, TAggregate] | ((item: IDataItem[]) => string | number)\n    };\n    summary?: \"top\" | \"bottom\";\n}\ntype TGroupOrder = string | TGroupOrderFunc | IGroupOrder;\ninterface IGroupConfig {\n    showMissed?: boolean | string; // true by default\n    field?: string; // \"group\" by default\n}\n\ngroup(order: TGroupOrder[], config?: IGroupConfig): void;\n```\n\n----------------------------------------\n\nTITLE: Using getProperties Method with Select Control in DHTMLX Form\nDESCRIPTION: This example demonstrates how to initialize a Form with a Select control and retrieve its properties using the getProperties() method. The Select control is configured with a label, width, and options.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/select/select_getproperties_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst form = new dhx.Form(\"form_container\", {\n    rows: [\n        {\n            type: \"select\",\n            name: \"select\",\n            label: \"select\",\n            labelWidth: \"50px\",\n            width:\"200px\",\n            options: [\n                {\n                    value: \"1\",\n                    content: \"1\",\n                    disabled: true\n                },\n                {\n                    value: \"2\",\n                    content: \"2\"\n                }\n            ]        \n        }  \n    ]\n});\n\nform.getItem(\"select\").getProperties();\n```\n\n----------------------------------------\n\nTITLE: Configurable Properties for CheckboxGroup in JavaScript\nDESCRIPTION: Lists the configuration attributes that can be modified for the CheckboxGroup control using the setProperties() method, including styling, dimensions, and validation settings.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/checkbox_group/checkboxgroup_setproperties_method.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    css: string,\n    errorMessage: string,\n    height: string | number|\"content\",\n    helpMessage: string,\n    hiddenLabel: boolean,\n    label: string,\n    labelPosition: string,\n    labelWidth: string | number,\n    options: object,\n    padding: string | number,\n    preMessage: string,\n    required: boolean,\n    successMessage: string,\n    width: string|number|\"content\"\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling and Disabling Custom Scroll for Specific Widget in JavaScript\nDESCRIPTION: This snippet illustrates how to enable or disable custom scrollbars for a specific DHTMLX widget after initialization.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/helpers/custom_scroll.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// initialize the widget\nconst list = new dhx.List(\"list_container\", {\n    template: listTemplate,\n    itemHeight: 52,\n    height: \"100%\",\n    dragMode: \"both\",\n});\nlist.data.load(data);\n\n// enable custom scroll\nlist.scrollView.enable();\n\n// disable custom scroll\nlist.scrollView.disable();\n```\n\n----------------------------------------\n\nTITLE: Allowing DHTMLX Window to Overflow Viewport in JavaScript\nDESCRIPTION: This snippet demonstrates enabling the DHTMLX Window to be moved beyond browser boundaries by setting the 'viewportOverflow' property to true. Should be used in combination with 'movable:true'. This property allows the window to be positioned outside the visible viewport, which can be useful in certain UI layouts. Requires DHTMLX Suite.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/window/configuration.md#2025-04-22_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nconst dhxWindow = new dhx.Window({\n    viewportOverflow:true\n});\n```\n\n----------------------------------------\n\nTITLE: Individual Checkbox Properties Object Structure\nDESCRIPTION: Example showing the structure of the object returned when getting properties of an individual checkbox within the CheckboxGroup.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/checkbox_group/checkboxgroup_getproperties_method.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    height: \"content\",\n    padding: 0,\n    text: \"Select 2\",\n    width: \"content\"\n}\n```\n\n----------------------------------------\n\nTITLE: Handling serieClick Event in DHTMLX Chart (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to attach an event listener for the serieClick event in a DHTMLX Chart. The event fires when a user clicks on a series in the chart, providing the id and value of the clicked series.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/chart/api/chart_serieclick_event.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nchart.events.on(\"serieClick\", function (id, value) {\n    // your logic here\n});\n```\n\n----------------------------------------\n\nTITLE: Handling beforeEditStart Event in DHTMLX Tree (JavaScript)\nDESCRIPTION: This code demonstrates how to attach an event handler to the beforeEditStart event of a Tree component. The event fires before editing of an item starts and allows you to execute custom logic and optionally prevent editing by returning false.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree/api/tree_beforeeditstart_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntree.events.on(\"beforeEditStart\", function(value, id) {\n    // your logic here\n    return false;\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX Grid with Selection Configuration\nDESCRIPTION: Example of creating a new Grid instance with complex selection mode enabled. The selection config can be set to boolean, 'cell', 'row', or 'complex' to control how users can select grid elements.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_selection_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst grid = new dhx.Grid(\"grid_container\", {\n    columns: [\n        // columns config\n    ],\n    selection:\"complex\",\n    data: dataset\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Controls to DHTMLX Window Header and Footer using JavaScript\nDESCRIPTION: Illustrates how to dynamically add custom icon buttons and spacers to the DHTMLX Window header and footer with the 'add' method of Data Collection. This method allows specifying the control type, icon, id, and insert position. Dependencies: a dhxWindow instance with exposed header and footer data collections. Parameters specify control configurations, position (index), and, for menu items, a parent id. Outputs are visual updates to the window's header and footer controls.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/window/customization.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\ndhxWindow.header.data.add({icon: \\\"mdi mdi-fullscreen\\\", id: \\\"fullscreen\\\"}, 2);\\ndhxWindow.footer.data.add({type: \\\"spacer\\\"});\\ndhxWindow.footer.data.add({icon: \\\"mdi mdi-thumb-up\\\", id: \\\"like\\\"});\\ndhxWindow.footer.data.add({icon: \\\"mdi mdi-thumb-down\\\", id: \\\"dislike\\\"})\n```\n\n----------------------------------------\n\nTITLE: Adding Tooltip to a Button\nDESCRIPTION: Adds a tooltip to a button that appears when hovering over it. The tooltip provides additional information or instructions about the button's function.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/toolbar/button.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    type:\"button\", \n    value:\"Click\", \n    tooltip:\"Click me and find out why\"\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Avatar Instance in DHTMLX Form (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to use the destructor() method to remove an avatar instance from a DHTMLX Form. It retrieves the avatar item from the form using getItem() and then calls the destructor() method on it.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/avatar/avatar_destructor_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nform.getItem(\"avatar\").destructor();\n```\n\n----------------------------------------\n\nTITLE: Attaching an Event Listener for afterApply in JavaScript Timepicker\nDESCRIPTION: This snippet demonstrates how to subscribe to the 'afterApply' event of a DHTMLX Timepicker instance. The event fires after the timepicker value is saved (applied). The callback function receives the selected time value as an argument, which can be either a string or an object depending on the 'valueFormat' and 'timeFormat' configuration of the timepicker. In this example, the received value is logged to the console.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/timepicker/api/timepicker_afterapply_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntimepicker.events.on(\"afterApply\", function(value) {\n    console.log(value);\n});\n```\n\n----------------------------------------\n\nTITLE: Handling focus event for Checkbox in DHTMLX Form (JavaScript)\nDESCRIPTION: This snippet demonstrates how to attach an event listener to the 'focus' event of a Checkbox control in a DHTMLX Form. It logs the current value of the checkbox when it receives focus.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/checkbox/checkbox_focus_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"checkbox\").events.on(\"focus\", (value) => {\n    console.log(\"focus\", value);\n});\n```\n\n----------------------------------------\n\nTITLE: NavItem Template for DHTMLX Sidebar\nDESCRIPTION: Template for creating a navItem control in the sidebar with value, icon, and count properties. This is used for navigation items that can display additional counters.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/sidebar/data_loading.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// navItem\n{\n    type: \"navItem\", \n    value: \"Some\",\n    icon: \"dxi-check\",\n    count: 10\n}\n```\n\n----------------------------------------\n\nTITLE: Handling afterEditStart Event in DHTMLX Grid\nDESCRIPTION: This code snippet demonstrates how to attach an event listener for the afterEditStart event in a DHTMLX Grid. The event fires after editing of a cell has started and provides information about the row, column, and editor type.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_aftereditstart_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngrid.events.on(\"afterEditStart\", (row, column, editorType) => {\n    // your logic here\n});\n```\n\n----------------------------------------\n\nTITLE: Handling beforeChange Event in DHTMLX Form Checkbox Group\nDESCRIPTION: This example demonstrates how to attach an event handler to the beforeChange event of a Checkbox Group control in a DHTMLX form. The handler logs the new value to the console and returns true to allow the change.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/checkbox_group/checkboxgroup_beforechange_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"CheckboxGroup\").events.on(\"beforeChange\", function(value) {\n    console.log(\"beforeChange\", value);\n    return true;\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Tree State in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the getState() method to retrieve the current state of a tree component. The method returns an object containing information about each tree item's selected status and open state.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree/api/tree_getstate_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst treeState = tree.getState();\n/* -> \n{\n    books: {open: true, selected: 2}, \n    mystery: {open: true, selected: 0}, \n    fantasy: {open: undefined, selected: 0}\n}\n*/\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Template for DHTMLX List Items in JavaScript\nDESCRIPTION: This code snippet demonstrates how to initialize a DHTMLX List component with a custom template function. The template function adds a bold exclamation mark before each item's value.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/list/api/list_template_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst list = new dhx.List(\"list_container\", {\n    template: function(item) {\n        return \"<strong>!!!</strong>\" + item.value;\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Text Control Configuration Properties Structure\nDESCRIPTION: Complete structure of available configuration properties that can be modified for the Text control including CSS, dimensions, labels, and messages.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/text/text_setproperties_method.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    css: string,\n    errorMessage: string,\n    height: string|number|\"content\",\n    helpMessage: string,\n    hiddenLabel: boolean,\n    inputType: string,\n    label: string,\n    labelPosition: string,\n    labelWidth: string|number,\n    padding: string|number,\n    preMessage: string,\n    successMessage: string,\n    width: string|number|\"content\"\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Selection in Tree\nDESCRIPTION: Initializes a Tree component with item selection disabled, preventing items from being highlighted when clicked.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree/configuration.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst tree = new dhx.Tree(\"tree_container\", {\n    selection: false,\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring maxPoints in DHTMLX Chart (JavaScript)\nDESCRIPTION: This snippet demonstrates how to set the maxPoints configuration option when initializing a DHTMLX Chart. It limits the number of data points displayed to 100, showing an average when the data set is larger.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/chart/api/chart_maxpoints_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst chart = new dhx.Chart(\"chart_container\", {\n    type:\"line\",\n    maxPoints:100\n});\n```\n\n----------------------------------------\n\nTITLE: Handling afterDrag Event in DHTMLX DataView\nDESCRIPTION: This code snippet demonstrates how to attach an event handler to the afterDrag event of a DataView component. The event fires after dragging of an item is finished and provides data about the drag operation and the associated mouse event.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/dataview/api/dataview_afterdrag_event.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ndataview.events.on(\"afterDrag\", function(data, events) {\n    // your logic here\n});\n```\n\n----------------------------------------\n\nTITLE: Checking if a Menu Item is Selected in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the isSelected method to check if a specific Menu item is selected. The method takes the id of the Menu item as a parameter and returns a boolean value.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/menu/api/menu_isselected_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nmenu.isSelected(\"align-left\"); // -> returns true/false\n```\n\n----------------------------------------\n\nTITLE: Configuring dragCopy for DHTMLX List in JavaScript\nDESCRIPTION: This snippet demonstrates how to initialize two DHTMLX List components with dragCopy enabled. The source list is configured to allow dragging items from it, while the target list is set up to receive dragged items. Both lists have dragCopy set to true, enabling item copying during drag-and-drop.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/list/api/list_dragcopy_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst source = new dhx.List(\"list-source\", {dragMode: \"source\", dragCopy: true});\nconst target = new dhx.List(\"list-target\", {dragMode: \"target\", dragCopy: true});\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Points for Chart Display\nDESCRIPTION: Configures a Line chart to display an average of values when the data set exceeds 100 points.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/chart/configuration_properties.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst chart = new dhx.Chart(\"chart_container\", {\n    type:\"line\",\n    maxPoints:100\n});\n```\n\n----------------------------------------\n\nTITLE: Handling afterChangeProperties Event in DHTMLX Form Text Control\nDESCRIPTION: This snippet demonstrates how to attach an event handler to the afterChangeProperties event of a Text control in a DHTMLX Form. The event fires after the control's configuration attributes have been changed dynamically and provides an object with the updated properties.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/text/text_afterchangeproperties_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"text\").events.on(\"afterChangeProperties\", function(properties) {\n    console.log(\"afterChangeProperties\", properties);\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Selection in DHTMLX Components - JavaScript\nDESCRIPTION: Method to enable selection functionality in DHTMLX components. This method can be applied to DataView, List, and Tree components and was introduced in version 7.0.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/selection/api/selection_enable_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncomponent.selection.enable();\n```\n\n----------------------------------------\n\nTITLE: Using checkItem Method in DHTMLX Tree (JavaScript)\nDESCRIPTION: This example demonstrates how to check the checkbox of a tree item and all its sub-items by calling the checkItem() method with the item's ID as a parameter.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree/api/tree_checkitem_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntree.checkItem(\"history\");\n```\n\n----------------------------------------\n\nTITLE: Grid Footer Implementation Example\nDESCRIPTION: Example showing how to implement a footer in a DHTMLX Grid with basic configuration\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/gridcolumn_properties/gridcolumn_footer_property.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst grid = new dhx.Grid(\"grid_container\", {\n    columns: [\n        { id: \"country\", header: [{ text: \"Country\" }], footer: [{ text: \"Total\" }] },\n        // more columns configuration objects\n    ],\n    // more options\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Month Selection Event in DHTMLX Calendar\nDESCRIPTION: This code snippet demonstrates how to attach an event handler to the MonthSelected event of a DHTMLX Calendar. The handler receives the selected month index (0-11) and logs it after adding 1 to display the conventional month number.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar2/api/calendar_monthselected_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncalendar.events.on(\"MonthSelected\", function(month) {\n   console.log(\"Selected month: \" + (month + 1));\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Window Container Element in DHTMLX\nDESCRIPTION: Example of using the getContainer() method to retrieve the HTML container element of a DHTMLX Window component. The method returns a div element with specific DHTMLX Window-related CSS classes.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/window/api/window_getcontainer_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndhxWindow.getContainer();\n// -> div.dhx_popup.dhx_widget.dhx_popup--window\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX Slider with helpMessage in JavaScript\nDESCRIPTION: This code snippet demonstrates how to initialize a DHTMLX Slider with a help message icon. The helpMessage property adds a question mark icon next to the Slider that displays the specified text when hovered.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/slider/api/slider_helpmessage_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst slider = new dhx.Slider(\"slider_container\",{\n    helpMessage:\"Some text\"\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Button to Toolbar\nDESCRIPTION: Creates a basic button in a DHTMLX Toolbar using the add() method of Tree Collection. This code adds a simple button with text label.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/toolbar/button.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntoolbar.data.add({\n    type:\"button\", value:\"Best button\"\n});\n```\n\n----------------------------------------\n\nTITLE: Checkbox Methods Reference Table\nDESCRIPTION: Markdown table documenting all available methods for the Checkbox component including links to detailed API documentation.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/api_overview.md#2025-04-22_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n| Name                                                   | Description                                                   |\n| :----------------------------------------------------- | :------------------------------------------------------------ |\n| [](form/api/checkbox/checkbox_blur_method.md)          | @getshort(form/api/checkbox/checkbox_blur_method.md)          |\n```\n\n----------------------------------------\n\nTITLE: Expanding DHTMLX Sidebar in JavaScript\nDESCRIPTION: Simple method call to expand a collapsed sidebar component. This method takes no parameters and returns void.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/sidebar/api/sidebar_expand_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsidebar.expand();\n```\n\n----------------------------------------\n\nTITLE: Initializing Grid with Column Drag Event Handler\nDESCRIPTION: Example showing how to initialize a DHTMLX Grid with columns configuration and attach a beforeColumnDrag event handler that prevents dragging of the 'density' column.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_beforecolumndrag_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst grid = new dhx.Grid(\"grid\", {\n    columns: [\n        { width: 200, id: \"country\", header: [{ text: \"Country\" }] },\n        { width: 150, id: \"population\", header: [{ text: \"Population\" }] },\n        { width: 150, id: \"age\", header: [{ text: \"Med. Age\" }], draggable: false },\n        { width: 150, id: \"density\", header: [{ text: \"Density (P/Km²)\" }] },\n    ],\n    data: dataset,\n    dragItem: \"column\",\n});\n\ngrid.events.on(\"beforeColumnDrag\", ({ start }) => start !== \"density\");\n```\n\n----------------------------------------\n\nTITLE: Configuring dragMode in DHTMLX List (JavaScript)\nDESCRIPTION: This example demonstrates how to initialize a DHTMLX List with drag-and-drop functionality by setting the dragMode property to 'source'. This allows list items to be dragged out of the list but prevents items from being dropped into it from other sources.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/list/api/list_dragmode_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst list = new dhx.List(\"list_container\", { \n    dragMode:\"source\"\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing dhtmlx Calendar with Custom Week Start in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a new dhtmlx Calendar instance with a custom starting day of the week. It sets Monday as the first day of the week using the weekStart property.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar2/api/calendar_weekstart_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar calendar = new dhx.Calendar(\"calendar_container\", {\n    weekStart:\"monday\"\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Year Selection Events in DHTMLX Calendar\nDESCRIPTION: Example showing how to attach an event listener to the yearSelected event of a DHTMLX Calendar instance. The event handler receives the selected year as a parameter and logs it to the console.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar/api/calendar_yearselected_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncalendar.events.on(\"yearSelected\", function(year) {\n    console.log(\"Selected year: \" + year);\n});\n```\n\n----------------------------------------\n\nTITLE: Toggling Sidebar in JavaScript\nDESCRIPTION: Shows how to toggle (expand/collapse) a sidebar using the toggle() method of the DHTMLX Sidebar API.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/sidebar/work_with_sidebar.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nsidebar.toggle();\n```\n\n----------------------------------------\n\nTITLE: Handling Grid Column Show Event in JavaScript\nDESCRIPTION: Example of attaching an event handler to the afterColumnShow event of a DHTMLX Grid. The event fires after a column becomes visible and provides access to the column configuration object.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_aftercolumnshow_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngrid.events.on(\"afterColumnShow\", (column) => {\n    // your logic here\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Colorpicker Hide Event in JavaScript\nDESCRIPTION: Example showing how to attach an event handler to the afterHide event of a Colorpicker control in a DHTMLX Form. The event fires after the control is hidden and provides the current value and initialization state.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/colorpicker/colorpicker_afterhide_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"colorpicker\").events.on(\"afterHide\", function(value, init) {\n    console.log(\"afterHide\", value, init);\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX Sidebar with Custom Width\nDESCRIPTION: This code snippet demonstrates how to create a new Sidebar instance with a custom width of 450 pixels. The example also applies a CSS class for a right border styling.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/sidebar/api/sidebar_width_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst sidebar = new dhx.Sidebar(\"sidebar_container\", {\n    css: \"dhx_widget--border_right\",\n    width:450\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Tooltips to Calendar Dates\nDESCRIPTION: Demonstrates how to add tooltips to specific calendar dates to mark special days, using the DateMouseOver event and tooltip functionality.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar/operating_calendar.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst special_days = {\n    \"20__8\": \"Mum's birthday\",\n    \"28__8\": \"Trip to Canada\"\n}\n\ncalendar.events.on(\"DateMouseOver\", function(date, e) {\n    const key = date.getDate() + \"__\" + (date.getMonth() + 1);\n    if (key in special_days) {\n        dhx.tooltip(special_days[key], {node: e.target, position: \"bottom\"});\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Heat Map with End Date Only\nDESCRIPTION: Demonstrates heat map configuration with only end date specified, where the start date defaults to January 1st of the earliest year in the dataset.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/chart/configuration_properties.md#2025-04-22_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nconst heatMapData = [\n    { id: \"100\", value: 50, date: new Date(2022, 2, 2) },\n    { id: \"101\", value: 100, date: new Date(2022, 4, 1) },\n    { id: \"200\", value: 32, date: new Date(2022, 6, 1) },\n    { id: \"202\", value: 35, date: new Date(2022, 7, 21) },\n    { id: \"300\", value: 22, date: new Date(2022, 9, 6) },\n    { id: \"501\", value: 100, date: new Date(2023, 3, 1) },\n    { id: \"502\", value: 40, date: new Date(2023, 4, 11) },\n    { id: \"503\", value: 23, date: new Date(2023, 5, 6) },\n];\n\nconst config = {\n    type: \"calendarHeatMap\",\n    series: [\n        {\n            value: \"value\",\n            date: \"date\",\n            endDate: \"15/05/23\",\n        }\n    ],\n};\n\nconst chart = new dhx.Chart(\"chart_container\", config);\nchart.data.parse(heatMapData);\n```\n\n----------------------------------------\n\nTITLE: Handling beforeHide Event in DHTMLX Form Textarea Control\nDESCRIPTION: This example demonstrates how to attach an event handler to the beforeHide event of a Textarea control within a DHTMLX form. The handler logs the current value and initialization state, then returns true to allow the control to be hidden.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/textarea/textarea_beforehide_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"textarea\").events.on(\"beforeHide\", function(value, init) {\n    console.log(\"beforeHide\", value, init);\n    return true;\n});\n```\n\n----------------------------------------\n\nTITLE: Applying CSS Classes to Calendar JavaScript Configuration\nDESCRIPTION: Demonstrates how to specify custom CSS classes in the JavaScript initialization of a Calendar component.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar/customization.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst calendar = new dhx.Calendar(\"calendar_container\", {\n    css:\"my_first_class my_second_class\"\n});\n```\n\n----------------------------------------\n\nTITLE: Resetting Focus in DHTMLX List Component (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to use the resetFocus() method of the List component in DHTMLX. The method resets focus and moves the scroll to the beginning of the list. It was added in version 8.4 of the library.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/list/api/list_resetfocus_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nlist.resetFocus();\n```\n\n----------------------------------------\n\nTITLE: Defining Grid Column MinWidth Type\nDESCRIPTION: Type definition for the minWidth property of a Grid column.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/gridcolumn_properties/gridcolumn_minwidth_property.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nminWidth?: number;\n```\n\n----------------------------------------\n\nTITLE: Hiding a Radio Button in a RadioGroup with DHTMLX Form\nDESCRIPTION: This example demonstrates how to hide a specific radio button within a RadioGroup by passing the radio button's ID to the hide() method. If no ID is provided, the entire RadioGroup will be hidden.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/radiogroup/radiogroup_hide_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"radiogroup\").hide(\"radiobutton_1\");\n```\n\n----------------------------------------\n\nTITLE: Applying DHTMLX Built-in CSS Classes to Calendar\nDESCRIPTION: This example shows how to use DHTMLX's built-in CSS classes to style a Calendar instance. It applies classes for a white background and bordered appearance.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar/api/calendar_css_config.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst calendar = new dhx.Calendar(\"calendar_container\", {\n    css: \"dhx_widget--bg_white dhx_widget--bordered\"\n});\n```\n\n----------------------------------------\n\nTITLE: Programmatically triggering Calendar events\nDESCRIPTION: Demonstrates how to programmatically fire an event on the Calendar using the events.fire() method, which accepts the event name and an array of arguments to pass to event handlers.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar2/functionality_and_features/events.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ncalendar.events.fire(\"name\",args);\n// where args is an array of arguments\n```\n\n----------------------------------------\n\nTITLE: Complete Example of Custom Styling for DHTMLX Toolbar\nDESCRIPTION: Comprehensive example showing how to define custom CSS variables for styling a DHTMLX Toolbar and apply them using the css property, including color customization for backgrounds and fonts.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/toolbar/customization.md#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<style>\n    .custom,.custom--popup-menu {\n        --dhx-background-primary: #3A434A;\n        --dhx-background-secondary: #5a6872;\n        --dhx-background-additional: #5a6872;\n        --dhx-s-toolbar-background: var(--dhx-background-primary);\n\n        --dhx-color-primary: #118d8d;\n        --dhx-color-primary-hover: #49e9e9;\n        --dhx-color-primary-active: #49e9e9;\n\n        --dhx-font-color-primary: #fff;\n        --dhx-font-color-secondary: #fff;\n        --dhx-font-color-additional: #fff;\n    }\n</style>\n\n<script>\n    const toolbar = new dhx.Toolbar(\"toolbar\", {\n        css: \"custom\"\n    });\n    toolbar.data.parse(data);\n</script>\n```\n\n----------------------------------------\n\nTITLE: Handling Grid Header Cell Mouse Over Event in JavaScript\nDESCRIPTION: Example showing how to attach an event handler to the headerCellMouseOver event of a DHTMLX Grid. The event provides access to the cell configuration, column configuration, and the native mouse event object.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_headercellmouseover_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngrid.events.on(\"headerCellMouseOver\", (cell, column, event) => {\n    // your logic here\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Window Control Icons in DHTMLX using JavaScript\nDESCRIPTION: Shows how to update an existing window control (e.g., the 'close' button) to use a Font Awesome icon by calling the 'update' method on the header data collection. Requires a control id and new configuration object specifying the desired icon. Dependencies: DHTMLX Window instance, an existing button with the id 'close', and Font Awesome CSS. Changes the appearance of the button, and outputs the visually updated control.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/window/customization.md#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\ndhxWindow.header.data.update(\\\"close\\\", {\\n    // using FA icon for the Close button\\n    icon: \\\"fas fa-times\\\" \\n});\n```\n\n----------------------------------------\n\nTITLE: Available Configuration Properties for Fieldset Control\nDESCRIPTION: Lists all the configuration properties that can be modified using the setProperties() method for the Fieldset control. These include styling properties like CSS and dimensions, as well as content properties like label and alignment.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/fieldset/fieldset_setproperties_method.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    css: string,\n    width: string | number | \"content\",\n    height: string | number | \"content\",\n    padding: string | number,\n\n    label: string,\n    labelAlignment: \"left\" | \"right\" | \"center\",\n    align: \"start\" | \"center\" | \"end\" | \"between\" | \"around\" | \"evenly\"\n}\n```\n\n----------------------------------------\n\nTITLE: Handling itemClick Event in DHTMLX Tree\nDESCRIPTION: This snippet demonstrates how to attach an event listener for the itemClick event in a DHTMLX Tree component. It logs a message to the console when a tree item is clicked, including the id of the clicked item.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree/api/tree_itemclick_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntree.events.on(\"itemClick\", function(id, e){\n    console.log(\"The item with the id \"+ id +\" was clicked.\");\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Advanced Grid Footer Tooltip with Force Option\nDESCRIPTION: Shows how to configure footer tooltips with advanced options like force display. This example demonstrates setting the footerTooltip as an object with specific properties.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_footertooltip_config.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst grid = new dhx.Grid(\"grid_container\", {\n    columns: [\n        // columns config\n    ],\n    data: dataset,\n    footerTooltip: {\n       force: true\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Sub-Rows Dynamically in DHTMLX Grid\nDESCRIPTION: This example shows how to configure sub-rows dynamically based on row data. It uses a callback function to set the height and expanded state of sub-rows, and creates a nested grid for rows with data.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_subrowconfig_config.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst grid = new dhx.Grid(\"grid_container\", {\n    columns:[\n        // columns config\n    ],\n    data: dataset,\n    autoWidth: true,\n    subRowConfig: (row) => ({\n        height: row.data.length ? 250 : 0, \n        expanded: true\n    }),\n    subRow: (row) => new dhx.Grid(null, {\n        columns: [\n            // columns config\n        ],\n        data: row.data\n    }),\n});\n```\n\n----------------------------------------\n\nTITLE: Validating Checkbox Control with Default Behavior\nDESCRIPTION: Examples showing how to call the validate() method without parameters or with the silent parameter explicitly set to false, which triggers validation events and visual modifications.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/checkbox/checkbox_validate_method.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"checkbox\").validate(); // -> true/false\nform.getItem(\"checkbox\").validate(false); // -> true/false\n```\n\n----------------------------------------\n\nTITLE: Hiding a Colorpicker Control in DHTMLX Form (JavaScript)\nDESCRIPTION: This code demonstrates how to hide a Colorpicker control in a DHTMLX Form. The method first gets a reference to the specific colorpicker form item and then calls the hide() method on it to make it invisible.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/colorpicker/colorpicker_hide_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"colorpicker\").hide();\n```\n\n----------------------------------------\n\nTITLE: Getting Custom Colors from JavaScript ColorPicker\nDESCRIPTION: Demonstrates setting custom colors and then retrieving them using the getCustomColors() method. The method returns an array of Hex color codes.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/colorpicker/manipulating_colorpicker.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ncolorpicker.setCustomColors([\"#f2f2f2\",\"#8ac5d9\",\"#ec9875\",\"#7a8523\"]);\n\ncolorpicker.getCustomColors();\n// -> [\"#f2f2f2\",\"#8ac5d9\",\"#ec9875\",\"#7a8523\"]\n```\n\n----------------------------------------\n\nTITLE: Creating Two-State NavItems in JavaScript\nDESCRIPTION: Demonstrates how to create NavItems with two states (active/inactive) using the twoState and active properties.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/toolbar/navitem.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    type: \"navItem\",\n    icon: \"dxi dxi-format-bold\",\n    tooltip: \"bold text\",\n    twoState: true, active: false\n}\n```\n\n----------------------------------------\n\nTITLE: Attaching Toolbar to Layout Cell\nDESCRIPTION: Shows how to attach the configured toolbar to a specific cell in the layout using the attach() method. The toolbar is attached to a cell with the ID 'toolbar-cell'.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tutorial/basic_application/step3.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nlayout.cell(\"toolbar-cell\").attach(toolbar);\n```\n\n----------------------------------------\n\nTITLE: Event Handling for Slider's Change Event in JavaScript\nDESCRIPTION: This example demonstrates how to attach an event handler to the change event of a Slider component. The handler logs the new value of the slider to the console whenever the value changes.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/slider/api/slider_change_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nslider.events.on(\"change\", function(value, oldValue, isRange){\n    console.log(\"The value of a slider has changed to \"+slider.getValue());\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Toggle Control with Value in JavaScript DHTMLX Form\nDESCRIPTION: This example illustrates how to set up a Toggle control with a specific value in a DHTMLX Form. It shows that when the 'selected' property is false and a value is specified, getValue() returns an empty string.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/toggle/toggle_getvalue_method.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst form = new dhx.Form(\"form_container\", {\n    rows: [\n        {\n            name: \"toggle\",\n            type: \"toggle\",\n            icon: \"dxi dxi-eye\",\n            offIcon: \"dxi dxi-eye-off\",\n            text: \"Visible\",\n            offText: \"Invisible\",\n            selected: false,\n            value: \"toggle_value\"\n        }\n    ]\n});\n\nconst value = form.getItem(\"toggle\").getValue(); // -> \"\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Template in DHTMLX Tree\nDESCRIPTION: Demonstrates how to create a custom template for Tree items using a callback function. The template includes a value display and a remove button with an icon, applying only to non-folder items.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree/api/tree_template_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst tree = new dhx.Tree(\"tree_container\", {\n    template: ({ value }, isFolder) => {\n        const template = `\n            <div class=\"dhx_tree_template\">\n                <span class=\"dhx_tree_template__value\">${value}</span>\n                <div class=\"dhx_tree_template__rows\">\n                    <button class=\"dhx_tree_template__button remove\">\n                        <i class=\"far fa-trash-alt dhx_tree_template__icon dhx_tree_template__icon--danger\"></i>\n                    </button>\n                </div>\n            </div>\n        `\n        return isFolder ? null : template;\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Focus on a List Item in DHTMLX JavaScript List\nDESCRIPTION: This example demonstrates how to use the setFocus() method to set focus on a specific list item by its ID. The method will also automatically scroll to the focused item. Note that keyboard navigation must be enabled for this method to work.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/list/api/list_setfocus_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlist.setFocus(\"item_id\");\n```\n\n----------------------------------------\n\nTITLE: Applying Predefined DHTMLX CSS Classes to Slider\nDESCRIPTION: This example shows how to use DHTMLX's built-in CSS classes to style the Slider component. It applies the 'dhx_widget--bg_white' class to set a white background for the slider.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/slider/api/slider_css_config.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst slider = new dhx.Slider(\"slider_container\", {\n    css: \"dhx_widget--bg_white\"\n});\n```\n\n----------------------------------------\n\nTITLE: Handling afterAdd Event in DHTMLX DataCollection\nDESCRIPTION: Example showing how to attach an event handler to the afterAdd event of a DataCollection component. The handler receives the newly added item as a parameter and logs a message to the console.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/data_collection/api/datacollection_afteradd_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncomponent.data.events.on(\"afterAdd\", function(newItem){\n    console.log(\"A new item is added\");\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Grid Row Drop Event in JavaScript\nDESCRIPTION: Example showing how to handle the beforeRowDrop event in DHTMLX Grid. The event fires before a dragged row is dropped and allows preventing the default drop action by returning false.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_beforerowdrop_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngrid.events.on(\"beforeRowDrop\", (data, event) => {\n    // your logic here\n    return false;\n});\n```\n\n----------------------------------------\n\nTITLE: Using setProperties() Method with Spacer Control in DHTMLX Form\nDESCRIPTION: This example demonstrates how to dynamically change the height of a Spacer control in a DHTMLX Form. The method accepts an object containing the properties to be updated.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/spacer/spacer_setproperties_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"spacer\").setProperties({\n    height: \"50px\"\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring HTML Rendering in DHTMLX List (JavaScript)\nDESCRIPTION: This snippet demonstrates how to use the htmlEnable config to disable HTML rendering in a DHTMLX List component. It also shows a custom template function for formatting list items.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/list/api/list_htmlenable_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n//specifies a template for List items\nfunction template(item) {\n    let template = \"<div class='item_name' style='font-weight: 500'>\" + item.title;\n    template += \"</div>\";\n    template += \"<div class='item_author'>\";\n    template += item.authors + \", \";\n    template += item.publication_date.split(\"/\")[2] + \"</div>\";\n    return template;\n};\n\nconst list = new dhx.List(\"list_container\", {\n    htmlEnable: false, // disables render of HTML content\n    template: template,\n    data: data\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling a Tab in DHTMLX Tabbar - JavaScript\nDESCRIPTION: Shows how to enable a tab using enableTab() with the id 'London'. Tabbar instance must be present, and 'London' must match a valid tab id. This method restores interactivity to a previously disabled tab, allowing user access.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tabbar/work_with_tabbar.md#2025-04-22_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\ntabbar.enableTab(\\\"London\\\");\n```\n\n----------------------------------------\n\nTITLE: Handling Inverted Slider Values in JavaScript\nDESCRIPTION: Explains how the getValue() method handles cases where the slider value is set as an array with the first number greater than the second. It returns the values in ascending order.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/slider/usage.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// sets value as an array (the first number is greater than the second one)\nslider.setValue([50,20]);\n\n// returns an array of numbers (the numbers are ascending)\nconst value = slider.getValue(); // -> [20,50]\n```\n\n----------------------------------------\n\nTITLE: Applying Custom CSS Classes to Layout Cells in JavaScript\nDESCRIPTION: Shows how to apply custom CSS classes to Layout cells using the 'css' property in the cell configuration. Multiple classes can be specified by separating them with spaces.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/layout/customization.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst layout = new dhx.Layout(\"layout_container\",{\n    row: [\n        {\n            header: \"Sub Block Header row\",\n            css:\"my_first_class my_second_class\"\n        }\n    ]    \n});\n```\n\n----------------------------------------\n\nTITLE: Handling DataView Right Click Events in JavaScript\nDESCRIPTION: Example showing how to attach an event handler for right-click interactions on DataView items. The handler receives the item ID and the native MouseEvent object as parameters.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/dataview/api/dataview_itemrightclick_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndataview.events.on(\"itemRightClick\", function(id, e){\n    // your code here\n});\n```\n\n----------------------------------------\n\nTITLE: Adding MenuItem to DHTMLX Menu\nDESCRIPTION: This snippet demonstrates how to add a MenuItem control to a DHTMLX Menu using the add() method of Tree Collection. The MenuItem includes sub-items and a separator.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/menu/configuring_menu_items.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmenu.data.add({\n    type:\"menuItem\", value:\"Menu\", items:[\n        { type:\"menuItem\", value:\"Option 1\" },\n        { type:\"menuItem\", value:\"Option 2\" },\n        { type:\"separator\"},\n        { type:\"menuItem\", value:\"Option Infinite\" }\n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling/Disabling a DHTMLX Ribbon Button (JavaScript)\nDESCRIPTION: Shows how to enable or disable a specific DHTMLX Ribbon Button programmatically using the `ribbon.enable()` and `ribbon.disable()` methods. The ID of the target button must be passed as an argument.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/ribbon/button.md#2025-04-22_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nribbon.enable(id);\nribbon.disable(id);\n```\n\n----------------------------------------\n\nTITLE: Setting Initial Calendar Date\nDESCRIPTION: Sets the initial date shown in the calendar to January 1, 2019, using the date property.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar2/configuring.mdx#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar calendar = new dhx.Calendar(\"calendar_container\", {\n    date: new Date(2019, 0, 1)\n});\n```\n\n----------------------------------------\n\nTITLE: Handling beforeValidate Event in DHTMLX Form Select Control\nDESCRIPTION: This example demonstrates how to attach an event handler to the beforeValidate event of a Select control in a DHTMLX Form. The handler logs the value being validated and returns true to allow the default validation to proceed.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/select/select_beforevalidate_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"select\").events.on(\"beforeValidate\", function(value) {\n    console.log(\"beforeValidate\", value);\n    return true;\n});\n```\n\n----------------------------------------\n\nTITLE: Disabling a Specific RadioGroup Element in DHTMLX Form\nDESCRIPTION: This example demonstrates how to disable a specific radio button element within a RadioGroup control by passing its ID to the disable() method.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/radiogroup/radiogroup_disable_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"radiogroup\").disable(\"id_1\");\n```\n\n----------------------------------------\n\nTITLE: Getting Avatar Control Value in DHTMLX Form\nDESCRIPTION: This snippet shows how to retrieve the value of an Avatar control in a DHTMLX Form using the getItem() method.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/avatar.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst value = form.getItem(\"avatar\").getValue();\n```\n\n----------------------------------------\n\nTITLE: Removing CSS Class from Grid Row in JavaScript\nDESCRIPTION: Demonstrates how to remove a custom CSS class from a specific row in a DHTMLX Grid. Takes row ID and CSS class name as parameters.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_removerowcss_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngrid.removeRowCss(\"2\", \"myCustomClass\");\n```\n\n----------------------------------------\n\nTITLE: Handling focus Event for Slider in DHTMLX Form (JavaScript)\nDESCRIPTION: This code demonstrates how to attach an event handler to the focus event of a Slider control in a DHTMLX Form. The handler logs the current value of the slider when it receives focus.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/slider/slider_focus_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"slider\").events.on(\"focus\", (value) => {\n    console.log(\"focus\", value);\n});\n```\n\n----------------------------------------\n\nTITLE: Defining DHTMLX Toolbar MenuItem Structure in JavaScript\nDESCRIPTION: This snippet illustrates the JavaScript object structure used to define a `menuItem` control within the DHTMLX Toolbar's data configuration array. It outlines required (`type`) and optional properties like `id`, `parent`, `value`, `items` (for nested menus), visual attributes (`icon`, `count`, `tooltip`, `html`), behavioral flags (`multiClick`), and state (`disabled`, `hidden`). The `items` array can contain other menu-related elements (`ISpacer`, `ISeparator`, `IMenuItem`).\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/toolbar/api/api_menuitem_properties.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nconst data = [\n    {\n        type: \"menuItem\",\n        id?: string | number,\n        parent?: string,\n        value?: string,\n        items?: IMenuElement[], // ISpacer | ISeparator | IMenuItem\n\n        count?: number,\n        countColor?: \"danger\" | \"secondary\" | \"primary\" | \"success\",\n        hotkey?: string,\n        html?: string,\n        icon?: string,\n        multiClick?: boolean,\n        tooltip?: string,\n\n        css?: string | string[],\n        disabled?: boolean,\n        hidden?: boolean,\n    },\n    // more Toolbar controls\n]\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX Layout with Header Icon\nDESCRIPTION: Demonstrates how to create a new Layout instance with a cell that includes a header icon using the 'dxi dxi-check' icon class.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/layout/api/cell/layout_cell_headericon_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst layout = new dhx.Layout(\"layout_container\", {\n    cols: [\n        { header:\"Cell header\", headerIcon:\"dxi dxi-check\"}\n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Controls to a DHTMLX Ribbon Block Programmatically in JavaScript\nDESCRIPTION: Illustrates adding individual controls (a button and an iconButton) to a previously created Ribbon Block ('files') using the `ribbon.data.add()` method. The method takes the control's configuration object, the index for insertion (-1 appends to the end), and the target block's ID.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/ribbon/block.md#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nribbon.data.add({\n    type:\"button\",\n    icon:\"dxi dxi-plus\",\n    value:\"New\"\n},-1,\"files\");\n```\n\nLANGUAGE: js\nCODE:\n```\nribbon.data.add({\n    type:\"iconButton\",\n    icon:\"dxi dxi-file\"\n},-1,\"files\");\n```\n\n----------------------------------------\n\nTITLE: Getting Active Tab ID in DHTMLX Tabbar (JavaScript)\nDESCRIPTION: This snippet demonstrates how to initialize a DHTMLX Tabbar with multiple tabs and then use the getActive() method to retrieve the id of the currently active tab. The method returns a string representing the id of the active tab.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tabbar/api/tabbar_getactive_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst tabbar = new dhx.Tabbar(\"tabbar_container\", {\n    mode: \"top\",            \n    views:[\n        { id: \"1\", tab: \"tab-1\", css:\"panel flex\"},\n        { id: \"2\", tab: \"tab-2\", css:\"panel flex\"},\n        { id: \"3\", tab: \"tab-3\", css:\"panel flex\"},\n        { id: \"4\", tab: \"tab-4\", css:\"panel flex\"}\n    ]\n});\n\nconst active = tabbar.getActive(); // -> \"2\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Calendar with Date Array\nDESCRIPTION: Example of creating a calendar instance with a date selected using an array containing a Date object.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar/api/calendar_value_config.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst calendar = new dhx.Calendar(\"calendar_container\", {\n    value: [new Date(2019,01,10)]\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Form Padding and Controls\nDESCRIPTION: Shows how to set padding for Form groups and configure checkbox controls with specific layouts\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/configuration.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst form = new dhx.Form(\"form_container\", {\n    css: \"dhx_widget--bordered\",\n    padding: \"20px\",  // sets padding for rows \n    rows: [\n        {\n            type: \"text\",\n            name: \"text\",\n            value: \"Do you agree with our terms and conditions?\"\n        },\n        {\n            padding: \"10px\", // sets padding for cols\n            cols: [{\n                type: \"checkbox\",\n                width: \"80px\", \n                label: \"I agree\",\n                name: \"agree\",\n                checked: true\n            },\n            {\n                type: \"checkbox\",\n                label: \"I disagree\",\n                name: \"align\",\n            }]\n        }\n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Keydown Events in DHTMLX Form Colorpicker\nDESCRIPTION: Example showing how to attach a keydown event listener to a Colorpicker control in a DHTMLX Form. The event fires whenever any key is pressed while the Colorpicker is focused and provides access to the native KeyboardEvent object.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/colorpicker/colorpicker_keydown_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"colorpicker\").events.on(\"keydown\", function(event) {\n    console.log(event);\n});\n```\n\n----------------------------------------\n\nTITLE: Attaching a Click Event Handler to DHTMLX Toolbar in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to attach an event listener to the 'click' event of a DHTMLX Toolbar instance (assumed to be named `toolbar`). The handler function receives the `id` of the clicked toolbar control and the native `Event` object (`e`) as arguments. In this example, it logs the `id` of the clicked control to the browser's console. It requires an existing DHTMLX Toolbar instance named `toolbar`.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/toolbar/api/toolbar_click_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntoolbar.events.on(\"click\", function(id,e){\n    console.log(id);\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Treemap Chart with Groups in DHTMLX\nDESCRIPTION: Configuration for creating Treemap charts with grouped data. Includes setup for hierarchical data structure, styling and legend configuration.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/chart/configuration_properties.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst treeMapData = [\n    { id: \"2021\", name: \"2021\" },\n    { id: \"100\", value: 50, name: \"Outsourcing team\", parent: \"2021\" },\n    { id: \"101\", value: 100, name: \"Product team\", parent: \"2021\" },\n    { id: \"102\", value: 10, name: \"QA team\", parent: \"2021\" },\n    \n    { id: \"2020\", name: \"2020\" },\n    { id: \"200\", value: 32, name: \"Outsourcing team\", parent: \"2020\" },\n    { id: \"201\", value: 4, name: \"QA team\", parent: \"2020\" },\n    { id: \"202\", value: 35, name: \"Product team\", parent: \"2020\" },\n];\n\nconst config = {\n    type: \"treeMap\",\n    series: [\n        {\n            value: \"value\",\n            text: \"name\",\n            stroke: \"#eeeeee\",\n            strokeWidth: 1,\n            tooltipTemplate: item => `${item[1]}: ${item[0]} employees`,\n            direction: \"desc\",\n        }\n    ],\n    legend: {\n        type: \"groupName\",\n        treeSeries: [\n            { id: \"2021\", color: \"#2A9D8F\" },\n            { id: \"2020\", color: \"#78586F\" },\n            { id: \"2019\", color: \"#E76F51\" },\n            { id: \"2018\", color: \"#E5A910\" },\n            { id: \"2017\", color: \"#11A3D0\" },\n        ],\n        halign: \"right\",\n        valign: \"bottom\",\n    },\n    data: treeMapData\n};\n\nconst chart = new dhx.Chart(\"chart_container\", config);\n```\n\n----------------------------------------\n\nTITLE: Checking Button Disabled State in DHTMLX Form (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to use the isDisabled() method to check if a Button control in a DHTMLX Form is disabled. The method returns a boolean value indicating the disabled state of the button.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/button/button_isdisabled_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nform.getItem(\"button\").isDisabled();\n// -> true/false\n```\n\n----------------------------------------\n\nTITLE: Setting Input State in JavaScript\nDESCRIPTION: Demonstrates how to initialize an input with an ID and then set its value using setState() method.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/ribbon/input.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    type: \"input\",\n    id:\"search\",\n    value: \"\"\n}\n...\nribbon.setState({search:\"Summer\"});\n```\n\n----------------------------------------\n\nTITLE: Styling Individual List Items in JavaScript\nDESCRIPTION: Demonstrates how to apply custom styles to specific items in a DHTMLX List, in this case styling every even item with a gray background.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/list/customization.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<style>\n    .bg-gray {\n        background: #faf9f9;\n    }\n</style>\n\n<script>\n    const list = new dhx.List(\"list_container\");\n    list.data.parse(dataset);\n\n    list.data.map(function (item, i) {\n        if (!(i % 2)) {\n            list.data.update(item.id, {css: \"bg-gray\"})\n        }\n    });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX Calendar with Single Date Value (JavaScript)\nDESCRIPTION: Creates a new Calendar instance with a single date selected. The value is set using a Date object.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar2/api/calendar_value_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar calendar = new dhx.Calendar(\"calendar_container\", {\n    value: new Date(2019,01,10)\n});\n```\n\n----------------------------------------\n\nTITLE: Event Handling with Common Syntax in TreeCollection\nDESCRIPTION: Example showing how to attach an event listener to TreeCollection using the common syntax via the data object of a component\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree_collection/index.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nmenu.data.events.on(\"afterAdd\", function(newItem){\n    console.log(\"A new item is added\");\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Upload Progress Event Handler in DHTMLX Form\nDESCRIPTION: Shows how to attach an event listener to monitor upload progress of an Avatar control in a DHTMLX Form. The event handler receives the upload progress percentage and current control value.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/avatar/avatar_uploadprogress_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"avatar\").events.on(\"uploadProgress\", (progress, value) => {\n    console.log(\"uploadProgress\", progress, value);\n});\n```\n\n----------------------------------------\n\nTITLE: Disabling Fullscreen Mode for DHTMLX Window using JavaScript\nDESCRIPTION: This snippet demonstrates how to deactivate the fullscreen mode for a DHTMLX Window instance using the `unsetFullScreen()` method. This reverts the window to its previous size and position. Requires an existing `dhxWindow` instance.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/window/usage.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ndhxWindow.unsetFullScreen();\n```\n\n----------------------------------------\n\nTITLE: Handling modeChange Event in DHTMLX Calendar (JavaScript)\nDESCRIPTION: This code demonstrates how to attach an event handler to the modeChange event of a DHTMLX Calendar component. The handler logs the newly selected calendar mode to the console when the mode changes.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar/api/calendar_modechange_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncalendar.events.on(\"modeChange\", function(mode) {\n   console.log(\"Selected mode: \" + mode);\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing beforeShow Event Handler for DHTMLX Form Slider\nDESCRIPTION: Example showing how to attach a beforeShow event listener to a Slider form control. The event fires before the control becomes visible and can prevent showing by returning false. The handler receives the current slider value as an array parameter.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/slider/slider_beforeshow_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"slider\").events.on(\"beforeShow\", function(value) {\n    console.log(\"beforeShow\", value);\n    return true;\n});\n```\n\n----------------------------------------\n\nTITLE: Adding SelectButton to Toolbar in JavaScript\nDESCRIPTION: This snippet demonstrates how to add a SelectButton control to a Toolbar using the add() method of Tree Collection. The example creates a SelectButton with 4 selectable options, each with an associated hotkey.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/toolbar/selectbutton.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntoolbar.data.add(\n    {\n        id: \"title\",\n        value: \"Select count or use alt+num\"\n    },\n    {\n           id: \"currentButton\",\n        type: \"selectButton\",\n        value: \"1\",\n        items: [\n              {\n                value: \"1\",\n                hotkey: \"alt+1\"\n              },\n              {\n                value: \"2\",\n                hotkey: \"alt+2\"\n              },\n              {\n                value: \"3\",\n                hotkey: \"alt+3\"\n              },\n              {\n                value: \"4\",\n                hotkey: \"alt+4\"\n              }\n        ]\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Using getText() to retrieve masked input values in DHTMLX Form\nDESCRIPTION: Example showing how to use the getText() method to retrieve the text value of an input with applied mask formatting. The example demonstrates the difference between getValue() which returns the raw value and getText() which returns the formatted value with numberMask/patternMask applied.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/input/input_gettext_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst input = form.getItem(\"input\");\ninput.setValue(1000.01);\n\ninput.getValue(); // 1000.01 for the input type number\ninput.getValue(); // \"1000.01\" for the input type string\n\ninput.getText(); // \"1,000.01\" with the applied numberMask/patternMask\n```\n\n----------------------------------------\n\nTITLE: Handling Year Selection in DHTMLX Calendar (JavaScript)\nDESCRIPTION: Example of attaching an event handler to the YearSelected event of a DHTMLX Calendar. This event fires when a user selects a year, providing the selected year as a parameter.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar2/api/calendar_yearselected_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncalendar.events.on(\"YearSelected\", function(year) {\n    console.log(\"Selected year: \" + year);\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Grid Column Resizable Property in JSX\nDESCRIPTION: A type definition showing the resizable property configuration for Grid columns. The property accepts a boolean value to enable or disable column resizing.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/gridcolumn_properties/gridcolumn_resizable_property.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nresizable?: boolean;\n```\n\n----------------------------------------\n\nTITLE: Showing and Hiding Title Control in DHTMLX Toolbar\nDESCRIPTION: This code snippet shows how to use the show() and hide() methods to toggle the visibility of a Title control in a DHTMLX toolbar. The methods require the id of the Title control as a parameter.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/toolbar/title.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ntoolbar.show(id);\ntoolbar.hide(id);\n```\n\n----------------------------------------\n\nTITLE: Attaching Context Menu to HTML Element in JavaScript and HTML\nDESCRIPTION: Demonstrates how to attach dhtmlxContextMenu to an HTML element and show it on right-click. Prevents default context menu behavior.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/menu/creating_context_menu.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"menu\"></div>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst cmenu = new dhx.ContextMenu(null, {css: \"dhx_widget--bg_gray\"});\n\ndocument.querySelector('#menu').oncontextmenu = function(e) {    \n    e.preventDefault();\n    cmenu.showAt('menu', 'right');\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Only Current Month Days\nDESCRIPTION: Configures the calendar to show only the days of the current month, hiding days from previous and next months that might appear in the view.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar2/configuring.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar calendar = new dhx.Calendar(\"calendar_container\", {\n    thisMonthOnly:true\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Input Focus Event in DHTMLX Form\nDESCRIPTION: Demonstrates how to attach an event handler to the focus event of a Form Input control. The handler receives the current value of the input when it gains focus.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/input/input_focus_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"input\").events.on(\"focus\", (value) => {\n    console.log(\"focus\", value);\n});\n```\n\n----------------------------------------\n\nTITLE: Loading External JSON Data into DHTMLX Ribbon in JavaScript\nDESCRIPTION: Loads data into an existing DHTMLX Ribbon instance (`ribbon`) from an external JSON file located at the specified path. The `ribbon.data.load()` method initiates an asynchronous AJAX request to fetch and parse the JSON data, populating the ribbon upon successful retrieval.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/ribbon/data_loading.md#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nribbon.data.load(\"[path to this file]/file.json\");\n```\n\n----------------------------------------\n\nTITLE: Calling Custom Event on Menu in JavaScript\nDESCRIPTION: Illustrates how to call a custom event on a Menu component using the events.fire() method. This method allows triggering custom events with optional arguments.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/menu/handling_events.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmenu.events.fire(evName,[args]);\n```\n\n----------------------------------------\n\nTITLE: Handling beforeHide Event for Input Control in DHTMLX Form\nDESCRIPTION: This code snippet demonstrates how to attach an event handler to the 'beforeHide' event of an Input control in a DHTMLX Form. The handler logs the current value and initialization state, and returns true to allow the control to be hidden.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/input/input_beforehide_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"input\").events.on(\"beforeHide\", function(value, init) {\n    console.log(\"beforeHide\", value, init);\n    return true;\n});\n```\n\n----------------------------------------\n\nTITLE: Hiding a Container Control in DHTMLX Form\nDESCRIPTION: This snippet demonstrates how to hide a Container control in a DHTMLX Form by accessing the container through the form's getItem() method and calling the hide() method on it.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/container/container_hide_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"container\").hide();\n```\n\n----------------------------------------\n\nTITLE: Destroying Datepicker Instance in DHTMLX Form - JavaScript\nDESCRIPTION: Demonstrates how to use the destructor method to remove a Datepicker instance from a form and release occupied resources. The method is called on a specific Datepicker form item retrieved using the getItem method.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/calendar/calendar_destructor_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"datepicker\").destructor();\n```\n\n----------------------------------------\n\nTITLE: Handling keydown Events in DHTMLX Sidebar (JavaScript)\nDESCRIPTION: This example demonstrates how to attach an event handler to the keydown event of a DHTMLX Sidebar component. The handler logs the pressed key to the console whenever a key is pressed while a Sidebar option is in focus.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/sidebar/api/sidebar_keydown_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsidebar.events.on(\"keydown\", function(event, id) {\n    console.log(\"You've pressed the key: \" + event.key);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Container for DHTMLX Menu in HTML\nDESCRIPTION: This snippet demonstrates how to add a container div for the DHTMLX Menu in the HTML body.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/menu/how_to_start.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"menu_container\"></div>\n```\n\n----------------------------------------\n\nTITLE: Defining Custom CSS Classes for DHTMLX Messages in JavaScript\nDESCRIPTION: This snippet demonstrates how to define new CSS classes within a HTML <style> block for use with DHTMLX message boxes and tooltips. These classes contain user-defined style rules and should be placed in the HTML document or imported via external stylesheets. The sample does not include actual style properties, so users must provide desired CSS rules for customization.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/message/customization.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<style>\\n    .my_first_class {\\n        /*some styles*/\\n    }\\n    \\n    .my_second_class {\\n        /*some styles*/\\n    }\\n</style>\\n\n```\n\n----------------------------------------\n\nTITLE: Configuring numberMask for Grid Column in JavaScript\nDESCRIPTION: This code snippet demonstrates how to configure the numberMask property for a Grid column. It sets up a mask for number input with various options like prefix, separators, and length constraints.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/gridcolumn_properties/gridcolumn_numbermask_property.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst grid = new dhx.Grid(\"grid_container\", {\n    columns: [\n        {\n            id: \"cost\",\n            header: [{ text: \"Cost\" }],\n            numberMask: {\n                prefix: \"$\",\n                groupSeparator: \",\",\n                decSeparator: \".\",\n                maxIntLength: 7,\n                maxDecLength: 2,\n                minDecLength: 0\n            },\n        },\n        // more columns configuration objects\n    ],\n    // more options\n});\n```\n\n----------------------------------------\n\nTITLE: Using setProperties() Method in Simple Vault\nDESCRIPTION: Example showing how to change label width and position properties of a Simple Vault control using setProperties() method.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/simplevault/simplevault_setproperties_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"simplevault\").setProperties({\n    labelWidth: \"140px\", \n    labelPosition: \"top\"\n});\n```\n\n----------------------------------------\n\nTITLE: DataCollection beforeGroup Event Usage Example\nDESCRIPTION: Example showing how to attach an event listener for the beforeGroup event to handle data grouping.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/data_collection/api/datacollection_beforegroup_event.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncomponent.data.events.on(\"beforeGroup\", (config) => {\n    console.log(\"Grouping starts:\", config);\n    return true; // continue grouping\n});\n```\n\n----------------------------------------\n\nTITLE: Including Font Awesome Icons with DHTMLX Toolbar\nDESCRIPTION: Code example showing how to include Font Awesome icon pack alongside DHTMLX Toolbar by adding the Font Awesome CDN link after the Toolbar source files.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/toolbar/customization.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"text/javascript\" src=\"../../codebase/toolbar.js\"></script>\n<link rel=\"stylesheet\" href=\"../../codebase/toolbar.css\">\n\n<link rel=\"stylesheet\" href=\"https://use.fontawesome.com/releases/v5.5.0/css/all.css\" \n    integrity=\"sha384-B4dIYHKNBt8Bc12p+WXckhzcICo0wtJAoU8YZTY5qE0Id1GSseTk6S+L3BlXeVIU\" \n    crossorigin=\"anonymous\">\n```\n\n----------------------------------------\n\nTITLE: Setting Toggle State in DHTMLX Form\nDESCRIPTION: Demonstrates how to use the setValue() method to set the state of a Toggle control in a DHTMLX Form. The method takes a boolean parameter to set the toggle state to either true (checked) or false (unchecked).\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/toggle/toggle_setvalue_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"toggle\").setValue(true);\n```\n\n----------------------------------------\n\nTITLE: Initializing Layout with Gravity in JavaScript\nDESCRIPTION: This snippet demonstrates how to initialize a DHTMLX Layout with the gravity property applied to different cells. The gravity values determine the relative sizes of the cells within the same row.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/layout/api/cell/layout_cell_gravity_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst layout = dhx.Layout(\"layout_container\", {\n    css: \"dhx_widget--bordered\",\n    rows: [\n        {\n            id: \"1\",\n            cols: [\n                {\n                    id: \"1.1\",\n                    css: \"dhx_layout-cell--border_left dhx_layout-cell--border_right\",\n                    html: \"1.1\",\n                    gravity: 2\n                },\n                {\n                    id: \"1.2\",\n                    css: \"dhx_layout-cell--border_left dhx_layout-cell--border_right\",\n                    html: \"1.2\",\n                    gravity: 1 \n                },\n                {\n                    id: \"1.3\",\n                    css: \"dhx_layout-cell--border_left dhx_layout-cell--border_right\",\n                    html: \"1.3\",\n                    gravity: 3\n                }\n            ]\n        }\n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Checkbox Properties in DHTMLX Form\nDESCRIPTION: Comprehensive configuration object for initializing a checkbox control in DHTMLX Form. Includes properties for basic functionality, styling, labels, and validation messages.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/checkbox/api_checkbox_properties.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    type: \"checkbox\",\n    name?: string,\n    id?: string,\n    value?: string,\n    checked?: boolean, // false by default\n    text?: string,\n\n    css?: string,\n    disabled?: boolean, // false by default\n    height?: string | number | \"content\", // \"content\" by default\n    hidden?: boolean, // false by default\n    padding?: string | number, \n    required?: boolean, // false by default\n    width?: string | number | \"content\", // \"content\" by default\n\n    hiddenLabel?: boolean, // false by default\n    label?: string,\n    labelPosition?: \"left\" | \"top\", // \"top\" by default\n    labelWidth?: string | number,\n\n    helpMessage?: string,\n    preMessage?: string,\n    successMessage?: string,\n    errorMessage?: string,\n}\n```\n\n----------------------------------------\n\nTITLE: Adding ImageButton to a DHTMLX Toolbar in JavaScript\nDESCRIPTION: This code snippet demonstrates how to add an ImageButton to a toolbar using the add() method of Tree Collection. The example creates an ImageButton with a count of 10 and a custom image source.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/toolbar/image_button.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntoolbar.data.add({\n    type: \"imageButton\",\n    count: 10,\n    src: \"../img/avatar.png\"\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX Calendar with Month Mode in JavaScript\nDESCRIPTION: This example demonstrates how to initialize a DHTMLX Calendar component with the 'month' mode. The 'mode' parameter determines the initial view of the calendar when rendered.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar/api/calendar_mode_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst calendar = new dhx.Calendar(\"calendar_container\", {\n    mode: \"month\"\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Grid Row Drag Events in JavaScript\nDESCRIPTION: Example showing how to attach an event handler for the beforeRowDrag event in DHTMLX Grid. The handler can prevent row dragging by returning false.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_beforerowdrag_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngrid.events.on(\"beforeRowDrag\", (data, event) => {\n    // your logic here\n    return false;\n});\n```\n\n----------------------------------------\n\nTITLE: Checking Toggle Selection State in DHTMLX Form\nDESCRIPTION: Demonstrates how to check if a Toggle control is in selected state using the isSelected() method. The method returns a boolean value indicating whether the toggle is pressed (true) or not (false).\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/toggle/toggle_isselected_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"toggle\").isSelected(); // -> true/false\n```\n\n----------------------------------------\n\nTITLE: Using the destructor() Method with DHTMLX Chart in JavaScript\nDESCRIPTION: This example demonstrates how to call the destructor method on a chart instance to remove it and release occupied resources.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/chart/api/chart_destructor_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nchart.destructor();\n```\n\n----------------------------------------\n\nTITLE: Handling Window beforeHide Event in JavaScript\nDESCRIPTION: Example showing how to attach an event handler to the beforeHide event of a DHTMLX Window. The handler receives the window position coordinates and event object, and must return a boolean to control window hiding behavior.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/window/api/window_beforehide_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndhxWindow.events.on(\"beforeHide\", function(position, events){\n    console.log(\"A window will be hidden\", events);\n    return true;\n});\n```\n\n----------------------------------------\n\nTITLE: Handling beforeHide Event in DHTMLX Form Radiogroup\nDESCRIPTION: This example demonstrates how to attach an event handler to the beforeHide event of a Radiogroup control in a DHTMLX Form. The handler logs the current value, radio button ID, and initialization status to the console, and returns true to allow the hiding action to proceed.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/radiogroup/radiogroup_beforehide_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"radiogroup\").events.on(\"beforeHide\", function(value, id, init) {\n    console.log(\"beforeHide\", value, id, init);\n    return true;\n});\n```\n\n----------------------------------------\n\nTITLE: Setting rootId in DHTMLX Tree Initialization (JavaScript)\nDESCRIPTION: This snippet demonstrates how to set the rootId property when initializing a DHTMLX Tree component. The rootId is used to set a custom id for the root element of the tree.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree/api/tree_rootid_config.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst tree = new dhx.Tree(null, {\n    rootId: \"root\"\n});\n```\n\n----------------------------------------\n\nTITLE: Handling afterDrop Event in DHTMLX List (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to attach an event handler to the afterDrop event of a DHTMLX List component. The event fires before the user has finished dragging an item but after the mouse button is released. It provides data about the drag operation and the associated mouse event.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/list/api/list_afterdrop_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlist.events.on(\"afterDrop\", function(data, events) {\n    // your logic here\n});\n```\n\n----------------------------------------\n\nTITLE: Grid getSummary Method TypeScript Interface\nDESCRIPTION: TypeScript interface definition for the summary list object returned by getSummary method\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_getsummary_method.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ISummaryList {\n    [key: string]: string | number | null;\n}\n\ngetSummary(colId?: string | number): ISummaryList;\n```\n\n----------------------------------------\n\nTITLE: Interface Definition for Sorting States in TypeScript\nDESCRIPTION: TypeScript interface definition showing the structure of sorting state objects returned by getSortingStates(). Includes properties for sorting field, direction, conversion function, custom rule, and smart sorting flag.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/data_collection/api/datacollection_getsortingstates_method.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\ninterface ISortingState {\n    by: string | number, \n    dir: \"asc\" | \"desc\", \n    as?: (a) => any,\n    rule?: (a, b) => number, \n    smartSorting?: boolean \n}\n\ngetSortingStates(): ISortingState[];\n```\n\n----------------------------------------\n\nTITLE: Handling focus Event for CheckboxGroup in DHTMLX Form\nDESCRIPTION: Example of attaching an event handler to the focus event of a CheckboxGroup control. The event handler receives the current value object (containing checkbox states) and the ID of the focused checkbox.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/checkbox_group/checkboxgroup_focus_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"checkboxGroup\").events.on(\"focus\", (value, id) => {\n    console.log(\"focus\", value, id);\n});\n```\n\n----------------------------------------\n\nTITLE: Simplified Grid Unselect Event Handler in JavaScript\nDESCRIPTION: Demonstrates the simplified version of attaching the afterUnSelect event handler using the grid events API directly. This approach provides the same functionality as the selection events version.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/selection/selection_afterunselect_event.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ngrid.events.on(\"AfterUnSelect\", (row, column) => {\n    console.log(\"afterUnSelect\", row, column); \n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Multiple Item Selection and Drag-and-Drop in DHTMLX List\nDESCRIPTION: Configures List to allow selection and dragging of multiple items by enabling both dragMode and multiselection properties.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/list/configuration.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst list = new dhx.List(\"list_container\", { \n    dragMode:\"source\",\n    multiselection:true\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX Window with closable config\nDESCRIPTION: Creates a new DHTMLX Window instance with the ability to be closed. When enabled, this adds a Close icon in the top-right corner of the window.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/window/api/window_closable_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst dhxWindow = new dhx.Window({\n    closable:true\n});\ndhxWindow.show();\n```\n\n----------------------------------------\n\nTITLE: Validating Colorpicker in DHTMLX Form (JavaScript)\nDESCRIPTION: Demonstrates how to use the validate() method for a Colorpicker control in a DHTMLX Form. The method can validate either a specified value or the current value of the control, and can be run silently or with visual feedback and events.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/colorpicker/colorpicker_validate_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// the method validates the specified value\nform.getItem(\"colorpicker\").validate(true, \"#92E7DC\"); // -> true/false\n\n// the method validates the current value\nform.getItem(\"colorpicker\").validate(true); // -> true/false\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// the method validates the specified value\nform.getItem(\"colorpicker\").validate(false, \"#92E7DC\"); // -> true/false\n\n// the method validates the current value\nform.getItem(\"colorpicker\").validate(); // -> true/false\n```\n\n----------------------------------------\n\nTITLE: Event Signature Definition for beforeRowResize\nDESCRIPTION: TypeScript-style signature definition for the beforeRowResize event, showing parameter types and return value.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_beforerowresize_event.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nbeforeRowResize: (row: object, event: Event, currentHeight: number) => boolean | void;\n```\n\n----------------------------------------\n\nTITLE: Expanding a Layout Cell in JavaScript\nDESCRIPTION: This code snippet demonstrates how to use the expand() method to expand a collapsed cell in a DHTMLX Layout. The method is called on a specific cell obtained using the getCell() method.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/layout/api/cell/layout_cell_expand_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nlayout.getCell(\"id\").expand();\n```\n\n----------------------------------------\n\nTITLE: Calling the paint Method on a DHTMLX Window Instance in JavaScript\nDESCRIPTION: This code snippet demonstrates how to call the `paint()` method on an existing DHTMLX Window instance (referenced by `dhxWindow`). This method forces the window to redraw itself on the page, which can be necessary after certain programmatic changes to ensure the visual representation is up-to-date. The method takes no arguments and does not return a value (void).\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/window/api/window_paint_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndhxWindow.paint();\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX Menu in HTML and JavaScript\nDESCRIPTION: This snippet demonstrates how to set up an HTML page with the necessary DHTMLX Suite files, create a container for the Menu, and initialize the Menu object using JavaScript.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/menu/how_to_start.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n    <head>\n        <title>How to Start with DHTMLX Menu</title>         \n        <script type=\"text/javascript\" src=\"../../codebase/suite.js\"></script>\n        <link rel=\"stylesheet\" href=\"../../codebase/suite.css\">\n    </head>\n    <body>\n        <div id=\"menu_container\"></div>\n        <script>\n            // creating DHTMLX Menu\n            const menu = new dhx.Menu(\"menu_container\");\n        </script>\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Setting Color Value in DHTMLX Colorpicker - JavaScript\nDESCRIPTION: Demonstrates how to set a color value in Hex format using the setValue() method of the Colorpicker component. The method accepts a color code string in Hex format and updates the selected color in the colorpicker.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/colorpicker/api/colorpicker_setvalue_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncolorpicker.setValue(\"#BDF0E9\");\n```\n\n----------------------------------------\n\nTITLE: Including Standalone Calendar Source Files\nDESCRIPTION: HTML code showing how to include the necessary JavaScript and CSS files when using DHTMLX Calendar as a standalone component.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar/how_to_start.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<link type=\"text/css\" href=\"../codebase/calendar.css\">\n<script src=\"../codebase/calendar.js\" type=\"text/javascript\"></script>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Date Range as Date Objects\nDESCRIPTION: Example of getting a date range as an array of Date objects from a range-enabled calendar.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar/api/calendar_getvalue_method.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst date = calendar.getValue(true); \n// -> [Mon Jun 03 2019 00:00:00 GMT+0300, Wed Jun 19 2019 00:00:00 GMT+0300]\n```\n\n----------------------------------------\n\nTITLE: Adding MenuItem to Sidebar in JavaScript\nDESCRIPTION: This snippet demonstrates how to add a MenuItem with sub-items to a sidebar using the add() method of Tree Collection.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/sidebar/menuitem.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsidebar.data.add({\n    type:\"menuItem\", value:\"Sidebar menuItem\", tooltip: \"Press me\",  items:[\n        { type:\"menuItem\", value:\"Option 1\" },\n        { type:\"menuItem\", value:\"Option 2\" },\n        { type:\"separator\"},\n        { type:\"menuItem\", value:\"Option Infinite\" }\n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring tickTemplate for DHTMLX Slider in JavaScript\nDESCRIPTION: This snippet demonstrates how to initialize a DHTMLX Slider with a custom tickTemplate function. The function adds a degree symbol to each major tick value on the slider's scale.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/slider/api/slider_ticktemplate_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst slider = new dhx.Slider(\"slider_container\", { \n    // v is the value of majorTick\n    tickTemplate: function(v){\n        return v + \"°\";\n    } \n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Toggle Group Elements in DHTMLX Form\nDESCRIPTION: Example showing how to enable a specific toggle element within a ToggleGroup control using its ID. The method can be called on a ToggleGroup instance retrieved from a form.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/togglegroup/togglegroup_enable_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"ToggleGroup\").enable(\"toggle_1\");\n```\n\n----------------------------------------\n\nTITLE: Handling Focus Event in DHTMLX Combo Box\nDESCRIPTION: Example demonstrating how to attach an event listener for the focus event on a Combo Box component. The event fires when the Combo Box receives focus.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/combobox/api/combobox_focus_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncombobox.events.on(\"focus\", function() {\n    console.log(\"the focus is on the element\");\n});\n```\n\n----------------------------------------\n\nTITLE: Getting a Tab ID by Index in DHTMLX Tabbar - JavaScript\nDESCRIPTION: Illustrates how to retrieve the id of a Tabbar tab using the getId() method. Requires a Tabbar instance and the zero-based tab index as input. Returns the id string corresponding to the specified tab position. Useful for referencing tabs in further API calls.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tabbar/work_with_tabbar.md#2025-04-22_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst id = tabbar.getId(0);\n```\n\n----------------------------------------\n\nTITLE: Initializing DataView with Drag Mode Configuration\nDESCRIPTION: Example of creating a new DataView instance with drag-n-drop functionality enabled in 'source' mode. This allows items to be dragged out of the DataView but prevents items from being dropped into it.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/dataview/api/dataview_dragmode_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst dataview = new dhx.DataView(\"dataview_container\", { \n    dragMode:\"source\"\n});\n```\n\n----------------------------------------\n\nTITLE: Handling keydown Event in DHTMLX Form Textarea Control\nDESCRIPTION: This example demonstrates how to attach an event handler to the keydown event of a Textarea control in a DHTMLX Form. The handler logs the keyboard event to the console when any key is pressed while the Textarea has focus.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/textarea/textarea_keydown_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"textarea\").events.on(\"keydown\", function(event) {\n    console.log(event);\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Calendar to Year Mode\nDESCRIPTION: Configures a Calendar to display in 'year' mode where only years are shown, including the current one.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar2/configuring.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar calendar = new dhx.Calendar(\"calendar_container\", {\n    mode: \"year\"\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Sidebar Menu Expansion Event in JavaScript\nDESCRIPTION: Example showing how to attach an event handler to the openMenu event of a DHTMLX Sidebar. The event fires when a menu item is expanded and provides the ID of the opened menu item as a parameter.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/sidebar/api/sidebar_openmenu_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsidebar.events.on(\"openMenu\", function(id){\n    // your code here\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Custom Scroll for Specific Widget in JavaScript\nDESCRIPTION: This code demonstrates how to force recalculation and redrawing of the custom scroll for a specific DHTMLX widget.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/helpers/custom_scroll.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nlist.scrollView.update();\n```\n\n----------------------------------------\n\nTITLE: Adding Tooltips to Toolbar Controls\nDESCRIPTION: How to attach tooltip text to a toolbar control by including the tooltip property in the control's configuration object.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/toolbar/common_methods.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    type: \"text\",\n    value: \"test1\",\n    tooltip: \"tooltip for test1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Validation for Multi-select Combo in DHTMLX Form (JSX)\nDESCRIPTION: Shows how to set up validation for a multi-select combo control in a DHTMLX form, checking for specific selected values.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/work_with_form.md#2025-04-22_snippet_16\n\nLANGUAGE: jsx\nCODE:\n```\n{\n    name: \"combo\",\n    type: \"combo\",\n    multiselection: true,\n    value: [\"id:1\", 4],\n    data: [\n        { value: \"value: 1\", id: \"id:1\" },\n        { value: \"value: 2\", id: \"id:2\" },\n        { value: \"value: 3\", id: 3 },\n        { value: \"value: 4\", id: 4 },\n        { value: \"value: 5\", id: 5 },\n    ],\n    validation: (value, text) => {\n        return value.includes(4) || text.includes(\"value:5\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Show/Hide Input Controls in JavaScript\nDESCRIPTION: Demonstrates how to toggle visibility of Input controls in a Ribbon using show/hide methods.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/ribbon/input.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nribbon.show(id);\nribbon.hide(id);\n```\n\n----------------------------------------\n\nTITLE: Serializing DHTMLX Ribbon State in JavaScript\nDESCRIPTION: Saves the current state (structure and data) of a DHTMLX Ribbon instance (`ribbon1`) into a JavaScript variable (`state`). The `ribbon1.data.serialize()` method is called, which returns an array of JSON objects representing the configuration of each control within the ribbon.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/ribbon/data_loading.md#2025-04-22_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nconst state = ribbon1.data.serialize();\n```\n\n----------------------------------------\n\nTITLE: Firing Calendar Events Programmatically in JavaScript\nDESCRIPTION: Shows how to programmatically fire an event on a Calendar object using the events.fire() method. This allows manual triggering of event handlers.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar/handling_events.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ncalendar.events.fire(\"name\",args);\n// where args is an array of arguments\n```\n\n----------------------------------------\n\nTITLE: Attaching Calendar to Input\nDESCRIPTION: Example of attaching calendar to an input field with specific mode\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar2/operating_calendar.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<input type=\"text\" onclick=\"showCalendar()\" />\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar calendar = new dhx.Calendar(\"calendar_container\");\nfunction showCalendar(){\n    calendar.showDate(new Date(11,11,11),\"month\");\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Custom German Locale for Form SimpleVault Control\nDESCRIPTION: This example demonstrates how to create a custom locale (German) for the SimpleVault control. It provides translations for the drag and drop text and browse files label.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/localization.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst de = {\n    simpleVaultText: \"Drag & Drop Dateien oder Ordner hier oder\",\n    simpleVaultLabel: \"Suchen Sie Dateien durch\"\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing XML DataDriver in JavaScript\nDESCRIPTION: Creates an XML data driver instance for converting data to XML format. This functionality requires the PRO version of DHTMLX suite package.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/helpers/datadrivers.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst xmlDataDriver = new dhx.dataDrivers.xml();\n```\n\n----------------------------------------\n\nTITLE: Handling Focus Event in DHTMLX Colorpicker - JavaScript\nDESCRIPTION: Demonstrates how to attach a focus event handler to a Colorpicker control in DHTMLX Form. The event fires when the Colorpicker receives focus and provides the current value as a parameter.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/colorpicker/colorpicker_focus_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"colorpicker\").events.on(\"focus\", (value) => {\n    console.log(\"focus\", value);\n});\n```\n\n----------------------------------------\n\nTITLE: Handling blur Event in DHTMLX Slider Control (JavaScript)\nDESCRIPTION: This example demonstrates how to attach an event handler to the blur event of a Slider control in a DHTMLX Form. The event fires when the Slider loses focus and provides the current value as a parameter.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/slider/slider_blur_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"slider\").events.on(\"blur\", (value) => {\n    console.log(\"blur\", value);\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic DHTMLX Ribbon Block in JavaScript\nDESCRIPTION: Provides the basic JavaScript object literal configuration for creating a DHTMLX Ribbon Block. This example defines a block with a title ('Action') and includes two button items ('Copy' and 'Cut') arranged horizontally (row is the default direction).\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/ribbon/block.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n{\n    type: \"block\",\n    title: \"Action\",        \n    items: [\n        { id: \"copy\", icon: \"mdi mdi-content-copy\", value: \"Copy\" },\n        { id: \"cut\", icon: \"mdi mdi-content-cut\", value: \"Cut\" }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Handling beforeChangeOptions Event in DHTMLX Form Select Control\nDESCRIPTION: This example demonstrates how to attach an event handler to the beforeChangeOptions event of a Select control in a DHTMLX form. The handler logs the new options array to the console before the options are changed.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/select/select_beforechangeoptions_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"select\").events.on(\"beforeChangeOptions\", function(options) {\n    console.log(\"beforeChangeOptions\", options);\n});\n```\n\n----------------------------------------\n\nTITLE: Manipulating CheckboxGroup in DHTMLX Form\nDESCRIPTION: This code snippet shows how to manipulate a CheckboxGroup control using methods of the object returned by the getItem() method. In this example, it demonstrates how to hide the CheckboxGroup control on a page.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/checkboxgroup.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst value = form.getItem(\"CheckboxGroup\").hide();\n```\n\n----------------------------------------\n\nTITLE: Adding Icons via Inline HTML Elements (HTML)\nDESCRIPTION: Demonstrates how to add DHTMLX icons directly in HTML using inline elements like <i> or <span>.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/helpers/icon.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<i class=\"dxi dxi-icon-name\"></i>\n\n<span class=\"dxi dxi-icon-name\"></span>\n```\n\n----------------------------------------\n\nTITLE: Creating a Tooltip with DHTMLX JavaScript\nDESCRIPTION: Shows an example of creating a tooltip with specific text, target node, right position, custom margin, and enabled HTML content using the dhx.tooltip() function.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/message/api/api_message_properties.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ndhx.tooltip(\"Tooltip from the right\", {\n    node: \"fourth\", \n    position: \"right\",\n    margin: 2,\n    htmlEnable: true\n});\n```\n\n----------------------------------------\n\nTITLE: Embedding Custom HTML in a DHTMLX Ribbon Button (JavaScript)\nDESCRIPTION: Illustrates how to embed custom HTML content within a DHTMLX Ribbon Button using the `html` property in its configuration object. The `size` property is set to \"auto\" to accommodate the custom content.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/ribbon/button.md#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n{\n    type: \"button\",\n    html: \"<div id='preloader'><div id='loader'></div></div >\",\n    size: \"auto\"\n}\n```\n\n----------------------------------------\n\nTITLE: Calendar Mode Examples\nDESCRIPTION: Demonstrates different ways to use showDate() method with various modes including month and year views, with both specific dates and null values for current date display.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar/api/calendar_showdate_method.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// shows the month of the specified date\ncalendar.showDate(new Date(2020,11,12),\"month\");\n\n// shows the current month\ncalendar.showDate(null,\"month\");\n\n// shows the current year together with previous/next years\ncalendar.showDate(new Date(2020,11,12),\"year\");\n\n// shows the current year\ncalendar.showDate(null,\"year\");\n```\n\n----------------------------------------\n\nTITLE: Editing List Item in JavaScript\nDESCRIPTION: Illustrates how to edit a specific List item using the editItem() method. The method takes the id of the item to be edited as a parameter.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/list/work_with_list.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nlist.editItem(\"1\");\n```\n\n----------------------------------------\n\nTITLE: Using attachHTML Method with DHTMLX Form Container\nDESCRIPTION: This example demonstrates how to create a Form with a Container control and attach HTML content to it using the attachHTML() method. The method requires a string parameter containing the HTML code to be displayed in the container.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/container/container_attachhtml_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst form = new dhx.Form(\"form_container\", {\n    rows: [\n        {\n            type: \"container\",\n            name: \"container\",\n        },\n    ]\n});\n\nconst html = \"<p>Hello world</p>\";\nform.getItem(\"container\").attachHTML(html);\n```\n\n----------------------------------------\n\nTITLE: Handling groupPanelItemMouseDown Event in DHTMLX Grid\nDESCRIPTION: This snippet demonstrates how to attach an event listener for the groupPanelItemMouseDown event in a DHTMLX Grid. The event fires before releasing the left mouse button when clicking on a group panel item. It provides the id of the clicked item and the native event object.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_grouppanelitemmousedown_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngrid.events.on(\"groupPanelItemMouseDown\", (id) => {\n    console.log(\"Mouse down on the group item:\", id)\n});\n```\n\n----------------------------------------\n\nTITLE: Iterating Through Parent Items in DHTMLX TreeCollection\nDESCRIPTION: Demonstrates how to use the eachParent() method to iterate through all parent items of a specified node in a TreeCollection. The method applies a callback function to each parent item encountered in the hierarchy.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree_collection/api/treecollection_eachparent_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntoolbar.data.eachParent(\"new_btn\", item => console.log(item));\n```\n\n----------------------------------------\n\nTITLE: Firing Events in DHTMLX Combo Box\nDESCRIPTION: Demonstrates how to programmatically fire events using the events.fire() method. The method accepts an event name and an optional array of arguments.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/combobox/handling_events.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncombo.events.fire(\"name\",args);\n// where args is an array of arguments\n```\n\n----------------------------------------\n\nTITLE: Retrieving Window Dimensions with getSize() - DHTMLX JavaScript\nDESCRIPTION: Demonstrates how to get the current size of a DHTMLX window component. The method returns an object containing width and height values in pixels.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/window/api/window_getsize_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst size = dhxWindow.getSize(); // -> {width: 960, height: 469}\n```\n\n----------------------------------------\n\nTITLE: Setting Date Format in DHTMLX Calendar\nDESCRIPTION: Example of using the dateFormat property to specify a custom date format in DHTMLX Calendar. The format shown uses day, month, and full year separated by periods.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar2/functionality_and_features/dates_format.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\ndateFormat:\"%d.%m.%Y\"\n```\n\n----------------------------------------\n\nTITLE: Handling beforeChange Event in DHTMLX Tabbar\nDESCRIPTION: This snippet demonstrates how to attach an event handler to the beforeChange event of a DHTMLX Tabbar. It logs the previously active tab and prevents the tab change by returning false.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tabbar/api/tabbar_beforechange_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntabbar.events.on(\"beforeChange\", function(id, prev){\n    console.log(\"The \" + prev + \" active tab will be changed\");\n    return false;\n});\n```\n\n----------------------------------------\n\nTITLE: Handling beforeHide Event for Checkbox in DHTMLX Form\nDESCRIPTION: This code snippet demonstrates how to attach an event handler to the beforeHide event of a Checkbox control in a DHTMLX Form. The handler logs the current value and initialization state, and returns true to allow the control to be hidden.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/checkbox/checkbox_beforehide_event.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nform.getItem(\"checkbox\").events.on(\"beforeHide\", function(value, init) {\n    console.log(\"beforeHide\", value, init);\n    return true;\n});\n```\n\n----------------------------------------\n\nTITLE: Selection Item Addition in JavaScript\nDESCRIPTION: Demonstrates how to use the add() method to select a specific item using its ID in a DHTMLX component.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/selection/api/selection_add_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst id = component.selection.getId(); // -> \"2\"\ncomponent.selection.add(\"2\");\n```\n\n----------------------------------------\n\nTITLE: Using the destructor method with DHTMLX List in JavaScript\nDESCRIPTION: Demonstrates how to remove a List instance and release occupied resources using the destructor method.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/list/api/list_destructor_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlist.destructor();\n```\n\n----------------------------------------\n\nTITLE: Attaching DHTMLX Form to a Window Component - JavaScript\nDESCRIPTION: This snippet attaches the previously initialized form instance to a DHTMLX Window component using the window's 'attach' method. It requires both the 'form' variable (dhx.Form instance) and a valid DHTMLX Window object 'dhxWindow'. Input is the form; output is a form rendered inside the window. Assumes DHTMLX Suite is properly imported and initialized.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tutorial/binding_components/step3.md#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\ndhxWindow.attach(form);\n```\n\n----------------------------------------\n\nTITLE: Disabling Window Closability with DHTMLX in JavaScript\nDESCRIPTION: This code demonstrates how to disable the Close button in a DHTMLX Window by setting the 'closable' property to false during instantiation. Requires DHTMLX Suite to be loaded. The 'closable' parameter determines whether the top-right close button is shown; by default, it is true. Set to false, users cannot close the window via the UI close control. Returns a window instance with the specified configurability.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/window/configuration.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nconst dhxWindow = new dhx.Window({\n    closable:false\n});\n```\n\n----------------------------------------\n\nTITLE: Setting DataView Height in JavaScript\nDESCRIPTION: Demonstrates how to initialize a DataView component with different height configurations. The height can be specified either as a number or as a string value with px units. The default height is 'auto' which adjusts to the container height.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/dataview/api/dataview_height_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// sets the height as a number\nconst dataview = new dhx.DataView(\"dataview_container\", {height: 700});\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// sets the height as a string value\nconst dataview = new dhx.DataView(\"dataview_container\", {height: \"700px\"});\n```\n\n----------------------------------------\n\nTITLE: Getting Checkbox Value in DHTMLX Form\nDESCRIPTION: Demonstrates how to retrieve the current value of a checkbox control using the getItem() method.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/checkbox.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst value = form.getItem(\"checkbox\").getValue();\n```\n\n----------------------------------------\n\nTITLE: Attaching itemRightClick Event Handler in JavaScript\nDESCRIPTION: This snippet demonstrates how to attach an event handler for the itemRightClick event of a List component. The event fires when an item in the list is right-clicked, providing the item's id and the MouseEvent object.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/list/api/list_itemrightclick_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlist.events.on(\"itemRightClick\", function(id, events){\n    // your code here\n});\n```\n\n----------------------------------------\n\nTITLE: Toggling Sidebar Expansion/Collapse in JavaScript\nDESCRIPTION: This code snippet demonstrates how to use the toggle() method to expand or collapse a Sidebar component. The method doesn't require any parameters and toggles the Sidebar's state between expanded and collapsed.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/sidebar/api/sidebar_toggle_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nsidebar.toggle();\n```\n\n----------------------------------------\n\nTITLE: Manually Firing Calendar Events in JavaScript\nDESCRIPTION: Shows how to manually trigger a Calendar event using the events.fire() method. This allows programmatically invoking event handlers with custom arguments.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar2/handling_events.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ncalendar.events.fire(\"name\",args);\n// where args is an array of arguments\n```\n\n----------------------------------------\n\nTITLE: Using getWidget Method in DHTMLX Tabbar (JavaScript)\nDESCRIPTION: This example demonstrates how to create a Tabbar, attach a DataView widget to a cell, and then retrieve the attached widget using the getWidget() method. The method returns the object of the widget attached to the specified cell.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tabbar/api/cell/tabbar_cell_getwidget_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst tabbar = new dhx.Tabbar(\"tabbar_container\", {\n    mode: \"top\",\n    css: \"dhx_widget--bordered\",\n    views: [\n        { id: \"vilnius\", tab: \"Vilnius\" },\n        { tab: \"dataview\", id: \"dataview\"}\n    ]\n});\n\nconst dataview = new dhx.DataView(null, {\n    template: dataviewTemplate,\n    itemsInRow: 3,\n    gap: \"10px\"\n});\n\ndataview.data.parse(dataset);\n\ntabbar.getCell(\"dataview\").attach(dataview);\n\n// id - the id of a cell a widget is attached to\nconst widget = tabbar.getCell(\"dataview\").getWidget();\n```\n\n----------------------------------------\n\nTITLE: Clearing Validation for Checkbox Group in DHTMLX Form (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to use the clearValidate() method to clear the validation of a CheckboxGroup control in a DHTMLX Form. It retrieves the CheckboxGroup item from the form and calls the clearValidate() method on it.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/checkbox_group/checkboxgroup_clearvalidate_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nform.getItem(\"CheckboxGroup\").clearValidate();\n```\n\n----------------------------------------\n\nTITLE: Initializing DataView with Gap Configuration in JavaScript\nDESCRIPTION: This code snippet demonstrates how to create a new DataView instance with a specified gap size between items. The gap is set to 20 pixels, and the DataView is configured to display 5 items per row.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/dataview/api/dataview_gap_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst dataview = new dhx.DataView(\"dataview_container\", {itemsInRow: 5, gap: 20});\n```\n\n----------------------------------------\n\nTITLE: Checking DHTMLX Window Visibility in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates calling the `isVisible()` method on a DHTMLX Window instance (`dhxWindow`). It returns `true` if the window associated with the `dhxWindow` object is currently visible and `false` otherwise. This method requires an initialized DHTMLX Window object represented by `dhxWindow`.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/window/api/window_isvisible_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndhxWindow.isVisible(); // -> true/false\n```\n\n----------------------------------------\n\nTITLE: Hiding All Ribbon Items Using DHTMLX hide() in JavaScript\nDESCRIPTION: Illustrates how to hide all items in the DHTMLX Ribbon at once by calling the hide method without any parameters. This feature is available from version 7.0. The ribbon object must be properly initialized prior to invocation, and the method affects all displayed ribbon controls.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/ribbon/api/ribbon_hide_method.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// hides all Ribbon items\nribbon.hide();\n```\n\n----------------------------------------\n\nTITLE: Enable Checkbox in DHTMLX Form\nDESCRIPTION: Method to enable a disabled Checkbox control within a DHTMLX Form. The method targets a specific checkbox by its ID and activates it for user interaction.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/checkbox/checkbox_enable_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"checkbox\").enable();\n```\n\n----------------------------------------\n\nTITLE: Instantiating and Attaching DHTMLX Popup Using JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to initialize a DHTMLX Popup widget and show it anchored to a specified container element. The 'dhx.Popup' object is instantiated with default parameters, and the 'show' method is called with 'popup_container' as its argument, indicating the HTML element (by ID) where the popup will be displayed. Dependencies: the DHTMLX Suite library must be included, and an element with the corresponding ID should exist in the DOM. Outputs an interactive popup widget attached to the specified container.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/popup/initialization.md#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n// creating DHTMLX Popup\\nconst popup = new dhx.Popup();\\n\\npopup.show(\\\"popup_container\\\");\n```\n\n----------------------------------------\n\nTITLE: Unselecting Toolbar Items\nDESCRIPTION: Methods for removing selection from specific toolbar items or all selected items using the unselect() method.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/toolbar/common_methods.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// unselects a specified selected item\ntoolbar.unselect(\"web\");\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// unselects all previously selected items\ntoolbar.unselect();\n```\n\n----------------------------------------\n\nTITLE: Setting Checkbox State with setValue Method in DHTMLX Form\nDESCRIPTION: This example demonstrates how to set the state of a Checkbox control to checked (true) in a DHTMLX Form using the setValue() method.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/checkbox/checkbox_setvalue_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"checkbox\").setValue(true);\n```\n\n----------------------------------------\n\nTITLE: Example Return Value of getProperties for Container Control\nDESCRIPTION: This code snippet shows the structure of the object returned by the getProperties() method for a Container control, listing all available configuration properties and their default values.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/container/container_getproperties_method.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n    css: undefined,\n    height: \"content\",\n    helpMessage: \"\",\n    hiddenLabel: false,\n    label: \"\",\n    labelPosition: \"top\",\n    labelWidth: \"\",\n    padding: \"20px\",\n    width: \"content\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Textarea Value in DHTMLX Form (JavaScript)\nDESCRIPTION: This code snippet shows how to get the value of a Textarea control in a DHTMLX form using the getItem() method to retrieve the control object, then calling its getValue() method.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/textarea.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst value = form.getItem(\"textarea\").getValue();\n```\n\n----------------------------------------\n\nTITLE: Configuring Toggle Control Properties in DHTMLX Form\nDESCRIPTION: Configuration object for initializing a Toggle control in DHTMLX Form. Includes all available properties for customizing the toggle's appearance and behavior, such as state, text, icons, dimensions, and styling options.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/toggle/api_toggle_properties.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    type: \"toggle\",\n    name?: string,\n    id?: string,\n\n    hidden?: boolean, // false by default\n    disabled?: boolean, // false by default\n    selected?: boolean, // false by default\n\n    full?: boolean, // false by default\n    text?: string,\n    icon?: string,\n    offText?: string,\n    offIcon?: string,\n    value?: string | number,\n\n    css?: string,\n    width?: string | number | \"content\", // \"content\" by default\n    height?: string | number | \"content\", // \"content\" by default\n    padding?: string | number \n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Combo Box with Select All Button in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a Combo Box instance with the Select All button enabled. It also enables multiselection to allow multiple options to be selected.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/combobox/api/combobox_selectallbutton_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst combo = new dhx.Combobox(\"combo_container\", {\n    // enables multiple selection of options\n    multiselection:true,\n    // shows the Select All button\n    selectAllButton: true\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Timepicker in 24-hour Format - DHTMLX - JavaScript\nDESCRIPTION: Shows the default instantiation of the DHTMLX Timepicker in 24-hour clock mode. By omitting the 'timeFormat' property, the component displays time in 24-hour format automatically. Requires the DHTMLX Suite library. No explicit configuration is needed for 24-hour format. Input: N/A; Output: Timepicker UI with 24-hour display.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/timepicker/configuration.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst timepicker = new dhx.Timepicker(\"timepicker_container\");\n```\n\n----------------------------------------\n\nTITLE: Getting Input State in JavaScript\nDESCRIPTION: Shows how to retrieve the current value of an Input control using getState() method.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/ribbon/input.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nribbon.getState();\n// {search:\"Summer\"}\n```\n\n----------------------------------------\n\nTITLE: Avatar Methods Table Structure\nDESCRIPTION: Table structure listing Avatar-specific API methods with links to detailed documentation\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/api_overview.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| Name                                               | Description                                               |\n| :------------------------------------------------- | --------------------------------------------------------- |\n| [](form/api/avatar/avatar_blur_method.md)          | @getshort(form/api/avatar/avatar_blur_method.md)          |\n```\n\n----------------------------------------\n\nTITLE: Destroying Checkbox Component in DHTMLX Form\nDESCRIPTION: Demonstrates how to properly destroy a Checkbox instance in a DHTMLX form. The method removes the checkbox control and frees up associated resources.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/checkbox/checkbox_destructor_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"checkbox\").destructor();\n```\n\n----------------------------------------\n\nTITLE: Enabling a Tab in DHTMLX Tabbar with JavaScript\nDESCRIPTION: This snippet demonstrates how to enable a previously disabled tab in a DHTMLX Tabbar. The method takes the id of the tab as a parameter and enables it, making it interactive again.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tabbar/api/tabbar_enabletab_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ntabbar.enableTab(\"London\");\n```\n\n----------------------------------------\n\nTITLE: Implementing State Observation in TopLayout View\nDESCRIPTION: Updates TopLayout view to observe changes to the active state and dynamically show the appropriate content in the content cell, removing the need for explicit event handler registration.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/optimus_guides/how_to_start_optimus.md#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nimport { View } from \"dhx-optimus\";\n\nimport { ToolbarView } from \"./ToolbarView\";\nimport { EmptyView } from \"./EmptyView\";\n\nexport class TopLayout extends View {\n    init() {\n        return (this.layout = new dhx.Layout(null, {\n            rows: [\n                {\n                    id: \"toolbar\",\n                    height: \"content\",\n                    init: cell => this.show(cell, ToolbarView),\n                },\n                {\n                    id: \"content\"\n                },\n            ],\n        }));\n    }\n\n    ready() {\n        this.observe(\n            state => state.active,\n            active => {\n              this.show(this.layout.getCell(\"content\"), EmptyView, {content: active});\n            }\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Local Data into DHTMLX List\nDESCRIPTION: Shows how to load data from a local source into a DHTMLX List after initialization using the 'parse()' method.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/list/load_data.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst list = new dhx.List(\"list_container\", {\n    template: template,\n    itemHeight: 72\n});\nlist.data.parse(dataset);\n```\n\n----------------------------------------\n\nTITLE: Enabling a Toggle Control in DHTMLX Form\nDESCRIPTION: Demonstrates how to enable a previously disabled Toggle control using the enable() method. The method is called on a Toggle control that is retrieved using the form's getItem() method.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/toggle/toggle_enable_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"toggle\").enable();\n```\n\n----------------------------------------\n\nTITLE: Disabling Sidebar Items in JavaScript\nDESCRIPTION: Examples showing how to disable single or multiple Sidebar items using the disable() method. The method can be used with a single item ID, an array of IDs, or without parameters to disable all items.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/sidebar/api/sidebar_disable_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsidebar.disable(\"search\");\n// several at a time\nsidebar.disable([\"search\", \"currentButton\", \"edit\"]);\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// disables all Sidebar items\nsidebar.disable();\n```\n\n----------------------------------------\n\nTITLE: Enabling Container Control in DHTMLX Form (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to enable a Container control within a DHTMLX Form. The enable() method is called on the Container item retrieved from the form.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/container/container_enable_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nform.getItem(\"container\").enable();\n```\n\n----------------------------------------\n\nTITLE: Using isSelected Method in DHTMLX Toolbar in JavaScript\nDESCRIPTION: This example demonstrates how to check if a toolbar item with the id 'web' is selected. The method returns a boolean value indicating the selection state of the specified item.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/toolbar/api/toolbar_isselected_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntoolbar.isSelected(\"web\"); // -> returns true/false\n```\n\n----------------------------------------\n\nTITLE: Loading Data on Toolbar Initialization\nDESCRIPTION: Example of initializing a DHTMLX Toolbar with a predefined dataset using the data configuration property.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/toolbar/load_data.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst toolbar = new dhx.Toolbar(\"toolbar_container\", {\n    css: \"dhx_widget--bordered\",\n    data: dataset\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing Selected Dates and Date Ranges\nDESCRIPTION: Example of how to style selected dates and date ranges in a calendar by overriding system CSS classes.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar2/customization.mdx#2025-04-22_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n<style>\n/* system style for selected dates */\n.dhx_calendar-day--selected::before {\n    background-color: #ff5252;\n}\n\n/* system style for a date range */\n.dhx_calendar-day--in-range:after {\n    background-color: #ffe7e7;\n }\n</style>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar calendar1 = new dhx.Calendar(\"calendar1\", {css: \"dhx_widget--bordered\"});\nvar calendar2 = new dhx.Calendar(\"calendar2\", {css: \"dhx_widget--bordered\"});\n```\n\n----------------------------------------\n\nTITLE: Hiding and showing Layout cells in JavaScript\nDESCRIPTION: Illustrates how to hide and show Layout cells using the hide and show methods.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/layout/work_with_layout.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// hiding a cell\nlayout.getCell(\"toolbar\").hide();\n\n// showing a cell\nlayout.getCell(\"toolbar\").show();\n```\n\n----------------------------------------\n\nTITLE: Removing Controls from DHTMLX Window Footer using JavaScript\nDESCRIPTION: Describes removing a control from the window's footer by calling the 'remove' method on the footer's data collection with the control's id. Requires an existing control with the specified id (e.g., 'accept'). No return value, but the control is removed from the interface.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/window/customization.md#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\ndhxWindow.footer.data.remove(\\\"accept\\\");\n```\n\n----------------------------------------\n\nTITLE: External TreeCollection Integration\nDESCRIPTION: Example of loading Ribbon data from external TreeCollection\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/ribbon/features.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\naue48f5f\n```\n\n----------------------------------------\n\nTITLE: Hiding a Fieldset Control in DHTMLX Form\nDESCRIPTION: Example of hiding a Fieldset control using the hide() method. The method retrieves the fieldset item by its ID and then hides it. Note that this will also hide all nested controls within the fieldset.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/fieldset/fieldset_hide_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"fieldset\").hide();\n```\n\n----------------------------------------\n\nTITLE: HTML Input Element for Calendar Date Display\nDESCRIPTION: A simple HTML input element used to display the date selected in the Calendar component. This element will be targeted by a Calendar event handler to update its value.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar2/handling_events.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<input type=\"text\" id=\"date\" />\n```\n\n----------------------------------------\n\nTITLE: Handling afterShow Event for Radiogroup in DHTMLX Form\nDESCRIPTION: This snippet demonstrates how to attach an event handler to the afterShow event of a Radiogroup control in a DHTMLX Form. The handler logs the current value and optional ID of the shown radio button.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/radiogroup/radiogroup_aftershow_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"radiogroup\").events.on(\"afterShow\", function(value, id) {\n    console.log(\"afterShow\", value, id);\n});\n```\n\n----------------------------------------\n\nTITLE: Direct Rendering of Views in Layout Cells\nDESCRIPTION: Shows how to render views directly in Layout cells using the show method. This approach initializes the Layout component first and then attaches views to specific cells after initialization.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/optimus_guides/index.md#2025-04-22_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nimport { View } from \"dhx-optimus\";\n\nimport { ToolbarView } from \"./ToolbarView\";\nimport { EmptyView } from \"./EmptyView\";\n\nexport class TopLayout extends View {\n    init() {\n        this.layout = new dhx.Layout(null, {\n            rows: [\n                {\n                    id: \"toolbar\",\n                    height: \"content\",\n                },\n                {\n                    id: \"content\",\n                }\n            ]\n        });\n\n        this.show(this.layout.getCell(\"toolbar\"), ToolbarView);\n        this.show(this.layout.getCell(\"content\"), EmptyView);\n\n        return this.layout;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Slider Disabled State in JavaScript\nDESCRIPTION: Shows how to check if a slider is disabled using the isDisabled() method of the Slider API.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/slider/usage.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nslider.isDisabled(); // -> true/false\n```\n\n----------------------------------------\n\nTITLE: Checking Visibility of Fieldset Control in DHTMLX Form (JavaScript)\nDESCRIPTION: This snippet demonstrates how to use the isVisible() method to check if a Fieldset control is visible on the page. The method returns a boolean value indicating the visibility status.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/fieldset/fieldset_isvisible_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"fieldset\").isVisible(); \n// -> true/false\n```\n\n----------------------------------------\n\nTITLE: Showing and Hiding Separator in DHTMLX Sidebar using JavaScript\nDESCRIPTION: This code snippet shows how to show and hide a Separator in a DHTMLX Sidebar using the show() and hide() methods. These methods require the id of the separator as an argument.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/sidebar/separator.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nsidebar.show(id);\nsidebar.hide(id);\n```\n\n----------------------------------------\n\nTITLE: Handling beforeClose Event in DHTMLX Tabbar\nDESCRIPTION: This code snippet demonstrates how to attach an event handler to the beforeClose event of a DHTMLX Tabbar. The event fires before a tab is closed and allows for custom logic to determine whether the tab should be closed or not.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tabbar/api/tabbar_beforeclose_event.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ntabbar.events.on(\"beforeClose\", function(id){\n    // your logic here\n    return true;\n});\n```\n\n----------------------------------------\n\nTITLE: Disabling Avatar Control in DHTMLX Form\nDESCRIPTION: Demonstrates how to disable an Avatar control by accessing it through the form's getItem() method and calling disable(). This method makes the Avatar control inactive and non-interactive.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/avatar/avatar_disable_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"avatar\").disable();\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Locale to DHTMLX Calendar\nDESCRIPTION: Setting a custom locale for dhtmlxCalendar by using the dhx.i18n.setLocale() method and then initializing the calendar component.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar/localizing_calendar.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ndhx.i18n.setLocale(\"calendar\", de);\nconst calendar = new dhx.Calendar(\"calendar_container\");\n```\n\n----------------------------------------\n\nTITLE: Column Data Format Using numberMask - DHTMLX Grid (v9.0+) - JavaScript\nDESCRIPTION: Demonstrates the new approach to number formatting in DHTMLX Grid v9.0+ using the numberMask configuration. This replaces the legacy 'format' property, allowing more flexible options such as a currency prefix. Used in column config to specify formatting and summarization for column data.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/migration.md#2025-04-22_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\n{\n    width: 130,\n    id: \"cost\",\n    header: [{ text: \"Cost\" }, { content: \"inputFilter\" }],\n    footer: [{ content: \"sum\" }],\n    numberMask: {\n        prefix: \"$\", minDecLength: 0\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using setProperties() Method with Select Control in DHTMLX Form\nDESCRIPTION: This example demonstrates how to use the setProperties() method to dynamically update the label, labelWidth, and width of a Select control in a DHTMLX Form. The method takes an object containing the properties to be changed and their new values.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/select/select_setproperties_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nform.getItem(\"select\").setProperties({\n    label: \"New label\",\n    labelWidth: \"100px\", \n    width: \"300px\"\n});\n```\n\n----------------------------------------\n\nTITLE: Styling DHTMLX Layout with Built-in CSS Classes\nDESCRIPTION: Example demonstrating the use of DHTMLX's built-in CSS classes for styling Layout cells and borders.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/layout/api/layout_css_config.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst layout = new dhx.Layout(\"layout_container\", {\n    css: \"dhx_layout-cell--bordered\",\n    rows: [\n        {\n            id: \"toolbar\",\n            html: \"Header\",\n            css: \"dhx_layout-cell--border_bottom layout-header\",\n            gravity: false,\n            height: \"60px\"\n        }\n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: Detaching Drop Area from DHTMLX Uploader\nDESCRIPTION: Example demonstrating how to attach and detach a drop area from a DHTMLX Uploader instance. The method accepts either an HTML element or its ID as a parameter.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/uploader/api/uploader_unlinkdroparea_method.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"drophere\">DROP HERE</div>\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// attaches an extra drop area  \nvault.uploader.linkDropArea(\"drophere\");\n\n// detaches the extra drop area  \nvault.uploader.unlinkDropArea(\"drophere\");\n```\n\n----------------------------------------\n\nTITLE: Implementing Datepicker Keydown Event Handler in JavaScript\nDESCRIPTION: Example showing how to attach a keydown event listener to a Datepicker control in a DHTMLX Form. The event fires whenever any key is pressed while the Datepicker is focused and provides access to the native KeyboardEvent object.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/calendar/calendar_keydown_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"datepicker\").events.on(\"keydown\", function(event) {\n    console.log(event);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring isFolder for DHTMLX Tree in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the isFolder configuration option when initializing a DHTMLX Tree. The function always returns true, making all items render as folders.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree/api/tree_isfolder_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst tree = new dhx.Tree(\"tree_container\", {\n    isFolder: function() {\n        return true;\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Validating Textarea with Silent Parameter in JavaScript\nDESCRIPTION: Examples of using the validate() method with the silent parameter set to true. When silent is true, the method returns validation results without triggering events or visual changes.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/textarea/textarea_validate_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// the method validates the specified value\nform.getItem(\"textarea\").validate(true, \"I am Text\"); // -> true/false\n\n// the method validates the current value\nform.getItem(\"textarea\").validate(true); // -> true/false\n```\n\n----------------------------------------\n\nTITLE: Canceling Applied Sorting Rules in JavaScript\nDESCRIPTION: This snippet shows how to cancel all applied sorting rules by calling the sort() method without parameters.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/data_collection/api/datacollection_sort_method.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\ngrid.data.sort();\n```\n\n----------------------------------------\n\nTITLE: Handling load Event in DHTMLX TreeCollection (JavaScript)\nDESCRIPTION: This snippet demonstrates how to attach an event handler to the 'load' event of a TreeCollection. The event fires when items are loaded into the tree collection. The example logs a message to the console when the event occurs.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree_collection/api/treecollection_load_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncomponent.data.events.on(\"load\", function(){\n    console.log(\"Items are loaded.\");\n});\n```\n\n----------------------------------------\n\nTITLE: Handling beforeShow Event for Toggle Control in DHTMLX Form\nDESCRIPTION: This code snippet demonstrates how to attach an event handler to the 'beforeShow' event of a Toggle control in a DHTMLX Form. The handler logs the current value of the control and returns true to allow the control to be shown.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/toggle/toggle_beforeshow_event.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nform.getItem(\"toggle\").events.on(\"beforeShow\", function(value) {\n    console.log(\"beforeShow\", value);\n    return true;\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Form with Checkbox and Retrieving Properties in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a DHTMLX Form with a Checkbox control and then retrieve its properties using the getProperties() method. It shows the structure of the form initialization and how to access a specific item to call the method.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/checkbox/checkbox_getproperties_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst form = new dhx.Form(\"form_container\", {\n    rows: [\n        {   \n            type: \"checkbox\",\n            label: \"I agree\",\n            name: \"agree\",\n            id: \"agree\",\n            value: \"checkboxvalue\"\n        }\n    ]\n});\n\nform.getItem(\"checkbox\").getProperties();\n```\n\n----------------------------------------\n\nTITLE: Configuring Select Control in DHTMLX Suite\nDESCRIPTION: This snippet illustrates the configuration options for the Select control in DHTMLX Suite. It includes attributes such as css, errorMessage, height, helpMessage, and more. Each attribute is specified with its corresponding data type.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/form_setproperties_method.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    css: string,\n    errorMessage: string,\n    height: string | number | \"content\",\n    helpMessage: string,\n    hiddenLabel: boolean,\n    icon: string,\n    label: string,\n    labelPosition: string,\n    labelWidth: string | number,\n    padding: string | number,\n    preMessage: string,\n    successMessage: string,\n    validation: function,\n    width: string | number | \"content\"\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX Calendar with Custom Date Format\nDESCRIPTION: Example showing how to initialize a DHTMLX Calendar component with a custom date format. The format is set to display dates as DD.MM.YYYY.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar/api/calendar_dateformat_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst calendar = new dhx.Calendar(\"calendar_container\", {\n   dateFormat:\"%d.%m.%Y\"\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX Calendar with thisMonthOnly Option in JavaScript\nDESCRIPTION: This code snippet demonstrates how to initialize a DHTMLX Calendar component with the 'thisMonthOnly' option set to true. This configuration hides dates from the previous and next months, showing only the current month's dates in the calendar view.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar/api/calendar_thismonthonly_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst calendar = new dhx.Calendar(\"calendar_container\", {\n   thisMonthOnly:true\n});\n```\n\n----------------------------------------\n\nTITLE: Documenting TimePicker API Events Reference\nDESCRIPTION: Markdown table listing all available events for the TimePicker component, including links to detailed documentation for each event.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/api_overview.md#2025-04-22_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n| Name                                                               | Description                                                               |\n| :----------------------------------------------------------------- | :------------------------------------------------------------------------ |\n| [](form/api/timepicker/timepicker_afterchangeproperties_event.md)  | @getshort(form/api/timepicker/timepicker_afterchangeproperties_event.md)  |\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX Slider with Vertical Mode in JavaScript\nDESCRIPTION: This code snippet demonstrates how to create a new Slider instance with a vertical orientation using the DHTMLX library. The 'mode' property is set to 'vertical' to change the default horizontal direction of the slider.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/slider/api/slider_mode_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst slider = new dhx.Slider(\"slider_container\", { \n    mode:\"vertical\"\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Click Event Handler to Layout Cell Element in JavaScript\nDESCRIPTION: This snippet demonstrates how to add a click event handler directly to the element of a Layout cell using the 'on' config option. When the cell is clicked, an alert with the message 'my-element' will be shown.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/layout/api/cell/layout_cell_on_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst layout = new dhx.Layout(\"layout_container\", {\n    height: \"100%\", \n    rows: [\n        { \n            html:\"<div class='my-element' style='height:100%;width:100%'></div>\", \n            on: {\n                click: (event) => alert(\"my-element\")\n            }\n        },\n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing the beforeRemove Event Handler in DHTMLX Layout (JavaScript)\nDESCRIPTION: Example of attaching an event handler to the beforeRemove event of a DHTMLX Layout component. The event fires before removing a cell and allows preventing the removal by returning false.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/layout/api/layout_beforeremove_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlayout.events.on(\"beforeRemove\", function(id){\n    // your logic here\n    return false;\n});\n```\n\n----------------------------------------\n\nTITLE: Applying DHTMLX Built-in CSS Classes to Layout Cells in JavaScript\nDESCRIPTION: This example shows how to use DHTMLX's built-in CSS classes to style Layout cells. It applies both custom and predefined classes to different parts of the Layout.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/layout/api/cell/layout_cell_css_config.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst layout = new dhx.Layout(\"layout_container\", {\n    css: \"dhx_layout-cell--bordered\",\n    rows: [\n        {\n            id: \"toolbar\",\n            html: \"Header\",\n            css: \"dhx_layout-cell--border_bottom layout-header\",\n            gravity: false,\n            height: \"60px\"\n        }\n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: Checking Save Status\nDESCRIPTION: Example showing how to verify if changes have been saved using the isSaved method.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/data_collection/api/datacollection_save_method.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ngrid.data.saveData.then(function () {\n    console.log(grid.data.isSaved());\n});\n```\n\n----------------------------------------\n\nTITLE: Checking Column Visibility in JavaScript Grid\nDESCRIPTION: This code snippet demonstrates how to use the isColumnHidden() method to check if a specific column in a DHTMLX Grid is hidden. The method takes a column id as a parameter and returns a boolean value indicating the column's visibility status.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_iscolumnhidden_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ngrid.isColumnHidden(\"country\"); // -> true|false\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX Combo Box with Label Width\nDESCRIPTION: Creates a new Combo Box instance with a specified label width of 100 pixels. The labelWidth property can accept either string or number values, with a default value of 'auto'.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/combobox/api/combobox_labelwidth_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst combo = new dhx.Combobox(\"combo_container\", {\n    labelWidth:100\n});\n```\n\n----------------------------------------\n\nTITLE: Handling afterValidate Event in DHTMLX Form Simple Vault Control\nDESCRIPTION: This example demonstrates how to attach an event handler to the afterValidate event of a Simple Vault control. The handler receives the validated value and validation result as parameters.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/simplevault/simplevault_aftervalidate_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"simplevault\").events.on(\"afterValidate\", function(value, isValidate) {\n    console.log(\"afterValidate\", value, isValidate);\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling a SimpleVault Control in DHTMLX Form\nDESCRIPTION: This example demonstrates how to enable a previously disabled SimpleVault control in a DHTMLX Form using the enable() method. The method is called on a form item retrieved by its ID.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/simplevault/simplevault_enable_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"simplevault\").enable();\n```\n\n----------------------------------------\n\nTITLE: Setting Toolbar Item States\nDESCRIPTION: Examples showing how to set values or states of Toolbar controls using the setState() method, including setting a TwoState navItem and changing input values.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/toolbar/common_methods.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{type:\"navItem\", twoState:true, id:\"check\"}\n...\ntoolbar.setState({\"check\":true});\n//or\ntoolbar.setState({\"check\":false});\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{type:\"input\", id:\"name\", value:\"\"}\n...\ntoolbar.setState({\"name\":\"Maintenance\"});\n```\n\n----------------------------------------\n\nTITLE: Disabling Tabs in DHTMLX Tabbar (JavaScript)\nDESCRIPTION: This code demonstrates how to use the 'disabled' config to make one or more tabs disabled in a DHTMLX Tabbar. It shows examples of disabling a single tab and multiple tabs.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tabbar/api/tabbar_disabled_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// make a tab disabled\nconst tabbar = new dhx.Tabbar(\"tabbar_container\", {\n    disabled: \"London\"\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// make tabs disabled\nconst tabbar = new dhx.Tabbar(\"tabbar_container\", {\n    disabled: [\"London\", \"Rome\"]\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Grid Group Configuration in TypeScript\nDESCRIPTION: This code snippet defines the TypeScript interface for the group configuration option of the DHTMLX Grid. It includes various properties for customizing grouping behavior, such as enabling the group panel, setting panel height, and defining grouping fields and order.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_group_config.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype TAggregate = \"sum\" | \"count\" | \"min\" | \"max\" | \"avg\" | string;\n\ninterface IGroupOrder {\n    map?: { [field: string]: [string, TAggregate] | ((row: IRow[]) => string | number) };\n    summary?: \"top\" | \"bottom\";\n}\n\ntype IGroupOrderItem = string | IGroupOrder | ((row: IRow) => string);\n\ninterface IGroup {\n    panel?: boolean; // true by default\n    panelHeight: number; // 40 by default\n    hideableColumns?: boolean; // true by default\n    showMissed?: boolean | string; // true by default\n    fields?: { [colId: string]: IGroupOrder };\n    order?: IGroupOrderItem[];\n    column?: string | ICol;\n}\n\ninterface IGridConfig {\n    ...\n    group?: boolean | IGroup;\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX List Widget in JavaScript (JSX)\nDESCRIPTION: This snippet shows how to construct a new DHTMLX List widget in JavaScript using the dhx.List constructor. The widget is linked to a specified HTML container and configured with additional properties, such as custom CSS and key navigation support. This requires a valid container ID and is often the first step before binding data and pagination.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/pagination/init.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n// creating a related DHTMLX List widget\\nconst widget = new dhx.List(\\\"widget_container\\\", {\\n    css: \\\"dhx_widget--bordered\\\",\\n    keyNavigation: true\\n});\n```\n\n----------------------------------------\n\nTITLE: Adding a Datepicker to DHTMLX Ribbon in JavaScript\nDESCRIPTION: Demonstrates adding a Datepicker control to a DHTMLX Ribbon instance using the `ribbon.data.add()` method, which utilizes the Tree Collection API. This requires passing a configuration object that specifies the control `type` as `\"datePicker\"`.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/ribbon/datepicker.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nribbon.data.add({\n    type: \"datePicker\"\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Layout Cell Size\nDESCRIPTION: Demonstrates how to control the size of Layout cells using width and height attributes.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/layout/cell_configuration.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst layout = new dhx.Layout(\"layout_container\", {   \n    rows: [\n        {\n            cols: [\n                {\n                    header: \"Block 1\",\n                    width: \"40%\"                                \n                },\n                {\n                    header: \"Block 2\",                  \n                    width: \"60%\"\n                }\n            ]\n        },\n        {\n            rows: [\n                {\n                    header: \"Block 3\",\n                    height: \"200px\"                             \n                },\n                {\n                    header: \"Block 4\",                              \n                    height: \"300px\"\n                }\n            ]\n        }\n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: Checking ComboBox Disabled State in JavaScript\nDESCRIPTION: Shows how to check if a ComboBox is currently disabled using the isDisabled() method, which returns a boolean value.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/combobox/work_with_combo.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ncombo.isDisabled(); // -> true/false\n```\n\n----------------------------------------\n\nTITLE: Configuring Grid Columns with Custom Width in DHTMLX\nDESCRIPTION: This example shows how to create a DHTMLX Grid with custom column widths. The 'width' property is set to 200 pixels for the 'country' column. Other columns and grid options can be configured similarly.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/gridcolumn_properties/gridcolumn_width_property.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst grid = new dhx.Grid(\"grid_container\", {\n    columns: [\n        { id: \"country\", header: [{ text: \"Country\" }], width: 200 },\n        // more columns configuration objects\n    ],\n    // more options\n});\n```\n\n----------------------------------------\n\nTITLE: Unselecting Items in DHTMLX Sidebar (JavaScript)\nDESCRIPTION: Examples demonstrating how to unselect all previously selected items or a specific item in a DHTMLX Sidebar component. The method can be called without parameters to unselect all items or with an item ID to unselect a specific item.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/sidebar/api/sidebar_unselect_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// unselects all previously selected items\nsidebar.unselect();\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// unselects a specified selected item\nsidebar.unselect(\"categoryPost\");\n```\n\n----------------------------------------\n\nTITLE: Getting Checked Tree Items\nDESCRIPTION: Shows how to retrieve an array of checked item IDs from the tree.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree/work_with_tree.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ntree.getChecked(); // -> [\"jmf\", \"rle\", \"sk\", \"km\", \"af\", \"jw\"]\n```\n\n----------------------------------------\n\nTITLE: Checking Sidebar Collapsed State in JavaScript\nDESCRIPTION: Demonstrates how to check if a sidebar is collapsed using the isCollapsed() method of the DHTMLX Sidebar API.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/sidebar/work_with_sidebar.md#2025-04-22_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nsidebar.isCollapsed(); // -> true/false\n```\n\n----------------------------------------\n\nTITLE: Initializing Combo Box with newOptions in JavaScript\nDESCRIPTION: This snippet demonstrates how to initialize a DHTMLX Combo Box with the 'newOptions' configuration enabled. It allows users to add new options to the data collection.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/combobox/api/combobox_newoptions_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst combobox = new dhx.Combobox(\"combo_container\", {\n    multiselection: true,\n    newOptions: true  \n});\n```\n\n----------------------------------------\n\nTITLE: Showing/Hiding Datepicker Control in DHTMLX Toolbar\nDESCRIPTION: Demonstrates how to show or hide a Datepicker control by using the show() and hide() methods of Toolbar with the control's ID.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/toolbar/datepicker.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ntoolbar.show(id);\ntoolbar.hide(id);\n```\n\n----------------------------------------\n\nTITLE: Styling List with Custom CSS Classes in JavaScript\nDESCRIPTION: Demonstrates how to apply custom CSS classes to a DHTMLX List component for styling. It shows setting up CSS classes and applying them to the List configuration.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/list/customization.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<style>\n    .my-first-class {\n        /*some styles*/\n    }\n    \n    .my-second-class {\n        /*some styles*/\n    }\n</style>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst list = new dhx.List(\"list_container\", { \n    css:\"my-first-class my-second-class\"\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Key Navigation in Tree\nDESCRIPTION: Creates a Tree component with keyboard navigation support, allowing users to navigate through items using arrow keys.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree/configuration.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst tree = new dhx.Tree(\"tree_container\", {keyNavigation: true});\n```\n\n----------------------------------------\n\nTITLE: Setting the Active Page - DHTMLX Pagination API - JavaScript\nDESCRIPTION: Sets the currently active page in a DHTMLX widget using the setPage() method. The method accepts a zero-based page index as its argument and updates the current page accordingly. Requires an initialized pagination object; expects a valid integer index.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/pagination/usage.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\npagination.setPage(0);\n```\n\n----------------------------------------\n\nTITLE: Handling Click Event in DHTMLX DataView (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to attach an event listener to the 'click' event of a DataView component. It logs a message to the console when an item is clicked, displaying the clicked item's ID.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/dataview/api/dataview_click_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndataview.events.on(\"click\", function(id, e){\n   console.log(\"The item with the id \"+ dataview.selection.getId(id) +\" was clicked.\");\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX Grid with Frozen Top Rows\nDESCRIPTION: Example of creating a DHTMLX Grid instance with 2 frozen rows at the top using the topSplit configuration option. This property was introduced in version 7.0 and allows specifying the number of rows to be frozen from the top of the grid.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_topsplit_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst grid = new dhx.Grid(\"grid_container\", {\n    columns: [\n        // columns config\n    ],\n    topSplit: 2,\n    data: dataset\n});\n```\n\n----------------------------------------\n\nTITLE: Destroying Form Spacer in JavaScript DHTMLX\nDESCRIPTION: Demonstrates how to use the destructor() method to remove a Spacer control instance from a Form and free up associated resources.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/spacer/spacer_destructor_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"spacer\").destructor();\n```\n\n----------------------------------------\n\nTITLE: Starting Local Development Server using npm Shell\nDESCRIPTION: Executes the npm start script, typically configured in `package.json` (often utilizing webpack-dev-server), to compile the application and launch a local web server. This allows developers to view and test the application in a browser during development.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/optimus_guides/how_to_start_optimus.md#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Activating Fullscreen Mode for DHTMLX Window in JavaScript\nDESCRIPTION: This snippet demonstrates how to call the `setFullScreen()` method on an instance of a DHTMLX Window (`dhxWindow`) to make it occupy the entire screen. This method takes no arguments and returns void. It requires an existing DHTMLX Window object and was introduced in version 6.3.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/window/api/window_setfullscreen_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndhxWindow.setFullScreen();\n```\n\n----------------------------------------\n\nTITLE: Opening Image Selection Dialog for Avatar in DHTMLX Form (JavaScript)\nDESCRIPTION: This snippet demonstrates how to use the selectFile() method to open a file selection dialog for the Avatar control in a DHTMLX Form. The type and extension of the selected image depend on the 'accept' property in the control's configuration.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/avatar/avatar_selectfile_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nform.getItem(\"avatar\").selectFile();\n```\n\n----------------------------------------\n\nTITLE: Handling afterChangeProperties Event in DHTMLX Form Spacer Control\nDESCRIPTION: This example demonstrates how to attach an event handler to the afterChangeProperties event of a Spacer control in a DHTMLX Form. The event fires after configuration attributes of the control have been changed dynamically and provides access to the modified properties.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/spacer/spacer_afterchangeproperties_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"spacer\").events.on(\"afterChangeProperties\", function(properties) {\n    console.log(\"afterChangeProperties\", properties);\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Avatar Upload Complete Event in DHTMLX Form\nDESCRIPTION: Demonstrates how to attach an event listener to the uploadComplete event of an Avatar control in a DHTMLX Form. The event fires when file upload is completed and provides the current value of the control as an object parameter.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/avatar/avatar_uploadcomplete_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"avatar\").events.on(\"uploadComplete\", (value) => {\n    console.log(\"uploadComplete\", value);\n});\n```\n\n----------------------------------------\n\nTITLE: Attaching Event Listener for afterHide Event in DHTMLX Layout (JavaScript)\nDESCRIPTION: This snippet demonstrates how to attach an event listener for the afterHide event of a DHTMLX Layout instance. The event fires after a cell is hidden and provides the id of the hidden cell as a parameter.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/layout/api/layout_afterhide_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlayout.events.on(\"afterHide\", function(id){\n    // your logic here\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring a Datepicker Icon in DHTMLX Ribbon (JavaScript Object)\nDESCRIPTION: Shows the configuration object structure for a Datepicker control, highlighting how to add an icon using the `icon` property. This object would typically be passed to a method like `ribbon.data.add()`. It depends on having the specified CSS icon classes (e.g., \"dxi dxi-calendar-today\") available.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/ribbon/datepicker.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n{\n    type: \"datePicker\",\n    icon: \"dxi dxi-calendar-today\",\n}\n```\n\n----------------------------------------\n\nTITLE: Adding HTML Content to Layout Cell\nDESCRIPTION: Demonstrates how to create a Layout instance and add HTML content to a specific cell using the attachHTML method. The example shows initializing a Layout with specific dimensions and inserting a simple HTML paragraph.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/layout/api/cell/layout_cell_attachhtml_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst layout = new dhx.Layout(\"layout_container\", {\n    width:\"400px\", height:\"600px\"\n});\nconst html = \"<p>Hello world</p>\";\nlayout.getCell(\"content\").attachHTML(html);\n```\n\n----------------------------------------\n\nTITLE: Checking Visibility of Colorpicker Control in DHTMLX Form (JavaScript)\nDESCRIPTION: This snippet demonstrates how to use the isVisible() method to check if a Colorpicker control is visible on the page. The method returns a boolean value indicating the visibility status.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/colorpicker/colorpicker_isvisible_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"colorpicker\").isVisible(); \n// -> true/false\n```\n\n----------------------------------------\n\nTITLE: Handling afterShow Event for Colorpicker in DHTMLX Form (JavaScript)\nDESCRIPTION: This snippet demonstrates how to attach an event handler to the afterShow event of a Colorpicker control in a DHTMLX Form. The handler receives the current value of the control as a parameter and logs it to the console.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/colorpicker/colorpicker_aftershow_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"colorpicker\").events.on(\"afterShow\", function(value) {\n    console.log(\"afterShow\", value);\n});\n```\n\n----------------------------------------\n\nTITLE: Using isSelected Method with Sidebar in JavaScript\nDESCRIPTION: This example demonstrates how to check if a Sidebar item is selected using the isSelected method. The method accepts an item ID and returns a boolean value indicating the selection state.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/sidebar/api/sidebar_isselected_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsidebar.isSelected(\"categoryPost\"); // -> returns true/false\n```\n\n----------------------------------------\n\nTITLE: Setting Monday as Start of Week\nDESCRIPTION: Configures the calendar to use Monday as the first day of the week instead of the default Sunday.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar2/configuring.mdx#2025-04-22_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nvar calendar = new dhx.Calendar(\"calendar_container\", {\n    weekStart: \"monday\"\n});\n```\n\n----------------------------------------\n\nTITLE: Attaching Component to DHTMLX Window\nDESCRIPTION: Demonstrates how to attach a DHTMLX richtext component to a window instance and display it. The method accepts a component name/object and optional configuration settings.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/window/api/window_attach_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndhxWindow.attach(\"richtext\",{mode: \"document\"});\ndhxWindow.show();\n```\n\n----------------------------------------\n\nTITLE: Handling afterKeyDown Event in DHTMLX Grid (JavaScript)\nDESCRIPTION: This snippet demonstrates how to attach an event listener for the afterKeyDown event in a DHTMLX Grid. The event fires after the user presses a shortcut key, and provides access to the native KeyboardEvent object.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_afterkeydown_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngrid.events.on(\"afterKeyDown\", (event) => {\n    // your logic here\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Multi-selection in DataView\nDESCRIPTION: Demonstrates how to enable multi-selection of DataView items using the multiselection configuration option.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/dataview/configuration.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst dataview = new dhx.DataView(\"dataview_container\", {multiselection:true});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst dataview = new dhx.DataView(\"dataview_container\", {\n    multiselection:\"ctrlClick\"\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Layout's beforeCollapse Event in JavaScript\nDESCRIPTION: This example demonstrates how to attach an event handler to the beforeCollapse event of a Layout component. The handler receives the cell ID and can prevent collapse by returning false.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/layout/api/layout_beforecollapse_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlayout.events.on(\"beforeCollapse\", function(id){\n    // your logic here\n    return false;\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Form with Checkbox Group\nDESCRIPTION: Example showing how to create a Form with a Checkbox Group control and retrieve its properties using getProperties() method.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/checkbox_group/checkboxgroup_getproperties_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst form = new dhx.Form(\"form_container\", { \n    rows: [\n        {\n            id: \"checkboxGroup\",\n            type: \"checkboxGroup\",\n            name: \"checkboxGroup\",\n            required: true,\n            label: \"Checkbox Group\",\n            labelWidth: 140,\n            labelPosition: \"left\",\n            helpMessage: \"Help information\",\n            padding: \"50px\",\n            value: {\n                first: true,\n            },\n            options: {\n                padding: \"50px\",\n                rows: [\n                    {\n                        id: \"first\",\n                        type: \"checkbox\",\n                        text: \"Select 1\",\n                    },\n                    {\n                        id: \"second\",\n                        type: \"checkbox\",\n                        text: \"Select 2\",\n                        checked: true\n                    }\n                ]\n            }\n        }\n     ]\n});\n\n// return the object of the CheckboxGroup control \nform.getItem(\"checkboxGroup\").getProperties();\n\n// return the object of a checkbox of the CheckboxGroup control \nform.getItem(\"checkboxGroup\").getProperties(\"second\");\n```\n\n----------------------------------------\n\nTITLE: Enabling a Disabled Colorpicker Control in DHTMLX Form (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to enable a previously disabled Colorpicker control within a DHTMLX Form. The enable() method is called on the Colorpicker item retrieved from the form.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/colorpicker/colorpicker_enable_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nform.getItem(\"colorpicker\").enable();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Textarea Value in DHTMLX Form (JavaScript)\nDESCRIPTION: This snippet demonstrates how to use the getValue() method to retrieve the current value of a Textarea control in a DHTMLX Form. The method returns a string containing the text entered in the textarea.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/textarea/textarea_getvalue_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst value = form.getItem(\"textarea\").getValue();\n// -> \"Some nice text\"\n```\n\n----------------------------------------\n\nTITLE: Using stopPropagation for Event Handling in JavaScript\nDESCRIPTION: Shows an alternative way to prevent event bubbling using stopPropagation() method instead of returning false from the handler function. This approach is available from DHTMLX v7.3.6 onwards.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/list/api/list_eventhandlers_config.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\neventHandlers: {\n    onclick: {\n        class_name: (event) => {                              \n            evt = event || window.event;\n            evt.stopPropagation();\n            console.log(\"button click\");\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Item Selection in DHTMLX List with CSS\nDESCRIPTION: Shows how to customize the appearance of selected items in a DHTMLX List using CSS, including setting a custom background color for selected items.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/list/customization.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<style>\n    .custom {\n        --dhx-color-primary: #118d8d;\n    }\n    .custom .dhx_list-item--selected {\n        background-color: rgba(17, 141, 141, 0.3);\n    }\n</style>\n\n<script>\n    const list = new dhx.List(\"list_container\", {\n        template, \n        css: \"custom dhx_widget--bordered\"\n    });\n    list.data.parse(data);\n</script>\n```\n\n----------------------------------------\n\nTITLE: Initializing Slider with Left Label Position in JavaScript\nDESCRIPTION: This code snippet demonstrates how to create a new Slider instance with the label positioned to the left of the slider. The labelPosition config is set to \"left\".\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/slider/api/slider_labelposition_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst slider = new dhx.Slider(\"slider_container\", { \n   labelPosition:\"left\" \n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Date Range as Strings\nDESCRIPTION: Shows how to get a date range as an array of formatted strings from a range-enabled calendar.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar/api/calendar_getvalue_method.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst date = calendar.getValue(); // ->  [\"03/06/19\", \"19/06/19\"]\n```\n\n----------------------------------------\n\nTITLE: Adding DatePicker to DHTMLX Form\nDESCRIPTION: This snippet demonstrates how to initialize a Form with a DatePicker control. It includes configuration for the control's type, name, label, and label width.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/calendar.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst form = new dhx.Form(\"form_container\", {\n    rows: [\n        {\n            type: \"datepicker\",\n            name: \"datepicker\",\n            label: \"date\",\n            labelWidth: \"50px\"\n        }\n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Focused Item ID in DataView\nDESCRIPTION: This code snippet demonstrates how to use the getFocus() method of a DataView instance to retrieve the id of the currently focused item. The method returns either a string or number representing the id of the focused item.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/dataview/api/dataview_getfocus_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ndataview.getFocus(); // -> \"item_id\"\n```\n\n----------------------------------------\n\nTITLE: Filtering TreeCollection Data with a Function in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the filter() method with a function to filter data in a DHTMLX Grid. The function checks if the lowercase value of each item contains the letter 'a'.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree_collection/api/treecollection_filter_method.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst grid = new dhx.Grid(\"grid_container\", {\n    type: \"tree\",\n    columns: [\n        // columns config\n    ],\n    data: dataset,\n});\n\n// filtering data by a function\ngrid.data.filter(function (item) {\n    return item.value.toLowerCase().indexOf(\"a\") !== -1;\n});\n```\n\n----------------------------------------\n\nTITLE: Showing All DHTMLX Ribbon Items in JavaScript\nDESCRIPTION: This example shows the usage of the `show()` method without any parameters, available from DHTMLX v7.0 onwards. Calling `ribbon.show()` makes all currently hidden items within the Ribbon component visible. Requires an initialized DHTMLX Ribbon instance (`ribbon`).\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/ribbon/api/ribbon_show_method.md#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n// shows all Ribbon items\nribbon.show();\n```\n\n----------------------------------------\n\nTITLE: Checking if a Menu Item is Disabled in JavaScript\nDESCRIPTION: Demonstrates how to check if a menu item is disabled using the isDisabled() method. The method takes the ID of the menu item as a parameter.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/menu/work_with_menu.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmenu.isDisabled(\"1\"); // -> true/false\n```\n\n----------------------------------------\n\nTITLE: Handling beforeChangeProperties Event in DHTMLX Form Toggle Group\nDESCRIPTION: This snippet demonstrates how to attach an event listener for the beforeChangeProperties event of a Toggle Group control in a DHTMLX Form. It logs the properties being changed and always allows the change to proceed.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/togglegroup/togglegroup_beforechangeproperties_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"toggleGroup\").events.on(\"beforeChangeProperties\", function(properties) {\n    console.log(\"beforeChangeProperties\", properties);\n    return true;\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Spacer in DHTMLX Sidebar with JavaScript\nDESCRIPTION: This code shows how to define a Spacer control within the data array for a DHTMLX Sidebar. The spacer is configured with a type property (required) and an optional id property.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/sidebar/api/api_spacer_properties.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = [\n    {\n        type: \"spacer\",\n        id?: string | number,\n    },\n    // more Sidebar controls\n]\n```\n\n----------------------------------------\n\nTITLE: Implementing Draggable Grid Columns\nDESCRIPTION: Example showing how to configure a non-draggable column in a DHTMLX Grid with dragItem configuration.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/gridcolumn_properties/gridcolumn_draggable_property.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst grid = new dhx.Grid(\"grid_container\", {\n    columns: [\n        { id: \"density\", header: [{ text: \"Density\" }], draggable: false },\n        // more columns configuration objects\n    ],\n    dragItem: \"column\", \n    // more options\n});\n```\n\n----------------------------------------\n\nTITLE: Styling Combo Box with CSS Classes\nDESCRIPTION: Demonstrates how to add custom CSS classes to style the Combo Box component with custom classes.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/combobox/customization.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<style>\n    .my_first_class {\n        /*some styles*/\n    }\n    \n    .my_second_class {\n        /*some styles*/\n    }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Configuring Colorpicker Display Modes\nDESCRIPTION: Examples of initializing Colorpicker in picker-only and palette-only modes.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/colorpicker/configuration.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst colorpicker = new dhx.Colorpicker(\"colorpicker_container\", {\n    pickerOnly: true\n});\n\n// Palette-only mode\nconst colorpicker = new dhx.Colorpicker(\"colorpicker_container\", {\n    paletteOnly: true\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Selected Color from JavaScript ColorPicker\nDESCRIPTION: Demonstrates how to retrieve the currently selected color from the ColorPicker using the getValue() method. The color is returned in Hex format.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/colorpicker/manipulating_colorpicker.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncolorpicker.getValue(); // -> \"#F9E6AD\"\n```\n\n----------------------------------------\n\nTITLE: Setting Focus on Colorpicker Value - JavaScript\nDESCRIPTION: Demonstrates how to set focus on a specific color in the colorpicker using a hex color code. The method accepts a hex color value as a string parameter and sets the focus on that color in the colorpicker interface.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/colorpicker/api/colorpicker_setfocus_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncolorpicker.setFocus(\"#BDF0E9\");\n```\n\n----------------------------------------\n\nTITLE: Grid Spans with Summary Callback\nDESCRIPTION: Demonstrates how to use spans with summary calculations and callback functions for dynamic content generation.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_spans_config.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst grid = new dhx.Grid(\"grid_container\", {\n    columns: [\n        { width: 200, id: \"country\", header: [{ text: \"Country\" }] },\n        { \n            width: 150, \n            id: \"population\", \n            header: [{ text: \"Population\" }],\n            summary: \"count\"\n        }\n    ],\n    summary: { totalPopulation: [\"population\", \"sum\"] },\n    spans: [\n        {\n            row: \"rowid\",\n            column: \"population\",\n            rowspan: 9,\n            text: ({ count }) => (\"Count population:\" + count)\n        },\n    ],\n    data: dataset\n});\n```\n\n----------------------------------------\n\nTITLE: Getting RadioGroup Value\nDESCRIPTION: Demonstrates how to retrieve the current value of a RadioGroup control using the getItem() method.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/radiogroup.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst value = form.getItem(\"radiogroup\").getValue();\n```\n\n----------------------------------------\n\nTITLE: Applying Custom CSS Classes to dhtmlx Calendar\nDESCRIPTION: This example demonstrates how to add custom CSS classes to a Calendar instance. The code first defines two custom CSS classes and then applies them when initializing a new Calendar instance.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar2/api/calendar_css_config.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<style>\n    .my_first_class {\n        /*some styles*/\n    }\n \n    .my_second_class {\n        /*some styles*/\n    }\n</style>\n \nvar calendar = new dhx.Calendar({\n    css:\"my_first_class my_second_class\"\n});\n```\n\n----------------------------------------\n\nTITLE: Handling keydown Event in DHTMLX Menu (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to attach an event listener for the 'keydown' event on a DHTMLX Menu instance. It logs the pressed key to the console when any key is pressed while a menu option is in focus.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/menu/api/menu_keydown_event.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nmenu.events.on(\"keydown\", function(event, id) {\n    console.log(\"You've pressed the key: \" + event.key);\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Datepicker Control to DHTMLX Toolbar in JavaScript\nDESCRIPTION: Demonstrates how to add a Datepicker control to a toolbar using the add() method of Tree Collection.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/toolbar/datepicker.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntoolbar.data.add({\n    type: \"datePicker\"\n});\n```\n\n----------------------------------------\n\nTITLE: Checking Disabled State of Timepicker in DHTMLX Form\nDESCRIPTION: This code snippet demonstrates how to use the isDisabled() method to check if a Timepicker control in a DHTMLX Form is disabled. The method returns a boolean value indicating the disabled state of the control.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/timepicker/timepicker_isdisabled_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nform.getItem(\"timepicker\").isDisabled(); \n// -> true/false\n```\n\n----------------------------------------\n\nTITLE: Releasing Colorpicker Resources with destructor Method in JavaScript\nDESCRIPTION: This code snippet demonstrates how to use the destructor method to release resources occupied by a Colorpicker instance. It's typically called when the Colorpicker is no longer needed in the application.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/colorpicker/api/colorpicker_destructor_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncolorpicker.destructor();\n```\n\n----------------------------------------\n\nTITLE: Checking Button Visibility in DHTMLX Form\nDESCRIPTION: Demonstrates how to use the isVisible() method to check if a Button control is visible in a DHTMLX Form. Returns a boolean value indicating visibility status.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/button/button_isvisible_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"button\").isVisible();\n// -> true/false\n```\n\n----------------------------------------\n\nTITLE: Configuring TimePicker Control in DHTMLX Suite\nDESCRIPTION: This snippet demonstrates the configuration options for the TimePicker control in DHTMLX Suite. It includes attributes such as controls, css, editable, errorMessage, and more. Each attribute is specified with its corresponding data type.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/form_setproperties_method.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    controls: boolean,\n    css: string,\n    editable: boolean,\n    errorMessage: string,\n    height: string | number| \"content\",\n    helpMessage: string,\n    hiddenLabel: boolean,\n    icon: string,\n    label: string,\n    labelPosition: string,\n    labelWidth: string | number,\n    padding: string | number,\n    placeholder: string,\n    preMessage: string,\n    required: boolean,\n    successMessage: string,\n    timeFormat: number,\n    validation: function,\n    valueFormat: string,\n    width: string | number | \"content\"\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Grid with Right-Split Frozen Columns in JavaScript\nDESCRIPTION: Creates a new Grid instance with 2 columns frozen from the right side. The rightSplit property specifies the number of columns to be fixed on the right side of the grid.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_rightsplit_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst grid = new dhx.Grid(\"grid_container\", {\n    columns: [\n        // columns config\n    ],\n    rightSplit: 2,\n    data: dataset\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Slider Property Changes in DHTMLX Form - JavaScript\nDESCRIPTION: Example showing how to attach an event handler to the afterChangeProperties event of a Slider control. The event fires after configuration attributes have been changed dynamically and provides access to the modified properties.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/slider/slider_afterchangeproperties_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"slider\").events.on(\"afterChangeProperties\", function(properties) {\n    console.log(\"afterChangeProperties\", properties);\n});\n```\n\n----------------------------------------\n\nTITLE: Attaching Event Listener for beforeExpand Event in DHTMLX Layout\nDESCRIPTION: This snippet demonstrates how to attach an event listener for the beforeExpand event in a DHTMLX Layout. The event fires before expanding a Layout cell and can be used to implement custom logic or prevent cell expansion.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/layout/api/layout_beforeexpand_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlayout.events.on(\"beforeExpand\", function(id){\n    // your logic here\n    return false;\n});\n```\n\n----------------------------------------\n\nTITLE: Checking visibility of a Select control in DHTMLX Form (JavaScript)\nDESCRIPTION: This example demonstrates how to use the isVisible() method to check whether a Select control is visible on the page. The method returns a boolean value indicating visibility status.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/select/select_isvisible_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"select\").isVisible(); \n// -> true/false\n```\n\n----------------------------------------\n\nTITLE: Basic Calendar Date Display\nDESCRIPTION: Shows how to display a specific date in the calendar using the showDate() method.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar/api/calendar_showdate_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncalendar.showDate(new Date(2020,11,12));\n```\n\n----------------------------------------\n\nTITLE: Creating Default Calendar in 'calendar' Mode\nDESCRIPTION: Initializes a new Calendar widget with default settings, showing the current year and month.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar/configuring.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst calendar = new dhx.Calendar(\"calendar_container\");\n```\n\n----------------------------------------\n\nTITLE: Avatar Control Properties Schema\nDESCRIPTION: Configuration schema showing all available properties for the Avatar form control.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/form_setproperties_method.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    css: string,\n    width: string | number | \"content\",\n    height: string | number | \"content\",\n    padding: string | number,\n    label: string,\n    labelWidth: string | number,\n    labelPosition: \"left\" | \"top\",\n    hiddenLabel: boolean,\n    helpMessage: string,\n    required: boolean,\n    preMessage: string,\n    successMessage: string,\n    errorMessage: string,\n    validation: (value: object) => boolean,\n    readOnly: boolean,\n    removeIcon: boolean,\n    size: \"small\" | \"medium\" | \"large\" | number,\n    circle: boolean,\n    alt: string,\n    icon: string,\n    placeholder: string,\n    preview: string,\n    accept: string,\n    target: string,\n    fieldName: string,\n    autosend: boolean,\n    params: { [key: string]: any },\n    headerParams: { [key: string]: any },\n    updateFromResponse: boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Inverse Mode Slider\nDESCRIPTION: Creates a slider with inverse mode enabled, rendering values from max (100) to min (0) with step size of 1.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/slider/configuring_slider.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst slider = new dhx.Slider(\"slider_container\", { \n   inverse:true,\n   min: 100,\n   max: 0,\n   step:1\n});\n```\n\n----------------------------------------\n\nTITLE: Applying CSS Classes to Combo Box\nDESCRIPTION: Shows how to apply custom CSS classes to a Combo Box instance during initialization.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/combobox/customization.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst combo = new dhx.Combobox(\"combo_container\", {\n    css:\"my_first_class my_second_class\"\n});\n```\n\n----------------------------------------\n\nTITLE: Styling Layout Cells with Custom CSS in HTML\nDESCRIPTION: Demonstrates how to define custom CSS classes for styling Layout cells. These classes can be applied to specific cells to change their appearance.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/layout/customization.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<style>\n    .my_first_class {\n        /*some styles*/\n    }\n    \n    .my_second-class {\n        /*some styles*/\n    }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Firing Events in DHTMLX Tree\nDESCRIPTION: Demonstrates how to manually fire events in a Tree component using the tree.events.fire() method.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree/events_handling.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ntree.events.fire(\"name\",args);\n// where args is an array of arguments\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX Timepicker with Object Value - JavaScript\nDESCRIPTION: This snippet shows how to initialize a DHTMLX Timepicker using an object for the 'value' property. The object should contain keys for 'hour', 'minute', and either 'AM' (boolean) for 12-hour format or just 'hour' and 'minute' for 24-hour format. DHTMLX Suite must be present in the project and the container must exist. Only the described object structure is supported; misnamed keys may lead to incorrect initialization.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/timepicker/api/timepicker_value_config.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// the value as an object\nconst timepicker = new dhx.Timepicker(\"timepicker_container\", {\n    value: {hour: 10, minute: 50, AM: true}\n});\n```\n\n----------------------------------------\n\nTITLE: Handling beforeCollapse Event in DHTMLX Grid\nDESCRIPTION: This example demonstrates how to initialize a DHTMLX Grid with TreeGrid mode and attach an event listener for the beforeCollapse event. The event handler can be used to implement custom logic before a row is collapsed, with the ability to prevent the collapse action.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_beforecollapse_event.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst grid = new dhx.Grid(\"grid_container\", {\n    type: \"tree\",\n    columns: [\n       // columns config\n    ],\n    data: dataset,\n});\n\ngrid.events.on(\"beforeCollapse\", (rowId) => {\n    // your logic here\n    return false;\n});\n```\n\n----------------------------------------\n\nTITLE: Using getCell Method in JavaScript Tabbar\nDESCRIPTION: This snippet demonstrates how to use the getCell method of a Tabbar instance to retrieve the config object of a specific cell. The method takes the id of the cell as a parameter and returns an object containing the cell's configuration and related properties.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tabbar/api/tabbar_getcell_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ntabbar.getCell(\"rome\");\n```\n\n----------------------------------------\n\nTITLE: Complete Combo Box Styling Example\nDESCRIPTION: Complete example showing both CSS styling and ComboBox initialization with custom border radius and background.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/combobox/customization.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<style>\n    body {\n        margin: 0;\n    }\n    .custom-class .dhx_combobox-input-box {\n        border-radius: 20px;\n        background: #FFF;\n    }\n</style>\n\n<script>\n    const combo = new dhx.Combobox(\"combo_container\", {\n        css: \"custom-class\"\n    });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Showing Datepicker Control in DHTMLX Form (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to use the show() method to display a Datepicker control within a DHTMLX Form. The method is called on a specific form item retrieved using the getItem() function.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/calendar/calendar_show_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nform.getItem(\"datepicker\").show();\n```\n\n----------------------------------------\n\nTITLE: Adding Custom CSS to DHTMLX Slider Component\nDESCRIPTION: This example demonstrates how to apply a custom CSS class to a DHTMLX Slider component. It shows how to define a custom CSS class that changes the primary color of the slider to a teal shade (#118d8d).\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/slider/api/slider_css_config.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<style>\n    .custom {\n        --dhx-color-primary: #118d8d;\n    }\n</style>\n\n<script>\n    const slider = new dhx.Slider(\"slider_container\", {\n        css: \"custom\"\n    });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Items to DataCollection in JavaScript\nDESCRIPTION: Shows how to add multiple items at once to a data collection by passing an array of objects to the add() method.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/data_collection/api/datacollection_add_method.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncomponent.data.add([\n    {\n        \"value\": 57.44787660011765,\n        \"id\": \"u1565340894584\"\n    },\n    {\n        \"value\": 14.612810637958095,\n        \"id\": \"u1565340894585\"\n    },\n    {\n        \"value\": 83.9707181117741,\n        \"id\": \"u1565340894586\"\n    },\n    {\n        \"value\": 59.01285878162044,\n        \"id\": \"u1565340894587\"\n    }\n]);\n```\n\n----------------------------------------\n\nTITLE: Disabling a Specific Option in Select Control (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to disable a specific option in a Select control within a DHTMLX Form. It uses the disable() method with a value parameter to target a particular option.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/select/select_disable_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nform.getItem(\"select\").disable(1);\n```\n\n----------------------------------------\n\nTITLE: Displaying Only Current Month Days\nDESCRIPTION: Configures the Calendar to show only days of the current month, hiding dates from previous and next months.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar/configuring.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst calendar = new dhx.Calendar(\"calendar_container\", {\n    thisMonthOnly:true\n});\n```\n\n----------------------------------------\n\nTITLE: Selecting All Items in JavaScript List\nDESCRIPTION: Selects all unselected items in the List when calling the add() method without parameters.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/list/usage_selection.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nlist.selection.add();\n```\n\n----------------------------------------\n\nTITLE: Handling Timepicker Blur Event in DHTMLX Form\nDESCRIPTION: Example of attaching an event listener to the blur event of a Timepicker control in a DHTMLX Form. The event fires when the Timepicker loses focus and provides the current value as a parameter.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/timepicker/timepicker_blur_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"timepicker\").events.on(\"blur\", (value) => {\n    console.log(\"blur\", value);\n});\n```\n\n----------------------------------------\n\nTITLE: Loading XML Data into DHTMLX Toolbar\nDESCRIPTION: Shows how to load toolbar data using parse() with XML string format. The example includes the same structure as the JSON example but in XML format.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree_collection/api/treecollection_parse_method.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ntoolbar.data.parse(\"<root>\" +\"<item><type>button</type><icon>dxi-plus</icon><value>Tania</value>\" +\"<count>11</count></item>\" +\"<item><type>separator</type></item>\" +\"<item><type>navItem</type><value>Language</value><items>\" +\"<item><icon>dxi-printer</icon><value>English</value></item>\" +\"<item><icon>dxi-printer</icon><value>日本語</value></item>\" +\"</root>\",\"xml\");\n```\n\n----------------------------------------\n\nTITLE: Setting Initially Selected Date as Date Object\nDESCRIPTION: Configures a calendar with February 10, 2019 preselected using a Date object.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar2/configuring.mdx#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// selects a date\nvar calendar = new dhx.Calendar(\"calendar_container\", {\n    value: new Date(2019,01,10)\n});\n```\n\n----------------------------------------\n\nTITLE: Using getText() Method for Textarea in DHTMLX Form\nDESCRIPTION: This snippet demonstrates how to use the getText() method to retrieve the text value with an applied mask from a Textarea control in a DHTMLX Form. It compares the output with getValue() method for both number and string input types.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/textarea/textarea_gettext_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst input = form.getItem(\"textarea\");\ninput.setValue(1000.01);\n\ninput.getValue(); // 1000.01 for the input type number\ninput.getValue(); // \"1000.01\" for the input type string\n\ninput.getText(); // \"1,000.01\" with the applied numberMask/patternMask\n```\n\n----------------------------------------\n\nTITLE: Showing Toggle Control in DHTMLX Form\nDESCRIPTION: Demonstrates how to show a Toggle control on a form using the show() method. The method is called on a Toggle control retrieved using the form's getItem() method.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/toggle/toggle_show_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"toggle\").show();\n```\n\n----------------------------------------\n\nTITLE: Setting DataView Height\nDESCRIPTION: Demonstrates how to set the overall height of the DataView component using the height configuration option.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/dataview/configuration.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst dataview = new dhx.DataView(\"dataview_container\", {height: 150});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst dataview = new dhx.DataView(\"dataview_container\", {height: \"400px\"});\n```\n\n----------------------------------------\n\nTITLE: Initializing Confirm Box in JavaScript\nDESCRIPTION: Shows how to configure and display a confirm box with a custom header, text, buttons, and button alignment.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/message/configuration.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ndhx.confirm({\n    header:\"Confirm Header\",\n    text:\"Confirm text\",\n    buttons:[\"cancel\", \"apply\"],\n    buttonsAlignment:\"center\"\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing beforeUnSelect Event Handler in DHTMLX\nDESCRIPTION: Shows how to attach a handler to the beforeUnSelect event using the selection.events interface. The handler receives the item ID and can prevent unselection by returning false.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/selection/api/selection_beforeunselect_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncomponent.selection.events.on(\"beforeUnSelect\", function(id) {\n    console.log(id);\n    return false;\n});\n```\n\n----------------------------------------\n\nTITLE: Using beforeChangeProperties Event with Colorpicker in DHTMLX Form\nDESCRIPTION: This example demonstrates how to attach an event handler to the beforeChangeProperties event of a Colorpicker control in a DHTMLX form. The handler logs the properties being changed and returns true to allow the change to proceed.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/colorpicker/colorpicker_beforechangeproperties_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"colorpicker\").events.on(\"beforeChangeProperties\", function(properties) {\n    console.log(\"beforeChangeProperties\", properties);\n    return true;\n});\n```\n\n----------------------------------------\n\nTITLE: Handling beforeShow Event for Colorpicker in DHTMLX Form\nDESCRIPTION: This snippet demonstrates how to attach an event listener for the 'beforeShow' event of a Colorpicker control in a DHTMLX Form. The event fires before the control is shown and allows preventing the control from being displayed.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/colorpicker/colorpicker_beforeshow_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"colorpicker\").events.on(\"beforeShow\", function(value) {\n    console.log(\"beforeShow\", value);\n    return true;\n});\n```\n\n----------------------------------------\n\nTITLE: Checking if a Checkbox is Disabled in DHTMLX Form (JavaScript)\nDESCRIPTION: This code demonstrates how to use the isDisabled() method to check whether a Checkbox control is disabled in a DHTMLX Form. The method returns true if the checkbox is disabled and false otherwise.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/checkbox/checkbox_isdisabled_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"checkbox\").isDisabled(); // -> true/false\n```\n\n----------------------------------------\n\nTITLE: Attaching beforeShow Event Handler to Avatar Control in DHTMLX Form\nDESCRIPTION: This snippet demonstrates how to attach a beforeShow event handler to an Avatar control in a DHTMLX Form. The event fires before the control is shown and can be used to perform actions or prevent the control from being displayed.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/avatar/avatar_beforeshow_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"avatar\").events.on(\"beforeShow\", value => {\n    console.log(\"beforeShow\", value);\n    return true;\n});\n```\n\n----------------------------------------\n\nTITLE: Calling Events on List in JavaScript\nDESCRIPTION: Illustrates how to manually fire an event on a List component using the events.fire() method.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/list/events.md#2025-04-22_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nlist.events.fire(\"name\",args);\n// where args is an array of arguments\n```\n\n----------------------------------------\n\nTITLE: Defining Custom CSS Classes in HTML\nDESCRIPTION: This snippet demonstrates the basic structure for defining custom CSS classes within an HTML `<style>` block. These classes are intended to hold custom styling rules that can later be applied to the DHTMLX Pagination component.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/pagination/customization.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<style>\n    .my_first_class {\n        /*some styles*/\n    }\n    \n    .my_second-class {\n        /*some styles*/\n    }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX Slider with Custom Max Value in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a new Slider instance with a custom maximum value of 200. The 'max' property is used to set the upper limit of the slider's range.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/slider/api/slider_max_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst slider = new dhx.Slider(\"slider_container\", { \n    max:200\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Calendar with String Date Range\nDESCRIPTION: Example of creating a calendar instance with a date range selected using string dates and range mode enabled.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar/api/calendar_value_config.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst calendar = new dhx.Calendar(\"calendar_container\", {\n    value: ([\"03/06/19\", \"15/06/19\"]),\n    range: true  \n});\n```\n\n----------------------------------------\n\nTITLE: Complete Custom Styling Example for DHTMLX Sidebar\nDESCRIPTION: This comprehensive example shows how to create a custom dark theme for a DHTMLX Sidebar by defining CSS variables and applying them to the sidebar instance.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/sidebar/customization.md#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<style>\n    .custom,.custom--popup-menu {\n        --dhx-background-primary: #3A434A;\n        --dhx-background-secondary: #5a6872;\n        --dhx-background-additional: #5a6872;\n        --dhx-s-toolbar-background: var(--dhx-background-primary);\n\n        --dhx-color-primary: #118d8d;\n        --dhx-color-primary-hover: #49e9e9;\n        --dhx-color-primary-active: #49e9e9;\n\n        --dhx-font-color-primary: #fff;\n        --dhx-font-color-secondary: rgba(255, 255, 255, 0.75);\n        --dhx-font-color-additional: #fff;\n    }\n</style>\n\n<script>\n    const sidebar = new dhx.Sidebar(\"sidebar_container\", {\n        css: \"custom\",\n    });\n\n    sidebar.data.parse(data);\n</script>\n```\n\n----------------------------------------\n\nTITLE: Handling Datepicker Focus Event in DHTMLX Form\nDESCRIPTION: Example showing how to attach a focus event listener to a Datepicker control in a DHTMLX Form. The event fires when the Datepicker receives focus and provides the current value as either a string or Date object.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/calendar/calendar_focus_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"datepicker\").events.on(\"focus\", (value) => {\n    console.log(\"focus\", value);\n});\n```\n\n----------------------------------------\n\nTITLE: Loading JSON Data into DHTMLX Toolbar\nDESCRIPTION: Demonstrates loading hierarchical data into a toolbar using parse() with JSON array. The example shows structure with buttons, separators, and nested navigation items.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree_collection/api/treecollection_parse_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntoolbar.data.parse([\n    {\n        type: \"button\",\n        icon: \"dxi-plus\",\n        value: \"Tania\",\n        count: 11\n    },\n    {\n        type: \"separator\"\n    },            \n    {\n        type: \"navItem\",\n        icon: \"\",\n        value: \"Language\",\n        items: [\n            {\n                icon: \"dxi-printer\",\n                value: \"English\"\n            },\n            {\n                icon: \"dxi-printer\",\n                value: \"日本語\"\n            }\n        ]\n    }\n]);\n```\n\n----------------------------------------\n\nTITLE: Closing a Message Box in JavaScript using DHTMLX\nDESCRIPTION: This snippet demonstrates how to create a message box with custom properties and then close it using the close() method. The message is set to expire after 1000 milliseconds, but can be closed manually before that.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/message/api/message_close_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst message = dhx.message({\n    text:\"Message text\", \n    icon:\"dxi-clock\", \n    css:\"expire\", \n    expire:1000\n});\n\nmessage.close();\n```\n\n----------------------------------------\n\nTITLE: Applying Custom CSS to Combobox in HTML and JavaScript\nDESCRIPTION: This example demonstrates how to apply a custom CSS class to a DHTMLX Combobox. It includes both the HTML structure with styles and the JavaScript code to initialize the Combobox with the custom class.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/combobox/api/combobox_css_config.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<style>\n      body {\n        margin: 0;\n    }\n    .custom-class .dhx_combobox-input-box {\n        border-radius: 20px;\n        background: #FFF;\n    }\n</style>\n\n<script>\n    const combobox = new dhx.Combobox(\"combobox_container\", {\n        css: \"custom-class\"\n    });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Reducing DataCollection to Single Value in JavaScript\nDESCRIPTION: This code snippet demonstrates how to use the reduce() method of a DataCollection to calculate a total value. It iterates over each item in the collection, summing up the 'value' property of each item.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/data_collection/api/datacollection_reduce_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst total = component.data.reduce(function(acc, item) {\n    return acc + item.value;\n}, 0);\n```\n\n----------------------------------------\n\nTITLE: Clearing a Timepicker Control in DHTMLX Form\nDESCRIPTION: This example demonstrates how to use the clear() method to reset the value of a TimePicker control in a DHTMLX Form. The method takes no parameters and clears the currently selected time.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/timepicker/timepicker_clear_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"timepicker\").clear();\n```\n\n----------------------------------------\n\nTITLE: Preparing Menu Data Set in JavaScript\nDESCRIPTION: Example of creating a data set for DHTMLX Menu in JSON format. Demonstrates structure for menu items, separators, and spacers.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/menu/data_loading.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = [\n    { \n        value: \"File\", \n        items: [\n            {\n                value: \"New File\",\n                icon: \"dxi dxi-file-outline\",\n            },                        \n            {\n                value: \"Remove File\",\n                icon: \"dxi dxi-delete\",\n            }        \n        ]\n    },\n    {\n        type: \"separator\"\n    },\n    { \n        value: \"Edit\",\n        items: [\n            {\n                value: \"Undo\",\n                icon: \"dxi dxi-undo\",\n            },\n            {\n                value:  \"Redo\",\n                icon: \"dxi dxi-redo\",\n            }\n        ]\n    },\n    {\n        type: \"spacer\"\n    }\n];\n```\n\n----------------------------------------\n\nTITLE: Setting Colorpicker Width\nDESCRIPTION: Shows how to customize the width of the Colorpicker component.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/colorpicker/configuration.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst colorpicker = new dhx.Colorpicker(\"colorpicker_container\", {  \n    width: \"300px\"              \n});\n```\n\n----------------------------------------\n\nTITLE: Using the destructor() Method with DHTMLX Form Slider in JavaScript\nDESCRIPTION: Demonstrates how to call the destructor() method on a Slider control to remove the instance and release occupied resources. The code gets a specific Slider control by its ID and then destroys it.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/slider/slider_destructor_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"slider\").destructor();\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX Layout with Hidden Cell in JavaScript\nDESCRIPTION: This snippet demonstrates how to initialize a DHTMLX Layout with a hidden cell. The 'hidden' property is set to true for the cell, which will make it initially hidden.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/layout/api/cell/layout_cell_hidden_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst layout = new dhx.Layout(\"layout_container\", {\n    cols: [\n        { header: \"Cell header\", hidden:true}\n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: Handling beforeShow Event for Button Control in DHTMLX Form\nDESCRIPTION: This snippet demonstrates how to attach an event handler to the beforeShow event of a Button control in a DHTMLX Form. The handler logs the button's text and returns true to allow the control to be shown.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/button/button_beforeshow_event.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nform.getItem(\"button\").events.on(\"beforeShow\", function(text) {\n    console.log(\"beforeShow\", text);\n    return true;\n});\n```\n\n----------------------------------------\n\nTITLE: Setting HTML Content in Layout Cell\nDESCRIPTION: Demonstrates how to set HTML content inside a Layout cell using the html attribute.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/layout/cell_configuration.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst layout = new dhx.Layout(\"layout_container\", {\n    cols: [\n        { header: \"Cell header\", html: \"Hello world\"}\n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: Destroying Text Control in DHTMLX Form\nDESCRIPTION: Demonstrates how to use the destructor() method to remove a Text control instance from a form and release its resources. The method is called on a specific text item retrieved using the getItem() method.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/text/text_destructor_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"text\").destructor();\n```\n\n----------------------------------------\n\nTITLE: Window GetContainer Method Signature\nDESCRIPTION: TypeScript signature for the getContainer() method showing it returns an HTMLElement type.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/window/api/window_getcontainer_method.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ngetContainer(): HTMLElement;\n```\n\n----------------------------------------\n\nTITLE: Initializing Calendar with Week Numbers in JavaScript\nDESCRIPTION: This example demonstrates how to initialize a DHTMLX Calendar with week numbers enabled. The weekNumbers property is set to true to display week numbers alongside the calendar days.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar/api/calendar_weeknumbers_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst calendar = new dhx.Calendar(\"calendar_container\", { \n    weekNumbers: true\n});\n```\n\n----------------------------------------\n\nTITLE: Editing DataView Item in JavaScript\nDESCRIPTION: Demonstrates how to enable editing of a specific DataView item using its ID. The method requires the item ID as a parameter and enables the edit mode for that item.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/dataview/api/dataview_edititem_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndataview.editItem(\"1\");\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX Grid with Frozen Columns in JavaScript\nDESCRIPTION: This snippet demonstrates how to initialize a DHTMLX Grid with two frozen columns on the left side. The 'leftSplit' property is set to 2, which freezes the first two columns of the grid.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_leftsplit_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst grid = new dhx.Grid(\"grid_container\", {\n    columns: [\n        // columns config\n    ],\n    leftSplit:2,\n    data: dataset\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Icons for DHTMLX Tree in JavaScript\nDESCRIPTION: This snippet demonstrates how to initialize a DHTMLX Tree with custom icons for folder, open folder, and file items. It uses Font Awesome icons as an example.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree/api/tree_icon_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst tree = new dhx.Tree(\"tree_container\", {\n    icon: {\n        folder: \"fas fa-book\",\n        openFolder: \"fas fa-book-open\",\n        file: \"fas fa-file\"\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Number of Items per Row in DataView\nDESCRIPTION: Shows how to define the number of items to be displayed in a row of DataView using the itemsInRow configuration property.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/dataview/configuration.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst dataview = new dhx.DataView(\"dataview_container\", {itemsInRow: 5});\n```\n\n----------------------------------------\n\nTITLE: Detaching Event Listener from List in JavaScript\nDESCRIPTION: Shows how to detach a previously attached click event listener from a List component.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/list/events.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nlist.events.on(\"click\", function(id, e){\n    console.log(\"The item with the id \"+ list.selection.getId(id) +\" was clicked.\");\n});\n\nlist.events.detach(\"click\");\n```\n\n----------------------------------------\n\nTITLE: Using Icon Property in Control Parameters (JavaScript)\nDESCRIPTION: Demonstrates how to use the 'icon' property to add a default icon to a button control in DHTMLX Suite.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/helpers/icon.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    type:\"button\",\n    id: \"add\",\n    icon: \"dxi dxi-plus\",\n    value: \"Add\"\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Sorting Function for DataCollection in JavaScript\nDESCRIPTION: This example demonstrates how to set a custom function for sorting data items using the rule attribute in the sort() method. The function compares the id property of two items.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/data_collection/api/datacollection_sort_method.md#2025-04-22_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\ngrid.data.sort({\n    rule: (a, b) => a.id > b.id ? 1 : (a.id < b.id ? -1 : 0) \n});\n```\n\n----------------------------------------\n\nTITLE: Converting Data to XML Format\nDESCRIPTION: Shows how to use the serialize() method to convert grid data into XML format. The method takes an array of data objects and converts them into a structured XML string.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/helpers/datadrivers.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nxmlDataDriver.serialize([\n    {\n        country: \"China\", population: \"1415045928\", yearlyChange: \"0.0039\"\n    },\n    {\n        country: \"India\", population: \"1354051854\", yearlyChange: \"0.0111\"\n    },\n    {\n        country: \"U.S.\", population: \"326766748\", yearlyChange: \"0.0071\"\n    }\n]);\n```\n\n----------------------------------------\n\nTITLE: Applying Built-in DHTMLX CSS Classes to Calendar\nDESCRIPTION: This example shows how to apply DHTMLX's built-in CSS classes to a Calendar component. The code creates a new Calendar with a white background and borders using the library's predefined CSS classes.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar2/api/calendar_css_config.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar calendar = new dhx.Calendar({\n    css: \"dhx_widget--bg_white dhx_widget--bordered\"\n});\n```\n\n----------------------------------------\n\nTITLE: Custom HTML JSON Template for DHTMLX Ribbon (JavaScript/JSON)\nDESCRIPTION: Defines a JSON object for embedding custom HTML content within a DHTMLX Ribbon. It uses `type: \"customHTML\"` and includes an `html` property containing the raw HTML string to be rendered inside the ribbon.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/ribbon/data_loading.md#2025-04-22_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\n// custom HTML\n{\n    id: \"custom_html\",\n    type: \"customHTML\",\n    html: \"<div style='height:30px; border: 2px solid'>My HTML button</div>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Cell Selection in DHTMLX Grid using JavaScript\nDESCRIPTION: This code snippet demonstrates how to use the disable() method to prevent cell selection in a DHTMLX Grid. It's a simple one-line command that disables the selection functionality for the entire grid.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/selection/selection_disable_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngrid.selection.disable();\n```\n\n----------------------------------------\n\nTITLE: Hiding Select Control in DHTMLX Form (JavaScript)\nDESCRIPTION: This snippet demonstrates how to hide a Select control in a DHTMLX Form using the hide() method. It assumes you have a form instance with a Select control named 'select'.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/select/select_hide_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"select\").hide();\n```\n\n----------------------------------------\n\nTITLE: Handling Calendar Change Event in JavaScript\nDESCRIPTION: Example showing how to attach an event handler to the calendar change event. The handler receives the new date, old date, and a boolean indicating if the change was triggered by a click.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar2/api/calendar_change_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncalendar.events.on(\"Change\",function(date, oldDate, click){\n    console.log(\"Change selection from \"+oldDate+\" to \"+date);\n    console.log(click);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Layout Header Image in DHTMLX\nDESCRIPTION: Example showing how to add an image to a Layout cell header using the headerImage configuration property. The image is specified via a path string to the image file.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/layout/api/cell/layout_cell_headerimage_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst layout = new dhx.Layout(\"layout_container\", {\n    cols: [\n        { header: \"Cell header\", headerImage:\"/img.png\"}\n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: Hiding and Showing Menu Items in JavaScript\nDESCRIPTION: Demonstrates how to hide and show menu items using the hide() and show() methods. These methods can take an item ID or an array of IDs as parameters.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/menu/work_with_menu.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmenu.hide(id);\nmenu.show(id);\n```\n\n----------------------------------------\n\nTITLE: Handling Avatar Focus Event in DHTMLX Form\nDESCRIPTION: Example demonstrates how to attach a focus event listener to an Avatar control in a DHTMLX Form. The event handler receives the current value of the Avatar control when it gains focus.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/avatar/avatar_focus_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"avatar\").events.on(\"focus\", value => {\n    console.log(\"focus\", value);\n});\n```\n\n----------------------------------------\n\nTITLE: Checking Sidebar Collapse State with isCollapsed()\nDESCRIPTION: Method that returns a boolean value indicating whether the Sidebar component is in a collapsed state. Returns true if the sidebar is collapsed, false otherwise.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/sidebar/api/sidebar_iscollapsed_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsidebar.isCollapsed(); // -> true/false\n```\n\n----------------------------------------\n\nTITLE: Handling beforeChange Event in DHTMLX Form (JavaScript)\nDESCRIPTION: This code example demonstrates how to attach an event handler to the beforeChange event of a DHTMLX Form. The handler can perform custom logic and return a boolean to either allow or prevent the value change.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/form_beforechange_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.events.on(\"beforeChange\",function(name, value){\n    // your logic here\n    return true;\n});\n```\n\n----------------------------------------\n\nTITLE: Defining DHTMLX Ribbon ImageButton Configuration Object\nDESCRIPTION: This JavaScript snippet illustrates the data structure used to define an ImageButton control within a DHTMLX Ribbon. It outlines the various optional and required properties like 'type', 'src', 'id', 'parent', visual states ('active', 'disabled', 'hidden'), interactivity ('hotkey', 'tooltip', 'twoState'), appearance ('count', 'countColor', 'size', 'css'), and grouping ('group'). The table following the snippet provides detailed explanations for each property.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/ribbon/api/api_imagebutton_properties.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nconst data = [\n    {\n        type: \"imageButton\",\n        id?: string | number,\n        parent?: string,\n        src: string,\n\n        active?: boolean,\n        count?: number,\n        countColor?: \"danger\" | \"secondary\" | \"primary\" | \"success\",\n        group?: string,\n        hotkey?: string,\n        size?: \"small\" | \"medium\" | \"auto\",\n        tooltip?: string,\n        twoState?: boolean,\n    \n        css?: string | string[],\n        disabled?: boolean,\n        hidden?: boolean,\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Getting TimePicker Value\nDESCRIPTION: Retrieves the current value from a TimePicker control using the form's getItem() method.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/timepicker.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst value = form.getItem(\"timepicker\").getValue();\n```\n\n----------------------------------------\n\nTITLE: Checking Disabled State of Textarea in DHTMLX Form (JavaScript)\nDESCRIPTION: This snippet demonstrates how to use the isDisabled() method to check if a Textarea control in a DHTMLX Form is disabled. The method returns a boolean value indicating the disabled state of the control.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/textarea/textarea_isdisabled_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nform.getItem(\"textarea\").isDisabled(); \n// -> true/false\n```\n\n----------------------------------------\n\nTITLE: Checking Disabled State of Combo Box in DHTMLX Form (JavaScript)\nDESCRIPTION: This snippet demonstrates how to use the isDisabled() method to check if a Combo Box control in a DHTMLX Form is disabled. The method returns a boolean value indicating the disabled state of the control.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/combo/combo_isdisabled_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nform.getItem(\"combo\").isDisabled(); \n// -> true/false\n```\n\n----------------------------------------\n\nTITLE: Grid subRow with Nested SubGrid\nDESCRIPTION: Shows how to implement a Grid with a sub-row containing another Grid component. The subRow callback creates a new Grid instance with its own columns and data configuration.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_subrow_config.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst grid = new dhx.Grid(\"grid_container\", {\n    columns: [\n        { id: \"zone_name\", header: [{ text: \"Zone name\" }] },\n        { id: \"temperature\", header: [{ text: \"Temperature\" }] },\n    ],\n    data: dataset,\n    subRow: ({ data }) => {\n        return new dhx.Grid(null, {\n            columns: [\n                { id: \"animal_type\", header: [{ text: \"Animal type\" }] },\n                { id: \"name\", header: [{ text: \"Name\" }] },\n            ],\n            data,\n            autoWidth: true,\n        });\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing a DHTMLX Confirmation Box (JavaScript)\nDESCRIPTION: Shows how to create a modal confirmation box using the `dhx.confirm` constructor. This example configures the `header`, `text`, specifies custom button labels (`[\"decline\", \"accept\"]`) via the `buttons` array, and sets the `buttonsAlignment`. Confirmation boxes present choices to the user and typically trigger callbacks based on the button clicked.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/message/creating_message.md#2025-04-22_snippet_5\n\nLANGUAGE: js\nCODE:\n```\ndhx.confirm({\n    header:\"Confirm Header\",\n    text:\"Confirm text\",\n    buttons:[\"decline\", \"accept\"],\n    buttonsAlignment:\"center\"\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Toolbar Data with DHTMLX Suite in JavaScript\nDESCRIPTION: This JavaScript code demonstrates how to instantiate a DHTMLX Toolbar widget using a configuration object with the 'data' property. The 'data' array defines toolbar items, including buttons, inputs, spacers, and notification counters. Key parameters are 'id', 'type', 'value', and 'icon'. The 'data' config must supply unique 'id' values for each item or allow the library to auto-generate them. Inputs include an HTML container id and configuration object; the output is an initialized toolbar within the specified container. DHTMLX Suite library is a prerequisite.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/toolbar/api/toolbar_data_config.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst toolbar = new dhx.Toolbar(\"toolbar_container\", {\n    css: \"dhx_widget--bordered\",\n    data: [ \n        {\n            \"id\": \"edit\",\n            \"value\": \"Edit\"\n        },\n        {\n            \"id\": \"search\",\n            \"type\": \"input\",\n            \"placeholder\": \"Search\",\n            \"icon\": \"mdi mdi-magnify\"\n        },\n        {\n            \"type\": \"spacer\"\n        },\n        {\n            \"type\": \"button\",\n            \"view\": \"link\",\n            \"color\": \"secondary\",\n            \"circle\": true,\n            \"id\": \"notifications\",\n            \"icon\": \"mdi mdi-bell\",\n            \"tooltip\": \"Notifications\",\n            \"count\": 7\n        }\n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Grid with autoHeight in JavaScript\nDESCRIPTION: This snippet demonstrates how to initialize a DHTMLX Grid with the autoHeight option enabled. It allows long text to split into multiple lines based on column width and automatically adjusts the height of cells, headers, and footers.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_autoheight_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst grid = new dhx.Grid(\"grid_container\", {\n    columns: [\n        // columns config\n    ],\n    autoHeight: true,\n    data: dataset\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Radar Chart in DHTMLX\nDESCRIPTION: Setup for creating Radar charts with radial scales and multiple series. Includes configuration for scales, series colors and point styling, with legend options.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/chart/configuration_properties.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n    type: \"radar\",\n    scales: {\n        \"radial\": {\n            value: \"month\",\n            maxTicks: 10\n        }\n    },\n    series: [\n        {\n            id: \"A\",\n            value: \"company A\",\n            color: \"#81C4E8\",\n            pointColor: \"#81C4E8\"\n        },\n        {\n            id: \"B\",\n            value: \"company B\",\n            color: \"#74A2E7\",\n            pointColor: \"#74A2E7\"\n        },\n        {\n            id: \"C\",\n            value: \"company C\",\n            color: \"#5E83BA\",\n            pointColor: \"#5E83BA\"\n        }\n    ],\n    legend: {\n        series: [\"A\", \"B\", \"C\"],\n        halign: \"right\",\n        valign: \"top\"\n    }\n};\n\nconst chart = new dhx.Chart(\"chart\", config);\nchart.data.parse(dataset);\n```\n\n----------------------------------------\n\nTITLE: Configuring Radar Chart with setConfig Method\nDESCRIPTION: Demonstrates how to configure a radar chart using the setConfig() method. The example shows setting up scales, series data, and visual properties like colors and opacity.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/chart/api/chart_setconfig_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n    type: \"radar\",\n    scales: {\n        radial:{\n            value: \"month\",\n            maxTicks: 7\n        }\n    },\n    series: [\n        {\n            id: \"A\",\n            value: \"company A\",\n            fill: \"#000000\",\n            alpha: 0.3,\n            color: \"#000000\"\n        },\n        {\n            id: \"B\",\n            value: \"company B\",\n            fill: \"#FFFF33\",\n            alpha: 0.3,\n            color: \"#FFFF33\"\n        }\n    ]\n}\n\nchart.setConfig(config);\n```\n\n----------------------------------------\n\nTITLE: Handling uploadFail Event in DHTMLX Simple Vault Control\nDESCRIPTION: This example shows how to attach an event handler to the uploadFail event of a Simple Vault control in a DHTMLX form. The event fires when a file upload fails and provides access to the file object and current control value.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/simplevault/simplevault_uploadfail_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"simpleVault\").events.on(\"uploadFail\", function(file, value) {\n    console.log(\"uploadFail\", file, value);\n});\n```\n\n----------------------------------------\n\nTITLE: Attaching Event Listeners to DHTMLX Sidebar in JavaScript\nDESCRIPTION: This snippet demonstrates how to attach an event listener to the 'click' event of a DHTMLX Sidebar component. When a sidebar item is clicked, the handler logs the ID of the clicked item to the console.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/sidebar/events.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsidebar.events.on(\"click\", function(id,e){\n    console.log(id);\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Title in DHTMLX Window Header with JavaScript\nDESCRIPTION: This snippet assigns a custom title to the DHTMLX Window's header by using the 'title' property. The string value will be displayed as the window's header label. Requires DHTMLX Suite. Additional header controls can be configured with the header object for more complex UI requirements.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/window/configuration.md#2025-04-22_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nconst dhxWindow = new dhx.Window({\n    title: \"DHX Window\"\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Current Mode of JavaScript ColorPicker\nDESCRIPTION: Shows how to set the current mode and then retrieve it using the getCurrentMode() method. The method returns a string indicating the current view mode.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/colorpicker/manipulating_colorpicker.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ncolorpicker.setCurrentMode(mode);\n\ncolorpicker.getCurrentMode();\n// -> \"palette\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Slider with majorTick Configuration in JavaScript\nDESCRIPTION: This code snippet demonstrates how to initialize a Slider component with the majorTick configuration set to 3. This setting determines the interval at which numeric values are rendered on the slider scale.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/slider/api/slider_majortick_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst slider = new dhx.Slider(\"slider_container\", { \n    majorTick:3\n});\n```\n\n----------------------------------------\n\nTITLE: Displaying Current Month Only in DHTMLX Calendar\nDESCRIPTION: This snippet shows how to configure the DHTMLX calendar to display only the days of the current month, hiding days from adjacent months. It uses the thisMonthOnly configuration property.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar2/functionality_and_features/calendar_modes.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<iframe src=\"https://snippet.dhtmlx.com/4wi5hbtr?mode=result\" frameborder=\"0\" class=\"snippet_iframe\" width=\"100%\" height=\"450\"></iframe>\n```\n\n----------------------------------------\n\nTITLE: Configuring Closable Tabs in DHTMLX Tabbar\nDESCRIPTION: Shows how to enable close buttons for all tabs or specific tabs in DHTMLX Tabbar\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tabbar/configuring_tabbar.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst tabbar = new dhx.Tabbar(\"tabbar_container\", {\n    closable:true\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst tabbar = new dhx.Tabbar(\"tabbar_container\", {\n    closable: [\"paris\", \"london\"]\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring closable property in DHTMLX Grid\nDESCRIPTION: This snippet demonstrates how to initialize a DHTMLX Grid with the 'closable' property set to true. This enables closing of all elements in the group panel. The example also includes other related configurations such as 'group' and 'groupable'.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_closable_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst grid = new dhx.Grid(\"grid_container\", {\n    columns: [\n        { width: 150, id: \"country\", header: [{ text: \"Country\" }] },\n        { width: 150, id: \"population\", header: [{ text: \"Population\" }] },\n        { width: 150, id: \"destiny\", header: [{ text: \"Density (P/Km²)\" }] },\n        { width: 150, id: \"area\", header: [{ text: \"Land Area (Km²)\" }] },\n    ],\n    group: true,\n    groupable: true,\n    closable: true,\n    data: dataset\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Input Width in DHTMLX Pagination (JavaScript)\nDESCRIPTION: This code demonstrates how to instantiate a dhx.Pagination widget and set a custom width for the input field using the inputWidth property. Dependencies include the DHTMLX Suite JavaScript library, and the target DOM container should exist. The inputWidth parameter defines the desired pixel width of the pagination input element, overriding the default auto-sizing behavior. The snippet outputs a pagination control with a fixed input field width and requires appropriate CSS classes.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/pagination/configuration.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst pagination = new dhx.Pagination(\"pagination_container\", {\n    css: \"dhx_widget--bordered\",\n    inputWidth: 220\n});\n```\n\n----------------------------------------\n\nTITLE: Iterating Visible Items in TreeGridCollection using mapVisible Method\nDESCRIPTION: This snippet demonstrates how to use the mapVisible() method of TreeGridCollection to iterate through visible items. It logs each item to the console, starting from a specific parent ID and only including direct children.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree_collection/api/treecollection_mapvisible_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ntreegrid.data.mapVisible(item => console.log(item),\"parent_id\", true);\n```\n\n----------------------------------------\n\nTITLE: Calculating Total Users Count\nDESCRIPTION: Calculates the number of default users by subtracting VIP users from total users.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tutorial/basic_application/step7.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ndefUser = grid.data.getLength() - vipUser;\n```\n\n----------------------------------------\n\nTITLE: Using Form Destructor in JavaScript\nDESCRIPTION: Simple example showing how to call the destructor method to remove a form instance and free up resources.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/form_destructor_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.destructor();\n```\n\n----------------------------------------\n\nTITLE: Defining CSS Variables for DHTMLX Default Theme\nDESCRIPTION: Comprehensive set of CSS custom properties that define the default light theme for DHTMLX Suite. Includes variables for colors, typography, borders, shadows, transitions, and component-specific styling.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/themes/default_theme.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n:root, [data-dhx-theme] {\n    /* base colors */\n    --dhx-color-white: #fff;\n    --dhx-color-gray-100: #e6e6e6;\n    --dhx-color-gray-200: #ccc;\n    --dhx-color-gray-300: #b3b3b3;\n    --dhx-color-gray-400: #999;\n    --dhx-color-gray-500: #808080;\n    --dhx-color-gray-600: #666;\n    --dhx-color-gray-700: #4d4d4d;\n    --dhx-color-gray-800: #333;\n    --dhx-color-gray-900: #1a1a1a;\n    --dhx-color-black: #000;\n    /* end base colors */\n\n    /* font */\n    --dhx-font-family: \"Roboto\", Arial, Tahoma, Verdana, sans-serif;\n\n    --dhx-font-weight-regular: 400; \n    --dhx-font-weight-medium: 500; \n    --dhx-font-weight-bold: 700;\n\n    --dhx-font-size-small: 12px;\n    --dhx-font-size-normal: 14px;\n    --dhx-font-size-large: 16px;\n\n    --dhx-line-height-small: 16px;\n    --dhx-line-height-normal: 20px;\n    --dhx-line-height-large: 24px;\n\n    --dhx-font-color-primary: rgba(0, 0, 0, .7);\n    --dhx-font-color-secondary: rgba(0, 0, 0, .5);\n    --dhx-font-color-additional: rgba(0, 0, 0, .3);\n    --dhx-font-color-disabled: rgba(0, 0, 0, .3);\n\n    --dhx-font-color-contrast: var(--dhx-color-white);\n    --dhx-font-color-contrast-disabled: var(--dhx-color-white);\n    /* end font */\n\n    /* icon */\n    --dhx-icon-size-small: 16px;\n    --dhx-icon-size-normal: 20px;\n    --dhx-icon-size-large: 24px;\n    /* end icon */\n\n    /* border */\n    --dhx-border-width: 1px;\n    --dhx-border-radius: 2px;\n    --dhx-border-color: rgba(0, 0, 0, .1);\n    --dhx-border-color-focused: rgba(0, 0, 0, .3);\n    --dhx-border: var(--dhx-border-width) solid var(--dhx-border-color);\n    /* end border */\n\n    /* border shadow */\n    --dhx-border-shadow-small: 0 2px 4px rgba(0, 0, 0, .15);\n    --dhx-border-shadow-normal: 0 2px 5px rgba(0, 0, 0, .3);\n    --dhx-border-shadow-large: 0px 1px 6px rgba(0, 0, 0, 0.1), 0px 10px 20px rgba(0, 0, 0, 0.1);\n\n    --dhx-shadow-input-size: inset 0px 0px 0px var(--dhx-border-width);\n    /* end border shadow */\n\n    /* transitions */\n    --dhx-transition-time: 0.2s;\n    --dhx-transition-in: ease-in;\n    --dhx-transition-out: ease-out;\n    /* end transitions */\n\n    /* z-index */\n    --dhx-z-index-up: 1;\n    --dhx-z-index-force-up: 10;\n    --dhx-z-index-overlay: 999;\n    --dhx-z-index-overlay-total: 10000000;\n    /* end z-index */\n\n    /* only service color schema */\n    --dhx-l-contrast-offset: 0%;\n    --dhx-l-h-offset: 10%;\n    --dhx-s-d-offset: 30%;\n    --dhx-l-d: 70%;\n    --dhx-a-l-h: .15;\n    --dhx-a-l-a: .3;\n    /* only service */\n\n    /* color scheme */\n    --dhx-h-primary: 200;\n    --dhx-s-primary: 98%;\n    --dhx-l-primary: 40%;\n\n    --dhx-h-secondary: 0;\n    --dhx-s-secondary: 0%;\n    --dhx-l-secondary: 30%;\n\n    --dhx-h-danger: 0;\n    --dhx-s-danger: 100%;\n    --dhx-l-danger: 60%;\n\n    --dhx-h-success: 154;\n    --dhx-s-success: 89%;\n    --dhx-l-success: 37%;\n\n    --dhx-h-background: 0;\n    --dhx-s-background: 0%;\n    --dhx-l-background: 100%;\n    --dhx-a-background: 0.5;\n    /* end color scheme */\n\n    /* theme colors */\n    --dhx-background-primary: hsl(var(--dhx-h-background), var(--dhx-s-background), var(--dhx-l-background));\n    --dhx-background-secondary: hsl(var(--dhx-h-background), var(--dhx-s-background), calc(var(--dhx-l-background) - 3%));\n    --dhx-background-additional: hsl(var(--dhx-h-background), var(--dhx-s-background), calc(var(--dhx-l-background) - 10%));\n    --dhx-background-overlay: hsla(var(--dhx-h-background), var(--dhx-s-background), calc(var(--dhx-l-background) * -1), var(--dhx-a-background));\n    --dhx-background-overlay-light: rgba(255, 255, 255, .5);\n\n    --dhx-tooltip-background-dark: var(--dhx-color-gray-800);\n    --dhx-tooltip-background-light: var(--dhx-color-white);\n\n    --dhx-color-focused: hsl(calc(var(--dhx-h-primary) + 10), var(--dhx-s-primary), var(--dhx-l-primary));\n\n    --dhx-color-primary: hsl(var(--dhx-h-primary), var(--dhx-s-primary), calc(var(--dhx-l-primary) - var(--dhx-l-contrast-offset)));\n    --dhx-color-primary-hover: hsl(var(--dhx-h-primary), var(--dhx-s-primary), calc(var(--dhx-l-primary) + var(--dhx-l-h-offset) - var(--dhx-l-contrast-offset)));\n    --dhx-color-primary-active: var(--dhx-color-primary);\n    --dhx-color-primary-disabled: hsl(var(--dhx-h-primary), calc(var(--dhx-s-primary) - var(--dhx-s-d-offset)), var(--dhx-l-d));\n    --dhx-color-primary-light-hover: hsla(var(--dhx-h-primary), var(--dhx-s-primary), calc(var(--dhx-l-primary) - var(--dhx-l-contrast-offset)), var(--dhx-a-l-h));\n    --dhx-color-primary-light-active: hsla(var(--dhx-h-primary), var(--dhx-s-primary), calc(var(--dhx-l-primary) - var(--dhx-l-contrast-offset)), var(--dhx-a-l-a));\n\n    --dhx-color-secondary: hsl(var(--dhx-h-secondary), var(--dhx-s-secondary), calc(var(--dhx-l-secondary) - var(--dhx-l-contrast-offset)));\n    --dhx-color-secondary-hover: hsl(var(--dhx-h-secondary), var(--dhx-s-secondary), calc(var(--dhx-l-secondary) + var(--dhx-l-h-offset) - var(--dhx-l-contrast-offset)));\n    --dhx-color-secondary-active: var(--dhx-color-secondary);\n    --dhx-color-secondary-disabled: hsl(var(--dhx-h-secondary), calc(var(--dhx-s-secondary) - var(--dhx-s-d-offset)), var(--dhx-l-d));\n    --dhx-color-secondary-light-hover: hsla(var(--dhx-h-secondary), var(--dhx-s-secondary), calc(var(--dhx-l-secondary) - var(--dhx-l-contrast-offset)), var(--dhx-a-l-h));\n    --dhx-color-secondary-light-active: hsla(var(--dhx-h-secondary), var(--dhx-s-secondary), calc(var(--dhx-l-secondary) - var(--dhx-l-contrast-offset)), var(--dhx-a-l-a));\n\n    --dhx-color-danger: hsl(var(--dhx-h-danger), var(--dhx-s-danger), calc(var(--dhx-l-danger) - var(--dhx-l-contrast-offset)));\n    --dhx-color-danger-hover: hsl(var(--dhx-h-danger), var(--dhx-s-danger), calc(var(--dhx-l-danger) + var(--dhx-l-h-offset) - var(--dhx-l-contrast-offset)));\n    --dhx-color-danger-active: var(--dhx-color-danger);\n    --dhx-color-danger-disabled: hsl(var(--dhx-h-danger), calc(var(--dhx-s-danger) - var(--dhx-s-d-offset)), var(--dhx-l-d));\n    --dhx-color-danger-light-hover: hsla(var(--dhx-h-danger), var(--dhx-s-danger), calc(var(--dhx-l-danger) - var(--dhx-l-contrast-offset)), var(--dhx-a-l-h));\n    --dhx-color-danger-light-active: hsla(var(--dhx-h-danger), var(--dhx-s-danger), calc(var(--dhx-l-danger) - var(--dhx-l-contrast-offset)), var(--dhx-a-l-a));\n\n    --dhx-color-success: hsl(var(--dhx-h-success), var(--dhx-s-success), calc(var(--dhx-l-success) - var(--dhx-l-contrast-offset)));\n    --dhx-color-success-hover: hsl(var(--dhx-h-success), var(--dhx-s-success), calc(var(--dhx-l-success) + var(--dhx-l-h-offset) - var(--dhx-l-contrast-offset)));\n    --dhx-color-success-active: var(--dhx-color-success);\n    --dhx-color-success-disabled: hsl(var(--dhx-h-success), calc(var(--dhx-s-success) - var(--dhx-s-d-offset)), var(--dhx-l-d));\n    --dhx-color-success-light-hover: hsla(var(--dhx-h-success), var(--dhx-s-success), calc(var(--dhx-l-success) - var(--dhx-l-contrast-offset)), var(--dhx-a-l-h));\n    --dhx-color-success-light-active: hsla(var(--dhx-h-success), var(--dhx-s-success), calc(var(--dhx-l-success) - var(--dhx-l-contrast-offset)), var(--dhx-a-l-a));\n    /* end theme colors */\n\n    /* DHTMLX Toolbar service variables*/\n    --dhx-s-toolbar-background: var(--dhx-background-primary);\n    --dhx-s-toolbar-button-background-hover: rgba(0, 0, 0, .07);\n    --dhx-s-toolbar-button-background-active: rgba(0, 0, 0, .15);\n    /* end DHTMLX Toolbar service variables */\n\n    /* DHTMLX Grid service variables*/\n    --dhx-s-grid-header-background: var(--dhx-background-secondary);\n    --dhx-s-grid-selection-background: var(--dhx-color-gray-700);\n    /* end DHTMLX Grid service variables*/\n\n    /* DHTMLX Calendar service variables*/\n    --dhx-s-calendar-muffled: .6;\n    /* end DHTMLX Calendar service variables*/\n\n    /* DHTMLX Slider service variables*/\n    --dhx-s-tick-font-size: calc(var(--dhx-font-size-small) / 1.2);\n    /* end DHTMLX Slider service variables*/\n}\n```\n\n----------------------------------------\n\nTITLE: Resetting a Specific Filter by ID in TreeCollection with JavaScript\nDESCRIPTION: This code snippet illustrates how to reset a specific filter by providing its ID within the configuration object passed to the `resetFilter()` method. The filter identified by 'filter_id' will be removed, while other active filters remain unaffected.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree_collection/api/treecollection_resetfilter_method.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// resets the filter with the specified id\ncomponent.data.resetFilter({ id: \\\"filter_id\\\" });\n```\n\n----------------------------------------\n\nTITLE: Configuring Min-Max Ticks Only\nDESCRIPTION: Creates a slider showing only minimum and maximum value ticks on the scale.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/slider/configuring_slider.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst slider = new dhx.Slider(\"slider_container\", { \n    max:100, min:0, tick:100, majorTick:1\n});\n```\n\n----------------------------------------\n\nTITLE: Handling afterChangeProperties Event in DHTMLX Form Container in JavaScript\nDESCRIPTION: This code snippet demonstrates how to attach an event handler to the afterChangeProperties event of a Container control in a DHTMLX Form. The event fires after properties of the container have been changed dynamically and provides access to the changed properties.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/container/container_afterchangeproperties_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"container\").events.on(\"afterChangeProperties\", function(properties) {\n    console.log(\"afterChangeProperties\", properties);\n});\n```\n\n----------------------------------------\n\nTITLE: Validating DatePicker with Silent Parameter\nDESCRIPTION: Example showing how to validate a DatePicker control with the silent parameter and a specific date value.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/calendar/calendar_validate_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"datepicker\").validate(true, \"03/10/20\"); // -> true/false\n\n// the method validates the current value\nform.getItem(\"datepicker\").validate(true); // -> true/false\n```\n\n----------------------------------------\n\nTITLE: Attaching Event Listeners in DHTMLX Colorpicker\nDESCRIPTION: Demonstrates how to attach event listeners to a colorpicker instance using the events.on() method. The example shows monitoring the modeChange event.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/colorpicker/handling_events.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncolorpicker.events.on(\"modeChange\", function(view) {\n   console.log(\"Selected mode: \" + view); \n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Message Box with DHTMLX JavaScript\nDESCRIPTION: Shows an example of creating a message box with specific text, icon, CSS class, and expiration time using the dhx.message() function.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/message/api/api_message_properties.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ndhx.message({\n    text:\"Message text\", \n    icon:\"dxi-clock\", \n    css:\"expire\", \n    expire:1000\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Focus on RadioGroup Button - JavaScript DHTMLX\nDESCRIPTION: Demonstrates how to programmatically set focus to a specific radio button within a RadioGroup control using its ID. If no ID is provided, focus will be set to the first radio button.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/radiogroup/radiogroup_focus_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"radiogroup\").focus(\"radiobutton_1\");\n```\n\n----------------------------------------\n\nTITLE: Applying Custom CSS Classes to Slider in JavaScript\nDESCRIPTION: This code snippet demonstrates how to apply custom CSS classes to a DHTMLX Slider instance. It uses the 'css' property in the Slider configuration to specify one or more CSS class names.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/slider/customization.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst slider = new dhx.Slider(\"slider_container\", {\n    css:\"my_first_class my_second-class\"\n});\n```\n\n----------------------------------------\n\nTITLE: Removing Items from TreeCollection\nDESCRIPTION: Demonstrates how to remove an item from a TreeCollection using its ID. The method accepts either a single ID or an array of IDs as a parameter.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree_collection/api/treecollection_remove_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntoolbar.data.remove(\"id\");\n```\n\n----------------------------------------\n\nTITLE: Handling the inputCreated Event in DHTMLX Toolbar in JavaScript\nDESCRIPTION: This example demonstrates how to attach an event listener to the inputCreated event of a DHTMLX Toolbar. The event fires when a new input is added to the toolbar and provides the input's ID and the HTML input element.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/toolbar/api/toolbar_inputcreated_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntoolbar.events.on(\"inputCreated\", function(id, input){\n    console.log(id);\n});\n```\n\n----------------------------------------\n\nTITLE: Using blur() Method on Grid Header Filter in JavaScript\nDESCRIPTION: This example demonstrates how to focus and then blur a header filter in a DHTMLX Grid. The blur() method is used to remove focus from the filter after it has been focused.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/headerfilter/blur_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngrid.getHeaderFilter(\"country\").focus();\n\ngrid.getHeaderFilter(\"country\").blur();\n```\n\n----------------------------------------\n\nTITLE: Setting TimePicker Value in JavaScript Form\nDESCRIPTION: Demonstrates different ways to set the value of a TimePicker control in a DHTMLX Form. The method accepts various input formats including strings, Date objects, arrays, numbers, and objects. Each format is shown with a specific example.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/timepicker/timepicker_setvalue_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// set the value as a string\nform.getItem(\"timepicker\").setValue(\"10:30\");\n\n// set the value as a Date object\nform.getItem(\"timepicker\").setValue(new Date('January 10, 2019 17:54:00'));\n\n// set the value as an array\nform.getItem(\"timepicker\").setValue([6,20,\"AM\"]);\n\n// set the value as a number\nform.getItem(\"timepicker\").setValue(1559288966422);\n\n// set the value as an object\nform.getItem(\"timepicker\").setValue({hour: 10, minute: 50, AM: true});\n```\n\n----------------------------------------\n\nTITLE: Setting Required Field in DHTMLX Form (JSX)\nDESCRIPTION: Demonstrates how to mark a field as required in a DHTMLX form using the required attribute. This adds an asterisk next to the field label.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/work_with_form.md#2025-04-22_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\n{    \n    type: \"checkbox\",\n    label: \"I agree\",\n    name: \"agree\",\n    required: true,\n    id: \"agree\",\n    value: \"checkboxvalue\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Properties in DHTMLX Form\nDESCRIPTION: Configuration object for creating a button control in DHTMLX Form. Includes all available properties for customizing appearance, behavior, and functionality of the button including size, color, state and submission options.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/button/api_button_properties.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    type: \"button\",\n    name?: string,\n    id?: string,\n    \n    text?: string,\n    submit?: boolean, // false by default\n    url?: string,\n    \n    css?: string,\n    disabled?: boolean, // false by default\n    height?: string | number | \"content\", // \"content\" by default\n    hidden?: boolean, // false by default\n    padding?: string | number,\n    width?: string | number | \"content\", // \"content\" by default\n\n    // button view\n    circle?: boolean, // false by default\n    color?: \"danger\" | \"secondary\" | \"primary\" | \"success\", // \"primary\" by default\n    full?: boolean, // false by default\n    icon?: string,\n    loading?: boolean, // false by default\n    size?: \"small\" | \"medium\", // \"medium\" by default\n    view?: \"flat\" | \"link\", // \"flat\" by default\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying ToggleGroup Control Properties in JavaScript\nDESCRIPTION: Shows how to change the configuration of a ToggleGroup control including width, fullness, and options with rows configuration.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/togglegroup/togglegroup_setproperties_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"ToggleGroup\").setProperties({\n    full: true,\n    width: 140,\n    options: {\n        rows: [\n            {\n                id: \"first\",\n                text: \"S\",\n            },\n            {\n                id: \"second\",\n                text: \"M\",\n            },\n            {\n                id: \"third\",\n                text: \"L\",\n            },\n        ]\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling a Disabled Button in DHTMLX Form (JavaScript)\nDESCRIPTION: This snippet demonstrates how to enable a previously disabled Button control in a DHTMLX Form. The enable() method is called on the Button item retrieved from the form.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/button/button_enable_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"button\").enable();\n```\n\n----------------------------------------\n\nTITLE: Using blur() Method with DHTMLX Form Select Control\nDESCRIPTION: Demonstrates how to programmatically remove focus from a Select control within a DHTMLX Form. The method requires no parameters and returns void.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/select/select_blur_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"select\").blur();\n```\n\n----------------------------------------\n\nTITLE: Implementing Event Handlers in List Template in JavaScript\nDESCRIPTION: Demonstrates how to define a custom template function and configure event handlers for List items. The example shows handlers for click and mouseover events on elements with a specific class name.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/list/api/list_eventhandlers_config.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction template() {\n    return \"<div class='class_name'></div>\";\n}\n\nconst list = new dhx.List(\"list_container\", {\n    template: template,\n    eventHandlers: {\n        onclick: {\n            class_name: function(event) {\n                console.log(\"You clicked on \" + event.target.tagName);\n                // return false;\n            },\n        },\n        onmouseover: {\n            class_name: function(event, id) {\n                console.log(\"Item ID: \" + id);\n            },\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Focus to Combo Box Control in DHTMLX Form\nDESCRIPTION: This example demonstrates how to set focus to a Combo Box control in a DHTMLX Form using the focus() method. The method requires no parameters and returns nothing (void).\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/combo/combo_focus_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"combo\").focus();\n```\n\n----------------------------------------\n\nTITLE: Initializing Calendar with timePicker in JavaScript\nDESCRIPTION: This code snippet demonstrates how to initialize a DHTMLX Calendar component with the timePicker option enabled. When set to true, this adds time selection functionality to the calendar.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar2/api/calendar_timepicker_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar calendar = new dhx.Calendar(\"calendar_container\", {\n    timePicker: true      \n});\n```\n\n----------------------------------------\n\nTITLE: Adding Spacer to DHTMLX Menu\nDESCRIPTION: This code snippet shows how to add a Spacer control to a DHTMLX Menu using the add() method of Tree Collection. Spacers are used for aligning controls and taking up space in the menu.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/menu/configuring_menu_items.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmenu.data.add({\n    type:\"spacer\"\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Up Calendar in Range Mode\nDESCRIPTION: Creates a calendar in range mode with a date range preselected from June 25 to July 7, 2020.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar2/configuring.mdx#2025-04-22_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nvar calendar = new dhx.Calendar(\"calendar\", {\n    css: \"dhx_widget--bordered\",\n    range: true,\n    value: [\"25/06/20\", \"07/07/20\"]\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Header Height in Layout Cell\nDESCRIPTION: Shows how to set a specific height for the header of a Layout cell using the headerHeight attribute.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/layout/cell_configuration.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst layout = new dhx.Layout(\"layout_container\", {\n    rows: [\n        {\n            id: \"row1\"\n        },\n        {\n            id: \"row2\",\n            header: \"Row 2\",\n            headerHeight: 80\n        }\n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: Disabling Selection in DataView\nDESCRIPTION: Demonstrates how to disable the selection feature in DataView using the selection configuration property.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/dataview/configuration.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst dataview = new dhx.DataView(\"dataview_container\", {\n    selection: false\n});\n```\n\n----------------------------------------\n\nTITLE: Calendar integration with HTML input element\nDESCRIPTION: Shows HTML markup for creating an input field that will display the date selected in the Calendar.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar2/functionality_and_features/events.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<input type=\"text\" id=\"date\" />\n```\n\n----------------------------------------\n\nTITLE: Handling keydown Events in DHTMLX Toolbar (JavaScript)\nDESCRIPTION: This code demonstrates how to attach an event listener to the keydown event of a Toolbar component. The event handler logs the pressed key to the console when any keyboard input is detected on a Toolbar control in focus.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/toolbar/api/toolbar_keydown_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntoolbar.events.on(\"keydown\", function(event, id) {\n    console.log(\"You've pressed the key: \" + event.key);\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Cancel Click Event in DHTMLX Calendar\nDESCRIPTION: Example showing how to attach an event handler to the calendar's Cancel button click event. The event fires when a user clicks the Cancel control in the calendar interface.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar2/api/calendar_cancelclick_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncalendar.events.on(\"CancelClick\", function() {\n    // your logic here\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Combo Box afterOpen Event in JavaScript\nDESCRIPTION: Example showing how to attach an event handler to the afterOpen event of a DHTMLX Combo Box. This event fires after the dropdown list of options is opened.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/combobox/api/combobox_afteropen_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncombo.events.on(\"afterOpen\", function() {\n    // your logic here\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Tooltip for MenuItem in JavaScript\nDESCRIPTION: This snippet shows how to add a tooltip to a MenuItem using the 'tooltip' property.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/sidebar/menuitem.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    type:\"menuItem\", \n    value:\"Click\", \n    tooltip:\"Click me and find out why\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Toggle in ToggleGroup Control\nDESCRIPTION: This snippet shows the configuration options for individual toggles within the ToggleGroup control in DHTMLX Suite. It includes attributes like full, text, icon, offText, offIcon, and value.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/form_setproperties_method.md#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    full: boolean,\n    text: string,\n    icon: string,\n    offText: string,\n    offIcon: string,\n    value: string | number\n}\n```\n\n----------------------------------------\n\nTITLE: Chart Types Overview\nDESCRIPTION: List of chart types organized in groups, showing structure of available chart options in DHTMLX library\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/chart/charts_overview.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- Line and Spline chart\n  - Line chart\n  - Spline chart\n- Bar and X-Bar chart\n  - Bar chart \n  - X-Bar chart\n- Area and SplineArea chart\n  - Area chart\n  - SplineArea chart\n- Pie, Pie 3D and Donut chart\n  - Pie and Pie 3D chart\n  - Donut chart\n- Radar chart\n- Scatter chart\n- Treemap chart\n- Calendar heatmap chart\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX Ribbon with menuCss Config - JavaScript\nDESCRIPTION: This JavaScript code initializes a DHTMLX Ribbon control and applies the custom CSS classes specified by the 'menuCss' property. It requires the DHTMLX Suite to be loaded and a DOM element with the ID 'ribbon_container' present. The 'menuCss' property accepts a space-separated string of CSS class names which will be added to all containers of Ribbon controls with nested items.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/ribbon/api/ribbon_menucss_config.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst ribbon = new dhx.Ribbon(\"ribbon_container\", {\\n    menuCss:\"my_first_class my_second_class\"\\n});\n```\n\n----------------------------------------\n\nTITLE: Handling inputFocus Event in DHTMLX Toolbar (JavaScript)\nDESCRIPTION: This example demonstrates how to attach an event handler to the inputFocus event of a DHTMLX Toolbar. The handler logs the ID of the newly focused control to the console when triggered.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/toolbar/api/toolbar_inputfocus_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntoolbar.events.on(\"inputFocus\", function(id){\n    console.log(id);\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Arrow Key Navigation in DataView\nDESCRIPTION: Demonstrates how to enable arrow key navigation for DataView items using the keyNavigation configuration option.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/dataview/configuration.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst dataview = new dhx.DataView(\"dataview_container\", {\n    itemsInRow: 4, keyNavigation: true\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Datepicker Properties Change Event in JavaScript\nDESCRIPTION: Example of attaching an event handler to the afterChangeProperties event of a Datepicker form control. The handler logs the changed properties to the console when configuration attributes are modified.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/calendar/calendar_afterchangeproperties_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"datepicker\").events.on(\"afterChangeProperties\", function(properties) {\n    console.log(\"afterChangeProperties\", properties);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring itemsCount for DHTMLX Combo Box in JavaScript\nDESCRIPTION: This snippet demonstrates how to configure the itemsCount property of a DHTMLX Combo Box. It sets up multiselection and uses a custom function to display the number of selected items with proper singular/plural formatting.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/combobox/api/combobox_itemscount_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst combo = new dhx.Combobox(\"combo_container\", {\n    multiselection: true,\n    itemsCount: function (num) {\n        return num + (num === 1 ? \" item\" : \" items\") + \" selected\";\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Using beforeChange Event with Timepicker in DHTMLX Form\nDESCRIPTION: This example demonstrates how to attach an event handler to the beforeChange event of a Timepicker control. The handler logs the new value to the console and returns true to allow the value change.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/timepicker/timepicker_beforechange_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"timepicker\").events.on(\"beforeChange\", function(value) {\n    console.log(\"beforeChange\", value);\n    return true;\n});\n```\n\n----------------------------------------\n\nTITLE: Checking Disabled State of Input Control in DHTMLX Form (JavaScript)\nDESCRIPTION: This snippet demonstrates how to use the isDisabled() method to check if an Input control in a DHTMLX Form is disabled. The method returns a boolean value indicating the disabled state of the control.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/input/input_isdisabled_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nform.getItem(\"input\").isDisabled(); \n// -> true/false\n```\n\n----------------------------------------\n\nTITLE: Checking SimpleVault Visibility in DHTMLX Form (JavaScript)\nDESCRIPTION: This example demonstrates how to check if a SimpleVault control is visible on the page using the isVisible() method. The method returns a boolean value indicating the control's visibility status.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/simplevault/simplevault_isvisible_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"simplevault\").isVisible();\n// -> true/false\n```\n\n----------------------------------------\n\nTITLE: Accessing ColorPicker Widget in DHTMLX Form\nDESCRIPTION: Basic example of retrieving the ColorPicker widget instance from a form control\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/colorpicker/colorpicker_getwidget_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst colorpicker = form.getItem(\"colorpicker\").getWidget();\n```\n\n----------------------------------------\n\nTITLE: Configuring Calendar in 'year' Mode\nDESCRIPTION: Initializes a Calendar in year mode, which shows only years including the current one.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar/configuring.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst calendar = new dhx.Calendar(\"calendar_container\", {\n    mode: \"year\"\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Range Mode in DHTMLX Slider - JavaScript\nDESCRIPTION: This snippet demonstrates how to create a DHTMLX Slider in range mode, which allows selection of a value range using two thumbs for the minimum and maximum values. It requires the DHTMLX Suite JavaScript library, a container with the ID 'slider_container', and appropriate CSS inclusion. The configuration sets 'range' to true and provides an array to 'value' for the range ends. Inputs are the min, max, step, and an array for 'value'; the output is an interactive range slider rendered in the container.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/slider/range_slider.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst slider = new dhx.Slider(\"slider_container\", {\n    min: 0,\n    max: 100,\n    step: 1,\n    range: true,\n    value: [25, 75]\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Button Property Changes in DHTMLX Form\nDESCRIPTION: Example showing how to attach an event handler for the beforeChangeProperties event of a Button control. The handler logs the properties being changed and returns true to allow the change.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/button/button_beforechangeproperties_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"button\").events.on(\"beforeChangeProperties\", function(properties) {\n    console.log(\"beforeChangeProperties\", properties);\n    return true;\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Horizontal Layout in DHTMLX\nDESCRIPTION: Creates a horizontal layout with four rows, each having a header. The rows are arranged one below another horizontally within the specified container.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/layout/layout_structure.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst layout = new dhx.Layout(\"layout_container\", {                                  \n    rows: [\n       { header: \"The header of the row 1\" },\n       { header: \"The header of the row 2\" },\n       { header: \"The header of the row 3\" },\n       { header: \"The header of the row 4\" }\n    ]                                        \n});\n```\n\n----------------------------------------\n\nTITLE: Calendar Month Mode Example\nDESCRIPTION: Demonstrates how to display calendar in month selection mode\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar2/operating_calendar.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncalendar.showDate(new Date(2020,11,12),\"month\");\n\n// shows the current month\ncalendar.showDate(null,\"month\");\n```\n\n----------------------------------------\n\nTITLE: Showing Avatar Control in DHTMLX Form\nDESCRIPTION: Demonstrates how to show a previously hidden Avatar control using the show() method. The method is called on the Avatar form item retrieved using getItem().\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/avatar/avatar_show_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"avatar\").show();\n```\n\n----------------------------------------\n\nTITLE: Handling afterShow Event for Toggle Control in DHTMLX Form (JavaScript)\nDESCRIPTION: This snippet demonstrates how to attach an event handler to the afterShow event of a Toggle control in a DHTMLX Form. The handler logs the current value of the control when it's shown.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/toggle/toggle_aftershow_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"toggle\").events.on(\"afterShow\", function(value) {\n    console.log(\"afterShow\", value);\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Datepicker Blur Event in JavaScript\nDESCRIPTION: Example shows how to attach an event listener to the blur event of a Datepicker control in a DHTMLX Form. The event fires when the Datepicker loses focus and provides the current value as either a string or Date object.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/calendar/calendar_blur_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"datepicker\").events.on(\"blur\", (value) => {\n    console.log(\"blur\", value);\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX Timepicker with Controls\nDESCRIPTION: Creates a new Timepicker instance with the controls option enabled, which adds Close and Save buttons to the timepicker interface. This feature was introduced in DHTMLX Suite v6.4.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/timepicker/api/timepicker_controls_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst timepicker = new dhx.Timepicker(\"timepicker_container\", {\n    controls: true\n});\n```\n\n----------------------------------------\n\nTITLE: Selecting a DHTMLX Ribbon Item in JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to programmatically select an item in a DHTMLX Ribbon component using the `select()` method. It requires an existing Ribbon instance (`ribbon`) and passes the ID of the item to be selected (\"print\") as an argument. By default, this will also unselect any previously selected item, as the optional `unselect` parameter defaults to `true`.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/ribbon/api/ribbon_select_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nribbon.select(\"print\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Timepicker in DHTMLX Calendar (JavaScript)\nDESCRIPTION: This snippet demonstrates how to enable and configure a timepicker within a DHTMLX Calendar. It shows the use of the timePicker property to add the timepicker, and the timeFormat property to set the time format (12-hour or 24-hour).\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar2/functionality_and_features/timepicker.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nnew dhx.Calendar(\"calendar_container\", {\n    timePicker: true,\n    timeFormat: 12 // or 24 for 24-hour format\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Colorpicker HTML Structure\nDESCRIPTION: Complete HTML structure showing how to include DHTMLX Colorpicker with required source files and basic initialization.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/colorpicker/how_to_start.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n    <head>\n        <title>How to start with DHTMLX ColorPicker</title>         \n        <script type=\"text/javascript\" src=\"../../codebase/suite.js\"></script>\n        <link rel=\"stylesheet\" href=\"../../codebase/suite.css\">\n    </head>\n    <body>\n        <div id=\"colorpicker_container\"></div>\n        <script>\n            // creating Colorpicker \n            const colorpicker = new dhx.Colorpicker(\"colorpicker_container\", {\n                // config options\n            });\n        </script>\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Unselecting a Specific Item in JavaScript List\nDESCRIPTION: Removes selection from a specific item in the List by its ID using the remove() method of the selection object.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/list/usage_selection.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nlist.selection.remove(\"2\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Number of Items per Page in DHTMLX Pagination (JavaScript)\nDESCRIPTION: This example configures a dhx.Pagination instance to display a custom number of items per page using the pageSize property. The DHTMLX Suite library is required, and the target DOM element must exist. The pageSize parameter defines how many items will be shown on each page of the associated widget; setting it to 9 overrides the default value of 10. The result is a paginated control that limits the visible items per page according to the specified value.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/pagination/configuration.md#2025-04-22_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst pagination = new dhx.Pagination(\"pagination_container\", {\n    pageSize: 9\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Initially Selected Date as Array with Date Object\nDESCRIPTION: Preselects a date by providing an array containing a single Date object.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar2/configuring.mdx#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// selects a date as an array of Date value\nvar calendar = new dhx.Calendar(\"calendar_container\", {\n    value: [new Date(2019,01,10)]\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Layout with minWidth Configuration in JavaScript\nDESCRIPTION: This code snippet demonstrates how to create a new Layout instance with a column that has a minimum width specified. The minWidth property is set to '400px' for the cell, ensuring it doesn't shrink below this width.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/layout/api/cell/layout_cell_minwidth_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst layout = new dhx.Layout(\"layout_container\", {\n    cols: [\n        { header: \"Cell header\", minWidth: \"400px\"}\n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic DHTMLX Ribbon Button (JavaScript)\nDESCRIPTION: Demonstrates the minimal configuration object required to define a simple Button control within a DHTMLX Ribbon. It specifies the control `type` as \"button\" and sets its display `value` (label).\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/ribbon/button.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n{\n    type:\"button\", value:\"Best button\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Theme via JavaScript Root Element\nDESCRIPTION: Demonstrates how to programmatically set a DHTMLX theme by changing the data-dhx-theme attribute on the document's root element\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/themes/themes.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// your code here\n\ndocument.documentElement.setAttribute(\"data-dhx-theme\", \"dark\");\n```\n\n----------------------------------------\n\nTITLE: Closing Message Box with HTML and JavaScript\nDESCRIPTION: Shows how to create and close a message box using HTML buttons and JavaScript functions. Demonstrates the use of the close() method.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/message/configuration.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<section class=\"dhx_sample-controls\">\n    <button id=\"show\" class=\"dhx_sample-btn dhx_sample-btn--flat\" onclick=\"show()\">show</button>\n    <button id=\"close\" class=\"dhx_sample-btn dhx_sample-btn--flat\" onclick=\"close()\">close</button>\n</section>\n\n<script>\n    let message;\n    function show() {\n        message = dhx.message({ text: \"Here is dhtmlxMessage\", icon: \"dxi-close\" });\n    }\n    document.querySelector(\"#close\").addEventListener(\"click\", () => {\n        message?.close()\n    });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Handling afterHide Event for Avatar Control in DHTMLX Form\nDESCRIPTION: This snippet demonstrates how to attach an event handler to the afterHide event of an Avatar control in a DHTMLX Form. The handler logs the event name and the current value of the control when it is hidden.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/avatar/avatar_afterhide_event.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nform.getItem(\"avatar\").events.on(\"afterHide\", value => {\n    console.log(\"afterHide\", value);\n});\n```\n\n----------------------------------------\n\nTITLE: Toggle Configuration Properties Structure\nDESCRIPTION: Object structure showing all available configuration properties that can be modified for a Toggle control.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/toggle/toggle_setproperties_method.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    css: string,\n    width: string | number | \"content\",\n    height: string | number | \"content\",\n    padding: string | number,\n    full: boolean,\n    text: string,\n    icon: string,\n    offText: string,\n    offIcon: string,\n    value: string | number\n}\n```\n\n----------------------------------------\n\nTITLE: Setting DatePicker Value in DHTMLX Form (JavaScript)\nDESCRIPTION: This snippet demonstrates how to use the setValue() method to set a date in a DatePicker control within a DHTMLX Form. It shows two examples: one using a string format and another using a Date object.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/calendar/calendar_setvalue_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nform.getItem(\"datepicker\").setValue(\"30/05/19\");\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nform.getItem(\"datepicker\").setValue(new Date('2019-05-30'));\n```\n\n----------------------------------------\n\nTITLE: Disabling SimpleVault Control in DHTMLX Form\nDESCRIPTION: Demonstrates how to disable a SimpleVault control by accessing it through the form's getItem() method and calling disable(). This makes the SimpleVault control non-interactive.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/simplevault/simplevault_disable_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"simplevault\").disable();\n```\n\n----------------------------------------\n\nTITLE: Exiting Fullscreen Mode with DHTMLX Window (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to use the `unsetFullScreen()` method on a DHTMLX Window instance (`dhxWindow`) to switch the window from its current fullscreen state back to the regular windowed mode. This method requires no parameters and does not return a value (void). It was introduced in DHTMLX Suite version 7.1.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/window/api/window_unsetfullscreen_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndhxWindow.unsetFullScreen();\n```\n\n----------------------------------------\n\nTITLE: Configuring Window Title Using DHTMLX Suite in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a new window using the DHTMLX Suite by setting the optional 'title' property in the configuration object. It requires the DHTMLX Suite library to be loaded and available as 'dhx'. The main parameters include 'title', which sets the displayed header text, and 'dhxWindow.show()', which renders the window. The expected output is a window popup titled 'DHX Window Sample'. There are no other required arguments, but the DHTMLX suite must be initialized prior to usage.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/window/api/window_title_config.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst dhxWindow = new dhx.Window({\n    title: \"DHX Window Sample\"\n});\n\ndhxWindow.show();\n```\n\n----------------------------------------\n\nTITLE: Handling Grid Cell Unselection Event in JavaScript\nDESCRIPTION: Example showing how to handle the beforeUnSelect event using the selection.events interface. The event allows preventing cell unselection by returning false.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/selection/selection_beforeunselect_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngrid.selection.events.on(\"BeforeUnSelect\", (row, column) => {\n    console.log(\"beforeUnSelect\", row, column); \n    return false;\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Toggle Value in DHTMLX Form\nDESCRIPTION: Demonstrates how to retrieve the current value of a Toggle control using the getItem() method.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/toggle.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst value = form.getItem(\"toggle\").getValue();\n```\n\n----------------------------------------\n\nTITLE: Configuring Layout Cell Header Height in JavaScript\nDESCRIPTION: Demonstrates how to set a custom header height for a Layout cell using the headerHeight property. The example shows creation of a Layout with two rows where the second row has a custom header height of 80 pixels.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/layout/api/cell/layout_cell_headerheight_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst layout = new dhx.Layout(\"layout_container\", {\n    rows: [\n        {\n            id: \"row1\"\n        },\n        {\n            id: \"row2\",\n            headerHeight: 80\n        }\n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Calendar with Disabled Dates\nDESCRIPTION: Example showing how to initialize a DHTMLX Calendar with disabled dates configuration. The implementation disables specific days of the week (Sunday, Monday, and Saturday).\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar2/api/calendar_disableddates_config.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar calendar = new dhx.Calendar(\"calendar\", {\n    disabledDates: function(date) {\n        var disabled = {\n            0: true,\n            1: true,\n            2: false,\n            3: false,\n            4: false,\n            5: false,\n            6: true\n        }\n        return disabled[date.getDay()];\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: RadioGroup Properties Object Structure\nDESCRIPTION: Example showing the structure of the object returned when getting properties of a RadioGroup control. Contains configuration attributes and their values.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/radiogroup/radiogroup_getproperties_method.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    errorMessage: \"\",\n    height: \"content\",\n    helpMessage: \" Help information\",\n    hiddenLabel: false,\n    label: \"Radio Group\",\n    labelPosition: \"left\",\n    labelWidth: 140,\n    options: {rows: Array(2), full: false},\n    padding: 0,\n    preMessage: \"\",\n    required: true,\n    successMessage: \"\",\n    width: \"content\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Date Range with Date Objects\nDESCRIPTION: Configures the calendar in range mode with a date range selected using Date objects.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar2/configuring.mdx#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n// selects dates as an array of Date values(for the range mode)\nvar calendar = new dhx.Calendar(\"calendar_container\", {\n    value: ([new Date(2019,05,03), new Date(2019,05,19)]),\n    range: true  \n});\n```\n\n----------------------------------------\n\nTITLE: Slider Properties Configuration\nDESCRIPTION: Configuration object for Slider control defining slider-specific properties including range, ticks, and display options.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/form_getproperties_method.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    css: string,\n    height: string | number | \"content\",\n    helpMessage: string,\n    hiddenLabel: boolean,\n    inverse: boolean,\n    label: string,\n    labelPosition: string,\n    labelWidth: string | number,\n    majorTick: number,\n    max: number,\n    min: number,\n    mode: string,\n    padding: string | number,\n    range: boolean,\n    step: number,\n    tick: number,\n    tickTemplate: function,\n    tooltip: boolean, \n    width: string | number | \"content\"\n}\n```\n\n----------------------------------------\n\nTITLE: Repainting Menu using paint() Method in JavaScript\nDESCRIPTION: This code snippet demonstrates how to use the paint() method to repaint a Menu component on the page. The paint() method is called on a menu instance and doesn't require any parameters.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/menu/api/menu_paint_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmenu.paint();\n```\n\n----------------------------------------\n\nTITLE: Handling cancelColumnDrop Event in DHTMLX Grid\nDESCRIPTION: This code snippet demonstrates how to attach an event listener for the cancelColumnDrop event in a DHTMLX Grid. The event fires when the mouse pointer moves out of the column borders during a drag operation.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_cancelcolumndrop_event.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ngrid.events.on(\"cancelColumnDrop\", (data, event) => {\n  // your logic here\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Combo Box with Custom Filter Function in JavaScript\nDESCRIPTION: This snippet demonstrates how to initialize a DHTMLX Combo Box with a custom filter function. The filter function takes two parameters: an item object and a target string, and should return a boolean value to determine if the item should be displayed in the filtered list of options.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/combobox/api/combobox_filter_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction mySearch(item, target) {\n    // your filtering logic here            \n}\nconst combo = new dhx.Combobox(\"combo_container\", {\n    filter: mySearch\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Chart Scales in JavaScript\nDESCRIPTION: This snippet demonstrates how to configure scales for an area chart using the DHTMLX Chart component. It sets up bottom and left scales with custom properties.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/chart/api/chart_scales_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst chart = new dhx.Chart(\"chart_container\", {\n    type:\"area\",\n    scales: {\n        \"bottom\" : {\n            text: 'month'\n        },\n        \"left\" : {\n            padding: 10,\n            max: 90\n        }\n    },\n    series: [\n        {\n           value: 'company A',\n           strokeWidth: 2\n           // more options   \n        }\n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing Layout Cell with CSS Classes in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a Layout instance with customized cells using CSS classes. It sets a border around the entire layout and applies specific styling to the header cell.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/helpers/base_elements.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst layout = new dhx.Layout(\"layout\", {\n    css: \"dhx_layout-cell--bordered\",\n    rows: [{\n        id: \"toolbar\",\n        html: \"Header\",\n        css: \"dhx_layout-cell--border_bottom layout-header\",\n        gravity: false,\n        height: \"60px\"\n    }]\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Scroll Settings for Specific Widget in JavaScript\nDESCRIPTION: This snippet shows how to change default settings of custom scrollbars for a specific DHTMLX widget using the scrollView object.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/helpers/custom_scroll.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nlist.scrollView.config.autoHide = false;\n\nlist.scrollView.config.timeout = 5000;\n```\n\n----------------------------------------\n\nTITLE: Resetting All Filters (Including Permanent) in TreeCollection with JavaScript\nDESCRIPTION: This example shows how to use the `resetFilter()` method with a configuration object `{ permanent: true }`. Passing this configuration ensures that all active filters, including those initially defined with the 'permanent' property, are reset. The method returns `true` in this case.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree_collection/api/treecollection_resetfilter_method.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// resets all the filters, including those that have the \\\"permanent\\\" property in the config\ncomponent.data.resetFilter({ permanent: true });\n```\n\n----------------------------------------\n\nTITLE: Handling blur Event for Avatar Control in DHTMLX Form\nDESCRIPTION: This code snippet demonstrates how to attach an event listener to the blur event of an Avatar control in a DHTMLX Form. The event fires when the control loses focus and provides the current value of the control.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/avatar/avatar_blur_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"avatar\").events.on(\"blur\", value => {\n    console.log(\"blur\", value);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Container for DHTMLX Sidebar in HTML\nDESCRIPTION: This HTML snippet creates a container div for the DHTMLX Sidebar with the id 'sidebar_container'. This container is used to initialize and render the Sidebar component.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/sidebar/initialization.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"sidebar_container\"></div>\n```\n\n----------------------------------------\n\nTITLE: Showing a Checkbox Control in DHTMLX Form (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to use the show() method to display a Checkbox control within a DHTMLX Form. The method is called on a specific form item identified by its ID.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/checkbox/checkbox_show_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nform.getItem(\"checkbox\").show();\n```\n\n----------------------------------------\n\nTITLE: Implementing beforeChangeProperties Event Handler in DHTMLX Form\nDESCRIPTION: Shows how to attach an event listener for the beforeChangeProperties event to an Avatar form control. The event fires before configuration properties are changed and allows canceling the change by returning false.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/avatar/avatar_beforechangeproperties_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"avatar\").events.on(\"beforeChangeProperties\", properties => {\n    console.log(\"beforeChangeProperties\", properties);\n    return true;\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Window beforeShow Event in JavaScript\nDESCRIPTION: Example demonstrating how to attach an event handler to the beforeShow event of a DHTMLX Window component. The handler receives position coordinates and can control window display behavior.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/window/api/window_beforeshow_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndhxWindow.events.on(\"beforeShow\", function(position){\n    console.log(\"A window will be shown\");\n    return true;\n});\n```\n\n----------------------------------------\n\nTITLE: Validating SimpleVault Control in DHTMLX Form\nDESCRIPTION: Shows how to validate a SimpleVault control in a DHTMLX Form by calling the validate() method with the silent parameter. When the silent parameter is true, the method returns the result without triggering validation events or visual changes.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/simplevault/simplevault_validate_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"simplevault\").validate(true);\n// -> true/false\n```\n\n----------------------------------------\n\nTITLE: Toggle Properties in ToggleGroup Configuration\nDESCRIPTION: Configuration object for individual toggle elements within a ToggleGroup control.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/form_getproperties_method.md#2025-04-22_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    full: boolean,\n    text: string,\n    icon: string,\n    offText: string,\n    offIcon: string,\n    value: string | number\n}\n```\n\n----------------------------------------\n\nTITLE: Preparing JSON Dataset for DataView in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a JSON dataset for use with DHTMLX DataView. Each object in the array represents an item with properties like value, short description, and thumbnail image.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/dataview/data_loading.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst dataset = [\n      {\n        \"value\": \"Ben\",\n        \"short\": \"Ben is a very cautious 5-year-old Siberian Husky.\",\n        \"thumbnailName\": \"01.jpg\"\n    },\n    {\n        \"value\": \"Izzy\",\n        \"short\": \"This is our most beloved kingfisher bird Izzy.\",\n        \"thumbnailName\": \"02.jpg\"\n    },\n    {\n        \"value\": \"Momo\",\n        \"short\": \"Momo is a 25-year-old elephant with a big heart.\",\n        \"thumbnailName\": \"03.jpg\"\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Simplified afterSelect Event Handling in DHTMLX Grid (JavaScript)\nDESCRIPTION: This code snippet shows a simplified version of attaching an event listener to the afterSelect event of a DHTMLX Grid. It uses the grid's events object directly, which is an alternative to using the selection.events approach.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/selection/selection_afterselect_event.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\ngrid.events.on(\"AfterSelect\", (row, column) => {\n    console.log(\"afterSelect\", row, column); \n});\n```\n\n----------------------------------------\n\nTITLE: Default Root ID Behavior in DHTMLX Tree (JavaScript)\nDESCRIPTION: This example shows the default behavior of the root element's id in a DHTMLX Tree. By default, the root element takes the id of the Tree container.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree/api/tree_rootid_config.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst tree = new dhx.Tree(\"tree_container\");\ntree.data.getRoot(); -> \"tree_container\"\n```\n\n----------------------------------------\n\nTITLE: Setting Radiogroup Value in DHTMLX Form in JavaScript\nDESCRIPTION: This example demonstrates how to set a value for a Radiogroup control in a DHTMLX Form using the setValue() method. The method accepts a string parameter representing the value to be set.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/radiogroup/radiogroup_setvalue_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"radiogroup\").setValue(\"2\");\n```\n\n----------------------------------------\n\nTITLE: Configuring navigationType in DHTMLX Toolbar (JavaScript)\nDESCRIPTION: This example demonstrates how to initialize a DHTMLX Toolbar with the navigationType set to 'pointer', which displays the menu when a user hovers the mouse pointer over it instead of clicking.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/toolbar/api/toolbar_navigationtype_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst toolbar = new dhx.Toolbar(\"toolbar_container\", {\n    navigationType: \"pointer\"\n});\n```\n\n----------------------------------------\n\nTITLE: Bar Chart Gradient Configuration\nDESCRIPTION: Demonstrates how to add color gradients to bar charts using the gradient option in series configuration.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/chart/customization.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst chart = new dhx.Chart(\"chart_container\", {\n    type:\"bar\",\n    css: \"dhx_widget--bg_white dhx_widget--bordered\",\n    scales: {\n        \"bottom\" : {\n            text: \"month\",\n        },\n        \"left\" : {\n            max: 90\n        }\n    },\n    series: [\n        {\n            id: \"A\", value: \"company A\", color: \"none\", size: 35,\n            fill: \"#5E83BA\",\n            gradient: function(color) {\n                return {\n                    stops: [\n                        {\n                            offset: 0.5, \n                            color: color, \n                            opacity: 1 \n                        }, \n                        { \n                            offset: 1, \n                            color: \"#394E79\", \n                            opacity: 1 \n                        } \n                    ] \n                } \n            } \n        }\n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: Clearing ColorPicker Value in DHTMLX Form - JavaScript\nDESCRIPTION: Demonstrates how to clear the value of a ColorPicker control in a DHTMLX Form using the clear() method. The method retrieves the ColorPicker control by its ID and clears its selected value.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/colorpicker/colorpicker_clear_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"colorpicker\").clear();\n```\n\n----------------------------------------\n\nTITLE: Attaching headerCellMouseDown Event Handler in JavaScript Grid\nDESCRIPTION: This code snippet demonstrates how to attach an event handler for the headerCellMouseDown event in a DHTMLX Grid. The event fires before releasing the left mouse button when clicking on a grid header cell. It provides access to the cell configuration, column configuration, and the native event object.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_headercellmousedown_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngrid.events.on(\"headerCellMouseDown\", (cell, column, event) => {\n    // your logic here\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Value for SimpleVault Control in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the setValue() method to set a value for a SimpleVault control in a DHTMLX form. It sets an array containing a single file object with id, name, and status properties.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/simplevault/simplevault_setvalue_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nform.getItem(\"simpleVault\").setValue([\n    {\n        \"id\": \"file_id\",\n        \"name\": \"file_name.png\",\n        \"status\": \"uploaded\",\n    }\n]);\n```\n\n----------------------------------------\n\nTITLE: Applying Custom CSS Classes to DHTMLX Toolbar\nDESCRIPTION: Code example showing how to apply custom CSS classes to a DHTMLX Toolbar using the css configuration property.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/toolbar/customization.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst toolbar = new dhx.Toolbar(\"toolbar_container\", {\n    css:\"my_first_class my_second_class\"\n});\n```\n\n----------------------------------------\n\nTITLE: Handling cancelClick Event in DHTMLX Colorpicker\nDESCRIPTION: Event handler example showing how to attach a listener to the cancelClick event of a Colorpicker instance. This event fires when the user clicks the Cancel button in the colorpicker dialog.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/colorpicker/api/colorpicker_cancelclick_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncolorpicker.events.on(\"cancelClick\",function(){\n    // your logic here\n});\n```\n\n----------------------------------------\n\nTITLE: Handling input Event in DHTMLX Textarea Control in JavaScript\nDESCRIPTION: This code shows how to attach an event listener to the 'input' event of a Textarea control in a DHTMLX Form. The event fires when a user types text in the textarea and provides the current input value.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/textarea/textarea_input_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"textarea\").events.on(\"input\", function(inputValue) {\n    console.log(\"input\", inputValue);\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling DHTMLX Combo Box Component\nDESCRIPTION: Method to enable a previously disabled Combo Box component. This method restores the Combo Box to an interactive state, allowing user interaction after being disabled.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/combobox/api/combobox_enable_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncombo.enable();\n```\n\n----------------------------------------\n\nTITLE: Applying CSS Classes to Calendar Configuration\nDESCRIPTION: Code showing how to apply custom CSS classes to a calendar by using the css configuration property.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar2/customization.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar calendar = new dhx.Calendar({\n    css:\"my_first_class my_second_class\"\n});\n```\n\n----------------------------------------\n\nTITLE: Applying Custom CSS Classes to Ribbon Instance (JavaScript)\nDESCRIPTION: Instantiates a dhx.Ribbon component with a css property, accepting a string of CSS class names defined elsewhere. This enables dynamic alteration of the component’s styling. Dependencies include DHTMLX Suite library and the prior definition of the used CSS classes. The ribbon is initialized on the DOM element 'ribbon_container'; expected to enhance or override default Ribbon appearance based on the provided class list.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/ribbon/customization.md#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nconst ribbon = new dhx.Ribbon(\\\"ribbon_container\\\", {\\n    css:\\\"my_first_class my_second_class\\\"\\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Current Mode Example\nDESCRIPTION: Demonstrates how to retrieve the current display mode of the calendar\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar2/operating_calendar.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar mode = calendar.getCurrentMode(); // -> \"calendar\"\n```\n\n----------------------------------------\n\nTITLE: Grid Selection Styling\nDESCRIPTION: Demonstrates how to customize the selection appearance in DHTMLX Grid using CSS variables.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/customization.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<style>\n    .custom {\n        --dhx-color-primary: #ff5252;\n        --dhx-s-grid-selection-background: rgba(255, 198, 198, 1);\n    }\n</style>\n\n<script>\n    const grid = new dhx.Grid(\"grid_container\", {\n        columns: [\n            { minWidth: 150, id: \"country\", header: [{ text: \"Country\" }] },\n            { id: \"population\", header: [{ text: \"Population\" }] },\n            { id: \"yearlyChange\", header: [{ text: \"Yearly Change\" }] }\n        ],\n        adjust: true,\n        data: dataset,\n        selection: true,\n        css: \"custom\"\n    });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Initializing Calendar with Week Numbers Display in JavaScript\nDESCRIPTION: This code example demonstrates how to initialize a dhtmlx Calendar component with week numbers enabled by setting the weekNumbers property to true.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar2/api/calendar_weeknumbers_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar calendar = new dhx.Calendar(\"calendar_container\", { \n    weekNumbers: true\n});\n```\n\n----------------------------------------\n\nTITLE: Handling beforeChange Event in DHTMLX Form Toggle Group\nDESCRIPTION: Example showing how to attach a beforeChange event handler to a Toggle Group control in a DHTMLX form. The event fires before the value changes and can prevent the change by returning false.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/togglegroup/togglegroup_beforechange_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"ToggleGroup\").events.on(\"beforeChange\", function(value) {\n    console.log(\"beforeChange\", value);\n    return true;\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Column Drag Event Handler in DHTMLX Grid\nDESCRIPTION: Example showing how to initialize a DHTMLX Grid with column dragging functionality and implement a beforeColumnDrop event handler that prevents dropping columns on the population column.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_beforecolumndrop_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst grid = new dhx.Grid(\"grid\", {\n    columns: [\n        { width: 200, id: \"country\", header: [{ text: \"Country\" }] },\n        { width: 150, id: \"population\", header: [{ text: \"Population\" }] },\n        { width: 150, id: \"age\", header: [{ text: \"Med. Age\" }], draggable: false },\n        { width: 150, id: \"density\", header: [{ text: \"Density (P/Km²)\" }] },\n    ],\n    data: dataset,\n    dragItem: \"column\",\n});\n\ngrid.events.on(\"beforeColumnDrop\", ({ target }) => target !== \"population\");\n```\n\n----------------------------------------\n\nTITLE: Clearing Input Validation in DHTMLX Form JavaScript\nDESCRIPTION: This code snippet demonstrates how to use the clearValidate() method to clear the validation of an Input control in a DHTMLX Form. It targets a specific input item and removes any validation states or messages.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/input/input_clearvalidate_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nform.getItem(\"input\").clearValidate();\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Locale for DHTMLX Grid in JavaScript\nDESCRIPTION: This example demonstrates how to create a custom locale (in this case, German) for the DHTMLX Grid. The structure is similar to the default locale, but with translated strings.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/localization.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst de = {\n    // language settings\n};\n```\n\n----------------------------------------\n\nTITLE: Using isVisible Method with Radiogroup Control in DHTMLX Form\nDESCRIPTION: This example demonstrates how to use the isVisible() method to check if a specific radio button within a Radiogroup control is visible. The method returns a boolean value indicating visibility status.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/radiogroup/radiogroup_isvisible_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"radiogroup\").isVisible(\"id_1\"); \n// -> true/false\n```\n\n----------------------------------------\n\nTITLE: Using getProperties Method for Datepicker in DHTMLX Form\nDESCRIPTION: This snippet demonstrates how to initialize a Form with a Datepicker control and use the getProperties() method to retrieve its configuration attributes.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/calendar/calendar_getproperties_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst form = new dhx.Form(\"form_container\", {\n    rows: [\n        {\n            type: \"datepicker\",\n            name: \"datepicker\",\n            label: \"date\",\n            labelWidth: \"50px\"\n        }\n    ]\n});\n\nform.getItem(\"datepicker\").getProperties();\n```\n\n----------------------------------------\n\nTITLE: Handling canColumnDrop Event in DHTMLX Grid\nDESCRIPTION: This code snippet demonstrates how to attach an event listener for the canColumnDrop event in a DHTMLX Grid. The event fires when a dragged column is placed over a target column, allowing custom logic to be executed.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_cancolumndrop_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngrid.events.on(\"canColumnDrop\", (data, event) => {\n  // your logic here\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring drag mode for a Tree component in JavaScript\nDESCRIPTION: This code shows how to set up a Tree component with a specific drag mode. In this case, the tree is configured as a 'source', allowing its items to be dragged out but not accepting items from other sources.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree/drag_and_drop_handling.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst tree = new dhx.Tree(\"tree_container\", { \n    dragMode:\"source\"\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Calendar with Custom Width in JavaScript\nDESCRIPTION: This code example demonstrates how to create a DHTMLX Calendar component with a custom width of 300 pixels. The width parameter accepts string or number values and defaults to '250px' if not specified.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar/api/calendar_width_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst calendar = new dhx.Calendar(\"calendar_container\", {\n   width: \"300px\"\n});\n```\n\n----------------------------------------\n\nTITLE: Detaching Event Listener from Menu in JavaScript\nDESCRIPTION: Shows how to detach an event listener from a Menu component using the events.detach() method. This example removes the 'click' event handler after attaching it.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/menu/handling_events.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmenu.events.on(\"click\", function(id, e){\n    console.log(id);\n});\n\nmenu.events.detach(\"click\");\n```\n\n----------------------------------------\n\nTITLE: Handling itemDblClick Event in DHTMLX Tree (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to handle the itemDblClick event in a DHTMLX Tree component. It toggles the opened state of a folder when double-clicked.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree/api/tree_itemdblclick_event.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// allows opening folders on double click\ntree.events.on(\"itemDblClick\", function(id, e){\n    tree.data.update(id, {opened: !tree.data.getItem(id).opened})\n});\n```\n\n----------------------------------------\n\nTITLE: Handling removeAll Event in DHTMLX TreeCollection\nDESCRIPTION: Example showing how to attach an event handler to the removeAll event of a TreeCollection. The handler logs a message when all items are removed from the collection.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree_collection/api/treecollection_removeall_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncomponent.data.events.on(\"removeAll\", function(){\n    console.log(\"Items are removed\");\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Default English Locale for DHTMLX Combo Box\nDESCRIPTION: This snippet shows the default English locale object for the DHTMLX Combo Box. It includes translations for various UI elements such as 'Not found', 'Select all', and 'Create'.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/combobox/localization.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst en = {\n    notFound: \"Not found\",\n    selectAll: \"Select all\",\n    unselectAll: \"Unselect all\",\n    selectedItems: \"Selected items\",\n    createItem: \"Create\",\n    placeholder: \"Click to select\"\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring One Year Period Heat Map\nDESCRIPTION: Sets up a heat map configuration for a one-year period with specific start and end dates.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/chart/configuration_properties.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n    type: \"calendarHeatMap\",\n    series: [\n        {\n            value: \"value\",\n            date: \"date\",\n            startDate: \"15/03/22\",\n            endDate: \"15/03/23\",\n        }\n    ],\n};\n\nconst chart = new dhx.Chart(\"chart_container\", config);\nchart.data.parse(heatMapData);\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX Timepicker with Numeric Timestamp - JavaScript\nDESCRIPTION: This code demonstrates initializing a DHTMLX Timepicker where the 'value' property is set to a numeric timestamp representing milliseconds since the Unix epoch (January 1, 1970). The Timepicker interprets the number as a time and displays it accordingly. Requires DHTMLX Suite and a container with the given ID. The code expects a valid timestamp; invalid or negative values may result in unintended behavior.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/timepicker/api/timepicker_value_config.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// the value as a number\nconst timepicker = new dhx.Timepicker(\"timepicker_container\", {\n    value: 1232151545\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing a Basic DHTMLX Message with Options (JavaScript)\nDESCRIPTION: Shows how to create a standard DHTMLX message using the `dhx.message` constructor. It takes an object with configuration options like `text` (content), `icon` (CSS class for icon), `css` (custom CSS class), and `expire` (duration in ms). The constructor returns an object containing a `close` method to programmatically dismiss the message.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/message/creating_message.md#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nconst message = dhx.message({\n    text:\"Message text\", \n    icon:\"dxi-clock\", \n    css:\"expire\", \n    expire:1000\n});\n\nconsole.log(message); // -> {close: function}\n```\n\n----------------------------------------\n\nTITLE: Adding HTML Content to MenuItem\nDESCRIPTION: Shows how to incorporate custom HTML content in a MenuItem using the html property.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/toolbar/menuitem.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    type: \"menuItem\",\n    html: \"<img class='item-avatar' src='../avatars/Avatar_07.jpg'/>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Handling TreeCollection afterAdd Event in JavaScript\nDESCRIPTION: Example showing how to attach an event handler to the afterAdd event of a TreeCollection component. The handler logs a message when a new item is added to the collection.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree_collection/api/treecollection_afteradd_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncomponent.data.events.on(\"afterAdd\", function(newItem){\n    console.log(\"A new item is added\");\n});\n```\n\n----------------------------------------\n\nTITLE: Using the destructor() Method with DHTMLX Tree in JavaScript\nDESCRIPTION: A simple example demonstrating how to call the destructor() method on a Tree instance to release resources when the component is no longer needed.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree/api/tree_destructor_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntree.destructor();\n```\n\n----------------------------------------\n\nTITLE: Setting Initial Calendar Date\nDESCRIPTION: JavaScript code demonstrating how to specify a date that should be selected in the calendar upon initialization using the value configuration option.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar/how_to_start.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst calendar = new dhx.Calendar(\"calendar_container\", {\n    value: new Date(2019,1,10)\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Avatar afterShow Event in DHTMLX Form\nDESCRIPTION: Example demonstrating how to attach an event handler to the afterShow event of an Avatar control in a DHTMLX Form. The event fires after the control becomes visible and provides access to the current control value.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/avatar/avatar_aftershow_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"avatar\").events.on(\"afterShow\", value => {\n    console.log(\"afterShow\", value);\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX Colorpicker with pickerOnly Config in JavaScript\nDESCRIPTION: This code snippet demonstrates how to initialize a DHTMLX Colorpicker with the pickerOnly option set to true. This configuration forces the Colorpicker to be shown only in the picker mode, without the palette.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/colorpicker/api/colorpicker_pickeronly_config.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst colorpicker = new dhx.Colorpicker(\"colorpicker_container\",{\n    pickerOnly: true\n});\n```\n\n----------------------------------------\n\nTITLE: Setting DHTMLX TimePicker Value Post-Initialization\nDESCRIPTION: Demonstrates how to set the value of an already initialized TimePicker using the `setValue()` method. It shows setting the value using different formats: a string ('HH:mm'), a JavaScript Date object, and an array ([hour, minute, period]).\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/timepicker/initialization.md#2025-04-22_snippet_5\n\nLANGUAGE: js\nCODE:\n```\n// set the value as a string\ntimepicker.setValue(\"00:39\");\n// set the value as a Date object\ntimepicker.setValue(new Date('January 10, 2019 17:54:00'));\n// set the value as an array\ntimepicker.setValue([6,20,\"AM\"]);\n```\n\n----------------------------------------\n\nTITLE: Enabling and Disabling NavItem in JavaScript Sidebar\nDESCRIPTION: Shows how to enable and disable a NavItem using the enable() and disable() methods of the Sidebar. These methods also require the ID of the NavItem.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/sidebar/navitem.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nsidebar.enable(id);\nsidebar.disable(id);\n```\n\n----------------------------------------\n\nTITLE: Creating Chart Data Array\nDESCRIPTION: Creates and populates an array with user statistics including values, colors, and labels for chart display.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tutorial/basic_application/step7.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar pieData = []; \n\nif (vipUser > 0) { \n    pieData.push( { value: vipUser, color: \"#394E79\", \n        text: \"Premium Users\" })\n    }\nif  (defUser > 0) {\n    pieData.push( { value: defUser, color: \"#5E83BA\", \n        text: \"Default Users\" })\n};\n```\n\n----------------------------------------\n\nTITLE: Toggle Properties Configuration\nDESCRIPTION: Configuration object for Toggle control defining toggle switch properties and display options.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/form_getproperties_method.md#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    css: string,\n    width: string | number | \"content\",\n    height: string | number | \"content\",\n    padding: string | number,\n    full: boolean,\n    text: string,\n    icon: string,\n    offText: string,\n    offIcon: string,\n    value: string | number\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling a specific Checkbox in CheckboxGroup using disable() method in DHTMLX Form\nDESCRIPTION: This example demonstrates how to disable a specific checkbox element inside a CheckboxGroup control by passing its ID to the disable() method. The method targets a checkbox with ID 'id_1' within the CheckboxGroup.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/checkbox_group/checkboxgroup_disable_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"CheckboxGroup\").disable(\"id_1\");\n```\n\n----------------------------------------\n\nTITLE: Setting Calendar Date After Initialization\nDESCRIPTION: JavaScript code showing how to select a specific date after the calendar has been initialized using the setValue method.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar/how_to_start.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst calendar = new dhx.Calendar(\"calendar_container\", {\n    // configuration options\n});\ncalendar.setValue(new Date(2022,1,10));\n```\n\n----------------------------------------\n\nTITLE: Declaring DateFormat Type Definition\nDESCRIPTION: TypeScript/JSX type definition showing the dateFormat property configuration for Grid columns.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/gridcolumn_properties/gridcolumn_dateformat_property.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\ndateFormat?: string;\n```\n\n----------------------------------------\n\nTITLE: Setting Tab Alignment in DHTMLX Tabbar\nDESCRIPTION: Demonstrates how to configure tab alignment using the tabAlign property\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tabbar/configuring_tabbar.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst tabbar = new dhx.Tabbar(\"tabbar_container\", {\n    views:[\n        { tab: \"left\", css:\"panel flex\", header:\"Left\"},\n        { tab: \"west\", css:\"panel flex\", header:\"West\"},\n        { tab: \"east\", css:\"panel flex\", header:\"East\"},\n        { tab: \"right\", css:\"panel flex\", header:\"Right\" }\n    ],\n    tabAlign: \"center\"\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Default English Locale for Form SimpleVault Control\nDESCRIPTION: This snippet shows the structure of the default English locale for the SimpleVault control in DHTMLX Form. It defines text strings for the drag and drop area and browse files label.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/localization.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst en = {\n    simpleVaultText: \"Drag & drop files or folders here or\",\n    simpleVaultLabel: \"browse files\"\n};\n```\n\n----------------------------------------\n\nTITLE: Treemap Chart Legend Configuration\nDESCRIPTION: Example of legend configuration specifically for Treemap charts\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/chart/api/chart_legend_config.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nlegend: {\n    type?: \"groupName\" | \"range\", // \"groupName\" by default\n    treeSeries: [\n        {\n            greater?: number,\n            from?: number,\n            to?: number,\n            less?: number,\n            color?: string,\n            active?: boolean,\n            id?: string,\n        },\n        // more objects\n    ],\n    direction?: \"row\" | \"column\", // \"row\" by default\n    form?: \"rect\" | \"circle\", // \"rect\" by default\n    halign?: \"left\" | \"right\" | \"center\", // \"right\" by default\n    itemPadding?: number,\n    margin?: number,\n    size?: number,\n    valign?: \"top\" | \"middle\" | \"bottom\", // \"top\" by default\n}\n```\n\n----------------------------------------\n\nTITLE: Showing Grid Row using showRow Method\nDESCRIPTION: Simple example showing how to make a grid row visible using the showRow() method. The method takes a row ID as a parameter and makes the corresponding row visible in the grid.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_showrow_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngrid.showRow(rowId);\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX Slider with Range Mode in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a new DHTMLX Slider instance with the range mode enabled. The range option allows users to select a range of values on the slider instead of a single value.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/slider/api/slider_range_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst slider = new dhx.Slider(\"slider_container\", { \n    range:true\n});\n```\n\n----------------------------------------\n\nTITLE: Attaching afterHide Event Handler to Select Control in DHTMLX Form\nDESCRIPTION: This code snippet demonstrates how to attach an event handler for the afterHide event to a Select control in a DHTMLX Form. The event fires after the control is hidden and provides the current value and initialization status.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/select/select_afterhide_event.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nform.getItem(\"select\").events.on(\"afterHide\", function(value, init) {\n    console.log(\"afterHide\", value, init);\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Custom CSS Classes to Sidebar Controls with menuCss Configuration\nDESCRIPTION: This example demonstrates how to add custom CSS classes to all containers of Sidebar controls that have nested items using the menuCss configuration option. The classes 'my_first_class' and 'my_second_class' are applied to the sidebar with custom styles defined in a style block.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/sidebar/api/sidebar_menucss_config.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n<style>\n    .my_first_class {\n        /*some styles*/\n    }\n \n    .my_second_class {\n        /*some styles*/\n    }\n</style>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst sidebar = new dhx.Sidebar(\"sidebar_container\", {\n    menuCss:\"my_first_class my_second_class\"\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Timepicker Initial Value (Array) - DHTMLX - JavaScript\nDESCRIPTION: Shows how to specify the initial value of DHTMLX Timepicker using an array [hour, minute, AM/PM]. The 'value' property interprets the array accordingly to set time. Requires DHTMLX library. Input: Array; Output: The Timepicker starts with the array values applied as selected time.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/timepicker/configuration.md#2025-04-22_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\n// the value as an array\nconst timepicker = new dhx.Timepicker(\"timepicker_container\", {\n    value: [6,20,\"AM\"]\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Focus on Slider Thumb in JavaScript DHTMLX Form\nDESCRIPTION: Demonstrates how to use the focus() method to set focus on the thumb of a Slider control in a DHTMLX Form. It shows examples for both single and range mode sliders.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/slider/slider_focus_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// sets focus to the thumb;  \n// if the range mode is activated, sets focus to the first thumb\nform.getItem(\"slider\").focus(); \n\n// sets focus to the second thumb if the range mode is activated\nform.getItem(\"slider\").focus(true);\n```\n\n----------------------------------------\n\nTITLE: Adding Event Listener for Textarea Change Event in DHTMLX Form\nDESCRIPTION: This code demonstrates how to attach an event listener to the 'change' event of a Textarea control in a DHTMLX Form. The event fires whenever the value of the textarea is changed and provides the current value as a parameter.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/textarea/textarea_change_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"textarea\").events.on(\"change\", function(value) {\n    console.log(\"change\", value);\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX Sidebar in Collapsed Mode\nDESCRIPTION: This code initializes a DHTMLX Sidebar component in its collapsed state using the collapsed property. The CSS class adds a right border to the sidebar for visual separation.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/sidebar/sidebar_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst sidebar = new dhx.Sidebar(\"sidebar_container\", {\n    css: \"dhx_widget--border_right\",\n    collapsed: true\n});\n```\n\n----------------------------------------\n\nTITLE: Preparing JSON Data Structure for DHTMLX Sidebar\nDESCRIPTION: Example of a JSON data structure for initializing sidebar items with IDs, values, and icons. The data consists of an array of objects representing sidebar controls with unique identifiers.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/sidebar/data_loading.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = [\n    {\n        \"id\": \"dashboard\",\n        \"value\": \"Dashboard\",\n        \"icon\": \"mdi mdi-view-dashboard\"\n    },\n    {\n        \"id\": \"statistics\",\n        \"value\": \"Statistics\",\n        \"icon\": \"mdi mdi-chart-line\"\n    },\n    {\n        \"id\": \"reports\",\n        \"value\": \"Reports\",\n        \"icon\": \"mdi mdi-file-chart\"\n    }\n];\n```\n\n----------------------------------------\n\nTITLE: Simplified beforeSelect Event Handling in DHTMLX Grid (JavaScript)\nDESCRIPTION: This code shows a simplified version of attaching a handler to the beforeSelect event of a DHTMLX Grid. It uses the grid.events.on method instead of grid.selection.events.on.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/selection/selection_beforeselect_event.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ngrid.events.on(\"BeforeSelect\", (row, column) => {\n    console.log(\"beforeSelect\", row, column); \n    return false;\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a DHTMLX Toolbar Title Item Configuration Object in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates the structure of a configuration object for a 'title' item within a DHTMLX Toolbar's data array. Key properties include `type` (set to 'title'), `value` or `html` for the title content, and optional properties for `id`, `parent`, `tooltip`, styling (`css`), and state (`disabled`, `hidden`). This object is typically part of an array used to initialize the toolbar.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/toolbar/api/api_title_properties.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nconst data = [\n    {\n        type: \"title\",\n        id?: string | number,\n        parent?: string,\n        value?: string,\n\n        html?: string,\n        tooltip?: string,\n\n        css?: string | string[],\n        disabled?: boolean,\n        hidden?: boolean,\n    },\n    // more Toolbar controls\n]\n```\n\n----------------------------------------\n\nTITLE: Checking Item Existence in TreeCollection using exists() Method\nDESCRIPTION: This code snippet demonstrates how to use the exists() method of the TreeCollection class to check if an item with a specific ID exists in the component. It returns a boolean value indicating the existence of the item.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree_collection/api/treecollection_exists_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst item = component.data.exists(\"1\");\n```\n\n----------------------------------------\n\nTITLE: CSS for Highlighted Dates\nDESCRIPTION: CSS definition for the 'highlight-date' class used to style marked dates in the calendar.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar/configuring.md#2025-04-22_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<style>\n    .highlight-date {\n        color: #fff;\n    }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX Colorpicker with Custom Colors in JavaScript\nDESCRIPTION: This snippet demonstrates how to initialize a DHTMLX Colorpicker with custom colors. The customColors option is used to specify an array of custom color hexadecimal values that will be displayed in the bottom section of the Colorpicker.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/colorpicker/api/colorpicker_customcolors_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst colorpicker = new dhx.Colorpicker(\"colorpicker_container\", {\n    customColors: [\"#1d2de7\", \"#ab31ff\", \"#a3fa76\"]                    \n});\n```\n\n----------------------------------------\n\nTITLE: Handling Grid Header Cell Double Click Event in JavaScript\nDESCRIPTION: Example of attaching an event handler for double-clicking on a grid header cell. The event provides access to the cell configuration, column details, and the native mouse event object.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_headercelldblclick_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngrid.events.on(\"headerCellDblClick\", (cell, column, event) => {\n    // your logic here\n});\n```\n\n----------------------------------------\n\nTITLE: Handling beforeShow Event in DHTMLX Form Container Control in JavaScript\nDESCRIPTION: Example of attaching an event handler to the beforeShow event of a Container control in a DHTMLX Form. The handler logs a message and returns true to allow the container to be shown.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/container/container_beforeshow_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"container\").events.on(\"beforeShow\", function() {\n    console.log(\"beforeShow\");\n    return true;\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Layout Cell Parent\nDESCRIPTION: Basic example of using getParent() method to retrieve the parent of a Layout cell\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/layout/api/cell/layout_cell_getparent_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlayout.getCell(\"1\").getParent();\n```\n\n----------------------------------------\n\nTITLE: JSON Template for Separator in DHTMLX Menu\nDESCRIPTION: JSON format template for a Separator object in DHTMLX Menu, used to draw horizontal lines between menu options or vertical lines between menu items.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/menu/data_loading.md#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": \"s_id\",        \n    \"type\": \"separator\"   \n}\n```\n\n----------------------------------------\n\nTITLE: Handling input Event for Timepicker in DHTMLX Form (JavaScript)\nDESCRIPTION: This snippet demonstrates how to attach an event listener to the 'input' event of a Timepicker control in a DHTMLX Form. The event fires when a user manually enters a value in the input field. It requires the 'editable' option of the TimePicker to be set to true.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/timepicker/timepicker_input_event.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nform.getItem(\"timepicker\").events.on(\"input\", function(inputValue) {\n    console.log(\"input\", inputValue);\n});\n```\n\n----------------------------------------\n\nTITLE: Repainting Slider using paint() Method in JavaScript\nDESCRIPTION: The paint() method is used to repaint the Slider component on a page. It takes no parameters and returns void. This method is useful when you need to manually trigger a redraw of the Slider, for example, after dynamically changing its properties or layout.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/slider/api/slider_paint_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nslider.paint();\n```\n\n----------------------------------------\n\nTITLE: Container-based Colorpicker Initialization\nDESCRIPTION: JavaScript code demonstrating how to initialize Colorpicker within a container element.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/colorpicker/how_to_start.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst colorpicker = new dhx.Colorpicker(\"colorpicker_container\", {\n    css: \"dhx_widget--bordered\",\n   // more config options\n});\n```\n\n----------------------------------------\n\nTITLE: Disabling All Ribbon Items - DHTMLX Suite JavaScript\nDESCRIPTION: Starting from DHTMLX Suite version 7.0, this snippet shows how to disable all items in a Ribbon instance by invoking the disable method without passing any parameters. Depends on a properly initialized Ribbon component (ribbon). No parameters are required; all Ribbon items will be disabled in both functionality and appearance. The method does not return a value and there are no additional constraints beyond requiring DHTMLX v7.0 or later.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/ribbon/api/ribbon_disable_method.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// disables all Ribbon items\nribbon.disable();\n```\n\n----------------------------------------\n\nTITLE: Showing Input Control in DHTMLX Form (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to use the show() method to display an Input control that is part of a Form. The method is called on the Input control retrieved using the form's getItem() method.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/input/input_show_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nform.getItem(\"input\").show();\n```\n\n----------------------------------------\n\nTITLE: Applying Built-in CSS Classes to DataView\nDESCRIPTION: Shows how to use DHTMLX's built-in CSS classes to style a DataView widget.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/dataview/api/dataview_css_config.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst dataview = new dhx.DataView(\"dataview_container\", {\n    css: \"dhx_widget--bg_gray\"\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Combo Box with Placeholder in JavaScript\nDESCRIPTION: Demonstrates how to initialize a DHTMLX Combo Box component with a custom placeholder text in the input field. The placeholder text is displayed when the combo box is empty.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/combobox/api/combobox_placeholder_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst combo = new dhx.Combobox(\"combo_container\",{\n    placeholder: \"Some placeholder\"\n});\n```\n\n----------------------------------------\n\nTITLE: Creating an Optional HTML Container for DHTMLX Message\nDESCRIPTION: Illustrates creating a simple `<div>` element with a specific ID (`message_container`) in the HTML body. This container can optionally be used as the target node for displaying DHTMLX messages when the `node` configuration property is set in the `dhx.message` options. If no container is specified, messages appear in the top right corner by default.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/message/creating_message.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"message_container\"></div>\n```\n\n----------------------------------------\n\nTITLE: Showing and Hiding Rows in DHTMLX Grid\nDESCRIPTION: Use the showRow() and hideRow() methods to show and hide specific rows in the grid.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/usage.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n//showing a row\ngrid.showRow(rowId);\n//hiding a row\ngrid.hideRow(rowId);\n```\n\n----------------------------------------\n\nTITLE: Checking if a Text control is disabled in DHTMLX Form (JavaScript)\nDESCRIPTION: This snippet demonstrates how to use the isDisabled() method to check whether a Text control is disabled in a DHTMLX Form. The method returns true if the control is disabled and false otherwise.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/text/text_isdisabled_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"text\").isDisabled(); \n// -> true/false\n```\n\n----------------------------------------\n\nTITLE: Applying Custom CSS to DHTMLX Tabbar in HTML and JavaScript\nDESCRIPTION: This snippet demonstrates how to apply custom CSS classes to a DHTMLX Tabbar. It includes a style definition for custom tab and header appearances, and the JavaScript code to initialize the Tabbar with these custom styles.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tabbar/api/tabbar_css_config.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<style>\n    .custom .dhx_tabbar-tab-button--active {\n        background-color: rgb(2, 136, 209);\n        color: var(--dhx-color-white);\n    }\n    .custom .dhx_tabbar-header-active {\n        background-color: #ff5252;\n    }\n</style>\n\n<script>\n    const tabbar = new dhx.Tabbar(\"tabbar_container\", {\n        mode: \"top\",\n        css: \"custom\",\n        tabAlign: \"center\",\n        views: [\n            // view objects\n        ]\n    });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Adding Number Badge to NavItem in JavaScript\nDESCRIPTION: Shows how to add a numeric badge to a NavItem using the 'count' property.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/toolbar/navitem.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    type:\"navItem\", value:\"Some\",\n    icon:\"dxi dxi-check\",\n    count:10\n}\n```\n\n----------------------------------------\n\nTITLE: Hiding a Form using DHTMLX JavaScript Form Component\nDESCRIPTION: This example demonstrates how to hide a form using the hide() method. The method takes no parameters and returns void.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/form_hide_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.hide();\n```\n\n----------------------------------------\n\nTITLE: Initializing Disabled Combo Box in JavaScript\nDESCRIPTION: Creates a new Combo Box instance with the disabled mode enabled, preventing any user interactions.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/combobox/configuration.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst combo = new dhx.Combobox(\"combo_container\", {\n    disabled: true\n});\n```\n\n----------------------------------------\n\nTITLE: Attaching mouseDown Event Handler to Slider in JavaScript\nDESCRIPTION: This snippet demonstrates how to attach an event handler for the mouseDown event to a Slider instance. The event fires when the left mouse button is pressed over the slider thumb.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/slider/api/slider_mousedown_event.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nslider.events.on(\"mouseDown\", function(e){\n    // your code here\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Layout resize Event in JavaScript\nDESCRIPTION: This snippet demonstrates how to attach an event listener for the resize event of a Layout component. The event fires when a cell is resized and provides the id of the resized cell as a parameter.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/layout/api/layout_resize_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlayout.events.on(\"resize\", function(id){\n    // your logic here\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Timepicker with Controls in DHTMLX - JavaScript\nDESCRIPTION: Demonstrates how to initialize a DHTMLX Timepicker with Save and Close action buttons by setting the 'controls' property to true in the configuration object. The only requirement is that the DHTMLX Suite library is included; 'dhx.Timepicker' is provided by this library. The 'controls' property, when enabled, enhances user interaction by providing button-based controls. Input: no programmatic data input; Output: renders a Timepicker UI component with actionable controls.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/timepicker/configuration.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst timepicker = new dhx.Timepicker(\"timepicker_container\", {\n    controls:true\n});\n```\n\n----------------------------------------\n\nTITLE: Checking DataCollection Grouping State in JavaScript\nDESCRIPTION: Demonstrates how to check if a DataCollection object is currently grouped using the isGrouped() method. The method returns a boolean value indicating the grouping state.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/data_collection/api/datacollection_isgrouped_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nif (component.data.isGrouped()) {\n    console.log(\"The data is currently grouped\");\n}\n```\n\n----------------------------------------\n\nTITLE: ToggleGroup Properties Object Structure in DHTMLX Form\nDESCRIPTION: This code snippet shows the structure of the properties object for a ToggleGroup control in DHTMLX Form. It includes various configuration attributes that can be dynamically changed.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/togglegroup/togglegroup_afterchangeproperties_event.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    css: string,\n    full: boolean,\n    gap: number,\n    height: string | number|\"content\",\n    multiselection: boolean,\n    options: object[],\n    padding: string | number,\n    width: string|number|\"content\"\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Focus from CheckboxGroup in DHTMLX Form (JavaScript)\nDESCRIPTION: This code demonstrates how to use the blur() method to remove focus from a CheckboxGroup control in a DHTMLX Form. The method takes no parameters and returns void.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/checkbox_group/checkboxgroup_blur_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"CheckboxGroup\").blur();\n```\n\n----------------------------------------\n\nTITLE: Applying Custom CSS Classes to Timepicker in JavaScript\nDESCRIPTION: Illustrates how to instantiate a DHTMLX Timepicker and apply previously defined custom CSS classes (like 'my-first-class' and 'my-second-class') using the `css` configuration property. Multiple classes are separated by spaces.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/timepicker/customization.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst timepicker = new dhx.Timepicker(\"timepicker_container\", { \n    css:\"my-first-class my-second-class\"\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring dragCopy in DHTMLX Tree\nDESCRIPTION: This example demonstrates how to enable copying items during drag-and-drop operations between two Tree components. One tree is configured as the source and the other as the target, both with dragCopy enabled.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree/api/tree_dragcopy_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst treeSource = new dhx.Tree(\"tree-source\", {dragMode: \"source\", dragCopy: true});\nconst treeTarget = new dhx.Tree(\"tree-target\", {dragMode: \"target\", dragCopy: true});\n```\n\n----------------------------------------\n\nTITLE: Setting Initial Page in DHTMLX Pagination (JavaScript)\nDESCRIPTION: This snippet shows how to initialize a dhx.Pagination component and set the starting page using the page property in the configuration object. It requires the DHTMLX JavaScript library and an existing DOM container. The page parameter specifies the zero-based index of the initial page; for example, page: 4 displays the fifth page by default. The output is a paginated control starting on the specified page; if omitted, the default is the first page (index 0).\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/pagination/configuration.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst pagination = new dhx.Pagination(\"pagination_container\", {\n    css: \"dhx_widget--bordered\",\n    page: 4  // sets the fifth page as initial one\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX Ribbon - Complete HTML Example\nDESCRIPTION: Basic HTML structure showing how to include DHTMLX Suite files and initialize a Ribbon component. Includes the necessary script and CSS imports, container creation, and basic initialization code.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/ribbon/how_to_start.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n    <head>\n        <title>How to Start with DHTMLX Ribbon</title>         \n        <script type=\"text/javascript\" src=\"../../codebase/suite.js\"></script>\n        <link rel=\"stylesheet\" href=\"../../codebase/suite.css\">\n    </head>\n    <body>\n        <div id=\"ribbon_container\"></div>\n        <script>\n            // creating DHTMLX Ribbon\n            const ribbon = new dhx.Ribbon(\"ribbon_container\");\n        </script>\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Select All Items in List/DataView\nDESCRIPTION: Shows how to select all unselected items in List/DataView components using the add() method without parameters (available from v7.0).\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/selection/api/selection_add_method.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncomponent.selection.add();\n```\n\n----------------------------------------\n\nTITLE: Setting Timepicker Initial Value (String) - DHTMLX - JavaScript\nDESCRIPTION: Illustrates setting the Timepicker's initial time as a string (e.g., '22:30'). The 'value' property in the configuration accepts time-formatted strings. Requires DHTMLX library. Input: string; Output: Timepicker opens with the given time preselected.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/timepicker/configuration.md#2025-04-22_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n// the value as a string\nconst timepicker = new dhx.Timepicker(\"timepicker_container\", {\n    value: \"22:30\"\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Tooltip for NavItem in JavaScript\nDESCRIPTION: Shows how to add a tooltip to a NavItem using the 'tooltip' property.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/toolbar/navitem.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    type:\"navItem\", \n    value:\"Click\", \n    tooltip:\"Click me and find out why\"\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Format Template for ImageButton Control\nDESCRIPTION: Template showing the structure and properties for an imageButton control in DHTMLX Toolbar.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/toolbar/load_data.md#2025-04-22_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n// imageButton\n{\n    id: \"user\",                \n    type: \"imageButton\",        \n    src: \"../img/avatar.png\"                \n}\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX Form with Valued Checkbox Control (JavaScript)\nDESCRIPTION: Demonstrates initializing a DHTMLX Form with a checkbox that has a specified value. The getValue() method returns the value if checked, or an empty string if unchecked.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/checkbox/checkbox_getvalue_method.md#2025-04-22_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst form = new dhx.Form(\"form_container\", {\n    rows: [\n        {   \n            type: \"checkbox\",\n            label: \"I agree\",\n            name: \"agree\",\n            id: \"agree\",\n            checked: false,\n            value: \"checkbox_value\"\n        }\n    ]\n});\n\nconst value = form.getItem(\"checkbox\").getValue(); // -> \"\"\n```\n\n----------------------------------------\n\nTITLE: Checking Column Visibility in DHTMLX Grid\nDESCRIPTION: Use the isColumnHidden() method to check if a column is hidden or visible. It returns true if hidden, false if visible.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/usage.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ngrid.isColumnHidden(\"country\"); // -> true|false\n```\n\n----------------------------------------\n\nTITLE: Applying Custom CSS Classes to DHTMLX List in HTML and JavaScript\nDESCRIPTION: This example demonstrates how to apply custom CSS classes to a DHTMLX List component. It includes a custom CSS class that modifies various color properties and shows how to initialize the List with multiple CSS classes.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/list/api/list_css_config.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<style>\n    .custom {\n        --dhx-color-primary: #118d8d;\n        --dhx-background-primary: rgba(209, 250, 250, 0.3);\n        --dhx-background-secondary: rgba(17, 141, 141, 0.1);\n        --dhx-background-additional: rgba(17, 141, 141, 0.3);\n    }\n</style>\n\n<script>\n    const list = new dhx.List(\"list_container\", {\n        css: \"custom dhx_widget--bordered\", //the names of the CSS classes separated by space\n        template,\n        data,\n    });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Setting Calendar to Month Mode\nDESCRIPTION: Configures a Calendar to display in 'month' mode where only months of the current year are shown.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar2/configuring.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar calendar = new dhx.Calendar(\"calendar_container\", {\n    mode: \"month\"\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Selected Tree Item ID in JavaScript\nDESCRIPTION: Shows how to retrieve the ID of the currently selected Tree item using the selection object's getId() method.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree/usage_selection.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst selected = tree.selection.getId(); // -> \"2\"\n```\n\n----------------------------------------\n\nTITLE: Removing Focus from Radiogroup Control in DHTMLX Form (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to use the blur() method to remove focus from a Radiogroup control in a DHTMLX Form. The method is called on the form item retrieved using the getItem() method.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/radiogroup/radiogroup_blur_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nform.getItem(\"radiogroup\").blur();\n```\n\n----------------------------------------\n\nTITLE: Configuring Series for Treemap Chart in JavaScript\nDESCRIPTION: This code snippet demonstrates the structure for configuring series options for a Treemap chart in DHTMLX Suite. It includes properties for text mapping, value mapping, direction, paddings, and various display options.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/chart/api/chart_series_config.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nseries: [\n    {\n        text: string,\n        value: string,\n\n        direction?: \"asc\" | \"desc\",\n        paddings?: number,\n        showTextTemplate?: (points: any) => string,\n        stroke?: string,\n        strokeWidth?: number,\n        tooltipTemplate?: (points: any[]) => string,\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX Calendar with Custom Mode in JavaScript\nDESCRIPTION: This snippet demonstrates how to initialize a DHTMLX Calendar component with a custom mode. It sets the mode to 'month', which is one of the available options alongside 'calendar', 'year', and 'timepicker'.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar2/api/calendar_mode_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar calendar = new dhx.Calendar(\"calendar_container\", {\n    mode: \"month\"\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Keydown Events in DHTMLX Toggle Control\nDESCRIPTION: Demonstrates how to attach a keydown event listener to a Toggle control in a DHTMLX Form. The event fires whenever any keyboard key is pressed while the Toggle control has focus, providing access to the native KeyboardEvent object.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/toggle/toggle_keydown_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"toggle\").events.on(\"keydown\", function(event) {\n    console.log(event);\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Grid afterExpand Event Handler in JavaScript\nDESCRIPTION: Demonstrates how to initialize a DHTMLX Grid in TreeGrid mode and attach an event listener for the afterExpand event. The event fires after expanding a row containing child rows and provides the ID of the expanded row.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_afterexpand_event.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst grid = new dhx.Grid(\"grid_container\", {\n    type: \"tree\",\n    columns: [\n       // columns config\n    ],\n    data: dataset,\n});\n\ngrid.events.on(\"afterExpand\", (rowId) => {\n    // your logic here\n});\n```\n\n----------------------------------------\n\nTITLE: Treemap Chart Data Structure in JavaScript\nDESCRIPTION: Example data structure for Treemap charts showing parent-child relationships.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/chart/data_loading.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst treeMapData = [\n    { id: \"2020\", month: \"2020\" },\n    { id: \"Jan\", value: 144.33, month: \"Jan\", parent: \"2020\" },\n    { id: \"Feb\", value: 22.12, month: \"Feb\", parent: \"2020\" },\n    { id: \"Mar\", value: 53.21, month: \"Mar\", parent: \"2020\" }\n];\n```\n\n----------------------------------------\n\nTITLE: Simplified beforeSelect Event Handler in DHTMLX v7.0+\nDESCRIPTION: Demonstrates the simplified version of the beforeSelect event handler introduced in DHTMLX v7.0, allowing direct event attachment to the component.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/selection/api/selection_beforeselect_event.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncomponent.events.on(\"beforeSelect\", function(id) {\n    console.log(id);\n    return false;\n});\n```\n\n----------------------------------------\n\nTITLE: Setting List Item Height in JavaScript (DHTMLX)\nDESCRIPTION: Demonstrates how to set the height of list items using the itemHeight config option in DHTMLX List. It shows examples of setting the height as both a number and a string value.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/list/api/list_itemheight_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// sets the height of an item as a number\nconst list = new dhx.List(\"list_container\", { \n    itemHeight:30\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// sets the height of an item as a string value\nconst list = new dhx.List(\"list_container\", { \n    itemHeight:\"30px\"\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Datepicker Change Event in DHTMLX Form\nDESCRIPTION: Example showing how to attach an event listener to the change event of a Datepicker control in a DHTMLX Form. The event fires whenever the value of the Datepicker is modified and receives the new value as either a string or Date object.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/calendar/calendar_change_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"datepicker\").events.on(\"change\", function(value) {\n    console.log(\"change\", value);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Single Calendar Range Mode in DHTMLX\nDESCRIPTION: To enable date range selection in a single DHTMLX Calendar component, set the range configuration option to true and provide an array with start and end dates as the value property. The value should contain a pair of dates, either as Date objects or strings.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar2/functionality_and_features/ranges_mode.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  range: true,\n  value: [startDate, endDate]\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX Window with Header\nDESCRIPTION: Creates a new DHTMLX Window instance with a header enabled. The header is initialized without controls by default but can be customized with additional controls as needed.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/window/api/window_header_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst dhxWindow = new dhx.Window({\n    header: true\n});\n\ndhxWindow.show();\n```\n\n----------------------------------------\n\nTITLE: Using setProperties() Method with Checkbox Control in DHTMLX Form\nDESCRIPTION: This example demonstrates how to use the setProperties() method to dynamically change the label, width, and padding of a checkbox control in a DHTMLX Form.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/checkbox/checkbox_setproperties_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"checkbox\").setProperties({\n    label: \"I agree\",\n    width: \"100px\",\n    padding: 20\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Chart and Using eachSeries Method in JavaScript\nDESCRIPTION: Example showing how to create a radar chart with multiple series and iterate over them using the eachSeries method. The chart is configured with radial scales and two company series with different visual properties.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/chart/api/chart_eachseries_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst chart = new dhx.Chart(\"chart_container\", {\n    type: \"radar\",\n    scales: {\n        radial:{\n            value: \"month\",\n            maxTicks: 7\n        }\n    },\n    series: [\n        {\n            id: \"A\",\n            value: \"company A\",\n            fill: \"#000000\",\n            alpha: 0.3,\n            color: \"#000000\"\n         },\n        {\n            id: \"B\",\n            value: \"company B\",\n            fill: \"#FFFF33\",\n            alpha: 0.3,\n            color: \"#FFFF33\"\n        }\n    ]\n});\n\nchart.eachSeries(function(seria){\n    seria.config.fill\n});\n// -> [\"#394E79\", \"#5E83BA\", \"#C2D2E9\"]\n```\n\n----------------------------------------\n\nTITLE: Attaching beforeHide Event Handler to Button Control in DHTMLX Form\nDESCRIPTION: This code snippet demonstrates how to attach an event handler for the beforeHide event to a Button control in a DHTMLX Form. The event fires before the Button is hidden and receives the current text label and an initialization flag as parameters.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/button/button_beforehide_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"button\").events.on(\"beforeHide\", function(text, init) {\n    console.log(\"beforeHide\", text, init);\n    return true;\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Minimal Width for DHTMLX Sidebar in Collapsed State\nDESCRIPTION: This snippet demonstrates how to configure the minimum width of a DHTMLX Sidebar when it's in the collapsed state. The minWidth property overrides the default value of 69px, setting it to 80px instead.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/sidebar/sidebar_config.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst sidebar = new dhx.Sidebar(\"sidebar_container\", {\n    css: \"dhx_widget--border_right\",\n    minWidth: 80,\n    collapsed: true\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Close Buttons to Specific Tabs in DHTMLX Tabbar (JavaScript)\nDESCRIPTION: This example shows how to add close buttons to specific tabs in a DHTMLX Tabbar. The 'closable' option is set to an array of tab IDs, which adds close buttons only to the specified tabs ('paris' and 'london' in this case).\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tabbar/api/tabbar_closable_config.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst tabbar = new dhx.Tabbar(\"tabbar_container\", {\n    closable: [\"paris\", \"london\"]\n});\n```\n\n----------------------------------------\n\nTITLE: Showing a Single DHTMLX Ribbon Item by ID in JavaScript\nDESCRIPTION: This snippet demonstrates how to make a specific, previously hidden Ribbon item visible by calling the `show()` method with the item's string ID (\"save_btn\") as the argument. Requires an initialized DHTMLX Ribbon instance (`ribbon`).\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/ribbon/api/ribbon_show_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nribbon.show(\"save_btn\");\n```\n\n----------------------------------------\n\nTITLE: Repainting List using paint() Method in DHTMLX JavaScript UI\nDESCRIPTION: This code snippet demonstrates how to use the paint() method to repaint a DHTMLX List component on a page. The method doesn't require any parameters and returns void.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/list/api/list_paint_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlist.paint();\n```\n\n----------------------------------------\n\nTITLE: Creating an Alert Box with DHTMLX JavaScript\nDESCRIPTION: Demonstrates an example of creating an alert box with a header, text, centered button alignment, and disabled HTML content using the dhx.alert() function.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/message/api/api_message_properties.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ndhx.alert({\n    header:\"Alert Header\",\n    text:\"Alert text\",\n    buttonsAlignment:\"center\",\n    htmlEnable: false\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing SimpleVault Value in DHTMLX Form\nDESCRIPTION: Shows how to retrieve the value from a SimpleVault control using the getItem() method.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/simplevault.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst value = form.getItem(\"simpleVault\").getValue();\n```\n\n----------------------------------------\n\nTITLE: Showing Slider Control in DHTMLX Form - JavaScript\nDESCRIPTION: Demonstrates how to show a previously hidden Slider control in a DHTMLX Form using the show() method. The method is called on a Slider form control retrieved via getItem().\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/slider/slider_show_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"slider\").show();\n```\n\n----------------------------------------\n\nTITLE: Including Font Awesome Icons in DHTMLX Menu\nDESCRIPTION: This snippet shows how to include Font Awesome icons in a DHTMLX Menu by adding the Font Awesome CDN link after the DHTMLX Menu source files.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/menu/customization.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"text/javascript\" src=\"../../codebase/menu.js\"></script>\n<link rel=\"stylesheet\" href=\"../../codebase/menu.css\">\n\n<link rel=\"stylesheet\" href=\"https://use.fontawesome.com/releases/v5.5.0/css/all.css\" \n    integrity=\"sha384-B4dIYHKNBt8Bc12p+WXckhzcICo0wtJAoU8YZTY5qE0Id1GSseTk6S+L3BlXeVIU\" \n    crossorigin=\"anonymous\">\n```\n\n----------------------------------------\n\nTITLE: Configuring Min and Max Values for Number Input in DHTMLX Form (JSX)\nDESCRIPTION: Shows how to set minimum and maximum allowed values for a number input field in a DHTMLX form using the min and max attributes.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/work_with_form.md#2025-04-22_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\n{\n    type: \"input\",\n    inputType: \"number\",\n    label: \"Age\",\n    value: 18,\n    placeholder: \"Enter your age\",\n    min: 12,\n    max: 18\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Toggle Visibility in DHTMLX Form (JavaScript)\nDESCRIPTION: This snippet demonstrates how to use the isVisible() method to check if a Toggle control is visible on the page. It returns a boolean value indicating the visibility status.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/toggle/toggle_isvisible_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"toggle\").isVisible(); // -> true/false\n```\n\n----------------------------------------\n\nTITLE: Checking Visibility of Toggle Group Element in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the isVisible() method to check if a specific element within a ToggleGroup control is visible. It returns a boolean value indicating the visibility status.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/togglegroup/togglegroup_isvisible_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nform.getItem(\"ToggleGroup\").isVisible(\"toggle_1\"); // -> true/false\n```\n\n----------------------------------------\n\nTITLE: Styling Selected Items in DataView\nDESCRIPTION: Demonstrates how to customize the appearance of selected items in DataView using CSS classes.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/dataview/api/dataview_css_config.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<style>\n    .dhx_dataview-item--selected {\n        border-color: transparent;\n        box-shadow: 0px 1px 5px 0px rgb(2, 136, 209, 0.5), \n            inset 0px 0px 0px 1px rgb(2, 136, 209, 1);\n    }\n</style>\n\n<script>\n    const dataview = new dhx.DataView(\"dataview_container\", {itemsInRow: 3});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Form Controls\nDESCRIPTION: The code shows basic form control configuration including title, alignment, and various controls like buttons, inputs, and checkboxes\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/features.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- No direct code snippets provided in the content. The documentation references external examples via URLs -->\n```\n\n----------------------------------------\n\nTITLE: Firing Events in DHTMLX Colorpicker\nDESCRIPTION: Demonstrates how to programmatically fire events using the events.fire() method, which accepts an event name and an array of arguments.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/colorpicker/handling_events.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncolorpicker.events.fire(\"name\",args);\n// where args is an array of arguments\n```\n\n----------------------------------------\n\nTITLE: Initializing Grid with adjust Config in JavaScript\nDESCRIPTION: This snippet demonstrates how to initialize a DHTMLX Grid with the adjust property set to true. This will automatically adjust the width of columns to fit their content.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_adjust_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst grid = new dhx.Grid(\"grid_container\", {\n    columns: [\n        // columns config\n    ],\n    adjust: true,\n    data: dataset\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Item Position in TreeCollection using getIndex Method\nDESCRIPTION: This snippet demonstrates how to use the getIndex method to retrieve the current position of an item in a TreeCollection. It takes the ID of an item as a parameter and returns its numerical index.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree_collection/api/treecollection_getindex_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntoolbar.data.getIndex(\"add_btn\");\n```\n\n----------------------------------------\n\nTITLE: Adding Custom HTML to DHTMLX Menu\nDESCRIPTION: This code snippet shows how to add custom HTML content to a DHTMLX Menu using the add() method of Tree Collection. It adds an image as a menu item with custom CSS.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/menu/configuring_menu_items.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmenu.data.add({\n    id: \"input\",\n    parent: \"edit\",\n    type: \"customHTML\",\n    html: \"<img src='../logo.svg' alt=''/>\",\n    css: \"custom-image\"\n});\n```\n\n----------------------------------------\n\nTITLE: Handling focus Event in DHTMLX Timepicker Control\nDESCRIPTION: This code shows how to attach an event handler to the focus event of a Timepicker control in a DHTMLX Form. The event fires when the Timepicker receives focus and provides the current value of the control to the handler function.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/timepicker/timepicker_focus_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"timepicker\").events.on(\"focus\", (value) => {\n    console.log(\"focus\", value);\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing beforeShow Event Handler for DHTMLX Form Checkbox\nDESCRIPTION: Example showing how to attach a beforeShow event listener to a checkbox form control. The event fires before the control is shown and can prevent showing by returning false. The handler receives the current checkbox value as a parameter.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/checkbox/checkbox_beforeshow_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"checkbox\").events.on(\"beforeShow\", function(value) {\n    console.log(\"beforeShow\", value);\n    return true;\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Tooltip in DHTMLX JavaScript\nDESCRIPTION: Demonstrates the usage and configuration options for creating a tooltip using the dhx.tooltip() function. Includes parameters for text, target node, margin, position, CSS, force display, show/hide delays, and HTML content enablement.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/message/api/api_message_properties.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ndhx.tooltip( text: string, {\n    node: HTMLElement | string,\n    margin?: number, // 8 by default\n    position?: \"right\" | \"bottom\" |\"center\" | \"left\" | \"top\", // \"bottom\" by default\n    css?: string,\n    force?: boolean, // false by default\n    showDelay?: number,\n    hideDelay?: number,\n    htmlEnable?: boolean, // false by default\n});\n```\n\n----------------------------------------\n\nTITLE: Handling blur Event in DHTMLX Slider (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to attach an event handler to the 'blur' event of a DHTMLX Slider component. The handler executes when a thumb of the Slider loses focus and logs a message to the console.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/slider/api/slider_blur_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nslider.events.on(\"blur\", function() {\n    console.log(\"the focus is off the element\");\n});\n```\n\n----------------------------------------\n\nTITLE: Checking Copy Possibility in TreeCollection with canCopy() - JavaScript\nDESCRIPTION: This snippet demonstrates how to use the canCopy() method of TreeCollection to check if a control can be copied into another control. It takes the source control's ID and the target control's ID as parameters and returns a boolean value.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree_collection/api/treecollection_cancopy_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ncomponent.data.canCopy(from.id, id);\n```\n\n----------------------------------------\n\nTITLE: Setting Theme via HTML Container Attribute\nDESCRIPTION: Shows how to set a DHTMLX theme by adding the data-dhx-theme attribute to a component container element\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/themes/themes.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- component container -->\n<div data-dhx-theme=\"dark\" style=\"height: 100%\" id=\"chart\"></div>\n```\n\n----------------------------------------\n\nTITLE: Handling afterEditStart Event in JavaScript Tree\nDESCRIPTION: This code demonstrates how to attach an event handler to the afterEditStart event in DHTMLX Tree. This event fires after editing of a tree item has started, providing the value and ID of the edited item.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree/api/tree_aftereditstart_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntree.events.on(\"afterEditStart\", function(value, id) {\n    // your logic here\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Initially Selected Date as Date Object\nDESCRIPTION: Creates a Calendar with February 10, 2019 selected on initialization using a Date object.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar/configuring.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// selects a date\nconst calendar = new dhx.Calendar(\"calendar_container\", {\n    value: new Date(2019,01,10)\n});\n```\n\n----------------------------------------\n\nTITLE: Detaching a component from Layout cell in JavaScript\nDESCRIPTION: Shows how to detach a component from a Layout cell using the detach method.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/layout/work_with_layout.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nlayout.getCell(\"list\").detach();\n```\n\n----------------------------------------\n\nTITLE: Loading Data After Toolbar Initialization from Local Source\nDESCRIPTION: Demonstrates how to load data into a DHTMLX Toolbar after initialization using the parse() method of TreeCollection.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/toolbar/load_data.md#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\ntoolbar.data.parse(dataset);\n```\n\n----------------------------------------\n\nTITLE: Applying DHTMLX Built-in CSS Classes to Pagination in JavaScript\nDESCRIPTION: Illustrates how to apply predefined DHTMLX CSS helper classes, such as `dhx_widget--bg_white` and `dhx_widget--bordered`, to style a DHTMLX Pagination component. The `css` configuration property is used during initialization to specify the desired classes. Requires the DHTMLX Suite library and an HTML container element with the ID \"pagination_container\".\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/pagination/api/pagination_css_config.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst pagination = new dhx.Pagination(\"pagination_container\", {\n    css: \"dhx_widget--bg_white dhx_widget--bordered\"\n});\n```\n\n----------------------------------------\n\nTITLE: Clearing SimpleVault Form Control Value\nDESCRIPTION: Demonstrates how to clear the value of a SimpleVault control in a DHTMLX form using the clear() method. This method removes all uploaded files from the control.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/simplevault/simplevault_clear_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"simplevault\").clear();\n```\n\n----------------------------------------\n\nTITLE: Configuring Column-Specific Closable Property in DHTMLX Grid\nDESCRIPTION: Shows how to make a particular group panel element closable or permanently enabled using the closable property of a column. This provides fine-grained control over which grouped columns can be collapsed.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/usage.md#2025-04-22_snippet_38\n\nLANGUAGE: jsx\nCODE:\n```\nconst grid = new dhx.Grid(\"grid_container\", {\n    columns: [\n        {\n            width: 150,\n            id: \"country\",\n            header: [{ text: \"Country\" }],\n            // grouping of the \"country\" column is permanently enabled\n            // and can't be switched off via the group panel\n            closable: false, \n        },\n        {\n            width: 150,\n            id: \"population\",\n            header: [{ text: \"Population\" }],\n            groupable: true,\n        },\n        { width: 150, id: \"density\", header: [{ text: \"Density (P/Km²)\" }] },\n        { width: 150, id: \"area\", header: [{ text: \"Land Area (Km²)\" }] },\n    ],\n    group: {\n        order: [\"country\", \"population\"]\n    },\n    groupable: true,\n    data: dataset\n});\n```\n\n----------------------------------------\n\nTITLE: Disabling All Toolbar Items - DHTMLX JavaScript\nDESCRIPTION: This snippet showcases disabling all controls on the Toolbar at once by calling disable() with no parameters. This method is available starting from version 7.0 of DHTMLX Suite and is ideal for quickly locking out all interactivity during processing. No arguments are needed. All toolbar items become disabled and visibly dimmed in the UI; there are no returned values.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/toolbar/api/toolbar_disable_method.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// disables all Toolbar items\ntoolbar.disable();\n```\n\n----------------------------------------\n\nTITLE: Adding Custom CSS Classes for Calendar Styling\nDESCRIPTION: Example of how to create custom CSS classes for calendar styling in the style section of an HTML page.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar2/customization.mdx#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n<style>\n    .my_first_class {\n        /*some styles*/\n    }\n    \n    .my_second_class {\n        /*some styles*/\n    }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX List in JavaScript (HTML & Script Setup) - HTML\nDESCRIPTION: This snippet demonstrates a complete HTML document setup for initializing a DHTMLX List. It includes required JS and CSS files, creates a container div, and initializes the dhx.List in a script block. Dependencies include suite.js and suite.css from the DHTMLX Suite. The main configurable parameter shown is itemHeight. The expected output is a rendered List component within the specified container.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/list/initialization.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\\n<html>\\n    <head>\\n        <title>How to Start with DHTMLX List</title>         \\n        <script type=\\\"text/javascript\\\" src=\\\"../../codebase/suite.js\\\"></script>\\n        <link rel=\\\"stylesheet\\\" href=\\\"../../codebase/suite.css\\\">\\n    </head>\\n    <body>\\n        <div id=\\\"list_container\\\"></div>\\n        <script>\\n            // creating DHTMLX List\\n            const list = new dhx.List(\\\"list_container\\\", {\\n                itemHeight: 30\\n            });\\n        </script>\\n    </body>\\n</html>\n```\n\n----------------------------------------\n\nTITLE: Hiding a Spacer Control in DHTMLX Form with JavaScript\nDESCRIPTION: This example demonstrates how to hide a Spacer control in a DHTMLX Form by using the hide() method on a specific Spacer item retrieved with getItem().\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/spacer/spacer_hide_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"spacer\").hide();\n```\n\n----------------------------------------\n\nTITLE: Method Signature for Ajax DELETE\nDESCRIPTION: TypeScript signature showing the delete method's parameter types and return value. Defines the structure for URL, data payload, and configuration options.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/ajax/api/ajax_delete_method.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ndelete<T>(url: string, data?: { [key: string]: any; } | string, config?: object): Promise<T>;\n```\n\n----------------------------------------\n\nTITLE: Configuring Dark High Contrast Theme CSS Variables in DHTMLX\nDESCRIPTION: CSS configuration block that defines the dark high contrast theme for DHTMLX Suite. Sets variables for font sizes, colors, borders, background colors, and component-specific styling for Toolbar, Grid, Calendar, and Slider components.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/themes/contrast_dark_theme.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n[data-dhx-theme='contrast-dark'] {\n    /* font */\n    --dhx-font-size-normal: 16px;\n    --dhx-font-size-small: var(--dhx-font-size-normal);\n\n    --dhx-font-color-primary: var(--dhx-color-white);\n    --dhx-font-color-secondary: rgba(255, 255, 255, 0.86);\n    --dhx-font-color-additional: var(--dhx-font-color-secondary);\n    --dhx-font-color-disabled: rgba(255, 255, 255, .5);\n    --dhx-font-color-contrast: var(--dhx-color-black);\n    --dhx-font-color-contrast-disabled: var(--dhx-font-color-disabled);\n    /* end font */\n\n    /* border */\n    --dhx-border-color: rgba(255, 255, 255, 0.5);\n    --dhx-border-color-focused: rgba(255, 255, 255, 0.7);\n    /* end border */\n\n    /* color scheme */\n    --dhx-l-contrast-offset: -12%; /* lightness contrast theme offset */\n\n    --dhx-l-secondary: 60%;\n\n    --dhx-h-background: 226;\n    --dhx-s-background: 12%;\n    --dhx-l-background: 20%;\n    /* end color scheme */\n\n    /* theme colors */\n    --dhx-background-primary: hsl(var(--dhx-h-background), var(--dhx-s-background), var(--dhx-l-background));\n    --dhx-background-secondary: hsl(var(--dhx-h-background), var(--dhx-s-background), calc(var(--dhx-l-background) + 8%));\n    --dhx-background-additional: hsl(var(--dhx-h-background), var(--dhx-s-background), calc(var(--dhx-l-background) + 12%));\n    /* end theme colors */\n\n    /* DHTMLX Toolbar service variables*/\n    --dhx-s-toolbar-background: var(--dhx-color-black);\n    --dhx-s-toolbar-button-background-hover: rgba(255, 255, 255, .07);\n    --dhx-s-toolbar-button-background-active: rgba(255, 255, 255, .15);\n    /* end DHTMLX Toolbar service variables */\n\n    /* DHTMLX Grid service variables*/\n    --dhx-s-grid-header-background: #212329;\n    --dhx-s-grid-selection-background: var(--dhx-color-gray-100);\n    /* end DHTMLX Grid service variables*/\n\n    /* DHTMLX Calendar service variables*/\n    --dhx-s-calendar-muffled: .8;\n    /* end DHTMLX Calendar service variables*/\n\n    /* DHTMLX Slider service variables*/\n    --dhx-s-tick-font-size: var(--dhx-font-size-small);\n    /* end DHTMLX Slider service variables*/\n}\n```\n\n----------------------------------------\n\nTITLE: Handling beforeValidate Event for Avatar Control in DHTMLX Form\nDESCRIPTION: This snippet demonstrates how to attach an event handler to the beforeValidate event of an Avatar control in a DHTMLX Form. The handler logs the value and determines if validation should pass based on the presence of an image source.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/avatar/avatar_beforevalidate_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"avatar\").events.on(\"beforeValidate\", value => {\n    console.log(\"beforeValidate\", value);\n    return value.src; // if there is a path to the image, validation will be passed\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Icon to NavItem\nDESCRIPTION: Shows how to add an icon to a NavItem using the icon property with a DHX icon class.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/ribbon/navitem.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    type:\"navItem\", value:\"Some\",\n    icon:\"dxi dxi-check\"\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX Sidebar with Custom Minimum Width\nDESCRIPTION: Demonstrates how to create a new Sidebar instance with a custom minimum width of 80 pixels when collapsed. The example includes CSS styling for the right border and sets the initial state to collapsed.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/sidebar/api/sidebar_minwidth_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst sidebar = new dhx.Sidebar(\"sidebar_container\", {\n    css: \"dhx_widget--border_right\",\n    minWidth: 80,\n    collapsed: true\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Application Entry Point in HTML for DHTMLX Optimus - HTML\nDESCRIPTION: This HTML defines the entry point for a DHTMLX Optimus app by specifying a container with a unique id (\"app\") in the body. The container is where the JavaScript application will be rendered. No dependencies are referenced directly in this file, but it serves as the base markup for app mounting.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/optimus_guides/index.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n    <head>\\n        <title>dhtmlxOptimus guide</title>\\n    </head>\\n    <body>\\n        <!-- Create a container with the unique id -->\\n        <section id=\\\"app\\\" class=\\\"main__container\\\"></section>\\n    </body>\\n</html>\n```\n\n----------------------------------------\n\nTITLE: Handling Keydown Events in DHTMLX Toggle Group\nDESCRIPTION: Demonstrates how to attach a keydown event listener to a Toggle Group control in a DHTMLX form. The event fires when any key is pressed while a toggle is in focus, providing both the keyboard event object and toggle ID.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/togglegroup/togglegroup_keydown_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"ToggleGroup\").events.on(\"keydown\", function(event, id) {\n    console.log(event, id);\n});\n```\n\n----------------------------------------\n\nTITLE: Using isDisabled Method in DHTMLX Form's Select Control (JavaScript)\nDESCRIPTION: This example demonstrates how to check if a specific option in a Select control is disabled by using the isDisabled() method with a value parameter. The method returns a boolean value indicating the disabled state.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/select/select_isdisabled_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"select\").isDisabled(1); // -> true/false\n```\n\n----------------------------------------\n\nTITLE: Handling Tree afterCollapse Event in JavaScript\nDESCRIPTION: Example of attaching an event handler to the afterCollapse event of a DHTMLX Tree component. This event fires after a tree item has been collapsed and provides the ID of the collapsed item.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree/api/tree_aftercollapse_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntree.events.on(\"afterCollapse\", function(id) {\n    // your logic here\n});\n```\n\n----------------------------------------\n\nTITLE: Nesting DHTMLX Ribbon Blocks for Complex Layouts in JavaScript\nDESCRIPTION: Provides a configuration example demonstrating how to nest Ribbon Blocks to create more complex UI structures. A parent block with `direction:\"col\"` contains two child blocks, each with `direction:\"row\"`, arranging controls in multiple rows within the main 'File' block.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/ribbon/block.md#2025-04-22_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n{\n    title:\"File\",\n    type:\"block\",\n    direction:\"col\", \n    items:[\n        {\n            type:\"block\", direction:\"row\",\n            items:[\n                { type:\"button\", icon:\"dxi dxi-plus\", value:\"New\" },\n                { type:\"button\", icon:\"dxi dxi-file\", value:\"File\" }\n            ]\n        },\n        {\n            type:\"block\", direction:\"row\",\n            items:[\n                {\n                    type:\"imageButton\", count:10,\n                    src:\"../img/avatar4.png\"\n                },\n                {\n                    type:\"imageButton\", value:\"Torch\",\n                    src:\"../img/avatar3.png\"\n                }\n            ]\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Slider Control Using Widget Method\nDESCRIPTION: Example demonstrating how to access the Slider widget and use its disable() method to disable the slider control from a form.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/slider/slider_getwidget_method.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst slider = form.getItem(\"slider\").getWidget();  // -> DHTMLX Slider\nslider.disable(); // disables slider\n```\n\n----------------------------------------\n\nTITLE: Configuring disabledDates in DHTMLX Calendar\nDESCRIPTION: This example demonstrates how to use the disabledDates config to disable specific days of the week in a DHTMLX Calendar. The function checks the day of the week and returns true for days that should be disabled.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar/api/calendar_disableddates_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst calendar = new dhx.Calendar(\"calendar_container\", {\n    disabledDates: function(date) {\n        const disabled = {\n            0: true,\n            1: true,\n            2: false,\n            3: false,\n            4: false,\n            5: false,\n            6: true\n        }\n        return disabled[date.getDay()];\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Detaching Calendar Event Listeners in JavaScript\nDESCRIPTION: Demonstrates how to attach an event listener to a Calendar and then detach it using the events.detach() method. This prevents the handler from being called when the event occurs.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar2/handling_events.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ncalendar.events.on(\"Change\",function(date, oldDate, click){\n    console.log(\"Change selection from \"+oldDate+\" to \"+date);\n    console.log(click);\n});\ncalendar.events.detach(\"Change\");\n```\n\n----------------------------------------\n\nTITLE: Initializing Grid with Basic Export Styles Configuration\nDESCRIPTION: Example showing how to initialize a DHTMLX Grid with exportStyles disabled, which is the default behavior that prevents CSS styles from being sent to the export service.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_exportstyles_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst grid = new dhx.Grid(\"grid_container\", {\n    columns: [\n        // columns config\n    ],\n    exportStyles: false,\n    data: dataset\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Button Click Event in DHTMLX Form (JavaScript)\nDESCRIPTION: This snippet demonstrates how to attach an event listener to the 'click' event of a Button control in a DHTMLX Form. It logs the event object to the console when the button is clicked.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/button/button_click_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"button\").events.on(\"click\", function(events) {\n    console.log(\"click\", events);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Hidden Layout Cell\nDESCRIPTION: Shows how to create a hidden Layout cell using the hidden attribute.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/layout/cell_configuration.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst layout = new dhx.Layout(\"layout_container\", {\n    cols: [\n        { header: \"Cell header\", hidden:true}\n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Datepicker beforeShow Event in JavaScript\nDESCRIPTION: Example of attaching an event handler to the beforeShow event of a Datepicker control in a DHTMLX Form. The event fires before the datepicker is shown and can prevent showing by returning false.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/calendar/calendar_beforeshow_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"datepicker\").events.on(\"beforeShow\", function(value) {\n    console.log(\"beforeShow\", value);\n    return true;\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Form with Combo Box and Retrieving Properties\nDESCRIPTION: This snippet demonstrates how to create a Form with a Combo Box control and then retrieve its properties using the getProperties() method. The Combo Box is configured with multiple selection and a select all button.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/combo/combo_getproperties_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst form = new dhx.Form(\"form_container\", {\n    rows: [\n        {\n            type: \"combo\",\n            name: \"combo\",\n            label: \"count\",\n            labelPosition: \"left\",\n            multiselection: true,\n            selectAllButton: true,\n            value: [\n                \"id_1\",\n                \"id_2\"\n            ],\n            data: [\n                { value: \"1\", id: \"id_1\" },\n                { value: \"2\", id: \"id_2\" },\n                { value: \"3\", id: \"id_3\" },\n                { value: \"4\", id: \"id_4\" },\n                { value: \"5\", id: \"id_5\" }\n            ]\n        }\n    ]\n});\n\nform.getItem(\"combo\").getProperties();\n```\n\n----------------------------------------\n\nTITLE: Available Properties for Input Control in DHTMLX Form\nDESCRIPTION: This code block lists all the configuration attributes that can be modified using the setProperties() method for the Input control in DHTMLX Form. It includes properties like autocomplete, css, errorMessage, height, and many others.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/input/input_setproperties_method.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    autocomplete: boolean,\n    css: string,\n    errorMessage: string,\n    height: string|number|\"content\",\n    helpMessage: string,\n    hiddenLabel: boolean,\n    icon: string,\n    inputType: string,\n    label: string,\n    labelPosition: string,\n    labelWidth: string|number,\n    max: string|number,\n    maxlength: string|number,\n    min: string|number,\n    minlength: string|number,\n    padding: string|number,\n    placeholder: string,\n    preMessage: string,\n    readOnly: boolean,\n    required: boolean,\n    successMessage: string,\n    validation: object|function,\n    width: string|number|\"content\"\n}\n```\n\n----------------------------------------\n\nTITLE: Handling uploadFail Event for Avatar Control in DHTMLX Form\nDESCRIPTION: This snippet demonstrates how to attach an event listener to the uploadFail event of an Avatar control in a DHTMLX Form. The event fires when file upload fails and provides the current value of the control.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/avatar/avatar_uploadfail_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"avatar\").events.on(\"uploadFail\", (value) => {\n    console.log(\"uploadFail\", value);\n});\n```\n\n----------------------------------------\n\nTITLE: Fieldset Properties Configuration\nDESCRIPTION: Configuration object for Fieldset control defining properties like CSS, dimensions, padding, label and alignment options.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/form_getproperties_method.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    css: string,\n    width: string | number | \"content\",\n    height: string | number | \"content\",\n    padding: string | number,\n\n    label: string,\n    labelAlignment: \"left\" | \"right\" | \"center\",\n    align: \"start\" | \"center\" | \"end\" | \"between\" | \"around\" | \"evenly\"\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Selection in JavaScript List\nDESCRIPTION: Deactivates the selection of items in a List component using the disable() method of the selection object.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/list/usage_selection.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlist.selection.disable();\n```\n\n----------------------------------------\n\nTITLE: Removing a cell from Layout in JavaScript\nDESCRIPTION: Demonstrates how to remove a specific cell from a layout using the removeCell method.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/layout/work_with_layout.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlayout.removeCell(id);\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX Chart with Basic Configuration\nDESCRIPTION: Creates a new DHTMLX Chart instance with a basic configuration specifying the chart type.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/chart/configuration_properties.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst chart = new dhx.Chart(\"chart_container\", {\n    type:\"bar\"\n});\n```\n\n----------------------------------------\n\nTITLE: Clearing Validation for Avatar Control in DHTMLX Form (JavaScript)\nDESCRIPTION: This snippet demonstrates how to use the clearValidate() method to clear the validation of an Avatar control in a DHTMLX Form. The method is called on the Avatar item retrieved from the form.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/avatar/avatar_clearvalidate_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nform.getItem(\"avatar\").clearValidate();\n```\n\n----------------------------------------\n\nTITLE: Applying a Predefined DHTMLX CSS Class to Ribbon in JavaScript\nDESCRIPTION: This snippet demonstrates initializing a DHTMLX Ribbon component and applying a predefined DHTMLX helper CSS class (`dhx_widget--bg_white`) using the `css` configuration option. This allows leveraging built-in styles provided by the DHTMLX library. Requires the DHTMLX Suite library.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/ribbon/api/ribbon_css_config.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst ribbon = new dhx.Ribbon(\"ribbon_container\", {\n    css: \"dhx_widget--bg_white\"\n});\n```\n\n----------------------------------------\n\nTITLE: Colorpicker Configuration Properties Schema\nDESCRIPTION: Schema showing all available configuration properties that can be modified for the Colorpicker control.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/colorpicker/colorpicker_setproperties_method.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    css: string,\n    customColors: array,\n    editable: boolean,\n    errorMessage: string,\n    grayShades: boolean,\n    height: string|number|\"content\",\n    helpMessage: string,\n    hiddenLabel: boolean,\n    icon: string,\n    label: string,\n    labelPosition: string,\n    labelWidth: string|number,\n    mode: string,\n    padding: string|number,\n    palette: array,\n    placeholder: string,\n    preMessage: string,\n    required: boolean,\n    successMessage: string,\n    validation: function,\n    width: string|number|\"content\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Header to Layout Cell\nDESCRIPTION: Illustrates how to add a header with text to a Layout cell.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/layout/cell_configuration.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst layout = new dhx.Layout(\"layout_container\", {\n    cols: [\n        { header: \"Perfect cell header\"}\n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Grid Column ID\nDESCRIPTION: Demonstrates how to initialize a Grid with column configuration including the id property. The example shows creating a column with a 'title' id and corresponding header text.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/gridcolumn_properties/gridcolumn_id_property.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst grid = new dhx.Grid(\"grid_container\", {\n    columns: [\n        { id: \"title\", header: [{ text: \"Title\" }] },\n        // more columns configuration objects\n    ],\n    // more options\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Grid Spans Configuration\nDESCRIPTION: Example showing how to initialize a Grid with basic spans configuration including rowspan, colspan, custom text and CSS classes.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_spans_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst grid = new dhx.Grid(\"grid_container\", {\n    columns: [ \n        // columns config\n    ],\n    spans: [\n        {row:\"0\", column:\"a\", rowspan:5 },\n        {row:\"0\", column:\"b\", rowspan:9, text:\"<h2>Some content here</h2>\"},\n        {row:\"0\", column:\"c\", colspan:2, text:\"Some content\"},\n        {row:\"10\", column:\"a\", colspan:4, text:\"Some header\", css:\"myCustomColspan\"}\n    ],\n    data: dataset\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring RadioGroup and RadioButton in DHTMLX Form\nDESCRIPTION: A comprehensive code example showing all possible configuration options for RadioGroup and RadioButton controls in a DHTMLX Form. It includes properties for layout, styling, validation, and behavior.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/radiogroup/api_radiogroup_properties.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    type: \"radiogroup\",\n    name?: string,\n    id?: string,\n    options: {\n        rows?: [\n            {\n                type: \"radiobutton\",\n                id?: string,\n                value: string,\n                checked?: boolean, // false by default \n                css?: string,\n                height?: string | number | \"content\", // \"content\" by default\n                disabled?: boolean,  // false by default\n                hidden?: boolean,  // false by default\n                padding?: string | number, \n                text?: string,\n                width?: string | number | \"content\", // \"content\" by default\n            },\n            // more radio buttons\n        ],\n        cols?: [\n            {\n                type: \"radiobutton\",\n                id?: string,\n                value: string,\n                checked?: boolean,\n                css?: string,\n                height?: string | number | \"content\",\n                disabled?: boolean,\n                hidden?: boolean,\n                padding?: string | number,\n                text?: string,\n                width?: string | number | \"content\",\n            },\n            // more radio buttons\n        ],\n        css?: string,\n        height?: string | number | \"content\",\n        padding?: string | number,\n        width?: string | number | \"content\",\n    },\n    value?: string,\n\n    css?: string,\n    disabled?: boolean, // false by default\n    height?: string | number | \"content\", // \"content\" by default\n    hidden?: boolean, // false by default\n    padding?: string | number,\n    required?: boolean, // false by default\n    width?: string | number | \"content\", // \"content\" by default\n\n    hiddenLabel?: boolean, // false by default\n    label?: string,\n    labelPosition?: \"left\" | \"top\", // \"top\" by default\n    labelWidth?: string | number,\n    \n    helpMessage?: string,\n    preMessage?: string,\n    successMessage?: string,\n    errorMessage?: string,\n}\n```\n\n----------------------------------------\n\nTITLE: Handling DataView afterDrop Event in JavaScript\nDESCRIPTION: Example showing how to attach an event handler to the afterDrop event of a DataView component. The event fires after the user finishes dragging an item and releases the mouse button. It provides data about the drag operation including source and target items.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/dataview/api/dataview_afterdrop_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndataview.events.on(\"afterDrop\", function(data, events) {\n    // your logic here\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Form Titles in DHTMLX JavaScript Form\nDESCRIPTION: This example demonstrates how to set titles for a Form and its nested elements. The code shows setting a title for the main form and for a nested row containing checkbox controls. The title property allows creating more organized and descriptive form interfaces.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/form_title_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst form = new dhx.Form(\"form_container\", {\n    css: \"dhx_widget--bordered\",\n    padding: \"20px\",  \n    title: \"Form\", // sets the title for rows\n    rows: [\n        {\n            padding: \"10px\",\n            title: \"Checkbox controls of Form\", // sets the title for cols\n            css: \"dhx_widget--bordered\",\n            cols: [{\n                type: \"checkbox\",\n                width: \"80px\", \n                label: \"I agree\",\n                name: \"agree\",\n                checked: true\n            },\n            {\n                type: \"checkbox\",\n                label: \"I disagree\",\n                name: \"align\",\n            }]\n        }  \n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: Changing Calendar Mode to Daily View\nDESCRIPTION: Shows how to display the calendar in the default 'calendar' mode which allows selecting days of a month, using the showDate method.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar/operating_calendar.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncalendar.showDate(new Date(2020,11,12),\"calendar\");\n```\n\n----------------------------------------\n\nTITLE: Iterating Through Fieldset Items with forEach Method in DHTMLX Form\nDESCRIPTION: This example demonstrates how to use the forEach() method to iterate through all items in a fieldset. The method accepts a callback function that processes each item and a boolean parameter to indicate whether nested items should be included.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/fieldset/fieldset_foreach_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"fieldset\").forEach((item, index, arr) => {\n    console.log(index, item, arr);\n}, true);\n```\n\n----------------------------------------\n\nTITLE: Scale Label Template Implementation\nDESCRIPTION: Shows how to add custom templates for scale labels using the textTemplate configuration option.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/chart/customization.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst chart = new dhx.Chart(\"chart_container\", {\n    type:\"line\",\n    css: \"dhx_widget--bg_white dhx_widget--bordered\",\n    scales: {\n        \"bottom\" : {\n            text: \"month\",\n            textTemplate: function(month) {\n                return \"m:\" + month;\n            }\n        },\n        \"left\" : {\n            maxTicks: 10, max: 100, min: 0\n        }\n    },\n    series: [\n        {\n            id: \"A\", value: \"company C\", color: \"#5E83BA\", strokeWidth: 2\n        }\n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: Iterating Through Immediate Children with map() in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the map() method to iterate only through immediate children of a control. It adds a CSS class to each immediate child of the control with ID 'menu_1'. The third parameter is set to false to limit the iteration to direct children.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree_collection/api/treecollection_map_method.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ntoolbar.data.map((item)=>{\n    // add a css class to each item\n    item.css = \"highlight\";\n},\"menu_1\",false);\ntoolbar.paint();\n```\n\n----------------------------------------\n\nTITLE: Showing a Specific Radio Button in Radiogroup with JavaScript\nDESCRIPTION: This example demonstrates how to show a specific radio button within a Radiogroup by referencing its ID. The method is called on the Radiogroup item obtained from the form.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/radiogroup/radiogroup_show_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"radiogroup\").show(\"radiobutton_1\");\n```\n\n----------------------------------------\n\nTITLE: Applying Custom CSS Classes to DHTMLX Pagination in JavaScript\nDESCRIPTION: This JavaScript snippet shows how to instantiate a DHTMLX Pagination component and apply custom CSS classes defined elsewhere (e.g., in a `<style>` block or separate CSS file). The `css` property in the configuration object accepts a space-separated string of class names.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/pagination/customization.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst pagination = new dhx.Pagination(\"pagination_container\",{\n    css:\"my_first_class my_second_class\"    \n});\n```\n\n----------------------------------------\n\nTITLE: Returned Object Structure from getProperties Method for Avatar Control\nDESCRIPTION: This code snippet shows the structure of the object returned by the getProperties() method for the Avatar control, including all available configuration attributes and their default values.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/avatar/avatar_getproperties_method.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"css\": \"\",\n    \"width\": \"content\",\n    \"height\": \"content\",\n    \"padding\": undefined,\n    \"label\": \"Avatar\",\n    \"labelWidth\": 140,\n    \"labelPosition\": \"top\",\n    \"hiddenLabel\": false,\n    \"helpMessage\": \"Help information\",\n    \"required\": true,\n    \"preMessage\": \"\",\n    \"successMessage\": \"\",\n    \"errorMessage\": \"\",\n    \"validation\": undefined,\n    \"readOnly\": false,\n    \"removeIcon\": true,\n    \"size\": \"medium\",\n    \"circle\": false,\n    \"alt\": \"\",\n    \"icon\": \"\",\n    \"placeholder\": \"\",\n    \"preview\": \"\",\n    \"accept\": \"\",\n    \"target\": \"https://docs.dhtmlx.com/suite/backend/upload\",\n    \"fieldName\": \"file\",\n    \"autosend\": false,\n    \"params\": undefined,\n    \"headerParams\": undefined,\n    \"updateFromResponse\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Preventing the Browser Context Menu on Right-Click in JavaScript\nDESCRIPTION: Prevents the default browser context menu from appearing when a right-click event occurs. Essential for displaying a custom context menu instead. This method should be called inside the event handler for context menu or cell right-click events. The input is the event object, typically with the identifier 'e'.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tutorial/binding_components/step4.md#2025-04-22_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\ne.preventDefault();\n```\n\n----------------------------------------\n\nTITLE: Initializing dhtmlxCalendar with Custom Date Format in JavaScript\nDESCRIPTION: This example demonstrates how to initialize a Calendar instance with a custom date format. The format '%d.%m.%Y' will display dates as DD.MM.YYYY.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar2/api/calendar_dateformat_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar calendar = new dhx.Calendar(\"calendar_container\", {\n   dateFormat:\"%d.%m.%Y\"\n});\n```\n\n----------------------------------------\n\nTITLE: Individual Toggle Properties Object Structure in DHTMLX Form\nDESCRIPTION: This code snippet illustrates the structure of the properties object for an individual toggle within a ToggleGroup control in DHTMLX Form. It includes configuration attributes specific to a single toggle.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/togglegroup/togglegroup_afterchangeproperties_event.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    full: boolean,\n    icon: string,\n    offIcon: string,\n    offText: string,\n    text: string,\n    value: string | number\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Page Size in DHTMLX Pagination - JavaScript\nDESCRIPTION: Demonstrates how to use the setPageSize method to configure how many items are displayed per page in a DHTMLX paginated widget. Requires an instantiated DHTMLX Pagination component accessible as the variable pagination. The method accepts a single numeric parameter specifying the page size, and calling it updates the current pagination without returning any value.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/pagination/api/pagination_setpagesize_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\npagination.setPageSize(24);\n```\n\n----------------------------------------\n\nTITLE: Applying CSS Classes to DHTMLX Ribbon Widget\nDESCRIPTION: JavaScript example showing how to apply extra CSS classes to a DHTMLX widget. This specific example applies the white background class to a Ribbon component during initialization.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/helpers/base_elements.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst ribbon = new dhx.Ribbon(\"ribbon\", {\n    css:\"dhx_widget--bg_white\"\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX Tabbar with Custom Tab Width\nDESCRIPTION: Example showing how to initialize a DHTMLX Tabbar component with a custom tab width of 120 pixels. The tabWidth property can accept either a number or string value, with a default width of 200 pixels.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tabbar/api/tabbar_tabwidth_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst tabbar = new dhx.Tabbar(\"tabbar_container\", {\n    tabWidth: 120\n});\n```\n\n----------------------------------------\n\nTITLE: Showing and Hiding MenuItem\nDESCRIPTION: Demonstrates how to programmatically show or hide a MenuItem using the show() and hide() methods.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/toolbar/menuitem.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ntoolbar.show(id);\ntoolbar.hide(id);\n```\n\n----------------------------------------\n\nTITLE: Defining afterUnGroup Event Interface in JavaScript\nDESCRIPTION: This code snippet defines the interface for the afterUnGroup event in a DataCollection. It specifies the event signature including parameters for grouped fields and configuration options.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/data_collection/api/datacollection_afterungroup_event.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\ninterface IGroupConfig {\n    showMissed?: boolean | string; // true by default\n    field?: string; // \"group\" by default\n}\n\nafterUnGroup: (grouped: string[], config: IGroupConfig) => void;\n```\n\n----------------------------------------\n\nTITLE: Enabling Virtual Rendering for Combo Box Options in JavaScript\nDESCRIPTION: Initializes a Combo Box with virtual rendering enabled, allowing for efficient handling of large data sets by loading options dynamically on scroll.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/combobox/configuration.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst combo = new dhx.Combobox(\"combo_container\", {\n    virtual:true\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing DataView with Multiselection in JavaScript\nDESCRIPTION: Demonstrates how to initialize a DHTMLX DataView component with multiselection enabled. This configuration allows users to select multiple items in the DataView using the Ctrl key.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/dataview/api/dataview_multiselection_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst dataview = new dhx.DataView(\"dataview_container\", {multiselection:true});\n```\n\n----------------------------------------\n\nTITLE: Handling cancelDrop Event in DHTMLX List\nDESCRIPTION: This example demonstrates how to attach an event handler to the cancelDrop event of a DHTMLX List component. The event fires when the mouse pointer moves out of an item's borders while dragging the item.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/list/api/list_canceldrop_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlist.events.on(\"cancelDrop\", function(data, events) {\n    // your logic here\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Focus to Button Control in DHTMLX Form\nDESCRIPTION: Demonstrates how to programmatically set focus to a Button control within a DHTMLX Form. The method returns void and was introduced in version 7.2.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/button/button_focus_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"button\").focus();\n```\n\n----------------------------------------\n\nTITLE: Defining patternMask Types in JSX\nDESCRIPTION: TypeScript/JSX type definition for the patternMask configuration option that can be either an object with pattern and charFormat properties or a string pattern.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/gridcolumn_properties/gridcolumn_patternmask_property.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\npatternMask?:\n    | {\n        pattern: ((value: string | number) => string) | string,\n        charFormat?: {\n            [char: string]: RegExp\n        }\n      }\n    | string,\n```\n\n----------------------------------------\n\nTITLE: Attaching Event Handler to afterShow Event in Simple Vault Control\nDESCRIPTION: This code snippet demonstrates how to attach an event handler to the afterShow event of a Simple Vault control in a DHTMLX form. The event fires after the control is shown and provides access to the current value of the control.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/simplevault/simplevault_aftershow_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"simplevault\").events.on(\"afterShow\", function(value) {\n    console.log(\"afterShow\", value);\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Title Control to DHTMLX Toolbar in JavaScript\nDESCRIPTION: This snippet demonstrates how to add a Title control to a DHTMLX toolbar using the add() method of Tree Collection. It sets the type to 'title' and specifies the value to be displayed.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/toolbar/title.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntoolbar.data.add({\n    type: \"title\",\n    value: \"APP NAME\"\n});\n```\n\n----------------------------------------\n\nTITLE: Saving and Restoring DHTMLX Tree State in JavaScript\nDESCRIPTION: Demonstrates how to save the current state of a DHTMLX Tree using the 'serialize' method and restore it to another tree using the 'parse' method.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree/loading_data.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst state = tree1.data.serialize();\n\n// creating a new Tree\nconst tree2 = new dhx.Tree(\"tree_container2\");\n// parsing the state of tree1 into tree2\ntree2.data.parse(state);\n```\n\n----------------------------------------\n\nTITLE: Attaching afterChangeProperties Event Handler to Toggle Control in JavaScript\nDESCRIPTION: This snippet demonstrates how to attach an event handler for the afterChangeProperties event of a Toggle control in a DHTMLX Form. The event fires after the control's configuration attributes have been changed dynamically.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/toggle/toggle_afterchangeproperties_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"toggle\").events.on(\"afterChangeProperties\", function(properties) {\n    console.log(\"afterChangeProperties\", properties);\n});\n```\n\n----------------------------------------\n\nTITLE: Handling beforeItemLoad Event in JavaScript TreeCollection\nDESCRIPTION: Example showing how to attach an event handler to the beforeItemLoad event of a TreeCollection component. The handler logs the item ID and prevents item loading.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree_collection/api/treecollection_beforeitemload_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncomponent.data.events.on(\"beforeItemLoad\", function(id){\n    console.log(\"An \", id, \" item will be loaded\");\n    return false;\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Separator to DHTMLX Menu\nDESCRIPTION: This example demonstrates how to add a Separator control to a DHTMLX Menu using the add() method of Tree Collection. Separators are used to visually divide menu items or groups.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/menu/configuring_menu_items.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmenu.data.add({\n    type:\"separator\"\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Multiple DHTMLX Ribbon Items\nDESCRIPTION: This snippet demonstrates enabling multiple disabled Ribbon items simultaneously by passing an array of their IDs to the `enable()` method. This allows for batch enabling of controls.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/ribbon/api/ribbon_enable_method.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// several at a time\nribbon.enable([\"cancel_btn\",\"del_btn\"]);\n```\n\n----------------------------------------\n\nTITLE: Handling afterShow Event in DHTMLX Form Toggle Group\nDESCRIPTION: Example demonstrating how to attach an event handler to the afterShow event of a Toggle Group control. The handler receives the current value of the control and optionally the ID of the specific toggle that triggered the event.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/togglegroup/togglegroup_aftershow_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"ToggleGroup\").events.on(\"afterShow\", function(value, id) {\n    console.log(\"afterShow\", value, id);\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Timepicker Initial Value (Date) - DHTMLX - JavaScript\nDESCRIPTION: Configures the DHTMLX Timepicker with an initial time using a JavaScript Date object by passing it as the 'value' property in the configuration. Requires DHTMLX library. The 'value' property supports multiple formats. Input: Date object; Output: Timepicker pre-populated with the specified date's time.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/timepicker/configuration.md#2025-04-22_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n// the value as a Date \nconst timepicker = new dhx.Timepicker(\"timepicker_container\", {\n    value: new Date()\n});\n```\n\n----------------------------------------\n\nTITLE: Handling afterClose Event in DHTMLX Tabbar (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to attach an event listener to the afterClose event of a DHTMLX Tabbar. The event fires after a tab is closed and provides the id of the closed tab as a parameter.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tabbar/api/tabbar_afterclose_event.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ntabbar.events.on(\"afterClose\", function(id){\n    console.log(id);\n});\n```\n\n----------------------------------------\n\nTITLE: Repainting Colorpicker using paint() Method in JavaScript\nDESCRIPTION: The paint() method is used to repaint the Colorpicker component on the page. It takes no parameters and returns void. This method is useful when you need to manually trigger a redraw of the Colorpicker.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/colorpicker/api/colorpicker_paint_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ncolorpicker.paint();\n```\n\n----------------------------------------\n\nTITLE: Subscribing to the inputCreated Event in DHTMLX Ribbon - JavaScript\nDESCRIPTION: This snippet demonstrates how to subscribe to the inputCreated event in a DHTMLX Ribbon component using JavaScript. It logs the ID of any new input field created in the Ribbon UI. The only dependency is an initialized DHTMLX Ribbon instance available as the variable 'ribbon'. The handler provides access to the new input's ID and element, but additional logic can be added for more complex management of dynamic Ribbon inputs.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/ribbon/api/ribbon_inputcreated_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nribbon.events.on(\"inputCreated\", function(id, el){\n    console.log(id);\n});\n```\n\n----------------------------------------\n\nTITLE: Calling Events Programmatically on DHTMLX Timepicker in JavaScript\nDESCRIPTION: This snippet shows how to programmatically trigger an event on a DHTMLX Timepicker instance using events.fire(). The event name is given as a string, and an optional array of arguments can be passed to event listeners. Requires the DHTMLX Timepicker's event module, and is useful for simulating user interactions or triggering custom event flows. The code expects 'args' to be an array corresponding to the parameters accepted by the listeners of the specified event.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/timepicker/handling_events.md#2025-04-22_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\ntimepicker.events.fire(\"name\",args);\n// where args is an array of arguments\n```\n\n----------------------------------------\n\nTITLE: Initializing Calendar with Custom Date in JavaScript\nDESCRIPTION: This example demonstrates how to initialize a DHTMLX Calendar component with both a selected value and a specific initial date. It creates a calendar in the 'calendar_container' element with the current date as the selected value and January 1, 2019 as the initial display date.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar2/api/calendar_date_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar calendar = new dhx.Calendar(\"calendar_container\", {\n    value: new Date(),\n    date: new Date(2019, 0, 1)\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Layout with HTML Content in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a new Layout instance with a column that contains HTML content. The 'html' config is used to set the content of the cell.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/layout/api/cell/layout_cell_html_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst layout = new dhx.Layout(\"layout_container\", {\n    cols: [\n        { header: \"Cell header\", html: \"Hello world\"}\n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: Handling afterChangeProperties Event for Button in DHTMLX Form\nDESCRIPTION: This snippet demonstrates how to attach an event listener to the afterChangeProperties event of a Button control in a DHTMLX Form. The event fires after the configuration attributes of the control have been changed dynamically.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/button/button_afterchangeproperties_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"button\").events.on(\"afterChangeProperties\", function(properties) {\n    console.log(\"afterChangeProperties\", properties);\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Form Dimensions and Layout\nDESCRIPTION: Example of configuring Form dimensions with specific height and width for rows and columns\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/configuration.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst form = new dhx.Form(\"form_container\", {\n    css: \"dhx_widget--bordered\",\n    height: \"200px\", // sets the common height for rows \n    width: \"400px\", // sets the common width for rows\n    padding: \"20px\",   \n    rows: [\n        {\n            type: \"text\",\n            name: \"text\",\n            value: \"Do you agree with our terms and conditions?\"\n        },\n        {\n            padding: \"10px\",\n            height: \"100px\", // sets the common height for cols\n            width: \"200px\", // sets the common width for cols\n            align: \"end\",\n            cols: [{\n                type: \"checkbox\",\n                width: \"80px\", \n                label: \"I agree\",\n                name: \"agree\",\n                id: \"agree\",\n                checked: true\n            },\n            {\n                type: \"checkbox\",\n                label: \"I disagree\",\n                name: \"align\",\n            }]\n        }\n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Container for DHTMLX Toolbar\nDESCRIPTION: HTML code for creating a container div element that will hold the DHTMLX Toolbar component.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/toolbar/how_to_start.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"toolbar_container\"></div>\n```\n\n----------------------------------------\n\nTITLE: Disabling Selection in DHTMLX Component\nDESCRIPTION: Method to disable the selection functionality in DHTMLX components like DataView, List, or Tree. The method takes no parameters and returns void.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/selection/api/selection_disable_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncomponent.selection.disable();\n```\n\n----------------------------------------\n\nTITLE: Destroying Toggle Group Instance in DHTMLX Form\nDESCRIPTION: Demonstrates how to properly destroy a Toggle Group instance and free up resources in a DHTMLX Form using the destructor() method. The method removes the instance and cleans up any associated resources.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/togglegroup/togglegroup_destructor_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nform.getItem(\"ToggleGroup\").destructor();\n```\n\n----------------------------------------\n\nTITLE: Disabling a Slider control in DHTMLX Form\nDESCRIPTION: This example demonstrates how to disable a Slider control in a DHTMLX Form by accessing the specific form item and calling the disable() method on it.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/slider/slider_disable_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"slider\").disable();\n```\n\n----------------------------------------\n\nTITLE: Attaching an Event Listener for openMenu in DHTMLX Ribbon (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates how to use the `on()` method of the `ribbon.events` object to listen for the `openMenu` event. The callback function receives the `id` (string or number) of the menu item that was expanded, enabling custom actions upon menu expansion. Requires an initialized DHTMLX Ribbon instance (`ribbon`).\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/ribbon/api/ribbon_openmenu_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nribbon.events.on(\"openMenu\", function(id){\n    // your code here\n});\n```\n\n----------------------------------------\n\nTITLE: Removing Focus from Textarea Control in DHTMLX Form\nDESCRIPTION: Demonstrates how to programmatically remove focus from a Textarea control in a DHTMLX Form using the blur() method. The method requires no parameters and returns void.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/textarea/textarea_blur_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"textarea\").blur();\n```\n\n----------------------------------------\n\nTITLE: Calling Events Manually with pagination.events.fire() in JavaScript\nDESCRIPTION: Illustrates how to programmatically trigger an event on a DHTMLX Pagination instance using the `pagination.events.fire()` method. This method requires the event name (as a string) and an array of arguments (`args`) to be passed to any attached event listeners.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/pagination/handling_events.md#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\npagination.events.fire(\"name\",args);\n// where args is an array of arguments\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX Layout with Cell ID\nDESCRIPTION: Demonstrates how to initialize a DHTMLX Layout component with a specific cell ID. The example shows creating a layout with one column that has a header and custom ID.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/layout/api/cell/layout_cell_id_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst layout = new dhx.Layout(\"layout_container\", {\n    cols: [\n        { header: \"Cell header\", id:\"1\"}\n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Column Adjustment in DHTMLX Grid\nDESCRIPTION: This code snippet demonstrates how to use the 'adjust' property when configuring columns in a DHTMLX Grid. It shows setting the 'adjust' property for a specific column and the overall grid. The 'adjust' property can be set to 'data', 'header', 'footer', or a boolean value.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/gridcolumn_properties/gridcolumn_adjust_property.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst grid = new dhx.Grid(\"grid_container\", { \n    columns: [\n        { id: \"country\", header: [{ text: \"Country\" }], adjust: \"header\" },\n        // more columns configuration objects\n    ],\n    adjust: false,\n    // more options\n});\n```\n\n----------------------------------------\n\nTITLE: Adding a Spacer to Sidebar in JavaScript\nDESCRIPTION: This code demonstrates how to add a Spacer component to a DHTMLX Sidebar using the add() method of Tree Collection. Spacers are used for taking up space and aligning controls within the sidebar.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/sidebar/spacer.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsidebar.data.add({\n    type:\"spacer\"\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Click Events in DHTMLX Sidebar\nDESCRIPTION: Example showing how to attach a click event handler to a DHTMLX Sidebar. The handler receives the clicked control's ID and the native event object as parameters.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/sidebar/api/sidebar_click_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsidebar.events.on(\"click\", function(id,e){\n    console.log(id);\n});\n```\n\n----------------------------------------\n\nTITLE: Applying DHTMLX Theme to Containers by ID - HTML/JavaScript\nDESCRIPTION: Shows how to initialize DHTMLX Forms in separate container divs and apply a UI theme to a specific container by passing its ID to dhx.setTheme(). Prerequisites: DHTMLX Suite (dhx), valid form configuration, and pre-existing containers with specific IDs. The script targets 'container-2' with the 'dark' theme, leaving 'container-1' unchanged. Input parameter is the theme name and the container ID; output is a themed region within the page.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/themes/api/themes_settheme_method.md#2025-04-22_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<div id=\"container-1\"></div>\n<div id=\"container-2\"></div>\n\n<script>\n    const form_1 = new dhx.Form(\"container-1\", config);\n    const form_2 = new dhx.Form(\"container-2\", config);\n\n    dhx.setTheme(\"dark\", \"container-2\");//apply the \"dark\" theme to the container with the \"container-2\" ID\n</script>\n```\n\n----------------------------------------\n\nTITLE: Initializing Calendar with Selected Date\nDESCRIPTION: Examples of creating a calendar with initially selected dates using different formats including Date objects, strings, and arrays for both single and range modes.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar2/functionality_and_features/selected_date.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// selects a date\nvar calendar = new dhx.Calendar(\"calendar_container\", {\n    value: new Date(2019,01,10)\n});\n\n// selects a date as an array of Date value\nvar calendar = new dhx.Calendar(\"calendar_container\", {\n    value: [new Date(2019,01,10)]\n});\n\n// selects a date as a string\nvar calendar = new dhx.Calendar(\"calendar_container\", {\n    value: (\"10/02/19\")\n});\n\n// selects a date as an array of string value\nvar calendar = new dhx.Calendar(\"calendar_container\", {\n    value: ([\"10/02/19\"])\n});\n\n// selects dates as an array of Date values(for the range mode)\nvar calendar = new dhx.Calendar(\"calendar_container\", {\n    value: ([new Date(2019,05,03), new Date(2019,05,19)]),\n    range: true  \n});\n\n// selects dates as an array of string values(for the range mode)\nvar calendar = new dhx.Calendar(\"calendar_container\", {\n    value: ([\"03/06/19\", \"15/06/19\"]),\n    range: true  \n});\n```\n\n----------------------------------------\n\nTITLE: Including DHTMLX Toolbar Source Files\nDESCRIPTION: HTML code showing how to include the required JavaScript and CSS files for DHTMLX Toolbar functionality.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/toolbar/how_to_start.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"text/javascript\" src=\"../../codebase/suite.js\"></script>\n<link rel=\"stylesheet\" href=\"../../codebase/suite.css\">\n```\n\n----------------------------------------\n\nTITLE: Handling Grid Row Drop Events in JavaScript\nDESCRIPTION: Example of attaching an event handler to the canRowDrop event of a DHTMLX Grid. This event fires when a dragged row is positioned over a potential target row, allowing custom validation or processing logic.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_canrowdrop_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngrid.events.on(\"canRowDrop\", (data, event) => {\n  // your logic here\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Step Size\nDESCRIPTION: Creates a slider with custom step size of 2 between values.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/slider/configuring_slider.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst slider = new dhx.Slider(\"slider_container\", { \n    step:2\n});\n```\n\n----------------------------------------\n\nTITLE: DatePicker Events Reference Table\nDESCRIPTION: Markdown table listing all available events for the DatePicker component with their descriptions and links to detailed documentation.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/api_overview.md#2025-04-22_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n| Name                                                           | Description                                                          |\n| :------------------------------------------------------------- | :------------------------------------------------------------------- |\n| [](form/api/calendar/calendar_afterchangeproperties_event.md)  | @getshort(orm/api/calendar/calendar_afterchangeproperties_event.md)  |\n```\n\n----------------------------------------\n\nTITLE: Using map() with Control ID in JavaScript\nDESCRIPTION: This example shows how to use the map() method with a specific control ID. It iterates through all children of the control with ID 'menu_1' and disables them. The toolbar is then repainted to apply the changes.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree_collection/api/treecollection_map_method.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ntoolbar.data.map((item)=>{\n    // disable items\n    item.disabled = true;\n},\"menu_1\");\ntoolbar.paint();\n```\n\n----------------------------------------\n\nTITLE: Handling afterValidate Event for Text Control in DHTMLX Form\nDESCRIPTION: This snippet demonstrates how to attach an event handler to the afterValidate event of a Text control in a DHTMLX Form. The event fires after the control value is validated, providing the validated value and the result of validation.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/text/text_aftervalidate_event.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nform.getItem(\"text\").events.on(\"afterValidate\", function(value, isValidate) {\n    console.log(\"afterValidate\", value, isValidate);\n});\n```\n\n----------------------------------------\n\nTITLE: Handling beforeChange Event in DHTMLX Combo Box\nDESCRIPTION: This snippet demonstrates how to attach an event handler to the beforeChange event of a Combo Box. The event fires before a new option is selected, allowing for custom logic to be executed and potentially preventing the selection.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/combobox/api/combobox_beforechange_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncombo.events.on(\"beforeChange\", function(id){\n    // your logic here\n    return true;\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Spacer to DHTMLX Ribbon\nDESCRIPTION: Demonstrates how to create a new Spacer control in the Ribbon using the add() method of Tree Collection. The spacer is used for layout alignment purposes.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/ribbon/spacer.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nribbon.data.add({\n    type:\"spacer\"\n});\n```\n\n----------------------------------------\n\nTITLE: Column Properties Object Structure\nDESCRIPTION: Shows the complete structure of the column properties object returned by getColumn() method.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_getcolumn_method.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    id: string | number,\n    width: number,\n    header: object[],\n    htmlEnable: boolean,\n    footer: array,\n    maxWidth: number,\n    minWidth: number,\n    mark: object | function,\n    resizable: boolean,\n    type: string,\n    dateFormat: string,\n    editorType: string,\n    options: array,\n    template: function,\n    hidden: boolean,\n    draggable: boolean,\n    editable: boolean,\n    sortable: boolean,\n    adjust: boolean | string,\n    autoWidth: boolean,\n    align: string,\n    tooltip: boolean,\n    tooltipTemplate: function,\n    $cellCss: array,\n    $uniqueData: array\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Selection Event in DHTMLX Component\nDESCRIPTION: Example of attaching an event handler to the afterSelect event using the selection.events API. The handler logs a message when an item is selected.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/selection/api/selection_afterselect_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncomponent.selection.events.on(\"afterSelect\", function(id){\n    console.log(\"An item is selected\");\n});\n```\n\n----------------------------------------\n\nTITLE: Combo Box Event Handlers Implementation\nDESCRIPTION: Example showing how to implement event handlers for a custom template in a Combo Box instance, including click and mouseover events\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/combobox/api/combobox_eventhandlers_config.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction template() {\n    return \"<div className='class_name'></div>\";\n}\n\nconst combobox  = new dhx.Combobox(\"combobox_container\", {\n    template: template,\n    eventHandlers: {\n        onclick: {\n            class_name: function(event) {\n                console.log(\"You clicked on \" + event.target.tagName);\n                // return false;\n            },\n        },\n        onmouseover: {\n            class_name: function(event, id) {\n                console.log(\"Item ID: \" + id);\n            },\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Checking Visibility of Timepicker Control in DHTMLX Form (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to use the isVisible() method to check if a Timepicker control is visible on the page. The method returns a boolean value indicating the visibility state of the control.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/timepicker/timepicker_isvisible_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"timepicker\").isVisible(); \n// -> true/false\n```\n\n----------------------------------------\n\nTITLE: Defining Custom HTML Menu Items in JavaScript\nDESCRIPTION: This code snippet demonstrates how to define menu items with custom HTML properties. It shows the structure of a data object used to create menu items with custom HTML content.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/menu/api/api_customhtml_properties.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = [\n    {\n        type: \"customHTML\",\n        id?: string | number,\n        parent?: string,\n        html?: string,\n        css?: string | string[],\n        hidden?: boolean, // false by default\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Handling dateMouseOver Event with Tooltip in DHTMLX Calendar\nDESCRIPTION: Example of attaching an event handler to the dateMouseOver event of a Calendar to display a tooltip when the mouse pointer hovers over a date. The handler uses the dhx.tooltip function to show information about the date under the pointer.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar/api/calendar_datemouseover_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncalendar.events.on(\"dateMouseOver\", function(date, e) {\n    dhx.tooltip(date, {node: e.target, position: \"bottom\"});\n});\n```\n\n----------------------------------------\n\nTITLE: Checking Active Tab Disabled State in DHTMLX Tabbar (JavaScript)\nDESCRIPTION: This snippet demonstrates calling the `isDisabled()` method on a DHTMLX Tabbar instance (`tabbar`) without any arguments. This specific usage checks if the currently active tab within the tabbar is disabled. The method returns `true` if the active tab is disabled, and `false` otherwise.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tabbar/api/tabbar_isdisabled_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// checks whether a currently active tab is disabled\ntabbar.isDisabled();  // -> returns true/false \n```\n\n----------------------------------------\n\nTITLE: Retrieving Tab ID by Index in JavaScript Tabbar\nDESCRIPTION: This snippet demonstrates how to use the getId() method of the Tabbar component to get the id of a tab at a specific index. The method takes a numeric index as an argument and returns the corresponding tab's id as a string.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tabbar/api/tabbar_getid_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst id = tabbar.getId(0);\n```\n\n----------------------------------------\n\nTITLE: Initializing Disabled DHTMLX Combo Box in JavaScript\nDESCRIPTION: Creates a disabled Combo Box instance using the DHTMLX library. The disabled property is set to true to initialize the component in a disabled state.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/combobox/api/combobox_disabled_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst combo = new dhx.Combobox(\"combo_container\", { \n    disabled:true\n});\n```\n\n----------------------------------------\n\nTITLE: SimpleVault Properties Object Structure\nDESCRIPTION: Example of the object structure returned by the getProperties() method showing all available configuration attributes.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/simplevault/simplevault_getproperties_method.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"width\": \"content\",\n    \"height\": \"content\",\n    \"css\": \"\",\n    \"required\": true,\n    \"label\": \"Simple Vault\",\n    \"labelWidth\": 140,\n    \"labelPosition\": \"top\",\n    \"hiddenLabel\": false,\n    \"helpMessage\": \"Help information\",\n    \"preMessage\": \"\",\n    \"successMessage\": \"\",\n    \"errorMessage\": \"\",\n    \"target\": \"https://docs.dhtmlx.com/suite/backend/upload\",\n    \"fieldName\": \"file\",\n    \"singleRequest\": false,\n    \"updateFromResponse\": true,\n    \"autosend\": false,\n    \"accept\": \"\",\n    \"params\": undefined,\n    \"headerParams\": undefined,\n    \"padding\": undefined,\n    \"validation\": undefined\n}\n```\n\n----------------------------------------\n\nTITLE: Styling a Button with Icon and Text in HTML\nDESCRIPTION: This example shows how to create a styled button using DHTMLX CSS classes. It includes an icon and text, and demonstrates the use of modifier classes for color and appearance.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/helpers/base_elements.md#2025-04-22_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<button type=\"button\" class=\"dhx_button dhx_button--color_danger dhx_button--view_link\">\n    <span class=\"dhx_button__icon dxi dxi-plus\"></span>\n    <span class=\"dhx_button__text\">Send</span>\n</button>\n```\n\n----------------------------------------\n\nTITLE: Custom CSS Styling for DHTMLX Menu\nDESCRIPTION: This example shows how to apply custom CSS styles to a DHTMLX Menu. It defines custom CSS classes and applies them to the menu using the 'css' configuration property.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/menu/customization.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<style>\n    .custom,.custom--popup-menu {\n        --dhx-background-primary: #3A434A;\n        --dhx-background-secondary: #5a6872;\n        --dhx-background-additional: #5a6872;\n        --dhx-s-toolbar-background: var(--dhx-background-primary);\n\n        --dhx-color-primary: #118d8d;\n        --dhx-color-primary-hover: #49e9e9;\n        --dhx-color-primary-active: #49e9e9;\n\n        --dhx-font-color-primary: #fff;\n        --dhx-font-color-secondary: #fff;\n        --dhx-font-color-additional: #fff;\n    }\n</style>\n\n<script>\n    const menu = new dhx.Menu(\"menu_container\", {\n        css: \"custom\",\n    });\n\n    menu.data.parse(dataset);\n</script>\n```\n\n----------------------------------------\n\nTITLE: Form Properties Table Structure\nDESCRIPTION: Table structure listing Form properties with links to configuration documentation\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/api_overview.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Name                                 | Description                                 |\n| ------------------------------------ | ------------------------------------------- |\n| [](form/api/form_align_config.md)    | @getshort(form/api/form_align_config.md)    |\n```\n\n----------------------------------------\n\nTITLE: Handling Calendar Cancel Click Event in JavaScript\nDESCRIPTION: Example showing how to attach an event handler to the cancelClick event of a DHTMLX Calendar. This event fires when a user clicks the Cancel control in the calendar.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar/api/calendar_cancelclick_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncalendar.events.on(\"cancelClick\", function() {\n    // your logic here\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing dhtmlxContextMenu in JavaScript\nDESCRIPTION: Creates a new instance of dhtmlxContextMenu with optional CSS styling. The container is set to null as the menu is created inside a popup.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/menu/creating_context_menu.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst cmenu = new dhx.ContextMenu(null, {css: \"dhx_widget--bg_gray\"});\n```\n\n----------------------------------------\n\nTITLE: Handling beforeHide Event in DHTMLX Form Datepicker (JavaScript)\nDESCRIPTION: This snippet demonstrates how to attach an event handler to the beforeHide event of a Datepicker control in a DHTMLX Form. The handler logs the current value and initialization state, and returns true to allow hiding.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/calendar/calendar_beforehide_event.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nform.getItem(\"datepicker\").events.on(\"beforeHide\", function(value, init) {\n    console.log(\"beforeHide\", value, init);\n    return true;\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Date Format\nDESCRIPTION: Configures the Calendar with a custom date format using format specifiers, showing date in DD.MM.YYYY format.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar/configuring.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst calendar = new dhx.Calendar(\"calendar_container\", {\n   dateFormat:\"%d.%m.%Y\"\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Styled Select Dropdown in DHTMLX Suite\nDESCRIPTION: HTML markup for styling a select dropdown element with a dropdown icon and caption. This structure uses dhx_select class for the base styling and combines it with input containers for consistent appearance.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/helpers/base_elements.md#2025-04-22_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<!-- Create a form-group and put an input and its label in one line-->\n<div class=\"dhx_form-group dhx_form-group--inline\">\n    <!-- Create the label for the select and style it-->\n    <label for=\"select_id\" class=\"dhx_label\" style=\"min-width: 100px; max-width: 100px;\">select</label>\n    <!-- Create the wrapper for the input container inside form-group -->            \n    <div class=\"dhx_input__wrapper\">\n        <!-- Create the container for the input with icon-->\n        <div class=\"dhx_input__container\">\n            <!-- Put the \"dxi-menu-down\" icon into the container-->\n            <span class=\"dhx_input__icon dxi dxi-menu-down\"></span>\n            <select id=\"select_id\" >\n                <option></option>\n                <option value=\"1\">1</option>\n                <option value=\"2\">2</option>\n                <option value=\"3\">3</option>\n                <option value=\"4\">4</option>\n                <option value=\"5\">5</option>\n            </select>\n        </div>\n        <!--Create \"Choose the number 5\" caption -->\n        <span class=\"dhx_input__caption\">Choose the number 5</span>\n    </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Handling afterHide Event in DHTMLX Form Toggle Group\nDESCRIPTION: Example of attaching an event handler to the afterHide event of a Toggle Group control. The handler receives the current value object containing toggle states, optional toggle ID, and initialization flag.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/togglegroup/togglegroup_afterhide_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"ToggleGroup\").events.on(\"afterHide\", function(value, id, init) {\n    console.log(\"afterHide\", value, id, init);\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing RadioGroup Form Control with getProperties Example\nDESCRIPTION: Example showing how to initialize a Form with RadioGroup control and retrieve its properties using getProperties() method. The method can return properties of either the entire RadioGroup or a specific radio button.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/radiogroup/radiogroup_getproperties_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst form = new dhx.Form(\"form_container\", { \n    rows: [\n        {\n            id: \"radiogroup\",\n            type: \"radioGroup\",\n            required: true,\n            label: \"Radio Group\",\n            labelWidth: 140,\n            labelPosition: \"left\",\n            helpMessage: \" Help information\",\n            value: \"1\",\n            options: {\n                rows: [\n                    {\n                        id: \"1,\"\n                        type: \"radioButton\",\n                        text: \"Select 1\",\n                        value: \"1\",\n                    },\n                    {\n                        id: \"2\",\n                        type: \"radioButton\",\n                        text: \"Select 2\",\n                        value: \"2\"\n                    },\n                ]\n            }\n        }\n     ]\n});\n\n// return object of the RadioGroup control \nform.getItem(\"radiogroup\").getProperties();\n\n// return object of radio button of the control\nform.getItem(\"radiogroup\").getProperties(\"1\");\n```\n\n----------------------------------------\n\nTITLE: Hiding and Showing Toolbar Controls\nDESCRIPTION: Methods for hiding and showing toolbar controls, either by specifying individual control IDs or affecting all controls at once.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/toolbar/common_methods.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ntoolbar.hide(id); // hides a control\ntoolbar.show(id); // shows a control\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// hides all Toolbar controls\ntoolbar.hide();\n// shows all Toolbar controls\ntoolbar.show();\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX Slider with Inverse Mode in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a new DHTMLX Slider instance with the inverse mode enabled. The inverse property is set to true, which reverses the slider's direction.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/slider/api/slider_inverse_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst slider = new dhx.Slider(\"slider_container\", { \n    inverse:true\n});\n```\n\n----------------------------------------\n\nTITLE: Firing Custom Events in DHTMLX Popup with JavaScript\nDESCRIPTION: Shows how to programmatically trigger an event using the events.fire method on a DHTMLX Popup component. The event name and an array of arguments are supplied to fire. This snippet is useful for manually invoking event handlers, provided the DHTMLX Suite is loaded and Popup is initialized. The args parameter is an array of arguments passed to event listeners. Outputs depend on listeners registered for the event.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/popup/event_handling.md#2025-04-22_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\npopup.events.fire(\"name\",args);\n// where args is an array of arguments\n```\n\n----------------------------------------\n\nTITLE: Firing Events in DataView\nDESCRIPTION: Demonstrates how to manually fire events in a DataView component using the events.fire() method with a name and arguments array.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/dataview/events.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ndataview.events.fire(\"name\",args);\n// where args is an array of arguments\n```\n\n----------------------------------------\n\nTITLE: Clearing Validation of Checkbox Control in DHTMLX Form (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to use the clearValidate() method to clear the validation of a Checkbox control in a DHTMLX Form. It clears any validation state or error messages associated with the Checkbox.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/checkbox/checkbox_clearvalidate_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nform.getItem(\"checkbox\").clearValidate();\n```\n\n----------------------------------------\n\nTITLE: Getting Attached Widget from DHTMLX Popup in JavaScript\nDESCRIPTION: This snippet demonstrates calling the `getWidget()` method on an instance of a DHTMLX Popup (`popup`). The method is used to retrieve the DHTMLX widget object that is currently attached to and displayed within the popup. According to the documentation context, this method takes no arguments and returns the attached widget (`any` type).\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/popup/api/popup_getwidget_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\npopup.getWidget();\n```\n\n----------------------------------------\n\nTITLE: Example of Returned Object from getProperties() for Fieldset in JavaScript\nDESCRIPTION: This code snippet shows an example of the object returned by the getProperties() method when called on a Fieldset control. It includes various configuration attributes such as alignment, CSS, height, label, and width.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/fieldset/fieldset_getproperties_method.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"align\": undefined \n    \"css\": \"\",\n    \"height\": \"content\",\n    \"label\": \"Personal info\",\n    \"labelAlignment\": \"left\",\n    \"padding\": undefined,\n    \"width\": \"content\"\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Radiogroup afterHide Event in DHTMLX Form\nDESCRIPTION: Example showing how to attach an event handler to the afterHide event of a Radiogroup control. The event fires after the control or its radio button is hidden and provides the current value, optional radio button ID, and initialization status.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/radiogroup/radiogroup_afterhide_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"radiogroup\").events.on(\"afterHide\", function(value, id, init) {\n    console.log(\"afterHide\", value, id, init);\n});\n```\n\n----------------------------------------\n\nTITLE: Complete Calendar Styling Example\nDESCRIPTION: A complete example showing both CSS definition and Calendar initialization with custom styling for changing the primary color.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar/customization.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<style>\n    .custom {\n        --dhx-color-primary: #118d8d;\n    }\n</style>\n\n<script>\n    const calendar = new dhx.Calendar(\"calendar_container\", { \n        css: \"custom dhx_widget--bordered\"\n    });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Validating Textarea with Event Triggering in JavaScript\nDESCRIPTION: Examples of using the validate() method without parameters or with silent set to false. This triggers BeforeValidate and AfterValidate events and visually modifies the control based on validation results.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/textarea/textarea_validate_method.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// the method validates the specified value\nform.getItem(\"textarea\").validate(false, \"I am Input\"); // -> true/false\n\n// the method validates the current value\nform.getItem(\"textarea\").validate(); // -> true/false\n```\n\n----------------------------------------\n\nTITLE: Defining Grid Column Template Function Signature\nDESCRIPTION: Demonstrates the TypeScript/JavaScript function signature for a Grid column template that returns custom cell content.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/gridcolumn_properties/gridcolumn_template_property.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\ntemplate?: (cellValue, row: IRow, column: ICol) => string;\n```\n\n----------------------------------------\n\nTITLE: Implementing Groupable Grid Column Configuration\nDESCRIPTION: Demonstrates how to configure a Grid column with grouping enabled. The example shows creation of a Grid instance with a groupable country column.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/gridcolumn_properties/gridcolumn_groupable_property.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst grid = new dhx.Grid(\"grid_container\", {\n    columns: [\n        { id: \"country\", header: [{ text: \"Country\" }], groupable: true },\n        // more columns configuration objects\n    ],\n    group: true,\n    // more options\n});\n```\n\n----------------------------------------\n\nTITLE: Destroying Form Button Instance in JavaScript\nDESCRIPTION: Demonstrates how to use the destructor method to remove a button instance from a form and release associated resources. The method removes the button completely and frees up memory.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/button/button_destructor_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"button\").destructor();\n```\n\n----------------------------------------\n\nTITLE: Using Ajax post() Method to Send Data to Server in JavaScript\nDESCRIPTION: This example demonstrates how to use the dhx.ajax.post() method to send data to a server. The code sends a POST request with name and title parameters, then handles the response with Promise methods then() for success and catch() for errors.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/ajax/api/ajax_post_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndhx.ajax.post(url, {name: \"foo\", title: \"bar\"}).then(function (data) {\n    console.log(data);\n}).catch(function (err) {\n    console.log(err);\n});\n```\n\n----------------------------------------\n\nTITLE: Providing Select Box Options for Country Field - JavaScript\nDESCRIPTION: This snippet prepares a list of objects representing selectable country options for a form's select box. It is required as a dependency before initializing the form configuration where it is referenced. Each object includes a 'value' and its display 'content'. The input is static; the output is used by the form to render the select field's dropdown.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tutorial/binding_components/step3.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nvar countries = [\n    {value: \"\", content: \"\"},\n    {value: \"Albania\", content: \"Albania\"},\n    {value: \"Haiti\", content: \"Haiti\"},\n    {value: \"Japan\", content: \"Japan\"},\n    {value: \"Poland\", content: \"Poland\"},\n    //more options\n];\n```\n\n----------------------------------------\n\nTITLE: Setting Focus to Timepicker Control in DHTMLX Form (JavaScript)\nDESCRIPTION: This example demonstrates how to use the focus() method to set focus to a Timepicker control in a DHTMLX Form. The method targets a specific Timepicker control by its ID and doesn't require any parameters.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/timepicker/timepicker_focus_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"timepicker\").focus();\n```\n\n----------------------------------------\n\nTITLE: Configuring maxWidth for Layout Cell in JavaScript\nDESCRIPTION: This snippet demonstrates how to set the maxWidth property for a cell in a DHTMLX Layout. The maxWidth is set to '700px' for a single column cell with a header.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/layout/api/cell/layout_cell_maxwidth_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst layout = new dhx.Layout(\"layout_container\", {\n    cols: [\n        { header: \"Cell header\", maxWidth: \"700px\"}\n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: Checking Checkbox Visibility in DHTMLX Form\nDESCRIPTION: Example demonstrating how to check if a Checkbox control is visible in a DHTMLX Form using the isVisible() method. Returns a boolean indicating visibility state.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/checkbox/checkbox_isvisible_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"checkbox\").isVisible(); // -> true/false\n```\n\n----------------------------------------\n\nTITLE: Applying Built-in CSS Classes to DHTMLX Tabbar in JavaScript\nDESCRIPTION: This snippet shows how to apply a pre-defined CSS class from the DHTMLX library to style the Tabbar. It uses the 'dhx_widget--bg_white' class to set a white background for the Tabbar.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tabbar/api/tabbar_css_config.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst tabbar = new dhx.Tabbar(\"tabbar_container\", {\n    css: \"dhx_widget--bg_white\"\n});\n```\n\n----------------------------------------\n\nTITLE: Resetting Non-Permanent Filters in TreeCollection with JavaScript\nDESCRIPTION: This snippet demonstrates calling the `resetFilter()` method on a DHTMLX component's data (TreeCollection) without any arguments. This action resets all active filters except for those explicitly marked as 'permanent' in their configuration.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree_collection/api/treecollection_resetfilter_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// resets all the filters, except for those that have the \\\"permanent\\\" property in the config\ncomponent.data.resetFilter();\n```\n\n----------------------------------------\n\nTITLE: Initializing a DHTMLX Alert Box (JavaScript)\nDESCRIPTION: Demonstrates creating a modal alert box using the `dhx.alert` constructor. It accepts a configuration object to customize the alert's `header`, `text`, and the alignment of buttons using `buttonsAlignment`. Alert boxes typically require user interaction (clicking the default 'Ok' button) to be dismissed.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/message/creating_message.md#2025-04-22_snippet_4\n\nLANGUAGE: js\nCODE:\n```\ndhx.alert({\n    header:\"Alert Header\",\n    text:\"Alert text\",\n    buttonsAlignment:\"center\"\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Editor Configuration Usage\nDESCRIPTION: Shows the basic TypeScript type definition for the editorConfig property.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/gridcolumn_properties/gridcolumn_editorconfig_property.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\neditorConfig?: object;\n```\n\n----------------------------------------\n\nTITLE: Customizing Grid Tooltip Behavior in JavaScript\nDESCRIPTION: This example shows how to customize the tooltip behavior of a DHTMLX Grid by setting various properties of the 'tooltip' config object, such as forcing the tooltip to open and ignoring delay settings.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_tooltip_config.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst grid = new dhx.Grid(\"grid_container\", {\n    columns: [\n        // columns config\n    ],\n    data: dataset,\n    tooltip: {\n       force: true\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Custom German Locale for JavaScript Colorpicker\nDESCRIPTION: This code defines a custom German locale for the DHTMLX Colorpicker. It provides German translations for the same UI elements and actions as the default locale.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/colorpicker/localizing_colorpicker.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst de = {\n    cancel: \"Abbrechen\",\n    select: \"Wählen\",\n    rightClickToDelete: \"Rechtsklick zu entfernen\",\n    customColors: \"Seine Farben\",\n    addNewColor: \"Neue Farbe hinzufügen\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Drag-and-Drop Mode for DataView\nDESCRIPTION: Shows how to set up drag-and-drop functionality for DataView items using the dragMode configuration option.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/dataview/configuration.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst dataview = new dhx.DataView(\"dataview_container\", { \n    dragMode:\"source\"\n});\n```\n\n----------------------------------------\n\nTITLE: Checking If a Tab is Disabled in DHTMLX Tabbar - JavaScript\nDESCRIPTION: Demonstrates checking the disabled state of a tab using isDisabled() with and without a tab id. Passing a specific id like 'London' checks that tab; calling with no argument checks the currently active tab. Returns a boolean result.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tabbar/work_with_tabbar.md#2025-04-22_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\ntabbar.isDisabled(\\\"London\\\"); // -> returns true/false\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\ntabbar.isDisabled(); // -> returns true/false\n```\n\n----------------------------------------\n\nTITLE: Getting Selected Date from Calendar\nDESCRIPTION: Examples of retrieving selected dates using getValue() method, showing both string and Date object return formats for single and range selections.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar2/functionality_and_features/selected_date.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar date1 = calendar.getValue(); // -> \"20/08/19\"\n\nvar date2 = calendar.getValue(true); // -> Tue Aug 20 2019 00:00:00 GMT+0300\n\n// for a range calendar as an array of Date values \nvar date = calendar.getValue(true); \n// -> [Mon Jun 03 2019 00:00:00 GMT+0300, Wed Jun 19 2019 00:00:00 GMT+0300]\n\n// for a range calendar as an array of string values \nvar date = calendar.getValue(); // ->  [\"03/06/19\", \"19/06/19\"]\n```\n\n----------------------------------------\n\nTITLE: Creating an HTML Container for DHTMLX TimePicker\nDESCRIPTION: Demonstrates creating a simple `<div>` element in HTML with a unique ID (`timepicker_container`). This container acts as the target DOM element where the DHTMLX TimePicker component will be rendered.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/timepicker/initialization.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"timepicker_container\"></div>\n```\n\n----------------------------------------\n\nTITLE: Showing Fieldset Control in DHTMLX Form\nDESCRIPTION: Demonstrates how to use the show() method to make a Fieldset control visible. The method shows both the fieldset and its nested controls, triggering show events for nested controls but not for the fieldset itself.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/fieldset/fieldset_show_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"fieldset\").show();\n```\n\n----------------------------------------\n\nTITLE: Implementing Avatar Control Event Handler in JavaScript\nDESCRIPTION: Demonstrates how to implement the beforeChange event handler for Avatar control to validate file size before upload. The handler prevents changes if the file size exceeds 2MB or if no file is selected.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/avatar/avatar_beforechange_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"avatar\").events.on(\"beforeChange\", value => {\n    return value.file && value.file.size <= 2097152;\n    // prevent changes if the size of the uploaded file is\n    // more than 2Mb or the file is empty\n});\n```\n\n----------------------------------------\n\nTITLE: Hiding a Specific Checkbox in Checkbox Group using JavaScript\nDESCRIPTION: This snippet demonstrates how to use the hide() method to hide a specific checkbox within a Checkbox Group control. It requires a Form instance with a Checkbox Group item.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/checkbox_group/checkboxgroup_hide_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"CheckboxGroup\").hide(\"checkbox_1\");\n```\n\n----------------------------------------\n\nTITLE: Initializing Colorpicker with Custom Width in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a new Colorpicker instance with a custom width. The width is set to '300px' using the configuration object.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/colorpicker/api/colorpicker_width_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst colorpicker = new dhx.Colorpicker(\"colorpicker_container\", {    \n    width: \"300px\"                \n});\n```\n\n----------------------------------------\n\nTITLE: Handling the afterHide Event in DHTMLX Form Spacer Control\nDESCRIPTION: This example demonstrates how to attach an event handler for the afterHide event of a Spacer control in DHTMLX Form. The handler logs information about the event, including whether it was triggered during initialization.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/spacer/spacer_afterhide_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"spacer\").events.on(\"afterHide\", function(init) {\n    console.log(\"afterHide\",init);\n});\n```\n\n----------------------------------------\n\nTITLE: Iterating Through Items with map() in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the map() method to iterate through items in a toolbar, removing all icons. The method takes a callback function that modifies each item, and then the toolbar is repainted to reflect the changes.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree_collection/api/treecollection_map_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntoolbar.data.map((item)=>{\n    //remove all icons\n    item.icon = \"\";\n});\ntoolbar.paint();\n```\n\n----------------------------------------\n\nTITLE: Configuring RadioGroup Control in DHTMLX Suite\nDESCRIPTION: This snippet demonstrates the configuration options for the RadioGroup control in DHTMLX Suite. It includes attributes like css, errorMessage, height, helpMessage, and more. Each attribute is specified with its corresponding data type.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/form_setproperties_method.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    css: string,\n    errorMessage: string,\n    height: string | number | \"content\",\n    helpMessage: string,\n    hiddenLabel: boolean,\n    label: string,\n    labelPosition: string,\n    labelWidth: string | number,\n    options: object,\n    padding: string | number,\n    preMessage: string,\n    required: boolean,\n    successMessage: string,\n    width: string | number | \"content\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using Sum Functor in DHTMLX\nDESCRIPTION: Demonstrates how to use the built-in sum functor to calculate the sum of values in an array of objects.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/helpers/data_calculation_functions.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst rows = [{ value: 10 }, { value: 20 }, { value: 30 }];\nconst sum = dhx.methods.sum(rows, \"value\"); // 60\n```\n\n----------------------------------------\n\nTITLE: Checking Slider Visibility in DHTMLX Form (JavaScript)\nDESCRIPTION: Demonstrates how to use the isVisible() method to check whether a Slider control is visible on the page. The method returns a boolean value indicating the visibility status.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/slider/slider_isvisible_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"slider\").isVisible(); \n// -> true/false\n```\n\n----------------------------------------\n\nTITLE: Books Dataset Definition\nDESCRIPTION: JavaScript data structure containing book information with unique IDs and various metadata fields.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/guides/datacollection_guide.md#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<!-- dataset -->\n<script>\n    const data = [\n        {\n            \"title\": \"Harry Potter and the Half-Blood Prince (Harry Potter  #6)\",\n            \"id\": \"book001\",\n            \"authors\": \"J.K. Rowling/Mary GrandPré\",\n            \"average_rating\": 4.57,\n            \"publication_date\": \"9/16/2006\",\n            \"in_store\": true,\n            \"isbn13\": 9780439785969,\n            \"language_code\": \"eng\",\n            \"num_pages\": 652,\n            \"ratings_count\": 2095690,\n            \"text_reviews_count\": 27591,\n            \"publisher\": \"Scholastic Inc.\"\n        },\n        // ... additional books data ...\n    ]\n</script>\n```\n\n----------------------------------------\n\nTITLE: Loading Menu Options from JSON File in JavaScript\nDESCRIPTION: Shows how to load menu options from an external JSON file using the load method.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/menu/creating_context_menu.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncmenu.data.load(\"[path_to_file]/file.json\");\n```\n\n----------------------------------------\n\nTITLE: Checking Textarea Visibility in DHTMLX Form (JavaScript)\nDESCRIPTION: This example demonstrates how to use the isVisible() method to check whether a Textarea control is visible on the page. The method returns true if the control is visible, and false otherwise.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/textarea/textarea_isvisible_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"textarea\").isVisible(); \n// -> true/false\n```\n\n----------------------------------------\n\nTITLE: Clearing Datepicker Value in DHTMLX Form (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to use the clear() method to reset the value of a Datepicker control in a DHTMLX Form. It retrieves the Datepicker item from the form and calls the clear() method on it.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/calendar/calendar_clear_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nform.getItem(\"datepicker\").clear();\n```\n\n----------------------------------------\n\nTITLE: Configuring Series for Calendar Heatmap Chart in JavaScript\nDESCRIPTION: This code snippet shows the configuration options for series in a Calendar Heatmap chart, which is available only in the PRO version of DHTMLX Chart or Suite. It includes properties for date and value mapping, color settings, date formatting, and various display customizations.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/chart/api/chart_series_config.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nseries: [\n    {\n        date: string,\n        value: string,\n\n        color?: string, // by default, matches the value of the --dhx-background-secondary variable from the current color theme\n        negativeColor?: string, // by default, matches the value of the --dhx-color-primary variable from the current color theme\n        positiveColor?: string, // by default, matches the value of the --dhx-color-success variable from the current color theme\n\n        dateFormat?: string, // \"%d/%m/%y\" by default\n        days?: string[], // [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"] by default\n        endDate?: string | Date, // the 31st of December of the maximal year specified in the dataset\n        maxValue?: number,\n        minValue?: number,\n        months?: string[], // [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"] by default\n        startDate?: string | Date, // by default, the 1st of January of the minimal year specified in the dataset\n        tooltip?: boolean, // true by default\n        tooltipTemplate?: ([string, number]) => string,\n        weekStart?: string, // \"sunday\" by default\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Setting NavItem Tooltip\nDESCRIPTION: Demonstrates how to add a tooltip to a NavItem using the tooltip property.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/ribbon/navitem.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    type:\"navItem\", \n    value:\"Click\", \n    tooltip:\"Click me and find out why\"\n}\n```\n\n----------------------------------------\n\nTITLE: Resetting Focus in DHTMLX DataView (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to use the resetFocus() method of the DataView component in DHTMLX. The method resets focus and moves the scroll to the beginning of the dataview.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/dataview/api/dataview_resetfocus_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ndataview.resetFocus();\n```\n\n----------------------------------------\n\nTITLE: Unselecting All Items in JavaScript DataView\nDESCRIPTION: Unselects all previously selected items in the DataView when calling the remove() method without parameters.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/dataview/usage_selection.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ndataview.selection.remove();\n```\n\n----------------------------------------\n\nTITLE: Enabling and Disabling a DHTMLX Ribbon Datepicker in JavaScript\nDESCRIPTION: Provides code examples for enabling or disabling user interaction with a Datepicker control in a DHTMLX Ribbon. This is achieved by calling the `ribbon.enable()` and `ribbon.disable()` methods, respectively, passing the unique ID of the target Datepicker control.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/ribbon/datepicker.md#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nribbon.enable(id);\nribbon.disable(id);\n```\n\n----------------------------------------\n\nTITLE: Clearing Calendar Value in JavaScript\nDESCRIPTION: This code snippet demonstrates how to use the clear() method to remove the currently set value in a DHTMLX Calendar instance. The method takes no parameters and returns void.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar/api/calendar_clear_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ncalendar.clear()\n```\n\n----------------------------------------\n\nTITLE: Applying Custom and Predefined CSS Classes to DHTMLX Ribbon using HTML/CSS/JS\nDESCRIPTION: This example defines custom CSS variables within a `.custom` class and then applies this class along with a built-in DHTMLX class (`dhx_widget--bordered`) to a Ribbon component. The classes are passed as a space-separated string to the `css` property during the Ribbon's initialization. Requires the DHTMLX Suite library.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/ribbon/api/ribbon_css_config.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<style>\n    .custom {\n        --dhx-background-secondary: var(--dhx-color-white);\n        --dhx-color-primary-light-hover: #aefafa;\n        --dhx-color-primary-light-active: #118d8d;\n    }\n</style>\n```\n\nLANGUAGE: javascript\nCODE:\n```\n<script>\n    const ribbon = new dhx.Ribbon(\"ribbon_container\", {\n        css: \"custom dhx_widget--bordered\"\n    });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Including Grid Suite Source Files\nDESCRIPTION: HTML code showing how to include the required CSS and JavaScript files when using Grid as part of DHTMLX Suite\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/initialization.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<link type=\"text/css\" href=\"../codebase/suite.css\">\n<script src=\"../codebase/suite.js\" type=\"text/javascript\"></script>\n```\n\n----------------------------------------\n\nTITLE: Available Configuration Attributes for Checkbox Control\nDESCRIPTION: This code snippet shows the complete set of configuration attributes that can be modified for a Checkbox control using the setProperties() method.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/checkbox/checkbox_setproperties_method.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    css: string,\n    errorMessage: string,\n    height: string|number|\"content\",\n    helpMessage: string,\n    hiddenLabel: boolean,\n    label: string,\n    labelPosition: string,\n    labelWidth: string|number,\n    padding: string|number,\n    preMessage: string,\n    required: boolean,\n    successMessage: string,\n    text: string,\n    width: string|number|\"content\",\n}\n```\n\n----------------------------------------\n\nTITLE: Handling blur Event for ToggleGroup in DHTMLX Form (JavaScript)\nDESCRIPTION: This snippet demonstrates how to attach an event listener for the 'blur' event on a ToggleGroup control in a DHTMLX Form. The event fires when the ToggleGroup loses focus and provides the current value and id of the toggled item.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/togglegroup/togglegroup_blur_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"toggleGroup\").events.on(\"blur\", (value, id) => {\n    console.log(\"blur\", value, id);\n});\n```\n\n----------------------------------------\n\nTITLE: Complete Calendar Styling Example\nDESCRIPTION: A complete example of custom styling a calendar with a grey background using a custom CSS class and the dhx_calendar--bordered system class.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar2/customization.mdx#2025-04-22_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n<style>\n    .bg-grey {\n        background: #efefef;\n    }\n</style>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar calendar = new dhx.Calendar(\"calendar\", { \n    css: \"bg-grey dhx_calendar--bordered\" \n});\n```\n\n----------------------------------------\n\nTITLE: Handling Change Event in DHTMLX Simple Vault\nDESCRIPTION: Demonstrates how to attach a change event listener to a Simple Vault form control. The event fires whenever the value of the control changes and provides access to the updated value array.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/simplevault/simplevault_change_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"simplevault\").events.on(\"change\", function(value) {\n    console.log(\"change\", value);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Item Margins in DataView\nDESCRIPTION: Shows how to add margins around DataView items using the gap configuration property.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/dataview/configuration.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst dataview = new dhx.DataView(\"dataview_container\", {itemsInRow: 4, gap: 20});\n```\n\n----------------------------------------\n\nTITLE: Enabling Text Control in DHTMLX Form\nDESCRIPTION: Method to enable a previously disabled Text control in a DHTMLX Form. Uses the getItem() method to access the Text control and then calls enable() on it.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/text/text_enable_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"text\").enable();\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX Layout with Collapsed Cell in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a new Layout instance with a collapsed cell. The 'collapsed' property is set to true for the first column, which will make it appear collapsed when the layout is initialized.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/layout/api/cell/layout_cell_collapsed_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst layout = new dhx.Layout(\"layout_container\", {\n    cols: [\n        { header: \"Cell header\", collapsed:true}\n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: Loading Local Data After Initialization\nDESCRIPTION: Example of loading data from a local data source into a DHTMLX Combo Box using the parse() method.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/combobox/adding_options.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst combo = new dhx.Combo(\"combo_container\");\ncombo.data.parse(dataset);\n```\n\n----------------------------------------\n\nTITLE: Initializing Form with Button and Getting Properties\nDESCRIPTION: Example showing how to create a Form with a Button control and retrieve its properties using the getProperties() method. The form creates a medium-sized flat button with primary color that acts as a submit button.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/button/button_getproperties_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst form = new dhx.Form(\"form_container\", {\n    rows: [\n        {\n            type: \"button\",\n            name: \"button\",\n            text: \"Send\",\n            size: \"medium\",\n            view: \"flat\",\n            submit: true,\n            color: \"primary\"\n        }\n    ]\n});\n\nform.getItem(\"button\").getProperties();\n```\n\n----------------------------------------\n\nTITLE: Creating a TwoState DHTMLX Ribbon Button (JavaScript)\nDESCRIPTION: Demonstrates the configuration for creating a TwoState Button in DHTMLX Ribbon. Setting `twoState:true` enables the toggle behavior, and `active:true` sets its initial state to pressed (active).\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/ribbon/button.md#2025-04-22_snippet_9\n\nLANGUAGE: js\nCODE:\n```\n{\n    type:\"button\", value:\"Select\", twoState:true, active:true\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Colorpicker Mode in JavaScript\nDESCRIPTION: This code snippet demonstrates how to use the setCurrentMode() method to set the colorpicker to the 'picker' mode. The method takes a string parameter specifying the desired mode ('palette' or 'picker').\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/colorpicker/api/colorpicker_setcurrentmode_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ncolorpicker.setCurrentMode(\"picker\");\n```\n\n----------------------------------------\n\nTITLE: Heat Map with Start Date Only (Less Than Year)\nDESCRIPTION: Demonstrates heat map configuration with only start date specified, where data range is less than a year.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/chart/configuration_properties.md#2025-04-22_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst heatMapData = [\n    { id: \"100\", value: 50, date: new Date(2022, 2, 2) },\n    { id: \"101\", value: 100, date: new Date(2022, 4, 1) },\n    { id: \"200\", value: 32, date: new Date(2022, 6, 1) },\n    { id: \"202\", value: 35, date: new Date(2022, 7, 21) },\n    { id: \"500\", value: 9, date: new Date(2022, 9, 20) },\n    { id: \"501\", value: 100, date: new Date(2023, 1, 1) },\n];\n\nconst config = {\n    type: \"calendarHeatMap\",\n    series: [\n        {\n            value: \"value\",\n            date: \"date\",\n            startDate: \"15/03/22\",\n        }\n    ],\n};\n\nconst chart = new dhx.Chart(\"chart_container\", config);\nchart.data.parse(heatMapData);\n```\n\n----------------------------------------\n\nTITLE: Destroying DHTMLX Calendar Instance\nDESCRIPTION: Demonstrates how to properly destroy a calendar instance and release its resources using the destructor method. This method helps prevent memory leaks and clean up unused calendar components.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar2/api/calendar_destructor_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncalendar.destructor();\n```\n\n----------------------------------------\n\nTITLE: Using blur() Method with Timepicker in DHTMLX Form\nDESCRIPTION: This example demonstrates how to remove focus from a Timepicker control in a DHTMLX Form using the blur() method. The method is called on a Timepicker instance retrieved from the form using getItem().\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/timepicker/timepicker_blur_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"timepicker\").blur();\n```\n\n----------------------------------------\n\nTITLE: Adding Title Control to Sidebar in JavaScript\nDESCRIPTION: Code example demonstrating how to add a Title control to a DHTMLX Sidebar using the add() method of TreeCollection. The Title control displays a text value which can be configured.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/sidebar/title.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsidebar.data.add({\n    type: \"title\",\n    value: \"APP NAME\"\n});\n```\n\n----------------------------------------\n\nTITLE: Usage Example of getSortingStates()\nDESCRIPTION: Example demonstrating how to retrieve current sorting states from a grid component's data collection. Shows the method returning an array of sorting configurations.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/data_collection/api/datacollection_getsortingstates_method.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst state = grid.data.getSortingStates(); \n// -> [{by: \"country\", dir: \"desc\"}, {by: \"population\", dir: \"desc\"}]\n```\n\n----------------------------------------\n\nTITLE: Setting Tabbar Position in DHTMLX\nDESCRIPTION: Shows how to configure the position of DHTMLX Tabbar using the mode property\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tabbar/configuring_tabbar.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst tabbar = new dhx.Tabbar(\"tabbar_container\", {\n    mode: \"left\"\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Custom Scroll for Specific Widget in JavaScript\nDESCRIPTION: This code shows how to enable custom scroll for a specific DHTMLX widget after its initialization using the scrollView.enable() method.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/common_features/custom_scroll.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// initialize the widget\nconst list = new dhx.List(\"list_container\", {\n    template: listTemplate,\n    itemHeight: 52,\n    height: \"100%\",\n    dragMode: \"both\",\n});\nlist.data.load(data);\n\n// enable custom scroll\nlist.scrollView.enable();\n```\n\n----------------------------------------\n\nTITLE: Attaching Event Listener to afterEditEnd Event in DHTMLX DataView\nDESCRIPTION: This snippet demonstrates how to attach an event listener to the afterEditEnd event of a DataView component. The event fires after editing of an item is ended, providing the new value and the item's id.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/dataview/api/dataview_aftereditend_event.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ndataview.events.on(\"afterEditEnd\", function(value,id){\n    // your logic here\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring DataView Selection in JavaScript\nDESCRIPTION: This snippet demonstrates how to disable item selection when initializing a DataView component. The 'selection' option is set to false, which prevents items from being selectable.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/dataview/api/dataview_selection_config.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst dataview = new dhx.DataView(\"dataview_container\", {\n    selection: false\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Initially Selected Date as Array of String\nDESCRIPTION: Initializes a Calendar with a date selected using an array containing a single string date value.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar/configuring.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// selects a date as an array of string value\nconst calendar = new dhx.Calendar(\"calendar_container\", {\n    value: ([\"10/02/19\"])\n});\n```\n\n----------------------------------------\n\nTITLE: Basic DHTMLX Tree HTML Template\nDESCRIPTION: Complete HTML template showing the basic structure needed to initialize a DHTMLX Tree component, including required CSS and JavaScript file references.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree/initialization_of_dhtmlxtree.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n    <head>\n        <title>How to Start with DHTMLX Tree</title>         \n        <script type=\"text/javascript\" src=\"../../codebase/tree.js\"></script>\n        <link rel=\"stylesheet\" href=\"../../codebase/tree.css\">\n    </head>\n    <body>\n        <div id=\"tree_container\"></div>\n        <script>\n            // creating DHTMLX Tree\n            const tree = new dhx.Tree(\"tree_container\",{\n                // config options\n            });\n        </script>\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Input Properties Configuration\nDESCRIPTION: Configuration object for Input control specifying various input-related properties including validation, styling, and behavior options.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/form_getproperties_method.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    autocomplete: boolean,\n    css: string,\n    errorMessage: string,\n    height: string | number | \"content\",\n    helpMessage: string,\n    hiddenLabel: boolean,\n    icon: string,\n    inputType: string,\n    label: string,\n    labelPosition: string,\n    labelWidth: string | number,\n    max: string | number,\n    maxlength: string | number,\n    min: string | number,\n    minlength: string | number,\n    padding: string | number,\n    placeholder: string,\n    preMessage: string,\n    readOnly: boolean,\n    required: boolean,\n    successMessage: string,\n    validation: object | function,\n    width: string | number | \"content\"\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Sidebar beforeExpand Event in JavaScript\nDESCRIPTION: Example showing how to attach an event handler to the beforeExpand event of a DHTMLX Sidebar. The handler can control sidebar expansion by returning true or false.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/sidebar/api/sidebar_beforeexpand_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsidebar.events.on(\"beforeExpand\", function() {\n    // your logic here\n    return true;\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Object of Selected Item in JavaScript DataView\nDESCRIPTION: Retrieves the object of the selected item using the getItem() method of the selection object.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/dataview/usage_selection.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst item = dataview.selection.getItem();\n```\n\n----------------------------------------\n\nTITLE: Removing Focus from Colorpicker Control in DHTMLX Form (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to use the blur() method to remove focus from a Colorpicker control in a DHTMLX Form. The method is called on a specific form item retrieved using the getItem() method.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/colorpicker/colorpicker_blur_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nform.getItem(\"colorpicker\").blur();\n```\n\n----------------------------------------\n\nTITLE: Using collapseAll() Method in DHTMLX Tree\nDESCRIPTION: This code demonstrates how to collapse all expanded items in a DHTMLX Tree component. The method takes no parameters and returns void.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree/api/tree_collapseall_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntree.collapseAll();\n```\n\n----------------------------------------\n\nTITLE: Layout Parent Configuration Object Structure\nDESCRIPTION: Example of the configuration object returned by the getParent() method, showing the hierarchical structure of layout cells with their properties\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/layout/api/cell/layout_cell_getparent_method.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    id: \"u1558363920909\",\n    full: true,\n    header: \"Main Block Header\",\n    cols:[\n        0:{header: \"Sub Block Header row\",id: \"1\"},\n        1:{ \n            cols:[\n                0: {header: \"Left cols\", full: true}\n                1: {header: \"Center cols\", cols: Array(3), parent: Layout, full: true}\n                2: {header: \"Right\", full: true}                \n            ], header: \"Sub Block Header row\"        \n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Attaching Event Listeners to DHTMLX Popup in JavaScript\nDESCRIPTION: Demonstrates how to attach a click event listener to a DHTMLX Popup instance using the events.on method. Requires the DHTMLX Suite library and assumes a Popup instance is already initialized. The listener function receives the event object and logs when the popup is clicked. No specific parameters are required except for the event name and callback function. The output is a console message when the event occurs.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/popup/event_handling.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\npopup.events.on(\"click\", function(e){\n    console.log(\"The popup was clicked\");\n});\n```\n\n----------------------------------------\n\nTITLE: Modifying Individual Toggle Properties in ToggleGroup\nDESCRIPTION: Demonstrates how to modify properties of a specific toggle within a ToggleGroup by providing its ID.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/togglegroup/togglegroup_setproperties_method.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"ToggleGroup\").setProperties({\n    text: \"On Text\",\n    offText: \"Off Text\"\n}, \"first\");\n```\n\n----------------------------------------\n\nTITLE: Using getFilters() Method in DHTMLX Grid (JavaScript)\nDESCRIPTION: This snippet demonstrates how to use the getFilters() method of the TreeCollection in a DHTMLX Grid. It creates a new Grid instance with tree-type data and then calls the getFilters() method on the grid's data object.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree_collection/api/treecollection_getfilters_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst grid = new dhx.Grid(\"grid_container\", {\n    type: \"tree\",\n    columns: [\n        // columns config\n    ],\n    data: dataset,\n});\n\ngrid.data.getFilters();\n```\n\n----------------------------------------\n\nTITLE: Setting Min/Max Size for Layout Cell\nDESCRIPTION: Shows how to set minimum and maximum sizes for a Layout cell using minWidth, maxWidth, minHeight, and maxHeight properties.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/layout/cell_configuration.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst layout = new dhx.Layout(\"layout_container\", {\n    cols: [\n        { \n            header: \"Cell header\", \n            minWidth: \"400px\",\n            maxWidth: \"600px\",\n            minHeight: \"40px\",\n            maxHeight: \"100px\"\n        }\n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: Button Properties Object Structure\nDESCRIPTION: Example showing the structure of the object returned by the getProperties() method. It contains all available configuration attributes of the Button control with their default or set values.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/button/button_getproperties_method.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    circle: false, \n    color: \"primary\",\n    full: false,\n    height: \"content\",\n    icon: \"\",\n    loading: false,\n    padding: 0,\n    size: \"medium\",\n    submit: true,\n    text: \"Send\",\n    url: \"\",\n    view: \"flat\",\n    width: \"content\"\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Avatar Control in DHTMLX Form (JavaScript)\nDESCRIPTION: This snippet demonstrates how to use the validate() method of the Avatar control in a DHTMLX Form. It shows different ways to call the method, including with and without parameters.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/avatar/avatar_validate_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nform.getItem(\"avatar\").validate(true);\n// -> true/false\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nform.getItem(\"avatar\").validate(); // -> true/false\nform.getItem(\"avatar\").validate(false); // -> true/false\n```\n\n----------------------------------------\n\nTITLE: Attaching Click Event to DHTMLX Form\nDESCRIPTION: Shows how to attach a click event listener to a DHTMLX Form. The event handler disables the form when the button is clicked.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/guides/events_guide.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nform.events.on (\"click\", function () {\n    form.disable();\n});\n```\n\n----------------------------------------\n\nTITLE: Hiding a DHTMLX Popup in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to call the `hide()` method on a DHTMLX Popup instance (referenced by the `popup` variable). Executing this method will make the corresponding popup element disappear from the user interface. No parameters are required for this method.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/popup/api/popup_hide_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\npopup.hide();\n```\n\n----------------------------------------\n\nTITLE: Using Font Awesome Icons in DHTMLX Menu Data\nDESCRIPTION: This JavaScript code demonstrates how to use Font Awesome icons in the DHTMLX Menu data structure. Each menu item can have an 'icon' property specifying the Font Awesome icon class.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/menu/customization.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst dataset = [\n    { value: \"File\", \n        items: [\n            { value: \"New File\", icon: \"fas fa-file\"},\n            { value: \"Open File\", icon: \"fas fa-file\"}   \n        ]\n    },\n    { value: \"Edit\",\n        items: [\n            { value: \"Undo\", icon: \"fas fa-undo\"},\n            { value:  \"Redo\", icon: \"fas fa-redo\"}                        \n        ]\n    }\n];\n```\n\n----------------------------------------\n\nTITLE: Repainting DHTMLX Sidebar using paint() Method\nDESCRIPTION: Demonstrates how to use the paint() method to force a repaint of the Sidebar component. This method is useful when you need to manually trigger a visual update of the sidebar.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/sidebar/api/sidebar_paint_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsidebar.paint();\n```\n\n----------------------------------------\n\nTITLE: Configuring Sidebar NavItem Properties in JavaScript\nDESCRIPTION: Example configuration object showing all available properties for a Sidebar NavItem component. Includes optional properties for type, id, parent, value, items array, styling, state management and display options.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/sidebar/api/api_navitem_properties.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = [\n    {\n        type?: \"navItem\",\n        id?: string | number,\n        parent?: string,\n        value?: string,\n        items?: IMenuElement[], // ISpacer | ISeparator | INavItem | IMenuItem | ICustomHTML\n        \n        active?: boolean,\n        count?: number,\n        countColor?: \"danger\" | \"secondary\" | \"primary\" | \"success\",\n        group?: string,\n        hotkey?: string,\n        html?: string,\n        icon?: string,\n        tooltip?: string,\n        twoState?: boolean,\n\n        css?: string | string[],\n        disabled?: boolean,\n        hidden?: boolean,\n    },\n    // more Sidebar controls\n]\n```\n\n----------------------------------------\n\nTITLE: Handling keydown Event for Radiogroup in DHTMLX Form (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to attach an event listener for the keydown event on a Radiogroup control within a DHTMLX Form. It logs the event object and the id of the radio button to the console when any key is pressed while a radio button is in focus.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/radiogroup/radiogroup_keydown_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"radiogroup\").events.on(\"keydown\", function(event, id) {\n    console.log(event, id);\n});\n```\n\n----------------------------------------\n\nTITLE: Including Font Awesome Icons in DHTMLX Window with HTML\nDESCRIPTION: Demonstrates how to include the required JavaScript and CSS resources for DHTMLX Window and pair it with the external Font Awesome icon pack. To use Font Awesome icons, the CDN link should be included after the DHTMLX resources. Required dependencies: DHTMLX Window source files and Font Awesome CDN. No inputs or outputs, sets up the foundation for further customization.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/window/customization.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script type=\\\"text/javascript\\\" src=\\\"../../codebase/window.js\\\"></script>\\n<link rel=\\\"stylesheet\\\" href=\\\"../../codebase/window.css\\\">\\n\\n<link rel=\\\"stylesheet\\\" href=\\\"https://use.fontawesome.com/releases/v5.3.1/css/all.css\\\" \\n  integrity=\\\"sha384-mzrmE5qonljUremFsqc01SB46JvROS7bZs3IO2EmfFsd15uHvIt+Y8vEf7N7fWAU\\\"  \\n  crossorigin=\\\"anonymous\\\">\n```\n\n----------------------------------------\n\nTITLE: Creating a Form Group with Label and Input in HTML\nDESCRIPTION: This snippet demonstrates how to structure a form group with a label and input using DHTMLX CSS classes. It shows the proper nesting of elements and application of CSS classes for styling.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/helpers/base_elements.md#2025-04-22_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"dhx_form-group \">\n    <label for=\"input\" class=\"dhx_label \">I am label</label>\n    <div class=\"dhx_input__wrapper\">\n        <div class=\"dhx_input__container\">\n            <input id=\"input\" placeholder=\"I am input\" class=\"dhx_input\" autocomplete=\"off\">\n        </div>\n    </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Initializing Form with Spacer Control in JavaScript\nDESCRIPTION: Example of creating a form with a Spacer control between two input fields. The Spacer is used to create vertical spacing between form elements.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/spacer.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst form = new dhx.Form(\"form_container\", {\n    rows: [\n        {\n              type: \"input\",\n              label: \"Name\",\n              name: \"name\"\n        },\n        {\n              type: \"spacer\",\n            name: \"spacer\"\n        },\n        {\n              type: \"input\",\n              label: \"Email\",\n              name: \"email\"\n        }\n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Item Editing in Tree\nDESCRIPTION: Initializes a Tree component with editable items, allowing users to modify the text content of tree items.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree/configuration.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst tree = new dhx.Tree(\"tree_container\", {editable: true});\n```\n\n----------------------------------------\n\nTITLE: Detaching Event Listeners in DHTMLX Colorpicker\nDESCRIPTION: Shows how to attach and then detach event listeners from a colorpicker instance using the events.detach() method.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/colorpicker/handling_events.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncolorpicker.events.on(\"modeChange\", function(view) {\n   console.log(\"Selected mode: \" + view); \n});\n\ncolorpicker.events.detach(\"modeChange\");\n```\n\n----------------------------------------\n\nTITLE: Enabling a Timepicker Control in DHTMLX Form\nDESCRIPTION: This example demonstrates how to enable a disabled Timepicker control using the enable() method in a DHTMLX Form. The method doesn't accept any parameters and returns void.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/timepicker/timepicker_enable_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"timepicker\").enable();\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom HTML Toolbar Item Configuration (JavaScript)\nDESCRIPTION: This JavaScript snippet shows the structure of a data object used to define a DHTMLX Toolbar item with the type 'customHTML'. It outlines the possible properties: 'type' (required, set to 'customHTML'), optional 'id', 'parent', 'css', 'hidden', and 'html' for embedding custom HTML content.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/toolbar/api/api_customhtmlbutton_properties.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = [\n    {\n        type: \"customHTML\",\n        id?: string | number,\n        parent?: string,\n        css?: string | string[],\n        hidden?: boolean,\n        html?: string,\n    },\n    // more Toolbar controls\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Slider Control Properties in DHTMLX Form\nDESCRIPTION: A comprehensive configuration object for the Slider control in DHTMLX Form. This snippet shows all available properties that can be set when initializing a slider, including value range, appearance settings, and label options.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/slider/api_slider_properties.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    type: \"slider\",\n    name?: string,\n    id?: string,\n    value?: number | number[],\n    \n    css?: string,\n    disabled?: boolean, // false by default\n    height?: string | number | \"content\", // \"content\" by default\n    hidden?: boolean, // false by default\n    padding?: string | number, \n    width?: string | number | \"content\", // \"content\" by default\n\n    inverse?: boolean, // false by default\n    majorTick?: number,\n    max?: number, // 100 by default\n    min?: number, // 0 by default\n    mode?: \"vertical\" | \"horizontal\", // \"horizontal\" by default\n    range?: boolean, // false by default\n    step?: number, // 1 by default\n    tick?: number,\n    tickTemplate?: (position: number) => string,\n    tooltip?: boolean, // true by default\n    \n    hiddenLabel?: boolean, // false by default\n    label?: string,\n    labelPosition?: \"vertical\" | \"horizontal\", // \"top\" by default\n    labelWidth?: string | number,\n\n    helpMessage?: string,\n}\n```\n\n----------------------------------------\n\nTITLE: Hiding an Input Control in DHTMLX Form\nDESCRIPTION: This snippet demonstrates how to hide an Input control in a DHTMLX Form by accessing the control through the getItem() method and then calling the hide() method on it.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/input/input_hide_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"input\").hide();\n```\n\n----------------------------------------\n\nTITLE: Initializing Combo Box with Custom Label Position in JavaScript\nDESCRIPTION: This code snippet demonstrates how to initialize a Combo Box component with a custom label position using the DHTMLX library. The labelPosition option is set to 'left' to position the label to the left of the combo box.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/combobox/api/combobox_labelposition_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst combo = new dhx.Combobox(\"combo_container\", {\n    labelPosition:\"left\"\n});\n```\n\n----------------------------------------\n\nTITLE: Handling keydown Event in DHTMLX Slider Control\nDESCRIPTION: This example demonstrates how to attach an event listener to the keydown event of a Slider control in a DHTMLX Form. The event fires when any key is pressed while the Slider is in focus and provides access to the native KeyboardEvent object.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/slider/slider_keydown_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"slider\").events.on(\"keydown\", function(event) {\n    console.log(event);\n});\n```\n\n----------------------------------------\n\nTITLE: Handling afterShow Event in DHTMLX Form Select Control\nDESCRIPTION: Example of attaching an event handler to the afterShow event of a Select control in a DHTMLX Form. The event fires after the control becomes visible and provides the current value as a parameter.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/select/select_aftershow_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"select\").events.on(\"afterShow\", function(value) {\n    console.log(\"afterShow\", value);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Basic HTML View in DHTMLX Optimus\nDESCRIPTION: Demonstrates creating a basic View class that returns an HTML element and implements ready() callback to access the root container.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/optimus_guides/index.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { View } from \"dhx-optimus\";\n\nexport class TopLayout extends View {\n    init() {\n        return `<h1>Hello Optimus!</h1>`;\n    }\n    ready(root) {\n        console.log(`This root container:`, root);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Focus on an Input Control in DHTMLX Toolbar\nDESCRIPTION: This example demonstrates how to use the setFocus() method to set focus on an Input control within a DHTMLX Toolbar by providing its ID.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/toolbar/api/toolbar_setfocus_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntoolbar.setFocus(\"2\");\n```\n\n----------------------------------------\n\nTITLE: Disabling Container Control in DHTMLX Form (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to use the disable() method to disable a Container control within a DHTMLX Form. The method is called on the Container item retrieved from the form using the getItem() method.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/container/container_disable_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nform.getItem(\"container\").disable();\n```\n\n----------------------------------------\n\nTITLE: Implementing beforeChangeProperties Event Handler in DHTMLX Form\nDESCRIPTION: Example showing how to attach an event handler to the beforeChangeProperties event of a Datepicker control in DHTMLX Form. The event fires before the control's configuration properties are changed and allows canceling the change.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/calendar/calendar_beforechangeproperties_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"datepicker\").events.on(\"beforeChangeProperties\", function(properties) {\n    console.log(\"beforeChangeProperties\", properties);\n    return true;\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring DHTMLX Popup Styling with Custom CSS Classes in JavaScript\nDESCRIPTION: Instantiates a DHTMLX Popup component, using the 'css' configuration property to apply multiple CSS classes for custom styling. Assumes that the specified CSS classes are defined elsewhere in the HTML or linked stylesheets. Depends on the DHTMLX library being loaded and CSS classes being present; the 'css' parameter takes a space-separated string of class names.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/popup/customization.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst popup = new dhx.Popup({ \\n    css:\\\"my-first-class my-second-class\\\"\\n});\\n\n```\n\n----------------------------------------\n\nTITLE: Handling beforeAdd Event in DHTMLX DataCollection\nDESCRIPTION: This code snippet demonstrates how to attach an event handler to the beforeAdd event of a DataCollection component. The handler logs a message and returns true to allow the item to be added.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/data_collection/api/datacollection_beforeadd_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncomponent.data.events.on(\"beforeAdd\", function(newItem){\n    console.log(\"A new item will be added\");\n    return true;\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Parent ID of a Control in DHTMLX TreeCollection\nDESCRIPTION: This snippet demonstrates how to use the getParent() method of the TreeCollection to retrieve the ID of a control's parent. It takes the ID of a control as an argument and returns the ID of its parent.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree_collection/api/treecollection_getparent_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst parentId = toolbar.data.getParent(\"add_btn\");\n```\n\n----------------------------------------\n\nTITLE: Showing All Menu Items at Once in DHTMLX Menu - JavaScript\nDESCRIPTION: Illustrates how to show all menu items at once by calling the show() method without parameters on a DHTMLX Menu instance. Requires a menu object initialized with DHTMLX Suite v7.0 or higher. This usage does not accept any arguments and will display all hidden items in the menu. No return value is provided.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/menu/api/menu_show_method.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// shows all Menu items\nmenu.show();\n```\n\n----------------------------------------\n\nTITLE: Setting Form Height with Control Group Configuration in JavaScript\nDESCRIPTION: Example showing how to configure the height property in a DHTMLX Form. The height can be set both for the entire form and for specific sections (rows and columns) within the form. It accepts string, number, or \"content\" values.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/form_height_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst form = new dhx.Form(\"form_container\", {\n    css: \"dhx_widget--bordered\",\n    height: \"300px\", // sets a common height for rows \n    padding: \"20px\",   \n    rows: [\n        {\n            type: \"text\",\n            name: \"text\",\n            value: \"Do you agree with our terms and conditions?\"\n        },\n        {\n            padding: \"10px\",\n            height: \"200px\", // sets a common height for cols\n            cols: [{\n                type: \"checkbox\",\n                width: \"80px\", \n                label: \"I agree\",\n                name: \"agree\",\n                id: \"agree\",\n                checked: true\n            },\n            {\n                type: \"checkbox\",\n                label: \"I disagree\",\n                name: \"align\",\n            }]\n        }\n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Calendar in 'month' Mode\nDESCRIPTION: Creates a Calendar widget in month mode, which displays only the months of the current year instead of dates.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar/configuring.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst calendar = new dhx.Calendar(\"calendar_container\", {\n    mode: \"month\"\n});\n```\n\n----------------------------------------\n\nTITLE: Handling beforeChangeProperties Event in DHTMLX Form Checkbox Group Control\nDESCRIPTION: Example demonstrating how to attach an event handler to the beforeChangeProperties event of a Checkbox Group in a DHTMLX Form. The handler logs the properties being changed and returns true to allow the default action to proceed.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/checkbox_group/checkboxgroup_beforechangeproperties_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"checkboxGroup\").events.on(\"beforeChangeProperties\", function(properties) {\n    console.log(\"beforeChangeProperties\", properties);\n    return true;\n});\n```\n\n----------------------------------------\n\nTITLE: Highlighting Specific Dates\nDESCRIPTION: Creates a Calendar with custom highlighting for specific dates using a marking function and custom CSS class. In this example, all Saturdays are highlighted.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar/configuring.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst calendar = new dhx.Calendar(\"calendar_container\", {\n    mark: function(date) {\n        if (date.getDay() === 6) {\n            return \"highlight-date\";\n        }\n    },\n    css: \"dhx_widget--bordered\"\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Current State of Two-State NavItem in JavaScript\nDESCRIPTION: Demonstrates how to check the current state of a two-state NavItem using the getState() method.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/toolbar/navitem.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    type: \"navItem\", icon: \"dxi dxi-format-bold\",\n    tooltip: \"bold text\", twoState: true, \n    id:\"bold\"\n}\n...\nconst state = toolbar.getState(); // -> { bold:true } or { bold:false }\n```\n\n----------------------------------------\n\nTITLE: NavItem JSON Template for DHTMLX Ribbon (JavaScript/JSON)\nDESCRIPTION: Shows the JSON configuration for a 'navItem' control, typically used within navigation elements of a DHTMLX Ribbon or related components. It includes `type: \"navItem\"`, a display `value`, and an optional `icon`.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/ribbon/data_loading.md#2025-04-22_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\n// navItem\n{\n    type: \"navItem\", \n    value: \"Some\",\n    icon: \"dxi-check\"\n}\n```\n\n----------------------------------------\n\nTITLE: Hiding Slider Control in DHTMLX Form\nDESCRIPTION: Demonstrates how to hide a Slider control in a form using the hide() method. The method is called on a Slider form control that is retrieved using the getItem() method.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/slider/slider_hide_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"slider\").hide();\n```\n\n----------------------------------------\n\nTITLE: Setting Item Height in DHTMLX List\nDESCRIPTION: Specifies the height of List items using the itemHeight property. Can be set as a number or string value.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/list/configuration.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst list = new dhx.List(\"list_container\", { \n    itemHeight:30 \n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst list = new dhx.List(\"list_container\", { \n    itemHeight:\"30px\"\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Custom CSS Classes in HTML\nDESCRIPTION: Demonstrates defining custom CSS classes within an HTML `<style>` block. These classes are intended to hold custom styling rules that can later be applied to a DHTMLX component.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/timepicker/customization.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<style>\n    .my-first-class {\n        /*some styles*/\n    }\n    \n    .my-second-class {\n        /*some styles*/\n    }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Handling Grid Cell Mouse Over Event in JavaScript\nDESCRIPTION: Example of attaching an event handler to the cellMouseOver event of a DHTMLX Grid. The event provides access to the row and column objects of the cell being hovered, as well as the native MouseEvent object.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_cellmouseover_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngrid.events.on(\"cellMouseOver\", (row, column, event) => {\n    // your logic here\n});\n```\n\n----------------------------------------\n\nTITLE: Removing Focus from Checkbox Control in DHTMLX Form (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to use the blur() method to remove focus from a Checkbox control in a DHTMLX Form. The method is called on a specific form item retrieved using the getItem() method.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/checkbox/checkbox_blur_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nform.getItem(\"checkbox\").blur();\n```\n\n----------------------------------------\n\nTITLE: Enabling Grid Selection\nDESCRIPTION: How to enable cell selection in the Grid component\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/usage_selection.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngrid.selection.enable();\n```\n\n----------------------------------------\n\nTITLE: Creating a Confirm Box with DHTMLX JavaScript\nDESCRIPTION: Illustrates an example of creating a confirm box with a header, text, custom button labels, centered button alignment, and disabled HTML content using the dhx.confirm() function.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/message/api/api_message_properties.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ndhx.confirm({\n    header:\"Confirm Header\",\n    text:\"Confirm text\",\n    buttons:[\"cancel\", \"apply\"],\n    buttonsAlignment:\"center\",\n    htmlEnable: false\n});\n```\n\n----------------------------------------\n\nTITLE: Checking if a DHTMLX Ribbon Item is Disabled\nDESCRIPTION: This JavaScript snippet demonstrates how to use the `isDisabled()` method (shown as `isDisable` in the example) of a DHTMLX Ribbon instance (`ribbon`) to check if an item, identified by its `id`, is currently disabled. The method returns `true` if the item is disabled and `false` otherwise.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/ribbon/api/ribbon_isdisabled_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nribbon.isDisable(\"id\"); // -> returns true/false\n```\n\n----------------------------------------\n\nTITLE: Configuring Uploader Params in DHTMLX Vault\nDESCRIPTION: Example showing how to initialize a DHTMLX Vault component with custom uploader parameters. The params object allows adding key-value pairs that will be sent with the upload request.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/uploader/api/uploader_params_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst vault = new dhx.Vault(\"vault_container\", { \n    uploader:{\n        // obligatory, the path for upload\n        target:\"/upload\"\n        params:{\n            // key:value pairs\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: DataCollection beforeGroup Event Interface Definition\nDESCRIPTION: TypeScript interface definition for the grouping configuration object and event handler signature.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/data_collection/api/datacollection_beforegroup_event.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\ninterface IGroupConfig {\n    showMissed?: boolean | string; // true by default\n    field?: string; // \"group\" by default\n}\n\nbeforeGroup: (config: IGroupConfig) => boolean | void;\n```\n\n----------------------------------------\n\nTITLE: Changing Two-State NavItem State Programmatically in JavaScript\nDESCRIPTION: Shows how to change the state of a two-state NavItem using the setState() method.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/toolbar/navitem.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    type: \"navItem\", icon: \"dxi dxi-format-bold\",\n    tooltip: \"bold text\", twoState: true, \n    id:\"bold\"\n}\n...\ntoolbar.setState({\"bold\":true});    // active:true\n// or\ntoolbar.setState({\"bold\":false});   // active:false\n```\n\n----------------------------------------\n\nTITLE: Handling blur event for Select control in DHTMLX Form (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to attach an event listener to the blur event of a Select control in a DHTMLX Form. It logs the current value of the control when it loses focus.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/select/select_blur_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"select\").events.on(\"blur\", (value) => {\n    console.log(\"blur\", value);\n});\n```\n\n----------------------------------------\n\nTITLE: Removing Focus from Combo Box using blur() Method in JavaScript\nDESCRIPTION: The blur() method is used to remove focus from a Combo Box component. It takes no parameters and returns void. This method was added in version 7.2 of the DHTMLX Suite.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/combobox/api/combobox_blur_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ncombo.blur();\n```\n\n----------------------------------------\n\nTITLE: Implementing Grid Column Alignment in JSX\nDESCRIPTION: Example showing how to create a grid instance with right-aligned column content using the align property.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/gridcolumn_properties/gridcolumn_align_property.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst grid = new dhx.Grid(\"grid_container\", {\n    columns: [\n        { id: \"name\", header: [{ text: \"Name\" }], align: \"right\" }, \n        // more columns configuration objects\n    ],\n    // more options\n});\n```\n\n----------------------------------------\n\nTITLE: Showing and Hiding Title Control in JavaScript Sidebar\nDESCRIPTION: Methods for showing and hiding a specific Title control in a DHTMLX Sidebar by its ID. These methods toggle the visibility of the Title element.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/sidebar/title.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nsidebar.show(id);\nsidebar.hide(id);\n```\n\n----------------------------------------\n\nTITLE: Enabling a specific checkbox in CheckboxGroup using JavaScript\nDESCRIPTION: This code snippet demonstrates how to enable a specific checkbox within a CheckboxGroup control using its ID. The enable() method is called on the CheckboxGroup item of the form, passing the ID of the checkbox to be enabled.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/checkbox_group/checkboxgroup_enable_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nform.getItem(\"CheckboxGroup\").enable(\"id_1\");\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum Height for DHTMLX Window in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates initializing a DHTMLX Window (`dhx.Window`) and setting its minimum height to 170 pixels via the `minHeight` configuration option. Requires the DHTMLX library (`dhx`). After configuration, the `show()` method is called to display the window.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/window/api/window_minheight_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst dhxWindow = new dhx.Window({\n    minHeight:170\n});\n\ndhxWindow.show();\n```\n\n----------------------------------------\n\nTITLE: CheckboxGroup Properties Object Structure\nDESCRIPTION: Example showing the structure of the object returned when getting properties of the CheckboxGroup control.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/checkbox_group/checkboxgroup_getproperties_method.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    css: \"\",\n    errorMessage: \"\",\n    height: \"content\",\n    helpMessage: \"Help information\",\n    hiddenLabel: false,\n    label: \"Checkbox Group\",\n    labelPosition: \"left\",\n    labelWidth: 140,\n    options: {...},\n    padding: 0,\n    preMessage: \"\",\n    required: true,\n    successMessage: \"\",\n    width: \"content\"\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for a Responsive Layout Application\nDESCRIPTION: This HTML snippet shows the basic structure for implementing a responsive layout application with DHX Suite. It includes containers for the layout, toolbar, sidebar toggle button, and content areas.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/slider/constructor.md#2025-04-22_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n<head>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Responsive DHX Layout</title>\n    <link rel=\"stylesheet\" href=\"https://cdn.dhtmlx.com/suite/edge/suite.css\">\n    <script src=\"https://cdn.dhtmlx.com/suite/edge/suite.js\"></script>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <div class=\"app-container\">\n        <div id=\"header\" class=\"header\"></div>\n        <div id=\"sidebar_container\" class=\"sidebar\">\n            <div id=\"toggle_button\"></div>\n            <div id=\"sidebar\"></div>\n        </div>\n        <div id=\"content\" class=\"content\"></div>\n        <div id=\"footer\" class=\"footer\"></div>\n    </div>\n    \n    <script src=\"app.js\"></script>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Adding an Icon to MenuItem\nDESCRIPTION: Shows how to add an icon to a MenuItem using the icon property.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/toolbar/menuitem.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    type:\"menuItem\", value:\"Some\",\n    icon:\"dxi dxi-menu-right\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Textarea Control in DHTMLX Suite\nDESCRIPTION: This snippet shows the configuration options for the Textarea control in DHTMLX Suite. It includes attributes like css, errorMessage, height, helpMessage, and more. Each attribute is specified with its corresponding data type.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/form_setproperties_method.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    css: string,\n    errorMessage: string,\n    height: string | number | \"content\",\n    helpMessage: string,\n    hiddenLabel: boolean,\n    label: string,\n    labelPosition: string,\n    labelWidth: string | number,\n    maxlength: string | number,\n    minlength: string | number,\n    padding: string | number,\n    placeholder: string,\n    preMessage: string,\n    readOnly: boolean,\n    required: boolean,\n    successMessage: string,\n    validation: object | function,\n    width: string | number | \"content\"\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX Window Component\nDESCRIPTION: Creates a new Window instance with basic configuration including title, dimensions, modal behavior and footer settings. The window is initialized using the dhx.Window constructor with a configuration object.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tutorial/binding_components/step1.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst dhxWindow = new dhx.Window(\n    {\n        title: \"Window\", \n        closable: true, \n        modal: true, \n        minWidth: 520, \n        minHeight: 420, \n        height: 420, \n        footer: true\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX Chart with JavaScript Configuration\nDESCRIPTION: This snippet shows how to initialize DHTMLX Chart using JavaScript. It creates a configuration object with various properties and uses the dhx.Chart constructor to create the Chart instance.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/chart/initialization.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n    type: \"bar\",\n    scales: {\n        \"bottom\" : {\n            text: \"month\"\n        },\n        \"left\" : {\n            maxTicks: 10,\n            max: 100,\n            min: 0\n        }\n    },\n    series: [\n        {\n            id: \"A\",\n            value: \"company C\",\n            color: \"#5E83BA\",                        \n            fill: \"#5E83BA\"                        \n        }\n    ]\n};\n\nconst chart = new dhx.Chart(\"chart_container\", config);\n```\n\n----------------------------------------\n\nTITLE: Creating Combo Box Container\nDESCRIPTION: Shows how to create a container element for the Combo Box component.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/combobox/how_to_start.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"combo_container\"></div>\n```\n\n----------------------------------------\n\nTITLE: Repainting DHTMLX Form using paint() Method\nDESCRIPTION: Demonstrates how to use the paint() method to manually trigger a repaint of a DHTMLX Form component. This method is useful when you need to force the form to update its visual representation.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/form_paint_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.paint();\n```\n\n----------------------------------------\n\nTITLE: Using HTML Property for Icons in Layout Component (JavaScript)\nDESCRIPTION: Shows how to use the 'html' configuration property to add an icon to a DHTMLX Layout component cell.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/helpers/icon.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\n      id: \"sidebar\",\n      html: \"<i class = 'dxi dxi-icon-name'></i>\",\n      gravity: false,\n      css: \"dhx_layout-cell--border_right\",\n      width: \"200px\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring dragExpand in DHTMLX Grid (JavaScript)\nDESCRIPTION: This snippet demonstrates how to initialize a DHTMLX Grid with the dragExpand option set to false. This configuration prevents collapsed rows from expanding when hovering over them during drag-and-drop operations in a tree-structured grid.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_dragexpand_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst grid = new dhx.Grid(\"grid_container\", {\n    type: \"tree\",\n    columns: [\n        // columns config\n    ],\n    dragItem: \"row\",\n    dragExpand: false,\n    data: dataset\n});\n```\n\n----------------------------------------\n\nTITLE: Checking Specific Form Control Disabled State in JavaScript\nDESCRIPTION: This example shows how to check if a specific form control is disabled by passing its name or id to the isDisabled() method. It returns a boolean value indicating the disabled state of the control.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/form_isdisabled_method.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nform.isDisabled(\"combo\"); // -> true/false\n```\n\n----------------------------------------\n\nTITLE: Handling Grid Cell Unselect Event in JavaScript\nDESCRIPTION: Shows how to attach an event handler for the afterUnSelect event using the selection events API. The event fires after a cell is unselected and provides access to the row and column configuration objects.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/selection/selection_afterunselect_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngrid.selection.events.on(\"AfterUnSelect\", (row, column) => {\n    console.log(\"afterUnSelect\", row, column); \n});\n```\n\n----------------------------------------\n\nTITLE: Adding Tooltip to Title Control in JavaScript Sidebar\nDESCRIPTION: Configuration example showing how to add a tooltip to a Title control in a DHTMLX Sidebar. The tooltip provides additional information when users hover over the Title.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/sidebar/title.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    type:\"title\",\n    value:\"2K\",\n    tooltip:\"Your subscribers\"\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Layout beforeShow Event in JavaScript\nDESCRIPTION: Example of attaching an event handler to the beforeShow event of a Layout component. The event fires before a cell is shown and can be used to prevent the cell from being displayed by returning false.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/layout/api/layout_beforeshow_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlayout.events.on(\"beforeShow\", function(id){\n    // your logic here\n    return false;\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Ribbon Data Structure in JavaScript\nDESCRIPTION: Defines a JavaScript constant `data` holding an array of objects representing the structure and content of a DHTMLX Ribbon. This array contains configuration objects for ribbon blocks and their items (e.g., buttons), specifying types, values, icons, and layout directions. This data structure is expected by the Ribbon component for initialization or parsing.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/ribbon/data_loading.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nconst data = [\n    {\n        type: \"block\",\n        items: [\n            {\n                value: \"New\",\n                icon: \"dxi dxi-file-outline\",\n                size: \"small\"               \n            }\n        ]\n    },\n    {\n        type: \"block\",\n        direction: \"col\",\n        items: [\n            {\n                value: \"Add\",\n                icon: \"dxi dxi-plus\",\n                size: \"small\"\n            },\n            {\n                value: \"Remove\",\n                icon: \"dxi dxi-delete\",\n                size: \"small\"\n            }\n        ]\n    }\n];\n```\n\n----------------------------------------\n\nTITLE: Handling beforeChange Event in DHTMLX Form Simple Vault Control\nDESCRIPTION: Example of attaching an event handler to the beforeChange event of a Simple Vault control in a DHTMLX form. The event fires before changing the value of the control and can be used to validate or prevent changes.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/simplevault/simplevault_beforechange_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"simplevault\").events.on(\"beforeChange\", (value, file) => {\n    console.log(\"beforeChange\", value, file);\n    return true;\n});\n```\n\n----------------------------------------\n\nTITLE: Handling beforeHide Event in DHTMLX Menu\nDESCRIPTION: This code snippet demonstrates how to attach an event handler to the beforeHide event of a DHTMLX Menu. The event fires before hiding a sub-item of the Menu. The handler can prevent the sub-item from hiding by returning false.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/menu/api/menu_beforehide_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmenu.events.on(\"beforeHide\", function(id, event){\n    // your code here\n    return false;\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Input beforeShow Event in DHTMLX Form\nDESCRIPTION: Example demonstrating how to attach an event handler for the beforeShow event of an Input control in a DHTMLX Form. The handler receives the current value and can prevent the control from being shown by returning false.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/input/input_beforeshow_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"input\").events.on(\"beforeShow\", function(value) {\n    console.log(\"beforeShow\", value);\n    return true;\n});\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Layout Styling Example with HTML, CSS, and JavaScript\nDESCRIPTION: Provides a complete example of styling a Layout component, including custom CSS for different parts of the layout and JavaScript code to initialize the Layout with specific configurations and styles.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/layout/customization.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<style>\n    .layout {\n        color: #fff;\n        --dhx-background-secondary: #7a7a7a;\n        --dhx-border-color: #bababa;\n        --dhx-border: var(--dhx-border-width) solid var(--dhx-border-color);\n    }\n\n    .layout-rightbar {\n        --dhx-background-primary: #e99949;\n    }\n    .layout-content {\n        --dhx-background-primary: #099f8e;\n    }\n    .layout-sidebar {\n        --dhx-background-primary: #e949ac;\n    }\n    .layout-header {\n        --dhx-background-primary: #3A434A;\n    }\n    \n    .dhx_layout-cell-inner_html {\n        height: 100%;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n    }\n</style>\n\n<script>\n    const layout = new dhx.Layout(\"layout_container\", {\n        type: \"space\",\n        css: \"layout\",\n        rows: [\n            {\n                id: \"toolbar\",\n                html: \"Header\",\n                css: \"layout-header\",\n                height: \"60px\"\n            },\n            // more objects\n        ]\n    });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Handling removeAll Event in DHTMLX DataCollection (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to attach an event handler to the removeAll event of a DataCollection component. The event fires when all items are removed from the collection.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/data_collection/api/datacollection_removeall_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncomponent.data.events.on(\"removeAll\", function(){\n    console.log(\"Items are removed\");\n});\n```\n\n----------------------------------------\n\nTITLE: Showing and Hiding Input in Toolbar using JavaScript\nDESCRIPTION: Shows how to use the show() and hide() methods of Toolbar to display or hide an Input control. These methods take the ID of the input as a parameter.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/toolbar/input.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ntoolbar.show(id);\ntoolbar.hide(id);\n```\n\n----------------------------------------\n\nTITLE: Handling afterChangeProperties Event for Radiogroup in DHTMLX Form\nDESCRIPTION: This example demonstrates how to attach an event handler to the afterChangeProperties event of a Radiogroup control in a DHTMLX Form. The event fires after configuration attributes have been changed and provides access to the modified properties.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/radiogroup/radiogroup_afterchangeproperties_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"radiogroup\").events.on(\"afterChangeProperties\", function(properties) {\n    console.log(\"afterChangeProperties\", properties);\n});\n```\n\n----------------------------------------\n\nTITLE: Applying Default DHTMLX CSS Classes to Messages in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates the application of a built-in DHTMLX CSS utility class to a message box for quick appearance modification. The css property receives a pre-defined DHTMLX class name (dhx_widget--bg_gray) to adjust widget background color. The only dependency is the DHTMLX Suite, and there are no additional parameters beyond the CSS class used.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/message/customization.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ndhx.message({\\n    css:\"dhx_widget--bg_gray\"\\n});\\n\n```\n\n----------------------------------------\n\nTITLE: Handling Checkbox Validation Event in DHTMLX Form\nDESCRIPTION: Example showing how to attach an event handler to the afterValidate event of a Checkbox control. The handler receives the validated value and validation result as parameters.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/checkbox/checkbox_aftervalidate_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"checkbox\").events.on(\"afterValidate\", function(value, isValidate) {\n    console.log(\"afterValidate\", value, isValidate);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Tooltip for DHTMLX Slider in JavaScript\nDESCRIPTION: This snippet demonstrates how to disable the tooltip feature when initializing a DHTMLX Slider. The tooltip is enabled by default, but can be turned off by setting the 'tooltip' property to false.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/slider/api/slider_tooltip_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst slider = new dhx.Slider(\"slider_container\", { \n    tooltip:false\n});\n```\n\n----------------------------------------\n\nTITLE: Handling beforeRemove Event in DHTMLX Form Simple Vault\nDESCRIPTION: Example showing how to attach an event handler for the beforeRemove event of a Simple Vault control. The handler receives the file object as a parameter and can prevent file removal by returning false.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/simplevault/simplevault_beforeremove_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"simplevault\").data.events.on(\"beforeRemove\", function(file) {\n    console.log(\"beforeRemove\", file);\n    // return false;\n});\n```\n\n----------------------------------------\n\nTITLE: Querying Pagination Page Count - DHTMLX Suite - JavaScript\nDESCRIPTION: This snippet demonstrates how to retrieve the total number of pages from a pagination component instance using the getPagesCount method in DHTMLX Suite's JavaScript UI library. To use this method, ensure you have initialized a pagination object (pagination). Calling getPagesCount() returns an integer indicating the number of pages available. The method does not accept parameters and returns a number. Dependencies: DHTMLX Suite (with a pagination component instance).\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/pagination/api/pagination_getpagescount_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst totalPages = pagination.getPagesCount();\n// -> 10\n```\n\n----------------------------------------\n\nTITLE: Loading Data into List\nDESCRIPTION: Using DataCollection parse method to load prepared data into the list widget.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/guides/datacollection_guide.md#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nlist.data.parse(data);\n```\n\n----------------------------------------\n\nTITLE: Handling beforeValidate Event in DHTMLX Form Colorpicker\nDESCRIPTION: This example demonstrates how to attach an event handler to the beforeValidate event of a Colorpicker control in a DHTMLX form. The handler logs the value being validated and returns true to allow the default validation to proceed.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/colorpicker/colorpicker_beforevalidate_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"colorpicker\").events.on(\"beforeValidate\", function(value) {\n    console.log(\"beforeValidate\", value);\n    return true;\n});\n```\n\n----------------------------------------\n\nTITLE: Handling beforeUploadFile Event in DHTMLX Form Avatar Control\nDESCRIPTION: This snippet demonstrates how to attach an event handler to the beforeUploadFile event of an Avatar control in a DHTMLX Form. The event fires before file upload begins and can be used to perform checks or cancel the upload.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/avatar/avatar_beforeuploadfile_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"avatar\").events.on(\"beforeUploadFile\", (value) => {\n    console.log(\"beforeUploadFile\", value);\n    return true;\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Item Height in DataView\nDESCRIPTION: Shows how to set the height of DataView items using the itemHeight configuration option, both as a number and string value.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/dataview/configuration.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// sets the height of an item as a number\nconst dataview = new dhx.DataView(\"dataview_container\", { \n    itemHeight:34\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// sets the height of an item as a string value\nconst dataview = new dhx.DataView(\"dataview_container\", { \n    itemHeight:\"34px\"\n});\n```\n\n----------------------------------------\n\nTITLE: Attaching beforeHide Event Handler to Spacer Control in DHTMLX Form\nDESCRIPTION: This code snippet demonstrates how to attach an event handler for the beforeHide event to a Spacer control in a DHTMLX Form. The event fires before the control is hidden and allows preventing the hiding action.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/spacer/spacer_beforehide_event.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nform.getItem(\"spacer\").events.on(\"beforeHide\", function(value, init) {\n    console.log(\"beforeHide\", init);\n    return true;\n});\n```\n\n----------------------------------------\n\nTITLE: Show/Hide NavItem Methods\nDESCRIPTION: Examples of showing and hiding NavItems using ribbon methods.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/ribbon/navitem.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nribbon.show(id);\nribbon.hide(id);\n```\n\n----------------------------------------\n\nTITLE: Getting Current Calendar Mode\nDESCRIPTION: Shows how to retrieve the current display mode of the calendar (month, year, calendar, or timepicker) using the getCurrentMode method.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar/operating_calendar.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst mode = calendar.getCurrentMode(); // -> \"calendar\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Upload Target URL in DHTMLX Vault\nDESCRIPTION: Demonstrates how to set up the target URL for file uploads using the DHTMLX Vault component. The target property specifies the server endpoint that will handle the file upload processing.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/uploader/api/uploader_target_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst vault = new dhx.Vault(\"vault_container\", { \n    uploader:{    \n        target:\"/upload\"\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Default Color Palette for DHTMLX Colorpicker in JavaScript\nDESCRIPTION: This snippet shows the default color palette array used by the DHTMLX Colorpicker. It contains 10 rows of 7 colors each, representing a range of shades and hues.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/colorpicker/api/colorpicker_palette_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst palette = [\n    [\"#D4DAE4\",\"#B0B8CD\",\"#949DB1\",\"#727A8C\",\"#5E6677\",\"#3F4757\",\"#1D2534\"],\n    [\"#FFCDD2\",\"#FE9998\",\"#F35C4E\",\"#E94633\",\"#D73C2D\",\"#CA3626\",\"#BB2B1A\"],\n    [\"#F9E6AD\",\"#F4D679\",\"#EDB90F\",\"#EAA100\",\"#EA8F00\",\"#EA7E00\",\"#EA5D00\"],\n    [\"#BCE4CE\",\"#90D2AF\",\"#33B579\",\"#36955F\",\"#247346\",\"#1D5B38\",\"#17492D\"],\n    [\"#BDF0E9\",\"#92E7DC\",\"#02D7C5\",\"#11B3A5\",\"#018B80\",\"#026B60\",\"#024F43\"],\n    [\"#B3E5FC\",\"#81D4FA\",\"#29B6F6\",\"#039BE5\",\"#0288D1\",\"#0277BD\",\"#01579B\"],\n    [\"#AEC1FF\",\"#88A3F9\",\"#5874CD\",\"#2349AE\",\"#163FA2\",\"#083596\",\"#002381\"],\n    [\"#C5C0DA\",\"#9F97C1\",\"#7E6BAD\",\"#584A8F\",\"#4F4083\",\"#473776\",\"#3A265F\"],\n    [\"#D6BDCC\",\"#C492AC\",\"#A9537C\",\"#963A64\",\"#81355A\",\"#6E3051\",\"#4C2640\"],\n    [\"#D2C5C1\",\"#B4A09A\",\"#826358\",\"#624339\",\"#5D4037\",\"#4E342E\",\"#3E2723\"]\n];\n```\n\n----------------------------------------\n\nTITLE: Applying Custom CSS Classes to DHTMLX Messages in JavaScript\nDESCRIPTION: This JavaScript snippet configures a DHTMLX message box to use specific CSS classes for custom appearance. The css property receives a space-separated list of CSS class names that should be defined in advance. There are no external dependencies besides the DHTMLX library, and the snippet expects matching CSS definitions for the named classes. It is used to customize styles at the point of message box invocation.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/message/customization.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ndhx.message({\\n    css:\"my_first_class my_second_class\"\\n});\\n\n```\n\n----------------------------------------\n\nTITLE: Changing Configuration of CheckboxGroup and Individual Checkboxes in JavaScript\nDESCRIPTION: Demonstrates how to use the setProperties() method to modify the configuration of a CheckboxGroup control and individual checkboxes within it. The examples show changing labels, positions, and checkbox options.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/checkbox_group/checkboxgroup_setproperties_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// 1. Changes values in the configuration of the CheckboxGroup control\nform.getItem(\"checkboxGroup\").setProperties({\n    label: \"New label\",\n    labelPosition: \"left\",\n    options: {\n        rows: [\n            {\n                id: \"first\",\n                type: \"checkbox\",\n                text: \"New Select 1\",\n            },\n            {\n                id: \"second\",\n                type: \"checkbox\",\n                text: \"New Select 2\",\n            },\n            {\n                id: \"third\",\n                type: \"checkbox\",\n                text: \"New Select 3\",\n            },\n        ]\n    }\n});\n\n// 2. Changes values in the configuration of the specified checkbox of a CheckboxGroup\nform.getItem(\"checkboxGroup\").setProperties(\"first\", {\n    text: \"New Text\",\n    padding: 20\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Initially Selected Date as Array of Date Object\nDESCRIPTION: Initializes a Calendar with a date selected using an array containing a single Date object.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar/configuring.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// selects a date as an array of Date value\nconst calendar = new dhx.Calendar(\"calendar_container\", {\n    value: [new Date(2019,01,10)]\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Missing Grouping Data in dhtmlx Grid (JSX)\nDESCRIPTION: Configures a dhtmlx Grid to handle rows lacking values for the grouping criteria using `group.showMissed`. Setting it to a string value (\"Missed\" in this case) renders these rows as a separate group with the specified label at the end of the grid. Requires the dhtmlx Grid library and a dataset.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/usage.md#2025-04-22_snippet_28\n\nLANGUAGE: jsx\nCODE:\n```\nconst grid = new dhx.Grid(\"grid_container\", {\n    columns: [\n        { id: \"country\", header: [{ text: \"Country\" }], groupable: true },\n        { id: \"city\", header: [{ text: \"City\" }], groupable: true },\n        { id: \"population\", header: [{ text: \"Population\" }] }\n    ],\n    group: {\n        panel: true,\n        // elements without values will be rendered as the \"Missed\" group \n        // at the end of the grid data\n        showMissed: \"Missed\" \n    },\n    data: dataset\n});\n```\n\n----------------------------------------\n\nTITLE: Collapsing a DHTMLX Sidebar in JavaScript\nDESCRIPTION: A simple example demonstrating how to collapse a DHTMLX Sidebar instance programmatically using the collapse() method.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/sidebar/api/sidebar_collapse_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsidebar.collapse();\n```\n\n----------------------------------------\n\nTITLE: Event Handler for Spacer beforeChangeProperties\nDESCRIPTION: Example showing how to attach an event handler for the beforeChangeProperties event of a Spacer control. The event fires before configuration properties are changed and allows canceling the change by returning false.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/spacer/spacer_beforechangeproperties_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"spacer\").events.on(\"beforeChangeProperties\", function(properties) {\n    console.log(\"beforeChangeProperties\", properties);\n    return true;\n});\n```\n\n----------------------------------------\n\nTITLE: Attaching afterChangeProperties Event Handler to Textarea in DHTMLX Form\nDESCRIPTION: This snippet demonstrates how to attach an event handler for the afterChangeProperties event of a Textarea control in a DHTMLX Form. The event fires after the configuration attributes of the control have been changed dynamically.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/textarea/textarea_afterchangeproperties_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"textarea\").events.on(\"afterChangeProperties\", function(properties) {\n    console.log(\"AfterChangeProperties\", properties);\n});\n```\n\n----------------------------------------\n\nTITLE: Clearing Timepicker Value in JavaScript\nDESCRIPTION: Demonstrates how to clear the currently selected time value from a DHTMLX Timepicker instance. This method was introduced in v6.4 and removes any previously set time value from the control.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/timepicker/api/timepicker_clear_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntimepicker.clear();\n```\n\n----------------------------------------\n\nTITLE: Configuring Slider Control in DHTMLX Suite\nDESCRIPTION: This snippet demonstrates the configuration options for the Slider control in DHTMLX Suite. It includes attributes like css, height, helpMessage, hiddenLabel, inverse, and more. Each attribute is specified with its corresponding data type.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/form_setproperties_method.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    css: string,\n    height: string | number | \"content\",\n    helpMessage: string,\n    hiddenLabel: boolean,\n    inverse: boolean,\n    label: string,\n    labelPosition: string,\n    labelWidth: string | number,\n    majorTick: number,\n    max: number,\n    min: number,\n    mode: string,\n    padding: string | number,\n    range: boolean,\n    step: number,\n    tick: number,\n    tickTemplate: function,\n    tooltip: boolean, \n    width: string | number | \"content\"\n}\n```\n\n----------------------------------------\n\nTITLE: Column Data Format Using format Property - DHTMLX Grid (Pre v9.0) - JavaScript\nDESCRIPTION: Configures a column in DHTMLX Grid with a custom string/number format, leveraging a 'format' mask for number presentation prior to v9.0. Includes a template function for custom rendering and uses 'format' for data display in the grid cell.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/migration.md#2025-04-22_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\n{\n    width: 130,\n    id: \"cost\",\n    header: [{ text: \"Cost\" }, { content: \"inputFilter\" }],\n    template: (value) => `$${value}`,\n    format: \"#.0\",\n}\n```\n\n----------------------------------------\n\nTITLE: Handling beforeChange Event in DHTMLX Form Colorpicker Control\nDESCRIPTION: This example shows how to attach an event handler to the beforeChange event of a Colorpicker control in a DHTMLX Form. The handler logs the new value to the console and returns true to allow the change.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/colorpicker/colorpicker_beforechange_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"colorpicker\").events.on(\"beforeChange\", function(value) {\n    console.log(\"beforeChange\", value);\n    return true;\n});\n```\n\n----------------------------------------\n\nTITLE: Adding TimePicker with 12-hour Format\nDESCRIPTION: Configures a Calendar with an integrated TimePicker component that uses 12-hour time format.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar/configuring.md#2025-04-22_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nconst calendar = new dhx.Calendar(\"calendar_container\", {\n    timePicker: true,\n    timeFormat: 12 // the 12-hour format for the timepicker\n});\n```\n\n----------------------------------------\n\nTITLE: Applying DHTMLX Built-in CSS Class to Combobox in JavaScript\nDESCRIPTION: This snippet shows how to use a pre-defined DHTMLX CSS class to style a Combobox. It uses the 'dhx_widget--bg_white' class to set a white background for the Combobox.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/combobox/api/combobox_css_config.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst combo = new dhx.Combobox(\"combo_container\", {\n    css: \"dhx_widget--bg_white\"\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Timepicker Initial Value (Number) - DHTMLX - JavaScript\nDESCRIPTION: Demonstrates initializing the DHTMLX Timepicker with a numeric 'value'. The number is interpreted as either a timestamp or a specific time representation by the Timepicker component. Requires DHTMLX library. Input: number; Output: Timepicker initialized to the corresponding time.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/timepicker/configuration.md#2025-04-22_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n// the value as a number\nconst timepicker = new dhx.Timepicker(\"timepicker_container\", {\n    value: 1232151545\n});\n```\n\n----------------------------------------\n\nTITLE: Enable/Disable NavItem Methods\nDESCRIPTION: Examples of enabling and disabling NavItems using ribbon methods.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/ribbon/navitem.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nribbon.enable(id);\nribbon.disable(id);\n```\n\n----------------------------------------\n\nTITLE: Checking if Toggle Control is Disabled in DHTMLX Form (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to use the isDisabled() method to check whether a Toggle control in a DHTMLX Form is disabled. The method returns a boolean value indicating the disabled state of the control.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/toggle/toggle_isdisabled_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nform.getItem(\"toggle\").isDisabled(); // -> true/false\n```\n\n----------------------------------------\n\nTITLE: Configuring Toolbar Input Properties with DHTMLX - JavaScript\nDESCRIPTION: This snippet defines the shape of a configuration array for DHTMLX Toolbar items, specifically for input controls. The object includes fields like 'type', 'id', 'parent', and properties unique to input controls such as 'autocomplete', 'icon', 'label', etc. The configuration object can be extended to support more toolbar controls, providing flexibility in defining toolbar behavior. No external dependencies are required beyond DHTMLX Suite, and the expected input is an array of configuration objects; the output is a configured toolbar control.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/toolbar/api/api_input_properties.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst data = [\n    {\n        type: \"input\",\n        id?: string | number,\n        parent?: string,\n        value?: string,\n\n        autocomplete?: boolean,\n        icon?: string,\n        label?: string,\n        placeholder?: string,\n        tooltip?: string,\n\n        css?: string | string[],\n        disabled?: boolean,\n        hidden?: boolean,\n        width?: string,\n    },\n    // more Toolbar controls\n]\n```\n\n----------------------------------------\n\nTITLE: Checking Visibility of Combo Box in DHTMLX Form (JavaScript)\nDESCRIPTION: This snippet demonstrates how to use the isVisible() method to check if a Combo Box control is visible on the page. The method returns a boolean value indicating the visibility status of the control.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/combo/combo_isvisible_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"combo\").isVisible(); \n// -> true/false\n```\n\n----------------------------------------\n\nTITLE: Enabling and Disabling NavItems in JavaScript\nDESCRIPTION: Demonstrates how to enable or disable NavItems using the toolbar's enable() and disable() methods.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/toolbar/navitem.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ntoolbar.enable(id);\ntoolbar.disable(id);\n```\n\n----------------------------------------\n\nTITLE: Setting Tooltip for Input in Toolbar Configuration\nDESCRIPTION: Shows how to add a tooltip to an Input control in the toolbar configuration object. The tooltip property is used to specify the text that appears on hover.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/toolbar/input.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    type: \"input\",\n    value: \"\",\n    tooltip:\"Type to search\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining beforeUnGroup Event Interface in JavaScript\nDESCRIPTION: This code snippet defines the interface for the beforeUnGroup event in a DataCollection. It specifies the event parameters and their types, including the configuration object structure.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/data_collection/api/datacollection_beforeungroup_event.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\ninterface IGroupConfig {\n    showMissed?: boolean | string; // true by default\n    field?: string; // \"group\" by default\n}\n\nbeforeUnGroup: (grouped: string[], config: IGroupConfig) => boolean | void;\n```\n\n----------------------------------------\n\nTITLE: Adding Custom CSS Classes to Calendar\nDESCRIPTION: Shows how to define custom CSS classes and apply them to a Calendar instance using the css configuration property.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar/customization.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<style>\n    .my_first_class {\n        /*some styles*/\n    }\n    \n    .my_second_class {\n        /*some styles*/\n    }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Styling DHTMLX Tree with Custom CSS in JavaScript\nDESCRIPTION: Demonstrates how to apply custom CSS classes to a DHTMLX Tree component for styling. It shows both the HTML style definition and the JavaScript initialization with custom CSS.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree/setting_tree_appearance.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<style>\n    .custom {\n        --dhx-font-weight-regular: 500;\n        --dhx-font-color-primary: #0ab169;\n    }\n    .custom .dhx_tree-folder  {\n        --dhx-font-color-primary: #0288d1;\n    }\n</style>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst tree = new dhx.Tree(\"tree_container\", {\n    css: \"custom\"\n});\n\ntree.data.parse(dataset);\n```\n\n----------------------------------------\n\nTITLE: Applying Custom CSS Class to a DHTMLX Ribbon Button (JavaScript)\nDESCRIPTION: Shows how to apply a custom CSS class to a DHTMLX Ribbon Button for styling purposes using the `css` property in its configuration object. The value is the name of the CSS class to be added.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/ribbon/button.md#2025-04-22_snippet_7\n\nLANGUAGE: js\nCODE:\n```\n{\n    type:\"button\", value:\"Best button\", css:\"best_button\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Autosend in DHTMLX Vault\nDESCRIPTION: Example showing how to configure the autosend property in DHTMLX Vault uploader initialization. The autosend option determines whether files are automatically uploaded when added to the uploader.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/uploader/api/uploader_autosend_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst vault = new dhx.Vault(\"vault_container\", { \n    uploader:{\n        // obligatory, the path for upload\n        target:\"/upload\"\n        autosend:false\n       }\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Multiple Sorting States - DHTMLX Grid (v9.1+) - JavaScript\nDESCRIPTION: Shows the recommended method in DHTMLX Grid v9.1+ to obtain sorting states using the getSortingStates method on the grid's data collection. This approach supports multiple columns being sorted at once. Requires a grid instance (with initialized data) and returns an array of sorting configuration objects, with [0] indicating the primary column.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/migration.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\ngrid.data.getSortingStates()[0]; // getting the first (main) sorting state\n```\n\n----------------------------------------\n\nTITLE: Setting Chart Configuration in JavaScript\nDESCRIPTION: Demonstrates how to change the configuration of a Chart on the fly using the setConfig method. The example shows setting up a radar chart with custom scales and series.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/chart/usage.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n    type: \"radar\",\n    scales: {\n        radial:{\n            value: \"month\",\n            maxTicks: 7\n        }\n    },\n    series: [\n        {\n            id: \"A\",\n            value: \"company A\",\n            fill: \"#000000\",\n            alpha: 0.3,\n            color: \"#000000\"\n        },\n        {\n            id: \"B\",\n            value: \"company B\",\n            fill: \"#FFFF33\",\n            alpha: 0.3,\n            color: \"#FFFF33\"\n        }\n    ]\n}\n\nchart.setConfig(config);\n```\n\n----------------------------------------\n\nTITLE: Initializing Tabbar and Attaching HTML Content in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a Tabbar instance and use the attachHTML method to add HTML content to a specific cell. It sets up a Tabbar with a single tab for 'Vilnius' and then attaches a paragraph of HTML to that tab's cell.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tabbar/api/cell/tabbar_cell_attachhtml_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst tabbar = new dhx.Tabbar(\"tabbar_container\", {\n    mode: \"top\",\n    css: \"dhx_widget--bordered\",\n    views: [\n        { id: \"vilnius\", tab: \"Vilnius\" },\n    ]\n});\n\ntabbar.getCell(\"vilnius\").attachHTML(\"<p>Information about Vilnius</p>\");\n```\n\n----------------------------------------\n\nTITLE: Handling Input Control Property Changes in DHTMLX Form - JavaScript\nDESCRIPTION: Demonstrates how to attach an event handler to the afterChangeProperties event of a Form Input control. The event fires after configuration properties have been changed and provides access to the modified properties.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/input/input_afterchangeproperties_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"input\").events.on(\"afterChangeProperties\", function(properties) {\n    console.log(\"afterChangeProperties\", properties);\n});\n```\n\n----------------------------------------\n\nTITLE: Repainting ComboBox in JavaScript\nDESCRIPTION: Illustrates how to repaint a ComboBox after changing its configuration using the paint() method.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/combobox/work_with_combo.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// disabling ComboBox via the configuration object\ncombo.config.disabled = true;\n// repaints ComboBox with a new config\ncombo.paint();\n```\n\n----------------------------------------\n\nTITLE: Handling Avatar Validation Event in DHTMLX Form\nDESCRIPTION: Demonstrates how to attach an event handler to the afterValidate event of an Avatar form control. The event fires after the control value is validated and provides access to the validated value and validation result.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/avatar/avatar_aftervalidate_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"avatar\").events.on(\"afterValidate\", value => {\n    console.log(\"afterValidate\", value);\n});\n```\n\n----------------------------------------\n\nTITLE: Form Validation Check\nDESCRIPTION: Demonstrates form validation check before processing the Apply button action.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tutorial/binding_components/step2.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncase 'apply': {\n    if (form.validate()){\n       }                \n    break;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Initial Left Position for DHTMLX Window\nDESCRIPTION: This JavaScript snippet demonstrates how to initialize a DHTMLX Window component with a specific horizontal starting position. It utilizes the 'left' property within the configuration object passed to the `dhx.Window` constructor to set the window's left coordinate to 250 pixels. The window is then made visible using the `show()` method. This requires the DHTMLX Suite library (`dhx`) to be included.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/window/api/window_left_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst dhxWindow = new dhx.Window({\n    left:250\n});\n\ndhxWindow.show();\n```\n\n----------------------------------------\n\nTITLE: Implementing beforeHide Event Handler in DHTMLX Form\nDESCRIPTION: Example showing how to attach a beforeHide event handler to a Checkbox Group control in a DHTMLX form. The handler logs the event details and returns true to allow the hiding operation.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/checkbox_group/checkboxgroup_beforehide_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"CheckboxGroup\").events.on(\"beforeHide\", function(value, id, init) {\n    console.log(\"beforeHide\", value, id, init);\n    return true;\n});\n```\n\n----------------------------------------\n\nTITLE: Handling beforeHide Event for Toggle Control in DHTMLX Form\nDESCRIPTION: This code snippet demonstrates how to attach an event handler to the beforeHide event of a Toggle control in a DHTMLX Form. The handler logs the current value and initialization state, and returns true to allow the control to be hidden.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/toggle/toggle_beforehide_event.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nform.getItem(\"toggle\").events.on(\"beforeHide\", function(value, init) {\n    console.log(\"beforeHide\", value, init);\n    return true;\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Toolbar NavItem Data Structure - DHTMLX JavaScript\nDESCRIPTION: This snippet shows the structure of a JavaScript array used to define Toolbar controls, specifically NavItem elements, within the DHTMLX Suite. Fields are mostly optional and heavily typed, referencing either primitive types or DHTMLX interface types (e.g., IMenuElement). Dependencies include the DHTMLX library with support for Toolbar and Menu structures. Expected input is an array of control objects, each specifying relevant properties for a Toolbar navigation item; output is handled by DHTMLX rendering this configuration in the UI. Certain properties like value or html are mutually required, and controls can be nested via the items array.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/toolbar/api/api_navitem_properties.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst data = [\n    {\n        type?: \"navItem\",\n        id?: string | number,\n        parent?: string,\n        value?: string,\n        items?: IMenuElement[], // ISpacer | ISeparator | INavItem | IMenuItem | ICustomHTML\n\n        active?: boolean,\n        count?: number,\n        countColor?: \"danger\" | \"secondary\" | \"primary\" | \"success\",\n        group?: string,\n        hotkey?: string,\n        html?: string,\n        icon?: string,\n        multiClick?: boolean,\n        tooltip?: string,\n        twoState?: boolean,\n\n        css?: string | string[],\n        disabled?: boolean,\n        hidden?: boolean,\n    },\n    // more Toolbar controls\n]\n```\n\n----------------------------------------\n\nTITLE: Handling Color Change Events in DHTMLX Colorpicker\nDESCRIPTION: Example showing how to attach an event handler to the beforeChange event of a colorpicker. The handler can prevent color changes by returning false.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/colorpicker/api/colorpicker_beforechange_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncolorpicker.events.on(\"beforeChange\", function(color){\n    // your logic here\n    return false;\n});\n```\n\n----------------------------------------\n\nTITLE: Detaching Event Listeners with pagination.events.detach() in JavaScript\nDESCRIPTION: Shows how to remove an event listener from a DHTMLX Pagination component using the `pagination.events.detach()` method. The example first attaches a listener to the 'change' event and then detaches all listeners associated with that specific event name.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/pagination/handling_events.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\npagination.events.on(\"change\", function(index, previousIndex){\n    console.log(\"The currently active page\", index);\n});\n\npagination.events.detach(\"change\");\n```\n\n----------------------------------------\n\nTITLE: Clearing Validation State of Radiogroup Control\nDESCRIPTION: Demonstrates how to clear the validation state of a Radiogroup control in a DHTMLX Form using the clearValidate() method. The method takes no parameters and returns void.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/radiogroup/radiogroup_clearvalidate_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"radiogroup\").clearValidate();\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX Timepicker with Time Object Value Format in JavaScript\nDESCRIPTION: This snippet shows the initialization of a DHTMLX Timepicker in the \"timepicker_container\" element using a different configuration. It sets the initial value using a time object (`{hour: 6, minute: 0, AM: true}`), uses a 12-hour time format (`timeFormat: 12`), and sets `valueFormat` to \"timeObject\". This configuration ensures that time values passed to or emitted by events are represented as JavaScript objects containing hour, minute, and potentially AM/PM details. Requires the DHTMLX library (`dhx`).\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/timepicker/api/timepicker_valueformat_config.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst timepicker = new dhx.Timepicker(\"timepicker_container\", {\n    value: {hour: 6, minute: 0, AM: true},\n    timeFormat: 12,\n    valueFormat: \"timeObject\"\n});\n```\n\n----------------------------------------\n\nTITLE: Removing Focus from Datepicker in DHTMLX Form\nDESCRIPTION: Shows how to programmatically remove focus from a Datepicker control within a DHTMLX Form. The method takes no parameters and returns void.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/calendar/calendar_blur_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"datepicker\").blur();\n```\n\n----------------------------------------\n\nTITLE: Checking Slider Disabled State in DHTMLX Form\nDESCRIPTION: Method to check whether a Slider control in a form is currently disabled. Returns a boolean value indicating the disabled state.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/slider/slider_isdisabled_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"slider\").isDisabled(); \n// -> true/false\n```\n\n----------------------------------------\n\nTITLE: Declaring getPagesCount Method Signature - DHTMLX Suite - TypeScript\nDESCRIPTION: This method signature snippet shows the TypeScript type definition for the getPagesCount method in the DHTMLX Suite's Pagination API. It explicitly declares that getPagesCount returns a value of type number and does not accept any parameters. This is used for type checking and autocompletion in TypeScript projects utilizing the DHTMLX Suite. Prerequisite: Properly typed pagination object from DHTMLX Suite.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/pagination/api/pagination_getpagescount_method.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetPagesCount(): number;\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX Combo Box with Hidden Label\nDESCRIPTION: Example of creating a new Combo Box instance with hiddenLabel configuration enabled. This adds a hidden label to the combo box input that will be used during form submission to the server.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/combobox/api/combobox_hiddenlabel_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst combo = new dhx.Combobox(\"combo_container\",{\n    hiddenLabel:true\n});\n```\n\n----------------------------------------\n\nTITLE: Using destructor() Method with Timepicker in DHTMLX Form\nDESCRIPTION: This example demonstrates how to use the destructor() method to remove a Timepicker instance from a form and release the occupied resources.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/timepicker/timepicker_destructor_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"timepicker\").destructor();\n```\n\n----------------------------------------\n\nTITLE: Creating an HTML Container for DHTMLX Slider\nDESCRIPTION: This HTML snippet shows how to create a simple `div` element that will serve as the container for the DHTMLX Slider. The `id` attribute (`slider_container` in this example) is used to reference this container during Slider initialization in JavaScript.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/slider/initializing_slider.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"slider_container\"></div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Form Padding in DHTMLX JavaScript\nDESCRIPTION: Demonstrates how to set padding for form content using both row-level and column-level padding configuration. The example shows creating a form with text and checkbox controls while applying different padding values.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/form_padding_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst form = new dhx.Form(\"form_container\", {\n    css: \"dhx_widget--bordered\",\n    padding: \"20px\",  // sets padding for rows \n    rows: [\n        {\n            type: \"text\",\n            name: \"text\",\n            value: \"Do you agree with our terms and conditions?\"\n        },\n        {\n            padding: \"10px\", // sets padding for cols\n            cols: [{\n                type: \"checkbox\",\n                width: \"80px\", \n                label: \"I agree\",\n                name: \"agree\",\n                checked: true\n            },\n            {\n                type: \"checkbox\",\n                label: \"I disagree\",\n                name: \"align\",\n            }]\n        }\n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Textarea beforeChangeProperties Event in JavaScript\nDESCRIPTION: Example of attaching an event handler to the beforeChangeProperties event of a Textarea control in a DHTMLX Form. The handler logs the properties being changed and returns true to allow the change to proceed.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/textarea/textarea_beforechangeproperties_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"textarea\").events.on(\"beforeChangeProperties\", function(properties) {\n    console.log(\"beforeChangeProperties\", properties);\n    return true;\n});\n```\n\n----------------------------------------\n\nTITLE: Creating DHTMLX Form with Slider and Button\nDESCRIPTION: Demonstrates the creation of a DHTMLX Form component with a slider and a button. The form is initialized with specific styling and layout options.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/guides/events_guide.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!-- component container -->\n<form style=\"margin: 20px;\" id=\"form\"></form>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst form = new dhx.Form(\"form\", {\n    css: \"dhx_widget--bg_white dhx_widget--bordered\",\n    padding: 40,\n    rows: [\n        {\n            type: \"slider\",\n            label: \"Slider\",\n            value: 10,\n        },\n        {\n            type: \"button\",\n            text: \"Disable all\",\n        }\n    ]\n}); \n```\n\n----------------------------------------\n\nTITLE: Handling beforeValidate Event for Datepicker in DHTMLX Form (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to attach an event listener for the beforeValidate event of a Datepicker control in a DHTMLX Form. The event fires before the control value is validated, allowing for custom validation logic or preprocessing.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/calendar/calendar_beforevalidate_event.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nform.getItem(\"datepicker\").events.on(\"beforeValidate\", function(value) {\n    console.log(\"beforeValidate\", value);\n    return true;\n});\n```\n\n----------------------------------------\n\nTITLE: Column Footer Statistical Function - DHTMLX Grid (Pre v9.0) - JavaScript\nDESCRIPTION: Defines a Grid column with a statistical aggregation in the footer (e.g., sum), using predefined string keys for content in versions before v9.0. Expects a column configuration object within a grid with a corresponding header/footer and an optional tooltipTemplate function. The sum is calculated and displayed in the footer cell.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/migration.md#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n{\n    width: 130,\n    id: \"balance\",\n    header: [{text: \"Balance\"}, {content: \"inputFilter\"}],\n    footer: [\n        {\n            content: \"sum\",\n            tooltipTemplate: balanceTemplate\n        },\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Custom German Locale for DHTMLX Calendar\nDESCRIPTION: Definition of a custom German locale for dhtmlxCalendar with translated month and day names. This can be used to replace the default English locale.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar/localizing_calendar.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst de = {\n    // short names of months\n    monthsShort: [\"Jan\", \"Feb\", \"Mär\", \"Apr\", \"Mai\", \"Jun\", \n                 \"Jul\", \"Aug\", \"Sep\", \"Okt\", \"Nov\", \"Dez\"],\n    // full names of months             \n    months: [\"Januar\", \"Februar\", \"März\", \"April\", \"Mai\", \"Juni\", \n            \"Juli\", \"August\", \"September\", \"Oktober\", \"November\", \"Dezember\"],\n    // short names of days\n    daysShort: [\"Son\", \"Mon\", \"Die\", \"Mit\", \"Don\", \"Fre\", \"Sam\"],\n    // full names of days\n    days: [\"Sonntag\", \"Montag\", \"Dienstag\", \"Mittwoch\", \"Donnerstag\", \n                \"Freitag\", \"Samstag\"]\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Focus to a Select Control in DHTMLX Form\nDESCRIPTION: This example demonstrates how to set focus to a Select control within a DHTMLX Form. The method takes no parameters and returns void.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/select/select_focus_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"select\").focus();\n```\n\n----------------------------------------\n\nTITLE: Defining the 'move' Event Signature in DHTMLX Window\nDESCRIPTION: Specifies the signature for the 'move' event handler function in the DHTMLX Window component. The handler function receives three arguments: 'position' (an object with new left/top coordinates), 'oldPosition' (an object with previous left/top coordinates), and 'side' (an object indicating the direction of resizing, relevant if movement is part of a resize operation).\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/window/api/window_move_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{'move: (position: object, oldPosition: object, side: object) => void;'}\n```\n\n----------------------------------------\n\nTITLE: Disabling Grid Selection\nDESCRIPTION: How to disable cell selection in the Grid component\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/usage_selection.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ngrid.selection.disable();\n```\n\n----------------------------------------\n\nTITLE: Showing Textarea Control in DHTMLX Form\nDESCRIPTION: Demonstrates how to show a Textarea control that was previously hidden in a DHTMLX Form. The method is called on a specific textarea form control retrieved using getItem().\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/textarea/textarea_show_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"textarea\").show();\n```\n\n----------------------------------------\n\nTITLE: JSON Format Template for SelectButton Control\nDESCRIPTION: Template showing the structure and properties available for a selectButton control in DHTMLX Toolbar.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/toolbar/load_data.md#2025-04-22_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\n// selectButton\n{\n    id: \"select\",\n    type: \"selectButton\",\n    icon: \"dxi-some\",\n    items: []\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Focus from Toggle Group in DHTMLX Form (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to use the blur() method to remove focus from a ToggleGroup control in a DHTMLX Form. The method is called on the ToggleGroup item retrieved from the form.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/togglegroup/togglegroup_blur_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"ToggleGroup\").blur();\n```\n\n----------------------------------------\n\nTITLE: Setting DHTMLX Window Initial Top Position (JavaScript)\nDESCRIPTION: This snippet demonstrates how to set the initial vertical position (top coordinate) of a DHTMLX Window using the 'top' property within the configuration object during instantiation. The value should be a number representing the pixel distance from the top edge of the containing element or viewport. The 'show()' method is subsequently called to make the window visible.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/window/api/window_top_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst dhxWindow = new dhx.Window({\n    top:250\n});\n\ndhxWindow.show();\n```\n\n----------------------------------------\n\nTITLE: Initializing SimpleVault Form Control\nDESCRIPTION: Example of creating a form with SimpleVault control and retrieving its properties using getProperties() method.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/simplevault/simplevault_getproperties_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst form = new dhx.Form(\"form_container\", {\n    rows: [\n        {\n            type: \"simpleVault\",\n            name:\"simplevault\",\n            helpMessage: \"Help information\",\n            required: true,\n            label: \"Simple Vault\",\n            labelWidth: 140,\n            target: \"https://docs.dhtmlx.com/suite/backend/upload\",\n        }\n    ]\n});\n\nform.getItem(\"simplevault\").getProperties();\n```\n\n----------------------------------------\n\nTITLE: Calling paint() on DHTMLX Popup Instance in JavaScript\nDESCRIPTION: This snippet demonstrates how to invoke the paint() method on an instance of the DHTMLX Popup component, causing the popup to be repainted on the page. This operation does not require any parameters. The method signature is 'paint(): void;'. The popup instance must be already initialized, and invoking this method will redraw or refresh the popup's appearance. No output is returned, and the DOM is updated as a side-effect.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/popup/api/popup_paint_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\npopup.paint();\n```\n\n----------------------------------------\n\nTITLE: Adding a Number Badge to MenuItem\nDESCRIPTION: Demonstrates how to add a numerical badge to a MenuItem using the count property.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/toolbar/menuitem.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    type:\"menuItem\", value:\"Some\",\n    icon:\"dxi dxi-check\",\n    count:10\n}\n```\n\n----------------------------------------\n\nTITLE: Expanding and Collapsing Sidebar in JavaScript\nDESCRIPTION: Demonstrates how to expand and collapse a sidebar using the expand() and collapse() methods of the DHTMLX Sidebar API.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/sidebar/work_with_sidebar.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nsidebar.expand(); // expands a sidebar\nsidebar.collapse(); // collapses a sidebar\n```\n\n----------------------------------------\n\nTITLE: JSON Format Template for Button Control\nDESCRIPTION: Template showing the structure and properties available for a button control in DHTMLX Toolbar.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/toolbar/load_data.md#2025-04-22_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n// button\n{\n    id: \"add\",                  \n    type: \"button\",               \n    icon: \"dxi-plus\",             \n    value: \"Add\",                  \n    count: 11,                                        \n    tooltip: \"Add a new user\"    \n}\n```\n\n----------------------------------------\n\nTITLE: Loading Sidebar Data from External JSON File\nDESCRIPTION: Example showing how to load sidebar data from an external JSON file using the load method. This method makes an AJAX call to fetch data from a specified path.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/sidebar/data_loading.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nsidebar.data.load(\"[path to this file]/file.json\");\n```\n\n----------------------------------------\n\nTITLE: Saving and Restoring Toolbar State\nDESCRIPTION: Example showing how to save the current state of a toolbar and then restore that state to another toolbar instance.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/toolbar/load_data.md#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nconst state = toolbar1.data.serialize();\n```\n\nLANGUAGE: jsx\nCODE:\n```\n// creating a new toolbar\nconst toolbar2 = new dhx.Toolbar(\"toolbar_container2\");\n// parsing the state of toolbar1 into toolbar2\ntoolbar2.data.parse(state);\n```\n\n----------------------------------------\n\nTITLE: Styling TimePicker with Custom CSS\nDESCRIPTION: Example of applying custom CSS classes to TimePicker component with custom CSS variables for primary colors and borders.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/timepicker/api/timepicker_css_config.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<style>\n  .custom {\n    --dhx-font-color-primary: #c00;\n    --dhx-color-primary: #ff5c5c;\n  }\n</style>\n\n<script>\n    const timepicker = new dhx.Timepicker(\"timepicker_container\", {\n          css: \"custom dhx_widget--bordered\"\n    });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Enabling Toolbar Items with DHTMLX enable() Method in JavaScript\nDESCRIPTION: Demonstrates how to enable a single item and multiple items in a DHTMLX Toolbar by passing an ID or an array of IDs to the enable() method. Requires the DHTMLX Suite to be loaded and an initialized toolbar instance. Accepts either a string, number, or array, and directly updates the enabled state of toolbar controls. The operation has no return value. Limitations: Toolbar instance must have corresponding items with the specified IDs.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/toolbar/api/toolbar_enable_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntoolbar.enable(\"save_btn\");\n// several at a time\ntoolbar.enable([\"cancel_btn\",\"del_btn\"]);\n```\n\n----------------------------------------\n\nTITLE: Handling Grid Footer Cell Mouse Down Event in JavaScript\nDESCRIPTION: Example of attaching an event handler to the footerCellMouseDown event in DHTMLX Grid. The event fires before releasing the left mouse button when clicking on a grid footer cell and provides access to the cell configuration, column configuration, and the native event object.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_footercellmousedown_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngrid.events.on(\"footerCellMouseDown\", (cell, column, event) => {\n    // your logic here\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Spacer Control in DHTMLX Suite\nDESCRIPTION: This snippet shows the configuration options for the Spacer control in DHTMLX Suite. It includes attributes like css, height, padding, and width. Each attribute is specified with its corresponding data type.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/form_setproperties_method.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    css: string,\n    height: string | number | \"content\"\n    padding: string | number\n    width: string | number | \"content\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Focus in List and DataView (JavaScript)\nDESCRIPTION: Demonstrates how to get the id of a focused item in List and DataView components using the getFocus() method, which replaces the deprecated getFocusIndex() method.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/migration.md#2025-04-22_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nlist.getFocus(); // -> \"item_id\"\n\ndataview.getFocus(); // -> \"item_id\"\n```\n\n----------------------------------------\n\nTITLE: Defining Grouping Order by Column IDs in dhtmlx Grid (JSX)\nDESCRIPTION: Initializes a dhtmlx Grid where the data grouping order is predefined using an array of column IDs (`[\"country\", \"city\"]`) passed to the `group.order` property. Grouping will first be applied by 'country', and then by 'city' within each country group. Requires the dhtmlx Grid library and a dataset.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/usage.md#2025-04-22_snippet_30\n\nLANGUAGE: jsx\nCODE:\n```\nconst grid = new dhx.Grid(\"grid_container\", {\n    columns: [\n        { id: \"country\", header: [{ text: \"Country\" }], groupable: true },\n        { id: \"city\", header: [{ text: \"City\" }], groupable: true },\n        { id: \"population\", header: [{ text: \"Population\" }] }\n    ],\n    group: {\n        order: [\"country\", \"city\"]\n    },\n    data: dataset\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Calendar with Single Date Value\nDESCRIPTION: Example of creating a calendar instance with a single date selected using a Date object.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar/api/calendar_value_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst calendar = new dhx.Calendar(\"calendar_container\", {\n    value: new Date(2019,01,10)\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX Slider with Label Width Configuration\nDESCRIPTION: Shows how to create a new DHTMLX Slider instance with a specified label width of 100 pixels. The labelWidth property can accept either string or number values to define the width of slider labels.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/slider/api/slider_labelwidth_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst slider = new dhx.Slider(\"slider_container\", {\n    labelWidth:100\n});\n```\n\n----------------------------------------\n\nTITLE: Hiding SimpleVault Control in DHTMLX Form\nDESCRIPTION: Demonstrates how to hide a SimpleVault control within a DHTMLX Form using the hide() method. The method is called on a SimpleVault instance retrieved using the form's getItem() method.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/simplevault/simplevault_hide_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"simplevault\").hide();\n```\n\n----------------------------------------\n\nTITLE: Handling Form Focus Events in JavaScript with DHTMLX\nDESCRIPTION: This example demonstrates how to attach an event handler to the focus event of a DHTMLX Form. The handler captures the control name, current value, and optionally the element ID (for RadioGroup and CheckboxGroup controls).\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/form_focus_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.events.on(\"focus\", function(name, value, id) {\n    console.log(name, value);\n});\n```\n\n----------------------------------------\n\nTITLE: Defining the eventHandlers Config Structure in JavaScript\nDESCRIPTION: Shows the TypeScript-like interface definition for the eventHandlers configuration option in DHTMLX List, illustrating its structure with event names as keys and objects containing class names and handler functions as values.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/list/api/list_eventhandlers_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\neventHandlers?: {\n    [eventName: string]: {\n        [className: string]: (event: Event, id: string | number) => void | boolean;\n    };\n};\n```\n\n----------------------------------------\n\nTITLE: Handling beforeChangeProperties Event in DHTMLX Form Fieldset\nDESCRIPTION: This code snippet demonstrates how to attach an event handler to the beforeChangeProperties event of a Fieldset control in a DHTMLX Form. The handler logs the properties being changed and returns true to allow the change.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/fieldset/fieldset_beforechangeproperties_event.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nform.getItem(\"fieldset\").events.on(\"beforeChangeProperties\", properties => {\n    console.log(\"beforeChangeProperties\", properties);\n    return true;\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Menu Stylesheets - CSS\nDESCRIPTION: This snippet creates two custom CSS classes (.my_first_class and .my_second_class) which define the visual styles for the menu containers within the DHTMLX Suite Menu component. These classes can be used to override or extend default menu styling, and their names should match those specified in the menuCss JavaScript property. No external dependencies are required for CSS aside from loading it in the document.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/menu/api/menu_menucss_config.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n<style>\\n    .my_first_class {\\n        /*some styles*/\\n    }\\n \\n    .my_second_class {\\n        /*some styles*/\\n    }\\n</style>\n```\n\n----------------------------------------\n\nTITLE: Detaching Event Listeners from DHTMLX Popup in JavaScript\nDESCRIPTION: Illustrates removing a previously attached click event listener from a DHTMLX Popup via the events.detach method. The snippet first shows attaching a listener with events.on, followed by detaching it with events.detach. This requires the same DHTMLX Suite environment and the Popup instance. No inputs besides the event name are needed; after calling detach, the event listener will not respond.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/popup/event_handling.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\npopup.events.on(\"click\", function(e){\n    console.log(\"The popup was clicked\");\n});\n\npopup.events.detach(\"click\");\n```\n\n----------------------------------------\n\nTITLE: Handling keydown Event for Checkbox Group in DHTMLX Form (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to attach an event listener for the 'keydown' event on a Checkbox Group control in a DHTMLX Form. The event fires when any key is pressed while a checkbox in the group is focused. It provides access to the native KeyboardEvent object and the id of the focused checkbox.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/checkbox_group/checkboxgroup_keydown_event.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nform.getItem(\"CheckboxGroup\").events.on(\"keydown\", function(event, id) {\n    console.log(event, id);\n});\n```\n\n----------------------------------------\n\nTITLE: Clearing Validation for Colorpicker Control in DHTMLX Form\nDESCRIPTION: This example demonstrates how to clear validation for a Colorpicker control in a DHTMLX Form. The method is called on a specific form item retrieved by its ID.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/colorpicker/colorpicker_clearvalidate_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"colorpicker\").clearValidate();\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX Tree with Key Navigation in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a new instance of the DHTMLX Tree component with key navigation enabled. The keyNavigation option is set to true, allowing users to navigate the tree structure using keyboard inputs.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree/api/tree_keynavigation_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst tree = new dhx.Tree(\"tree_container\", {keyNavigation: true});\n```\n\n----------------------------------------\n\nTITLE: Handling dragStart Event in DHTMLX Tree (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to attach an event handler to the dragStart event of a DHTMLX Tree component. The event fires when dragging of a tree item begins and provides data about the drag operation and the mouse event.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree/api/tree_dragstart_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntree.events.on(\"dragStart\", function(data, events) {\n    // your logic here\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Date and Time Format Mask in DHTMLX Form Input (JSX)\nDESCRIPTION: Demonstrates how to create a complex pattern mask for date and time input in a DHTMLX form. It includes a pattern and character format specifications.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/work_with_form.md#2025-04-22_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\npatternMask: {\n    pattern: \"00/00/0000 H0:M0\", \n    charFormat: { \n        \"H\": /[0-2]/,\n        \"M\": /[0-5]/,\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking DatePicker Disabled State in JavaScript\nDESCRIPTION: Example showing how to check if a DatePicker control is disabled using the isDisabled() method. The method returns a boolean value indicating the control's disabled state.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/calendar/calendar_isdisabled_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"datepicker\").isDisabled(); \n// -> true/false\n```\n\n----------------------------------------\n\nTITLE: Initializing a DHTMLX Tooltip (JavaScript)\nDESCRIPTION: Illustrates how to create a tooltip associated with a specific HTML element using the `dhx.tooltip` constructor. It requires the tooltip text as the first argument and a configuration object as the second. The configuration object must specify the target `node` (using its ID or a DOM element reference) and can optionally define the `position` of the tooltip relative to the node.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/message/creating_message.md#2025-04-22_snippet_6\n\nLANGUAGE: js\nCODE:\n```\ndhx.tooltip(\"Current Value 1\", {node: \"first\", position: \"center\"});\n```\n\n----------------------------------------\n\nTITLE: Configuring Pagination Widget with inputWidth in DHTMLX Suite - JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to instantiate a DHTMLX Pagination widget with a custom inputWidth property, which determines the width (in pixels) of the input field used for page navigation. It assumes that the dhx.Pagination constructor is available via the DHTMLX Suite library and that there is a DOM element with the ID \\\"pagination_container\\\". The example also adds an optional custom CSS class. The main parameter of interest is \\\"inputWidth\\\", set here to 220, overriding the default of 40. Inputs include the container ID and a configuration object; the widget renders a page navigation panel with the specified input field width.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/pagination/api/pagination_inputwidth_config.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst pagination = new dhx.Pagination(\"pagination_container\", {\n    css: \"dhx_widget--bordered\",\n    inputWidth: 220 \n});\n```\n\n----------------------------------------\n\nTITLE: Configuring DHTMLX Vault Uploader with singleRequest\nDESCRIPTION: Demonstrates how to initialize a DHTMLX Vault component with the singleRequest option enabled to send multiple files in a single HTTP request. The target parameter specifies the upload endpoint.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/uploader/api/uploader_singlerequest_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst vault = new dhx.Vault(\"vault_container\", { \n    uploader:{\n        // obligatory, the path for upload\n        target:\"/upload\"\n        singleRequest:true\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Disabled Dates in DHTMLX Calendar\nDESCRIPTION: The disabledDates configuration accepts a function that takes a date parameter and returns a boolean value. When the function returns true for a specific date, that date will appear dimmed (disabled) in the calendar UI.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar2/functionality_and_features/disabled_dates.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<iframe src=\"https://snippet.dhtmlx.com/ic5oeiga?mode=result\" frameborder=\"0\" class=\"snippet_iframe\" width=\"100%\" height=\"450\"></iframe>\n```\n\n----------------------------------------\n\nTITLE: Defining Ribbon Datepicker Configuration Object in JavaScript\nDESCRIPTION: This snippet demonstrates the structure of a configuration object used to define a Datepicker control within the data array for a DHTMLX Ribbon. It showcases various optional properties like 'id', 'parent', 'value', 'dateFormat', 'mode', 'timePicker', styling ('css'), and state ('disabled', 'hidden'). The 'type' property must be set to 'datePicker'.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/ribbon/api/api_datepicker_properties.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nconst data = [\n    {\n        type: \"datePicker\",\n        id?: string | number,\n        parent?: string,\n        value?: string | Date,\n        valueFormat?: string | \"date\",\n\n        dateFormat?: string,\n        disabledDates?: (date: Date) => boolean,\n        icon?: string,\n        label?: string,\n        mark?: (date: Date) => string,\n        mode?: \"calendar\" | \"year\" | \"month\" | \"timepicker\", // \"calendar\" by default\n        placeholder?: string,\n        thisMonthOnly?: boolean, // false by default\n        timeFormat?: 24 | 12, // 24 by default\n        timePicker?: boolean, // false by default\n        weekNumbers?: boolean, // false by default\n        weekStart?: \"saturday\" | \"sunday\" | \"monday\", // \"sunday\" by default\n\n        css?: string | string[],\n        disabled?: boolean,\n        editable?: boolean,\n        hidden?: boolean,\n        width?: string,\n    },\n    // more Ribbon controls\n]\n```\n\n----------------------------------------\n\nTITLE: Handling the change event for Text control in DHTMLX Form\nDESCRIPTION: This example demonstrates how to attach an event handler to the 'change' event of a Text control in a DHTMLX Form. The handler will log the new value to the console whenever the text value changes.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/text/text_change_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"text\").events.on(\"change\", function(value) {\n    console.log(\"change\", value);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating List Template and Initialization\nDESCRIPTION: JavaScript code for creating a template function and initializing the DHTMLX List widget with custom styling.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/guides/datacollection_guide.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n//creating template\nfunction template(item) {\n    let template = \"<div class='list_item'>\";\n    template += \"<div class='item_name'>\" + item.title; +\"</div>\";\n    template += \"<div class='item_author'>\";\n    template += item.authors + \", \";\n    template += item.publication_date.split(\"/\")[2] + \"</div>\";\n    template += \"</div>\";\n    return template;\n};\n\n//creating list\nconst list = new dhx.List(\"list_container\", {\n    css: \"dhx_widget--bordered\",\n    template: template\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Asynchronous Data Saving\nDESCRIPTION: Example demonstrating how to handle asynchronous data saving using promises and checking save status.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/data_collection/api/datacollection_save_method.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = new DataCollection();\ndata.save(loader);\nreturn data.saveData.then(function () {\n    // now your data is saved\n});\n```\n\n----------------------------------------\n\nTITLE: Available Configuration Properties for DHTMLX Slider Control\nDESCRIPTION: This code snippet shows the object structure containing all configurable properties for the Slider control in DHTMLX Form. These properties can be changed dynamically using the setProperties method.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/slider/slider_setproperties_method.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    css: string,\n    height: string|number|\"content\",\n    helpMessage: string,\n    hiddenLabel: boolean,\n    inverse: boolean,\n    label: string,\n    labelPosition: string,\n    labelWidth: string|number,\n    majorTick: number,\n    max: number,\n    min: number,\n    mode: string,\n    padding: string|number,\n    range: boolean,\n    step: number,\n    tick: number,\n    tickTemplate: function,\n    tooltip: boolean, \n    width: string|number|\"content\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding ImageButton to Ribbon in JavaScript\nDESCRIPTION: Demonstrates how to add an ImageButton control to a Ribbon component using the data.add() method. The ImageButton includes a count badge and an image source.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/ribbon/image_button.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nribbon.data.add({\n    type: \"imageButton\",\n    count: 10,\n    src: \"../img/avatar.png\"\n});\n```\n\n----------------------------------------\n\nTITLE: Creating an HTML Button Linking to DHTMLX Samples\nDESCRIPTION: This HTML snippet creates a button element styled with the 'support_btn' class. Inside the button, an anchor tag links to a DHTMLX snippet runner displaying additional examples related to the Tabbar component.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tabbar/features.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<button class=\"support_btn\"><a href=\"https://snippet.dhtmlx.com/xq6k0tts?tag=tabbar\">Check more samples >>></a> </button>\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX Slider with Custom Step in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a new Slider instance with a custom step value. The step property defines the increment by which the slider thumb moves.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/slider/api/slider_step_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst slider = new dhx.Slider(\"slider_container\", { \n    step:3\n});\n```\n\n----------------------------------------\n\nTITLE: Applying Built-in Theme Class to Popup in JavaScript\nDESCRIPTION: Demonstrates how to apply a DHTMLX-provided CSS theme ('dhx_widget--bg_white') to a Popup instance by setting the css property in its constructor. This example requires the DHTMLX JavaScript UI library. No data model or event handlers are specified; the code only customizes the popup's appearance using a theme class. The component must be created after DHTMLX is loaded.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/popup/api/popup_css_config.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst popup = new dhx.Popup({\n    css: \"dhx_widget--bg_white\"\n}); \n```\n\n----------------------------------------\n\nTITLE: Defining DHTMLX Ribbon NavItem Configuration in JavaScript\nDESCRIPTION: This JavaScript snippet illustrates the data structure used to configure a `NavItem` control within an array for the DHTMLX Ribbon. It lists optional properties like `type`, `id`, `parent`, `value`, `html`, `icon`, `items` for nested controls, state management (`active`, `twoState`, `disabled`, `hidden`), visual enhancements (`count`, `countColor`, `tooltip`, `size`), grouping (`group`), and styling (`css`). Requires the DHTMLX Suite library.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/ribbon/api/api_navitem_properties.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n```js\nconst data = [\n    {\n        type?: \"navItem\",\n        id?: string | number,\n        parent?: string,\n        value?: string,\n        items?: IMenuElement[], // ISpacer | ISeparator | INavItem | IMenuItem | ICustomHTML\n        \n        active?: boolean,\n        count?: number,\n        countColor?: \"danger\" | \"secondary\" | \"primary\" | \"success\",\n        group?: string,\n        hotkey?: string,\n        html?: string,\n        icon?: string,\n        size?: \"small\" | \"medium\" | \"auto\",\n        tooltip?: string,\n        twoState?: boolean,\n\n        css?: string | string[],\n        disabled?: boolean,\n        hidden?: boolean,\n    }\n]\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Toggle Control in DHTMLX Suite\nDESCRIPTION: This snippet shows the configuration options for the Toggle control in DHTMLX Suite. It includes attributes like css, width, height, padding, full, text, and more. Each attribute is specified with its corresponding data type.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/form_setproperties_method.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    css: string,\n    width: string | number | \"content\",\n    height: string | number | \"content\",\n    padding: string | number,\n    full: boolean,\n    text: string,\n    icon: string,\n    offText: string,\n    offIcon: string,\n    value: string | number\n}\n```\n\n----------------------------------------\n\nTITLE: Manipulating ToggleGroup Control\nDESCRIPTION: Demonstrates how to access and manipulate a ToggleGroup control using the form's getItem() method to hide the control.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/togglegroup.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst value = form.getItem(\"ToggleGroup\").hide();\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX Window with minWidth Configuration in JavaScript\nDESCRIPTION: This snippet demonstrates how to instantiate a DHTMLX Window component in JavaScript while specifying a minimum width using the 'minWidth' property. The example sets the minimum width to 170 pixels and then displays the window using the 'show()' method. Dependency: DHTMLX Suite library is required and should be imported beforehand. The 'minWidth' parameter sets a lower boundary for window resizing; by default, it is 100. Inputs include the configuration object with 'minWidth', and the output is a visible window constrained by the set minimum width.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/window/api/window_minwidth_config.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst dhxWindow = new dhx.Window({\n    minWidth:170\n});\n\ndhxWindow.show();\n```\n\n----------------------------------------\n\nTITLE: Checking if a Toolbar Item is Selected\nDESCRIPTION: Using the isSelected() method to determine whether a specific toolbar item is currently selected.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/toolbar/common_methods.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ntoolbar.isSelected(\"web\"); // -> returns true/false\n```\n\n----------------------------------------\n\nTITLE: Showing and Hiding NavItems in JavaScript\nDESCRIPTION: Shows how to programmatically show or hide NavItems using the toolbar's show() and hide() methods.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/toolbar/navitem.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ntoolbar.show(id);\ntoolbar.hide(id);\n```\n\n----------------------------------------\n\nTITLE: Adding an Empty DHTMLX Ribbon Block Programmatically in JavaScript\nDESCRIPTION: Demonstrates how to add a new, empty Block control to a DHTMLX Ribbon instance programmatically using the `ribbon.data.add()` method. The configuration object specifies the block's title, type, unique ID ('files'), and item arrangement direction ('row').\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/ribbon/block.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nribbon.data.add({\n    title:\"File\",\n    type:\"block\",\n    id:\"files\",\n    direction:\"row\"\n});\n```\n\n----------------------------------------\n\nTITLE: Handling beforeShow Event in DHTMLX Form Select Control\nDESCRIPTION: This example demonstrates how to attach an event handler to the beforeShow event of a Select control in a DHTMLX Form. The handler receives the current value and returns true to allow the control to be shown.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/select/select_beforeshow_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"select\").events.on(\"beforeShow\", function(value) {\n    console.log(\"beforeShow\", value);\n    return true;\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Disabled Tabs in DHTMLX Tabbar\nDESCRIPTION: Demonstrates how to disable one or multiple tabs in DHTMLX Tabbar\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tabbar/configuring_tabbar.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// make one tab disabled\nconst tabbar = new dhx.Tabbar(\"tabbar_container\", {\n    disabled: \"London\"\n});\n\n// make several tabs disabled\nconst tabbar = new dhx.Tabbar(\"tabbar_container\", {\n    disabled: [\"Paris\", \"Rome\"]\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring DHTMLX Sidebar Separator in JavaScript\nDESCRIPTION: Code example showing how to configure a separator in a DHTMLX Sidebar data structure. The separator requires a type property and can optionally include an id. Used to create visual separation between sidebar items.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/sidebar/api/api_separator_properties.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = [\n    {\n        type: \"separator\",\n        id?: string | number,\n    },\n    // more Sidebar controls\n]\n```\n\n----------------------------------------\n\nTITLE: Handling uploadProgress Event in DHTMLX Form SimpleVault Control (JavaScript)\nDESCRIPTION: This example demonstrates how to attach an event handler to the uploadProgress event of a SimpleVault control in a DHTMLX Form. The event provides progress percentage and current value information during file uploads.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/simplevault/simplevault_uploadprogress_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"simpleVault\").events.on(\"uploadProgress\", function(progress, value) {\n    console.log(\"uploadProgress\", progress, value);\n});\n```\n\n----------------------------------------\n\nTITLE: Checking visibility of Layout cell in JavaScript\nDESCRIPTION: Shows how to check the visibility of a Layout cell using the isVisible method.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/layout/work_with_layout.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nlayout.getCell(\"sidebar\").isVisible(); // -> true|false\n```\n\n----------------------------------------\n\nTITLE: Detaching Event Listeners from DHTMLX Slider in JavaScript\nDESCRIPTION: This code snippet shows how to attach an event listener to a DHTMLX Slider and then detach it. It first attaches a 'change' event listener, then demonstrates how to detach the same event.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/slider/handling_events.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nslider.events.on(\"change\", function(newValue, oldValue, isRange) {\n    console.log(\"The value of a slider has changed to \"+slider.getValue());\n});\n\nslider.events.detach(\"change\");\n```\n\n----------------------------------------\n\nTITLE: Handling focus Event for Radiogroup in DHTMLX Form (JavaScript)\nDESCRIPTION: This snippet demonstrates how to attach an event listener to the 'focus' event of a Radiogroup control in a DHTMLX Form. The event handler logs the current value and id of the focused radio button.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/radiogroup/radiogroup_focus_event.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nform.getItem(\"radiogroup\").events.on(\"focus\", (value, id) => {\n    console.log(\"focus\", value, id);\n});\n```\n\n----------------------------------------\n\nTITLE: Available Configuration Properties for Spacer Control\nDESCRIPTION: This code snippet shows the structure of configuration properties that can be modified using the setProperties() method for a Spacer control, including CSS class, height, padding, and width options.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/spacer/spacer_setproperties_method.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    css: string,\n    height: string|number|\"content\"\n    padding: string|number\n    width: string|number|\"content\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Widget from Tabbar in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the getWidget() method to obtain the widget attached to a Tabbar instance. The method returns an object representing the attached widget.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tabbar/api/tabbar_getwidget_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntabbar.getWidget();\n```\n\n----------------------------------------\n\nTITLE: JSON Template for Custom HTML in DHTMLX Menu\nDESCRIPTION: JSON format template for a Custom HTML object in DHTMLX Menu, demonstrating properties like id, parent, type, html, and css.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/menu/data_loading.md#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": \"custom\",\n    \"parent\": \"edit\",\n    \"type\": \"customHTML\",\n    \"html\": \"<img src='../logo.svg' alt=''/>\",\n    \"css\": \"custom-image\"\n}\n```\n\n----------------------------------------\n\nTITLE: Attaching Chart to Layout\nDESCRIPTION: Demonstrates how to attach the initialized chart to a specific cell in the layout named 'chart-cell'.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tutorial/basic_application/step6.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlayout.cell(\"chart-cell\").attach(chart);\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Input for Date Picker\nDESCRIPTION: Creates a read-only input field with ID 'date-input' that will display the selected date and trigger the calendar popup when clicked.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar/datepicker.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<input type=\"text\" id=\"date-input\" style=\"width: 200px;\" readonly/>\n```\n\n----------------------------------------\n\nTITLE: Unselecting a Specific Item in JavaScript DataView\nDESCRIPTION: Removes selection from a specific item in the DataView using the remove() method of the selection object.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/dataview/usage_selection.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ndataview.selection.remove(\"2\"); \n```\n\n----------------------------------------\n\nTITLE: Initializing Combo Box with Help Message in JavaScript\nDESCRIPTION: Creates a new DHTMLX Combo Box instance with a help message icon. The help message adds a question mark icon next to the combo input field, particularly useful when using the Combobox within Forms. Feature was added in v6.4.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/combobox/api/combobox_helpmessage_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst combobox = new dhx.Combobox(\"combo_container\",{\n    helpMessage:\"Some text\"\n});\n```\n\n----------------------------------------\n\nTITLE: Defining the getCurrentMode API for Calendar in JavaScript/TypeScript\nDESCRIPTION: API signature for the getCurrentMode method which returns the current mode of displaying Calendar. It can return one of four possible display modes: calendar, year, month, or timepicker.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar2/api/calendar_getcurrentmode_method.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nstring getCurrentMode();\ngetCurrentMode(): ViewMode;\nexport declare type ViewMode = \"calendar\" | \"year\" | \"month\" | \"timepicker\";\n```\n\n----------------------------------------\n\nTITLE: AwaitRedraw Implementation in DHTMLX Window\nDESCRIPTION: Example demonstrating how to use awaitRedraw in a Window component to ensure proper focus on an input element after window display.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/helpers/await_redraw.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ndhxWindowObj.attachHTML(\"<input id='\\\"myInput\\\"'></input>\");\n\ndhxWindowObj.events.on(\"afterShow\", function(id){ \n    dhx.awaitRedraw().then(() => {\n        const el = document.getElementById(\"myInput\");\n        el.focus();\n    })                      \n});\n```\n\n----------------------------------------\n\nTITLE: Attaching Calendar to Popup\nDESCRIPTION: Attaches the Calendar component to the Popup using the attach method, which places the calendar inside the popup container.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar/datepicker.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\npopup.attach(calendar);\n```\n\n----------------------------------------\n\nTITLE: Handling dragStart Event in DHTMLX DataView\nDESCRIPTION: Example of attaching an event handler to the dragStart event of a DataView component. The event fires when dragging of an item starts and provides data about the drag operation and the original mouse event.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/dataview/api/dataview_dragstart_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndataview.events.on(\"dragStart\", function(data, events) {\n    // your logic here\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Checkbox Value in DHTMLX Form (JavaScript)\nDESCRIPTION: Demonstrates how to use the getValue() method to retrieve the value or state of a checkbox control in a DHTMLX Form. The method returns either a string value or a boolean state depending on the control's configuration.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/checkbox/checkbox_getvalue_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// returns a value if the value is specified for the checkbox\nconst value = form.getItem(\"checkbox\").getValue(); // -> \"checkbox_value\"\n\n// returns a state if the value is not specified for the checkbox\nconst state = form.getItem(\"checkbox\").getValue(); // -> true/false\n```\n\n----------------------------------------\n\nTITLE: Configuring Grid with footerAutoHeight in JavaScript\nDESCRIPTION: This snippet demonstrates how to initialize a DHTMLX Grid with the footerAutoHeight option enabled. It disables autoHeight for data, header, and footer, but enables it specifically for the footer.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_footerautoheight_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst grid = new dhx.Grid(\"grid\", {\n    columns: [\n        // columns config\n    ],\n    data: dataset,\n    autoHeight: false, // disable autoHeight in the data, the header and the footer\n    footerAutoHeight: true // enable autoHeight in the footer\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Calendar in Range Mode\nDESCRIPTION: Initializes a Calendar in range mode allowing selection of a date range with predefined start and end dates.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar/configuring.md#2025-04-22_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst calendar = new dhx.Calendar(\"calendar_container\", {\n    css: \"dhx_widget--bordered\",\n    range: true,\n    value: [\"25/06/20\", \"07/07/20\"]\n});\n```\n\n----------------------------------------\n\nTITLE: Title JSON Template for DHTMLX Ribbon (JavaScript/JSON)\nDESCRIPTION: Provides the JSON template for a 'title' element used as a label or heading within a DHTMLX Ribbon. It includes an `id`, `type: \"title\"`, the text `value` to display, and an optional `tooltip`.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/ribbon/data_loading.md#2025-04-22_snippet_17\n\nLANGUAGE: jsx\nCODE:\n```\n// title\n{\n    id: \"collection\",        \n    type: \"title\",                 \n    value: \"Music\",                \n    tooltip: \"Current collection\"    \n}\n```\n\n----------------------------------------\n\nTITLE: Configuring exportStyles for DHTMLX Chart in JavaScript\nDESCRIPTION: This snippet demonstrates how to set up a DHTMLX Chart with the exportStyles option disabled. This configuration prevents CSS styles from being sent to the export service, reducing the size of exported data.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/chart/api/chart_exportstyles_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst chart = new dhx.Chart(\"chart_container\", {\n    type:\"area\",\n    scales: {\n        \"bottom\" : {\n            text: 'month'\n        },\n        \"left\" : {\n            padding: 10,\n            max: 90\n        }\n    },\n    series: [\n        {\n           value: 'company A',\n           strokeWidth: 2\n           // more options   \n        }\n    ],\n    exportStyles: false\n});\n```\n\n----------------------------------------\n\nTITLE: Checking if Avatar Control is Disabled in DHTMLX Form (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to use the isDisabled() method to check if an Avatar control in a DHTMLX Form is disabled. The method returns a boolean value indicating the disabled state of the control.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/avatar/avatar_isdisabled_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nform.getItem(\"avatar\").isDisabled(); \n// -> true/false\n```\n\n----------------------------------------\n\nTITLE: Including DHTMLX Chart Source Files in HTML\nDESCRIPTION: This snippet shows how to include the necessary JavaScript and CSS files for DHTMLX Chart in an HTML file. It demonstrates the inclusion for both standalone Chart and as part of the Suite package.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/chart/initialization.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"text/javascript\" src=\"../../codebase/chart.js\"></script>\n<link rel=\"stylesheet\" href=\"../../codebase/chart.css\">\n```\n\nLANGUAGE: html\nCODE:\n```\n<link type=\"text/css\" href=\"../codebase/suite.css\">\n<script src=\"../codebase/suite.js\" type=\"text/javascript\"></script>\n```\n\n----------------------------------------\n\nTITLE: Defining summary configuration for DHTMLX Grid in JavaScript\nDESCRIPTION: This snippet shows the TypeScript interface for the summary configuration option of DHTMLX Grid. It defines the structure for creating calculated values based on column data.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_summary_config.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\ntype TSummaryMethod = (rows: IRow[]) => string | number;\n\ninterface ISummary {\n    [key: string]: [string, string] | TSummaryMethod;\n}\nsummary?: ISummary;\n```\n\n----------------------------------------\n\nTITLE: Applying DHTMLX Predefined CSS Class to Menu in JavaScript\nDESCRIPTION: This snippet shows how to use a predefined CSS class provided by the DHTMLX library to style the Menu component. It applies a white background to the Menu widget.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/menu/api/menu_css_config.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst menu = new dhx.Menu(\"menu_container\", {\n    css: \"dhx_widget--bg_white\"\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Initially Selected Date as String\nDESCRIPTION: Preselects a date by providing a date string in the calendar's format.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar2/configuring.mdx#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// selects a date as a string\nvar calendar = new dhx.Calendar(\"calendar_container\", {\n    value: (\"10/02/19\")\n});\n```\n\n----------------------------------------\n\nTITLE: Using Predefined DHTMLX CSS Classes with Sidebar\nDESCRIPTION: Example showing how to apply predefined DHTMLX CSS classes to a Sidebar widget. This snippet uses the dhx_widget--bg_white class to set a white background for the Sidebar.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/sidebar/api/sidebar_css_config.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst sidebar = new dhx.Sidebar(\"sidebar_container\", {\n    css: \"dhx_widget--bg_white\"\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX Tabbar with Right Alignment in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to initialize a `dhx.Tabbar` component within a container element ('tabbar_container'). It configures the tabbar with multiple views, each having a tab definition and associated content properties. Crucially, it sets the `tabAlign` property to 'right', causing the tabs to be aligned to the right side of the tabbar.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tabbar/api/tabbar_tabalign_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst tabbar = new dhx.Tabbar(\"tabbar_container\", {\n    views:[\n        { tab: \"left\", css:\"panel flex\", header:\"Left\"},\n        { tab: \"west\", css:\"panel flex\", header:\"West\"},\n        { tab: \"east\", css:\"panel flex\", header:\"East\"},\n        { tab: \"right\", css:\"panel flex\", header:\"Right\" }\n    ],\n    tabAlign: \"right\"\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Row Drop Cancellation in DHTMLX Grid\nDESCRIPTION: Example showing how to attach an event handler for the cancelRowDrop event in DHTMLX Grid. The event triggers when the mouse pointer moves outside row boundaries during drag operations and provides data about the source and target rows.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_cancelrowdrop_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngrid.events.on(\"cancelRowDrop\", (data, event) => {\n  // your logic here\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing TreeGrid Component - DHTMLX TreeGrid (Pre v9.0) - JavaScript\nDESCRIPTION: Demonstrates creating a TreeGrid using the legacy dhx.TreeGrid class before v9.0, where configuration is provided for columns and data. Depends on dhtmlx.TreeGrid being available. Expects a container ID and configuration object specifying columns and data dataset; result is an interactive tree grid widget.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/migration.md#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst treegrid = new dhx.TreeGrid(\"treegrid_container\", {\n    columns: [\n        // columns config\n    ],\n    data: dataset\n});\n```\n\n----------------------------------------\n\nTITLE: Defining 'inputFocus' Event Signature in DHTMLX Ribbon (TypeScript)\nDESCRIPTION: Defines the type signature for the `inputFocus` event handler in the DHTMLX Ribbon component using TypeScript notation. It specifies that the event callback function receives one argument, `id`, which can be either a string or a number, and the function returns `void` (no value).\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/ribbon/api/ribbon_inputfocus_event.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{'inputFocus: (id: string | number) => void;'}\n```\n\n----------------------------------------\n\nTITLE: Declaring maxWidth Property for Grid Column in JSX\nDESCRIPTION: This snippet shows the usage syntax for the maxWidth property in a Grid column configuration. It defines maxWidth as an optional number property.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/gridcolumn_properties/gridcolumn_maxwidth_property.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nmaxWidth?: number;\n```\n\n----------------------------------------\n\nTITLE: Styling DHTMLX Window with Custom CSS\nDESCRIPTION: Example showing how to apply custom CSS styles to a DHTMLX Window component using the css config option. Demonstrates setting background color through CSS variables.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/window/api/window_css_config.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<style>\n    .custom {\n        --dhx-background-primary: #efefef;\n    }\n</style>\n\n<script>\n    const dhxWindow = new dhx.Window({\n        height: 400,\n        width: 400,\n        title: \"window\",\n        css: \"custom\",\n        html,\n    });\n    \n    dhxWindow.show();\n</script>\n```\n\n----------------------------------------\n\nTITLE: Defining numberMask Configuration Options in JavaScript\nDESCRIPTION: This code snippet shows the structure and available options for the numberMask configuration. It can be set as an object with various properties or as a boolean value for predefined templates.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/gridcolumn_properties/gridcolumn_numbermask_property.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nnumberMask?:\n    | {\n        prefix?: string, // \"\" by default (before the value)\n        suffix?: string, // \"\" by default (after the value)\n        groupSeparator?: string, // \",\" by default\n        decSeparator?: string, // \".\" by default\n        allowNegative?: boolean, // true by default\n        maxIntLength?: number, \n        maxDecLength?: number, \n        minDecLength?: number // 0 by default\n      }\n    | boolean;\n```\n\n----------------------------------------\n\nTITLE: Handling input Event for Colorpicker in DHTMLX Form (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to attach an event listener to the 'input' event of a Colorpicker control in a DHTMLX Form. The event fires when a user manually enters a value in the input field. It logs the entered value to the console.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/colorpicker/colorpicker_input_event.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nform.getItem(\"colorpicker\").events.on(\"input\", function(inputValue) {\n    console.log(\"input\", inputValue);\n});\n```\n\n----------------------------------------\n\nTITLE: Binding Double-Click Event to DHTMLX Grid\nDESCRIPTION: Event handler for double-clicking grid cells to open the edit window.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tutorial/binding_components/step6.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ngrid.events.on(\"CellDblClick\", function(row,column,e){\n    openEditWindow(row);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Percentage Column Display in Grid (JSX)\nDESCRIPTION: Shows the transition from type:\"percent\" to numberMask configuration for displaying percentage values in grid columns between v8.x and v9.0\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/migration.md#2025-04-22_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\n{ \n    width: 150, id: \"yearlyChange\", header: [{ text: \"Yearly Change\" }], \n    type: \"percent\"\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\n{ \n    width: 120, id: \"yearlyChange\", header: [{ text: \"Yearly Change\" }], \n    numberMask: { suffix: \"%\" }    \n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Toolbar Data Configuration Interface in TypeScript\nDESCRIPTION: This TypeScript signature snippet defines the optional 'data' property for configuring a DHTMLX Toolbar. The property can be omitted or supplied as an array of objects representing toolbar items. This interface is used to enforce structure within TypeScript projects using the DHTMLX Suite Toolbar component.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/toolbar/api/toolbar_data_config.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n{'data?: object[];'}\n```\n\n----------------------------------------\n\nTITLE: Showing Popup on Input Click\nDESCRIPTION: Sets up an event listener to show the popup with calendar when the date input field is clicked, positioning the popup relative to the input element.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar/datepicker.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst dateInput = document.getElementById(\"date-input\");\ndateInput.addEventListener(\"click\", function() {\n    popup.show(dateInput);\n});\n```\n\n----------------------------------------\n\nTITLE: Repainting Layout in JavaScript using DHTMLX\nDESCRIPTION: This snippet demonstrates how to use the paint() method to repaint a Layout on a page. The method takes no arguments and returns void.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/layout/api/cell/layout_cell_paint_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlayout.paint();\n```\n\n----------------------------------------\n\nTITLE: Changing Icons in DHTMLX Tree using Font Awesome\nDESCRIPTION: Shows how to change the default icons in a DHTMLX Tree using Font Awesome icons. It includes the necessary CDN link and JavaScript code to update item icons.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree/setting_tree_appearance.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"text/javascript\" src=\"../../codebase/tree.js\"></script>\n<link rel=\"stylesheet\" href=\"../../codebase/tree.css\">\n\n<link rel=\"stylesheet\" href=\"https://use.fontawesome.com/releases/v5.3.1/css/all.css\" \n  integrity=\"sha384-mzrmE5qonljUremFsqc01SB46JvROS7bZs3IO2EmfFsd15uHvIt+Y8vEf7N7fWAU\"  \n  crossorigin=\"anonymous\">\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntree.data.update(\"history\", {\n    icon:{\n        file:\"fa fa-[iconname]\",\n        openFolder:\"fa fa-[iconname]\",\n        folder:\"fa fa-[iconname]\"\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring DataView with keyNavigation in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a new DataView instance with the keyNavigation option set to false. This disables navigation using arrow keys in the DataView.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/dataview/api/dataview_keynavigation_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst dataview = new dhx.DataView(\"dataview_container\", {\n    itemsInRow: 5, \n    keyNavigation: false\n});\n```\n\n----------------------------------------\n\nTITLE: Toggle Control Properties Structure\nDESCRIPTION: Example showing the structure of properties object returned by getProperties() method for a Toggle control.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/toggle/toggle_getproperties_method.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    css: \"\",\n    width: \"content\",\n    height: \"content\",\n    padding: \"\",\n    full: false,\n    text: \"Visible\",\n    icon: \"dxi dxi-eye\",\n    offText: \"Invisible\",\n    offIcon: \"dxi dxi-eye-off\",\n    value: undefined\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Toolbar Input Event in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to attach an event listener to the 'input' event of a DHTMLX Toolbar instance using the `events.on()` method. The callback function receives the `id` of the specific input control and its current `value` as arguments. In this example, it logs the entered value to the console whenever text is entered into any input field within the toolbar. It requires an existing `toolbar` object initialized from the DHTMLX library.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/toolbar/api/toolbar_input_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntoolbar.events.on(\"input\", function(id, value){\n    console.log(\"You've entered: \" + value);\n});\n```\n\n----------------------------------------\n\nTITLE: Handling DataView Double Click Events in JavaScript\nDESCRIPTION: Example showing how to attach an event handler for double-clicking items in a DataView component. The handler receives the item ID and native event object as parameters and logs the selected item's ID to the console.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/dataview/api/dataview_doubleclick_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndataview.events.on(\"doubleClick\", function(id, e){\n   console.log(\"The item \"+ dataview.selection.getId(id) +\" was double clicked.\");\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Checkbox Validation Event in DHTMLX Form\nDESCRIPTION: Example showing how to attach an event handler to the beforeValidate event of a checkbox form control. The handler receives the checkbox value and must return a boolean to either allow or cancel the validation.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/checkbox/checkbox_beforevalidate_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"checkbox\").events.on(\"beforeValidate\", function(value) {\n    console.log(\"beforeValidate\", value);\n    return true;\n});\n```\n\n----------------------------------------\n\nTITLE: Destroying a Toolbar Instance with destructor() in DHTMLX JavaScript\nDESCRIPTION: This snippet demonstrates calling the destructor() method on a Toolbar instance in JavaScript using the DHTMLX Suite. The destructor() method is essential for proper resource management, as it removes the Toolbar UI component from the DOM and releases any allocated resources. No additional dependencies are required aside from the DHTMLX Suite library and a previously created Toolbar instance. There are no input or output parameters for this method, and no value is returned.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/toolbar/api/toolbar_destructor_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ntoolbar.destructor();\n```\n\n----------------------------------------\n\nTITLE: Controlling Separator Visibility\nDESCRIPTION: Demonstrates how to programmatically show or hide a separator in the ribbon using the showItem and hideItem methods. These methods require the separator's ID as a parameter.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/ribbon/separator.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nribbon.showItem(id);\nribbon.hideItem(id);\n```\n\n----------------------------------------\n\nTITLE: Adding Footer Controls to DHTMLX Window\nDESCRIPTION: Adds 'Apply' and 'Cancel' buttons to the window footer using the data collection add() method. The buttons are configured with specific types, values, views, and colors.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tutorial/binding_components/step1.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ndhxWindow.footer.data.add([\n    {type: \"spacer\"},\n    {id: \"cancel\", type: \"button\", value: \"Cancel\", view: \"flat\", color: \"danger\"},\n    {id: \"apply\", type: \"button\", value: \"Apply\", view: \"flat\", color: \"primary\"}\n],0);\n```\n\n----------------------------------------\n\nTITLE: Handling afterHide Event in Timepicker Control with JavaScript\nDESCRIPTION: This example demonstrates how to attach an event handler to the afterHide event of a Timepicker control in a DHTMLX form. The handler receives the current value of the control and an initialization flag as parameters.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/timepicker/timepicker_afterhide_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"timepicker\").events.on(\"afterHide\", function(value, init) {\n    console.log(\"afterHide\", value, init);\n});\n```\n\n----------------------------------------\n\nTITLE: Checking Save Status with isSaved Method\nDESCRIPTION: Demonstrates how to verify if changes have been successfully saved using the isSaved() method.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree_collection/api/treecollection_save_method.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ntoolbar.data.saveData.then(function () {\n    console.log(toolbar.data.isSaved());\n});\n```\n\n----------------------------------------\n\nTITLE: Input JSON Template for DHTMLX Ribbon (JavaScript/JSON)\nDESCRIPTION: Provides the JSON template for an 'input' field control within a DHTMLX Ribbon. Key properties include `id`, `type: \"input\"`, initial `value`, `placeholder` text, `width`, and an associated `label`.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/ribbon/data_loading.md#2025-04-22_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\n// input\n{\n    id:    \"lookup\",                      \n    type: \"input\",                       \n    value: \"\",                         \n    placeholder: \"Type in to search...\",      \n    width: 100,                          \n    label: \"Search\"\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing List Container HTML\nDESCRIPTION: HTML markup for creating the List widget container with specified height and margin.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/guides/datacollection_guide.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!-- component container -->\n<div id=\"list\" style=\"height: 700px; margin: 20px\"></div>\n```\n\n----------------------------------------\n\nTITLE: Defining TooltipTemplate Function Type in JSX\nDESCRIPTION: Type definition for the tooltipTemplate function that defines the structure and parameters for customizing grid cell tooltips.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/gridcolumn_properties/gridcolumn_tooltiptemplate_property.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\ntooltipTemplate?: (cellValue, row: IRow, column: ICol) => string;\n```\n\n----------------------------------------\n\nTITLE: Checking Visibility of Checkbox Group Element in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the isVisible() method to check if a specific element within a CheckboxGroup control is visible. The method returns a boolean value indicating visibility.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/checkbox_group/checkboxgroup_isvisible_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nform.getItem(\"CheckboxGroup\").isVisible(\"id_1\"); // -> true/false\n```\n\n----------------------------------------\n\nTITLE: Initializing Calendar with String Date\nDESCRIPTION: Example of creating a calendar instance with a date selected using a string value.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar/api/calendar_value_config.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst calendar = new dhx.Calendar(\"calendar_container\", {\n    value: (\"10/02/19\")\n});\n```\n\n----------------------------------------\n\nTITLE: Loading External Data into DataView in JavaScript\nDESCRIPTION: This example demonstrates how to load data into a DHTMLX DataView from an external JSON file using the load() method of DataCollection. It also shows how to handle the asynchronous nature of data loading.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/dataview/data_loading.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst dataview = new dhx.DataView(\"dataview_container\");\ndataview.data.load(\"../common/dataset.json\");\n\ndataview.data.load(\"/some/data\").then(function(){\n   // some logic here\n});\n```\n\n----------------------------------------\n\nTITLE: Using mapRange() Method in JavaScript DataCollection\nDESCRIPTION: Demonstrates how to use the mapRange() method to iterate over a range of items in a DataCollection and create a new array. The method takes start and end positions and a callback function that processes each item.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/data_collection/api/datacollection_maprange_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst result = component.data.mapRange(0, 20, function(item, index, array) {\n    console.log(item.id, index);\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Grid Header Implementation\nDESCRIPTION: Simple example demonstrating how to initialize a Grid with basic header configuration for a single column.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/gridcolumn_properties/gridcolumn_header_property.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst grid = new dhx.Grid(\"grid_container\", {\n    columns: [\n        { id: \"title\", header: [{ text: \"Title\" }] },\n        // more columns configuration objects\n    ],\n    // more options\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX Tabbar with Auto Height Configuration\nDESCRIPTION: Creates a new Tabbar instance with tabAutoHeight enabled. This configuration automatically adjusts tab heights to match the container height when using 'right' or 'left' mode.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tabbar/api/tabbar_tabautoheight_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst tabbar = new dhx.Tabbar(\"tabbar_container\", {\n    views:[\n        { tab: \"left\", css:\"panel flex\", header:\"Left\"},\n        { tab: \"west\", css:\"panel flex\", header:\"West\"},\n        { tab: \"east\", css:\"panel flex\", header:\"East\"},\n        { tab: \"right\", css:\"panel flex\", header:\"Right\" }\n    ],\n    tabAutoHeight: true,\n    mode: \"right\"\n});\n```\n\n----------------------------------------\n\nTITLE: Removing Calendar Instance with destructor() Method in JavaScript\nDESCRIPTION: This code snippet demonstrates how to use the destructor() method to remove a calendar instance and release occupied resources. It's a simple method call on the calendar object.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar/api/calendar_destructor_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncalendar.destructor();\n```\n\n----------------------------------------\n\nTITLE: Restoring DHTMLX Ribbon State in JavaScript\nDESCRIPTION: Creates a new DHTMLX Ribbon instance (`ribbon2`) and then restores its state using data previously saved from another ribbon (`ribbon1`). The saved state, stored in the `state` variable (an array of JSON objects obtained via `serialize()`), is loaded into `ribbon2` using the `ribbon2.data.parse()` method.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/ribbon/data_loading.md#2025-04-22_snippet_6\n\nLANGUAGE: js\nCODE:\n```\n// creating a new ribbon\nconst ribbon2 = new dhx.Ribbon(\"ribbon_container2\");\n// parsing the state of ribbon1 into ribbon2\nribbon2.data.parse(state);\n```\n\n----------------------------------------\n\nTITLE: Initializing Form with hidden Config in JavaScript\nDESCRIPTION: This example demonstrates how to create a DHTMLX Form with the hidden property set to true, which makes the form initially hidden. The form is created with a CSS class for styling and placed in a container with ID 'form_container'.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/form_hidden_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst form = new dhx.Form(\"form_container\", {\n    css: \"dhx_widget--bordered\",\n    hidden: true\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Custom CSS Classes in HTML\nDESCRIPTION: This HTML snippet shows how to define custom CSS classes that can be applied to the Sidebar for styling customization.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/sidebar/customization.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<style>\n    .my-first-class {\n        /*some styles*/\n    }\n    \n    .my-second-class {\n        /*some styles*/\n    }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Setting Toggle Properties in JavaScript Form\nDESCRIPTION: Example of using setProperties() method to update Toggle control attributes including icon, width, and padding.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/toggle/toggle_setproperties_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"toggle\").setProperties({\n    icon: \"dxi dxi-eye\",\n    width: \"100px\",\n    padding: 20\n});\n```\n\n----------------------------------------\n\nTITLE: Event Handler for Colorpicker Validation in DHTMLX Form\nDESCRIPTION: Demonstrates how to attach an event handler to the afterValidate event of a Colorpicker form control. The handler receives the validated value and validation result as parameters.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/colorpicker/colorpicker_aftervalidate_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"colorpicker\").events.on(\"afterValidate\", function(value, isValidate) {\n    console.log(\"afterValidate\", value, isValidate);\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Separator to DHTMLX Sidebar in JavaScript\nDESCRIPTION: This snippet demonstrates how to add a new Separator to a DHTMLX Sidebar using the add() method of Tree Collection. The separator is defined as an object with a 'type' property set to 'separator'.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/sidebar/separator.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsidebar.data.add({\n    type:\"separator\"\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Radial Scales for Radar Chart in JavaScript\nDESCRIPTION: This code snippet shows the structure for configuring radial scales used in Radar charts. It includes options for specifying the data property, zebra striping, and axis display.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/chart/api/chart_scales_config.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nscales: {\n    radial: {\n        value?: string,\n        zebra?: boolean,\n        showAxis?: boolean\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom CSS Classes for DHTMLX Ribbon Controls - CSS\nDESCRIPTION: This CSS snippet demonstrates how to define custom styles, such as '.my_first_class' and '.my_second_class', to be applied to Ribbon containers within the DHTMLX Suite. These classes should be created prior to JavaScript Ribbon initialization so they can be referenced in the 'menuCss' configuration. The styles can contain any valid CSS rules, which will then be applied to all relevant Ribbon elements.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/ribbon/api/ribbon_menucss_config.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n<style>\\n    .my_first_class {\\n        /*some styles*/\\n    }\\n \\n    .my_second_class {\\n        /*some styles*/\\n    }\\n</style>\n```\n\n----------------------------------------\n\nTITLE: Calling the DHTMLX Ribbon destructor() Method in JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to invoke the `destructor()` method on a DHTMLX Ribbon instance (represented by the `ribbon` variable). Calling this method effectively removes the Ribbon component from the web page and releases associated system resources. It requires an existing `ribbon` instance and returns `void`. A related sample demonstrates its usage.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/ribbon/api/ribbon_destructor_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nribbon.destructor();\n```\n\n----------------------------------------\n\nTITLE: Creating Container for Calendar\nDESCRIPTION: HTML snippet showing how to add a container for Calendar with an id that will be referenced during initialization.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar/how_to_start.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"calendar_container\"></div>\n```\n\n----------------------------------------\n\nTITLE: Handling afterDrag Event in DHTMLX List (JavaScript)\nDESCRIPTION: This example demonstrates how to attach an event handler to the afterDrag event of a DHTMLX List component. The event fires after dragging of an item has finished and provides data about the drag operation and the native mouse event.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/list/api/list_afterdrag_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlist.events.on(\"afterDrag\", function(data, events) {\n    // your logic here\n});\n```\n\n----------------------------------------\n\nTITLE: Styling Radiobutton with Custom Appearance in DHTMLX Suite\nDESCRIPTION: HTML markup for creating a styled radiobutton with custom visual appearance. Uses dhx_radiobutton classes to hide the native input while providing a visual replacement that maintains the same functionality.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/helpers/base_elements.md#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<!-- Create a label for a radiobutton and put it and an input in one line inside the form-group-->\n<label class=\"dhx_form-group dhx_radiobutton dhx_form-group--inline\" style=\"margin-left: calc(116px);\">\n    <!-- Hide a native browser radiobutton but save its behavior-->    \n    <input type=\"radiobutton\" class=\"dhx_radiobutton__input\">\n    <!-- Display the radiobutton with its native browser behavior visually-->\n    <span class=\"dhx_radiobutton__visual-input\"></span>\n    <!-- Style the radiobutton label-->\n    <span class=\"dhx_label \">I am radiobutton</span>\n</label>\n```\n\n----------------------------------------\n\nTITLE: Using getCustomColors Method in DHTMLX Colorpicker\nDESCRIPTION: This snippet demonstrates how to set custom colors using setCustomColors() and then retrieve them using getCustomColors(). The method returns an array of custom colors that have been set for the colorpicker.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/colorpicker/api/colorpicker_getcustomcolors_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ncolorpicker.setCustomColors([\"#f2f2f2\",\"#8ac5d9\",\"#ec9875\",\"#7a8523\"]);\n\nconst colors = colorpicker.getCustomColors();\n// -> [\"#f2f2f2\",\"#8ac5d9\",\"#ec9875\",\"#7a8523\"]\n```\n\n----------------------------------------\n\nTITLE: Handling afterShow Event for Checkbox in DHTMLX Form (JavaScript)\nDESCRIPTION: This snippet demonstrates how to attach an event listener to the afterShow event of a Checkbox control in a DHTMLX Form. The event fires after the control is shown and provides the current value of the checkbox.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/checkbox/checkbox_aftershow_event.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nform.getItem(\"checkbox\").events.on(\"afterShow\", function(value) {\n    console.log(\"afterShow\", value);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Grid Column Closability in JavaScript\nDESCRIPTION: This code snippet demonstrates how to set up a Grid with a column that has its grouping permanently enabled. The 'closable' option is set to false for the 'country' column, preventing it from being closed in the group panel.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/gridcolumn_properties/gridcolumn_closable_property.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst grid = new dhx.Grid(\"grid_container\", {\n    columns: [\n        {\n            id: \"country\",\n            header: [{ text: \"Country\" }],\n            // grouping of the \"country\" column is permanently enabled\n            // and can't be switched off via the group panel\n            closable: false, \n        },\n        // more columns configuration objects\n    ],\n    group: {\n        order: [ \"country\" ]\n    },\n    // more options\n});\n```\n\n----------------------------------------\n\nTITLE: Hiding a Popup using DHTMLX Popup (JavaScript)\nDESCRIPTION: Shows how to hide a visible Popup using the hide() method. This method takes no parameters and will close any currently opened Popup instance created with DHTMLX Popup. No inputs or outputs are involved; the Popup simply becomes hidden.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/popup/work_with_popup.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\npopup.hide();\n```\n\n----------------------------------------\n\nTITLE: Text Properties Configuration\nDESCRIPTION: Configuration object for Text control defining text display and styling properties.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/form_getproperties_method.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    css: string,\n    height: string | number | \"content\",\n    helpMessage: string,\n    hiddenLabel: boolean,\n    inputType: string,\n    label: string,\n    labelPosition: string,\n    labelWidth: string | number,\n    padding: string | number,\n    width: string | number | \"content\"\n}\n```\n\n----------------------------------------\n\nTITLE: Handling focus Event in DHTMLX Form Textarea Control\nDESCRIPTION: This code demonstrates how to attach an event handler to the focus event of a Textarea control in a DHTMLX Form. The handler logs the current value of the control to the console when the textarea receives focus.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/textarea/textarea_focus_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"textarea\").events.on(\"focus\", (value) => {\n    console.log(\"focus\", value);\n});\n```\n\n----------------------------------------\n\nTITLE: Styling Checkbox with Custom Appearance in DHTMLX Suite\nDESCRIPTION: HTML markup for creating a styled checkbox with custom visual appearance while maintaining native browser functionality. This uses dhx_checkbox classes to hide the native checkbox input while providing a visual replacement.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/helpers/base_elements.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!-- Create a label for a checkbox and put it and an input in one line inside the form-group-->\n<label class=\"dhx_form-group dhx_checkbox dhx_form-group--inline\" style=\"margin-left: calc(116px);\">\n    <!-- Hide a native browser checkbox but save its behavior-->    \n    <input type=\"checkbox\" class=\"dhx_checkbox__input\">\n    <!-- Display the checkbox with its native browser behavior visually-->\n    <span class=\"dhx_checkbox__visual-input\"></span>\n    <!-- Style the checkbox label-->\n    <span class=\"dhx_label \">I am checkbox</span>\n</label>\n```\n\n----------------------------------------\n\nTITLE: Customizing DHTMLX Message Appearance with CSS and Configuration in HTML and JavaScript\nDESCRIPTION: This example demonstrates both defining a custom CSS class and applying it to a DHTMLX message box. The <style> block creates the .custom class, utilizing DHTMLX CSS variables to override primary font color, background, and font size. The JavaScript section invokes a DHTMLX message with text, icon, and assigns the custom CSS class via the css property. Requires inclusion of DHTMLX Suite and is intended for usage within standard web pages.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/message/customization.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<style>\\n    .custom {\\n        --dhx-font-color-primary: var(--dhx-color-white);\\n        --dhx-background-primary: var(--dhx-color-primary);\\n        --dhx-font-size-normal: 16px;\\n    }\\n</style>\\n\\n<script>\\n    dhx.message({\\n        text: \"Here is dhtmlxMessage\",\\n        icon: \"dxi dxi-close\",\\n        css: \"custom\"\\n    });\\n</script>\\n\n```\n\n----------------------------------------\n\nTITLE: Defining Grid Dataset Structure\nDESCRIPTION: Sample data structure for populating the grid, showing the expected format with user information including ID, name, email, country, and VIP status.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tutorial/basic_application/step4.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar grid_dataset = [\n    {\n        \"id\": 1, \"first_name\": \"Gary\", \"last_name\": \"Ortiz\",\n          \"email\": \"gortiz0@mapy.cz\", \"country\": \"Indonesia\", \"vip\": false \n     },\n     {\n         \"id\": 2, \"first_name\": \"Albert\", \"last_name\": \"Williamson\", \n          \"email\": \"awilliamson1@narod.ru\", \"country\": \"China\",\"vip\": true \n     },\n     { \n          \"id\": 3, \"first_name\": \"Mildred\", \"last_name\": \"Fuller\", \n          \"email\": \"mfuller2@npr.org\", \"country\": \"Peru\", \"vip\": true \n     }\n];\n```\n\n----------------------------------------\n\nTITLE: Enabling Custom Scroll Globally in JavaScript\nDESCRIPTION: This snippet demonstrates how to enable custom scrollbars for all DHTMLX widgets at once using the global configuration variable.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/helpers/custom_scroll.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndhx.scrollViewConfig.enable = true; // false by default\n\n// initializing widgets\n```\n\n----------------------------------------\n\nTITLE: Disabling Selection in DHTMLX List\nDESCRIPTION: Turns off the ability to select List items by setting the selection property to false.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/list/configuration.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst list = new dhx.List(\"list_container\", {selection: false});\n```\n\n----------------------------------------\n\nTITLE: Connecting Calendar to Input Field with Event Handler\nDESCRIPTION: Shows how to create a Calendar instance and connect it to an input field. The Change event handler formats the selected date and updates the input field's value accordingly.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar2/handling_events.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar calendar = new dhx.Calendar(\"calendar_container\");\ncalendar.events.on(\"Change\",(date)=>{ \n    document.getElementById(\"date\").value = date.getFullYear() +\n        \"-\" + (date.getMonth() + 1) + \"-\" +date.getDate();\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX Tabbar with Configuration - JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to create a new DHTMLX Tabbar instance by passing the container's ID and a configuration object. The configuration object specifies the display mode (in this case, 'bottom') and provides the tab structure via the previously defined 'views' array. Dependencies include the existence of the HTML container and dhtmlxSuite loaded in the environment. The result is an initialized Tabbar UI component rendered within the container.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tabbar/init.md#2025-04-22_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nconst tabbar = new dhx.Tabbar(\\\"tabbar_container\\\",{\\n    mode: \\\"bottom\\\",\\n    views: views,\\n    // more config options\\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring a DHTMLX Ribbon Input Control Object in JavaScript\nDESCRIPTION: This snippet illustrates the data structure used to define an Input control within a DHTMLX Ribbon using a JavaScript object literal. It lists available properties such as `id`, `parent`, `value`, `icon`, `label`, `placeholder`, `tooltip`, `width`, `css`, `disabled`, and `hidden`, along with their potential data types. The `type` property must be explicitly set to \"input\" to create this control type.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/ribbon/api/api_input_properties.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nconst data = [\n    {\n        type: \"input\",\n        id?: string | number,\n        parent?: string,\n        value?: string,\n\n        icon?: string,\n        label?: string,\n        placeholder?: string,\n        tooltip?: string,\n        width?: string,\n\n        css?: string | string[],\n        disabled?: boolean,\n        hidden?: boolean,\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Detaching Click Event from DHTMLX Form\nDESCRIPTION: Demonstrates how to detach the click event listener from a DHTMLX Form using the events.detach() method.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/guides/events_guide.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nform.events.detach(\"click\");\n```\n\n----------------------------------------\n\nTITLE: Adding HTML Content to NavItem in JavaScript\nDESCRIPTION: Demonstrates how to insert custom HTML content into a NavItem using the 'html' property.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/toolbar/navitem.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    type: \"navItem\",\n    html: \"<div class='user-button'><img src='../avatars/Avatar.jpg'/></div>\",\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Window with Footer in DHTMLX\nDESCRIPTION: Shows how to create a new Window instance with a footer enabled. The footer is initialized empty by default and can be customized with additional controls.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/window/api/window_footer_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst dhxWindow = new dhx.Window({\n    footer: true\n});\n\ndhxWindow.show();\n```\n\n----------------------------------------\n\nTITLE: Filtering TreeCollection Data by Column in JavaScript\nDESCRIPTION: This example shows how to use the filter() method with an object to filter data in a DHTMLX Grid. The filter is applied to the 'name' column, matching items with the value 'Angola'.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree_collection/api/treecollection_filter_method.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst grid = new dhx.Grid(\"grid_container\", {\n    type: \"tree\",\n    columns: [\n        // columns config\n    ],\n    data: dataset,\n});\n\n// filtering data by the column \ngrid.data.filter({\n    by: \"name\",\n    match: \"Angola\"\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Input Event in DHTMLX Form Datepicker\nDESCRIPTION: Example demonstrating how to attach an event handler to the input event of a Datepicker control in a DHTMLX Form. The event fires when a user manually enters a value in the Datepicker input field. Note that this functionality requires the 'editable' option to be set to true.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/calendar/calendar_input_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"datepicker\").events.on(\"input\", function(inputValue) {\n    console.log(\"input\", inputValue);\n});\n```\n\n----------------------------------------\n\nTITLE: Styling DHTMLX Toolbar with Custom CSS Classes - HTML & JavaScript\nDESCRIPTION: Demonstrates adding custom CSS variables and classes to the DHTMLX Toolbar for advanced styling. CSS is defined in a <style> block targeting the .custom class, with color and background variables for primary, secondary, and toolbar backgrounds. The JavaScript snippet instantiates the Toolbar with the 'css' parameter set to 'custom', applying the created styles. Prerequisites include loading the DHTMLX library and having an element with id 'toolbar' present in the document. Output is a Toolbar styled using the defined CSS variables; limitations include browser support for CSS custom properties.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/toolbar/api/toolbar_css_config.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<style>\\n    .custom,.custom--popup-menu {\\n        --dhx-background-primary: #3A434A;\\n        --dhx-background-secondary: #5a6872;\\n        --dhx-background-additional: #5a6872;\\n        --dhx-s-toolbar-background: var(--dhx-background-primary);\\n\\n        --dhx-color-primary: #118d8d;\\n        --dhx-color-primary-hover: #49e9e9;\\n        --dhx-color-primary-active: #49e9e9;\\n\\n        --dhx-font-color-primary: #fff;\\n        --dhx-font-color-secondary: #fff;\\n        --dhx-font-color-additional: #fff;\\n    }\\n</style>\\n\\n<script>\\n    const toolbar = new dhx.Toolbar(\"toolbar\", {\\n        css: \"custom\"\\n    });\\n</script>\n```\n\n----------------------------------------\n\nTITLE: Handling Keydown Events in DHTMLX Form Combo Box\nDESCRIPTION: Example of attaching a keydown event listener to a Combo Box control in a DHTMLX Form. The event fires when any key is pressed while a Combo option is focused, providing the keyboard event object and the focused option's ID.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/combo/combo_keydown_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"combo\").events.on(\"keydown\", function(event, id) {\n    console.log(event, id);\n});\n```\n\n----------------------------------------\n\nTITLE: Configurable Properties for Individual Checkboxes in JavaScript\nDESCRIPTION: Lists the configuration attributes that can be modified for individual checkboxes within a CheckboxGroup using the setProperties() method, including styling and dimensions.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/checkbox_group/checkboxgroup_setproperties_method.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    css: string,\n    height: string | number | \"content\",\n    padding: string | number,\n    text: string,\n    width: string | number | \"content\"\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX Slider with Label in JavaScript\nDESCRIPTION: This code snippet demonstrates how to create a new DHTMLX Slider instance with a custom label. The label is set to 'Volume' using the label configuration option.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/slider/api/slider_label_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst slider = new dhx.Slider(\"slider_container\", { \n   label:\"Volume\" \n});\n```\n\n----------------------------------------\n\nTITLE: Available Configuration Properties for Select Control in DHTMLX Form\nDESCRIPTION: This code snippet shows all the configuration properties that can be modified using the setProperties() method for a Select control. These properties control the appearance, behavior, and validation of the Select control.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/select/select_setproperties_method.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n    css: string,\n    errorMessage: string,\n    height: string | number | \"content\",\n    helpMessage: string,\n    hiddenLabel: boolean,\n    icon: string,\n    label: string,\n    labelPosition: string,\n    labelWidth: string | number,\n    padding: string | number,\n    preMessage: string,\n    successMessage: string,\n    validation: function,\n    width: string | number | \"content\"\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Focus from Button Control in DHTMLX Form\nDESCRIPTION: Demonstrates how to remove focus from a Button control using the blur() method. The method returns void and requires no parameters.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/button/button_blur_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"button\").blur();\n```\n\n----------------------------------------\n\nTITLE: Configuring One Month Period Heat Map\nDESCRIPTION: Sets up a heat map configuration for a one-month period with specific start and end dates.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/chart/configuration_properties.md#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n    type: \"calendarHeatMap\",\n    series: [\n        {\n            value: \"value\",\n            date: \"date\",\n            startDate: \"01/03/22\",\n            endDate: \"31/03/22\",\n        }\n    ],\n};\n\nconst chart = new dhx.Chart(\"chart_container\", config);\nchart.data.parse(heatMapData);\n```\n\n----------------------------------------\n\nTITLE: Showing a Select Control in DHTMLX Form (JavaScript)\nDESCRIPTION: This example demonstrates how to use the show() method to make a previously hidden Select control visible on the page. The method is called on a specific Select control that is retrieved from the form using the getItem() method.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/select/select_show_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"select\").show();\n```\n\n----------------------------------------\n\nTITLE: Hiding Avatar Control in DHTMLX Form\nDESCRIPTION: Demonstrates how to hide an Avatar control in a DHTMLX Form using the hide() method. The method is called on a specific Avatar form control retrieved using getItem().\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/avatar/avatar_hide_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"avatar\").hide();\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Scroll Settings for Layout Cell in JavaScript\nDESCRIPTION: This code demonstrates how to configure custom scroll settings for a specific cell in a DHTMLX Layout component.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/helpers/custom_scroll.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nlayout.getCell(\"list\").scrollView.config.autoHide = false;\n```\n\n----------------------------------------\n\nTITLE: Creating Container for DHTMLX DataView\nDESCRIPTION: This code snippet demonstrates how to create a container div for DHTMLX DataView with a specific id.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/dataview/initialization.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"dataview_container\"></div>\n```\n\n----------------------------------------\n\nTITLE: Form Events Table Structure\nDESCRIPTION: Table structure listing Form events with links to event documentation\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/api_overview.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Name                                              | Description                                              |\n| ------------------------------------------------- | -------------------------------------------------------- |\n| [](form/api/form_afterchangeproperties_event.md)  | @getshort(form/api/form_afterchangeproperties_event.md)  |\n```\n\n----------------------------------------\n\nTITLE: Validating SimpleVault Control with Default Parameters\nDESCRIPTION: Demonstrates calling the validate() method without parameters or with the silent parameter set to false. In both cases, the method will invoke BeforeValidate and AfterValidate events and modify the control visually.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/simplevault/simplevault_validate_method.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"simplevault\").validate(); // -> true/false\nform.getItem(\"simplevault\").validate(false); // -> true/false\n```\n\n----------------------------------------\n\nTITLE: Initializing Tooltip in JavaScript\nDESCRIPTION: Shows how to configure and display a tooltip with custom text, target node, position, and margin.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/message/configuration.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ndhx.tooltip(\"Tooltip From Right\", {\n    node: \"fourth\", \n    position: \"right\",\n    margin: 8\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Tree Container\nDESCRIPTION: HTML markup for creating the container element that will hold the Tree component.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree/initialization_of_dhtmlxtree.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"tree_container\"></div>\n```\n\n----------------------------------------\n\nTITLE: Setting Grid Column MinWidth Example\nDESCRIPTION: Example showing how to initialize a Grid with column configuration including minWidth property. Sets minimum width of 150 pixels for the 'project' column.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/gridcolumn_properties/gridcolumn_minwidth_property.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst grid = new dhx.Grid(\"grid_container\", {\n    columns: [\n        { id: \"project\", header: [{ text: \"Project\" }], minWidth: 150 },\n        // more columns configuration objects   \n    ],\n    // more options\n});\n```\n\n----------------------------------------\n\nTITLE: Handling keydown Event in DHTMLX Form Select Control\nDESCRIPTION: This code example demonstrates how to attach an event handler to the keydown event of a Select control in a DHTMLX Form. The handler logs the event object and control ID to the console when any key is pressed while the Select control has focus.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/select/select_keydown_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"select\").events.on(\"keydown\", function(event) {\n    console.log(event, id);\n});\n```\n\n----------------------------------------\n\nTITLE: Attaching Event Listener for afterRowDrop in DHTMLX Grid\nDESCRIPTION: This code snippet demonstrates how to attach an event listener for the afterRowDrop event in a DHTMLX Grid. The event fires after the user has finished dragging a row and released the mouse button. It provides data about the drag operation and the original mouse event.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_afterrowdrop_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngrid.events.on(\"afterRowDrop\", (data, event) => {\n    // your logic here\n});\n```\n\n----------------------------------------\n\nTITLE: Disabling and Enabling DHTMLX Ribbon Blocks Programmatically in JavaScript\nDESCRIPTION: Shows how to enable or disable user interaction with a specific Ribbon Block using the `ribbon.enable()` and `ribbon.disable()` methods. These methods take the ID of the target block as a parameter.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/ribbon/block.md#2025-04-22_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nribbon.enable(id);\nribbon.disable(id);\n```\n\n----------------------------------------\n\nTITLE: Showing and Hiding Separators in a Toolbar in JavaScript\nDESCRIPTION: Demonstrates how to show or hide a Separator control in a DHTMLX Toolbar by using the show() and hide() methods with the separator's ID.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/toolbar/separator.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ntoolbar.show(id);\ntoolbar.hide(id);\n```\n\n----------------------------------------\n\nTITLE: Handling dragColumnStart Event in DHTMLX Grid\nDESCRIPTION: This snippet demonstrates how to attach an event handler for the dragColumnStart event in a DHTMLX Grid. The event fires when dragging of a column has started, providing data about the drag operation and the original mouse event.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_dragcolumnstart_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngrid.events.on(\"dragColumnStart\", (data, event) => {\n  // your logic here\n});\n```\n\n----------------------------------------\n\nTITLE: ToggleGroup Properties Object Structure in DHTMLX Form\nDESCRIPTION: This code snippet illustrates the structure of the properties object for a ToggleGroup control in DHTMLX Form. It shows the available configuration attributes that can be dynamically changed.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/togglegroup/togglegroup_beforechangeproperties_event.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    css: string,\n    full: boolean,\n    gap: number,\n    height: string | number|\"content\",\n    multiselection: boolean,\n    options: object[],\n    padding: string | number,\n    width: string|number|\"content\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining eventHandlers Configuration for Tree in JavaScript\nDESCRIPTION: This snippet demonstrates the structure of the eventHandlers configuration object for a Tree component. It allows adding custom event handlers to specific HTML elements within a tree item template.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree/api/tree_eventhandlers_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\neventHandlers?: {\n    [eventName: string]: {\n        [className: string]: (events: Event, item: object) => void; \n    };\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing a Modal DHTMLX Window in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates the instantiation and display of a DHTMLX Window component with the 'modal' property set to true, making the window modal and blocking interaction with the main browser window. The code requires the DHTMLX Suite library to be included in the project. The key parameter is 'modal', which, when set to true, ensures the window remains on top and prevents user interaction outside it until closed. Input: none; Output: a modal popup window appears.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/window/api/window_modal_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst dhxWindow = new dhx.Window({\n    modal:true\n});\n\ndhxWindow.show();\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiselection in DHTMLX List (JavaScript)\nDESCRIPTION: This snippet demonstrates how to initialize a DHTMLX List with multiselection enabled. The multiselection option allows users to select multiple items in the list. When set to true, it enables selection of multiple items using the Ctrl key.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/list/api/list_multiselection_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst list = new dhx.List(\"list_container\", {multiselection:true});\n```\n\n----------------------------------------\n\nTITLE: Applying Custom and DHTMLX CSS Classes to Pagination in JavaScript\nDESCRIPTION: Demonstrates defining custom CSS styles within an HTML `<style>` block and applying these styles, along with DHTMLX's own CSS classes (`dhx_widget--bordered`, `dhx_widget--no-border_top`), to a DHTMLX Pagination instance using the `css` configuration property. This allows for combined styling using both user-defined rules and library-provided utilities. Requires the DHTMLX Suite library and an HTML container element.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/pagination/api/pagination_css_config.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<style>\n    .custom {\n        --dhx-background-primary: #3A434A;\n        --dhx-background-secondary: #5e6d78;\n        --dhx-color-primary: #118d8d;\n        --dhx-font-color-primary: #fff;\n    }\n</style>\n```\n\nLANGUAGE: javascript\nCODE:\n```\n<script>\n    const pagination = new dhx.Pagination(\"pagination_container\", {\n        css: \"custom dhx_widget--bordered dhx_widget--no-border_top\",\n        data: list.data\n    });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Grid Event Signature in TypeScript\nDESCRIPTION: TypeScript signature for the beforeEditStart event handler, showing the expected parameters and return type. The event receives row and column objects along with the editor type.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_beforeeditstart_event.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nbeforeEditStart: (row: object, column: object, editorType: string) => boolean | void;\n```\n\n----------------------------------------\n\nTITLE: Configuring Color Transparency\nDESCRIPTION: Demonstrates how to disable the color transparency feature in picker mode.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/colorpicker/configuration.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst colorpicker = new dhx.Colorpicker(\"colorpicker\", {\n    mode: \"picker\",\n    transparency: false\n});\n```\n\n----------------------------------------\n\nTITLE: Input and RadioGroup API Documentation Structure\nDESCRIPTION: Markdown table structures documenting the API methods, events and properties for Input and RadioGroup components\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/api_overview.md#2025-04-22_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n### Input methods\n\n| Name | Description |\n| :--- | :--- |\n| [](form/api/input/input_blur_method.md) | @getshort(form/api/input/input_blur_method.md) |\n[...]\n\n### Input events\n\n| Name | Description |\n| :--- | :--- |\n| [](form/api/input/input_afterchangeproperties_event.md) | @getshort(form/api/input/input_afterchangeproperties_event.md) |\n[...]\n\n### RadioGroup methods\n\n| Name | Description |\n| :--- | :--- |\n| [](form/api/radiogroup/radiogroup_blur_method.md) | @getshort(form/api/radiogroup/radiogroup_blur_method.md) |\n```\n\n----------------------------------------\n\nTITLE: Setting Calendar to Display Current Month Only in DHTMLX\nDESCRIPTION: This code snippet demonstrates how to configure a DHTMLX Calendar to show only the days of the current month. It uses the 'thisMonthOnly' configuration property set to true.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar2/functionality_and_features/current_month_only.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nnew dhx.Calendar(\"calendar\", {\n    thisMonthOnly: true\n});\n```\n\n----------------------------------------\n\nTITLE: Handling afterHide Event for Text Control in DHTMLX Form\nDESCRIPTION: This snippet demonstrates how to attach an event handler to the afterHide event of a Text control in a DHTMLX Form. The event fires after the control is hidden and provides the current value of the control and an initialization flag.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/text/text_afterhide_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"text\").events.on(\"afterHide\", function(value, init) {\n    console.log(\"afterHide\", value, init);\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Grid Column Tooltip Type\nDESCRIPTION: Shows the TypeScript/JavaScript type definition for the tooltip configuration property that can be either a boolean or an object.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/gridcolumn_properties/gridcolumn_tooltip_property.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\ntooltip?: boolean | object;\n```\n\n----------------------------------------\n\nTITLE: ImageButton JSON Template for DHTMLX Ribbon (JavaScript/JSON)\nDESCRIPTION: Illustrates the JSON configuration for an 'imageButton' control in a DHTMLX Ribbon. It specifies `type: \"imageButton\"` and requires a `src` property pointing to the image file URL.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/ribbon/data_loading.md#2025-04-22_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\n// imageButton\n{\n    id: \"user\",                \n    type: \"imageButton\",        \n    src: \"../img/avatar.png\"                \n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Grid getSubRow Method Signature\nDESCRIPTION: Method signature for retrieving sub-row configuration and content for a specified row in the Grid. Returns an object containing properties like css, element, expanded, fullWidth, height, padding, preserve, toggleIcon, and view.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_getsubrow_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ngetSubRow(id: string | number): ISubViewCell | null;\n```\n\n----------------------------------------\n\nTITLE: Adding Timepicker with 12-hour Format\nDESCRIPTION: Enables the timepicker within the calendar and sets it to use 12-hour time format instead of the default 24-hour format.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar2/configuring.mdx#2025-04-22_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nvar calendar = new dhx.Calendar(\"calendar\", {\n    timePicker: true,\n    timeFormat: 12 // the 12-hour format for the timepicker\n});\n```\n\n----------------------------------------\n\nTITLE: Styling a Custom DHTMLX Ribbon Button (CSS)\nDESCRIPTION: Provides example CSS rules for styling a DHTMLX Ribbon Button that has a custom class applied (e.g., 'best_button' from the previous JavaScript example). It demonstrates setting background color for normal and hover states.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/ribbon/button.md#2025-04-22_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n.best_button{\n    background-color:cornflowerblue;\n}\n.best_button:hover{\n    background-color:rgb(183, 199, 228);\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX Layout with Padding in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a new DHTMLX Layout instance with padding applied to both the main layout and individual cells. It showcases the use of the 'padding' property along with other configuration options like 'css' and 'html' content.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/layout/api/cell/layout_cell_padding_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst layout = new dhx.Layout(\"layout_container\",{\n    padding: 10,\n    css: \"dhx_layout-cell--bordered\",\n    cols: [\n        {\n            padding: 10,\n            css: \"dhx_layout-cell--bordered\",\n            html: \"First Block\"\n        },\n        {\n            padding: 10,\n            css: \"dhx_layout-cell--bordered\",\n            html: \"Second Block\"\n        }\n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: Handling afterShow Event in DHTMLX Form Slider Control\nDESCRIPTION: This code demonstrates how to attach an event handler to the afterShow event of a Slider control in a DHTMLX Form. The event fires after the control is shown and provides the current value of the slider as an array of numbers.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/slider/slider_aftershow_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"slider\").events.on(\"afterShow\", function(value) {\n    console.log(\"afterShow\", value);\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Toggle afterHide Event in DHTMLX Form\nDESCRIPTION: Example shows how to attach an event handler to the afterHide event of a Toggle control in a DHTMLX Form. The handler receives the current value of the control and an initialization flag.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/toggle/toggle_afterhide_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"toggle\").events.on(\"afterHide\", function(value, init) {\n    console.log(\"afterHide\", value, init);\n});\n```\n\n----------------------------------------\n\nTITLE: Attaching Event Listener for afterExpand Event in DHTMLX Layout\nDESCRIPTION: This snippet demonstrates how to attach an event listener for the afterExpand event of a Layout component. The event fires after a Layout cell is expanded and provides the id of the expanded cell.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/layout/api/layout_afterexpand_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlayout.events.on(\"afterExpand\", function(id){\n    // your logic here\n});\n```\n\n----------------------------------------\n\nTITLE: Showing and Hiding a Spacer in JavaScript\nDESCRIPTION: This code shows how to show or hide a Spacer component in a DHTMLX Sidebar by calling the show() and hide() methods with the Spacer's ID as a parameter.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/sidebar/spacer.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nsidebar.show(id);\nsidebar.hide(id);\n```\n\n----------------------------------------\n\nTITLE: Blocking Even Tab Changes in DHTMLX Tabbar\nDESCRIPTION: This code snippet shows how to use the beforeChange event to block switching to even-indexed tabs in a DHTMLX Tabbar. It checks the index of the new tab and returns false if it's odd.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tabbar/api/tabbar_beforechange_event.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ntabbar.events.on(\"beforeChange\", (id, prev) => {\n    const tabIndex =\n        tabbar.config.views.findIndex(tabObj => tabObj.tab === tabbar.getCell(id).config.tab);\n    if (tabIndex % 2 === 1) return false;\n});\n```\n\n----------------------------------------\n\nTITLE: Setting the State of a TwoState DHTMLX Ribbon Button (JavaScript)\nDESCRIPTION: Shows how to programmatically change the state (active/inactive) of a TwoState DHTMLX Ribbon Button using the `ribbon.setState()` method. It accepts an object where keys are button IDs and values are booleans representing the desired active state.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/ribbon/button.md#2025-04-22_snippet_10\n\nLANGUAGE: js\nCODE:\n```\n{\n    type:\"button\", twoState:true, value:\"Check\", id:\"check\"\n}\n...\nribbon.setState({check:true});  // active:true\n// or\nribbon.setState({check:false});  // active:false\n```\n\n----------------------------------------\n\nTITLE: Return Value Structure of getProperties for Select Control\nDESCRIPTION: This code snippet shows the structure of the object returned by the getProperties() method for a Select control, including all available configuration properties and their default values.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/select/select_getproperties_method.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    errorMessage: \"\",\n    height: \"content\",\n    helpMessage: \"\",\n    hiddenLabel: false,\n    icon: \"\",\n    label: \"select\",\n    labelPosition: \"top\",\n    labelWidth: \"50px\",\n    padding: 0,\n    preMessage: \"\",\n    successMessage: \"\",\n    validation: undefined,\n    width: \"200px\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using stopPropagation in eventHandlers for DataView\nDESCRIPTION: This snippet demonstrates how to use stopPropagation() in an event handler to prevent event bubbling and block the default click event on DataView items.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/dataview/api/dataview_eventhandlers_config.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\neventHandlers: {\n    onclick: {\n        class_name: (event) => {                              \n            evt = event || window.event;\n            evt.stopPropagation();\n            console.log(\"button click\");\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic CSS Class Definition for Form Styling\nDESCRIPTION: Shows how to define custom CSS classes for styling a form\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/customization.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<style>\n    .my_first_class {\n        /*some styles*/\n    }\n    \n    .my_second_class {\n        /*some styles*/\n    }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Checking Data Load Status with isDataLoaded Method\nDESCRIPTION: Demonstrates how to use the isDataLoaded method to check if a data range is loaded from the server. This PRO edition method returns a boolean indicating whether the specified data range exists in the collection.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/data_collection/api/datacollection_isdataloaded_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncomponent.data.isDataLoaded();\n```\n\n----------------------------------------\n\nTITLE: Defining Grid Column Summary in JavaScript\nDESCRIPTION: This snippet shows the usage and parameters of the 'summary' configuration for a Grid column. It can be initialized as an object with key-value pairs or as a string. The object can contain strings, tuples, or functions for calculating column summaries.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/gridcolumn_properties/gridcolumn_summary_property.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nsummary?: { \n    [key: string]: string | [string, string] | (row: IRow[]) => string | number \n} | string;\n```\n\n----------------------------------------\n\nTITLE: Checking Specific Tab Disabled State by ID in DHTMLX Tabbar (JavaScript)\nDESCRIPTION: This snippet illustrates using the `isDisabled()` method with a specific tab ID (\"London\") as an argument. It checks if the tab identified by the provided ID within the DHTMLX Tabbar instance (`tabbar`) is disabled. The method returns `true` if the specified tab is disabled, and `false` otherwise. Requires a Tabbar instance (`tabbar`) with a tab having the ID \"London\".\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tabbar/api/tabbar_isdisabled_method.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// checks whether a tab is disabled by its id\ntabbar.isDisabled(\"London\"); // -> returns true/false\n```\n\n----------------------------------------\n\nTITLE: Retrieving State by Control ID with getState in DHTMLX Toolbar - JavaScript\nDESCRIPTION: Here, getState is used with different control ids to demonstrate its return of either direct values or boolean states in the DHTMLX Toolbar context. Requires DHTMLX Toolbar configured with controls such as 'search' and 'edit'. Each call returns the current value (string) or state (boolean) for the requested control. Very useful for interactive or conditional UI logic.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/toolbar/api/toolbar_getstate_method.md#2025-04-22_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst state1 = toolbar.getState(\"search\"); // -> \"toolbar\"\n\nconst state2 = toolbar.getState(\"edit\"); // -> true/false\n```\n\n----------------------------------------\n\nTITLE: Manipulating Spacer Control in JavaScript\nDESCRIPTION: Example showing how to interact with a Spacer control after form initialization using the getItem() method to hide the spacer.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/spacer.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst value = form.getItem(\"spacer\").hide();\n```\n\n----------------------------------------\n\nTITLE: Calling the paint() Method on DHTMLX Tabbar\nDESCRIPTION: This snippet demonstrates how to call the `paint()` method on an instance of the DHTMLX Tabbar component (referred to as `tabbar`). This method forces the tabbar to repaint itself, which is useful after structural changes or when manually managing rendering updates. According to the signature `paint(): void;`, the method takes no arguments and returns nothing.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tabbar/api/tabbar_paint_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntabbar.paint();\n```\n\n----------------------------------------\n\nTITLE: Adding Separator to Ribbon\nDESCRIPTION: Shows how to add a separator line between menu items in a DHTMLX Ribbon component. The separator creates visual separation between different items or groups in the ribbon interface.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/ribbon/separator.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nribbon.data.add({\n    type:\"separator\"\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing beforeUnGroup Event Handler in JavaScript\nDESCRIPTION: This example demonstrates how to attach an event handler to the beforeUnGroup event of a grid's data collection. It logs the fields being ungrouped and returns true to allow the ungrouping process to continue.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/data_collection/api/datacollection_beforeungroup_event.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\ngrid.data.events.on(\"beforeUnGroup\", (grouped, config) => {\n    console.log(\"Starting deleting grouping. Fields:\", grouped);\n    return true; // continue deleting grouping\n});\n```\n\n----------------------------------------\n\nTITLE: Example Custom CSS Definitions for DHTMLX Pagination Styling\nDESCRIPTION: This HTML snippet provides a concrete example of custom CSS rules within a `<style>` block, specifically targeting DHTMLX CSS variables (`--dhx-background-primary`, etc.) to override default theme colors. The `.custom` class encapsulates these overrides.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/pagination/customization.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<style>\n    .custom {\n        --dhx-background-primary: #3A434A;\n        --dhx-background-secondary: #5e6d78;\n        --dhx-color-primary: #118d8d;\n        --dhx-font-color-primary: #fff;\n    }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Configuring updateFromResponse in DHTMLX Vault Uploader\nDESCRIPTION: Shows how to initialize a DHTMLX Vault component with the updateFromResponse option set to false in the uploader configuration. This prevents automatic updates of file attributes from server responses.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/uploader/api/uploader_updatefromresponse_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst vault = new dhx.Vault(\"vault_container\", { \n    uploader:{\n        // obligatory, the path for upload\n        target:\"/upload\"\n        updateFromResponse:false\n       }\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Tabbar with noContent Option - DHTMLX - JavaScript\nDESCRIPTION: This snippet demonstrates how to initialize a DHTMLX Tabbar instance in JavaScript with the noContent configuration set to true. Setting noContent to true removes internal content containers from the tabs, allowing the Tabbar to act purely as a navigation or control component without managing tab content areas. The dhx.Tabbar constructor requires the target HTML container ID (e.g., \\\"tabbar_container\\\") and an options object. Key dependencies include the DHTMLX UI library. The default value for noContent is false; by setting it to true, tabs behave differently, which may require handling content management externally.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tabbar/api/tabbar_nocontent_config.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst tabbar = new dhx.Tabbar(\"tabbar_container\", {\n    noContent:true\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX Slider with min Configuration in JavaScript\nDESCRIPTION: This example demonstrates how to create a new Slider instance with a custom minimum value. The min property sets the lowest possible value that the slider can represent, overriding the default value of 0.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/slider/api/slider_min_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst slider = new dhx.Slider(\"slider_container\", { \n    min:2\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX Colorpicker with paletteOnly Option in JavaScript\nDESCRIPTION: This code snippet demonstrates how to initialize a DHTMLX Colorpicker with the paletteOnly option set to true. This configuration displays the Colorpicker in palette-only mode, without the panel for custom colors.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/colorpicker/api/colorpicker_paletteonly_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst colorpicker = new dhx.Colorpicker(\"colorpicker_container\",{\n    paletteOnly: true\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Slider 'change' Event in DHTMLX Form (JavaScript)\nDESCRIPTION: This example shows how to attach an event handler to the 'change' event of a Slider control in a DHTMLX Form. The handler logs the current value of the slider whenever it changes.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/slider/slider_change_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"slider\").events.on(\"change\", function(value) {\n    console.log(\"change\", value);\n});\n```\n\n----------------------------------------\n\nTITLE: Calling Events on DHTMLX Slider in JavaScript\nDESCRIPTION: This snippet illustrates how to manually fire an event on a DHTMLX Slider component. It uses the 'fire' method to trigger an event with a specified name and arguments.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/slider/handling_events.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nslider.events.fire(\"name\",args);\n// where args is an array of arguments\n```\n\n----------------------------------------\n\nTITLE: Implementing Top Layout and View Switching in DHTMLX Optimus\nDESCRIPTION: Creates a top-level layout with a toolbar and content area. Handles view switching based on toolbar selections, rendering the appropriate widget (DataView, Chart, or Grid).\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/optimus_guides/how_to_start_optimus.md#2025-04-22_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nimport { View } from \"dhx-optimus\";\n\nimport { ToolbarView } from \"./ToolbarView\";\nimport { DataView } from \"./content/DataView\";\nimport { ChartView } from \"./content/ChartView\";\nimport { GridView } from \"./content/GridView\";\n\nexport class TopLayout extends View {\n    init() {\n        return (this.layout = new dhx.Layout(null, {\n            rows: [\n                {\n                    id: \"toolbar\",\n                    height: \"content\",\n                    init: cell => this.show(cell, ToolbarView),\n                },\n                {\n                    id: \"content\"\n                },\n            ],\n        }));\n    }\n\n    ready() {\n        this.observe(\n            state => state.active,\n            active => {\n                switch (active) {\n                    case \"first\":\n                        this.show(this.layout.getCell(\"content\"), DataView, {\n                            dataCollection: this.params.persons,\n                        });\n                        break;\n                    case \"second\":\n                        this.show(this.layout.getCell(\"content\"), ChartView, {\n                            dataCollection: this.params.persons,\n                        });\n                        break;\n                    case \"third\":\n                        this.show(this.layout.getCell(\"content\"), GridView, {\n                            dataCollection: this.params.persons,\n                        });\n                        break;\n                }\n            }\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Detaching Event Listener in JavaScript Tabbar\nDESCRIPTION: Shows how to attach and then detach an event listener from a Tabbar component using the events.detach() method.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tabbar/events.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ntabbar.events.on(\"afterClose\", function(id){\n    console.log(id);\n});\n\ntabbar.events.detach(\"afterClose\");\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX Pagination with Initial Page Index in JavaScript\nDESCRIPTION: This snippet demonstrates how to initialize a DHTMLX Pagination widget by specifying the 'page' option to set the initial active page. It requires the DHTMLX Suite library and a target DOM element with ID 'pagination_container'. The constructor takes an options object, where 'css' sets widget styling and 'page' sets the zero-based initial page index (here, 4). Inputs are the container ID and configuration object; the widget renders pagination UI starting from the specified page.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/pagination/api/pagination_page_config.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst pagination = new dhx.Pagination(\"pagination_container\", {\n    css: \"dhx_widget--bordered\",\n    page: 4 \n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Header Row Height in DHTMLX Grid\nDESCRIPTION: Example showing how to initialize a Grid component with custom header row height. The headerRowHeight property sets the height of rows in the header to 50 pixels, with the default being 40 pixels.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_headerrowheight_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst grid = new dhx.Grid(\"grid_container\", {\n    columns: [\n        // columns config\n    ],\n    headerRowHeight: 50\n});\n```\n\n----------------------------------------\n\nTITLE: Using Date Objects in DHTMLX Grid Data\nDESCRIPTION: This snippet illustrates how to use JavaScript Date objects when specifying data for the 'Date' column in DHTMLX Grid. This feature is supported from version 7.1 onwards.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_data_config.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst dataset = [\n    {\n        \"country\": \"China\",\n        \"date\": new Date()\n    },\n    {\n        \"country\": \"India\",\n        \"date\": new Date(2010, 02, 10)\n    }\n];\n```\n\n----------------------------------------\n\nTITLE: Disabling Checkbox Control in DHTMLX Form (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to disable a Checkbox control in a DHTMLX Form using the disable() method. It retrieves the Checkbox item from the form and then calls the disable() method on it.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/checkbox/checkbox_disable_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nform.getItem(\"checkbox\").disable();\n```\n\n----------------------------------------\n\nTITLE: Implementing beforeChange Event Handler for Textarea in DHTMLX Form\nDESCRIPTION: This code example demonstrates how to attach a beforeChange event handler to a Textarea form control. The handler logs the new value to the console and returns true to allow the value change to proceed.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/textarea/textarea_beforechange_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"textarea\").events.on(\"beforeChange\", function(value) {\n    console.log(\"beforeChange\", value);\n    return true;\n});\n```\n\n----------------------------------------\n\nTITLE: Object Structure Returned by getProperties() for Text Control\nDESCRIPTION: This example shows the structure of the object returned by the getProperties() method when called on a Text control. It includes properties like height, helpMessage, label settings, and other configuration attributes.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/text/text_getproperties_method.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    height: \"content\",\n    helpMessage: \"\",\n    hiddenLabel: false,\n    inputType: \"text\",\n    label: \"text\",\n    labelPosition: \"top\",\n    labelWidth: \"\",\n    padding: 0,\n    width: \"content\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Calendar Width\nDESCRIPTION: Creates a Calendar with a custom width of 400px instead of the default 250px.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar/configuring.md#2025-04-22_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nconst calendar = new dhx.Calendar(\"calendar_container\", {\n    width: \"400\", \n    css: \"dhx_widget--bordered\"\n});\n```\n\n----------------------------------------\n\nTITLE: Example of Returned Object from getProperties for Datepicker\nDESCRIPTION: This code block shows the structure of the object returned by the getProperties() method for a Datepicker control, including various configuration attributes and their default values.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/calendar/calendar_getproperties_method.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    dateFormat: \"%d/%m/%y\",\n    disabledDates: undefined,\n    editable: false,\n    errorMessage: \"\",\n    height: \"content\",\n    helpMessage: \"\",\n    hiddenLabel: false,\n    icon: \"\",\n    label: \"date\",\n    labelPosition: \"top\",\n    labelWidth: \"50px\",\n    mark: undefined,\n    mode: \"calendar\",\n    padding: 0,\n    placeholder: \"\",\n    preMessage: \"\",\n    required: false,\n    successMessage: \"\",\n    thisMonthOnly: false,\n    timeFormat: 24,\n    timePicker: false,\n    validation: undefined,\n    valueFormat: \"string\",\n    weekNumbers: false,\n    weekStart: \"sunday\",\n    width: \"content\"\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX Form with disabled Config\nDESCRIPTION: Example demonstrating how to initialize a DHTMLX Form component with the disabled property set to true. This configuration makes the entire form disabled upon initialization.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/form_disabled_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst form = new dhx.Form(\"form_container\", {\n    css: \"dhx_widget--bordered\",\n    disabled: true\n});\n```\n\n----------------------------------------\n\nTITLE: Including DHTMLX Tree Standalone Files\nDESCRIPTION: Code showing how to include the required CSS and JavaScript files for using DHTMLX Tree as a standalone component.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree/initialization_of_dhtmlxtree.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"text/javascript\" src=\"../../codebase/tree.js\"></script>\n<link rel=\"stylesheet\" href=\"../../codebase/tree.css\">\n```\n\n----------------------------------------\n\nTITLE: Configuring Simple Vault Control in DHTMLX Form\nDESCRIPTION: A complete configuration example for the Simple Vault control, showing all available properties including type specification, file handling options, appearance settings, and validation parameters.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/simplevault/api_simplevault_properties.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n{\n    type: \"simplevault\",\n    name?: string,\n    id?: string,\n    target?: string,\n    value?: [\n        {\n            id?: string | number,\n            file?: File,\n            status?: \"queue\" | \"inprogress\" | \"uploaded\" | \"failed\",\n            progress?: number,\n            request?: XMLHttpRequest,\n            path?: string,\n            name?: string,\n            [key: string]?: any\n        },\n        // more file objects\n    ],\n\n    css?: string,\n    height?: string | number | \"content\", // \"content\" by default\n    width?: string | number | \"content\", // \"content\" by default\n    padding?: string | number, \n    hidden?: boolean, // false by default\n    disabled?: boolean, // false by default\n        \n    fieldName?: string, // \"file\" by default\n    params?: {\n        [key: string]: any,\n    },\n    headerParams?: {\n        [key: string]: any,\n    },\n    singleRequest?: boolean, // false by default\n    updateFromResponse?: boolean, // true by default\n    autosend?: boolean, // false by default\n    accept?: string, // all file types by default\n\n    validation?: (value: object[]) => boolean;\n    required?: boolean, // false by default\n\n    hiddenLabel?: boolean, // false by default\n    label?: string,\n    labelPosition?: \"left\" | \"top\", // \"top\" by default\n    labelWidth?: string | number,\n\n    helpMessage?: string,\n    preMessage?: string,\n    successMessage?: string,\n    errorMessage?: string,\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring custom icons for Tree items (v6.4)\nDESCRIPTION: Example of setting custom icons for tree items using the icon property instead of the deprecated isFolder property. The example shows how to define different icons for folder, openFolder, and file states.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/migration.md#2025-04-22_snippet_17\n\nLANGUAGE: js\nCODE:\n```\nconst tree = new dhx.Tree(\"tree_container\", {\n    data:[\n        {\n            \"value\": \"Books\",\n            \"id\": \"Books\",\n            \"opened\": true,\n            \"items\": [\n                {\n                    \"value\": \"Lawrence Block\",\n                    \"id\": \"Lawrence Block\",\n                    \"icon\": {\n                        \"folder\": \"fas fa-book\", \n                        \"openFolder\": \"fas fa-book-open\", \n                        \"file\": \"fas fa-file\" \n                    }\n                }\n            ]\n        }\n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: JSON Format Template for Separator Control\nDESCRIPTION: Template showing the structure and properties available for a separator control in DHTMLX Toolbar.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/toolbar/load_data.md#2025-04-22_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\n// separator\n{\n    id: \"sepId\",        \n    type: \"separator\"         \n}\n```\n\n----------------------------------------\n\nTITLE: Simplified Grid Unselection Event Handler in JavaScript\nDESCRIPTION: Alternative simplified syntax for handling the beforeUnSelect event using the events interface directly.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/selection/selection_beforeunselect_event.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ngrid.events.on(\"BeforeUnSelect\", (row, column) => {\n    console.log(\"beforeUnSelect\", row, column); \n    return false;\n});\n```\n\n----------------------------------------\n\nTITLE: Detaching Event Listener in DataView\nDESCRIPTION: Shows how to attach and then detach a click event listener from a DataView component using the events.detach() method.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/dataview/events.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ndataview.events.on(\"click\", function(id, e){\n   console.log(\"The item with the id \"+ dataview.selection.getId(id) +\" was clicked.\");\n});\n\ndataview.events.detach(\"click\");\n```\n\n----------------------------------------\n\nTITLE: Handling beforeChangeProperties Event in DHTMLX Simple Vault Control\nDESCRIPTION: This snippet demonstrates how to attach an event handler to the beforeChangeProperties event of a Simple Vault control in a DHTMLX form. The event fires before the configuration attributes of the control are changed dynamically and allows for cancellation of the default action.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/simplevault/simplevault_beforechangeproperties_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"simplevault\").events.on(\"beforeChangeProperties\", function(properties) {\n    console.log(\"beforeChangeProperties\", properties);\n    return true;\n});\n```\n\n----------------------------------------\n\nTITLE: Select Method Signature in JavaScript\nDESCRIPTION: Method signature showing the parameter types and return value for the select() method of DHTMLX Sidebar.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/sidebar/api/sidebar_select_method.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nselect(id: string | number, unselect: boolean): void;\n```\n\n----------------------------------------\n\nTITLE: Defining DHTMLX Ribbon SelectButton Configuration Data Structure\nDESCRIPTION: This JavaScript snippet illustrates the data structure used to configure a 'selectButton' item within a DHTMLX Ribbon. It showcases various optional properties like 'id', 'parent', 'value', nested 'items' (which can be other menu elements), 'count', 'icon', 'size', 'tooltip', 'css', 'disabled', and 'hidden'. The 'type' property must be explicitly set to 'selectButton'.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/ribbon/api/api_selectbutton_properties.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nconst data = [\n    {\n        type: \"selectButton\",\n        id?: string | number,\n        parent?: string,\n        value?: string,\n        items?: IMenuElement[], // ISpacer | ISeparator | INavItem | IMenuItem | ICustomHTML\n    \n        count?: number,\n        countColor?: \"danger\" | \"secondary\" | \"primary\" | \"success\",\n        icon?: string,\n        size?: \"small\" | \"medium\" | \"auto\",\n        tooltip?: string,\n\n        css?: string | string[],\n        disabled?: boolean,\n        hidden?: boolean,\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Using Destructor Method in DHTMLX Form Input - JavaScript\nDESCRIPTION: Demonstrates how to remove a Form Input instance and clean up its resources using the destructor() method. The method is called on a specific input item retrieved from the form.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/input/input_destructor_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"input\").destructor();\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Template for DataView Items in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a DataView with a custom template function. The template defines the HTML structure for each item, including an image, title, and description. The function takes an item object as a parameter and returns a string of HTML.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/dataview/api/dataview_template_config.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst dataview = new dhx.DataView(\"dataview_container\", {\n    itemsInRow: 4, \n    template: function(item) {\n        let template = \"<div class='item_wrap'>\";\n        template += \"<img class='image' src=\" + \"..images/\" + item.thumbnailName + \" />\";\n        template += \"<h2 class='title'>\" + item.value + \"</h2>\";\n        template += \"<p class='description'>\" + item.shortDescription + \"</p>\";\n        template += \"</div>\";\n        return template;\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Badge Counter to NavItem\nDESCRIPTION: Demonstrates adding a numeric badge to a NavItem using the count property.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/ribbon/navitem.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    type:\"navItem\", value:\"Some\",\n    icon:\"dxi dxi-check\",\n    count:10\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Virtual Scrolling in DHTMLX Combo Box\nDESCRIPTION: Demonstrates how to enable virtual scrolling in a DHTMLX Combo Box component for dynamic loading of options when scrolling through the list. The virtual property is set to true to enable this functionality.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/combobox/api/combobox_virtual_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst combo = new dhx.Combobox(\"combo_container\",{\n    virtual:true\n});\n```\n\n----------------------------------------\n\nTITLE: Hiding All Toolbar Items using hide() in JavaScript\nDESCRIPTION: Illustrates how to hide all items within a DHTMLX Toolbar simultaneously. Starting from v7.0, calling the `hide()` method without any parameters achieves this. This provides a convenient way to clear the toolbar interface when needed.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/toolbar/api/toolbar_hide_method.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n// hides all Toolbar items\ntoolbar.hide();\n```\n\n----------------------------------------\n\nTITLE: Defining Grid Column ID Type\nDESCRIPTION: Shows the type definition for the required id property of a Grid column.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/gridcolumn_properties/gridcolumn_id_property.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nid: string | number;\n```\n\n----------------------------------------\n\nTITLE: JSON Format Template for Input Control\nDESCRIPTION: Template showing the structure and properties available for an input control in DHTMLX Toolbar including placeholder and label options.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/toolbar/load_data.md#2025-04-22_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n// input\n{\n    id: \"lookup\",                      \n    type: \"input\",                       \n    value: \"\",                         \n    placeholder: \"Type in to search...\",      \n    width: 100,                          \n    label: \"Search\"\n}\n```\n\n----------------------------------------\n\nTITLE: RemoveSpan Method Signature\nDESCRIPTION: TypeScript signature showing the method definition with its parameters and return type.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_removespan_method.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nremoveSpan(rowId: string | number, colId: string | number): void;\n```\n\n----------------------------------------\n\nTITLE: Configuring Footer Row Height in DHTMLX Grid (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to initialize a DHTMLX Grid with a custom footer row height. The 'footerRowHeight' property is set to 50 pixels, overriding the default value of 40 pixels.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_footerrowheight_config.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst grid = new dhx.Grid(\"grid_container\", {\n    columns: [\n        // columns config\n    ],\n    footerRowHeight: 50\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX Toolbar with Built-in CSS Class - JavaScript\nDESCRIPTION: Shows how to assign a built-in DHTMLX CSS class to a Toolbar instance for standard widget appearance changes. The Toolbar is created by passing the container id and an options object specifying the 'css' property as 'dhx_widget--bg-gray'. Requires the DHTMLX UI library and a referenced DOM element with id 'toolbar_container'. The result is a Toolbar styled with the DHTMLX gray background class; no custom CSS definitions are necessary.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/toolbar/api/toolbar_css_config.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst toolbar = new dhx.Toolbar(\"toolbar_container\", {\\n    css: \"dhx_widget--bg-gray\"\\n});\n```\n\n----------------------------------------\n\nTITLE: Adding NavItem to Sidebar in JavaScript\nDESCRIPTION: Demonstrates how to add a NavItem to a Sidebar using the add() method of Tree Collection. This is the basic way to create a new navigation item in the sidebar.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/sidebar/navitem.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsidebar.data.add({\n    type:\"navItem\", value:\"My NavItem\"\n});\n```\n\n----------------------------------------\n\nTITLE: Subscribing to the beforeShow Event in DHTMLX Popup - JavaScript\nDESCRIPTION: This snippet shows how to subscribe to the beforeShow event of a DHTMLX Popup instance using JavaScript. When the event fires before the popup is displayed, custom logic can be executed—in this example, logging a message to the console. By returning true, the popup is allowed to display; returning false would prevent the popup from appearing. Requires that a DHTMLX Popup object exists and event handling is enabled on it.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/popup/api/popup_beforeshow_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\npopup.events.on(\"beforeShow\", function(element){\n    console.log(\"A popup will be shown\");\n    return true;\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Button with Icon\nDESCRIPTION: Creates a button with both text and icon. The icon is specified using the 'dxi' icon library class.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/toolbar/button.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    type:\"button\", value:\"Done\",\n    icon:\"dxi dxi-check\"\n}\n```\n\n----------------------------------------\n\nTITLE: Return Object Structure from Spacer's getProperties Method\nDESCRIPTION: Example showing the structure of the object returned by the getProperties() method of a Spacer control. It includes height, padding, and width properties with their default values.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/spacer/spacer_getproperties_method.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    height: \"content\",\n    padding: 0,\n    width: \"content\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Container Properties Example - JavaScript\nDESCRIPTION: Example showing how to dynamically change the height, width, and padding properties of a Container control in a DHTMLX Form.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/container/container_setproperties_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"container\").setProperties({\n    height: \"200\",\n    width: \"800\",\n    padding: \"10\"\n});\n```\n\n----------------------------------------\n\nTITLE: JSON Format Template for NavItem Control\nDESCRIPTION: Template showing the structure and properties available for a navItem control in DHTMLX Toolbar.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/toolbar/load_data.md#2025-04-22_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\n// navItem\n{\n    type: \"navItem\", \n    value: \"Some\",\n    icon: \"dxi dxi-check\"\n}\n```\n\n----------------------------------------\n\nTITLE: Enable/Disable Input Controls in JavaScript\nDESCRIPTION: Shows how to enable or disable Input controls in a Ribbon component.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/ribbon/input.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nribbon.enable(id);\nribbon.disable(id);\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Calendar Width\nDESCRIPTION: Sets the calendar width to 400px instead of the default 250px using the width property.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar2/configuring.mdx#2025-04-22_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nvar calendar = new dhx.Calendar(\"calendar_container\", {\n    width: \"400\", \n    css: \"dhx_widget--bordered\"\n});\n```\n\n----------------------------------------\n\nTITLE: Handling apply Event in DHTMLX Colorpicker\nDESCRIPTION: This snippet demonstrates how to attach an event listener to the 'apply' event of a DHTMLX Colorpicker. The event fires when the user clicks the \"Select\" button in the colorpicker interface.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/colorpicker/api/colorpicker_apply_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncolorpicker.events.on(\"apply\", function() {\n    // your logic here\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX Sidebar with Collapsed State\nDESCRIPTION: Example of creating a new DHTMLX Sidebar instance with the collapsed state enabled and custom CSS border styling. The collapsed config is set to true to initialize the sidebar in a minimized state.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/sidebar/api/sidebar_collapsed_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst sidebar = new dhx.Sidebar(\"sidebar_container\", {\n    css: \"dhx_widget--border_right\",\n    collapsed: true\n});\n```\n\n----------------------------------------\n\nTITLE: Including Dependencies and Initializing App in HTML HTML\nDESCRIPTION: Finalizes the `index.html` file by adding necessary script and stylesheet links. It includes DHTMLX Suite resources from a CDN, links to the bundled application JavaScript (`app.js`) and CSS (`app.css`), and an inline script to instantiate the `MyApp` class and render it into the designated '#app' container.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/optimus_guides/how_to_start_optimus.md#2025-04-22_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n    <head>\n        <title>dhtmlxOptimus guide</title>\n        <!-- Suite -->\n        <script type=\"text/javascript\" src=\"https://cdn.dhtmlx.com/suite/edge/suite.js\"></script>\n        <link rel=\"stylesheet\" href=\"https://cdn.dhtmlx.com/suite/edge/suite.css\" />\n        <!-- App -->\n        <script type=\"text/javascript\" src=\"./app.js\"></script>\n        <link rel=\"stylesheet\" href=\"./app.css\" />\n    </head>\n    <body>\n        <section id=\"app\" class=\"main__container\"></section>\n        <script>\n            const app = new optimusguide.MyApp();\n            app.render(\"#app\");\n        </script>\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Configuring Drag Copy in DataView\nDESCRIPTION: Shows how to enable copying of dragged items instead of moving them in DataView using the dragCopy option.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/dataview/configuration.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst source = new dhx.DataView(\"dataview-source\", {dragMode: \"source\", dragCopy: true});\nconst target = new dhx.DataView(\"dataview-target\", {dragMode: \"target\", dragCopy: true});\n```\n\n----------------------------------------\n\nTITLE: Setting Vertical Mode\nDESCRIPTION: Creates a vertically oriented slider instead of the default horizontal layout.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/slider/configuring_slider.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst slider = new dhx.Slider(\"slider_container\", { \n   mode:\"vertical\"\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX Timepicker with Array Value - JavaScript\nDESCRIPTION: This example initializes the DHTMLX Timepicker with an array containing hour, minute, and 'AM/PM' identifier (for 12-hour format). Elements should be ordered as [hour, minute, 'AM/PM'] to correctly set the picker's initial value. Dependencies include DHTMLX Suite and a valid HTML container element. Array must follow the described convention; missing or extra elements may cause incorrect initialization.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/timepicker/api/timepicker_value_config.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// the value as an array\nconst timepicker = new dhx.Timepicker(\"timepicker_container\", {\n    value: [6,20,\"AM\"]\n});\n```\n\n----------------------------------------\n\nTITLE: Handling focus Event in DHTMLX Slider\nDESCRIPTION: This snippet demonstrates how to attach an event listener for the 'focus' event on a DHTMLX Slider instance. The event fires when a thumb of the Slider receives focus. It logs a message to the console when the event occurs.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/slider/api/slider_focus_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nslider.events.on(\"focus\", function() {\n    console.log(\"the focus is on the element\");\n});\n```\n\n----------------------------------------\n\nTITLE: Handling blur Event for Input Control in DHTMLX Form (JavaScript)\nDESCRIPTION: This snippet demonstrates how to attach an event listener to the 'blur' event of an Input control in a DHTMLX Form. The event fires when the Input control loses focus and provides the current value of the control as a parameter.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/input/input_blur_event.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nform.getItem(\"input\").events.on(\"blur\", (value) => {\n    console.log(\"blur\", value);\n});\n```\n\n----------------------------------------\n\nTITLE: Using DataProxy with DataCollection in JavaScript\nDESCRIPTION: Demonstrates how to apply a DataProxy instance to a DataCollection for loading data from an external source. This example shows the integration of DataProxy with DHTMLX data management components.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/data_proxy/index.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst dataCollection = new dhx.DataCollection();\nconst proxy = new dhx.DataProxy(\"https://myCustomUrl.com\");\ndataCollection.load(proxy);\n```\n\n----------------------------------------\n\nTITLE: Adding Tooltip to Title Control in DHTMLX Toolbar\nDESCRIPTION: This example illustrates how to add a tooltip to a Title control in a DHTMLX toolbar. The tooltip property is added to the configuration object of the Title control.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/toolbar/title.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    type:\"title\",\n    value:\"2K\",\n    tooltip:\"Your subscribers\"\n}\n```\n\n----------------------------------------\n\nTITLE: Attaching Icon HTML to Popup Component (JavaScript)\nDESCRIPTION: Illustrates how to use the 'attachHTML()' method to add an icon to a DHTMLX Popup component.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/helpers/icon.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst popup = new dhx.Popup({\n    css: \"dhx_widget--border-shadow\"\n});\n \npopup.attachHTML(\"<i class = 'dxi dxi-icon-name'></i>\");\n```\n\n----------------------------------------\n\nTITLE: CSS for Highlighted Dates\nDESCRIPTION: CSS class definition for highlighted dates, giving them a white text color.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar2/configuring.mdx#2025-04-22_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<style>\n    .highlight-date {\n        color: #fff;\n    }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Example of Returned Properties Object for Combo Box\nDESCRIPTION: This code snippet shows an example of the object returned by the getProperties() method for a Combo Box control. It includes various configuration attributes and their default or set values.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/combo/combo_getproperties_method.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    errorMessage: \"\",\n    filter: undefined,\n    height: \"content\",\n    helpMessage: \"\",\n    hiddenLabel: false,\n    itemHeight: 32,\n    itemsCount: undefined,\n    label: \"count\",\n    labelPosition: \"left\",\n    labelWidth: \"\",\n    listHeight: 224,\n    multiselection: true,\n    padding: 0,\n    placeholder: \"\",\n    preMessage: \"\",\n    readOnly: false,\n    required: false,\n    selectAllButton: true,\n    successMessage: \"\",\n    template: undefined,\n    validation: undefined,\n    virtual: false,\n    width: \"content\"    \n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving CSS Styles with get() Method - JavaScript\nDESCRIPTION: Demonstrates how to use the get() method of CSS Manager to retrieve a list of styles associated with a specific CSS class. Returns an object containing style properties and their values.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/css_manager/api/cssmanager_get_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst StyleList =  dhx.cssManager.get(\"myCustomClass\");\n// -> { color: \"black\", width: \"200px\" }\n```\n\n----------------------------------------\n\nTITLE: Handling blur Event in DHTMLX Form Textarea Control\nDESCRIPTION: This example demonstrates how to attach an event handler to the blur event of a Textarea control in a DHTMLX Form. When the Textarea loses focus, the handler logs the current value to the console.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/textarea/textarea_blur_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"textarea\").events.on(\"blur\", (value) => {\n    console.log(\"blur\", value);\n});\n```\n\n----------------------------------------\n\nTITLE: Block JSON Template for DHTMLX Ribbon (JavaScript/JSON)\nDESCRIPTION: Provides a JSON template for defining a 'block' element within a DHTMLX Ribbon. The object specifies `type: \"block\"`, an optional `title`, and an `items` array containing the configuration objects for the controls (e.g., buttons with icons and values) nested within this block.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/ribbon/data_loading.md#2025-04-22_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n// block\n{\n    type: \"block\",\n    title: \"Action\",        \n    items: [\n        { id: \"copy\", icon: \"mdi mdi-content-copy\", value: \"Copy\" },\n        { id: \"cut\", icon: \"mdi mdi-content-cut\", value: \"Cut\" }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Default Locale for JavaScript Colorpicker\nDESCRIPTION: This snippet shows the default English locale for the DHTMLX Colorpicker. It defines translations for various UI elements and actions.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/colorpicker/localizing_colorpicker.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst en = {\n    cancel: \"Cancel\",\n    select: \"Select\",\n    rightClickToDelete: \"Right click to delete\",\n    customColors: \"Custom colors\",\n    addNewColor: \"Add new color\"\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Popup CSS Classes in HTML\nDESCRIPTION: Defines new CSS classes for customizing the popup's appearance and includes them in the page via a <style> block. No JavaScript is used here; only class names and optional style rules need to be specified. These classes are prerequisites for subsequent JavaScript configuration and can be extended as needed.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/popup/customization.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<style>\\n    .my-first-class {\\n        /*some styles*/\\n    }\\n    \\n    .my-second-class {\\n        /*some styles*/\\n    }\\n</style>\\n\n```\n\n----------------------------------------\n\nTITLE: Disabling Text Control in DHTMLX Form (JavaScript)\nDESCRIPTION: This snippet demonstrates how to disable a Text control in a DHTMLX Form using the disable() method. It retrieves the Text item from the form and calls the disable() method on it.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/text/text_disable_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nform.getItem(\"text\").disable();\n```\n\n----------------------------------------\n\nTITLE: Hiding Datepicker Control in DHTMLX Form (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to hide a Datepicker control in a DHTMLX Form using the hide() method. It retrieves the Datepicker item from the form and calls the hide() method on it.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/calendar/calendar_hide_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nform.getItem(\"datepicker\").hide();\n```\n\n----------------------------------------\n\nTITLE: Clearing Validation of Select Control in DHTMLX Form\nDESCRIPTION: This example demonstrates how to use the clearValidate() method to clear validation state of a Select control in a DHTMLX form. The method is called on a specific Select control retrieved using the getItem() method.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/select/select_clearvalidate_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"select\").clearValidate();\n```\n\n----------------------------------------\n\nTITLE: Customizing Window Size in DHTMLX Window with JavaScript\nDESCRIPTION: This code configures the width, height, minWidth, and minHeight properties for a DHTMLX Window at initialization. These parameters control the window's default size and enforce minimum size constraints. Requires DHTMLX Suite, and numeric values correspond to pixels. Useful for fixed-dimension or minimum-dimension design needs.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/window/configuration.md#2025-04-22_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nconst dhxWindow = new dhx.Window({\n    width:250,\n    height:250,\n    minWidth:170,\n    minHeight:170\n});\n```\n\n----------------------------------------\n\nTITLE: Disabling Selection in DHTMLX List (JavaScript)\nDESCRIPTION: This snippet demonstrates how to create a new DHTMLX List instance with item selection disabled. The selection property is set to false to prevent users from selecting list items.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/list/api/list_selection_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst list = new dhx.List(\"list_container\", {\n    selection: false\n});\n```\n\n----------------------------------------\n\nTITLE: Removing Controls from Toolbar\nDESCRIPTION: Using the remove() method from Tree Collection API to delete controls from the toolbar by their ID.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/toolbar/common_methods.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\ntoolbar.data.remove(\"control-id\");\n```\n\n----------------------------------------\n\nTITLE: Attaching Event Listener for footerCellDblClick in DHTMLX Grid\nDESCRIPTION: This code snippet demonstrates how to attach an event listener for the footerCellDblClick event in a DHTMLX Grid. The event fires when a user double-clicks on a footer cell of the grid. It provides access to the cell, column, and event object for custom logic implementation.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_footercelldblclick_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngrid.events.on(\"footerCellDblClick\", (cell, column, event) => {\n    // your logic here\n});\n```\n\n----------------------------------------\n\nTITLE: Checking Container Visibility in DHTMLX Form (JavaScript)\nDESCRIPTION: This snippet demonstrates how to check if a Container control is visible on the page using the isVisible() method. The method returns a boolean value indicating the visibility state of the container.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/container/container_isvisible_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"container\").isVisible();\n// -> true/false\n```\n\n----------------------------------------\n\nTITLE: Available Textarea Configuration Properties\nDESCRIPTION: Shows the complete set of configuration properties that can be modified for a Textarea control using setProperties method.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/textarea/textarea_setproperties_method.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    css: string,\n    errorMessage: string,\n    height: string|number|\"content\",\n    helpMessage: string,\n    hiddenLabel: boolean,\n    label: string,\n    labelPosition: string,\n    labelWidth: string|number,\n    maxlength: string|number,\n    minlength: string|number,\n    padding: string|number,\n    placeholder: string,\n    preMessage: string,\n    readOnly: boolean,\n    required: boolean,\n    successMessage: string,\n    validation: object|function,\n    width: string|number|\"content\"\n}\n```\n\n----------------------------------------\n\nTITLE: Handling beforeShow Event for Checkbox Group in DHTMLX Form\nDESCRIPTION: This code snippet demonstrates how to attach an event listener to the beforeShow event of a Checkbox Group control in a DHTMLX Form. It logs the event details and always allows the control or checkbox to be shown.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/checkbox_group/checkboxgroup_beforeshow_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"CheckboxGroup\").events.on(\"beforeShow\", function(value, id) {\n    console.log(\"beforeShow\", value, id);\n    return true;\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Form with Fieldset and Retrieving Properties in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a Form with a Fieldset control and use the getProperties() method to retrieve its configuration attributes. The method returns an object containing the available attributes and their values.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/fieldset/fieldset_getproperties_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst form = new dhx.Form(\"form_container\", {\n    rows: [\n        {\n            type: \"fieldset\",\n            label: \"Section name\",\n            rows: [\n                {\n                    type: \"input\",\n                    name: \"name\",\n                    required: true,\n                    label: \"Name\",\n                    placeholder: \"Type text\",\n                },\n                {\n                    type: \"input\",\n                    name: \"surname\",\n                    required: true,\n                    label: \"Surname\",\n                    placeholder: \"Type text\",\n                },\n                // more controls\n            ]\n        }\n    ]\n});\n\nform.getItem(\"fieldset\").getProperties();\n```\n\n----------------------------------------\n\nTITLE: Configuring Transparency in DHTMLX Colorpicker (JavaScript)\nDESCRIPTION: This snippet demonstrates how to initialize a DHTMLX Colorpicker with the transparency option disabled. The transparency config determines whether the transparency scale is displayed in the picker mode.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/colorpicker/api/colorpicker_transparency_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst colorpicker = new dhx.Colorpicker(\"colorpicker_container\",{\n    transparency: false\n});\n```\n\n----------------------------------------\n\nTITLE: Spacer JSON Template for DHTMLX Ribbon (JavaScript/JSON)\nDESCRIPTION: Shows the JSON configuration for adding flexible 'spacer' element within a DHTMLX Ribbon, used for layout adjustments. It includes an optional `id` and the `type: \"spacer\"` property.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/ribbon/data_loading.md#2025-04-22_snippet_16\n\nLANGUAGE: jsx\nCODE:\n```\n// spacer\n{\n    id: \"spacerId\",          \n    type: \"spacer\"        \n}\n```\n\n----------------------------------------\n\nTITLE: Using blur() Method in DHTMLX Form\nDESCRIPTION: This code demonstrates two ways to use the blur() method in a DHTMLX Form: removing focus from the currently focused control, and removing focus from a specific control by name.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/form_blur_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.blur(); // removes focus from the control that is currently in focus\n\nform.blur(\"checkbox\"); // removes focus from the Checkbox control\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX Grid with rootParent Config in JavaScript\nDESCRIPTION: This snippet demonstrates how to initialize a DHTMLX Grid with the rootParent configuration. It sets up a tree-type grid with custom columns and uses 'root' as the rootParent value. The rootParent option defines the id of the root parent for the tree structure.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_rootparent_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst grid = new dhx.Grid(\"grid_container\", {\n    type: \"tree\",\n    rootParent: \"root\", \n    columns: [\n        { width: 340, id: \"name\", header: [{ text: \"Name\" }] },\n        { width: 340, id: \"native\", type: \"string\", header: [{ text: \"Native name\" }] },\n        { width: 260, id: \"capital\", type: \"string\", header: [{ text: \"Capital\" }] },\n        { width: 260, id: \"currency\", type: \"string\", header: [{ text: \"Currency\" }] }\n    ],\n    data: dataset\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX Menu with Custom CSS Classes - JavaScript\nDESCRIPTION: This example demonstrates how to initialize a DHTMLX Menu instance, targeting an HTML container (menu_container), while applying multiple custom CSS classes (my_first_class and my_second_class) to all containers of Menu controls with nested items. This requires the DHTMLX Suite Menu library to be loaded and expects the referenced CSS classes to already be defined in the document. The main parameter, menuCss, accepts a space-separated string with CSS class names, and the resulting menu will display using these custom styles.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/menu/api/menu_menucss_config.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst menu = new dhx.Menu(\"menu_container\", {\\n    menuCss:\"my_first_class my_second_class\"\\n});\n```\n\n----------------------------------------\n\nTITLE: Removing a Sidebar instance with destructor() method in JavaScript\nDESCRIPTION: This example demonstrates how to call the destructor() method to remove a Sidebar instance and free up occupied resources.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/sidebar/api/sidebar_destructor_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsidebar.destructor();\n```\n\n----------------------------------------\n\nTITLE: Creating a Styled Label in HTML\nDESCRIPTION: This snippet shows how to create a simple label element styled with DHTMLX CSS classes. It demonstrates the basic usage of the dhx_label class.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/helpers/base_elements.md#2025-04-22_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<label for=\"element-id\" class=\"dhx_label\">Email</label>\n```\n\n----------------------------------------\n\nTITLE: Adding Custom HTML Content to DHTMLX Sidebar in JavaScript\nDESCRIPTION: This code shows how to add custom HTML content (such as a user profile with avatar, name, and contact info) to a DHTMLX sidebar using the add() method of Tree Collection.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/sidebar/customhtmlbutton.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsidebar.data.add({\n    type: \"customHTML\",\n    id: \"userInfo\",\n    css: \"user-info_item\",\n    html: \"<div class='user-info_container'>\" +\n            \"<img class='user-info_avatar' src='../common/ava.png'/>\" +\n            \"<div class='user-info_title'>\" +\n            \"Gloria McKinney\"+\n            \"</div>\" +\n            \"<div class='user-info_contact'>\" +\n            \"@gmckinney\" +\n            \"</div>\" +\n            \"</div>\"\n});\n```\n\n----------------------------------------\n\nTITLE: Including External Icon Fonts in DHTMLX Ribbon (HTML)\nDESCRIPTION: Demonstrates how to include the DHTMLX Ribbon JS and CSS files along with a third-party icon font (Material Design Icons) via CDN in the &lt;head&gt; or relevant section of the HTML file. Requires access to the DHTMLX source files and an active internet connection to load icons from the CDN. Ensures that custom icon font classes are available for Ribbon control configuration.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/ribbon/customization.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script type=\\\"text/javascript\\\" src=\\\"../../codebase/ribbon.js\\\"></script>\\n<link rel=\\\"stylesheet\\\" href=\\\"../../codebase/ribbon.css\\\">\\n\\n<link href=\\\"https://cdn.materialdesignicons.com/3.6.95/css/materialdesignicons.min.css?v=6.4.4\\\" \\n    media=\\\"all\\\" rel=\\\"stylesheet\\\" type=\\\"text/css\\\">\n```\n\n----------------------------------------\n\nTITLE: Setting Fixed Height for Layout Cell in JavaScript\nDESCRIPTION: This snippet demonstrates how to initialize a Layout with a cell of fixed height. The height is set to 300 pixels for a cell with a header.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/layout/api/cell/layout_cell_height_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst layout = new dhx.Layout(\"layout_container\", {\n    cols: [\n        { header: \"Cell header\", height: \"300px\" }\n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: Title Template for DHTMLX Sidebar\nDESCRIPTION: Template for creating a title control in the sidebar with id, type, value, and tooltip properties. Titles are used as section headers within the sidebar.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/sidebar/data_loading.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// title\n{\n    id: \"collection\",        \n    type: \"title\",                 \n    value: \"Music\",                \n    tooltip: \"Current collection\"    \n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Ribbon Controls with External Icons (JavaScript)\nDESCRIPTION: Defines Ribbon control data using the icon property with external icon font class names (e.g., 'mdi mdi-file-outline'). This snippet requires the external icon font to be included in the page HTML prior to use, as well as the DHTMLX suite library. The configuration object can be parsed by Ribbon to display custom buttons with chosen icons and sizes. Inputs include an array of control objects, each specifying label, icon, and size; outputs are used for visual rendering by the DHTMLX Ribbon.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/ribbon/customization.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst data = [\\n    {\\n        type: \\\"block\\\",\\n        \\\"items\\\": [\\n            {\\n                type: \\\"block\\\",\\n                \\\"items\\\": [\\n                    {\\n                        value: \\\"New\\\",\\n                        icon: \\\"mdi mdi-file-outline\\\",\\n                        size: \\\"auto\\\",\\n                    }\\n                ]\\n            },\\n            {\\n                type: \\\"block\\\",\\n                direction: \\\"col\\\",\\n                \\\"items\\\": [\\n                    {\\n                        value: \\\"Add\\\",\\n                        icon: \\\"mdi mdi-plus\\\",\\n                        size: \\\"small\\\",\\n                    },\\n                    {\\n                        value: \\\"Remove\\\",\\n                        icon: \\\"mdi mdi-minus\\\",\\n                        size: \\\"small\\\",\\n                    }\\n                ]\\n            }\\n        ]\\n    }\\n];\n```\n\n----------------------------------------\n\nTITLE: Including DHTMLX Suite Files\nDESCRIPTION: Code showing how to include the required CSS and JavaScript files when using DHTMLX Tree as part of the Suite package.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree/initialization_of_dhtmlxtree.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<link type=\"text/css\" href=\"../codebase/suite.css\">\n<script src=\"../codebase/suite.js\" type=\"text/javascript\"></script>\n```\n\n----------------------------------------\n\nTITLE: Creating Ribbon Container\nDESCRIPTION: HTML markup for creating a container element that will hold the Ribbon component.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/ribbon/how_to_start.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"ribbon_container\"></div>\n```\n\n----------------------------------------\n\nTITLE: Applying DHTMLX Built-in CSS Classes to Chart in JavaScript\nDESCRIPTION: This snippet shows how to use DHTMLX's built-in CSS classes to style a Chart component. It applies background and border styles using predefined DHTMLX classes.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/chart/api/chart_css_config.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst chart = new dhx.Chart(\"chart_container\", {\n    css: \"dhx_widget--bg_white dhx_widget--bordered\"\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX Combo Box with Custom List Height\nDESCRIPTION: Creates a new Combo Box instance with a custom height of 50 pixels for the dropdown list. The listHeight property can accept either a number or string value.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/combobox/api/combobox_listheight_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst combo = new dhx.Combobox(\"combo_container\",{\n    listHeight:50\n});\n```\n\n----------------------------------------\n\nTITLE: Event Handlers Type Definition\nDESCRIPTION: TypeScript-style definition showing the structure of the eventHandlers configuration object\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/combobox/api/combobox_eventhandlers_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\neventHandlers?: {\n    [eventName: string]: {\n        [className: string]: (event: Event, id: string | number) => void | boolean; \n    };\n};\n```\n\n----------------------------------------\n\nTITLE: Default English Locale for DHTMLX Calendar\nDESCRIPTION: The default English locale configuration for dhtmlxCalendar which defines short and full names for months and days of the week.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar/localizing_calendar.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst en = {\n    // short names of months\n    monthsShort: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \n                 \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"],\n    // full names of months\n    months: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \n            \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"],\n    // short names of days\n    daysShort: [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"],\n    // full names of days\n    days: [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \n                \"Friday\", \"Saturday\"]\n};\n```\n\n----------------------------------------\n\nTITLE: Defining DHTMLX Ribbon Block Configuration Object in JavaScript\nDESCRIPTION: Illustrates the structure of a JavaScript data object used to define a 'block' type control within a DHTMLX Ribbon. It outlines the available properties such as 'type', 'id', 'parent', 'items', layout 'direction', 'title', 'css', 'disabled', and 'hidden', along with their potential types or accepted values. This object is typically part of a larger data array used to initialize or update the Ribbon component.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/ribbon/api/api_block_properties.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = [\n    {\n        type: \"block\",\n        id?: string | number,\n        parent?: string,\n        items?: object[],\n\n        direction?: \"row\" | \"col\",\n        title?: string,\n        \n        css?: \"string\",\n        disabled?: boolean,\n        hidden?: boolean,\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Items Per Row in DHTMLX DataView (JavaScript)\nDESCRIPTION: This snippet demonstrates how to initialize a DataView component with a specified number of items per row. The 'itemsInRow' config is set to 5, meaning the DataView will display 5 items in each row.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/dataview/api/dataview_itemsinrow_config.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst dataview = new dhx.DataView(\"dataview_container\", {itemsInRow: 5});\n```\n\n----------------------------------------\n\nTITLE: Setting Date Range with Strings\nDESCRIPTION: Configures the calendar in range mode with a date range selected using string dates.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar2/configuring.mdx#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n// selects dates as an array of string values(for the range mode)\nvar calendar = new dhx.Calendar(\"calendar_container\", {\n    value: ([\"03/06/19\", \"15/06/19\"]),\n    range: true  \n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Menu Separator in JavaScript\nDESCRIPTION: This code snippet demonstrates how to define a separator item in a DHTMLX Menu data structure. It shows the required 'type' property and the optional 'id' property.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/menu/api/api_separator_properties.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = [\n    {\n        type: \"separator\",\n        id?: string | number,\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Defining Data Structure for Ribbon Custom HTML Button in JavaScript\nDESCRIPTION: This JavaScript code snippet shows the data structure used to define a custom HTML button within a DHTMLX Ribbon. It outlines the available properties like `type` (which must be set to 'customHTML'), optional `id`, `parent` ID, `html` content as a string, `css` classes (string or array of strings), and the `hidden` status (boolean).\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/ribbon/api/api_customhtml_properties.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nconst data = [\n    {\n        type: \"customHTML\",\n        id?: string | number,\n        parent?: string,\n        html?: string,\n        css?: string | string[],\n        hidden?: boolean,\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: JSON Template for Spacer in DHTMLX Menu\nDESCRIPTION: JSON format template for a Spacer object in DHTMLX Menu, used to add space between menu items.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/menu/data_loading.md#2025-04-22_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": \"spacerId\",          \n    \"type\": \"spacer\"        \n}\n```\n\n----------------------------------------\n\nTITLE: Show/Hide Spacer in DHTMLX Ribbon\nDESCRIPTION: Shows how to dynamically show or hide a Spacer control in the Ribbon using the show() and hide() methods. These methods require the ID of the spacer as a parameter.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/ribbon/spacer.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nribbon.show(id);\nribbon.hide(id);\n```\n\n----------------------------------------\n\nTITLE: Handling Window Header Double Click Event in JavaScript\nDESCRIPTION: Example showing how to attach an event listener for the headerDoubleClick event on a DHTMLX Window instance. The event fires when a user double clicks the window header and provides access to the native event object.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/window/api/window_headerdoubleclick_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndhxWindow.events.on(\"headerDoubleClick\", function(events) {\n   console.log(events)\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Custom CSS Classes for Toolbar Styling\nDESCRIPTION: Example showing how to add custom CSS classes in the style section to modify the toolbar's appearance.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/toolbar/customization.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<style>\n    .my-first-class {\n        /*some styles*/\n    }\n    \n    .my-second-class {\n        /*some styles*/\n    }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Defining Project Structure for Optimus Demo Guide HTML\nDESCRIPTION: Illustrates the recommended folder organization for the DHTMLX Optimus starter application. It outlines the placement of build outputs, source code (including assets, static files, views), the main HTML entry point (`index.html`), and the main JavaScript entry point (`index.js`).\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/optimus_guides/how_to_start_optimus.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\noptimus_demo_guide\n|── build/\n└── src/\n   |── assets/\n   |── static/\n   |── views/\n   |── index.html\n   └── index.js    \n```\n\n----------------------------------------\n\nTITLE: Enabling a Textarea Control in DHTMLX Form\nDESCRIPTION: This snippet demonstrates how to enable a previously disabled Textarea control in a DHTMLX Form by using the enable() method on the form item reference.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/textarea/textarea_enable_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"textarea\").enable();\n```\n\n----------------------------------------\n\nTITLE: Checking Row Visibility in DHTMLX Grid\nDESCRIPTION: Use the isRowHidden() method to check if a row is hidden or visible. It returns true if hidden, false if visible.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/usage.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\ngrid.isRowHidden(\"1\"); // -> true|false\n```\n\n----------------------------------------\n\nTITLE: Clearing Datepicker Validation in DHTMLX Form - JavaScript\nDESCRIPTION: Demonstrates how to clear validation state of a Datepicker form control using the clearValidate() method. The method is called on a Datepicker item retrieved from the form using getItem().\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/calendar/calendar_clearvalidate_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"datepicker\").clearValidate();\n```\n\n----------------------------------------\n\nTITLE: Adding Close Buttons to All Tabs in DHTMLX Tabbar (JavaScript)\nDESCRIPTION: This snippet demonstrates how to initialize a DHTMLX Tabbar with close buttons for all tabs. The 'closable' option is set to true, which adds close buttons to every tab in the tabbar.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tabbar/api/tabbar_closable_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst tabbar = new dhx.Tabbar(\"tabbar_container\", {\n    closable: true\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Tabbar Container - HTML\nDESCRIPTION: This snippet creates a <div> element with an ID of 'tabbar_container' to serve as the mounting point for the DHTMLX Tabbar UI component. The container must exist in the DOM before initializing the Tabbar from JavaScript. There are no dependencies required for this snippet beyond standard HTML usage.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tabbar/init.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div id=\\\"tabbar_container\\\"></div>\n```\n\n----------------------------------------\n\nTITLE: Initializing Tree in Collapsed State with JavaScript\nDESCRIPTION: This code snippet demonstrates how to initialize a DHTMLX Tree component in a collapsed state using the 'collapsed' configuration property set to true. This property, added in version 8.1, determines whether the tree starts in a collapsed state.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree/api/tree_collapsed_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst tree = new dhx.Tree(\"tree_container\", { \n    collapsed: true\n});\n```\n\n----------------------------------------\n\nTITLE: Hiding Progress Bar in DHTMLX Layout (JavaScript)\nDESCRIPTION: This snippet demonstrates how to use the progressHide() method to hide the progress bar in a Layout container. It's a simple method call that doesn't require any parameters.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/layout/api/layout_progresshide_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlayout.progressHide();\n```\n\n----------------------------------------\n\nTITLE: Configuring Title Properties in DHTMLX Sidebar\nDESCRIPTION: Demonstrates the structure and available properties for configuring a Title control in DHTMLX Sidebar. Properties include type specification, identifiers, content values, styling options, and visibility controls.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/sidebar/api/api_title_properties.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = [\n    {\n        type: \"title\",\n        id?: string | number,\n        parent?: string,\n        value?: string,\n    \n        html?: string,\n        tooltip?: string,\n\n        css?: string | string[],\n        disabled?: boolean,\n        hidden?: boolean,\n    },\n    // more Sidebar controls\n]\n```\n\n----------------------------------------\n\nTITLE: Common JSON Template Structure for Sidebar Items\nDESCRIPTION: A template showing the common structure of JSON data for sidebar items, including different types like menuItem, input, and title with their respective IDs.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/sidebar/data_loading.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// common\n[\n    {id: \"item_a\", type: \"menuItem\", ...},\n    {id: \"item_b\", type: \"input\", ...},\n    {id: \"item_c\", type: \"title\", ...}\n]\n```\n\n----------------------------------------\n\nTITLE: Handling afterShow Event in DHTMLX Form Spacer Control in JavaScript\nDESCRIPTION: This snippet demonstrates how to attach an event handler to the afterShow event of a Spacer control in a DHTMLX Form. The handler logs a message to the console when the spacer is shown.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/spacer/spacer_aftershow_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"spacer\").events.on(\"afterShow\", function() {\n    console.log(\"afterShow\");\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Icon to MenuItem in JavaScript\nDESCRIPTION: This code shows how to add an icon to a MenuItem using the 'icon' property.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/sidebar/menuitem.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    type:\"menuItem\", value:\"Some\",\n    icon:\"dxi dxi-menu-right\"\n}\n```\n\n----------------------------------------\n\nTITLE: Loading External Data into Ribbon\nDESCRIPTION: Demonstrates loading Ribbon data from an external file using data.load() method\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/ribbon/features.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n1gd5tbcf\n```\n\n----------------------------------------\n\nTITLE: ToggleGroup Properties Configuration\nDESCRIPTION: Configuration object for ToggleGroup control defining group-level properties for multiple toggles.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/form_getproperties_method.md#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    css: string,\n    full: boolean,\n    gap: number,\n    height: string | number |\"content\",\n    multiselection: boolean,\n    options: object[],\n    padding: string | number,\n    width: string | number | \"content\"\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Week Numbers Display\nDESCRIPTION: Configures the calendar to show week numbers on the left side of the calendar.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar2/configuring.mdx#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nvar calendar = new dhx.Calendar(\"calendar_container\", {\n    weekNumbers: true\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Theme Configuration Example\nDESCRIPTION: Example of creating a custom theme using CSS variables and applying it to DataView.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/dataview/customization.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<style>\n    .custom {\n        --dhx-font-color-primary: #fff;\n        --dhx-background-primary: #3A434A;\n        --dhx-color-primary: #118d8d;\n\n        --dhx-border-color: #4A555E;\n        --dhx-border: var(--dhx-border-width) solid var(--dhx-border-color);\n    }\n</style>\n\n<script>\n    const dataview = new dhx.DataView(\"dataview_container\", {\n        itemsInRow: 2, \n        gap: 10,\n        css: \"custom dhx_widget--bordered\",\n        template\n    });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Loading Data into DHTMLX List Widget (JSX)\nDESCRIPTION: This snippet demonstrates how to populate a DHTMLX List widget with data by calling the 'parse' method on the widget's data property. The 'widget_data' parameter should be a data object or array in a supported format. Ensure that the List widget has been initialized before calling this method.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/pagination/init.md#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n// loading data into the created DHTMLX List \\nwidget.data.parse(widget_data);\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX Ribbon with Configuration\nDESCRIPTION: JavaScript code demonstrating how to initialize a Ribbon component with configuration options using the dhx.Ribbon constructor.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/ribbon/how_to_start.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst ribbon = new dhx.Ribbon(\"ribbon_container\", {\n    // config options\n});\n```\n\n----------------------------------------\n\nTITLE: Basic AwaitRedraw Usage in JavaScript\nDESCRIPTION: Basic implementation of the dhx.awaitRedraw helper which returns a promise and executes code after component rendering is complete.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/helpers/await_redraw.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndhx.awaitRedraw().then(function() {\n    // your code here\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies using npm Shell\nDESCRIPTION: Executes the Node Package Manager (npm) command to download and install all project dependencies listed in the `package.json` file. This step is crucial for setting up the project environment after cloning or downloading the initial source code.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/optimus_guides/how_to_start_optimus.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Returned Object Structure from getProperties() for Slider Control in JavaScript\nDESCRIPTION: This code snippet shows the structure of the object returned by the getProperties() method for a Slider control, including various configuration attributes and their default values.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/slider/slider_getproperties_method.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    height: \"content\",\n    helpMessage: \"\",\n    hiddenLabel: false,\n    inverse: false,\n    label: \"slider\",\n    labelPosition: \"top\",\n    labelWidth: \"50px\",\n    majorTick: undefined,\n    max: 100,\n    min: 0,\n    mode: \"horizontal\",\n    padding: 0,\n    range: false,\n    step: 1,\n    tick: undefined,\n    tickTemplate: undefined,\n    tooltip: true,\n    width: \"content\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom CSS Classes for Ribbon Styling (HTML)\nDESCRIPTION: Defines new CSS class(es) in a &lt;style&gt; tag that can be applied to the Ribbon component to customize appearance. This snippet must be included before Ribbon initialization so the classes can be referenced. Styles can encapsulate colors, borders, or any CSS property, and are later linked via the Ribbon’s configuration. Has no direct input/output beyond affecting visual rendering at runtime.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/ribbon/customization.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<style>\\n    .my-first-class {\\n        /*some styles*/\\n    }\\n    \\n    .my-second-class {\\n        /*some styles*/\\n    }\\n</style>\n```\n\n----------------------------------------\n\nTITLE: Declaring sortable property type for Grid column in JSX\nDESCRIPTION: This code snippet shows the type declaration for the 'sortable' property of a Grid column. It's defined as an optional boolean value.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/gridcolumn_properties/gridcolumn_sortable_property.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nsortable?: boolean;\n```\n\n----------------------------------------\n\nTITLE: Configuring Sidebar Custom HTML Properties in JavaScript\nDESCRIPTION: Code example showing the data structure for configuring custom HTML properties in a DHTMLX Sidebar. Demonstrates the available properties including type, id, parent, html, css, and hidden settings.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/sidebar/api/api_customhtml_properties.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = [\n    {\n        type: \"customHTML\",\n        id?: string | number,\n        parent?: string,\n        html?: string,\n        css?: string | string[],\n        hidden?: boolean,\n    },\n    // more Sidebar controls\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring fieldName in DHTMLX Vault Uploader\nDESCRIPTION: Demonstrates how to set a custom name for the file field in the form data when configuring a DHTMLX Vault uploader. The fieldName property allows customizing the field identifier used when submitting files to the server.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/uploader/api/uploader_fieldname_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst vault = new dhx.Vault(\"vault_container\", { \n    uploader:{\n        // obligatory, the path for upload\n        target:\"/upload\"\n        fieldName:\"document\"\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Tree canDrop Event in JavaScript\nDESCRIPTION: This code demonstrates how to attach an event handler to the canDrop event of a DHTMLX Tree component. The event fires when a dragged item is over a target item, allowing for custom logic to be executed during drag operations.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree/api/tree_candrop_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntree.events.on(\"canDrop\", function(data, events) {\n    // your logic here\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a DHTMLX Ribbon Separator Item in JavaScript\nDESCRIPTION: This snippet demonstrates the object structure used within a data array to define a separator element in a DHTMLX Ribbon. It requires setting the 'type' property to 'separator'. An optional 'id' (string or number) can also be assigned.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/ribbon/api/api_separator_properties.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = [\n    {\n        type: \"separator\",\n        id?: string | number,\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Adding DHTMLX Optimus and State Manager via NPM - JavaScript\nDESCRIPTION: These commands add the DHTMLX Optimus core framework (\"dhx-optimus\") and its optional state manager (\"dhx-optimus-store\") to your project using npm. Run them in your project directory to make these modules available for import in your JavaScript code. DHTMLX Suite js/css files are also required as frontend dependencies for full functionality.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/optimus_guides/index.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nnpm i dhx-optimus\n```\n\nLANGUAGE: javascript\nCODE:\n```\nnpm i dhx-optimus-store\n```\n\n----------------------------------------\n\nTITLE: Showing Spacer Control in DHTMLX Form (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to use the show() method to display a Spacer control in a DHTMLX Form. The method is called on the Spacer item retrieved from the form using getItem().\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/spacer/spacer_show_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nform.getItem(\"spacer\").show();\n```\n\n----------------------------------------\n\nTITLE: Documenting Toggle API Methods Reference\nDESCRIPTION: Markdown table listing all available methods for the Toggle component, including links to detailed documentation for each method.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/api_overview.md#2025-04-22_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n| Name                                                  | Description                                                  |\n| :------------------------------------------------- | :-------------------------------------------------------- |\n| [](form/api/toggle/toggle_blur_method.md)             | @getshort(form/api/toggle/toggle_blur_method.md)             |\n```\n\n----------------------------------------\n\nTITLE: Using the destructor method with DHTMLX Slider\nDESCRIPTION: This code demonstrates how to properly destroy a Slider instance to free up resources. The destructor method removes the slider from the DOM and releases all occupied memory.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/slider/api/slider_destructor_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nslider.destructor();\n```\n\n----------------------------------------\n\nTITLE: Preparing JSON Dataset for DHTMLX List\nDESCRIPTION: Example of a JSON data set structure for loading into a DHTMLX List. Each object represents a list item with 'value' and 'id' properties.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/list/load_data.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst dataset = [\n    {\"value\": \"1st item\", \"id\": \"1\"},\n    {\"value\": \"2nd item\", \"id\": \"2\"},\n    {\"value\": \"3rd item\", \"id\": \"3\"},\n    {\"value\": \"4th item\", \"id\": \"4\"}\n]\n```\n\n----------------------------------------\n\nTITLE: Spacer Template for DHTMLX Sidebar\nDESCRIPTION: Template for creating a spacer control in the sidebar with id and type properties. Spacers add empty space between sidebar items for visual organization.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/sidebar/data_loading.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// spacer\n{\n    id: \"spacerId\",          \n    type: \"spacer\"        \n}\n```\n\n----------------------------------------\n\nTITLE: Defining afterGroup Event Interface in JavaScript\nDESCRIPTION: TypeScript interface definition for the afterGroup event configuration and parameters. Includes configuration options for showing missed values and specifying group field.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/data_collection/api/datacollection_aftergroup_event.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\ninterface IGroupConfig {\n    showMissed?: boolean | string; // true by default\n    field?: string; // \"group\" by default\n}\n\nafterGroup: (grouped: string[], config: IGroupConfig) => void;\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Locale to JavaScript Colorpicker\nDESCRIPTION: This snippet demonstrates how to apply a custom locale (in this case, German) to the DHTMLX Colorpicker. It uses the dhx.i18n.setLocale() method before initializing the Colorpicker.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/colorpicker/localizing_colorpicker.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ndhx.i18n.setLocale(\"colorpicker_container\", de);\nconst colorpicker = new dhx.Colorpicker(\"colorpicker_container\");\n```\n\n----------------------------------------\n\nTITLE: Defining Custom CSS Classes for Tabbar\nDESCRIPTION: Basic CSS class definition structure for customizing tabbar appearance.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tabbar/customization.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<style>\n    .my_first_class {\n        /*some styles*/\n    }\n    \n    .my_second_class {\n        /*some styles*/\n    }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Adding event handlers to HTML elements in Grid data set\nDESCRIPTION: This example shows how to add event handlers to HTML elements defined within the data set of a DHTMLX Grid. It includes click and mouseover handlers for elements with the 'cell__html' class.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_eventhandlers_config.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = [\n    {\n        \"country\": \"<div class='cell__html'><span>China</span><img src='../flags/cn.svg'></div>\",\n        \"population\": \"1415045928\", \"yearlyChange\": \"0.0039\",\n        \"netChange\": \"5528531\", \"density\": \"151\",\n        \"urban\": \"0.5800\", \"id\": \"1\"\n    },\n    // more options\n];\n\nconst grid = new dhx.Grid(\"grid_container\", {\n    columns: [\n        { width: 200, id: \"country\", header: [{ text: \"Country\" }], htmlEnable: true },\n        // more options\n    ],\n    data: data,\n    eventHandlers: { \n        onclick: { \n            cell__html: (event, data) => {\n                console.log(JSON.stringify(data.col, null, 2));\n            },\n        },\n        onmouseover: {\n            cell__html: (event) => {\n                console.log(\"You are over \" + event.target.tagName);\n            },\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Checking Saved Status of TreeCollection in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the isSaved() method to check if changes in a TreeCollection have been saved. It returns a boolean value indicating the saved status.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree_collection/api/treecollection_issaved_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntoolbar.data.isSaved();\n```\n\n----------------------------------------\n\nTITLE: Converting Data to CSV Format\nDESCRIPTION: Demonstrates how to use the serialize() method to convert chart data into CSV format. The method accepts the data array and an optional parameter to include/exclude headers.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/helpers/datadrivers.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncsvDataDriver.serialize(chart.data.serialize(), false);\n```\n\n----------------------------------------\n\nTITLE: Removing Tabbar Instance using destructor() Method in JavaScript\nDESCRIPTION: This code snippet demonstrates how to use the destructor() method to remove a Tabbar instance and release occupied resources. It's a simple method call on the tabbar object.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tabbar/api/tabbar_destructor_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntabbar.destructor();\n```\n\n----------------------------------------\n\nTITLE: Clearing Checkbox Value in DHTMLX Form (JavaScript)\nDESCRIPTION: This snippet demonstrates how to use the clear() method to reset the value of a Checkbox control in a DHTMLX Form. The method is called on a specific form item retrieved using the getItem() method.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/checkbox/checkbox_clear_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nform.getItem(\"checkbox\").clear();\n```\n\n----------------------------------------\n\nTITLE: Defining a DHTMLX Toolbar Separator Item in JavaScript\nDESCRIPTION: This snippet demonstrates the object structure required to add a separator item to the data configuration array of a DHTMLX Toolbar. The 'type' property must be explicitly set to 'separator'. An optional 'id' can also be provided for the separator element.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/toolbar/api/api_separator_properties.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nconst data = [\n    {\n        type: \"separator\",\n        id?: string | number,\n    },\n    // more Toolbar controls\n]\n```\n\n----------------------------------------\n\nTITLE: Showing a Text Control in DHTMLX Form in JavaScript\nDESCRIPTION: This example demonstrates how to use the show() method to display a Text control that was previously hidden. The method is called on a specific Text control retrieved from a form using the getItem() method.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/text/text_show_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"text\").show();\n```\n\n----------------------------------------\n\nTITLE: Handling afterChangeProperties Event for Timepicker in JavaScript\nDESCRIPTION: This snippet demonstrates how to attach an event handler to the afterChangeProperties event of a Timepicker control in a DHTMLX Form. The event fires after the control's configuration attributes have been changed dynamically.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/timepicker/timepicker_afterchangeproperties_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"timepicker\").events.on(\"afterChangeProperties\", function(properties) {\n    console.log(\"afterChangeProperties\", properties);\n});\n```\n\n----------------------------------------\n\nTITLE: Removing Toggle Instance in DHTMLX Form (JavaScript)\nDESCRIPTION: This code demonstrates how to use the destructor() method to remove a toggle instance from a DHTMLX Form. It retrieves the toggle item by its ID and then calls the destructor method.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/toggle/toggle_destructor_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"toggle\").destructor();\n```\n\n----------------------------------------\n\nTITLE: Setting Calendar Width in JavaScript\nDESCRIPTION: Example of initializing a DHTMLX Calendar component with a custom width. The width property accepts string or number values to define the calendar's size.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar2/api/calendar_width_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar calendar = new dhx.Calendar(\"calendar_container\", {\n   width: \"300px\"\n});\n```\n\n----------------------------------------\n\nTITLE: Removing Focus from Slider Thumb in DHTMLX Form (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to use the blur() method to remove focus from a thumb of a Slider control in a DHTMLX Form. The method is called on a specific Slider item retrieved from the form.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/slider/slider_blur_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nform.getItem(\"slider\").blur();\n```\n\n----------------------------------------\n\nTITLE: Enabling Movable DHTMLX Window in JavaScript\nDESCRIPTION: This code enables the 'movable' option for DHTMLX Window, allowing users to drag and reposition the window within the browser window. Set in the configuration object, this option requires DHTMLX Suite. The window is confined by default to the viewport unless 'viewportOverflow' is also set. Useful for flexible, interactive UI design.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/window/configuration.md#2025-04-22_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nconst dhxWindow = new dhx.Window({\n    movable:true\n});\n```\n\n----------------------------------------\n\nTITLE: Destroying SimpleVault Instance in DHTMLX Form (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to use the destructor() method to remove a SimpleVault instance from a DHTMLX Form. It releases occupied resources associated with the SimpleVault control.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/simplevault/simplevault_destructor_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"simplevault\").destructor();\n```\n\n----------------------------------------\n\nTITLE: Using readOnly property in Combobox (v7.0)\nDESCRIPTION: Example of using the new readOnly property in Combobox component which replaces the deprecated readonly property in DHTMLX Suite v7.0.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/migration.md#2025-04-22_snippet_16\n\nLANGUAGE: js\nCODE:\n```\nconst combo = new dhx.Combobox(\"combo_container\", { \n    readOnly: true\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX Layout with Collapsable Cell\nDESCRIPTION: Demonstrates how to create a Layout instance with a collapsable cell. The collapsable property is set to true, allowing the cell to be collapsed and expanded by the user.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/layout/api/cell/layout_cell_collapsable_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst layout = new dhx.Layout(\"layout_container\", {\n    cols: [\n        { header: \"Cell header\", collapsable:true}\n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Groupable Column Property in JSX\nDESCRIPTION: Shows the type definition for the groupable property that can be applied to Grid columns. This boolean property determines whether a column can be used for grouping data.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/gridcolumn_properties/gridcolumn_groupable_property.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\ngroupable?: boolean;\n```\n\n----------------------------------------\n\nTITLE: Configuring RadioButton in RadioGroup Control\nDESCRIPTION: This snippet shows the configuration options for individual radio buttons within the RadioGroup control in DHTMLX Suite. It includes attributes like css, height, padding, text, and width.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/form_setproperties_method.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    css: string,\n    height: string | number | \"content\",\n    padding: string | number,\n    text: string,\n    width: string | number | \"content\"\n}\n```\n\n----------------------------------------\n\nTITLE: Grid Column Mark Property Type Definition\nDESCRIPTION: Defines the type structure for the mark property which can be either an object with min/max properties or a function that returns a template string\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/gridcolumn_properties/gridcolumn_mark_property.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nmark?:\n    { min?: string, max?: string } | \n    (cell, columnCells: [], row?: IRow, column?: ICol) => string;\n```\n\n----------------------------------------\n\nTITLE: Setting Overall Height of DHTMLX List\nDESCRIPTION: Defines the total height of the List component using the height property. Can be set as a number or string value.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/list/configuration.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst list = new dhx.List(\"list_container\", {height: 700});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst list = new dhx.List(\"list_container\", {height: \"700px\"});\n```\n\n----------------------------------------\n\nTITLE: Including DHTMLX Suite Source Files in HTML\nDESCRIPTION: This HTML snippet demonstrates how to include the required DHTMLX Suite library files (`suite.js` and `suite.css`) in an HTML document's header. These files are essential for using any DHTMLX component, including the Slider.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/slider/initializing_slider.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"text/javascript\" src=\"../../codebase/suite.js\"></script>\n<link rel=\"stylesheet\" href=\"../../codebase/suite.css\">\n```\n\n----------------------------------------\n\nTITLE: Adding Custom CSS Classes for Slider Styling in HTML\nDESCRIPTION: This snippet shows how to define custom CSS classes in the HTML file to style the Slider component. It demonstrates the structure for adding multiple classes with custom styles.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/slider/customization.md#2025-04-22_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<style>\n    .my_first_class {\n        /*some styles*/\n    }\n    \n    .my_second_class {\n        /*some styles*/\n    }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Handling beforeHide Event for Slider Control in DHTMLX Form\nDESCRIPTION: This example demonstrates how to attach an event handler to the beforeHide event of a Slider control in a DHTMLX Form. The handler logs the current value and initialization state, then returns true to allow the control to be hidden.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/slider/slider_beforehide_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"slider\").events.on(\"beforeHide\", function(value, init) {\n    console.log(\"beforeHide\", value, init);\n    return true;\n});\n```\n\n----------------------------------------\n\nTITLE: Handling itemMouseOver Event in DHTMLX DataView\nDESCRIPTION: This code snippet demonstrates how to attach an event listener for the itemMouseOver event in a DHTMLX DataView. It logs the id of the item being hovered over to the console.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/dataview/api/dataview_itemmouseover_event.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ndataview.events.on(\"itemMouseOver\", function(id, event) {\n    console.log(\"Item id:\" + id);\n});\n```\n\n----------------------------------------\n\nTITLE: Hiding Progress Bar in DHTMLX Layout Cell (JavaScript)\nDESCRIPTION: This snippet demonstrates how to show and then hide a progress bar in a specific cell of a DHTMLX Layout. It uses the progressShow() method to display the progress bar and the progressHide() method to remove it.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/layout/api/cell/layout_cell_progresshide_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// show the progress bar in a cell\nlayout.getCell(\"two\").progressShow();\n\n// hide the progress bar in a cell\nlayout.getCell(\"two\").progressHide();\n```\n\n----------------------------------------\n\nTITLE: Configuring keyNavigation for DHTMLX List in JavaScript\nDESCRIPTION: This snippet demonstrates how to enable key navigation for a DHTMLX List component. The keyNavigation option is set to true, allowing users to navigate through list items using arrow keys.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/list/api/list_keynavigation_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst list = new dhx.List(\"list_container\", {\n    keyNavigation:true\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Spacer Item in DHTMLX Ribbon Data (JavaScript)\nDESCRIPTION: This JavaScript snippet shows the object structure used within the data configuration array to define a spacer item in a DHTMLX Ribbon. The 'type' property must be explicitly set to 'spacer'. An optional 'id' can be provided; otherwise, it's auto-generated.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/ribbon/api/api_spacer_properties.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nconst data = [\n    {\n        type: \"spacer\",\n        id?: string | number,\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Radiogroup Value in JavaScript DHTMLX Form\nDESCRIPTION: This snippet demonstrates how to use the getValue() method to retrieve the current value of a Radiogroup control in a DHTMLX Form. The method returns a string representing the selected option's value.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/radiogroup/radiogroup_getvalue_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst value = form.getItem(\"radiogroup\").getValue();\n// -> \"1\"\n```\n\n----------------------------------------\n\nTITLE: Attaching afterHide Event Handler to Datepicker in JavaScript\nDESCRIPTION: This code snippet demonstrates how to attach an event handler for the afterHide event of a Datepicker control in a DHTMLX Form. The event fires after the control is hidden and provides the current value and initialization status.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/calendar/calendar_afterhide_event.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nform.getItem(\"datepicker\").events.on(\"afterHide\", function(value, init) {\n    console.log(\"afterHide\", value, init);\n});\n```\n\n----------------------------------------\n\nTITLE: Parsing Local Data into DHTMLX Ribbon in JavaScript\nDESCRIPTION: Loads data into an existing DHTMLX Ribbon instance (`ribbon`) after its initialization. The `ribbon.data.parse()` method is used, taking a predefined JavaScript array (`data`) containing the ribbon structure and content as its argument. This populates or replaces the current ribbon data.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/ribbon/data_loading.md#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nribbon.data.parse(data);\n```\n\n----------------------------------------\n\nTITLE: Implementing DataView Event Handling in DHTMLX\nDESCRIPTION: Adds event handling to DataView for removing selected items when a removeItem event is triggered.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/optimus_guides/how_to_start_optimus.md#2025-04-22_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nready() { \n    this.on(\"removeItem\", () => {\n        const selected = this.dataView.selection.getItem();\n        if (selected) {\n            this.dataView.data.remove(selected.id);\n        }\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Using Built-in Methods for Statistical Calculation - DHTMLX v9+ Utility - JavaScript\nDESCRIPTION: Utilizes the new dhx.methods API introduced in v9.0 to compute default statistical metrics (such as sum) across a data array. No dependencies besides dhtmlx v9+; requires an array of objects and a field name. Returns the aggregate (e.g., sum) for the specified field.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/migration.md#2025-04-22_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nconst rows = [{ value: 10 }, { value: 20 }, { value: 30 }];\nconst sum = dhx.methods.sum(rows, \"value\"); // 60\n```\n\n----------------------------------------\n\nTITLE: Common JSON Template for DHTMLX Ribbon Items (JavaScript/JSON)\nDESCRIPTION: Illustrates the basic JSON structure for defining multiple items within a DHTMLX Ribbon. It shows an array containing objects, each representing a different type of ribbon control (e.g., button, input, title) identified by its `id` and `type`, along with other type-specific properties.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/ribbon/data_loading.md#2025-04-22_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n// common\n[\n    {id: \"item_a\", type: \"button\", ...},\n    {id: \"item_b\", type: \"input\", ...},\n    {id: \"item_c\", type: \"title\", ...}\n]\n```\n\n----------------------------------------\n\nTITLE: Including DHTMLX Source Files\nDESCRIPTION: HTML code showing how to include the required JavaScript and CSS files for DHTMLX Suite.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/colorpicker/how_to_start.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"text/javascript\" src=\"../../codebase/suite.js\"></script>\n<link rel=\"stylesheet\" href=\"../../codebase/suite.css\">\n```\n\n----------------------------------------\n\nTITLE: Running Environment Setup with NPM for DHTMLX Optimus - JavaScript\nDESCRIPTION: These commands demonstrate initializing a project with the DHTMLX Optimus framework using npm. Run \"npm install\" to install all dependencies, then \"npm start\" to launch the development server locally. This setup does not require any special server components and supports running apps on a typical Node.js environment.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/optimus_guides/index.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nnpm install\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Clearing Input Value in DHTMLX Form (JavaScript)\nDESCRIPTION: This example shows how to clear the value of an Input control in a DHTMLX Form using the clear() method. It retrieves the Input item from the form and calls the clear() method on it.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/input/input_clear_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"input\").clear();\n```\n\n----------------------------------------\n\nTITLE: Clearing Radiogroup Value in DHTMLX Form (JavaScript)\nDESCRIPTION: This snippet demonstrates how to use the clear() method to reset the value of a Radiogroup control in a DHTMLX Form. The method is called on the Radiogroup item retrieved from the form.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/radiogroup/radiogroup_clear_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nform.getItem(\"radiogroup\").clear();\n```\n\n----------------------------------------\n\nTITLE: Including DHTMLX Suite Source Files\nDESCRIPTION: HTML code showing how to include the required JavaScript and CSS files for DHTMLX Suite library.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/ribbon/how_to_start.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"text/javascript\" src=\"../../codebase/suite.js\"></script>\n<link rel=\"stylesheet\" href=\"../../codebase/suite.css\">\n```\n\n----------------------------------------\n\nTITLE: Embedding Custom HTML Content within a DHTMLX Ribbon Block Item in JavaScript\nDESCRIPTION: Shows how to include arbitrary HTML content within an item of a Ribbon Block. The `html` property in the item's configuration object accepts an HTML string, allowing for flexible rendering, such as displaying a custom preloader. The `size: \"auto\"` property adjusts the item's size to fit the content.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/ribbon/block.md#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n{\n    type: \"block\",\n    title: \"Progress\",\n    items: [\n        {\n            html: \"<div id='preloader'><div id='loader'></div></div >\",\n            size: \"auto\"\n        }\n    ]\n};\n```\n\n----------------------------------------\n\nTITLE: Including DHTMLX DataView Source Files\nDESCRIPTION: This snippet shows how to include the necessary JavaScript and CSS files for DHTMLX DataView in the HTML header.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/dataview/initialization.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"text/javascript\" src=\"../../codebase/suite.js\"></script>\n<link rel=\"stylesheet\" href=\"../../codebase/suite.css\">\n```\n\n----------------------------------------\n\nTITLE: Using beforeUploadFile Event in DHTMLX Form Simple Vault Control\nDESCRIPTION: This example demonstrates how to attach an event handler to the beforeUploadFile event of a Simple Vault control. The event fires before file upload begins and allows you to inspect or cancel the upload operation.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/simplevault/simplevault_beforeuploadfile_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"simplevault\").events.on(\"beforeUploadFile\", function(file, value) {\n    console.log(\"beforeUploadFile\", file, value);\n    return true;\n});\n```\n\n----------------------------------------\n\nTITLE: Instantiating DHTMLX Menu with navigationType Configuration (JavaScript)\nDESCRIPTION: This snippet demonstrates how to initialize a DHTMLX Menu instance with the navigationType property set to \\\"click\\\", causing the menu to appear when the user clicks the target element. To use this code, the dhx.Menu class from the DHTMLX Suite must be available and a container element with ID \\\"menu_container\\\" must exist in the DOM. The main parameter, navigationType, accepts either \\\"click\\\" or \\\"pointer\\\" and dictates how users interact to open the menu. Output is a menu component reacting to click events for activation, with default value being \\\"pointer\\\" if not set.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/menu/api/menu_navigationtype_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst menu = new dhx.Menu(\"menu_container\", {\n    navigationType: \"click\"\n});\n```\n\n----------------------------------------\n\nTITLE: Destroying Combo Box Instance in DHTMLX Form\nDESCRIPTION: Demonstrates how to use the destructor() method to remove a Combo Box instance from a form and release its resources. The method is called on a specific Combo Box item retrieved using the form's getItem() method.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/combo/combo_destructor_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"combo\").destructor();\n```\n\n----------------------------------------\n\nTITLE: Initializing Calendar with Date Range\nDESCRIPTION: Example of creating a calendar instance with a date range selected using Date objects and range mode enabled.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar/api/calendar_value_config.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst calendar = new dhx.Calendar(\"calendar_container\", {\n    value: ([new Date(2019,05,03), new Date(2019,05,19)]),\n    range: true  \n});\n```\n\n----------------------------------------\n\nTITLE: Validating Select Control in JavaScript\nDESCRIPTION: Demonstrates basic usage of the validate() method for a Select control in a form. The method returns true if the control is valid, false otherwise. The silent parameter determines whether validation events are triggered and visual feedback is shown.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/select/select_validate_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"select\").validate(true);\n// -> true/false\n```\n\n----------------------------------------\n\nTITLE: Removing Focus from Simple Vault Control using blur()\nDESCRIPTION: Demonstrates how to remove focus from a Simple Vault control using the blur() method. The method was introduced in DHTMLX Suite v8.2 and requires no parameters.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/simplevault/simplevault_blur_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"simplevault\").blur();\n```\n\n----------------------------------------\n\nTITLE: Implementing Horizontal Control Arrangement with cols in DHTMLX Form\nDESCRIPTION: This example demonstrates how to create a form with horizontally arranged controls using the 'cols' property. It shows two checkboxes arranged side by side within a row, with custom padding and CSS styling applied.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/form_cols_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst form = new dhx.Form(\"form_container\", {\n    css: \"dhx_widget--bordered\",\n    width: \"250px\",\n    rows: [\n        {\n            padding: \"10px\",\n            cols: [{\n                type: \"checkbox\",\n                width: \"100px\",\n                label: \"I agree\",\n                name: \"agree\",\n                id: \"agree\",\n                checked: true\n            },\n            {\n                type: \"checkbox\",\n                label: \"I disagree\",\n                name: \"align\",\n            }]\n        }\n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: Date Formatting in Grid Column - DHTMLX Grid (Pre v9.0) - JavaScript\nDESCRIPTION: Shows legacy column configuration for date formatting in DHTMLX Grid prior to v9.0, where 'type' is set to 'date' and the 'format' property controls how the date is displayed. Used inline in column definitions; 'format' defines the display pattern.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/migration.md#2025-04-22_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n{ \n    width: 150, id: \"date\", header: [{ text: \"Date\" }], \n    type: \"date\", format: \"%M %d %Y\"\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Window View in TopLayout\nDESCRIPTION: Demonstrates how to render a Window-based view in a TopLayout. The example shows how to use the show method with null as the first parameter since Window components aren't attached to specific DOM containers.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/optimus_guides/index.md#2025-04-22_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nimport { View } from \"dhx-optimus\";\n...\nimport { WindowView } from \"./WindowView\";\n...\nexport class TopLayout extends View {\n    init() {\n        return (this.layout = new dhx.Layout(null, {...}));\n    }\n\n    ready() {\n        ...\n        this.show(null, WindowView);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting pageSize during DHTMLX Pagination Initialization in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to initialize the DHTMLX Pagination component targeting an HTML element with the ID \"pagination_container\". It explicitly sets the `pageSize` configuration option to 22, meaning the pagination control will manage views showing 22 items per page. This requires the DHTMLX Suite library (`dhx`) to be included.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/pagination/api/pagination_pagesize_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst pagination = new dhx.Pagination(\"pagination_container\", {\n    pageSize: 22 \n});\n```\n\n----------------------------------------\n\nTITLE: Adding Input to Ribbon in JavaScript\nDESCRIPTION: Shows how to add a basic input field with placeholder text to a DHTMLX Ribbon component.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/ribbon/input.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nribbon.data.add({\n    type:\"input\",\n    value:\"\",\n    placeholder:\"Type to search\"\n});\n```\n\n----------------------------------------\n\nTITLE: Changing Calendar Mode to Year Selection\nDESCRIPTION: Shows how to display the calendar in 'year' mode for selecting a year, with examples of showing a specific year or the current year.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar/operating_calendar.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncalendar.showDate(new Date(2020,11,12),\"year\");\n\n// shows the current year\ncalendar.showDate(null,\"year\");\n```\n\n----------------------------------------\n\nTITLE: removeCellCss Method Signature - TypeScript\nDESCRIPTION: TypeScript method signature showing the parameter types and return value for the removeCellCss method. Takes row and column identifiers as string or number, and CSS class name as string.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_removecellcss_method.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nremoveCellCss(rowId: string | number, colId: string | number, css: string): void;\n```\n\n----------------------------------------\n\nTITLE: Handling keydown Event for Checkbox Control in DHTMLX Form\nDESCRIPTION: This example demonstrates how to attach an event handler to the keydown event of a Checkbox control in a DHTMLX Form. The handler logs the event object to the console when any key is pressed while the checkbox is in focus.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/checkbox/checkbox_keydown_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"checkbox\").events.on(\"keydown\", function(event) {\n    console.log(event);\n});\n```\n\n----------------------------------------\n\nTITLE: Using beforeHide Event with Colorpicker Control in DHTMLX Form\nDESCRIPTION: This example shows how to attach an event handler to the beforeHide event of a Colorpicker control. The handler logs the current value and initialization state, then returns true to allow the control to be hidden.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/colorpicker/colorpicker_beforehide_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"colorpicker\").events.on(\"beforeHide\", function(value, init) {\n    console.log(\"beforeHide\", value, init);\n    return true;\n});\n```\n\n----------------------------------------\n\nTITLE: Querying Popup Container with DHTMLX in JavaScript\nDESCRIPTION: Demonstrates how to use the getContainer method on a DHTMLX Popup instance to retrieve its associated HTML element. This method is available on DHTMLX Popup objects, requiring the DHTMLX Suite library to be included in your project. Calling popup.getContainer() returns a reference to the inner container element (e.g., div.dhx_popup-content), which can then be manipulated or inspected as needed; accepts no parameters and returns an HTMLElement.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/popup/api/popup_getcontainer_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\npopup.getContainer();\n// -> div.dhx_popup-content\n```\n\n----------------------------------------\n\nTITLE: Checking Spacer Visibility in DHTMLX Form\nDESCRIPTION: Demonstrates how to check if a Spacer control is visible in a DHTMLX Form. The method returns a boolean value indicating the visibility state of the specified Spacer control.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/spacer/spacer_isvisible_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"spacer\").isVisible(); // -> true/false\n```\n\n----------------------------------------\n\nTITLE: Managing progress bar in Layout cell in JavaScript\nDESCRIPTION: Shows how to show and hide a progress bar in a specific Layout cell using progressShow and progressHide methods of the cell.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/layout/work_with_layout.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nlayout.getCell(\"two\").progressShow();\n\nlayout.getCell(\"two\").progressHide();\n```\n\n----------------------------------------\n\nTITLE: Creating Basic View Component with Optimus View JavaScript\nDESCRIPTION: Defines a simple view class `TopLayout` that extends the `View` class from the `dhx-optimus` library. The `init()` method returns a basic HTML heading string (`<h1>Hello Optimus!</h1>`), which represents the content to be rendered for this view.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/optimus_guides/how_to_start_optimus.md#2025-04-22_snippet_5\n\nLANGUAGE: js\nCODE:\n```\n// import the View class from the \"dhx-optimus\" library\nimport { View } from \"dhx-optimus\";\n\nexport class TopLayout extends View {\n    init() {\n        return `<h1>Hello Optimus!</h1>`;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Simple Vault Upload Begin Event in JavaScript\nDESCRIPTION: Example showing how to attach an event handler to the uploadBegin event of a Simple Vault control. The event fires when file upload begins and provides access to both the files being uploaded and the current control value.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/simplevault/simplevault_uploadbegin_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"simpleVault\").events.on(\"uploadBegin\", function(files, value) {\n    console.log(\"uploadBegin\", files, value);\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Ribbon Title Item Configuration in JavaScript\nDESCRIPTION: Illustrates the JavaScript object structure for defining a 'title' item within the data configuration of a DHTMLX Ribbon. The `type` property must be set to 'title'. Optional properties include `id`, `parent`, `value` (or `html`), `tooltip`, `css`, `disabled`, and `hidden`.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/ribbon/api/api_title_properties.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nconst data = [\n    {\n        type: \"title\",\n        id?: string | number,\n        parent?: string,\n        value?: string,\n\n        html?: string,\n        tooltip?: string,\n\n        css?: string | string[],\n        disabled?: boolean,\n        hidden?: boolean,\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Handling DataCollection Filter Event in JavaScript\nDESCRIPTION: Example demonstrating how to attach an event handler to the filter event of a DataCollection component. The event fires after filtering operations are performed on the data collection.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/data_collection/api/datacollection_filter_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncomponent.data.events.on(\"filter\", function(filter) {\n    console.log(\"Items were filtered\");\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX ContextMenu in JavaScript\nDESCRIPTION: Initializes a new instance of the DHTMLX ContextMenu widget with a custom CSS class for styling. Requires the DHTMLX library to be included in your project. The constructor takes an optional HTML node (null by default) and an options object; here, the CSS class 'dhx_widget--bg_gray' is applied to the menu widget.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tutorial/binding_components/step4.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar contextMenu = new dhx.ContextMenu(null, {css: \"dhx_widget--bg_gray\"});\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX Layout with minHeight Configuration\nDESCRIPTION: Creates a new Layout instance with a column cell that has a minimum height of 40px. The minHeight property takes precedence over the height property when both are specified.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/layout/api/cell/layout_cell_minheight_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst layout = new dhx.Layout(\"layout_container\", {\n    cols: [\n        { header: \"Cell header\", minHeight: \"40px\"}\n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: Handling dragColumnIn Event in DHTMLX Grid\nDESCRIPTION: This code snippet demonstrates how to attach an event listener for the dragColumnIn event in a DHTMLX Grid. The event fires when a column is dragged to another potential target. It provides data about the dragged columns and the potential target column.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_dragcolumnin_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngrid.events.on(\"dragColumnIn\", (data, event) => {\n  // your logic here\n});\n```\n\n----------------------------------------\n\nTITLE: Disabling a Timepicker control in DHTMLX Form\nDESCRIPTION: This example demonstrates how to disable a Timepicker control in a DHTMLX Form by using the disable() method on the Timepicker object retrieved through the form's getItem() method.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/timepicker/timepicker_disable_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"timepicker\").disable();\n```\n\n----------------------------------------\n\nTITLE: Retrieving DHTMLX Calendar Widget from DatePicker Control in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the getWidget() method to obtain the DHTMLX Calendar widget associated with a DatePicker control in a form.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/calendar/calendar_getwidget_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst datepicker = form.getItem(\"datepicker\").getWidget();  \n// -> DHTMLX Calendar\n```\n\n----------------------------------------\n\nTITLE: Checking Form Disabled State in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the isDisabled() method to check if a form is disabled. It returns a boolean value indicating the disabled state of the form.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/form_isdisabled_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nform.isDisabled(); // -> true/false\n```\n\n----------------------------------------\n\nTITLE: Styling Selected Dates and Date Ranges\nDESCRIPTION: Example of how to customize the appearance of selected dates and date ranges in calendars. Shows how to modify system styles to change background colors of selections.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar2/functionality_and_features/calendar_stylization.md#2025-04-22_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n<style>\n/* system style for selected dates */\n.dhx_calendar-day--selected::before {\n    background-color: #ff5252;\n}\n\n/* system style for a date range */\n.dhx_calendar-day--in-range:after {\n    background-color: #ffe7e7;\n }\n</style>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar calendar1 = new dhx.Calendar(\"calendar1\", {css: \"dhx_widget--bordered\"});\nvar calendar2 = new dhx.Calendar(\"calendar2\", {css: \"dhx_widget--bordered\"});\n```\n\n----------------------------------------\n\nTITLE: Defining Spacer Control in DHTMLX Toolbar - JavaScript\nDESCRIPTION: This snippet demonstrates how to define a \"spacer\" element within the Toolbar data array in DHTMLX Suite using JavaScript. The code introduces a data array containing an object with a required \"type\" property set to \"spacer\", and an optional \"id\" property for unique identification (string or number). This structure enables the insertion of flexible spaces among other Toolbar controls. Inputs are the array of control definitions, and outputs are the arranged Toolbar items. No external dependencies are needed beyond DHTMLX Suite.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/toolbar/api/api_spacer_properties.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nconst data = [\n    {\n        type: \"spacer\",\n        id?: string | number,\n    },\n    // more Toolbar controls\n]\n```\n\n----------------------------------------\n\nTITLE: Checking Fullscreen Status of DHTMLX Window using JavaScript\nDESCRIPTION: This snippet illustrates how to check if a DHTMLX Window is currently in fullscreen mode using the `isFullScreen()` method. It returns `true` if the window is in fullscreen mode and `false` otherwise. Requires an existing `dhxWindow` instance.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/window/usage.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ndhxWindow.setFullScreen();\ndhxWindow.isFullScreen(); // -> true\n```\n\n----------------------------------------\n\nTITLE: Configuring TreeGrid with Collapsed Mode\nDESCRIPTION: Initialization of TreeGrid with collapsed state configuration.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/treegrid_mode.md#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst grid = new dhx.Grid(\"grid_container\", {\n    type: \"tree\",\n    columns: [  \n        // columns config\n    ],  \n    data: dataset,\n    collapsed: true\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Pagination 'page' Option in DHTMLX Suite API with TypeScript\nDESCRIPTION: This TypeScript signature snippet defines the 'page' property as an optional number in the DHTMLX Pagination configuration interface. It is intended for use in typed environments to clarify that the property can be omitted; if provided, it specifies the zero-based index of the starting page. No actual logic is present, but it establishes clear type safety and API documentation for developers.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/pagination/api/pagination_page_config.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n{'page?: number;'}\n```\n\n----------------------------------------\n\nTITLE: Handling loadError Event in DHTMLX DataCollection\nDESCRIPTION: This snippet demonstrates how to attach an event handler to the loadError event of a DHTMLX DataCollection component. The event fires when data loading fails, providing error information.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/data_collection/api/datacollection_loaderror_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncomponent.data.events.on(\"loadError\", function(error){\n    // your code here\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Grid Header Filters (JavaScript)\nDESCRIPTION: Demonstrates the evolution of getHeaderFilter() method implementation between v7.x and v8.0, showing both HTML element and Combobox filter handling\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/migration.md#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst countryFilter = grid.getHeaderFilter(\"country\");\n// -> HTMLElement\n// <label className=\"dhx_grid-filter__label dxi dxi-menu-down\">...</label>\n\ncountryFilter.focus();\ncountryFilter.blur();\n\n// or\n\nconst countryFilter = grid.getHeaderFilter(\"density\");\n// -> object of Combobox\n// Combobox {_uid: \"u1597304021754\", config: {…}, events: EventSystem, \n// data: DataCollection, popup: Popup, …}\n\ncountryFilter.focus();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst filter1 = grid.getHeaderFilter(\"country\").getFilter();\nconsole.log(filter1);\n// -> returns Combobox\n//  {config: {…}, _uid: 'u1670500020936', events: o, data: d, popup: f, …}\n\n\nconst filter2 = grid.getHeaderFilter(\"netChange\").getFilter();\nconsole.log(filter2);\n// -> returns HTML object\n// {type: 1, attrs: {…}, tag: 'div', _class: 'dhx_grid-filter__label dxi dxi-magnify', \n// ref: 'netChange_filter', …}\n```\n\n----------------------------------------\n\nTITLE: Destroying a Textarea Control in DHTMLX Form\nDESCRIPTION: This code demonstrates how to use the destructor() method to remove a textarea instance and release the occupied resources in a DHTMLX Form.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/textarea/textarea_destructor_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"textarea\").destructor();\n```\n\n----------------------------------------\n\nTITLE: Attaching Event Handler to Form's afterSend Event in JavaScript\nDESCRIPTION: Code example showing how to attach an event handler to the afterSend event of a DHTMLX Form. This event fires after the form data is successfully sent to the server.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/form_aftersend_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.events.on(\"afterSend\", function(){\n   // your logic here\n});\n```\n\n----------------------------------------\n\nTITLE: Handling beforeHide Event in DHTMLX Form Simple Vault Control\nDESCRIPTION: This example demonstrates how to attach an event handler to the beforeHide event of a Simple Vault control in a DHTMLX Form. The handler logs the current value and initialization state to the console and returns true to allow the control to be hidden.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/simplevault/simplevault_beforehide_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"simplevault\").events.on(\"beforeHide\", function(value, init) {\n    console.log(\"beforeHide\", value, init);\n    return true;\n});\n```\n\n----------------------------------------\n\nTITLE: Managing Files in SimpleVault using DataCollection API\nDESCRIPTION: Examples of using DataCollection API to remove single or all files from the SimpleVault control.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/simplevault.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"simpleVault\").data.remove(\"file_id\");\n\nform.getItem(\"simpleVault\").data.removeAll();\n```\n\n----------------------------------------\n\nTITLE: Checking Individual Checkbox State in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the isChecked() method to check if a specific checkbox within a Checkbox Group is checked. It returns a boolean value.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/checkbox_group/checkboxgroup_ischecked_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nform.getItem(\"CheckboxGroup\").isChecked(\"checkbox_id_3\");\n```\n\n----------------------------------------\n\nTITLE: Updating DataView Items\nDESCRIPTION: Updates configuration of existing DataView items using their ID\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/dataview/manipulating_data.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ndataview.data.update(\"item_id\",{\n    value:\"Nice item\"\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Date as Date Object\nDESCRIPTION: Shows how to get the selected date as a JavaScript Date object by passing true parameter.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar/api/calendar_getvalue_method.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst date = calendar.getValue(true); // -> Fri Jan 11 2019 18:09:15 GMT+0300\n```\n\n----------------------------------------\n\nTITLE: Checking Container Disabled State with isDisabled() Method in DHTMLX Form\nDESCRIPTION: This example demonstrates how to check if a Container control is disabled in a DHTMLX Form by using the isDisabled() method. The method returns a boolean value indicating the disabled state of the container.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/container/container_isdisabled_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"container\").isDisabled();\n// -> true/false\n```\n\n----------------------------------------\n\nTITLE: Handling Form Keydown Events in JavaScript\nDESCRIPTION: Example of attaching a keydown event listener to a DHTMLX Form component. The event fires when any key is pressed while a form control or its element is in focus. Added in v7.2.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/form_keydown_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.events.on(\"keydown\", function(event, name, id) {\n    console.log(event, name, id);\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Form Properties Setup in JavaScript\nDESCRIPTION: Example of setting basic properties for a form input control including label, CSS, padding, height, and other attributes.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/form_setproperties_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.setProperties(\"input_name\", {\n    label: \"new label\",\n    css: \"new-css\",\n    padding: \"20px\",\n    height: 100,\n    maxlength: 15,\n    readOnly: true\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX Toolbar Component\nDESCRIPTION: Creates a new Toolbar instance with custom CSS styling for borders and background color. The constructor takes null as the container parameter since the toolbar will be attached to a layout rather than a direct HTML container.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tutorial/basic_application/step3.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst toolbar = new dhx.Toolbar(null, {css: \"dhx_widget--bordered dhx_widget--bg_gray\"});\n```\n\n----------------------------------------\n\nTITLE: Simple Vault Configuration Properties Interface\nDESCRIPTION: Complete interface showing all available configuration properties that can be modified using setProperties() method.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/simplevault/simplevault_setproperties_method.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    css: string,\n    width: string | number | \"content\",\n    height: string | number | \"content\",\n    padding: string | number,\n    label: string,\n    labelWidth: string | number,\n    labelPosition: \"left\" | \"top\",\n    hiddenLabel: boolean,\n    helpMessage: string,\n    required: boolean,\n    preMessage: string,\n    successMessage: string,\n    errorMessage: string,\n    params: { [key: string]: any },\n    headerParams: { [key: string]: any },\n    target: string,\n    fieldName: string,\n    singleRequest: boolean,\n    updateFromResponse: boolean,\n    autosend: boolean,\n    accept: string,\n    validation: (value: ISimpleVaultValue) => boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Destroying Menu Instance in JavaScript\nDESCRIPTION: This code snippet demonstrates how to use the destructor() method to remove a Menu instance and free up resources. It's a simple one-line call to the method on a menu object.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/menu/api/menu_destructor_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nmenu.destructor();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Widget from Layout Cell in JavaScript\nDESCRIPTION: This code snippet demonstrates how to use the getWidget() method to retrieve a widget attached to a specific cell in a DHTMLX Layout. The method is called on a cell object obtained by its ID and returns the attached widget object.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/layout/api/cell/layout_cell_getwidget_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// id - the id of a cell a widget is attached to\nconst widget = layout.getCell(\"id\").getWidget();\n```\n\n----------------------------------------\n\nTITLE: Implementing Grid Column Marks with CSS Classes\nDESCRIPTION: Demonstrates how to implement cell marking in a Grid column using CSS classes for minimum and maximum values, including both the styling and Grid initialization code\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/gridcolumn_properties/gridcolumn_mark_property.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<style>\n    .max_cell {\n        background: #f44336;\n        color: #FFF;\n    }\n\n    .min_cell {\n        background: #4CAF50;\n        color: #FFF\n    }\n</style>\n\n<script>\n    const grid = new dhx.Grid(\"grid_container\", {\n        columns: [\n            {\n                id: \"population\", header: [{ text: \"Population\" }],\n                mark: {\n                    min: \"min_cell\",\n                    max: \"max_cell\"\n                }\n            },\n            // more columns configuration objects\n        ],\n        // more options\n    });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Custom Selection and Focus Styling\nDESCRIPTION: Shows how to customize the appearance of selected and focused items in DataView.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/dataview/customization.md#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<style>\n    .dhx_dataview-item--selected {\n        border-color: transparent;\n        box-shadow: 0px 1px 5px 0px rgb(2, 136, 209, 0.5), \n            inset 0px 0px 0px 1px rgb(2, 136, 209, 1);\n    }\n</style>\n\n<script>\n    const dataview = new dhx.DataView(\"dataview_container\", {itemsInRow: 3});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX Slider with hiddenLabel in JavaScript\nDESCRIPTION: This code snippet demonstrates how to initialize a DHTMLX Slider component with the hiddenLabel configuration property set to true. This adds a hidden label for the Slider that will be used when sending a form to the server.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/slider/api/slider_hiddenlabel_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst slider = new dhx.Slider(\"slider_container\",{\n    hiddenLabel:true\n});\n```\n\n----------------------------------------\n\nTITLE: Checking Disabled State of ToggleGroup Element\nDESCRIPTION: Example demonstrates using the isDisabled() method to check if a specific toggle element in a ToggleGroup control is disabled. The method returns a boolean value indicating the disabled state.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/togglegroup/togglegroup_isdisabled_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"ToggleGroup\").isDisabled(\"toggle_1\"); // -> true/false\n```\n\n----------------------------------------\n\nTITLE: Disabling Selection in JavaScript DataView\nDESCRIPTION: Disables the selection of items in a DataView using the disable() method of the selection object.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/dataview/usage_selection.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ndataview.selection.disable();\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX Combo Box with multiselection in JavaScript\nDESCRIPTION: This code snippet demonstrates how to initialize a DHTMLX Combo Box with the multiselection option enabled. The multiselection property is set to true, allowing users to select multiple options from the Combo Box.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/combobox/api/combobox_multiselection_config.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst combo = new dhx.Combobox(\"combo_container\", {\n    multiselection:true\n});\n```\n\n----------------------------------------\n\nTITLE: Documenting Toggle API Events Reference\nDESCRIPTION: Markdown table listing all available events for the Toggle component, including links to detailed documentation for each event.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/api_overview.md#2025-04-22_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n| Name                                                           | Description                                                         |\n| :--------------------------------------------------------- | :----------------------------------------------------------------- |\n| [](form/api/toggle/toggle_afterchangeproperties_event.md)  | @getshort(form/api/toggle/toggle_afterchangeproperties_event.md)   |\n```\n\n----------------------------------------\n\nTITLE: Checking Combo Box Disabled State in JavaScript\nDESCRIPTION: Demonstrates how to check if a Combo Box component is disabled using the isDisabled() method. The method returns a boolean value indicating the disabled state of the component.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/combobox/api/combobox_isdisabled_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncombobox.isDisabled(); // -> returns true/false\n```\n\n----------------------------------------\n\nTITLE: Initializing CSV DataDriver in JavaScript\nDESCRIPTION: Creates a CSV data driver instance with custom configuration for column and row delimiters and header handling. The nameByHeader option allows using the first line data as keys for items.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/helpers/datadrivers.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst csvDataDriver = new dhx.dataDrivers.csv({\n    columnDelimiter: \" | \",\n    rowDelimiter: \"\\n\\n\",\n    nameByHeader: true\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Title Control to DHTMLX Ribbon\nDESCRIPTION: Demonstrates how to add a Title control to a ribbon using the add() method of TreeCollection. The Title control displays static text like an application name.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/ribbon/title.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nribbon.data.add({\n    type: \"title\",\n    value: \"APP NAME\"\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Focus on List Item in JavaScript\nDESCRIPTION: Demonstrates how to set focus on a specific List item using the setFocus() method. The method takes the id of the item as a parameter.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/list/work_with_list.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlist.setFocus(\"7\");\n```\n\n----------------------------------------\n\nTITLE: Showing a SimpleVault Control in DHTMLX Form\nDESCRIPTION: This code snippet demonstrates how to show a SimpleVault control that has been previously hidden. The method is called on a SimpleVault control that is accessed via the getItem() method of the form instance.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/simplevault/simplevault_show_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"simplevault\").show();\n```\n\n----------------------------------------\n\nTITLE: Handling dragIn Event in DHTMLX Tree Component (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to attach an event handler to the dragIn event of a DHTMLX Tree component. The event fires when an item is dragged to another potential target in the tree.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree/api/tree_dragin_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntree.events.on(\"dragIn\", function(data, events) {\n    // your logic here\n});\n```\n\n----------------------------------------\n\nTITLE: Handling beforeEditEnd Event in DHTMLX Tree\nDESCRIPTION: This example demonstrates how to attach an event handler to the beforeEditEnd event of a Tree component. The event fires before editing of a tree item is finished and allows you to prevent closing the editor by returning false.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree/api/tree_beforeeditend_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntree.events.on(\"beforeEditEnd\", function(value, id) {\n    // your logic here\n    return false;\n});\n```\n\n----------------------------------------\n\nTITLE: Handling beforeChangeProperties Event in DHTMLX Form Select Control\nDESCRIPTION: This example demonstrates how to attach an event handler to the beforeChangeProperties event of a Select control in a DHTMLX Form. The event fires before configuration attributes are changed, and returning false would cancel the change.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/select/select_beforechangeproperties_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"select\").events.on(\"beforeChangeProperties\", function(properties) {\n    console.log(\"beforeChangeProperties\", properties);\n    return true;\n});\n```\n\n----------------------------------------\n\nTITLE: Attaching a Click Event Listener to DHTMLX Ribbon in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to attach an event listener to the `click` event of a DHTMLX Ribbon instance (`ribbon`). The listener function receives the ID of the clicked control (`id`) and the native browser event object (`e`). In this example, it logs the control's ID to the console upon clicking. The event fires after a control within the ribbon is clicked.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/ribbon/api/ribbon_click_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nribbon.events.on(\"click\", function(id,e){\n    console.log(id);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Tabs Without Content in DHTMLX Tabbar\nDESCRIPTION: Shows how to create tabs without any content using the noContent property\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tabbar/configuring_tabbar.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst tabbar = new dhx.Tabbar(\"tabbar_container\", {\n    noContent:true\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Layout Cell Borders in DHTMLX JavaScript\nDESCRIPTION: Demonstrates how to initialize a DHTMLX Layout with different border types between cells. The type property can be set to 'line', 'wide', 'space', or 'none' to control cell borders and spacing.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/layout/api/layout_type_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst layout = new dhx.Layout(\"layout_container\", {\n    type: \"space\", // \"line\" | \"wide\" | \"none\"\n    cols: [\n        {\n            html: \"1\"\n        },\n        {\n            html: \"2\"\n        },\n        {\n            html: \"3\"\n        }\n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: Handling afterChangeProperties Event in DHTMLX Form Simple Vault\nDESCRIPTION: This code snippet demonstrates how to attach an event handler to the afterChangeProperties event of a Simple Vault control in a DHTMLX Form. The event fires after the control's configuration attributes have been changed dynamically.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/simplevault/simplevault_afterchangeproperties_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"simplevault\").events.on(\"afterChangeProperties\", function(properties) {\n    console.log(\"afterChangeProperties\", properties);\n});\n```\n\n----------------------------------------\n\nTITLE: Showing Progress Bar in Layout Cell with JavaScript\nDESCRIPTION: This snippet demonstrates how to use the progressShow() method to display a progress bar in a specific layout cell. The method is called on a cell object obtained from the layout.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/layout/api/cell/layout_cell_progressshow_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlayout.getCell(\"two\").progressShow();\n```\n\n----------------------------------------\n\nTITLE: Configuring htmlEnable for Grid Column in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the htmlEnable property when configuring columns for a DHTMLX Grid. It allows HTML content to be displayed in the column cells and header.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/gridcolumn_properties/gridcolumn_htmlenable_property.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst grid = new dhx.Grid(\"grid_container\", {\n    columns: [\n        { id: \"population\", htmlEnable: true, header: [\n            { text: \"<span class='header-title'>Population</span>\" }\n        ]}, \n        // more columns configuration objects\n    ],\n    // more options\n});\n```\n\n----------------------------------------\n\nTITLE: Unselecting Items in DHTMLX Ribbon - JavaScript\nDESCRIPTION: Demonstrates how to use the unselect() method on the DHTMLX Ribbon instance to clear selection(s). In the first snippet, all selected items are unselected by calling ribbon.unselect() without parameters. In the second, a specific item with id 'print' is unselected. This method is available since DHTMLX Suite v7.0 and works with both string and number ids. Required dependency: DHTMLX Ribbon component properly initialized as 'ribbon'. Input is optional (id of the item), output is void. All related selection states will update in the UI accordingly.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/ribbon/api/ribbon_unselect_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// unselects all previously selected items\\nribbon.unselect();\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// unselects a specified selected item\\nribbon.unselect(\"print\");\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Checkbox States in JavaScript\nDESCRIPTION: This example shows how to use the isChecked() method without parameters to get the state of all checkboxes in the Checkbox Group. It returns an object with checkbox IDs as keys and their states as values.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/checkbox_group/checkboxgroup_ischecked_method.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nform.getItem(\"CheckboxGroup\").isChecked();\n```\n\n----------------------------------------\n\nTITLE: Exporting Grid Data to CSV in JavaScript\nDESCRIPTION: Shows how to export grid data to CSV format using both default settings and custom configuration options. The method supports customizing file name, row and column delimiters, and output format (file vs string).\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/export/grid_csv_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// default export\ngrid.export.csv();\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// export with config settings\ngrid.export.csv({\n    name:\"grid_data\", // grid data will be exported to a CSV file named \"grid_data\"\n    rowDelimiter: \"\\t\", // the tab delimiter will be used to separate rows\n    columnDelimiter: \";\" // the semicolon delimiter will be used to separate columns\n});\n```\n\n----------------------------------------\n\nTITLE: Embedding DHTMLX Calendar Snippet with iframe\nDESCRIPTION: An iframe that embeds a code snippet demonstrating how to set the width of a DHTMLX Calendar component. The default width of Calendar is 250px, but it can be customized using the width configuration property.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar2/functionality_and_features/width.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<iframe src=\"https://snippet.dhtmlx.com/azm0u5ns?mode=result\" frameborder=\"0\" class=\"snippet_iframe\" width=\"100%\" height=\"450\"></iframe>\n```\n\n----------------------------------------\n\nTITLE: Hiding Ribbon Items Using DHTMLX hide() in JavaScript\nDESCRIPTION: Demonstrates how to use the hide method of the DHTMLX Ribbon for hiding specific ribbon items by their IDs. The snippet shows both single and multiple item hiding by passing an ID string or an array of ID strings. The ribbon object should be instantiated before calling this method. The ids parameter can be a string, number, or an array, and is optional.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/ribbon/api/ribbon_hide_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nribbon.hide(\"save_btn\");\n// several at a time\nribbon.hide([\"cancel_btn\",\"del_btn\"]);\n```\n\n----------------------------------------\n\nTITLE: Handling afterShow Event in DHTMLX Form Text Control\nDESCRIPTION: This example demonstrates how to attach an event handler to the afterShow event of a Text control in a DHTMLX Form. The event fires after the control is shown and receives the current value of the control as a parameter.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/text/text_aftershow_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"text\").events.on(\"afterShow\", function(value) {\n    console.log(\"afterShow\", value);\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Sidebar Expansion Event in JavaScript\nDESCRIPTION: Example showing how to attach an event handler to the afterExpand event of a DHTMLX Sidebar. This event fires after the sidebar has been expanded.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/sidebar/api/sidebar_afterexpand_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsidebar.events.on(\"afterExpand\", function() {\n    // your logic here\n});\n```\n\n----------------------------------------\n\nTITLE: Repainting Tree Component in DHTMLX Suite JavaScript\nDESCRIPTION: The paint() method is used to repaint the Tree component on a page. It doesn't take any parameters and doesn't return any value. This method is useful when you need to manually trigger a repaint of the Tree, for example, after dynamically changing its content or structure.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree/api/tree_paint_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ntree.paint();\n```\n\n----------------------------------------\n\nTITLE: CheckboxGroup Methods Reference Table\nDESCRIPTION: Markdown table listing all available methods for the CheckboxGroup component with descriptions and documentation links.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/api_overview.md#2025-04-22_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n| Name                                                              | Description                                                              |\n| :---------------------------------------------------------------- | :----------------------------------------------------------------------- |\n| [](form/api/checkbox_group/checkboxgroup_blur_method.md)          | @getshort(form/api/checkbox_group/checkboxgroup_blur_method.md)          |\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic Calendar in Default Mode\nDESCRIPTION: Creates a new Calendar instance in the default 'calendar' mode where the current date (year and month) is displayed.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar2/configuring.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar calendar = new dhx.Calendar(\"calendar_container\");\n```\n\n----------------------------------------\n\nTITLE: Applying Built-in DHTMLX CSS Classes\nDESCRIPTION: Example showing how to use DHTMLX's built-in CSS classes to style the TimePicker with a gray background.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/timepicker/api/timepicker_css_config.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst timepicker = new dhx.Timepicker(\"timepicker_container\", {\n    css: \"dhx_widget--bg-gray\"\n});\n```\n\n----------------------------------------\n\nTITLE: Applying Custom CSS to DataView Instance\nDESCRIPTION: Shows how to apply custom CSS classes to a DataView instance during initialization.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/dataview/customization.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst dataview = new dhx.DataView(\"dataview_container\", { \n    css:\"my_first_class my_second_class\"\n});\n```\n\n----------------------------------------\n\nTITLE: Toggle Properties Object Structure in DHTMLX Form ToggleGroup\nDESCRIPTION: This code snippet shows the structure of the properties object for an individual toggle within a ToggleGroup control in DHTMLX Form. It lists the configurable attributes for each toggle option.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/togglegroup/togglegroup_beforechangeproperties_event.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    full: boolean,\n    icon: string,\n    offIcon: string,\n    offText: string,\n    text: string,\n    value: string | number\n}\n```\n\n----------------------------------------\n\nTITLE: Separator JSON Template for DHTMLX Ribbon (JavaScript/JSON)\nDESCRIPTION: Illustrates the simple JSON configuration for adding a visual 'separator' line within a DHTMLX Ribbon block or group. It only requires an optional `id` and the `type: \"separator\"` property.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/ribbon/data_loading.md#2025-04-22_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\n// separator\n{\n    id: \"sepId\",        \n    type: \"separator\"         \n}\n```\n\n----------------------------------------\n\nTITLE: Component Constructor Methods in DHTMLX Optimus\nDESCRIPTION: Methods provided by the Component constructor in DHTMLX Optimus. The init() method is mandatory for initializing component logic, while destroy() is called when the component is being destroyed.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/optimus_guides/index.md#2025-04-22_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\ninit()\ndestroy()\n```\n\n----------------------------------------\n\nTITLE: Retrieving Multiple Selected Values from Combo Box in JavaScript\nDESCRIPTION: This example shows how to use the getValue() method to retrieve an array of IDs for the currently selected options in a Combo Box control when multiselection is enabled.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/combo/combo_getvalue_method.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst value = form.getItem(\"combo\").getValue();\n// -> ['id_1', 'id_2']\n```\n\n----------------------------------------\n\nTITLE: Handling beforeChange Event for Toggle Control in DHTMLX Form\nDESCRIPTION: This code snippet demonstrates how to attach an event handler to the beforeChange event of a Toggle control in a DHTMLX Form. The handler logs the new value and returns true to allow the change.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/toggle/toggle_beforechange_event.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nform.getItem(\"toggle\").events.on(\"beforeChange\", function(value) {\n    console.log(\"beforeChange\", value);\n    return true;\n});\n```\n\n----------------------------------------\n\nTITLE: TimePicker Properties Configuration\nDESCRIPTION: Configuration object for TimePicker control defining time selection and format properties.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/form_getproperties_method.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    controls: boolean,\n    css: string,\n    editable: boolean,\n    errorMessage: string,\n    height: string | number| \"content\",\n    helpMessage: string,\n    hiddenLabel: boolean,\n    icon: string,\n    label: string,\n    labelPosition: string,\n    labelWidth: string | number,\n    padding: string | number,\n    placeholder: string,\n    preMessage: string,\n    required: boolean,\n    successMessage: string,\n    timeFormat: number,\n    validation: function,\n    valueFormat: string,\n    width: string | number | \"content\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Selected Cell Object in JavaScript Grid\nDESCRIPTION: This snippet demonstrates how to use the getCell() method to retrieve the object of a selected cell in a DHTMLX Grid. The method returns an object containing information about the selected row and column.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/selection/selection_getcell_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst selectedCell = grid.selection.getCell();\n// -> {row: {…}, column: {…}}\n```\n\n----------------------------------------\n\nTITLE: Documenting TimePicker API Methods Reference\nDESCRIPTION: Markdown table listing all available methods for the TimePicker component, including links to detailed documentation for each method.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/api_overview.md#2025-04-22_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n| Name                                                       | Description                                                       |\n| :--------------------------------------------------------- | :---------------------------------------------------------------- |\n| [](form/api/timepicker/timepicker_blur_method.md)          | @getshort(form/api/timepicker/timepicker_blur_method.md)          |\n| [](form/api/timepicker/timepicker_clear_method.md)         | @getshort(form/api/timepicker/timepicker_clear_method.md)         |\n```\n\n----------------------------------------\n\nTITLE: Clearing Avatar Value in DHTMLX Form (JavaScript)\nDESCRIPTION: This snippet demonstrates how to use the clear() method to reset the value of an Avatar control in a DHTMLX Form. It targets a specific Avatar item in the form and clears its current value.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/avatar/avatar_clear_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"avatar\").clear();\n```\n\n----------------------------------------\n\nTITLE: Implementing Grid Column Tooltip Configuration\nDESCRIPTION: Demonstrates how to initialize a DHTMLX Grid with tooltip configuration for columns. Shows setting up a grid with tooltip enabled for a specific column while disabled globally.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/gridcolumn_properties/gridcolumn_tooltip_property.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst grid = new dhx.Grid(\"grid_container\", {\n    columns: [\n        { id: \"country\", header: [{ text: \"Country\" }], tooltip: true }, \n        // more columns configuration objects\n    ],\n    tooltip: false,\n    // more options \n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Selected Menu Items in JavaScript\nDESCRIPTION: This code snippet demonstrates how to use the getSelected() method of a Menu object to retrieve an array of IDs of selected menu items. The method returns an array of string or number values representing the IDs of the selected items.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/menu/api/menu_getselected_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nmenu.getSelected(); // -> [\"selected_1\", \"selected_1.1\"]\n```\n\n----------------------------------------\n\nTITLE: Disabling DatePicker Control in DHTMLX Form\nDESCRIPTION: Demonstrates how to disable a DatePicker control within a DHTMLX Form using the disable() method. The method is called on a specific DatePicker instance retrieved using getItem().\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/calendar/calendar_disable_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"datepicker\").disable();\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX Colorpicker with grayShades Configuration\nDESCRIPTION: Creates a new instance of DHTMLX Colorpicker with the gray shades section disabled in the palette. The grayShades property is set to false to hide the gray shades section that appears by default.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/colorpicker/api/colorpicker_grayshades_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst colorpicker = new dhx.Colorpicker(\"colorpicker_container\", {\n    grayShades: false\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring DHTMLX Suite Custom Theme via CSS Variables in HTML\nDESCRIPTION: This snippet demonstrates how to override DHTMLX Suite's internal CSS variables within a <style> block in HTML to define a custom theme. Dependencies include DHTMLX's main stylesheet and presence of UI elements utilizing the data-dhx-theme attribute. Parameters such as --dhx-font-color-primary and --dhx-background-primary alter font colors and background schemes, while service variables modify Grid and Toolbar appearances. The expected input is an HTML document with DHTMLX components, and the output is a consistent custom-styled UI across widgets sharing the custom-theme-dark theme. Constraints: Make sure core DHTMLX CSS is loaded for variables to take effect, and ensure variable values are valid CSS color/number syntax.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/themes/custom_theme.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<style>\\n    [data-dhx-theme='custom-theme-dark'] {\\n        /* font */\\n        --dhx-font-color-primary: var(--dhx-color-gray-200);\\n        --dhx-font-color-secondary: var(--dhx-color-gray-500);\\n        --dhx-font-color-additional: var(--dhx-color-gray-500);\\n        --dhx-font-color-disabled: var(--dhx-color-gray-800);\\n        --dhx-font-color-contrast: var(--dhx-color-black);\\n        /* end font */\\n\\n        /* border */\\n        --dhx-border-color: #007a99;\\n        /* end border */\\n\\n        /* color scheme */\\n        --dhx-h-primary: 45;\\n        --dhx-s-primary: 100%;\\n        --dhx-l-primary: 35%;\\n        --dhx-h-secondary: 185;\\n        --dhx-s-secondary: 5%;\\n        --dhx-l-secondary: 50%;\\n        --dhx-h-danger: 330;\\n        --dhx-s-danger: 65%;\\n        --dhx-l-danger: 50%;\\n        --dhx-h-success: 175;\\n        --dhx-s-success: 60%;\\n        --dhx-l-success: 40%;\\n        --dhx-h-background: 190;\\n        --dhx-s-background: 100%;\\n        --dhx-l-background: 10%;\\n        /* end color scheme */\\n\\n        /* theme colors */\\n        --dhx-background-primary: hsl(var(--dhx-h-background), var(--dhx-s-background), var(--dhx-l-background));\\n        --dhx-background-secondary: hsl(var(--dhx-h-background), var(--dhx-s-background), calc(var(--dhx-l-background) + 8%));\\n        --dhx-background-additional: hsl(var(--dhx-h-background), var(--dhx-s-background), calc(var(--dhx-l-background) + 12%));\\n        /* end theme colors */\\n\\n        /* DHTMLX Grid service variables */\\n        --dhx-s-grid-header-background: #002229;\\n        --dhx-s-grid-selection-background: var(--dhx-color-gray-100);\\n        /* end DHTMLX Grid service variables */\\n\\n        /* DHTMLX Toolbar service variables */\\n        --dhx-s-toolbar-background: #002229;\\n        /* end DHTMLX Toolbar service variables */\\n    }\\n</style>\n```\n\n----------------------------------------\n\nTITLE: JSON Format Template for Custom HTML Control\nDESCRIPTION: Template showing how to define a custom HTML control in DHTMLX Toolbar with an image element.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/toolbar/load_data.md#2025-04-22_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n// custom HTML button\n{\n    type: \"customHTML\",\n    html: \"<img src='../logo.svg' alt=''/>\",\n    css: \"logo-container\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining mark property API signature in JavaScript\nDESCRIPTION: Function signature for the mark property which accepts a Date object and returns a string CSS class name.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar2/api/calendar_mark_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction mark;\nmark?: (a: Date) => string;\n```\n\n----------------------------------------\n\nTITLE: Returned Object Structure from Colorpicker getProperties Method\nDESCRIPTION: This example shows the structure of the object returned by the getProperties() method of a Colorpicker control, including all available configuration attributes and their default values.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/colorpicker/colorpicker_getproperties_method.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    customColors: [],\n    editable: false,\n    errorMessage: \"\",\n    grayShades: true,\n    height: \"content\",\n    helpMessage: \"\",\n    hiddenLabel: false,\n    icon: \"\",\n    label: \"Choose your color\",\n    labelPosition: \"top\",\n    labelWidth: \"200px\",\n    mode: \"palette\",\n    padding: 0,\n    palette: [Array(7), Array(7), ...],\n    placeholder: \"\",\n    preMessage: \"\",\n    required: false,\n    successMessage: \"\",\n    validation: undefined,\n    width: \"content\"\n}\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Input Change Events in DHTMLX Toolbar - JavaScript\nDESCRIPTION: This snippet demonstrates how to register an event listener for the inputChange event in the DHTMLX Toolbar using JavaScript. The handler function receives the Input control's id and the new value as parameters and logs them to the console. Requires DHTMLX Toolbar v7.2 or later. Expected input is the Input control's id (string or number) and its new value (string); the output is custom handling inside the event callback, here exemplified as a console log.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/toolbar/api/toolbar_inputchange_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntoolbar.events.on(\"inputChange\", function(id, newValue){\n    console.log(id, newValue);\n});\n```\n\n----------------------------------------\n\nTITLE: Adding New Book to List\nDESCRIPTION: Demonstrating how to add a new book entry to the existing list using the add method.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/guides/datacollection_guide.md#2025-04-22_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nlist.data.add(\n    {\n        \"title\": \"J.R.R. Tolkien 4-Book Boxed Set: The Hobbit and The Lord of the Rings\",\n        \"id\": \"book010\",\n        \"authors\": \"J.R.R. Tolkien\",\n        \"average_rating\": 4.59,\n        \"publication_date\": \"9/25/2012\",\n        \"in_store\": true,\n        \"isbn13\": 9780345538376,\n        \"language_code\": \"eng\",\n        \"num_pages\": 1728,\n        \"ratings_count\": 101233,\n        \"text_reviews_count\": 1550,\n        \"publisher\": \"Ballantine Books\"\n    }, 1);\n```\n\n----------------------------------------\n\nTITLE: Event Propagation Control Example\nDESCRIPTION: Alternative approach to control event propagation using stopPropagation()\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/combobox/api/combobox_eventhandlers_config.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\neventHandlers: {\n    onclick: {\n        class_name: (event) => {                              \n            evt = event || window.event;\n            evt.stopPropagation();\n            console.log(\"button click\");\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing afterShow Event Handler in DHTMLX Form\nDESCRIPTION: Example showing how to attach an event listener for the afterShow event of a Form control. The handler receives the control name and its current value as parameters.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/form_aftershow_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.events.on(\"afterShow\", function(name, value) {\n    console.log(\"afterShow\", name, value); \n});\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies\nDESCRIPTION: Command to install all required dependencies using Yarn package manager.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn\n```\n\n----------------------------------------\n\nTITLE: Checking if a Menu Item is Disabled in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the isDisabled method to check if a specific Menu item is disabled. It takes the item's id as a parameter and returns a boolean value.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/menu/api/menu_isdisabled_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmenu.isDisabled(\"id\"); // -> returns true/false\n```\n\n----------------------------------------\n\nTITLE: Handling beforeValidate Event in DHTMLX Form Radiogroup\nDESCRIPTION: This example demonstrates how to attach an event handler to the beforeValidate event of a Radiogroup control in a DHTMLX form. The handler logs the value being validated and returns true to allow the default validation to proceed.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/radiogroup/radiogroup_beforevalidate_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"radiogroup\").events.on(\"beforeValidate\", function(value) {\n    console.log(\"beforeValidate\", value);\n    return true;\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX Window in a Specific Container (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates how to initialize a DHTMLX Window instance and attach it to a specific HTML container using the `node` configuration option. The `node` property is set to the string \"customDiv\", indicating that the window should be rendered inside the HTML element with the ID 'customDiv'. The `dhxWindow.show()` method then displays the window within that designated container. Requires the DHTMLX Suite library (`dhx`) and an HTML element with the ID `customDiv` to exist on the page.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/window/api/window_node_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst dhxWindow = new dhx.Window({\n    node:\"customDiv\"\n});\n\ndhxWindow.show();\n```\n\n----------------------------------------\n\nTITLE: Preparing JSON Dataset for DHTMLX Toolbar\nDESCRIPTION: Example of a properly formatted JSON dataset for initializing a DHTMLX Toolbar with different control types including buttons, separators, and input fields.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/toolbar/load_data.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst dataset = [\n     {\n        \"id\": \"other\",\n        \"type\": \"button\",\n        \"view\": \"link\",\n        \"circle\": true,\n        \"color\": \"secondary\",\n        \"icon\": \"mdi mdi-menu\"\n    },\n    {\n        \"id\": \"add\",\n        \"icon\": \"mdi mdi-plus\",\n        \"value\": \"Add\"\n    },\n    {\n        \"type\": \"separator\"\n    },\n    {\n        \"id\": \"edit\",\n        \"value\": \"Edit\"\n    },\n    {\n        \"id\": \"search\",\n        \"type\": \"input\",\n        \"placeholder\": \"Search\",\n        \"icon\": \"mdi mdi-magnify\"\n    }\n];\n```\n\n----------------------------------------\n\nTITLE: Getting Active Page Index with DHTMLX Pagination (JavaScript)\nDESCRIPTION: This JavaScript example demonstrates calling the `getPage()` method on an instance of the DHTMLX Pagination component (represented by the `pagination` variable). The method returns the zero-based numerical index of the currently active page. The example shows a potential return value of 3, indicating the fourth page is active.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/pagination/api/pagination_getpage_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst pageIndex = pagination.getPage();\n// -> 3\n```\n\n----------------------------------------\n\nTITLE: Configuring Fieldset Properties in DHTMLX Form\nDESCRIPTION: This code snippet demonstrates the configuration object structure for a fieldset control in DHTMLX Form. It includes all available properties such as type, name, visibility settings, dimensions, labels, and layout options for arranging child controls.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/fieldset/api_fieldset_properties.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    type: \"fieldset\",\n    name?: string,\n    id?: string,\n\n    hidden?: boolean, // false by default\n    disabled?: boolean, // false by default\n\n    css?: string,\n    width?: string | number | \"content\", // \"content\" by default\n    height?: string | number | \"content\", // \"content\" by default\n    padding?: string | number, \n\n    label?: string,\n    labelAlignment?: \"left\" | \"right\" | \"center\", // \"left\" by default\n    rows?: IBlock,\n    cols?: IBlock,\n    align?: \"start\" | \"center\" | \"end\" | \"between\" | \"around\" | \"evenly\" // \"start\" by default\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Input afterShow Event in DHTMLX Form\nDESCRIPTION: Example demonstrates how to attach an event handler to the afterShow event of a Form Input control. The event fires after the control becomes visible and provides access to the current value of the input.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/input/input_aftershow_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"input\").events.on(\"afterShow\", function(value) {\n    console.log(\"afterShow\", value);\n});\n```\n\n----------------------------------------\n\nTITLE: Querying Selected Items in DHTMLX Toolbar - JavaScript\nDESCRIPTION: Demonstrates how to use the getSelected() method of the DHTMLX Toolbar component to retrieve an array of the currently selected item IDs. No external dependencies are needed except instantiation of a DHTMLX Toolbar instance. Input parameters are not required; the output is an array of string or number IDs representing selected toolbar items. This method is available from DHTMLX version 7.0 onwards and returns an empty array if no items are selected.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/toolbar/api/toolbar_getselected_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntoolbar.getSelected(); // -> [\"selected_1\", \"selected_1.1\"]\n```\n\n----------------------------------------\n\nTITLE: Available Avatar Control Properties Configuration\nDESCRIPTION: Complete configuration object showing all available properties that can be modified for the Avatar control.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/avatar/avatar_setproperties_method.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    css: string,\n    width: string | number | \"content\",\n    height: string | number | \"content\",\n    padding: string | number,\n    label: string,\n    labelWidth: string | number,\n    labelPosition: \"left\" | \"top\",\n    hiddenLabel: boolean,\n    helpMessage: string\n    required: boolean,\n    preMessage: string,\n    successMessage: string,\n    errorMessage: string,\n    validation: (value: object) => boolean,\n    readOnly: boolean,\n    removeIcon: boolean,\n    size: \"small\" | \"medium\" | \"large\" | number,\n    circle: boolean,\n    alt: string,\n    icon: string,\n    placeholder: string,\n    preview: string,\n    accept: string,\n    target: string\n    fieldName: string,\n    autosend: boolean,\n    params: { [key: string]: any },\n    headerParams: { [key: string]: any },\n    updateFromResponse: boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Colorpicker API Structure - Markdown Table\nDESCRIPTION: Markdown tables documenting the API methods, events and properties of the DHTMLX Colorpicker component. Each table lists the name and description of various API elements.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/colorpicker/api/api_overview.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name                                                      | Description                                                      |\n| --------------------------------------------------------- | ---------------------------------------------------------------- |\n| [](colorpicker/api/colorpicker_clear_method.md)           | @getshort(colorpicker/api/colorpicker_clear_method.md)           |\n| [](colorpicker/api/colorpicker_destructor_method.md)      | @getshort(colorpicker/api/colorpicker_destructor_method.md)      |\n| [](colorpicker/api/colorpicker_getcurrentmode_method.md)  | @getshort(colorpicker/api/colorpicker_getcurrentmode_method.md)  |\n```\n\n----------------------------------------\n\nTITLE: Enabling and Disabling a Button\nDESCRIPTION: Shows how to enable or disable buttons in a toolbar using the enable() and disable() methods. Disabled buttons remain visible but cannot be interacted with.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/toolbar/button.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ntoolbar.enable(id);\ntoolbar.disable(id);\n```\n\n----------------------------------------\n\nTITLE: Clearing TimePicker Validation in DHTMLX Form\nDESCRIPTION: Example showing how to clear validation state of a TimePicker control using the clearValidate() method. The method is called on a TimePicker form item retrieved using getItem().\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/timepicker/timepicker_clearvalidate_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"timepicker\").clearValidate();\n```\n\n----------------------------------------\n\nTITLE: JSON Format Template for Title Control\nDESCRIPTION: Template showing the structure and properties available for a title control in DHTMLX Toolbar including tooltip.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/toolbar/load_data.md#2025-04-22_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\n// title\n{\n    id: \"collection\",        \n    type: \"title\",                 \n    value: \"Music\",                \n    tooltip: \"Current collection\"    \n}\n```\n\n----------------------------------------\n\nTITLE: Individual Toggle Configuration Properties\nDESCRIPTION: Shows the structure of available configuration properties for individual toggles within the ToggleGroup.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/togglegroup/togglegroup_setproperties_method.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    full: boolean,\n    icon: string,\n    offIcon: string,\n    offText: string,\n    text: string,\n    value: string | number\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Autosize for Layout Cells\nDESCRIPTION: Demonstrates how to set a Layout cell to automatically adjust its width or height to fit its content.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/layout/cell_configuration.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst layout = new dhx.Layout(\"layout_container\", {\n    cols: [\n        { \n            header: \"Cell header\", \n            width: \"content\"\n        },\n        // more options\n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring maxHeight for Layout Cell in JavaScript\nDESCRIPTION: This snippet demonstrates how to set the maxHeight property for a cell in a DHTMLX Layout. It creates a new Layout instance with a single column that has a header and a maximum height of 100 pixels.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/layout/api/cell/layout_cell_maxheight_config.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst layout = new dhx.Layout(\"layout_container\", {\n    cols: [\n        { header: \"Cell header\", maxHeight: \"100px\"}\n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: Checking Slider Disabled State in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the isDisabled() method to check if a Slider component is disabled. The method returns a boolean value indicating the disabled state of the slider.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/slider/api/slider_isdisabled_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nslider.isDisabled(); // -> true/false\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX Grid with autoEmptyRow Config in JavaScript\nDESCRIPTION: This snippet demonstrates how to initialize a DHTMLX Grid with the autoEmptyRow option set to true. This configuration automatically adds an empty row after the last filled row in the Grid.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_autoemptyrow_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst grid = new dhx.Grid(\"grid_container\", {\n    columns: [\n        // columns config\n    ],\n    autoEmptyRow:true,\n    data: dataset\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Grid with Custom Export Style Paths\nDESCRIPTION: Example demonstrating how to configure a DHTMLX Grid with specific CSS stylesheets for export by providing an array of absolute URLs to the desired style files.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_exportstyles_config.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst grid = new dhx.Grid(\"grid_container\", {\n    columns: [\n        // columns config\n    ],\n    exportStyles: [\n        \"https://mySite.com/exportStyle.css\",\n        \"https://mySite.com/secondExportStyle.css\"\n    ],\n    data: dataset\n});\n```\n\n----------------------------------------\n\nTITLE: Applying Built-in DHTMLX CSS Classes\nDESCRIPTION: Example demonstrating how to use DHTMLX's built-in CSS classes to style a Window component using the dhx_window--bordered class.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/window/api/window_css_config.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst dhxWindow = new dhx.Window({\n    title: \"Window\", \n    css:\"dhx_window--bordered\"\n}); \n\ndhxWindow.show();\n```\n\n----------------------------------------\n\nTITLE: Handling afterShow Event for Button Control in DHTMLX Form\nDESCRIPTION: This code snippet demonstrates how to attach an event handler to the afterShow event of a Button control in a DHTMLX Form. The event fires after the Button is shown and provides the current text label of the control.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/button/button_aftershow_event.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nform.getItem(\"button\").events.on(\"afterShow\", function(text) {\n    console.log(\"afterShow\", text);\n});\n```\n\n----------------------------------------\n\nTITLE: Handling afterShow Event for Checkbox Group in DHTMLX Form (JavaScript)\nDESCRIPTION: This snippet demonstrates how to attach an event listener to the afterShow event of a Checkbox Group control in a DHTMLX Form. The event fires after a control or its checkbox is shown, providing the current value of the control and optionally the ID of the affected checkbox.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/checkbox_group/checkboxgroup_aftershow_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"CheckboxGroup\").events.on(\"afterShow\", function(value, id) {\n    console.log(\"afterShow\", value, id);\n});\n```\n\n----------------------------------------\n\nTITLE: Modifying List Data\nDESCRIPTION: Demonstrating how to change item ID and remove items from the list.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/guides/datacollection_guide.md#2025-04-22_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\n//changing the id of the element\nlist.data.changeId(\"book001\", \"book001-newedition\");\n\n//deleting the element\nlist.data.remove(\"book001-newedition\");\n```\n\n----------------------------------------\n\nTITLE: Updating DataProxy URL and Parameters in JavaScript\nDESCRIPTION: This example demonstrates how to use the updateUrl() method of a DataProxy object to update the initial URL and parameters. It sets a new URL and adds custom parameters to the request.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/data_proxy/api/dataproxy_updateurl_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nproxy.updateUrl(\"https://newCustomUrl.com\", { a: \"customParam\", b: 2 });\n// url: https://newCustomUrl.com?a=customParam&b=2\n```\n\n----------------------------------------\n\nTITLE: Using getCurrentMode with Calendar Component\nDESCRIPTION: Example showing how to get the current mode of a calendar instance. The method returns a string representing the current display mode.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar2/api/calendar_getcurrentmode_method.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar mode = calendar.getCurrentMode(); // -> \"calendar\"\n```\n\n----------------------------------------\n\nTITLE: JSON Format Template for MenuItem Control\nDESCRIPTION: Template showing the structure and properties available for a menuItem control in DHTMLX Toolbar.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/toolbar/load_data.md#2025-04-22_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\n// menuItem\n{\n    type: \"menuItem\", \n    value: \"Some\",\n    icon: \"dxi dxi-check\",\n    count: 10\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Date Format\nDESCRIPTION: Sets a custom date format for the calendar using the dateFormat property. This example uses the format day.month.year.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar2/configuring.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar calendar = new dhx.Calendar(\"calendar_container\", {\n   dateFormat:\"%d.%m.%Y\"\n});\n```\n\n----------------------------------------\n\nTITLE: Loading Toolbar Data from External JSON File\nDESCRIPTION: Shows how to load toolbar data from an external JSON file using the load method and handle the asynchronous loading with a promise.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/toolbar/load_data.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\ntoolbar.data.load(\"[path to this file]/file.json\");\n```\n\nLANGUAGE: jsx\nCODE:\n```\ntoolbar.data.load(\"/some/data\").then(function(){\n   // some logic here\n});\n```\n\n----------------------------------------\n\nTITLE: RadioButton Properties Configuration\nDESCRIPTION: Configuration object for individual radio buttons within a RadioGroup control.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/form_getproperties_method.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    css: string,\n    height: string | number | \"content\",\n    padding: string | number,\n    text: string,\n    width: string | number | \"content\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing beforeLazyLoad Event Handler in DHTMLX DataCollection\nDESCRIPTION: Example of attaching an event handler to the beforeLazyLoad event of a DataCollection component. The handler can prevent server requests by returning false.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/data_collection/api/datacollection_beforelazyload_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncomponent.data.events.on(\"beforeLazyLoad\", function () {\n    // your code here\n    return false;\n});\n```\n\n----------------------------------------\n\nTITLE: Removing Focus from Slider Thumb with blur() Method in JavaScript\nDESCRIPTION: This example demonstrates how to use the blur() method to remove focus from a thumb of a DHTMLX Slider component. The method takes no parameters and returns void.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/slider/api/slider_blur_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nslider.blur();\n```\n\n----------------------------------------\n\nTITLE: Handling afterShow Event in DHTMLX Layout\nDESCRIPTION: This snippet demonstrates how to attach an event handler to the afterShow event of a Layout component. The event fires after a cell is shown and provides the id of the cell as a parameter.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/layout/api/layout_aftershow_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlayout.events.on(\"afterShow\", function(id){\n    // your logic here\n});\n```\n\n----------------------------------------\n\nTITLE: Destroying Colorpicker Form Control in JavaScript\nDESCRIPTION: Demonstrates how to properly destroy a Colorpicker instance in a DHTMLX Form. The method removes the Colorpicker control and releases all occupied resources.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/colorpicker/colorpicker_destructor_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"colorpicker\").destructor();\n```\n\n----------------------------------------\n\nTITLE: Including Calendar with DHTMLX Suite\nDESCRIPTION: HTML code showing how to include the necessary JavaScript and CSS files when using Calendar as part of the DHTMLX Suite package.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar/how_to_start.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<link type=\"text/css\" href=\"../codebase/suite.css\">\n<script src=\"../codebase/suite.js\" type=\"text/javascript\"></script>\n```\n\n----------------------------------------\n\nTITLE: Handling beforeShow Event for Spacer Control in DHTMLX Form\nDESCRIPTION: This snippet demonstrates how to attach an event handler to the beforeShow event of a Spacer control in a DHTMLX Form. The handler logs a message and returns true to allow the control to be shown.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/spacer/spacer_beforeshow_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"spacer\").events.on(\"beforeShow\", function() {\n    console.log(\"beforeShow\");\n    return true;\n});\n```\n\n----------------------------------------\n\nTITLE: Removing DataView Items\nDESCRIPTION: Removes items from DataView using their ID\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/dataview/manipulating_data.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ndataview.data.remove(\"id\");\n```\n\n----------------------------------------\n\nTITLE: Styling DHTMLX Window with Custom Theme Variables in HTML and JavaScript\nDESCRIPTION: Combines HTML and JavaScript to apply a CSS variable for primary window background to the DHTMLX Window component by assigning a custom CSS class. The <style> tag defines the variable, and the JavaScript creates the window instance with this CSS class assigned. Requires theme support in DHTMLX and custom class declaration. Inputs include window configuration options (height, width, title, etc.), and the effect is a themed window appearance.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/window/customization.md#2025-04-22_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<style>\\n    .custom {\\n        --dhx-background-primary: #efefef;\\n    }\\n</style>\\n\\n<script>\\n    const dhxWindow = new dhx.Window({\\n        height: 400,\\n        width: 400,\\n        title: \\\"window\\\",\\n        css: \\\"custom\\\",\\n        html,\\n    });\\n    \\n    dhxWindow.show();\\n</script>\n```\n\n----------------------------------------\n\nTITLE: Detaching Chart Event Listeners in JavaScript\nDESCRIPTION: Shows how to attach and then detach event listeners from a chart using the chart.events.detach() method.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/chart/events.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nchart.events.on(\"resize\", function({width:500, height:500}){\n    console.log(\"The size of the chart has changed\");\n});\n\nchart.events.detach(\"resize\");\n```\n\n----------------------------------------\n\nTITLE: Setting Initial Color Value\nDESCRIPTION: JavaScript code demonstrating how to set an initial color value for the Colorpicker after initialization.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/colorpicker/how_to_start.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst colorpicker = new dhx.Colorpicker(\"colorpicker_container\", {\n   // config options\n});\ncolorpicker.setValue(\"#BDF0E9\");\n```\n\n----------------------------------------\n\nTITLE: DataView DoubleClick Event Signature TypeScript Definition\nDESCRIPTION: TypeScript type definition for the doubleClick event handler, showing the expected parameter types for the callback function.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/dataview/api/dataview_doubleclick_event.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ndoubleClick: (id: string | number, events: Event) => void;\n```\n\n----------------------------------------\n\nTITLE: Cloning DHTMLX Suite Documentation Repository\nDESCRIPTION: Commands to clone the DHTMLX Suite documentation repository and navigate to the project directory.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone git@github.com:DHTMLX/docs-suite.git\n$ cd docs-suite\n```\n\n----------------------------------------\n\nTITLE: Declaring Gravity Property Type in Grid\nDESCRIPTION: TypeScript-style declaration showing the gravity property type for Grid columns.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/gridcolumn_properties/gridcolumn_gravity_property.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\ngravity?: number;\n```\n\n----------------------------------------\n\nTITLE: Starting Local Documentation Server\nDESCRIPTION: Command to start the documentation server locally for exploration and development.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn start\n```\n\n----------------------------------------\n\nTITLE: Basic TreeCollection Save Operation in JavaScript\nDESCRIPTION: Simple example of saving TreeCollection data to a server URL.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree_collection/api/treecollection_save_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntoolbar.data.save(\"http://userurl/\");\n```\n\n----------------------------------------\n\nTITLE: Local Data Loading in Ribbon\nDESCRIPTION: Shows how to load data from a local data source using data.parse() method\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/ribbon/features.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nzz5ijqy9\n```\n\n----------------------------------------\n\nTITLE: Basic TreeCollection Sorting in JavaScript\nDESCRIPTION: Demonstrates how to use the sort() method with basic configuration options including sorting by field, direction, and value transformation.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree_collection/api/treecollection_sort_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncomponent.data.sort(\n    {\n        by: \"price\",\n        dir: \"asc\",\n        as: value => (value || \"\") \n    },\n    { smartSorting: true }\n);\n\n// cancels the applied sorting rules\ncomponent.data.sort();\n```\n\n----------------------------------------\n\nTITLE: Including DHTMLX Suite Source Files in HTML\nDESCRIPTION: This code snippet shows how to include the necessary JavaScript and CSS files for DHTMLX Suite in the HTML file header.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/menu/how_to_start.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"text/javascript\" src=\"../../codebase/suite.js\"></script>\n<link rel=\"stylesheet\" href=\"../../codebase/suite.css\">\n```\n\n----------------------------------------\n\nTITLE: Checking Avatar Control Visibility in DHTMLX Form\nDESCRIPTION: Demonstrates how to check if an Avatar control is visible on the page using the isVisible() method. The method returns a boolean value indicating the visibility state of the control.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/avatar/avatar_isvisible_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"avatar\").isVisible(); \n// -> true/false\n```\n\n----------------------------------------\n\nTITLE: Configuring Collapsibility for Layout Cells\nDESCRIPTION: Shows how to make a Layout cell collapsible and set its initial collapsed state using collapsable and collapsed attributes.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/layout/cell_configuration.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst layout = new dhx.Layout(\"layout_container\", {\n    cols: [\n        { header: \"Cell header\", collapsable:true, collapsed:false}\n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: Spacer Properties Configuration\nDESCRIPTION: Configuration object for Spacer control defining basic spacing and styling properties.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/form_getproperties_method.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    css: string,\n    height: string | number | \"content\"\n    padding: string | number\n    width: string | number | \"content\"\n}\n```\n\n----------------------------------------\n\nTITLE: Serializing DataCollection to CSV in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the serialize() method of a DHTMLX component's data object to convert its data into CSV format. The method can also serialize to JSON or XML formats.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/data_collection/api/datacollection_serialize_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = component.data.serialize(\"csv\");\n```\n\n----------------------------------------\n\nTITLE: Creating Second List Container\nDESCRIPTION: HTML markup for creating a second List widget container.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/guides/datacollection_guide.md#2025-04-22_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"list2\" style=\"height: 700px; margin: 20px\"></div>\n```\n\n----------------------------------------\n\nTITLE: Defining disabledDates API Type\nDESCRIPTION: TypeScript/API definition for the disabledDates function that takes a Date parameter and returns a boolean.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar2/api/calendar_disableddates_config.md#2025-04-22_snippet_0\n\nLANGUAGE: todoapi\nCODE:\n```\nfunction disabledDates;\ndisabledDates?: (a: Date) => boolean;\n```\n\n----------------------------------------\n\nTITLE: Initializing Grid and Ungrouping Data in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a Grid component with grouping enabled, apply grouping to the data, and then ungroup the data using the ungroup() method. It shows the initialization of the Grid with columns and data, and the subsequent use of the ungroup() method.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/data_collection/api/datacollection_ungroup_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst grid = new dhx.Grid(\"grid_container\", {\n    columns: [\n        { id: \"salary\", header: [{ text: \"Salary\" }] },\n        { id: \"experience\", header: [{ text: \"Experience (years)\" }] },\n        { id: \"city\", header: [{ text: \"City\" }] }\n    ],\n    group: true,\n    groupable: true,\n    data: dataset\n});\n\n// grouping grid data\ngrid.data.group([\n    // grouping logic\n]);\n\n// ungrouping grid data\ngrid.data.ungroup();\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX Timepicker with String Time - JavaScript\nDESCRIPTION: This snippet creates a DHTMLX Timepicker and sets its 'value' config using a string in the format 'HH:MM'. The picker parses the string to determine the initial hour and minute shown. DHTMLX Suite must be included, and the 'timepicker_container' DOM element must be present. The string must be in a valid time format; invalid strings may not be correctly parsed.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/timepicker/api/timepicker_value_config.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// the value as a string\nconst timepicker = new dhx.Timepicker(\"timepicker_container\", {\n    value: \"22:30\"\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Avatar Properties in DHTMLX Form\nDESCRIPTION: Example of using setProperties method to modify the label width and position of an Avatar control.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/avatar/avatar_setproperties_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"avatar\").setProperties({\n    labelWidth: \"140px\", \n    labelPosition: \"top\"\n});\n```\n\n----------------------------------------\n\nTITLE: Handling afterHide Event for Slider Control in DHTMLX Form\nDESCRIPTION: Example of attaching an event handler to the afterHide event of a Slider control within a DHTMLX Form. This event fires after the control is hidden and provides the current value and initialization state.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/slider/slider_afterhide_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"slider\").events.on(\"afterHide\", function(value, init) {\n    console.log(\"afterHide\", value, init);\n});\n```\n\n----------------------------------------\n\nTITLE: Getting TwoState Button States in JavaScript Ribbon\nDESCRIPTION: Example of getting the current state of a twoState button in DHTMLX Ribbon using getState() method.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/ribbon/operating_ribbon.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{ type:\"button\", twoState:true, id:\"check\" }\n...\nribbon.getState();\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX Calendar with Custom Date Configuration\nDESCRIPTION: This example shows how to initialize a DHTMLX Calendar with both a value (selected date) and a date configuration that determines which month is initially displayed. The calendar will show January 2019 while having the current date selected.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar/api/calendar_date_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst calendar = new dhx.Calendar(\"calendar_container\", {\n    value: new Date(),\n    date: new Date(2019, 0, 1)\n});\n```\n\n----------------------------------------\n\nTITLE: Handling beforeHide Event in DHTMLX Form Container\nDESCRIPTION: This example demonstrates how to attach an event handler to the beforeHide event of a Container control in a DHTMLX Form. The handler logs the event and the initialization status, then returns true to allow the container to be hidden.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/container/container_beforehide_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"container\").events.on(\"beforeHide\", function(init) {\n    console.log(\"beforeHide\", init);\n    return true;\n});\n```\n\n----------------------------------------\n\nTITLE: Setting DataView Item Height in JavaScript\nDESCRIPTION: Demonstrates how to initialize a DataView component with custom item height settings. The height can be specified either as a number or as a string with CSS units.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/dataview/api/dataview_itemheight_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// sets the height of an item as a number\nconst dataview = new dhx.DataView(\"dataview_container\", { \n    itemHeight:30\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// sets the height of an item as a string value\nconst dataview = new dhx.DataView(\"dataview_container\", { \n    itemHeight:\"30px\"\n});\n```\n\n----------------------------------------\n\nTITLE: Controlling Tooltip Activity in JavaScript\nDESCRIPTION: Demonstrates how to disable and enable tooltips using the disableTooltip() and enableTooltip() methods.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/message/configuration.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ndhx.disableTooltip();\n\ndhx.enableTooltip();\n```\n\n----------------------------------------\n\nTITLE: Using setProperties() Method with DHTMLX Form Combo Box Control\nDESCRIPTION: This example demonstrates how to change the label and labelPosition properties of a Combo Box control in a DHTMLX Form. The method allows for dynamic modification of control attributes after initialization.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/combo/combo_setproperties_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nform.getItem(\"combo\").setProperties({\n    label: \"New label\",\n    labelPosition: \"top\"\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Grid Column Draggable Property Type\nDESCRIPTION: TypeScript/JSX type definition showing the draggable property configuration for Grid columns.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/gridcolumn_properties/gridcolumn_draggable_property.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\ndraggable?: boolean;\n```\n\n----------------------------------------\n\nTITLE: MenuItem Template for DHTMLX Sidebar\nDESCRIPTION: Template for creating a menuItem control in the sidebar with value and icon properties. This is used for standard menu items in the navigation.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/sidebar/data_loading.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// menuItem\n{\n    type: \"menuItem\", \n    value: \"Some\",\n    icon: \"dxi dxi-menu-right\"\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Simple Vault afterHide Event in JavaScript\nDESCRIPTION: Example showing how to attach an event handler to the afterHide event of a Simple Vault control. The handler receives the current value of the control and an initialization flag as parameters.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/simplevault/simplevault_afterhide_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"simplevault\").events.on(\"afterHide\", function(value, init) {\n    console.log(\"afterHide\", value, init);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring progressDefault in DHTMLX Layout (JavaScript)\nDESCRIPTION: This snippet demonstrates how to initialize a DHTMLX Layout with the progressDefault option enabled for two rows. This setting shows a progress bar in cells while content is loading.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/layout/api/cell/layout_cell_progressdefault_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst layout = new dhx.Layout(\"layout_container\", {\n    type: \"line\",\n    rows: [\n        {\n            id: \"one\",\n            header: \"Header\",\n            height: \"250px\",\n            resizable: true,\n            progressDefault: true\n        },\n        {\n            id: \"two\",\n            height: \"250px\",\n            progressDefault: true\n        },\n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: Clearing Slider Value in DHTMLX Form (JavaScript)\nDESCRIPTION: This snippet demonstrates how to use the clear() method to reset the value of a Slider control in a DHTMLX Form. It targets a specific Slider item by its ID and clears its current value.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/slider/slider_clear_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"slider\").clear();\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX Timepicker with String Value Format in JavaScript\nDESCRIPTION: This code snippet demonstrates initializing a DHTMLX Timepicker component within a container element identified by \"timepicker_container\". It sets the initial value to \"06:00\", uses a 24-hour time format (`timeFormat: 24`), and configures `valueFormat` to \"string\". This means that time values handled by events will be represented as strings (e.g., \"HH:mm\"). Requires the DHTMLX library (`dhx`).\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/timepicker/api/timepicker_valueformat_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst timepicker = new dhx.Timepicker(\"timepicker_container\", {\n    value: \"06:00\",\n    timeFormat: 24,\n    valueFormat: \"string\"\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Grid Date Format Configuration\nDESCRIPTION: Example showing how to configure a date column in DHTMLX Grid with custom date formatting. The dateFormat property is set to display dates in Month Day Year format.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/gridcolumn_properties/gridcolumn_dateformat_property.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst grid = new dhx.Grid(\"grid_container\", {\n    columns: [\n        { id: \"date\", header: [{ text: \"Date\" }], type: \"date\", dateFormat: \"%M %d %Y\" },\n        // more columns configuration objects\n    ],\n    // more options\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Current Calendar Mode in DHTMLX\nDESCRIPTION: This example demonstrates how to retrieve the current mode of the calendar using the getCurrentMode() method in DHTMLX. It returns one of the available modes: month, year, calendar, or timepicker.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar2/functionality_and_features/calendar_modes.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<iframe src=\"https://snippet.dhtmlx.com/fadykqoc?mode=result\" frameborder=\"0\" class=\"snippet_iframe\" width=\"100%\" height=\"550\"></iframe>\n```\n\n----------------------------------------\n\nTITLE: Styling Selected Dates and Date Ranges\nDESCRIPTION: Shows how to customize the appearance of selected dates and date ranges by overriding system CSS styles.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar/customization.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<style>\n    /* system style for selected dates */\n    .dhx_calendar-day--selected::before {\n        background-color: #ff5252;\n    }\n\n    /* system style for a date range */\n    .dhx_calendar-day--in-range:after {\n        background-color: #ffe7e7;\n     }\n</style>\n\n<script>\n    const calendar1 = new dhx.Calendar(\"calendar1\", {css: \"dhx_widget--bordered\"});\n    const calendar2 = new dhx.Calendar(\"calendar2\", {css: \"dhx_widget--bordered\"});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Initializing Pie/Pie3D/Donut Chart in DHTMLX\nDESCRIPTION: Configuration for creating Pie, Pie3D or Donut charts using DHTMLX Chart component. Includes series configuration for values, colors and text labels, with optional legend settings.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/chart/configuration_properties.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n    type: \"pie\", // or type: \"pie3D\", or type: \"donut\"\n    series: [\n        {\n            value: \"value\",\n            color: \"color\",\n            text: \"month\",\n            stroke: \"#FFFFFF\",\n            strokeWidth: 2\n        }\n    ],\n    legend: {\n        values: {\n            text: \"id\",\n            color: \"color\"\n        },\n        halign: \"right\",\n        valign: \"top\"\n    }\n};\n\nconst chart = new dhx.Chart(\"chart_container\", config);\nchart.data.parse(pie_dataset);\n```\n\n----------------------------------------\n\nTITLE: Separator Template for DHTMLX Sidebar\nDESCRIPTION: Template for creating a separator control in the sidebar with id and type properties. Separators are used to visually divide groups of sidebar items.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/sidebar/data_loading.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// separator\n{\n    id: \"sepId\",        \n    type: \"separator\"         \n}\n```\n\n----------------------------------------\n\nTITLE: Creating an HTML Button Linking to DHTMLX Community Forum\nDESCRIPTION: This HTML snippet defines a button using the 'support_btn' class. It contains an anchor tag linking to the DHTMLX community forum, specifically the section dedicated to Suite 7, allowing users to seek help or ask questions.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tabbar/features.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<button class=\"support_btn\"><a href=\"https://forum.dhtmlx.com/c/suite/suite7/\">Ask the community >>></a> </button>\n```\n\n----------------------------------------\n\nTITLE: Adding a Spacer to Toolbar in JavaScript\nDESCRIPTION: Creates a new Spacer control in the toolbar using the add() method of Tree Collection. Spacer is used to align toolbar controls by taking up space.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/toolbar/spacer.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntoolbar.data.add({\n    type:\"spacer\"\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Focus on Color in JavaScript ColorPicker\nDESCRIPTION: Demonstrates the use of the setFocus() method to set focus on a specific color in the ColorPicker palette. The color is specified using its Hex code.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/colorpicker/manipulating_colorpicker.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ncolorpicker.setFocus(\"#BDF0E9\");\n```\n\n----------------------------------------\n\nTITLE: Showing and Hiding NavItem in JavaScript Sidebar\nDESCRIPTION: Demonstrates how to show and hide a NavItem using the show() and hide() methods of the Sidebar. These methods require the ID of the NavItem to be passed as an argument.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/sidebar/navitem.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nsidebar.show(id);\nsidebar.hide(id);\n```\n\n----------------------------------------\n\nTITLE: Adding Click Event Handler to Specific Element in Layout Cell using JavaScript\nDESCRIPTION: This example shows how to add a click event handler to a specific element inside a Layout cell using a CSS selector. The 'on' config is used with a nested object structure to target the '.my-element' class. When the element with this class is clicked, it will trigger an alert with the message 'my-element'.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/layout/api/cell/layout_cell_on_config.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst layout = new dhx.Layout(\"layout_container\", {\n    height: \"100%\", \n    rows: [\n        { \n            html:\"<div class='my-element' style='height:100%;width:100%'></div>\", \n            on: {\n                click: {\n                    \".my-element\": (event) => alert(\"my-element\")\n                }\n            }\n        },\n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: Removing Spans in DHTMLX Grid\nDESCRIPTION: Use the removeSpan() method to remove an existing span. It takes the ids of the row and column as parameters.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/usage.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\ngrid.removeSpan(\"10\", \"a\");\n```\n\n----------------------------------------\n\nTITLE: Setting Borders for Layout Cells\nDESCRIPTION: Demonstrates how to add borders or space between Layout cells using the type configuration property.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/layout/cell_configuration.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst layout = new dhx.Layout(\"layout_container\", {\n    type: \"space\",\n    cols: [\n        {\n            html: \"1\"\n        },\n        {\n            html: \"2\"\n        },\n        {\n            html: \"3\"\n        }\n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Sidebar Control Configuration in JavaScript\nDESCRIPTION: Demonstrates how to update the configuration of a sidebar control using the update() method of the Tree Collection API in DHTMLX.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/sidebar/work_with_sidebar.md#2025-04-22_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nsidebar.data.update(\"add\", { \n    icon: \"icon_name\" \n});\n```\n\n----------------------------------------\n\nTITLE: Adding a Separator to a Toolbar in JavaScript\nDESCRIPTION: Creates a new Separator control in a DHTMLX Toolbar using the add() method of Tree Collection. This adds a simple visual separator between toolbar items or groups.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/toolbar/separator.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntoolbar.data.add({\n    type:\"separator\"\n});\n```\n\n----------------------------------------\n\nTITLE: Show/Hide Title Control in DHTMLX Ribbon\nDESCRIPTION: Shows how to toggle the visibility of a Title control using show() and hide() methods. These methods require the id of the Title control as a parameter.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/ribbon/title.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nribbon.show(id);\nribbon.hide(id);\n```\n\n----------------------------------------\n\nTITLE: Setting Focus on Toggle Group Option in DHTMLX Form (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to use the focus() method to set focus on a specific option of a Toggle Group control in a DHTMLX Form. It takes an optional id parameter to target a specific option.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/togglegroup/togglegroup_focus_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nform.getItem(\"ToggleGroup\").focus(\"toggle_1\");\n```\n\n----------------------------------------\n\nTITLE: Disabling Grid Tooltips in JavaScript\nDESCRIPTION: This snippet demonstrates how to disable all tooltips for a DHTMLX Grid component by setting the 'tooltip' config to false.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/api/grid_tooltip_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst grid = new dhx.Grid(\"grid_container\", {\n    columns: [\n        // columns config\n    ],\n    data: dataset,\n    tooltip: false\n});\n```\n\n----------------------------------------\n\nTITLE: Attaching Grid to Layout Cell\nDESCRIPTION: Demonstrates how to attach the initialized grid to a specific cell in the layout.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tutorial/basic_application/step4.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlayout.cell(\"grid-cell\").attach(grid);\n```\n\n----------------------------------------\n\nTITLE: Creating List Container in HTML - HTML\nDESCRIPTION: This snippet provides the HTML markup for creating a container element for the DHTMLX List component. The div is given an ID (e.g., \\\"list_container\\\") which is used as a reference in JavaScript to mount the List. No dependencies are required beyond standard HTML. The output is an empty DOM node, ready for List initialization.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/list/initialization.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div id=\\\"list_container\\\"></div>\n```\n\n----------------------------------------\n\nTITLE: Clearing a Combo Box Value in DHTMLX Form\nDESCRIPTION: This example demonstrates how to clear the value of a Combo Box control identified by the ID 'combo' in a DHTMLX form. The clear() method removes any currently selected value from the control.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/combo/combo_clear_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"combo\").clear();\n```\n\n----------------------------------------\n\nTITLE: Applying Phone Number Mask in DHTMLX Form Input (JSX)\nDESCRIPTION: Demonstrates how to apply a pattern mask for phone number input in a DHTMLX form. The mask format includes numbers, symbols, and spaces.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/work_with_form.md#2025-04-22_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n{\n    type: \"input\",\n    patternMask: \"+0 (000) 000-0000\",\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Calendar in Container\nDESCRIPTION: JavaScript code showing how to initialize a Calendar within a container using the dhx.Calendar constructor with configuration options.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/calendar/how_to_start.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// creating Calendar\nconst calendar = new dhx.Calendar(\"calendar_container\", {\n    css: \"dhx_widget--bordered\",\n   // more config options\n});\n```\n\n----------------------------------------\n\nTITLE: Showing/Hiding a DHTMLX Ribbon Button (JavaScript)\nDESCRIPTION: Demonstrates how to control the visibility of a DHTMLX Ribbon Button using the `ribbon.show()` and `ribbon.hide()` methods. These methods require the unique ID of the button control as an argument.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/ribbon/button.md#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nribbon.show(id);\nribbon.hide(id);\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX Timepicker with Date value - JavaScript\nDESCRIPTION: This snippet initializes a DHTMLX Timepicker component and sets its initial value using a JavaScript Date object. The Timepicker reads the supplied Date to determine the initial displayed time. Requires the DHTMLX Suite library, and the specified container element 'timepicker_container' must exist in the DOM. The 'value' property expects a valid Date instance and outputs the corresponding time in the picker.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/timepicker/api/timepicker_value_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// the value as a Date object \nconst timepicker = new dhx.Timepicker(\"timepicker_container\", {\n    value: new Date()\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Heat Map Data Structure in JavaScript\nDESCRIPTION: Defines the basic data structure for heat map visualization with sample entries containing id, value, and date properties.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/chart/configuration_properties.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst heatMapData = [\n    { id: \"100\", value: 50, date: new Date(2022, 2, 2) },\n    { id: \"101\", value: 100, date: new Date(2022, 4, 1) },\n    { id: \"200\", value: 32, date: new Date(2022, 6, 1) },\n    { id: \"202\", value: 35, date: new Date(2022, 7, 21) },\n    { id: \"400\", value: -14, date: new Date(2022, 9, 15) },\n    { id: \"500\", value: 9, date: new Date(2022, 9, 20) },\n    { id: \"501\", value: 100, date: new Date(2023, 3, 1) },\n    { id: \"502\", value: 40, date: new Date(2023, 4, 11) },\n    { id: \"503\", value: 23, date: new Date(2023, 5, 6) },\n];\n```\n\n----------------------------------------\n\nTITLE: Handling beforeChange Event in DHTMLX Form Combo Box (JavaScript)\nDESCRIPTION: This example demonstrates how to attach an event handler to the beforeChange event of a Combo Box control in a DHTMLX form. The handler logs the IDs of newly selected options and returns true to allow the value change.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/combo/combo_beforechange_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"combo\").events.on(\"beforeChange\", function(ids) {\n    console.log(\"beforeChange\", ids);\n    return true;\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Dynamic Grouping Order with a Function in dhtmlx Grid (JSX)\nDESCRIPTION: Configures a dhtmlx Grid to use a dynamic grouping criterion defined by a callback function within the `group.order` array. The function takes a row object and returns a string ('Large Population' or 'Small Population') based on the row's 'population' value, which determines the group the row belongs to. Requires the dhtmlx Grid library and a dataset.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/usage.md#2025-04-22_snippet_31\n\nLANGUAGE: jsx\nCODE:\n```\nconst grid = new dhx.Grid(\"grid_container\", {\n    columns: [\n        { id: \"country\", header: [{ text: \"Country\" }] },\n        { id: \"city\", header: [{ text: \"City\" }]},\n        { id: \"population\", header: [{ text: \"Population\" }] }\n    ],\n    group: {\n        order: [\n            (row) => row.population > 1000000\n                ? \"Large Population\"\n                : \"Small Population\"\n        ]\n    },\n    groupable: true,\n    data: dataset\n});\n```\n\n----------------------------------------\n\nTITLE: Checking Grouped State in DHTMLX Grid - JavaScript/JSX\nDESCRIPTION: Checks if grid data is currently grouped by calling isGrouped() on DataCollection. Outputs a message to the console if data is grouped. Requires a DHTMLX Grid instance and is typically used within conditional logic to determine subsequent actions based on grouping.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/grid/usage.md#2025-04-22_snippet_43\n\nLANGUAGE: JSX\nCODE:\n```\nif (grid.data.isGrouped()) {\\n    console.log(\\\"The data is currently grouped\\\");\\n}\n```\n\n----------------------------------------\n\nTITLE: Available Properties for Timepicker setProperties Method\nDESCRIPTION: Lists all the configuration attributes that can be modified using the setProperties method for the Timepicker control in DHTMLX Form. These properties control various aspects of the Timepicker's behavior and appearance.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/timepicker/timepicker_setproperties_method.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    controls: boolean,\n    css: string,\n    editable: boolean,\n    errorMessage: string,\n    height: string|number|\"content\",\n    helpMessage: string,\n    hiddenLabel: boolean,\n    icon: string,\n    label: string,\n    labelPosition: string,\n    labelWidth: string|number,\n    padding: string|number,\n    placeholder: string,\n    preMessage: string,\n    required: boolean,\n    successMessage: string,\n    timeFormat: number,\n    validation: function,\n    valueFormat: string,\n    width: string|number|\"content\"\n}\n```\n\n----------------------------------------\n\nTITLE: Handling TreeCollection beforeRemove Event in JavaScript\nDESCRIPTION: Example showing how to attach an event handler to the beforeRemove event of a TreeCollection. The handler logs a message and returns true to allow the item removal to proceed.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree_collection/api/treecollection_beforeremove_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncomponent.data.events.on(\"beforeRemove\", function(removedItem){\n    console.log(\"An item will be removed\");\n    return true;\n});\n```\n\n----------------------------------------\n\nTITLE: Parsing JSON Data into DHTMLX ContextMenu in JavaScript\nDESCRIPTION: Loads a predefined JSON dataset into the DHTMLX ContextMenu instance using the 'parse' method. This step is required to display the menu items defined previously. The method expects a well-formed JavaScript array of objects, as shown in the previous snippet. Outputs a populated context menu.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tutorial/binding_components/step4.md#2025-04-22_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\ncontextMenu.data.parse(contextmenu_data);\n```\n\n----------------------------------------\n\nTITLE: Defining Menu Spacer Properties in JavaScript\nDESCRIPTION: This code snippet demonstrates how to define a spacer item in a DHTMLX Menu. The spacer is used to create empty space between menu items. It requires a 'type' property set to 'spacer' and can optionally include an 'id'.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/menu/api/api_spacer_properties.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = [\n    {\n        type: \"spacer\",\n        id?: string | number,\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Checking Toggle Group Selection States in JavaScript Form\nDESCRIPTION: Demonstrates how to check the selection state of toggles in a ToggleGroup control. The method can check either a specific toggle by ID or return states of all toggles in the group.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/togglegroup/togglegroup_isselected_method.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"ToggleGroup\").isSelected(\"toggle_1\"); \n// -> true/false\n```\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"ToggleGroup\").isSelected(); \n// -> { \"toggle_1\": true, \"toggle_2\": false }\n```\n\n----------------------------------------\n\nTITLE: Getting Single Control Properties Example\nDESCRIPTION: Demonstrates retrieving properties for a specific named control.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/form_getproperties_method.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nform.getProperties(\"name\");\n\n// -> {\n//     autocomplete: false,\n//     css: \"\",\n//     errorMessage: \"\",\n//     height: \"content\",\n//     helpMessage: \"\",\n//     hiddenLabel: false,\n//     icon: \"dxi dxi-magnify\",\n//     inputType: \"text\",\n//     label: \"Name\",\n//     labelPosition: \"top\",\n//     labelWidth: \"\",\n//     max: undefined,\n//     maxlength: undefined,\n//     min: undefined,\n//     minlength: undefined,\n//     padding: 0,\n//     placeholder: \"John Doe\",\n//     preMessage: \"\",\n//     readOnly: false,\n//     required: false,\n//     successMessage: \"\",\n//     validation: undefined,\n//     width: \"content\"\n// }\n```\n\n----------------------------------------\n\nTITLE: Handling uploadFile Event in DHTMLX SimpleVault Control\nDESCRIPTION: Example of attaching an event listener to the uploadFile event of a SimpleVault control. This event fires when a file has been uploaded and provides the file object, current control value, and server response.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/simplevault/simplevault_uploadfile_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"simpleVault\").events.on(\"uploadFile\", function(file, value, extra) {\n    console.log(\"uploadFile\", file, value, extra);\n});\n```\n\n----------------------------------------\n\nTITLE: Setting the Page Size - DHTMLX Pagination API - JavaScript\nDESCRIPTION: Defines the number of items to display per page by invoking setPageSize() with the desired count. This method requires an initialized pagination object and an integer parameter indicating the page size.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/pagination/usage.md#2025-04-22_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\npagination.setPageSize(24);\n```\n\n----------------------------------------\n\nTITLE: Applying Built-in DHTMLX CSS Classes\nDESCRIPTION: Example demonstrating how to use DHTMLX's built-in CSS classes to style the Colorpicker widget with a white background.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/colorpicker/api/colorpicker_css_config.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst colorpicker = new dhx.Colorpicker(\"colorpicker_container\", {\n    css: \"dhx_widget--bg_white\"\n});\n```\n\n----------------------------------------\n\nTITLE: Handling 'inputFocus' Event in DHTMLX Ribbon (JavaScript)\nDESCRIPTION: Demonstrates how to attach an event listener to the `inputFocus` event of a DHTMLX Ribbon instance (`ribbon`). When a control within the ribbon receives focus, the provided callback function is executed, logging the `id` of the newly focused control to the browser's console. This requires an initialized `ribbon` object from the DHTMLX Suite library.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/ribbon/api/ribbon_inputfocus_event.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nribbon.events.on(\"inputFocus\", function(id){\n    console.log(id);\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Toggle Group Change Event in DHTMLX Form (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to attach an event listener to the 'change' event of a Toggle Group control in a DHTMLX Form. The event fires when the value of the control changes and provides the current value as an object parameter.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/togglegroup/togglegroup_change_event.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nform.getItem(\"ToggleGroup\").events.on(\"change\", function(value) {\n    console.log(\"change\", value);\n});\n```\n\n----------------------------------------\n\nTITLE: Using Template Property for Icons in List Component (JavaScript)\nDESCRIPTION: Shows how to use the 'template' configuration property to add icons to items in a DHTMLX List component.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/helpers/icon.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst list = new dhx.List(\"list_container\", {\n    css: \"dhx_widget--bordered\",  \n    template: (item) => \"<i class = 'dxi dxi-icon-' + item.icon></i>\"\n}); \n```\n\n----------------------------------------\n\nTITLE: Retrieving Root ID in DHTMLX TreeCollection\nDESCRIPTION: This code snippet demonstrates how to use the getRoot() method of the TreeCollection to retrieve the ID of the master component in a DHTMLX toolbar.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/tree_collection/api/treecollection_getroot_method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ntoolbar.data.getRoot();\n```\n\n----------------------------------------\n\nTITLE: Handling Toggle Properties Change Event in JavaScript\nDESCRIPTION: Example showing how to attach an event handler to the beforeChangeProperties event of a Toggle control. The handler logs the properties being changed and returns true to allow the change.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/toggle/toggle_beforechangeproperties_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"toggle\").events.on(\"beforeChangeProperties\", function(properties) {\n    console.log(\"beforeChangeProperties\", properties);\n    return true;\n});\n```\n\n----------------------------------------\n\nTITLE: Handling afterChangeProperties Event for Avatar in DHTMLX Form\nDESCRIPTION: This snippet demonstrates how to attach an event handler to the afterChangeProperties event of an Avatar control in a DHTMLX Form. The event fires after the control's configuration attributes have been changed dynamically.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/avatar/avatar_afterchangeproperties_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"avatar\").events.on(\"afterChangeProperties\", properties => {\n    console.log(\"afterChangeProperties\", properties);\n});\n```\n\n----------------------------------------\n\nTITLE: Message Box Implementation Changes (JavaScript)\nDESCRIPTION: Shows the evolution of dhx.message() constructor return value between v7.x and v8.0\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/migration.md#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst message = dhx.message({\n    text: \"Message text\", \n    icon: \"dxi-clock\", \n    css: \"expire\", \n    expire: 1000\n});\n\nconsole.log(message); // -> undefined\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst message = dhx.message({\n    text: \"Message text\", \n    icon: \"dxi-clock\", \n    css: \"expire\", \n    expire: 1000\n});\n\nconsole.log(message); // -> {close: function}\n```\n\n----------------------------------------\n\nTITLE: Handling Focus Change Events in DHTMLX DataView\nDESCRIPTION: Example showing how to attach an event handler for the focusChange event in a DataView component. The event provides the focus index and item ID as parameters.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/dataview/api/dataview_focuschange_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndataview.events.on(\"focusChange\", function(focusIndex, id){\n    // your code here\n});\n```\n\n----------------------------------------\n\nTITLE: Adding HTML Content to NavItem\nDESCRIPTION: Shows how to add custom HTML content to a NavItem using the html property.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/ribbon/navitem.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    type: \"navItem\",\n    html: \"<div id='preloader'><div id='loader'></div></div>\",\n}\n```\n\n----------------------------------------\n\nTITLE: Attaching an Event Handler to afterChangeProperties Event in DHTMLX Form Select Control\nDESCRIPTION: This snippet demonstrates how to attach an event handler to the afterChangeProperties event of a Select control in a DHTMLX Form. The event fires after configuration attributes of the control have been changed dynamically and provides an object with updated properties.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/form/api/select/select_afterchangeproperties_event.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nform.getItem(\"select\").events.on(\"afterChangeProperties\", function(properties) {\n    console.log(\"afterChangeProperties\", properties);\n});\n```\n\n----------------------------------------\n\nTITLE: Checking Selected State of Sidebar Item in JavaScript\nDESCRIPTION: Shows how to check if a specific sidebar item is selected using the isSelected() method of the DHTMLX Sidebar API.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/sidebar/work_with_sidebar.md#2025-04-22_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nsidebar.isSelected(\"categoryPost\"); // -> returns true/false\n```\n\n----------------------------------------\n\nTITLE: Initializing DHTMLX Colorpicker with Mode Configuration\nDESCRIPTION: Shows how to initialize a DHTMLX Colorpicker component with a specific display mode. The mode can be either 'palette' or 'picker', with 'palette' being the default value. Additional styling is applied using the css property.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/colorpicker/api/colorpicker_mode_config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst colorpicker = new dhx.Colorpicker(\"colorpicker_container\", {\n    mode: \"palette\",\n    css: \"dhx_widget--bordered\"\n});\n```\n\n----------------------------------------\n\nTITLE: Sorting List Data Using Data Collection API in JavaScript\nDESCRIPTION: Shows how to sort List data using the sort() method of Data Collection. The example sorts items by their 'value' attribute in descending order.\nSOURCE: https://github.com/dhtmlx/docs-suite/blob/master/docs/list/work_with_list.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nlist.data.sort({ \n    by:\"value\",\n    dir:\"desc\"\n});\n```"
  }
]