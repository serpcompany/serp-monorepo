[
  {
    "owner": "rs",
    "repo": "zerolog",
    "content": "TITLE: Simple Logging Example with Zerolog in Go\nDESCRIPTION: Basic example demonstrating how to use zerolog for simple logging. It imports the global logger package and sets the time format to UNIX timestamp for improved performance.\nSOURCE: https://github.com/rs/zerolog/blob/master/README.md#2025-04-11_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"github.com/rs/zerolog\"\n    \"github.com/rs/zerolog/log\"\n)\n\nfunc main() {\n    // UNIX Time is faster and smaller than most timestamps\n    zerolog.TimeFieldFormat = zerolog.TimeFormatUnix\n\n    log.Print(\"hello world\")\n}\n\n// Output: {\"time\":1516134303,\"level\":\"debug\",\"message\":\"hello world\"}\n```\n\n----------------------------------------\n\nTITLE: Setting Global Log Level in Zerolog\nDESCRIPTION: Example showing how to set and use global log levels in zerolog. It uses command-line flags to conditionally set debug or info level and demonstrates conditional logging with level checking.\nSOURCE: https://github.com/rs/zerolog/blob/master/README.md#2025-04-11_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"flag\"\n\n    \"github.com/rs/zerolog\"\n    \"github.com/rs/zerolog/log\"\n)\n\nfunc main() {\n    zerolog.TimeFieldFormat = zerolog.TimeFormatUnix\n    debug := flag.Bool(\"debug\", false, \"sets log level to debug\")\n\n    flag.Parse()\n\n    // Default level for this example is info, unless debug flag is present\n    zerolog.SetGlobalLevel(zerolog.InfoLevel)\n    if *debug {\n        zerolog.SetGlobalLevel(zerolog.DebugLevel)\n    }\n\n    log.Debug().Msg(\"This message appears only when log level set to Debug\")\n    log.Info().Msg(\"This message appears when log level set to Debug or Info\")\n\n    if e := log.Debug(); e.Enabled() {\n        // Compute log output only if enabled.\n        value := \"bar\"\n        e.Str(\"foo\", value).Msg(\"some debug message\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Contextual Logging with Zerolog in Go\nDESCRIPTION: Example showing how to add contextual key-value pairs to log messages using zerolog's chaining API. This demonstrates adding string and numeric values to provide additional context in logs.\nSOURCE: https://github.com/rs/zerolog/blob/master/README.md#2025-04-11_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"github.com/rs/zerolog\"\n    \"github.com/rs/zerolog/log\"\n)\n\nfunc main() {\n    zerolog.TimeFieldFormat = zerolog.TimeFormatUnix\n\n    log.Debug().\n        Str(\"Scale\", \"833 cents\").\n        Float64(\"Interval\", 833.09).\n        Msg(\"Fibonacci is everywhere\")\n    \n    log.Debug().\n        Str(\"Name\", \"Tom\").\n        Send()\n}\n\n// Output: {\"level\":\"debug\",\"Scale\":\"833 cents\",\"Interval\":833.09,\"time\":1562212768,\"message\":\"Fibonacci is everywhere\"}\n// Output: {\"level\":\"debug\",\"Name\":\"Tom\",\"time\":1562212768}\n```\n\n----------------------------------------\n\nTITLE: Simple Leveled Logging with Zerolog in Go\nDESCRIPTION: Basic example of leveled logging with zerolog using the Info level. Zerolog supports various logging levels including panic, fatal, error, warn, info, debug, and trace.\nSOURCE: https://github.com/rs/zerolog/blob/master/README.md#2025-04-11_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"github.com/rs/zerolog\"\n    \"github.com/rs/zerolog/log\"\n)\n\nfunc main() {\n    zerolog.TimeFieldFormat = zerolog.TimeFormatUnix\n\n    log.Info().Msg(\"hello world\")\n}\n\n// Output: {\"time\":1516134303,\"level\":\"info\",\"message\":\"hello world\"}\n```\n\n----------------------------------------\n\nTITLE: Logging Fatal Messages with Zerolog in Go\nDESCRIPTION: Example showing how to log fatal error messages that will terminate the program. This combines error handling with string formatting and additional context fields.\nSOURCE: https://github.com/rs/zerolog/blob/master/README.md#2025-04-11_snippet_8\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"errors\"\n\n    \"github.com/rs/zerolog\"\n    \"github.com/rs/zerolog/log\"\n)\n\nfunc main() {\n    err := errors.New(\"A repo man spends his life getting into tense situations\")\n    service := \"myservice\"\n\n    zerolog.TimeFieldFormat = zerolog.TimeFormatUnix\n\n    log.Fatal().\n        Err(err).\n        Str(\"service\", service).\n        Msgf(\"Cannot start %s\", service)\n}\n\n// Output: {\"time\":1516133263,\"level\":\"fatal\",\"error\":\"A repo man spends his life getting into tense situations\",\"service\":\"myservice\",\"message\":\"Cannot start myservice\"}\n//         exit status 1\n```\n\n----------------------------------------\n\nTITLE: Error Logging with Zerolog in Go\nDESCRIPTION: Example showing how to log errors with zerolog using the Err method. This is a simple way to include error objects in structured log output.\nSOURCE: https://github.com/rs/zerolog/blob/master/README.md#2025-04-11_snippet_6\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"errors\"\n\n\t\"github.com/rs/zerolog\"\n\t\"github.com/rs/zerolog/log\"\n)\n\nfunc main() {\n\tzerolog.TimeFieldFormat = zerolog.TimeFormatUnix\n\n\terr := errors.New(\"seems we have an error here\")\n\tlog.Error().Err(err).Msg(\"\")\n}\n\n// Output: {\"level\":\"error\",\"error\":\"seems we have an error here\",\"time\":1609085256}\n```\n\n----------------------------------------\n\nTITLE: Error Logging with Stacktrace in Zerolog\nDESCRIPTION: Example demonstrating how to log errors with formatted stacktraces using github.com/pkg/errors integration. This shows nested function calls with error propagation and stacktrace output.\nSOURCE: https://github.com/rs/zerolog/blob/master/README.md#2025-04-11_snippet_7\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"github.com/pkg/errors\"\n\t\"github.com/rs/zerolog/pkgerrors\"\n\n\t\"github.com/rs/zerolog\"\n\t\"github.com/rs/zerolog/log\"\n)\n\nfunc main() {\n\tzerolog.TimeFieldFormat = zerolog.TimeFormatUnix\n\tzerolog.ErrorStackMarshaler = pkgerrors.MarshalStack\n\n\terr := outer()\n\tlog.Error().Stack().Err(err).Msg(\"\")\n}\n\nfunc inner() error {\n\treturn errors.New(\"seems we have an error here\")\n}\n\nfunc middle() error {\n\terr := inner()\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn nil\n}\n\nfunc outer() error {\n\terr := middle()\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn nil\n}\n\n// Output: {\"level\":\"error\",\"stack\":[{\"func\":\"inner\",\"line\":\"20\",\"source\":\"errors.go\"},{\"func\":\"middle\",\"line\":\"24\",\"source\":\"errors.go\"},{\"func\":\"outer\",\"line\":\"32\",\"source\":\"errors.go\"},{\"func\":\"main\",\"line\":\"15\",\"source\":\"errors.go\"},{\"func\":\"main\",\"line\":\"204\",\"source\":\"proc.go\"},{\"func\":\"goexit\",\"line\":\"1374\",\"source\":\"asm_amd64.s\"}],\"error\":\"seems we have an error here\",\"time\":1609086683}\n```\n\n----------------------------------------\n\nTITLE: Configuring Pretty Console Logging with Zerolog in Go\nDESCRIPTION: Demonstrates how to use zerolog.ConsoleWriter to output logs in a human-friendly, colorized format directed to stderr.\nSOURCE: https://github.com/rs/zerolog/blob/master/README.md#2025-04-11_snippet_11\n\nLANGUAGE: go\nCODE:\n```\nlog.Logger = log.Output(zerolog.ConsoleWriter{Out: os.Stderr})\n\nlog.Info().Str(\"foo\", \"bar\").Msg(\"Hello world\")\n\n// Output: 3:04PM INF Hello World foo=bar\n```\n\n----------------------------------------\n\nTITLE: Creating Structured Log Entries with Sub-dictionaries in Zerolog\nDESCRIPTION: Shows how to create structured log entries with nested dictionaries using zerolog.Dict() in Go.\nSOURCE: https://github.com/rs/zerolog/blob/master/README.md#2025-04-11_snippet_14\n\nLANGUAGE: go\nCODE:\n```\nlog.Info().\n    Str(\"foo\", \"bar\").\n    Dict(\"dict\", zerolog.Dict().\n        Str(\"bar\", \"baz\").\n        Int(\"n\", 1),\n    ).Msg(\"hello world\")\n\n// Output: {\"level\":\"info\",\"time\":1494567715,\"foo\":\"bar\",\"dict\":{\"bar\":\"baz\",\"n\":1},\"message\":\"hello world\"}\n```\n\n----------------------------------------\n\nTITLE: Creating Sub-loggers with Additional Context in Zerolog\nDESCRIPTION: Example demonstrating how to create sub-loggers with additional contextual information. This technique allows for adding component or module information to all logs from a specific part of the application.\nSOURCE: https://github.com/rs/zerolog/blob/master/README.md#2025-04-11_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nsublogger := log.With().\n                 Str(\"component\", \"foo\").\n                 Logger()\nsublogger.Info().Msg(\"hello world\")\n\n// Output: {\"level\":\"info\",\"time\":1494567715,\"message\":\"hello world\",\"component\":\"foo\"}\n```\n\n----------------------------------------\n\nTITLE: Context.Context Integration with Zerolog\nDESCRIPTION: Shows how to integrate zerolog with Go's context.Context for passing loggers through a call chain.\nSOURCE: https://github.com/rs/zerolog/blob/master/README.md#2025-04-11_snippet_25\n\nLANGUAGE: go\nCODE:\n```\nfunc f() {\n    logger := zerolog.New(os.Stdout)\n    ctx := context.Background()\n\n    // Attach the Logger to the context.Context\n    ctx = logger.WithContext(ctx)\n    someFunc(ctx)\n}\n\nfunc someFunc(ctx context.Context) {\n    // Get Logger from the go Context. if it's nil, then\n    // `zerolog.DefaultContextLogger` is returned, if\n    // `DefaultContextLogger` is nil, then a disabled logger is returned.\n    logger := zerolog.Ctx(ctx)\n    logger.Info().Msg(\"Hello\")\n}\n```\n\n----------------------------------------\n\nTITLE: Passing a Logger through Context in Zerolog\nDESCRIPTION: Shows how to pass a zerolog logger through Go's context.Context and retrieve it in other functions.\nSOURCE: https://github.com/rs/zerolog/blob/master/README.md#2025-04-11_snippet_23\n\nLANGUAGE: go\nCODE:\n```\nctx := log.With().Str(\"component\", \"module\").Logger().WithContext(ctx)\n\nlog.Ctx(ctx).Info().Msg(\"hello world\")\n\n// Output: {\"component\":\"module\",\"level\":\"info\",\"message\":\"hello world\"}\n```\n\n----------------------------------------\n\nTITLE: Using Context in Log Events with Zerolog\nDESCRIPTION: Demonstrates how to pass the current context into log events and retrieve it from hooks to add contextual information like trace IDs.\nSOURCE: https://github.com/rs/zerolog/blob/master/README.md#2025-04-11_snippet_26\n\nLANGUAGE: go\nCODE:\n```\ntype TracingHook struct{}\n\nfunc (h TracingHook) Run(e *zerolog.Event, level zerolog.Level, msg string) {\n    ctx := e.GetCtx()\n    spanId := getSpanIdFromContext(ctx) // as per your tracing framework\n    e.Str(\"span-id\", spanId)\n}\n\nfunc f() {\n    // Setup the logger\n    logger := zerolog.New(os.Stdout)\n    logger = logger.Hook(TracingHook{})\n\n    ctx := context.Background()\n    // Use the Ctx function to make the context available to the hook\n    logger.Info().Ctx(ctx).Msg(\"Hello\")\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Hooks to Zerolog Logger\nDESCRIPTION: Demonstrates how to implement and add a custom hook to a zerolog logger to modify log events before they're written.\nSOURCE: https://github.com/rs/zerolog/blob/master/README.md#2025-04-11_snippet_22\n\nLANGUAGE: go\nCODE:\n```\ntype SeverityHook struct{}\n\nfunc (h SeverityHook) Run(e *zerolog.Event, level zerolog.Level, msg string) {\n    if level != zerolog.NoLevel {\n        e.Str(\"severity\", level.String())\n    }\n}\n\nhooked := log.Hook(SeverityHook{})\nhooked.Warn().Msg(\"\")\n\n// Output: {\"level\":\"warn\",\"severity\":\"warn\"}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Logger Instance in Zerolog\nDESCRIPTION: Example showing how to create a custom logger instance with zerolog. This allows managing different outputs and configurations for specific logging needs.\nSOURCE: https://github.com/rs/zerolog/blob/master/README.md#2025-04-11_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nlogger := zerolog.New(os.Stderr).With().Timestamp().Logger()\n\nlogger.Info().Str(\"foo\", \"bar\").Msg(\"hello world\")\n\n// Output: {\"level\":\"info\",\"time\":1494567715,\"message\":\"hello world\",\"foo\":\"bar\"}\n```\n\n----------------------------------------\n\nTITLE: Adding Global Context Fields to Zerolog Logger\nDESCRIPTION: Shows how to add contextual fields to the global logger that will be included in all log entries.\nSOURCE: https://github.com/rs/zerolog/blob/master/README.md#2025-04-11_snippet_16\n\nLANGUAGE: go\nCODE:\n```\nlog.Logger = log.With().Str(\"foo\", \"bar\").Logger()\n```\n\n----------------------------------------\n\nTITLE: Customizing Console Logging Format with Zerolog in Go\nDESCRIPTION: Shows how to customize the console writer's configuration including time format and custom formatters for levels, messages, and field names/values.\nSOURCE: https://github.com/rs/zerolog/blob/master/README.md#2025-04-11_snippet_12\n\nLANGUAGE: go\nCODE:\n```\noutput := zerolog.ConsoleWriter{Out: os.Stdout, TimeFormat: time.RFC3339}\noutput.FormatLevel = func(i interface{}) string {\n    return strings.ToUpper(fmt.Sprintf(\"| %-6s|\", i))\n}\noutput.FormatMessage = func(i interface{}) string {\n    return fmt.Sprintf(\"***%s****\", i)\n}\noutput.FormatFieldName = func(i interface{}) string {\n    return fmt.Sprintf(\"%s:\", i)\n}\noutput.FormatFieldValue = func(i interface{}) string {\n    return strings.ToUpper(fmt.Sprintf(\"%s\", i))\n}\n\nlog := zerolog.New(output).With().Timestamp().Logger()\n\nlog.Info().Str(\"foo\", \"bar\").Msg(\"Hello World\")\n\n// Output: 2006-01-02T15:04:05Z07:00 | INFO  | ***Hello World**** foo:BAR\n```\n\n----------------------------------------\n\nTITLE: Advanced Custom Formatting with Zerolog Console Writer in Go\nDESCRIPTION: Demonstrates advanced custom formatting with zerolog.ConsoleWriter including custom parts order, fields exclusion, and part-specific value formatting.\nSOURCE: https://github.com/rs/zerolog/blob/master/README.md#2025-04-11_snippet_13\n\nLANGUAGE: go\nCODE:\n```\noutput := zerolog.ConsoleWriter{Out: os.Stdout, NoColor: true,\n    PartsOrder:    []string{\"level\", \"one\", \"two\", \"three\", \"message\"},\n    FieldsExclude: []string{\"one\", \"two\", \"three\"}}\noutput.FormatLevel = func(i interface{}) string { return strings.ToUpper(fmt.Sprintf(\"%-6s\", i)) }\noutput.FormatFieldName = func(i interface{}) string { return fmt.Sprintf(\"%s:\", i) }\noutput.FormatPartValueByName = func(i interface{}, s string) string {\n    var ret string\n    switch s {\n    case \"one\":\n        ret = strings.ToUpper(fmt.Sprintf(\"%s\", i))\n    case \"two\":\n        ret = strings.ToLower(fmt.Sprintf(\"%s\", i))\n    case \"three\":\n        ret = strings.ToLower(fmt.Sprintf(\"(%s)\", i))\n    }\n    return ret\n}\nlog := zerolog.New(output)\n\nlog.Info().Str(\"foo\", \"bar\").\n    Str(\"two\", \"TEST_TWO\").\n    Str(\"one\", \"test_one\").\n    Str(\"three\", \"test_three\").\n    Msg(\"Hello World\")\n    \n// Output: INFO   TEST_ONE test_two (test_three) Hello World foo:bar\n```\n\n----------------------------------------\n\nTITLE: Customizing Automatic Field Names in Zerolog\nDESCRIPTION: Demonstrates how to customize the default field names used by zerolog for timestamp, level, and message.\nSOURCE: https://github.com/rs/zerolog/blob/master/README.md#2025-04-11_snippet_15\n\nLANGUAGE: go\nCODE:\n```\nzerolog.TimestampFieldName = \"t\"\nzerolog.LevelFieldName = \"l\"\nzerolog.MessageFieldName = \"m\"\n\nlog.Info().Msg(\"hello world\")\n\n// Output: {\"l\":\"info\",\"t\":1494567715,\"m\":\"hello world\"}\n```\n\n----------------------------------------\n\nTITLE: Adding File and Line Information to Logs with Zerolog (Long Format)\nDESCRIPTION: Demonstrates how to add file and line number information to logs in full path format (Llongfile equivalent).\nSOURCE: https://github.com/rs/zerolog/blob/master/README.md#2025-04-11_snippet_17\n\nLANGUAGE: go\nCODE:\n```\nlog.Logger = log.With().Caller().Logger()\nlog.Info().Msg(\"hello world\")\n\n// Output: {\"level\": \"info\", \"message\": \"hello world\", \"caller\": \"/go/src/your_project/some_file:21\"}\n```\n\n----------------------------------------\n\nTITLE: Adding File and Line Information to Logs with Zerolog (Short Format)\nDESCRIPTION: Shows how to customize the caller information to show only the filename and line number (Lshortfile equivalent).\nSOURCE: https://github.com/rs/zerolog/blob/master/README.md#2025-04-11_snippet_18\n\nLANGUAGE: go\nCODE:\n```\nzerolog.CallerMarshalFunc = func(pc uintptr, file string, line int) string {\n    return filepath.Base(file) + \":\" + strconv.Itoa(line)\n}\nlog.Logger = log.With().Caller().Logger()\nlog.Info().Msg(\"hello world\")\n\n// Output: {\"level\": \"info\", \"message\": \"hello world\", \"caller\": \"some_file:21\"}\n```\n\n----------------------------------------\n\nTITLE: HTTP Handler Integration with Zerolog\nDESCRIPTION: Shows how to integrate zerolog with HTTP handlers using the hlog package and alice for middleware chaining.\nSOURCE: https://github.com/rs/zerolog/blob/master/README.md#2025-04-11_snippet_27\n\nLANGUAGE: go\nCODE:\n```\nlog := zerolog.New(os.Stdout).With().\n    Timestamp().\n    Str(\"role\", \"my-service\").\n    Str(\"host\", host).\n    Logger()\n\nc := alice.New()\n\n// Install the logger handler with default output on the console\nc = c.Append(hlog.NewHandler(log))\n\n// Install some provided extra handler to set some request's context fields.\n// Thanks to that handler, all our logs will come with some prepopulated fields.\nc = c.Append(hlog.AccessHandler(func(r *http.Request, status, size int, duration time.Duration) {\n    hlog.FromRequest(r).Info().\n        Str(\"method\", r.Method).\n        Stringer(\"url\", r.URL).\n        Int(\"status\", status).\n        Int(\"size\", size).\n        Dur(\"duration\", duration).\n        Msg(\"\")\n}))\nc = c.Append(hlog.RemoteAddrHandler(\"ip\"))\nc = c.Append(hlog.UserAgentHandler(\"user_agent\"))\nc = c.Append(hlog.RefererHandler(\"referer\"))\nc = c.Append(hlog.RequestIDHandler(\"req_id\", \"Request-Id\"))\n\n// Here is your final handler\nh := c.Then(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n    // Get the logger from the request's context. You can safely assume it\n    // will be always there: if the handler is removed, hlog.FromRequest\n    // will return a no-op logger.\n    hlog.FromRequest(r).Info().\n        Str(\"user\", \"current user\").\n        Str(\"status\", \"ok\").\n        Msg(\"Something happened\")\n\n    // Output: {\"level\":\"info\",\"time\":\"2001-02-03T04:05:06Z\",\"role\":\"my-service\",\"host\":\"local-hostname\",\"req_id\":\"b4g0l5t6tfid6dtrapu0\",\"user\":\"current user\",\"status\":\"ok\",\"message\":\"Something happened\"}\n}))\nhttp.Handle(\"/\", h)\n\nif err := http.ListenAndServe(\":8080\", nil); err != nil {\n    log.Fatal().Err(err).Msg(\"Startup failed\")\n}\n```\n\n----------------------------------------\n\nTITLE: ZeroLog Concurrency Safety Example\nDESCRIPTION: Example showing the proper way to handle concurrency in HTTP handlers by creating child loggers\nSOURCE: https://github.com/rs/zerolog/blob/master/README.md#2025-04-11_snippet_31\n\nLANGUAGE: go\nCODE:\n```\nfunc handler(w http.ResponseWriter, r *http.Request) {\n    // Create a child logger for concurrency safety\n    logger := log.Logger.With().Logger()\n\n    // Add context fields, for example User-Agent from HTTP headers\n    logger.UpdateContext(func(c zerolog.Context) zerolog.Context {\n        ...\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Using Thread-safe Non-blocking Writer with Zerolog\nDESCRIPTION: Shows how to use diode.Writer to create a thread-safe, lock-free, non-blocking writer for zerolog that won't slow down log producers.\nSOURCE: https://github.com/rs/zerolog/blob/master/README.md#2025-04-11_snippet_19\n\nLANGUAGE: go\nCODE:\n```\nwr := diode.NewWriter(os.Stdout, 1000, 10*time.Millisecond, func(missed int) {\n\t\tfmt.Printf(\"Logger Dropped %d messages\", missed)\n\t})\nlog := zerolog.New(wr)\nlog.Print(\"test\")\n```\n\n----------------------------------------\n\nTITLE: Multiple Log Output with Zerolog\nDESCRIPTION: Demonstrates how to send log messages to multiple outputs simultaneously using zerolog.MultiLevelWriter.\nSOURCE: https://github.com/rs/zerolog/blob/master/README.md#2025-04-11_snippet_28\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n\tconsoleWriter := zerolog.ConsoleWriter{Out: os.Stdout}\n\n\tmulti := zerolog.MultiLevelWriter(consoleWriter, os.Stdout)\n\n\tlogger := zerolog.New(multi).With().Timestamp().Logger()\n\n\tlogger.Info().Msg(\"Hello World!\")\n}\n\n// Output (Line 1: Console; Line 2: Stdout)\n// 12:36PM INF Hello World!\n// {\"level\":\"info\",\"time\":\"2019-11-07T12:36:38+03:00\",\"message\":\"Hello World!\"}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Log Sampling with Zerolog\nDESCRIPTION: Demonstrates how to implement basic log sampling to log only every Nth message using zerolog.BasicSampler.\nSOURCE: https://github.com/rs/zerolog/blob/master/README.md#2025-04-11_snippet_20\n\nLANGUAGE: go\nCODE:\n```\nsampled := log.Sample(&zerolog.BasicSampler{N: 10})\nsampled.Info().Msg(\"will be logged every 10 messages\")\n\n// Output: {\"time\":1494567715,\"level\":\"info\",\"message\":\"will be logged every 10 messages\"}\n```\n\n----------------------------------------\n\nTITLE: Implementing Advanced Log Sampling with Zerolog\nDESCRIPTION: Shows how to implement advanced log sampling based on log levels using zerolog.LevelSampler and zerolog.BurstSampler.\nSOURCE: https://github.com/rs/zerolog/blob/master/README.md#2025-04-11_snippet_21\n\nLANGUAGE: go\nCODE:\n```\n// Will let 5 debug messages per period of 1 second.\n// Over 5 debug message, 1 every 100 debug messages are logged.\n// Other levels are not sampled.\nsampled := log.Sample(zerolog.LevelSampler{\n    DebugSampler: &zerolog.BurstSampler{\n        Burst: 5,\n        Period: 1*time.Second,\n        NextSampler: &zerolog.BasicSampler{N: 100},\n    },\n})\nsampled.Debug().Msg(\"hello world\")\n\n// Output: {\"time\":1494567715,\"level\":\"debug\",\"message\":\"hello world\"}\n```\n\n----------------------------------------\n\nTITLE: Using Zerolog as Standard Logger Output\nDESCRIPTION: Demonstrates how to use a zerolog logger as the output for Go's standard library logger.\nSOURCE: https://github.com/rs/zerolog/blob/master/README.md#2025-04-11_snippet_24\n\nLANGUAGE: go\nCODE:\n```\nlog := zerolog.New(os.Stdout).With().\n    Str(\"foo\", \"bar\").\n    Logger()\n\nstdlog.SetFlags(0)\nstdlog.SetOutput(log)\n\nstdlog.Print(\"hello world\")\n\n// Output: {\"foo\":\"bar\",\"message\":\"hello world\"}\n```\n\n----------------------------------------\n\nTITLE: Logging without Level or Message in Zerolog\nDESCRIPTION: Example demonstrating how to log without a specific level using the Log method and without a message by providing an empty string. This creates a simple JSON output with timestamp and custom fields.\nSOURCE: https://github.com/rs/zerolog/blob/master/README.md#2025-04-11_snippet_5\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"github.com/rs/zerolog\"\n    \"github.com/rs/zerolog/log\"\n)\n\nfunc main() {\n    zerolog.TimeFieldFormat = zerolog.TimeFormatUnix\n\n    log.Log().\n        Str(\"foo\", \"bar\").\n        Msg(\"\")\n}\n\n// Output: {\"time\":1494567715,\"foo\":\"bar\"}\n```\n\n----------------------------------------\n\nTITLE: ZeroLog Field Duplication Example\nDESCRIPTION: Example showing how zerolog handles duplicate field keys in log output, demonstrating that no de-duplication occurs\nSOURCE: https://github.com/rs/zerolog/blob/master/README.md#2025-04-11_snippet_30\n\nLANGUAGE: go\nCODE:\n```\nlogger := zerolog.New(os.Stderr).With().Timestamp().Logger()\nlogger.Info().\n       Timestamp().\n       Msg(\"dup\")\n// Output: {\"level\":\"info\",\"time\":1494567715,\"time\":1494567715,\"message\":\"dup\"}\n```\n\n----------------------------------------\n\nTITLE: Installing Zerolog Package in Go\nDESCRIPTION: Command to install the zerolog logger package using go get. This installs the global logger package for easy use in Go applications.\nSOURCE: https://github.com/rs/zerolog/blob/master/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get -u github.com/rs/zerolog/log\n```\n\n----------------------------------------\n\nTITLE: Building ZeroLog with Binary Encoding\nDESCRIPTION: Command to build zerolog with CBOR binary encoding support using the binary_log build tag\nSOURCE: https://github.com/rs/zerolog/blob/master/README.md#2025-04-11_snippet_29\n\nLANGUAGE: bash\nCODE:\n```\ngo build -tags binary_log .\n```\n\n----------------------------------------\n\nTITLE: Benchmark Results for JSON vs CBOR Encoding in zerolog\nDESCRIPTION: Benchmark comparison showing CPU usage differences between JSON and CBOR encoding across various logging operations. Most operations show significant performance improvements with CBOR, with time reductions ranging from 7% to over 90% depending on the operation.\nSOURCE: https://github.com/rs/zerolog/blob/master/internal/cbor/README.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nname                                    JSON time/op    CBOR time/op   delta\nInfo-32                                   15.3ns ± 1%    11.7ns ± 3%  -23.78%  (p=0.000 n=9+10)      \nContextFields-32                          16.2ns ± 2%    12.3ns ± 3%  -23.97%  (p=0.000 n=9+9)       \nContextAppend-32                          6.70ns ± 0%    6.20ns ± 0%   -7.44%  (p=0.000 n=9+9)       \nLogFields-32                              66.4ns ± 0%    24.6ns ± 2%  -62.89%  (p=0.000 n=10+9)      \nLogArrayObject-32                          911ns ±11%     768ns ± 6%  -15.64%  (p=0.000 n=10+10)     \nLogFieldType/Floats-32                    70.3ns ± 2%    29.5ns ± 1%  -57.98%  (p=0.000 n=10+10)     \nLogFieldType/Err-32                       14.0ns ± 3%    12.1ns ± 8%  -13.20%  (p=0.000 n=8+10)      \nLogFieldType/Dur-32                       17.2ns ± 2%    13.1ns ± 1%  -24.27%  (p=0.000 n=10+9)      \nLogFieldType/Object-32                    54.3ns ±11%    52.3ns ± 7%     ~     (p=0.239 n=10+10)     \nLogFieldType/Ints-32                      20.3ns ± 2%    15.1ns ± 2%  -25.50%  (p=0.000 n=9+10)      \nLogFieldType/Interfaces-32                 642ns ±11%     621ns ± 9%     ~     (p=0.118 n=10+10)     \nLogFieldType/Interface(Objects)-32         635ns ±13%     632ns ± 9%     ~     (p=0.592 n=10+10)     \nLogFieldType/Times-32                      294ns ± 0%      27ns ± 1%  -90.71%  (p=0.000 n=10+9)      \nLogFieldType/Durs-32                       121ns ± 0%      33ns ± 2%  -72.44%  (p=0.000 n=9+9)       \nLogFieldType/Interface(Object)-32         56.6ns ± 8%    52.3ns ± 8%   -7.54%  (p=0.007 n=10+10)     \nLogFieldType/Errs-32                      17.8ns ± 3%    16.1ns ± 2%   -9.71%  (p=0.000 n=10+9)      \nLogFieldType/Time-32                      40.5ns ± 1%    12.7ns ± 6%  -68.66%  (p=0.000 n=8+9)       \nLogFieldType/Bool-32                      12.0ns ± 5%    10.2ns ± 2%  -15.18%  (p=0.000 n=10+8)      \nLogFieldType/Bools-32                     17.2ns ± 2%    12.6ns ± 4%  -26.63%  (p=0.000 n=10+10)     \nLogFieldType/Int-32                       12.3ns ± 2%    11.2ns ± 4%   -9.27%  (p=0.000 n=9+10)      \nLogFieldType/Float-32                     16.7ns ± 1%    12.6ns ± 2%  -24.42%  (p=0.000 n=7+9)       \nLogFieldType/Str-32                       12.7ns ± 7%    11.3ns ± 7%  -10.88%  (p=0.000 n=10+9)      \nLogFieldType/Strs-32                      20.3ns ± 3%    18.2ns ± 3%  -10.25%  (p=0.000 n=9+10)      \nLogFieldType/Interface-32                  183ns ±12%     175ns ± 9%     ~     (p=0.078 n=10+10)     \n```\n\n----------------------------------------\n\nTITLE: Contributing Shell Commands for Zerolog\nDESCRIPTION: Shell commands for testing and formatting Go code before submitting a contribution\nSOURCE: https://github.com/rs/zerolog/blob/master/CONTRIBUTING.md#2025-04-11_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo test ./...\n```\n\nLANGUAGE: shell\nCODE:\n```\ngo fmt\n```\n\nLANGUAGE: shell\nCODE:\n```\ngo vet\n```\n\n----------------------------------------\n\nTITLE: Using the Zerolog Lint Command with Options\nDESCRIPTION: Example of the command syntax for running the Zerolog linter tool with its supported command-line flags. The tool accepts a package name as an argument and has options for specifying custom finishers and ignoring specific files or packages.\nSOURCE: https://github.com/rs/zerolog/blob/master/cmd/lint/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nlint [-finisher value] [-ignoreFile value] [-ignorePkg value] [-ignorePkgRecursively value] package\n```\n\n----------------------------------------\n\nTITLE: Running PrettyLog with Redirected stderr on Linux\nDESCRIPTION: Commands for redirecting stderr from a Zerolog-using program to the PrettyLog utility on Linux systems. Shows both compiled binary and direct go run approaches.\nSOURCE: https://github.com/rs/zerolog/blob/master/cmd/prettylog/README.md#2025-04-11_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsome_program_with_zerolog 2> >(prettylog)\n```\n\nLANGUAGE: shell\nCODE:\n```\nsome_program_with_zerolog 2> >(go run cmd/prettylog/prettylog.go)\n```\n\n----------------------------------------\n\nTITLE: Running PrettyLog with Redirected stderr on Windows\nDESCRIPTION: Commands for redirecting stderr to stdout and then piping to the PrettyLog utility on Windows systems. Shows both compiled binary and direct go run approaches.\nSOURCE: https://github.com/rs/zerolog/blob/master/cmd/prettylog/README.md#2025-04-11_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nsome_program_with_zerolog 2>&1 | prettylog\n```\n\nLANGUAGE: shell\nCODE:\n```\nsome_program_with_zerolog 2>&1 | go run cmd/prettylog/prettylog.go\n```"
  }
]