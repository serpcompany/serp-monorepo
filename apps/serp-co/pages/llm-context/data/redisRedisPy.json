[
  {
    "owner": "redis",
    "repo": "redis-py",
    "content": "TITLE: Connecting to Redis using URL\nDESCRIPTION: This snippet demonstrates how to connect to a Redis server using a URL. It imports the `redis` library, and uses the `from_url()` method, passing the Redis URL as an argument to create the `Redis` object. Then uses the `ping()` method to verify the connection.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/index.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport redis\nr = redis.from_url('redis://foo.bar.com:12345')\nr.ping()\n```\n\n----------------------------------------\n\nTITLE: Basic Redis Operations with redis-py\nDESCRIPTION: This code snippet demonstrates basic Redis operations using the redis-py library.  It connects to a Redis server on localhost, sets a key-value pair, and then retrieves the value.  The returned value is in bytes; to get a string, `decode_responses=True` should be set when creating the Redis client.\nSOURCE: https://github.com/redis/redis-py/blob/master/README.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> import redis\n>>> r = redis.Redis(host='localhost', port=6379, db=0)\n>>> r.set('foo', 'bar')\nTrue\n>>> r.get('foo')\nb'bar'\n```\n\n----------------------------------------\n\nTITLE: Configure Retry with Exponential Backoff - Redis Standalone - Python\nDESCRIPTION: This snippet demonstrates how to configure a Redis client to retry operations with an exponential backoff strategy. It initializes a Retry object with ExponentialBackoff and a maximum number of retries, then creates a Redis client instance with retry enabled for specific error types such as BusyLoadingError, ConnectionError, and TimeoutError. It also shows how to retry only on TimeoutError.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/retry.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> from redis.backoff import ExponentialBackoff\n>>> from redis.retry import Retry\n>>> from redis.client import Redis\n>>> from redis.exceptions import (\n>>>    BusyLoadingError,\n>>>    ConnectionError,\n>>>    TimeoutError\n>>> )\n>>>\n>>> # Run 3 retries with exponential backoff strategy\n>>> retry = Retry(ExponentialBackoff(), 3)\n>>> # Redis client with retries on custom errors\n>>> r = Redis(host='localhost', port=6379, retry=retry, retry_on_error=[BusyLoadingError, ConnectionError, TimeoutError])\n>>> # Redis client with retries on TimeoutError only\n>>> r_only_timeout = Redis(host='localhost', port=6379, retry=retry, retry_on_timeout=True)\n```\n\n----------------------------------------\n\nTITLE: Create a timeseries object with RedisTimeSeries in Python\nDESCRIPTION: This snippet demonstrates how to create a timeseries object with a 5-second retention period using the RedisTimeSeries module with redis-py. It initializes a Redis connection and creates a timeseries with key 2, setting the retention period to 5000 milliseconds (5 seconds).\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/redismodules.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport redis\nr = redis.Redis()\nr.ts().create(2, retention_msecs=5000)\n```\n\n----------------------------------------\n\nTITLE: Connecting with RESP3 using redis-py\nDESCRIPTION: This code snippet demonstrates how to establish a connection to a Redis server using the RESP3 protocol. It sets the protocol parameter to 3 to enable RESP3 and then pings the server to verify the connection.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/resp3_features.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> import redis\n>>> r = redis.Redis(host='localhost', port=6379, protocol=3)\n>>> r.ping()\n```\n\n----------------------------------------\n\nTITLE: Connecting with RESP3 Protocol in Python\nDESCRIPTION: Connects to a Redis instance using the RESP3 protocol by setting the `protocol` parameter to 3. The default protocol used by the redis-py library is RESP2. A `ping()` command verifies the connection.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/examples/connection_examples.ipynb#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport redis\n\nr = redis.Redis(protocol=3)\nr.ping()\n```\n\n----------------------------------------\n\nTITLE: Adding JSON Documents to Redis and Creating Index (redis-py)\nDESCRIPTION: This code snippet demonstrates how to add JSON documents to a Redis database using the `redis-py` library and then create an index to allow searching on the JSON data. It first connects to the Redis server. Then, it defines four JSON documents (users) and stores them in Redis using `r.json().set()`. After that, it defines the schema for the index, specifying the fields to be indexed and their types (TextField, TagField, NumericField). Finally, it creates the index using `r.ft().create_index()`, specifying the schema and an index definition, including a prefix and index type.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/examples/search_json_examples.ipynb#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport redis\nfrom redis.commands.json.path import Path\nimport redis.commands.search.aggregation as aggregations\nimport redis.commands.search.reducers as reducers\nfrom redis.commands.search.field import TextField, NumericField, TagField\nfrom redis.commands.search.indexDefinition import IndexDefinition, IndexType\nfrom redis.commands.search.query import NumericFilter, Query\n\n\nr = redis.Redis(host='localhost', port=6379)\nuser1 = {\n    \"user\":{\n        \"name\": \"Paul John\",\n        \"email\": \"paul.john@example.com\",\n        \"age\": 42,\n        \"city\": \"London\"\n    }\n}\nuser2 = {\n    \"user\":{\n        \"name\": \"Eden Zamir\",\n        \"email\": \"eden.zamir@example.com\",\n        \"age\": 29,\n        \"city\": \"Tel Aviv\"\n    }\n}\nuser3 = {\n    \"user\":{\n        \"name\": \"Paul Zamir\",\n        \"email\": \"paul.zamir@example.com\",\n        \"age\": 35,\n        \"city\": \"Tel Aviv\"\n    }\n}\n\nuser4 = {\n    \"user\":{\n        \"name\": \"Sarah Zamir\",\n        \"email\": \"sarah.zamir@example.com\",\n        \"age\": 30,\n        \"city\": \"Paris\"\n    }\n}\nr.json().set(\"user:1\", Path.root_path(), user1)\nr.json().set(\"user:2\", Path.root_path(), user2)\nr.json().set(\"user:3\", Path.root_path(), user3)\nr.json().set(\"user:4\", Path.root_path(), user4)\n\nschema = (TextField(\"$.user.name\", as_name=\"name\"),TagField(\"$.user.city\", as_name=\"city\"), NumericField(\"$.user.age\", as_name=\"age\"))\nr.ft().create_index(schema, definition=IndexDefinition(prefix=[\"user:\"], index_type=IndexType.JSON))\n```\n\n----------------------------------------\n\nTITLE: Redis Cluster Retry Example with Error Handling - Python\nDESCRIPTION: This example illustrates the retry behavior in Redis Cluster when encountering connection errors. It sets up a RedisCluster client with a Retry object and cluster_error_retry_attempts. The example demonstrates how the client retries connection attempts with exponential backoff and how cluster updates are triggered after a certain number of failed attempts, before finally raising an exception to the caller.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/retry.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> from redis.backoff import ExponentialBackoff\n>>> from redis.retry import Retry\n>>> from redis.cluster import RedisCluster\n>>>\n>>> rc = RedisCluster(host='localhost', port=6379, retry=Retry(ExponentialBackoff(), 6), cluster_error_retry_attempts=1)\n>>> rc.set('foo', 'bar')\n```\n\n----------------------------------------\n\nTITLE: Cluster Pipeline Example - Redis Python\nDESCRIPTION: This example shows how to use pipelines with Redis Cluster.  The pipeline buffers multiple commands, and when `execute()` is called, the commands are grouped by node and executed in parallel. This significantly improves throughput by reducing network round trips. Note: transaction=False option isn't supported in cluster mode.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/advanced_features.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> with rc.pipeline() as pipe:\n...     pipe.set('foo', 'value1')\n...     pipe.set('bar', 'value2')\n...     pipe.get('foo')\n...     pipe.get('bar')\n...     print(pipe.execute())\n[True, True, b'value1', b'value2']\n...     pipe.set('foo1', 'bar1').get('foo1').execute()\n[True, b'bar1']\n```\n\n----------------------------------------\n\nTITLE: Delete Samples Between Timestamps\nDESCRIPTION: This snippet demonstrates how to delete samples from a time series within a specified range of timestamps using the `ts.delete()` method. It first prints the range, then deletes the samples, and finally prints the range again to show the effect of the deletion.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/examples/timeseries_examples.ipynb#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nprint(\"Before deletion: \", ts.range(\"ts_key\", \"-\", \"+\"))\nts.delete(\"ts_key\", 1657265437756, 1657265437757)\nprint(\"After deletion:  \", ts.range(\"ts_key\", \"-\", \"+\"))\n```\n\n----------------------------------------\n\nTITLE: Using Scripts in Pipelines\nDESCRIPTION: This snippet shows how to use a registered Lua script within a redis-py pipeline. It sets a value for a key in the pipeline and then adds the script execution to the pipeline using the `client` parameter.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/lua_scripting.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> pipe = r.pipeline()\n>>> pipe.set('foo', 5)\n>>> multiply(keys=['foo'], args=[5], client=pipe)\n>>> pipe.execute()\n[True, 25]\n```\n\n----------------------------------------\n\nTITLE: Reading from Multiple Streams (xread)\nDESCRIPTION: This snippet reads data from multiple Redis streams simultaneously using the xread command. It specifies both stream_key and stream2_key in the streams parameter, starting from the beginning (ID 0) of each stream. The returned data structure is then processed to identify the stream and the corresponding message.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/examples/redis-stream-example.ipynb#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nl = r.xread( count=1, streams={stream_key:0,stream2_key:0} )\nfor k,d in l:\n    print(f\"got from {k} the entry {d}\")\n```\n\n----------------------------------------\n\nTITLE: Atomic Increment with WATCH - Redis Python\nDESCRIPTION: This code snippet implements an atomic increment operation using the `WATCH` command within a Redis pipeline. It watches a specified key for changes, retrieves its current value, increments it, and sets the new value, ensuring atomicity. If the key is modified by another client during the process, a `WatchError` is raised, and the operation is retried.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/advanced_features.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> with r.pipeline() as pipe:\n...     while True:\n...         try:\n...             # put a WATCH on the key that holds our sequence value\n...             pipe.watch('OUR-SEQUENCE-KEY')\n...             # after WATCHing, the pipeline is put into immediate execution\n...             # mode until we tell it to start buffering commands again.\n...             # this allows us to get the current value of our sequence\n...             current_value = pipe.get('OUR-SEQUENCE-KEY')\n...             next_value = int(current_value) + 1\n...             # now we can put the pipeline back into buffered mode with MULTI\n...             pipe.multi()\n...             pipe.set('OUR-SEQUENCE-KEY', next_value)\n...             # and finally, execute the pipeline (the set command)\n...             pipe.execute()\n...             # if a WatchError wasn't raised during execution, everything\n...             # we just did happened atomically.\n...             break\n...        except WatchError:\n...             # another client must have changed 'OUR-SEQUENCE-KEY' between\n...             # the time we started WATCHing it and the pipeline's execution.\n...             # our best bet is to just retry.\n...             continue\n```\n\n----------------------------------------\n\nTITLE: Connecting with ElastiCache IAM in Python\nDESCRIPTION: Connects to Redis using AWS ElastiCache IAM authentication. It uses a custom `ElastiCacheIAMProvider` to generate a presigned URL for authentication. Requires the `botocore` library.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/examples/connection_examples.ipynb#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Tuple, Union\nfrom urllib.parse import ParseResult, urlencode, urlunparse\n\nimport botocore.session\nimport redis\nfrom botocore.model import ServiceId\nfrom botocore.signers import RequestSigner\nfrom cachetools import TTLCache, cached\n\nclass ElastiCacheIAMProvider(redis.CredentialProvider):\n    def __init__(self, user, cluster_name, region=\"us-east-1\"):\n        self.user = user\n        self.cluster_name = cluster_name\n        self.region = region\n\n        session = botocore.session.get_session()\n        self.request_signer = RequestSigner(\n            ServiceId(\"elasticache\"),\n            self.region,\n            \"elasticache\",\n            \"v4\",\n            session.get_credentials(),\n            session.get_component(\"event_emitter\"),\n        )\n\n    # Generated IAM tokens are valid for 15 minutes\n    @cached(cache=TTLCache(maxsize=128, ttl=900))\n    def get_credentials(self) -> Union[Tuple[str], Tuple[str, str]]:\n        query_params = {\"Action\": \"connect\", \"User\": self.user}\n        url = urlunparse(\n            ParseResult(\n                scheme=\"https\",\n                netloc=self.cluster_name,\n                path=\"/\",\n                query=urlencode(query_params),\n                params=\"\",\n                fragment=\"\",\n            )\n        )\n        signed_url = self.request_signer.generate_presigned_url(\n            {\"method\": \"GET\", \"url\": url, \"body\": {}, \"headers\": {}, \"context\": {}},\n            operation_name=\"connect\",\n            expires_in=900,\n            region_name=self.region,\n        )\n        # RequestSigner only seems to work if the URL has a protocol, but\n        # Elasticache only accepts the URL without a protocol\n        # So strip it off the signed URL before returning\n        return (self.user, signed_url.removeprefix(\"https://\"))\n\nusername = \"barshaul\"\ncluster_name = \"test-001\"\nendpoint = \"test-001.use1.cache.amazonaws.com\"\ncreds_provider = ElastiCacheIAMProvider(user=username, cluster_name=cluster_name)\nuser_connection = redis.Redis(host=endpoint, port=6379, credential_provider=creds_provider)\nuser_connection.ping()\n```\n\n----------------------------------------\n\nTITLE: Connecting to Redis with OCSP Stapling - Python\nDESCRIPTION: Connects to Redis via SSL and attempts to validate OCSP-stapled certificates. It requires the 'redis[ocsp]' extra to be installed.  The example shows how to specify an expected certificate and a custom SSL context for OCSP.  It demonstrates a scenario where the server does not send an OCSP stapled response, leading to validation failure, which is then caught and asserted.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/examples/ssl_connection_examples.ipynb#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport redis\n\npki_dir = os.path.join(\"..\", \"..\", \"dockers\", \"stunnel\", \"keys\")\nca_cert = os.path.join(pki_dir, \"ca-cert.pem\")\n\n# It is possible to specify an expected certificate, or leave it out.\nexpected_certificate = open(ca_cert, 'rb').read()\n\n# If needed, a custom SSL context for OCSP can be specified via ssl_ocsp_context\n\nr = redis.Redis(\n    host=\"localhost\",\n    port=6666,\n    ssl=True,\n    ssl_certfile=os.path.join(pki_dir, \"client-cert.pem\"),\n    ssl_keyfile=os.path.join(pki_dir, \"client-key.pem\"),\n    ssl_cert_reqs=\"required\",\n    ssl_ca_certs=ca_cert,\n    ssl_validate_ocsp_stapled=True,\n    ssl_ocsp_expected_cert=expected_certificate,\n)\n\ntry:\n    r.ping()\nexcept redis.ConnectionError as e:\n    assert e.args[0] == \"no ocsp response present\"\n    print(\"OCSP validation failed as expected.\")\n```\n\n----------------------------------------\n\nTITLE: Connecting with URL Scheme and RESP3 in Python\nDESCRIPTION: Connects to Redis using a URL scheme, specifying the RESP3 protocol. It combines the URL scheme connection with the protocol version. The `redis.from_url()` function parses the URL.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/examples/connection_examples.ipynb#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nurl_connection = redis.from_url(\"redis://localhost:6379?decode_responses=True&health_check_interval=2&protocol=3\")\nurl_connection.ping()\n```\n\n----------------------------------------\n\nTITLE: Creating a Redis Vector Index\nDESCRIPTION: This code snippet creates a Redis vector index using the redis-py client. It defines the index schema with a tag field and a vector field, specifies the index type and distance metric, and creates the index using the `create_index` command. It also checks if the index already exists to prevent errors.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/examples/search_vector_similarity_examples.ipynb#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport redis\nfrom redis.commands.search.field import TagField, VectorField\nfrom redis.commands.search.indexDefinition import IndexDefinition, IndexType\nfrom redis.commands.search.query import Query\n\nr = redis.Redis(host=\"localhost\", port=6379)\n\nINDEX_NAME = \"index\"                              # Vector Index Name\nDOC_PREFIX = \"doc:\"                               # RediSearch Key Prefix for the Index\n\ndef create_index(vector_dimensions: int):\n    try:\n        # check to see if index exists\n        r.ft(INDEX_NAME).info()\n        print(\"Index already exists!\")\n    except:\n        # schema\n        schema = (\n            TagField(\"tag\"),                       # Tag Field Name\n            VectorField(\"vector\",                  # Vector Field Name\n                \"FLAT\", {                          # Vector Index Type: FLAT or HNSW\n                    \"TYPE\": \"FLOAT32\",             # FLOAT32 or FLOAT64\n                    \"DIM\": vector_dimensions,      # Number of Vector Dimensions\n                    \"DISTANCE_METRIC\": \"COSINE\",   # Vector Search Distance Metric\n                }\n            ),\n        )\n\n        # index Definition\n        definition = IndexDefinition(prefix=[DOC_PREFIX], index_type=IndexType.HASH)\n\n        # create Index\n        r.ft(INDEX_NAME).create_index(fields=schema, definition=definition)\n```\n\n----------------------------------------\n\nTITLE: Create a topk list and access the results with RedisBloom in Python\nDESCRIPTION: This snippet illustrates how to create a topk list and access its information using the RedisBloom module with redis-py.  It initializes a Redis connection, reserves a topk list named 'mytopk' with specified parameters, and then retrieves information about the topk list.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/redismodules.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport redis\nr = redis.Redis()\nr.topk().reserve(\"mytopk\", 3, 50, 4, 0.9)\nr.topk().info(\"mytopk\")\n```\n\n----------------------------------------\n\nTITLE: Redis Cluster Read-Only Configuration Python\nDESCRIPTION: This code snippet demonstrates how to initialize a Redis cluster connection with read-only access to replicas using the redis-py library. It sets the `read_from_replicas` parameter to `True` during initialization, which enables read commands to be directed to replica nodes. The `startup_nodes` parameter specifies the initial nodes used to discover the cluster topology.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/clustering.rst#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n>>> from cluster import RedisCluster as Redis\n# Use 'debug' log level to print the node that the command is executed on\n>>> rc_readonly = Redis(startup_nodes=startup_nodes,\n...                     read_from_replicas=True)\n>>> rc_readonly.set('{foo}1', 'bar1')\n>>> for i in range(0, 4):\n...     # Assigns read command to the slot's hosts in a Round-Robin manner\n...     rc_readonly.get('{foo}1')\n# set command would be directed only to the slot's primary node\n>>> rc_readonly.set('{foo}2', 'bar2')\n# reset READONLY flag\n>>> rc_readonly.readwrite(target_nodes='replicas')\n# now the get command would be directed only to the slot's primary node\n>>> rc_readonly.get('{foo}1')\n```\n\n----------------------------------------\n\nTITLE: Handling Published Messages with Callback Functions in Redis PubSub (redis-py)\nDESCRIPTION: This snippet illustrates how to register a callback function to handle published messages in redis-py's PubSub. The callback function receives the message dictionary as an argument and processes it.  The get_message() function returns None because the message has already been handled by the callback.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/advanced_features.rst#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n>>> def my_handler(message):\n...     print('MY HANDLER: ', message['data'])\n>>> p.subscribe(**{'my-channel': my_handler})\n# read the subscribe confirmation message\n>>> p.get_message()\n{'pattern': None, 'type': 'subscribe', 'channel': b'my-channel', 'data': 1}\n>>> r.publish('my-channel', 'awesome data')\n1\n# for the message handler to work, we need tell the instance to read data.\n# this can be done in several ways (read more below). we'll just use\n# the familiar get_message() function for now\n>>> message = p.get_message()\nMY HANDLER:  awesome data\n# note here that the my_handler callback printed the string above.\n# `message` is None because the message was handled by our handler.\n>>> print(message)\nNone\n```\n\n----------------------------------------\n\nTITLE: Connecting with AWS Secrets Manager in Python\nDESCRIPTION: Connects to Redis using credentials stored in AWS Secrets Manager.  It uses a custom `SecretsManagerProvider` to retrieve the username and password from a specified secret. Requires the `boto3` and `cachetools` libraries.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/examples/connection_examples.ipynb#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport redis\nimport boto3\nimport json\nimport cachetools.func\n\nclass SecretsManagerProvider(redis.CredentialProvider):\n    def __init__(self, secret_id, version_id=None, version_stage='AWSCURRENT'):\n        self.sm_client = boto3.client('secretsmanager')\n        self.secret_id = secret_id\n        self.version_id = version_id\n        self.version_stage = version_stage\n\n    def get_credentials(self) -> Union[Tuple[str], Tuple[str, str]]:\n        @cachetools.func.ttl_cache(maxsize=128, ttl=24 * 60 * 60) #24h\n        def get_sm_user_credentials(secret_id, version_id, version_stage):\n            secret = self.sm_client.get_secret_value(secret_id, version_id)\n            return json.loads(secret['SecretString'])\n        creds = get_sm_user_credentials(self.secret_id, self.version_id, self.version_stage)\n        return creds['username'], creds['password']\n\nmy_secret_id = \"EXAMPLE1-90ab-cdef-fedc-ba987SECRET1\"\ncreds_provider = SecretsManagerProvider(secret_id=my_secret_id)\nuser_connection = redis.Redis(host=\"localhost\", port=6379, credential_provider=creds_provider)\nuser_connection.ping()\n```\n\n----------------------------------------\n\nTITLE: Pipeline Reset after Watch - Redis Python\nDESCRIPTION: This example demonstrates the importance of resetting the connection after using `WATCH` in a pipeline. It shows the manual way to call `reset()` in the `finally` block to ensure the connection is returned to the pool, even if a `WatchError` occurs. This is particularly crucial to ensure that connections aren't left in a state where they are bound to a specific `WATCH` key for extended periods.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/advanced_features.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> pipe = r.pipeline()\n>>> while True:\n...     try:\n...         pipe.watch('OUR-SEQUENCE-KEY')\n...         ...\n...         pipe.execute()\n...         break\n...     except WatchError:\n...         continue\n...     finally:\n...         pipe.reset()\n```\n\n----------------------------------------\n\nTITLE: Creating OpenAI Embeddings and Writing to Redis\nDESCRIPTION: This code snippet creates embeddings using the OpenAI `text-embedding-ada-002` model and writes them to Redis. It calls the OpenAI API to generate embeddings for a list of texts, converts the embeddings to a NumPy array of type float32, and then writes the embeddings, content, and a tag to Redis using the `hset` command and a Redis pipeline.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/examples/search_vector_similarity_examples.ipynb#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n# Create Embeddings with OpenAI text-embedding-ada-002\n# https://openai.com/blog/new-and-improved-embedding-model\nresponse = openai.Embedding.create(input=texts, engine=\"text-embedding-ada-002\")\nembeddings = np.array([r[\"embedding\"] for r in response[\"data\"]], dtype=np.float32)\n\n# Write to Redis\npipe = r.pipeline()\nfor i, embedding in enumerate(embeddings):\n    pipe.hset(f\"doc:{i}\", mapping = {\n        \"vector\": embedding.tobytes(),\n        \"content\": texts[i],\n        \"tag\": \"openai\"\n    })\nres = pipe.execute()\n```\n\n----------------------------------------\n\nTITLE: Counting Total Number of Items with Aggregation (redis-py)\nDESCRIPTION: This code demonstrates how to count the total number of items using aggregation. It creates an aggregation request that searches for all documents (`*`) and groups the results using an empty list `[]`, which effectively applies the aggregation function to the entire result set. It then uses the `count()` reducer to count the total number of items and aliases the result as \"total\".\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/examples/search_json_examples.ipynb#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# The group_by expects a string or list of strings to group the results before applying the aggregation function to\n# each group. Passing an empty list here acts as `GROUPBY 0` which applies the aggregation function to the whole results\nreq = aggregations.AggregateRequest(\"*\").group_by([], reducers.count().alias(\"total\"))\nr.ft().aggregate(req).rows\n```\n\n----------------------------------------\n\nTITLE: Creating Redis Stream Groups\nDESCRIPTION: This snippet defines a function to create a Redis stream group using the xgroup_create command. It takes the stream key and group name as input. The xinfo_groups command is used to verify the creation of the group. Error handling is included to catch potential exceptions.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/examples/redis-stream-example.ipynb#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n## create the group\ndef create_group( skey, gname ):\n    try:\n        r.xgroup_create( name=skey, groupname=gname, id=0 )\n    except ResponseError as e:\n        print(f\"raised: {e}\")\n\n# group1 read the stream 'skey'\ncreate_group( stream_key, group1 )\n# group2 read the streams 'skey' and 's2key'\ncreate_group( stream_key, group2 )\ncreate_group( stream2_key, group2 )\n\ndef group_info( skey ):\n    res = r.xinfo_groups( name=skey )\n    for i in res:\n        print( f\"{skey} -> group name: {i['name']} with {i['consumers']} consumers and {i['last-delivered-id']}\"\n              + f\" as last read id\")\n    \ngroup_info( stream_key )\ngroup_info( stream2_key )\n```\n\n----------------------------------------\n\nTITLE: Directly Querying a Cluster Node in Python\nDESCRIPTION: This code shows how to directly query a Redis instance of a specific node using the RedisCluster instance. It demonstrates retrieving a node's redis_connection and executing commands on it.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/clustering.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> cluster_node = rc.get_node(host='localhost', port=6379)\n>>> print(cluster_node)\n[host=127.0.0.1,port=6379,name=127.0.0.1:6379,server_type=primary,redis_connection=Redis<ConnectionPool<Connection<host=127.0.0.1,port=6379,db=0>>>]\n>>> r = cluster_node.redis_connection\n>>> r.client_list()\n[{'id': '276', 'addr': '127.0.0.1:64108', 'fd': '16', 'name': '', 'age': '0', 'idle': '0', 'flags': 'N', 'db': '0', 'sub': '0', 'psub': '0', 'multi': '-1', 'qbuf': '26', 'qbuf-free': '32742', 'argv-mem': '10', 'obl': '0', 'oll': '0', 'omem': '0', 'tot-mem': '54298', 'events': 'r', 'cmd': 'client', 'user': 'default'}]\n>>> # Get the keys only for that specific node\n>>> r.keys()\n[b'foo1']\n```\n\n----------------------------------------\n\nTITLE: Performing Hybrid Query\nDESCRIPTION: This code snippet performs a hybrid query using the redis-py client. It combines traditional filters (in this case, a tag filter) with VSS. The query filters for documents with the tag 'foo' and then finds the top 2 most similar vectors to a given query vector within that subset. It uses dialect 2 to enable VSS queries.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/examples/search_vector_similarity_examples.ipynb#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nquery = (\n    Query(\"(@tag:{ foo })=>[KNN 2 @vector $vec as score]\")\n     .sort_by(\"score\")\n     .return_fields(\"id\", \"tag\", \"score\")\n     .paging(0, 2)\n     .dialect(2)\n)\n\nquery_params = {\n    \"vec\": np.random.rand(VECTOR_DIMENSIONS).astype(np.float32).tobytes()\n}\nr.ft(INDEX_NAME).search(query, query_params).docs\n```\n\n----------------------------------------\n\nTITLE: Adding Vectors to Redis using HSET\nDESCRIPTION: This code snippet adds vectors to Redis using the `hset` command. It creates dummy data with names, tags, and random vectors. The vectors are converted to bytes using NumPy and stored in Redis hashes with the key prefix defined by `DOC_PREFIX`. It uses a Redis pipeline for efficiency.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/examples/search_vector_similarity_examples.ipynb#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# instantiate a redis pipeline\npipe = r.pipeline()\n\n# define some dummy data\nobjects = [\n    {\"name\": \"a\", \"tag\": \"foo\"},\n    {\"name\": \"b\", \"tag\": \"foo\"},\n    {\"name\": \"c\", \"tag\": \"bar\"},\n]\n\n# write data\nfor obj in objects:\n    # define key\n    key = f\"doc:{obj['name']}\"\n    # create a random \"dummy\" vector\n    obj[\"vector\"] = np.random.rand(VECTOR_DIMENSIONS).astype(np.float32).tobytes()\n    # HSET\n    pipe.hset(key, mapping=obj)\n\nres = pipe.execute()\n```\n\n----------------------------------------\n\nTITLE: Paginating and Ordering Search Results (redis-py)\nDESCRIPTION: This snippet illustrates how to paginate and order search results using the `paging` and `sort_by` methods of the `Query` object. It searches for all documents (`*`), retrieves 2 results at a time starting from offset 0, and sorts the results by the `age` field in descending order. `asc=True` can be passed to sort in ascending order instead.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/examples/search_json_examples.ipynb#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Search for all users, returning 2 users at a time and sorting by age in descending order\noffset = 0\nnum = 2\nq = Query(\"*\").paging(offset, num).sort_by(\"age\", asc=False) # pass asc=True to sort in ascending order\nr.ft().search(q)\n```\n\n----------------------------------------\n\nTITLE: Connecting to Redis with OCSP Validation - Python\nDESCRIPTION: Connects to a Redis instance via SSL and attempts to validate the OCSP status of the certificate.  It requires the 'redis[ocsp]' extra to be installed. The example demonstrates a scenario where the certificate lacks the required AIA extension, leading to OCSP validation failure, which is then caught and asserted.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/examples/ssl_connection_examples.ipynb#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport redis\n\npki_dir = os.path.join(\"..\", \"..\", \"dockers\", \"stunnel\", \"keys\")\n\nr = redis.Redis(\n    host=\"localhost\",\n    port=6666,\n    ssl=True,\n    ssl_certfile=os.path.join(pki_dir, \"client-cert.pem\"),\n    ssl_keyfile=os.path.join(pki_dir, \"client-key.pem\"),\n    ssl_cert_reqs=\"required\",\n    ssl_ca_certs=os.path.join(pki_dir, \"ca-cert.pem\"),\n    ssl_validate_ocsp=True,\n)\n\ntry:\n    r.ping()\nexcept redis.ConnectionError as e:\n    assert e.args[0] == \"No AIA information present in ssl certificate\"\n    print(\"OCSP validation failed as expected.\")\n```\n\n----------------------------------------\n\nTITLE: Multi-Key Commands on Redis Cluster\nDESCRIPTION: This snippet demonstrates how to execute multi-key commands on an Open Source Redis Cluster using redis-py. It initializes a RedisCluster client, refreshes the cluster's view of the time series module, and then performs multi-key operations like adding samples to multiple time series and querying them with `ts.mget()`.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/examples/timeseries_examples.ipynb#_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nimport redis\n\nr = redis.RedisCluster(host=\"localhost\", port=46379)\n\n# This command should be executed on all cluster nodes after creation and any re-sharding\n# Please note that this command is internal and will be deprecated in the future\nr.execute_command(\"timeseries.REFRESHCLUSTER\", target_nodes=\"primaries\")\n\n# Now multi-key commands can be executed\nts = r.ts()\nts.add(\"ts_key1\", \"*\", 2,  labels={\"label1\": 1, \"label2\": 2})\nts.add(\"ts_key2\", \"*\", 10,  labels={\"label1\": 1, \"label2\": 2})\nts.mget([\"label1=1\"])\n```\n\n----------------------------------------\n\nTITLE: Pipeline Command Buffering - Redis Python\nDESCRIPTION: This snippet demonstrates how to use Redis pipelines to buffer multiple commands and execute them in a single request, improving performance by reducing network round trips. The commands `set` and `get` are chained and executed using `pipe.execute()`. The return value is a list of responses corresponding to each command in the pipeline.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/advanced_features.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> r = redis.Redis(...)\n>>> r.set('bing', 'baz')\n>>> # Use the pipeline() method to create a pipeline instance\n>>> pipe = r.pipeline()\n>>> # The following SET commands are buffered\n>>> pipe.set('foo', 'bar')\n>>> pipe.get('bing')\n>>> # the EXECUTE call sends all buffered commands to the server, returning\n>>> # a list of responses, one for each command.\n>>> pipe.execute()\n[True, b'baz']\n```\n\n----------------------------------------\n\nTITLE: Connecting with Standard Credential Provider in Python\nDESCRIPTION: Connects to Redis using a custom `UserMapCredentialProvider` that retrieves credentials from a dictionary. It also sets up an ACL user on the Redis instance before connecting with the custom provider. Demonstrates advanced credential management.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/examples/connection_examples.ipynb#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Tuple\nimport redis\n\ncreds_map = {\"user_1\": \"pass_1\",\n             \"user_2\": \"pass_2\"}\n\nclass UserMapCredentialProvider(redis.CredentialProvider):\n    def __init__(self, username: str):\n        self.username = username\n\n    def get_credentials(self) -> Tuple[str, str]:\n        return self.username, creds_map.get(self.username)\n\n# Create a default connection to set the ACL user\ndefault_connection = redis.Redis(host=\"localhost\", port=6379)\ndefault_connection.acl_setuser(\n    \"user_1\",\n    enabled=True,\n    passwords=[\"+\" + \"pass_1\"],\n    keys=\"~*\",\n    commands=[\"+ping\", \"+command\", \"+info\", \"+select\", \"+flushdb\"],\n)\n\n# Create a UserMapCredentialProvider instance for user_1\ncreds_provider = UserMapCredentialProvider(\"user_1\")\n# Initiate user connection with the credential provider\nuser_connection = redis.Redis(host=\"localhost\", port=6379,\n                              credential_provider=creds_provider)\nuser_connection.ping()\n```\n\n----------------------------------------\n\nTITLE: Performing KNN Query\nDESCRIPTION: This code snippet performs a KNN (K-Nearest Neighbors) query using the redis-py client. It constructs a query to find the top 2 most similar vectors to a given query vector. The query specifies the vector field, the number of neighbors to find, and the score alias. It uses dialect 2 to enable VSS queries.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/examples/search_vector_similarity_examples.ipynb#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nquery = (\n    Query(\"*=>[KNN 2 @vector $vec as score]\")\n     .sort_by(\"score\")\n     .return_fields(\"id\", \"score\")\n     .return_field(\"vector\", decode_field=False) # return the vector field as bytes\n     .paging(0, 2)\n     .dialect(2)\n)\n\nquery_params = {\n    \"vec\": np.random.rand(VECTOR_DIMENSIONS).astype(np.float32).tobytes()\n}\nr.ft(INDEX_NAME).search(query, query_params).docs\n```\n\n----------------------------------------\n\nTITLE: Creating Cohere Embeddings and Writing to Redis\nDESCRIPTION: This code snippet creates embeddings using the Cohere API and writes them to Redis. It calls the `co.embed` method to generate embeddings for a list of texts, converts the embeddings to a NumPy array of type float32, and stores the embeddings, content, and tag in Redis using the `hset` command.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/examples/search_vector_similarity_examples.ipynb#_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n# Create Embeddings with Cohere\n# https://docs.cohere.ai/docs/embeddings\nresponse = co.embed(texts=texts, model=\"small\")\nembeddings = np.array(response.embeddings, dtype=np.float32)\n\n# Write to Redis\nfor i, embedding in enumerate(embeddings):\n    r.hset(f\"doc:{i}\", mapping = {\n        \"vector\": embedding.tobytes(),\n        \"content\": texts[i],\n        \"tag\": \"cohere\"\n    })\n```\n\n----------------------------------------\n\nTITLE: Connecting with Initial Credential Set Provider in Python\nDESCRIPTION: Connects to Redis using a custom `InitCredsSetCredentialProvider` that uses an initial set of credentials and then calls an external supplier. This demonstrates a scenario where the initial credentials are used only for the first time.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/examples/connection_examples.ipynb#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Union\nimport redis\n\nclass InitCredsSetCredentialProvider(redis.CredentialProvider):\n    def __init__(self, username, password):\n        self.username = username\n        self.password = password\n        self.call_supplier = False\n\n    def call_external_supplier(self) -> Union[Tuple[str], Tuple[str, str]]:\n        # Call to an external credential supplier\n        raise NotImplementedError\n\n    def get_credentials(self) -> Union[Tuple[str], Tuple[str, str]]:\n        if self.call_supplier:\n            return self.call_external_supplier()\n        # Use the init set only for the first time\n        self.call_supplier = True\n        return self.username, self.password\n\ncred_provider = InitCredsSetCredentialProvider(username=\"init_user\", password=\"init_pass\")\n```\n\n----------------------------------------\n\nTITLE: Projecting Results using JSON Path Expressions (redis-py)\nDESCRIPTION: This code snippet demonstrates how to project specific fields from the JSON documents in the search results using JSON Path expressions. It searches for documents containing \"Paul\" and uses the `return_field` method to specify that only the `$.user.city` field should be returned, aliased as \"city\". The results are accessed through the `docs` attribute.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/examples/search_json_examples.ipynb#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nr.ft().search(Query(\"Paul\").return_field(\"$.user.city\", as_field=\"city\")).docs\n```\n\n----------------------------------------\n\nTITLE: Adding Data to Stream Function\nDESCRIPTION: This snippet defines a function that adds a range of data to a specified Redis stream. The function takes the stream name and a range of keys as input, and then iterates through the range, adding a new entry to the stream for each key. It uses `time()` to get the timestamp and prints stream's length.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/examples/redis-stream-example.ipynb#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ndef add_some_data_to_stream( sname, key_range ):\n    for i in key_range:\n        r.xadd( sname, { 'ts': time(), 'v': i } )\n    print( f\"stream '{sname}' length: {r.xlen( stream_key )}\")\n\nadd_some_data_to_stream( stream_key, range(0,10) )\nadd_some_data_to_stream( stream2_key, range(1000,1010) )\n```\n\n----------------------------------------\n\nTITLE: Connecting to Redis Cluster using host and port in Python\nDESCRIPTION: This code snippet demonstrates how to connect to a Redis Cluster using the 'host' and 'port' arguments. It initializes a RedisCluster client and prints the cluster's node information.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/clustering.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> from redis.cluster import RedisCluster as Redis\n>>> rc = Redis(host='localhost', port=6379)\n>>> print(rc.get_nodes())\n    [[host=127.0.0.1,port=6379,name=127.0.0.1:6379,server_type=primary,redis_connection=Redis<ConnectionPool<Connection<host=127.0.0.1,port=6379,db=0>>>], [host=127.0.0.1,port=6378,name=127.0.0.1:6378,server_type=primary,redis_connection=Redis<ConnectionPool<Connection<host=127.0.0.1,port=6378,db=0>>>], [host=127.0.0.1,port=6377,name=127.0.0.1:6377,server_type=replica,redis_connection=Redis<ConnectionPool<Connection<host=127.0.0.1,port=6377,db=0>>>]]\n```\n\n----------------------------------------\n\nTITLE: Performing Range Query\nDESCRIPTION: This code snippet performs a range query using the redis-py client. It constructs a query to find vectors within a specified radius of a given query vector.  The query uses the `VECTOR_RANGE` operator and yields the distance as `score`. It uses dialect 2 to enable VSS queries.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/examples/search_vector_similarity_examples.ipynb#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nquery = (\n    Query(\"@vector:[VECTOR_RANGE $radius $vec]=>{$YIELD_DISTANCE_AS: score}\")\n     .sort_by(\"score\")\n     .return_fields(\"id\", \"score\")\n     .paging(0, 3)\n     .dialect(2)\n)\n\n# Find all vectors within 0.8 of the query vector\nquery_params = {\n    \"radius\": 0.8,\n    \"vec\": np.random.rand(VECTOR_DIMENSIONS).astype(np.float32).tobytes()\n}\nr.ft(INDEX_NAME).search(query, query_params).docs\n```\n\n----------------------------------------\n\nTITLE: Transaction Helper Method - Redis Python\nDESCRIPTION: This snippet illustrates using the `transaction` helper method for handling WATCH errors.  It simplifies the atomic increment logic by encapsulating the retry logic.  The `client_side_incr` function defines the operations to be performed within the transaction, and the `transaction` method handles WATCHing the key and retrying on WatchError.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/advanced_features.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> def client_side_incr(pipe):\n...     current_value = pipe.get('OUR-SEQUENCE-KEY')\n...     next_value = int(current_value) + 1\n...     pipe.multi()\n...     pipe.set('OUR-SEQUENCE-KEY', next_value)\n>>>\n>>> r.transaction(client_side_incr, 'OUR-SEQUENCE-KEY')\n[True]\n```\n\n----------------------------------------\n\nTITLE: Searching Redis with OpenAI Embeddings\nDESCRIPTION: This code snippet performs a search in Redis using an OpenAI-generated query embedding. It constructs a KNN query that searches for the top 2 most similar documents with the 'openai' tag. It returns the content, tag, and score of the matching documents.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/examples/search_vector_similarity_examples.ipynb#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n# query for similar documents that have the openai tag\nquery = (\n    Query(\"(@tag:{ openai })=>[KNN 2 @vector $vec as score]\")\n     .sort_by(\"score\")\n     .return_fields(\"content\", \"tag\", \"score\")\n     .paging(0, 2)\n     .dialect(2)\n)\n\nquery_params = {\"vec\": query_embedding.tobytes()}\nr.ft(INDEX_NAME).search(query, query_params).docs\n\n# the two pieces of content related to animals are returned\n```\n\n----------------------------------------\n\nTITLE: Reading Data from 2nd Stream Group\nDESCRIPTION: This snippet demonstrates reading from a second stream group, group2, which is associated with both stream_key and stream2_key. It uses xreadgroup with consumer name 'c' to retrieve two messages from each stream. This allows the second group to potentially read messages that have already been delivered to the first group.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/examples/redis-stream-example.ipynb#_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nd2 = r.xreadgroup( groupname=group2, consumername='c', block=10,\n                   count=2, streams={stream_key:'>',stream2_key:'>'})\nprint_xreadgroup_reply( d2 )\n```\n\n----------------------------------------\n\nTITLE: Counting Total Number of Items in Search Results (redis-py)\nDESCRIPTION: This snippet shows how to count the total number of items that match a query without actually retrieving the documents. It creates a query that searches for all documents (`*`) and uses paging with an offset of 0 and number of results set to 0. The `total` attribute of the search result object then returns the total number of matching items.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/examples/search_json_examples.ipynb#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nq = Query(\"*\").paging(0, 0)\nr.ft().search(q).total\n```\n\n----------------------------------------\n\nTITLE: Printing xreadgroup Reply\nDESCRIPTION: This snippet defines a function to print the reply from an xreadgroup command. The function takes the reply data, an optional group name, and an optional run function as input. It iterates through the streams and elements in the reply, printing the stream name and element ID. If a run function is provided, it is called for each element.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/examples/redis-stream-example.ipynb#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\ndef print_xreadgroup_reply( reply, group = None, run = None):\n    for d_stream in reply:\n        for element in d_stream[1]:\n            print(  f\"got element {element[0]}\"\n                  + f\"from stream {d_stream[0]}\" )\n            if run is not None:\n                run( d_stream[0], group, element[0] )\n```\n\n----------------------------------------\n\nTITLE: Unsubscribing from Channels and Patterns in Redis PubSub (redis-py)\nDESCRIPTION: This snippet demonstrates how to unsubscribe from all channels and patterns using the unsubscribe() and punsubscribe() methods in redis-py's PubSub. It shows how subsequent calls to get_message() return unsubscribe/punsubscribe messages, indicating successful unsubscription.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/advanced_features.rst#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n>>> p.unsubscribe()\n>>> p.punsubscribe('my-*')\n>>> p.get_message()\n{'channel': b'my-second-channel', 'data': 2, 'pattern': None, 'type': 'unsubscribe'}\n>>> p.get_message()\n{'channel': b'my-first-channel', 'data': 1, 'pattern': None, 'type': 'unsubscribe'}\n>>> p.get_message()\n{'channel': b'my-*', 'data': 0, 'pattern': None, 'type': 'punsubscribe'}\n```\n\n----------------------------------------\n\nTITLE: Searching Redis with Cohere Embeddings\nDESCRIPTION: This code snippet performs a search in Redis using a Cohere-generated query embedding. It constructs a KNN query to find the top 2 most similar documents with the 'cohere' tag. It returns the content, tag, and score of the matching documents.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/examples/search_vector_similarity_examples.ipynb#_snippet_21\n\nLANGUAGE: python\nCODE:\n```\n# query for similar documents that have the cohere tag\nquery = (\n    Query(\"(@tag:{ cohere })=>[KNN 2 @vector $vec as score]\")\n     .sort_by(\"score\")\n     .return_fields(\"content\", \"tag\", \"score\")\n     .paging(0, 2)\n     .dialect(2)\n)\n\nquery_params = {\"vec\": query_embedding.tobytes()}\nr.ft(INDEX_NAME).search(query, query_params).docs\n\n# the two pieces of content related to animals are returned\n```\n\n----------------------------------------\n\nTITLE: Incrementing With Pipeline Python\nDESCRIPTION: This snippet measures the time taken to increment a Redis key `incr_key` 100000 times using a pipeline. It initializes the key to \"0\", records the start time, adds increment commands to the pipeline, executes the pipeline, retrieves the final incremented value from the result list, and calculates the elapsed time.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/examples/pipeline_examples.ipynb#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nr.set(\"incr_key\", \"0\")\n\nstart = datetime.now()\n\npipe = r.pipeline()\nfor _ in range(incr_value):\n    pipe.incr(\"incr_key\")\npipe.get(\"incr_key\")\nres_with_pipeline = pipe.execute()[-1]\n\ntime_with_pipeline = (datetime.now() - start).total_seconds()\n```\n\n----------------------------------------\n\nTITLE: Reading Data with Last ID\nDESCRIPTION: This snippet shows how to read data from a Redis stream using the xread command, starting from a specific ID. It first retrieves the last ID returned from a previous xread operation, then uses this ID to read the next set of messages. This ensures that only new messages are retrieved from the stream.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/examples/redis-stream-example.ipynb#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nlast_id_returned = l[0][1][-1][0]\nl = r.xread( count=2, streams={stream_key: last_id_returned} )\nfor id, value in l[0][1]:\n    print( f\"id: {id} value: {value[b'v']}\")\n```\n\nLANGUAGE: python\nCODE:\n```\nlast_id_returned = l[0][1][-1][0]\nl = r.xread( count=2, streams={stream_key: last_id_returned} )\nfor id, value in l[0][1]:\n    print( f\"id: {id} value: {value[b'v']}\")\n```\n\n----------------------------------------\n\nTITLE: Configure Retry with Exponential Backoff - Redis Cluster - Python\nDESCRIPTION: This snippet showcases how to configure a Redis Cluster client to retry operations. It uses the ExponentialBackoff strategy and specifies the maximum number of retries. The RedisCluster client is then initialized with the retry object and the cluster_error_retry_attempts parameter, which controls the number of retries before a cluster update is triggered.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/retry.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> from redis.backoff import ExponentialBackoff\n>>> from redis.retry import Retry\n>>> from redis.cluster import RedisCluster\n>>>\n>>> # Run 3 retries with exponential backoff strategy\n>>> retry = Retry(ExponentialBackoff(), 3)\n>>> # Redis Cluster client with retries\n>>> rc = RedisCluster(host='localhost', port=6379, retry=retry, cluster_error_retry_attempts=2)\n```\n\n----------------------------------------\n\nTITLE: Pub/Sub Mode - Subscribing to Channel Patterns\nDESCRIPTION: This snippet demonstrates how to subscribe to channels matching a glob-style pattern using the Pub/Sub mode in `redis.asyncio`. It also defines an asynchronous reader function to process messages.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/examples/asyncio_examples.ipynb#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\n\nimport redis.asyncio as redis\n\nSTOPWORD = \"STOP\"\n\n\nasync def reader(channel: redis.client.PubSub):\n    while True:\n        message = await channel.get_message(ignore_subscribe_messages=True, timeout=None)\n        if message is not None:\n            print(f\"(Reader) Message Received: {message}\")\n            if message[\"data\"].decode() == STOPWORD:\n                print(\"(Reader) STOP\")\n                break\n\n\nr = await redis.from_url(\"redis://localhost\")\nasync with r.pubsub() as pubsub:\n    await pubsub.psubscribe(\"channel:*\")\n\n    future = asyncio.create_task(reader(pubsub))\n\n    await r.publish(\"channel:1\", \"Hello\")\n    await r.publish(\"channel:2\", \"World\")\n    await r.publish(\"channel:1\", STOPWORD)\n\n    await future\n```\n\n----------------------------------------\n\nTITLE: Blocking Read with xread\nDESCRIPTION: This snippet demonstrates how to perform a blocking read from a Redis stream using the xread command. It waits for up to 5 seconds (block=5000 milliseconds) for new messages to arrive in the stream. If no new messages are received within the specified time, an empty list is returned.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/examples/redis-stream-example.ipynb#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nprint( f\"stream length: {r.xlen( stream_key )}\")\n# wait for 5s for new messages\nl = r.xread( count=1, block=5000, streams={stream_key: '$'} )\nprint( f\"after 5s block, got an empty list {l}, no *new* messages on the stream\")\nprint( f\"stream length: {r.xlen( stream_key )}\")\n```\n\n----------------------------------------\n\nTITLE: Pub/Sub Mode - Subscribing to Channels\nDESCRIPTION: This snippet demonstrates how to subscribe to specific channels using the Pub/Sub mode in `redis.asyncio`. It defines an asynchronous reader function to receive messages from the subscribed channels.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/examples/asyncio_examples.ipynb#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\n\nimport redis.asyncio as redis\n\nSTOPWORD = \"STOP\"\n\n\nasync def reader(channel: redis.client.PubSub):\n    while True:\n        message = await channel.get_message(ignore_subscribe_messages=True, timeout=None)\n        if message is not None:\n            print(f\"(Reader) Message Received: {message}\")\n            if message[\"data\"].decode() == STOPWORD:\n                print(\"(Reader) STOP\")\n                break\n\nr = redis.from_url(\"redis://localhost\")\nasync with r.pubsub() as pubsub:\n    await pubsub.subscribe(\"channel:1\", \"channel:2\")\n\n    future = asyncio.create_task(reader(pubsub))\n\n    await r.publish(\"channel:1\", \"Hello\")\n    await r.publish(\"channel:2\", \"World\")\n    await r.publish(\"channel:1\", STOPWORD)\n\n    await future\n```\n\n----------------------------------------\n\nTITLE: Create Count-Min Sketch and get information with RedisBloom in Python\nDESCRIPTION: This snippet demonstrates how to create a Count-Min Sketch (CMS) and retrieve its information using the RedisBloom module with redis-py. It initializes a Redis connection, creates a CMS named 'dim' with specified dimensions, increments the count for 'foo', and then retrieves information about the CMS.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/redismodules.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport redis\nr = redis.Redis()\nr.cms().initbydim(\"dim\", 1000, 5)\nr.cms().incrby(\"dim\", [\"foo\"], [5])\nr.cms().info(\"dim\")\n```\n\n----------------------------------------\n\nTITLE: Create a search index and display its information with RediSearch in Python\nDESCRIPTION: This snippet shows how to create a search index and display its information using the RediSearch module with redis-py. It initializes a Redis connection, defines a schema with text fields, creates an index named 'my_index' based on the schema, and prints information about the newly created index.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/redismodules.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport redis\nfrom redis.commands.search.field import TextField\n\nr = redis.Redis()\nindex_name = \"my_index\"\nschema = (\n    TextField(\"play\", weight=5.0),\n    TextField(\"ball\"),\n)\nr.ft(index_name).create_index(schema)\nprint(r.ft(index_name).info())\n```\n\n----------------------------------------\n\nTITLE: Connecting to Redis with Self-Signed Certificate - Python\nDESCRIPTION: Connects to a Redis instance via SSL using a self-signed SSL CA certificate. It specifies the paths to the client certificate, client key, and CA certificate using ssl_certfile, ssl_keyfile, and ssl_ca_certs, respectively. It also sets ssl_cert_reqs to 'required', enforcing certificate verification.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/examples/ssl_connection_examples.ipynb#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport redis\n\npki_dir = os.path.join(\"..\", \"..\", \"dockers\", \"stunnel\", \"keys\")\n\nr = redis.Redis(\n    host=\"localhost\",\n    port=6666,\n    ssl=True,\n    ssl_certfile=os.path.join(pki_dir, \"client-cert.pem\"),\n    ssl_keyfile=os.path.join(pki_dir, \"client-key.pem\"),\n    ssl_cert_reqs=\"required\",\n    ssl_ca_certs=os.path.join(pki_dir, \"ca-cert.pem\"),\n)\nr.ping()\n```\n\n----------------------------------------\n\nTITLE: Filtering Search Results with NumericFilter (redis-py)\nDESCRIPTION: This code snippet demonstrates how to filter search results based on a numeric range using `NumericFilter`. It constructs a query that searches for documents containing \"Paul\" and filters the results to include only those where the `age` field is between 30 and 40 (inclusive).\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/examples/search_json_examples.ipynb#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nq1 = Query(\"Paul\").add_filter(NumericFilter(\"age\", 30, 40))\nr.ft().search(q1)\n```\n\n----------------------------------------\n\nTITLE: Uptrace: Redis Read Hit Rate Alert\nDESCRIPTION: This YAML configuration defines an alerting rule for Uptrace that triggers when the Redis read hit rate is lower than 75% for at least 5 minutes. It calculates the hit rate using `redis_keyspace_read_hits` and `redis_keyspace_read_misses` metrics.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/opentelemetry.rst#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nmonitors:\n  - name: Redis read hit rate < 75%\n    metrics:\n      - redis_keyspace_read_hits as $hits\n      - redis_keyspace_read_misses as $misses\n    query:\n      - group by cluster\n      - group by bdb\n      - group by node\n      - $hits / ($hits + $misses) as hit_rate\n    min_allowed_value: 0.75\n    for_duration: 5m\n```\n\n----------------------------------------\n\nTITLE: Setting and Getting Data in Redis with redis-py\nDESCRIPTION: This snippet demonstrates how to set and retrieve data from a Redis server using the redis-py library. It initializes a Redis connection, sets a key-value pair, and then retrieves the value associated with the key. The decode_responses=True parameter ensures that the retrieved value is decoded as a string.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/commands.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport redis\nr = redis.Redis(decode_responses=True)\nr.set('mykey', 'thevalueofmykey')\nr.get('mykey')\n```\n\n----------------------------------------\n\nTITLE: Receiving Subscription Confirmations - Redis Python\nDESCRIPTION: This snippet retrieves subscription confirmation messages from the PubSub instance using `p.get_message()`. The messages confirm the successful subscription to channels and patterns, providing information about the subscription type, channel, and the total number of subscriptions.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/advanced_features.rst#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n>>> p.get_message()\n{'pattern': None, 'type': 'subscribe', 'channel': b'my-second-channel', 'data': 1}\n>>> p.get_message()\n{'pattern': None, 'type': 'subscribe', 'channel': b'my-first-channel', 'data': 2}\n>>> p.get_message()\n{'pattern': None, 'type': 'psubscribe', 'channel': b'my-*', 'data': 3}\n```\n\n----------------------------------------\n\nTITLE: Uptrace: Redis Shard Down Alert\nDESCRIPTION: This YAML configuration defines an alerting rule for Uptrace that triggers when a Redis shard is down for at least 5 minutes.  It monitors the `redis_up` metric, grouping by cluster, database, and node to identify individual shard failures.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/opentelemetry.rst#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nmonitors:\n  - name: Redis shard is down\n    metrics:\n      - redis_up as $redis_up\n    query:\n      - group by cluster # monitor each cluster,\n      - group by bdb # each database,\n      - group by node # and each shard\n      - $redis_up\n    min_allowed_value: 1\n    # shard should be down for 5 minutes to trigger an alert\n    for_duration: 5m\n```\n\n----------------------------------------\n\nTITLE: Chained Pipeline Commands - Redis Python\nDESCRIPTION: This snippet shows how to chain multiple Redis commands within a pipeline. Each command returns the pipeline object, allowing for concise syntax. The `set`, `sadd`, and `incr` commands are chained together and then executed. The result is a list containing the responses of each command.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/advanced_features.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> pipe.set('foo', 'bar').sadd('faz', 'baz').incr('auto_number').execute()\n[True, True, 6]\n```\n\n----------------------------------------\n\nTITLE: Specifying Target Nodes using Flags in Python\nDESCRIPTION: This snippet illustrates how to specify target nodes for RedisCluster commands using the node flags (PRIMARIES, REPLICAS, ALL_NODES, RANDOM). It demonstrates running commands on different node types.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/clustering.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> from redis.cluster import RedisCluster as Redis\n>>> # run cluster-meet command on all of the cluster's nodes\n>>> rc.cluster_meet('127.0.0.1', 6379, target_nodes=Redis.ALL_NODES)\n>>> # ping all replicas\n>>> rc.ping(target_nodes=Redis.REPLICAS)\n>>> # ping a random node\n>>> rc.ping(target_nodes=Redis.RANDOM)\n>>> # get the keys from all cluster nodes\n>>> rc.keys(target_nodes=Redis.ALL_NODES)\n[b'foo1', b'foo2']\n>>> # execute bgsave in all primaries\n>>> rc.bgsave(Redis.PRIMARIES)\n```\n\n----------------------------------------\n\nTITLE: Printing Pending Messages Info\nDESCRIPTION: This snippet defines a function to check and print pending messages (messages delivered but not acknowledged) on the stream for specified stream groups using the xpending command. The pending messages are for the given group name on the given stream key.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/examples/redis-stream-example.ipynb#_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n# check pending status (read messages without a ack)\ndef print_pending_info( key_group ):\n    for s,k in key_group:\n        pr = r.xpending( name=s, groupname=k )\n        print( f\"{pr.get('pending')} pending messages on '{s}' for group '{k}'\" )\n    \nprint_pending_info( ((stream_key,group1),(stream_key,group2),(stream2_key,group2)) )\n```\n\n----------------------------------------\n\nTITLE: Using RedisCluster to set and get values in Python\nDESCRIPTION: This code demonstrates how to use a RedisCluster instance to set and get values, as well as execute commands like keys and ping. The commands are executed against specific nodes in the cluster.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/clustering.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> # target-nodes: the node that holds 'foo1's key slot\n>>> rc.set('foo1', 'bar1')\n>>> # target-nodes: the node that holds 'foo2's key slot\n>>> rc.set('foo2', 'bar2')\n>>> # target-nodes: the node that holds 'foo1's key slot\n>>> print(rc.get('foo1'))\nb'bar'\n>>> # target-node: default-node\n>>> print(rc.keys())\n[b'foo1']\n>>> # target-node: default-node\n>>> rc.ping()\n```\n\n----------------------------------------\n\nTITLE: Get Samples Between Timestamps (Range Query)\nDESCRIPTION: This snippet retrieves samples from a time series within a specified range of timestamps using the `ts.range()` method. It shows how to use '-' and '+' to represent the minimum and maximum possible timestamps, effectively retrieving all samples. It also demonstrates using explicit timestamps to define the range.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/examples/timeseries_examples.ipynb#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nts.range(\"ts_key\", \"-\", \"+\")\n```\n\nLANGUAGE: python\nCODE:\n```\nts.range(\"ts_key\", 1657265437756, 1657265437757)\n```\n\n----------------------------------------\n\nTITLE: Subscribing to a Sharded Channel in Redis Cluster (redis-py)\nDESCRIPTION: This snippet showcases how to subscribe to a sharded channel in a Redis Cluster using redis-py.  It initializes a RedisCluster object and then subscribes to the 'foo' channel using p.ssubscribe(). Finally, it attempts to retrieve a sharded message using p.get_sharded_message().\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/advanced_features.rst#_snippet_20\n\nLANGUAGE: python\nCODE:\n```\n>>> from redis.cluster import RedisCluster, ClusterNode\n>>> r = RedisCluster(startup_nodes=[ClusterNode('localhost', 6379), ClusterNode('localhost', 6380)])\n>>> p = r.pubsub()\n>>> p.ssubscribe('foo')\n>>> # assume someone sends a message along the channel via a publish\n>>> message = p.get_sharded_message()\n```\n\n----------------------------------------\n\nTITLE: Add Sample with Retention and Verify Deletion\nDESCRIPTION: This snippet adds a sample to a time series with a retention period, then waits for the retention period to elapse, and then verifies that the sample has been deleted. It demonstrates the automatic data removal based on the retention policy.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/examples/timeseries_examples.ipynb#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport time\n# this will be deleted in 1000 milliseconds\nts.add(\"ts_key_ret\", \"*\", 1, retention_msecs=retention_time)\nprint(\"Base timeseries:                     \", ts.range(\"ts_key_ret\", \"-\", \"+\"))\n# sleeping for 1000 milliseconds (1 second)\ntime.sleep(1)\nprint(\"Timeseries after 1000 milliseconds:  \", ts.range(\"ts_key_ret\", \"-\", \"+\"))\n```\n\nLANGUAGE: python\nCODE:\n```\nts.add(\"ts_key_ret\", \"*\", 10)\n```\n\nLANGUAGE: python\nCODE:\n```\nts.range(\"ts_key_ret\", \"-\", \"+\")\n```\n\n----------------------------------------\n\nTITLE: Async connection with URL scheme and RESP3\nDESCRIPTION: This snippet demonstrates establishing an asynchronous connection to Redis with RESP3 using a URL string. It imports the asyncio version of the Redis library and uses from_url to create the connection, enabling the RESP3 protocol through the URL's query parameters. A ping is then performed to verify the connection using await.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/resp3_features.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> import redis.asyncio as Redis\n>>> r = redis.from_url(\"redis://localhost:6379?protocol=3\")\n>>> await r.ping()\n```\n\n----------------------------------------\n\nTITLE: Custom push notification handler\nDESCRIPTION: This example demonstrates how to implement a custom function to handle push notifications received from Redis.  The function checks for specific text in the message and raises an IOError if found. The function is then assigned as the push_handler_func during pubsub initialization.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/resp3_features.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>> from redis import Redis\n>>\n>> def our_func(message):\n>>    if message.find(\"This special thing happened\"):\n>>        raise IOError(\"This was the message: \\n\" + message)\n>>\n>> r = Redis(protocol=3)\n>> p = r.pubsub(push_handler_func=our_func)\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Channels/Patterns - Redis Python\nDESCRIPTION: This snippet shows how to subscribe to channels and patterns using the PubSub instance. The `subscribe()` method is used for subscribing to specific channels, while `psubscribe()` is used for subscribing to patterns. After subscribing, the PubSub instance will receive messages published to those channels or matching the patterns.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/advanced_features.rst#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n>>> p.subscribe('my-first-channel', 'my-second-channel', ...)\n>>> p.psubscribe('my-*', ...)\n```\n\n----------------------------------------\n\nTITLE: Handling Exceptions in a Background PubSub Thread (redis-py)\nDESCRIPTION: This snippet shows how to handle exceptions that occur within the worker thread of a PubSub object when using run_in_thread().  An exception handler function is defined and passed to run_in_thread to catch and process exceptions during message processing.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/advanced_features.rst#_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n>>> p.subscribe(**{'my-channel': my_handler})\n>>> def exception_handler(ex, pubsub, thread):\n>>>     print(ex)\n>>>     thread.stop()\n>>> thread = p.run_in_thread(exception_handler=exception_handler)\n```\n\n----------------------------------------\n\nTITLE: Connecting to Redis Sentinel in Python\nDESCRIPTION: This code snippet demonstrates how to connect to a Redis Sentinel instance using the redis-py library. It initializes a Sentinel object, discovers the master node, and discovers the slave nodes for a given service name. The socket_timeout parameter is set to 0.1 seconds.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/connections.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> from redis import Sentinel\n>>> sentinel = Sentinel([('localhost', 26379)], socket_timeout=0.1)\n>>> sentinel.discover_master('mymaster')\n('127.0.0.1', 6379)\n>>> sentinel.discover_slaves('mymaster')\n[('127.0.0.1', 6380)]\n```\n\n----------------------------------------\n\nTITLE: Reading Data from Stream Group (xreadgroup)\nDESCRIPTION: This snippet demonstrates how to read data from a Redis stream group using the xreadgroup command. It reads two messages from the stream associated with group1, using the consumer name 'c'. The '>' character specifies that only new messages should be read.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/examples/redis-stream-example.ipynb#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n# read some messages on group1 with consumer 'c' \nd = r.xreadgroup( groupname=group1, consumername='c', block=10,\n                  count=2, streams={stream_key:'>'})\nprint_xreadgroup_reply( d )\n```\n\n----------------------------------------\n\nTITLE: Incrementing Without Pipeline Python\nDESCRIPTION: This snippet measures the time taken to increment a Redis key `incr_key` 100000 times without using a pipeline. It initializes the key to \"0\", records the start time, performs the increments using `r.incr()`, retrieves the final value, and calculates the elapsed time.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/examples/pipeline_examples.ipynb#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nr.set(\"incr_key\", \"0\")\n\nstart = datetime.now()\n\nfor _ in range(incr_value):\n    r.incr(\"incr_key\")\nres_without_pipeline = r.get(\"incr_key\")\n\ntime_without_pipeline = (datetime.now() - start).total_seconds()\n```\n\n----------------------------------------\n\nTITLE: Create and add to a bloom filter with RedisBloom in Python\nDESCRIPTION: This snippet demonstrates how to create a bloom filter and add an item to it using the RedisBloom module with redis-py.  It initializes a Redis connection, creates a bloom filter named 'bloom' with a specified error rate and capacity, and then adds the string 'foo' to the filter.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/redismodules.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport redis\nr = redis.Redis()\nr.bf().create(\"bloom\", 0.01, 1000)\nr.bf().add(\"bloom\", \"foo\")\n```\n\n----------------------------------------\n\nTITLE: Creating Query Embedding with OpenAI\nDESCRIPTION: This code snippet creates a query embedding using the OpenAI `text-embedding-ada-002` model. It calls the OpenAI API to generate an embedding for a given text, converts the embedding to a NumPy array of type float32, and extracts the first element.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/examples/search_vector_similarity_examples.ipynb#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n# create query embedding\nresponse = openai.Embedding.create(input=[text], engine=\"text-embedding-ada-002\")\nquery_embedding = np.array([r[\"embedding\"] for r in response[\"data\"]], dtype=np.float32)[0]\n```\n\n----------------------------------------\n\nTITLE: Reading Data from Redis Stream (xread)\nDESCRIPTION: This snippet demonstrates how to read data from a Redis stream using the xread command. It reads two entries from the stream specified by stream_key, starting from the beginning (ID 0). The returned data structure is then processed to extract the stream name, message ID, and message content.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/examples/redis-stream-example.ipynb#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nl = r.xread( count=2, streams={stream_key:0} )\nprint(l)\n```\n\n----------------------------------------\n\nTITLE: Simple Search using RediSearch (redis-py)\nDESCRIPTION: This snippet performs a simple search using the RediSearch module via the `redis-py` library. It searches for documents containing the term \"Paul\" within the indexed fields. It assumes that the index has already been created as demonstrated in the previous snippets.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/examples/search_json_examples.ipynb#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nr.ft().search(\"Paul\")\n```\n\n----------------------------------------\n\nTITLE: Executing Redis Pipeline in redis-py\nDESCRIPTION: This code snippet shows how to use a Redis pipeline with redis-py to batch commands and execute them in a single round trip. It creates a pipeline, sets multiple key-value pairs, and then executes the pipeline, returning a list of results.\nSOURCE: https://github.com/redis/redis-py/blob/master/README.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> pipe = r.pipeline()\n>>> pipe.set('foo', 5)\n>>> pipe.set('bar', 18.5)\n>>> pipe.set('blee', \"hello world!\")\n>>> pipe.execute()\n[True, True, True]\n```\n\n----------------------------------------\n\nTITLE: Ignoring Subscribe Messages in Redis PubSub (redis-py)\nDESCRIPTION: This snippet shows how to ignore subscribe/unsubscribe confirmation messages by passing ignore_subscribe_messages=True to r.pubsub(). This prevents these messages from being returned by get_message(), simplifying message handling.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/advanced_features.rst#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n>>> p = r.pubsub(ignore_subscribe_messages=True)\n>>> p.subscribe('my-channel')\n>>> p.get_message()  # hides the subscribe message and returns None\n>>> r.publish('my-channel', 'my data')\n1\n>>> p.get_message()\n{'channel': b'my-channel', 'data': b'my data', 'pattern': None, 'type': 'message'}\n```\n\n----------------------------------------\n\nTITLE: Reading Last Entry from Stream\nDESCRIPTION: This snippet retrieves the last entry in a Redis stream. It uses the '+' character as the ID in the xread command, which tells Redis to return the last available message in the stream.  This can be useful for quickly accessing the most recent data without iterating.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/examples/redis-stream-example.ipynb#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# read the last available message\nl = r.xread( count=1, streams={stream_key: '+'} )\nprint(l)\nprint( f\"stream length: {r.xlen( stream_key )}\")\n```\n\n----------------------------------------\n\nTITLE: OpenTelemetry API: Recording Exceptions\nDESCRIPTION: This Python code snippet shows how to record exceptions that occur during a span's execution using the OpenTelemetry API. It records the exception and updates the span status to indicate an error.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/opentelemetry.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nexcept ValueError as exc:\n    # Record the exception and update the span status.\n    span.record_exception(exc)\n    span.set_status(trace.Status(trace.StatusCode.ERROR, str(exc)))\n```\n\n----------------------------------------\n\nTITLE: Connecting to Redis (custom host/port)\nDESCRIPTION: This snippet demonstrates how to connect to a Redis server running on a custom host and port. It imports the `redis` library, creates a `Redis` object, passing the hostname and port number as arguments, and then uses the `ping()` method to verify the connection.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/index.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport redis\nr = redis.Redis(host='foo.bar.com', port=12345)\nr.ping()\n```\n\n----------------------------------------\n\nTITLE: Acquiring Sharded PubSub Messages From a Specific Node in Redis Cluster (redis-py)\nDESCRIPTION: This example shows how to obtain sharded pubsub messages sent to a specified node by passing the `target_node` argument to the `get_sharded_message()` function.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/advanced_features.rst#_snippet_21\n\nLANGUAGE: python\nCODE:\n```\n>>> from redis.cluster import RedisCluster, ClusterNode\n>>> first_node = ClusterNode['localhost', 6379]\n>>> second_node = ClusterNode['localhost', 6380]\n>>> r = RedisCluster(startup_nodes=[first_node, second_node])\n>>> p = r.pubsub()\n>>> p.ssubscribe('foo')\n>>> # assume someone sends a message along the channel via a publish\n>>> message = p.get_sharded_message(target_node=second_node)\n```\n\n----------------------------------------\n\nTITLE: Extracting Data from xread Result\nDESCRIPTION: This snippet extracts data from the result of an xread operation. It iterates through the returned data structure to access individual messages and their values. It assumes the result 'l' is already populated with the output from a call to r.xread.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/examples/redis-stream-example.ipynb#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfirst_stream = l[0]\nprint( f\"got data from stream: {first_stream[0]}\")\nfs_data = first_stream[1]\nfor id, value in fs_data:\n    print( f\"id: {id} value: {value[b'v']}\")\n```\n\n----------------------------------------\n\nTITLE: Enabling RESP3 Support in redis-py\nDESCRIPTION: This code snippet shows how to enable RESP3 support when connecting to a Redis server using redis-py.  It creates a Redis client instance with the `protocol=3` parameter. This ensures that the client communicates with the server using the RESP3 protocol, provided that the redis-py client is at least version 5.0.\nSOURCE: https://github.com/redis/redis-py/blob/master/README.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> import redis\n>>> r = redis.Redis(host='localhost', port=6379, db=0, protocol=3)\n```\n\n----------------------------------------\n\nTITLE: Reading Messages with a Loop in Redis PubSub (redis-py)\nDESCRIPTION: This snippet demonstrates how to continuously read messages from a PubSub object using a loop and the get_message() function. It checks if a message is available and processes it accordingly, providing a simple event loop integration.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/advanced_features.rst#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n>>> while True:\n>>>     message = p.get_message()\n>>>     if message:\n>>>         # do something with the message\n>>>     time.sleep(0.001)  # be nice to the system :)\n```\n\n----------------------------------------\n\nTITLE: Acknowledging Messages (xack)\nDESCRIPTION: This snippet demonstrates how to acknowledge messages in a Redis stream group using the xack command. A lambda function is defined to call xack for each message in the stream. This informs Redis that the message has been successfully processed by the consumer.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/examples/redis-stream-example.ipynb#_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n# do acknowledges for group1\ntoack = lambda k,g,e: r.xack( k,g, e )\nprint_xreadgroup_reply( d, group=group1, run=toack )\n```\n\nLANGUAGE: python\nCODE:\n```\n# check pending again\nprint_pending_info( ((stream_key,group1),(stream_key,group2),(stream2_key,group2)) )\n```\n\n----------------------------------------\n\nTITLE: Chained Redis Pipeline Calls Python\nDESCRIPTION: This snippet demonstrates how to chain commands together within a Redis pipeline. This is an alternative way to add and execute commands in one line of code for more concise syntax. The final `execute()` call triggers the execution of all chained commands.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/examples/pipeline_examples.ipynb#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\npipe = r.pipeline()\npipe.set(\"a\", \"a value\").set(\"b\", \"b value\").get(\"a\").execute()\n```\n\n----------------------------------------\n\nTITLE: Deleting and Re-creating Redis Index\nDESCRIPTION: This code snippet deletes an existing Redis index and creates a new one.  It first drops the index with `delete_documents=True` to remove all associated data. Then, it calls the `create_index` function to create a new index with the specified vector dimensions.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/examples/search_vector_similarity_examples.ipynb#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# delete index\nr.ft(INDEX_NAME).dropindex(delete_documents=True)\n\n# make a new one\ncreate_index(vector_dimensions=VECTOR_DIMENSIONS)\n```\n\n----------------------------------------\n\nTITLE: Create and add to a cuckoo filter with RedisBloom in Python\nDESCRIPTION: This snippet shows how to create a cuckoo filter and add an item to it using the RedisBloom module with redis-py. It initializes a Redis connection, creates a cuckoo filter named 'cuckoo' with a specified capacity, and then adds the string 'filter' to the filter.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/redismodules.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport redis\nr = redis.Redis()\nr.cf().create(\"cuckoo\", 1000)\nr.cf().add(\"cuckoo\", \"filter\")\n```\n\n----------------------------------------\n\nTITLE: Creating Query Embedding with Cohere\nDESCRIPTION: This code snippet creates a query embedding using the Cohere API. It calls the `co.embed` method to generate an embedding for a given text, converts the embedding to a NumPy array of type float32, and extracts the first element.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/examples/search_vector_similarity_examples.ipynb#_snippet_20\n\nLANGUAGE: python\nCODE:\n```\n# create query embedding\nresponse = co.embed(texts=[text], model=\"small\")\nquery_embedding = np.array(response.embeddings[0], dtype=np.float32)\n```\n\n----------------------------------------\n\nTITLE: Publishing a Message - Redis Python\nDESCRIPTION: This snippet demonstrates publishing a message to a specific channel using the `publish()` method of the Redis client. The method returns the number of matching channel and pattern subscriptions that will receive the message. The message is then retrieved from the PubSub instance using `p.get_message()`.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/advanced_features.rst#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n>>> r.publish('my-first-channel', 'some data')\n2\n>>> p.get_message()\n```\n\n----------------------------------------\n\nTITLE: Deleting and Re-creating Redis Index for Cohere\nDESCRIPTION: This code snippet deletes the existing Redis index and recreates it with a different vector dimension (1024) to accommodate Cohere embeddings. It drops the index with `delete_documents=True` and calls the `create_index` function with the new dimension.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/examples/search_vector_similarity_examples.ipynb#_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n# delete index\nr.ft(INDEX_NAME).dropindex(delete_documents=True)\n\n# make a new one for cohere embeddings (1024 dimensions)\nVECTOR_DIMENSIONS = 1024\ncreate_index(vector_dimensions=VECTOR_DIMENSIONS)\n```\n\n----------------------------------------\n\nTITLE: Reading Messages with listen() Generator in Redis PubSub (redis-py)\nDESCRIPTION: This snippet shows how to use the listen() generator to block until a message is available on the PubSub object. It is suitable for applications that primarily focus on receiving and acting upon messages from Redis.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/advanced_features.rst#_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n>>> for message in p.listen():\n...     # do something with the message\n```\n\n----------------------------------------\n\nTITLE: Non-Atomic Multi-Key Operations in Python\nDESCRIPTION: This example shows how to perform non-atomic multi-key operations using mset_nonatomic and mget_nonatomic when keys are not mapped to the same slot. The client splits the keys into different slots.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/clustering.rst#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# Non-atomic multi-key operations splits the keys into different slots\n>>> rc.mset_nonatomic({'foo': 'value1', 'bar': 'value2', 'zzz': 'value3'})\n>>> rc.mget_nonatomic('foo', 'bar', 'zzz')\n[b'value1', b'value2', b'value3']\n```\n\n----------------------------------------\n\nTITLE: Reading Data from Stream Group with 2nd Consumer\nDESCRIPTION: This snippet shows how a second consumer within the same stream group will receive undelivered messages. It reads two messages from the stream associated with group1 using consumer name 'c2'.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/examples/redis-stream-example.ipynb#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n# read some messages on group1 with consumer 'c' \nd = r.xreadgroup( groupname=group1, consumername='c2', block=10,\n                  count=2, streams={stream_key:'>'})\nprint_xreadgroup_reply( d )\n```\n\n----------------------------------------\n\nTITLE: Connecting to Redis via URL String - Python\nDESCRIPTION: Connects to a Redis instance using a URL string that specifies SSL parameters. The URL includes options for disabling certificate verification (ssl_cert_reqs=none), enabling response decoding (decode_responses=True), and setting a health check interval (health_check_interval=2).\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/examples/ssl_connection_examples.ipynb#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport redis\n\nr = redis.from_url(\"rediss://localhost:6666?ssl_cert_reqs=none&decode_responses=True&health_check_interval=2\")\nr.ping()\n```\n\n----------------------------------------\n\nTITLE: Running the Redis Client Example (Python)\nDESCRIPTION: This command executes the `main.py` script, which contains the Redis client example with OpenTelemetry instrumentation. The script connects to Redis, performs some operations, and exports traces to Uptrace. The output includes a link to view the trace in the Uptrace UI.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/examples/opentelemetry/README.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npython3 main.py\n```\n\n----------------------------------------\n\nTITLE: Ack all Messages on Stream Group\nDESCRIPTION: This snippet acknowledges all messages in group1. It reads a large number of messages and then acknowledges them using xack. Afterwards it prints out any remaining pending messages on group1, if any.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/examples/redis-stream-example.ipynb#_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nd = r.xreadgroup( groupname=group1, consumername='c', block=10,\n                      count=100, streams={stream_key:'>'})\nprint_xreadgroup_reply( d, group=group1, run=toack)\nprint_pending_info( ((stream_key,group1),) )\n```\n\n----------------------------------------\n\nTITLE: Deleting Messages from Stream (xdel)\nDESCRIPTION: This snippet demonstrates how to delete messages from a Redis stream using the xdel command. It first reads all messages from the stream, then iterates through the messages and deletes each one individually.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/examples/redis-stream-example.ipynb#_snippet_20\n\nLANGUAGE: python\nCODE:\n```\ns1 = r.xread( streams={stream_key:0} )\nfor streams in s1:\n    stream_name, messages = streams\n    # del all ids from the message list\n    [ r.xdel( stream_name, i[0] ) for i in messages ]\n```\n\n----------------------------------------\n\nTITLE: Add Samples to TimeSeries\nDESCRIPTION: This snippet adds samples to a time series using the `ts.add()` method. It demonstrates adding samples with explicit timestamps (in milliseconds) and using '*' to let the server set the timestamp. The samples have values of 1, 2, and 3 respectively.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/examples/timeseries_examples.ipynb#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nts.add(\"ts_key\", 1657265437756, 1)\nts.add(\"ts_key\", \"1657265437757\", 2)\nts.add(\"ts_key\", \"*\", 3)\n```\n\n----------------------------------------\n\nTITLE: Connecting with Shared Connection Pool\nDESCRIPTION: This snippet demonstrates how to connect to Redis using a shared `ConnectionPool`. Multiple `Redis` instances share the same connection pool.  The connection pool is disconnected explicitly after all clients are closed.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/examples/asyncio_examples.ipynb#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport redis.asyncio as redis\n\npool = redis.ConnectionPool.from_url(\"redis://localhost\")\nclient1 = redis.Redis(connection_pool=pool)\nclient2 = redis.Redis(connection_pool=pool)\nawait client1.aclose()\nawait client2.aclose()\nawait pool.aclose()\n```\n\n----------------------------------------\n\nTITLE: Connecting and Disconnecting with Asyncio Redis\nDESCRIPTION: This snippet demonstrates how to connect to a Redis server using `redis.asyncio` and explicitly disconnect using `aclose`. It uses the default internal connection pool created on `redis.Redis()` and closes it automatically when `Redis.aclose` is called.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/examples/asyncio_examples.ipynb#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport redis.asyncio as redis\n\nclient = redis.Redis()\nprint(f\"Ping successful: {await client.ping()}\")\nawait client.aclose()\n```\n\n----------------------------------------\n\nTITLE: Connecting to Redis Server with redis-py\nDESCRIPTION: This snippet establishes a connection to a Redis server using the redis-py library. The `decode_responses=True` parameter ensures that data retrieved from Redis is automatically decoded into strings. It imports the redis library and pings the server to confirm the connection.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/examples/set_and_get_examples.ipynb#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport redis \n\nr = redis.Redis(decode_responses=True)\nr.ping()\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry with Console Exporter (Python)\nDESCRIPTION: This snippet configures OpenTelemetry with a console exporter, which allows spans to be printed to the console. It sets up a tracer provider and adds a batch span processor with the console span exporter.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/examples/opentelemetry_api_examples.ipynb#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom opentelemetry import trace\nfrom opentelemetry.sdk.trace import TracerProvider\nfrom opentelemetry.sdk.trace.export import BatchSpanProcessor, ConsoleSpanExporter\n\ntrace.set_tracer_provider(TracerProvider())\ntrace.get_tracer_provider().add_span_processor(\n    BatchSpanProcessor(ConsoleSpanExporter())\n)\n```\n\n----------------------------------------\n\nTITLE: Connecting to Redis (localhost)\nDESCRIPTION: This snippet demonstrates how to connect to a Redis server running on localhost with the default port (6379). It imports the `redis` library, creates a `Redis` object with default parameters, and then uses the `ping()` method to verify the connection.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/index.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport redis\nr = redis.Redis()\nr.ping()\n```\n\n----------------------------------------\n\nTITLE: Sentinel Client Usage\nDESCRIPTION: This snippet demonstrates how to use the Sentinel client in `redis.asyncio` to connect to Redis instances. It retrieves a master client for a specific service monitored by Sentinel and performs basic operations.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/examples/asyncio_examples.ipynb#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\n\nfrom redis.asyncio.sentinel import Sentinel\n\n\nsentinel = Sentinel([(\"localhost\", 26379), (\"sentinel2\", 26379)])\nr = sentinel.master_for(\"mymaster\")\n\nok = await r.set(\"key\", \"value\")\nassert ok\nval = await r.get(\"key\")\nassert val == b\"value\"\n```\n\n----------------------------------------\n\nTITLE: Enable client-side caching with default config\nDESCRIPTION: This code snippet shows how to enable client-side caching with the default configuration in redis-py when connecting to Redis. The protocol must be set to 3 for RESP3, and CacheConfig must be passed to the cache_config argument of Redis.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/resp3_features.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> import redis\n>>> from redis.cache import CacheConfig\n>>> r = redis.Redis(host='localhost', port=6379, protocol=3, cache_config=CacheConfig())\n```\n\n----------------------------------------\n\nTITLE: Installing redis-py with pip\nDESCRIPTION: This command installs the redis-py library using pip, the Python package installer. It allows Python applications to connect to and interact with a Redis server. The second command installs redis-py with hiredis support, which provides a compiled response parser for improved performance.\nSOURCE: https://github.com/redis/redis-py/blob/master/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install redis\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install \"redis[hiredis]\"\n```\n\n----------------------------------------\n\nTITLE: Running PubSub in a Separate Thread (redis-py)\nDESCRIPTION: This snippet demonstrates how to run the PubSub event loop in a separate thread using run_in_thread(). It allows for non-blocking message handling. It also demonstrates stopping the thread.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/advanced_features.rst#_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n>>> p.subscribe(**{'my-channel': my_handler})\n>>> thread = p.run_in_thread(sleep_time=0.001)\n# the event loop is now running in the background processing messages\n# when it's time to shut it down...\n>>> thread.stop()\n```\n\n----------------------------------------\n\nTITLE: Adding Data to 2nd Redis Stream\nDESCRIPTION: This snippet adds data to a second Redis stream, identified by stream2_key. It iterates 10 times, adding a new entry to the stream with a value. This demonstrates how to manage multiple streams within the same Redis database.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/examples/redis-stream-example.ipynb#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfor i in range(1000,1010):\n    r.xadd( stream2_key, { 'v': i } )\nprint( f\"stream length: {r.xlen( stream2_key )}\")\n```\n\n----------------------------------------\n\nTITLE: Connecting to Redis with TLS Version - Python\nDESCRIPTION: Establishes an SSL connection to Redis and specifies a minimum TLS version.  It initializes a Redis client with SSL enabled and sets the ssl_min_version parameter to ssl.TLSVersion.TLSv1_3.  It then executes a ping command to verify the connection.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/examples/ssl_connection_examples.ipynb#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport redis\nimport ssl\n\nr = redis.Redis(\n    host=\"localhost\",\n    port=6666,\n    ssl=True,\n    ssl_min_version=ssl.TLSVersion.TLSv1_3,\n    ssl_cert_reqs=\"none\",\n)\nr.ping()\n```\n\n----------------------------------------\n\nTITLE: Redis Cluster PubSub in Python\nDESCRIPTION: This code demonstrates how to use Redis Cluster PubSub. It shows how to subscribe to a channel using a RedisCluster instance. Note that pattern subscribe/publish has limitations due to key slots.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/clustering.rst#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n>>> p1 = rc.pubsub()\n# p1 connection will be set to the node that holds 'foo' keyslot\n>>> p1.subscribe('foo')\n# p2 connection will be set to node 'localhost:6379'\n>>> p2 = rc.pubsub(rc.get_node('localhost', 6379))\n```\n\n----------------------------------------\n\nTITLE: Transactions (Multi/Exec) with Pipeline\nDESCRIPTION: This snippet demonstrates how to perform transactions (Multi/Exec) using the `pipeline` method in `redis.asyncio`. It sets multiple key-value pairs within a transaction and executes them atomically.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/examples/asyncio_examples.ipynb#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport redis.asyncio as redis\n\nr = await redis.from_url(\"redis://localhost\")\nasync with r.pipeline(transaction=True) as pipe:\n    ok1, ok2 = await (pipe.set(\"key1\", \"value1\").set(\"key2\", \"value2\").execute())\nassert ok1\nassert ok2\n```\n\n----------------------------------------\n\nTITLE: Add Samples to Multiple TimeSeries\nDESCRIPTION: This snippet adds samples to multiple time series simultaneously using the `ts.madd()` method. It takes a list of tuples, where each tuple contains the time series key, timestamp ('*' for server time), and value.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/examples/timeseries_examples.ipynb#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nts.madd([(\"ts_key1\", \"*\", 1), (\"ts_key2\", \"*\", 2)])\n```\n\n----------------------------------------\n\nTITLE: Redis Pub/Sub with redis-py\nDESCRIPTION: This example demonstrates how to use Redis Pub/Sub with redis-py to subscribe to channels and receive messages. It creates a Redis client, gets a PubSub instance, subscribes to channels, and then retrieves a message.\nSOURCE: https://github.com/redis/redis-py/blob/master/README.md#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> r = redis.Redis(...)\n>>> p = r.pubsub()\n>>> p.subscribe('my-first-channel', 'my-second-channel', ...)\n>>> p.get_message()\n{'pattern': None, 'type': 'subscribe', 'channel': b'my-second-channel', 'data': 1}\n```\n\n----------------------------------------\n\nTITLE: Using Connection Pools in redis-py\nDESCRIPTION: This code demonstrates how to use connection pools with redis-py.  A connection pool manages a set of connections to a Redis server, allowing for efficient reuse of connections. The code creates a connection pool and then passes it to the Redis client.\nSOURCE: https://github.com/redis/redis-py/blob/master/README.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> pool = redis.ConnectionPool(host='localhost', port=6379, db=0)\n>>> r = redis.Redis(connection_pool=pool)\n```\n\n----------------------------------------\n\nTITLE: Creating a PubSub Instance - Redis Python\nDESCRIPTION: This snippet demonstrates how to create a PubSub instance in redis-py. First, a Redis client is initialized. Then, the `pubsub()` method is called on the client instance to create a PubSub object, which is used for subscribing to channels and patterns.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/advanced_features.rst#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n>>> r = redis.Redis(...)\n>>> p = r.pubsub()\n```\n\n----------------------------------------\n\nTITLE: Adding Data to Redis Stream (xadd)\nDESCRIPTION: This snippet shows how to add data to a Redis stream using the xadd command. It iterates 10 times, adding a new entry to the stream with a timestamp and a value. Finally, it prints the stream length using xlen.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/examples/redis-stream-example.ipynb#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfor i in range(0,10):\n    r.xadd( stream_key, { 'ts': time(), 'v': i } )\nprint( f\"stream length: {r.xlen( stream_key )}\")\n```\n\n----------------------------------------\n\nTITLE: OpenTelemetry API: Creating a Span\nDESCRIPTION: This Python code shows how to create a span using the OpenTelemetry API to measure the duration of a specific operation. It uses a tracer to start a span and sets the span kind to \"CLIENT\".\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/opentelemetry.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom opentelemetry import trace\n\ntracer = trace.get_tracer(\"app_or_package_name\", \"1.0.0\")\n\n# Create a span with name \"operation-name\" and kind=\"server\".\nwith tracer.start_as_current_span(\"operation-name\", kind=trace.SpanKind.CLIENT) as span:\n    do_some_work()\n```\n\n----------------------------------------\n\nTITLE: Connecting with URL Scheme\nDESCRIPTION: This snippet demonstrates how to connect to a Redis instance using a URL scheme with `redis.from_url`. It uses the `redis://` scheme to create a TCP socket connection and passes parameters as URL parameters. decode_responses is set to True.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/examples/asyncio_examples.ipynb#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport redis.asyncio as redis\nurl_connection = redis.from_url(\"redis://localhost:6379?decode_responses=True\")\nurl_connection.ping()\n```\n\n----------------------------------------\n\nTITLE: Importing OpenAI Library and Setting API Key\nDESCRIPTION: This code snippet imports the OpenAI library and sets the OpenAI API key.  You must replace 'YOUR OPENAI API KEY' with your actual API key obtained from the OpenAI platform.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/examples/search_vector_similarity_examples.ipynb#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport openai\n\n# set your OpenAI API key - get one at https://platform.openai.com\nopenai.api_key = \"YOUR OPENAI API KEY\"\n```\n\n----------------------------------------\n\nTITLE: Redis Stream Basic Configuration\nDESCRIPTION: This snippet defines basic configuration parameters for interacting with Redis streams, including the Redis host, stream keys, and group names. These variables are used throughout the examples to configure the Redis connection and stream operations.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/examples/redis-stream-example.ipynb#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nredis_host = \"redis\"\nstream_key = \"skey\"\nstream2_key = \"s2key\"\ngroup1 = \"grp1\"\ngroup2 = \"grp2\"\n```\n\n----------------------------------------\n\nTITLE: Connecting to Redis via ConnectionPool - Python\nDESCRIPTION: Connects to a Redis instance via SSL using a ConnectionPool. It creates a ConnectionPool configured to use redis.SSLConnection and disables certificate verification. Then it creates a StrictRedis client using the connection pool and verifies the connection with a ping.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/examples/ssl_connection_examples.ipynb#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport redis\n\nredis_pool = redis.ConnectionPool(\n    host=\"localhost\",\n    port=6666,\n    connection_class=redis.SSLConnection,\n    ssl_cert_reqs=\"none\",\n)\n\nr = redis.StrictRedis(connection_pool=redis_pool)\nr.ping()\n```\n\n----------------------------------------\n\nTITLE: Creating Child Spans with Nested Blocks (Python)\nDESCRIPTION: This snippet shows how to create child spans by using nested `with` blocks. Each nested block creates a new span that is automatically associated as a child of the parent span.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/examples/opentelemetry_api_examples.ipynb#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nwith tracer.start_as_current_span(\"operation-name\") as span:\n    time.sleep(0.1)\n    with tracer.start_as_current_span(\"child-span\") as span:\n        span.set_attribute(\"foo\", \"bar\")\n```\n\n----------------------------------------\n\nTITLE: Starting Redis with Docker\nDESCRIPTION: This command starts a Redis instance using Docker, mapping port 6379 on the host to port 6379 in the container.  This makes the Redis instance accessible from the host machine. It uses the redis/redis-stack:latest image, which includes Redis server.\nSOURCE: https://github.com/redis/redis-py/blob/master/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -p 6379:6379 -it redis/redis-stack:latest\n```\n\n----------------------------------------\n\nTITLE: Connecting to Redis\nDESCRIPTION: This snippet demonstrates how to establish a connection to a Redis server using the redis-py library. It imports the necessary modules and creates a Redis client instance, then uses the ping() method to verify the connection.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/examples/redis-stream-example.ipynb#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport redis\nfrom time import time\nfrom redis.exceptions import ConnectionError, DataError, NoScriptError, RedisError, ResponseError\n\nr = redis.Redis( redis_host )\nr.ping()\n```\n\n----------------------------------------\n\nTITLE: Pipeline without Transactions - Redis Python\nDESCRIPTION: This snippet demonstrates how to create a Redis pipeline without atomic transactions. The `transaction=False` argument is passed to the `pipeline()` method. This disables the atomic nature of the pipeline, but still provides the benefits of command buffering.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/advanced_features.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> pipe = r.pipeline(transaction=False)\n```\n\n----------------------------------------\n\nTITLE: Connecting to Redis Cluster with RESP3\nDESCRIPTION: This snippet shows how to connect to an OSS Redis Cluster with RESP3 enabled.  The protocol parameter is set to 3 when initializing the RedisCluster object. A ping is then executed to verify the connection.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/resp3_features.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> from redis.cluster import RedisCluster, ClusterNode\n>>> r = RedisCluster(startup_nodes=[ClusterNode('localhost', 6379), ClusterNode('localhost', 6380)], protocol=3)\n>>> r.ping()\n```\n\n----------------------------------------\n\nTITLE: Add Samples with Labels\nDESCRIPTION: This snippet demonstrates how to add samples to a time series with associated labels. The `ts.add()` method is used, and labels are specified as a dictionary. This allows associating metadata with each sample.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/examples/timeseries_examples.ipynb#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nts.add(\"ts_key2\", \"*\", 2,  labels={\"label1\": 1, \"label2\": 2})\nts.add(\"ts_key2\", \"*\", 2,  labels={\"label1\": 3, \"label2\": 4})\n```\n\n----------------------------------------\n\nTITLE: Executing a Script with a Different Redis Instance\nDESCRIPTION: This snippet demonstrates how to execute a registered Lua script using a different Redis client instance. It sets a value for a key in the new instance and then calls the script with the key, multiplier, and new client instance.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/lua_scripting.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> r2 = redis.Redis('redis2.example.com')\n>>> r2.set('foo', 3)\n>>> multiply(keys=['foo'], args=[5], client=r2)\n15\n```\n\n----------------------------------------\n\nTITLE: Handle Duplicate Timestamps (Last Policy)\nDESCRIPTION: This snippet demonstrates how to handle duplicate timestamps by using the \"LAST\" duplicate policy. This policy allows overwriting the existing sample with the same timestamp, effectively keeping only the last added sample.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/examples/timeseries_examples.ipynb#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n# using policy \"LAST\", we keep the last added sample\nts.add(\"ts_key\", 123456789, 2, duplicate_policy=\"LAST\")\nts.range(\"ts_key\", \"-\", \"+\")\n```\n\n----------------------------------------\n\nTITLE: Connecting with UsernamePasswordCredentialProvider in Python\nDESCRIPTION: Connects to Redis using a `UsernamePasswordCredentialProvider` to supply the username and password. This allows for a more structured way to handle credentials. The `credential_provider` argument is passed to the `redis.Redis()` constructor.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/examples/connection_examples.ipynb#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport redis\n\ncreds_provider = redis.UsernamePasswordCredentialProvider(\"username\", \"password\")\nuser_connection = redis.Redis(host=\"localhost\", port=6379, credential_provider=creds_provider)\nuser_connection.ping()\n```\n\n----------------------------------------\n\nTITLE: Recording Attributes in a Span (Python)\nDESCRIPTION: This snippet shows how to record attributes within a span using `span.set_attribute`. It checks if the span is recording before setting the attributes to avoid unnecessary overhead when sampling is disabled.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/examples/opentelemetry_api_examples.ipynb#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nwith tracer.start_as_current_span(\"operation-name\") as span:\n    if span.is_recording():\n        span.set_attribute(\"enduser.id\", \"jupyter\")\n        span.set_attribute(\"enduser.email\", \"jupyter@redis-py\")\n    time.sleep(1)\n```\n\n----------------------------------------\n\nTITLE: OpenTelemetry API: Recording Span Attributes\nDESCRIPTION: This Python code demonstrates how to record contextual information as attributes on a span using the OpenTelemetry API. Attributes can provide details about the operation being traced, such as HTTP method and route.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/opentelemetry.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nif span.is_recording():\n    span.set_attribute(\"http.method\", \"GET\")\n    span.set_attribute(\"http.route\", \"/projects/:id\")\n```\n\n----------------------------------------\n\nTITLE: Setting Multiple Values from a Dictionary in Redis with redis-py\nDESCRIPTION: This snippet demonstrates how to set multiple key-value pairs from a dictionary using the `mset` method. Each key-value pair in the dictionary is stored as a separate entry in Redis.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/examples/set_and_get_examples.ipynb#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndict_data = {\n    \"employee_name\": \"Adam Adams\",\n    \"employee_age\": 30,\n    \"position\": \"Software Engineer\",\n}\n\nr.mset(dict_data)\n```\n\n----------------------------------------\n\nTITLE: Handle Duplicate Timestamps (Default Block)\nDESCRIPTION: This snippet demonstrates the default behavior for handling duplicate timestamps when adding samples to a time series. By default, adding a sample with an existing timestamp results in an error, preventing duplicate entries.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/examples/timeseries_examples.ipynb#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nts.add(\"ts_key\", 123456789, 1)\ntry:\n    ts.add(\"ts_key\", 123456789, 2)\nexcept Exception as err:\n    print(err)\n```\n\n----------------------------------------\n\nTITLE: Connecting with URL Scheme in Python\nDESCRIPTION: Connects to Redis using a URL scheme, which allows specifying connection parameters in a URL string. The `redis.from_url()` function parses the URL and creates a connection. Supported schemes include `redis://`, `rediss://`, and `unix://`.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/examples/connection_examples.ipynb#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nurl_connection = redis.from_url(\"redis://localhost:6379?decode_responses=True&health_check_interval=2\")\nurl_connection.ping()\n```\n\n----------------------------------------\n\nTITLE: Atomic Multi-Key Operations in Python\nDESCRIPTION: This snippet demonstrates how to perform atomic multi-key operations using mset and mget when all keys are mapped to the same slot using hash tags.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/clustering.rst#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# Atomic operations can be used when all keys are mapped to the same slot\n>>> rc.mset({'{foo}1': 'bar1', '{foo}2': 'bar2'})\n>>> rc.mget('{foo}1', '{foo}2')\n[b'bar1', b'bar2']\n```\n\n----------------------------------------\n\nTITLE: Retrieving PubSub Information (redis-py)\nDESCRIPTION: This snippet shows how to retrieve information about PubSub channels, number of subscribers, and number of patterns using r.pubsub_channels(), r.pubsub_numsub(), and r.pubsub_numpat().\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/advanced_features.rst#_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n>>> r.pubsub_channels()\n[b'foo', b'bar']\n>>> r.pubsub_numsub('foo', 'bar')\n[(b'foo', 9001), (b'bar', 42)]\n>>> r.pubsub_numsub('baz')\n[(b'baz', 0)]\n>>> r.pubsub_numpat()\n1204\n```\n\n----------------------------------------\n\nTITLE: Reading from Stream Group After Deletion\nDESCRIPTION: This snippet demonstrates how a stream group can read messages after messages have been deleted from the stream. It reads a number of messages, if any are available.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/examples/redis-stream-example.ipynb#_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nd2 = r.xreadgroup( groupname=group2, consumername='c', block=10,\n                   count=2, streams={stream_key:'>',stream2_key:'>'})\nprint_xreadgroup_reply( d2 )\n```\n\n----------------------------------------\n\nTITLE: Aggregation with Sorting (redis-py)\nDESCRIPTION: This snippet shows how to perform aggregation with sorting using `AggregateRequest`. It constructs an aggregation request that searches for documents containing \"Paul\" and sorts the results by the `@age` field.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/examples/search_json_examples.ipynb#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nreq = aggregations.AggregateRequest(\"Paul\").sort_by(\"@age\")\nr.ft().aggregate(req).rows\n```\n\n----------------------------------------\n\nTITLE: Installing Packages Inside a Docker Container\nDESCRIPTION: This snippet demonstrates how to install packages inside a Docker container using `apt`. First, a bash session inside the container is required before running the `apt` commands. Replace `<package>` with the name of the package you want to install.\nSOURCE: https://github.com/redis/redis-py/blob/master/CONTRIBUTING.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\napt update && apt install <package>\n```\n\n----------------------------------------\n\nTITLE: Connecting with Host, Port, and Credentials in Python\nDESCRIPTION: Connects to a Redis instance by explicitly specifying the host, port, username, and password.  `decode_responses=True` ensures that responses are decoded. This example demonstrates explicit credential-based authentication.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/examples/connection_examples.ipynb#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport redis\n\nuser_connection = redis.Redis(host='localhost', port=6380, username='dvora', password='redis', decode_responses=True)\nuser_connection.ping()\n```\n\n----------------------------------------\n\nTITLE: Connecting to Redis via SSL - Python\nDESCRIPTION: Establishes a basic SSL connection to a Redis instance. It initializes a Redis client with SSL enabled and sets the ssl_cert_reqs parameter to 'none', disabling certificate verification. It then executes a ping command to verify the connection.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/examples/ssl_connection_examples.ipynb#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport redis\n\nr = redis.Redis(\n    host='localhost',\n    port=6666,\n    ssl=True,\n    ssl_cert_reqs=\"none\",\n)\nr.ping()\n```\n\n----------------------------------------\n\nTITLE: Installing Development Dependencies with Pip\nDESCRIPTION: This snippet demonstrates how to set up a virtual environment, activate it, and install the necessary development dependencies for redis-py using pip. It ensures a consistent and isolated environment for development and testing.\nSOURCE: https://github.com/redis/redis-py/blob/master/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython -m venv .venv\nsource .venv/bin/activate\npip install -r dev_requirements.txt\npip install -e .[jwt]\n```\n\n----------------------------------------\n\nTITLE: Creating a Span using the Tracer (Python)\nDESCRIPTION: This snippet demonstrates how to create a span using the OpenTelemetry tracer. It measures the timing of an operation using a `with` statement to automatically start and end the span.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/examples/opentelemetry_api_examples.ipynb#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport time\n\ntracer = trace.get_tracer(\"app_or_package_name\", \"1.0.0\")\n\n# measure the timing of the operation\nwith tracer.start_as_current_span(\"operation-name\") as span:\n    time.sleep(1)\n```\n\n----------------------------------------\n\nTITLE: Get Samples Matching Labels\nDESCRIPTION: This snippet retrieves samples from time series that match specific labels using the `ts.mget()` method. It demonstrates how to filter samples based on label-value pairs and how to retrieve the label-value pairs along with the sample data.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/examples/timeseries_examples.ipynb#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nts.mget([\"label1=1\"])\n```\n\nLANGUAGE: python\nCODE:\n```\nts.mget([\"label1=1\"], with_labels=True)\n```\n\n----------------------------------------\n\nTITLE: Connecting to a Default Redis Instance in Python\nDESCRIPTION: Establishes a connection to a Redis instance running on the default host (localhost) and port (6379). It uses the `redis.Redis()` constructor with no arguments, then tests the connection with `connection.ping()`. This assumes a local Redis server is running without authentication.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/examples/connection_examples.ipynb#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport redis\n\nconnection = redis.Redis()\nconnection.ping()\n```\n\n----------------------------------------\n\nTITLE: Enable client-side caching with custom implementation\nDESCRIPTION: This snippet shows how to enable caching with custom cache implementation. The protocol parameter should be set to 3. `CacheImpl` should implement a `CacheInterface` specified in `redis.cache` package.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/resp3_features.rst#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n>>> import redis\n>>> from foo.bar import CacheImpl\n>>> r = redis.Redis(host='localhost', port=6379, protocol=3, cache=CacheImpl())\n```\n\n----------------------------------------\n\nTITLE: Defining Vector Dimensions and Creating Index\nDESCRIPTION: This code snippet defines the vector dimensions and calls the `create_index` function to create the Redis vector index. It sets the `VECTOR_DIMENSIONS` variable to 1536 and passes it to the `create_index` function.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/examples/search_vector_similarity_examples.ipynb#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# define vector dimensions\nVECTOR_DIMENSIONS = 1536\n\n# create the index\ncreate_index(vector_dimensions=VECTOR_DIMENSIONS)\n```\n\n----------------------------------------\n\nTITLE: Starting Services with Docker (Shell)\nDESCRIPTION: These commands start the Redis server and Uptrace services using Docker Compose, and then display the logs for the Uptrace service. This sets up the necessary infrastructure for monitoring Redis with OpenTelemetry.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/examples/opentelemetry/README.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndocker-compose up -d\ndocker-compose logs uptrace\n```\n\n----------------------------------------\n\nTITLE: Cleaning Docker Environment with Invoke\nDESCRIPTION: This snippet shows how to clean up the Docker-based development environment using the `invoke` task runner. It removes any running containers and resources that were created for testing purposes.\nSOURCE: https://github.com/redis/redis-py/blob/master/CONTRIBUTING.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ninvoke clean\n```\n\n----------------------------------------\n\nTITLE: Changing the Span Kind (Python)\nDESCRIPTION: This snippet demonstrates how to change the span kind when starting a span.  The `kind` parameter of `start_as_current_span` is used to specify the span's role, such as `trace.SpanKind.SERVER`.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/examples/opentelemetry_api_examples.ipynb#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nwith tracer.start_as_current_span(\"operation-name\", kind=trace.SpanKind.SERVER) as span:\n    time.sleep(0.1)\n```\n\n----------------------------------------\n\nTITLE: Create TimeSeries with Retention\nDESCRIPTION: This snippet creates a time series with a specified retention period using the `ts.create()` method and `retention_msecs` parameter.  This limits the duration for which samples are stored in the time series.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/examples/timeseries_examples.ipynb#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nretention_time = 1000\nts.create(\"ts_key_ret\", retention_msecs=retention_time)\n```\n\n----------------------------------------\n\nTITLE: Executing Redis Pipeline Python\nDESCRIPTION: This snippet executes the commands added to the pipeline using the `execute()` method. The responses from the Redis server are returned as a list, with each element corresponding to the result of each command in the order they were added to the pipeline.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/examples/pipeline_examples.ipynb#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\npipe.execute()\n```\n\n----------------------------------------\n\nTITLE: Use TimeSeries to Track Value Increments\nDESCRIPTION: This snippet demonstrates how to use RedisTimeSeries to track increments of a value over time. It initializes a time series with a starting value of 0 and then increments the value by 1 in a loop, adding a new sample for each increment.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/examples/timeseries_examples.ipynb#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nts.add(\"ts_key_incr\", \"*\", 0)\n```\n\nLANGUAGE: python\nCODE:\n```\nfor _ in range(10):\n    ts.incrby(\"ts_key_incr\", 1)\n    # sleeping a bit so the timestamp are not duplicates\n    time.sleep(0.01)\n```\n\nLANGUAGE: python\nCODE:\n```\nts.range(\"ts_key_incr\", \"-\", \"+\")\n```\n\n----------------------------------------\n\nTITLE: Getting Multiple Values from Redis with redis-py\nDESCRIPTION: This snippet retrieves the values of multiple keys using the `mget` method. If a key does not exist, Redis returns `None` for that key.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/examples/set_and_get_examples.ipynb#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nr.mget(\"employee_name\", \"employee_age\", \"position\", \"non_existing\")\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies (Shell)\nDESCRIPTION: This command installs the dependencies required for the redis-py OpenTelemetry example. The `-e .` flag installs the package in editable mode, which allows changes to the source code to be reflected immediately without re-installing.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/examples/opentelemetry/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npip install -e .\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Invoke\nDESCRIPTION: This snippet shows how to execute all tests for the redis-py project using the `invoke` task runner. It ensures code quality and helps identify potential issues before submitting changes.\nSOURCE: https://github.com/redis/redis-py/blob/master/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ninvoke tests\n```\n\n----------------------------------------\n\nTITLE: Checking Redis Connection Python\nDESCRIPTION: This snippet checks if the Redis server is running by using the `ping()` method. It establishes a connection to Redis using `redis.Redis()` and attempts to ping the server. It assumes Redis is running on the default host and port and decodes the responses.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/examples/pipeline_examples.ipynb#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport redis \n\nr = redis.Redis(decode_responses=True)\nr.ping()\n```\n\n----------------------------------------\n\nTITLE: Setting a Value with Expiration in Redis with redis-py\nDESCRIPTION: This snippet sets a value with an expiration time using the `setex` method. The key 'important_key' is assigned the value 'important_value' and will expire after 100 seconds.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/examples/set_and_get_examples.ipynb#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nr.setex(\"important_key\", 100, \"important_value\")\n```\n\n----------------------------------------\n\nTITLE: Create a JSON object with RedisJSON in Python\nDESCRIPTION: This snippet demonstrates how to create a JSON object using the RedisJSON module with redis-py. It initializes a Redis connection and sets a JSON object at the key 'mykey' with a nested structure.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/redismodules.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport redis\nr = redis.Redis()\nr.json().set(\"mykey\", \".\", {\"hello\": \"world\", \"i am\": [\"a\", \"json\", \"object!\"]})\n```\n\n----------------------------------------\n\nTITLE: Specifying Target Nodes with ClusterNode Objects in Python\nDESCRIPTION: This snippet demonstrates specifying target nodes using ClusterNode objects directly. It retrieves a specific node and executes commands on it.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/clustering.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> node = rc.get_node('localhost', 6379)\n>>> # Get the keys only for that specific node\n>>> rc.keys(target_nodes=node)\n>>> # get Redis info from a subset of primaries\n>>> subset_primaries = [node for node in rc.get_primaries() if node.port > 6378]\n>>> rc.info(target_nodes=subset_primaries)\n```\n\n----------------------------------------\n\nTITLE: Connecting with Custom Connection Pool\nDESCRIPTION: This snippet demonstrates how to connect to Redis using a custom `ConnectionPool`. The `Redis` client takes ownership of the connection pool, ensuring it is disconnected when the client is closed.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/examples/asyncio_examples.ipynb#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport redis.asyncio as redis\n\npool = redis.ConnectionPool.from_url(\"redis://localhost\")\nclient = redis.Redis.from_pool(pool)\nawait client.aclose()\n```\n\n----------------------------------------\n\nTITLE: Redis Connection and Health Check\nDESCRIPTION: This snippet establishes a connection to a Redis server using the redis-py library and performs a ping command to verify the connection. It initializes a Redis client and a RedisTimeSeries client, and confirms that the server is running.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/examples/timeseries_examples.ipynb#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport redis \n\nr = redis.Redis(decode_responses=True)\nts = r.ts()\n\nr.ping()\n```\n\n----------------------------------------\n\nTITLE: Connecting with RESP3 using async redis-py\nDESCRIPTION: This code shows how to connect to Redis asynchronously with RESP3. The protocol parameter is set to 3. A ping is then performed to verify the connection using await.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/resp3_features.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> import redis.asyncio as redis\n>>> r = redis.Redis(host='localhost', port=6379, protocol=3)\n>>> await r.ping()\n```\n\n----------------------------------------\n\nTITLE: Connecting to Sentinel in Python\nDESCRIPTION: Connects to a Redis Sentinel instance to discover the master. This example uses the `redis.sentinel.Sentinel` class. It retrieves the master's address using `sentinel.discover_master()`. Requires a running Sentinel instance.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/examples/connection_examples.ipynb#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom redis.sentinel import Sentinel\nsentinel = Sentinel([('localhost', 26379)], socket_timeout=0.1)\nsentinel.discover_master(\"redis-py-test\")\n```\n\n----------------------------------------\n\nTITLE: Connecting with Decoding Responses in Python\nDESCRIPTION: Connects to Redis and automatically decodes the responses to strings using `decode_responses=True`. It demonstrates how to configure the connection to return strings instead of byte strings. A `ping()` command verifies the connection.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/examples/connection_examples.ipynb#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport redis\n\ndecoded_connection = redis.Redis(decode_responses=True)\ndecoded_connection.ping()\n```\n\n----------------------------------------\n\nTITLE: Connecting with RESP3 using URL scheme\nDESCRIPTION: This code snippet demonstrates connecting to Redis with RESP3 using a URL. The protocol parameter is passed as part of the query string in the URL. The connection is then verified with a ping.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/resp3_features.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> import redis\n>>> r = redis.from_url(\"redis://localhost:6379?protocol=3\")\n>>> r.ping()\n```\n\n----------------------------------------\n\nTITLE: Create Multiple TimeSeries with Labels\nDESCRIPTION: This snippet shows how to create multiple time series, one without labels and another with labels. The `ts.create()` method is used to create the time series, and labels are specified as a dictionary.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/examples/timeseries_examples.ipynb#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nts.create(\"ts_key1\")\nts.create(\"ts_key2\", labels={\"label1\": 1, \"label2\": 2})\n```\n\n----------------------------------------\n\nTITLE: Enabling RESP Version 3\nDESCRIPTION: This snippet demonstrates how to enable RESP version 3 protocol when creating a Redis client using `redis.asyncio`. This requires setting the `protocol` parameter to 3 during initialization.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/examples/asyncio_examples.ipynb#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport redis.asyncio as redis\n\nclient = redis.Redis(protocol=3)\nawait client.aclose()\nawait client.ping()\n```\n\n----------------------------------------\n\nTITLE: Automatically Recording Exceptions in a Span (Python)\nDESCRIPTION: This snippet illustrates that exceptions raised within a span are automatically recorded by OpenTelemetry. No explicit handling is required to capture the exception information.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/examples/opentelemetry_api_examples.ipynb#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nwith tracer.start_as_current_span(\"operation-name\", kind=trace.SpanKind.SERVER) as span:\n    time.sleep(0.1)\n    raise ValueError\n```\n\n----------------------------------------\n\nTITLE: Running all tests including linters with Invoke\nDESCRIPTION: This snippet shows how to execute all tests and linters for the redis-py project using the `invoke` task runner. It ensures code quality and style guidelines compliance.\nSOURCE: https://github.com/redis/redis-py/blob/master/CONTRIBUTING.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ninvoke all-tests\n```\n\n----------------------------------------\n\nTITLE: Executing a Registered Lua Script\nDESCRIPTION: This snippet shows how to execute a previously registered Lua script using the returned Script instance. It sets a value for a key and then calls the script with the key and a multiplier as arguments.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/lua_scripting.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> r.set('foo', 2)\n>>> multiply(keys=['foo'], args=[5])\n10\n```\n\n----------------------------------------\n\nTITLE: Registering a Lua Script in Redis\nDESCRIPTION: This snippet demonstrates how to register a Lua script in Redis using redis-py's `register_script` function. The script multiplies the value of a given key by a specified multiplier.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/lua_scripting.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> r = redis.Redis()\n>>> lua = \"\"\"\n... local value = redis.call('GET', KEYS[1])\n... value = tonumber(value)\n... return value * ARGV[1]\"\"\"\n>>> multiply = r.register_script(lua)\n```\n\n----------------------------------------\n\nTITLE: Getting Time To Live in Redis with redis-py\nDESCRIPTION: This snippet retrieves the remaining time to live (TTL) of a key using the `ttl` method. It returns the number of seconds until the key 'important_key' expires.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/examples/set_and_get_examples.ipynb#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nr.ttl(\"important_key\")\n```\n\n----------------------------------------\n\nTITLE: Using instrumented Redis-py client\nDESCRIPTION: These Python examples showcase how to use the redis-py client after it has been instrumented with OpenTelemetry. Both synchronous and asynchronous clients are demonstrated.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/opentelemetry.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Sync client\nclient = redis.Redis()\nclient.get(\"my-key\")\n\n# Async client\nclient = redis.asyncio.Redis()\nawait client.get(\"my-key\")\n```\n\n----------------------------------------\n\nTITLE: Overriding a Value in Redis with redis-py\nDESCRIPTION: This snippet demonstrates how to override an existing value in Redis by calling the `set` method with the same key. The key 'full_name' is updated with the value 'overridee!'.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/examples/set_and_get_examples.ipynb#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nr.set(\"full_name\", \"overridee!\")\n```\n\n----------------------------------------\n\nTITLE: Adding Commands to Redis Pipeline Python\nDESCRIPTION: This snippet shows how to add commands to a pipeline using methods like `set()` and `get()`. These commands are queued within the pipeline and not immediately executed.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/examples/pipeline_examples.ipynb#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\npipe.set(\"a\", \"a value\")\npipe.set(\"b\", \"b value\")\n\npipe.get(\"a\")\n```\n\n----------------------------------------\n\nTITLE: Getting a Bash Shell Inside a Docker Container\nDESCRIPTION: This snippet demonstrates how to access a bash shell inside a specific Docker container within the development environment. Replace `<service>` with the name of the Docker service you want to access.\nSOURCE: https://github.com/redis/redis-py/blob/master/CONTRIBUTING.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it <service> /bin/bash\n```\n\n----------------------------------------\n\nTITLE: Listing Available Invoke Tasks\nDESCRIPTION: This snippet demonstrates how to display all available tasks that can be executed using the `invoke` task runner. It allows contributors to explore the automation capabilities available in the project.\nSOURCE: https://github.com/redis/redis-py/blob/master/CONTRIBUTING.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ninvoke -l\n```\n\n----------------------------------------\n\nTITLE: Importing Cohere Library and Initializing Client\nDESCRIPTION: This code snippet imports the Cohere library and initializes the Cohere client with your API key. Replace 'YOUR COHERE API KEY' with your actual API key.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/examples/search_vector_similarity_examples.ipynb#_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nimport cohere\n\nco = cohere.Client(\"YOUR COHERE API KEY\")\n```\n\n----------------------------------------\n\nTITLE: Building Documentation with Invoke\nDESCRIPTION: This snippet demonstrates how to build the project documentation locally using the `invoke` task runner. It allows contributors to preview their documentation changes before submitting them.\nSOURCE: https://github.com/redis/redis-py/blob/master/CONTRIBUTING.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ninvoke build-docs\n```\n\n----------------------------------------\n\nTITLE: Get Stream Length after Deletion\nDESCRIPTION: This snippet retrieves the length of the specified Redis stream using the xlen command. This determines the number of messages currently stored in the stream after some messages have been deleted.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/examples/redis-stream-example.ipynb#_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nr.xlen(stream_key)\n```\n\n----------------------------------------\n\nTITLE: Monitoring Redis Commands (redis-py)\nDESCRIPTION: This snippet shows how to use the Monitor object in redis-py to stream and print every command processed by the Redis server.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/advanced_features.rst#_snippet_22\n\nLANGUAGE: python\nCODE:\n```\n>>> r = redis.Redis(...)\n>>> with r.monitor() as m:\n>>>     for command in m.listen():\n>>>         print(command)\n```\n\n----------------------------------------\n\nTITLE: Performance Comparison Setup Python\nDESCRIPTION: This snippet initializes the `incr_value` variable to 100000 for the performance comparison. This variable determines the number of increment operations performed in both the pipelined and non-pipelined tests.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/examples/pipeline_examples.ipynb#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import datetime\n\nincr_value = 100000\n```\n\n----------------------------------------\n\nTITLE: Displaying OpenAI Embeddings\nDESCRIPTION: This code snippet displays the created OpenAI embeddings. It is assumed that the `embeddings` variable has been previously populated with the embeddings from the OpenAI API.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/examples/search_vector_similarity_examples.ipynb#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nembeddings\n```\n\n----------------------------------------\n\nTITLE: Displaying Cohere Embeddings\nDESCRIPTION: This code snippet displays the created Cohere embeddings. It assumes that the `embeddings` variable has been previously populated with the embeddings from the Cohere API.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/examples/search_vector_similarity_examples.ipynb#_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nembeddings\n```\n\n----------------------------------------\n\nTITLE: Connecting to Redis Cluster with ClusterNode objects in Python\nDESCRIPTION: This snippet shows how to connect to a Redis Cluster by providing a list of ClusterNode objects. It initializes a RedisCluster client with specific nodes.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/clustering.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> from redis.cluster import RedisCluster as Redis\n>>> from redis.cluster import ClusterNode\n>>> nodes = [ClusterNode('localhost', 6379), ClusterNode('localhost', 6378)]\n>>> rc = Redis(startup_nodes=nodes)\n```\n\n----------------------------------------\n\nTITLE: Setting a String Value in Redis with redis-py\nDESCRIPTION: This snippet demonstrates how to set a string value in Redis using the `set` method. It assigns the string 'john doe' to the key 'full_name'.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/examples/set_and_get_examples.ipynb#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nr.set(\"full_name\", \"john doe\")\n```\n\n----------------------------------------\n\nTITLE: Get Last Sample from TimeSeries\nDESCRIPTION: This snippet retrieves the last sample added to a time series using the `ts.get()` method. It returns the timestamp and value of the most recent sample.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/examples/timeseries_examples.ipynb#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nts.get(\"ts_key\")\n```\n\n----------------------------------------\n\nTITLE: Viewing Docker Container Logs\nDESCRIPTION: This snippet shows how to view the logging output of a specific Docker container. Replace `<service>` with the name of the Docker service you want to inspect.\nSOURCE: https://github.com/redis/redis-py/blob/master/CONTRIBUTING.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ndocker logs -f <service>\n```\n\n----------------------------------------\n\nTITLE: Instrumenting Redis-py with OpenTelemetry\nDESCRIPTION: This Python code snippet demonstrates how to instrument redis-py with OpenTelemetry using the `RedisInstrumentor`. It patches the redis client to automatically record spans for redis operations.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/opentelemetry.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom opentelemetry.instrumentation.redis import RedisInstrumentor\n\nRedisInstrumentor().instrument()\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry Python API\nDESCRIPTION: This snippet demonstrates how to install the OpenTelemetry Python API and SDK using pip. It ensures that the necessary components for tracing are available.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/examples/opentelemetry_api_examples.ipynb#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npip install opentelemetry-api opentelemetry-sdk\n```\n\n----------------------------------------\n\nTITLE: Closing a PubSub Connection (redis-py)\nDESCRIPTION: This snippet shows how to close a PubSub connection using the .close() method. This shuts down the connection and releases resources.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/advanced_features.rst#_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n>>> p = r.pubsub()\n>>> ...\n>>> p.close()\n```\n\n----------------------------------------\n\nTITLE: Install Development Requirements Bash\nDESCRIPTION: Installs the necessary development requirements for running and testing redis-py examples. It uninstalls the Redis package and installs doctest requirements using pip.\nSOURCE: https://github.com/redis/redis-py/blob/master/doctests/README.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\npip install -r dev_requirements.txt\npip uninstall -y redis  # uninstall Redis package installed via redis-entraid\npip install -r doctests/requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Running standalone tests with Invoke\nDESCRIPTION: This snippet shows how to run only the Redis client tests (with cluster mode disabled) using the `invoke` task runner.\nSOURCE: https://github.com/redis/redis-py/blob/master/CONTRIBUTING.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ninvoke standalone-tests\n```\n\n----------------------------------------\n\nTITLE: Connecting with URL Scheme and RESP 3 Protocol\nDESCRIPTION: This snippet demonstrates connecting to Redis using a URL and enables the RESP 3 protocol by appending `protocol=3` to the URL.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/examples/asyncio_examples.ipynb#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport redis.asyncio as redis\n\nurl_connection = redis.from_url(\"redis://localhost:6379?decode_responses=True&protocol=3\")\nurl_connection.ping()\n```\n\n----------------------------------------\n\nTITLE: Get Stream Length\nDESCRIPTION: This snippet retrieves the length of the specified Redis stream using the xlen command. This is useful for determining the number of messages currently stored in the stream.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/examples/redis-stream-example.ipynb#_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nr.xlen(stream_key)\n```\n\n----------------------------------------\n\nTITLE: Checking if a Key Exists in Redis with redis-py\nDESCRIPTION: This snippet checks for the existence of a key in Redis using the `exists` method. It returns 1 if the key exists and 0 if it doesn't.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/examples/set_and_get_examples.ipynb#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nr.exists(\"full_name\")\n```\n\n----------------------------------------\n\nTITLE: Getting a String Value from Redis with redis-py\nDESCRIPTION: This snippet retrieves a string value from Redis using the `get` method. It retrieves the value associated with the key 'full_name'.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/examples/set_and_get_examples.ipynb#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nr.get(\"full_name\")\n```\n\n----------------------------------------\n\nTITLE: Connecting to Redis Cluster using URL in Python\nDESCRIPTION: This code snippet illustrates connecting to a Redis Cluster using a Redis URL. It creates a RedisCluster instance using the 'from_url' method.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/clustering.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> from redis.cluster import RedisCluster as Redis\n>>> rc = Redis.from_url(\"redis://localhost:6379/0\")\n```\n\n----------------------------------------\n\nTITLE: Installing OpenAI Library\nDESCRIPTION: This code snippet installs the OpenAI library, which is used for creating embeddings using the OpenAI API.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/examples/search_vector_similarity_examples.ipynb#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n%pip install openai\n```\n\n----------------------------------------\n\nTITLE: Printing Results With Pipeline Python\nDESCRIPTION: This snippet prints the results of the increment with pipeline test, including the time taken and the final incremented value.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/examples/pipeline_examples.ipynb#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nprint(\"With pipeline\")\nprint(\"=============\")\nprint(\"Time taken: \", time_with_pipeline)\nprint(\"Increment value: \", res_with_pipeline)\n```\n\n----------------------------------------\n\nTITLE: Importing NumPy\nDESCRIPTION: This code snippet imports the NumPy library, which is used for numerical operations, particularly for creating the vectors.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/examples/search_vector_similarity_examples.ipynb#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\n```\n\n----------------------------------------\n\nTITLE: Installing Cohere Library\nDESCRIPTION: This code snippet installs the Cohere library, which is used for creating embeddings using the Cohere API.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/examples/search_vector_similarity_examples.ipynb#_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n%pip install cohere\n```\n\n----------------------------------------\n\nTITLE: Run Examples Bash\nDESCRIPTION: Executes all example scripts within the current folder using the `run_examples.sh` script. This command is used to test the functionality of the examples.\nSOURCE: https://github.com/redis/redis-py/blob/master/doctests/README.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\nsh doctests/run_examples.sh\n```\n\n----------------------------------------\n\nTITLE: Printing Results Without Pipeline Python\nDESCRIPTION: This snippet prints the results of the increment without pipeline test, including the time taken and the final incremented value.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/examples/pipeline_examples.ipynb#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nprint(\"Without pipeline\")\nprint(\"================\")\nprint(\"Time taken: \", time_without_pipeline)\nprint(\"Increment value: \", res_without_pipeline)\n```\n\n----------------------------------------\n\nTITLE: Creating Redis Pipeline Instance Python\nDESCRIPTION: This snippet creates a pipeline instance using the `r.pipeline()` method. This pipeline object is then used to queue multiple commands for execution.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/examples/pipeline_examples.ipynb#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\npipe = r.pipeline()\n```\n\n----------------------------------------\n\nTITLE: Create a TimeSeries\nDESCRIPTION: This snippet demonstrates how to create a new time series in RedisTimeSeries using the `ts.create()` method. The time series is identified by the key \"ts_key\".\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/examples/timeseries_examples.ipynb#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nts.create(\"ts_key\")\n```\n\n----------------------------------------\n\nTITLE: Install OpenTelemetry Redis Instrumentation\nDESCRIPTION: This command installs the OpenTelemetry instrumentation for redis-py, enabling the collection of telemetry data from redis operations.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/opentelemetry.rst#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install opentelemetry-instrumentation-redis\n```\n\n----------------------------------------\n\nTITLE: Running cluster tests with Invoke\nDESCRIPTION: This snippet shows how to run only the RedisCluster tests using the `invoke` task runner.\nSOURCE: https://github.com/redis/redis-py/blob/master/CONTRIBUTING.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ninvoke cluster-tests\n```\n\n----------------------------------------\n\nTITLE: Installing NumPy\nDESCRIPTION: This code snippet installs the NumPy library using pip. NumPy is required for creating and manipulating numerical data, including vectors.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/examples/search_vector_similarity_examples.ipynb#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n%pip install numpy\n```\n\n----------------------------------------\n\nTITLE: Creating and activating a virtual environment (Shell)\nDESCRIPTION: These commands create a virtual environment and activate it. Using a virtual environment helps to isolate project dependencies and avoid conflicts with system-level packages. It ensures that the required dependencies for the redis-py OpenTelemetry example are installed in a dedicated environment.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/examples/opentelemetry/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npython3 -m venv .venv\nsource .venv/bin/active\n```\n\n----------------------------------------\n\nTITLE: Cloning the redis-py repository (Shell)\nDESCRIPTION: This command clones the redis-py repository from GitHub and changes the current directory to the OpenTelemetry example directory. This prepares the environment for running the Redis client example with OpenTelemetry instrumentation.\nSOURCE: https://github.com/redis/redis-py/blob/master/docs/examples/opentelemetry/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/redis/redis-py.git\ncd example/opentelemetry\n```"
  }
]