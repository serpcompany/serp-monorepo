[
  {
    "owner": "zscaler",
    "repo": "terraform-provider-zia",
    "content": "TITLE: Declaring the ZIA Terraform Provider in HCL\nDESCRIPTION: Defines the Zscaler ZIA provider block within a Terraform configuration (`.tf` file). When environment variables (like `ZIA_USERNAME`, `ZIA_PASSWORD`, `ZIA_API_KEY`, `ZIA_CLOUD`, `ZSCALER_USE_LEGACY_CLIENT`, or the OneAPI equivalents) are set, the provider implicitly uses them for authentication and configuration, requiring no explicit arguments within the block itself.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/index.md#2025-04-22_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\n# provider settings established with values from environment variables\nprovider \"zia\" {}\n```\n\n----------------------------------------\n\nTITLE: Defining ZIA Firewall Filtering Rule and Related Data Sources with Terraform (HCL)\nDESCRIPTION: Demonstrates how to define and manage a ZIA Cloud Firewall Filtering Rule and fetch related resource IDs using Terraform HCL. This example requires the Zscaler Terraform provider and assumes that referenced data resources (network services, departments, groups, and time windows) already exist in the environment. Key parameters include the rule's name, description, action, state, order, and associations to network services, departments, groups, and time windows by ID. Inputs are Terraform resource and data block attributes, and the output is a configured firewall filtering rule among other dependencies. Limitation: certain predefined rules cannot be deleted and require careful management of the 'order' attribute.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/resources/zia_firewall_filtering_rule.md#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"zia_firewall_filtering_network_service\" \"zscaler_proxy_nw_services\" {\n    name = \"ZSCALER_PROXY_NW_SERVICES\"\n}\n\ndata \"zia_department_management\" \"engineering\" {\n name = \"Engineering\"\n}\n\ndata \"zia_group_management\" \"normal_internet\" {\n    name = \"Normal_Internet\"\n}\n\ndata \"zia_firewall_filtering_time_window\" \"work_hours\" {\n    name = \"Work hours\"\n}\n\nresource \"zia_firewall_filtering_rule\" \"example\" {\n    name                = \"Example\"\n    description         = \"Example\"\n    action              = \"ALLOW\"\n    state               = \"ENABLED\"\n    order               = 1\n    enable_full_logging = true\n    nw_services {\n        id = [ data.zia_firewall_filtering_network_service.zscaler_proxy_nw_services.id ]\n    }\n    departments {\n        id = [ data.zia_department_management.engineering.id ]\n    }\n    groups {\n        id = [ data.zia_group_management.normal_internet.id ]\n    }\n    time_windows {\n        id = [ data.zia_firewall_filtering_time_window.work_hours.id ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating DLP Web Rules in Terraform\nDESCRIPTION: This snippet provides a basic setup for creating a DLP web rule in Terraform, utilizing the Zscaler Internet Access API. It demonstrates specifying rule attributes like action, protocols, file types, and user risk score levels. Essential dependencies include a DLP engine data resource. The rule can perform actions such as BLOCK, and supports a maximum of 127 rules via API.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/resources/zia_dlp_web_rules.md#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"zia_dlp_engines\" \"this\" {\n  predefined_engine_name = \"EXTERNAL\"\n}\n\nresource \"zia_dlp_web_rules\" \"this\" {\n  name                       = \"Example\"\n  description                = \"Example\"\n  action                     = \"BLOCK\"\n  order                      = 1\n  rank                       = 7\n  state                      = \"ENABLED\"\n  protocols                  = [ \"FTP_RULE\", \"HTTPS_RULE\", \"HTTP_RULE\" ]\n  file_types                 = [ \"ALL_OUTBOUND\" ]\n  zscaler_incident_receiver  = false\n  without_content_inspection = false\n  user_risk_score_levels     = [ \"LOW\", \"MEDIUM\", \"HIGH\", \"CRITICAL\" ]\n  severity                   = \"RULE_SEVERITY_HIGH\"\n  dlp_engines {\n    id = [ data.zia_dlp_engines.this.id ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Provider Dependencies\nDESCRIPTION: Shell commands for setting up the development environment and installing required tools for the ZIA Terraform provider.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ mkdir -p $HOME/development/terraform-providers/; cd $HOME/development/terraform-providers/\n$ git clone git@github.com:zscaler/terraform-provider-zia.git\n$ make tools\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic ZIA Cloud App Control Rule in HCL\nDESCRIPTION: This HCL snippet demonstrates the basic configuration of a `zia_cloud_app_control_rule` resource. It defines a rule named 'Example_WebMail_Rule' for WebMail applications (Google and Yahoo), specifying allowed actions, order, rank, state, device trust levels, and user agent types.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/resources/zia_cloud_app_control_rule.md#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"zia_cloud_app_control_rule\" \"this\" {\n    name                         = \"Example_WebMail_Rule\"\n    description                  = \"Example_WebMail_Rule\"\n    order                        = 1\n    rank                         = 7\n    state                        = \"ENABLED\"\n    type                         = \"WEBMAIL\"\n    actions                      = [\n        \"ALLOW_WEBMAIL_VIEW\",\n        \"ALLOW_WEBMAIL_ATTACHMENT_SEND\",\n        \"ALLOW_WEBMAIL_SEND\",\n    ]\n    applications          = [\n        \"GOOGLE_WEBMAIL\",\n        \"YAHOO_WEBMAIL\",\n    ]\n    device_trust_levels   = [\"UNKNOWN_DEVICETRUSTLEVEL\", \"LOW_TRUST\", \"MEDIUM_TRUST\", \"HIGH_TRUST\"]\n    user_agent_types      = [\"OPERA\", \"FIREFOX\", \"MSIE\", \"MSEDGE\", \"CHROME\", \"SAFARI\", \"MSCHREDGE\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Importing ZIA Firewall Rule by Name using Terraform Shell Command\nDESCRIPTION: This shell command shows how to import an existing Zscaler ZIA Firewall Filtering Rule into the Terraform state management using its configured name. The command requires the Terraform CLI to be installed and the Zscaler ZIA provider configured. Replace `<rule_name>` with the specific name of the firewall rule you want to import.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/resources/zia_firewall_filtering_rule.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nterraform import zia_firewall_filtering_rule.example <rule_name>\n```\n\n----------------------------------------\n\nTITLE: Configuring Advanced Threat Settings in ZIA using Terraform\nDESCRIPTION: Demonstrates the complete configuration of advanced threat settings in ZIA including risk tolerance, command and control blocking, malware protection, and various security controls. The resource allows granular control over blocking and packet capture settings for different types of threats.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/resources/zia_advanced_threat_settings.md#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"zia_advanced_threat_settings\" \"this\" {\n  risk_tolerance                           = 80\n  risk_tolerance_capture                   = false\n  cmd_ctl_server_blocked                   = true\n  cmd_ctl_server_capture                   = false\n  cmd_ctl_traffic_blocked                  = true\n  cmd_ctl_traffic_capture                  = false\n  malware_sites_blocked                    = true\n  malware_sites_capture                    = false\n  activex_blocked                          = true\n  activex_capture                          = false\n  browser_exploits_blocked                 = true\n  browser_exploits_capture                 = false\n  file_format_vunerabilites_blocked        = true\n  file_format_vunerabilites_capture        = false\n  known_phishing_sites_blocked             = true\n  known_phishing_sites_capture             = false\n  suspected_phishing_sites_blocked         = true\n  suspected_phishing_sites_capture         = false\n  suspect_adware_spyware_sites_blocked     = true\n  suspect_adware_spyware_sites_capture     = false\n  web_spam_blocked                         = true\n  web_spam_capture                         = false\n  irc_tunnelling_blocked                   = true\n  irc_tunnelling_capture                   = false\n  anonymizer_blocked                       = true\n  anonymizer_capture                       = false\n  cookie_stealing_blocked                  = true\n  cookie_stealing_pcap_enabled             = false\n  potential_malicious_requests_blocked     = true\n  potential_malicious_requests_capture     = false\n  blocked_countries                        = [\"BR\",\"US\", \"CN\", \"RU\"]\n  block_countries_capture                  = false\n  bit_torrent_blocked                      = true\n  bit_torrent_capture                      = false\n  tor_blocked                              = true\n  tor_capture                              = false\n  google_talk_blocked                      = true\n  google_talk_capture                      = false\n  ssh_tunnelling_blocked                   = true\n  ssh_tunnelling_capture                   = false\n  crypto_mining_blocked                    = true\n  crypto_mining_capture                    = false\n  ad_spyware_sites_blocked                 = true\n  ad_spyware_sites_capture                 = false\n  dga_domains_blocked                      = true\n  dga_domains_capture                      = false\n  alert_for_unknown_suspicious_c2_traffic  = false\n  malicious_urls_capture                   = false\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Unnumbered ZIA GRE Tunnel with Dynamic VIPs in HCL\nDESCRIPTION: This HCL configuration defines an unnumbered ZIA GRE tunnel using dynamic VIP selection. It leverages data sources `zia_traffic_forwarding_gre_vip_recommended_list` and `zia_gre_internal_ip_range_list` to fetch recommended VIPs and internal IPs. The `primary_dest_vip` and `secondary_dest_vip` blocks are populated using the output from the recommended VIP list data source. A `lifecycle` block is used to ignore changes to `internal_ip_range`, and it depends on the associated static IP resource.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/resources/zia_traffic_forwarding_gre_tunnel.md#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"zia_traffic_forwarding_gre_vip_recommended_list\" \"this\"{\n    source_ip = zia_traffic_forwarding_static_ip.this.ip_address\n    required_count = 2\n}\n\ndata \"zia_gre_internal_ip_range_list\" \"this\"{\n    required_count = 10\n}\n\nresource \"zia_traffic_forwarding_static_ip\" \"this\"{\n    ip_address =  \"50.98.112.169\"\n    routable_ip = true\n    comment = \"Created with Terraform\"\n    geo_override = true\n    latitude = 49.0526\n    longitude = -122.8291\n}\n\nresource \"zia_traffic_forwarding_gre_tunnel\" \"this\" {\n  source_ip      = zia_traffic_forwarding_static_ip.this.ip_address\n  comment        = \"GRE Tunnel Created with Terraform\"\n  within_country = false\n  country_code   = \"US\"\n  ip_unnumbered  = true\n  primary_dest_vip {\n    datacenter = data.zia_traffic_forwarding_gre_vip_recommended_list.this.list[0].id\n    virtual_ip = data.zia_traffic_forwarding_gre_vip_recommended_list.this.list[0].virtual_ip\n  }\n  secondary_dest_vip {\n    datacenter = data.zia_traffic_forwarding_gre_vip_recommended_list.this.list[1].id\n    virtual_ip = data.zia_traffic_forwarding_gre_vip_recommended_list.this.list[1].virtual_ip\n  }\n  lifecycle {\n    ignore_changes = [\n      internal_ip_range,\n    ]\n  }\n  depends_on     = [zia_traffic_forwarding_static_ip.this]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring DECRYPT SSL Inspection Rules with Terraform Provider Zscaler - HCL\nDESCRIPTION: This snippet demonstrates how to create an SSL Inspection Rule in ZIA with the DECRYPT action using Terraform HCL. It configures a comprehensive rule specifying cloud applications, platforms, targeted group(s), and includes a detailed action configuration with certificate and TLS settings. Dependencies include the 'zia_group_management' data source and the 'zia_ssl_inspection_rules' resource. Required parameters include rule name, order, and group ID references. The output is a managed SSL Inspection rule ready for enforcement in Zscaler Internet Access; limitations include the inability to manage or delete predefined rules and the necessity to consider their order.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/resources/zia_ssl_inspection_rules.md#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"zia_group_management\" \"this\" {\n    name = \"A000\"\n}\n\nresource \"zia_ssl_inspection_rules\" \"this\" {\n  name                         = \"SSL_Inspection_Rule_Decrypt\"\n  description                  = \"SSL_Inspection_Rule_Decrypt\"\n  state                        = \"ENABLED\"\n  order                        = 1\n  rank                         = 7\n  road_warrior_for_kerberos    = true\n  cloud_applications           = [\"CHATGPT_AI\", \"ANDI\"]\n  platforms                    = [\"SCAN_IOS\", \"SCAN_ANDROID\", \"SCAN_MACOS\", \"SCAN_WINDOWS\", \"NO_CLIENT_CONNECTOR\", \"SCAN_LINUX\"]\n\n  action {\n    type                         = \"DECRYPT\"\n    # show_eun                   = false\n    # show_eunatp                = false\n    override_default_certificate = false\n\n    ssl_interception_cert {\n      id                  = 1\n      name                = \"Zscaler Intermediate CA Certificate\"\n      default_certificate = true\n    }\n\n    decrypt_sub_actions {\n      server_certificates                   = \"ALLOW\"\n      ocsp_check                            = true\n      block_ssl_traffic_with_no_sni_enabled = true\n      min_client_tls_version                = \"CLIENT_TLS_1_0\"\n      min_server_tls_version                = \"SERVER_TLS_1_0\"\n      block_undecrypt                       = true\n      http2_enabled                         = false\n    }\n  }\n  groups {\n        id = [ data.zia_group_management.this.id ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ZIA Advanced Settings using Terraform HCL\nDESCRIPTION: This HCL code snippet demonstrates the configuration of the `zia_advanced_settings` resource. It specifies various advanced settings for the ZIA platform, including lists for authentication bypass URLs, DNS resolution targets, Kerberos bypasses, and numerous boolean flags to enable or disable features like Office 365 integration, internal IP logging, policy evaluation on SSL bypass, and various security enforcement mechanisms. The example sets specific values for these configurations.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/resources/zia_advanced_settings.md#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"zia_advanced_settings\" \"this\" {\n  auth_bypass_urls                                            = [\".newexample1.com\", \".newexample2.com\"]\n  dns_resolution_on_transparent_proxy_apps                    = [\"CHATGPT_AI\"]\n  basic_bypass_url_categories                                 = [\"NONE\"]\n  http_range_header_remove_url_categories                     = [\"NONE\"]\n  kerberos_bypass_urls                                        = [\"test1.com\"]\n  kerberos_bypass_apps                                        = []\n  dns_resolution_on_transparent_proxy_urls                    = [\"test1.com\", \"test2.com\"]\n  enable_dns_resolution_on_transparent_proxy                  = true\n  enable_evaluate_policy_on_global_ssl_bypass                 = true\n  enable_office365                                            = true\n  log_internal_ip                                             = true\n  enforce_surrogate_ip_for_windows_app                        = true\n  track_http_tunnel_on_http_ports                             = true\n  block_http_tunnel_on_non_http_ports                         = false\n  block_domain_fronting_on_host_header                        = false\n  zscaler_client_connector_1_and_pac_road_warrior_in_firewall = true\n  cascade_url_filtering                                       = true\n  enable_policy_for_unauthenticated_traffic                   = true\n  block_non_compliant_http_request_on_http_ports              = true\n  enable_admin_rank_access                                    = true\n  http2_nonbrowser_traffic_enabled                            = true\n  ecs_for_all_enabled                                         = false\n  dynamic_user_risk_enabled                                   = false\n  block_connect_host_sni_mismatch                             = false\n  prefer_sni_over_conn_host                                   = false\n  sipa_xff_header_enabled                                     = false\n  block_non_http_on_http_port_enabled                         = true\n  ui_session_timeout                                          = 300\n}\n\n```\n\n----------------------------------------\n\nTITLE: Referencing Resource Names and Attributes in Markdown Documentation - Markdown\nDESCRIPTION: This snippet demonstrates the use of backquoted identifiers (single and double backticks) within Markdown text to reference Terraform resource names and attributes. This formatting highlights specific elements such as resource types and parameter names for clarity. No dependencies are required; these code blocks serve as inline code references only. Inputs are resource or attribute names, and outputs are visually highlighted code spans in rendered Markdown.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/guides/release-notes.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`zia_url_filtering_rules`\n```\n\nLANGUAGE: markdown\nCODE:\n```\n`protocols`\n```\n\nLANGUAGE: markdown\nCODE:\n```\n``zia_firewall_filtering_rule``\n```\n\nLANGUAGE: markdown\nCODE:\n```\n``zia_url_filtering_rules``\n```\n\nLANGUAGE: markdown\nCODE:\n```\n``zia_dlp_web_rules``\n```\n\nLANGUAGE: markdown\nCODE:\n```\n``zia_location_management``\n```\n\nLANGUAGE: markdown\nCODE:\n```\n``ip_addresses``\n```\n\nLANGUAGE: markdown\nCODE:\n```\n`10.0.0.0-10.0.0.255`\n```\n\nLANGUAGE: markdown\nCODE:\n```\n`10.0.0.1`\n```\n\nLANGUAGE: markdown\nCODE:\n```\n`ZIA_CLOUD`\n```\n\nLANGUAGE: markdown\nCODE:\n```\n`ZIA_SANDBOX_TOKEN`\n```\n\nLANGUAGE: markdown\nCODE:\n```\n`zia_firewall_filtering_network_service_groups`\n```\n\nLANGUAGE: markdown\nCODE:\n```\n`zia_firewall_filtering_network_service`\n```\n\nLANGUAGE: markdown\nCODE:\n```\n``PREDEFINED``\n```\n\nLANGUAGE: markdown\nCODE:\n```\n`terraform import zia_firewall_filtering_network_service.this \\\"DHCP\\\"`\n```\n\nLANGUAGE: markdown\nCODE:\n```\n``zia_dlp_engines``\n```\n\nLANGUAGE: markdown\nCODE:\n```\n``POST``\n```\n\nLANGUAGE: markdown\nCODE:\n```\n``PUT``\n```\n\nLANGUAGE: markdown\nCODE:\n```\n``DELETE``\n```\n\nLANGUAGE: markdown\nCODE:\n```\n``resource_zia_url_categories``\n```\n\nLANGUAGE: markdown\nCODE:\n```\n``AI_ML_APPS``\n```\n\nLANGUAGE: markdown\nCODE:\n```\n``zia_firewall_filtering_destination_groups``\n```\n\n----------------------------------------\n\nTITLE: Defining ZIA Firewall IPS Rule using Terraform\nDESCRIPTION: This Terraform configuration defines and applies a Firewall Intrusion Prevention System (IPS) rule in ZIA. It specifies various attributes such as name, action, order, and enables logging among others. The snippet requires properly defined data sources for components like network services, departments, groups, and time windows. It's crucial to set the 'order' and 'name' fields to determine the rule's evaluation sequence.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/resources/zia_firewall_ips_rules.md#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"zia_firewall_filtering_network_service\" \"zscaler_proxy_nw_services\" {\n    name = \"ZSCALER_PROXY_NW_SERVICES\"\n}\n\ndata \"zia_department_management\" \"engineering\" {\n name = \"Engineering\"\n}\n\ndata \"zia_group_management\" \"normal_internet\" {\n    name = \"Normal_Internet\"\n}\n\ndata \"zia_firewall_filtering_time_window\" \"work_hours\" {\n    name = \"Work hours\"\n}\n\nresource \"zia_firewall_ips_rule\" \"example\" {\n    name = \"Example_IPS_Rule01\"\n    description = \"Example_IPS_Rule01\"\n    action = \"ALLOW\"\n    state = \"ENABLED\"\n    order = 1\n    enable_full_logging = true\n    dest_countries = [\"CA\", \"US\"]\n    source_countries = [\"CA\", \"US\"]\n    threat_categories {\n        id = [ 66 ]\n    }\n    nw_services {\n        id = [ data.zia_firewall_filtering_network_service.zscaler_proxy_nw_services.id ]\n    }\n    departments {\n        id = [ data.zia_department_management.engineering.id ]\n    }\n    groups {\n        id = [ data.zia_group_management.normal_internet.id ]\n    }\n    time_windows {\n        id = [ data.zia_firewall_filtering_time_window.work_hours.id ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a ZIA Domain Destination Group in Terraform (HCL)\nDESCRIPTION: This HCL code defines a ZIA Firewall Destination Group resource named 'example_dstn_domain' of type 'DSTN_DOMAIN'. The 'addresses' attribute contains a list of domain names. This resource is used to group destinations based on domains for firewall policy application.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/resources/zia_firewall_filtering_destination_groups.md#2025-04-22_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\n# IP Destination Group of Type DSTN_DOMAIN\nresource \"zia_firewall_filtering_destination_groups\" \"example_dstn_domain\" {\n  name          = \"Example Destination Domain\"\n  description   = \"Example Destination Domain\"\n  type          = \"DSTN_DOMAIN\"\n  addresses     = [\"acme.com\", \"acme1.com\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ZIA ATP Malware Policy in HCL\nDESCRIPTION: This HCL snippet demonstrates how to define a `zia_atp_malware_policy` resource using Terraform. It configures the policy to block both unscannable files and password-protected archive files by setting the respective boolean arguments to `true`. This requires the Zscaler ZIA Terraform provider.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/resources/zia_atp_malware_policy.md#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"zia_atp_malware_policy\" \"this\" {\n  block_unscannable_files                                     = true\n  block_password_protected_archive_files                      = true\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Standard ZIA Admin Role using Terraform HCL\nDESCRIPTION: This HCL code snippet demonstrates how to define a `zia_admin_roles` resource in Terraform to create a standard administrative role in Zscaler Internet Access (ZIA). It specifies the role name, rank, various access permissions (e.g., dashboard, policy, alerting), and a comprehensive list of specific feature permissions. This resource requires the Zscaler ZIA Terraform provider.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/resources/zia_admin_roles.md#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n# ZIA Admin Roles Resource\nresource \"zia_admin_roles\" \"this\" {\n  name               = \"AdminRoleTerraform\"\n  rank               = 7\n  alerting_access    = \"READ_WRITE\"\n  dashboard_access   = \"READ_WRITE\"\n  report_access      = \"READ_WRITE\"\n  analysis_access    = \"READ_ONLY\"\n  username_access    = \"READ_ONLY\"\n  device_info_access = \"READ_ONLY\"\n  admin_acct_access  = \"READ_WRITE\"\n  policy_access      = \"READ_WRITE\"\n  permissions = [\n \"NSS_CONFIGURATION\", \"LOCATIONS\", \"HOSTED_PAC_FILES\", \"EZ_AGENT_CONFIGURATIONS\",\n \"SECURE_AGENT_NOTIFICATIONS\", \"VPN_CREDENTIALS\", \"AUTHENTICATION_SETTINGS\", \"STATIC_IPS\",\n \"GRE_TUNNELS\", \"CLIENT_CONNECTOR_PORTAL\", \"SECURE\", \"POLICY_RESOURCE_MANAGEMENT\",\n \"CUSTOM_URL_CAT\", \"OVERRIDE_EXISTING_CAT\", \"TENANT_PROFILE_MANAGEMENT\", \"COMPLY\",\n \"SSL_POLICY\", \"ADVANCED_SETTINGS\", \"PROXY_GATEWAY\", \"SUBCLOUDS\", \"IDENTITY_PROXY_SETTINGS\",\n \"USER_MANAGEMENT\", \"APIKEY_MANAGEMENT\", \"FIREWALL_DNS\", \"VZEN_CONFIGURATION\",\n \"PARTNER_INTEGRATION\", \"USER_ACCESS\", \"CUSTOMER_ACCT_INFO\", \"CUSTOMER_SUBSCRIPTION\",\n \"CUSTOMER_ORG_SETTINGS\", \"ZIA_TRAFFIC_CAPTURE\", \"REMOTE_ASSISTANCE_MANAGEMENT\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring an Unnumbered ZIA GRE Tunnel in HCL\nDESCRIPTION: This HCL code demonstrates creating an unnumbered GRE tunnel using the `zia_traffic_forwarding_gre_tunnel` resource. It defines the source IP address by referencing a `zia_traffic_forwarding_static_ip` resource, sets `ip_unnumbered` to true, provides a comment, restricts VIP selection within the US, and explicitly depends on the static IP resource creation.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/resources/zia_traffic_forwarding_gre_tunnel.md#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n# Creates a numbered GRE Tunnel\nresource \"zia_traffic_forwarding_gre_tunnel\" \"example\" {\n  source_ip         = zia_traffic_forwarding_static_ip.example.ip_address\n  comment           = \"Example\"\n  within_country    = true\n  country_code      = \"US\"\n  ip_unnumbered     = true\n  depends_on        = [ zia_traffic_forwarding_static_ip.example ]\n}\n\n# ZIA Traffic Forwarding - Static IP\nresource \"zia_traffic_forwarding_static_ip\" \"example\"{\n    ip_address      =  \"1.1.1.1\"\n    routable_ip     = true\n    comment         = \"Example\"\n    geo_override    = true\n    latitude        = 37.418171\n    longitude       = -121.953140\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Zscaler File Type Control Rule via Terraform - HCL\nDESCRIPTION: This snippet defines a ZIA file type control rule resource in Terraform, utilizing supporting data sources for departments, groups, and cloud applications. It demonstrates how to specify rule attributes such as name, filtering action, applicable file types, device trust levels, and conditional lists. Data sources must be configured to resolve referenced entities, and the code expects integration with the Terraform Zscaler provider. Inputs include resource properties and their arguments; outputs are an applied policy rule in ZIA. Ensure the provider is installed and API credentials are configured before applying.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/resources/zia_file_type_control_rules.md#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"zia_department_management\" \"engineering\" {\n name = \"Engineering\"\n}\n\ndata \"zia_group_management\" \"normal_internet\" {\n    name = \"Normal_Internet\"\n}\n\ndata \"zia_cloud_applications\" \"this\" {\n  policy_type = \"cloud_application_policy\"\n  app_class   = [\"AI_ML\"]\n}\n\nresource \"zia_file_type_control_rules\" \"this\" {\n    name               = \"Terraform_File_Type01\"\n    description        = \"Terraform_File_Type01\"\n    state              = \"ENABLED\"\n    order              = 1\n    rank               = 7\n    filtering_action   = \"BLOCK\"\n    operation          = \"DOWNLOAD\"\n    active_content     = true\n    unscannable        = false\n    device_trust_levels = [\"UNKNOWN_DEVICETRUSTLEVEL\", \"LOW_TRUST\", \"MEDIUM_TRUST\", \"HIGH_TRUST\"]\n    file_types         = [\"FTCATEGORY_MS_WORD\", \"FTCATEGORY_MS_POWERPOINT\", \"FTCATEGORY_PDF_DOCUMENT\", \"FTCATEGORY_MS_EXCEL\"]\n    protocols          = [\"FOHTTP_RULE\", \"FTP_RULE\", \"HTTPS_RULE\", \"HTTP_RULE\"]\n    cloud_applications = tolist([for app in data.zia_cloud_applications.this.applications : app[\"app\"]])\n\n    departments {\n        id = [ data.zia_department_management.engineering.id ]\n    }\n    groups {\n        id = [ data.zia_group_management.normal_internet.id ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ZIA Firewall Filtering Network Service in HCL\nDESCRIPTION: This snippet demonstrates how to define a ZIA firewall filtering network service using the HashiCorp Configuration Language (HCL) for Terraform. The resource includes configuration for TCP source and destination ports, along with optional description and type settings. Dependencies include the Terraform and ZIA provider setups, and the predefined types must be imported before execution. The input consists of port numbers and service settings, outputting a configured network service resource ready for use with ZIA Firewalls.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/resources/zia_firewall_filtering_network_service.md#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"zia_firewall_filtering_network_service\" \"example\" {\n  name        = \"example\"\n  description = \"example\"\n  src_tcp_ports {\n    start = 5000\n  }\n  src_tcp_ports {\n    start = 5001\n  }\n  src_tcp_ports {\n    start = 5002\n    end   = 5005\n  }\n  dest_tcp_ports {\n    start = 5000\n  }\n    dest_tcp_ports {\n    start = 5001\n  }\n  dest_tcp_ports {\n    start = 5003\n    end   = 5005\n  }\n  type = \"CUSTOM\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ZIA Malware Protocol Inspection Settings using Terraform\nDESCRIPTION: Example Terraform configuration for setting up malware protocol inspection in ZIA. Controls inspection settings for HTTP, FTP over HTTP, and native FTP traffic.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/resources/zia_atp_malware_protocols.md#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"zia_atp_malware_protocols\" \"this\" {\n  inspect_http                       = true\n  inspect_ftp_over_http              = true\n  inspect_ftp                        = true\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ZIA End User Notification - CUSTOM\nDESCRIPTION: This snippet demonstrates how to set up a Zscaler end user notification with a custom notification type using Terraform. It allows customization of messages, review processes, and visualization options such as the company name and logo. Dependencies are a working Terraform setup and the ZIA provider.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/resources/zia_end_user_notification.md#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n# END USER NOTIFICATION TYPE - CUSTOM\nresource \"zia_end_user_notification\" \"this\" {\n  aup_frequency     = \"ON_WEEKDAY\"\n  aup_day_offset    = \"1\"\n  aup_message       = \"Please review and accept the terms.\"\n  notification_type = \"CUSTOM\"\n  display_reason    = true\n  display_comp_name = true\n  display_comp_logo = true\n  custom_text       = \"Website blocked\"\n\n  url_cat_review_enabled                  = true\n  url_cat_review_submit_to_security_cloud = true\n  url_cat_review_custom_location          = \"https://custom-review-location.com\"\n  url_cat_review_text                     = \"Click here to submit a review request.\"\n\n  security_review_enabled                  = true\n  security_review_submit_to_security_cloud = true\n  security_review_custom_location          = \"https://security-review-location.com\"\n  security_review_text                     = \"Request a security review if this message appears in error.\"\n\n  web_dlp_review_enabled                  = true\n  web_dlp_review_submit_to_security_cloud = false\n  web_dlp_review_custom_location          = \"https://dlp-review-location.com\"\n  web_dlp_review_text                     = \"This file is being reviewed for security reasons.\"\n\n  redirect_url    = \"https://dlp-review-location.com\"\n  support_email   = \"support@8061240.zscalerbeta.net\"\n  support_phone   = \"+91-9000000000\"\n  org_policy_link = \"http://8061240.zscalerbeta.net/policy.html\"\n\n  caution_again_after = 300\n  caution_per_domain  = true\n  caution_custom_text = \"Access to this site is restricted. Proceed with caution.\"\n\n  idp_proxy_notification_text         = \"Your connection is being proxied through the organization's secure access service.\"\n  quarantine_custom_notification_text = \"The file is being analyzed for potential security risks. Please wait while the process completes.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ZIA Cloud App Control Rule with Cloud Browser Isolation (CBI) in HCL\nDESCRIPTION: This HCL snippet defines a `zia_cloud_app_control_rule` resource that utilizes Cloud Browser Isolation (CBI). It depends on a `zia_cloud_browser_isolation_profile` data source to get the CBI profile details. The rule includes time validity constraints, time/size quotas, and device trust levels. Warning: Using 'ISOLATE_' actions requires a Cloud Browser Isolation subscription.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/resources/zia_cloud_app_control_rule.md#2025-04-22_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"zia_cloud_browser_isolation_profile\" \"this\" {\n    name = \"BD_SA_Profile1_ZIA\"\n}\n\nresource \"zia_cloud_app_control_rule\" \"this\" {\n    name                         = \"Example\"\n    description                  = \"Example\"\n    state                        = \"ENABLED\"\n    type                         = \"WEBMAIL\"\n    actions                      = [\n        \"ALLOW_WEBMAIL_VIEW\",\n        \"ALLOW_WEBMAIL_ATTACHMENT_SEND\",\n        \"ALLOW_WEBMAIL_SEND\",\n    ]\n    applications          = [\n        \"GOOGLE_WEBMAIL\",\n        \"YAHOO_WEBMAIL\",\n    ]\n    order                 = 1\n    enforce_time_validity = true\n    validity_start_time   = \"Mon, 17 Jun 2024 23:30:00 UTC\"\n    validity_end_time     = \"Tue, 17 Jun 2025 23:00:00 UTC\"\n    validity_time_zone_id = \"US/Pacific\"\n    time_quota            = 15\n    size_quota            = 10\n    device_trust_levels   = [\"UNKNOWN_DEVICETRUSTLEVEL\", \"LOW_TRUST\", \"MEDIUM_TRUST\", \"HIGH_TRUST\"]\n    cbi_profile {\n        id = data.zia_cloud_browser_isolation_profile.this.id\n        name = data.zia_cloud_browser_isolation_profile.this.name\n        url = data.zia_cloud_browser_isolation_profile.this.url\n    }\n    user_agent_types = [ \"OPERA\", \"FIREFOX\", \"MSIE\", \"MSEDGE\", \"CHROME\", \"SAFARI\", \"MSCHREDGE\" ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ZIA ATP Malware Settings via Terraform HCL\nDESCRIPTION: The HCL snippet demonstrates how to define a \"zia_atp_malware_settings\" resource in Terraform, setting various Boolean flags to enable or disable blocking and packet capture for different classes of malware (viruses, trojans, worms, adware, spyware, ransomware, and remote access tools). No external dependencies are required aside from the Zscaler Terraform provider. Key parameters directly map to malware categories, with \"_blocked\" enabling threat blocking and \"_capture\" controlling packet capture for forensic analysis. Inputs are all Boolean, indicating policy preferences; there is no direct output from the resource but it configures the ZIA instance as specified. Constraints include the need for the Zscaler Terraform provider to be properly installed and authorized.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/resources/zia_atp_malware_settings.md#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"zia_atp_malware_settings\" \"this\" {\n  virus_blocked                       = true\n  virus_capture                       = false\n  unwanted_applications_blocked       = true\n  unwanted_applications_capture       = false\n  trojan_blocked                      = true\n  trojan_capture                      = false\n  worm_blocked                        = true\n  worm_capture                        = false\n  adware_blocked                      = true\n  adware_capture                      = false\n  spyware_blocked                     = true\n  spyware_capture                     = false\n  ransomware_blocked                  = true\n  ransomware_capture                  = false\n  remote_access_tool_blocked          = true\n  remote_access_tool_capture          = false\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating ZIA User Management Resource in Terraform\nDESCRIPTION: This snippet demonstrates how to define a ZIA user management resource in Terraform, specifying user details like name, email, password, and associated groups and departments. Dependencies include defined groups and departments, with required inputs such as name and email. Outputs include the configured local user resource.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/resources/zia_user_management.md#2025-04-22_snippet_0\n\nLANGUAGE: HCL\nCODE:\n```\ndata \"zia_group_management\" \"normal_internet\" {\n name = \"Normal_Internet\"\n}\n\ndata \"zia_department_management\" \"engineering\" {\n name = \"Engineering\"\n}\n\nresource \"zia_user_management\" \"john_ashcroft\" {\n name         = \"John Ashcroft\"\n email        = \"john.ashcroft@acme.com\"\n password     = \"*********************\"\n auth_methods = [\"BASIC\"]\n groups {\n  id = data.zia_group_management.normal_internet.id\n  }\n department {\n  id = data.zia_department_management.engineering.id\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ZIA URL Filtering and Cloud App Settings in HCL\nDESCRIPTION: This HCL code snippet demonstrates how to define and configure the `zia_url_filtering_and_cloud_app_settings` resource using Terraform. It shows enabling/disabling various boolean flags such as `block_skype`, `enable_dynamic_content_cat`, `enable_office365`, and others to control advanced URL filtering and cloud application policies within ZIA. The configuration aims to customize security and access policies according to organizational requirements.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/resources/zia_url_filtering_and_cloud_app_settings.md#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"zia_url_filtering_and_cloud_app_settings\" \"this\" {\n    block_skype                             = true\n    consider_embedded_sites                 = false\n    enable_block_override_for_non_auth_user = false\n    enable_chatgpt_prompt                   = false\n    enable_cipa_compliance                  = false\n    enable_dynamic_content_cat              = true\n    enable_gemini_prompt                    = false\n    enable_meta_prompt                      = false\n    enable_microsoft_copilot_prompt         = false\n    enable_msft_o365                        = false\n    enable_newly_registered_domains         = false\n    enable_office365                        = true\n    enable_per_plexity_prompt               = false\n    enable_poep_prompt                      = false\n    enable_ucaas_logmein                    = false\n    enable_ucaas_ring_central               = false\n    enable_ucaas_talkdesk                   = false\n    enable_ucaas_webex                      = false\n    enable_ucaas_zoom                       = false\n    enforce_safe_search                     = false\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Subnets to ZIA Firewall IP Source Groups in Terraform\nDESCRIPTION: This HCL code snippet details creating a new IP source group in ZIA firewall by adding a subnet. The operation requires Terraform and the Zscaler provider. The 'ip_addresses' argument is assigned a subnet with CIDR notation. The expected output is an IP source group in ZIA Cloud Firewall that includes the specified subnet.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/resources/zia_firewall_filtering_ip_source_groups.md#2025-04-22_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\n# Add subnet to a new IP Source Group\nresource \"zia_firewall_filtering_ip_source_groups\" \"example\" {\n  name        = \"Example\"\n  description = \"Example\"\n  ip_addresses = [ \"203.0.113.0/24\" ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating ZIA Sandbox Rule Configuration in Terraform\nDESCRIPTION: Example of creating a sandbox rule in ZIA with various configuration options including file types, protocols, department and group assignments. The rule enables first-time scanning and ML-based actions with specific behavioral analysis policies.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/resources/zia_sandbox_rules.md#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"zia_department_management\" \"engineering\" {\n name = \"Engineering\"\n}\n\ndata \"zia_group_management\" \"normal_internet\" {\n    name = \"Normal_Internet\"\n}\n\nresource \"zia_sandbox_rules\" \"this\" {\n    name                 = \"SandboxRule01\"\n    description          = \"SandboxRule01\"\n    rank                 = 7\n    order                = 1\n    first_time_enable    = true\n    ml_action_enabled    = true\n    first_time_operation = \"ALLOW_SCAN\"\n    ba_rule_action       = \"BLOCK\"\n    state                = \"ENABLED\"\n    ba_policy_categories = [\"ADWARE_BLOCK\", \"BOTMAL_BLOCK\", \"ANONYP2P_BLOCK\", \"RANSOMWARE_BLOCK\"]\n    file_types           = [\"FTCATEGORY_P7Z\",\n        \"FTCATEGORY_MS_WORD\",\n        \"FTCATEGORY_PDF_DOCUMENT\",\n        \"FTCATEGORY_TAR\",\n        \"FTCATEGORY_SCZIP\",\n        \"FTCATEGORY_WINDOWS_EXECUTABLES\",\n        \"FTCATEGORY_HTA\",\n        \"FTCATEGORY_FLASH\",\n        \"FTCATEGORY_RAR\",\n        \"FTCATEGORY_MS_EXCEL\",\n        \"FTCATEGORY_VISUAL_BASIC_SCRIPT\",\n        \"FTCATEGORY_MS_POWERPOINT\",\n        \"FTCATEGORY_WINDOWS_LIBRARY\",\n        \"FTCATEGORY_POWERSHELL\",\n        \"FTCATEGORY_APK\",\n        \"FTCATEGORY_ZIP\",\n        \"FTCATEGORY_BZIP2\",\n        \"FTCATEGORY_JAVA_APPLET\",\n        \"FTCATEGORY_MS_RTF\"]\n    protocols            = [\n        \"FOHTTP_RULE\",\n        \"FTP_RULE\",\n        \"HTTPS_RULE\",\n        \"HTTP_RULE\",\n    ]\n    departments {\n        id = [ data.zia_department_management.engineering.id ]\n    }\n    groups {\n        id = [ data.zia_group_management.normal_internet.id ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning ZIA DLP Dictionary with Hierarchical Identifiers - Terraform - HCL\nDESCRIPTION: Shows how to use Terraform HCL syntax to define a ZIA DLP dictionary resource that clones an existing dictionary template and adds hierarchical identifiers. Essential parameters include the source dictionary's ID, hierarchical_identifiers, and confidence thresholds. The configuration is suitable when leveraging predefined logic or compliance templates within the Zscaler platform. Requires the Zscaler Terraform provider and the referenced data source for 'dict_template_id.'\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/resources/zia_dlp_dictionaries.md#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"zia_dlp_dictionaries\" \"example\"{\n    name                     = \"Example Dictionary Clone\"\n    description              = \"Example Dictionary Clone\"\n    confidence_level_for_predefined_dict = \"CONFIDENCE_LEVEL_MEDIUM\"\n    hierarchical_identifiers = [\"CRED_LEAKAGE\"]\n    confidence_threshold     = \"CONFIDENCE_LEVEL_HIGH\"\n    dict_template_id         = data.zia_dlp_dictionaries.this.id\n    phrases {\n        action = \"PHRASE_COUNT_TYPE_ALL\"\n        phrase = \"YourPhrase1\"\n    }\n    custom_phrase_match_type = \"MATCH_ALL_CUSTOM_PHRASE_PATTERN_DICTIONARY\"\n    dictionary_type          = \"PATTERNS_AND_PHRASES\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating ZIA DLP Dictionary Resource - Terraform - HCL\nDESCRIPTION: Demonstrates how to define a custom ZIA DLP dictionary resource using Terraform's HCL syntax. This configuration creates a new DLP dictionary with specified name, description, phrases, patterns, and match types. Requires the Zscaler Terraform provider; fields such as 'name', 'dictionary_type', 'custom_phrase_match_type', 'phrases', and 'patterns' are mandatory. Inputs define the dictionary's structure, while the resulting resource is used for DLP configuration within ZIA. Constraints include required attributes and proper matching of types as documented.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/resources/zia_dlp_dictionaries.md#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"zia_dlp_dictionaries\" \"example\"{\n    name = \"Your Dictionary Name\"\n    description = \"Your Description\"\n    phrases {\n        action = \"PHRASE_COUNT_TYPE_ALL\"\n        phrase = \"YourPhrase\"\n    }\n    custom_phrase_match_type = \"MATCH_ALL_CUSTOM_PHRASE_PATTERN_DICTIONARY\"\n    patterns {\n        action = \"PATTERN_COUNT_TYPE_UNIQUE\"\n        pattern = \"YourPattern\"\n    }\n    dictionary_type = \"PATTERNS_AND_PHRASES\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Optional Parameters for Cloud App Control Rules in Terraform\nDESCRIPTION: This snippet details the optional parameters available for configuring Cloud App Control rules in Zscaler Internet Access using Terraform. It covers a wide range of settings including rule descriptions, actions, order, state, device configurations, time and size quotas, validity periods, and various entity associations.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/resources/zia_cloud_app_control_rule.md#2025-04-22_snippet_6\n\nLANGUAGE: HCL\nCODE:\n```\nresource \"zia_cloud_app_control_rule\" \"example\" {\n  # Required parameters not shown\n\n  description = \"Example Cloud App Control rule\"\n  actions     = [\"ACTION1\", \"ACTION2\"]\n  order       = 1\n  rank        = 7\n  state       = \"ENABLED\"\n\n  devices {\n    id = 123\n  }\n\n  device_groups {\n    id = 456\n  }\n\n  device_trust_levels = [\"MEDIUM_TRUST\", \"HIGH_TRUST\"]\n\n  user_risk_score_levels = [\"LOW\", \"MEDIUM\"]\n  user_agent_types       = [\"CHROME\", \"FIREFOX\"]\n\n  time_quota = 60\n  size_quota = 100\n\n  validity_start_time   = \"Sun, 16 Jun 2024 15:04:05 UTC\"\n  validity_end_time     = \"Sun, 16 Jun 2025 15:04:05 UTC\"\n  validity_time_zone_id = \"America/New_York\"\n  enforce_time_validity = true\n\n  applications {\n    val = 789\n  }\n\n  tenancy_profile_ids {\n    id = 101112\n  }\n\n  cloud_app_risk_profile {\n    id = 131415\n  }\n\n  cloud_app_instances {\n    id = 161718\n  }\n\n  cbi_profile {\n    id   = \"uuid-1234-5678-90ab-cdef\"\n    name = \"Example Profile\"\n    url  = \"https://example.com/profile\"\n  }\n\n  locations {\n    id = 192021\n  }\n\n  location_groups {\n    id = 222324\n  }\n\n  users {\n    id = 252627\n  }\n\n  groups {\n    id = 282930\n  }\n\n  departments {\n    id = 313233\n  }\n\n  time_windows {\n    id = 343536\n  }\n\n  labels {\n    id = 373839\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining Static IP Resource with Terraform HCL\nDESCRIPTION: This snippet defines a ZIA \\'traffic_forwarding_static_ip\\' resource with necessary attributes such as \\'ip_address\\', \\'routable_ip\\', and others. It is configured using HashiCorp Configuration Language (HCL) and requires a reachable Terraform environment configured with the Zscaler provider. Key parameters include \\'ip_address\\' (a required field for the static IP), and optional parameters like \\'geo_override\\', \\'latitude\\', and \\'longitude\\'.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/resources/zia_traffic_forwarding_static_ip.md#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"zia_traffic_forwarding_static_ip\" \"example\"{\n    ip_address      =  \"1.1.1.1\"\n    routable_ip     = true\n    comment         = \"Example\"\n    geo_override    = true\n    latitude        = -36.848461\n    longitude       = 174.763336\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Network Service Groups in ZIA Firewall with Terraform\nDESCRIPTION: Demonstrates how to create a network service group by combining multiple network services like FTP, NETBIOS, and DNS. Shows data source declarations and resource configuration with required parameters.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/resources/zia_firewall_filtering_network_service_groups.md#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"zia_firewall_filtering_network_service\" \"example1\" {\n  name = \"FTP\"\n}\n\ndata \"zia_firewall_filtering_network_service\" \"example2\" {\n  name = \"NETBIOS\"\n}\n\ndata \"zia_firewall_filtering_network_service\" \"example3\" {\n  name = \"DNS\"\n}\n\n# Add network services to a network services group\nresource \"zia_firewall_filtering_network_service_groups\" \"example\"{\n    name        = \"example\"\n    description = \"example\"\n    services {\n        id = [\n            data.zia_firewall_filtering_network_service.example1.id,\n            data.zia_firewall_filtering_network_service.example2.id,\n            data.zia_firewall_filtering_network_service.example3.id\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring DO_NOT_DECRYPT SSL Inspection Rules (Bypass False) - Terraform Zscaler - HCL\nDESCRIPTION: This code snippet creates an SSL Inspection Rule in ZIA using the DO_NOT_DECRYPT action with bypass_other_policies set to false, via Terraform HCL. The rule specifies groups, cloud applications, platforms, and defines certificate and TLS options in the sub-action. Dependencies include the Zscaler provider and a valid 'zia_group_management' data source reference. Inputs include rule metadata and group IDs; the output is a policy rule that does not decrypt SSL traffic but does not bypass other policies. Limitations include required compliance with predefined rule ordering and restrictions on deleting such rules.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/resources/zia_ssl_inspection_rules.md#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"zia_group_management\" \"this\" {\n    name = \"A000\"\n}\n\nresource \"zia_ssl_inspection_rules\" \"this\" {\n  name                         = \"SSL_Rule_Do_Not_Decrypt\"\n  description                  = \"SSL_Rule_Do_Not_Decrypt\"\n  state                        = \"ENABLED\"\n  order                        = 1\n  rank                         = 7\n  road_warrior_for_kerberos    = true\n  cloud_applications           = [\"CHATGPT_AI\", \"ANDI\"]\n  platforms                    = [\"SCAN_IOS\", \"SCAN_ANDROID\", \"SCAN_MACOS\", \"SCAN_WINDOWS\", \"NO_CLIENT_CONNECTOR\", \"SCAN_LINUX\"]\n\n  action {\n    type                                    = \"DO_NOT_DECRYPT\"\n    do_not_decrypt_sub_actions {\n      bypass_other_policies                 = false\n      server_certificates                   = \"ALLOW\"\n      ocsp_check                            = true\n      block_ssl_traffic_with_no_sni_enabled = true\n      min_tls_version                       = \"SERVER_TLS_1_0\"\n    }\n  }\n  groups {\n        id = [ data.zia_group_management.this.id ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding IP Addresses to ZIA Firewall IP Source Groups in Terraform\nDESCRIPTION: This HCL snippet demonstrates how to create a new IP source group in ZIA firewall by adding multiple individual IP addresses. Dependencies include having Terraform and Zscaler provider configured. The 'ip_addresses' parameter accepts a list of IP addresses to be included in the group. The expected output is a configured IP source group in ZIA Cloud Firewall.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/resources/zia_firewall_filtering_ip_source_groups.md#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n# Add an IP address or addresses to a new IP Source Group\nresource \"zia_firewall_filtering_ip_source_groups\" \"example\" {\n  name        = \"Example\"\n  description = \"Example\"\n  ip_addresses = [ \"192.168.100.1\", \"192.168.100.2\", \"192.168.100.3\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating ProxyChain Forwarding Control Rule in ZIA\nDESCRIPTION: Creates a forwarding control rule using the PROXYCHAIN method, requiring manual specification of proxy gateway details.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/resources/zia_forwarding_control_rule.md#2025-04-22_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"zia_forwarding_control_rule\" \"this\" {\n  name               = \"PROXYCHAIN_FORWARDING_RULE\"\n  description        = \"PROXYCHAIN_FORWARDING_RULE\"\n  order              = 1\n  rank               = 7\n  state              = \"ENABLED\"\n  type               = \"FORWARDING\"\n  forward_method     = \"PROXYCHAIN\"\n  src_ips            = [\"192.168.200.200\"]\n  dest_addresses     = [\"192.168.255.1\"]\n  dest_ip_categories = [\"ZSPROXY_IPS\", \"CUSTOM_01\"]\n  dest_countries     = [\"CA\", \"US\"]\n  proxy_gateway {\n    id   = 2589270\n    name = \"ProxyGW01\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring BLOCK SSL Inspection Rules with Terraform Provider Zscaler - HCL\nDESCRIPTION: This example demonstrates how to configure an SSL Inspection Rule in ZIA that blocks SSL traffic with specified certificate settings, using Terraform HCL. The rule is assigned to groups and can be filtered by platform and cloud application criteria. Dependencies are Zscaler's group data and the correct installation of the provider. Required parameters include rule name, description, and group reference. The output is a policy that blocks matching SSL connections. Limitations mirror those for other SSL inspection rules, especially concerning predefined rule order.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/resources/zia_ssl_inspection_rules.md#2025-04-22_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"zia_group_management\" \"this\" {\n    name = \"A000\"\n}\n\nresource \"zia_ssl_inspection_rules\" \"this\" {\n  name                         = \"SSL_Rule_BLOCK\"\n  description                  = \"SSL_Rule_BLOCK\"\n  state                        = \"ENABLED\"\n  order                        = 1\n  rank                         = 7\n  road_warrior_for_kerberos    = true\n  cloud_applications           = [\"CHATGPT_AI\", \"ANDI\"]\n  platforms                    = [\"SCAN_IOS\", \"SCAN_ANDROID\", \"SCAN_MACOS\", \"SCAN_WINDOWS\", \"NO_CLIENT_CONNECTOR\", \"SCAN_LINUX\"]\n\n  action {\n    type                                    = \"BLOCK\"\n    ssl_interception_cert {\n      id                                    = 1\n    }\n  }\n  groups {\n        id = [ data.zia_group_management.this.id ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating ZIA VPN Credentials (UFQDN) with Terraform (HCL)\nDESCRIPTION: Defines a ZIA traffic forwarding VPN credential using the UFQDN authentication type in Terraform. Required parameters include the 'type', 'fqdn', and 'pre_shared_key', with an optional 'comments' field. This resource can be used to allow authenticated site-to-site VPN connections, and the provided values (such as passwords) are placeholders for demonstration purposes.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/resources/zia_traffic_forwarding_vpn_credentials.md#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n######### PASSWORDS IN THIS FILE ARE FAKE AND NOT USED IN PRODUCTION SYSTEMS #########\n# ZIA Traffic Forwarding - VPN Credentials (UFQDN)\nresource \"zia_traffic_forwarding_vpn_credentials\" \"example\"{\n    type            = \"UFQDN\"\n    fqdn            = \"sjc-1-37@acme.com\"\n    comments        = \"Example\"\n    pre_shared_key = \"*********************\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating ZIA Firewall DNS Rule with Redirect Action\nDESCRIPTION: Creates a DNS firewall rule that redirects requests to a specified IP address. Includes configuration for departments, groups, time windows, and geographic restrictions.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/resources/zia_firewall_dns_rules.md#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"zia_department_management\" \"engineering\" {\n name = \"Engineering\"\n}\n\ndata \"zia_group_management\" \"normal_internet\" {\n    name = \"Normal_Internet\"\n}\n\ndata \"zia_firewall_filtering_time_window\" \"work_hours\" {\n    name = \"Work hours\"\n}\n\nresource \"zia_firewall_dns_rule\" \"this\" {\n    name = \"Example_DNS_Rule01\"\n    description = \"Example_DNS_Rule01\"\n    action = \"REDIR_REQ\"\n    state = \"ENABLED\"\n    order = 10\n    rank = 7\n    redirect_ip = \"8.8.8.8\"\n    dest_countries = [\"CA\", \"US\"]\n    source_countries = [\"CA\", \"US\"]\n    protocols = [\"ANY_RULE\"]\n    departments {\n        id = [ data.zia_department_management.engineering.id ]\n    }\n    groups {\n        id = [ data.zia_group_management.normal_internet.id ]\n    }\n    time_windows {\n        id = [ data.zia_firewall_filtering_time_window.work_hours.id ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring a Numbered ZIA GRE Tunnel in HCL\nDESCRIPTION: This HCL snippet shows how to configure a numbered GRE tunnel. It uses the `zia_gre_internal_ip_range_list` data source to fetch an available internal IP range and assigns it to the `internal_ip_range` argument. The `ip_unnumbered` attribute is set to `false` (implied or explicitly). A `lifecycle` block is included to prevent Terraform from modifying the `internal_ip_range` unless explicitly changed in the configuration, and it depends on the corresponding static IP resource.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/resources/zia_traffic_forwarding_gre_tunnel.md#2025-04-22_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"zia_gre_internal_ip_range_list\" \"this\"{\n    required_count = 1\n}\n\n# ZIA Traffic Forwarding - Static IP\nresource \"zia_traffic_forwarding_static_ip\" \"this\"{\n    ip_address      =  \"1.1.1.1\"\n    routable_ip     = true\n    comment         = \"Example\"\n    geo_override    = true\n    latitude        = 37.418171\n    longitude       = -121.953140\n}\n\n# Creates a Numbered GRE Tunnel\nresource \"zia_traffic_forwarding_gre_tunnel\" \"this\" {\n  source_ip       = zia_traffic_forwarding_static_ip.this.ip_address\n  comment         = \"Example\"\n  internal_ip_range = data.zia_gre_internal_ip_range_list.this.list[0].start_ip_address\n  within_country  = true\n  country_code    = \"US\"\n  ip_unnumbered   = true\n  depends_on      = [ zia_traffic_forwarding_static_ip.this ]\n\n  lifecycle {\n    ignore_changes = [\n      internal_ip_range,\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating ZIA Admin User (Organization Scope) in HCL\nDESCRIPTION: This Terraform configuration snippet demonstrates how to define a `zia_admin_users` resource named `john_smith`. It configures the user with organization-wide administrative scope (`admin_scope_type = \\\"ORGANIZATION\\\"`), sets basic user details like login name, username, email, password settings, communication preferences, and assigns the 'Super Admin' role fetched using the `zia_admin_roles` data source.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/resources/zia_admin_users.md#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n######### PASSWORDS IN THIS FILE ARE FAKE AND NOT USED IN PRODUCTION SYSTEMS #########\nresource \"zia_admin_users\" \"john_smith\" {\n  login_name                      = \"john.smith@acme.com\"\n  user_name                       = \"John Smith\"\n  email                           = \"john.smith@acme.com\"\n  is_password_login_allowed       = true\n  password                        = \"*********************\"\n  is_security_report_comm_enabled = true\n  is_service_update_comm_enabled  = true\n  is_product_update_comm_enabled  = true\n  comments                        = \"Administrator User\"\n  role {\n    id = data.zia_admin_roles.super_admin.id\n  }\n  admin_scope_type = \"ORGANIZATION\"\n}\n\ndata \"zia_admin_roles\" \"super_admin\" {\n  name = \"Super Admin\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Both Whitelist and Blacklist URLs in ZIA\nDESCRIPTION: Illustrates how to simultaneously configure both whitelist and blacklist URLs in ZIA for comprehensive security management across both Malware and Advanced Threat Protection.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/resources/zia_security_policy_settings.md#2025-04-22_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"zia_security_settings\" \"this\" {\n  whitelist_urls = [\n    \"resource5.acme.net\",\n    \"resource6.acme.net\",\n    \"resource7.acme.net\",\n    \"resource8.acme.net\",\n  ]\n  blacklist_urls = [\n    \"resource1.acme.net\",\n    \"resource2.acme.net\",\n    \"resource3.acme.net\",\n    \"resource4.acme.net\",\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Activating ZIA Configuration with Go SDK\nDESCRIPTION: This Go program demonstrates activating pending Zscaler ZIA configuration changes. It retrieves credentials (username, password, API key, cloud ID) from environment variables, initializes a ZIA client using the `zscaler-sdk-go/v2/zia` package, and calls the `activation.CreateActivation` function to trigger the activation. The program logs the success or failure of the activation and ensures the client session is logged out. Requires `ZIA_USERNAME`, `ZIA_PASSWORD`, `ZIA_API_KEY`, and `ZIA_CLOUD` environment variables to be set.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/guides/zia_activator.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"os\"\n\t\"runtime\"\n\n\tclient \"github.com/zscaler/zscaler-sdk-go/v2/zia\"\n\t\"github.com/zscaler/zscaler-sdk-go/v2/zia/services\"\n\t\"github.com/zscaler/zscaler-sdk-go/v2/zia/services/activation\"\n)\n\nfunc getEnvVarOrFail(k string) string {\n\tif v := os.Getenv(k); v != \"\" {\n\t\treturn v\n\t}\n\tlog.Fatalf(\"[ERROR] Couldn't find environment variable %s\\n\", k)\n\treturn \"\"\n}\n\nfunc main() {\n\tlog.Printf(\"[INFO] Initializing ZIA client\\n\")\n\n\t// Here, rather than setting up the client configuration from the external library,\n\t// we'll simply gather the required details for initializing the client\n\tusername := getEnvVarOrFail(\"ZIA_USERNAME\")\n\tpassword := getEnvVarOrFail(\"ZIA_PASSWORD\")\n\tapiKey := getEnvVarOrFail(\"ZIA_API_KEY\")\n\tziaCloud := getEnvVarOrFail(\"ZIA_CLOUD\")\n\tuserAgent := fmt.Sprintf(\"(%s %s) cli/ziaActivator\", runtime.GOOS, runtime.GOARCH)\n\n\t// Now, we'll use the local SDK's NewClient method to get the client instance\n\tcli, err := client.NewClient(username, password, apiKey, ziaCloud, userAgent)\n\tif err != nil {\n\t\tlog.Fatalf(\"[ERROR] Failed Initializing ZIA client: %v\\n\", err)\n\t}\n\n\tservice := services.New(cli)\n\tresp, err := activation.CreateActivation(service, activation.Activation{\n\t\tStatus: \"active\",\n\t})\n\tif err != nil {\n\t\tlog.Printf(\"[ERROR] Activation Failed: %v\\n\", err)\n\t} else {\n\t\tlog.Printf(\"[INFO] Activation succeeded: %#v\\n\", resp)\n\t}\n\n\tlog.Printf(\"[INFO] Destroying session: %#v\\n\", resp)\n\t_ = cli.Logout()\n\tos.Exit(0)\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating ZIA Location with IP VPN Credentials\nDESCRIPTION: Shows configuration for a ZIA location using IP-based VPN credentials, including static IP assignment and VPN setup.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/resources/zia_location_management.md#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"zia_location_management\" \"usa_sjc37\"{\n    name = \"USA_SJC_37\"\n    description = \"Created with Terraform\"\n    country = \"UNITED_STATES\"\n    tz = \"UNITED_STATES_AMERICA_LOS_ANGELES\"\n    auth_required = true\n    idle_time_in_minutes = 720\n    display_time_unit = \"HOUR\"\n    surrogate_ip = true\n    xff_forward_enabled = true\n    ofw_enabled = true\n    ips_control = true\n    ip_addresses = [ zia_traffic_forwarding_static_ip.usa_sjc37.ip_address ]\n    depends_on = [ zia_traffic_forwarding_static_ip.usa_sjc37, zia_traffic_forwarding_vpn_credentials.usa_sjc37 ]\n    vpn_credentials {\n       id = zia_traffic_forwarding_vpn_credentials.usa_sjc37.id\n       type = zia_traffic_forwarding_vpn_credentials.usa_sjc37.type\n       ip_address = zia_traffic_forwarding_static_ip.usa_sjc37.ip_address\n    }\n}\n\nresource \"zia_traffic_forwarding_vpn_credentials\" \"usa_sjc37\"{\n    type        = \"IP\"\n    ip_address  =  zia_traffic_forwarding_static_ip.usa_sjc37.ip_address\n    depends_on = [ zia_traffic_forwarding_static_ip.usa_sjc37 ]\n    comments    = \"Created via Terraform\"\n    pre_shared_key = \"******************\"\n}\n\nresource \"zia_traffic_forwarding_static_ip\" \"usa_sjc37\"{\n    ip_address =  \"1.1.1.1\"\n    routable_ip = true\n    comment = \"SJC37 - Static IP\"\n    geo_override = false\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a ZIA URL Category Resource in HCL\nDESCRIPTION: This HCL code defines a `zia_url_categories` resource named \"example\". It configures a custom URL category named \"MCAS Unsanctioned Apps\" within the user-defined super category, provides a description, assigns keywords, sets the type to URL_CATEGORY, defines scope based on location and group data sources, and lists specific URLs to include in the category. It depends on data sources `zia_location_management.nyc_site` and `zia_group_management.engineering` for scope IDs.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/resources/zia_url_categories.md#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"zia_url_categories\" \"example\" {\n  super_category      = \"USER_DEFINED\"\n  configured_name     = \"MCAS Unsanctioned Apps\"\n  description         = \"MCAS Unsanctioned Apps\"\n  keywords            = [\"microsoft\"]\n  custom_category     = true\n  type                = \"URL_CATEGORY\"\n  scopes {\n    type = \"LOCATION\"\n    scope_entities {\n      id = [ data.zia_location_management.nyc_site.id ]\n    }\n    scope_group_member_entities {\n      id = [ data.zia_group_management.engineering.id ]\n    }\n  }\n  urls = [\n    \".coupons.com\",\n    \".resource.alaskaair.net\",\n    \".techrepublic.com\",\n    \".dailymotion.com\",\n    \".osiriscomm.com\",\n    \".uefa.com\",\n    \".Logz.io\",\n    \".alexa.com\",\n    \".baidu.com\",\n    \".cnn.com\",\n    \".level3.com\",\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating ZIA Location with UFQDN VPN Credentials\nDESCRIPTION: Demonstrates how to create a ZIA location with UFQDN-based VPN credentials. Includes location configuration parameters and associated VPN credential resource.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/resources/zia_location_management.md#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"zia_location_management\" \"usa_sjc37\"{\n    name                        = \"USA_SJC_37\"\n    description                 = \"Created with Terraform\"\n    country                     = \"UNITED_STATES\"\n    tz                          = \"UNITED_STATES_AMERICA_LOS_ANGELES\"\n    auth_required               = true\n    idle_time_in_minutes        = 720\n    display_time_unit           = \"HOUR\"\n    surrogate_ip                = true\n    xff_forward_enabled         = true\n    ofw_enabled                 = true\n    ips_control                 = true\n    vpn_credentials {\n       id = zia_traffic_forwarding_vpn_credentials.usa_sjc37.id\n       type = zia_traffic_forwarding_vpn_credentials.usa_sjc37.type\n    }\n    depends_on = [zia_traffic_forwarding_vpn_credentials.usa_sjc37 ]\n}\n\nresource \"zia_traffic_forwarding_vpn_credentials\" \"usa_sjc37\"{\n    type            = \"UFQDN\"\n    fqdn            = \"usa_sjc37@acme.com\"\n    comments        = \"USA - San Jose IPSec Tunnel\"\n    pre_shared_key  = \"***************\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating ZIA Admin User (Location Scope) in HCL\nDESCRIPTION: This Terraform configuration demonstrates creating a `zia_admin_users` resource limited to specific locations. The `admin_scope_type` is set to `LOCATION`, and the `admin_scope_entities` block contains IDs of the relevant locations, fetched using the `zia_location_management` data source. User attributes and role assignment follow the established pattern.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/resources/zia_admin_users.md#2025-04-22_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\n######### PASSWORDS IN THIS FILE ARE FAKE AND NOT USED IN PRODUCTION SYSTEMS #########\nresource \"zia_admin_users\" \"john_smith\" {\n  login_name                      = \"john.smith@acme.com\"\n  user_name                       = \"John Smith\"\n  email                           = \"john.smith@acme.com\"\n  is_password_login_allowed       = true\n  password                        = \"*********************\"\n  is_security_report_comm_enabled = true\n  is_service_update_comm_enabled  = true\n  is_product_update_comm_enabled  = true\n  comments                        = \"Administrator User\"\n  role {\n    id = data.zia_admin_roles.super_admin.id\n  }\n  admin_scope_type = \"LOCATION\"\n    admin_scope_entities {\n        id = [ data.zia_location_management.au_sydney_branch01.id ]\n    }\n}\n\ndata \"zia_admin_roles\" \"super_admin\" {\n  name = \"Super Admin\"\n}\n\ndata \"zia_location_management\" \"au_sydney_branch01\" {\n  name = \"AU - Sydney - Branch01\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ZIA Cloud App Control Rule with Cloud Risk Profile in HCL\nDESCRIPTION: This HCL snippet shows how to configure a `zia_cloud_app_control_rule` resource that includes a Cloud App Risk Profile. The rule applies to specific WebMail applications and associates them with a predefined risk profile identified by its ID (318). Note: Retrieving the Risk Profile ID via Terraform resources is currently unavailable.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/resources/zia_cloud_app_control_rule.md#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"zia_cloud_app_control_rule\" \"this\" {\n    name                         = \"Example_WebMail_Rule\"\n    description                  = \"Example_WebMail_Rule\"\n    order                        = 1\n    rank                         = 7\n    state                        = \"ENABLED\"\n    type                         = \"WEBMAIL\"\n    actions                      = [\n        \"ALLOW_WEBMAIL_VIEW\",\n        \"ALLOW_WEBMAIL_ATTACHMENT_SEND\",\n        \"ALLOW_WEBMAIL_SEND\",\n    ]\n    applications          = [\n        \"GOOGLE_WEBMAIL\",\n        \"YAHOO_WEBMAIL\",\n    ]\n    cloud_app_risk_profile {\n      id = 318\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Incident Receiver and Notification Templates\nDESCRIPTION: This snippet demonstrates configuring a DLP web rule to use a specific Incident Receiver and associate a Notification Template. It requires data resources for custom URL categories, Incident Receiver Servers, and Notification Templates. The rule is set to BLOCK, enabled with an incident receiver, and defined URL categories and notification templates.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/resources/zia_dlp_web_rules.md#2025-04-22_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\n// Retrieve a custom URL Category by Name\ndata \"zia_url_categories\" \"this\"{\n    configured_name = \"Example\"\n}\n\n// Retrieve a Incident Receiver by Name\ndata \"zia_dlp_incident_receiver_servers\" \"this\" {\n  name = \"ZS_INC_RECEIVER_01\"\n}\n\nresource \"zia_dlp_web_rules\" \"this\" {\n  name                      = \"Terraform_Test\"\n  description               = \"Terraform_Test\"\n  action                    = \"BLOCK\"\n  order                     = 1\n  protocols                 = [\"FTP_RULE\", \"HTTPS_RULE\", \"HTTP_RULE\"]\n  rank                      = 7\n  state                     = \"ENABLED\"\n  zscaler_incident_receiver = true\n  without_content_inspection = false\n  url_categories {\n    id = [ data.zia_url_categories.this.val ]\n  }\n  icap_server {\n    id = data.zia_dlp_incident_receiver_servers.this.id\n  }\n  notification_template {\n    id = data.zia_dlp_notification_templates.this.id\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Activating ZIA Configuration using Terraform HCL\nDESCRIPTION: This HCL snippet demonstrates how to use the `zia_activation_status` data source and resource. The data source fetches the current activation status, while the resource explicitly sets the status to 'ACTIVE', triggering the activation of pending ZIA configuration changes. Note that this resource is planned for deprecation as activation is now often handled implicitly by the provider.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/resources/zia_activation_status.md#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"zia_activation_status\" \"activation\" {}\n\nresource \"zia_activation_status\" \"activation\" {\n  status                      = \"ACTIVE\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom ZIA DLP Engine Resource in Terraform\nDESCRIPTION: This Terraform HCL code defines a `zia_dlp_engines` resource named \"this\". It configures a custom DLP engine named \"Example\" with a description and a specific engine expression `((D63.S > 1))`. The `custom_dlp_engine` attribute is set to `true`, indicating it's a user-defined engine. This resource requires the Zscaler ZIA Terraform provider.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/resources/zia_dlp_engines.md#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n# Retrieve a DLP Engine by name\nresource \"zia_dlp_engines\" \"this\" {\n  name = \"Example\"\n  description = \"Example\"\n  engine_expression = \"((D63.S > 1))\"\n  custom_dlp_engine = true\n}\n```\n\n----------------------------------------\n\nTITLE: Creating ZIA Admin User (Department Scope) in HCL\nDESCRIPTION: This HCL snippet illustrates creating a `zia_admin_users` resource scoped to specific departments. It sets `admin_scope_type` to `DEPARTMENT` and provides a list of department IDs within the `admin_scope_entities` block. These department IDs are dynamically retrieved using `zia_department_management` data sources. Other user attributes and role assignment remain similar to the organization scope example.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/resources/zia_admin_users.md#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n######### PASSWORDS IN THIS FILE ARE FAKE AND NOT USED IN PRODUCTION SYSTEMS #########\nresource \"zia_admin_users\" \"john_smith\" {\n  login_name                      = \"john.smith@acme.com\"\n  user_name                       = \"John Smith\"\n  email                           = \"john.smith@acme.com\"\n  is_password_login_allowed       = true\n  password                        = \"*********************\"\n  is_security_report_comm_enabled = true\n  is_service_update_comm_enabled  = true\n  is_product_update_comm_enabled  = true\n  comments                        = \"Administrator User\"\n  role {\n    id = data.zia_admin_roles.super_admin.id\n  }\n  admin_scope_type = \"DEPARTMENT\"\n    admin_scope_entities {\n        id = [ data.zia_department_management.engineering.id, data.zia_department_management.sales.id ]\n    }\n}\n\ndata \"zia_admin_roles\" \"super_admin\" {\n  name = \"Super Admin\"\n}\n\ndata \"zia_department_management\" \"engineering\" {\n  name = \"Engineering\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating ZIA Admin User (Location Group Scope) in HCL\nDESCRIPTION: This HCL example shows how to create a `zia_admin_users` resource scoped to specific location groups. It sets `admin_scope_type` to `LOCATION_GROUP` and uses the `admin_scope_entities` block to reference the ID of a location group, retrieved via the `zia_location_groups` data source. Other configuration details like user info and role are consistent with previous examples.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/resources/zia_admin_users.md#2025-04-22_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\n######### PASSWORDS IN THIS FILE ARE FAKE AND NOT USED IN PRODUCTION SYSTEMS #########\nresource \"zia_admin_users\" \"john_smith\" {\n  login_name                      = \"john.smith@acme.com\"\n  user_name                       = \"John Smith\"\n  email                           = \"john.smith@acme.com\"\n  is_password_login_allowed       = true\n password                         = \"*********************\"\n  is_security_report_comm_enabled = true\n  is_service_update_comm_enabled  = true\n  is_product_update_comm_enabled  = true\n  comments                        = \"Administrator User\"\n  role {\n    id = data.zia_admin_roles.super_admin.id\n  }\n  admin_scope_type = \"LOCATION_GROUP\"\n    admin_scope_entities {\n        id = [ data.zia_location_groups.corporate_user_traffic_group.id ]\n    }\n}\n\ndata \"zia_admin_roles\" \"super_admin\" {\n  name = \"Super Admin\"\n}\n\ndata \"zia_location_groups\" \"corporate_user_traffic_group\" {\n  name = \"Corporate User Traffic Group\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ZIA Cloud App Control Rule with Tenant Profile in HCL\nDESCRIPTION: This HCL snippet demonstrates configuring a `zia_cloud_app_control_rule` resource with a specific Tenant Profile ID. The rule applies to specified WebMail applications and is linked to tenant profile ID 19016237. Note: Tenant profile support depends on the application type, and retrieving Tenant Profile IDs via Terraform resources is currently unavailable.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/resources/zia_cloud_app_control_rule.md#2025-04-22_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"zia_cloud_app_control_rule\" \"this\" {\n    name                         = \"Example_WebMail_Rule\"\n    description                  = \"Example_WebMail_Rule\"\n    order                        = 1\n    rank                         = 7\n    state                        = \"ENABLED\"\n    type                         = \"WEBMAIL\"\n    actions                      = [\n        \"ALLOW_WEBMAIL_VIEW\",\n        \"ALLOW_WEBMAIL_ATTACHMENT_SEND\",\n        \"ALLOW_WEBMAIL_SEND\",\n    ]\n    applications          = [\n        \"GOOGLE_WEBMAIL\",\n        \"YAHOO_WEBMAIL\",\n    ]\n    tenancy_profile_ids {\n        id = [ 19016237 ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an SDWAN-Specific ZIA Admin Role using Terraform HCL\nDESCRIPTION: This HCL code snippet shows how to configure a `zia_admin_roles` resource specifically for an SDWAN administrative role in ZIA using Terraform. It sets the role name, rank, policy access, explicitly disables alerting access (`NONE`), and defines the `role_type` as 'SDWAN'. This resource requires the Zscaler ZIA Terraform provider.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/resources/zia_admin_roles.md#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"zia_admin_roles\" \"this\" {\n  name               = \"SDWANAdminRoleTerraform\"\n  rank               = 7\n  policy_access      = \"READ_WRITE\"\n  alerting_access    = \"NONE\"\n  role_type          = \"SDWAN\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Zscaler Provider with Legacy Authentication\nDESCRIPTION: This code snippet details how to set up the ZIA provider using legacy authentication. It requires a ZIA username, password, API key, and cloud, which can be provided through environment variables. Placeholders need to be substituted with real values. The configuration supports tenants not yet migrated to Zidentity.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/index.md#2025-04-22_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\n# Configure the Zscaler Internet Access Provider\nterraform {\n    required_providers {\n        zia = {\n            version = \"~> 4.0.0\"\n            source = \"zscaler/zia\"\n        }\n    }\n}\n\n# Configure the ZIA Provider (Legacy Authentication)\n#\n# NOTE: Change place holder values denoted by brackets to real values, including\n# the brackets.\n#\n# NOTE: If environment variables are utilized for provider settings the\n# corresponding variable name does not need to be set in the provider config\n# block.\nprovider \"zia\" {\n  username            = \"[ZIA_USERNAME]\"\n  password            = \"[ZIA_PASSWORD]\"\n  api_key             = \"[ZIA_API_KEY]\"\n  zia_cloud           = \"[ZIA_CLOUD]\"\n  use_legacy_client   = \"[ZSCALER_USE_LEGACY_CLIENT]\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating ZIA Rule Labels with Terraform\nDESCRIPTION: Example of creating a basic rule label resource in ZIA using Terraform. The resource requires a name and optionally accepts a description.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/resources/zia_rule_labels.md#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n# ZIA Rule Labels Resource\nresource \"zia_rule_labels\" \"example\" {\n    name        = \"Example\"\n    description = \"Example\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ZIA Forwarding Control ZPA Gateway in Terraform\nDESCRIPTION: Creates a ZPA Gateway configuration in ZIA that integrates with ZPA Server Groups and Application Segments. Required resources include a pre-configured ZPA Server Group and Application Segments with Source IP Anchoring enabled.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/resources/zia_forwarding_control_zpa_gateway.md#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n# ZIA Forwarding Control - ZPA Gateway\ndata \"zpa_server_group\" \"this\" {\n  name = \"Server_Group_IP_Source_Anchoring\"\n}\n\ndata \"zpa_application_segment\" \"this1\" {\n  name = \"App_Segment_IP_Source_Anchoring\"\n}\n\ndata \"zpa_application_segment\" \"this2\" {\n  name = \"App_Segment_IP_Source_Anchoring2\"\n}\n\nresource \"zia_forwarding_control_zpa_gateway\" \"this\" {\n    name = \"ZPA_GW01\"\n    description = \"ZPA_GW01\"\n    type = \"ZPA\"\n    zpa_server_group {\n      external_id = data.zpa_server_group.this.id\n      name = data.zpa_server_group.this.id\n    }\n    zpa_app_segments {\n        external_id = data.zpa_application_segment.this1.id\n        name = data.zpa_application_segment.this1.name\n    }\n    zpa_app_segments {\n        external_id = data.zpa_application_segment.this2.id\n        name = data.zpa_application_segment.this2.name\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating ZIA VPN Credentials (IP) and Static IP Resource with Terraform (HCL)\nDESCRIPTION: Configures a ZIA traffic forwarding VPN credential using the IP authentication type and defines the dependent static IP resource. The 'ip_address' property must reference an existing static IP resource, ensuring that the VPN credential is properly linked. Key parameters include 'type', 'ip_address', 'pre_shared_key', and optional metadata such as 'comments' and geolocation. Proper dependency management with 'depends_on' ensures that the static IP is created before the credential.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/resources/zia_traffic_forwarding_vpn_credentials.md#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n# ZIA Traffic Forwarding - VPN Credentials (IP)\n######### PASSWORDS IN THIS FILE ARE FAKE AND NOT USED IN PRODUCTION SYSTEMS #########\nresource \"zia_traffic_forwarding_vpn_credentials\" \"example\"{\n    type            = \"IP\"\n    ip_address      = zia_traffic_forwarding_static_ip.example.ip_address\n    comments        = \"Example\"\n    pre_shared_key  = \"*********************\"\n    depends_on = [ zia_traffic_forwarding_static_ip.example ]\n}\n\nresource \"zia_traffic_forwarding_static_ip\" \"example\"{\n    ip_address      =  \"1.1.1.1\"\n    routable_ip     = true\n    comment         = \"Example\"\n    geo_override    = true\n    latitude        = -36.848461\n    longitude       = 174.763336\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ATP Bypass URLs using Terraform HCL\nDESCRIPTION: This HCL code defines a `zia_atp_security_exceptions` resource named \"this\". It uses the required `bypass_urls` argument (a Set of Strings) to specify a list of domain names (\"site1.example.com\", \"site2.example.com\", \"site3.example.com\") that will be excluded from Zscaler ZIA's Advanced Threat Protection inspection. Submitting an empty list deletes all current URLs. This configuration depends on the Zscaler ZIA Terraform provider.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/resources/zia_atp_security_exceptions.md#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"zia_atp_security_exceptions\" \"this\" {\n    bypass_urls = [\n        \"site1.example.com\",\n        \"site2.example.com\",\n        \"site3.example.com\",\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ZIA ATP Malware Inspection using Terraform (HCL)\nDESCRIPTION: Defines a Terraform resource `zia_atp_malware_inspection` named `this`. It enables both inbound and outbound traffic inspection for malware by setting the `inspect_inbound` and `inspect_outbound` arguments to `true`. This configuration requires the Zscaler ZIA Terraform provider.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/resources/zia_atp_malware_inspection.md#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"zia_atp_malware_inspection\" \"this\" {\n  inspect_inbound                       = true\n  inspect_outbound                      = true\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Direct Forwarding Control Rule in ZIA\nDESCRIPTION: Creates a forwarding control rule using the DIRECT method with specified source IPs, destination addresses, IP categories, and countries.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/resources/zia_forwarding_control_rule.md#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"zia_forwarding_control_rule\" \"this\" {\n  name               = \"FC_DIRECT_RULE\"\n  description        = \"FC_DIRECT_RULE\"\n  order              = 1\n  rank               = 7\n  state              = \"ENABLED\"\n  type               = \"FORWARDING\"\n  forward_method     = \"DIRECT\"\n  src_ips            = [\"192.168.200.200\"]\n  dest_addresses     = [\"192.168.255.1\"]\n  dest_ip_categories = [\"ZSPROXY_IPS\", \"CUSTOM_01\"]\n  dest_countries     = [\"CA\", \"US\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving URL Filtering Settings using Terraform HCL\nDESCRIPTION: Data source declaration to fetch URL filtering and cloud app control settings from ZIA. This provides read-only access to various configuration options including dynamic content categorization, safe search enforcement, and UCaaS settings.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/data-sources/zia_url_filtering_and_cloud_app_settings.md#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n# data \"zia_url_filtering_and_cloud_app_settings\" \"this\" {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Zscaler Provider with Private Key Authentication\nDESCRIPTION: This example configures the ZIA provider using OneAPI authentication with a private key. It requires a Zscaler client ID, private key, vanity domain, and cloud via either direct input or environmental variables. The placeholders must be replaced with actual values. This configuration enables access to the ZIA API using private key credentials.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/index.md#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n# Configure the Zscaler Internet Access Provider\nterraform {\n    required_providers {\n        zia = {\n            version = \"~> 4.0.0\"\n            source = \"zscaler/zia\"\n        }\n    }\n}\n\n# Configure the ZIA Provider (OneAPI Authentication) - Private Key\n#\n# NOTE: Change place holder values denoted by brackets to real values, including\n# the brackets.\n#\n# NOTE: If environment variables are utilized for provider settings the\n# corresponding variable name does not need to be set in the provider config\n# block.\nprovider \"zia\" {\n  client_id     = \"[ZSCALER_CLIENT_ID]\"\n  private_key   = \"[ZSCALER_PRIVATE_KEY]\"\n  vanity_domain = \"[ZSCALER_VANITY_DOMAIN]\"\n  zscaler_cloud = \"[ZSCALER_CLOUD]\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using zia_traffic_forwarding_public_node_vips Data Source in Terraform HCL\nDESCRIPTION: This HCL code demonstrates how to use the `zia_traffic_forwarding_public_node_vips` data source to retrieve Zscaler ZIA Virtual IP (VIP) information for a specific data center ('YVR1'). It defines the data source block, referencing it as 'yvr1', and specifies the target datacenter using the `datacenter` argument. An `output` block is included to expose the fetched data for use elsewhere in the Terraform configuration.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/data-sources/zia_traffic_forwarding_public_node_vips.md#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n# ZIA Traffic Forwarding - Virtual IP Addresses (VIPs)\ndata \"zia_traffic_forwarding_public_node_vips\" \"yvr1\"{\n    datacenter = \"YVR1\"\n}\n\noutput \"zia_traffic_forwarding_public_node_vips_yvr1\"{\n    value = data.zia_traffic_forwarding_public_node_vips.yvr1\n}\n```\n\n----------------------------------------\n\nTITLE: Importing ZIA URL Filtering and Cloud App Settings using Shell\nDESCRIPTION: This shell command demonstrates how to import existing ZIA URL Filtering and Cloud App Control settings into a Terraform state file. Using the `terraform import` command with the resource type `zia_url_filtering_and_cloud_app_settings`, a specific resource name (e.g., `this`), and the fixed import ID `app_setting`, allows managing the existing configuration via Terraform. This is useful for bringing pre-existing ZIA configurations under Terraform management.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/resources/zia_url_filtering_and_cloud_app_settings.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import zia_url_filtering_and_cloud_app_settings.this \"app_setting\"\n```\n\n----------------------------------------\n\nTITLE: Configuring ZIA ATP Malicious URL Denylist (HCL)\nDESCRIPTION: This Terraform HCL code defines a `zia_atp_malicious_urls` resource block named \"this\". It updates the list of malicious URLs blocked by the ZIA ATP policy using the `malicious_urls` argument, which accepts a set of strings representing the URLs to be denylisted. At least one URL must be specified in the list.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/resources/zia_atp_malicious_urls.md#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"zia_atp_malicious_urls\" \"this\" {\n    malicious_urls = [\n        \"test1.malicious.com\",\n        \"test2.malicious.com\",\n        \"test3.malicious.com\",\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a ZIA FQDN Destination Group in Terraform (HCL)\nDESCRIPTION: This HCL code defines a ZIA Firewall Destination Group resource named 'dstn_fqdn' of type 'DSTN_FQDN'. It specifies a list of Fully Qualified Domain Names (FQDNs) in the 'addresses' attribute. This group can then be used in ZIA firewall filtering rules.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/resources/zia_firewall_filtering_destination_groups.md#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n# IP Destination Group of Type DSTN_FQDN\nresource \"zia_firewall_filtering_destination_groups\" \"dstn_fqdn\" {\n  name        = \"Example Destination FQDN\"\n  description = \"Example Destination FQDN\"\n  type        = \"DSTN_FQDN\"\n  addresses = [ \"test1.acme.com\", \"test2.acme.com\", \"test3.acme.com\" ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using zia_traffic_forwarding_gre_vip_recommended_list with Overridden Geo Coordinates in HCL\nDESCRIPTION: This HCL snippet shows an alternative usage of the `zia_traffic_forwarding_gre_vip_recommended_list` data source. While still providing a `source_ip` and `required_count`, it explicitly sets the `latitude` and `longitude` arguments. This overrides the default geo-location lookup based on the source IP, allowing users to fetch VIP recommendations based on a specific geographic location.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/data-sources/zia_traffic_forwarding_gre_vip_recommended_list.md#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n# ZIA Traffic Forwarding - GRE VIP Recommended List\ndata \"zia_traffic_forwarding_gre_vip_recommended_list\" \"this\"{\n    source_ip = \"1.1.1.1\"\n    required_count = 2\n    latitude     = 22.2914\n    longitude    = 114.1445\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Zscaler Provider with Client Secret Authentication\nDESCRIPTION: This snippet demonstrates how to configure the Zscaler Internet Access Provider with OneAPI authentication using client credentials. Dependencies include the Zscaler client ID, client secret, vanity domain, and cloud. It requires replacement of bracketed placeholders with actual values. The primary function is to establish a connection to the ZIA API using OAuth credentials.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/index.md#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n# Configure the Zscaler Internet Access Provider\nterraform {\n    required_providers {\n        zia = {\n            version = \"~> 4.0.0\"\n            source = \"zscaler/zia\"\n        }\n    }\n}\n\n# Configure the ZIA Provider (OneAPI Authentication)\n#\n# NOTE: Change place holder values denoted by brackets to real values, including\n# the brackets.\n#\n# NOTE: If environment variables are utilized for provider settings the\n# corresponding variable name does not need to be set in the provider config\n# block.\nprovider \"zia\" {\n  client_id = \"[ZSCALER_CLIENT_ID]\"\n  client_secret = \"[ZSCALER_CLIENT_SECRET]\"\n  vanity_domain = \"[ZSCALER_VANITY_DOMAIN]\"\n  zscaler_cloud = \"[ZSCALER_CLOUD]\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving ZIA IP Source Groups using Terraform\nDESCRIPTION: Example showing how to fetch IP source group information using the zia_firewall_filtering_ip_source_groups data source. The data source requires a name parameter and optionally accepts an ID parameter. It returns the group's ID, description, and list of IP addresses.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/data-sources/zia_firewall_filtering_ip_source_groups.md#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n# ZIA IP Source Groups\ndata \"zia_firewall_filtering_ip_source_groups\" \"example\" {\n    name = \"example\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing ZIA Advanced Settings in Terraform\nDESCRIPTION: Shell command to import existing ZIA advanced settings into Terraform state. This allows management of pre-existing ZIA configurations using Terraform.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/resources/zia_advanced_settings.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import zia_advanced_settings.this \"advanced_settings\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Cloud Browser Isolation Profile Data in Terraform for ZIA\nDESCRIPTION: This snippet demonstrates how to use the zia_cloud_browser_isolation_profile data source to fetch information about a specific isolation profile by its name. This is useful when configuring URL filtering rules with the 'ISOLATE' action.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/data-sources/zia_cloud_browser_isolation_profile.md#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"zia_cloud_browser_isolation_profile\" \"this\" {\n    name = \"ZS_CBI_Profile1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ZIA End User Notification - DEFAULT\nDESCRIPTION: This snippet configures a Zscaler end user notification with the default notification type using Terraform. It includes parameters like notification messages, custom text, review options, and support contact information. Dependencies include a valid Terraform environment and the ZIA provider for execution.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/resources/zia_end_user_notification.md#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n# END USER NOTIFICATION TYPE - DEFAULT\nresource \"zia_end_user_notification\" \"this\" {\n  aup_frequency     = \"NEVER\"\n  aup_message       = \"Please review and accept the terms.\"\n  notification_type = \"DEFAULT\"\n  custom_text       = \"Website blocked\"\n\n  url_cat_review_enabled                  = true\n  url_cat_review_submit_to_security_cloud = true\n  url_cat_review_text                     = \"Click here to submit a review request.\"\n\n  security_review_enabled                  = true\n  security_review_submit_to_security_cloud = true\n  security_review_text                     = \"Request a security review if this message appears in error.\"\n\n  web_dlp_review_enabled                  = true\n  web_dlp_review_submit_to_security_cloud = false\n  web_dlp_review_custom_location          = \"https://dlp-review-location.com\"\n  web_dlp_review_text                     = \"This file is being reviewed for security reasons.\"\n\n  redirect_url    = \"https://dlp-review-location.com\"\n  support_email   = \"support@8061240.zscalerbeta.net\"\n  support_phone   = \"+91-9000000000\"\n  org_policy_link = \"http://8061240.zscalerbeta.net/policy.html\"\n\n  caution_again_after = 300\n  caution_per_domain  = true\n  caution_custom_text = \"Access to this site is restricted. Proceed with caution.\"\n\n  idp_proxy_notification_text         = \"Your connection is being proxied through the organization's secure access service.\"\n  quarantine_custom_notification_text = \"The file is being analyzed for potential security risks. Please wait while the process completes.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ZIA Auth Settings Exempt URLs with Terraform HCL\nDESCRIPTION: This HCL code defines a `zia_auth_settings_urls` resource named `example`. It utilizes the required `urls` argument to specify a list of URLs and domains (like `.okta.com`, `login.windows.net`) that should be exempted from ZIA's cookie-based authentication mechanism. This configuration requires the Zscaler ZIA Terraform provider.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/resources/zia_auth_settings_urls.md#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n# ZIA User Auth Settings Data Source\nresource \"zia_auth_settings_urls\" \"example\" {\n  urls = [\n    \".okta.com\",\n    \".oktacdn.com\",\n    \".mtls.oktapreview.com\",\n    \".mtls.okta.com\",\n    \"d3l44rcogcb7iv.cloudfront.net\",\n    \"pac.zdxcloud.net\",\n    \".windowsazure.com\",\n    \".fedoraproject.org\",\n    \"login.windows.net\",\n    \"d32a6ru7mhaq0c.cloudfront.net\",\n    \".kerberos.oktapreview.com\",\n    \".oktapreview.com\",\n    \"login.zdxcloud.net\",\n    \"login.microsoftonline.com\",\n    \"smres.zdxcloud.net\",\n    \".kerberos.okta.com\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving SSL Policy Cloud Applications\nDESCRIPTION: Shows how to retrieve cloud applications specifically associated with SSL inspection rules.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/data-sources/zia_cloud_applications.md#2025-04-22_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"zia_cloud_applications\" \"this\" {\n  policy_type = \"cloud_application_ssl_policy\"\n}\n\noutput \"zia_cloud_applications\" {\n  value = data.zia_cloud_applications.this\n}\n```\n\n----------------------------------------\n\nTITLE: Creating ZIA Location with Location Groups\nDESCRIPTION: Illustrates configuration of a ZIA location with manual and dynamic location group associations.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/resources/zia_location_management.md#2025-04-22_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"zia_location_groups\" \"this\"{\n    name = \"SDWAN_CAN\"\n}\n\nresource \"zia_location_management\" \"usa_sjc37\"{\n    name                        = \"USA_SJC_37\"\n    description                 = \"Created with Terraform\"\n    country                     = \"UNITED_STATES\"\n    tz                          = \"UNITED_STATES_AMERICA_LOS_ANGELES\"\n    state                       = \"California\"\n    auth_required               = true\n    idle_time_in_minutes        = 720\n    display_time_unit           = \"HOUR\"\n    surrogate_ip                = true\n    xff_forward_enabled         = true\n    ofw_enabled                 = true\n    ips_control                 = true\n    profile                     = \"CORPORATE\"\n    vpn_credentials {\n       id = zia_traffic_forwarding_vpn_credentials.usa_sjc37.id\n       type = zia_traffic_forwarding_vpn_credentials.usa_sjc37.type\n    }\n    static_location_groups {\n      id = [data.zia_location_groups.this.id]\n    }\n    depends_on = [zia_traffic_forwarding_vpn_credentials.usa_sjc37 ]\n}\n\nresource \"zia_traffic_forwarding_vpn_credentials\" \"usa_sjc37\"{\n    type            = \"UFQDN\"\n    fqdn            = \"usa_sjc37@acme.com\"\n    comments        = \"USA - San Jose IPSec Tunnel\"\n    pre_shared_key  = \"***************\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Malware Protection Policy Data using Terraform HCL\nDESCRIPTION: This code snippet demonstrates how to use the zia_atp_malware_policy data source to retrieve information about the Malware Protection policy in ZIA. The data source does not require any additional parameters and can be called directly.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/data-sources/zia_atp_malware_policy.md#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"zia_atp_malware_policy\" \"this\" {}\n```\n\n----------------------------------------\n\nTITLE: Importing ZIA Malware Protocol Settings into Terraform\nDESCRIPTION: Shell command example demonstrating how to import existing ZIA malware protocol settings into Terraform state management.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/resources/zia_atp_malware_protocols.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import atp_malware_protocols.this \"protocol\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving ZIA Location Management Data in Terraform HCL\nDESCRIPTION: This snippet demonstrates how to use the zia_location_management data source to retrieve information about a specific location in Zscaler Internet Access. It requires specifying the name of the location to be exported.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/data-sources/zia_location_management.md#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n# ZIA Location Managemeent\ndata \"zia_location_management\" \"example\"{\n    name = \"San Jose\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ZIA DLP Notification Templates in Terraform\nDESCRIPTION: This HCL snippet demonstrates how to define a ZIA DLP Notification Template using various arguments like `name`, `subject`, `attach_content`, `tls_enabled`, `html_message`, and `plain_text_message`. Dependencies include Terraform and the Zscaler provider. Inputs include the template data, and outputs are the managed state of the templates within Zscaler.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/resources/zia_dlp_notification_templates.md#2025-04-22_snippet_0\n\nLANGUAGE: HCL\nCODE:\n```\nresource \"zia_dlp_notification_templates\" \"example\" {\n    name                = \"DLP Auditor Template Test\"\n    subject             = \"DLP Violation: ${TRANSACTION_ID} ${ENGINES}\"\n    attach_content      = true\n    tls_enabled         = true\n    html_message        = file(\"./index.html\")\n    plain_text_message = file(\"./dlp.txt\")\n}\n```\n\n----------------------------------------\n\nTITLE: Querying ZIA URL Category by Name\nDESCRIPTION: Terraform configuration to query a URL category using its configured name in ZIA.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/data-sources/zia_url_categories.md#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"zia_url_categories\" \"this\"{\n    configured_name = \"Example\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating ZIA Firewall DNS Rule with TCP Redirect\nDESCRIPTION: Creates a DNS firewall rule that redirects TCP requests through a specified DNS gateway. Includes configuration for geographic restrictions and protocol specifications.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/resources/zia_firewall_dns_rules.md#2025-04-22_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"zia_firewall_dns_rule\" \"this3\" {\n    name = \"Example_DNS_Rule03\"\n    description = \"Example_DNS_Rule03\"\n    action = \"REDIR_REQ_TCP\"\n    state = \"ENABLED\"\n    order = 13\n    rank = 7\n    dest_countries = [\"CA\", \"US\"]\n    source_countries = [\"CA\", \"US\"]\n    protocols = [\"ANY_RULE\"]\n    dns_gateway {\n      id = 18207342\n      name = \"DNS_GW01\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving ZIA ATP Malware Inspection Configuration in HCL\nDESCRIPTION: This snippet demonstrates how to use the zia_atp_malware_inspection data source to retrieve the traffic inspection configurations of the Malware Protection policy in Zscaler Internet Access (ZIA). No additional parameters are required for this data source.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/data-sources/zia_atp_malware_inspection.md#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"zia_atp_malware_inspection\" \"this\" {}\n```\n\n----------------------------------------\n\nTITLE: Querying ZIA User Management using Terraform Provider\nDESCRIPTION: This code snippet demonstrates how to use the 'zia_user_management' data source to retrieve user information from the Zscaler Internet Access portal, which can be useful for associating with firewall and URL filtering rules. The main required parameter is 'name', specifying the user's name. Optionally, the user's ID can also be supplied.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/data-sources/zia_user_management.md#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n# ZIA Local User Account\ndata \"zia_user_management\" \"adam_ashcroft\" {\n name = \"Adam Ashcroft\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving ZIA Location Management Data in Terraform HCL\nDESCRIPTION: Example of using the zia_location_management data source to fetch information about a specific sublocation with its parent location in Zscaler Internet Access.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/data-sources/zia_sub_location_management.md#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n# ZIA Location Managemeent\ndata \"zia_location_management\" \"this\"{\n    name = \"USA-SJC37\"\n    parent_name = \"USA\"\n}\n```\n\n----------------------------------------\n\nTITLE: Associating URL Categories and ICAP Servers in DLP Rules\nDESCRIPTION: This snippet illustrates how to associate custom URL categories and ICAP servers with DLP web rules in Terraform. It shows configuring rule attributes, enabling Zscaler incident receiver, and linking with data resources for URL categories and ICAP servers. Dependencies include data resources for URL categories and ICAP servers.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/resources/zia_dlp_web_rules.md#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n// Retrieve a custom URL Category by Name\ndata \"zia_url_categories\" \"this\"{\n    configured_name = \"Example\"\n}\n\n// Retrieve an ICAP Server by Name\ndata \"zia_dlp_icap_servers\" \"this\" {\n  name = \"ZS_ICAP_01\"\n}\n\nresource \"zia_dlp_web_rules\" \"this\" {\n  name                      = \"Terraform_Test\"\n  description               = \"Terraform_Test\"\n  action                    = \"BLOCK\"\n  order                     = 1\n  protocols                 = [\"FTP_RULE\", \"HTTPS_RULE\", \"HTTP_RULE\"]\n  rank                      = 7\n  state                     = \"ENABLED\"\n  zscaler_incident_receiver = true\n  without_content_inspection = false\n  url_categories {\n    id = [ data.zia_url_categories.this.val ]\n  }\n  icap_server {\n    id = data.zia_dlp_icap_servers.this.id\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving ZPA Gateway Information using Terraform HCL\nDESCRIPTION: Example of using the zia_forwarding_control_zpa_gateway data source to fetch information about a ZPA gateway by name. This can be used to reference the gateway in forwarding control rules.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/data-sources/zia_forwarding_control_zpa_gateway.md#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n# ZIA Forwarding Control - ZPA Gateway\ndata \"zia_forwarding_control_zpa_gateway\" \"this\" {\n  name = \"ZPA_GW01\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating ZIA Firewall DNS Rule with DOH Redirect\nDESCRIPTION: Creates a DNS firewall rule that redirects DNS-over-HTTPS (DOH) requests. Includes configuration for geographic restrictions and protocol specifications.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/resources/zia_firewall_dns_rules.md#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"zia_firewall_dns_rule\" \"this2\" {\n    name = \"Example_DNS_Rule02\"\n    description = \"Example_DNS_Rule02\"\n    action = \"REDIR_REQ_DOH\"\n    state = \"ENABLED\"\n    order = 12\n    rank = 7\n    dest_countries = [\"CA\", \"US\"]\n    source_countries = [\"CA\", \"US\"]\n    protocols = [\"ANY_RULE\"]\n    dns_gateway {\n      id = 18207342\n      name = \"DNS_GW01\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving a DLP Engine by Name in Terraform HCL\nDESCRIPTION: This snippet demonstrates how to retrieve a DLP Engine by its name using the zia_dlp_engines data source. The name parameter is required to identify the specific engine.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/data-sources/zia_dlp_engines.md#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n# Retrieve a DLP Engine by name\ndata \"zia_dlp_engines\" \"this\"{\n    name = \"Example\"\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Workload Groups Using Terraform Provider Zscaler (HCL)\nDESCRIPTION: This snippet demonstrates how to use the zia_workload_groups data source in Terraform (HCL) to fetch information about a Zscaler Internet Access (ZIA) workload group with a specified name. The data source requires the Zscaler provider and must be configured with the appropriate credentials. The 'name' parameter specifies the workload group to retrieve. The output includes workload group details that can be referenced elsewhere in the Terraform configuration. Expected output is a data object representing the workload group; limitations include requiring a valid workload group name and access permissions.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/data-sources/zia_workload_groups.md#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n# ZIA Admin User Data Source\\ndata \\\"zia_workload_groups\\\" \\\"ios\\\"{\\n    name = \\\"Example\\\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving ZIA Advanced Threat Settings with Terraform\nDESCRIPTION: Example showing how to retrieve advanced threat configuration settings from the ZIA Admin Portal using the zia_advanced_threat_settings data source.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/data-sources/zia_advanced_threat_settings.md#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"zia_advanced_threat_settings\" \"this\" {}\n```\n\n----------------------------------------\n\nTITLE: Collecting Debug Information with Terraform Apply (Shell)\nDESCRIPTION: This snippet demonstrates how to collect verbose debugging information while running 'terraform apply' by setting key environment variables that enable detailed logs for Terraform and the Zscaler SDK. The command outputs logs without color formatting for easier parsing and saves the output to 'tf-debug.log' for later review. Required: Terraform CLI and bash shell environment.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/guides/troubleshooting.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nTF_LOG=DEBUG ZSCALER_SDK_VERBOSE=true ZSCALER_SDK_LOG=true terraform apply -no-color 2>&1 |tee tf-debug.log\n```\n\n----------------------------------------\n\nTITLE: Defining Required Provider in Terraform (HCL)\nDESCRIPTION: This Terraform configuration snippet defines the 'required_providers' block for 'zpa' with the source set to 'zscaler/zia' and a specified version. It's typically placed in a 'versions.tf' file within each module to ensure proper provider dependency resolution. Prerequisite: Terraform CLI, correct provider block syntax, and access to the Zscaler provider.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/guides/troubleshooting.md#2025-04-22_snippet_4\n\nLANGUAGE: terraform\nCODE:\n```\n# versions.tf\nterraform {\n  required_providers {\n    zpa = {\n      source  = \"zscaler/zia\"\n      version = \"2.6.2\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Predefined DLP Engine in Terraform HCL\nDESCRIPTION: This snippet demonstrates how to retrieve a predefined DLP Engine using the zia_dlp_engines data source. The predefined parameter is used to identify a system-defined engine, in this case, an EXTERNAL engine.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/data-sources/zia_dlp_engines.md#2025-04-22_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\n# Retrieve a Predefined DLP Engine\ndata \"zia_dlp_engines\" \"this\"{\n    predefined = \"EXTERNAL\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a ZIA IP Address Destination Group in Terraform (HCL)\nDESCRIPTION: This HCL code defines a ZIA Firewall Destination Group resource named 'example_dstn_ip' of type 'DSTN_IP'. It includes a list of IP addresses and ranges within the 'addresses' attribute. This group allows firewall rules to target specific IP destinations.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/resources/zia_firewall_filtering_destination_groups.md#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n# IP Destination Group of Type DSTN_IP\nresource \"zia_firewall_filtering_destination_groups\" \"example_dstn_ip\" {\n  name        = \"Example Destination IP\"\n  description = \"Example Destination IP\"\n  type        = \"DSTN_IP\"\n  addresses = [\"3.217.228.0-3.217.231.255\",\n    \"3.235.112.0-3.235.119.255\",\n    \"52.23.61.0-52.23.62.25\",\n    \"35.80.88.0-35.80.95.255\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving End User Notification Configuration in ZIA with Terraform\nDESCRIPTION: Example of using the zia_end_user_notification data source to retrieve the browser-based end user notification configuration from Zscaler Internet Access. This data source requires no arguments and returns all EUN configuration details.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/data-sources/zia_end_user_notification.md#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"zia_end_user_notification\" \"example\"{}\n```\n\n----------------------------------------\n\nTITLE: Querying ZIA URL Filtering Rule Data Source in HCL\nDESCRIPTION: This HCL snippet demonstrates how to use the `zia_url_filtering_rules` data source to retrieve information about a specific ZIA URL Filtering rule named 'Example'. This data source requires the Zscaler ZIA Terraform provider. The `name` argument specifies the rule to query.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/data-sources/zia_url_filtering_rules.md#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n# URL filtering rule\ndata \"zia_url_filtering_rules\" \"example\"{\n    name = \"Example\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Rule Label Information using ZIA Rule Labels Data Source in HCL\nDESCRIPTION: This snippet demonstrates how to use the zia_rule_labels data source to retrieve information about a specific rule label in Zscaler Internet Access. It requires specifying the name of the rule label to be exported.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/data-sources/zia_rule_labels.md#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n# ZIA Rule Labels Data Source\ndata \"zia_rule_labels\" \"example\" {\n    name = \"Example\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding IP Address Ranges to ZIA Firewall IP Source Groups in Terraform\nDESCRIPTION: This HCL snippet shows how to create a new IP source group in ZIA firewall with a range of IP addresses. Requires Terraform and Zscaler provider configurations as prerequisites. The 'ip_addresses' parameter is supplied with a range string. The expected result is the formation of an IP source group containing the specified range within the ZIA Cloud Firewall.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/resources/zia_firewall_filtering_ip_source_groups.md#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n# Add an IP address range(s) to a new IP Source Group\nresource \"zia_firewall_filtering_ip_source_groups\" \"example\" {\n  name        = \"Example\"\n  description = \"Example\"\n  ip_addresses = [ \"192.0.2.1-192.0.2.10\" ]\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving a DLP Engine by ID in Terraform HCL\nDESCRIPTION: This snippet demonstrates how to retrieve a DLP Engine by its unique identifier using the zia_dlp_engines data source. The id parameter takes a numeric value to identify the specific engine.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/data-sources/zia_dlp_engines.md#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n# Retrieve a DLP Engine by ID\ndata \"zia_dlp_engines\" \"this\"{\n    id = 1234567890\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Parent and SubRules with DLP Web Rules\nDESCRIPTION: This snippet shows how to create parent and subrules using the DLP web rules in Terraform, including links to parent rules. Designed for nested rule configurations, it highlights the necessity to set advanced DLP settings appropriately. Parent rule destruction affects all subrules. Dependencies are not explicitly required, but the understanding of DLP hierarchy is critical.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/resources/zia_dlp_web_rules.md#2025-04-22_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"zia_dlp_web_rules\" \"parent_rule\" {\n  name                       = \"ParentRule1\"\n  description                = \"ParentRule1\"\n  action                     = \"ALLOW\"\n  state                      = \"ENABLED\"\n  order                      = 1\n  rank                       = 0\n  protocols                  = [\"FTP_RULE\", \"HTTPS_RULE\", \"HTTP_RULE\"]\n  cloud_applications         = [\"GOOGLE_WEBMAIL\", \"WINDOWS_LIVE_HOTMAIL\"]\n  without_content_inspection = false\n  match_only                 = false\n  min_size                   = 20\n  zscaler_incident_receiver  = true\n}\n\nresource \"zia_dlp_web_rules\" \"subrule1\" {\n  name                       = \"SubRule1\"\n  description                = \"SubRule1\"\n  action                     = \"ALLOW\"\n  state                      = \"ENABLED\"\n  order                      = 1\n  rank                       = 0\n  protocols                  = [\"FTP_RULE\", \"HTTPS_RULE\", \"HTTP_RULE\"]\n  cloud_applications         = [\"GOOGLE_WEBMAIL\", \"WINDOWS_LIVE_HOTMAIL\"]\n  without_content_inspection = false\n  match_only                 = false\n  parent_rule = zia_dlp_web_rules.parent_rule.id\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving DLP Web Rule in Terraform HCL\nDESCRIPTION: Example of using the zia_dlp_web_rules data source to retrieve a DLP Web Rule by name in Terraform configuration.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/data-sources/zia_dlp_web_rules.md#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"zia_dlp_web_rules\" \"example\"{\n    name = \"Example\"\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Static IP Address with Terraform ZIA Provider - HCL\nDESCRIPTION: This snippet demonstrates how to use the 'zia_traffic_forwarding_static_ip' data source in Terraform (HCL) to retrieve information about a provisioned static IP address by specifying its 'ip_address'. This data source requires the Zscaler Terraform provider to be configured and expects the specified IP address as input, returning multiple attributes such as geolocation fields, routability, modification timestamps, and managed-by metadata. The output is used for referencing static IP details in further ZIA resources such as GRE Tunnel or VPN Credential configurations.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/data-sources/zia_traffic_forwarding_static_ip.md#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"zia_traffic_forwarding_static_ip\" \"example\"{\n    ip_address =  \"1.1.1.1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving ATP Malware Protocols Configuration in Terraform HCL\nDESCRIPTION: Example of using the zia_atp_malware_protocols data source to fetch Malware Protection policy protocol inspection settings. This data source requires no additional parameters to execute.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/data-sources/zia_atp_malware_protocols.md#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"zia_atp_malware_protocols\" \"this\" {}\n```\n\n----------------------------------------\n\nTITLE: Filtering SSL Policy Applications by Category\nDESCRIPTION: Demonstrates filtering SSL policy cloud applications by application category (AI_ML).\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/data-sources/zia_cloud_applications.md#2025-04-22_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"zia_cloud_applications\" \"this\" {\n  policy_type = \"cloud_application_ssl_policy\"\n  app_class   = [\"AI_ML\"]\n}\n\noutput \"app_ids\" {\n  value = [for app in data.zia_cloud_applications.this.applications : app[\"app\"]]\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving DLP Exact Data Match (EDM) by name in Terraform for ZIA\nDESCRIPTION: This snippet demonstrates how to retrieve a DLP Exact Data Match (EDM) template by its name using the zia_dlp_edm_schema data source in Terraform. It specifies the project_name attribute to identify the desired EDM template.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/data-sources/zia_dlp_edm_schema.md#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"zia_dlp_edm_schema\" \"this\"{\n    project_name = \"Example\"\n}\n```\n\n----------------------------------------\n\nTITLE: Submitting Files for Out-of-Band Inspection using Terraform\nDESCRIPTION: Example configuration for submitting files for out-of-band inspection using the 'discan' method. Demonstrates file submission for real-time verdict generation.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/resources/zia_sandbox_file_submission.md#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nlocals {\n  files = toset([\n    \"zs-test-pe-file.exe\"\n  ])\n}\n\nresource \"zia_sandbox_file_submission\" \"this\" {\n  for_each = local.files\n  file_path     = each.key\n  submission_method = \"discan\"\n  force = true\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving APNS Network Application with Locale in ZIA Firewall (HCL)\nDESCRIPTION: A Terraform example showing how to retrieve information about the APNS network application from the ZIA cloud firewall with a specified locale parameter.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/data-sources/zia_firewall_filtering_network_application.md#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n# ZIA Network Application Groups\ndata \"zia_firewall_filtering_network_application\" \"apns\"{\n    id = \"APNS\"\n    locale=\"en-US\"\n}\n```\n\n----------------------------------------\n\nTITLE: Querying SSL Inspection Rule by Name using Terraform (HCL)\nDESCRIPTION: This snippet shows how to use the `zia_ssl_inspection_rules` Terraform data source to retrieve details of an SSL inspection rule from the Zscaler Internet Access platform by specifying its name. The `name` argument should be set to the desired rule's name. The data source requires the Terraform provider for Zscaler and appropriate authentication, and it returns all available attributes for the specified SSL inspection rule. The main input is the `name` parameter, and the output is a data object corresponding to the matched rule.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/data-sources/zia_ssl_inspection_rules.md#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n# ZIA SSL Inspection by name\\ndata \"zia_ssl_inspection_rules\" \"this\" {\\n    name = \"SSL_Inspection_Rule01\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving DICT Network Application in ZIA Firewall (HCL)\nDESCRIPTION: A Terraform example showing how to retrieve information about the DICT network application from the ZIA cloud firewall without specifying a locale parameter.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/data-sources/zia_firewall_filtering_network_application.md#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"zia_firewall_filtering_network_application\" \"dict\"{\n    id = \"DICT\"\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Specific ZPA Resource Configuration to a Custom Path in Bash\nDESCRIPTION: Shows how to set a custom output directory using the `ZSCALER_ZPA_TERRAFORM_INSTALL_PATH` environment variable and then generate Terraform configuration (`.tf` files) for a specific ZPA resource (`zpa_application_segment`) using the `zscaler-terraformer generate` command. This command only generates HCL files, not state.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/guides/resource-importer.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ export ZSCALER_ZPA_TERRAFORM_INSTALL_PATH=\"$HOME/Desktop/zpa_configuration\"\n$ zscaler-terraformer generate \\\n  --resource-type \"zpa_application_segment\"\n\n```\n\n----------------------------------------\n\nTITLE: Importing All ZIA Resources with zscaler-terraformer in Bash\nDESCRIPTION: Command to use `zscaler-terraformer` to import all supported Zscaler Internet Access (ZIA) resources. The `--resources=\"zia\"` flag indicates the target platform for the import, generating Terraform configuration and state.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/guides/resource-importer.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nzscaler-terraformer import --resources=\"zia\"\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving DLP Dictionary in Terraform HCL\nDESCRIPTION: Example of retrieving a DLP dictionary by name using the zia_dlp_dictionaries data source. This snippet shows how to reference a specific dictionary named 'SALESFORCE_REPORT_LEAKAGE'.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/data-sources/zia_dlp_dictionaries.md#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n# Retrieve a DLP Dictionary by name\ndata \"zia_dlp_dictionaries\" \"example\"{\n    name = \"SALESFORCE_REPORT_LEAKAGE\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring DO_NOT_DECRYPT SSL Inspection Bypass Rule (Bypass True) - Terraform Zscaler - HCL\nDESCRIPTION: This snippet defines a Zscaler SSL Inspection Rule using the DO_NOT_DECRYPT action with bypass_other_policies set to true, managed by Terraform HCL. The resource configuration targets specific groups with customizable cloud applications and platforms. Dependencies include Zscaler's group management data source and the correct setup of the Terraform provider. The output is a bypass rule instructing ZIA not to decrypt and to bypass other security policies for matching traffic. Constraints include adherence to correct rule order with respect to predefined Zscaler rules.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/resources/zia_ssl_inspection_rules.md#2025-04-22_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"zia_group_management\" \"this\" {\n    name = \"A000\"\n}\n\nresource \"zia_ssl_inspection_rules\" \"this\" {\n  name                         = \"SSL_Rule_Bypass_Rule\"\n  description                  = \"SSL_Rule_Bypass_Rule\"\n  state                        = \"ENABLED\"\n  order                        = 1\n  rank                         = 7\n  road_warrior_for_kerberos    = true\n  cloud_applications           = [\"CHATGPT_AI\", \"ANDI\"]\n  platforms                    = [\"SCAN_IOS\", \"SCAN_ANDROID\", \"SCAN_MACOS\", \"SCAN_WINDOWS\", \"NO_CLIENT_CONNECTOR\", \"SCAN_LINUX\"]\n\n  action {\n    type                                    = \"DO_NOT_DECRYPT\"\n    do_not_decrypt_sub_actions {\n      bypass_other_policies                 = true\n      block_ssl_traffic_with_no_sni_enabled = true\n    }\n  }\n  groups {\n        id = [ data.zia_group_management.this.id ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Obtaining Full Sandbox Report in Terraform HCL\nDESCRIPTION: This snippet demonstrates how to use the zia_sandbox_report data source to retrieve a full detail report for a file analyzed by Sandbox. It requires specifying the MD5 hash of the file and setting the details parameter to 'full'.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/data-sources/zia_sandbox_report.md#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"zia_sandbox_report\" \"this\" {\n  md5_hash = \"F69CA01D65E6C8F9E3540029E5F6AB92\"\n  details = \"full\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving DLP Exact Data Match (EDM) by ID in Terraform for ZIA\nDESCRIPTION: This snippet shows how to retrieve a DLP Exact Data Match (EDM) template by its ID using the zia_dlp_edm_schema data source in Terraform. It uses the schema_id attribute to specify the unique identifier of the EDM template.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/data-sources/zia_dlp_edm_schema.md#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"zia_dlp_edm_schema\" \"example\"{\n    schema_id = 1234567890\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving ZIA Firewall DNS Rule by Name\nDESCRIPTION: Terraform configuration to fetch a firewall DNS rule using its name. This example shows how to query a specific rule by referencing its name attribute.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/data-sources/zia_firewall_dns_rules.md#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"zia_firewall_dns_rules\" \"this\" {\n    name = \"Default Cloud IPS Rule\"\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing and Applying Terraform Configuration for ZIA URL Filtering Policies\nDESCRIPTION: These commands initialize the Terraform working directory, create an execution plan, and apply the configuration to create URL Filtering Policies in ZIA.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/examples/zia_url_filtering_policies/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nterraform init\nterraform plan -out theplan\nterraform apply theplan\n```\n\n----------------------------------------\n\nTITLE: Retrieving DLP ICAP Server by Name in Terraform HCL\nDESCRIPTION: Terraform data source configuration to retrieve DLP ICAP server information using the server name as identifier. This allows fetching server details by matching the name parameter.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/data-sources/zia_dlp_icap_servers.md#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"zia_dlp_icap_servers\" \"example\"{\n    name = \"Example\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ZIA Whitelist URLs for Malware Protection\nDESCRIPTION: Demonstrates how to add URLs to the ZIA whitelist for Malware Protection. This configuration allows specified URLs to bypass malware scanning.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/resources/zia_security_policy_settings.md#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"zia_security_settings\" \"this\" {\n  whitelist_urls = [\n    \"resource5.acme.net\",\n    \"resource6.acme.net\",\n    \"resource7.acme.net\",\n    \"resource8.acme.net\",\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Forwarding Control Proxy Gateway Data in Terraform HCL\nDESCRIPTION: This snippet demonstrates how to use the zia_forwarding_control_proxy_gateway data source to retrieve proxy gateway information by name. It can be used when creating a Forwarding Control Rule.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/data-sources/zia_forwarding_control_proxy_gateway.md#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n# ZIA Forwarding Control - Proxy Gateway\ndata \"zia_forwarding_control_proxy_gateway\" \"this\" {\n  name = \"Proxy_GW01\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving DLP IDM Profile Lite by ID in Terraform HCL\nDESCRIPTION: This snippet shows how to retrieve a DLP IDM Profile Lite by ID using the zia_dlp_idm_profile_lite data source in Terraform HCL. It requires specifying the name of the profile to be retrieved, which seems to be used as an identifier.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/data-sources/zia_dlp_idm_profiles_lite.md#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"zia_dlp_idm_profile_lite\" \"example\"{\n    name = \"Example\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving DLP ICAP Server by ID in Terraform HCL\nDESCRIPTION: Terraform data source configuration to retrieve DLP ICAP server information using the server ID as identifier. This allows fetching server details by matching the numeric ID parameter.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/data-sources/zia_dlp_icap_servers.md#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"zia_dlp_icap_servers\" \"example\"{\n    id = 1234567890\n}\n```\n\n----------------------------------------\n\nTITLE: Generating ZIA HCL Configuration Only to a Custom Path in Bash\nDESCRIPTION: Command to generate only the HCL configuration files for a specific ZIA resource (`zia_firewall_filtering_rule`) to a specified directory (`--zia-terraform-install-path`) without creating or modifying Terraform state. This uses the `zscaler-terraformer generate` command with explicit path and resource type flags.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/guides/resource-importer.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n$ zscaler-terraformer generate \\\n  --zia-terraform-install-path $HOME/Desktop/zia_configuration \\\n  --resource-type \"zia_firewall_filtering_rule\"\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving DLP IDM Profile by Name in Terraform\nDESCRIPTION: Example of retrieving a DLP IDM Profile using its name in Terraform configuration.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/data-sources/zia_dlp_idm_profiles.md#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"zia_dlp_idm_profile\" \"example\"{\n    name = \"Example\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing ZIA DLP Notification Templates into Terraform\nDESCRIPTION: This shell command demonstrates how to import an existing ZIA DLP Notification Template by either template ID or name using Terraform import. It requires Terraform and the Zscaler provider as dependencies. The input is the <template_id> or <template_name>, and this operation integrates the existing template into the Terraform-managed infrastructure state.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/resources/zia_dlp_notification_templates.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import zia_dlp_notification_templates.example <template_id>\n```\n\nLANGUAGE: shell\nCODE:\n```\nterraform import zia_dlp_notification_templates.example <template_name>\n```\n\n----------------------------------------\n\nTITLE: Retrieving DLP Template by Name in Terraform HCL\nDESCRIPTION: Example of how to retrieve a DLP Notification Template using the name attribute in Terraform. This snippet demonstrates the basic usage of the zia_dlp_notification_templates data source.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/data-sources/zia_dlp_notification_templates.md#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n# Retrieve a DLP Template by name\ndata \"zia_dlp_notification_templates\" \"example\"{\n    name = \"DLP Auditor Template Test\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving ZIA Firewall Filtering Rule Data in Terraform HCL\nDESCRIPTION: This code demonstrates how to retrieve information about a specific firewall filtering rule in Zscaler Internet Access. The example targets a rule by its name attribute.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/data-sources/zia_firewall_filtering_rule.md#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n# ZIA Firewall Filtering Rule\ndata \"zia_firewall_filtering_rule\" \"example\" {\n    name = \"Office 365 One Click Rule\"\n}\n```\n\n----------------------------------------\n\nTITLE: Removing All MD5 Hashes from ZIA Sandbox Blocklist\nDESCRIPTION: Creates a resource to remove all MD5 file hashes from the Sandbox blocklist by submitting an empty list. This effectively clears the entire blocklist configuration.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/resources/zia_sandbox_behavioral_analysis.md#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"zia_sandbox_behavioral_analysis\" \"this\" {\n  file_hashes_to_be_blocked = []\n}\n```\n\n----------------------------------------\n\nTITLE: Importing a ZIA Destination Group into Terraform using Group Name (Shell)\nDESCRIPTION: This shell command shows how to import an existing ZIA Firewall Destination Group into the Terraform state using its name. This provides an alternative to using the Group ID for importing. Replace '<group_name>' with the actual name of the destination group.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/resources/zia_firewall_filtering_destination_groups.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nterraform import zia_firewall_filtering_destination_groups.example <group_name>\n```\n\n----------------------------------------\n\nTITLE: Retrieving ZIA Device Information using Terraform\nDESCRIPTION: Example showing how to use the zia_devices data source to fetch information about a specific device by name from Zscaler Internet Access.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/data-sources/zia_devices.md#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n# ZIA Admin User Data Source\ndata \"zia_devices\" \"device\"{\n    name = \"administrator\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving DLP IDM Profile by ID in Terraform\nDESCRIPTION: Example of retrieving a DLP IDM Profile using its ID in Terraform configuration.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/data-sources/zia_dlp_idm_profiles.md#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"zia_dlp_idm_profile\" \"example\"{\n    name = \"Example\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving ZIA Firewall Filtering Destination Groups in HCL\nDESCRIPTION: This snippet demonstrates how to use the zia_firewall_filtering_destination_groups data source to retrieve information about a specific destination group by name. It can be used to fetch details like description, addresses, countries, and IP categories for use in firewall rules.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/data-sources/zia_firewall_filtering_destination_groups.md#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n# ZIA Destination Groups\ndata \"zia_firewall_filtering_destination_groups\" \"example\" {\n    name = \"example\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving DLP IDM Profile Lite by Name in Terraform HCL\nDESCRIPTION: This snippet demonstrates how to retrieve a DLP IDM Profile Lite by name using the zia_dlp_idm_profile_lite data source in Terraform HCL. It requires specifying the name of the profile to be retrieved.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/data-sources/zia_dlp_idm_profiles_lite.md#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"zia_dlp_idm_profile_lite\" \"example\"{\n    name = \"Example\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving DLP Incident Receiver Server by Name in Terraform HCL\nDESCRIPTION: Shows how to query a DLP Incident Receiver Server using its name attribute in Terraform configuration.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/data-sources/zia_dlp_incident_receiver_servers.md#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"zia_dlp_incident_receiver_servers\" \"this\" {\n  name = \"ZS_Incident_Receiver\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving ZIA Admin Role Information using Terraform\nDESCRIPTION: This snippet demonstrates how to use the zia_admin_roles data source to fetch information about a specific admin role in Zscaler Internet Access. It requires specifying the name of the admin role to be exported.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/data-sources/zia_admin_roles.md#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n# ZIA Admin Roles Data Source\ndata \"zia_admin_roles\" \"example\" {\n  name = \"Super Admin\"\n}\n```\n\n----------------------------------------\n\nTITLE: Provider Configuration Credentials File Error Message (Shell)\nDESCRIPTION: This shell-style error output indicates that Terraform failed to find or properly read the required ZIA credentials JSON file when configuring the 'zia' provider. It lists the required fields and the file location, helping administrators understand which keys or files are missing for successful provider authentication.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/guides/troubleshooting.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n│   with provider[\"registry.terraform.io/zscaler/zia\"],\n│   on zia_location_management.tf line 10, in provider \"zia\":\n│   10: provider \"zia\" {}\n│\n│ error:Could not open credentials file, needs to contain one json object with keys: zia_username, zia_password, zia_api_key, and\n│ zia_cloud. open /Users/<username>/.zia/credentials.json: no such file or directory\n```\n\n----------------------------------------\n\nTITLE: Retrieving DLP Incident Receiver Server by ID in Terraform HCL\nDESCRIPTION: Demonstrates how to query a DLP Incident Receiver Server using its numeric ID in Terraform configuration.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/data-sources/zia_dlp_incident_receiver_servers.md#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"zia_dlp_incident_receiver_servers\" \"this\"{\n    id = 1234567890\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Network Service Group Data in ZIA with Terraform\nDESCRIPTION: This snippet demonstrates how to use the zia_firewall_filtering_network_service_groups data source to fetch information about a specific network service group in ZIA. It requires specifying the name of the group to be exported.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/data-sources/zia_firewall_filtering_network_service_groups.md#2025-04-22_snippet_0\n\nLANGUAGE: HCL\nCODE:\n```\n# ZIA Network Service Groups\ndata \"zia_firewall_filtering_network_service_groups\" \"example\"{\n    name = \"Corporate Custom SSH TCP_10022\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Authentication Settings URLs in ZIA using Terraform\nDESCRIPTION: This snippet demonstrates how to use the zia_auth_settings_urls data source to fetch URLs exempted from cookie authentication and SSL Inspection in Zscaler Internet Access. The data source requires no additional parameters.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/data-sources/zia_auth_settings_urls.md#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n# ZIA User Auth Settings Data Source\ndata \"zia_auth_settings_urls\" \"foo\" {}\n```\n\n----------------------------------------\n\nTITLE: Retrieving ZIA Admin User by Login Name\nDESCRIPTION: Example of retrieving a ZIA administrator user using their email address (login_name) as the identifier.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/data-sources/zia_admin_users.md#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"zia_admin_users\" \"john_doe\" {\n  login_name = \"john.doe@example.com\"\n}\n```\n\n----------------------------------------\n\nTITLE: Rule Types and Actions Matrix in Markdown\nDESCRIPTION: A markdown table that maps cloud application control rule types to their corresponding valid actions, organized by category including AI/ML, business productivity, consumer apps, DNS over HTTPS, enterprise collaboration, file sharing, finance, healthcare, hosting, HR, instant messaging, IT services, legal, sales/marketing, streaming media, social networking, system development, and webmail.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/data-sources/zia_cloud_app_control_rule.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n|            Types                     |                    Actions                      |\n|:------------------------------------:|:-----------------------------------------------:|\n|--------------------------------------|-------------------------------------------------|\n|           `AI_ML`                    |          `ALLOW_AI_ML_WEB_USE`                  |\n|           `AI_ML`                    |          `CAUTION_AI_ML_WEB_USE`                |\n|           `AI_ML`                    |          `DENY_AI_ML_WEB_USE`                   |\n|           `AI_ML`                    |          `ISOLATE_AI_ML_WEB_USE`                |\n|--------------------------------------|-------------------------------------------------|\n|     `BUSINESS_PRODUCTIVITY`          |     `ALLOW_BUSINESS_PRODUCTIVITY_APPS`          |\n|     `BUSINESS_PRODUCTIVITY`          |     `BLOCK_BUSINESS_PRODUCTIVITY_APPS`          |\n|     `BUSINESS_PRODUCTIVITY`          |     `CAUTION_BUSINESS_PRODUCTIVITY_APPS`        |\n|     `BUSINESS_PRODUCTIVITY`          |     `ISOLATE_BUSINESS_PRODUCTIVITY_APPS`        |\n```\n\n----------------------------------------\n\nTITLE: No Dictionary Found with Spaces in Name Error (Shell)\nDESCRIPTION: This error output warns users that creating or referencing a DLP dictionary by name with spaces (e.g., 'Social Security Numbers (US)') often fails. To resolve, users are encouraged to use or clone dictionaries with underscore or dash-separated names. Useful for managing 'zia_dlp_dictionaries' resources with Terraform.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/guides/troubleshooting.md#2025-04-22_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\n│ Error: no dictionary found with name: Social Security Numbers (US)\n```\n\n----------------------------------------\n\nTITLE: Querying iOS Device Groups in ZIA\nDESCRIPTION: Example of retrieving iOS device group information using the zia_device_groups data source in Terraform.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/data-sources/zia_device_groups.md#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"zia_device_groups\" \"ios\"{\n    name = \"IOS\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Network Application Groups in ZIA Firewall with Terraform\nDESCRIPTION: This example demonstrates how to use the zia_firewall_filtering_network_application_groups data source to retrieve information about a specific network application group by name from Zscaler Internet Access.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/data-sources/zia_firewall_filtering_network_application_groups.md#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n# ZIA Network Application Groups\ndata \"zia_firewall_filtering_network_application_groups\" \"example\" {\n    name = \"example\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving ZIA Firewall DNS Rule by ID\nDESCRIPTION: Terraform configuration to fetch a firewall DNS rule using its unique identifier. This example demonstrates how to query a specific rule using its ID attribute.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/data-sources/zia_firewall_dns_rules.md#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"zia_firewall_dns_rules\" \"this\" {\n    id = \"12365478\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Corporate User Traffic Group in ZIA\nDESCRIPTION: Example of retrieving a location group for corporate user traffic using the zia_location_groups data source.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/data-sources/zia_location_groups.md#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"zia_location_groups\" \"example\"{\n    name = \"Corporate User Traffic Group\"\n}\n```\n\n----------------------------------------\n\nTITLE: Invalid Country Code Error for Firewall Rules (Shell)\nDESCRIPTION: This shell-formatted error is produced when configuring a 'zia_firewall_filtering_rule' with an invalid two-letter country code. The message references the ISO-3166 Alpha-2 standard for valid country codes, guiding users to verify and correct their configuration inputs. Applies to network geolocation attributes in Terraform.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/guides/troubleshooting.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n╷\n│ Error: 'AUC' is not a valid ISO-3166 Alpha-2 country code. Please visit the following site for reference: https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes\n```\n\n----------------------------------------\n\nTITLE: Generating Terraform Import Commands for ZPA Resource in Bash\nDESCRIPTION: Command to generate the necessary `terraform import` commands for a specific ZPA resource type (`zpa_app_connector_group`) using `zscaler-terraformer import` with the `--resource-type` flag. This command outputs the import statements needed to integrate the generated resources into an existing Terraform state file, assuming `generate` was run previously.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/guides/resource-importer.md#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n$ zscaler-terraformer import \\\n  --resource-type \"zpa_app_connector_group\"\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving Network Service Information in ZIA Firewall with Terraform\nDESCRIPTION: This snippet demonstrates how to use the zia_firewall_filtering_network_service data source to retrieve information about a specific network service in Zscaler Internet Access. It requires specifying the name of the desired network service.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/data-sources/zia_firewall_filtering_network_service.md#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n# ZIA Network Service\ndata \"zia_firewall_filtering_network_service\" \"example\" {\n  name = \"ICMP_ANY\"\n}\n```\n\n----------------------------------------\n\nTITLE: Querying ZIA Firewall IPS Rule by ID\nDESCRIPTION: Example of retrieving a firewall IPS rule using its unique identifier as the lookup criterion\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/data-sources/zia_firewall_ips_rules.md#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"zia_firewall_ips_rules\" \"this\" {\n    id = \"12365478\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving FQDN-based VPN Credentials in ZIA\nDESCRIPTION: Example showing how to retrieve VPN credentials using an FQDN identifier. This configuration queries for VPN credentials associated with a specific fully qualified domain name.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/data-sources/zia_traffic_forwarding_vpn_credentials.md#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"zia_traffic_forwarding_vpn_credentials\" \"example\"{\n    fqdn = \"sjc-1-37@acme.com\"\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing ZIA Department Management with HCL\nDESCRIPTION: This snippet demonstrates how to retrieve details of the 'Engineering' user department using the zia_department_management data source in HCL. It requires Zscaler Internet Access configured and properly authenticated. The 'name' parameter specifies the department's name, while the data source fetches the department's attribute information including optional IdP ID and comments.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/data-sources/zia_user_management_department.md#2025-04-22_snippet_0\n\nLANGUAGE: HCL\nCODE:\n```\n# ZIA User Department Data Source\ndata \"zia_department_management\" \"engineering\" {\n name = \"Engineering\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving IP-based VPN Credentials in ZIA\nDESCRIPTION: Example showing how to retrieve VPN credentials using an IP address identifier. This configuration queries for VPN credentials associated with a specific IP address.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/data-sources/zia_traffic_forwarding_vpn_credentials.md#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"zia_traffic_forwarding_vpn_credentials\" \"example\"{\n    ip_address = \"1.1.1.1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a ZIA Other Destination Group in Terraform (HCL)\nDESCRIPTION: This HCL code defines a ZIA Firewall Destination Group resource named 'example_dstn_other' of type 'DSTN_OTHER'. This type allows grouping destinations based on geographic location using the 'countries' attribute and custom URL categories using the 'ip_categories' attribute. Note that 'ip_categories' only accepts custom URL categories.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/resources/zia_firewall_filtering_destination_groups.md#2025-04-22_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\n# IP Destination Group of Type DSTN_OTHER\nresource \"zia_firewall_filtering_destination_groups\" \"example_dstn_other\" {\n  name          = \"Example Destination Other\"\n  description   = \"Example Destination Other\"\n  type          = \"DSTN_OTHER\"\n  countries     = [\"COUNTRY_CA\"]\n  ip_categories = [\"CUSTOM_01\", \"CUSTOM_02\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Specific ZIA Resource Configuration to a Custom Path in Bash\nDESCRIPTION: Illustrates setting a custom output directory via the `ZSCALER_ZIA_TERRAFORM_INSTALL_PATH` environment variable and subsequently generating Terraform configuration (`.tf` files) for a specific ZIA resource (`zia_firewall_filtering_rule`) using `zscaler-terraformer generate`. This command only generates HCL files.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/guides/resource-importer.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ export ZSCALER_ZIA_TERRAFORM_INSTALL_PATH=\"$HOME/Desktop/zia_configuration\"\n$ zscaler-terraformer generate \\\n  --resource-type \"zia_firewall_filtering_rule\"\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving Basic Cloud Applications for DLP Rules\nDESCRIPTION: Demonstrates how to retrieve a list of cloud applications associated with DLP and other control rules using the cloud_application_policy type.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/data-sources/zia_cloud_applications.md#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"zia_cloud_applications\" \"this\" {\n  policy_type = \"cloud_application_policy\"\n}\n\noutput \"zia_cloud_applications\" {\n  value = data.zia_cloud_applications.this\n}\n```\n\n----------------------------------------\n\nTITLE: Querying ZIA Firewall IPS Rule by Name\nDESCRIPTION: Example of retrieving a firewall IPS rule using its name as the lookup criterion\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/data-sources/zia_firewall_ips_rules.md#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"zia_firewall_ips_rules\" \"this\" {\n    name = \"Default Cloud IPS Rule\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving GRE Tunnel Information in ZIA using Terraform\nDESCRIPTION: Example of using the zia_traffic_forwarding_gre_tunnel_info data source to fetch GRE tunnel details based on an IP address. This snippet demonstrates how to query GRE tunnel information for a specific IP address in the Zscaler Internet Access portal.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/data-sources/zia_traffic_forwarding_gre_tunnel_info.md#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n# ZIA Traffic Forwarding - GRE tunnel\ndata \"zia_traffic_forwarding_gre_tunnel_info\" \"example\" {\n  ip_address = \"1.1.1.1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving ZIA Cloud App Control Policy in HCL\nDESCRIPTION: Example showing how to retrieve a Cloud App Control Policy by name and type using the Terraform ZIA provider. This snippet demonstrates querying an existing policy named 'Example' of type 'STREAMING_MEDIA'.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/data-sources/zia_cloud_app_control_rule.md#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n# Retrieve a Cloud App Control Policy by name\ndata \"zia_cloud_app_control_rule\" \"this\"{\n    name = \"Example\"\n    type = \"STREAMING_MEDIA\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Network Application Groups via Terraform\nDESCRIPTION: Shows the command syntax for importing existing network application groups into Terraform using either the group ID or group name as the import identifier.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/resources/zia_firewall_filtering_network_application_groups.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import zia_firewall_filtering_network_application_groups.example <group_id>\n```\n\nLANGUAGE: shell\nCODE:\n```\nterraform import zia_firewall_filtering_network_application_groups.example <group_name>\n```\n\n----------------------------------------\n\nTITLE: Importing Specific ZIA Resource with zscaler-terraformer in Bash\nDESCRIPTION: Command example for importing only a specific ZIA resource type, `zia_firewall_filtering_rule`, using the `zscaler-terraformer` tool. The `--resources` flag targets the specific resource to generate configuration and state for.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/guides/resource-importer.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nzscaler-terraformer import --resources=\"zia_firewall_filtering_rule\"\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving Specific Application by Name and Category\nDESCRIPTION: Demonstrates how to retrieve a specific application by filtering on both name and category for SSL policy.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/data-sources/zia_cloud_applications.md#2025-04-22_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"zia_cloud_applications\" \"this\" {\n  policy_type = \"cloud_application_ssl_policy\"\n  app_class = [\"SOCIAL_NETWORKING\"]\n  app_name = \"Nebenan\"\n}\n\noutput \"zia_cloud_applications\" {\n    value = data.zia_cloud_applications.this\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Off Hours Time Window in ZIA Firewall\nDESCRIPTION: Terraform configuration to fetch off hours time window settings from ZIA firewall. Uses the zia_firewall_filtering_time_window data source to get predefined off hours configuration.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/data-sources/zia_firewall_filtering_time_window.md#2025-04-22_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"zia_firewall_filtering_time_window\" \"off_hours\"{\n    name = \"Off hours\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving DLP Predefined Identifiers in Terraform for ZIA\nDESCRIPTION: This snippet demonstrates how to use the zia_dlp_dictionary_predefined_identifiers data source to fetch information about predefined identifiers in a specified DLP dictionary. It requires the name of the dictionary as an input and returns various attributes including the dictionary ID, name, and list of predefined identifiers.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/data-sources/zia_dlp_dictionary_predefined_identifiers.md#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"zia_dlp_dictionary_predefined_identifiers\" \"this\" {\n  name = \"CRED_LEAKAGE\"\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of zia_traffic_forwarding_gre_vip_recommended_list Data Source in HCL\nDESCRIPTION: This HCL snippet demonstrates how to define the `zia_traffic_forwarding_gre_vip_recommended_list` data source in a Terraform configuration. It uses the `source_ip` argument to filter recommendations based on the specified IP address and the `required_count` argument to request a specific number of VIPs. This is the standard way to fetch recommended GRE VIPs based on the client's public IP.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/data-sources/zia_traffic_forwarding_gre_vip_recommended_list.md#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n# ZIA Traffic Forwarding - GRE VIP Recommended List\ndata \"zia_traffic_forwarding_gre_vip_recommended_list\" \"this\"{\n    source_ip = \"1.1.1.1\"\n    required_count = 2\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving ZIA Admin User by Username\nDESCRIPTION: Example of retrieving a ZIA administrator user using their username as the identifier.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/data-sources/zia_admin_users.md#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"zia_admin_users\" \"john_doe\" {\n  username = \"John Doe\"\n}\n```\n\n----------------------------------------\n\nTITLE: Cloud App Control Support Matrix in Markdown\nDESCRIPTION: Detailed markdown table showing the relationship between application types, specific applications, and their tenant profile support. The table uses checkmarks to indicate tenant profile support for various cloud applications organized by categories.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/data-sources/zia_cloud_app_control_rule.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n|               Type               |         Applications          | tenancy_profile_ids |\n|:--------------------------------:|:-----------------------------:|:-------------------:|\n|-------------------------------------|------------------------------|---------------------|\n| `BUSINESS_PRODUCTIVITY`          | `\"GOOGLEANALYTICS\"`           |          ✅         |\n|-------------------------------------|------------------------------|---------------------|\n| `ENTERPRISE_COLLABORATION`       | `\"GOOGLECALENDAR\"`            |          ✅         |\n| `ENTERPRISE_COLLABORATION`       | `\"GOOGLEKEEP\"`                |          ✅         |\n| `ENTERPRISE_COLLABORATION`       | `\"GOOGLEMEET\"`                |          ✅         |\n| `ENTERPRISE_COLLABORATION`       | `\"GOOGLESITES\"`               |          ✅         |\n| `ENTERPRISE_COLLABORATION`       | `\"WEBEX\"`                     |          ✅         |\n| `ENTERPRISE_COLLABORATION`       | `\"SLACK\"`                     |          ✅         |\n| `ENTERPRISE_COLLABORATION`       | `\"WEBEX_TEAMS\"`               |          ✅         |\n| `ENTERPRISE_COLLABORATION`       | `\"ZOOM\"`                      |          ✅         |\n|-------------------------------------|------------------------------|---------------------|\n| `FILE_SHARE`                     | `\"DROPBOX\"`                   |          ✅         |\n| `FILE_SHARE`                     | `\"GDRIVE\"`                    |          ✅         |\n| `FILE_SHARE`                     | `\"GPHOTOS\"`                   |          ✅         |\n|-------------------------------------|------------------------------|---------------------|\n| `HOSTING_PROVIDER`               | `\"GCLOUDCOMPUTE\"`             |          ✅         |\n| `HOSTING_PROVIDER`               | `\"AWS\"`                       |          ✅         |\n| `HOSTING_PROVIDER`               | `\"IBMSMARTCLOUD\"`             |          ✅         |\n| `HOSTING_PROVIDER`               | `\"GAPPENGINE\"`                |          ✅         |\n| `HOSTING_PROVIDER`               | `\"GOOGLE_CLOUD_PLATFORM\"`     |          ✅         |\n|-------------------------------------|------------------------------|---------------------|\n| `IT_SERVICES`                    | `\"MSLOGINSERVICES\"`           |          ✅         |\n| `IT_SERVICES`                    | `\"GOOGLOGINSERVICE\"`          |          ✅         |\n| `IT_SERVICES`                    | `\"WEBEX_LOGIN_SERVICES\"`      |          ✅         |\n| `IT_SERVICES`                    | `\"ZOHO_LOGIN_SERVICES\"`       |          ✅         |\n|-------------------------------------|------------------------------|---------------------|\n| `SOCIAL_NETWORKING`              | `\"GOOGLE_GROUPS\"`             |          ✅         |\n| `SOCIAL_NETWORKING`              | `\"GOOGLE_PLUS\"`               |          ✅         |\n|-------------------------------------|------------------------------|---------------------|\n| `STREAMING_MEDIA`                | `\"YOUTUBE\"`                   |          ✅         |\n| `STREAMING_MEDIA`                | `\"GOOGLE_STREAMING\"`          |          ✅         |\n|-------------------------------------|------------------------------|---------------------|\n| `SYSTEM_AND_DEVELOPMENT`         | `\"GOOGLE_DEVELOPERS\"`         |          ✅         |\n| `SYSTEM_AND_DEVELOPMENT`         | `\"GOOGLEAPPMAKER\"`            |          ✅         |\n|-------------------------------------|------------------------------|---------------------|\n| `WEBMAIL`                        | `\"GOOGLE_WEBMAIL\"`            |          ✅         |\n|-------------------------------------|------------------------------|---------------------|\n```\n\n----------------------------------------\n\nTITLE: Importing Specific ZPA Resource with zscaler-terraformer in Bash\nDESCRIPTION: Command demonstrating how to import only a specific type of ZPA resource, in this case, `zpa_application_segment`, using the `zscaler-terraformer` tool. The `--resources` flag specifies the exact resource type to generate configuration and state for.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/guides/resource-importer.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nzscaler-terraformer import --resources=\"zpa_application_segment\"\n\n```\n\n----------------------------------------\n\nTITLE: Querying ZIA ATP Malicious URLs in Terraform HCL\nDESCRIPTION: This snippet demonstrates how to use the zia_atp_malicious_urls data source in Terraform to retrieve malicious URLs from the ZIA Advanced Threat Protection policy. The data source requires no additional parameters.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/data-sources/zia_atp_malicious_urls.md#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"zia_atp_malicious_urls\" \"this\" {}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Weekend Time Window in ZIA Firewall\nDESCRIPTION: Terraform configuration to fetch weekend time window settings from ZIA firewall. Uses the zia_firewall_filtering_time_window data source to get predefined weekend configuration.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/data-sources/zia_firewall_filtering_time_window.md#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"zia_firewall_filtering_time_window\" \"weekends\"{\n    name = \"Weekends\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Malware Protection Policy Configuration in ZIA using Terraform\nDESCRIPTION: This code snippet demonstrates how to use the zia_atp_malware_settings data source to retrieve malware protection policy configuration details in Zscaler Internet Access. No additional arguments are required for this data source.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/data-sources/zia_atp_malware_settings.md#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"zia_atp_malware_settings\" \"this\" {}\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Group in ZIA with Terraform (HCL)\nDESCRIPTION: The purpose of this code snippet is to retrieve information about a specific user group from the ZIA portal using Terraform. It requires the name of the user group as a parameter and allows optional operation by the group's unique identifier. Note that it provides information that can be paired with other ZIA cloud operations, such as firewall and URL filtering.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/data-sources/zia_user_management_group.md#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"zia_group_management\" \"devops\" {\n name = \"DevOps\"\n}\n```\n\n----------------------------------------\n\nTITLE: Repository Structure Layout Example (Plaintext)\nDESCRIPTION: This plaintext directory tree visualizes the recommended structure of Terraform environments and modules, with their 'versions.tf' files. It guides users in organizing their configuration files to ensure each module and environment correctly specifies provider requirements. No dependencies required; purely illustrative.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/guides/troubleshooting.md#2025-04-22_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\n├── environments\n│   ├── sandbox\n│   │   ├── README.md\n│   │   ├── main.tf\n│   │   └── versions.tf\n│   └── production\n│       ├── README.md\n│       ├── main.tf\n│       └── versions.tf\n└── modules\n    ├── first-module\n    │   ├── ...\n    │   └── versions.tf\n    └── second-module\n        ├── ...\n        └── versions.tf\n```\n\n----------------------------------------\n\nTITLE: Displaying zscaler-terraformer Usage Help in Bash\nDESCRIPTION: Shows the command-line help output for the `zscaler-terraformer` tool, listing available commands (completion, generate, help, import, version) and flags for configuration, filtering, installation paths, authentication, and verbosity. This output details how to interact with the tool and its various options.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/guides/resource-importer.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nUsage:\n  zscaler-terraformer [command]\n\nAvailable Commands:\n  completion  Generate the autocompletion script for the specified shell\n  generate    Fetch resources from the Cloudflare API and generate the respective Terraform stanzas\n  help        Help about any command\n  import      Output `terraform import` compatible commands in order to import resources into state\n  version     Print the version number of zscaler-terraformer\n\nFlags:\n  -c, --config string                       Path to config file (default \"/Users/username/.zscaler-terraformer.yaml\")\n      --exclude string                      Which resources you wish to exclude\n  -h, --help                                help for zscaler-terraformer\n      --resource-type string                Which resource you wish to generate\n      --resources string                    Which resources you wish to import\n      --terraform-install-path string       Path to the default Terraform installation (default \".\")\n  -v, --verbose                             Specify verbose output (same as setting log level to debug)\n      --version                             Display the release version\n      --zia-terraform-install-path string   Path to the ZIA Terraform installation (default \".\")\n      --ziaApiKey string                    ZIA API Key\n      --ziaCloud string                     ZIA Cloud (i.e zscalerthree)\n      --ziaPassword string                  ZIA password\n      --ziaUsername string                  ZIA username\n      --zpa-terraform-install-path string   Path to the ZPA Terraform installation (default \".\")\n      --zpaClientID string                  ZPA client ID\n      --zpaClientSecret string              ZPA client secret\n      --zpaCloud string                     ZPA Cloud (BETA or PRODUCTION)\n      --zpaCustomerID string                ZPA Customer ID\n\nUse \"zscaler-terraformer [command] --help\" for more information about a command.\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving ZIA Advanced Settings in HCL\nDESCRIPTION: This snippet demonstrates how to use the zia_advanced_settings data source to retrieve advanced settings from the ZIA Admin Portal. It doesn't require any arguments, as it simply fetches the existing configuration.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/data-sources/zia_advanced_settings.md#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"zia_advanced_settings\" \"this\" {}\n```\n\n----------------------------------------\n\nTITLE: Retrieving ZIA Sandbox Rule by Name\nDESCRIPTION: Example showing how to retrieve a sandbox rule using its name in Terraform HCL configuration.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/data-sources/zia_sandbox_rules.md#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"zia_sandbox_rules\" \"this\" {\n    name = \"Default BA Rule\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving ZIA Location Lite Information in Terraform\nDESCRIPTION: Example of using the zia_location_lite data source to retrieve information about a Road Warrior location in Zscaler Internet Access. This can be used with URL filtering rules, firewall filtering rules, and DLP web rules.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/data-sources/zia_location_lite.md#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"zia_location_lite\" \"this\" {\n name = \"Road Warrior\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Timeouts for ZIA Resources\nDESCRIPTION: Example of implementing customizable Timeouts for Create and Update functions to help with rule reorder across specific ZIA resources.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/guides/release-notes.md#2025-04-22_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"zia_dlp_web_rules\" \"example\" {\n  # ... other configuration ...\n\n  timeouts {\n    create = \"30m\"\n    update = \"30m\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Cloud Applications by Category\nDESCRIPTION: Shows how to filter cloud applications by application category (AI_ML) and retrieve their IDs.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/data-sources/zia_cloud_applications.md#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"zia_cloud_applications\" \"this\" {\n  policy_type = \"cloud_application_policy\"\n  app_class   = [\"AI_ML\"]\n}\n\noutput \"app_ids\" {\n  value = [for app in data.zia_cloud_applications.this.applications : app[\"app\"]]\n}\n```\n\n----------------------------------------\n\nTITLE: Duplicate Service Network Creation Error (Shell)\nDESCRIPTION: This shell-style error message is returned when attempting to create a network service that already exists within Zscaler via a Terraform resource. The message includes the API response, highlighting the 'DUPLICATE_ITEM' code, which signals a naming collision or duplication that must be resolved by renaming or removing conflicting resources.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/guides/troubleshooting.md#2025-04-22_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n│ Error: FAILED: POST, https://zsapi.***.net/api/v1/networkServices, 400, 400 , {\"code\":\"DUPLICATE_ITEM\",\"message\":\"DUPLICATE_ITEM\"}, api responded with code: 400\n```\n\n----------------------------------------\n\nTITLE: Importing Existing ZIA Rule Labels\nDESCRIPTION: Commands for importing existing rule labels into Terraform state using either the label ID or label name as the import identifier.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/resources/zia_rule_labels.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import zia_rule_labels.example <label_id>\n```\n\nLANGUAGE: shell\nCODE:\n```\nterraform import zia_rule_labels.example <label_name>\n```\n\n----------------------------------------\n\nTITLE: Retrieving ZIA Sandbox Rule by ID\nDESCRIPTION: Example showing how to retrieve a sandbox rule using its unique identifier in Terraform HCL configuration.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/data-sources/zia_sandbox_rules.md#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"zia_sandbox_rules\" \"this\" {\n    id = \"12365478\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving ZIA Security Policy Settings in Terraform HCL\nDESCRIPTION: Example showing how to use the zia_security_settings data source to retrieve security policy settings from Zscaler Internet Access. This data source requires no additional parameters to execute.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/data-sources/zia_security_policy_settings.md#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n# ZIA Security Policy Settings Data Source\ndata \"zia_security_settings\" \"example\"{}\n```\n\n----------------------------------------\n\nTITLE: Importing ZIA Rule Labels into Terraform using Name (Shell)\nDESCRIPTION: This shell command illustrates importing an existing ZIA rule label configuration into Terraform state using its name. The `terraform import` command is used with the resource address `zia_rule_labels.example` (defined in Terraform configuration) and the `<label_name>` from ZIA as the identifier.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/resources/zia_admin_roles.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nterraform import zia_rule_labels.example <label_name>\n```\n\n----------------------------------------\n\nTITLE: Setting ZIA Legacy Auth Environment Variables in PowerShell\nDESCRIPTION: Provides PowerShell commands to set environment variables for configuring the Zscaler ZIA Terraform provider on Windows using legacy authentication. Variables like `$env:username`, `$env:password`, `$env:api_key`, `$env:zia_cloud`, and `$env:use_legacy_client` are used to set the provider's expected `ZIA_USERNAME`, `ZIA_PASSWORD`, `ZIA_API_KEY`, `ZIA_CLOUD`, and `ZSCALER_USE_LEGACY_CLIENT` variables, respectively, providing necessary credentials and settings.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/index.md#2025-04-22_snippet_4\n\nLANGUAGE: pwsh\nCODE:\n```\n$env:username = 'xxxxxxxxxxxxxxxx'\n$env:password = 'xxxxxxxxxxxxxxxx'\n$env:api_key = 'xxxxxxxxxxxxxxxx'\n$env:zia_cloud = '<zscaler_cloud_name>'\n$env:use_legacy_client = true\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration Structure for zscaler-terraformer\nDESCRIPTION: Illustrates the structure of a YAML configuration file (`~/.zscaler-terraformer.yaml`) used by `zscaler-terraformer` for ZPA authentication. It defines keys for Client ID, Client Secret, Customer ID, and Cloud environment, providing an alternative to environment variables.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/guides/resource-importer.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nzpaClientID: \"Mrwefhoijhviihew\"\nzpaClientSecret: \"{HBRjowhdowqj\"\nzpaCustomerID: \"123456789\"\nzpaCloud: \"BETA\"\n```\n\n----------------------------------------\n\nTITLE: Invalid Country Name Error for Location Management (Shell)\nDESCRIPTION: This shell error snippet appears when providing an invalid or incorrectly formatted country name to the 'country' attribute of a 'zia_location_management' resource. It instructs users to consult the ISO 3166-1 standard for correct country names, relevant for configuring location-based settings.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/guides/troubleshooting.md#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n│ Error: 'UNITED_STATE' is not a valid country name. Please refer to ISO 3166-1 for a list of valid country names\n```\n\n----------------------------------------\n\nTITLE: Importing ZIA Sandbox Behavioral Analysis Configuration\nDESCRIPTION: Command to import existing Sandbox behavioral analysis settings into Terraform state management using the Zscaler-Terraformer tool.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/resources/zia_sandbox_behavioral_analysis.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nterraform import zia_sandbox_behavioral_analysis.example sandbox_settings\n```\n\n----------------------------------------\n\nTITLE: Retrieving ZIA Forwarding Control Rule\nDESCRIPTION: Example of using the zia_forwarding_control_rule data source to fetch information about a specific forwarding rule by name.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/data-sources/zia_forwarding_control_rule.md#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n# ZIA Forwarding Control - ZPA Gateway\ndata \"zia_forwarding_control_rule\" \"this\" {\n  name = \"FWD_RULE01\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Guest Wifi Group in ZIA\nDESCRIPTION: Example of retrieving a location group for guest wifi traffic using the zia_location_groups data source.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/data-sources/zia_location_groups.md#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"zia_location_groups\" \"example\"{\n    name = \"Guest Wifi Group\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing ZIA Forwarding Control ZPA Gateway Configuration\nDESCRIPTION: Commands for importing existing ZPA Gateway configurations into Terraform using either the gateway ID or name as the import identifier.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/resources/zia_forwarding_control_zpa_gateway.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import forwarding_control_zpa_gateway.example <gateway_id>\n```\n\nLANGUAGE: shell\nCODE:\n```\nterraform import forwarding_control_zpa_gateway.example <gateway_name>\n```\n\n----------------------------------------\n\nTITLE: Importing All ZPA Resources with zscaler-terraformer in Bash\nDESCRIPTION: Command to instruct `zscaler-terraformer` to import all supported Zscaler Private Access (ZPA) resources. The `--resources=\"zpa\"` flag specifies the target platform for the import operation, generating Terraform configuration and state.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/guides/resource-importer.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nzscaler-terraformer import --resources=\"zpa\"\n\n```\n\n----------------------------------------\n\nTITLE: Failed Provider Installation Checksum Error (Shell)\nDESCRIPTION: This shell-style output shows a Terraform provider installation failure caused by a mismatch or absence of the expected SHA-256 checksum for the requested provider version. It commonly occurs if the '.terraform.lock.hcl' file is absent or not up to date. Users should check provider lock files and download URLs to resolve.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/guides/troubleshooting.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nError: Failed to install provider\n\nError while installing zscaler/zia: v2.6.2: checksum list has no SHA-256 hash for \"https://github.com/zscaler/terraform-provider-zia/releases/download/v2.6.2/terraform-provider-zia_2.6.2_darwin_amd64.zip\"\n```\n\n----------------------------------------\n\nTITLE: Importing ZIA GRE Tunnel by Engine Name using Terraform CLI\nDESCRIPTION: This shell command provides an alternative method for importing a ZIA GRE tunnel configuration into Terraform state. It uses the engine name associated with the tunnel as the import ID. Replace `<engine_name>` with the actual engine name.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/resources/zia_traffic_forwarding_gre_tunnel.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nterraform import zia_traffic_forwarding_gre_tunnel.example <engine_name>\n```\n\n----------------------------------------\n\nTITLE: Importing a ZIA URL Category via Name using Terraform CLI\nDESCRIPTION: This shell command shows how to import an existing ZIA URL category into the Terraform state using its configured name. The imported resource will be linked to the `zia_url_categories.example` resource block in the Terraform configuration. Note that only custom URL categories can be imported, not built-in ones.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/resources/zia_url_categories.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nterraform import zia_url_categories.example <category_name>\n```\n\n----------------------------------------\n\nTITLE: Retrieving IoT Traffic Group in ZIA\nDESCRIPTION: Example of retrieving a location group for IoT traffic using the zia_location_groups data source.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/data-sources/zia_location_groups.md#2025-04-22_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"zia_location_groups\" \"example\"{\n    name = \"IoT Traffic Group\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing ZIA ATP Malicious URLs Configuration (Shell)\nDESCRIPTION: This shell command demonstrates how to import the existing ZIA ATP malicious URL configuration into Terraform state. It uses the `terraform import` command, targeting the `zia_atp_malicious_urls` resource named \"this\" and using the fixed import ID `all_urls` to represent the entire set of denylisted URLs managed by this resource.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/resources/zia_atp_malicious_urls.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import zia_atp_malicious_urls.this all_urls\n```\n\n----------------------------------------\n\nTITLE: Setting ZPA Authentication Environment Variables in Bash\nDESCRIPTION: Demonstrates setting the required environment variables for ZPA authentication with `zscaler-terraformer`. These variables (`ZPA_CLIENT_ID`, `ZPA_CLIENT_SECRET`, `ZPA_CUSTOMER_ID`, `ZPA_CLOUD`) provide the necessary credentials and cloud information for the tool to interact with the ZPA API.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/guides/resource-importer.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport ZPA_CLIENT_ID      = \"xxxxxxxxxxxxxxxx\"\nexport ZPA_CLIENT_SECRET  = \"xxxxxxxxxxxxxxxx\"\nexport ZPA_CUSTOMER_ID    = \"xxxxxxxxxxxxxxxx\"\nexport ZPA_CLOUD          = \"BETA\" // Use \"GOV\" for ZPA Gov Cloud\n\n```\n\n----------------------------------------\n\nTITLE: Importing ZIA Admin User by ID using Shell\nDESCRIPTION: This shell command demonstrates how to import an existing ZIA admin user configuration into the Terraform state using the user's unique administrative ID. This allows Terraform to manage a resource that was created outside of Terraform. The command requires the Terraform CLI to be installed and configured.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/resources/zia_admin_users.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nterraform import zia_admin_users.example <admin_id>\n```\n\n----------------------------------------\n\nTITLE: Importing ZIA Firewall Rule by ID using Terraform Shell Command\nDESCRIPTION: This shell command demonstrates how to import an existing Zscaler ZIA Firewall Filtering Rule into the Terraform state management using the rule's unique ID. The command requires the Terraform CLI to be installed and the Zscaler ZIA provider configured. Replace `<rule_id>` with the specific ID of the firewall rule you wish to import.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/resources/zia_firewall_filtering_rule.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import zia_firewall_filtering_rule.example <rule_id>\n```\n\n----------------------------------------\n\nTITLE: Creating ZIA Location with Excluded Groups\nDESCRIPTION: Shows how to create a ZIA location with exclusions from both manual and dynamic location groups.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/resources/zia_location_management.md#2025-04-22_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"zia_location_groups\" \"this\"{\n    name = \"SDWAN_CAN\"\n}\n\nresource \"zia_location_management\" \"usa_sjc37\"{\n    name                        = \"USA_SJC_37\"\n    description                 = \"Created with Terraform\"\n    country                     = \"UNITED_STATES\"\n    tz                          = \"UNITED_STATES_AMERICA_LOS_ANGELES\"\n    state                       = \"California\"\n    auth_required               = true\n    idle_time_in_minutes        = 720\n    display_time_unit           = \"HOUR\"\n    surrogate_ip                = true\n    xff_forward_enabled         = true\n    ofw_enabled                 = true\n    ips_control                 = true\n    exclude_from_dynamic_groups = true\n    exclude_from_manual_groups  = true\n    profile                     = \"CORPORATE\"\n    vpn_credentials {\n       id = zia_traffic_forwarding_vpn_credentials.usa_sjc37.id\n       type = zia_traffic_forwarding_vpn_credentials.usa_sjc37.type\n    }\n    depends_on = [zia_traffic_forwarding_vpn_credentials.usa_sjc37 ]\n}\n\nresource \"zia_traffic_forwarding_vpn_credentials\" \"usa_sjc37\"{\n    type            = \"UFQDN\"\n    fqdn            = \"usa_sjc37@acme.com\"\n    comments        = \"USA - San Jose IPSec Tunnel\"\n    pre_shared_key  = \"***************\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Server Traffic Group in ZIA (First Instance)\nDESCRIPTION: Example of retrieving a location group for server traffic using the zia_location_groups data source.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/data-sources/zia_location_groups.md#2025-04-22_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"zia_location_groups\" \"example\"{\n    name = \"Server Traffic Group\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing ZIA Advanced Threat Settings with Terraform\nDESCRIPTION: Command to import existing ZIA advanced threat settings configuration into Terraform state management. Uses the dedicated identifier 'advanced_threat_settings' as the import ID.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/resources/zia_advanced_threat_settings.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import zia_advanced_threat_settings.this \"advanced_threat_settings\"\n```\n\n----------------------------------------\n\nTITLE: Querying ATP Security Exceptions in Terraform HCL\nDESCRIPTION: Example showing how to use the zia_atp_security_exceptions data source to retrieve ATP security exception configurations. This data source requires no additional parameters and returns information about configured security exceptions for the ATP policy.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/data-sources/zia_atp_security_exceptions.md#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"zia_atp_security_exceptions\" \"this\" {}\n```\n\n----------------------------------------\n\nTITLE: Importing ZIA ATP Malware Inspection Configuration using Terraform CLI (Shell)\nDESCRIPTION: Provides the shell command to import existing ZIA ATP Malware Inspection settings into the Terraform state file. It uses the `terraform import` command, specifying the resource type (`zia_atp_malware_inspection`), the local resource name (`this`), and the fixed import ID (`inspection`). This requires the Terraform CLI and the Zscaler ZIA Terraform provider to be configured.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/resources/zia_atp_malware_inspection.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import zia_atp_malware_inspection.this \"inspection\"\n```\n\n----------------------------------------\n\nTITLE: Importing ZIA Cloud App Control Rule by ID using Terraform CLI\nDESCRIPTION: This shell command demonstrates how to import an existing ZIA Cloud Application Control rule into Terraform state management using its unique Rule Type and Rule ID. Replace `<rule_type:rule_id>` with the actual type and ID.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/resources/zia_cloud_app_control_rule.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nterraform import zia_cloud_app_control_rule.this <rule_type:rule_id>\n```\n\n----------------------------------------\n\nTITLE: Importing ZIA Location Management Resource in Terraform\nDESCRIPTION: Commands for importing existing ZIA location management configurations into Terraform using either the location ID or name.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/resources/zia_location_management.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nterraform import zia_location_management.example <location_id>\n```\n\nLANGUAGE: shell\nCODE:\n```\nterraform import zia_location_management.example <location_name>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Server Traffic Group in ZIA (Second Instance)\nDESCRIPTION: Duplicate example of retrieving a location group for server traffic using the zia_location_groups data source.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/data-sources/zia_location_groups.md#2025-04-22_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"zia_location_groups\" \"example\"{\n    name = \"Server Traffic Group\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Existing ZIA ATP Security Exceptions into Terraform State using Shell\nDESCRIPTION: This shell command demonstrates how to use the Terraform CLI to import the existing Zscaler ZIA ATP security exceptions configuration into the Terraform state management. It targets the `zia_atp_security_exceptions` resource type, specifically the instance named \"this\" defined elsewhere in the Terraform configuration, using the designated import ID `all_urls`. Executing this command requires Terraform to be installed and the Zscaler ZIA provider to be properly configured.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/resources/zia_atp_security_exceptions.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import zia_atp_security_exceptions.this all_urls\n```\n\n----------------------------------------\n\nTITLE: Importing ZIA User Management Configuration\nDESCRIPTION: This shell command snippet shows how to import a ZIA user management resource into Terraform using user ID or name as the import identifier. The terraform command facilitates the transfer of existing ZIA configurations to a Terraform-compatible format.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/resources/zia_user_management.md#2025-04-22_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nterraform import zia_user_management.example <user_id>\n\nterraform import zia_user_management.example <name>\n```\n\n----------------------------------------\n\nTITLE: Importing Zscaler Advanced Threat Settings via Terraform CLI - Shell\nDESCRIPTION: This shell command snippet illustrates how to import an existing ZIA advanced threat settings configuration into Terraform state using the Terraform CLI. The command requires the Zscaler Terraform provider and optionally the Zscaler-Terraformer tool for simplified configuration management. Key parameters include specifying the resource address (here \"zia_advanced_threat_settings.this\") and using the import ID \"advanced_threat_settings\". The input is an identifier string, and the output is an updated Terraform state reflecting the imported resource. Limitations include the necessity for proper authentication and that import does not create new resources, but brings them under Terraform control.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/resources/zia_atp_malware_settings.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import zia_advanced_threat_settings.this \"advanced_threat_settings\"\n\n```\n\n----------------------------------------\n\nTITLE: Importing Existing Zscaler File Type Control Rules - Terraform Shell Command\nDESCRIPTION: This shell snippet shows two forms for importing an existing ZIA file type control rule into Terraform's state using the import subcommand, accepting either a rule id or rule name as the identifier. The 'terraform import' command requires correct resource addressing and the corresponding resource must be declared beforehand in HCL. On success, the rule's state is managed by Terraform.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/resources/zia_file_type_control_rules.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import zia_file_type_control_rules.example <rule_id>\n```\n\nLANGUAGE: shell\nCODE:\n```\nterraform import zia_file_type_control_rules.example <rule_name>\n```\n\n----------------------------------------\n\nTITLE: Importing Static IP Resource with Terraform Shell Commands\nDESCRIPTION: This snippet shows how to import an existing static IP resource into Terraform using shell commands with the \\'terraform import\\' feature. It is necessary to have the Zscaler-Terraformer tool installed and configured. The commands are executed in a shell environment to import resources using either \\'<STATIC IP ID>\\' or \\'<IP ADDRESS>\\' as identifiers.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/resources/zia_traffic_forwarding_static_ip.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import zia_traffic_forwarding_static_ip.example <static_ip_id>\n```\n\nLANGUAGE: shell\nCODE:\n```\nterraform import zpa_app_connector_group.example <ip_address>\n```\n\n----------------------------------------\n\nTITLE: Retrieving ZIA Activation Status in HCL\nDESCRIPTION: This snippet demonstrates how to use the zia_activation_status data source to retrieve the current activation status of ZIA configurations. No arguments are required for this data source.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/data-sources/zia_activation_status.md#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"zia_activation_status\" \"activation\" {}\n```\n\n----------------------------------------\n\nTITLE: Building the Provider\nDESCRIPTION: Commands to compile the provider and place the binary in the GOPATH directory.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ make build13\n$ $GOPATH/bin/terraform-provider-zia\n```\n\n----------------------------------------\n\nTITLE: Querying Android Device Groups in ZIA\nDESCRIPTION: Example of retrieving Android device group information using the zia_device_groups data source in Terraform.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/data-sources/zia_device_groups.md#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"zia_device_groups\" \"android\"{\n    name = \"Android\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing ZIA Cloud App Control Rule by Name using Terraform CLI\nDESCRIPTION: This shell command shows how to import an existing ZIA Cloud Application Control rule into Terraform state management using its Rule Type and Rule Name. Replace `<\"rule_type:rule_name\">` with the actual type and name, ensuring the name is quoted if it contains spaces or special characters.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/resources/zia_cloud_app_control_rule.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nterraform import zia_cloud_app_control_rule.this <\"rule_type:rule_name\">\n```\n\n----------------------------------------\n\nTITLE: Executing Terraform with ZIA Activation CLI\nDESCRIPTION: Demonstrates how to run Terraform initialization and apply commands, followed by executing the `ziaActivator` CLI for configuration activation. This chain ensures configurations are applied and activated collectively.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/guides/zia-activator-overview.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform init && terraform apply && ziaActivator\n```\n\n----------------------------------------\n\nTITLE: Importing ZIA VPN Credentials Using Terraform CLI (Shell)\nDESCRIPTION: Shows how to import existing ZIA traffic forwarding VPN credentials into Terraform state using the 'terraform import' CLI command. Depending on the identifier, it allows batch import by type ('IP', 'UFQDN') or singular import by address. Each command must be adjusted to match the resource instance being imported.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/resources/zia_traffic_forwarding_vpn_credentials.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ terraform import zia_traffic_forwarding_vpn_credentials.example 'IP'\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ terraform import zia_traffic_forwarding_vpn_credentials.this 'UFQDN'\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ terraform import zia_traffic_forwarding_vpn_credentials.example 'testvpn@example.com'\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ terraform import zia_traffic_forwarding_vpn_credentials.example '1.1.1.1'\n```\n\n----------------------------------------\n\nTITLE: Querying ZIA Sandbox Behavioral Analysis Settings with Terraform\nDESCRIPTION: Demonstrates how to use the zia_sandbox_behavioral_analysis data source to retrieve the list of blocked MD5 file hashes from ZIA Sandbox. This data source requires no additional parameters to execute.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/data-sources/zia_sandbox_behavioral_analysis.md#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n# ZIA Security Policy Settings Data Source\ndata \"zia_sandbox_behavioral_analysis\" list_all {}\n```\n\n----------------------------------------\n\nTITLE: Running Terraform Example for ZIA GRE Tunnel VIPs\nDESCRIPTION: Commands to initialize, plan, and apply the Terraform configuration for retrieving recommended GRE tunnel VIPs in ZIA. These commands should be executed from within the example directory after configuring the ZIA provider.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/examples/zia_traffic_forwarding_recommended_vips/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nterraform init\nterraform plan -out theplan\nterraform apply theplan\n```\n\n----------------------------------------\n\nTITLE: Importing a ZIA URL Category via ID using Terraform CLI\nDESCRIPTION: This shell command demonstrates how to import an existing ZIA URL category into the Terraform state using its unique category ID. The imported resource will be associated with the Terraform resource block named `zia_url_categories.example`.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/resources/zia_url_categories.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import zia_url_categories.example <category_id>\n```\n\n----------------------------------------\n\nTITLE: Importing Existing ZIA DLP Engines into Terraform State\nDESCRIPTION: These shell commands demonstrate how to import an existing ZIA DLP engine into the Terraform state using the `terraform import` command. The target resource is specified as `zia_dlp_engines.example`, and the existing engine can be identified by either its unique `<engine_id>` or its `<engine_name>`. This allows Terraform to manage pre-existing infrastructure.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/resources/zia_dlp_engines.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import zia_dlp_engines.example <engine_id>\n```\n\nLANGUAGE: shell\nCODE:\n```\nterraform import zia_dlp_engines.example <engine_name>\n```\n\n----------------------------------------\n\nTITLE: Setting ZIA Authentication Environment Variables in Bash\nDESCRIPTION: Shows how to set the required environment variables for ZIA authentication with `zscaler-terraformer`. These variables (`ZIA_USERNAME`, `ZIA_PASSWORD`, `ZIA_API_KEY`, `ZIA_CLOUD`) provide the username, password, API key, and cloud identifier needed for API interaction.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/guides/resource-importer.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport ZIA_USERNAME = \"xxxxxxxxxxxxxxxx\"\nexport ZIA_PASSWORD = \"xxxxxxxxxxxxxxxx\"\nexport ZIA_API_KEY  = \"xxxxxxxxxxxxxxxx\"\nexport ZIA_CLOUD    = \"xxxxxxxxxxxxxxxx\" (i.e zscalerthree)\n\n\n```\n\n----------------------------------------\n\nTITLE: Importing ZIA Admin User by Login Name using Shell\nDESCRIPTION: This shell command shows an alternative method for importing an existing ZIA admin user into the Terraform state, using the user's login name as the identifier instead of the ID. This is useful if the admin ID is unknown but the login name is available. Requires Terraform CLI.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/resources/zia_admin_users.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nterraform import zia_admin_users.example <login_name>\n```\n\n----------------------------------------\n\nTITLE: Querying ZIA URL Category by Custom ID\nDESCRIPTION: Terraform configuration to query a URL category using its custom ID in ZIA.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/data-sources/zia_url_categories.md#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"zia_url_categories\" \"this\"{\n    id = \"CUSTOM_08\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running the Terraform Example for Zscaler VIPs\nDESCRIPTION: Commands to initialize Terraform, create an execution plan, and apply the configuration to retrieve Zscaler VIPs. This requires prior configuration of the ZIA provider.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/examples/zia_traffic_forwarding_public_node_vips/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nterraform init\nterraform plan -out theplan\nterraform apply theplan\n```\n\n----------------------------------------\n\nTITLE: Initializing and Applying Terraform Configuration for ZIA Custom URL Categories\nDESCRIPTION: These commands initialize the Terraform working directory, create an execution plan, and apply the changes to create custom URL categories in ZIA. The plan is saved to a file named 'theplan' before being applied.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/examples/zia_url_categories/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nterraform init\nterraform plan -out theplan\nterraform apply theplan\n```\n\n----------------------------------------\n\nTITLE: Defining ZIA Cloud Applications Data Source - HCL\nDESCRIPTION: This snippet demonstrates how to define the `zia_cloud_applications` data source in HCL for Terraform to retrieve DNS tunnels applications with the class 'DNS_OVER_HTTPS'. Dependencies include Terraform and the Zscaler provider. Key parameters include 'policy_type' which is set to 'cloud_application_policy' and 'app_class' which filters for 'DNS_OVER_HTTPS'. The output is the list of applications that match these criteria.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/resources/zia_firewall_dns_rules.md#2025-04-22_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"zia_cloud_applications\" \"this\" {\n  policy_type = \"cloud_application_policy\"\n  app_class = [\"DNS_OVER_HTTPS\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Example zscaler-terraformer Configuration File Content (Bash)\nDESCRIPTION: Provides an example of using the `cat` command in Bash to display the content of a YAML configuration file (`~/.zscaler-terraformer.yaml`), which serves as an alternative to environment variables for ZPA authentication. The output shows keys (`zpaClientID`, `zpaClientSecret`, `zpaCustomerID`, `zpaCloud`) and placeholder values.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/guides/resource-importer.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ cat ~/.zscaler-terraformer.yaml\nzpaClientID: \"Mrwefhoijhviihew\"\nzpaClientSecret: \"{HBRjowhdowqj\"\nzpaCustomerID: \"123456789\"\nzpaCloud: \"BETA\"\n\n```\n\n----------------------------------------\n\nTITLE: Importing ZIA Auth Settings URLs into Terraform State using Shell\nDESCRIPTION: This shell command demonstrates importing the existing ZIA cookie authentication exempt URL list into Terraform management. It uses `terraform import` with the resource type `zia_auth_settings_urls`, the local Terraform resource name `example`, and the specific import ID `all_urls` designated by the ZIA provider for this resource. This requires the Terraform CLI and a configured ZIA provider.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/resources/zia_auth_settings_urls.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import zia_auth_settings_urls.example all_urls\n```\n\n----------------------------------------\n\nTITLE: Retrieving File Type Control Rule by Name in Terraform\nDESCRIPTION: Example of retrieving a File Type Control rule using its name as an identifier in Terraform configuration.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/data-sources/zia_file_type_control_rules.md#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"zia_file_type_control_rules\" \"this\" {\n    name = \"Example\"\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing and Applying Terraform Configuration for ZIA GRE Tunnel Info\nDESCRIPTION: These commands initialize the Terraform working directory, create an execution plan, and apply the configuration to retrieve GRE Tunnel information from ZIA.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/examples/zia_traffic_forwarding_gre_tunnel_info/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nterraform init\nterraform plan -out theplan\nterraform apply theplan\n```\n\n----------------------------------------\n\nTITLE: Running the Terraform GRE Internal IP Range Example\nDESCRIPTION: Commands for initializing and executing the Terraform configuration that retrieves available GRE tunnel internal IP address ranges from ZIA. The example initializes the Terraform working directory, creates an execution plan, and applies the configuration.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/examples/zia_traffic_forwarding_gre_internal_ip_range/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nterraform init\nterraform plan -out theplan\nterraform apply theplan\n```\n\n----------------------------------------\n\nTITLE: Importing a ZIA Destination Group into Terraform using Group ID (Shell)\nDESCRIPTION: This shell command demonstrates how to import an existing ZIA Firewall Destination Group into the Terraform state using its unique Group ID. This allows Terraform to manage a pre-existing resource. Replace '<group_id>' with the actual ID of the destination group.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/resources/zia_firewall_filtering_destination_groups.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nterraform import zia_firewall_filtering_destination_groups.example <group_id>\n```\n\n----------------------------------------\n\nTITLE: Provider Block Configuration Error Message (Shell)\nDESCRIPTION: This is a shell-styled display of a validation error message indicating that the 'zscaler/zia' provider is missing explicit configuration in the Terraform root module. It highlights the need to add and configure a provider block as per documentation. The message typically appears in Terraform command output during misconfiguration scenarios.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/guides/troubleshooting.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n│ Provider \"zscaler/zia\" requires explicit configuration. Add a provider block to the root module and configure the\n│ provider's required arguments as described in the provider documentation.\n```\n\n----------------------------------------\n\nTITLE: Importing ZIA ATP Malware Policy Configuration using Shell\nDESCRIPTION: This shell command demonstrates how to import an existing ZIA ATP Malware Protection policy configuration into Terraform state management. It uses the `terraform import` command, specifying the resource type (`zia_atp_malware_policy`), a chosen Terraform resource name (`this`), and the required fixed import ID (`policy`). This requires the Terraform CLI and configured ZIA provider.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/resources/zia_atp_malware_policy.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import zia_atp_malware_policy.this \"policy\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Work Hours Time Window in ZIA Firewall\nDESCRIPTION: Terraform configuration to fetch work hours time window settings from ZIA firewall. Uses the zia_firewall_filtering_time_window data source to get predefined work hours configuration.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/data-sources/zia_firewall_filtering_time_window.md#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"zia_firewall_filtering_time_window\" \"work_hours\"{\n    name = \"Work hours\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running Terraform Commands for ZIA Network Services Example\nDESCRIPTION: Basic Terraform workflow commands to initialize the project, create an execution plan, and apply the configuration to create custom network services in ZIA.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/examples/zia_fw_filtering_network_services/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nterraform init\nterraform plan -out theplan\nterraform apply theplan\n```\n\n----------------------------------------\n\nTITLE: Installing zscaler-terraformer via Homebrew (Tap Method) in Bash\nDESCRIPTION: Commands for installing the `zscaler-terraformer` CLI tool on macOS using Homebrew. It first taps the Zscaler repository (`zscaler/tap`) and then installs the tool (`zscaler-terraformer`) from that tap.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/guides/resource-importer.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nbrew tap zscaler/tap\nbrew install zscaler/tap/zscaler-terraformer\n\n```\n\n----------------------------------------\n\nTITLE: Importing ZIA Rule Labels into Terraform using ID (Shell)\nDESCRIPTION: This shell command demonstrates how to import an existing ZIA rule label configuration into Terraform state management using its unique ID. The `terraform import` command targets the `zia_rule_labels.example` resource (which should be defined in your Terraform configuration) and uses the specific `<label_id>` retrieved from ZIA for identification.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/resources/zia_admin_roles.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nterraform import zia_rule_labels.example <label_id>\n```\n\n----------------------------------------\n\nTITLE: Importing ZIA Firewall IP Source Groups to Terraform State\nDESCRIPTION: This shell command demonstrates importing an existing ZIA firewall IP source group into Terraform using the group's ID or name. Requires Terraform CLI access and a configured Zscaler provider. The input is the group identifier, and the output is the group's state registered in Terraform.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/resources/zia_firewall_filtering_ip_source_groups.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nterraform import zia_firewall_filtering_ip_source_groups.example <group_id>\n```\n\nLANGUAGE: shell\nCODE:\n```\nterraform import zia_firewall_filtering_ip_source_groups.example <group_name>\n```\n\n----------------------------------------\n\nTITLE: Destroying ZIA IP Destination Groups Terraform Configuration\nDESCRIPTION: This command destroys the resources created by the Terraform configuration, removing the IP destination groups from the ZIA portal.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/examples/zia_fw_filtering_ip_destination_groups/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nterraform destroy\n```\n\n----------------------------------------\n\nTITLE: Adding MD5 Hashes to ZIA Sandbox Blocklist\nDESCRIPTION: Creates a resource to add specific MD5 file hashes to the Sandbox blocklist. The resource allows blocking up to 10000 unique MD5 hashes for files that are supported by Sandbox analysis.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/resources/zia_sandbox_behavioral_analysis.md#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"zia_sandbox_behavioral_analysis\" \"this\" {\n  file_hashes_to_be_blocked = [\n        \"42914d6d213a20a2684064be5c80ffa9\",\n        \"c0202cf6aeab8437c638533d14563d35\",\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Default GRE Internal IP Ranges in Terraform\nDESCRIPTION: Retrieves the first 10 available internal IP ranges for GRE tunnel configuration using the default settings.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/data-sources/zia_traffic_forwarding_gre_internal_ip_range_list.md#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"zia_gre_internal_ip_range_list\" \"example\"{\n}\n```\n\n----------------------------------------\n\nTITLE: Running Terraform ZIA Admin User Account Example\nDESCRIPTION: Commands for initializing, planning, and applying the Terraform configuration to create a ZIA admin user account. Requires the ZIA provider to be configured as described in the documentation.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/examples/zia_admin_user/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nterraform init\nterraform plan -out theplan\nterraform apply theplan\n```\n\n----------------------------------------\n\nTITLE: Importing ZIA DLP Web Rules by ID\nDESCRIPTION: Command to import a ZIA DLP web rule into Terraform using the rule ID as the identifier.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/resources/zia_dlp_web_rules.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nterraform import zia_dlp_web_rules.example <rule_id>\n```\n\n----------------------------------------\n\nTITLE: Importing ZIA Firewall Filtering Network Service in Shell\nDESCRIPTION: This snippet illustrates how to import a predefined or existing ZIA firewall filtering network service into Terraform using the shell. This is required when working with built-in ZIA service types. The only prerequisite is having Terraform and the relevant Zscaler provider configured. The import command accepts the service ID or name as input, leading to a completed import operation in Terraform's state management.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/resources/zia_firewall_filtering_network_service.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import zia_firewall_filtering_network_service.example <service_id>\n\nterraform import zia_firewall_filtering_network_service.example <service_name>\n```\n\n----------------------------------------\n\nTITLE: Destroying ZIA Network Service Groups Resources\nDESCRIPTION: Command to remove all resources created by the Terraform configuration.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/examples/zia_fw_filtering_network_services_groups/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nterraform destroy\n```\n\n----------------------------------------\n\nTITLE: Importing ZIA Security Settings Configuration\nDESCRIPTION: Shows the command for importing existing ZIA security settings into Terraform state management using the Zscaler-Terraformer tool.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/resources/zia_security_policy_settings.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nterraform import zia_security_settings.example all_urls\n```\n\n----------------------------------------\n\nTITLE: Obtaining Summarized Sandbox Report in Terraform HCL\nDESCRIPTION: This snippet shows how to use the zia_sandbox_report data source to fetch a summary detail report for a file analyzed by Sandbox. It requires the MD5 hash of the file and sets the details parameter to 'summary'.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/data-sources/zia_sandbox_report.md#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"zia_sandbox_report\" \"this\" {\n  md5_hash = \"F69CA01D65E6C8F9E3540029E5F6AB92\"\n  details = \"summary\"\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing and Applying Terraform Configuration for ZIA IP Destination Groups\nDESCRIPTION: This snippet shows the commands to initialize the Terraform working directory, create an execution plan, and apply the configuration to create IP destination groups in ZIA.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/examples/zia_fw_filtering_ip_destination_groups/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nterraform init\nterraform plan -out theplan\nterraform apply theplan\n```\n\n----------------------------------------\n\nTITLE: Installing zscaler-terraformer via Homebrew (Cask Method) in Bash\nDESCRIPTION: Alternative commands for installing the `zscaler-terraformer` CLI tool on macOS using Homebrew as a cask. It first taps the Zscaler repository (`zscaler/tap`) and then uses `brew install --cask` to install the `zscaler-terraformer` cask.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/guides/resource-importer.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nbrew tap zscaler/tap\nbrew install --cask zscaler/tap/zscaler-terraformer\n\n```\n\n----------------------------------------\n\nTITLE: Importing ZIA DLP Web Rules by Name\nDESCRIPTION: Command to import a ZIA DLP web rule into Terraform using the rule name as the identifier.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/resources/zia_dlp_web_rules.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nterraform import zia_dlp_web_rules.example <rule_name>\n```\n\n----------------------------------------\n\nTITLE: Importing ZIA Forwarding Control Rule in Terraform Shell Script\nDESCRIPTION: This shell script snippet demonstrates how to import a ZIA forwarding control rule into Terraform using its rule ID or rule name. The command uses the `terraform import` function to integrate the specified rule into the Terraform state.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/resources/zia_forwarding_control_rule.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nterraform import zia_forwarding_control_rule.example <rule_id>\n```\n\nLANGUAGE: shell\nCODE:\n```\nterraform import zia_forwarding_control_rule.example <rule_name>\n```\n\n----------------------------------------\n\nTITLE: Running Terraform Commands for ZIA Network Application Groups\nDESCRIPTION: Commands to initialize, plan, and apply the Terraform configuration for creating network application groups in ZIA.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/examples/zia_fw_filtering_network_applications_groups/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nterraform init\nterraform plan -out theplan\nterraform apply theplan\n```\n\n----------------------------------------\n\nTITLE: Importing ZIA End User Notifications with Terraform\nDESCRIPTION: This shell command snippet provides an example of importing existing ZIA end user notifications into Terraform using the Zscaler-Terraformer tool. The only prerequisite is the installation of Terraform and the Zscaler-Terraformer tool.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/resources/zia_end_user_notification.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nterraform import zia_end_user_notification.this \"enduser_notification\"\n```\n\n----------------------------------------\n\nTITLE: Initializing ZIA Department Management with HCL\nDESCRIPTION: This snippet fetches information for the 'Finance' department using the zia_department_management data source in HCL. Prerequisites include setting up Zscaler Internet Access with appropriate credentials. The example highlights using the 'name' parameter to specify the department, retrieving details such as department ID, IdP ID, and additional comments.\n\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/data-sources/zia_user_management_department.md#2025-04-22_snippet_1\n\nLANGUAGE: HCL\nCODE:\n```\n# ZIA User Department Data Source\ndata \"zia_department_management\" \"finance\" {\n name = \"Finance\"\n}\n```\n\n----------------------------------------\n\nTITLE: Destroying ZIA Admin User Account Resources\nDESCRIPTION: Command to remove all resources created by the Terraform configuration when they are no longer needed.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/examples/zia_admin_user/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nterraform destroy\n```\n\n----------------------------------------\n\nTITLE: Creating Network Application Group in ZIA Firewall\nDESCRIPTION: Demonstrates how to create a network application group in ZIA Cloud Firewall. The group can include multiple network applications like LDAP, LDAPS, and SRVLOC, and can be associated with firewall filtering rules.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/resources/zia_firewall_filtering_network_application_groups.md#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n# Add applications to a network application group\nresource \"zia_firewall_filtering_network_application_groups\" \"example\" {\n  name        = \"Example\"\n  description = \"Example\"\n  network_applications = [ \"LDAP\", \"LDAPS\", \"SRVLOC\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Submitting Raw Files to Zscaler Sandbox using Terraform\nDESCRIPTION: Example configuration for submitting raw EXE files to Zscaler Sandbox for analysis. Uses a local variable to define file paths and implements force submission.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/resources/zia_sandbox_file_submission.md#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nlocals {\n  files = toset([\n    \"zs-test-pe-file.exe\"\n  ])\n}\n\nresource \"zia_sandbox_file_submission\" \"this\" {\n  for_each = local.files\n  file_path     = each.key\n  submission_method = \"submit\"\n  force = true\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Terraform Workflow for ZIA GRE Tunnel Creation\nDESCRIPTION: Commands to initialize Terraform, plan the deployment, and apply the configuration for creating an unnumbered GRE Tunnel in ZIA. This process uses Terraform to interact with the ZIA API for GRE Tunnel resource management.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/examples/zia_traffic_forwarding_gre_tunnels_unnumbered/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nterraform init\nterraform plan -out theplan\nterraform apply theplan\n```\n\n----------------------------------------\n\nTITLE: Running Terraform to Create ZIA Firewall Rules\nDESCRIPTION: Commands to initialize Terraform, create an execution plan, and apply the configuration to create firewall rules in ZIA portal.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/examples/zia_firewall_filtering_rule/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nterraform init\nterraform plan -out theplan\nterraform apply theplan\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Configuration for ZIA Sandbox\nDESCRIPTION: New environment variables required for authenticating to the Zscaler Sandbox service, replacing deprecated variables. Uses sandboxToken from ZSCALER_SANDBOX_TOKEN and sandboxCloud from ZSCALER_SANDBOX_CLOUD.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n# New environment variables\nsandboxToken  = \"${ZSCALER_SANDBOX_TOKEN}\"\nsandboxCloud  = \"${ZSCALER_SANDBOX_CLOUD}\"\n\n# Deprecated variables\n# ZIA_SANDBOX_TOKEN\n# ZIA_CLOUD\n```\n\n----------------------------------------\n\nTITLE: Destroying ZIA Location Management Lite Resources\nDESCRIPTION: Command to destroy the resources created by the Terraform configuration. This is useful for cleaning up after testing or when the resources are no longer needed.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/examples/zia_location_lite/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nterraform destroy\n```\n\n----------------------------------------\n\nTITLE: Creating ZPA Forwarding Control Rule in ZIA\nDESCRIPTION: Creates a forwarding control rule using the ZPA method, requiring integration with ZPA provider and configuration of server groups and application segments.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/resources/zia_forwarding_control_rule.md#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n# ZPA Server Group\ndata \"zpa_server_group\" \"this\" {\n  name = \"Server_Group_IP_Source_Anchoring\"\n}\n\n# ZPA Application Segment\ndata \"zpa_application_segment\" \"this\" {\n  name = \"App_Segment_IP_Source_Anchoring\"\n}\n\nresource \"zia_forwarding_control_zpa_gateway\" \"this\" {\n    name = \"ZPA_GW01\"\n    description = \"ZPA_GW01\"\n    type = \"ZPA\"\n    zpa_server_group {\n      external_id = data.zpa_server_group.this.id\n      name = data.zpa_server_group.this.id\n    }\n    zpa_app_segments {\n        external_id = data.zpa_application_segment.this.id\n        name = data.zpa_application_segment.this.name\n    }\n}\n\nresource \"zia_forwarding_control_rule\" \"this\" {\n  name           = \"ZPA_FORWARDING_RULE\"\n  description    = \"ZPA_FORWARDING_RULE\"\n  order          = 1\n  rank           = 7\n  state          = \"ENABLED\"\n  type           = \"FORWARDING\"\n  forward_method = \"ZPA\"\n  zpa_gateway {\n    id   = zia_forwarding_control_zpa_gateway.this.id\n    name = zia_forwarding_control_zpa_gateway.this.name\n  }\n  zpa_app_segments {\n    name        = data.zpa_application_segment.this.name\n    external_id = data.zpa_application_segment.this.id\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ZIA Blacklist URLs for Advanced Threat Protection\nDESCRIPTION: Shows how to add URLs to the ZIA blacklist for Advanced Threat Protection. This configuration explicitly blocks access to specified URLs.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/resources/zia_security_policy_settings.md#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"zia_security_settings\" \"this\" {\n  blacklist_urls = [\n    \"resource1.acme.net\",\n    \"resource2.acme.net\",\n    \"resource3.acme.net\",\n    \"resource4.acme.net\",\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Location IP Address Format Example\nDESCRIPTION: Example showing supported IP address formats for the zia_location_management resource\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n10.0.0.0-10.0.0.255\n10.0.0.1\n```\n\n----------------------------------------\n\nTITLE: Running Terraform for ZIA Location Management Lite\nDESCRIPTION: Commands to initialize, plan, and apply the Terraform configuration for retrieving ZIA location management lite information. This snippet shows the standard Terraform workflow for applying changes.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/examples/zia_location_lite/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nterraform init\nterraform plan -out theplan\nterraform apply theplan\n```\n\n----------------------------------------\n\nTITLE: Markdown Release Notes Format\nDESCRIPTION: Example of how version release notes are formatted, including version number, release date, notes, enhancements and fixes sections\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/CHANGELOG.md#2025-04-22_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n## 2.5.4 (May, 25 2023)\n\n### Notes\n\n- Release date: **(May, 25 2023)**\n- Supported Terraform version: **v1.x**\n\n### Fixes\n\n- [PR #234](https://github.com/zscaler/terraform-provider-zia/pull/234) Fix expand functions to ensure correct API response processing across all resource rule creation.\n```\n\n----------------------------------------\n\nTITLE: Destroying ZIA GRE Tunnel Resources with Terraform\nDESCRIPTION: Command to remove and clean up the unnumbered GRE Tunnel resources created in ZIA using Terraform. This ensures all provisioned resources are properly deleted.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/examples/zia_traffic_forwarding_gre_tunnels_unnumbered/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nterraform destroy\n```\n\n----------------------------------------\n\nTITLE: Building and Installing ZIA Activation CLI Binary\nDESCRIPTION: This snippet showcases the command to build the activation CLI binary using `make` and installs it to the specified system path. Prior use of `sudo` may be required for successful installation of the `ziaActivator` CLI.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/guides/zia-activator-overview.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ make build13 && sudo make ziaActivator\n```\n\n----------------------------------------\n\nTITLE: Importing ZIA GRE Tunnel by Tunnel ID using Terraform CLI\nDESCRIPTION: This shell command demonstrates how to import an existing ZIA GRE tunnel configuration into Terraform state management using the tunnel's unique ID. Replace `<tunnel_id>` with the actual ID of the GRE tunnel.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/resources/zia_traffic_forwarding_gre_tunnel.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nterraform import zia_traffic_forwarding_gre_tunnel.example <tunnel_id>\n```\n\n----------------------------------------\n\nTITLE: User-Agent Header Format\nDESCRIPTION: Example showing the enhanced User-Agent header format used by the provider for troubleshooting\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/CHANGELOG.md#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n(darwin arm64) Terraform/1.5.5 Version/2.6.3\n```\n\n----------------------------------------\n\nTITLE: Destroying ZIA IPSec VPN Credentials\nDESCRIPTION: Command for removing the IPSec VPN credentials created by Terraform from the ZIA environment.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/examples/zia_traffic_forwarding_vpn_credentials/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nterraform destroy\n```\n\n----------------------------------------\n\nTITLE: Configuring ZIA Terraform Provider\nDESCRIPTION: Example configuration block showing how to specify the ZIA provider source and version in Terraform\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/CHANGELOG.md#2025-04-22_snippet_6\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  required_providers {\n    zia = {\n      source = \"zscaler/zia\"\n      version = \"2.0.3\"\n    }\n  }\n}\nprovider \"zia\" {}\n```\n\n----------------------------------------\n\nTITLE: Destroying ZIA URL Filtering Policies with Terraform\nDESCRIPTION: This command destroys all resources created by the Terraform configuration, removing the URL Filtering Policies from ZIA.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/examples/zia_url_filtering_policies/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nterraform destroy\n```\n\n----------------------------------------\n\nTITLE: Setting ZIA Legacy Auth Environment Variables in Shell\nDESCRIPTION: Demonstrates setting required environment variables for the Zscaler ZIA Terraform provider using legacy authentication methods (username/password/API key) in a Unix-like shell environment (Bash, Zsh, etc.). These variables provide credentials and cloud information to the provider. The `ZSCALER_USE_LEGACY_CLIENT=true` variable specifically signals the provider to use this authentication method before running commands like `terraform plan`.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/index.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ export ZIA_USERNAME=\"[ZIA_USERNAME]\"\n$ export ZIA_PASSWORD=\"[ZIA_PASSWORD]\"\n$ export ZIA_API_KEY=\"[ZIA_API_KEY]\"\n$ export ZIA_CLOUD=\"[ZIA_CLOUD]\"\n$ export ZSCALER_USE_LEGACY_CLIENT=true\n$ terraform plan\n```\n\n----------------------------------------\n\nTITLE: Querying SSL Inspection Rule by ID using Terraform (HCL)\nDESCRIPTION: This snippet demonstrates retrieving a specific SSL inspection rule from the Zscaler Internet Access platform by its unique identifier using the `zia_ssl_inspection_rules` Terraform data source. The `id` argument is used to target the SSL inspection rule. As with other Terraform data sources, appropriate provider configuration and permissions are required. The snippet expects an `id` parameter and returns all attributes associated with the identified rule, which can be used in subsequent configurations.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/data-sources/zia_ssl_inspection_rules.md#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n# ZIA SSL Inspection by ID\\ndata \"zia_ssl_inspection_rules\" \"this\" {\\n    id = \"12365478\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Cloud App Control Rule Types and Actions in Markdown\nDESCRIPTION: This markdown table shows various application categories (e.g., SOCIAL_NETWORKING, SYSTEM_AND_DEVELOPMENT, WEBMAIL) and their associated rule actions in Cloud App Control policies.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/resources/zia_cloud_app_control_rule.md#2025-04-22_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n|     `SOCIAL_NETWORKING`              | `BLOCK_SOCIAL_NETWORKING_UPLOAD`, `BLOCK_SOCIAL_NETWORKING_VIEW`,       |\n|     `SOCIAL_NETWORKING`              | `CAUTION_SOCIAL_NETWORKING_POST`, `CAUTION_SOCIAL_NETWORKING_VIEW`,       |\n|     `SOCIAL_NETWORKING`              | `ISOLATE_SOCIAL_NETWORKING_VIEW`,        |\n|-------------------------|-------------------------------------------------|\n|     `SYSTEM_AND_DEVELOPMENT`         | `BLOCK_SYSTEM_DEVELOPMENT_APPS`, `ALLOW_SYSTEM_DEVELOPMENT_APPS`,         |\n|     `SYSTEM_AND_DEVELOPMENT`         | `ISOLATE_SYSTEM_DEVELOPMENT_APPS`, `BLOCK_SYSTEM_DEVELOPMENT_UPLOAD`,       |\n|     `SYSTEM_AND_DEVELOPMENT`         | `ALLOW_SYSTEM_DEVELOPMENT_UPLOAD`,`CAUTION_SYSTEM_DEVELOPMENT_APPS`,        |\n|     `SYSTEM_AND_DEVELOPMENT`         | `BLOCK_SYSTEM_DEVELOPMENT_CREATE`, `ALLOW_SYSTEM_DEVELOPMENT_CREATE`,      |\n|     `SYSTEM_AND_DEVELOPMENT`         | `BLOCK_SYSTEM_DEVELOPMENT_EDIT`, `ALLOW_SYSTEM_DEVELOPMENT_EDIT`,      |\n|     `SYSTEM_AND_DEVELOPMENT`         | `BLOCK_SYSTEM_DEVELOPMENT_SHARE`, `ALLOW_SYSTEM_DEVELOPMENT_SHARE`,         |\n|     `SYSTEM_AND_DEVELOPMENT`         | `BLOCK_SYSTEM_DEVELOPMENT_COMMENT`, `ALLOW_SYSTEM_DEVELOPMENT_COMMENT`,         |\n|     `SYSTEM_AND_DEVELOPMENT`         | `BLOCK_SYSTEM_DEVELOPMENT_REACTION`,`ALLOW_SYSTEM_DEVELOPMENT_REACTION`         |\n|--------------------------|-------------------------------------------------|\n|     `WEBMAIL`                        | `ALLOW_WEBMAIL_VIEW`, `ALLOW_WEBMAIL_ATTACHMENT_SEND`                   |\n|     `WEBMAIL`                        | `ALLOW_WEBMAIL_SEND`, `CAUTION_WEBMAIL_VIEW`                    |\n|     `WEBMAIL`                        | `BLOCK_WEBMAIL_VIEW`, `BLOCK_WEBMAIL_ATTACHMENT_SEND`                            |\n|     `WEBMAIL`                        | `BLOCK_WEBMAIL_SEND`, `ISOLATE_WEBMAIL_VIEW`                          |\n```\n\n----------------------------------------\n\nTITLE: Destroying ZIA Time Windows Terraform Configuration\nDESCRIPTION: Command to tear down and remove the Terraform-managed resources. This completely removes all resources created by the Terraform configuration.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/examples/zia_fw_filtering_time_windows/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nterraform destroy\n```\n\n----------------------------------------\n\nTITLE: Initializing and Applying Terraform Configuration for ZIA Location Management\nDESCRIPTION: These commands initialize the Terraform working directory, create an execution plan, and apply the changes to create a location management resource in ZIA. The commands should be run from within the example directory.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/examples/zia_location_management/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nterraform init\nterraform plan -out theplan\nterraform apply theplan\n```\n\n----------------------------------------\n\nTITLE: Using New ZIA Data Sources\nDESCRIPTION: Example of using the new data sources added in version 2.4.4 for firewall filtering application services and groups.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/guides/release-notes.md#2025-04-22_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"zia_firewall_filtering_application_services\" \"example\" {}\n\ndata \"zia_firewall_filtering_application_services_group\" \"example\" {}\n```\n\n----------------------------------------\n\nTITLE: Invalid Provider Cloud Name Error Message (Shell)\nDESCRIPTION: This shell error output illustrates an error caused by specifying an invalid value for the 'zia_cloud' argument when configuring the provider. The message enumerates acceptable values and marks the input location where the error was detected. This aids admins in correcting the provider's configuration in their Terraform code.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/guides/troubleshooting.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n│ Error: expected zia_cloud to be one of [\"zscaler\" \"zscalerone\" \"zscalertwo\" \"zscalerthree\" \"zscloud\" \"zscalerbeta\" \"zscalergov\" \"zscalerten\" \"zspreview\"], got\n│\n│   with provider[\"zscaler.com/zia/zia\"],\n│   on <input-prompt> line 1:\n│   (source code not available)\n│\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving Custom Count of GRE Internal IP Ranges in Terraform\nDESCRIPTION: Retrieves a specified number of available internal IP ranges for GRE tunnel configuration using the required_count parameter.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/data-sources/zia_traffic_forwarding_gre_internal_ip_range_list.md#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"zia_gre_internal_ip_range_list\" \"example\"{\n  required_count = 20\n}\n```\n\n----------------------------------------\n\nTITLE: Presenting Cloud App Control Rule Types and Tenant Profile Support in Markdown\nDESCRIPTION: This markdown table displays various cloud applications categorized by type (e.g., BUSINESS_PRODUCTIVITY, ENTERPRISE_COLLABORATION) and indicates their support for tenant profiles in Cloud App Control rules.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/resources/zia_cloud_app_control_rule.md#2025-04-22_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n|               Type               |         Applications          | tenancy_profile_ids |\n|:--------------------------------:|:-----------------------------:|:-------------------:|\n|----------------------------------|-----------------------------|---------------------|\n| `BUSINESS_PRODUCTIVITY`          | `\"GOOGLEANALYTICS\"`           |          ✅         |\n|----------------------------------|-----------------------------|---------------------|\n| `ENTERPRISE_COLLABORATION`       | `\"GOOGLECALENDAR\"`            |          ✅         |\n| `ENTERPRISE_COLLABORATION`       | `\"GOOGLEKEEP\"`                |          ✅         |\n| `ENTERPRISE_COLLABORATION`       | `\"GOOGLEMEET\"`                |          ✅         |\n| `ENTERPRISE_COLLABORATION`       | `\"GOOGLESITES\"`               |          ✅         |\n| `ENTERPRISE_COLLABORATION`       | `\"WEBEX\"`                     |          ✅         |\n| `ENTERPRISE_COLLABORATION`       | `\"SLACK\"`                     |          ✅         |\n| `ENTERPRISE_COLLABORATION`       | `\"WEBEX_TEAMS\"`               |          ✅         |\n| `ENTERPRISE_COLLABORATION`       | `\"ZOOM\"`                      |          ✅         |\n|----------------------------------|-----------------------------|---------------------|\n| `FILE_SHARE`                     | `\"DROPBOX\"`                   |          ✅         |\n| `FILE_SHARE`                     | `\"GDRIVE\"`                    |          ✅         |\n| `FILE_SHARE`                     | `\"GPHOTOS\"`                   |          ✅         |\n|----------------------------------|-----------------------------|---------------------|\n| `HOSTING_PROVIDER`               | `\"GCLOUDCOMPUTE\"`             |          ✅         |\n| `HOSTING_PROVIDER`               | `\"AWS\"`                       |          ✅         |\n| `HOSTING_PROVIDER`               | `\"IBMSMARTCLOUD\"`             |          ✅         |\n| `HOSTING_PROVIDER`               | `\"GAPPENGINE\"`                |          ✅         |\n| `HOSTING_PROVIDER`               | `\"GOOGLE_CLOUD_PLATFORM\"`     |          ✅         |\n|----------------------------------|-----------------------------|---------------------|\n| `IT_SERVICES`                    | `\"MSLOGINSERVICES\"`           |          ✅         |\n| `IT_SERVICES`                    | `\"GOOGLOGINSERVICE\"`          |          ✅         |\n| `IT_SERVICES`                    | `\"WEBEX_LOGIN_SERVICES\"`      |          ✅         |\n| `IT_SERVICES`                    | `\"ZOHO_LOGIN_SERVICES\"`       |          ✅         |\n|----------------------------------|-----------------------------|---------------------|\n| `SOCIAL_NETWORKING`              | `\"GOOGLE_GROUPS\"`             |          ✅         |\n| `SOCIAL_NETWORKING`              | `\"GOOGLE_PLUS\"`               |          ✅         |\n|----------------------------------|-----------------------------|---------------------|\n| `STREAMING_MEDIA`                | `\"YOUTUBE\"`                   |          ✅         |\n| `STREAMING_MEDIA`                | `\"GOOGLE_STREAMING\"`          |          ✅         |\n|----------------------------------|-----------------------------|---------------------|\n| `SYSTEM_AND_DEVELOPMENT`         | `\"GOOGLE_DEVELOPERS\"`         |          ✅         |\n| `SYSTEM_AND_DEVELOPMENT`         | `\"GOOGLEAPPMAKER\"`            |          ✅         |\n|----------------------------------|-----------------------------|---------------------|\n| `WEBMAIL`                        | `\"GOOGLE_WEBMAIL\"`            |          ✅         |\n|----------------------------------|-----------------------------|---------------------|\n```\n\n----------------------------------------\n\nTITLE: Destroying ZIA Custom URL Categories Terraform Configuration\nDESCRIPTION: This command destroys the Terraform-managed infrastructure, removing the custom URL categories created in ZIA. It's used when you want to clean up or remove the resources.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/examples/zia_url_categories/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nterraform destroy\n```\n\n----------------------------------------\n\nTITLE: Running Terraform ZIA Network Service Groups Example\nDESCRIPTION: Commands to initialize, plan, and apply the Terraform configuration for creating network service groups in ZIA.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/examples/zia_fw_filtering_network_services_groups/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nterraform init\nterraform plan -out theplan\nterraform apply theplan\n```\n\n----------------------------------------\n\nTITLE: Retrieving DNS Applications in Terraform HCL\nDESCRIPTION: Example of using the zia_cloud_applications data source to retrieve DNS over HTTPS applications for use in DNS policies.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/data-sources/zia_firewall_dns_rules.md#2025-04-22_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"zia_cloud_applications\" \"this\" {\n  policy_type = \"cloud_application_policy\"\n  app_class = [\"DNS_OVER_HTTPS\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Missing Provider Registry Block Error Message (Shell)\nDESCRIPTION: This snippet contains a shell-formatted Terraform error indicating that the required provider could not be found in the registry. The error suggests that the provider source was not properly defined in the Terraform configuration, requiring users to add a 'required_providers' block. Useful for diagnosing provider installation failures.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/guides/troubleshooting.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nError while installing hashicorp/zia: provider registry\nregistry.terraform.io does not have a provider named\nregistry.terraform.io/hashicorp/zia\n```\n\n----------------------------------------\n\nTITLE: Validating URL Filtering Rule Protocols in Terraform\nDESCRIPTION: Validation function in the zia_url_filtering_rules resource to check supported protocol values.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: HCL\nCODE:\n```\nresource \"zia_url_filtering_rules\" \"example\" {\n  // ...\n  protocols = [\"HTTP_RULE\", \"HTTPS_RULE\"]\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Destroying Terraform-managed ZIA Location Management Resources\nDESCRIPTION: This command destroys all resources created by the Terraform configuration for the ZIA location management example. It should be used when you want to remove the resources from your ZIA environment.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/examples/zia_location_management/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nterraform destroy\n```\n\n----------------------------------------\n\nTITLE: Running Terraform Commands for ZIA Network Application ID Retrieval\nDESCRIPTION: Commands to initialize Terraform, plan the deployment, and apply the configuration for retrieving network application IDs in ZIA. This sequence prepares the environment, creates an execution plan, and implements the defined infrastructure.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/examples/zia_fw_filtering_network_applications/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nterraform init\nterraform plan -out theplan\nterraform apply theplan\n```\n\n----------------------------------------\n\nTITLE: Retrieving Specific SSL Policy Application\nDESCRIPTION: Shows how to retrieve a specific application for SSL policy by filtering on name and category.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/data-sources/zia_cloud_applications.md#2025-04-22_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"zia_cloud_applications\" \"this\" {\n  policy_type = \"cloud_application_ssl_policy\"\n  app_class = [\"SOCIAL_NETWORKING\"]\n  app_name = \"Nebenan\"\n}\n\noutput \"zia_cloud_applications\" {\n    value = data.zia_cloud_applications.this\n}\n```\n\n----------------------------------------\n\nTITLE: Destroying ZIA GRE Tunnel Resources\nDESCRIPTION: Command to destroy all the resources created by the Terraform configuration. This removes the GRE Tunnel from the ZIA portal.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/examples/zia_traffic_forwarding_gre_tunnels_numbered/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nterraform destroy\n```\n\n----------------------------------------\n\nTITLE: Setting ZIA_ACTIVATION Environment Variable for Activation\nDESCRIPTION: Optional environment variable to control ZIA configuration activation. When set to true, activation will occur for supported resources.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nexport ZIA_ACTIVATION=true\n```\n\n----------------------------------------\n\nTITLE: Running Terraform for ZIA IPSec VPN Credentials\nDESCRIPTION: Commands for initializing, planning, and applying the Terraform configuration to create IPSec VPN credentials in ZIA.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/examples/zia_traffic_forwarding_vpn_credentials/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nterraform init\nterraform plan -out theplan\nterraform apply theplan\n```\n\n----------------------------------------\n\nTITLE: Retrieving File Type Control Rule by ID in Terraform\nDESCRIPTION: Example of retrieving a File Type Control rule using its numeric ID as an identifier in Terraform configuration.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/data-sources/zia_file_type_control_rules.md#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"zia_file_type_control_rules\" \"this\" {\n    name = \"12134558\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Parallelism for ZIA Provider Resources\nDESCRIPTION: Example of setting the parallelism value to limit concurrent operations when configuring certain ZIA resources, to prevent performance impacts.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/guides/release-notes.md#2025-04-22_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nterraform apply -parallelism=1\n```\n\n----------------------------------------\n\nTITLE: Running Terraform for ZIA Time Windows Configuration\nDESCRIPTION: Commands to initialize, plan, and apply the Terraform configuration for retrieving ZIA Time Windows. This executes the Terraform workflow to interact with the ZIA API for Firewall Time Windows.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/examples/zia_fw_filtering_time_windows/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nterraform init\nterraform plan -out theplan\nterraform apply theplan\n```\n\n----------------------------------------\n\nTITLE: Importing Network Service Groups in ZIA Firewall\nDESCRIPTION: Shows how to import existing network service groups into Terraform using either the group ID or group name as the import identifier.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/resources/zia_firewall_filtering_network_service_groups.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import firewall_filtering_network_service_groups.example <group_id>\n```\n\nLANGUAGE: shell\nCODE:\n```\nterraform import firewall_filtering_network_service_groups.example <group_name>\n```\n\n----------------------------------------\n\nTITLE: Initializing and Applying Terraform for ZIA GRE Tunnel\nDESCRIPTION: Commands to initialize Terraform, create a plan, and apply the configuration for creating a GRE Tunnel in ZIA. These commands should be executed from within the example directory after configuring the ZIA provider.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/examples/zia_traffic_forwarding_gre_tunnels_numbered/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nterraform init\nterraform plan -out theplan\nterraform apply theplan\n```\n\n----------------------------------------\n\nTITLE: Destroying Terraform-Managed ZIA Resources\nDESCRIPTION: Command to remove all resources created by Terraform in the ZIA environment. This ensures clean removal of any configurations applied through the previous commands.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/examples/zia_fw_filtering_network_applications/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nterraform destroy\n```\n\n----------------------------------------\n\nTITLE: Formatting Command-Line Examples in Markdown Documentation - Markdown\nDESCRIPTION: This snippet shows how to present shell commands and output within Markdown, using code fencing and inline backticks for clarity. It is used for import commands, User-Agent string examples, or to reference shell environment variables needed for provider authentication. There are no code dependencies or execution logic; inputs are string literals relevant to the operational context. Outputs are visually distinct code blocks or inline code in rendered Markdown.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/guides/release-notes.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n`terraform import zia_firewall_filtering_network_service.this \\\"DHCP\\\"`\n```\n\nLANGUAGE: markdown\nCODE:\n```\n``User-Agent: (darwin arm64) Terraform/1.5.5 Version/2.6.3``\n```\n\n----------------------------------------\n\nTITLE: Destroying ZIA Firewall Rules with Terraform\nDESCRIPTION: Command to remove all resources created by the Terraform configuration in the ZIA portal.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/examples/zia_firewall_filtering_rule/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nterraform destroy\n```\n\n----------------------------------------\n\nTITLE: Destroying ZIA Network Application Groups Terraform Resources\nDESCRIPTION: Command to destroy all resources created by the Terraform configuration for ZIA network application groups.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/examples/zia_fw_filtering_network_applications_groups/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nterraform destroy\n```\n\n----------------------------------------\n\nTITLE: Destroying ZIA Network Services Resources with Terraform\nDESCRIPTION: Command to remove all resources created by this Terraform configuration from the ZIA environment.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/examples/zia_fw_filtering_network_services/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nterraform destroy\n```\n\n----------------------------------------\n\nTITLE: Destroying Terraform-managed ZIA Resources\nDESCRIPTION: This command removes all resources managed by Terraform in the current configuration, effectively cleaning up any changes made by the previous apply command.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/examples/zia_traffic_forwarding_gre_tunnel_info/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nterraform destroy\n```\n\n----------------------------------------\n\nTITLE: Importing ZIA DLP Dictionary Resource via Terraform CLI - Shell\nDESCRIPTION: Illustrates how to import an existing ZIA DLP dictionary into Terraform state using the terraform import command. The <dictionary_id> or <dictionary_name> identifiers enable users to manage pre-existing dictionaries without redefining them. Requires Terraform CLI and proper provider configuration. Outputs update Terraform state with the imported resource, but do not modify the remote object.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/resources/zia_dlp_dictionaries.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nterraform import zia_dlp_dictionaries.example <dictionary_id>\n```\n\nLANGUAGE: shell\nCODE:\n```\nterraform import zia_dlp_dictionaries.example <dictionary_name>\n```\n\n----------------------------------------\n\nTITLE: Configuring the Zscaler Internet Access Terraform Provider\nDESCRIPTION: Example configuration block showing how to properly declare the Zscaler Internet Access (ZIA) provider in Terraform configuration files. This specifies the source as 'zscaler/zia' and version '2.0.3'.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/docs/guides/release-notes.md#2025-04-22_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  required_providers {\n    zia = {\n      source = \"zscaler/zia\"\n      version = \"2.0.3\"\n    }\n  }\n}\nprovider \"zia\" {}\n```\n\n----------------------------------------\n\nTITLE: Running Provider Tests\nDESCRIPTION: Commands for running the provider's test suite, including unit tests and acceptance tests.\nSOURCE: https://github.com/zscaler/terraform-provider-zia/blob/master/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ make test\n$ make testacc\n```"
  }
]