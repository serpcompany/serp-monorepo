[
  {
    "owner": "marimo-team",
    "repo": "marimo",
    "content": "TITLE: Integrating marimo with FastAPI in Python\nDESCRIPTION: Demonstrates how to create a marimo ASGI app, integrate it with FastAPI, add middleware, and run the server. It includes setting up multiple marimo apps with different paths.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/deploying/programmatically.md#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Annotated, Callable, Coroutine\nfrom fastapi.responses import HTMLResponse, RedirectResponse\nimport marimo\nfrom fastapi import FastAPI, Form, Request, Response\n\n\n# Create a marimo asgi app\nserver = (\n    marimo.create_asgi_app()\n    .with_app(path=\"\", root=\"./pages/index.py\")\n    .with_app(path=\"/dashboard\", root=\"./pages/dashboard.py\")\n    .with_app(path=\"/sales\", root=\"./pages/sales.py\")\n)\n\n# Create a FastAPI app\napp = FastAPI()\n\napp.add_middleware(auth_middleware)\napp.add_route(\"/login\", my_login_route, methods=[\"POST\"])\n\napp.mount(\"/\", server.build())\n\n# Run the server\nif __name__ == \"__main__\":\n    import uvicorn\n\n    uvicorn.run(app, host=\"localhost\", port=8000)\n```\n\n----------------------------------------\n\nTITLE: Installing marimo with pip (Minimal Dependencies)\nDESCRIPTION: Command to install marimo using pip with minimal dependencies. This is the standard installation method for most users.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/getting_started/installation.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install marimo\n```\n\n----------------------------------------\n\nTITLE: Defining Variables in Setup Cell - Python\nDESCRIPTION: Example showing how to properly define variables directly within a setup cell rather than referencing external definitions.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/understanding_errors/setup.md#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimage = \"image.png\"\nimage\n```\n\n----------------------------------------\n\nTITLE: Executing marimo notebooks as Python scripts\nDESCRIPTION: Command to execute a marimo notebook as a regular Python script from the command line.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/README.md#2025-04-19_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npython your_notebook.py\n```\n\n----------------------------------------\n\nTITLE: Creating Dynamic UI Elements and Implementing Stack Layouts in Marimo\nDESCRIPTION: This code creates a UI demonstration of Marimo's stack layout capabilities. It defines functions to create box elements, UI controls for layout properties, and implements both horizontal and vertical stacks with configurable styling options.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/api/layouts/stacks.md#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@app.cell\ndef __():\n    def create_box(num=1):\n        box_size = 30 + num * 10\n        return mo.Html(\n            f\"<div style='min-width: {box_size}px; min-height: {box_size}px; background-color: orange; text-align: center; line-height: {box_size}px'>{str(num)}</div>\"\n        )\n\n\n\n\n    boxes = [create_box(i) for i in range(1, 5)]\n    return\n\n@app.cell\ndef __():\n    justify = mo.ui.dropdown(\n        [\"start\", \"center\", \"end\", \"space-between\", \"space-around\"],\n        value=\"space-between\",\n        label=\"justify\",\n    )\n    align = mo.ui.dropdown(\n        [\"start\", \"center\", \"end\", \"stretch\"], value=\"center\", label=\"align\"\n    )\n    gap = mo.ui.number(start=0, step=0.25, stop=2, value=0.25, label=\"gap\")\n    wrap = mo.ui.checkbox(label=\"wrap\")\n    return\n\n@app.cell\ndef __():\n    horizontal = mo.hstack(\n        boxes,\n        align=align.value,\n        justify=justify.value,\n        gap=gap.value,\n        wrap=wrap.value,\n    )\n    vertical = mo.vstack(\n        boxes,\n        align=align.value,\n        gap=gap.value,\n    )\n\n    mo.vstack(\n        [\n            mo.hstack([justify, align, gap], justify=\"center\"),\n            horizontal,\n            mo.md(\"-----------------------------\"),\n            vertical,\n        ],\n        align=\"stretch\",\n        gap=1,\n    )\n    return\n```\n\n----------------------------------------\n\nTITLE: Anthropic Claude Chat Integration in Python\nDESCRIPTION: Demonstrates integration with Anthropic's Claude models. This example shows how to configure the chat UI with a Claude model, system message, and API key.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/api/inputs/chat.md#2025-04-19_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport marimo as mo\n\nmo.ui.chat(\n    mo.ai.llm.anthropic(\n        \"claude-3-5-sonnet-20240620\",\n        system_message=\"You are a helpful assistant.\",\n        api_key=\"sk-ant-...\",\n    ),\n    show_configuration_controls=True\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Reactive Altair Chart with Cars Dataset\nDESCRIPTION: Demonstrates setting up a reactive scatter plot using Altair in marimo, including data fetching and visualization. The example shows how to create an interactive point chart displaying car statistics with color-coded origins.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/api/plotting.md#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@app.cell\nasync def __():\n    import pandas as pd\n    import pyodide\n    import micropip\n    import json\n    await micropip.install('altair')\n    import altair as alt\n    return\n\n@app.cell\ndef __():\n    cars = pd.DataFrame(json.loads(\n      pyodide.http.open_url('https://vega.github.io/vega-datasets/data/cars.json').read()\n    ))\n\n    chart = mo.ui.altair_chart(alt.Chart(cars).mark_point().encode(\n        x='Horsepower',\n        y='Miles_per_Gallon',\n        color='Origin'\n    ))\n    return\n\n@app.cell\ndef __():\n    mo.vstack([chart, mo.ui.table(chart.value)])\n    return\n```\n\n----------------------------------------\n\nTITLE: Loading and Displaying a Dataframe with Marimo's UI Element\nDESCRIPTION: This code demonstrates how to load a CSV file using pyodide's HTTP functionality and display it using Marimo's dataframe UI element. The element allows interactive manipulation of the dataframe with visual tools.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/api/inputs/dataframe.md#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@app.cell\ndef __():\n    import pandas as pd\n    import pyodide\n    csv = pyodide.http.open_url(\"https://raw.githubusercontent.com/mwaskom/seaborn-data/master/iris.csv\")\n    df = pd.read_csv(csv)\n    mo.ui.dataframe(df)\n    return\n```\n\n----------------------------------------\n\nTITLE: Connecting to custom databases in marimo\nDESCRIPTION: Examples of creating database connections using SQLAlchemy, SQLModel, and DuckDB in marimo for use in SQL cells.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/working_with_data/sql.md#2025-04-19_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport sqlalchemy\nimport sqlmodel\nimport duckdb\n\n# Create an in-memory SQLite database with SQLAlchemy\nsqlite_engine = sqlachemy.create_engine(\"sqlite:///:memory:\")\n# Create a Postgres database with SQLModel\npostgres_engine = sqlmodel.create_engine(\"postgresql://username:password@server:port/database\")\n# Create a DuckDB connection\nduckdb_conn = duckdb.connect(\"file.db\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Todo List with State in Python\nDESCRIPTION: Creates a complete todo list application using mo.state to manage tasks, including adding, marking complete, and clearing completed tasks.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/state.md#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport marimo as mo\nfrom dataclasses import dataclass\n\n@dataclass\nclass Task:\n    name: str\n    done: bool = False\n\n\nget_tasks, set_tasks = mo.state([])\ntask_added, set_task_added = mo.state(False)\n```\n\n----------------------------------------\n\nTITLE: Creating Data Explorer with Iris Dataset in Python\nDESCRIPTION: Implements a data explorer UI using marimo's data_explorer component. The code loads the iris dataset from a remote CSV file using pyodide's HTTP capabilities and pandas, then displays it in an interactive data explorer interface.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/api/inputs/data_explorer.md#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@app.cell\ndef __():\n    import pandas as pd\n    import pyodide\n    csv = pyodide.http.open_url(\"https://raw.githubusercontent.com/mwaskom/seaborn-data/master/iris.csv\")\n    df = pd.read_csv(csv)\n    mo.ui.data_explorer(df)\n    return\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Counter Widget with AnyWidget (Python, JavaScript, CSS)\nDESCRIPTION: Illustrates how to create a custom AnyWidget for a counter button. Includes Python class definition, JavaScript rendering logic, and CSS styling. Demonstrates syncing state between Python and JavaScript.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/api/inputs/anywidget.md#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport anywidget\nimport traitlets\nimport marimo as mo\n\nclass CounterWidget(anywidget.AnyWidget):\n  # Widget front-end JavaScript code\n  _esm = \"\"\"\n    function render({ model, el }) {\n      let getCount = () => model.get(\"count\");\n      let button = document.createElement(\"button\");\n      button.innerHTML = `count is ${getCount()}`;\n      button.addEventListener(\"click\", () => {\n        model.set(\"count\", getCount() + 1);\n        model.save_changes();\n      });\n      model.on(\"change:count\", () => {\n        button.innerHTML = `count is ${getCount()}`;\n      });\n      el.appendChild(button);\n    }\n    export default { render };\n  \"\"\"\n  _css = \"\"\"\n    button {\n      padding: 5px !important;\n      border-radius: 5px !important;\n      background-color: #f0f0f0 !important;\n\n      &:hover {\n        background-color: lightblue !important;\n        color: white !important;\n      }\n    }\n  \"\"\"\n\n  # Stateful property that can be accessed by JavaScript & Python\n  count = traitlets.Int(0).tag(sync=True)\n\nwidget = mo.ui.anywidget(CounterWidget())\n\n\n# In another cell, you can access the widget's value\nwidget.value\n\n# You can also access the widget's specific properties\nwidget.count\n```\n\n----------------------------------------\n\nTITLE: Querying files and databases in marimo SQL\nDESCRIPTION: Examples of querying different data sources including S3 buckets, CSV files, and Parquet files using SQL in marimo.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/working_with_data/sql.md#2025-04-19_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\n-- or\nSELECT * FROM 's3://my-bucket/file.parquet';\n-- or\nSELECT * FROM read_csv('path/to/example.csv');\n-- or\nSELECT * FROM read_parquet('path/to/example.parquet');\n```\n\n----------------------------------------\n\nTITLE: Selectable Tables with Pandas\nDESCRIPTION: Shows how to create interactive, selectable tables using Pandas dataframes in Marimo.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/working_with_data/dataframes.md#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Cell 1 - display a dataframe\nimport marimo as mo\nimport pandas as pd\n\ndf = pd.DataFrame({\"a\": [1, 2, 3], \"b\": [4, 5, 6]})\ntable = mo.ui.table(df, selection=\"multi\")\ntable\n```\n\nLANGUAGE: python\nCODE:\n```\n# Cell 2 - display the selection\ntable.value\n```\n\n----------------------------------------\n\nTITLE: Creating File Upload Components with Marimo UI\nDESCRIPTION: This code creates two types of file upload components using Marimo UI and stacks them vertically. The first component is a button-style file uploader, and the second is an area-style file uploader that provides a larger drop area.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/api/inputs/file.md#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@app.cell\ndef __():\n    mo.vstack([mo.ui.file(kind=\"button\"), mo.ui.file(kind=\"area\")])\n    return\n```\n\n----------------------------------------\n\nTITLE: Displaying Slider with Its Current Value\nDESCRIPTION: Shows how to display a slider alongside its current value using horizontal stacking (hstack) and Markdown formatting. This creates a reactive UI that updates when the slider value changes.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/api/inputs/slider.md#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@app.cell\ndef __():\n    mo.hstack([slider, mo.md(f\"Has value: {slider.value}\")])\n    return\n```\n\n----------------------------------------\n\nTITLE: Listing marimo tutorials\nDESCRIPTION: Command to list all available marimo tutorials using the CLI.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/index.md#2025-04-19_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nmarimo tutorial --help\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Marimo Carousel with Mixed Content\nDESCRIPTION: Shows how to create a carousel component using marimo that displays multiple content types including markdown headings, plain text, and images. The carousel is constructed using mo.carousel() and can contain markdown elements, strings, and image references.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/api/layouts/carousel.md#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@app.cell\ndef __():\n    mo.carousel([\n        mo.md(\"# Introduction\"),\n        \"By the marimo team\",\n        mo.md(\"## What is marimo?\"),\n        mo.md(\"![marimo moss ball](https://marimo.io/logo.png)\"),\n        mo.md(\"## Questions?\"),\n    ])\n    return\n```\n\n----------------------------------------\n\nTITLE: Using Lazy Loading with Accordion Component in Marimo\nDESCRIPTION: This example demonstrates how to use mo.lazy() to defer the execution of an expensive function until an accordion is opened. The lazy component is configured to show a loading indicator while the function is executing.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/api/layouts/lazy.md#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@app.cell\ndef __():\n    mo.accordion({\n        \"Open me\": mo.lazy(expensive_number, show_loading_indicator=True)\n    })\n    return\n\n@app.cell\ndef __():\n    import time\n    import random\n\n    def expensive_number():\n        time.sleep(1)\n        num = random.randint(0, 100)\n        return num\n    return\n```\n\n----------------------------------------\n\nTITLE: Implementing Data Editor in Marimo Python Notebook\nDESCRIPTION: This code snippet demonstrates how to create and use a data editor in a Marimo notebook. It initializes a pandas DataFrame, creates a data editor UI element, and displays the edited data.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/api/inputs/data_editor.md#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport marimo as mo\nimport pandas as pd\n\n# Create a sample DataFrame\ndf = pd.DataFrame({\n    \"Name\": [\"Alice\", \"Bob\", \"Charlie\"],\n    \"Age\": [25, 30, 35],\n    \"City\": [\"New York\", \"San Francisco\", \"London\"]\n})\n\n# Create a data editor\neditor = mo.ui.data_editor(df)\n\n# Display the editor\nmo.md(\"## Data Editor\")\nmo.hstack([editor])\n\n# Display the edited data\nmo.md(\"## Edited Data\")\nmo.table(editor.value)\n```\n\n----------------------------------------\n\nTITLE: Using mo.ui.refresh for Timer-Based Cell Execution in Python\nDESCRIPTION: This example demonstrates how to use mo.ui.refresh to automatically run a cell on a timer in Marimo. The refresh utility allows setting intervals for cell execution, which is useful for monitoring data that changes over time or creating dynamic visualizations that update automatically.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/examples/running_cells/refresh.md#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Refresh cells on a timer\n\nUse [`mo.ui.refresh`][marimo.ui.refresh] to run a cell on a timer\n```\n\n----------------------------------------\n\nTITLE: Implementing Number Input Widget with Marimo\nDESCRIPTION: Creates an interactive number input widget with a range of 1-20 and displays its current value. Uses mo.ui.number for input creation and mo.hstack for horizontal layout of components.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/api/inputs/number.md#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@app.cell\ndef __():\n    number = mo.ui.number(start=1, stop=20, label=\"Number\")\n    return\n\n@app.cell\ndef __():\n    mo.hstack([number, mo.md(f\"Has value: {number.value}\")])\n    return\n```\n\n----------------------------------------\n\nTITLE: Setting up a marimo App with Navigation and Routing\nDESCRIPTION: This code demonstrates a complete marimo application with sidebar navigation and client-side routing. It creates a sidebar with links to different pages, implements route handlers for different URL paths, and includes a catch-all route for handling undefined paths.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/api/layouts/routes.md#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport marimo\n\napp = marimo.App()\n\n@app.cell\ndef __():\n   import marimo as mo\n   return\n\n\n@app.cell\ndef __():\n    mo.sidebar(\n        [\n            mo.md(\"# marimo\"),\n            mo.nav_menu(\n                {\n                    \"#/\": f\"{mo.icon('lucide:home')} Home\",\n                    \"#/about\": f\"{mo.icon('lucide:user')} About\",\n                    \"#/contact\": f\"{mo.icon('lucide:phone')} Contact\",\n                    \"Links\": {\n                        \"https://twitter.com/marimo_io\": \"Twitter\",\n                        \"https://github.com/marimo-team/marimo\": \"GitHub\",\n                    },\n                },\n                orientation=\"vertical\",\n            ),\n        ]\n    )\n    return\n\n@app.cell\ndef __():\n    mo.routes({\n        \"#/\": mo.md(\"# Home\"),\n        \"#/about\": mo.md(\"# About\"),\n        \"#/contact\": mo.md(\"# Contact\"),\n        mo.routes.CATCH_ALL: mo.md(\"# Home\"),\n    })\n    return\n```\n\n----------------------------------------\n\nTITLE: Installing marimo via pip and running the intro tutorial\nDESCRIPTION: Basic installation command for marimo using pip, followed by launching the introduction tutorial. This is the quickest way to get started with marimo.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/README.md#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npip install marimo && marimo tutorial intro\n```\n\n----------------------------------------\n\nTITLE: Customizing Altair Selection Behavior\nDESCRIPTION: Shows how to disable automatic selection and implement custom selection behavior using interval selection in Altair charts.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/working_with_data/plotting.md#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nbrush = alt.selection_interval(encodings=[\"x\"])\n\n_chart = (\n    alt.Chart(traces, height=150)\n    .mark_line()\n    .encode(x=\"index:Q\", y=\"value:Q\", color=\"traces:N\")\n    .add_params(brush) # add the selection to the chart\n)\n\nchart = mo.ui.altair_chart(\n    _chart,\n    # disable automatic selection\n    chart_selection=False,\n    legend_selection=False\n)\nchart # You can now access chart.value to get the selected data\n```\n\n----------------------------------------\n\nTITLE: Creating Interactive Plotly Chart\nDESCRIPTION: Demonstrates creating a reactive scatter plot using Plotly and marimo, including setup and data display.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/working_with_data/plotting.md#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@app.cell(hide_code=True)\nasync def __():\n    import micropip\n    await micropip.install(\"pandas\")\n    await micropip.install(\"plotly\")\n    import plotly.express as px\n    return micropip, px\n\n\n@app.cell\ndef __(px):\n    plot = mo.ui.plotly(\n      px.scatter(x=[0, 1, 4, 9, 16], y=[0, 1, 2, 3, 4], width=600, height=300)\n    )\n    plot\n    return plot\n\n\n@app.cell\ndef __(plot):\n    plot.value\n    return\n```\n\n----------------------------------------\n\nTITLE: Creating and Displaying Multiselect Component in Marimo\nDESCRIPTION: Creates a multiselect dropdown with fruit options and displays it alongside its selected value using horizontal stack layout. The component allows multiple selections from a predefined list of options.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/api/inputs/multiselect.md#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@app.cell\ndef __():\n    options = [\"Apples\", \"Oranges\", \"Pears\"]\n    multiselect = mo.ui.multiselect(options=options)\n    return\n\n@app.cell\ndef __():\n    mo.hstack([multiselect, mo.md(f\"Has value: {multiselect.value}\")])\n    return\n```\n\n----------------------------------------\n\nTITLE: Exporting Marimo Notebook as Readonly WASM-powered HTML\nDESCRIPTION: Command to export a Marimo notebook as a readonly WebAssembly-powered HTML file. This creates a self-contained, executable notebook that can be run in a web browser.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/publishing/cloudflare_pages.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmarimo export html-wasm notebook.py -o output_dir --mode run\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Authentication with FastAPI in marimo\nDESCRIPTION: This Python code snippet shows how to create a marimo ASGI app, integrate it with FastAPI, and add custom authentication middleware. It includes setting up routes for multiple marimo apps and a login endpoint.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/deploying/authentication.md#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Annotated, Callable, Coroutine\nfrom fastapi.responses import HTMLResponse, RedirectResponse\nimport marimo\nfrom fastapi import FastAPI, Form, Request, Response\n# Custom auth middleware and login page\nfrom my_auth_module import auth_middleware, my_login_route\n\n\n# Create a marimo asgi app\nserver = (\n    marimo.create_asgi_app()\n    .with_app(path=\"\", root=\"./pages/index.py\")\n    .with_app(path=\"/dashboard\", root=\"./pages/dashboard.py\")\n    .with_app(path=\"/sales\", root=\"./pages/sales.py\")\n)\n\n# Create a FastAPI app\napp = FastAPI()\n\napp.add_middleware(auth_middleware)\napp.add_route(\"/login\", my_login_route, methods=[\"POST\"])\n\napp.mount(\"/\", server.build())\n\n# Run the server\nif __name__ == \"__main__\":\n    import uvicorn\n\n    uvicorn.run(app, host=\"localhost\", port=8000)\n```\n\n----------------------------------------\n\nTITLE: Using Progress Bar in Marimo for Iteration Visualization\nDESCRIPTION: Demonstrates how to use marimo's progress_bar function to visualize iteration progress, similar to tqdm. This component displays a progress bar while processing collections or loading data.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/api/status.md#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nmarimo.status.progress_bar\n```\n\n----------------------------------------\n\nTITLE: Interactive Dataframe Transformation with Pandas\nDESCRIPTION: Example of using Marimo's UI components to create and transform Pandas dataframes interactively.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/working_with_data/dataframes.md#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Cell 1\nimport marimo as mo\nimport pandas as pd\n\ndf = pd.DataFrame({\"person\": [\"Alice\", \"Bob\", \"Charlie\"], \"age\": [20, 30, 40]})\ntransformed_df = mo.ui.dataframe(df)\ntransformed_df\n```\n\nLANGUAGE: python\nCODE:\n```\n# Cell 2\n# transformed_df.value holds the transformed dataframe\ntransformed_df.value\n```\n\n----------------------------------------\n\nTITLE: Using Tabs Component in Marimo UI (Python)\nDESCRIPTION: Demonstrates how to create and use the Tabs component in Marimo UI. The example shows implementation of tabbed interfaces with different tab styles and content types, including the ability to set the active tab programmatically.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/api/inputs/tabs.md#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n/// marimo-embed-file\n    size: large\n    mode: edit\n    filepath: examples/ui/tabs.py\n///\n```\n\n----------------------------------------\n\nTITLE: Implementing Counter UI with State in Python\nDESCRIPTION: Creates an interactive counter with increment and decrement buttons using mo.state and mo.ui components.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/state.md#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport marimo as mo\n\nget_counter, set_counter = mo.state(0)\n\nincrement = mo.ui.button(\n    label=\"increment\",\n    on_change=lambda _: set_counter(lambda v: v + 1),\n)\n\ndecrement = mo.ui.button(\n    label=\"decrement\",\n    on_change=lambda _: set_counter(lambda v: v - 1),\n)\n\nmo.hstack([increment, decrement], justify=\"center\")\n```\n\n----------------------------------------\n\nTITLE: Displaying DataFrames - Streamlit vs Marimo\nDESCRIPTION: Shows how to display dataframes in both frameworks, highlighting marimo's automatic display feature.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/coming_from/streamlit.md#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nst.dataframe(df)\n```\n\nLANGUAGE: python\nCODE:\n```\ndf  # Last expression in a cell is automatically displayed\n```\n\n----------------------------------------\n\nTITLE: Creating and Displaying a Checkbox in Marimo\nDESCRIPTION: This example demonstrates how to create a checkbox with a label and display its current value in a horizontal stack layout. The code uses mo.ui.checkbox to create the UI element and mo.hstack to arrange components horizontally.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/api/inputs/checkbox.md#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@app.cell\ndef __():\n    checkbox = mo.ui.checkbox(label=\"check me\")\n    return\n\n@app.cell\ndef __():\n    mo.hstack([checkbox, mo.md(f\"Has value: {checkbox.value}\")])\n    return\n```\n\n----------------------------------------\n\nTITLE: Creating and Displaying Dictionary UI Component in Marimo\nDESCRIPTION: This code creates a dictionary UI component with text inputs for first name, last name, and email. It then displays the dictionary component alongside its value using a horizontal stack layout.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/api/inputs/dictionary.md#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@app.cell\ndef __():\n    first_name = mo.ui.text(placeholder=\"First name\")\n    last_name = mo.ui.text(placeholder=\"Last name\")\n    email = mo.ui.text(placeholder=\"Email\", kind=\"email\")\n\n    dictionary = mo.ui.dictionary(\n        {\n            \"First name\": first_name,\n            \"Last name\": last_name,\n            \"Email\": email,\n        }\n    )\n    return\n@app.cell\ndef __():\n    mo.hstack(\n      [dictionary, dictionary.value],\n      justify=\"space-between\"\n    )\n    return\n```\n\n----------------------------------------\n\nTITLE: Creating a Dockerfile for Marimo Application Deployment\nDESCRIPTION: This Dockerfile sets up a Python environment, installs dependencies using uv, copies the application files, and configures the container to run a Marimo app. It uses a non-root user for improved security and exposes port 8080 for access.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/deploying/deploying_docker.md#2025-04-19_snippet_0\n\nLANGUAGE: Dockerfile\nCODE:\n```\n# syntax=docker/dockerfile:1.4\n\n# Choose a python version that you know works with your application\nFROM python:3.11-slim\n\n# Install uv for fast package management\nCOPY --from=ghcr.io/astral-sh/uv:0.4.20 /uv /bin/uv\nENV UV_SYSTEM_PYTHON=1\n\nWORKDIR /app\n\n# Copy requirements file\nCOPY --link requirements.txt .\n\n# Install the requirements using uv\nRUN uv pip install -r requirements.txt\n\n# Copy application files\nCOPY --link app.py .\n# Uncomment the following line if you need to copy additional files\n# COPY --link . .\n\nEXPOSE 8080\n\n# Create a non-root user and switch to it\nRUN useradd -m app_user\nUSER app_user\n\nCMD [ \"marimo\", \"run\", \"app.py\", \"--host\", \"0.0.0.0\", \"-p\", \"8080\" ]\n```\n\n----------------------------------------\n\nTITLE: Interactive Run Button Implementation\nDESCRIPTION: Shows how to create an interactive run button with cell dependencies in Marimo\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/coming_from/jupyter.md#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@app.cell\ndef __():\n    run_button = mo.ui.run_button()\n    run_button\n    return\n\n@app.cell\ndef __():\n    mo.stop(not run_button.value, mo.md(\"Click 👆 to run this cell\"))\n    mo.md(\"You clicked the button! 🎉\")\n    return\n```\n\n----------------------------------------\n\nTITLE: OpenAI GPT Chat Implementation in Python\nDESCRIPTION: Shows how to use Marimo's built-in OpenAI integration to create a chat interface with GPT models. This example sets a system message and enables configuration controls for the model parameters.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/api/inputs/chat.md#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport marimo as mo\n\nchat = mo.ui.chat(\n    mo.ai.llm.openai(\n        \"gpt-4\",\n        system_message=\"You are a helpful assistant.\",\n    ),\n    show_configuration_controls=True\n)\nchat\n```\n\n----------------------------------------\n\nTITLE: Basic Echo Model Chat UI Implementation in Python\nDESCRIPTION: A simple example showing how to create a chat UI with a custom echo model that responds with the user's message. It demonstrates the basic pattern for implementing a chat interface with predefined prompts.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/api/inputs/chat.md#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport marimo as mo\n\ndef echo_model(messages, config):\n    return f\"Echo: {messages[-1].content}\"\n\nchat = mo.ui.chat(echo_model, prompts=[\"Hello\", \"How are you?\"])\nchat\n```\n\n----------------------------------------\n\nTITLE: Chat UI with File Attachment Support in Python\nDESCRIPTION: Shows how to configure the chat UI to accept file attachments. This example demonstrates limiting attachment types to specific MIME types (PNG and JPEG images) but also shows how to allow any attachment type.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/api/inputs/chat.md#2025-04-19_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nmo.ui.chat(\n    rag_model,\n    allow_attachments=[\"image/png\", \"image/jpeg\"],\n    # or True for any attachment type\n    # allow_attachments=True,\n)\n```\n\n----------------------------------------\n\nTITLE: Jupyter Export Commands\nDESCRIPTION: Commands for exporting to Jupyter notebook format and converting to various formats using nbconvert.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/exporting.md#2025-04-19_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmarimo export ipynb notebook.py -o notebook.ipynb\n\nNOTEBOOK=notebook.ipynb\n\n# Convert to PDF using nbconvert\nuvx --with nbconvert --from jupyter-core jupyter nbconvert --to pdf $NOTEBOOK\n\n# Convert to web PDF\nuvx --with \"nbconvert[webpdf]\" --from jupyter-core jupyter nbconvert --to webpdf $NOTEBOOK --allow-chromium-download\n\n# Convert to slides\nuvx --with nbconvert --from jupyter-core jupyter nbconvert --to slides $NOTEBOOK\n\n# Convert to rst with nbconvert\nuvx --with nbconvert --from jupyter-core jupyter nbconvert --to rst $NOTEBOOK\n\n# Generate PNG/PDF of specific cells using nbconvert\nuvx --with nbconvert --with jupyter --from jupyter-core jupyter nbconvert --to pdf --execute --stdout $NOTEBOOK \\\n  --TemplateExporter.exclude_input=True\n\n# Use nbconvert programmatically for more control\nuv run --with nbconvert python -c \"\nfrom nbconvert import PDFExporter\nimport nbformat\nnb = nbformat.read('$NOTEBOOK', as_version=4)\npdf_exporter = PDFExporter()\npdf_data, resources = pdf_exporter.from_notebook_node(nb)\nwith open('notebook.pdf', 'wb') as f:\n    f.write(pdf_data)\n\"\n```\n\n----------------------------------------\n\nTITLE: Implementing _mime_() Method for JSON Display in Python\nDESCRIPTION: This snippet demonstrates how to implement a _mime_() method for a MyJSONObject class. The method returns a tuple with the MIME type 'application/json' and the JSON-encoded data.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/integrating_with_marimo/displaying_objects.md#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport json\n\nclass MyJSONObject(object):\n    def __init__(self, data: dict[str, object]) -> None:\n        self.data = data\n\n    def _mime_(self) -> tuple[str, str]:\n        return (\"application/json\", json.dumps(self.data))\n\nMyJSONObject({\"hello\": \"world\"})\n```\n\n----------------------------------------\n\nTITLE: Displaying Remote Image with Marimo Image Component\nDESCRIPTION: Demonstrates rendering an image from a remote URL using Marimo's image component with custom dimensions and rounded corners. The example uses a sample owl image from Pexels and sets specific width and height parameters along with border radius styling.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/api/media/image.md#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@app.cell\ndef __():\n    _src = (\n        \"https://images.pexels.com/photos/86596/owl-bird-eyes-eagle-owl-86596.jpeg\"\n    )\n    mo.image(src=_src, width=\"180px\", height=\"180px\", rounded=True)\n    return\n```\n\n----------------------------------------\n\nTITLE: Groq LLM Chat Integration in Python\nDESCRIPTION: Demonstrates integration with Groq's LLMs. This example configures the chat UI with a Llama model from Groq, including system message and API key settings.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/api/inputs/chat.md#2025-04-19_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport marimo as mo\n\nmo.ui.chat(\n    mo.ai.llm.groq(\n        \"llama-3.1-70b-versatile\",\n        system_message=\"You are a helpful assistant.\",\n        api_key=\"gsk-...\",\n    ),\n    show_configuration_controls=True\n)\n```\n\n----------------------------------------\n\nTITLE: Creating and Using a Switch Component in Marimo\nDESCRIPTION: This code demonstrates how to create a switch component with a label and access its value. The example creates a switch labeled 'do not disturb' and then displays the switch alongside its current value in a horizontal stack layout.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/api/inputs/switch.md#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@app.cell\ndef __():\n    switch = mo.ui.switch(label=\"do not disturb\")\n    return\n\n@app.cell\ndef __():\n    mo.hstack([switch, mo.md(f\"Has value: {switch.value}\")])\n    return\n```\n\n----------------------------------------\n\nTITLE: In-Memory Caching with mo.cache Decorator\nDESCRIPTION: Demonstrates using mo.cache as a decorator to cache expensive function results in memory based on input parameters.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/expensive_notebooks.md#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport marimo as mo\n\n@mo.cache\ndef compute_predictions(problem_parameters):\n  # do some expensive computations and return a value\n  ...\n```\n\n----------------------------------------\n\nTITLE: Creating a SQL cell in marimo\nDESCRIPTION: Example of creating a SQL cell in marimo, which is syntactic sugar for Python code. It demonstrates how to query a table and store the result in a DataFrame.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/working_with_data/sql.md#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\noutput_df = mo.sql(f\"SELECT * FROM my_table LIMIT {max_rows.value}\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Sidebar with Navigation Menu in marimo (Python)\nDESCRIPTION: This code creates a sidebar using marimo's UI components. It includes a title, a vertical navigation menu with internal links and icons, and a submenu for external links. The sidebar is configured using the mo.sidebar() function and populated with markdown and a navigation menu.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/api/layouts/sidebar.md#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@app.cell\ndef __():\n    mo.sidebar(\n        [\n            mo.md(\"# marimo\"),\n            mo.nav_menu(\n                {\n                    \"#/home\": f\"{mo.icon('lucide:home')} Home\",\n                    \"#/about\": f\"{mo.icon('lucide:user')} About\",\n                    \"#/contact\": f\"{mo.icon('lucide:phone')} Contact\",\n                    \"Links\": {\n                        \"https://twitter.com/marimo_io\": \"Twitter\",\n                        \"https://github.com/marimo-team/marimo\": \"GitHub\",\n                    },\n                },\n                orientation=\"vertical\",\n            ),\n        ]\n    )\n    return\n```\n\n----------------------------------------\n\nTITLE: Creating and Displaying Text Area Form in Marimo\nDESCRIPTION: This code creates a text area form using Marimo's UI components and displays it along with its current value. The form is created with a placeholder text and embedded in a vertical stack layout with a markdown component showing its value.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/api/inputs/form.md#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@app.cell\ndef __():\n    form = mo.ui.text_area(placeholder=\"...\").form()\n    return\n\n@app.cell\ndef __():\n    mo.vstack([form, mo.md(f\"Has value: {form.value}\")])\n    return\n```\n\n----------------------------------------\n\nTITLE: Implementing Code Editor Component in Python with Marimo\nDESCRIPTION: Example demonstrating how to use the Code Editor component from Marimo's UI toolkit. The code showcases creating a code editor with Python syntax highlighting, capturing user inputs, and displaying the results.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/api/inputs/code_editor.md#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# examples/ui/code_editor.py\n\nimport marimo as mo\n\n\n@mo.cell\ndef __():\n    code = mo.ui.code(\"print('Hello, world!')\\nprint(1 + 1)\", language=\"python\")\n    return code\n\n\n@mo.cell\ndef __():\n    mo.md(f\"You entered:\\n```python\\n{code.value}\\n```\")\n\n\n@mo.cell\ndef __():\n    run_btn = mo.ui.button(label=\"Run\")\n    return run_btn\n\n\n@mo.cell\ndef __():\n    if run_btn.value:\n        compiled = compile(code.value, \"<string>\", \"exec\")\n        local_vars = {}\n        exec(compiled, globals(), local_vars)\n        return local_vars\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Numeric Slider in Marimo\nDESCRIPTION: Demonstrates how to create a basic slider component with a numeric range from 1 to 20 and an initial value of 3. The slider includes a label for better user experience.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/api/inputs/slider.md#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@app.cell\ndef __():\n    slider = mo.ui.slider(start=1, stop=20, label=\"Slider\", value=3)\n    return\n```\n\n----------------------------------------\n\nTITLE: Creating a Slider with Marimo UI in Python\nDESCRIPTION: This snippet shows how to create an interactive slider using Marimo's UI components. The slider is set with a range from 0 to 10 and an initial value of 2.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/island_example.md#2025-04-19_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nslider = mo.ui.slider(0, 10,value=2); slider\n```\n\n----------------------------------------\n\nTITLE: Creating and Displaying a Paginated Table in Marimo with The Office Characters Data\nDESCRIPTION: This code demonstrates how to create and work with tables in Marimo. It defines a dataset of characters from The Office TV show, creates a paginated table using mo.ui.table, and displays both the table and its value using mo.vstack. The table component supports pagination for handling larger datasets.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/api/inputs/table.md#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@app.cell\ndef __():\n    table = mo.ui.table(data=office_characters, pagination=True)\n    return\n\n@app.cell\ndef __():\n    mo.vstack([table, table.value])\n    return\n\n@app.cell\ndef __():\n    office_characters = [\n        {\"first_name\": \"Michael\", \"last_name\": \"Scott\"},\n        {\"first_name\": \"Jim\", \"last_name\": \"Halpert\"},\n        {\"first_name\": \"Pam\", \"last_name\": \"Beesly\"},\n        {\"first_name\": \"Dwight\", \"last_name\": \"Schrute\"},\n        {\"first_name\": \"Angela\", \"last_name\": \"Martin\"},\n        {\"first_name\": \"Kevin\", \"last_name\": \"Malone\"},\n        {\"first_name\": \"Oscar\", \"last_name\": \"Martinez\"},\n        {\"first_name\": \"Stanley\", \"last_name\": \"Hudson\"},\n        {\"first_name\": \"Phyllis\", \"last_name\": \"Vance\"},\n        {\"first_name\": \"Meredith\", \"last_name\": \"Palmer\"},\n        {\"first_name\": \"Creed\", \"last_name\": \"Bratton\"},\n        {\"first_name\": \"Ryan\", \"last_name\": \"Howard\"},\n        {\"first_name\": \"Kelly\", \"last_name\": \"Kapoor\"},\n        {\"first_name\": \"Toby\", \"last_name\": \"Flenderson\"},\n        {\"first_name\": \"Darryl\", \"last_name\": \"Philbin\"},\n        {\"first_name\": \"Erin\", \"last_name\": \"Hannon\"},\n        {\"first_name\": \"Andy\", \"last_name\": \"Bernard\"},\n        {\"first_name\": \"Jan\", \"last_name\": \"Levinson\"},\n        {\"first_name\": \"David\", \"last_name\": \"Wallace\"},\n        {\"first_name\": \"Holly\", \"last_name\": \"Flax\"},\n    ]\n    return\n```\n\n----------------------------------------\n\nTITLE: Implementing Progress Bar in Marimo (Python)\nDESCRIPTION: This snippet demonstrates how to create and update a progress bar in Marimo. It uses the mo.ui.progress() function to initialize the bar, updates it within a loop simulating work, and finally displays the completed progress.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/examples/outputs/progress_bar.md#2025-04-19_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport marimo as mo\nimport time\n\nprogress = mo.ui.progress(0)\nmo.md(f\"Progress: {progress}\")\n\nfor i in range(100):\n    time.sleep(0.05)  # Simulate work\n    progress.update((i + 1) / 100)\n\nmo.md(\"**Done!**\")\n```\n\n----------------------------------------\n\nTITLE: Exporting marimo Notebook to HTML (Bash)\nDESCRIPTION: Shows how to export a marimo notebook to HTML format with command-line arguments. This is useful for sharing static versions of notebooks with outputs.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/coming_from/papermill.md#2025-04-19_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nmarimo export html notebook.py -o notebook.html -- -arg1 foo --arg2 bar\n```\n\n----------------------------------------\n\nTITLE: Basic Altair Chart Example\nDESCRIPTION: Simple example showing how to create a reactive Altair scatter plot with cars dataset, including basic encoding and visualization setup.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/working_with_data/plotting.md#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport marimo as mo\nimport altair as alt\nimport vega_datasets\n\n# Load some data\ncars = vega_datasets.data.cars()\n\n# Create an Altair chart\nchart = alt.Chart(cars).mark_point().encode(\n    x='Horsepower', # Encoding along the x-axis\n    y='Miles_per_Gallon', # Encoding along the y-axis\n    color='Origin', # Category encoding by color\n)\n\n# Make it reactive ⚡\nchart = mo.ui.altair_chart(chart)\n```\n\n----------------------------------------\n\nTITLE: Creating a Run Button in Marimo\nDESCRIPTION: Create a run button that triggers computation when clicked. This is useful for controlling when specific calculations are performed.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/recipes.md#2025-04-19_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nbutton = mo.ui.run_button()\nbutton\n```\n\n----------------------------------------\n\nTITLE: Connecting to ClickHouse using chDB\nDESCRIPTION: Example of creating a ClickHouse connection using chDB library in marimo for embedded connections, with various connection string formats.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/working_with_data/sql.md#2025-04-19_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport chdb\n\nconnection = chdb.connect(\":memory:\")\n\n# Supported formats with examples:\n\":memory:\"                                   # In-memory database\n\"test.db\"                                    # Relative path\n\"file:test.db\"                               # Explicit file protocol\n\"/path/to/test.db\"                           # Absolute path\n\"file:/path/to/test.db\"                      # Absolute path with protocol\n\"file:test.db?param1=value1&param2=value2\"   # With query parameters\n\"file::memory:?verbose&log-level=test\"       # In-memory with parameters\n\"///path/to/test.db?param1=value1\"           # Triple slash absolute path\n```\n\n----------------------------------------\n\nTITLE: Implementing Persistent Caching for Long-Running Computations in Python\nDESCRIPTION: This code snippet demonstrates how to use mo.persistent_cache to cache the results of a long-running computation. It includes a function that simulates a time-consuming process and shows how to cache and retrieve its results.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/examples/running_cells/persistent_cache.md#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport marimo as mo\nimport time\n\n@mo.persist\ndef expensive_computation(n):\n    \"\"\"Simulate a long-running computation.\"\"\"\n    time.sleep(5)  # Simulate a 5-second computation\n    return n ** 2\n\n# First run: This will take about 5 seconds\nresult = expensive_computation(10)\nmo.md(f\"Result: {result}\")\n\n# Second run: This will be instant, as the result is cached\nresult = expensive_computation(10)\nmo.md(f\"Result (from cache): {result}\")\n\n# Different input: This will take about 5 seconds again\nresult = expensive_computation(20)\nmo.md(f\"Result for new input: {result}\")\n```\n\n----------------------------------------\n\nTITLE: Displaying UI Slider in Markdown\nDESCRIPTION: Demonstrates how to create a slider UI element and embed it within markdown text using Python f-strings. The slider is assigned to a global variable to enable interactive functionality.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/interactivity.md#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nslider = mo.ui.slider(1, 10)\nmo.md(f\"Choose a value: {slider}\")\n```\n\n----------------------------------------\n\nTITLE: Interactive BigQuery Data Explorer\nDESCRIPTION: Python code demonstrating how to create an interactive BigQuery data explorer using marimo UI components. Includes dataset listing, table selection, and data preview functionality.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/integrations/google_cloud_bigquery.md#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Cell 1 - Load libraries\nimport marimo as mo\nfrom google.cloud import bigquery\n\n# Cell 2 - Load datasets\nclient = bigquery.Client()\ndatasets = list(client.list_datasets())\n\n# Cell 3 - Select dataset\nselected_dataset = mo.ui.dropdown(\n    label=\"Select dataset\", options=[d.dataset_id for d in datasets]\n)\nselected_dataset\n\n# Cell 4 - Load tables\ndataset = client.dataset(selected_dataset.value)\ntables = list(client.list_tables(dataset))\nselected_table = mo.ui.dropdown(\n    label=\"Select table\", options=[t.table_id for t in tables]\n)\nselected_table\n\n# Cell 5 - Load table data\nresults = client.list_rows(dataset.table(selected_table.value), max_results=10)\nmo.ui.table(results.to_dataframe(), selection=None)\n```\n\n----------------------------------------\n\nTITLE: Creating Interactive Scatter Plot with Marimo\nDESCRIPTION: Demonstrates basic reactivity in marimo by creating an interactive scatter plot that updates based on a slider value. Shows how to create UI elements and handle automatic re-execution of dependent cells.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_server/ai/snapshots/chat_system_prompts.txt#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport marimo as mo\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a slider and display it\nn_points = mo.ui.slider(10, 100, value=50, label=\"Number of points\")\nn_points  # Display the slider\n\n# Generate random data based on slider value\n# This cell automatically re-executes when n_points.value changes\nx = np.random.rand(n_points.value)\ny = np.random.rand(n_points.value)\n\nplt.figure(figsize=(8, 6))\nplt.scatter(x, y, alpha=0.7)\nplt.title(f\"Scatter plot with {n_points.value} points\")\nplt.xlabel(\"X axis\")\nplt.ylabel(\"Y axis\")\nplt.gca()  # Return the current axes to display the plot\n```\n\n----------------------------------------\n\nTITLE: Google AI Gemini Chat Integration in Python\nDESCRIPTION: Shows how to integrate Google's Gemini models with the chat UI. This example configures the chat with a Gemini model, system message, and API key.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/api/inputs/chat.md#2025-04-19_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport marimo as mo\n\nmo.ui.chat(\n    mo.ai.llm.google(\n        \"gemini-1.5-pro-latest\",\n        system_message=\"You are a helpful assistant.\",\n        api_key=\"AI..\",\n    ),\n    show_configuration_controls=True\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Nginx for Marimo Reverse Proxy\nDESCRIPTION: This Nginx server block configuration sets up a reverse proxy for a Marimo application. It includes necessary headers, WebSocket support, and an optional static file serving location.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/deploying/deploying_nginx.md#2025-04-19_snippet_0\n\nLANGUAGE: nginx\nCODE:\n```\nserver {\n    server_name your-domain.com;\n\n    location / {\n        proxy_set_header    Host $host;\n        proxy_set_header    X-Real-IP $remote_addr;\n        proxy_set_header    X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header    X-Forwarded-Proto $scheme;\n        proxy_pass          http://127.0.0.1:2718;\n\n        # Required for WebSocket support\n        proxy_http_version  1.1;\n        proxy_set_header    Upgrade $http_upgrade;\n        proxy_set_header    Connection \"upgrade\";\n        proxy_read_timeout  600;\n    }\n\n    # Optional: Serve static files\n    location /static/ {\n        alias /path/to/your/static/files/;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Persistent Disk Caching with Context Manager\nDESCRIPTION: Shows how to use mo.persistent_cache as a context manager to cache computation results to disk.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/expensive_notebooks.md#2025-04-19_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport marimo as mo\n\nwith mo.persistent_cache(name=\"my_cache\"):\n    # This block of code and its computed variables will be cached to disk\n    # the first time it's run. The next time it's run, `predictions``\n    # will be loaded from disk.\n    predictions = compute_predictions(problem_parameters)\n    ...\n```\n\n----------------------------------------\n\nTITLE: Creating Interactive Button Stack with State Management\nDESCRIPTION: Shows how to create a horizontal stack of buttons with click handlers using mo.ui.array and state management.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/recipes.md#2025-04-19_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport random\n\n\n# Create a state object that will store the index of the\n# clicked button\nget_state, set_state = mo.state(None)\n\n# Create an mo.ui.array of buttons - a regular Python list won't work.\nbuttons = mo.ui.array(\n    [\n        mo.ui.button(\n            label=\"button \" + str(i), on_change=lambda v, i=i: set_state(i)\n        )\n        for i in range(random.randint(2, 5))\n    ]\n)\n\nmo.hstack(buttons)\n```\n\n----------------------------------------\n\nTITLE: Creating a Form with Pre-populated Fields in Marimo\nDESCRIPTION: Create a form with text inputs that are pre-populated based on the selected example from the dropdown. The form includes a submit button.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/recipes.md#2025-04-19_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nform = (\n    mo.md(\n        \"\"\"\n    ### Your form\n\n    {t1}\n    {t2}\n\"\"\"\n    )\n    .batch(\n        t1=mo.ui.text(label=\"enter text\", value=examples.value.get(\"t1\", \"\")),\n        t2=mo.ui.text(label=\"more text\", value=examples.value.get(\"t2\", \"\")),\n    )\n    .form(\n        submit_button_label=\"go\"\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Interactive Run Button Implementation with Marimo\nDESCRIPTION: Shows how to create an interactive run button UI element and use it to control cell execution with mo.stop.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/expensive_notebooks.md#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@app.cell\ndef __():\n    run_button = mo.ui.run_button()\n    run_button\n    return\n\n@app.cell\ndef __():\n    mo.stop(not run_button.value, mo.md(\"Click 👆 to run this cell\"))\n    mo.md(\"You clicked the button! 🎉\")\n    return\n```\n\n----------------------------------------\n\nTITLE: Implementing Single Date Input in Marimo\nDESCRIPTION: Creates a single date picker component and displays its selected value. Uses mo.ui.date for input and mo.hstack for horizontal layout of components.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/api/inputs/dates.md#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n    @app.cell\n    def __():\n        date = mo.ui.date(label=\"Start Date\")\n        return\n\n    @app.cell\n    def __():\n        mo.hstack([date, mo.md(f\"Has value: {date.value}\")])\n        return\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Marimo Example Notebooks\nDESCRIPTION: Command-line instructions for installing Marimo and running example notebooks. Includes the option to use the --sandbox flag for isolated virtual environments with automatic dependency installation.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/examples/ai/tools/README.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmarimo edit --sandbox <notebook.py>\n```\n\nLANGUAGE: shell\nCODE:\n```\nmarimo edit <notebook.py>\n```\n\n----------------------------------------\n\nTITLE: Creating a Hierarchical Tree Display with Marimo in Python\nDESCRIPTION: This code snippet demonstrates how to use the Marimo tree component to create a hierarchical display of elements. It includes a mix of simple entries, nested structures, and an interactive UI slider component. The tree is labeled for clarity.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/api/layouts/tree.md#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@app.cell\ndef __():\n    mo.tree(\n        [\"entry\", \"another entry\", {\"key\": [0, mo.ui.slider(1, 10, value=5), 2]}],\n        label=\"A tree of elements.\",\n    )\n    return\n```\n\n----------------------------------------\n\nTITLE: Creating a Slider UI Component with Marimo in Python\nDESCRIPTION: This code creates a slider UI component using Marimo. The slider has a range from 0 to 10, allowing users to select a value within this range.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/snapshots/script.txt#2025-04-19_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nslider = mo.ui.slider(0, 10)\n```\n\n----------------------------------------\n\nTITLE: Creating Accordion Components in Marimo\nDESCRIPTION: Demonstrates how to create accordion components with Marimo to organize content into collapsible sections. The example shows both simple and nested accordion usage with customization options like setting default opened/closed states.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/api/layouts/accordion.md#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport marimo as mo\n\n# Basic accordion usage\nmo.accordion(\n    {\n        \"First section\": mo.md(\"Some content in the first section\"),\n        \"Second section\": mo.md(\"Some content in the second section\"),\n    }\n)\n\n# Accordion with nested content and styling\nmo.accordion(\n    {\n        \"Simple text\": \"Just some text\",\n        \"Markdown\": mo.md(\"**Bold** and *italic*\"),\n        \"Multiple elements\": mo.vstack(\n            [\n                mo.md(\"## This is a header\"),\n                mo.md(\"This is some text\"),\n                mo.callout(\"This is a callout\", kind=\"info\"),\n            ]\n        ),\n        \"Nested accordion\": mo.accordion(\n            {\n                \"Nested section 1\": \"Content 1\",\n                \"Nested section 2\": \"Content 2\",\n            }\n        ),\n    }\n)\n\n# Accordion with default opened sections\nmo.accordion(\n    {\n        \"Default closed\": \"This section starts closed\",\n        \"Default open\": \"This section starts open\",\n    },\n    open_ids=[\"Default open\"],\n)\n\n# Accordion with all sections initially open\nmo.accordion(\n    {\n        \"Section 1\": \"Content 1\",\n        \"Section 2\": \"Content 2\",\n        \"Section 3\": \"Content 3\",\n    },\n    start_open=True,\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom LLM Provider for Code Completion\nDESCRIPTION: Configuration for setting up a custom LLM provider for code completion. Includes settings for API key, model name, and base URL endpoint. Can be used with various providers including OpenAI, Anthropic, Google AI, or local models.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/editor_features/ai_completion.md#2025-04-19_snippet_11\n\nLANGUAGE: toml\nCODE:\n```\n[completion]\ncopilot = \"custom\"\napi_key = \"your-llm-api-key\"\nmodel = \"your-llm-model-name\"\nbase_url = \"http://127.0.0.1:11434/v1\" # or https://your-llm-api-endpoint.com\n```\n\n----------------------------------------\n\nTITLE: Creating Metric Cards with Marimo Stats\nDESCRIPTION: Shows how to create multiple stat components displaying business metrics like active users, revenue and conversion rates. Each stat includes a value, label, caption showing change, and trend direction. The stats are arranged horizontally using mo.hstack with center justification.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/api/layouts/stat.md#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@app.cell\ndef __():\n    active_users = mo.stat(\n        value=\"1.2M\", \n        label=\"Active Users\", \n        caption=\"12k from last month\", \n        direction=\"increase\"\n    )\n\n    revenue = mo.stat(\n        value=\"$4.5M\", \n        label=\"Revenue\", \n        caption=\"8k from last quarter\", \n        direction=\"increase\"\n    )\n    \n    conversion = mo.stat(\n        value=\"3.8\", \n        label=\"Conversion Rate\", \n        caption=\"0.5 from last week\", \n        direction=\"decrease\",\n    )\n    \n    mo.hstack([active_users, revenue, conversion], justify=\"center\", gap=\"2rem\")\n    return\n```\n\n----------------------------------------\n\nTITLE: Creating a Logarithmic Slider with NumPy\nDESCRIPTION: Demonstrates creating a logarithmic slider using NumPy's logspace function to generate custom steps. This provides a slider that operates on a logarithmic scale from 10^-2 to 10^2 with 101 discrete steps.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/api/inputs/slider.md#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@app.cell\ndef __():\n    # You can also use steps to create a slider on a custom range\n    log_slider = mo.ui.slider(steps=np.logspace(-2, 2, 101), label=\"Logarithmic Slider\", value=1)\n    return\n```\n\n----------------------------------------\n\nTITLE: Loading Dynamic Directories in marimo with Python\nDESCRIPTION: Shows how to create a marimo server that dynamically loads notebooks from a directory. This is useful for frequently changing content without server restarts.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/deploying/programmatically.md#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nserver = (\n    marimo.create_asgi_app()\n    .with_dynamic_directory(path=\"/dashboard\", directory=\"./notebooks\")\n)\n```\n\n----------------------------------------\n\nTITLE: Loading and Displaying Dataframes with Pandas\nDESCRIPTION: Demonstrates how to load JSON data into a Pandas dataframe and display it using Marimo's rich viewer.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/working_with_data/dataframes.md#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\n\ndf = pd.read_json(\n    \"https://raw.githubusercontent.com/vega/vega-datasets/master/data/cars.json\"\n)\ndf\n```\n\n----------------------------------------\n\nTITLE: Creating a Mermaid Flowchart Diagram in Marimo\nDESCRIPTION: This snippet demonstrates how to create a Mermaid flowchart diagram in a Marimo notebook cell. It uses the mo.mermaid() function to render a directed graph that shows a decision tree for shopping choices.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/api/diagrams.md#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@app.cell\ndef __():\n    mo.mermaid(\"graph TD\\n  A[Christmas] -->|Get money| B(Go shopping)\\n  B --> C{Let me think}\\n  C -->|One| D[Laptop]\\n  C -->|Two| E[iPhone]\\n  C -->|Three| F[Car]\")\n    return\n```\n\n----------------------------------------\n\nTITLE: RAG (Retrieval-Augmented Generation) Chat Model in Python\nDESCRIPTION: Implements a Retrieval-Augmented Generation model for the chat interface. This example shows how to enhance responses by finding relevant documents based on the user's question and using them as context for the LLM.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/api/inputs/chat.md#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport marimo as mo\n\ndef rag_model(messages, config):\n    question = messages[-1].content\n    docs = find_relevant_docs(question)\n    context = \"\\n\".join(docs)\n    prompt = f\"Context: {context}\\n\\nQuestion: {question}\\n\\nAnswer:\"\n    response = query_llm(prompt, config)\n    return response\n\nmo.ui.chat(rag_model)\n```\n\n----------------------------------------\n\nTITLE: Creating and Displaying Text Input in Marimo\nDESCRIPTION: This code snippet creates a text input field using mo.ui.text and displays it along with its current value. The text input is configured with a placeholder and label. The value of the input is shown dynamically using Markdown formatting.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/api/inputs/text.md#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@app.cell\ndef __():\n    text = mo.ui.text(placeholder=\"Search...\", label=\"Filter\")\n    return\n\n@app.cell\ndef __():\n    mo.hstack([text, mo.md(f\"Has value: {text.value}\")])\n    return\n```\n\n----------------------------------------\n\nTITLE: Accessing CLI Arguments in Marimo\nDESCRIPTION: Demonstrates how to access command-line arguments passed to a Marimo notebook using mo.cli_args. This allows for non-user-controllable argument passing to the notebook.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/api/query_params.md#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nmo.cli_args\n```\n\n----------------------------------------\n\nTITLE: Configuring Marimo via Script Metadata\nDESCRIPTION: Example of configuring Marimo settings using script metadata (PEP 723) directly in notebook files.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/configuration/index.md#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# /// script\n# [tool.marimo.runtime]\n# auto_instantiate = false\n# on_cell_change = \"lazy\"\n# [tool.marimo.display]\n# theme = \"dark\"\n# cell_output = \"below\"\n# ///\n```\n\n----------------------------------------\n\nTITLE: Creating Interactive Radio Buttons with Marimo\nDESCRIPTION: Creates a radio button group with three options and displays the selected value. Uses mo.ui.radio for the radio buttons and mo.hstack for horizontal layout of components.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/api/inputs/radio.md#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@app.cell\ndef __():\n    options = [\"Apples\", \"Oranges\", \"Pears\"]\n    radio = mo.ui.radio(options=options)\n    return\n\n@app.cell\ndef __():\n    mo.hstack([radio, mo.md(f\"Has value: {radio.value}\")])\n    return\n```\n\n----------------------------------------\n\nTITLE: Form Value Retrieval\nDESCRIPTION: Demonstrates how to access the submitted value from a Marimo form.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/recipes.md#2025-04-19_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nform.value\n```\n\n----------------------------------------\n\nTITLE: Simple Echo Model with Chat UI in Python\nDESCRIPTION: Demonstrates a basic implementation of the chat UI with a simple echo model that returns the user's message. The example includes predefined prompts and configuration controls.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/api/inputs/chat.md#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@app.cell\ndef __():\n    def simple_echo_model(messages, config):\n        return f\"You said: {messages[-1].content}\"\n\n    mo.ui.chat(\n        simple_echo_model,\n        prompts=[\"Hello\", \"How are you?\"],\n        show_configuration_controls=True\n    )\n    return\n```\n\n----------------------------------------\n\nTITLE: Loading and Displaying Dataframes with Polars\nDESCRIPTION: Shows how to load JSON data into a Polars dataframe and display it using Marimo's rich viewer.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/working_with_data/dataframes.md#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport polars as pl\n\ndf = pl.read_json(\n    \"https://raw.githubusercontent.com/vega/vega-datasets/master/data/cars.json\"\n)\ndf\n```\n\n----------------------------------------\n\nTITLE: Creating Interactive Scatter Plot with Marimo UI\nDESCRIPTION: Demonstrates reactive visualization using marimo UI components with matplotlib. Creates an interactive scatter plot that updates based on a slider input controlling the number of points.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_server/ai/snapshots/chat_system_prompts.txt#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport marimo as mo\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a slider and display it\nn_points = mo.ui.slider(10, 100, value=50, label=\"Number of points\")\nn_points\n\n# Generate random data based on slider value\nx = np.random.rand(n_points.value)\ny = np.random.rand(n_points.value)\n\nplt.figure(figsize=(8, 6))\nplt.scatter(x, y, alpha=0.7)\nplt.title(f\"Scatter plot with {n_points.value} points\")\nplt.xlabel(\"X axis\")\nplt.ylabel(\"Y axis\")\nplt.gca()\n```\n\n----------------------------------------\n\nTITLE: Creating Reactive Altair Chart with marimo\nDESCRIPTION: Demonstrates setting up a reactive scatter plot using Altair and marimo with cars dataset. The plot shows horsepower vs miles per gallon, colored by origin.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/working_with_data/plotting.md#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@app.cell\nasync def __():\n    import pandas as pd\n    import pyodide\n    import micropip\n    import json\n    await micropip.install('altair')\n    import altair as alt\n    return\n\n@app.cell\ndef __():\n    cars = pd.DataFrame(json.loads(\n      pyodide.http.open_url('https://vega.github.io/vega-datasets/data/cars.json').read()\n    ))\n\n    chart = mo.ui.altair_chart(alt.Chart(cars).mark_point().encode(\n        x='Horsepower',\n        y='Miles_per_Gallon',\n        color='Origin'\n    ))\n    return\n\n@app.cell\ndef __():\n    mo.vstack([chart, mo.ui.table(chart.value)])\n    return\n```\n\n----------------------------------------\n\nTITLE: Cerebras API Integration with OpenAI-Compatible Interface in Python\nDESCRIPTION: Shows how to use Cerebras API with Marimo's OpenAI-compatible interface. This example configures the base URL to point to the Cerebras API for accessing their LLama models.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/api/inputs/chat.md#2025-04-19_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nchatbot = mo.ui.chat(\n    mo.ai.llm.openai(\n        model=\"llama3.1-8b\",\n        api_key=\"csk-...\", # insert your key here\n        base_url=\"https://api.cerebras.ai/v1/\",\n    ),\n)\nchatbot\n```\n\n----------------------------------------\n\nTITLE: Accessing Request Data in marimo Notebooks with Python\nDESCRIPTION: Illustrates how to access request data within marimo notebooks using mo.app_meta().request. This is useful for implementing authentication or accessing user data.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/deploying/programmatically.md#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport marimo as mo\n\n# Access request data in your notebook\nrequest = mo.app_meta().request\nif request and request.user and request.user[\"is_authenticated\"]:\n    content = f\"Welcome {request.user['username']}!\"\nelse:\n    content = \"Please log in\"\n\nmo.md(content)\n```\n\n----------------------------------------\n\nTITLE: Creating Markdown content in marimo\nDESCRIPTION: Example of how to create Markdown content in marimo using the mo.md() function, including interpolation of Python values.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/coming_from/jupytext.md#2025-04-19_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nmo.md(\"...\")\nmo.md(f\"...\")\n```\n\n----------------------------------------\n\nTITLE: Basic Matplotlib Plot Example\nDESCRIPTION: Shows how to create and display a basic line plot using Matplotlib in marimo.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/working_with_data/plotting.md#2025-04-19_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nplt.plot([1, 2])\n# plt.gca() gets the current `Axes`\nplt.gca()\n```\n\n----------------------------------------\n\nTITLE: Inline Script Metadata for Package Management (Python)\nDESCRIPTION: Example of inline script metadata used by marimo to manage package dependencies and Python version requirements. This metadata is automatically tracked and updated when running notebooks in sandbox mode.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/package_reproducibility.md#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# /// script\n# requires-python = \">=3.11\"\n# dependencies = [\n#     \"pandas==<version>\",\n#     \"altair==<version>\",\n# ]\n# ///\n```\n\n----------------------------------------\n\nTITLE: Creating File Browser with Marimo UI\nDESCRIPTION: Creates a file browser interface using Marimo's UI library by embedding a file_browser component within a vertical stack layout. The code uses the app.cell decorator to define a cell in the Marimo application.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/api/inputs/file_browser.md#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n    @app.cell\n    def __():\n        mo.vstack([mo.ui.file_browser()])\n        return\n```\n\n----------------------------------------\n\nTITLE: Accessing Query Parameters in marimo Web Apps (Python)\nDESCRIPTION: Illustrates how to use mo.query_params() to access URL query parameters in marimo web apps. This provides an alternative method for parameterization in web-based scenarios.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/coming_from/papermill.md#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport marimo as mo\n\n# Access query params\nparams = mo.query_params()\nparam1 = params.get(\"param1\", \"default_value\")\n```\n\n----------------------------------------\n\nTITLE: Loading Static Notebooks in marimo with Python\nDESCRIPTION: Demonstrates how to load static notebooks from a directory using the with_app method. It loops through the directory contents and adds each notebook as a separate app.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/deploying/programmatically.md#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom pathlib import Path\nserver = marimo.create_asgi_app()\napp_names: list[str] = []\n\nnotebooks_dir = Path(__file__).parent / \"notebooks\"\n\nfor filename in sorted(notebooks_dir.iterdir()):\n    if filename.suffix == \".py\":\n        app_name = filename.stem\n        server = server.with_app(path=f\"/{app_name}\", root=filename)\n        app_names.append(app_name)\n```\n\n----------------------------------------\n\nTITLE: Generating Marimo Islands from Code Blocks in Python\nDESCRIPTION: Demonstrates how to generate Marimo islands programmatically using MarimoIslandGenerator. The code creates a simple app with two code blocks, handles Windows-specific event loop configuration, and saves the generated HTML to a file.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/exporting.md#2025-04-19_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nimport sys\nfrom marimo import MarimoIslandGenerator\n\nif sys.platform == 'win32':\n    asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())\n\nasync def main():\n    generator = MarimoIslandGenerator()\n    block1 = generator.add_code(\"import marimo as mo\")\n    block2 = generator.add_code(\"mo.md('Hello, islands!')\")\n\n    # Build the app\n    app = await generator.build()\n\n    # Render the app\n    output = f\"\"\"\n    <html>\n        <head>\n            {generator.render_head()}\n        </head>\n        <body>\n            {block1.render(display_output=False)}\n            {block2.render()}\n        </body>\n    </html>\n    \"\"\"\n    print(output)\n    # Save the HTML to a file\n    output_file = \"output.html\"\n    with open(output_file, \"w\", encoding=\"utf-8\") as f:\n        f.write(output)\n\nif __name__ == '__main__':\n    asyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: DataFrame Aliasing Across Cells\nDESCRIPTION: Demonstrates how to transform DataFrames across multiple cells using aliasing\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/coming_from/jupyter.md#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndf = pd.DataFrame({\"my_column\": [1, 2]})\n```\n\nLANGUAGE: python\nCODE:\n```\naugmented_df = df\naugmented_df[\"another_column\"] = [3, 4]\n```\n\n----------------------------------------\n\nTITLE: Accessing Command Line Arguments in marimo (Python)\nDESCRIPTION: Demonstrates how to use mo.cli_args() to access command-line arguments passed to a marimo notebook. This allows for parameterization similar to Papermill's approach.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/coming_from/papermill.md#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport marimo as mo\n\n# Access CLI args\nargs = mo.cli_args()\nparam1 = args.get(\"param1\", \"default_value\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Date Range Input in Marimo\nDESCRIPTION: Creates a date range picker component that allows selection of start and end dates. Displays the selected range value using horizontal stack layout.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/api/inputs/dates.md#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n    @app.cell\n    def __():\n        date_range = mo.ui.date_range(label=\"Start Date\")\n        return\n\n    @app.cell\n    def __():\n        mo.hstack([date_range, mo.md(f\"Has value: {date_range.value}\")])\n        return\n```\n\n----------------------------------------\n\nTITLE: Implementing Run Button in Marimo\nDESCRIPTION: Shows how to use mo.ui.run_button to create a button that triggers cell execution. This component gives users control over when to run specific cells in a Marimo notebook.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/examples/running_cells/run_button.md#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nexamples/ui/run_button.py\n```\n\n----------------------------------------\n\nTITLE: Creating a Form-Wrapped Text Area in Python with marimo\nDESCRIPTION: This snippet demonstrates how to create a text area UI element wrapped in a form using marimo. The form adds a submit button, allowing the text area's value to be sent to Python only when submitted.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/faq.md#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nform = marimo.ui.text_area().form()\n```\n\n----------------------------------------\n\nTITLE: Persistent Disk Caching with Decorator\nDESCRIPTION: Demonstrates using mo.persistent_cache as a decorator to cache function results to disk for persistence across notebook restarts.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/expensive_notebooks.md#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport marimo as mo\n\n@mo.persistent_cache(name=\"my_cache\")\ndef compute_predictions(problem_parameters):\n    # do some expensive computations and return a value\n    ...\n```\n\n----------------------------------------\n\nTITLE: xAI Grok Integration with OpenAI-Compatible Interface in Python\nDESCRIPTION: Shows how to integrate xAI's Grok model using Marimo's OpenAI-compatible interface. This example configures the base URL to connect to xAI's API.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/api/inputs/chat.md#2025-04-19_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nchatbot = mo.ui.chat(\n    mo.ai.llm.openai(\n        model=\"grok-beta\",\n        api_key=key, # insert your key here\n        base_url=\"https://api.x.ai/v1\",\n    ),\n)\nchatbot\n```\n\n----------------------------------------\n\nTITLE: Verifying marimo Installation\nDESCRIPTION: Command to check if marimo was installed correctly by running a tutorial notebook. This should open an introductory tutorial in the user's browser.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/getting_started/installation.md#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmarimo tutorial intro\n```\n\n----------------------------------------\n\nTITLE: In-Memory Caching with Context Manager\nDESCRIPTION: Shows how to use mo.cache as a context manager to cache computation results in memory.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/expensive_notebooks.md#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport marimo as mo\n\nwith mo.cache(\"my_cache\") as c:\n    predictions = compute_predictions(problem_parameters):\n```\n\n----------------------------------------\n\nTITLE: Importing Top-Level Definitions from Marimo Notebook\nDESCRIPTION: This snippet shows how to import top-level functions and classes defined in a marimo notebook into another Python script or notebook using standard Python import syntax.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/reusing_functions.md#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom my_notebook import my_utility_function, DataProcessor\n```\n\n----------------------------------------\n\nTITLE: Customizing Fonts and Styles with CSS\nDESCRIPTION: This CSS snippet demonstrates how to change fonts using Google Fonts, set CSS variables, and customize paragraph styles in a marimo notebook.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/configuration/theming.md#2025-04-19_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n/* Load Inter from Google Fonts */\n@import url('https://fonts.googleapis.com/css2?family=Inter:ital,opsz,wght@0,14..32,100..900;1,14..32,100..900&display=swap');\n\n:root {\n  --marimo-heading-font: 'Inter', sans-serif;\n}\n\n/* Increase paragraph font size and change color */\n.paragraph {\n  font-size: 1.2rem;\n  color: light-dark(navy, pink);\n}\n```\n\n----------------------------------------\n\nTITLE: Redirecting Stdout to Cell Output in Marimo (Python)\nDESCRIPTION: The marimo.redirect_stdout() function is used to capture and redirect stdout output to the cell's output in a Marimo notebook, useful for displaying print statements in app views.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/api/outputs.md#2025-04-19_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nmarimo.redirect_stdout\n```\n\n----------------------------------------\n\nTITLE: Initializing Marimo App in Python\nDESCRIPTION: Imports the marimo library and creates a new Marimo App instance. This is the foundation for building a Marimo application.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/snapshots/converted_unparsable.py.txt#2025-04-19_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport marimo\n\napp = marimo.App()\n```\n\n----------------------------------------\n\nTITLE: Groq API Integration with OpenAI-Compatible Interface in Python\nDESCRIPTION: Demonstrates using Groq's API with Marimo's OpenAI-compatible interface. This example configures the base URL to connect to Groq's API for accessing their LLama models.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/api/inputs/chat.md#2025-04-19_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nchatbot = mo.ui.chat(\n    mo.ai.llm.openai(\n        model=\"llama-3.1-70b-versatile\",\n        api_key=\"gsk_...\", # insert your key here\n        base_url=\"https://api.groq.com/openai/v1/\",\n    ),\n)\nchatbot\n```\n\n----------------------------------------\n\nTITLE: Plotting Implementation\nDESCRIPTION: Demonstrates how to create and display matplotlib plots in both frameworks.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/coming_from/streamlit.md#2025-04-19_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots()\nax.plot([1, 2, 3, 4])\nst.pyplot(fig)\n```\n\nLANGUAGE: python\nCODE:\n```\nimport matplotlib.pyplot as plt\n\nplt.plot([1, 2, 3, 4])\nplt.gca()  # Last expression is displayed\n```\n\n----------------------------------------\n\nTITLE: Creating Interactive Callout with Color Selection in Marimo (Python)\nDESCRIPTION: This code creates a dropdown for selecting callout colors, generates a callout with the chosen color, and arranges the components vertically. It utilizes Marimo's UI components and layout functions.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/api/layouts/callout.md#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@app.cell\ndef __():\n    callout_kind = mo.ui.dropdown(\n        label=\"Color\",\n        options=[\"info\", \"neutral\", \"danger\", \"warn\", \"success\"],\n        value=\"neutral\",\n    )\n    return\n\n@app.cell\ndef __():\n    callout = mo.callout(\"This is a callout\", kind=callout_kind.value)\n    return\n\n@app.cell\ndef __():\n    mo.vstack([callout_kind, callout], align=\"stretch\", gap=0)\n    return\n```\n\n----------------------------------------\n\nTITLE: Implementing _mime_() Method for HTML Display in Python\nDESCRIPTION: This example shows how to implement a _mime_() method for a Colorize class. The method returns a tuple with the MIME type 'text/html' and an HTML string that applies red color to the text.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/integrating_with_marimo/displaying_objects.md#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass Colorize(object):\n    def __init__(self, text: str) -> None:\n        self.text = text\n\n    def _mime_(self) -> tuple[str, str]:\n        return (\n          \"text/html\",\n          \"<span style='color:red'>\" + self.text + \"</span>\",\n        )\n\nColorize(\"Hello!\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Reactive Scatter Plot with Matplotlib in Marimo\nDESCRIPTION: This example demonstrates marimo's reactive programming model by creating a scatter plot that automatically updates when a slider value changes. The code creates a UI slider for selecting the number of points, then generates and plots random data based on the slider's value.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_server/ai/snapshots/chat_system_prompts.txt#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport marimo as mo\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a slider and display it\nn_points = mo.ui.slider(10, 100, value=50, label=\"Number of points\")\nn_points  # Display the slider\n\n# Generate random data based on slider value\n# This cell automatically re-executes when n_points.value changes\nx = np.random.rand(n_points.value)\ny = np.random.rand(n_points.value)\n\nplt.figure(figsize=(8, 6))\nplt.scatter(x, y, alpha=0.7)\nplt.title(f\"Scatter plot with {n_points.value} points\")\nplt.xlabel(\"X axis\")\nplt.ylabel(\"Y axis\")\nplt.gca()  # Return the current axes to display the plot\n```\n\n----------------------------------------\n\nTITLE: Creating a Grid Layout in Marimo with Python\nDESCRIPTION: This example shows how to combine mo.vstack() and mo.hstack() to create a grid layout in Marimo. It creates a 2x3 grid with various UI elements.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_utils/snapshots/docstring_complex.txt#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Build a grid.\nmo.vstack(\n    [\n        mo.hstack([mo.md(\"...\"), mo.ui.text_area()]),\n        mo.hstack([mo.ui.checkbox(), mo.ui.text(), mo.ui.date()]),\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Form Creation in Marimo\nDESCRIPTION: Shows how to create a submittable text input form using Marimo's UI components.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/recipes.md#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nform = mo.ui.text(label=\"Your name\").form()\nform\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Marimo Snippet\nDESCRIPTION: Example of a custom Marimo snippet file that demonstrates loading environment variables. Shows the required structure for a snippet including app initialization and cell definitions.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/configuration/snippets.md#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport marimo\n\napp = marimo.App(width=\"medium\")\n\n@app.cell(hide_code=True)\ndef _(mo):\n    mo.md(r\"\"\"# Load .env\"\"\")\n    return\n\n\n@app.cell\ndef _():\n    import dotenv\n\n    dotenv.load_dotenv(dotenv.find_dotenv(usecwd=True))\n    return (dotenv,)\n\n\n@app.cell\ndef _():\n    import marimo as mo\n    return (mo,)\n\n\nif __name__ == \"__main__\":\n    app.run()\n```\n\n----------------------------------------\n\nTITLE: Creating Multi-Element Form with Batch Processing\nDESCRIPTION: Shows how to create a form combining multiple UI elements using mo.ui.form and Html.batch for algorithm parameter input.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/recipes.md#2025-04-19_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nform = mo.md(\n   r\"\"\"\n   Choose your algorithm parameters:\n\n   - $\\epsilon$: {epsilon}\n   - $\\delta$: {delta}\n   \"\"\"\n).batch(epsilon=mo.ui.slider(0.1, 1, step=0.1), delta=mo.ui.number(1, 10)).form()\nform\n```\n\n----------------------------------------\n\nTITLE: Configuring Vega-Lite Geospatial Visualization with Population Data in JSON\nDESCRIPTION: This JSON configuration specifies a Vega-Lite visualization using geoshape marks to represent countries. It encodes population estimates as colors and includes a custom dataset with geographical points for the USA, China, and India.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_plugins/ui/_impl/snapshots/parse_spec_geopandas.txt#2025-04-19_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"config\": {\n    \"view\": {\n      \"continuousWidth\": 300,\n      \"continuousHeight\": 300\n    }\n  },\n  \"data\": {\n    \"name\": \"data-cc0a8311b413c4168b2c1fac768ce667\"\n  },\n  \"mark\": {\n    \"type\": \"geoshape\"\n  },\n  \"encoding\": {\n    \"color\": {\n      \"field\": \"pop_est\",\n      \"type\": \"quantitative\"\n    },\n    \"shape\": {\n      \"field\": \"geometry\",\n      \"type\": \"nominal\"\n    }\n  },\n  \"$schema\": \"https://vega.github.io/schema/vega-lite/v5.20.1.json\",\n  \"datasets\": {\n    \"data-cc0a8311b413c4168b2c1fac768ce667\": [\n      {\n        \"name\": \"USA\",\n        \"pop_est\": 331002651,\n        \"type\": \"Feature\",\n        \"geometry\": {\n          \"type\": \"Point\",\n          \"coordinates\": [\n            -95.0,\n            37.0\n          ]\n        }\n      },\n      {\n        \"name\": \"China\",\n        \"pop_est\": 1439323776,\n        \"type\": \"Feature\",\n        \"geometry\": {\n          \"type\": \"Point\",\n          \"coordinates\": [\n            105.0,\n            35.0\n          ]\n        }\n      },\n      {\n        \"name\": \"India\",\n        \"pop_est\": 1380004385,\n        \"type\": \"Feature\",\n        \"geometry\": {\n          \"type\": \"Point\",\n          \"coordinates\": [\n            77.0,\n            20.0\n          ]\n        }\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Query Parameters in Marimo\nDESCRIPTION: Shows the usage of mo.query_params to access and set URL query parameters in Marimo notebooks. This functionality enables state persistence through URLs and facilitates bookmarking and sharing specific notebook states when running as an application.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/api/query_params.md#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nmo.query_params\n```\n\n----------------------------------------\n\nTITLE: Parsing Command Line Arguments with mo.cli_args()\nDESCRIPTION: Examples of using mo.cli_args() to parse command line arguments in marimo. This function converts arguments into primitive data types (int, bool, float, str) based on their values.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/api/cli_args.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython notebook.py -- --arg1 value1 --arg2 value2\n# mo.cli_args() == {'arg1': 'value1', 'arg2': 'value2'}\n\npython notebook.py -- --arg1=10 --arg2=true --arg3\n# mo.cli_args() == {'arg1': 10, 'arg2': True, 'arg3': ''}\n\npython notebook.py -- --arg1 10.5 --arg2 hello --arg2 world\n# mo.cli_args() == {'arg1': 10.5, 'arg2': ['hello', 'world']}\n```\n\n----------------------------------------\n\nTITLE: Replacing Output at Specific Index in Marimo (Python)\nDESCRIPTION: The mo.output.replace_at_index() function is used to replace the output at a specific index in a cell's output array in a Marimo notebook.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/api/outputs.md#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nmarimo.output.replace_at_index\n```\n\n----------------------------------------\n\nTITLE: Generating Marimo Notebook with AI via CLI\nDESCRIPTION: Demonstrates how to use the 'marimo new' command to generate a new notebook based on a prompt. This example creates a notebook for plotting an interactive 3D surface with matplotlib.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/generate_with_ai/text_to_notebook.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmarimo new \"Plot an interactive 3D surface with matplotlib.\"\n```\n\n----------------------------------------\n\nTITLE: Lazy Loading UI Elements\nDESCRIPTION: Examples of lazy loading UI elements and data computation using mo.lazy for better performance.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/expensive_notebooks.md#2025-04-19_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport marimo as mo\n\ndata = db.query(\"SELECT * FROM data\")\nmo.lazy(mo.ui.table(data))\n```\n\nLANGUAGE: python\nCODE:\n```\nimport marimo as mo\n\ndef expensive_component():\n    import time\n    time.sleep(1)\n    data = db.query(\"SELECT * FROM data\")\n    return mo.ui.table(data)\n\naccordion = mo.accordion({\n    \"Charts\": mo.lazy(expensive_component)\n})\n```\n\n----------------------------------------\n\nTITLE: Customizing Altair Chart Selection Behavior\nDESCRIPTION: Shows how to customize the selection behavior in Altair charts by disabling automatic selection and implementing custom interval selection. Demonstrates the use of brush selection and chart parameters.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/api/plotting.md#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Create an interval selection\nbrush = alt.selection_interval(encodings=[\"x\"])\n\n_chart = (\n    alt.Chart(traces, height=150)\n    .mark_line()\n    .encode(x=\"index:Q\", y=\"value:Q\", color=\"traces:N\")\n    .add_params(brush) # add the selection to the chart\n)\n\nchart = mo.ui.altair_chart(\n    _chart,\n    # disable automatic selection\n    chart_selection=False,\n    legend_selection=False\n)\nchart # You can now access chart.value to get the selected data\n```\n\n----------------------------------------\n\nTITLE: Wave Plot Parameter Definition\nDESCRIPTION: Two separate cells defining period and amplitude parameters for the wave plot.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/snapshots/dataflow.md.txt#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nperiod = 2 * 3.14159\n\nmo.md(\n    f\"\"\"\n    - `refs: {mo.refs()}`\n    - `defs: {mo.defs()}`\n    \"\"\"\n)\n```\n\nLANGUAGE: python\nCODE:\n```\namplitude = 1\n\nmo.md(\n    f\"\"\"\n    - `refs: {mo.refs()}`\n    - `defs: {mo.defs()}`\n    \"\"\"\n)\n```\n\n----------------------------------------\n\nTITLE: Executing Named Cell in marimo Notebook (Python)\nDESCRIPTION: Shows how to programmatically execute a named cell from a marimo notebook using the cell execution API. This provides fine-grained control over notebook execution.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/coming_from/papermill.md#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom my_notebook import my_cell\n\n# last_expression is the visual output of the cell\n# definitions is a dictionary of the variables defined by the cell\nlast_expression, definitions = my_cell.run()\n```\n\n----------------------------------------\n\nTITLE: Initializing marimo App with Custom CSS in Python\nDESCRIPTION: This snippet demonstrates how to include a custom CSS file in a marimo notebook using the App constructor.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/configuration/theming.md#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\napp = marimo.App(css_file=\"custom.css\")\n```\n\n----------------------------------------\n\nTITLE: Creating and Displaying Marimo Refresh Component\nDESCRIPTION: Creates a refresh selector UI component with predefined interval options and displays it alongside its current value using horizontal stack layout. The refresh component allows users to select from intervals of 1s, 5s, 10s, and 30s.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/api/inputs/refresh.md#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@app.cell\ndef __():\n    refresh = mo.ui.refresh(\n      label=\"Refresh\",\n      options=[\"1s\", \"5s\", \"10s\", \"30s\"]\n    )\n    return\n\n@app.cell\ndef __():\n    mo.hstack([refresh, refresh.value])\n    return\n```\n\n----------------------------------------\n\nTITLE: Embedding Dynamic UI Elements in Markdown\nDESCRIPTION: Demonstrates how to embed multiple UI elements within markdown output to create an interactive todo list.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/recipes.md#2025-04-19_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport random\n\nn_items = random.randint(2, 5)\n\n# Create a dynamic number of elements using `mo.ui.dictionary` and\n# `mo.ui.array`\nelements = mo.ui.dictionary(\n    {\n        \"checkboxes\": mo.ui.array([mo.ui.checkbox() for _ in range(n_items)]),\n        \"texts\": mo.ui.array(\n            [mo.ui.text(placeholder=\"task ...\") for _ in range(n_items)]\n        ),\n    }\n)\n\nmo.md(\n    f\"\"\"\n    Here's a TODO list of {n_items} items\\n\\n\n    \"\"\"\n    + \"\\n\\n\".join(\n        # Iterate over the elements and embed them in markdown\n        [\n            f\"{checkbox} {text}\"\n            for checkbox, text in zip(\n                elements[\"checkboxes\"], elements[\"texts\"]\n            )\n        ]\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Date Range Selection with Marimo Batch\nDESCRIPTION: Shows how to create a date range selector using mo.ui.date components wrapped in a batch element. The batch component combines two date inputs (start and end) into a single interface element with template interpolation.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/api/inputs/batch.md#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n    @app.cell\n    def __():\n        el = mo.md(\"{start} → {end}\").batch(\n            start=mo.ui.date(label=\"Start Date\"),\n            end=mo.ui.date(label=\"End Date\")\n        )\n        el\n        return\n\n    @app.cell\n    def __():\n        el.value\n        return\n```\n\n----------------------------------------\n\nTITLE: Implementing Persistent UI Element State in Python with Marimo\nDESCRIPTION: Demonstrates how to use mo.state to maintain UI element values across cell runs in a marimo notebook. This approach prevents value resets when the cell defining the UI element reruns.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/troubleshooting.md#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Declare state in a separate cell\nget_value, set_value = mo.state(initial_value)\n```\n\nLANGUAGE: python\nCODE:\n```\nelement = mo.ui.slider(0, 10, value=get_value(), on_change=set_value)\n```\n\n----------------------------------------\n\nTITLE: Custom Filtering with Polars\nDESCRIPTION: Demonstrates creating custom filters using Marimo UI elements with Polars dataframes.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/working_with_data/dataframes.md#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport marimo as mo\nimport polars as pl\n\ndf = pl.DataFrame({\n    \"name\": [\"Alice\", \"Bob\", \"Charlie\", \"David\"],\n    \"age\": [25, 30, 35, 40],\n    \"city\": [\"New York\", \"London\", \"Paris\", \"Tokyo\"]\n})\n\nage_filter = mo.ui.slider.from_series(df[\"age\"], label=\"Max age\")\ncity_filter = mo.ui.dropdown.from_series(df[\"city\"], label=\"City\")\n\nmo.hstack([age_filter, city_filter])\n```\n\nLANGUAGE: python\nCODE:\n```\n# Cell 2\nfiltered_df = df.filter((pl.col(\"age\") <= age_filter.value) & (pl.col(\"city\") == city_filter.value))\nmo.ui.table(filtered_df)\n```\n\n----------------------------------------\n\nTITLE: Running marimo Notebook as App - CLI Command\nDESCRIPTION: Basic command line instruction to run a marimo notebook as a web application. The command starts a web server that hosts the notebook as an app with default layout settings.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/apps.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmarimo run notebook.py\n```\n\n----------------------------------------\n\nTITLE: Markdown Admonition Extension\nDESCRIPTION: Example of using admonitions in markdown for highlighting important text\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/outputs.md#2025-04-19_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n/// attention | This is important.\n\nPay attention to this text!\n///\n```\n\n----------------------------------------\n\nTITLE: Implementing In-Memory Caching in Marimo\nDESCRIPTION: Use the mo.cache decorator to cache function outputs in memory. This is useful for expensive computations that may be repeated with the same inputs.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/recipes.md#2025-04-19_snippet_24\n\nLANGUAGE: python\nCODE:\n```\n@mo.cache\ndef compute_predictions(problem_parameters):\n   # replace with your own function/parameters\n   ...\n```\n\n----------------------------------------\n\nTITLE: Using mo.stop Function for Conditional Cell Execution Control\nDESCRIPTION: Shows how to use marimo.stop to conditionally stop cell execution and control the flow of notebook operations. This allows for conditional termination of cell execution based on specific conditions.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/examples/running_cells/stop.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Stopping execution\\n\\nUse [`mo.stop`][marimo.stop] to conditionally stop execution of a cell.\n```\n\n----------------------------------------\n\nTITLE: Creating Altair Bar Chart for Date Data in Python\nDESCRIPTION: This snippet creates a bar chart using Altair for date data. It bins the temporal data on the x-axis and formats the axis labels as YYYY-MM-DD.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_data/snapshots/charts.txt#2025-04-19_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n_chart = (\n    alt.Chart(df)\n    .mark_bar()\n    .encode(\n        x=alt.X(\n            \"some_column\",\n            type=\"temporal\",\n            bin=alt.Bin(maxbins=20),\n            axis=alt.Axis(format=\"%Y-%m-%d\")\n        ),\n        y=alt.Y(\"count()\", type=\"quantitative\"),\n    )\n    .properties(width=\"container\")\n)\n_chart\n```\n\n----------------------------------------\n\nTITLE: Using mo.stop for Conditional Execution in Python\nDESCRIPTION: Demonstrates how to use mo.stop to conditionally halt cell execution based on a condition. Useful for preventing expensive function calls from running unnecessarily.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/expensive_notebooks.md#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# if condition is True, the cell will stop executing after mo.stop() returns\nmo.stop(condition)\n# this won't be called if condition is True\nexpensive_function_call()\n```\n\n----------------------------------------\n\nTITLE: Displaying JSON Data in Tree Format with Marimo\nDESCRIPTION: This snippet demonstrates how to use the mo.json method to render a JSON string as an interactive tree visualization in a Marimo application. The example displays a JSON array containing string entries and a nested object with the label 'A JSON in tree..'.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/api/layouts/json.md#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@app.cell\ndef __():\n    mo.json(\n        '[\"entry\", \"another entry\", {\"key\": [0, 1, 2]}]',\n        label=\"A JSON in tree..\",\n    )\n    return\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Generator Function with Yield in Python\nDESCRIPTION: This snippet demonstrates how to create a basic generator function using the 'yield' keyword. The function 'count_up_to' generates a sequence of numbers up to a specified limit.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_runtime/snapshots/docstrings_keyword.txt#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef count_up_to(limit):\n    count = 1\n    while count <= limit:\n        yield count\n        count += 1\n\nfor number in count_up_to(5):\n    print(number)\n```\n\n----------------------------------------\n\nTITLE: Importing and Using AnyWidget in Marimo (Python)\nDESCRIPTION: Demonstrates how to import and use an existing AnyWidget (ScatterWidget from drawdata) in a Marimo notebook. Shows how to access the widget's value and specific properties.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/api/inputs/anywidget.md#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# pip install drawdata\nfrom drawdata import ScatterWidget\n\nwidget = mo.ui.anywidget(ScatterWidget())\n\n# In another cell, you can access the widget's value\nwidget.value\n\n# You can also access the widget's specific properties\nwidget.data\nwidget.data_as_polars\n```\n\n----------------------------------------\n\nTITLE: Defining Test Functions in marimo Notebook Cells (Python)\nDESCRIPTION: This snippet demonstrates how to define test functions and classes within marimo notebook cells. It includes examples of regular test functions, parameterized tests, and test classes.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/testing/pytest.md#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@app.cell\ndef __():\n    import pytest\n    def inc(x):\n        return x + 1\n    return inc, pytest\n\n@app.cell\ndef __(inc, pytest):\n    class TestBlock:\n        @staticmethod\n        def test_fails():\n            assert inc(3) == 5, \"This test fails\"\n\n        @staticmethod\n        def test_sanity():\n            assert inc(3) == 4, \"This test passes\"\n\n    @pytest.mark.parametrize((\"x\", \"y\"), [(3, 4), (4, 5)])\n    def test_parameterized(x, y):\n        assert inc(x) == y\n    return\n```\n\n----------------------------------------\n\nTITLE: Importing and Using text_area in Marimo\nDESCRIPTION: This snippet demonstrates how to import and use the text_area function from marimo.ui to create a multi-line text input area. It shows various configuration options including placeholder text, initial value, and size settings.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/api/inputs/text_area.md#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport marimo as mo\n\nmo.md(\"## Text Area\")\n\ntextarea = mo.ui.text_area(\n    placeholder=\"Enter some text...\",\n    value=\"Initial value\",\n    rows=5,\n    cols=50\n)\n\nmo.md(f\"You entered: {textarea}\")\n```\n\n----------------------------------------\n\nTITLE: Displaying marimo UI Elements Table in Markdown\nDESCRIPTION: This code snippet shows a markdown table listing various UI elements available in marimo.ui, along with brief descriptions of each element's functionality.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/api/inputs/index.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Element | Description |\n|---------|-------------|\n| [`marimo.ui.array`][marimo.ui.array] | Create array inputs |\n| [`marimo.ui.batch`][marimo.ui.batch] | Batch operations |\n| [`marimo.ui.button`][marimo.ui.button] | Create buttons |\n| [`marimo.ui.chat`][marimo.ui.chat] | Create chat interfaces |\n| [`marimo.ui.checkbox`][marimo.ui.checkbox] | Create checkboxes |\n| [`marimo.ui.code_editor`][marimo.ui.code_editor] | Create code editors |\n| [`marimo.ui.dataframe`][marimo.ui.dataframe] | Interactive dataframes |\n| [`marimo.ui.data_explorer`][marimo.ui.data_explorer] | Explore data |\n| [`marimo.ui.date`][marimo.ui.date] | Date picker |\n| [`marimo.ui.datetime`][marimo.ui.datetime] | Date and time picker |\n| [`marimo.ui.date_range`][marimo.ui.date_range] | Date range picker |\n| [`marimo.ui.dictionary`][marimo.ui.dictionary] | Dictionary inputs |\n| [`marimo.ui.dropdown`][marimo.ui.dropdown] | Create dropdowns |\n| [`marimo.ui.file`][marimo.ui.file] | File uploads |\n| [`marimo.ui.file_browser`][marimo.ui.file_browser] | Browse files |\n| [`marimo.ui.form`][marimo.ui.form] | Create forms |\n| [`marimo.ui.microphone`][marimo.ui.microphone] | Record audio |\n| [`marimo.ui.multiselect`][marimo.ui.multiselect] | Multiple selection |\n| [`marimo.ui.number`][marimo.ui.number] | Number inputs |\n| [`marimo.ui.radio`][marimo.ui.radio] | Radio buttons |\n| [`marimo.ui.range_slider`][marimo.ui.range_slider] | Range sliders |\n| [`marimo.ui.refresh`][marimo.ui.refresh] | Refresh buttons |\n| [`marimo.ui.run_button`][marimo.ui.run_button] | Run buttons |\n| [`marimo.ui.slider`][marimo.ui.slider] | Create sliders |\n| [`marimo.ui.switch`][marimo.ui.switch] | Toggle switches |\n| [`marimo.ui.tabs`][marimo.ui.tabs] | Tabbed interfaces |\n| [`marimo.ui.table`][marimo.ui.table] | Interactive tables |\n| [`marimo.ui.text`][marimo.ui.text] | Text inputs |\n| [`marimo.ui.text_area`][marimo.ui.text_area] | Multiline text inputs |\n```\n\n----------------------------------------\n\nTITLE: Defining Top-Level Function and Class in Marimo Notebook\nDESCRIPTION: This snippet demonstrates how to define a top-level function and class in a marimo notebook using the @app.function and @app.class_definition decorators. These definitions can be imported and used in other Python scripts or notebooks.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/reusing_functions.md#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@app.function\ndef my_utility_function(x):\n    return x * 2\n\n@app.class_definition\nclass DataProcessor:\n    def __init__(self, data):\n        self.data = data\n\n    def process(self):\n        return [x * 2 for x in self.data]\n```\n\n----------------------------------------\n\nTITLE: Using run_button in Marimo UI\nDESCRIPTION: This example demonstrates how to create and use a run_button component in Marimo. The run_button allows executing code when clicked, optionally with arguments. The example shows various configurations including basic usage, passing arguments, and handling button appearance.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/api/inputs/run_button.md#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport marimo as mo\n\n# Create a run button\n# Click to increment\n\nmo.md(\n    \"\"\"\n# Run Button\n\nA run button executes code when clicked.\n\n## Basic usage\n\nRun buttons execute code when clicked. The code to run is specified as a string.\n\"\"\"\n)\n\n\n@mo.cell\ndef _():\n    counter = mo.state(0)\n    run_button = mo.ui.run_button(\"counter.set(counter.value + 1)\")\n\n    mo.md(f\"Count: {counter.value}\"), run_button\n\n\nmo.md(\n    \"\"\"\n## Passing arguments\n\nYou can pass arguments to a run button's function using the `args` parameter. Arguments are passed as a tuple.\n\"\"\"\n)\n\n\n@mo.cell\ndef _():\n    counter = mo.state(0)\n\n    def increment(n):\n        counter.set(counter.value + n)\n\n    mo.md(f\"Count: {counter.value}\"), mo.ui.run_button(\n        on_click=increment, args=(10,), label=\"+10\"\n    )\n\n\nmo.md(\n    \"\"\"\n## Styling\n\nA run button can be styled with a `kind` and `size`. The available kinds are: `\"default\"`, `\"primary\"`, `\"success\"`, `\"danger\"`, and the available sizes are: `\"sm\"`, `\"md\"`, `\"lg\"`.\n\"\"\"\n)\n\n\n@mo.cell\ndef _():\n    variants = [\"default\", \"primary\", \"success\", \"danger\"]\n    output = mo.ui.output()\n\n    def on_click(kind):\n        output.value = f\"Clicked {kind} button!\"\n        return output\n\n    mo.hstack(\n        [mo.ui.run_button(on_click=on_click, args=(kind,), kind=kind) for kind in variants]\n    )\n\n\nmo.md(\n    \"\"\"\n## Misc\n\nYou can disable a button and display a loading spinner when an operation is in progress.\n\"\"\"\n)\n\n\n@mo.cell\ndef _():\n    counter = mo.state(0)\n    loading = mo.state(False)\n\n    async def increment_async():\n        import asyncio\n\n        loading.set(True)\n        await asyncio.sleep(2)  # Simulate some async work\n        counter.set(counter.value + 1)\n        loading.set(False)\n\n    mo.md(f\"Count: {counter.value}\"), mo.ui.run_button(\n        on_click=increment_async, loading=loading.value, disabled=loading.value\n    )\n\n```\n\n----------------------------------------\n\nTITLE: Creating Interactive Forms with Marimo in Markdown\nDESCRIPTION: Shows how to create an interactive form using Marimo's UI components within a hidden code cell in Markdown format.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/marimo/_tutorials/markdown_format.md#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nform = (\n    mo.md('''\n    **Just how great is markdown?.**\n\n    {markdown_is_awesome}\n\n    {marimo_is_amazing}\n''')\n    .batch(\n        markdown_is_awesome=mo.ui.text(label=\"How much do you like markdown?\", placeholder=\"It is pretty swell 🌊\"),\n        marimo_is_amazing=mo.ui.slider(label=\"How much do you like marimo?\", start=0, stop=11, value=11),\n    )\n    .form(show_clear_button=True, bordered=False)\n)\nform\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Dropdowns in Marimo\nDESCRIPTION: Demonstrates how to create dropdown components in Marimo with different option formats. The first dropdown uses a simple list of options, while the second uses a dictionary for key-value pairs with an initial selected value. The code then displays both dropdowns alongside their current values.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/api/inputs/dropdown.md#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@app.cell\ndef __():\n    dropdown = mo.ui.dropdown(options=[\"Apples\", \"Oranges\", \"Pears\"], label=\"choose fruit\")\n    dropdown_dict = mo.ui.dropdown(options={\"Apples\":1, \"Oranges\":2, \"Pears\":3},\n                            value=\"Apples\", # initial value\n                            label=\"choose fruit with dict options\")\n    return\n\n@app.cell\ndef __():\n    mo.vstack([mo.hstack([dropdown, mo.md(f\"Has value: {dropdown.value}\")]),\n    mo.hstack([dropdown_dict, mo.md(f\"Has value: {dropdown_dict.value} and selected_key {dropdown_dict.selected_key}\")]),\n                ])\n    return\n```\n\n----------------------------------------\n\nTITLE: Creating Altair Bar Chart for String Data in Python\nDESCRIPTION: This snippet creates a bar chart using Altair for string data. It displays the nominal data on the y-axis and the count on the x-axis.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_data/snapshots/charts.txt#2025-04-19_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\n_chart = (\n    alt.Chart(df)\n    .mark_bar()\n    .encode(\n        y=alt.Y(\"some_column\", type=\"nominal\"),\n        x=alt.X(\"count()\", type=\"quantitative\"),\n    )\n    .properties(width=\"container\")\n)\n_chart\n```\n\n----------------------------------------\n\nTITLE: Capturing Stdout in Marimo (Python)\nDESCRIPTION: The marimo.capture_stdout() function is used to capture stdout output in a Marimo notebook, allowing for custom handling of print statements and other console output.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/api/outputs.md#2025-04-19_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nmarimo.capture_stdout\n```\n\n----------------------------------------\n\nTITLE: Complete marimo Notebook with Test Functions (Python)\nDESCRIPTION: This snippet presents a full marimo notebook file with various test functions and configurations. It includes imports, helper functions, and different types of test cases using pytest.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/testing/pytest.md#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# content of test_notebook.py\nimport marimo\n\n__generated_with = \"0.10.6\"\napp = marimo.App()\n\n\n@app.cell\ndef _():\n    def inc(x):\n        return x + 1\n    return (inc,)\n\n\n@app.cell\ndef test_fails(inc):\n    assert inc(3) == 5, \"This test fails\"\n\n\n@app.cell\ndef test_sanity(inc):\n    assert inc(3) == 4, \"This test passes\"\n\n@app.cell\ndef collection_of_tests(inc, pytest):\n    @pytest.mark.parametrize((\"x\", \"y\"), [(3, 4), (4, 5)])\n    def test_answer(x, y):\n        assert inc(x) == y, \"These tests should pass.\"\n\n@app.cell\ndef imports():\n    import pytest\n    return pytest\n```\n\n----------------------------------------\n\nTITLE: Using mo.stop for Conditional Execution in Python\nDESCRIPTION: Demonstrates how to use mo.stop to conditionally halt cell execution and integrate with run buttons\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/coming_from/jupyter.md#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# if condition is True, the cell will stop executing after mo.stop() returns\nmo.stop(condition)\n# this won't be called if condition is True\nexpensive_function_call()\n```\n\n----------------------------------------\n\nTITLE: Creating Altair Bar Chart for Boolean Data in Python\nDESCRIPTION: This snippet creates a bar chart using Altair for boolean data. It encodes the x-axis with a nominal data type and the y-axis with a quantitative count.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_data/snapshots/charts.txt#2025-04-19_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n_chart = (\n    alt.Chart(df)\n    .mark_bar()\n    .encode(\n        x=alt.X(\"some_column\", type=\"nominal\"),\n        y=alt.Y(\"count()\", type=\"quantitative\"),\n    )\n    .properties(width=\"container\")\n)\n_chart\n```\n\n----------------------------------------\n\nTITLE: Progress Bar Implementation\nDESCRIPTION: Shows how to use progress bar functionality similar to TQDM\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/outputs.md#2025-04-19_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# mo.status.progress_bar is similar to TQDM\nfor i in mo.status.progress_bar(range(10)):\n  print(i)\n\n```\n\n----------------------------------------\n\nTITLE: Templated Prompts with Variable Placeholders in Python\nDESCRIPTION: Demonstrates using templated prompts with variable placeholders in the chat UI. When a prompt contains {{var}} syntax, Marimo generates a form for users to fill in the variables dynamically.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/api/inputs/chat.md#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nmo.ui.chat(\n    mo.ai.llm.openai(\"gpt-4o\"),\n    prompts=[\n        \"What is the capital of France?\",\n        \"What is the capital of Germany?\",\n        \"What is the capital of {{country}}?\",\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing and Running Marimo Application in Python\nDESCRIPTION: This snippet creates a Marimo app, defines a cell that prints a greeting message, and runs the app if the script is executed directly. It demonstrates the basic structure of a Marimo application.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/snapshots/remote_ipynb_to_marimo.txt#2025-04-19_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport marimo\n\n\napp = marimo.App()\n\n\n@app.cell\ndef _():\n    print('Hello from Remote Notebook!')\n    return\n\n\nif __name__ == \"__main__\":\n    app.run()\n```\n\n----------------------------------------\n\nTITLE: Connecting to MotherDuck Database using Python\nDESCRIPTION: Python code to connect to MotherDuck database using DuckDB\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/integrations/motherduck.md#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport duckdb\n# Connect to MotherDuck\nduckdb.sql(\"ATTACH IF NOT EXISTS 'md:my_db'\")\n```\n\n----------------------------------------\n\nTITLE: Creating Microphone Input with Audio Playback in Marimo\nDESCRIPTION: Creates a microphone input component with a custom label and displays it alongside an audio player that plays back the recorded audio. Uses mo.ui.microphone for input and mo.audio for playback, arranged horizontally using mo.hstack.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/api/inputs/microphone.md#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@app.cell\ndef __():\n    microphone = mo.ui.microphone(label=\"Drop a beat!\")\n    return\n\n@app.cell\ndef __():\n    mo.hstack([microphone, mo.audio(microphone.value)])\n    return\n```\n\n----------------------------------------\n\nTITLE: Converting Jupyter notebooks to marimo\nDESCRIPTION: Command to automatically convert Jupyter notebooks (.ipynb) to marimo notebook format (.py) using the CLI converter.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/README.md#2025-04-19_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nmarimo convert your_notebook.ipynb > your_notebook.py\n```\n\n----------------------------------------\n\nTITLE: Displaying marimo Integrations Table in Markdown\nDESCRIPTION: This code snippet presents a markdown table listing various integrations available in marimo, including interactive chart options and custom widget support.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/api/inputs/index.md#2025-04-19_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Integration | Description |\n|-------------|-------------|\n| [`marimo.ui.altair_chart`][marimo.ui.altair_chart] | Interactive Altair charts |\n| [`marimo.ui.plotly`][marimo.ui.plotly] | Interactive Plotly charts |\n| [`marimo.mpl.interactive`][marimo.mpl.interactive] | Interactive Matplotlib plots |\n| [`marimo.ui.anywidget`][marimo.ui.anywidget] | Custom widgets |\n```\n\n----------------------------------------\n\nTITLE: Building and Running Docker Container for Marimo\nDESCRIPTION: Commands for building a Docker image from the Dockerfile, running the container with port mapping, and accessing the application. Maps port 8080 from the container to the host machine.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docker/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Build your image, and tag it as my_app\ndocker build -t my_app . -f docker/Dockerfile\n\n# Start your container, mapping port 8080\ndocker run -p 8080:8080 -it my_app\n\n# Visit http://localhost:8080\n```\n\n----------------------------------------\n\nTITLE: Creating a Dropdown Menu for Form Examples in Marimo\nDESCRIPTION: Create a dropdown menu with predefined examples for populating a form. This is useful for illustrating complex API requests or database queries.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/recipes.md#2025-04-19_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nexamples = mo.ui.dropdown(\n    options={\n        \"ex 1\": {\"t1\": \"hello\", \"t2\": \"world\"},\n        \"ex 2\": {\"t1\": \"marimo\", \"t2\": \"notebook\"},\n    },\n    value=\"ex 1\",\n    label=\"examples\",\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Top-Level Functions and Classes in Marimo\nDESCRIPTION: Shows how to define top-level functions and classes in a Marimo notebook using app.setup, app.function, and app.class_definition decorators.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/editor_features/watching.md#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nwith app.setup:\n    CONSTANT: int = 1\n    import marimo as mo\n\n@app.function\ndef my_function(x): ...\n\n@app.class_definition\nclass MyClass: ...\n```\n\n----------------------------------------\n\nTITLE: Implementing Conditional Output in Python with Marimo\nDESCRIPTION: Shows how to conditionally display output using an if expression. The snippet demonstrates hiding or showing different outputs based on a boolean condition.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/recipes.md#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# condition is a boolean, True of False\ncondition = True\n\"condition is True\" if condition else None\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic State Counter in Python\nDESCRIPTION: Creates a basic state counter using mo.state() which returns getter and setter functions. The initial value is set to 0.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/state.md#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nget_counter, set_counter = mo.state(0)\n```\n\n----------------------------------------\n\nTITLE: Creating Refresh Timer in Marimo\nDESCRIPTION: Creates a UI refresh timer that fires every second using marimo's refresh component.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/recipes.md#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nrefresh = mo.ui.refresh(default_interval=\"1s\")\n# This outputs a timer that fires once a second\nrefresh\n```\n\n----------------------------------------\n\nTITLE: Creating Histogram with Altair in Python\nDESCRIPTION: Creates a histogram visualization using Altair, binning values from column 'A' on x-axis and showing counts on y-axis. The chart is configured to use container width for responsive sizing.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_data/snapshots/column_preview_int_chart_code.txt#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n_chart = (\n    alt.Chart(table)\n    .mark_bar()\n    .encode(\n        x=alt.X(\"A\", type=\"quantitative\", bin=True),\n        y=alt.Y(\"count()\", type=\"quantitative\"),\n    )\n    .properties(width=\"container\")\n)\n_chart\n```\n\n----------------------------------------\n\nTITLE: Embedding Plot in Markdown\nDESCRIPTION: Shows how to embed a matplotlib figure in markdown using mo.as_html()\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/outputs.md#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nmo.md(\n  f\"\"\"\n  Here's a plot!\n\n  {mo.as_html(figure)}\n  \"\"\"\n)\n```\n\n----------------------------------------\n\nTITLE: Layout Implementation - Columns\nDESCRIPTION: Demonstrates how to create multi-column layouts in both frameworks.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/coming_from/streamlit.md#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ncol1, col2 = st.columns(2)\nwith col1:\n    st.write(\"Column 1\")\nwith col2:\n    st.write(\"Column 2\")\n```\n\nLANGUAGE: python\nCODE:\n```\nmo.hstack([\n    mo.md(\"Column 1\"),\n    mo.md(\"Column 2\")\n])\n```\n\n----------------------------------------\n\nTITLE: Private Variable Example\nDESCRIPTION: Demonstrates the use of underscore-prefixed private variables in Marimo.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/snapshots/dataflow.md.txt#2025-04-19_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n_private_variable, _ = 1, 2\n_private_variable, _\n```\n\nLANGUAGE: python\nCODE:\n```\n_private_variable, _ = 3, 4\n_private_variable, _\n```\n\nLANGUAGE: python\nCODE:\n```\n# `_private_variable` and `_` are not defined in this cell\n_private_variable, _\n```\n\n----------------------------------------\n\nTITLE: Capturing Stderr in Marimo (Python)\nDESCRIPTION: The marimo.capture_stderr() function is used to capture stderr output in a Marimo notebook, allowing for custom handling of error messages and other error-related console output.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/api/outputs.md#2025-04-19_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nmarimo.capture_stderr\n```\n\n----------------------------------------\n\nTITLE: Authenticating and Reading Data from Google Sheets in Python\nDESCRIPTION: This Python code demonstrates how to authenticate with Google Sheets using a service account, open a specific sheet, and read its data into a pandas DataFrame for display in Marimo.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/integrations/google_sheets.md#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Cell 1 - Load libraries\nimport marimo as mo\nimport pandas as pd\nimport os\nimport gspread\nfrom oauth2client.service_account import ServiceAccountCredentials\n\n# Authenticate with Google Sheets\nscope = [\n    \"https://spreadsheets.google.com/feeds\",\n    \"https://www.googleapis.com/auth/drive\",\n]\ncredentials = ServiceAccountCredentials.from_json_keyfile_name(\n    os.environ[\"GOOGLE_APPLICATION_CREDENTIALS\"], scope\n)\ngc = gspread.authorize(credentials)\n\n# Cell 2 - Load the sheet\nwks = gc.open(\"marimo\").sheet1\nmo.ui.table(pd.DataFrame(wks.get_all_records()))\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow for Deploying Marimo Notebooks (YAML)\nDESCRIPTION: GitHub Actions workflow configuration for automatically exporting and deploying Marimo notebooks to GitHub Pages. This workflow runs on push events, exports the notebook, and deploys it to GitHub Pages.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/publishing/github_pages.md#2025-04-19_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n    build:\n        runs-on: ubuntu-latest\n\n        steps:\n            # ... checkout and install dependencies\n\n            - name: 📄 Export notebook\n              run: |\n                  marimo export html-wasm notebook.py -o path/to/output --mode run\n\n            - name: 📦 Upload Pages Artifact\n              uses: actions/upload-pages-artifact@v3\n              with:\n                  path: path/to/output\n\n    deploy:\n        needs: build\n        runs-on: ubuntu-latest\n        environment:\n            name: github-pages\n            url: ${{ steps.deployment.outputs.page_url }}\n\n        permissions:\n            pages: write\n            id-token: write\n\n        steps:\n            - name: 🌐 Deploy to GitHub Pages\n              id: deployment\n              uses: actions/deploy-pages@v4\n              with:\n                  artifact_name: github-pages\n```\n\n----------------------------------------\n\nTITLE: Creating Interactive UI Elements in Marimo Markdown\nDESCRIPTION: Shows how to create an interactive slider UI element in a Marimo Markdown notebook.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/marimo/_tutorials/markdown_format.md#2025-04-19_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nsample_count = mo.ui.slider(1, 1000, value=1000, label=\"Sample Count\")\nsample_count\n```\n\n----------------------------------------\n\nTITLE: Building and Running Marimo Docker Container Locally\nDESCRIPTION: These bash commands demonstrate how to build a Docker image for the Marimo application, tag it as 'my_app', and run the container while mapping port 8080. This allows for local testing of the containerized application.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/deploying/deploying_docker.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Build your image, and tag it as my_app\ndocker build -t my_app .\n\n# Start your container, mapping port 8080\ndocker run -p 8080:8080 -it my_app\n\n# Visit http://localhost:8080\n```\n\n----------------------------------------\n\nTITLE: HTML Pre-rendering Script\nDESCRIPTION: Python script using Playwright to pre-render HTML exports for direct serving.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/exporting.md#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# /// script\n# requires-python = \">=3.9\"\n# dependencies = [\n#     \"playwright\",\n# ]\n# ///\n\nimport os\nimport subprocess\nfrom playwright.sync_api import sync_playwright\n\ninput_file = \"input.html\"\noutput_file = \"output.html\"\n\nsubprocess.run([\"playwright\", \"install\", \"chromium-headless-shell\"], check=True)\n\nwith sync_playwright() as p:\n    with p.chromium.launch(headless=True) as browser:\n        page = browser.new_page()\n        page.goto(\n            f\"file:///{os.path.abspath(input_file)}\",\n            wait_until=\"networkidle\",\n        )\n        with open(output_file, \"w\", encoding=\"utf-8\") as f:\n            f.write(page.content())\n```\n\n----------------------------------------\n\nTITLE: Embedding Audio in Marimo Application using Python\nDESCRIPTION: This code snippet demonstrates how to use the mo.audio() function to embed an audio file in a Marimo application. It uses a URL pointing to a Chopin prelude as the audio source.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/api/media/audio.md#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@app.cell\ndef __():\n    _src = \"https://upload.wikimedia.org/wikipedia/commons/8/8c/Ivan_Ili%C4%87-Chopin_-_Prelude_no._1_in_C_major.ogg\"\n    mo.audio(_src)\n    return\n```\n\n----------------------------------------\n\nTITLE: Creating a Counter Button in Marimo\nDESCRIPTION: Create a button that counts the number of times it has been clicked. This is a helpful building block for reacting to button clicks.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/recipes.md#2025-04-19_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nbutton = mo.ui.button(value=0, on_click=lambda count: count + 1)\nbutton\n```\n\n----------------------------------------\n\nTITLE: Configuring Vega-Lite Scatter Plot with CSV Data\nDESCRIPTION: Defines a Vega-Lite visualization specification that creates a scatter plot from base64 encoded CSV data. The plot is configured with 300x300 dimensions, uses point marks, and maps the 'values' field to the x-axis quantitatively.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_plugins/ui/_impl/snapshots/parse_spec_duckdb.txt#2025-04-19_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"config\": {\n    \"view\": {\n      \"continuousWidth\": 300,\n      \"continuousHeight\": 300\n    }\n  },\n  \"data\": {\n    \"url\": \"data:text/csv;base64,InZhbHVlcyIKMQoyCjMK\",\n    \"format\": {\n      \"type\": \"csv\"\n    }\n  },\n  \"mark\": {\n    \"type\": \"point\"\n  },\n  \"encoding\": {\n    \"x\": {\n      \"field\": \"values\",\n      \"type\": \"quantitative\"\n    }\n  },\n  \"$schema\": \"https://vega.github.io/schema/vega-lite/v5.20.1.json\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing SQL dependencies for marimo with conda\nDESCRIPTION: Command to install marimo with SQL support using conda package manager.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/working_with_data/sql.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nconda install -c conda-forge marimo duckdb polars\n```\n\n----------------------------------------\n\nTITLE: Creating and Displaying a Range Slider in Marimo\nDESCRIPTION: This code snippet demonstrates how to create a range slider using Marimo's UI components and display it alongside its current value. The range slider is configured with specific start, stop, step, and initial values.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/api/inputs/range_slider.md#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@app.cell\ndef __():\n    range_slider = mo.ui.range_slider(start=1, stop=10, step=2, value=[2, 6], full_width=True)\n    return\n\n@app.cell\ndef __():\n    mo.hstack([range_slider, mo.md(f\"Has value: {range_slider.value}\")])\n    return\n```\n\n----------------------------------------\n\nTITLE: Implementing Timer-Based Cell Execution\nDESCRIPTION: Demonstrates how to use the refresh timer to periodically update cell content with random emoji output.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/recipes.md#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport random\n\n# This cell will run once a second!\nrefresh\n\nmo.md(\"#\" + \"🍃\" * random.randint(1, 10))\n```\n\n----------------------------------------\n\nTITLE: Plotting with Matplotlib in Marimo Markdown\nDESCRIPTION: Demonstrates a simple plot using Matplotlib within a Marimo Python cell in Markdown format.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/marimo/_tutorials/markdown_format.md#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport matplotlib.pyplot as plt\n\nplt.plot([1, 2, 3, 4])\nplt.gca()\n```\n\n----------------------------------------\n\nTITLE: Clearing Cell Output in Marimo (Python)\nDESCRIPTION: The mo.output.clear() function is used to remove all content from the output of a cell in a Marimo notebook.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/api/outputs.md#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nmarimo.output.clear\n```\n\n----------------------------------------\n\nTITLE: Creating Dynamic UI Element Arrays\nDESCRIPTION: Demonstrates creating a dynamic array of UI elements using mo.ui.array.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/recipes.md#2025-04-19_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport random\n\n# instead of random.randint, in your notebook you'd use the value of\n# an upstream UI element or other Python object\narray = mo.ui.array([mo.ui.text() for i in range(random.randint(1, 10))])\narray\n```\n\n----------------------------------------\n\nTITLE: Defining a Python Function with Two Arguments\nDESCRIPTION: This snippet defines a Python function named 'my_func' that takes two parameters: 'arg1' and 'arg2'. The function's implementation is not shown, but it includes a docstring describing it as a simple function.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_runtime/snapshots/docstrings_function_external.txt#2025-04-19_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\ndef my_func(arg1, arg2)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Variable Declaration and Mutation in Python\nDESCRIPTION: This snippet illustrates the correct way to declare and mutate variables in marimo notebooks. It demonstrates how to avoid splitting declarations and mutations across multiple cells, which can lead to tracking issues.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/best_practices.md#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nl = [1, 2, 3]\n...\nl.append(new_item())\n```\n\n----------------------------------------\n\nTITLE: Using PDB breakpoints in Marimo cells\nDESCRIPTION: This code snippet demonstrates how to insert a breakpoint in a Marimo cell using Python's breakpoint() function. The example includes a division by zero error that would be caught at the breakpoint before execution reaches the error.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/examples/running_cells/debugging.md#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nx = 0\nbreakpoint()\n1 / x\n```\n\n----------------------------------------\n\nTITLE: Marimo Available Hotkeys Reference Table\nDESCRIPTION: Complete reference table of all available hotkey commands in Marimo, organized by functionality including cell operations, completion controls, global commands, and markdown formatting shortcuts. Can be accessed and modified via Ctrl/Cmd-Shift-h or marimo.toml configuration.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/editor_features/hotkeys.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Hotkey                      |\n| --------------------------- |\n| `cell.aiCompletion`         |\n| `cell.cellActions`          |\n| `cell.complete`             |\n| `cell.createAbove`          |\n| `cell.createBelow`          |\n| `cell.delete`               |\n| `cell.findAndReplace`       |\n| `cell.focusDown`            |\n| `cell.focusUp`              |\n| `cell.fold`                 |\n| `cell.foldAll`              |\n| `cell.format`               |\n| `cell.goToDefinition`       |\n| `cell.hideCode`             |\n| `cell.moveUp`               |\n| `cell.moveDown`             |\n| `cell.moveLeft`             |\n| `cell.moveRight`            |\n| `cell.redo`                 |\n| `cell.run`                  |\n| `cell.runAndNewAbove`       |\n| `cell.runAndNewBelow`       |\n| `cell.selectNextOccurrence` |\n| `cell.sendToBottom`         |\n| `cell.sendToTop`            |\n| `cell.splitCell`            |\n| `cell.undo`                 |\n| `cell.unfold`               |\n| `cell.unfoldAll`            |\n| `cell.viewAsMarkdown`       |\n| `completion.moveDown`        |\n| `completion.moveUp`          |\n| `global.commandPalette`     |\n| `global.focusBottom`        |\n| `global.focusTop`           |\n| `global.foldCode`           |\n| `global.formatAll`          |\n| `global.hideCode`           |\n| `global.interrupt`          |\n| `global.runStale`           |\n| `global.save`               |\n| `global.showHelp`           |\n| `global.toggleLanguage`     |\n| `global.toggleTerminal`     |\n| `global.toggleSidebar`      |\n| `global.unfoldCode`         |\n| `markdown.blockquote`       |\n| `markdown.bold`             |\n| `markdown.code`             |\n| `markdown.italic`           |\n| `markdown.link`             |\n| `markdown.orderedList`      |\n| `markdown.unorderedList`    |\n```\n\n----------------------------------------\n\nTITLE: Creating a Toggle Button in Marimo\nDESCRIPTION: Create a button that toggles between True and False states. This can be used to switch between two different outputs or behaviors.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/recipes.md#2025-04-19_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nbutton = mo.ui.button(value=False, on_click=lambda value: not value)\nbutton\n```\n\n----------------------------------------\n\nTITLE: Creating Binned Bar Chart with Altair\nDESCRIPTION: Creates a bar chart visualization using Altair's declarative API. The chart bins a float column on the x-axis and shows count on the y-axis, with responsive container width. Uses mark_bar() for bar visualization and encode() for mapping data to visual properties.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_data/snapshots/column_preview_float_chart_code.txt#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n_chart = (\n    alt.Chart(table)\n    .mark_bar()\n    .encode(\n        x=alt.X(\"float_col\", type=\"quantitative\", bin=True),\n        y=alt.Y(\"count()\", type=\"quantitative\"),\n    )\n    .properties(width=\"container\")\n)\n_chart\n```\n\n----------------------------------------\n\nTITLE: Exporting Marimo Notebook as Editable Notebook (Bash)\nDESCRIPTION: Command to export a Marimo notebook as an editable WebAssembly-powered HTML notebook. This allows users to interact with and modify the notebook in a web browser.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/publishing/github_pages.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmarimo export html-wasm notebook.py -o output_dir --mode edit\n```\n\n----------------------------------------\n\nTITLE: Implementing DateTime Input in Marimo\nDESCRIPTION: Creates a datetime picker component that allows selection of both date and time. Displays the selected value using horizontal stack layout.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/api/inputs/dates.md#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n    @app.cell\n    def __():\n        datetime = mo.ui.datetime(label=\"Start Date\")\n        return\n\n    @app.cell\n    def __():\n        mo.hstack([datetime, mo.md(f\"Has value: {datetime.value}\")])\n        return\n```\n\n----------------------------------------\n\nTITLE: Creating Interactive UI Elements in marimo (Python)\nDESCRIPTION: This code creates a slider UI element using marimo's built-in library. It showcases how marimo integrates interactive elements directly into the notebook.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/snapshots/marimo_for_jupyter_users.md.txt#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport marimo as mo\n```\n\nLANGUAGE: python\nCODE:\n```\nslider = mo.ui.slider(start=1, stop=10, label=\"$x$\")\nslider\n```\n\nLANGUAGE: python\nCODE:\n```\nslider.value\n```\n\n----------------------------------------\n\nTITLE: Implementing In-Memory Caching with mo.cache in Python\nDESCRIPTION: This snippet demonstrates how to use mo.cache to cache expensive function results. It creates a simulated slow function with a delay, then shows how to cache it for improved performance on subsequent calls with the same arguments.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/examples/running_cells/memory_cache.md#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport marimo as mo\nimport time\n\n\n# Simulate an expensive function\ndef slow_function(x):\n    \"\"\"A slow function that computes x^2 after a delay.\"\"\"\n    print(f\"Computing {x}^2 ...\")\n    time.sleep(1)\n    return x**2\n\n\n# Call the slow function directly (without caching)\nstart = time.time()\nresult1 = slow_function(42)\nelapsed1 = time.time() - start\n\nstart = time.time()\n# Second call with same argument - still takes time!\nresult2 = slow_function(42)\nelapsed2 = time.time() - start\n\nmo.md(f\"Without caching:\\n- First call: {elapsed1:.2f} seconds\\n- Second call: {elapsed2:.2f} seconds\")\n\n\n# Now let's use mo.cache to cache the results\n\n# Create a cached version of the slow function\ncached_slow_function = mo.cache(slow_function)\n\n# First call (will compute and cache the result)\nstart = time.time()\nresult3 = cached_slow_function(42)\nelapsed3 = time.time() - start\n\n# Second call with same argument (will use the cached result)\nstart = time.time()\nresult4 = cached_slow_function(42)\nelapsed4 = time.time() - start\n\nmo.md(\n    f\"With caching:\\n- First call: {elapsed3:.2f} seconds\\n- Second call: {elapsed4:.2f} seconds\"\n)\n\n\n# Cache works with different arguments separately\nstart = time.time()\nresult5 = cached_slow_function(100)  # New argument, not in cache yet\nelapsed5 = time.time() - start\n\nstart = time.time()\nresult6 = cached_slow_function(100)  # Now it's cached\nelapsed6 = time.time() - start\n\nmo.md(\n    f\"With different argument (100):\\n- First call: {elapsed5:.2f} seconds\\n- Second call: {elapsed6:.2f} seconds\"\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Altair Bar Chart for Time Data in Python\nDESCRIPTION: This snippet creates a bar chart using Altair for time data. It bins the temporal data on the x-axis and formats the axis labels as YYYY-MM-DD.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_data/snapshots/charts.txt#2025-04-19_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n_chart = (\n    alt.Chart(df)\n    .mark_bar()\n    .encode(\n        x=alt.X(\n            \"some_column\",\n            type=\"temporal\",\n            bin=alt.Bin(maxbins=20),\n            axis=alt.Axis(format=\"%Y-%m-%d\")\n        ),\n        y=alt.Y(\"count()\", type=\"quantitative\"),\n    )\n    .properties(width=\"container\")\n)\n_chart\n```\n\n----------------------------------------\n\nTITLE: Creating New Variables Instead of Mutating in Python\nDESCRIPTION: Demonstrates the recommended approach of creating new variables instead of mutating existing ones to ensure proper reactivity in marimo.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/reactivity.md#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nl = [1]\n```\n\nLANGUAGE: python\nCODE:\n```\nextended_list = l + [2]\n```\n\n----------------------------------------\n\nTITLE: Creating and Displaying an Array of UI Elements in marimo\nDESCRIPTION: This code creates an array of three identical text input fields labeled 'Three wishes', then displays the array alongside its actual value using a horizontal stack layout. The array component allows collecting multiple related inputs with the same UI widget.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/api/inputs/array.md#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@app.cell\ndef __():\n    wish = mo.ui.text(placeholder=\"Wish\")\n    wishes = mo.ui.array([wish] * 3, label=\"Three wishes\")\n    return\n\n@app.cell\ndef __():\n    mo.hstack([wishes, wishes.value], justify=\"space-between\")\n    return\n```\n\n----------------------------------------\n\nTITLE: Mixed Data Type Output in Marimo Cell\nDESCRIPTION: Shows how to output mixed data types including numbers and HTML content in a Marimo cell. Demonstrates combining multiple data types in a single JSON output.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_islands/snapshots/island-mimetypes.txt#2025-04-19_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<marimo-island data-app-id=\"main\" data-cell-id=\"lEQa\" data-reactive=\"true\">\n    <marimo-cell-output>\n    <marimo-json-output data-json-data='[1, \"text/html:<span class=\\\"markdown prose dark:prose-invert\\\"><span class=\\\"paragraph\\\">Hello</span></span>\"]' data-value-types='\"python\"'></marimo-json-output>\n    </marimo-cell-output>\n    <marimo-cell-code hidden>%5B1%2C%20mo.md('Hello')%5D</marimo-cell-code>\n</marimo-island>\n```\n\n----------------------------------------\n\nTITLE: Configuring Marimo SQL Auto-Discovery in TOML\nDESCRIPTION: This snippet shows how to configure marimo's auto-discovery behavior for databases, schemas, tables, and columns in the pyproject.toml file. It allows users to set auto-discovery options for different database elements.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/working_with_data/sql.md#2025-04-19_snippet_9\n\nLANGUAGE: toml\nCODE:\n```\n[tool.marimo.datasources]\nauto_discover_schemas = true   # Default: true\nauto_discover_tables = \"auto\"   # Default: \"auto\"\nauto_discover_columns = \"auto\"  # Default: false\n```\n\n----------------------------------------\n\nTITLE: Encapsulating Matplotlib Plot in Local Function\nDESCRIPTION: Shows how to wrap matplotlib plotting code in a local function to avoid variable redefinition issues while creating and returning plot objects.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/understanding_errors/multiple_definitions.md#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef _():\n    import matplotlib.pyplot as plt\n    fig, ax = plt.subplots()\n    ax.plot([1, 2])\n    return ax\n\n_() \n```\n\n----------------------------------------\n\nTITLE: Updating State Value in Python\nDESCRIPTION: Shows two methods of updating state: direct value assignment and using a lambda function to update based on current value.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/state.md#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nset_counter(1)\nset_counter(lambda count: count + 1)\n```\n\n----------------------------------------\n\nTITLE: Input Widgets - Slider Implementation\nDESCRIPTION: Demonstrates creating slider widgets for user input in both frameworks.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/coming_from/streamlit.md#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nage = st.slider(\"How old are you?\", 0, 130, 25)\n```\n\nLANGUAGE: python\nCODE:\n```\nage = mo.ui.slider(label=\"How old are you?\", start=0, stop=130, value=25)\nmo.md(f\"One more question: {age}\") # marimo can achieve more advanced composition\n```\n\n----------------------------------------\n\nTITLE: Generating Marimo Islands from Notebook Files in Python\nDESCRIPTION: Shows how to generate Marimo islands from existing notebook files using MarimoIslandGenerator.from_file(). This approach allows for basic rendering without running the cells.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/exporting.md#2025-04-19_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom marimo import MarimoIslandGenerator\n\n# Create the generator from file\ngenerator = MarimoIslandGenerator.from_file(\"./<notebook-name>.py\", display_code=False)\n\n# Generate and print the HTML without building\n# This will still work for basic rendering, though without running the cells\nhtml = generator.render_html(include_init_island=False)\nprint(html)\n# Save the HTML to a file\noutput_file = \"output.html\"\nwith open(output_file, \"w\", encoding=\"utf-8\") as f:\n    f.write(html)\n```\n\n----------------------------------------\n\nTITLE: Implementing IPython-style _repr_html_() Method in Python\nDESCRIPTION: This example shows how to implement an IPython-style _repr_html_() method for a Shout class. The method returns an HTML string that wraps the text in an h1 tag for rich display.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/integrating_with_marimo/displaying_objects.md#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass Shout:\n    def __init__(self, text):\n        self.text = text\n\n    def _repr_html_(self):\n        return \"<h1>\" + self.text + \"</h1>\"\n```\n\n----------------------------------------\n\nTITLE: Creating Altair Bar Chart for Number Data in Python\nDESCRIPTION: This snippet creates a bar chart using Altair for number data. It bins the quantitative data on the x-axis and displays the count on the y-axis.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_data/snapshots/charts.txt#2025-04-19_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\n_chart = (\n    alt.Chart(df)\n    .mark_bar()\n    .encode(\n        x=alt.X(\"some_column\", type=\"quantitative\", bin=True),\n        y=alt.Y(\"count()\", type=\"quantitative\"),\n    )\n    .properties(width=\"container\")\n)\n_chart\n```\n\n----------------------------------------\n\nTITLE: Redirecting stdout to Output Area\nDESCRIPTION: Example of redirecting console output to the cell output area\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/outputs.md#2025-04-19_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nwith mo.redirect_stdout():\n  print(\"Hello, world!\")\n```\n\n----------------------------------------\n\nTITLE: Dynamic Markdown with User Input\nDESCRIPTION: Creates an interactive markdown output with a text input field and dynamic name display\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/outputs.md#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nname = mo.ui.text(placeholder=\"Your name here\")\nmo.md(\n  f\"\"\"\n  Hi! What's your name?\n\n  {name}\n  \"\"\"\n)\n```\n\n----------------------------------------\n\nTITLE: SQL Bracket Escaping Example\nDESCRIPTION: Demonstrates how to escape curly brackets in SQL queries when using marimo's SQL cells with f-strings\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/faq.md#2025-04-19_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT unnest([\\{\\{'a': 42, 'b': 84\\}\\}, \\{\\{'a': 100, 'b': NULL\\}\\}]);\n```\n\n----------------------------------------\n\nTITLE: Downloading Files with Marimo\nDESCRIPTION: Example showing the usage of marimo.download module for handling file downloads in a Marimo application. Demonstrates the basic functionality of downloading media files.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/api/media/download.md#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n/// marimo-embed-file\n    filepath: examples/ui/download.py\n///\n```\n\n----------------------------------------\n\nTITLE: Mutating Variables in Defining Cells in Python\nDESCRIPTION: Shows how to properly mutate variables by doing so in the same cell where they are defined, using a pandas DataFrame as an example.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/reactivity.md#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndf = pd.DataFrame({\"my_column\": [1, 2]})\ndf[\"another_column\"] = [3, 4]\n```\n\n----------------------------------------\n\nTITLE: Vertically Stacking Items in Marimo with Python\nDESCRIPTION: This snippet demonstrates how to use mo.vstack() to create a column of items in Marimo. It stacks a markdown element and a text area vertically.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_utils/snapshots/docstring_complex.txt#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Build a column of items\nmo.vstack([mo.md(\"...\"), mo.ui.text_area()])\n```\n\n----------------------------------------\n\nTITLE: Running Matplotlib Plot with Proper Layout\nDESCRIPTION: Example showing how to prevent matplotlib plots from being cut off by using plt.tight_layout() before plot output\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/faq.md#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport matplotlib.pyplot as plt\n\nplt.plot([-8, 8])\nplt.ylabel(\"my variable\")\nplt.tight_layout()\nplt.gca()\n```\n\n----------------------------------------\n\nTITLE: OpenAI Chat Integration with Configuration in Python\nDESCRIPTION: Configures the chat UI with OpenAI's models, including a system message and API key. This example shows how to set up OpenAI integration with configuration controls enabled.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/api/inputs/chat.md#2025-04-19_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport marimo as mo\n\nmo.ui.chat(\n    mo.ai.llm.openai(\n        \"gpt-4o\",\n        system_message=\"You are a helpful assistant.\",\n        api_key=\"sk-proj-...\",\n    ),\n    show_configuration_controls=True\n)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Cell Order Flexibility in marimo (Python)\nDESCRIPTION: This snippet shows how marimo allows cells to be arranged in any order, as it automatically determines the correct execution order based on variable dependencies.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/snapshots/marimo_for_jupyter_users.md.txt#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nz.value\n```\n\nLANGUAGE: python\nCODE:\n```\nz = mo.ui.slider(1, 10, label=\"$z$\"); z\n```\n\n----------------------------------------\n\nTITLE: Configuring Vega-Lite Scatter Plot\nDESCRIPTION: Defines a point-based visualization using Vega-Lite v5.20.1. Configures a 300x300 continuous view area, specifies Arrow data format input, and maps a 'values' field to the x-axis quantitatively.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_plugins/ui/_impl/snapshots/parse_spec_polars.txt#2025-04-19_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"config\": {\n    \"view\": {\n      \"continuousWidth\": 300,\n      \"continuousHeight\": 300\n    }\n  },\n  \"data\": {\n    \"url\": \"_placeholder_\",\n    \"format\": {\n      \"type\": \"arrow\"\n    }\n  },\n  \"mark\": {\n    \"type\": \"point\"\n  },\n  \"encoding\": {\n    \"x\": {\n      \"field\": \"values\",\n      \"type\": \"quantitative\"\n    }\n  },\n  \"$schema\": \"https://vega.github.io/schema/vega-lite/v5.20.1.json\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using Spinner in Marimo for Loading State Visualization\nDESCRIPTION: Shows how to implement marimo's spinner component to indicate ongoing processes or loading states. Useful for visualizing background tasks without specific progress measurements.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/api/status.md#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nmarimo.status.spinner\n```\n\n----------------------------------------\n\nTITLE: Configuring Altair Data Transformer for Performance\nDESCRIPTION: Demonstrates how to enable the marimo_csv data transformer for better performance with large datasets in Altair visualizations. This configuration allows handling of up to 400,000 rows efficiently.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/api/plotting.md#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport altair as alt\nalt.data_transformers.enable('marimo_csv')\n```\n\n----------------------------------------\n\nTITLE: Generating Marimo Notebook from Text File\nDESCRIPTION: Shows how to use a text file as input for the 'marimo new' command when generating a notebook. This is useful for longer or more complex prompts.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/generate_with_ai/text_to_notebook.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmarimo new my_prompt.txt\n```\n\n----------------------------------------\n\nTITLE: Encapsulating Temporary Variables in Python Functions\nDESCRIPTION: Shows how to use a function to encapsulate temporary variables, preventing them from becoming global. This is useful for reusable plotting code.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/reactivity.md#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef _():\n    import matplotlib.pyplot as plt\n    fig, ax = plt.subplots()\n    ax.plot([1, 2])\n    return ax\n\n_()\n```\n\n----------------------------------------\n\nTITLE: Resolving Variable Cycle Error in Python\nDESCRIPTION: This code snippet demonstrates how to fix a variable cycle error by merging the cells involved in the cycle into a single cell. It initializes variables 'a' and 'b', and then updates them, avoiding the cycle issue.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/understanding_errors/cycles.md#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\na = 0\nb = 1\na = b\nb = a\n```\n\n----------------------------------------\n\nTITLE: Creating Altair Bar Chart for Integer Data in Python\nDESCRIPTION: This snippet creates a bar chart using Altair for integer data. It bins the quantitative data on the x-axis and displays the count on the y-axis.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_data/snapshots/charts.txt#2025-04-19_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\n_chart = (\n    alt.Chart(df)\n    .mark_bar()\n    .encode(\n        x=alt.X(\"some_column\", type=\"quantitative\", bin=True),\n        y=alt.Y(\"count()\", type=\"quantitative\"),\n    )\n    .properties(width=\"container\")\n)\n_chart\n```\n\n----------------------------------------\n\nTITLE: Implementing Interactive Scatter Plot with Marimo Slider\nDESCRIPTION: Creates an interactive scatter plot visualization using Matplotlib and Marimo's slider UI element. The plot automatically updates when the slider value changes, demonstrating Marimo's reactive programming model.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_server/ai/snapshots/chat_system_prompts.txt#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport marimo as mo\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a slider and display it\nn_points = mo.ui.slider(10, 100, value=50, label=\"Number of points\")\nn_points  # Display the slider\n\n# Generate random data based on slider value\n# This cell automatically re-executes when n_points.value changes\nx = np.random.rand(n_points.value)\ny = np.random.rand(n_points.value)\n\nplt.figure(figsize=(8, 6))\nplt.scatter(x, y, alpha=0.7)\nplt.title(f\"Scatter plot with {n_points.value} points\")\nplt.xlabel(\"X axis\")\nplt.ylabel(\"Y axis\")\nplt.gca()  # Return the current axes to display the plot\n```\n\n----------------------------------------\n\nTITLE: Implementing Persistent Caching in Marimo\nDESCRIPTION: Use mo.persistent_cache to cache blocks of code to disk. This is useful for very expensive computations that you want to save between sessions.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/recipes.md#2025-04-19_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nwith mo.persistent_cache(\"my_cache\"):\n    # This block of code, and results will be cached to disk\n    ...\n```\n\n----------------------------------------\n\nTITLE: Variable Modification Example\nDESCRIPTION: Shows how global variables cannot be modified outside their defining cell.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/snapshots/dataflow.md.txt#2025-04-19_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ncount = 0\n```\n\nLANGUAGE: python\nCODE:\n```\ncount += 1\n```\n\n----------------------------------------\n\nTITLE: Alternative Matplotlib Plot Example\nDESCRIPTION: Demonstrates an alternative approach to creating and displaying Matplotlib plots using subplots.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/working_with_data/plotting.md#2025-04-19_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfig, ax = plt.subplots()\n\nax.plot([1, 2])\nax\n```\n\n----------------------------------------\n\nTITLE: Implementing _mime_() Method for Image Display in Python\nDESCRIPTION: This snippet demonstrates how to implement a _mime_() method for an Image class. The method returns a tuple with the MIME type 'image/png' and the image URL for display.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/integrating_with_marimo/displaying_objects.md#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass Image(object):\n    def __init__(self, url: str) -> None:\n        self.url = url\n\n    def _mime_(self) -> tuple[str, str]:\n        return (\"image/png\", self.url)\n\nImage(\"https://raw.githubusercontent.com/marimo-team/marimo/main/docs/_static/marimo-logotype-thick.svg\")\n```\n\n----------------------------------------\n\nTITLE: Creating Marimo Slider Component\nDESCRIPTION: Creates a slider UI component with a range from 0 to 10\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/snapshots/script_with_errors.txt#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nslider = mo.ui.slider(0, 10)\n```\n\n----------------------------------------\n\nTITLE: Creating a Hierarchical Navigation Menu with mo.nav_menu in Python\nDESCRIPTION: This snippet demonstrates how to create a structured navigation menu with nested categories using Marimo's nav_menu component. The menu is organized with main sections (Sales and Products) containing subpages with labels and descriptions for each navigation item.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/api/inputs/nav_menu.md#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@app.cell\ndef __():\n    nav_menu = mo.nav_menu({\n        \"/overview\": \"Overview\",\n        \"Sales\": {\n            \"/sales\": {\n                \"label\": \"Sales\",\n                \"description\": \"View sales and revenue\",\n            },\n            \"/sales/invoices\": {\n                \"label\": \"Invoices\",\n                \"description\": \"View invoices and payments\",\n            },\n            \"/sales/customers\": {\n                \"label\": \"Customers\",\n                \"description\": \"View customers and subscriptions\",\n            },\n        },\n        \"Products\": {\n            \"/products\": {\n                \"label\": \"Products\",\n                \"description\": \"View and manage products\",\n            },\n            \"/products/inventory\": {\n                \"label\": \"Inventory\",\n                \"description\": \"View inventory and stock levels\",\n            },\n            \"/products/categories\": {\n                \"label\": \"Categories\",\n                \"description\": \"View categories and products\",\n            },\n        },\n    })\n    nav_menu\n    return\n```\n\n----------------------------------------\n\nTITLE: Variable Assignment Cells\nDESCRIPTION: Multiple cells demonstrating basic variable assignments with different scopes and return patterns.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/snapshots/converted_multiple_defs.py.txt#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@app.cell\ndef _():\n    _x = 0\n    _x\n    return\n\n@app.cell\ndef _():\n    _x = 1\n    _x\n    return\n\n@app.cell\ndef _():\n    y = 0\n    return\n\n@app.cell\ndef _():\n    y_1 = 1\n    return (y_1,)\n\n@app.cell\ndef _(y_1):\n    y_1\n    return\n```\n\n----------------------------------------\n\nTITLE: Configuring Vega-Lite Bar Chart with Special Column Name in JSON\nDESCRIPTION: This JSON configuration creates a bar chart using Vega-Lite. It defines the data structure, encoding, and visual properties of the chart. The data includes a column with special characters, which is properly escaped in the field name.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_data/snapshots/charts_json_bad_data.txt#2025-04-19_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"$schema\": \"https://vega.github.io/schema/vega-lite/v5.20.1.json\",\n  \"config\": {\n    \"view\": {\n      \"continuousHeight\": 300,\n      \"continuousWidth\": 300\n    }\n  },\n  \"data\": {\n    \"name\": \"data-eb3498b073936ca31ff9c34a93aa6114\"\n  },\n  \"datasets\": {\n    \"data-eb3498b073936ca31ff9c34a93aa6114\": [\n      {\n        \"some[0]really.bad:column\": 1\n      },\n      {\n        \"some[0]really.bad:column\": 2\n      },\n      {\n        \"some[0]really.bad:column\": 3\n      }\n    ]\n  },\n  \"encoding\": {\n    \"x\": {\n      \"aggregate\": \"count\",\n      \"type\": \"quantitative\"\n    },\n    \"y\": {\n      \"field\": \"some\\\\[0\\\\]really\\\\.bad\\\\:column\",\n      \"type\": \"nominal\"\n    }\n  },\n  \"mark\": {\n    \"type\": \"bar\"\n  },\n  \"width\": \"container\"\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Cell Code in Marimo App Views (Python)\nDESCRIPTION: The mo.show_code() function is used to display the cell's code in the output area, making it visible in all app views of a Marimo notebook.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/api/outputs.md#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nmarimo.show_code\n```\n\n----------------------------------------\n\nTITLE: Enabling LSP Feature in pyproject.toml\nDESCRIPTION: Configuration snippet to enable the experimental LSP feature in marimo by modifying the pyproject.toml file.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/editor_features/language_server.md#2025-04-19_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[tool.marimo.experimental]\nlsp = true\n```\n\n----------------------------------------\n\nTITLE: Adding Health Check to Marimo Dockerfile\nDESCRIPTION: This Dockerfile instruction adds a health check that periodically checks if the application is responding on the /health endpoint. It's useful for monitoring the application's status, especially in cloud deployments.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/deploying/deploying_docker.md#2025-04-19_snippet_2\n\nLANGUAGE: Dockerfile\nCODE:\n```\nHEALTHCHECK --interval=30s --timeout=3s \\\n  CMD curl -f http://localhost:8080/health || exit 1\n```\n\n----------------------------------------\n\nTITLE: Correct DataFrame Handling in Single Cell\nDESCRIPTION: Shows the proper way to modify DataFrames within a single cell in Marimo\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/coming_from/jupyter.md#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndf = pd.DataFrame({\"my_column\": [1, 2]})\ndf[\"another_column\"] = [3, 4]\n```\n\n----------------------------------------\n\nTITLE: Installing marimo with pip\nDESCRIPTION: Command to install marimo using pip and start the introductory tutorial.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/index.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install marimo && marimo tutorial intro\n```\n\n----------------------------------------\n\nTITLE: Displaying Logarithmic Slider with Its Current Value\nDESCRIPTION: Shows how to display a logarithmic slider with its current value, similar to the basic slider example. This creates a reactive display for the logarithmic slider.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/api/inputs/slider.md#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@app.cell\ndef __():\n    mo.hstack([log_slider, mo.md(f\"Has value: {log_slider.value}\")])\n    return\n```\n\n----------------------------------------\n\nTITLE: Configuring Altair Bar Chart with Temporal Data\nDESCRIPTION: Creates an Altair bar chart visualization that bins temporal data and displays counts. The chart uses container-width sizing, temporal x-axis with custom date formatting, and quantitative y-axis for count aggregation.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_data/snapshots/column_preview_date_chart_code.txt#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n_chart = (\n    alt.Chart(table)\n    .mark_bar()\n    .encode(\n        x=alt.X(\n            \"date_col\",\n            type=\"temporal\",\n            bin=alt.Bin(maxbins=20),\n            axis=alt.Axis(format=\"%Y-%m-%d\")\n        ),\n        y=alt.Y(\"count()\", type=\"quantitative\"),\n    )\n    .properties(width=\"container\")\n)\n_chart\n```\n\n----------------------------------------\n\nTITLE: Defining a Top-Level Function with Setup Cell in Marimo\nDESCRIPTION: This snippet shows how to define a top-level function in a marimo notebook using a setup cell for imports and the @app.function decorator. The function calculates basic statistics for a dataset using NumPy.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/reusing_functions.md#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nwith app.setup:\n    import numpy as np\n\n@app.function\ndef calculate_statistics(data):\n    \"\"\"Calculate basic statistics for a dataset\"\"\"\n    return {\n        \"mean\": np.mean(data),\n        \"median\": np.median(data),\n        \"std\": np.std(data)\n    }\n```\n\n----------------------------------------\n\nTITLE: Initializing Marimo Application for SQL Notebook\nDESCRIPTION: Sets up a Marimo application with a title and defines the main structure of the SQL notebook. It includes cells for creating a database engine, executing SQL queries, and displaying results.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/snapshots/sql-notebook.py.txt#2025-04-19_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport marimo\n\n__generated_with = \"0.0.0\"\napp = marimo.App(app_title=\"My Title\")\n\n\n@app.cell(hide_code=True)\ndef _(mo):\n    mo.md(\n        r\"\"\"\n        # SQL notebook\n        \"\"\"\n    )\n    return\n\n\n@app.cell\ndef _(fn_that_creates_engine):\n    mem_engine = fn_that_creates_engine(\"sqlite:///:memory:\")\n    return (mem_engine,)\n\n\n@app.cell\ndef _(mem_engine, mo, my_table):\n    export = mo.sql(\n        f\"\"\"\n        SELECT * FROM my_table;\n        \"\"\",\n        output=False,\n        engine=mem_engine\n    )\n    return (export,)\n\n\n@app.cell\ndef _(export, mo):\n    _df = mo.sql(\"SELECT * FROM export;\")\n    return\n\n\nif __name__ == \"__main__\":\n    app.run()\n```\n\n----------------------------------------\n\nTITLE: DataFrame Variable Definition Example\nDESCRIPTION: Demonstrates incorrect and correct ways to handle DataFrame modifications in Marimo\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/coming_from/jupyter.md#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndf = pd.DataFrame({\"my_column\": [1, 2]})\n```\n\nLANGUAGE: python\nCODE:\n```\ndf[\"another_column\"] = [3, 4]\n```\n\n----------------------------------------\n\nTITLE: Exporting Marimo Notebook as Editable WASM-powered HTML\nDESCRIPTION: Command to export a Marimo notebook as an editable WebAssembly-powered HTML file. This creates a self-contained, interactive notebook that can be edited and executed in a web browser.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/publishing/cloudflare_pages.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmarimo export html-wasm notebook.py -o output_dir --mode edit\n```\n\n----------------------------------------\n\nTITLE: Rendering Markdown Content with Marimo\nDESCRIPTION: Uses marimo's md() function to render markdown content including headers and paragraphs. The code demonstrates how to create formatted text using markdown syntax within a Python environment.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_islands/snapshots/markdown.txt#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nmo.md(\n    '''\n    # Hello, Markdown!\n    This is a paragraph.\n    '''\n)\n```\n\n----------------------------------------\n\nTITLE: Creating SQL Code Cell in Marimo Notebook\nDESCRIPTION: Instructions for generating a new SQL code cell in a marimo notebook. The SQL must use DuckDB syntax and can reference variables from other cells without redefining them.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_server/ai/snapshots/system_prompts.txt#2025-04-19_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\n```\n{CELL_CODE}\n```\n```\n\n----------------------------------------\n\nTITLE: Rendering Tooltips with HTML and Button Components in Python\nDESCRIPTION: Shows how to create tooltip elements in marimo by adding the data-tooltip attribute to HTML elements, both directly in markdown and through UI components.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/api/markdown.md#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nmo.md(\n    '''\n    <div data-tooltip=\"This is a tooltip\">Hover over me</div>\n    '''\n)\nmo.ui.button(\n    label='<div data-tooltip=\"This is a tooltip\">Hover over me</div>'\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Bar Chart with Altair\nDESCRIPTION: Creates a bar chart using Altair library to display counts of values in a boolean column. The chart is configured to be responsive with container width and uses nominal encoding for boolean values and quantitative encoding for the count.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_data/snapshots/column_preview_bool_chart_code.txt#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n_chart = (\n    alt.Chart(table)\n    .mark_bar()\n    .encode(\n        x=alt.X(\"bool_col\", type=\"nominal\"),\n        y=alt.Y(\"count()\", type=\"quantitative\"),\n    )\n    .properties(width=\"container\")\n)\n_chart\n```\n\n----------------------------------------\n\nTITLE: Setting Up Timer Refresh in Marimo - Package Import\nDESCRIPTION: Imports the marimo package for creating timed refresh functionality.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/recipes.md#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport marimo as mo\n```\n\n----------------------------------------\n\nTITLE: Connecting to ClickHouse using clickhouse_connect\nDESCRIPTION: Example of creating a ClickHouse connection using clickhouse_connect library in marimo for remote connections.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/working_with_data/sql.md#2025-04-19_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport clickhouse_connect\n\nengine = clickhouse_connect.get_client(host=\"localhost\", port=8123, username=\"default\", password=\"password\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Ollama in marimo.toml\nDESCRIPTION: This snippet shows the configuration for using Ollama with marimo, including setting the model and base URL for the local Ollama server.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/editor_features/ai_completion.md#2025-04-19_snippet_7\n\nLANGUAGE: toml\nCODE:\n```\n[ai.open_ai]\napi_key = \"ollama\" # This is not used, but required\nmodel = \"codellama\" # or another model from `ollama ls`\nbase_url = \"http://127.0.0.1:11434/v1\"\n```\n\n----------------------------------------\n\nTITLE: Re-running a Cell on Button Press in Marimo\nDESCRIPTION: Re-run a cell when a trigger button is pressed. This example generates a new random number between 0 and 100 on each button press.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/recipes.md#2025-04-19_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nbutton\n\nimport random\nrandom.randint(0, 100)\n```\n\n----------------------------------------\n\nTITLE: Parameterized Markdown Rendering with Marimo in Python\nDESCRIPTION: This code snippet uses the previously defined control_dep variable and demonstrates rendering parameterized markdown content using Marimo's md function. It shows how to include dynamic values within markdown text.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/snapshots/ipynb_topdown.txt#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ncontrol_dep\nmo.md(f\"parameterized markdown {123}\")\n```\n\n----------------------------------------\n\nTITLE: Installing marimo with uv\nDESCRIPTION: Command to install marimo using uv package manager and start the introductory tutorial.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/index.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nuv add marimo && marimo tutorial intro\n```\n\n----------------------------------------\n\nTITLE: Running marimo with Command Line Arguments\nDESCRIPTION: Example of running a marimo notebook with command line arguments. The sys.argv is set to include the notebook filename and any arguments following the '--' separator.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/api/cli_args.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmarimo edit notebook.py -- --lr 1e-4 --epochs 15\n```\n\n----------------------------------------\n\nTITLE: Installing BigQuery Dependencies\nDESCRIPTION: Commands to install required Python packages for Google Cloud BigQuery integration using pip.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/integrations/google_cloud_bigquery.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install google-cloud-bigquery db-dtypes\n```\n\n----------------------------------------\n\nTITLE: Embedding Marimo Notebook with Interactive Slider in Markdown\nDESCRIPTION: Demonstrates how to embed a marimo notebook with an interactive slider using marimo-snippets in a markdown file. The code includes importing marimo, creating a slider UI element, and using its value.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/publishing/from_code_snippets.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<div>\n<marimo-iframe>\n```python\nimport marimo as mo\n```\n```python\nslider = mo.ui.slider(1, 10)\nslider\n```\n\n```python\nslider.value * \"🍃\"\n```\n</marimo-iframe>\n</div>\n\n<script src=\"https://cdn.jsdelivr.net/npm/@marimo-team/marimo-snippets@1\"></script>\n```\n\n----------------------------------------\n\nTITLE: Rendering a Default Switch with Label in JSX\nDESCRIPTION: This code demonstrates how to render a Switch component with an associated Label for 'Airplane Mode'. The components are wrapped in a flex container for proper alignment.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/frontend/src/stories/switch.mdx#2025-04-19_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<div className=\"flex items-center align-middle space-x-2\">\n  <Switch id=\"airplane-mode\" />\n\n  <Label htmlFor=\"airplane-mode\">Airplane Mode</Label>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Embedding Read-Only marimo Notebook in HTML\nDESCRIPTION: HTML code snippet for embedding a marimo notebook in read-only mode using an iframe. This is useful for displaying notebooks without allowing edits.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/publishing/playground.md#2025-04-19_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<iframe\n  src=\"https://marimo.app/l/c7h6pz?mode=read&embed=true\"\n  width=\"100%\"\n  height=\"500\"\n  frameborder=\"0\"\n></iframe>\n```\n\n----------------------------------------\n\nTITLE: Initializing Marimo App in Python\nDESCRIPTION: This snippet imports the marimo library, sets the app title, and creates an instance of the Marimo App. It also defines the app's version.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/snapshots/frontmatter-test.py.txt#2025-04-19_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport marimo\n\n__generated_with = \"0.0.0\"\napp = marimo.App(app_title=\"My Title\")\n```\n\n----------------------------------------\n\nTITLE: Data Generation for SQL Demo\nDESCRIPTION: Python code to generate sample data for SQL demonstration using random tokens and counts\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/snapshots/sql.md.txt#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef _create_token_data(n_items=100):\n    import random\n    import string\n\n    def generate_random_string(length):\n        letters = string.ascii_lowercase\n        result_str = \"\".join(random.choice(letters) for i in range(length))\n        return result_str\n\n    def generate_random_numbers(mean, std_dev, num_samples):\n        return [int(random.gauss(mean, std_dev)) for _ in range(num_samples)]\n\n    random_numbers = generate_random_numbers(50, 15, n_items)\n    random_strings = sorted(\n        list(set([generate_random_string(3) for _ in range(n_items)]))\n    )\n\n    return {\n        \"token\": random_strings,\n        \"count\": random_numbers[: len(random_strings)],\n    }\n```\n\n----------------------------------------\n\nTITLE: Creating Interactive Table with Button Column\nDESCRIPTION: Demonstrates how to create a table with a column of interactive buttons using mo.ui.table and mo.ui.array.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/recipes.md#2025-04-19_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport random\n\n\n# Create a state object that will store the index of the\n# clicked button\nget_state, set_state = mo.state(None)\n\n# Create an mo.ui.array of buttons - a regular Python list won't work.\nbuttons = mo.ui.array(\n    [\n        mo.ui.button(\n            label=\"button \" + str(i), on_change=lambda v, i=i: set_state(i)\n        )\n        for i in range(random.randint(2, 5))\n    ]\n)\n\n# Put the buttons array into the table\ntable = mo.ui.table(\n    {\n        \"Action\": [\"Action Name\"] * len(buttons),\n        \"Trigger\": list(buttons),\n    }\n)\ntable\n```\n\n----------------------------------------\n\nTITLE: Initializing Marimo App with Remote Markdown\nDESCRIPTION: This snippet creates a Marimo app and defines a cell that renders markdown content. The markdown includes a Python code snippet, demonstrating how to embed code examples within the markdown text.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/snapshots/remote_markdown_to_marimo.txt#2025-04-19_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport marimo\n\n\napp = marimo.App()\n\n\n@app.cell(hide_code=True)\ndef _(mo):\n    mo.md(\n        r\"\"\"\n        # Remote Markdown Test\n\n        ```python\n        print('Hello from Remote Markdown!')\n        ```\n        \"\"\"\n    )\n    return\n\n\nif __name__ == \"__main__\":\n    app.run()\n```\n\n----------------------------------------\n\nTITLE: Marimo Stateful Layout Functions Table in Markdown\nDESCRIPTION: Markdown table listing stateful layout functions in Marimo with their descriptions. These elements maintain state, such as tab selection or table row selection.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/api/layouts/index.md#2025-04-19_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Function | Description |\n|----------|-------------|\n| [`marimo.ui.tabs`][marimo.ui.tabs] | Create tabbed interfaces |\n| [`marimo.ui.table`][marimo.ui.table] | Create interactive tables |\n```\n\n----------------------------------------\n\nTITLE: Creating Altair Bar Chart for Top 10 String Values in Python\nDESCRIPTION: This snippet creates a bar chart using Altair for the top 10 string values. It aggregates, ranks, and filters the data to show only the top 10 items based on count.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_data/snapshots/charts.txt#2025-04-19_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\n_chart = (\n    alt.Chart(df)\n    .transform_aggregate(count=\"count()\", groupby=[\"some_column\"])\n    .transform_window(\n        rank=\"rank()\",\n        sort=[\n            alt.SortField(\"count\", order=\"descending\"),\n            alt.SortField(\"some_column\", order=\"ascending\"),\n        ],\n    )\n    .transform_filter(alt.datum.rank <= 10)\n    .mark_bar()\n    .encode(\n        y=alt.Y(\"some_column\", type=\"nominal\", sort=\"-x\"),\n        x=alt.X(\"count\", type=\"quantitative\"),\n    )\n    .properties(title=\"Top 10 some_column\", width=\"container\")\n)\n_chart\n```\n\n----------------------------------------\n\nTITLE: Processing Form Input and Displaying Output in Marimo\nDESCRIPTION: Process the form input by joining and capitalizing the values. If the form hasn't been submitted, use the values from the selected example.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/recipes.md#2025-04-19_snippet_16\n\nLANGUAGE: python\nCODE:\n```\noutput = (\n    \" \".join(form.value.values()).upper()\n    if form.value is not None\n    else \" \".join(examples.value.values()).upper()\n)\nexamples, form, output\n```\n\n----------------------------------------\n\nTITLE: Displaying Output Based on Toggle Button State in Marimo\nDESCRIPTION: Display different markdown output based on the current state of the toggle button.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/recipes.md#2025-04-19_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nmo.md(\"True!\") if button.value else mo.md(\"False!\")\n```\n\n----------------------------------------\n\nTITLE: Running marimo Notebook using Subprocess (Python)\nDESCRIPTION: Demonstrates how to execute a marimo notebook programmatically using the subprocess module. This allows for integration with other Python scripts or workflows.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/coming_from/papermill.md#2025-04-19_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport subprocess\n\nsubprocess.run([\"python\", \"notebook.py\", \"--\", \"--param1\", \"value1\"])\n```\n\n----------------------------------------\n\nTITLE: Marimo File Conversion Commands\nDESCRIPTION: Command-line instructions for converting between Jupyter and Marimo notebook formats\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/coming_from/jupyter.md#2025-04-19_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nmarimo convert your_notebook.ipynb -o your_notebook.py\n```\n\nLANGUAGE: bash\nCODE:\n```\nmarimo export ipynb notebook.py -o notebook.ipynb\n```\n\n----------------------------------------\n\nTITLE: Targeting Specific Cells with CSS\nDESCRIPTION: This CSS snippet demonstrates how to target specific cells and their outputs in a marimo notebook using data attributes.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/configuration/theming.md#2025-04-19_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n/* Target the cell named \"My Cell\" */\n[data-cell-name='my_cell'] {\n  background-color: light-dark(navy, pink);\n}\n\n/* Target the output of the cell named \"My Cell\" */\n[data-cell-name='my_cell'] [data-cell-role='output'] {\n  background-color: light-dark(navy, pink);\n}\n```\n\n----------------------------------------\n\nTITLE: Recommended Python Import Pattern\nDESCRIPTION: Demonstrates the correct way to import modules in marimo using explicit module imports and dot notation to access members.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/understanding_errors/import_star.md#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport math\n\nmath.pi\n```\n\n----------------------------------------\n\nTITLE: Creating a Trigger Button in Marimo\nDESCRIPTION: Create a button without a value to function as a trigger for re-running a cell when pressed.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/recipes.md#2025-04-19_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nbutton = mo.ui.button()\nbutton\n```\n\n----------------------------------------\n\nTITLE: Script Export Command\nDESCRIPTION: Command to export a marimo notebook to a flat Python script in topological order.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/exporting.md#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmarimo export script notebook.py -o notebook.script.py\n```\n\n----------------------------------------\n\nTITLE: Initializing Marimo App in Python\nDESCRIPTION: This snippet imports the Marimo library, creates a Marimo App instance with a custom title, and sets up the main execution block. It defines the app title and provides a structure for running the app.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/snapshots/frontmatter-only.py.txt#2025-04-19_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport marimo\n\n__generated_with = \"0.0.0\"\napp = marimo.App(app_title=\"My Title\")\n\n\n\n\n\nif __name__ == \"__main__\":\n    app.run()\n```\n\n----------------------------------------\n\nTITLE: Initializing Marimo App in Python\nDESCRIPTION: This code initializes a basic Marimo application. It specifies dependencies in a script comment, imports the marimo module, creates an App instance, defines an empty cell, and includes a main block to run the app.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/snapshots/converted_juv.py.txt#2025-04-19_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n# /// script\n# dependencies = [\n#     \"anywidget\",\n#     \"polars\",\n# ]\n# ///\n\nimport marimo\n\napp = marimo.App()\n\n\n@app.cell\ndef _():\n    return\n\n\nif __name__ == \"__main__\":\n    app.run()\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Details Elements in Marimo Markdown\nDESCRIPTION: This code snippet defines a function to create HTML details elements and demonstrates its usage in Marimo Markdown cells. It shows how to create collapsible sections with customizable summaries and content.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/examples/markdown/details.md#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport marimo as mo\n\ndef details(summary, content):\n    return f\"\"\"\n<details>\n    <summary>{summary}</summary>\n    {content}\n</details>\n\"\"\"\n\nmo.md(\n    f\"\"\"\n# Details\n\n{details(\"Click to expand\", \"Here's some hidden content.\")}\n\n{details(\"Another example\", \"You can nest these too!\")}\n\n{details(\"Code example\", '''```python\nprint(\"Hello, world!\")\n```''')}\n    \"\"\"\n)\n\nmo.md(\n    f\"\"\"\n## Styling\n\nYou can style the summary element:\n\n<style>\nsummary {{  /* double braces to escape */\n    cursor: pointer;\n    font-weight: bold;\n}}\n</style>\n\n{details(\"Styled summary\", \"This summary is bold and has a pointer cursor.\")}\n    \"\"\"\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Bar Chart with Angle Brackets Column Name\nDESCRIPTION: Creates an Altair bar chart using a column name containing angle brackets. Charts the count of values for 'col<angles' on the y-axis.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_data/snapshots/charts_bad_characters.txt#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n_chart = (\n    alt.Chart(df)\n    .mark_bar()\n    .encode(\n        y=alt.Y(\"col<angles\", type=\"nominal\"),\n        x=alt.X(\"count()\", type=\"quantitative\"),\n    )\n    .properties(width=\"container\")\n)\n_chart\n```\n\n----------------------------------------\n\nTITLE: Importing Marimo Library in Python\nDESCRIPTION: This snippet imports the Marimo library, which is essential for using Marimo's functions throughout the notebook. It's typically placed at the beginning of the notebook to ensure all Marimo functionalities are available.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/snapshots/ipynb_topdown.txt#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport marimo as mo\n```\n\n----------------------------------------\n\nTITLE: Displaying Altair Chart with Data\nDESCRIPTION: Shows how to display an Altair chart along with its filtered data selection using vertical stack layout.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/working_with_data/plotting.md#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nmo.vstack([chart, chart.value.head()])\n```\n\n----------------------------------------\n\nTITLE: Escaping SQL brackets in marimo\nDESCRIPTION: Example of how to escape curly brackets in SQL queries within marimo to prevent unintended parameterization.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/working_with_data/sql.md#2025-04-19_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nSELECT unnest([{{'a': 42, 'b': 84}}, {{'a': 100, 'b': NULL}}]);\n```\n\n----------------------------------------\n\nTITLE: Reading Data from Google Cloud Storage in Python\nDESCRIPTION: Python code demonstrating how to read data from Google Cloud Storage using the StorageClient. It includes listing buckets, selecting a bucket, and displaying files in a table format.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/integrations/google_cloud_storage.md#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Cell 1 - Load libraries\nimport marimo as mo\nfrom google.cloud import storage\n\n# Cell 2 - Load buckets\nclient = storage.Client()\nbuckets = client.list_buckets()\n\n# Cell 3 - Select bucket\nselected_bucket = mo.ui.dropdown(\n    label=\"Select bucket\", options=[b.name for b in buckets]\n)\nselected_bucket\n\n# Cell 4 - Load files\nfiles = list(bucket.list_blobs())\nitems = [\n    {\n        \"Name\": f.name,\n        \"Updated\": f.updated.strftime(\"%h %d, %Y\"),\n        \"Size\": f.size,\n    }\n    for f in files\n]\nfile_table = mo.ui.table(items, selection=\"single\")\nfile_table if items else mo.md(\"No files found\").callout()\n```\n\n----------------------------------------\n\nTITLE: Deploying Marimo Notebook as Modal App\nDESCRIPTION: Command to deploy a read-only Marimo notebook as an app on Modal. Uses UV package manager with Python 3.12 and requires both Modal and Marimo packages.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/examples/cloud/modal/README.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nuvx -p 3.12 \\\n  --with modal \\\n  --with marimo \\\n  modal serve modal_app.py\n```\n\n----------------------------------------\n\nTITLE: Caching Implementation\nDESCRIPTION: Shows how to implement caching for expensive computations in both frameworks.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/coming_from/streamlit.md#2025-04-19_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n@st.cache_data\ndef expensive_computation(args):\n    # ...\n```\n\nLANGUAGE: python\nCODE:\n```\n@functools.cache\ndef expensive_computation(args):\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Interpolating Python Values in Marimo Markdown\nDESCRIPTION: Demonstrates how to interpolate Python values within a Markdown cell using a Python code block.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/marimo/_tutorials/markdown_format.md#2025-04-19_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nmo.md(f\"\"\"Like so: {\"🍃\" * 7}\"\"\")\n```\n\n----------------------------------------\n\nTITLE: Naming Cells in Marimo Markdown\nDESCRIPTION: Shows how to give a name to a cell in a Marimo Markdown notebook, which can be useful for organization.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/marimo/_tutorials/markdown_format.md#2025-04-19_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# But here's my `cell_id`, so call me, `maybe` 🎶\n```\n\n----------------------------------------\n\nTITLE: Marimo Markdown Code Block Display\nDESCRIPTION: Demonstrates how to display code blocks within markdown, including both static and executable examples.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/snapshots/unsafe-app.py.txt#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nmo.md(\"\"\"\n    # Code blocks in code blocks\n    Output code for Hello World!\n    ```python\n    print(\"Hello World\")\n    ```\n    Execute print\n    ```python {.marimo}\n    print(\"Hello World\")\n    ```\n\"\"\")\n```\n\n----------------------------------------\n\nTITLE: Creating/Editing Single Notebook\nDESCRIPTION: Command to create or edit a specific marimo notebook file.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/getting_started/quickstart.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmarimo edit your_notebook.py\n```\n\n----------------------------------------\n\nTITLE: Dynamic SQL Query with Python Variable\nDESCRIPTION: SQL query using a Python variable for filtering results based on token prefix\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/snapshots/sql.md.txt#2025-04-19_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM df WHERE starts_with(token, '{token_prefix.value}')\n```\n\n----------------------------------------\n\nTITLE: Initializing and Running Basic Marimo Application in Python\nDESCRIPTION: Creates a basic Marimo application with a single cell that prints 'Hello, Output!'. The code demonstrates the standard pattern of importing marimo, creating an app instance, defining a cell with a decorator, and running the app when executed as the main program.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/snapshots/ipynb_to_marimo_with_output.txt#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport marimo\n\n\napp = marimo.App()\n\n\n@app.cell\ndef _():\n    print('Hello, Output!')\n    return\n\n\nif __name__ == \"__main__\":\n    app.run()\n```\n\n----------------------------------------\n\nTITLE: Implementing _display_() Method for Rich Display in Python\nDESCRIPTION: This snippet demonstrates how to implement a _display_() method for a Dice class to provide a custom rich display in Marimo. The method returns a string with a random dice roll result.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/integrating_with_marimo/displaying_objects.md#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass Dice:\n    def _display_(self):\n        import random\n\n        return f\"You rolled {random.randint(0, 7)}\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Marimo App\nDESCRIPTION: Sets up a basic Marimo application with a title 'Test Notebook' and imports required dependencies.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/snapshots/unsafe-app.py.txt#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport marimo\n\n__generated_with = \"0.0.0\"\napp = marimo.App(app_title=\"Test Notebook\")\n```\n\n----------------------------------------\n\nTITLE: Importing Marimo Library in Python\nDESCRIPTION: This snippet imports the Marimo library, which is used for creating interactive UI components in Python.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/snapshots/script.txt#2025-04-19_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport marimo as mo\n```\n\n----------------------------------------\n\nTITLE: Compressing Large marimo Notebooks in JavaScript\nDESCRIPTION: JavaScript code snippet using the lz-string package to compress large marimo notebooks for embedding. This allows embedding of notebooks larger than 14 KB.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/publishing/playground.md#2025-04-19_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { compressToEncodedURIComponent } from \"lz-string\";\n\nconst url = `https://marimo.app/#code/${compressToEncodedURIComponent(code)}`\n```\n\n----------------------------------------\n\nTITLE: Markdown Export Commands\nDESCRIPTION: Commands for exporting to and from markdown format.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/exporting.md#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmarimo export md notebook.py -o notebook.md\nmarimo convert notebook.md > notebook.py\n```\n\n----------------------------------------\n\nTITLE: Replacing Cell Output in Marimo (Python)\nDESCRIPTION: The mo.output.replace() function is used to programmatically replace the entire output of a cell in a Marimo notebook.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/api/outputs.md#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nmarimo.output.replace\n```\n\n----------------------------------------\n\nTITLE: Installing Packages with micropip in WASM\nDESCRIPTION: Demonstrates how to install additional Python packages in a WASM notebook environment using micropip.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/wasm.md#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport micropip\n```\n\nLANGUAGE: python\nCODE:\n```\nawait micropip.install(\"plotly\")\nimport plotly\n```\n\n----------------------------------------\n\nTITLE: Advanced Layouts - Expandable Sections\nDESCRIPTION: Shows how to create expandable sections in both frameworks.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/coming_from/streamlit.md#2025-04-19_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nwith st.expander(\"Expand me\"):\n    st.write(\"Hello from the expander!\")\n```\n\nLANGUAGE: python\nCODE:\n```\nmo.accordion({\"Expand me\": \"Hello from the expander!\"})\n```\n\n----------------------------------------\n\nTITLE: Embedding Blank marimo Notebook in HTML\nDESCRIPTION: HTML code snippet for embedding a blank marimo notebook into a web page using an iframe. This provides users with an interactive code playground.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/publishing/playground.md#2025-04-19_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<iframe\n  src=\"https://marimo.app/l/aojjhb?embed=true&show-chrome=false\"\n  width=\"100%\"\n  height=\"500\"\n  frameborder=\"0\"\n></iframe>\n```\n\n----------------------------------------\n\nTITLE: Conditional Cell Execution with Stop\nDESCRIPTION: Shows how to stop cell execution based on form submission status using mo.stop.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/recipes.md#2025-04-19_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nmo.stop(form.value is None, mo.md(\"Submit the form to continue\"))\n\nmo.md(f\"Hello, {form.value}!\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Marimo Static Configuration\nDESCRIPTION: JavaScript code that initializes static configuration for Marimo notebook including version, notebook state, asset URL, and file references.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_server/templates/snapshots/export6.txt#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.__MARIMO_STATIC__ = {};\nwindow.__MARIMO_STATIC__.version = \"0.0.0\";\nwindow.__MARIMO_STATIC__.notebookState = {\"cellIds\": [], \"cellNames\": [], \"cellCodes\": [], \"cellConfigs\": [], \"cellOutputs\": {}, \"cellConsoleOutputs\": {}};\nwindow.__MARIMO_STATIC__.assetUrl = \"https://cdn.jsdelivr.net/npm/@marimo-team/frontend@0.0.0/dist\";\nwindow.__MARIMO_STATIC__.files = {};\n```\n\n----------------------------------------\n\nTITLE: Alert Dialog Component Implementation\nDESCRIPTION: Demonstrates the structure and implementation of an Alert Dialog component with a confirmation message and action buttons. Shows how to compose the various Alert Dialog sub-components to create a complete dialog interface.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/frontend/src/stories/alert-dialog.mdx#2025-04-19_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<AlertDialog>\n  <AlertDialogTrigger asChild>\n    <Button variant=\"outline\">Open</Button>\n  </AlertDialogTrigger>\n\n  <AlertDialogContent>\n    <AlertDialogHeader>\n      <AlertDialogTitle>Are you sure absolutely sure?</AlertDialogTitle>\n\n      <AlertDialogDescription>\n        This action cannot be undone. This will permanently delete your notebook\n        and all of its contents.\n      </AlertDialogDescription>\n    </AlertDialogHeader>\n\n    <AlertDialogFooter>\n      <AlertDialogCancel>Cancel</AlertDialogCancel>\n      <AlertDialogAction>Continue</AlertDialogAction>\n    </AlertDialogFooter>\n\n  </AlertDialogContent>\n</AlertDialog>\n```\n\n----------------------------------------\n\nTITLE: Configuring Python Version for Sandbox Environment (Bash)\nDESCRIPTION: Command to specify a particular Python version when running marimo in sandbox mode using the UV_PYTHON environment variable.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/package_reproducibility.md#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nUV_PYTHON=3.13 marimo edit --sandbox notebook.py\n```\n\n----------------------------------------\n\nTITLE: Defining Vega Bar Chart Specification in JSON\nDESCRIPTION: This JSON object specifies a complete Vega visualization for a horizontal bar chart. It includes data sources, scales, axes, marks, and signals for responsive sizing. The chart displays category counts with customizable styling and layout.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_data/snapshots/column_preview_categorical_chart_spec_with_vegafusion.txt#2025-04-19_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://vega.github.io/schema/vega/v5.json\",\n  \"autosize\": {\n    \"contains\": \"padding\",\n    \"type\": \"fit-x\"\n  },\n  \"axes\": [\n    {\n      \"aria\": false,\n      \"domain\": false,\n      \"grid\": true,\n      \"gridScale\": \"y\",\n      \"labels\": false,\n      \"maxExtent\": 0,\n      \"minExtent\": 0,\n      \"orient\": \"bottom\",\n      \"scale\": \"x\",\n      \"tickCount\": {\n        \"signal\": \"ceil(width/40)\"\n      },\n      \"ticks\": false,\n      \"zindex\": 0\n    },\n    {\n      \"grid\": false,\n      \"labelFlush\": true,\n      \"labelOverlap\": true,\n      \"orient\": \"bottom\",\n      \"scale\": \"x\",\n      \"tickCount\": {\n        \"signal\": \"ceil(width/40)\"\n      },\n      \"title\": \"Count of Records\",\n      \"zindex\": 0\n    },\n    {\n      \"grid\": false,\n      \"orient\": \"left\",\n      \"scale\": \"y\",\n      \"title\": \"category_col\",\n      \"zindex\": 0\n    }\n  ],\n  \"background\": \"white\",\n  \"data\": [\n    {\n      \"name\": \"source_0\",\n      \"values\": [\n        {\n          \"__count\": 2,\n          \"category_col\": \"cat1\"\n        },\n        {\n          \"__count\": 1,\n          \"category_col\": \"cat2\"\n        }\n      ]\n    },\n    {\n      \"name\": \"source_0_x_domain___count\",\n      \"values\": [\n        {\n          \"max\": 2,\n          \"min\": 1\n        }\n      ]\n    },\n    {\n      \"name\": \"source_0_y_domain_category_col\",\n      \"values\": [\n        {\n          \"category_col\": \"cat1\"\n        },\n        {\n          \"category_col\": \"cat2\"\n        }\n      ]\n    }\n  ],\n  \"marks\": [\n    {\n      \"encode\": {\n        \"update\": {\n          \"fill\": {\n            \"value\": \"#4c78a8\"\n          },\n          \"height\": {\n            \"signal\": \"max(0.25, bandwidth('y'))\"\n          },\n          \"x\": {\n            \"field\": \"__count\",\n            \"scale\": \"x\"\n          },\n          \"x2\": {\n            \"scale\": \"x\",\n            \"value\": 0\n          },\n          \"y\": {\n            \"field\": \"category_col\",\n            \"scale\": \"y\"\n          }\n        }\n      },\n      \"from\": {\n        \"data\": \"source_0\"\n      },\n      \"name\": \"marks\",\n      \"style\": [\n        \"bar\"\n      ],\n      \"type\": \"rect\"\n    }\n  ],\n  \"padding\": 5,\n  \"scales\": [\n    {\n      \"domain\": [\n        {\n          \"signal\": \"(data(\\\"source_0_x_domain___count\\\")[0] || {}).min\"\n        },\n        {\n          \"signal\": \"(data(\\\"source_0_x_domain___count\\\")[0] || {}).max\"\n        }\n      ],\n      \"name\": \"x\",\n      \"nice\": true,\n      \"range\": [\n        0,\n        {\n          \"signal\": \"width\"\n        }\n      ],\n      \"type\": \"linear\",\n      \"zero\": true\n    },\n    {\n      \"domain\": {\n        \"data\": \"source_0_y_domain_category_col\",\n        \"field\": \"category_col\",\n        \"sort\": true\n      },\n      \"name\": \"y\",\n      \"paddingInner\": 0.1,\n      \"paddingOuter\": 0.05,\n      \"range\": {\n        \"step\": {\n          \"signal\": \"y_step\"\n        }\n      },\n      \"type\": \"band\"\n    }\n  ],\n  \"signals\": [\n    {\n      \"init\": \"isFinite(containerSize()[0]) ? containerSize()[0] : 300\",\n      \"name\": \"width\",\n      \"on\": [\n        {\n          \"events\": \"window:resize\",\n          \"update\": \"isFinite(containerSize()[0]) ? containerSize()[0] : 300\"\n        }\n      ]\n    },\n    {\n      \"name\": \"y_step\",\n      \"value\": 20\n    },\n    {\n      \"name\": \"height\",\n      \"update\": \"bandspace(domain('y').length, 0.1, 0.05) * y_step\"\n    }\n  ],\n  \"style\": \"cell\"\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Marimo App in Python\nDESCRIPTION: Sets up a Marimo application with a custom title. This snippet initializes the app and defines its basic structure.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/snapshots/unsafe-doc.py.txt#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport marimo\n\n__generated_with = \"0.0.0\"\napp = marimo.App(app_title=\"Casually malicious md\")\n```\n\n----------------------------------------\n\nTITLE: Defining a Marimo Cell in Python\nDESCRIPTION: Demonstrates how to create a Marimo cell using the @app.cell decorator. The cell function includes inputs, computations, and outputs.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/editor_features/watching.md#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@app.cell\ndef memorable_cell_name(auto, determined, references):  # signature denotes cell inputs\n    computed_value = auto + determined + references\n    \"hello!\"                                            # final statement are outputted\n    return computed_value                               # return denotes cell outputs\n```\n\n----------------------------------------\n\nTITLE: Importing and Using a Top-Level Function from Marimo Notebook\nDESCRIPTION: This snippet demonstrates how to import a top-level function defined in a marimo notebook into another Python script and use it to calculate statistics on a dataset.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/reusing_functions.md#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# In another_script.py\nfrom my_notebook import calculate_statistics\n\ndata = [1, 2, 3, 4, 5]\nstats = calculate_statistics(data)\nprint(stats)\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Marimo Island Component\nDESCRIPTION: Defines a Marimo island component with data attributes for app and cell identification, reactivity configuration, and a markdown cell containing 'Hello, islands!' content.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_islands/snapshots/island-no-output.txt#2025-04-19_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<marimo-island\n    data-app-id=\"main\"\n    data-cell-id=\"MJUe\"\n    data-reactive=\"true\"\n>\n    <marimo-cell-output>\n    </marimo-cell-output>\n    <marimo-cell-code hidden>mo.md('Hello%2C%20islands!')</marimo-cell-code>\n</marimo-island>\n```\n\n----------------------------------------\n\nTITLE: Implementing Google Analytics in Marimo Head\nDESCRIPTION: HTML code for integrating Google Analytics tracking into a Marimo notebook using gtag.js.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/configuration/html_head.md#2025-04-19_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- Google tag (gtag.js) -->\n<script async src=\"https://www.googletagmanager.com/gtag/js?id=G-XXXXXXXXXX\"></script>\n<script>\n  window.dataLayer = window.dataLayer || [];\n  function gtag() {\n    dataLayer.push(arguments);\n  }\n  gtag('js', new Date());\n  gtag('config', 'G-XXXXXXXXXX');\n</script>\n```\n\n----------------------------------------\n\nTITLE: Defining Marimo Best Practices Dictionary\nDESCRIPTION: A comprehensive dictionary containing best practices and tips for using Marimo effectively, including examples of proper variable management and caching\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/snapshots/dataflow.md.txt#2025-04-19_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ntips = {\n    \"Use global variables sparingly\": (\n        \"\"\"\n        Keep the number of global variables in your program small to avoid\n        name collisions across cells. Keep the number of global variables \n        defined by any one cell small to make sure that the units of\n        reactive execution are small. \n        \"\"\"\n    ),\n    \"Use descriptive names\": (\n        \"\"\"\n        Use descriptive variable names, especially for global variables.\n        This will help you minimize name clashes, and will also result in\n        better code.\n        \"\"\"\n    ),\n    \"Use functions\": (\n        \"\"\"\n        Encapsulate logic into functions to avoid polluting the global\n        namespace with temporary or intermediate variables.\n        \"\"\"\n    ),\n    \"Minimize mutations\": (\n        \"\"\"\n        We saw earlier that marimo cannot track object mutations. So try\n        to only mutate an object in the cell that creates it, or create\n        new objects instead of mutating existing ones.\n\n        For example, don't do this:\n\n        ```python3\n        # a cell\n        numbers = [1, 2, 3]\n        ```\n\n        ```python3\n        # another cell\n        numbers.append(4)\n        ```\n\n        Instead, prefer\n\n        ```python3\n        # a cell\n        numbers = [1, 2, 3]\n        numbers.append(4)\n        ```\n\n        or\n\n        ```python3\n        # a cell\n        numbers = [1, 2, 3]\n        ```\n\n        ```python3\n        # another cell\n        more_numbers = numbers + [4]\n        ```\n        \"\"\"\n    ),\n    \"Write idempotent cells\": (\n        \"\"\"  \n        Write cells whose outputs and behavior are the same when given\n        the same inputs (refs); such cells are called _idempotent_. This will\n        help you avoid bugs, and let you cache expensive intermediate\n        computations (see the next tip).\n        \"\"\"\n    ),\n    \"Cache intermediate computations with `@mo.cache`\": (\n        \"\"\"\n        Use `mo.cache` to cache the return value of expensive functions.\n        You can do this if you abstract complex logic into idempotent\n        functions, following earlier tips.\n\n        For example:\n\n        ```python3\n        import marimo as mo\n\n        @mo.cache\n        def compute_prediction(problem_parameters):\n          ...\n        ```\n\n        Whenever `compute_predictions` is called with a value of\n        `problem_parameters` it has not seen, it will compute the predictions\n        and store them in a cache. The next time it is called with the same\n        parameters, instead of recomputing the predictions, it will just \n        fetch the previously computed ones from the cache.\n\n        If you are familiar with `functools.cache`, `mo.cache` is\n        similar but more robust, with the cache persisting even\n        if the cell defining the function is re-run.\n        \"\"\"\n    ),\n}\n```\n\n----------------------------------------\n\nTITLE: Appending to Cell Output in Marimo (Python)\nDESCRIPTION: The mo.output.append() function is used to add content to the existing output of a cell in a Marimo notebook without replacing it entirely.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/api/outputs.md#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nmarimo.output.append\n```\n\n----------------------------------------\n\nTITLE: Installing SQL dependencies for marimo with pip\nDESCRIPTION: Command to install marimo with SQL support using pip package manager.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/working_with_data/sql.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install \"marimo[sql]\"\n```\n\n----------------------------------------\n\nTITLE: Running SQL Queries in Marimo Markdown\nDESCRIPTION: Demonstrates how to execute SQL queries within a Marimo Markdown notebook and assign results to a dataframe.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/marimo/_tutorials/markdown_format.md#2025-04-19_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nSELECT GREATEST(a, b), SQRT(c) from uniformly_random_numbers\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT i.range::text AS id,\n       random() AS a,\n       random() AS b,\n       random() AS c\nFROM range(1, {sample_count.value + 1}) i;\n```\n\n----------------------------------------\n\nTITLE: Illustrating Variable Reassignment Restrictions in marimo (Python)\nDESCRIPTION: This code demonstrates marimo's restriction on variable reassignment, which is not allowed due to the reactive execution model.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/snapshots/marimo_for_jupyter_users.md.txt#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndf = 0\n```\n\nLANGUAGE: python\nCODE:\n```\ndf = 1\n```\n\nLANGUAGE: python\nCODE:\n```\nresults = df.groupby([\"my_column\"]).sum()\n```\n\n----------------------------------------\n\nTITLE: Running Notebook as App\nDESCRIPTION: Command to serve a marimo notebook as an application with hidden code.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/getting_started/quickstart.md#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmarimo run your_notebook.py\n```\n\n----------------------------------------\n\nTITLE: Marimo Layout Functions Table in Markdown\nDESCRIPTION: Markdown table listing stateless layout functions in Marimo with their descriptions. These functions help arrange content without maintaining state.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/api/layouts/index.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Function | Description |\n|----------|-------------|\n| [`marimo.accordion`][marimo.accordion] | Create collapsible sections |\n| [`marimo.carousel`][marimo.carousel] | Create a slideshow |\n| [`marimo.callout`][marimo.callout] | Create highlighted sections |\n| [`marimo.center`][marimo.center] | Center content |\n| [`marimo.hstack`][marimo.hstack] | Stack elements horizontally |\n| [`marimo.lazy`][marimo.lazy] | Lazy load content |\n| [`marimo.left`][marimo.left] | Left-align content |\n| [`marimo.nav_menu`][marimo.nav_menu] | Create navigation menus |\n| [`marimo.plain`][marimo.plain] | Display content without styling |\n| [`marimo.right`][marimo.right] | Right-align content |\n| [`marimo.routes`][marimo.routes] | Create page routing |\n| [`marimo.stat`][marimo.stat] | Display statistics |\n| [`marimo.sidebar`][marimo.sidebar] | Create sidebars |\n| [`marimo.tree`][marimo.tree] | Create tree structures |\n| [`marimo.json`][marimo.json] | Create JSON structures |\n| [`marimo.vstack`][marimo.vstack] | Stack elements vertically |\n```\n\n----------------------------------------\n\nTITLE: Embedding Video in Marimo with mo.video Function\nDESCRIPTION: This snippet demonstrates how to embed a video in a Marimo application using the mo.video function. It specifies a video source URL and disables playback controls via the controls parameter.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/api/media/video.md#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@app.cell\ndef __():\n    mo.video(\n        src=\"https://v3.cdnpk.net/videvo_files/video/free/2013-08/large_watermarked/hd0992_preview.mp4\",\n        controls=False,\n    )\n    return\n```\n\n----------------------------------------\n\nTITLE: Configuring Vega Bar Chart Specification in JSON\nDESCRIPTION: A comprehensive Vega specification that creates a bar chart visualization showing counts of boolean values. The chart includes customized axes, responsive width handling, and specific styling for bars and labels. It uses a band scale for x-axis and linear scale for y-axis.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_data/snapshots/column_preview_bool_chart_spec_with_vegafusion.txt#2025-04-19_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://vega.github.io/schema/vega/v5.json\",\n  \"autosize\": {\n    \"contains\": \"padding\",\n    \"type\": \"fit-x\"\n  },\n  \"axes\": [\n    {\n      \"aria\": false,\n      \"domain\": false,\n      \"grid\": true,\n      \"gridScale\": \"x\",\n      \"labels\": false,\n      \"maxExtent\": 0,\n      \"minExtent\": 0,\n      \"orient\": \"left\",\n      \"scale\": \"y\",\n      \"tickCount\": {\n        \"signal\": \"ceil(height/40)\"\n      },\n      \"ticks\": false,\n      \"zindex\": 0\n    },\n    {\n      \"grid\": false,\n      \"labelAlign\": \"right\",\n      \"labelAngle\": 270,\n      \"labelBaseline\": \"middle\",\n      \"orient\": \"bottom\",\n      \"scale\": \"x\",\n      \"title\": \"bool_col\",\n      \"zindex\": 0\n    },\n    {\n      \"grid\": false,\n      \"labelOverlap\": true,\n      \"orient\": \"left\",\n      \"scale\": \"y\",\n      \"tickCount\": {\n        \"signal\": \"ceil(height/40)\"\n      },\n      \"title\": \"Count of Records\",\n      \"zindex\": 0\n    }\n  ],\n  \"background\": \"white\",\n  \"data\": [\n    {\n      \"name\": \"source_0\",\n      \"values\": [\n        {\n          \"__count\": 2,\n          \"bool_col\": true\n        },\n        {\n          \"__count\": 1,\n          \"bool_col\": false\n        }\n      ]\n    },\n    {\n      \"name\": \"source_0_x_domain_bool_col\",\n      \"values\": [\n        {\n          \"bool_col\": true\n        },\n        {\n          \"bool_col\": false\n        }\n      ]\n    },\n    {\n      \"name\": \"source_0_y_domain___count\",\n      \"values\": [\n        {\n          \"max\": 2,\n          \"min\": 1\n        }\n      ]\n    }\n  ],\n  \"height\": 300,\n  \"marks\": [\n    {\n      \"encode\": {\n        \"update\": {\n          \"fill\": {\n            \"value\": \"#4c78a8\"\n          },\n          \"width\": {\n            \"signal\": \"max(0.25, bandwidth('x'))\"\n          },\n          \"x\": {\n            \"field\": \"bool_col\",\n            \"scale\": \"x\"\n          },\n          \"y\": {\n            \"field\": \"__count\",\n            \"scale\": \"y\"\n          },\n          \"y2\": {\n            \"scale\": \"y\",\n            \"value\": 0\n          }\n        }\n      },\n      \"from\": {\n        \"data\": \"source_0\"\n      },\n      \"name\": \"marks\",\n      \"style\": [\n        \"bar\"\n      ],\n      \"type\": \"rect\"\n    }\n  ],\n  \"padding\": 5,\n  \"scales\": [\n    {\n      \"domain\": {\n        \"data\": \"source_0_x_domain_bool_col\",\n        \"field\": \"bool_col\",\n        \"sort\": true\n      },\n      \"name\": \"x\",\n      \"paddingInner\": 0.1,\n      \"paddingOuter\": 0.05,\n      \"range\": [\n        0,\n        {\n          \"signal\": \"width\"\n        }\n      ],\n      \"type\": \"band\"\n    },\n    {\n      \"domain\": [\n        {\n          \"signal\": \"(data(\\\"source_0_y_domain___count\\\")[0] || {}).min\"\n        },\n        {\n          \"signal\": \"(data(\\\"source_0_y_domain___count\\\")[0] || {}).max\"\n        }\n      ],\n      \"name\": \"y\",\n      \"nice\": true,\n      \"range\": [\n        {\n          \"signal\": \"height\"\n        },\n        0\n      ],\n      \"type\": \"linear\",\n      \"zero\": true\n    }\n  ],\n  \"signals\": [\n    {\n      \"init\": \"isFinite(containerSize()[0]) ? containerSize()[0] : 300\",\n      \"name\": \"width\",\n      \"on\": [\n        {\n          \"events\": \"window:resize\",\n          \"update\": \"isFinite(containerSize()[0]) ? containerSize()[0] : 300\"\n        }\n      ]\n    }\n  ],\n  \"style\": \"cell\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Main Execution Block for Marimo App\nDESCRIPTION: Sets up the main execution block for the Marimo app, ensuring the app runs when the script is executed directly.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/snapshots/unsafe-doc.py.txt#2025-04-19_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nif __name__ == \"__main__\":\n    app.run()\n```\n\n----------------------------------------\n\nTITLE: Wave Plot Function Definition\nDESCRIPTION: Defines the plot_wave function that creates a sine wave visualization using matplotlib.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/snapshots/dataflow.md.txt#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef plot_wave(amplitude, period):\n    x = np.linspace(0, 2 * np.pi, 256)\n    plt.plot(x, amplitude * np.sin(2 * np.pi / period * x))\n    plt.xlim(0, 2 * np.pi)\n    plt.ylim(-2, 2)\n    plt.xticks(\n        [0, np.pi / 2, np.pi, 3 * np.pi / 2, 2 * np.pi],\n        [0, r\"$\\pi/2$\", r\"$\\pi$\", r\"$3\\pi/2$\", r\"$2\\pi$\"],\n    )\n    plt.yticks([-2, -1, 0, 1, 2])\n    plt.gcf().set_size_inches(6.5, 2.4)\n    return plt.gca()\n\nmo.md(\n    f\"\"\"\n    - `refs: {mo.refs()}`\n    - `defs: {mo.defs()}`\n    \"\"\"\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Vega Histogram Chart Configuration in JSON\nDESCRIPTION: This JSON configuration specifies a Vega histogram chart. It includes settings for chart size, axes, data sources, marks for bars, scales, and signals for dynamic sizing. The chart bins data for variable 'A' and displays the count of records in each bin.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_data/snapshots/column_preview_int_chart_spec_with_vegafusion.txt#2025-04-19_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"$schema\": \"https://vega.github.io/schema/vega/v5.json\",\n  \"autosize\": {\n    \"contains\": \"padding\",\n    \"type\": \"fit-x\"\n  },\n  \"axes\": [\n    {\n      \"aria\": false,\n      \"domain\": false,\n      \"grid\": true,\n      \"gridScale\": \"x\",\n      \"labels\": false,\n      \"maxExtent\": 0,\n      \"minExtent\": 0,\n      \"orient\": \"left\",\n      \"scale\": \"y\",\n      \"tickCount\": {\n        \"signal\": \"ceil(height/40)\"\n      },\n      \"ticks\": false,\n      \"zindex\": 0\n    },\n    {\n      \"grid\": false,\n      \"labelFlush\": true,\n      \"labelOverlap\": true,\n      \"orient\": \"bottom\",\n      \"scale\": \"x\",\n      \"tickCount\": {\n        \"signal\": \"ceil(width/10)\"\n      },\n      \"title\": \"A (binned)\",\n      \"zindex\": 0\n    },\n    {\n      \"grid\": false,\n      \"labelOverlap\": true,\n      \"orient\": \"left\",\n      \"scale\": \"y\",\n      \"tickCount\": {\n        \"signal\": \"ceil(height/40)\"\n      },\n      \"title\": \"Count of Records\",\n      \"zindex\": 0\n    }\n  ],\n  \"background\": \"white\",\n  \"data\": [\n    {\n      \"name\": \"source_0\",\n      \"values\": [\n        {\n          \"__count\": 1,\n          \"bin_maxbins_10_A\": 1.0,\n          \"bin_maxbins_10_A_end\": 1.2\n        },\n        {\n          \"__count\": 1,\n          \"bin_maxbins_10_A\": 2.0,\n          \"bin_maxbins_10_A_end\": 2.2\n        },\n        {\n          \"__count\": 1,\n          \"bin_maxbins_10_A\": 2.8,\n          \"bin_maxbins_10_A_end\": 3.0\n        }\n      ]\n    },\n    {\n      \"name\": \"source_0_y_domain___count\",\n      \"values\": [\n        {\n          \"max\": 1,\n          \"min\": 1\n        }\n      ]\n    }\n  ],\n  \"height\": 300,\n  \"marks\": [\n    {\n      \"encode\": {\n        \"update\": {\n          \"fill\": {\n            \"value\": \"#4c78a8\"\n          },\n          \"x\": {\n            \"field\": \"bin_maxbins_10_A_end\",\n            \"offset\": {\n              \"signal\": \"0.5 + (abs(scale(\\\"x\\\", datum[\\\"bin_maxbins_10_A_end\\\"]) - scale(\\\"x\\\", datum[\\\"bin_maxbins_10_A\\\"])) < 0.25 ? 0.5 * (0.25 - (abs(scale(\\\"x\\\", datum[\\\"bin_maxbins_10_A_end\\\"]) - scale(\\\"x\\\", datum[\\\"bin_maxbins_10_A\\\"])))) : -0.5)\"\n            },\n            \"scale\": \"x\"\n          },\n          \"x2\": {\n            \"field\": \"bin_maxbins_10_A\",\n            \"offset\": {\n              \"signal\": \"0.5 + (abs(scale(\\\"x\\\", datum[\\\"bin_maxbins_10_A_end\\\"]) - scale(\\\"x\\\", datum[\\\"bin_maxbins_10_A\\\"])) < 0.25 ? -0.5 * (0.25 - (abs(scale(\\\"x\\\", datum[\\\"bin_maxbins_10_A_end\\\"]) - scale(\\\"x\\\", datum[\\\"bin_maxbins_10_A\\\"])))) : 0.5)\"\n            },\n            \"scale\": \"x\"\n          },\n          \"y\": {\n            \"field\": \"__count\",\n            \"scale\": \"y\"\n          },\n          \"y2\": {\n            \"scale\": \"y\",\n            \"value\": 0\n          }\n        }\n      },\n      \"from\": {\n        \"data\": \"source_0\"\n      },\n      \"name\": \"marks\",\n      \"style\": [\n        \"bar\"\n      ],\n      \"type\": \"rect\"\n    }\n  ],\n  \"padding\": 5,\n  \"scales\": [\n    {\n      \"bins\": {\n        \"signal\": \"bin_maxbins_10_A_bins\"\n      },\n      \"domain\": {\n        \"signal\": \"[bin_maxbins_10_A_bins.start, bin_maxbins_10_A_bins.stop]\"\n      },\n      \"name\": \"x\",\n      \"range\": [\n        0,\n        {\n          \"signal\": \"width\"\n        }\n      ],\n      \"type\": \"linear\",\n      \"zero\": false\n    },\n    {\n      \"domain\": [\n        {\n          \"signal\": \"(data(\\\"source_0_y_domain___count\\\")[0] || {}).min\"\n        },\n        {\n          \"signal\": \"(data(\\\"source_0_y_domain___count\\\")[0] || {}).max\"\n        }\n      ],\n      \"name\": \"y\",\n      \"nice\": true,\n      \"range\": [\n        {\n          \"signal\": \"height\"\n        },\n        0\n      ],\n      \"type\": \"linear\",\n      \"zero\": true\n    }\n  ],\n  \"signals\": [\n    {\n      \"name\": \"bin_maxbins_10_A_bins\",\n      \"value\": {\n        \"fields\": [\n          \"A\"\n        ],\n        \"fname\": \"bin_A\",\n        \"start\": 1.0,\n        \"step\": 0.2,\n        \"stop\": 3.0\n      }\n    },\n    {\n      \"init\": \"isFinite(containerSize()[0]) ? containerSize()[0] : 300\",\n      \"name\": \"width\",\n      \"on\": [\n        {\n          \"events\": \"window:resize\",\n          \"update\": \"isFinite(containerSize()[0]) ? containerSize()[0] : 300\"\n        }\n      ]\n    }\n  ],\n  \"style\": \"cell\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing marimo with Recommended Dependencies (uv)\nDESCRIPTION: Command to install marimo with recommended dependencies using uv. This method is faster than pip and includes additional features.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/getting_started/installation.md#2025-04-19_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nuv add \"marimo[recommended]\"\n```\n\n----------------------------------------\n\nTITLE: Creating Markdown Header Cell in Marimo App\nDESCRIPTION: This cell creates a markdown header for the notebook. It uses the mo.md() function to render markdown content.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/snapshots/frontmatter-test.py.txt#2025-04-19_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n@app.cell(hide_code=True)\ndef _(mo):\n    mo.md(\n        r\"\"\"\n        # Notebook\n        \"\"\"\n    )\n    return\n```\n\n----------------------------------------\n\nTITLE: Redirecting Stderr to Cell Output in Marimo (Python)\nDESCRIPTION: The marimo.redirect_stderr() function is used to capture and redirect stderr output to the cell's output in a Marimo notebook, useful for displaying error messages in app views.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/api/outputs.md#2025-04-19_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nmarimo.redirect_stderr\n```\n\n----------------------------------------\n\nTITLE: Running marimo Notebook with Command Line Arguments (Bash)\nDESCRIPTION: Shows how to execute a marimo notebook as a script or an app with command-line arguments. This is equivalent to Papermill's parameterized execution.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/coming_from/papermill.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython notebook.py -- --param1 value1\n```\n\nLANGUAGE: bash\nCODE:\n```\nmarimo run notebook.py -- --param1 value1\n```\n\n----------------------------------------\n\nTITLE: Running Markdown Notebooks with Marimo CLI\nDESCRIPTION: Shows how to edit and run Marimo notebooks stored as .md files using the Marimo command-line interface.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/marimo/_tutorials/markdown_format.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ marimo edit notebook.md\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ marimo run notebook.md\n```\n\n----------------------------------------\n\nTITLE: Running Marimo Server in Development Mode\nDESCRIPTION: Commands to run the Marimo server in regular or debug mode without token authentication for development purposes.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/CONTRIBUTING.md#2025-04-19_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\nmarimo edit --no-token\n# or in debug mode\nmarimo -d edit --no-token\n```\n\n----------------------------------------\n\nTITLE: Loading Data Files in WASM Notebooks\nDESCRIPTION: Shows how to access data files in both local and WASM environments using mo.notebook_location() to construct file paths.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/wasm.md#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport polars as pl\n\npath_to_csv = mo.notebook_location() / \"public\" / \"data.csv\"\ndf = pl.read_csv(str(path_to_csv))\ndf.head()\n```\n\n----------------------------------------\n\nTITLE: Implementing Dropdown Menu Structure in React\nDESCRIPTION: This code snippet showcases the structure and components of a dropdown menu. It includes various sections such as user account, team management, and external links. The menu demonstrates the use of icons, shortcuts, and nested sub-menus.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/frontend/src/stories/dropdown-menu.mdx#2025-04-19_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n<DropdownMenu>\n  <DropdownMenuTrigger asChild>\n    <Button variant=\"outline\">Open</Button>\n  </DropdownMenuTrigger>\n\n  <DropdownMenuContent className=\"w-56\">\n    <DropdownMenuLabel>My Account</DropdownMenuLabel>\n\n    <DropdownMenuSeparator />\n\n    <DropdownMenuGroup>\n      <DropdownMenuItem>\n        <User className=\"mr-2 h-4 w-4\" />\n\n        <span>Profile</span>\n        <DropdownMenuShortcut>⇧⌘P</DropdownMenuShortcut>\n      </DropdownMenuItem>\n\n      <DropdownMenuItem>\n        <CreditCard className=\"mr-2 h-4 w-4\" />\n\n        <span>Billing</span>\n        <DropdownMenuShortcut>⌘B</DropdownMenuShortcut>\n      </DropdownMenuItem>\n\n      <DropdownMenuItem>\n        <Settings className=\"mr-2 h-4 w-4\" />\n\n        <span>Settings</span>\n        <DropdownMenuShortcut>⌘S</DropdownMenuShortcut>\n      </DropdownMenuItem>\n\n      <DropdownMenuItem>\n        <Keyboard className=\"mr-2 h-4 w-4\" />\n\n        <span>Keyboard shortcuts</span>\n        <DropdownMenuShortcut>⌘K</DropdownMenuShortcut>\n      </DropdownMenuItem>\n    </DropdownMenuGroup>\n\n    <DropdownMenuSeparator />\n\n    <DropdownMenuGroup>\n      <DropdownMenuItem>\n        <Users className=\"mr-2 h-4 w-4\" />\n\n        <span>Team</span>\n      </DropdownMenuItem>\n\n      <DropdownMenuSub>\n        <DropdownMenuSubTrigger>\n          <UserPlus className=\"mr-2 h-4 w-4\" />\n\n          <span>Invite users</span>\n        </DropdownMenuSubTrigger>\n\n        <DropdownMenuPortal>\n          <DropdownMenuSubContent>\n            <DropdownMenuItem>\n              <Mail className=\"mr-2 h-4 w-4\" />\n\n              <span>Email</span>\n            </DropdownMenuItem>\n\n            <DropdownMenuItem>\n              <MessageSquare className=\"mr-2 h-4 w-4\" />\n\n              <span>Message</span>\n            </DropdownMenuItem>\n\n            <DropdownMenuSeparator />\n\n            <DropdownMenuItem>\n              <PlusCircle className=\"mr-2 h-4 w-4\" />\n\n              <span>More...</span>\n            </DropdownMenuItem>\n          </DropdownMenuSubContent>\n        </DropdownMenuPortal>\n      </DropdownMenuSub>\n\n      <DropdownMenuItem>\n        <Plus className=\"mr-2 h-4 w-4\" />\n\n        <span>New Team</span>\n        <DropdownMenuShortcut>⌘+T</DropdownMenuShortcut>\n      </DropdownMenuItem>\n    </DropdownMenuGroup>\n\n    <DropdownMenuSeparator />\n\n    <DropdownMenuItem>\n      <Github className=\"mr-2 h-4 w-4\" />\n\n      <span>GitHub</span>\n    </DropdownMenuItem>\n\n    <DropdownMenuItem>\n      <LifeBuoy className=\"mr-2 h-4 w-4\" />\n\n      <span>Support</span>\n    </DropdownMenuItem>\n\n    <DropdownMenuItem disabled>\n      <Cloud className=\"mr-2 h-4 w-4\" />\n\n      <span>API</span>\n    </DropdownMenuItem>\n\n    <DropdownMenuSeparator />\n\n    <DropdownMenuItem>\n      <LogOut className=\"mr-2 h-4 w-4\" />\n\n      <span>Log out</span>\n      <DropdownMenuShortcut>⇧⌘Q</DropdownMenuShortcut>\n    </DropdownMenuItem>\n\n  </DropdownMenuContent>\n</DropdownMenu>\n```\n\n----------------------------------------\n\nTITLE: Creating a Setup Cell in Marimo Notebook\nDESCRIPTION: This snippet demonstrates how to create a setup cell in a marimo notebook for importing necessary libraries. The setup cell is guaranteed to run before other cells and is used for imports that functions or classes will need.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/reusing_functions.md#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\n```\n\n----------------------------------------\n\nTITLE: Configuring Vega-Lite Point Chart with Stock Data in JSON\nDESCRIPTION: This JSON snippet configures a Vega-Lite point chart visualization. It sets up the view dimensions, specifies the data source URL for stock data, defines the mark type as point, and encodes the x-axis with quantitative values. The schema version is also specified.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_plugins/ui/_impl/snapshots/parse_spec_url.txt#2025-04-19_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"config\": {\n    \"view\": {\n      \"continuousWidth\": 300,\n      \"continuousHeight\": 300\n    }\n  },\n  \"data\": {\n    \"url\": \"https://cdn.jsdelivr.net/npm/vega-datasets@v1.29.0/data/stocks.csv\"\n  },\n  \"mark\": {\n    \"type\": \"point\"\n  },\n  \"encoding\": {\n    \"x\": {\n      \"field\": \"values\",\n      \"type\": \"quantitative\"\n    }\n  },\n  \"$schema\": \"https://vega.github.io/schema/vega-lite/v5.20.1.json\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running Marimo App in Python\nDESCRIPTION: Checks if the script is being run as the main program and if so, runs the Marimo app. This allows the script to be executed directly.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/snapshots/converted_unparsable.py.txt#2025-04-19_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nif __name__ == \"__main__\":\n    app.run()\n```\n\n----------------------------------------\n\nTITLE: Basic SQL Query on DataFrame\nDESCRIPTION: SQL query demonstrating how to select all records from a Python DataFrame\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/snapshots/sql.md.txt#2025-04-19_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM df;\n```\n\n----------------------------------------\n\nTITLE: Importing Marimo Library - Python\nDESCRIPTION: Imports the marimo library with an alias 'mo' for markdown manipulation functionality.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/snapshots/ipynb_with_outputs.txt#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport marimo as mo\n```\n\n----------------------------------------\n\nTITLE: Running marimo Tutorials (Bash)\nDESCRIPTION: Commands to run various marimo tutorials from the command-line.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/getting_started/key_concepts.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmarimo tutorial dataflow\n```\n\nLANGUAGE: bash\nCODE:\n```\nmarimo tutorial markdown\n```\n\nLANGUAGE: bash\nCODE:\n```\nmarimo tutorial plots\n```\n\nLANGUAGE: bash\nCODE:\n```\nmarimo tutorial layout\n```\n\nLANGUAGE: bash\nCODE:\n```\nmarimo tutorial ui\n```\n\nLANGUAGE: bash\nCODE:\n```\nmarimo tutorial sql\n```\n\n----------------------------------------\n\nTITLE: Initializing Marimo App and Defining Title\nDESCRIPTION: Sets up a Marimo notebook application and creates the title section using markdown formatting. The code cell is hidden from view when rendered.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/snapshots/no-frontmatter.py.txt#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@app.cell(hide_code=True)\ndef _(mo):\n    mo.md(\n        r\"\"\"\n        # My Notebook\n        \"\"\"\n    )\n    return\n```\n\n----------------------------------------\n\nTITLE: Hot-Reloading WebAssembly Notebooks with Bash Commands\nDESCRIPTION: Bash commands to set up a development environment for hot-reloading WebAssembly notebooks, including watching for changes and serving the application.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/editor_features/watching.md#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# in one terminal, start a watched edit (or run) session\nmarimo edit notebook.py --watch\n\n# in another terminal\nmarimo export html-wasm notebook.py -o output_dir --watch\n\n# in a third terminal, serve the WASM application\ncd path/to/output_dir\npython -m http.server  # or a server that watches for changes\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAI in marimo.toml\nDESCRIPTION: This snippet shows how to configure OpenAI as the AI provider in marimo's configuration file. It includes setting the API key, choosing a model, and specifying the base URL for the API.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/editor_features/ai_completion.md#2025-04-19_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[ai.open_ai]\n# Get your API key from https://platform.openai.com/account/api-keys\napi_key = \"sk-proj-...\"\n# Choose a model, we recommend \"gpt-4-turbo\"\nmodel = \"gpt-4-turbo\"\n# Available models: gpt-4-turbo-preview, gpt-4, gpt-3.5-turbo\n# See https://platform.openai.com/docs/models for all available models\n\n# Change the base_url if you are using a different OpenAI-compatible API\nbase_url = \"https://api.openai.com/v1\"\n```\n\n----------------------------------------\n\nTITLE: Installing SQL dependencies for marimo with uv\nDESCRIPTION: Command to install marimo with SQL support using uv package manager.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/working_with_data/sql.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nuv add \"marimo[sql]\"\n```\n\n----------------------------------------\n\nTITLE: Including Local Images in Markdown\nDESCRIPTION: Demonstrates how to render images from a local public folder within marimo markdown, with reference to static file documentation.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/api/markdown.md#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nmo.md(\n    '''\n    <img src=\"public/image.png\" width=\"100\" />\n    '''\n)\n```\n\n----------------------------------------\n\nTITLE: Exporting marimo Notebook to HTML via Command Line\nDESCRIPTION: This bash command shows how to export a marimo notebook to static HTML using the command-line interface. It specifies the input notebook file and the output HTML file.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/editor_features/overview.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmarimo export html notebook.py -o notebook.html\n```\n\n----------------------------------------\n\nTITLE: Creating New Variables Based on Existing Ones in Python\nDESCRIPTION: This example shows how to work with variables across multiple cells in marimo notebooks. Instead of mutating an existing variable, it demonstrates creating a new variable based on the old one.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/best_practices.md#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nl = [1, 2, 3]\n```\n\nLANGUAGE: python\nCODE:\n```\nextended_list = l + [new_item()]\n```\n\n----------------------------------------\n\nTITLE: Creating Embeddable marimo Notebook Component in JSX\nDESCRIPTION: JSX code snippet for creating a reusable component to embed marimo notebooks in MDX. This component takes a code string as a prop and generates an iframe with the encoded notebook.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/publishing/playground.md#2025-04-19_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nconst MdxNotebook = (props: { code: string }) => {\n  return (\n    <iframe src={`https://marimo.app?embed=true&show-chrome=false&code=${encodeURIComponent(props.code)}`} />\n  );\n};\n\n<MdxNotebook code={`\nimport marimo\n\napp = marimo.App()\n\n@app.cell\ndef _():\n    import marimo as mo\n    mo.md(\"Hello, world!\")\n    return\n\n@app.cell(hide_code=True)\ndef _():\n    ...\n    return \n`} />\n```\n\n----------------------------------------\n\nTITLE: Installing marimo with uv (Minimal Dependencies)\nDESCRIPTION: Command to install marimo using uv, a next-generation Python package installer and manager. This method is faster than pip.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/getting_started/installation.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nuv add marimo\n```\n\n----------------------------------------\n\nTITLE: Temporal Data Visualization with Vega-Lite\nDESCRIPTION: Configuration for visualizing temporal data (date/datetime/time) using bar charts. Includes date formatting and binning configuration for temporal x-axis.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_data/snapshots/charts_json.txt#2025-04-19_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://vega.github.io/schema/vega-lite/v5.20.1.json\",\n  \"config\": {\n    \"view\": {\n      \"continuousHeight\": 300,\n      \"continuousWidth\": 300\n    }\n  },\n  \"data\": {\n    \"name\": \"data-afce120bec1de31b50bc39eae2fedbed\"\n  },\n  \"datasets\": {\n    \"data-afce120bec1de31b50bc39eae2fedbed\": [\n      {\n        \"some_column\": 1\n      },\n      {\n        \"some_column\": 2\n      },\n      {\n        \"some_column\": 3\n      }\n    ]\n  },\n  \"encoding\": {\n    \"x\": {\n      \"axis\": {\n        \"format\": \"%Y-%m-%d\"\n      },\n      \"bin\": {\n        \"maxbins\": 20\n      },\n      \"field\": \"some_column\",\n      \"type\": \"temporal\"\n    },\n    \"y\": {\n      \"aggregate\": \"count\",\n      \"type\": \"quantitative\"\n    }\n  },\n  \"mark\": {\n    \"type\": \"bar\"\n  },\n  \"width\": \"container\"\n}\n```\n\n----------------------------------------\n\nTITLE: Viewing Marimo Configuration\nDESCRIPTION: Command to display current Marimo configuration and locate the config file.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/configuration/index.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmarimo config show\n```\n\n----------------------------------------\n\nTITLE: Displaying Images in Marimo Cell\nDESCRIPTION: Shows how to embed and display images in a Marimo cell output. Uses mo.image() function to render an image from a URL.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_islands/snapshots/island-mimetypes.txt#2025-04-19_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<marimo-island data-app-id=\"main\" data-cell-id=\"vblA\" data-reactive=\"true\">\n    <marimo-cell-output>\n    <img src='https://example.com/image.png' />\n    </marimo-cell-output>\n    <marimo-cell-code hidden>mo.image('https%3A%2F%2Fexample.com%2Fimage.png')</marimo-cell-code>\n</marimo-island>\n```\n\n----------------------------------------\n\nTITLE: Initializing and Running a Marimo Application in Python\nDESCRIPTION: This code snippet sets up a Marimo application with a single cell that prints 'Hello, World!'. It imports the marimo library, creates an App instance, defines a cell using the @app.cell decorator, and runs the application if the script is executed directly.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/snapshots/ipynb_to_marimo.txt#2025-04-19_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport marimo\n\n\napp = marimo.App()\n\n\n@app.cell\ndef _():\n    print('Hello, World!')\n    return\n\n\nif __name__ == \"__main__\":\n    app.run()\n```\n\n----------------------------------------\n\nTITLE: Adding Markdown Appendix\nDESCRIPTION: Creates an appendix section using markdown formatting with bold text and a bullet point. The code cell is hidden from view when rendered.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/snapshots/no-frontmatter.py.txt#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@app.cell(hide_code=True)\ndef _(mo):\n    mo.md(\n        r\"\"\"\n        **Appendix**\n        - This is the end of the notebook\n        \"\"\"\n    )\n    return\n```\n\n----------------------------------------\n\nTITLE: Threading Output Configuration\nDESCRIPTION: Shows how to patch threading.Thread to forward outputs from third-party code\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/outputs.md#2025-04-19_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport threading\nimport marimo as mo\n\nthreading.Thread = mo.Thread\n```\n\n----------------------------------------\n\nTITLE: Parameterized Markdown Display - Python\nDESCRIPTION: Uses the control dependency and displays parameterized markdown text with an interpolated numeric value using f-strings.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/snapshots/ipynb_with_outputs.txt#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ncontrol_dep\nmo.md(f\"parameterized markdown {123}\")\n```\n\n----------------------------------------\n\nTITLE: Installing marimo with conda (Minimal Dependencies)\nDESCRIPTION: Command to install marimo using conda from the conda-forge channel. This is useful for users who manage their Python environments with conda.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/getting_started/installation.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nconda install -c conda-forge marimo\n```\n\n----------------------------------------\n\nTITLE: Configuring Anthropic in marimo.toml\nDESCRIPTION: This code snippet demonstrates how to set up Anthropic as the AI provider in marimo's configuration file. It includes specifying the model and API key for Anthropic.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/editor_features/ai_completion.md#2025-04-19_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[ai.open_ai]\nmodel = \"claude-3-7-sonnet-20250219\"\n# or any model from https://docs.anthropic.com/en/docs/about-claude/models\n\n[ai.anthropic]\napi_key = \"sk-ant-...\"\n```\n\n----------------------------------------\n\nTITLE: WASM Export Commands\nDESCRIPTION: Commands for exporting to WASM-powered HTML in different modes.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/exporting.md#2025-04-19_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# export as readonly, with code locked\nmarimo export html-wasm notebook.py -o output_dir --mode run\n# export as an editable notebook\nmarimo export html-wasm notebook.py -o output_dir --mode edit\n```\n\n----------------------------------------\n\nTITLE: Forcing Dark Mode in Python Script Metadata\nDESCRIPTION: This Python snippet shows how to force dark mode for a marimo application using script metadata configuration.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/configuration/theming.md#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# /// script\n# [tool.marimo.display]\n# theme = \"dark\"\n# ///\n```\n\n----------------------------------------\n\nTITLE: Generating OpenAPI Client in Marimo\nDESCRIPTION: This command generates a client from the OpenAPI schema. It's part of the frontend code generation process in Marimo.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/development_docs/openapi.md#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmake fe-codegen\n```\n\n----------------------------------------\n\nTITLE: Running Marimo Example with UV\nDESCRIPTION: Command to run a marimo example notebook using UV for dependency management. This command opens the seam_carving.py example in a sandboxed environment.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/examples/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nuvx marimo edit --sandbox https://github.com/marimo-team/marimo/blob/main/examples/misc/seam_carving.py\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Google Cloud Default Credentials\nDESCRIPTION: Command to set up application default credentials for local development using gcloud CLI.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/integrations/google_cloud_bigquery.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngcloud auth application-default login\n```\n\n----------------------------------------\n\nTITLE: Setting up Marimo Islands with HTML\nDESCRIPTION: This snippet shows the HTML setup required for Marimo Islands, including the necessary script and stylesheet links for the Marimo team's islands package and additional font resources.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/island_example.md#2025-04-19_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<script\n  type=\"module\"\n  src=\"https://cdn.jsdelivr.net/npm/@marimo-team/islands@0.5.0/dist/main.js\"\n></script>\n<link\n  href=\"https://cdn.jsdelivr.net/npm/@marimo-team/islands@0.5.0/dist/style.css\"\n  rel=\"stylesheet\"\n  crossorigin=\"anonymous\"\n/>\n<link rel=\"preconnect\" href=\"https://fonts.googleapis.com\" />\n<link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin />\n<link\n  href=\"https://fonts.googleapis.com/css2?family=Fira+Mono:wght@400;500;700&amp;family=Lora&amp;family=PT+Sans:wght@400;700&amp;display=swap\"\n  rel=\"stylesheet\"\n/>\n<link\n  rel=\"stylesheet\"\n  href=\"https://cdn.jsdelivr.net/npm/katex@0.16.10/dist/katex.min.css\"\n  integrity=\"sha384-wcIxkf4k558AjM3Yz3BBFQUbk/zgIYC2R0QpeeYb+TwlBVMrlgLqwRjRtGZiK7ww\"\n  crossorigin=\"anonymous\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Installing marimo with Recommended Dependencies (conda)\nDESCRIPTION: Command to install marimo and its recommended dependencies using conda. This includes specific versions of various packages to enable additional features.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/getting_started/installation.md#2025-04-19_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nconda install -c conda-forge marimo \"duckdb>=1.0.0\" \"altair>=5.4.0\" pyarrow \"polars>=1.9.0\" \"sqlglot>=23.4\" \"openai>=1.55.3\" \"ruff\" \"nbformat>=5.7.0\" \"vegafusion>=2.0.0\" \"vl-convert-python>=1.0.0\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Variables and Rendering Markdown with Marimo in Python\nDESCRIPTION: This snippet initializes a control_dep variable and renders markdown content using Marimo's md function. It demonstrates basic usage of Marimo for displaying markdown in a notebook environment.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/snapshots/ipynb_topdown.txt#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ncontrol_dep = None\nmo.md(\"markdown\")\n```\n\n----------------------------------------\n\nTITLE: Installing marimo with recommended dependencies\nDESCRIPTION: Command to install marimo with additional dependencies for SQL cells and AI completion.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/index.md#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npip install marimo[recommended]\n```\n\n----------------------------------------\n\nTITLE: Creating a Slider UI Element with Marimo in Python\nDESCRIPTION: This code creates a slider UI element using Marimo. The slider ranges from 0 to 10, allowing user input within this range.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/snapshots/ipynb_with_errors.txt#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nslider = mo.ui.slider(0, 10)\n```\n\n----------------------------------------\n\nTITLE: Checking for marimo Notebook Execution in Python\nDESCRIPTION: This snippet demonstrates how to check if Python is running in a marimo notebook using the mo.running_in_notebook function. This can be useful when developing library code that integrates with marimo.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/integrating_with_marimo/index.md#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nmo.running_in_notebook\n```\n\n----------------------------------------\n\nTITLE: Running All Tests for Marimo\nDESCRIPTION: Command to run all tests including frontend, Python, and end-to-end tests for comprehensive validation.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/CONTRIBUTING.md#2025-04-19_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nmake test\n```\n\n----------------------------------------\n\nTITLE: Connecting to MotherDuck Database using SQL\nDESCRIPTION: SQL command to attach a MotherDuck database to the current session\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/integrations/motherduck.md#2025-04-19_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nATTACH IF NOT EXISTS 'md:my_db'\n```\n\n----------------------------------------\n\nTITLE: Defining Marimo Cell with Variable Assignment in Python\nDESCRIPTION: This cell defines a Marimo cell that assigns a value to a variable 'x' and returns it as a tuple. It demonstrates how to create a basic cell with a simple operation.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/snapshots/converted_arithmetic.py.txt#2025-04-19_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n@app.cell\ndef _():\n    x = 0\n    x\n    return (x,)\n```\n\n----------------------------------------\n\nTITLE: Installing Required Packages for Google Sheets Integration\nDESCRIPTION: This command installs the necessary Python packages (gspread and oauth2client) for working with Google Sheets in a Marimo project.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/integrations/google_sheets.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install gspread oauth2client\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables in pyproject.toml\nDESCRIPTION: TOML configuration for specifying multiple .env file locations for environment variable loading.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/configuration/runtime_configuration.md#2025-04-19_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[tool.marimo.runtime]\ndotenv = [\".env\", \".env.testing\"]\n```\n\n----------------------------------------\n\nTITLE: Generating Dynamic Markdown with Marimo in Python\nDESCRIPTION: This code creates a dynamic markdown output using Marimo. It uses an f-string to repeat an island emoji based on the value of the slider, demonstrating reactive behavior.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/island_example.md#2025-04-19_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nmo.md(f'Hello, islands! {\"\\ud83c\\udfdd\\ufe0f\" * slider.value}')\n```\n\n----------------------------------------\n\nTITLE: Initializing Marimo App in Python\nDESCRIPTION: This snippet imports the Marimo library and creates a new Marimo App instance. It sets up the foundation for defining cells and running the application.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/snapshots/converted_arithmetic.py.txt#2025-04-19_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport marimo\n\napp = marimo.App()\n```\n\n----------------------------------------\n\nTITLE: Variable Operations with HTML Output\nDESCRIPTION: Performs arithmetic operations on variables and displays result as HTML\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_server/export/snapshots/notebook_with_outputs.ipynb.txt#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ny = x + 1\ny * 2\n```\n\n----------------------------------------\n\nTITLE: Overriding Marimo Settings in pyproject.toml\nDESCRIPTION: Example of overriding user configuration settings using pyproject.toml file, showing formatting and display settings.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/configuration/index.md#2025-04-19_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[tool.marimo.formatting]\nline_length = 120\n\n[tool.marimo.display]\ndefault_width = \"full\"\n```\n\n----------------------------------------\n\nTITLE: Rendering Complex Markdown with Embedded Code in Marimo\nDESCRIPTION: Creates a markdown cell with embedded Python code and HTML comments, showcasing how Marimo handles mixed content types.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/snapshots/unsafe-doc.py.txt#2025-04-19_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@app.cell(hide_code=True)\ndef _(mo):\n    mo.md(\n        r\"\"\"\n        <!-- Actually markdown -->\n        ```python {.marimo} `\n          print(\"Hello, World!\")\n\n        <!-- Disabled code block -->\n        \"\"\"\n    )\n    return\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Marimo Examples with UV\nDESCRIPTION: Instructions for installing UV and running Marimo example notebooks in an isolated virtual environment. This method automatically installs the notebook's dependencies.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/examples/ai/README.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. [Install `uv`](https://github.com/astral-sh/uv/?tab=readme-ov-file#installation)\n2. Open an example with `uvx marimo edit --sandbox <notebook-url>`\n```\n\n----------------------------------------\n\nTITLE: Correct UI Element Event Handler Implementation\nDESCRIPTION: Proper implementation of button event handlers in an array using explicit binding of loop variables\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/faq.md#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\narray = mo.ui.array(\n    [mo.ui.button(on_change=lambda value, i=i: print(i)) for i in range(10)]\n)\narray\n```\n\n----------------------------------------\n\nTITLE: Running marimo notebooks as web apps\nDESCRIPTION: Command to run a marimo notebook as a web app, hiding Python code.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/index.md#2025-04-19_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmarimo run your_notebook.py\n```\n\n----------------------------------------\n\nTITLE: Creating Altair Bar Chart for Unknown Data Type in Python\nDESCRIPTION: This snippet creates a default bar chart using Altair for unknown data types. It treats the data as nominal on the x-axis and displays the count on the y-axis.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_data/snapshots/charts.txt#2025-04-19_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\n_chart = (\n    alt.Chart(df)\n    .mark_bar()\n    .encode(\n        x=alt.X(\"some_column\", type=\"nominal\"),\n        y=alt.Y(\"count()\", type=\"quantitative\"),\n    )\n    .properties(width=\"container\")\n)\n_chart\n```\n\n----------------------------------------\n\nTITLE: Creating Explicit Cell Dependencies in Python with Marimo\nDESCRIPTION: Shows how to create an explicit dependency between two cells in a marimo notebook by using a variable from the first cell in the second cell. This ensures a specific execution order.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/troubleshooting.md#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Cell 1\nresult = some_computation()\n```\n\nLANGUAGE: python\nCODE:\n```\n# Cell 2\n_ = result  # This creates a dependency on Cell 1\nfurther_computation()\n```\n\n----------------------------------------\n\nTITLE: Running Pytest Command for Marimo Tests\nDESCRIPTION: Command to execute pytest on a marimo test file\nSOURCE: https://github.com/marimo-team/marimo/blob/main/examples/testing/README.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npytest test_with_pytest.py\n```\n\n----------------------------------------\n\nTITLE: Reading State Value in Python\nDESCRIPTION: Demonstrates how to read the current value of a state object using the getter function.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/state.md#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nget_counter()\n```\n\n----------------------------------------\n\nTITLE: Defining Regular Cell in Marimo App using Python\nDESCRIPTION: Defines a regular cell in the Marimo app using the @app.cell decorator. This cell takes an input 'x' but doesn't perform any operations on it.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/snapshots/converted_unparsable.py.txt#2025-04-19_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n@app.cell\ndef _(x):\n    x\n    return\n```\n\n----------------------------------------\n\nTITLE: Running Marimo Example for Google Sheets Integration\nDESCRIPTION: This command runs a full example of Google Sheets integration with Marimo directly from the project's GitHub repository.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/integrations/google_sheets.md#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmarimo run https://raw.githubusercontent.com/marimo-team/marimo/main/examples/cloud/gcp/google_sheets.py\n```\n\n----------------------------------------\n\nTITLE: Installing marimo via pip or conda\nDESCRIPTION: Installation command for marimo using pip or conda package manager, followed by launching the tutorial. Shows alternative installation methods.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/README.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install marimo  # or conda install -c conda-forge marimo\nmarimo tutorial intro\n```\n\n----------------------------------------\n\nTITLE: Deploying Marimo with Base URL Configuration\nDESCRIPTION: Command to run a marimo application with a custom base URL path, useful for serving the application from a subdirectory.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/deploying/index.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmarimo run app.py --base-url /subpath\n```\n\n----------------------------------------\n\nTITLE: Creating a Slider UI Element with Marimo in Python\nDESCRIPTION: This code creates a slider UI element using Marimo's UI module. The slider ranges from 0 to 10, allowing for interactive input within the notebook.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/snapshots/markdown.txt#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nslider = mo.ui.slider(0, 10)\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Tooltip Story in JavaScript\nDESCRIPTION: This snippet imports necessary components and icons for the Tooltip story. It includes imports from Storybook, Lucide React, and custom UI components.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/frontend/src/stories/tooltip.mdx#2025-04-19_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Meta, Story } from \"@storybook/blocks\";\n\nimport { Plus } from \"lucide-react\";\n\nimport { Button } from \"@/components/ui/button\";\nimport {\n  TooltipRoot,\n  TooltipProvider,\n  TooltipContent,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\";\n```\n\n----------------------------------------\n\nTITLE: Export with Command Arguments\nDESCRIPTION: Export a Marimo notebook to HTML while passing additional command-line arguments to the notebook.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/scripts.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmarimo export html notebook.py -o notebook.html -- -arg value\n```\n\n----------------------------------------\n\nTITLE: Defining Complex Unparsable Cell with Nested Code Blocks in Marimo\nDESCRIPTION: Creates a complex unparsable cell with nested code blocks and unclosed string literals, demonstrating Marimo's handling of problematic code structures.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/snapshots/unsafe-doc.py.txt#2025-04-19_snippet_10\n\nLANGUAGE: python\nCODE:\n```\napp._unparsable_cell(\n    r\"\"\"\n    \\\"\\\"\\\"\n    ```python {.marimo}\n    print(\\\"Hello, World!\\\")\n    \"\"\",\n    name=\"_\"\n)\n```\n\n----------------------------------------\n\nTITLE: SQL Query Example with Python Variable\nDESCRIPTION: Example showing how to use Python variables in SQL queries within Marimo\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/snapshots/sql.md.txt#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\noutput_df = mo.sql(f\"SELECT * FROM my_table LIMIT {max_rows.value}\")\n```\n\n----------------------------------------\n\nTITLE: Running Marimo Examples Without UV\nDESCRIPTION: Alternative instructions for running Marimo examples without using 'uv', which requires manual installation of Marimo and its dependencies.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/examples/cloud/README.md#2025-04-19_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nYou can also open notebooks without `uv`, in which case you'll need to\nmanually [install marimo](https://docs.marimo.io/getting_started/index.html#installation)\nfirst. Then run `marimo edit <notebook-url>`; however, you'll also need to\ninstall the requirements yourself.\n```\n\n----------------------------------------\n\nTITLE: Adding Marimo Shield using HTML\nDESCRIPTION: This snippet demonstrates how to add a Marimo shield/badge to your project using HTML. It creates a link to a Marimo application that opens in a new tab and displays the Marimo logo image.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/community.md#2025-04-19_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<a target=\"_blank\" href=\"https://marimo.app/l/c7h6pz\">\n  <img src=\"https://marimo.io/shield.svg\" />\n</a>\n```\n\n----------------------------------------\n\nTITLE: Multiple Notebooks Export Script\nDESCRIPTION: Bash script for exporting multiple notebooks and creating an index page.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/exporting.md#2025-04-19_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nfiles=(\"batch_and_form.py\" \"data_explorer.py\")\n\nfor file in \"${files[@]}\"; do\n  without_extension=\"${file%.*}\"\n  marimo export html-wasm \"$file\" -o site/\"$without_extension\".html --mode run\ndone\n\necho \"<html><body><ul>\" > site/index.html\nfor file in \"${files[@]}\"; do\n  without_extension=\"${file%.*}\"\n  echo \"<li><a href=\\\"$without_extension.html\\\">$without_extension</a></li>\" >> site/index.html\ndone\necho \"</ul></body></html>\" >> site/index.html\n```\n\n----------------------------------------\n\nTITLE: Configuring Vega-Lite Bar Chart with CSV Data in JSON\nDESCRIPTION: This JSON configuration creates a Vega-Lite bar chart. It uses a base64 encoded CSV data source, sets up x and y encodings for boolean values and their counts, and specifies a bar mark type. The chart is set to container width with a continuous height and width of 300.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_data/snapshots/column_preview_bool_chart_spec.txt#2025-04-19_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"$schema\": \"https://vega.github.io/schema/vega-lite/v5.20.1.json\",\n  \"config\": {\n    \"view\": {\n      \"continuousHeight\": 300,\n      \"continuousWidth\": 300\n    }\n  },\n  \"data\": {\n    \"format\": {\n      \"type\": \"csv\"\n    },\n    \"url\": \"data:text/csv;base64,Ym9vbF9jb2wKVHJ1ZQpGYWxzZQpUcnVlCg==\"\n  },\n  \"encoding\": {\n    \"x\": {\n      \"field\": \"bool_col\",\n      \"type\": \"nominal\"\n    },\n    \"y\": {\n      \"aggregate\": \"count\",\n      \"type\": \"quantitative\"\n    }\n  },\n  \"mark\": {\n    \"type\": \"bar\"\n  },\n  \"width\": \"container\"\n}\n```\n\n----------------------------------------\n\nTITLE: Main Application Setup and Execution\nDESCRIPTION: Initializes the Marimo application and includes the main execution block to run the notebook.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/snapshots/no-frontmatter.py.txt#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport marimo\n\n__generated_with = \"0.0.0\"\napp = marimo.App()\n\nif __name__ == \"__main__\":\n    app.run()\n```\n\n----------------------------------------\n\nTITLE: Launching Marimo Tutorials via CLI\nDESCRIPTION: Command to open Marimo tutorials using the command line interface.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/marimo/_tutorials/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmarimo tutorial\n```\n\n----------------------------------------\n\nTITLE: Running marimo notebooks as web apps\nDESCRIPTION: Command to run a marimo notebook as a web application, where Python code is hidden and users can only interact with the UI elements.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/README.md#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmarimo run your_notebook.py\n```\n\n----------------------------------------\n\nTITLE: Boolean Data Visualization with Vega-Lite\nDESCRIPTION: Configuration for visualizing boolean data using bar charts. Sets up nominal x-axis for boolean values with quantitative count aggregation on y-axis.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_data/snapshots/charts_json.txt#2025-04-19_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://vega.github.io/schema/vega-lite/v5.20.1.json\",\n  \"config\": {\n    \"view\": {\n      \"continuousHeight\": 300,\n      \"continuousWidth\": 300\n    }\n  },\n  \"data\": {\n    \"name\": \"data-afce120bec1de31b50bc39eae2fedbed\"\n  },\n  \"datasets\": {\n    \"data-afce120bec1de31b50bc39eae2fedbed\": [\n      {\n        \"some_column\": 1\n      },\n      {\n        \"some_column\": 2\n      },\n      {\n        \"some_column\": 3\n      }\n    ]\n  },\n  \"encoding\": {\n    \"x\": {\n      \"field\": \"some_column\",\n      \"type\": \"nominal\"\n    },\n    \"y\": {\n      \"aggregate\": \"count\",\n      \"type\": \"quantitative\"\n    }\n  },\n  \"mark\": {\n    \"type\": \"bar\"\n  },\n  \"width\": \"container\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Fonts to Marimo Head\nDESCRIPTION: HTML code for incorporating Google Fonts into a Marimo notebook with preconnect optimization.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/configuration/html_head.md#2025-04-19_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\"preconnect\" href=\"https://fonts.googleapis.com\" />\n<link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin />\n<link href=\"https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap\" rel=\"stylesheet\" />\n```\n\n----------------------------------------\n\nTITLE: Setting Google Application Credentials Environment Variable\nDESCRIPTION: This command sets the GOOGLE_APPLICATION_CREDENTIALS environment variable to the path of the service account key file, which is used for authentication when not using Application Default Credentials.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/integrations/google_sheets.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport GOOGLE_APPLICATION_CREDENTIALS=/path/to/key/file.json\n```\n\n----------------------------------------\n\nTITLE: Configuring Marimo Snippets in TOML\nDESCRIPTION: Configuration options for Marimo snippets in the marimo.toml file. Allows specifying custom snippet directories and controlling inclusion of default snippets.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/configuration/snippets.md#2025-04-19_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[snippets]\ncustom_paths = [\"/path/to/your/snippets/dir\"]  # List of paths to directories containing custom snippets\ninclude_default_snippets = true  # Whether to include marimo's default snippets (defaults to true)\n```\n\n----------------------------------------\n\nTITLE: Importing Marimo Library in Python\nDESCRIPTION: This snippet imports the Marimo library, which is essential for creating interactive notebooks and UI elements in the Marimo environment.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/snapshots/markdown.txt#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport marimo as mo\n```\n\n----------------------------------------\n\nTITLE: Rendering a Small Switch with Label in JSX\nDESCRIPTION: This snippet shows how to render a smaller variant of the Switch component by using the 'size' prop set to 'sm'. It's also paired with a Label, similar to the default size example.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/frontend/src/stories/switch.mdx#2025-04-19_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n<div className=\"flex items-center align-middle space-x-2\">\n  <Switch id=\"airplane-mode\" size=\"sm\" />\n\n  <Label htmlFor=\"airplane-mode\">Small Switch</Label>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Exporting marimo notebook to Jupyter notebook format\nDESCRIPTION: Command to export a marimo notebook (Python file) to Jupyter notebook (.ipynb) format using marimo's export functionality.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/coming_from/jupytext.md#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmarimo export ipynb notebook.py > notebook.ipynb\n```\n\n----------------------------------------\n\nTITLE: Manual Installation and Running of Marimo Examples\nDESCRIPTION: Alternative instructions for manually installing Marimo and its dependencies to run example notebooks without using uv.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/examples/control_flow/README.md#2025-04-19_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nYou can also open notebooks without `uv`, in which case you'll need to\nmanually [install marimo](https://docs.marimo.io/getting_started/index.html#installation)\nfirst. Then run `marimo edit <notebook-url>`; however, you'll also need to\ninstall the requirements yourself.\n```\n\n----------------------------------------\n\nTITLE: Configuring Vim Keybindings in marimo.toml\nDESCRIPTION: This snippet shows how to set a custom vimrc file path in the marimo.toml configuration file. It allows users to customize their vim experience in the marimo editor.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/editor_features/overview.md#2025-04-19_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[keymap]\nvimrc = /User/absolute/path/to/.vimrc\n```\n\n----------------------------------------\n\nTITLE: Using Marimo Prebuilt Container in Dockerfile\nDESCRIPTION: Dockerfile example showing how to use a prebuilt marimo container as a base image and configure it to run the marimo server.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/deploying/prebuilt_containers.md#2025-04-19_snippet_1\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM ghcr.io/marimo-team/marimo:latest-sql\n\n# Install any additional dependencies here\n\nCMD [\"marimo\", \"edit\", \"--no-token\", \"-p\", \"8080\", \"--host\", \"0.0.0.0\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Vega-Lite Point Chart with Arrow Data in JSON\nDESCRIPTION: This JSON configuration sets up a Vega-Lite point chart. It specifies continuous dimensions, Arrow-formatted data source, point marks, and x-axis encoding based on a 'values' field. The schema version is explicitly set to 5.20.1.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_plugins/ui/_impl/snapshots/parse_spec_pandas.txt#2025-04-19_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"config\": {\n    \"view\": {\n      \"continuousWidth\": 300,\n      \"continuousHeight\": 300\n    }\n  },\n  \"data\": {\n    \"url\": \"_placeholder_\",\n    \"format\": {\n      \"type\": \"arrow\"\n    }\n  },\n  \"mark\": {\n    \"type\": \"point\"\n  },\n  \"encoding\": {\n    \"x\": {\n      \"field\": \"values\",\n      \"type\": \"quantitative\"\n    }\n  },\n  \"$schema\": \"https://vega.github.io/schema/vega-lite/v5.20.1.json\"\n}\n```\n\n----------------------------------------\n\nTITLE: Building Marimo from Source (Traditional Method)\nDESCRIPTION: Commands to build both the frontend and Python components of Marimo using the traditional method with an editable wheel installation.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/CONTRIBUTING.md#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmake fe && make py\n```\n\n----------------------------------------\n\nTITLE: Running Editable Marimo Notebook on Modal\nDESCRIPTION: Command to launch an editable Marimo notebook in a Modal container using the UV package manager. Requires Python 3.12.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/examples/cloud/modal/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nuvx -p 3.12 modal run modal_edit.py\n```\n\n----------------------------------------\n\nTITLE: Implementing iframe resizing functionality in JavaScript\nDESCRIPTION: This script defines a function __resizeIframe that dynamically adjusts the height of an iframe based on its content. It accounts for horizontal scrollbars and uses a ResizeObserver to handle content changes.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_server/templates/snapshots/export2.txt#2025-04-19_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction __resizeIframe(obj) {\n  var scrollbarHeight = 20; // Max between windows, mac, and linux\n\n  function setHeight() {\n    var element = obj.contentWindow.document.documentElement;\n    // If there is no vertical scrollbar, we don't need to resize the iframe\n    if (element.scrollHeight === element.clientHeight) {\n      return;\n    }\n\n    // Create a new height that includes the scrollbar height if it's visible\n    var hasHorizontalScrollbar = element.scrollWidth > element.clientWidth;\n    var newHeight = element.scrollHeight + (hasHorizontalScrollbar ? scrollbarHeight : 0);\n\n    // Only update the height if it's different from the current height\n    if (obj.style.height !== `${newHeight}px`) {\n      obj.style.height = `${newHeight}px`;\n    }\n  }\n\n  // Resize the iframe to the height of the content and bottom scrollbar height\n  setHeight();\n\n  // Resize the iframe when the content changes\n  const resizeObserver = new ResizeObserver((entries) => {\n    setHeight();\n  });\n  resizeObserver.observe(obj.contentWindow.document.body);\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Marimo Static Configuration\nDESCRIPTION: JavaScript code that initializes static configuration for the Marimo application including version, notebook state, asset URL and files.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_server/templates/snapshots/export3.txt#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.__MARIMO_STATIC__ = {};\nwindow.__MARIMO_STATIC__.version = \"0.0.0\";\nwindow.__MARIMO_STATIC__.notebookState = {\"cellIds\": [], \"cellNames\": [], \"cellCodes\": [], \"cellConfigs\": [], \"cellOutputs\": {}, \"cellConsoleOutputs\": {}};\nwindow.__MARIMO_STATIC__.assetUrl = \"https://cdn.jsdelivr.net/npm/@marimo-team/frontend@0.0.0/dist\";\nwindow.__MARIMO_STATIC__.files = {};\n```\n\n----------------------------------------\n\nTITLE: Configuring Meta Tags in Marimo Head\nDESCRIPTION: HTML meta tags for SEO optimization and social media sharing in a Marimo notebook.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/configuration/html_head.md#2025-04-19_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<meta name=\"description\" content=\"My marimo notebook\" />\n<meta name=\"keywords\" content=\"data science, visualization, python\" />\n<meta name=\"author\" content=\"Your Name\" />\n<meta property=\"og:title\" content=\"My Notebook\" />\n<meta property=\"og:description\" content=\"Interactive data analysis with marimo\" />\n<meta property=\"og:image\" content=\"https://example.com/thumbnail.jpg\" />\n```\n\n----------------------------------------\n\nTITLE: Setting Google Cloud Credentials Environment Variable\nDESCRIPTION: Command to set the GOOGLE_APPLICATION_CREDENTIALS environment variable for service account authentication.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/integrations/google_cloud_storage.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport GOOGLE_APPLICATION_CREDENTIALS=/path/to/key/file.json\n```\n\n----------------------------------------\n\nTITLE: Exporting Python Notebooks to Markdown Format\nDESCRIPTION: Demonstrates the command to export Marimo notebooks from Python format to Markdown format.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/marimo/_tutorials/markdown_format.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ marimo export md notebook.py > notebook.md\n```\n\n----------------------------------------\n\nTITLE: Rendering Markdown with F-string in Marimo\nDESCRIPTION: Demonstrates the use of an f-string in conjunction with Marimo's markdown function to render a code block. This showcases how dynamic content can be incorporated into markdown rendering.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/snapshots/unsafe-app.md.txt#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nmo.md(f\"\"\"\n    with f-string too!\n    ```python {{.marimo}}\n    print(\"Hello World\")\n    ```\n\"\"\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Project-Level Custom CSS in TOML\nDESCRIPTION: This TOML configuration snippet shows how to set a custom CSS file at the project level in the pyproject.toml file.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/configuration/theming.md#2025-04-19_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[tool.marimo.display]\ncustom_css = [\"additional.css\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Cloudflare Pages Deployment Settings\nDESCRIPTION: Configuration settings for deploying a Marimo notebook on Cloudflare Pages. These settings specify the project name, production branch, build command, and output directory for the deployment process.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/publishing/cloudflare_pages.md#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nProject name                output-dir\nProduction branch           main\nFramework preset            None\nBuild command (optional)\texit 0\nBuild output directory\t    /\n```\n\n----------------------------------------\n\nTITLE: Executing Shell Command and Initializing Variable in Python\nDESCRIPTION: This code snippet executes a shell command to echo 'hello, world' and initializes a variable 'x' with the value 0. It demonstrates basic shell interaction and variable assignment in Python.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/ipynb_data/unparsable.ipynb.txt#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n!echo hello, world\n\nx = 0\n```\n\n----------------------------------------\n\nTITLE: Creating Bar Chart with Altair in Python\nDESCRIPTION: This code creates a bar chart using Altair. It encodes a categorical variable on the y-axis and a count of occurrences on the x-axis. The chart width is set to fill its container.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_data/snapshots/column_preview_categorical_chart_code.txt#2025-04-19_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n_chart = (\n    alt.Chart(table)\n    .mark_bar()\n    .encode(\n        y=alt.Y(\"category_col\", type=\"nominal\"),\n        x=alt.X(\"count()\", type=\"quantitative\"),\n    )\n    .properties(width=\"container\")\n)\n_chart\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Marimo SQL Examples\nDESCRIPTION: Instructions for setting up and running SQL examples in Marimo notebooks. This includes steps for installing Marimo and uv, and using the --sandbox flag for isolated environments.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/examples/sql/misc/README.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. [Install marimo](https://docs.marimo.io/getting_started/index.html#installation)\n2. [Install `uv`](https://github.com/astral-sh/uv/?tab=readme-ov-file#installation)\n3. Open an example with `marimo edit --sandbox <notebook.py>`.\n```\n\n----------------------------------------\n\nTITLE: Displaying Text - Streamlit vs Marimo\nDESCRIPTION: Demonstrates how to display markdown text in both Streamlit and marimo frameworks.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/coming_from/streamlit.md#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\nst.markdown(\n    \"\"\"\n    # Greetings\n    Hello world\n    \"\"\"\n)\n```\n\nLANGUAGE: python\nCODE:\n```\nimport marimo as mo\nmo.md(\n    \"\"\"\n    # Greetings\n    Hello world\n    \"\"\"\n)\n```\n\n----------------------------------------\n\nTITLE: Enabling Token-Based Authentication in marimo CLI\nDESCRIPTION: This bash command demonstrates how to run a marimo notebook with token-based authentication enabled and a custom password set.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/deploying/authentication.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmarimo run my_notebook.py --token --token-password=\"sup3rs3cr3t\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Vega Bar Chart Visualization in JSON\nDESCRIPTION: Comprehensive Vega specification for a horizontal bar chart. Includes configuration for axes, scales, marks, data sources, signals for responsive sizing, and styling. The visualization uses a band scale for categorical data on the Y-axis and a linear scale for quantities on the X-axis.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_data/snapshots/column_preview_str_chart_spec_with_vegafusion.txt#2025-04-19_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://vega.github.io/schema/vega/v5.json\",\n  \"autosize\": {\n    \"contains\": \"padding\",\n    \"type\": \"fit-x\"\n  },\n  \"axes\": [\n    {\n      \"aria\": false,\n      \"domain\": false,\n      \"grid\": true,\n      \"gridScale\": \"y\",\n      \"labels\": false,\n      \"maxExtent\": 0,\n      \"minExtent\": 0,\n      \"orient\": \"bottom\",\n      \"scale\": \"x\",\n      \"tickCount\": {\n        \"signal\": \"ceil(width/40)\"\n      },\n      \"ticks\": false,\n      \"zindex\": 0\n    },\n    {\n      \"grid\": false,\n      \"labelFlush\": true,\n      \"labelOverlap\": true,\n      \"orient\": \"bottom\",\n      \"scale\": \"x\",\n      \"tickCount\": {\n        \"signal\": \"ceil(width/40)\"\n      },\n      \"title\": \"Count of Records\",\n      \"zindex\": 0\n    },\n    {\n      \"grid\": false,\n      \"orient\": \"left\",\n      \"scale\": \"y\",\n      \"title\": \"B\",\n      \"zindex\": 0\n    }\n  ],\n  \"background\": \"white\",\n  \"data\": [\n    {\n      \"name\": \"source_0\",\n      \"values\": [\n        {\n          \"B\": \"a\",\n          \"__count\": 3\n        }\n      ]\n    },\n    {\n      \"name\": \"source_0_x_domain___count\",\n      \"values\": [\n        {\n          \"max\": 3,\n          \"min\": 3\n        }\n      ]\n    },\n    {\n      \"name\": \"source_0_y_domain_B\",\n      \"values\": [\n        {\n          \"B\": \"a\"\n        }\n      ]\n    }\n  ],\n  \"marks\": [\n    {\n      \"encode\": {\n        \"update\": {\n          \"fill\": {\n            \"value\": \"#4c78a8\"\n          },\n          \"height\": {\n            \"signal\": \"max(0.25, bandwidth('y'))\"\n          },\n          \"x\": {\n            \"field\": \"__count\",\n            \"scale\": \"x\"\n          },\n          \"x2\": {\n            \"scale\": \"x\",\n            \"value\": 0\n          },\n          \"y\": {\n            \"field\": \"B\",\n            \"scale\": \"y\"\n          }\n        }\n      },\n      \"from\": {\n        \"data\": \"source_0\"\n      },\n      \"name\": \"marks\",\n      \"style\": [\n        \"bar\"\n      ],\n      \"type\": \"rect\"\n    }\n  ],\n  \"padding\": 5,\n  \"scales\": [\n    {\n      \"domain\": [\n        {\n          \"signal\": \"(data(\\\"source_0_x_domain___count\\\")[0] || {}).min\"\n        },\n        {\n          \"signal\": \"(data(\\\"source_0_x_domain___count\\\")[0] || {}).max\"\n        }\n      ],\n      \"name\": \"x\",\n      \"nice\": true,\n      \"range\": [\n        0,\n        {\n          \"signal\": \"width\"\n        }\n      ],\n      \"type\": \"linear\",\n      \"zero\": true\n    },\n    {\n      \"domain\": {\n        \"data\": \"source_0_y_domain_B\",\n        \"field\": \"B\",\n        \"sort\": true\n      },\n      \"name\": \"y\",\n      \"paddingInner\": 0.1,\n      \"paddingOuter\": 0.05,\n      \"range\": {\n        \"step\": {\n          \"signal\": \"y_step\"\n        }\n      },\n      \"type\": \"band\"\n    }\n  ],\n  \"signals\": [\n    {\n      \"init\": \"isFinite(containerSize()[0]) ? containerSize()[0] : 300\",\n      \"name\": \"width\",\n      \"on\": [\n        {\n          \"events\": \"window:resize\",\n          \"update\": \"isFinite(containerSize()[0]) ? containerSize()[0] : 300\"\n        }\n      ]\n    },\n    {\n      \"name\": \"y_step\",\n      \"value\": 20\n    },\n    {\n      \"name\": \"height\",\n      \"update\": \"bandspace(domain('y').length, 0.1, 0.05) * y_step\"\n    }\n  ],\n  \"style\": \"cell\"\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding Existing marimo Notebook in HTML\nDESCRIPTION: HTML code snippet for embedding an existing marimo notebook into a web page using an iframe. This allows sharing of pre-created notebooks.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/publishing/playground.md#2025-04-19_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<iframe\n  src=\"https://marimo.app/l/c7h6pz?embed=true&show-chrome=false\"\n  width=\"100%\"\n  height=\"500\"\n  frameborder=\"0\"\n></iframe>\n```\n\n----------------------------------------\n\nTITLE: Setting UV Link Mode for Sandbox Environment (Bash)\nDESCRIPTION: Command to set the UV link mode when running marimo in sandbox mode, which affects how packages are linked in the virtual environment.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/package_reproducibility.md#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nUV_LINK_MODE=\"copy\" marimo edit --sandbox notebook.py\n```\n\n----------------------------------------\n\nTITLE: Running Playwright Tests in Debug Mode\nDESCRIPTION: Command to run Playwright tests in debug mode for a specific file from the frontend directory.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/CONTRIBUTING.md#2025-04-19_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\npnpm playwright test --debug <filename>\n```\n\n----------------------------------------\n\nTITLE: Implementing iframe resizing function in JavaScript\nDESCRIPTION: This function dynamically resizes an iframe to fit its content, accounting for potential scrollbars. It uses a ResizeObserver to continuously adjust the iframe's height based on content changes.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_server/templates/snapshots/export5.txt#2025-04-19_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction __resizeIframe(obj) {\n  var scrollbarHeight = 20; // Max between windows, mac, and linux\n\n  function setHeight() {\n    var element = obj.contentWindow.document.documentElement;\n    // If there is no vertical scrollbar, we don't need to resize the iframe\n    if (element.scrollHeight === element.clientHeight) {\n      return;\n    }\n\n    // Create a new height that includes the scrollbar height if it's visible\n    var hasHorizontalScrollbar = element.scrollWidth > element.clientWidth;\n    var newHeight = element.scrollHeight + (hasHorizontalScrollbar ? scrollbarHeight : 0);\n\n    // Only update the height if it's different from the current height\n    if (obj.style.height !== `${newHeight}px`) {\n      obj.style.height = `${newHeight}px`;\n    }\n  }\n\n  // Resize the iframe to the height of the content and bottom scrollbar height\n  setHeight();\n\n  // Resize the iframe when the content changes\n  const resizeObserver = new ResizeObserver((entries) => {\n    setHeight();\n  });\n  resizeObserver.observe(obj.contentWindow.document.body);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Dynamic UI Element Dictionary\nDESCRIPTION: Shows how to create a dictionary of UI elements with dynamic keys using mo.ui.dictionary.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/recipes.md#2025-04-19_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport random\n\n# instead of random.randint, in your notebook you'd use the value of\n# an upstream UI element or other Python object\ndictionary = mo.ui.dictionary({str(i): mo.ui.text() for i in range(random.randint(1, 10))})\ndictionary\n```\n\n----------------------------------------\n\nTITLE: Marimo Markdown with Variable\nDESCRIPTION: Demonstrates Marimo's markdown functionality with variable interpolation\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_server/export/snapshots/notebook_with_outputs.ipynb.txt#2025-04-19_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nmo.md(f\"hello {x}\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Vega-Lite Bar Chart with CSV Data\nDESCRIPTION: Defines a Vega-Lite specification for creating a bar chart with CSV data. The chart uses container width, configures continuous dimensions at 300px, and aggregates count on x-axis with nominal B field values on y-axis.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_data/snapshots/column_preview_str_chart_spec.txt#2025-04-19_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://vega.github.io/schema/vega-lite/v5.20.1.json\",\n  \"config\": {\n    \"view\": {\n      \"continuousHeight\": 300,\n      \"continuousWidth\": 300\n    }\n  },\n  \"data\": {\n    \"format\": {\n      \"type\": \"csv\"\n    },\n    \"url\": \"data:text/csv;base64,QgphCmEKYQo=\"\n  },\n  \"encoding\": {\n    \"x\": {\n      \"aggregate\": \"count\",\n      \"type\": \"quantitative\"\n    },\n    \"y\": {\n      \"field\": \"B\",\n      \"type\": \"nominal\"\n    }\n  },\n  \"mark\": {\n    \"type\": \"bar\"\n  },\n  \"width\": \"container\"\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Markdown with Nested Code Blocks in Marimo\nDESCRIPTION: Uses Marimo's markdown function to render text containing nested code blocks. It demonstrates both a static code block and an executable Marimo code block, both printing 'Hello World'.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/snapshots/unsafe-app.md.txt#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nmo.md(\"\"\"\n    # Code blocks in code blocks\n    Output code for Hello World!\n    ```python\n    print(\"Hello World\")\n    ```\n    Execute print\n    ```python {.marimo}\n    print(\"Hello World\")\n    ```\n\"\"\")\n```\n\n----------------------------------------\n\nTITLE: Running Frontend Validation Checks\nDESCRIPTION: Command to run checks specifically for the frontend code, including linting and typechecking.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/CONTRIBUTING.md#2025-04-19_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nmake fe-check\n```\n\n----------------------------------------\n\nTITLE: Enabling Sandbox Mode for marimo Notebooks (Bash)\nDESCRIPTION: Commands to run marimo notebooks in sandbox mode, which enables package reproducibility. This includes options for editing, running, and creating new notebooks with the sandbox feature enabled.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/package_reproducibility.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmarimo edit --sandbox notebook.py\n```\n\nLANGUAGE: bash\nCODE:\n```\nmarimo run --sandbox notebook.py\n```\n\nLANGUAGE: bash\nCODE:\n```\nmarimo new --sandbox\n```\n\n----------------------------------------\n\nTITLE: Running the FastAPI App with UV\nDESCRIPTION: Instructions for running the FastAPI app using the UV package manager. This snippet outlines the steps to install UV and execute the main Python script.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/examples/frameworks/fastapi-github/README.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. [Install `uv`](https://github.com/astral-sh/uv/?tab=readme-ov-file#installation)\n2. Run the app with `uv run --no-project main.py`\n```\n\n----------------------------------------\n\nTITLE: Running pytest on marimo Notebooks (Bash)\nDESCRIPTION: This snippet shows the command to run pytest on a marimo notebook file. It demonstrates how to execute tests defined in a notebook using the command-line interface.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/testing/pytest.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npytest test_notebook.py\n```\n\n----------------------------------------\n\nTITLE: Running All Validation Checks\nDESCRIPTION: Command to run all code checks including linting, typechecking, and formatting for both frontend and Python code.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/CONTRIBUTING.md#2025-04-19_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nmake check\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Marimo Example Notebooks with uv\nDESCRIPTION: Commands for installing uv and opening a marimo example notebook in a sandboxed environment. This approach automatically installs the notebook's dependencies.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/examples/third_party/README.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. [Install `uv`](https://github.com/astral-sh/uv/?tab=readme-ov-file#installation)\n2. Open an example with `uvx marimo edit --sandbox <notebook-url>`\n```\n\n----------------------------------------\n\nTITLE: Implementing Iframe Auto-resize in JavaScript\nDESCRIPTION: JavaScript function that dynamically adjusts an iframe's height based on its content and handles horizontal scrollbars. Uses ResizeObserver to continuously monitor content changes.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_server/templates/snapshots/export3.txt#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction __resizeIframe(obj) {\n  var scrollbarHeight = 20; // Max between windows, mac, and linux\n\n  function setHeight() {\n    var element = obj.contentWindow.document.documentElement;\n    // If there is no vertical scrollbar, we don't need to resize the iframe\n    if (element.scrollHeight === element.clientHeight) {\n      return;\n    }\n\n    // Create a new height that includes the scrollbar height if it's visible\n    var hasHorizontalScrollbar = element.scrollWidth > element.clientWidth;\n    var newHeight = element.scrollHeight + (hasHorizontalScrollbar ? scrollbarHeight : 0);\n\n    // Only update the height if it's different from the current height\n    if (obj.style.height !== `${newHeight}px`) {\n      obj.style.height = `${newHeight}px`;\n    }\n  }\n\n  // Resize the iframe to the height of the content and bottom scrollbar height\n  setHeight();\n\n  // Resize the iframe when the content changes\n  const resizeObserver = new ResizeObserver((entries) => {\n    setHeight();\n  });\n  resizeObserver.observe(obj.contentWindow.document.body);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Python Path in pyproject.toml\nDESCRIPTION: TOML configuration for adding directories to the Python path in Marimo runtime.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/configuration/runtime_configuration.md#2025-04-19_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[tool.marimo.runtime]\npythonpath = [\"project/src\"]\n```\n\n----------------------------------------\n\nTITLE: Setting Up Pre-commit Hooks\nDESCRIPTION: Command to install pre-commit hooks that automatically run validation checks when making a commit.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/CONTRIBUTING.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npre-commit install\n```\n\n----------------------------------------\n\nTITLE: Defining Python Class MyClass\nDESCRIPTION: This snippet defines a Python class named MyClass. The class has a docstring explaining its purpose and an __init__ method with its own docstring for initialization details.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_runtime/snapshots/docstrings_class.txt#2025-04-19_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nclass MyClass()\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Vega-Lite Scatter Plot in JSON\nDESCRIPTION: This JSON configuration sets up a Vega-Lite scatter plot. It specifies the view dimensions, data source (using a placeholder URL), mark type as points, and encodes the x-axis with quantitative values from the 'values' field.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_plugins/ui/_impl/snapshots/parse_spec_narwhal.txt#2025-04-19_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"config\": {\n    \"view\": {\n      \"continuousWidth\": 300,\n      \"continuousHeight\": 300\n    }\n  },\n  \"data\": {\n    \"url\": \"_placeholder_\",\n    \"format\": {\n      \"type\": \"arrow\"\n    }\n  },\n  \"mark\": {\n    \"type\": \"point\"\n  },\n  \"encoding\": {\n    \"x\": {\n      \"field\": \"values\",\n      \"type\": \"quantitative\"\n    }\n  },\n  \"$schema\": \"https://vega.github.io/schema/vega-lite/v5.20.1.json\"\n}\n```\n\n----------------------------------------\n\nTITLE: String Data Visualization with Top 10 Limit in Vega-Lite\nDESCRIPTION: Configuration for visualizing string data using bar charts, including a transformation to show only top 10 items based on count. Implements sorting and ranking logic.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_data/snapshots/charts_json.txt#2025-04-19_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://vega.github.io/schema/vega-lite/v5.20.1.json\",\n  \"config\": {\n    \"view\": {\n      \"continuousHeight\": 300,\n      \"continuousWidth\": 300\n    }\n  },\n  \"data\": {\n    \"name\": \"data-afce120bec1de31b50bc39eae2fedbed\"\n  },\n  \"datasets\": {\n    \"data-afce120bec1de31b50bc39eae2fedbed\": [\n      {\n        \"some_column\": 1\n      },\n      {\n        \"some_column\": 2\n      },\n      {\n        \"some_column\": 3\n      }\n    ]\n  },\n  \"encoding\": {\n    \"x\": {\n      \"field\": \"count\",\n      \"type\": \"quantitative\"\n    },\n    \"y\": {\n      \"field\": \"some_column\",\n      \"sort\": \"-x\",\n      \"type\": \"nominal\"\n    }\n  },\n  \"mark\": {\n    \"type\": \"bar\"\n  },\n  \"title\": \"Top 10 some_column\",\n  \"transform\": [\n    {\n      \"aggregate\": [\n        {\n          \"as\": \"count\",\n          \"op\": \"count\"\n        }\n      ],\n      \"groupby\": [\n        \"some_column\"\n      ]\n    },\n    {\n      \"sort\": [\n        {\n          \"field\": \"count\",\n          \"order\": \"descending\"\n        },\n        {\n          \"field\": \"some_column\",\n          \"order\": \"ascending\"\n        }\n      ],\n      \"window\": [\n        {\n          \"as\": \"rank\",\n          \"field\": \"\",\n          \"op\": \"rank\"\n        }\n      ]\n    },\n    {\n      \"filter\": \"(datum.rank <= 10)\"\n    }\n  ],\n  \"width\": \"container\"\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Markdown with Code Block in Marimo\nDESCRIPTION: Creates a markdown cell that includes a code block demonstrating how to run a Marimo conversion command.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/snapshots/unsafe-doc.py.txt#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@app.cell(hide_code=True)\ndef _(mo):\n    mo.md(\n        r\"\"\"\n        -->\n\n        ```marimo run convert document.md```\n        \"\"\"\n    )\n    return\n```\n\n----------------------------------------\n\nTITLE: Cars Data SQL Queries\nDESCRIPTION: SQL queries to create and query a cars table from an external CSV source\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/snapshots/sql.md.txt#2025-04-19_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nCREATE OR replace TABLE cars as\nFROM 'https://datasets.marimo.app/cars.csv';\n\nSELECT * from cars;\n```\n\n----------------------------------------\n\nTITLE: Initializing Marimo App with Custom HTML Head\nDESCRIPTION: Configuration code to specify a custom HTML head file in a Marimo notebook application.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/configuration/html_head.md#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\napp = marimo.App(html_head_file=\"head.html\")\n```\n\n----------------------------------------\n\nTITLE: Basic Marimo Chatbot Examples List\nDESCRIPTION: A markdown list detailing various chatbot implementation examples with different backends and use cases, including custom chatbots, AI model integrations, and specialized applications like recipe parsing and UI generation.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/examples/ai/chat/README.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- `custom.py` shows how to make a custom chatbot.\n- `openai_example.py` shows how to make a chatbot powered by OpenAI models.\n- `anthropic_example.py` shows how to make a chatbot powered by Anthropic models.\n- `gemini.py` shows how to make a chatbot powered by Google models like Gemini.\n- `groq_example.py` shows how to make a chatbot powered by Groq models.\n- `mlx_chat.py` shows a simple chatbot using local on-device models with Apple's MLX\n- `llm_datasette.py` shows how to make a chatbot powered by Simon W's LLM library.\n- `dagger_code_interpreter.py` shows how to make a basic code-interpreter chatbot\n- `recipe_bot.py` shows how to make a chatbot that can parse recipes from images.\n- `simplemind_example.py` shows how to integrate simplemind.\n- `generative_ui.py` shows how to make a chatbot that can generate UI code.\n```\n\n----------------------------------------\n\nTITLE: Defining Vega Histogram Specification in JSON\nDESCRIPTION: This code snippet defines a complete Vega specification for a histogram chart. It includes configuration for chart size, axes, data sources, visual marks, scales, and interactive signals. The chart is designed to display binned float data as a bar chart with responsive sizing.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_data/snapshots/column_preview_float_chart_spec_with_vegafusion.txt#2025-04-19_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"$schema\": \"https://vega.github.io/schema/vega/v5.json\",\n  \"autosize\": {\n    \"contains\": \"padding\",\n    \"type\": \"fit-x\"\n  },\n  \"axes\": [\n    {\n      \"aria\": false,\n      \"domain\": false,\n      \"grid\": true,\n      \"gridScale\": \"x\",\n      \"labels\": false,\n      \"maxExtent\": 0,\n      \"minExtent\": 0,\n      \"orient\": \"left\",\n      \"scale\": \"y\",\n      \"tickCount\": {\n        \"signal\": \"ceil(height/40)\"\n      },\n      \"ticks\": false,\n      \"zindex\": 0\n    },\n    {\n      \"grid\": false,\n      \"labelFlush\": true,\n      \"labelOverlap\": true,\n      \"orient\": \"bottom\",\n      \"scale\": \"x\",\n      \"tickCount\": {\n        \"signal\": \"ceil(width/10)\"\n      },\n      \"title\": \"float_col (binned)\",\n      \"zindex\": 0\n    },\n    {\n      \"grid\": false,\n      \"labelOverlap\": true,\n      \"orient\": \"left\",\n      \"scale\": \"y\",\n      \"tickCount\": {\n        \"signal\": \"ceil(height/40)\"\n      },\n      \"title\": \"Count of Records\",\n      \"zindex\": 0\n    }\n  ],\n  \"background\": \"white\",\n  \"data\": [\n    {\n      \"name\": \"source_0\",\n      \"values\": [\n        {\n          \"__count\": 1,\n          \"bin_maxbins_10_float_col\": 1.0,\n          \"bin_maxbins_10_float_col_end\": 1.5\n        },\n        {\n          \"__count\": 1,\n          \"bin_maxbins_10_float_col\": 2.0,\n          \"bin_maxbins_10_float_col_end\": 2.5\n        },\n        {\n          \"__count\": 1,\n          \"bin_maxbins_10_float_col\": 3.0,\n          \"bin_maxbins_10_float_col_end\": 3.5\n        }\n      ]\n    },\n    {\n      \"name\": \"source_0_y_domain___count\",\n      \"values\": [\n        {\n          \"max\": 1,\n          \"min\": 1\n        }\n      ]\n    }\n  ],\n  \"height\": 300,\n  \"marks\": [\n    {\n      \"encode\": {\n        \"update\": {\n          \"fill\": {\n            \"value\": \"#4c78a8\"\n          },\n          \"x\": {\n            \"field\": \"bin_maxbins_10_float_col_end\",\n            \"offset\": {\n              \"signal\": \"0.5 + (abs(scale(\\\"x\\\", datum[\\\"bin_maxbins_10_float_col_end\\\"]) - scale(\\\"x\\\", datum[\\\"bin_maxbins_10_float_col\\\"])) < 0.25 ? 0.5 * (0.25 - (abs(scale(\\\"x\\\", datum[\\\"bin_maxbins_10_float_col_end\\\"]) - scale(\\\"x\\\", datum[\\\"bin_maxbins_10_float_col\\\"])))) : -0.5)\"\n            },\n            \"scale\": \"x\"\n          },\n          \"x2\": {\n            \"field\": \"bin_maxbins_10_float_col\",\n            \"offset\": {\n              \"signal\": \"0.5 + (abs(scale(\\\"x\\\", datum[\\\"bin_maxbins_10_float_col_end\\\"]) - scale(\\\"x\\\", datum[\\\"bin_maxbins_10_float_col\\\"])) < 0.25 ? -0.5 * (0.25 - (abs(scale(\\\"x\\\", datum[\\\"bin_maxbins_10_float_col_end\\\"]) - scale(\\\"x\\\", datum[\\\"bin_maxbins_10_float_col\\\"])))) : 0.5)\"\n            },\n            \"scale\": \"x\"\n          },\n          \"y\": {\n            \"field\": \"__count\",\n            \"scale\": \"y\"\n          },\n          \"y2\": {\n            \"scale\": \"y\",\n            \"value\": 0\n          }\n        }\n      },\n      \"from\": {\n        \"data\": \"source_0\"\n      },\n      \"name\": \"marks\",\n      \"style\": [\n        \"bar\"\n      ],\n      \"type\": \"rect\"\n    }\n  ],\n  \"padding\": 5,\n  \"scales\": [\n    {\n      \"bins\": {\n        \"signal\": \"bin_maxbins_10_float_col_bins\"\n      },\n      \"domain\": {\n        \"signal\": \"[bin_maxbins_10_float_col_bins.start, bin_maxbins_10_float_col_bins.stop]\"\n      },\n      \"name\": \"x\",\n      \"range\": [\n        0,\n        {\n          \"signal\": \"width\"\n        }\n      ],\n      \"type\": \"linear\",\n      \"zero\": false\n    },\n    {\n      \"domain\": [\n        {\n          \"signal\": \"(data(\\\"source_0_y_domain___count\\\")[0] || {}).min\"\n        },\n        {\n          \"signal\": \"(data(\\\"source_0_y_domain___count\\\")[0] || {}).max\"\n        }\n      ],\n      \"name\": \"y\",\n      \"nice\": true,\n      \"range\": [\n        {\n          \"signal\": \"height\"\n        },\n        0\n      ],\n      \"type\": \"linear\",\n      \"zero\": true\n    }\n  ],\n  \"signals\": [\n    {\n      \"name\": \"bin_maxbins_10_float_col_bins\",\n      \"value\": {\n        \"fields\": [\n          \"float_col\"\n        ],\n        \"fname\": \"bin_float_col\",\n        \"start\": 1.0,\n        \"step\": 0.5,\n        \"stop\": 3.5\n      }\n    },\n    {\n      \"init\": \"isFinite(containerSize()[0]) ? containerSize()[0] : 300\",\n      \"name\": \"width\",\n      \"on\": [\n        {\n          \"events\": \"window:resize\",\n          \"update\": \"isFinite(containerSize()[0]) ? containerSize()[0] : 300\"\n        }\n      ]\n    }\n  ],\n  \"style\": \"cell\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Common Data Science Libraries\nDESCRIPTION: Basic imports for matplotlib and numpy libraries commonly used with Marimo\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/snapshots/dataflow.md.txt#2025-04-19_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport matplotlib.pyplot as plt\nimport numpy as np\n```\n\n----------------------------------------\n\nTITLE: Running Python Validation Checks with Make\nDESCRIPTION: Command to run checks specifically for the Python code using Make, including linting, formatting, and typechecking.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/CONTRIBUTING.md#2025-04-19_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nmake py-check\n```\n\n----------------------------------------\n\nTITLE: Running Notebook as Script\nDESCRIPTION: Command to execute a marimo notebook as a Python script.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/getting_started/quickstart.md#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\npython your_notebook.py\n```\n\n----------------------------------------\n\nTITLE: Configuring Individual Marimo Iframe Elements with Data Attributes\nDESCRIPTION: Demonstrates how to configure individual marimo-iframe elements using data attributes. This example shows setting custom height and hiding code display.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/publishing/from_code_snippets.md#2025-04-19_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<marimo-iframe data-height=\"600px\" data-show-code=\"false\">\n...\n</marimo-iframe>\n```\n\n----------------------------------------\n\nTITLE: Full LSP Configuration in pyproject.toml\nDESCRIPTION: Comprehensive configuration options for LSP including language server settings and diagnostics configuration in pyproject.toml.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/editor_features/language_server.md#2025-04-19_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[tool.marimo.experimental]\nlsp = true\n\n# Language server configuration\n[tool.marimo.language_servers.pylsp]\nenabled = true               # Enable/disable the Python language server\nenable_mypy = true           # Type checking with mypy (enabled by default, if installed)\nenable_ruff = true           # Linting with ruff (enabled by default, if installed)\nenable_flake8 = false        # Linting with flake8\nenable_pydocstyle = false    # Check docstring style\nenable_pylint = false        # Linting with pylint\nenable_pyflakes = false      # Syntax checking with pyflakes\n\n# Diagnostics configuration\n[tool.marimo.diagnostics]\nenabled = true               # Show diagnostics in the editor\n```\n\n----------------------------------------\n\nTITLE: Running Frontend Tests\nDESCRIPTION: Command to run only the frontend tests for quicker validation of frontend changes.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/CONTRIBUTING.md#2025-04-19_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nmake fe-test\n```\n\n----------------------------------------\n\nTITLE: Running FastAPI and marimo Integration with uv\nDESCRIPTION: Instructions for running the FastAPI and marimo integration app using the uv package manager. It involves installing uv and then using it to run the main.py script without creating a project.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/examples/frameworks/fastapi/README.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nuv run --no-project main.py\n```\n\n----------------------------------------\n\nTITLE: Configuring Vega-Lite Bar Chart in JSON\nDESCRIPTION: This JSON configuration defines a bar chart using Vega-Lite. It specifies the data source as a CSV, encodes the x-axis as a count aggregate and y-axis as a nominal category, and sets the chart type to bar with container-based width.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_data/snapshots/column_preview_categorical_chart_spec.txt#2025-04-19_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"$schema\": \"https://vega.github.io/schema/vega-lite/v5.20.1.json\",\n  \"config\": {\n    \"view\": {\n      \"continuousHeight\": 300,\n      \"continuousWidth\": 300\n    }\n  },\n  \"data\": {\n    \"format\": {\n      \"type\": \"csv\"\n    },\n    \"url\": \"data:text/csv;base64,Y2F0ZWdvcnlfY29sCmNhdDEKY2F0MgpjYXQxCg==\"\n  },\n  \"encoding\": {\n    \"x\": {\n      \"aggregate\": \"count\",\n      \"type\": \"quantitative\"\n    },\n    \"y\": {\n      \"field\": \"category_col\",\n      \"type\": \"nominal\"\n    }\n  },\n  \"mark\": {\n    \"type\": \"bar\"\n  },\n  \"width\": \"container\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing RadioGroup with Single-Letter Labels in React\nDESCRIPTION: This snippet shows another example of the RadioGroup component, this time with single-letter labels 'a', 'b', and 'c'. It uses the same structure as the previous example but with different label content.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/frontend/src/stories/radio-group.mdx#2025-04-19_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<RadioGroup defaultValue=\"comfortable\">\n  <div className=\"flex items-center space-x-3\">\n    <RadioGroupItem value=\"default\" id=\"r1\" />\n\n    <Label htmlFor=\"r1\">a</Label>\n\n  </div>\n\n  <div className=\"flex items-center space-x-3\">\n    <RadioGroupItem value=\"comfortable\" id=\"r2\" />\n\n    <Label htmlFor=\"r2\">b</Label>\n\n  </div>\n\n  <div className=\"flex items-center space-x-3\">\n    <RadioGroupItem value=\"compact\" id=\"r3\" />\n\n    <Label htmlFor=\"r3\">c</Label>\n\n  </div>\n</RadioGroup>\n```\n\n----------------------------------------\n\nTITLE: Installing Marimo with Conda\nDESCRIPTION: Command to install Marimo and required dependencies using conda package manager\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/integrations/motherduck.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nconda install -c conda-forge marimo duckdb polars\n```\n\n----------------------------------------\n\nTITLE: Hidden Python Code Block in Marimo\nDESCRIPTION: A Python code block that is marked to hide its code in Marimo, demonstrating code visibility control.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/snapshots/unsafe-doc-old.md.txt#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n1 + 1\n```\n\n----------------------------------------\n\nTITLE: Marimo Vertical Stack Layout\nDESCRIPTION: Demonstrates vertical stacking of markdown elements using Marimo's layout utilities\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_server/export/snapshots/notebook_with_outputs.ipynb.txt#2025-04-19_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nmo.vstack([mo.md(\"hello\"), mo.md(\"world\")])\n```\n\n----------------------------------------\n\nTITLE: Installing Optional Dependencies with uv\nDESCRIPTION: Command to install recommended marimo dependencies using uv.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/getting_started/quickstart.md#2025-04-19_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nuv add \"marimo[recommended]\"\n```\n\n----------------------------------------\n\nTITLE: Running Marimo Example Notebooks with HuggingFace Models\nDESCRIPTION: Instructions for opening and running Marimo example notebooks that use HuggingFace models. This includes steps for installation and using the sandbox environment for automatic dependency management.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/examples/third_party/huggingface/README.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. [Install marimo](https://docs.marimo.io/getting_started/index.html#installation)\n2. [Install `uv`](https://github.com/astral-sh/uv/?tab=readme-ov-file#installation)\n3. Open an example with `marimo edit --sandbox <notebook.py>`.\n```\n\n----------------------------------------\n\nTITLE: Plotting Wave with Dependencies\nDESCRIPTION: Displays a wave plot and shows its references and definitions using Marimo markdown.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/snapshots/dataflow.md.txt#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nmo.md(\n    f\"\"\"\n    {mo.as_html(plot_wave(amplitude, period))}\n\n    - `refs: {mo.refs()}`\n    - `defs: {mo.defs()}`\n    \"\"\"\n)\n```\n\n----------------------------------------\n\nTITLE: Basic Script Execution\nDESCRIPTION: Execute a Marimo notebook as a Python script from the command line.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/scripts.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython my_marimo_notebook.py\n```\n\n----------------------------------------\n\nTITLE: Export Notebook to HTML\nDESCRIPTION: Run a Marimo notebook while saving its output as HTML, with optional command-line arguments.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/scripts.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmarimo export html notebook.py -o notebook.html\n```\n\n----------------------------------------\n\nTITLE: Initializing Marimo App with Markdown Display\nDESCRIPTION: Creates a Marimo application with a single cell that renders markdown content. The code cell is hidden from view when rendered, and the markdown includes both text and a code example.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/snapshots/markdown_to_marimo.txt#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport marimo\n\n\napp = marimo.App()\n\n\n@app.cell(hide_code=True)\ndef _(mo):\n    mo.md(\n        r\"\"\"\n        # Test Markdown\n\n        print('Hello from Markdown!')\n        \"\"\"\n    )\n    return\n\n\nif __name__ == \"__main__\":\n    app.run()\n```\n\n----------------------------------------\n\nTITLE: Running Marimo Docker Container Locally\nDESCRIPTION: Command to run a marimo Docker container locally, exposing port 8080 and using the latest SQL variant.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/deploying/prebuilt_containers.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -p 8080:8080 -it ghcr.io/marimo-team/marimo:latest-sql\n```\n\n----------------------------------------\n\nTITLE: Importing NumPy for Advanced Slider Configuration\nDESCRIPTION: Imports the NumPy library which is required for creating the logarithmic slider with custom steps. This dependency must be imported before using functions like logspace.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/api/inputs/slider.md#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@app.cell\ndef __():\n    import numpy as np\n    return\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Marimo Examples with UV\nDESCRIPTION: Commands for installing uv and running marimo example notebooks in a sandboxed environment. This method automatically installs dependencies.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/examples/markdown/README.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nuvx marimo edit --sandbox <notebook-url>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Reactive Execution in marimo (Python)\nDESCRIPTION: This snippet shows how marimo automatically recalculates dependent variables when a value is changed. It demonstrates the reactive execution feature of marimo.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/snapshots/marimo_for_jupyter_users.md.txt#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nx = 0; x\n```\n\nLANGUAGE: python\nCODE:\n```\ny = x + 1; y\n```\n\n----------------------------------------\n\nTITLE: Importing ContextMenu Components in React\nDESCRIPTION: This snippet shows how to import the necessary components for creating a context menu from a UI library. It includes the main ContextMenu component, as well as ContextMenuContent, ContextMenuItem, and ContextMenuTrigger.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/frontend/src/stories/context-menu.mdx#2025-04-19_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {\n  ContextMenu,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuTrigger,\n} from \"@/components/ui/context-menu\";\n```\n\n----------------------------------------\n\nTITLE: Installing Marimo SQL Package with pip\nDESCRIPTION: Command to install Marimo with SQL support using pip package manager\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/integrations/motherduck.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install \"marimo[sql]\"\n```\n\n----------------------------------------\n\nTITLE: Marimo Island HTML Component\nDESCRIPTION: HTML markup for a Marimo island component that contains cell output for displaying markdown text and hidden cell code. The component is reactive and has specific data attributes for app and cell identification.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_islands/snapshots/island-no-code.txt#2025-04-19_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<marimo-island\n    data-app-id=\"main\"\n    data-cell-id=\"MJUe\"\n    data-reactive=\"true\"\n>\n    <marimo-cell-output>\n    <span class=\"markdown prose dark:prose-invert\"><span class=\"paragraph\">Hello, islands!</span></span>\n    </marimo-cell-output>\n    <marimo-cell-code hidden>mo.md('Hello%2C%20islands!')</marimo-cell-code>\n</marimo-island>\n```\n\n----------------------------------------\n\nTITLE: Configuring Autorun Settings\nDESCRIPTION: TOML configuration to disable automatic notebook execution on startup.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/getting_started/quickstart.md#2025-04-19_snippet_6\n\nLANGUAGE: toml\nCODE:\n```\n[runtime]\nauto_instantiate = false\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication Middleware for marimo with Python\nDESCRIPTION: Provides an example of implementing authentication middleware that populates request.user. This middleware can be added to a FastAPI app to enhance marimo's authentication capabilities.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/deploying/programmatically.md#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom starlette.middleware.base import BaseHTTPMiddleware\nfrom starlette.requests import Request\n\nclass AuthMiddleware(BaseHTTPMiddleware):\n    async def dispatch(self, request: Request, call_next):\n        # Add user data to the request scope\n        # This will be accessible via mo.app_meta().request.user\n        request.scope[\"user\"] = {\n            \"is_authenticated\": True,\n            \"username\": \"example_user\",\n            # Add any other user data\n        }\n\n        # Optional add metadata to the request\n        request.scope[\"meta\"] = {\n            \"some_key\": \"some_value\",\n        }\n\n        response = await call_next(request)\n        return response\n\n# Add the middleware to your FastAPI app\napp.add_middleware(AuthMiddleware)\n```\n\n----------------------------------------\n\nTITLE: Deploying Marimo Notebook as Web App\nDESCRIPTION: Command to deploy the chat notebook as a web application using Marimo's run command.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/examples/third_party/sage/README.md#2025-04-19_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nmarimo run --sandbox chat_with_github.py -- $GITHUB_REPO\n```\n\n----------------------------------------\n\nTITLE: Accessing marimo Web App with Query Parameters (Bash)\nDESCRIPTION: Demonstrates how to run a marimo notebook as a web app and access it with query parameters. This allows for dynamic parameterization through the URL.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/coming_from/papermill.md#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmarimo run notebook.py\n```\n\nLANGUAGE: bash\nCODE:\n```\nhttp://your-app-url/?param1=value1\n```\n\n----------------------------------------\n\nTITLE: Creating Bar Chart with Altair in Python\nDESCRIPTION: Creates a horizontal bar chart using Altair with nominal B values on y-axis and count aggregation on x-axis. The chart is configured to have a container-width responsive layout.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_data/snapshots/column_preview_str_chart_code.txt#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n_chart = (\n    alt.Chart(table)\n    .mark_bar()\n    .encode(\n        y=alt.Y(\"B\", type=\"nominal\"),\n        x=alt.X(\"count()\", type=\"quantitative\"),\n    )\n    .properties(width=\"container\")\n)\n_chart\n```\n\n----------------------------------------\n\nTITLE: Installing Optional Dependencies with pip\nDESCRIPTION: Command to install recommended marimo dependencies using pip.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/getting_started/quickstart.md#2025-04-19_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npip install \"marimo[recommended]\"\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAI-compatible Providers in marimo.toml\nDESCRIPTION: This configuration example shows how to set up an OpenAI-compatible provider (like DeepSeek) in marimo's configuration file.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/editor_features/ai_completion.md#2025-04-19_snippet_8\n\nLANGUAGE: toml\nCODE:\n```\n[ai.open_ai]\napi_key = \"dsk-...\" # Your provider's API key\nmodel = \"deepseek-chat\" # or \"deepseek-reasoner\"\nbase_url = \"https://api.deepseek.com/\"\n```\n\n----------------------------------------\n\nTITLE: Rendering Hidden Code Block in Marimo Markdown\nDESCRIPTION: Creates a markdown cell with a hidden code block, showcasing how Marimo can include non-visible code sections.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/snapshots/unsafe-doc.py.txt#2025-04-19_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n@app.cell(hide_code=True)\ndef _(mo):\n    mo.md(\n        r\"\"\"\n        <!-- Hidden code block -->\n        \"\"\"\n    )\n    return\n```\n\n----------------------------------------\n\nTITLE: Running Marimo Application with Specific Host and Port\nDESCRIPTION: This bash command starts a Marimo application, specifying the host as 127.0.0.1 and the port as 2718, which matches the proxy_pass configuration in the Nginx setup.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/deploying/deploying_nginx.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmarimo run app.py --host 127.0.0.1 --port 2718\n```\n\n----------------------------------------\n\nTITLE: Installing marimo with Recommended Dependencies (pip)\nDESCRIPTION: Command to install marimo with recommended dependencies using pip. This unlocks additional features like SQL cells, AI completion, and server-side plotting.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/getting_started/installation.md#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npip install \"marimo[recommended]\"\n```\n\n----------------------------------------\n\nTITLE: Managing Ollama Models\nDESCRIPTION: These commands demonstrate how to download, list, and run Ollama models for local LLM usage with marimo.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/editor_features/ai_completion.md#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# View available models at https://ollama.com/library\nollama pull llama3.1\nollama pull codellama  # recommended for code generation\n\n# View your installed models\nollama ls\n```\n\n----------------------------------------\n\nTITLE: Generating Markdown Content in JavaScript\nDESCRIPTION: This snippet shows the JavaScript code used to generate the markdown content for the Marimo island component. It uses the 'mo.md()' function to create the 'Hello, islands!' text.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_islands/snapshots/island.txt#2025-04-19_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nmo.md('Hello%2C%20islands!')\n```\n\n----------------------------------------\n\nTITLE: Deploying marimo Notebook as Web App (Bash)\nDESCRIPTION: Illustrates how to run a marimo notebook as a web app. This allows for interactive sharing and execution of notebooks in a web environment.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/coming_from/papermill.md#2025-04-19_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nmarimo run notebook.py\n```\n\n----------------------------------------\n\nTITLE: Using Yield to Generate an Infinite Sequence in Python\nDESCRIPTION: This example shows how to use 'yield' to create an infinite sequence generator. The 'infinite_sequence' function generates an endless stream of integers, demonstrating the memory efficiency of generators.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_runtime/snapshots/docstrings_keyword.txt#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef infinite_sequence():\n    num = 0\n    while True:\n        yield num\n        num += 1\n\ngen = infinite_sequence()\nfor _ in range(5):\n    print(next(gen))\n```\n\n----------------------------------------\n\nTITLE: Importing Marimo Module in Python\nDESCRIPTION: This snippet imports the Marimo library, which is likely used for creating interactive notebooks or applications.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_islands/snapshots/html.txt#2025-04-19_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport marimo as mo\n```\n\n----------------------------------------\n\nTITLE: Adding Math Expression Cell in Marimo App\nDESCRIPTION: Creates a cell that displays markdown with a LaTeX math expression. The cell's code is hidden from view.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/snapshots/converted_markdown.py.txt#2025-04-19_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n@app.cell(hide_code=True)\ndef _(mo):\n    mo.md(\n        r\"\"\"\n        Here is some math\n\n        $x \\approx 0$\n        \"\"\"\n    )\n    return\n```\n\n----------------------------------------\n\nTITLE: Preparing and Pushing Marimo Notebook to GitHub\nDESCRIPTION: Series of Git commands to initialize a local repository, add the exported notebook files, commit changes, and push to a newly created GitHub repository. This is part of the process for deploying to Cloudflare Pages via GitHub.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/publishing/cloudflare_pages.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd output_dir\ngit init\ngit remote add origin https://github.com/<your-gh-username>/<repository-name>\ngit add .\ngit commit -m \"Initial commit\"\ngit branch -M main\ngit push -u origin main\n```\n\n----------------------------------------\n\nTITLE: Installing LSP Dependencies\nDESCRIPTION: Commands to install the required LSP dependencies using different package managers including pip, uv, and conda.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/editor_features/language_server.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install \"marimo[lsp]\"\n# or\nuv add \"marimo[lsp]\"\n# or\nconda install -c conda-forge python-lsp-server python-lsp-ruff\n```\n\n----------------------------------------\n\nTITLE: Horizontal Bar Chart Vega Specification\nDESCRIPTION: A complete Vega specification that creates a horizontal bar chart visualization with responsive width, customized axes, and sorted categories. The chart displays categories A through D with their corresponding count values, featuring grid lines and proper spacing.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_data/snapshots/column_preview_duckdb_categorical_chart_spec.txt#2025-04-19_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://vega.github.io/schema/vega/v5.json\",\n  \"autosize\": {\n    \"contains\": \"padding\",\n    \"type\": \"fit-x\"\n  },\n  \"axes\": [\n    {\n      \"aria\": false,\n      \"domain\": false,\n      \"grid\": true,\n      \"gridScale\": \"y\",\n      \"labels\": false,\n      \"maxExtent\": 0,\n      \"minExtent\": 0,\n      \"orient\": \"bottom\",\n      \"scale\": \"x\",\n      \"tickCount\": {\n        \"signal\": \"ceil(width/40)\"\n      },\n      \"ticks\": false,\n      \"zindex\": 0\n    },\n    {\n      \"grid\": false,\n      \"labelFlush\": true,\n      \"labelOverlap\": true,\n      \"orient\": \"bottom\",\n      \"scale\": \"x\",\n      \"tickCount\": {\n        \"signal\": \"ceil(width/40)\"\n      },\n      \"title\": \"count\",\n      \"zindex\": 0\n    },\n    {\n      \"grid\": false,\n      \"orient\": \"left\",\n      \"scale\": \"y\",\n      \"title\": \"category\",\n      \"zindex\": 0\n    }\n  ],\n  \"background\": \"white\",\n  \"data\": [\n    {\n      \"name\": \"data-6f2678becc24b5ff9fbec3e85cf09cd0\"\n    },\n    {\n      \"name\": \"data_0\"\n    },\n    {\n      \"name\": \"data_1\",\n      \"values\": [\n        {\n          \"category\": \"A\",\n          \"count_end\": 25.0,\n          \"count_start\": 0.0\n        },\n        {\n          \"category\": \"B\",\n          \"count_end\": 25.0,\n          \"count_start\": 0.0\n        },\n        {\n          \"category\": \"C\",\n          \"count_end\": 25.0,\n          \"count_start\": 0.0\n        },\n        {\n          \"category\": \"D\",\n          \"count_end\": 25.0,\n          \"count_start\": 0.0\n        }\n      ]\n    },\n    {\n      \"name\": \"data_0_y_domain_category\",\n      \"values\": [\n        {\n          \"category\": \"A\",\n          \"sort_field\": 25\n        },\n        {\n          \"category\": \"B\",\n          \"sort_field\": 25\n        },\n        {\n          \"category\": \"C\",\n          \"sort_field\": 25\n        },\n        {\n          \"category\": \"D\",\n          \"sort_field\": 25\n        }\n      ]\n    }\n  ],\n  \"marks\": [\n    {\n      \"encode\": {\n        \"update\": {\n          \"fill\": {\n            \"value\": \"#4c78a8\"\n          },\n          \"height\": {\n            \"signal\": \"max(0.25, bandwidth('y'))\"\n          },\n          \"x\": {\n            \"field\": \"count_end\",\n            \"scale\": \"x\"\n          },\n          \"x2\": {\n            \"field\": \"count_start\",\n            \"scale\": \"x\"\n          },\n          \"y\": {\n            \"field\": \"category\",\n            \"scale\": \"y\"\n          }\n        }\n      },\n      \"from\": {\n        \"data\": \"data_1\"\n      },\n      \"name\": \"marks\",\n      \"style\": [\n        \"bar\"\n      ],\n      \"type\": \"rect\"\n    }\n  ],\n  \"padding\": 5,\n  \"scales\": [\n    {\n      \"domain\": {\n        \"data\": \"data_1\",\n        \"fields\": [\n          \"count_start\",\n          \"count_end\"\n        ]\n      },\n      \"name\": \"x\",\n      \"nice\": true,\n      \"range\": [\n        0,\n        {\n          \"signal\": \"width\"\n        }\n      ],\n      \"type\": \"linear\",\n      \"zero\": true\n    },\n    {\n      \"domain\": {\n        \"data\": \"data_0_y_domain_category\",\n        \"field\": \"category\",\n        \"sort\": {\n          \"field\": \"sort_field\",\n          \"op\": \"max\",\n          \"order\": \"descending\"\n        }\n      },\n      \"name\": \"y\",\n      \"paddingInner\": 0.1,\n      \"paddingOuter\": 0.05,\n      \"range\": {\n        \"step\": {\n          \"signal\": \"y_step\"\n        }\n      },\n      \"type\": \"band\"\n    }\n  ],\n  \"signals\": [\n    {\n      \"init\": \"isFinite(containerSize()[0]) ? containerSize()[0] : 300\",\n      \"name\": \"width\",\n      \"on\": [\n        {\n          \"events\": \"window:resize\",\n          \"update\": \"isFinite(containerSize()[0]) ? containerSize()[0] : 300\"\n        }\n      ]\n    },\n    {\n      \"name\": \"y_step\",\n      \"value\": 20\n    },\n    {\n      \"name\": \"height\",\n      \"update\": \"bandspace(domain('y').length, 0.1, 0.05) * y_step\"\n    }\n  ],\n  \"style\": \"cell\",\n  \"title\": {\n    \"frame\": \"group\",\n    \"text\": \"Top 10 category\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Launching Marimo Notebook Server\nDESCRIPTION: Command to start the marimo notebook server for creating and managing notebooks.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/getting_started/quickstart.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmarimo edit\n```\n\n----------------------------------------\n\nTITLE: Running Marimo Conversion Command\nDESCRIPTION: A command to run Marimo conversion on a markdown document.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/snapshots/unsafe-doc-old.md.txt#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmarimo run convert document.md\n```\n\n----------------------------------------\n\nTITLE: Loop Iteration Cells\nDESCRIPTION: Cells containing for loops that demonstrate iteration and printing functionality using the range function.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/snapshots/converted_multiple_defs.py.txt#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@app.cell\ndef _():\n    for _i in range(3):\n        print(_i)\n    return\n\n@app.cell\ndef _():\n    for _i in range(4):\n        print(_i)\n    return\n```\n\n----------------------------------------\n\nTITLE: Setting up Marqo Docker Container\nDESCRIPTION: Commands to set up and run the Marqo search engine in a Docker container, which is required for the Sage chatbot functionality.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/examples/third_party/sage/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker rm -f marqo\ndocker pull marqoai/marqo:latest\ndocker run --name marqo -it -p 8882:8882 marqoai/marqo:latest\n```\n\n----------------------------------------\n\nTITLE: Converting Markdown to Python Notebook Format\nDESCRIPTION: Shows the command to convert a Marimo Markdown notebook back to the Python notebook format.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/marimo/_tutorials/markdown_format.md#2025-04-19_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ marimo convert my_marimo.md > my_marimo.py\n```\n\n----------------------------------------\n\nTITLE: Running Marimo SQL Tutorial in Bash\nDESCRIPTION: This command launches an interactive SQL tutorial using marimo. It provides a hands-on way for users to learn about marimo's SQL integration features.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/working_with_data/sql.md#2025-04-19_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nmarimo tutorial sql\n```\n\n----------------------------------------\n\nTITLE: Generating and Running Marimo Islands Demo Page\nDESCRIPTION: Commands to generate an HTML page with Marimo islands and start the Vite development server\nSOURCE: https://github.com/marimo-team/marimo/blob/main/frontend/islands/development.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Generate\nuv run ./islands/generate.py > islands/__demo__/index.html\n# Run the Vite server\npnpm dev:islands\n```\n\n----------------------------------------\n\nTITLE: Basic Marimo Export Command\nDESCRIPTION: Basic command-line syntax for exporting marimo notebooks.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/exporting.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmarimo export\n```\n\n----------------------------------------\n\nTITLE: Rendering Markdown Text in Marimo Cell\nDESCRIPTION: Demonstrates rendering markdown text content within a Marimo cell output. Uses the mo.md() function to display formatted text.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_islands/snapshots/island-mimetypes.txt#2025-04-19_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<marimo-island data-app-id=\"main\" data-cell-id=\"MJUe\" data-reactive=\"true\">\n    <marimo-cell-output>\n    <span class=\"markdown prose dark:prose-invert\"><span class=\"paragraph\">Hello, islands!</span></span>\n    </marimo-cell-output>\n    <marimo-cell-code hidden>mo.md('Hello%2C%20islands!')</marimo-cell-code>\n</marimo-island>\n```\n\n----------------------------------------\n\nTITLE: Loading Marimo Frontend Dependencies in HTML\nDESCRIPTION: Sets up required frontend resources for Marimo including the islands JavaScript module, CSS styles, Google Fonts (Fira Mono, Lora, PT Sans), and KaTeX for math rendering. Also includes marimo-specific custom elements for filename and mode.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_islands/snapshots/header.txt#2025-04-19_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\" src=\"https://cdn.jsdelivr.net/npm/@marimo-team/islands@0.0.0/dist/main.js\"></script>\n    <link\n        href=\"https://cdn.jsdelivr.net/npm/@marimo-team/islands@0.0.0/dist/style.css\"\n        rel=\"stylesheet\"\n        crossorigin=\"anonymous\"\n    />\n    <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\" />\n    <link\n        rel=\"preconnect\"\n        href=\"https://fonts.gstatic.com\"\n        crossorigin\n    />\n    <link href=\"https://fonts.googleapis.com/css2?family=Fira+Mono:wght@400;500;700&amp;family=Lora&amp;family=PT+Sans:wght@400;700&amp;display=swap\" rel=\"stylesheet\" />\n    <link\n        rel=\"stylesheet\"\n        href=\"https://cdn.jsdelivr.net/npm/katex@0.16.10/dist/katex.min.css\"\n        integrity=\"sha384-wcIxkf4k558AjM3Yz3BBFQUbk/zgIYC2R0QpeeYb+TwlBVMrlgLqwRjRtGZiK7ww\"\n        crossorigin=\"anonymous\"\n    />\n    <marimo-filename hidden></marimo-filename>\n<marimo-mode data-mode='read' hidden></marimo-mode>\n```\n\n----------------------------------------\n\nTITLE: Executing Asyncio Sleep Operation in Python\nDESCRIPTION: Demonstrates asynchronous programming in Python using asyncio.sleep() to pause execution for 0.1 seconds. This is a basic example of handling asynchronous operations in a Marimo notebook context.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/snapshots/async.txt#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nawait asyncio.sleep(0.1)\n```\n\n----------------------------------------\n\nTITLE: Initializing Marimo Notebook with Markdown Admonitions Examples\nDESCRIPTION: This code initializes a Marimo notebook demonstrating various admonition styles in Markdown cells. It creates multiple examples showing different admonition types (note, info, warning, danger, success) with both compact and expanded syntax formats.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/examples/markdown/admonitions.md#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport marimo as mo\n\n_ = mo.md(\n    \"\"\"\n# Admonitions in Markdown\n\nAdmonitions are call-out blocks that help draw attention to important information.\n\nmarimo supports the following admonition types:\n\n:::note\nThis is a note admonition.\n:::\n\n:::info\nThis is an info admonition.\n:::\n\n:::warning\nThis is a warning admonition.\n:::\n\n:::danger\nThis is a danger admonition.\n:::\n\n:::success\nThis is a success admonition.\n:::\n\n## Expanded syntax\n\nYou can also use the expanded syntax, which allows you to specify a custom title:\n\n:::note title=\"Note with custom title\"\nThis is a note with a custom title.\n:::\n\n:::info title=\"Info with custom title\"\nThis is info with a custom title.\n:::\n\n:::warning title=\"Warning with custom title\"\nThis is a warning with a custom title.\n:::\n\n:::danger title=\"Danger with custom title\"\nThis is a danger notification with a custom title.\n:::\n\n:::success title=\"Success with custom title\"\nThis is a success notification with a custom title.\n:::\n\n\"\"\"\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Google Cloud Storage Package\nDESCRIPTION: Command to install the google-cloud-storage Python package using pip.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/integrations/google_cloud_storage.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install google-cloud-storage\n```\n\n----------------------------------------\n\nTITLE: Initializing Marimo Application\nDESCRIPTION: Sets up the basic marimo application instance and defines the entry point for running the app.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/snapshots/converted_multiple_defs.py.txt#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport marimo\n\napp = marimo.App()\n\nif __name__ == \"__main__\":\n    app.run()\n```\n\n----------------------------------------\n\nTITLE: Defining Vega Specification for Bar Chart in JSON\nDESCRIPTION: This code snippet defines a complete Vega specification for creating a bar chart. It includes configurations for chart size, axes, data sources, marks, scales, and signals. The chart visualizes the count of records for a boolean column.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_data/snapshots/column_preview_duckdb_bool_chart_spec.txt#2025-04-19_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://vega.github.io/schema/vega/v5.json\",\n  \"autosize\": {\n    \"contains\": \"padding\",\n    \"type\": \"fit-x\"\n  },\n  \"axes\": [\n    {\n      \"aria\": false,\n      \"domain\": false,\n      \"grid\": true,\n      \"gridScale\": \"x\",\n      \"labels\": false,\n      \"maxExtent\": 0,\n      \"minExtent\": 0,\n      \"orient\": \"left\",\n      \"scale\": \"y\",\n      \"tickCount\": {\n        \"signal\": \"ceil(height/40)\"\n      },\n      \"ticks\": false,\n      \"zindex\": 0\n    },\n    {\n      \"grid\": false,\n      \"labelAlign\": \"right\",\n      \"labelAngle\": 270,\n      \"labelBaseline\": \"middle\",\n      \"orient\": \"bottom\",\n      \"scale\": \"x\",\n      \"title\": \"bool_col\",\n      \"zindex\": 0\n    },\n    {\n      \"grid\": false,\n      \"labelOverlap\": true,\n      \"orient\": \"left\",\n      \"scale\": \"y\",\n      \"tickCount\": {\n        \"signal\": \"ceil(height/40)\"\n      },\n      \"title\": \"Count of Records\",\n      \"zindex\": 0\n    }\n  ],\n  \"background\": \"white\",\n  \"data\": [\n    {\n      \"name\": \"data-834341051d0a090d8e3ab71fa64b81b9\"\n    },\n    {\n      \"name\": \"data_0\",\n      \"values\": [\n        {\n          \"__count\": 50,\n          \"bool_col\": true\n        },\n        {\n          \"__count\": 50,\n          \"bool_col\": false\n        }\n      ]\n    },\n    {\n      \"name\": \"data_0_x_domain_bool_col\",\n      \"values\": [\n        {\n          \"bool_col\": true\n        },\n        {\n          \"bool_col\": false\n        }\n      ]\n    },\n    {\n      \"name\": \"data_0_y_domain___count\",\n      \"values\": [\n        {\n          \"max\": 50,\n          \"min\": 50\n        }\n      ]\n    }\n  ],\n  \"height\": 300,\n  \"marks\": [\n    {\n      \"encode\": {\n        \"update\": {\n          \"fill\": {\n            \"value\": \"#4c78a8\"\n          },\n          \"width\": {\n            \"signal\": \"max(0.25, bandwidth('x'))\"\n          },\n          \"x\": {\n            \"field\": \"bool_col\",\n            \"scale\": \"x\"\n          },\n          \"y\": {\n            \"field\": \"__count\",\n            \"scale\": \"y\"\n          },\n          \"y2\": {\n            \"scale\": \"y\",\n            \"value\": 0\n          }\n        }\n      },\n      \"from\": {\n        \"data\": \"data_0\"\n      },\n      \"name\": \"marks\",\n      \"style\": [\n        \"bar\"\n      ],\n      \"type\": \"rect\"\n    }\n  ],\n  \"padding\": 5,\n  \"scales\": [\n    {\n      \"domain\": {\n        \"data\": \"data_0_x_domain_bool_col\",\n        \"field\": \"bool_col\",\n        \"sort\": true\n      },\n      \"name\": \"x\",\n      \"paddingInner\": 0.1,\n      \"paddingOuter\": 0.05,\n      \"range\": [\n        0,\n        {\n          \"signal\": \"width\"\n        }\n      ],\n      \"type\": \"band\"\n    },\n    {\n      \"domain\": [\n        {\n          \"signal\": \"(data(\\\"data_0_y_domain___count\\\")[0] || {}).min\"\n        },\n        {\n          \"signal\": \"(data(\\\"data_0_y_domain___count\\\")[0] || {}).max\"\n        }\n      ],\n      \"name\": \"y\",\n      \"nice\": true,\n      \"range\": [\n        {\n          \"signal\": \"height\"\n        },\n        0\n      ],\n      \"type\": \"linear\",\n      \"zero\": true\n    }\n  ],\n  \"signals\": [\n    {\n      \"init\": \"isFinite(containerSize()[0]) ? containerSize()[0] : 300\",\n      \"name\": \"width\",\n      \"on\": [\n        {\n          \"events\": \"window:resize\",\n          \"update\": \"isFinite(containerSize()[0]) ? containerSize()[0] : 300\"\n        }\n      ]\n    }\n  ],\n  \"style\": \"cell\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a marimo Notebook (Bash)\nDESCRIPTION: Command to create a new marimo notebook using the command-line interface.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/getting_started/key_concepts.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmarimo edit my_notebook.py\n```\n\n----------------------------------------\n\nTITLE: Markdown Cell with Embedded Python in Marimo\nDESCRIPTION: A markdown cell containing an embedded Python execution block, demonstrating how Marimo handles mixed content types.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/snapshots/unsafe-doc-old.md.txt#2025-04-19_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nmo.md(\"\"\"\n  This is a markdown cell with an execution block in it\n  ```{python}\n  # To ambiguous to convert\n  ```\n  \"\"\")\n```\n\n----------------------------------------\n\nTITLE: Hidden Python Addition\nDESCRIPTION: A hidden Python code block performing basic addition\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/snapshots/unsafe-doc.md.txt#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n1 + 1\n```\n\n----------------------------------------\n\nTITLE: Running FastAPI Marimo Application\nDESCRIPTION: Command line instructions for installing dependencies and running the FastAPI application that serves marimo notebook endpoints.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/examples/frameworks/fastapi-endpoint/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nuv run --no-project main.py\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://localhost:8000/greet?name=coder\n```\n\n----------------------------------------\n\nTITLE: Creating Python Cells in Markdown Format\nDESCRIPTION: Illustrates how to create a Python cell within a Markdown file using a special code block syntax.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/marimo/_tutorials/markdown_format.md#2025-04-19_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n```python {.marimo}\nimport matplotlib.pyplot as plt\nplt.plot([1, 2, 3, 4])\n```\n```\n\n----------------------------------------\n\nTITLE: Executing marimo Notebook as Python Script (Bash)\nDESCRIPTION: Command to run a marimo notebook as a standard Python script from the command-line.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/getting_started/key_concepts.md#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npython my_notebook.py\n```\n\n----------------------------------------\n\nTITLE: Marimo CLI Documentation Directive in Markdown\nDESCRIPTION: Markdown directive that generates documentation for the Marimo CLI by extracting command information from the main CLI module. This directive produces a table-formatted command reference.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/cli.md#2025-04-19_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n::: mkdocs-click\n    :module: marimo._cli.cli\n    :command: main\n    :prog_name: marimo\n    :depth: 0\n    :style: table\n```\n\n----------------------------------------\n\nTITLE: HTML Export Command\nDESCRIPTION: Command to export a marimo notebook to static HTML with optional watch mode for automatic updates.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/exporting.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmarimo export html notebook.py -o notebook.html\nmarimo export html notebook.py -o notebook.html --watch\n```\n\n----------------------------------------\n\nTITLE: JSON Data Output in Marimo Cell\nDESCRIPTION: Demonstrates JSON data output handling in a Marimo cell. Shows how to display simple key-value pairs using marimo-json-output component.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_islands/snapshots/island-mimetypes.txt#2025-04-19_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<marimo-island data-app-id=\"main\" data-cell-id=\"bkHC\" data-reactive=\"true\">\n    <marimo-cell-output>\n    <marimo-json-output data-json-data='{\"key\": \"value\"}' data-value-types='\"python\"'></marimo-json-output>\n    </marimo-cell-output>\n    <marimo-cell-code hidden>%7B'key'%3A%20'value'%7D</marimo-cell-code>\n</marimo-island>\n```\n\n----------------------------------------\n\nTITLE: Importing Alert Dialog Components\nDESCRIPTION: Imports the necessary components from the alert-dialog UI component library and Storybook dependencies.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/frontend/src/stories/alert-dialog.mdx#2025-04-19_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Meta, Story } from \"@storybook/blocks\";\n\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from \"@/components/ui/alert-dialog\";\n\nimport { Button } from \"@/components/ui/button\";\n```\n\n----------------------------------------\n\nTITLE: Importing Marimo Library in Python\nDESCRIPTION: Imports the Marimo library for use in the notebook. This is a prerequisite for using Marimo's functionality in subsequent code blocks.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/snapshots/unsafe-app.md.txt#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport marimo as mo\n```\n\n----------------------------------------\n\nTITLE: Importing Marimo Module in Markdown\nDESCRIPTION: Demonstrates how to import the Marimo module in a Markdown notebook for use in subsequent cells.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/marimo/_tutorials/markdown_format.md#2025-04-19_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport marimo as mo\n```\n\n----------------------------------------\n\nTITLE: Installing SQL Dependencies\nDESCRIPTION: Command to install required SQL dependencies including DuckDB for Marimo\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/snapshots/sql.md.txt#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install 'marimo[sql]'\n```\n\n----------------------------------------\n\nTITLE: Defining Python Function with Two Arguments\nDESCRIPTION: Defines a Python function named 'my_func' that takes two parameters (arg1 and arg2) and returns HTML output. The function parameters and return type are documented in the accompanying tables.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_runtime/snapshots/docstrings_function_google.txt#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef my_func(arg1, arg2)\n```\n\n----------------------------------------\n\nTITLE: Installing Marimo Tutorial\nDESCRIPTION: Command to launch marimo's interactive tutorials from the command line\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/index.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmarimo tutorial\n```\n\n----------------------------------------\n\nTITLE: Markdown Cell with Python Block\nDESCRIPTION: A cell that renders markdown content containing a Python code block example.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/snapshots/unsafe-doc-old.py.txt#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nmo.md(\"\"\"\n      This is a markdown cell with an execution block in it\n      ```{python}\n      # To ambiguous to convert\n      ```\n      \"\"\")\n```\n\n----------------------------------------\n\nTITLE: Jupyter Notebook JSON Structure\nDESCRIPTION: Complete JSON structure of a Jupyter notebook with Marimo integration, including cell configuration, metadata, and formatting specifications.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_server/export/snapshots/notebook_with_cells.ipynb.txt#2025-04-19_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n \"cells\": [\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"id\": \"Hbol\",\n   \"metadata\": {\n    \"marimo\": {\n     \"name\": \"cell_1\"\n    }\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"print(\\\"hello\\\")\"\n   ]\n  }\n ],\n \"metadata\": {},\n \"nbformat\": 4,\n \"nbformat_minor\": 5\n}\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Google Cloud for Local Development\nDESCRIPTION: This command authenticates the local environment with Google Cloud using Application Default Credentials, which is recommended for local development with Google Sheets.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/integrations/google_sheets.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngcloud auth application-default login\n```\n\n----------------------------------------\n\nTITLE: Adding Marimo Shield using Markdown\nDESCRIPTION: This snippet shows how to add a Marimo shield/badge to your project using Markdown syntax. The shield links to a Marimo application and displays the Marimo logo.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/community.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![marimo](https://marimo.io/shield.svg)](https://marimo.app/l/c7h6pz)\n```\n\n----------------------------------------\n\nTITLE: Listing Marimo Tutorials\nDESCRIPTION: Command to display all available marimo tutorials using the CLI help option.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/getting_started/quickstart.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmarimo tutorial --help\n```\n\n----------------------------------------\n\nTITLE: Running Marimo Example for Google Cloud Storage\nDESCRIPTION: Command to run a full example of using Google Cloud Storage with Marimo directly from GitHub.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/integrations/google_cloud_storage.md#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmarimo run https://raw.githubusercontent.com/marimo-team/marimo/main/examples/cloud/gcp/google_cloud_storage.py\n```\n\n----------------------------------------\n\nTITLE: Creating Markdown Cell in Marimo Notebook\nDESCRIPTION: Guidelines for creating a new Markdown cell in a marimo notebook. The assistant is instructed to generate valid Markdown code while referencing existing variables without redefining them.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_server/ai/snapshots/system_prompts.txt#2025-04-19_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n```\n{CELL_CODE}\n```\n```\n\n----------------------------------------\n\nTITLE: Starting Marimo Islands Development Server\nDESCRIPTION: Command to start the development server for Marimo islands mode\nSOURCE: https://github.com/marimo-team/marimo/blob/main/frontend/islands/development.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev:islands\n```\n\n----------------------------------------\n\nTITLE: Importing Marimo in Python\nDESCRIPTION: This code snippet demonstrates how to import the Marimo library in Python, which is necessary for using Marimo's interactive features.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/island_example.md#2025-04-19_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nimport marimo as mo\n```\n\n----------------------------------------\n\nTITLE: Initializing Marimo App in Python\nDESCRIPTION: Creates a new Marimo app instance and sets up the main execution block.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/snapshots/converted_markdown.py.txt#2025-04-19_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport marimo\n\napp = marimo.App()\n\nif __name__ == \"__main__\":\n    app.run()\n```\n\n----------------------------------------\n\nTITLE: Printing OpenAPI Schema in Marimo\nDESCRIPTION: This command prints the OpenAPI schema for Marimo. It's useful for viewing the current API specification.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/development_docs/openapi.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmarimo development openapi\n```\n\n----------------------------------------\n\nTITLE: Defining Marimo Cell with Parameter and Operation in Python\nDESCRIPTION: This cell defines a Marimo cell that takes a parameter 'x', performs an addition operation, and returns nothing. It shows how to create a cell that depends on input from another cell.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/snapshots/converted_arithmetic.py.txt#2025-04-19_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n@app.cell\ndef _(x):\n    x + 1\n    return\n```\n\n----------------------------------------\n\nTITLE: Installing Google AI Python Client\nDESCRIPTION: This command installs the Google AI Python client, which is required for using Google AI with marimo.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/editor_features/ai_completion.md#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npip install google-generativeai\n```\n\n----------------------------------------\n\nTITLE: Defining Unparsable Cell in Marimo\nDESCRIPTION: Creates an unparsable cell in the Marimo app, demonstrating how the app handles code that cannot be parsed normally.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/snapshots/unsafe-doc.py.txt#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\napp._unparsable_cell(\n    r\"\"\"\n    it's an unparsable cell\n    \"\"\",\n    name=\"_\"\n)\n```\n\n----------------------------------------\n\nTITLE: Marimo Embed File Directive\nDESCRIPTION: Directive to embed a file example showing conditional output functionality with specified display parameters\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/examples/outputs/conditional_output.md#2025-04-19_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n/// marimo-embed-file\n    size: xlarge\n    mode: edit\n    filepath: examples/outputs/conditional_output.py\n///\n```\n\n----------------------------------------\n\nTITLE: Starting Frontend Development Server with Hot Reloading\nDESCRIPTION: Command to start a development server on localhost:3000 that proxies requests to the Marimo server with hot reloading for faster frontend development.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/CONTRIBUTING.md#2025-04-19_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Implementing iframe Auto-resize Function in JavaScript\nDESCRIPTION: Function to dynamically resize an iframe based on its content height and handle horizontal scrollbars. Includes a ResizeObserver to continuously monitor content changes.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_server/templates/snapshots/export1.txt#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction __resizeIframe(obj) {\n        var scrollbarHeight = 20; // Max between windows, mac, and linux\n\n        function setHeight() {\n          var element = obj.contentWindow.document.documentElement;\n          // If there is no vertical scrollbar, we don't need to resize the iframe\n          if (element.scrollHeight === element.clientHeight) {\n            return;\n          }\n\n          // Create a new height that includes the scrollbar height if it's visible\n          var hasHorizontalScrollbar = element.scrollWidth > element.clientWidth;\n          var newHeight = element.scrollHeight + (hasHorizontalScrollbar ? scrollbarHeight : 0);\n\n          // Only update the height if it's different from the current height\n          if (obj.style.height !== `${newHeight}px`) {\n            obj.style.height = `${newHeight}px`;\n          }\n        }\n\n        // Resize the iframe to the height of the content and bottom scrollbar height\n        setHeight();\n\n        // Resize the iframe when the content changes\n        const resizeObserver = new ResizeObserver((entries) => {\n          setHeight();\n        });\n        resizeObserver.observe(obj.contentWindow.document.body);\n      }\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Google Cloud CLI\nDESCRIPTION: Command to authenticate locally using Google Cloud CLI for Application Default Credentials.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/integrations/google_cloud_storage.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngcloud auth application-default login\n```\n\n----------------------------------------\n\nTITLE: Opening MotherDuck Example Notebook\nDESCRIPTION: Command to open the MotherDuck example notebook in Marimo editor\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/integrations/motherduck.md#2025-04-19_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nmarimo edit https://github.com/marimo-team/marimo/blob/main/examples/sql/connect_to_motherduck.py\n```\n\n----------------------------------------\n\nTITLE: Creating IDK Code Cell in Marimo Notebook\nDESCRIPTION: Guidelines for creating a new cell using a custom language called 'idk' in a marimo notebook. The assistant is instructed to generate valid 'idk' code while referencing existing variables.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_server/ai/snapshots/system_prompts.txt#2025-04-19_snippet_3\n\nLANGUAGE: idk\nCODE:\n```\n```\n{CELL_CODE}\n```\n```\n\n----------------------------------------\n\nTITLE: Rendering Markdown with Marimo in Python\nDESCRIPTION: This code uses Marimo's md function to render a simple 'Hello, HTML!' message as markdown. This demonstrates basic output functionality in a Marimo application.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_islands/snapshots/html.txt#2025-04-19_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nmo.md('Hello, HTML!')\n```\n\n----------------------------------------\n\nTITLE: Running Marimo Examples without uv\nDESCRIPTION: Alternative method for running marimo examples without using uv. This approach requires manual installation of marimo and its dependencies.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/examples/ui/README.md#2025-04-19_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nmanually [install marimo](https://docs.marimo.io/getting_started/index.html#installation)\nfirst. Then run `marimo edit <notebook-url>`; however, you'll also need to\ninstall the requirements yourself.\n```\n\n----------------------------------------\n\nTITLE: Creating Python Code Cell in Marimo Notebook\nDESCRIPTION: Instructions for generating a new Python code cell in a marimo notebook. Includes rules for handling matplotlib, plotly, and altair visualizations, as well as guidelines for imports and variable naming.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_server/ai/snapshots/system_prompts.txt#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n```\n{CELL_CODE}\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Service Account Credentials\nDESCRIPTION: Command to configure the environment variable for service account authentication using a key file.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/integrations/google_cloud_bigquery.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport GOOGLE_APPLICATION_CREDENTIALS=/path/to/key/file.json\n```\n\n----------------------------------------\n\nTITLE: Referencing Variable in Python\nDESCRIPTION: This code snippet simply references the variable 'x' that was initialized in the previous cell. It's used to display or manipulate the value of 'x'.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/ipynb_data/unparsable.ipynb.txt#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nx\n```\n\n----------------------------------------\n\nTITLE: Initializing Marimo Application with Empty Cell\nDESCRIPTION: Creates a basic Marimo application structure with an empty cell decorator and main execution block. The script imports Marimo, initializes an App instance, defines an empty cell using the decorator pattern, and includes a standard Python main block for running the application.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/snapshots/converted_blank.py.txt#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport marimo\n\napp = marimo.App()\n\n\n@app.cell\ndef _():\n    return\n\n\nif __name__ == \"__main__\":\n    app.run()\n```\n\n----------------------------------------\n\nTITLE: Setting MotherDuck Token Environment Variable\nDESCRIPTION: Command to set authentication token and launch Marimo editor to avoid repeated authentication prompts\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/integrations/motherduck.md#2025-04-19_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nexport motherduck_token=\"your_token\"\nmarimo edit\n```\n\n----------------------------------------\n\nTITLE: Static Markdown Display - Python\nDESCRIPTION: Creates a control dependency variable and displays static markdown text using Marimo's md function.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/snapshots/ipynb_with_outputs.txt#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ncontrol_dep = None\nmo.md(\"markdown\")\n```\n\n----------------------------------------\n\nTITLE: Documentation Comment in Markdown\nDESCRIPTION: A simple one-line docstring comment using markdown heading syntax\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_utils/snapshots/docstring_one_liner.txt#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Summary\nOne-liner docstring\n```\n\n----------------------------------------\n\nTITLE: Running Marimo Examples Manually\nDESCRIPTION: Alternative method for running marimo examples without uv, requiring manual installation of marimo and dependencies.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/examples/layouts/README.md#2025-04-19_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nYou can also open notebooks without `uv`, in which case you'll need to\nmanually [install marimo](https://docs.marimo.io/getting_started/index.html#installation)\nfirst. Then run `marimo edit <notebook-url>`; however, you'll also need to\ninstall the requirements yourself.\n```\n\n----------------------------------------\n\nTITLE: Implementing Iframe Auto-resize Handler in JavaScript\nDESCRIPTION: JavaScript function to dynamically resize iframes based on content height and scrollbar presence. Includes ResizeObserver for automatic content change detection and handles horizontal scrollbar cases.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_server/templates/snapshots/export6.txt#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction __resizeIframe(obj) {\n  var scrollbarHeight = 20; // Max between windows, mac, and linux\n\n  function setHeight() {\n    var element = obj.contentWindow.document.documentElement;\n    // If there is no vertical scrollbar, we don't need to resize the iframe\n    if (element.scrollHeight === element.clientHeight) {\n      return;\n    }\n\n    // Create a new height that includes the scrollbar height if it's visible\n    var hasHorizontalScrollbar = element.scrollWidth > element.clientWidth;\n    var newHeight = element.scrollHeight + (hasHorizontalScrollbar ? scrollbarHeight : 0);\n\n    // Only update the height if it's different from the current height\n    if (obj.style.height !== `${newHeight}px`) {\n      obj.style.height = `${newHeight}px`;\n    }\n  }\n\n  // Resize the iframe to the height of the content and bottom scrollbar height\n  setHeight();\n\n  // Resize the iframe when the content changes\n  const resizeObserver = new ResizeObserver((entries) => {\n    setHeight();\n  });\n  resizeObserver.observe(obj.contentWindow.document.body);\n}\n```\n\n----------------------------------------\n\nTITLE: Running Marimo Tutorial\nDESCRIPTION: Command to launch the Marimo UI tutorial\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/snapshots/dataflow.md.txt#2025-04-19_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nmarimo tutorial ui\n```\n\n----------------------------------------\n\nTITLE: Starting Storybook for UI Development\nDESCRIPTION: Commands to open Storybook for UI component development and testing from the frontend directory.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/CONTRIBUTING.md#2025-04-19_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\ncd frontend/\npnpm storybook\n```\n\n----------------------------------------\n\nTITLE: Initializing Marimo static data in JavaScript\nDESCRIPTION: This script sets up the __MARIMO_STATIC__ object in the global window scope. It includes version information, notebook state data, asset URL, and file contents for the Marimo application.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_server/templates/snapshots/export2.txt#2025-04-19_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nwindow.__MARIMO_STATIC__ = {};\nwindow.__MARIMO_STATIC__.version = \"0.0.0\";\nwindow.__MARIMO_STATIC__.notebookState = {\"cellIds\": [\"cell1\", \"cell2\"], \"cellNames\": [\"Q2VsbCUyMDE=\", \"Q2VsbCUyMDI=\"], \"cellCodes\": [\"cHJpbnQoJ0hlbGxvJTJDJTIwQ2VsbCUyMDEnKQ==\", \"cHJpbnQoJ0hlbGxvJTJDJTIwQ2VsbCUyMDInKQ==\"], \"cellConfigs\": [\"JTdCJTIyY29sdW1uJTIyJTNBJTIwbnVsbCUyQyUyMCUyMmRpc2FibGVkJTIyJTNBJTIwZmFsc2UlMkMlMjAlMjJoaWRlX2NvZGUlMjIlM0ElMjBmYWxzZSU3RA==\", \"JTdCJTIyY29sdW1uJTIyJTNBJTIwbnVsbCUyQyUyMCUyMmRpc2FibGVkJTIyJTNBJTIwZmFsc2UlMkMlMjAlMjJoaWRlX2NvZGUlMjIlM0ElMjBmYWxzZSU3RA==\"], \"cellOutputs\": {\"cell1\": \"JTdCJTIyY2hhbm5lbCUyMiUzQSUyMCUyMm91dHB1dCUyMiUyQyUyMCUyMm1pbWV0eXBlJTIyJTNBJTIwJTIydGV4dCUyRnBsYWluJTIyJTJDJTIwJTIyZGF0YSUyMiUzQSUyMCUyMkhlbGxvJTJDJTIwQ2VsbCUyMDElMjIlMkMlMjAlMjJ0aW1lc3RhbXAlMjIlM0ElMjAwJTdE\"}, \"cellConsoleOutputs\": {\"cell1\": [\"JTdCJTIyY2hhbm5lbCUyMiUzQSUyMCUyMnN0ZG91dCUyMiUyQyUyMCUyMm1pbWV0eXBlJTIyJTNBJTIwJTIydGV4dCUyRnBsYWluJTIyJTJDJTIwJTIyZGF0YSUyMiUzQSUyMCUyMkhlbGxvJTJDJTIwQ2VsbCUyMDElMjIlMkMlMjAlMjJ0aW1lc3RhbXAlMjIlM0ElMjAwJTdE\", \"JTdCJTIyY2hhbm5lbCUyMiUzQSUyMCUyMnN0ZGVyciUyMiUyQyUyMCUyMm1pbWV0eXBlJTIyJTNBJTIwJTIydGV4dCUyRnBsYWluJTIyJTJDJTIwJTIyZGF0YSUyMiUzQSUyMCUyMkVycm9yJTIwaW4lMjBDZWxsJTIwMSUyMiUyQyUyMCUyMnRpbWVzdGFtcCUyMiUzQSUyMDAlN0Q=\"]}};\nwindow.__MARIMO_STATIC__.assetUrl = \"https://cdn.jsdelivr.net/npm/@marimo-team/frontend@0.0.0/dist\";\nwindow.__MARIMO_STATIC__.files = {\"file1\": \"File 1 content\", \"file2\": \"File 2 content\"};\n```\n\n----------------------------------------\n\nTITLE: Marimo Alignment Classes\nDESCRIPTION: CSS class declarations for horizontal alignment of content within Marimo components, including center, left, and right alignment options.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/api/layouts/justify.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Justify\n\n::: marimo.center\n\n::: marimo.left\n\n::: marimo.right\n```\n\n----------------------------------------\n\nTITLE: Embedding Marimo Example File for Console Output Capture\nDESCRIPTION: This code snippet embeds a Marimo example file that demonstrates how to capture console outputs. The file is embedded with a large size display in edit mode.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/examples/outputs/capture_console_outputs.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n/// marimo-embed-file\n    size: xlarge\n    mode: edit\n    filepath: examples/outputs/capture_console_outputs.py\n///\n```\n\n----------------------------------------\n\nTITLE: Indexing GitHub Repository with Sage\nDESCRIPTION: Command to index the specified GitHub repository using Sage.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/examples/third_party/sage/README.md#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsage-index $GITHUB_REPO\n```\n\n----------------------------------------\n\nTITLE: Implementing Iframe Auto-resize in JavaScript\nDESCRIPTION: JavaScript function that dynamically adjusts iframe height based on content and handles horizontal scrollbar presence. Uses ResizeObserver to watch for content changes and updates height accordingly.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_server/templates/snapshots/export4.txt#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction __resizeIframe(obj) {\n  var scrollbarHeight = 20; // Max between windows, mac, and linux\n\n  function setHeight() {\n    var element = obj.contentWindow.document.documentElement;\n    // If there is no vertical scrollbar, we don't need to resize the iframe\n    if (element.scrollHeight === element.clientHeight) {\n      return;\n    }\n\n    // Create a new height that includes the scrollbar height if it's visible\n    var hasHorizontalScrollbar = element.scrollWidth > element.clientWidth;\n    var newHeight = element.scrollHeight + (hasHorizontalScrollbar ? scrollbarHeight : 0);\n\n    // Only update the height if it's different from the current height\n    if (obj.style.height !== `${newHeight}px`) {\n      obj.style.height = `${newHeight}px`;\n    }\n  }\n\n  // Resize the iframe to the height of the content and bottom scrollbar height\n  setHeight();\n\n  // Resize the iframe when the content changes\n  const resizeObserver = new ResizeObserver((entries) => {\n    setHeight();\n  });\n  resizeObserver.observe(obj.contentWindow.document.body);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Markdown in marimo (Python)\nDESCRIPTION: This snippet shows how to write Markdown content in marimo using the mo.md function, allowing for dynamic Markdown generation based on Python variables.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/snapshots/marimo_for_jupyter_users.md.txt#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nmo.md(\n    f\"\"\"\n    The value of {slider} is {slider.value}.\n    \"\"\"\n)\n```\n\n----------------------------------------\n\nTITLE: Running BigQuery Example\nDESCRIPTION: Command to run a complete BigQuery example directly from the marimo GitHub repository.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/integrations/google_cloud_bigquery.md#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmarimo run https://raw.githubusercontent.com/marimo-team/marimo/main/examples/cloud/gcp/google_cloud_bigquery.py\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic Data Science Libraries in Python\nDESCRIPTION: Initial imports of fundamental data science libraries pandas and numpy for data manipulation and numerical operations\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_server/ai/snapshots/chat_system_prompts.txt#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\nimport numpy as np\n```\n\n----------------------------------------\n\nTITLE: Nested Code Block Fencing\nDESCRIPTION: Shows how to handle nested code block fencing with raw strings.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/snapshots/unsafe-app.py.txt#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nmo.md(\n    r\"\"\"\n    Nested fence\n    ````text\n    The guards are\n    ```python {.marimo}\n    ````\n    \"\"\"\n)\n```\n\n----------------------------------------\n\nTITLE: Running All Python Tests Across All Python Versions\nDESCRIPTION: Command to run all Python tests across all supported Python versions using Hatch (not recommended due to time constraints).\nSOURCE: https://github.com/marimo-team/marimo/blob/main/CONTRIBUTING.md#2025-04-19_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nhatch run test:test\n```\n\n----------------------------------------\n\nTITLE: Implementing Google Analytics tracking in JavaScript\nDESCRIPTION: This script initializes Google Analytics tracking for the Marimo application using the gtag.js library. It sets up the dataLayer and configures the tracking ID.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_server/templates/snapshots/export5.txt#2025-04-19_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nwindow.dataLayer = window.dataLayer || [];\nfunction gtag(){dataLayer.push(arguments);}\ngtag('js', new Date());\ngtag('config', 'G-XXXXXXXXXX');\n```\n\n----------------------------------------\n\nTITLE: Installing Ollama Language Model\nDESCRIPTION: Command to pull the Llama 3.1 language model using Ollama.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/examples/third_party/sage/README.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nollama pull llama3.1\n```\n\n----------------------------------------\n\nTITLE: Running Python Tests with Make\nDESCRIPTION: Command to run Python tests using Make, which executes pytest under the hood.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/CONTRIBUTING.md#2025-04-19_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nmake py-test\n```\n\n----------------------------------------\n\nTITLE: Markdown Table of Integration Options\nDESCRIPTION: A table listing available data source integrations for Marimo, including MotherDuck and various Google Cloud services.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/integrations/index.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Integration | Description |\n|-------------|-------------|\n| [MotherDuck](motherduck.md) | Integrating with MotherDuck |\n| [Google Cloud Storage](google_cloud_storage.md) | Integrating with Google Cloud Storage |\n| [Google Cloud BigQuery](google_cloud_bigquery.md) | Integrating with Google Cloud BigQuery |\n| [Google Sheets](google_sheets.md) | Integrating with Google Sheets |\n```\n\n----------------------------------------\n\nTITLE: Embedding Python code in HTML for Marimo\nDESCRIPTION: This HTML element contains base64 encoded Python code that will be executed within the Marimo environment. The code prints 'Hello, World!' to the output.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_server/templates/snapshots/export2.txt#2025-04-19_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<marimo-code hidden=\"\">\n    print('Hello%2C%20World!')\n</marimo-code>\n```\n\n----------------------------------------\n\nTITLE: Adding Variables x and y in Python\nDESCRIPTION: This code snippet adds the values of variables x and y, and assigns the result to the variable z. The cell is named 'result' in the metadata.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_server/export/snapshots/notebook_topological.ipynb.txt#2025-04-19_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nz = x + y\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Marimo Examples with uv\nDESCRIPTION: Instructions for installing uv and using it to open marimo example notebooks in a sandboxed environment. This method automatically installs dependencies.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/examples/layouts/README.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. [Install `uv`](https://github.com/astral-sh/uv/?tab=readme-ov-file#installation)\n2. Open an example with `uvx marimo edit --sandbox <notebook-url>`\n```\n\n----------------------------------------\n\nTITLE: Importing Marimo Library in Python\nDESCRIPTION: This snippet imports the Marimo library, which is essential for creating interactive notebooks and UI elements.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/snapshots/export_markdown_with_errors.txt#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport marimo as mo\n```\n\n----------------------------------------\n\nTITLE: Embedding a Dynamic Markdown File in Marimo\nDESCRIPTION: Directive to embed an external Python file that demonstrates dynamic markdown functionality. The directive specifies display size, edit mode, and the file path to the example.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/examples/markdown/dynamic_markdown.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n/// marimo-embed-file\n    size: xlarge\n    mode: edit\n    filepath: examples/markdown/dynamic_markdown.py\n///\n```\n\n----------------------------------------\n\nTITLE: Installing Pre-commit for Validation Checks\nDESCRIPTION: Command to install the pre-commit tool for running validation checks on code changes.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/CONTRIBUTING.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nuv tool install pre-commit\n```\n\n----------------------------------------\n\nTITLE: Importing Variables in Setup Cell - Python\nDESCRIPTION: Alternative approach showing how to import required variables from external modules in a setup cell.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/understanding_errors/setup.md#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom myimages import image\nimage\n```\n\n----------------------------------------\n\nTITLE: Basic Arithmetic Operation\nDESCRIPTION: A disabled cell containing a simple addition operation.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/snapshots/unsafe-doc-old.py.txt#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n1 + 1\n```\n\n----------------------------------------\n\nTITLE: Updating OpenAPI Schema in Marimo\nDESCRIPTION: This command generates a new OpenAPI schema and saves it to the specified file. It's used after modifying the schema in the commands.py file.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/development_docs/openapi.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmarimo development openapi > openapi/api.yaml\n```\n\n----------------------------------------\n\nTITLE: Running Marimo Examples Without UV\nDESCRIPTION: Alternative method for running Marimo example notebooks without using UV. This approach requires manual installation of Marimo and its dependencies.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/examples/ai/README.md#2025-04-19_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nYou can also open notebooks without `uv`, in which case you'll need to\nmanually [install marimo](https://docs.marimo.io/getting_started/index.html#installation)\nfirst. Then run `marimo edit <notebook-url>`; however, you'll also need to\ninstall the requirements yourself.\n```\n\n----------------------------------------\n\nTITLE: Referencing Package Mapping in marimo Codebase\nDESCRIPTION: A link to the GitHub repository file where module name to PyPI package name mappings are defined. This is used for package installation heuristics in marimo.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/editor_features/package_management.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[directly to the codebase](https://github.com/marimo-team/marimo/blob/main/marimo/_runtime/packages/module_name_to_pypi_name.py)\n```\n\n----------------------------------------\n\nTITLE: Parsing Marimo Cell Execution Results in JSON\nDESCRIPTION: This JSON structure represents the output of multiple cells in a Marimo project. It includes information about the execution status, console output, and any messages related to cell execution dependencies.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_server/export/snapshots/run_until_completion_with_stop.txt#2025-04-19_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n[\n  {\n    \"output\": \"\",\n    \"console\": [],\n    \"status\": \"idle\"\n  },\n  {\n    \"output\": \"\",\n    \"console\": [],\n    \"status\": \"idle\"\n  },\n  {\n    \"output\": [\n      {\n        \"msg\": \"This cell wasn't run because an ancestor was stopped with `mo.stop`: \",\n        \"raising_cell\": \"MJUe\",\n        \"type\": \"ancestor-stopped\"\n      }\n    ],\n    \"console\": [],\n    \"status\": \"idle\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Including Source Code in Marimo Deployment\nDESCRIPTION: Command to run a marimo application while including the source code, making it visible in the deployed application.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/deploying/index.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmarimo run app.py --include-code\n```\n\n----------------------------------------\n\nTITLE: Initializing Marimo Static Configuration\nDESCRIPTION: Script that initializes global Marimo configuration including notebook state, version info, and asset URLs. Contains encoded cell data and outputs.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_server/templates/snapshots/export1.txt#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.__MARIMO_STATIC__ = {};\n    window.__MARIMO_STATIC__.version = \"0.0.0\";\n    window.__MARIMO_STATIC__.notebookState = {\"cellIds\": [\"cell1\", \"cell2\"], \"cellNames\": [\"Q2VsbCUyMDE=\", \"Q2VsbCUyMDI=\"], \"cellCodes\": [\"cHJpbnQoJ0hlbGxvJTJDJTIwQ2VsbCUyMDEnKQ==\", \"cHJpbnQoJ0hlbGxvJTJDJTIwQ2VsbCUyMDInKQ==\"], \"cellConfigs\": [\"JTdCJTIyY29sdW1uJTIyJTNBJTIwbnVsbCUyQyUyMCUyMmRpc2FibGVkJTIyJTNBJTIwZmFsc2UlMkMlMjAlMjJoaWRlX2NvZGUlMjIlM0ElMjBmYWxzZSU3RA==\", \"JTdCJTIyY29sdW1uJTIyJTNBJTIwbnVsbCUyQyUyMCUyMmRpc2FibGVkJTIyJTNBJTIwZmFsc2UlMkMlMjAlMjJoaWRlX2NvZGUlMjIlM0ElMjBmYWxzZSU3RA==\"], \"cellOutputs\": {\"cell1\": \"JTdCJTIyY2hhbm5lbCUyMiUzQSUyMCUyMm91dHB1dCUyMiUyQyUyMCUyMm1pbWV0eXBlJTIyJTNBJTIwJTIydGV4dCUyRnBsYWluJTIyJTJDJTIwJTIyZGF0YSUyMiUzQSUyMCUyMkhlbGxvJTJDJTIwQ2VsbCUyMDElMjIlMkMlMjAlMjJ0aW1lc3RhbXAlMjIlM0ElMjAwJTdE\"}, \"cellConsoleOutputs\": {\"cell1\": [\"JTdCJTIyY2hhbm5lbCUyMiUzQSUyMCUyMnN0ZG91dCUyMiUyQyUyMCUyMm1pbWV0eXBlJTIyJTNBJTIwJTIydGV4dCUyRnBsYWluJTIyJTJDJTIwJTIyZGF0YSUyMiUzQSUyMCUyMkhlbGxvJTJDJTIwQ2VsbCUyMDElMjIlMkMlMjAlMjJ0aW1lc3RhbXAlMjIlM0ElMjAwJTdE\", \"JTdCJTIyY2hhbm5lbCUyMiUzQSUyMCUyMnN0ZGVyciUyMiUyQyUyMCUyMm1pbWV0eXBlJTIyJTNBJTIwJTIydGV4dCUyRnBsYWluJTIyJTJDJTIwJTIyZGF0YSUyMiUzQSUyMCUyMkVycm9yJTIwaW4lMjBDZWxsJTIwMSUyMiUyQyUyMCUyMnRpbWVzdGFtcCUyMiUzQSUyMDAlN0Q=\"]}};\n    window.__MARIMO_STATIC__.assetUrl = \"https://cdn.jsdelivr.net/npm/@marimo-team/frontend@0.0.0/dist\";\n    window.__MARIMO_STATIC__.files = {\"file1\": \"File 1 content\", \"file2\": \"File 2 content\"};\n```\n\n----------------------------------------\n\nTITLE: Rendering Basic Markdown with Marimo in Python\nDESCRIPTION: This snippet initializes a control dependency variable and renders a basic markdown string using Marimo's md function.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/snapshots/ipynb.txt#2025-04-19_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\ncontrol_dep = None\nmo.md(\"markdown\")\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Marimo Examples with UV\nDESCRIPTION: Instructions for installing 'uv' and using it to open Marimo example notebooks in an isolated sandbox environment with automatic dependency installation.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/examples/cloud/README.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. [Install `uv`](https://github.com/astral-sh/uv/?tab=readme-ov-file#installation)\n2. Open an example with `uvx marimo edit --sandbox <notebook-url>`\n```\n\n----------------------------------------\n\nTITLE: Creating or editing marimo notebooks\nDESCRIPTION: Command to create or edit marimo notebooks using the CLI.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/index.md#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmarimo edit\n```\n\n----------------------------------------\n\nTITLE: Importing Marimo State Module\nDESCRIPTION: This code snippet demonstrates how to import the state module from Marimo. It's used to access reactive state functionality, which is an advanced feature for complex state management scenarios.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/api/state.md#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nmarimo.state\n```\n\n----------------------------------------\n\nTITLE: Using Local Variables with Underscore Prefix in Python Loops\nDESCRIPTION: Demonstrates how to use underscore-prefixed variables (_i) that are local to a cell, allowing redefinition across multiple cells in marimo notebooks.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/understanding_errors/multiple_definitions.md#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfor _i in range(10):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Testing Nginx Configuration\nDESCRIPTION: This bash command tests the Nginx configuration for syntax errors before applying changes.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/deploying/deploying_nginx.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnginx -t\n```\n\n----------------------------------------\n\nTITLE: Importing Marimo Library\nDESCRIPTION: Basic import of the Marimo library for interactive Python notebooks\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/snapshots/dataflow.md.txt#2025-04-19_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport marimo as mo\n```\n\n----------------------------------------\n\nTITLE: Disabled Print Statement\nDESCRIPTION: Print statement that is disabled via Marimo configuration\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_server/export/snapshots/notebook_with_outputs.ipynb.txt#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nprint(\"disabled\")\n```\n\n----------------------------------------\n\nTITLE: Installing marimo with recommended extensions\nDESCRIPTION: Installation command with additional dependencies that enable SQL cells, AI completion, and other advanced features.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/README.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip install marimo[recommended]\n```\n\n----------------------------------------\n\nTITLE: Dependency Check Implementation\nDESCRIPTION: Python code to check for required dependencies (DuckDB, Polars, Pandas) installation status\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/snapshots/sql.md.txt#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nhas_duckdb_installed = False\ntry:\n    import duckdb\n    has_duckdb_installed = True\nexcept ImportError:\n    pass\n\nhas_polars_installed = False\ntry:\n    import polars\n    has_polars_installed = True\nexcept ImportError:\n    pass\n\nhas_pandas_installed = False\ntry:\n    import pandas\n    has_pandas_installed = True\nexcept ImportError:\n    pass\n```\n\n----------------------------------------\n\nTITLE: Simple Python Expression in Marimo\nDESCRIPTION: A basic Python expression that adds two numbers. This serves as a simple example of executable Python code within a Marimo notebook.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/snapshots/unsafe-app.md.txt#2025-04-19_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n1 + 1\n```\n\n----------------------------------------\n\nTITLE: Variable Uniqueness Example\nDESCRIPTION: Demonstrates Marimo's requirement for unique global variable names.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/snapshots/dataflow.md.txt#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nplanet = \"Mars\"\nplanet\n```\n\nLANGUAGE: python\nCODE:\n```\nplanet = \"Earth\"\nplanet\n```\n\n----------------------------------------\n\nTITLE: Exporting Marimo Notebook as Readonly App (Bash)\nDESCRIPTION: Command to export a Marimo notebook as a readonly WebAssembly-powered HTML app. This creates a self-contained file that can be run in a web browser.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/publishing/github_pages.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmarimo export html-wasm notebook.py -o output_dir --mode run\n```\n\n----------------------------------------\n\nTITLE: Running Marimo App in Python\nDESCRIPTION: This snippet checks if the script is being run as the main program and executes the Marimo app if true. It's the entry point for running the application.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/snapshots/converted_arithmetic.py.txt#2025-04-19_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nif __name__ == \"__main__\":\n    app.run()\n```\n\n----------------------------------------\n\nTITLE: Initializing Marimo Version\nDESCRIPTION: Sets the generated version number for the Marimo project\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/snapshots/script_with_errors.txt#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n__generated_with = \"0.0.0\"\n```\n\n----------------------------------------\n\nTITLE: Running Marimo Examples Without UV\nDESCRIPTION: Command for running marimo example notebooks without uv. This method requires manual installation of marimo and its dependencies.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/examples/markdown/README.md#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmarimo edit <notebook-url>\n```\n\n----------------------------------------\n\nTITLE: Marimo Slider Component\nDESCRIPTION: Creates an interactive slider UI component with range 0-10\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_server/export/snapshots/notebook_with_outputs.ipynb.txt#2025-04-19_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nmo.ui.slider(start=0, stop=10)\n```\n\n----------------------------------------\n\nTITLE: Converting Jupyter notebooks to marimo\nDESCRIPTION: Command to automatically convert a Jupyter notebook to a marimo notebook using the CLI.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/index.md#2025-04-19_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nmarimo convert your_notebook.ipynb > your_notebook.py\n```\n\n----------------------------------------\n\nTITLE: Static File Reference in Markdown\nDESCRIPTION: Demonstrates how to reference static files from the public folder in markdown content\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/outputs.md#2025-04-19_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nmo.md(\n    '''\n    <img src=\"public/image.png\" width=\"100\" />\n\n    or\n\n    ![alt text](public/image.png)\n    '''\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Marimo Watcher Behavior in TOML\nDESCRIPTION: TOML configuration to set the watcher behavior to automatically run affected cells when saving changes.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/editor_features/watching.md#2025-04-19_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[tool.marimo.runtime]\nwatcher_on_save = \"autorun\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Local Package Development with Editable Installs (Python)\nDESCRIPTION: Example of how to configure a local package for development using editable installs in the script metadata. This allows testing changes to a local package without reinstalling it.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/package_reproducibility.md#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# /// script\n# requires-python = \">=3.11\"\n# dependencies = [\n#     \"my-package\",\n# ]\n#\n# [tool.uv.sources]\n# my-package = { path = \"../\", editable = true }\n# ///\n```\n\n----------------------------------------\n\nTITLE: Installing marimo with conda\nDESCRIPTION: Command to install marimo using conda package manager and start the introductory tutorial.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/index.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nconda install -c conda-forge marimo && marimo tutorial intro\n```\n\n----------------------------------------\n\nTITLE: Markdown File Embedding Configuration\nDESCRIPTION: Configuration block for embedding a spinner example Python file, specifying display size and edit mode parameters.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/examples/outputs/spinner.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n/// marimo-embed-file\n    size: xlarge\n    mode: edit\n    filepath: examples/outputs/spinner.py\n///\n```\n\n----------------------------------------\n\nTITLE: Cross-Cell Injection in Marimo\nDESCRIPTION: Demonstrates the start of a cross-cell injection using Marimo's markdown function. This technique allows for content to span multiple code cells in the notebook.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/snapshots/unsafe-app.md.txt#2025-04-19_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nmo.md(\"\"\"\n    Cross cell injection\n    ```python\n\"\"\")\n```\n\n----------------------------------------\n\nTITLE: Inspecting Refs and Defs in Marimo\nDESCRIPTION: Shows how to use mo.refs() and mo.defs() to inspect cell dependencies using an accordion component.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/snapshots/dataflow.md.txt#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nmo.accordion(\n    {\n        \"Tip: inspecting refs and defs\": f\"\"\"\n        Use `mo.refs()` and `mo.defs()` to inspect the refs and defs of any\n        given cell. This can help with debugging complex notebooks.\n\n        For example, here are the refs and defs of this cell:\n\n        {mo.as_html({\"refs\": mo.refs(), \"defs\": mo.defs()})}\n        \"\"\"\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Rendering Marimo Island Component with Markdown in HTML\nDESCRIPTION: This snippet defines a Marimo island component structure. It includes a visible markdown output and hidden cell code for generating the content. The component is reactive and associated with a specific app and cell ID.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_islands/snapshots/island.txt#2025-04-19_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<marimo-island\n    data-app-id=\"main\"\n    data-cell-id=\"MJUe\"\n    data-reactive=\"true\"\n>\n    <marimo-cell-output>\n    <span class=\"markdown prose dark:prose-invert\"><span class=\"paragraph\">Hello, islands!</span></span>\n    </marimo-cell-output>\n    <marimo-cell-code hidden>mo.md('Hello%2C%20islands!')</marimo-cell-code>\n</marimo-island>\n```\n\n----------------------------------------\n\nTITLE: Assigning Value to Variable y in Python\nDESCRIPTION: This code snippet assigns the integer value 1 to the variable y.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_server/export/snapshots/notebook_topological.ipynb.txt#2025-04-19_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\ny = 1\n```\n\n----------------------------------------\n\nTITLE: Printing Hello World in Python with Marimo\nDESCRIPTION: A straightforward Python print statement that outputs 'Hello World'. This demonstrates a basic use of Python within a Marimo notebook context.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/snapshots/unsafe-app.md.txt#2025-04-19_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# Actual print\nprint(\"Hello World\")\n```\n\n----------------------------------------\n\nTITLE: Describing Marimo Configuration Options\nDESCRIPTION: Command to display available configuration options in Marimo.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/configuration/index.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmarimo config describe\n```\n\n----------------------------------------\n\nTITLE: Button Implementation - Streamlit vs Marimo\nDESCRIPTION: Shows different approaches to implementing and handling button clicks.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/coming_from/streamlit.md#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nif st.button(\"Click me\"):\n    st.write(\"Button clicked!\")\n```\n\nLANGUAGE: python\nCODE:\n```\nbutton = mo.ui.run_button(\"Click me\")\n```\n\nLANGUAGE: python\nCODE:\n```\n# In another cell\nif button.value:\n    mo.output.replace(mo.md(\"Button clicked!\"))\n```\n\nLANGUAGE: python\nCODE:\n```\nmo.md(\"Button clicked!\") if button.value else None\n```\n\n----------------------------------------\n\nTITLE: Markdown Details Extension\nDESCRIPTION: Example of using the details extension in markdown for expandable content\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/outputs.md#2025-04-19_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n/// details | Heads up\n\nHere's some additional context.\n///\n```\n\n----------------------------------------\n\nTITLE: Running Marimo from Main Branch using uv\nDESCRIPTION: This bash command uses uv to install and run the main branch of Marimo directly from GitHub. It also requires uv to be installed and may take some time to install frontend dependencies and build the frontend.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/CONTRIBUTING.md#2025-04-19_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\nMARIMO_BUILD_FRONTEND=true \\\nuvx --with git+https://github.com/marimo-team/marimo.git \\\nmarimo edit\n```\n\n----------------------------------------\n\nTITLE: Displaying Markdown Table of Media Functions in Marimo\nDESCRIPTION: This markdown snippet presents a table listing various media embedding functions in Marimo, including their names and brief descriptions. It also provides links to more detailed documentation for each function.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/api/media/index.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Function | Description |\n|----------|-------------|\n| [`marimo.image`](image.md) | Display images |\n| [`marimo.audio`](audio.md) | Play audio files |\n| [`marimo.video`](video.md) | Play videos |\n| [`marimo.pdf`](pdf.md) | Display PDFs |\n| [`marimo.download`](download.md) | Create download links |\n| [`marimo.plain_text`](plain_text.md) | Display plain text |\n```\n\n----------------------------------------\n\nTITLE: Displaying Railway Deployment Button in Markdown\nDESCRIPTION: This snippet shows how to embed a Railway deployment button in a Markdown file. The button links to a pre-configured template for deploying marimo on Railway.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/deploying/deploying_railway.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![Deploy on Railway](https://railway.app/button.svg)](https://railway.app/template/iX6puU?referralCode=WdmHYp)\n```\n\n----------------------------------------\n\nTITLE: Converting Jupyter notebook to marimo Python file\nDESCRIPTION: Command to convert a Jupyter notebook (.ipynb) to a marimo Python file using marimo's convert functionality.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/coming_from/jupytext.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmarimo convert notebook.ipynb > notebook.py\n```\n\n----------------------------------------\n\nTITLE: Embedding a Marimo File with Markdown Examples\nDESCRIPTION: A directive to embed a Python file that demonstrates basic markdown usage in marimo. The file is displayed in edit mode with xxlarge size setting.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/examples/outputs/basic_markdown.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n/// marimo-embed-file\n    size: xxlarge\n    mode: edit\n    filepath: examples/outputs/basic_markdown.py\n///\n```\n\n----------------------------------------\n\nTITLE: Rendering Potentially Malicious Markdown in Marimo\nDESCRIPTION: Creates a markdown cell with potentially problematic content, including unclosed quotes and HTML comments. This demonstrates how Marimo handles edge cases in markdown rendering.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/snapshots/unsafe-doc.py.txt#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@app.cell(hide_code=True)\ndef _(mo):\n    mo.md(\n        r\"\"\"\n        What happens if I just leave a \\\"\\\"\\\"\n        \" ' ! @ # $ % ^ & * ( ) + = - _ [ ] { } | \\ /\n\n        # Notebook\n        <!--\n        \\\n        \"\"\"\n    )\n    return\n```\n\n----------------------------------------\n\nTITLE: Adding Print Statement Cell in Marimo App\nDESCRIPTION: This cell contains a simple print statement that outputs 'Hello, World!' when the app is run.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/snapshots/frontmatter-test.py.txt#2025-04-19_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n@app.cell\ndef _():\n    print(\"Hello, World!\")\n    return\n```\n\n----------------------------------------\n\nTITLE: Importing Marimo Package in Python\nDESCRIPTION: Import the marimo package, which is required for all Marimo notebook functionality.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/recipes.md#2025-04-19_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nimport marimo as mo\n```\n\n----------------------------------------\n\nTITLE: Defining Python Function with Two Parameters\nDESCRIPTION: This code snippet defines a Python function named 'my_func' that takes two parameters: arg1 and arg2. The function's body is not provided in the snippet.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_runtime/snapshots/docstrings_function.txt#2025-04-19_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\ndef my_func(arg1, arg2)\n```\n\n----------------------------------------\n\nTITLE: Markdown Section Header - Conditional Outputs\nDESCRIPTION: Section header defining the topic of conditional output handling in Marimo\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/examples/outputs/conditional_output.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Conditionally showing outputs\n```\n\n----------------------------------------\n\nTITLE: Running FastHTML and Marimo Integration\nDESCRIPTION: Instructions for setting up and running the FastHTML and Marimo integration. It involves installing the 'uv' package and using it to run the main Python script.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/examples/frameworks/fasthtml/README.md#2025-04-19_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nuv run --no-project main.py\n```\n\n----------------------------------------\n\nTITLE: Running Flask and Marimo Integration with UV\nDESCRIPTION: Instructions for running the Flask application that serves Marimo apps. It uses the 'uv' package manager to execute the main Python script.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/examples/frameworks/flask/README.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nuv run --no-project main.py\n```\n\n----------------------------------------\n\nTITLE: Listing available marimo tutorials\nDESCRIPTION: Command to view all available tutorials included with marimo installation.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/README.md#2025-04-19_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nmarimo tutorial --help\n```\n\n----------------------------------------\n\nTITLE: Rendering Non-Markdown Content with F-string in Marimo\nDESCRIPTION: Uses Marimo's markdown function with an f-string to render a code block that includes a Python expression. This demonstrates how to embed dynamic content within code blocks.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/snapshots/unsafe-app.md.txt#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nmo.md(f\"\"\"\n    Not markdown\n    ```python {{.marimo}}\n    print(\"1 + 1 = {1 + 1}\")\n    ```\n\"\"\")\n```\n\n----------------------------------------\n\nTITLE: Importing Marimo Library\nDESCRIPTION: Basic import of the marimo library for notebook functionality\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/outputs.md#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport marimo as mo\n```\n\n----------------------------------------\n\nTITLE: React Tab Component Structure with Form Elements\nDESCRIPTION: A React component implementation showing a tabbed interface with two sections - Config and Variables. Each tab contains form elements including labels, inputs and buttons with styling classes.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/frontend/src/stories/tabs.mdx#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Tabs defaultValue=\"config\" className=\"w-[400px]\">\n  <TabsList>\n    <TabsTrigger value=\"config\">Config</TabsTrigger>\n    <TabsTrigger value=\"variables\">Variables</TabsTrigger>\n  </TabsList>\n\n  <TabsContent value=\"config\">\n    <p className=\"text-sm text-muted-foreground\">\n      Change your account settings here.\n    </p>\n\n    <div className=\"grid gap-2 py-4\">\n      <div className=\"space-y-1\">\n        <Label htmlFor=\"name\">Auto Save Delay</Label>\n\n        <Input id=\"name\" defaultValue=\"1000\" />\n      </div>\n\n      <div className=\"space-y-1\">\n        <Label htmlFor=\"username\">Default Filename</Label>\n\n        <Input id=\"username\" defaultValue=\"\" />\n      </div>\n    </div>\n\n    <div className=\"flex\">\n      <Button>Save changes</Button>\n    </div>\n\n  </TabsContent>\n\n  <TabsContent value=\"variables\">\n    <p className=\"text-sm text-muted-foreground\">Change your variables here.</p>\n\n    <div className=\"grid gap-2 py-4\">\n      <div className=\"space-y-1\">\n        <Label htmlFor=\"env1\">ENV 1</Label>\n\n        <Input id=\"env1\" />\n      </div>\n    </div>\n\n    <div className=\"flex\">\n      <Button>Save</Button>\n    </div>\n\n  </TabsContent>\n</Tabs>\n```\n\n----------------------------------------\n\nTITLE: Running Dagger Commands for marimo Build and Test\nDESCRIPTION: Examples of common Dagger CLI commands for managing build and test tasks in the marimo project. Shows how to list available functions, run make tasks in dev environment, execute frontend/backend tests, and run tests on remote pull requests.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/dagger/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndagger functions                           # see what functions are available in the module\ndagger call make <any make task>           # run make task in a dev environment\ndagger call frontend test                  # run frontend tests\ndagger call backend test                   # run backend tests\n# run frontend tests on a remote pull request\ndagger call --src https://github.com/marimo-team/marimo\\#pull/2542/head frontend test\n```\n\n----------------------------------------\n\nTITLE: Converting Python file to Jupyter notebook with Jupytext\nDESCRIPTION: Command to convert a Python file to a Jupyter notebook (.ipynb) using Jupytext.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/coming_from/jupytext.md#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\njupytext --to notebook.ipynb notebook.py\n```\n\n----------------------------------------\n\nTITLE: Interactive Video Table Layout in HTML\nDESCRIPTION: HTML table structure that displays interactive tutorial videos and links for key Marimo features including tutorials, inputs, plots, and layouts. Each cell contains autoplay videos with multiple format sources and corresponding navigation links.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/index.md#2025-04-19_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<table border=\"0\">\n  <tr>\n    <td>\n      <a target=\"_blank\" href=\"getting_started/key_concepts\">\n        <video autoplay muted loop playsinline style=\"max-height: 150px; width: auto; display: block\">\n          <source src=\"/_static/reactive.mp4\" type=\"video/mp4\">\n          <source src=\"/_static/reactive.webm\" type=\"video/webm\">\n        </video>\n      </a>\n    </td>\n    <td>\n      <a target=\"_blank\" href=\"api/inputs/\">\n        <video autoplay muted loop playsinline style=\"max-height: 150px; width: auto; display: block\">\n          <source src=\"/_static/readme-ui.mp4\" type=\"video/mp4\">\n          <source src=\"/_static/readme-ui.webm\" type=\"video/webm\">\n        </video>\n      </a>\n    </td>\n    <td>\n      <a target=\"_blank\" href=\"guides/working_with_data/plotting\">\n        <video autoplay muted loop playsinline style=\"max-height: 150px; width: auto; display: block\">\n          <source src=\"/_static/docs-intro.mp4\" type=\"video/mp4\">\n          <source src=\"/_static/docs-intro.webm\" type=\"video/webm\">\n        </video>\n      </a>\n    </td>\n    <td>\n      <a target=\"_blank\" href=\"api/layouts/\">\n        <video autoplay muted loop playsinline style=\"max-height: 150px; width: auto; display: block\">\n          <source src=\"/_static/outputs.mp4\" type=\"video/mp4\">\n          <source src=\"/_static/outputs.webm\" type=\"video/webm\">\n        </video>\n      </a>\n    </td>\n  </tr>\n  <tr>\n    <td>\n      <a target=\"_blank\" href=\"getting_started/key_concepts\"> Tutorial </a>\n    </td>\n    <td>\n      <a target=\"_blank\" href=\"api/inputs/\"> Inputs </a>\n    </td>\n    <td>\n      <a target=\"_blank\" href=\"guides/working_with_data/plotting\"> Plots </a>\n    </td>\n    <td>\n      <a target=\"_blank\" href=\"api/layouts/\"> Layout </a>\n    </td>\n  </tr>\n  <tr>\n    <td>\n      <a target=\"_blank\" href=\"https://marimo.app/l/c7h6pz\">\n        <img src=\"https://marimo.io/shield.svg\"/>\n      </a>\n    </td>\n    <td>\n      <a target=\"_blank\" href=\"https://marimo.app/l/0ue871\">\n        <img src=\"https://marimo.io/shield.svg\"/>\n      </a>\n    </td>\n    <td>\n      <a target=\"_blank\" href=\"https://marimo.app/l/lxp1jk\">\n        <img src=\"https://marimo.io/shield.svg\"/>\n      </a>\n    </td>\n    <td>\n      <a target=\"_blank\" href=\"https://marimo.app/l/14ovyr\">\n        <img src=\"https://marimo.io/shield.svg\"/>\n      </a>\n    </td>\n  </tr>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Importing Marimo Library\nDESCRIPTION: Imports the Marimo library for UI components and functionality\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/snapshots/script_with_errors.txt#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport marimo as mo\n```\n\n----------------------------------------\n\nTITLE: Running Marimo App in Python\nDESCRIPTION: This snippet checks if the script is being run as the main program and calls the app.run() method to start the Marimo app.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/snapshots/frontmatter-test.py.txt#2025-04-19_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nif __name__ == \"__main__\":\n    app.run()\n```\n\n----------------------------------------\n\nTITLE: Creating Bar Chart with Backslash Column Name\nDESCRIPTION: Creates an Altair bar chart using a column name containing a backslash. Charts the count of values for 'col\\backslash' on the y-axis.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_data/snapshots/charts_bad_characters.txt#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n_chart = (\n    alt.Chart(df)\n    .mark_bar()\n    .encode(\n        y=alt.Y(\"col\\backslash\", type=\"nominal\"),\n        x=alt.X(\"count()\", type=\"quantitative\"),\n    )\n    .properties(width=\"container\")\n)\n_chart\n```\n\n----------------------------------------\n\nTITLE: Invalid Return Statement in Python\nDESCRIPTION: An incomplete return statement marked as unparsable in Marimo. This demonstrates invalid syntax handling.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/snapshots/broken.txt#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nreturn\n```\n\n----------------------------------------\n\nTITLE: Reloading Nginx to Apply Configuration Changes\nDESCRIPTION: This bash command reloads Nginx to apply the new configuration changes without stopping the server.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/deploying/deploying_nginx.md#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnginx -s reload\n```\n\n----------------------------------------\n\nTITLE: Opening Marimo Example Notebook without UV\nDESCRIPTION: Alternative command to open a Marimo example notebook without using UV. This method requires manual installation of dependencies.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/examples/misc/README.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmarimo edit <notebook.py>\n```\n\n----------------------------------------\n\nTITLE: F-String Code Block Integration\nDESCRIPTION: Shows how to use f-strings with code blocks in markdown cells.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/snapshots/unsafe-app.py.txt#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nmo.md(f\"\"\"\n    with f-string too!\n    ```python {{.marimo}}\n    print(\"Hello World\")\n    ```\n\"\"\")\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Nested Fence in Marimo\nDESCRIPTION: Shows how to represent nested code fences within a Python string. This is useful for scenarios where you need to include code block syntax within your output.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/snapshots/unsafe-app.md.txt#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"\n```\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Importing Data Analysis Libraries in Python\nDESCRIPTION: This code snippet imports the pandas and numpy libraries, which are commonly used for data manipulation and numerical operations in Python.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_server/ai/snapshots/system_prompts.txt#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\nimport numpy as np\n```\n\n----------------------------------------\n\nTITLE: Implementing ContextMenu in React JSX\nDESCRIPTION: This snippet demonstrates how to structure and use the ContextMenu component in a React application. It shows the proper nesting of ContextMenuTrigger and ContextMenuContent, along with multiple ContextMenuItem elements for different menu options.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/frontend/src/stories/context-menu.mdx#2025-04-19_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<ContextMenu>\n  <ContextMenuTrigger>Right click</ContextMenuTrigger>\n\n  <ContextMenuContent>\n    <ContextMenuItem>Profile</ContextMenuItem>\n    <ContextMenuItem>Billing</ContextMenuItem>\n    <ContextMenuItem>Team</ContextMenuItem>\n    <ContextMenuItem>Subscription</ContextMenuItem>\n  </ContextMenuContent>\n</ContextMenu>\n```\n\n----------------------------------------\n\nTITLE: Running Prompt Snapshot Tests in Marimo\nDESCRIPTION: Command to execute snapshot tests for verifying system prompts using Python 3.12. The tests are run through hatch and check that prompt templates have not changed from their stored versions.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/development_docs/prompts.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhatch run +py=3.12 test-optional:test tests/_server/ai/test_prompts.py\n```\n\n----------------------------------------\n\nTITLE: Converting py:percent notebook to marimo notebook (two-step process)\nDESCRIPTION: Commands to convert a Python file in py:percent format to a marimo notebook, using Jupytext and marimo in sequence.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/coming_from/jupytext.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\njupytext --to notebook.ipynb percent_notebook.py\nmarimo convert notebook.ipynb > marimo_notebook.py\n```\n\n----------------------------------------\n\nTITLE: Reassigning and Printing Variable in Python\nDESCRIPTION: This snippet shows how to reassign a new value to an existing variable 'x' and then print the updated value. It demonstrates variable value modification.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/ipynb_data/multiple_defs.ipynb.txt#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nx = 1\nx\n```\n\n----------------------------------------\n\nTITLE: Marimo Import\nDESCRIPTION: Imports the Marimo library for interactive notebook features\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_server/export/snapshots/notebook_with_outputs.ipynb.txt#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport marimo as mo\n\n```\n\n----------------------------------------\n\nTITLE: Importing Marimo Library in Cell\nDESCRIPTION: Defines a cell that imports the Marimo library as 'mo' and returns it as a tuple.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/snapshots/converted_markdown.py.txt#2025-04-19_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n@app.cell\ndef _():\n    import marimo as mo\n    return (mo,)\n```\n\n----------------------------------------\n\nTITLE: Opening Marimo Example Notebook with UV\nDESCRIPTION: Command to open a Marimo example notebook using UV package manager in a sandboxed environment. This ensures isolated dependency installation and execution.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/examples/misc/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nuvx marimo edit --sandbox <notebook.py>\n```\n\n----------------------------------------\n\nTITLE: Defining Jupyter Notebook Structure in JSON\nDESCRIPTION: This JSON object defines the basic structure of a Jupyter notebook. It includes an empty array for cells, an empty object for metadata, and specifies the notebook format version as 4 with a minor version of 5.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_server/export/snapshots/empty_notebook.ipynb.txt#2025-04-19_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n \"cells\": [],\n \"metadata\": {},\n \"nbformat\": 4,\n \"nbformat_minor\": 5\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Code Based on Run Button Click in Marimo\nDESCRIPTION: Execute code only if the run button has been clicked. In this example, it generates a random number between 0 and 1000.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/recipes.md#2025-04-19_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nmo.stop(not button.value, \"Click 'run' to generate a random number\")\n\nimport random\nrandom.randint(0, 1000)\n```\n\n----------------------------------------\n\nTITLE: Assigning and Printing Variable in Python\nDESCRIPTION: This snippet demonstrates assigning a value to a variable 'x' and then printing its value. It shows how to declare a variable and output its content.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/ipynb_data/multiple_defs.ipynb.txt#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nx = 0\nx\n```\n\n----------------------------------------\n\nTITLE: Setting GitHub Repository Environment Variable\nDESCRIPTION: Command to set the target GitHub repository as an environment variable for indexing.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/examples/third_party/sage/README.md#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nexport GITHUB_REPO=marimo-team/marimo\n```\n\n----------------------------------------\n\nTITLE: Export to IPython Notebook\nDESCRIPTION: Export a Marimo notebook to IPython notebook format with command-line arguments.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/scripts.md#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmarimo export ipynb notebook.py -o notebook.ipynb -- -arg value\n```\n\n----------------------------------------\n\nTITLE: Dynamic Code Block Expression\nDESCRIPTION: Demonstrates embedding Python expressions within code blocks using f-strings.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/snapshots/unsafe-app.py.txt#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nmo.md(f\"\"\"\n    Not markdown\n    ```python {{.marimo}}\n    print(\"1 + 1 = {1 + 1}\")\n    ```\n\"\"\")\n```\n\n----------------------------------------\n\nTITLE: Declaring OS Module in V\nDESCRIPTION: Simple module declaration statement that defines the operating system (os) module namespace.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_runtime/snapshots/docstrings_module.txt#2025-04-19_snippet_0\n\nLANGUAGE: v\nCODE:\n```\nmodule os\n```\n\n----------------------------------------\n\nTITLE: Implementing RadioGroup with Descriptive Labels in React\nDESCRIPTION: This snippet demonstrates how to create a RadioGroup component with three options labeled 'Default', 'Comfortable', and 'Compact'. It uses the RadioGroup, RadioGroupItem, and Label components from a UI library.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/frontend/src/stories/radio-group.mdx#2025-04-19_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n<RadioGroup defaultValue=\"comfortable\">\n  <div className=\"flex items-center space-x-3\">\n    <RadioGroupItem value=\"default\" id=\"r1\" />\n\n    <Label htmlFor=\"r1\">Default</Label>\n\n  </div>\n\n  <div className=\"flex items-center space-x-3\">\n    <RadioGroupItem value=\"comfortable\" id=\"r2\" />\n\n    <Label htmlFor=\"r2\">Comfortable</Label>\n\n  </div>\n\n  <div className=\"flex items-center space-x-3\">\n    <RadioGroupItem value=\"compact\" id=\"r3\" />\n\n    <Label htmlFor=\"r3\">Compact</Label>\n\n  </div>\n</RadioGroup>\n```\n\n----------------------------------------\n\nTITLE: Building Unminified Frontend for Development\nDESCRIPTION: Command to build the frontend in development mode with increased memory allocation and without minification for easier debugging.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/CONTRIBUTING.md#2025-04-19_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nNODE_OPTIONS=--max_old_space_size=8192 NODE_ENV=development make fe -B\n```\n\n----------------------------------------\n\nTITLE: Running Specific Python Tests with Hatch\nDESCRIPTION: Command to run specific Python tests using Hatch, targeting a particular directory.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/CONTRIBUTING.md#2025-04-19_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nhatch run test:test tests/_ast/\n```\n\n----------------------------------------\n\nTITLE: Assigning Value to New Variable in Python\nDESCRIPTION: This snippet introduces a new variable 'y' and assigns it an initial value of 0. It demonstrates variable declaration without immediate output.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/ipynb_data/multiple_defs.ipynb.txt#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ny = 0\n```\n\n----------------------------------------\n\nTITLE: Simple Print Statement in Python Cell\nDESCRIPTION: A basic Python code cell containing a print statement, configured with Marimo metadata and notebook formatting.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_server/export/snapshots/notebook_with_cells.ipynb.txt#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nprint(\"hello\")\n```\n\n----------------------------------------\n\nTITLE: Executing Hidden Python Code in Marimo\nDESCRIPTION: Demonstrates how to execute Python code in a hidden cell within the Marimo app.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/snapshots/unsafe-doc.py.txt#2025-04-19_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n@app.cell(hide_code=True)\ndef _():\n    1 + 1\n    return\n```\n\n----------------------------------------\n\nTITLE: Running Marimo Frontend with PyPi Backend using Pyodide\nDESCRIPTION: Commands to run the Marimo frontend with Pyodide against the latest version deployed on PyPi. This method uses the pnpm dev command with the PYODIDE flag enabled.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/development_docs/pyodide.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd frontend\nPYODIDE=true pnpm dev\n```\n\n----------------------------------------\n\nTITLE: Running Python Tests with Specific Python Version\nDESCRIPTION: Commands to run Python tests using a specific Python version (3.10 in this example) with Hatch.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/CONTRIBUTING.md#2025-04-19_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nhatch run +py=3.10 test:test tests/_ast/\n# or\nhatch run +py=3.10 test-optional:test tests/_ast/\n```\n\n----------------------------------------\n\nTITLE: Listing Python Package Dependencies with Versions\nDESCRIPTION: A requirements file specifying Python package dependencies and their exact versions. Notable packages include PyTorch, Transformers, HuggingFace tools, and various NVIDIA CUDA libraries, suggesting this is for a machine learning project.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/examples/third_party/unsloth/requirements.txt#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\naccelerate==0.34.2\naiohappyeyeballs==2.4.0\naiohttp==3.10.5\naiosignal==1.3.1\nanyio==4.4.0\nasync-timeout==4.0.3\nattrs==24.2.0\nbitsandbytes==0.43.3\ncertifi==2024.8.30\ncharset-normalizer==3.3.2\nclick==8.1.7\ndatasets==2.21.0\ndill==0.3.8\ndocstring_parser==0.16\ndocutils==0.21.2\nexceptiongroup==1.2.2\nfilelock==3.16.0\nfrozenlist==1.4.1\nfsspec==2024.6.1\nh11==0.14.0\nhf_transfer==0.1.8\nhuggingface-hub==0.24.6\nidna==3.8\nitsdangerous==2.2.0\njedi==0.19.1\nJinja2==3.1.4\nmarimo==0.8.13\nMarkdown==3.7\nmarkdown-it-py==3.0.0\nMarkupSafe==2.1.5\nmdurl==0.1.2\nmpmath==1.3.0\nmultidict==6.0.5\nmultiprocess==0.70.16\nnetworkx==3.3\nnumpy==2.1.1\nnvidia-cublas-cu12==12.1.3.1\nnvidia-cuda-cupti-cu12==12.1.105\nnvidia-cuda-nvrtc-cu12==12.1.105\nnvidia-cuda-runtime-cu12==12.1.105\nnvidia-cudnn-cu12==9.1.0.70\nnvidia-cufft-cu12==11.0.2.54\nnvidia-curand-cu12==10.3.2.106\nnvidia-cusolver-cu12==11.4.5.107\nnvidia-cusparse-cu12==12.1.0.106\nnvidia-nccl-cu12==2.20.5\nnvidia-nvjitlink-cu12==12.6.68\nnvidia-nvtx-cu12==12.1.105\npackaging==24.1\npandas==2.2.2\nparso==0.8.4\npeft==0.12.0\nprotobuf==3.20.3\npsutil==6.0.0\npyarrow==17.0.0\nPygments==2.18.0\npymdown-extensions==10.9\npython-dateutil==2.9.0.post0\npytz==2024.1\nPyYAML==6.0.2\nregex==2024.7.24\nrequests==2.32.3\nrich==13.8.0\nruff==0.6.4\nsafetensors==0.4.5\nsentencepiece==0.2.0\nshtab==1.7.1\nsix==1.16.0\nsniffio==1.3.1\nstarlette==0.38.5\nsympy==1.13.2\ntokenizers==0.19.1\ntomlkit==0.13.2\ntorch==2.4.1\ntqdm==4.66.5\ntransformers==4.44.2\ntriton==3.0.0\ntrl==0.10.1\ntyping_extensions==4.12.2\ntyro==0.8.10\ntzdata==2024.1\nunsloth==2024.8\nurllib3==2.2.2\nuvicorn==0.30.6\nwebsockets==12.0\nxxhash==3.5.0\nyarl==1.11.0\n```\n\n----------------------------------------\n\nTITLE: Basic Python Print Example\nDESCRIPTION: A simple Python code example that prints 'Hello, world!' and two variables foo and bar.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_utils/snapshots/docstring_summary.txt#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nprint('Hello, world!')\nprint(foo, bar)\n```\n\n----------------------------------------\n\nTITLE: Converting Jupyter to Marimo\nDESCRIPTION: Command to convert a Jupyter notebook to marimo format.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/getting_started/quickstart.md#2025-04-19_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmarimo convert your_notebook.ipynb -o your_notebook.py\n```\n\n----------------------------------------\n\nTITLE: Creating a Slider UI Element with Marimo in Python\nDESCRIPTION: This code creates a slider UI element using Marimo, with a range from 0 to 10. The slider can be used for interactive input in the notebook.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/snapshots/export_markdown_with_errors.txt#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nslider = mo.ui.slider(0, 10)\n```\n\n----------------------------------------\n\nTITLE: Creating Markdown Cell in Marimo App\nDESCRIPTION: Defines a cell that renders markdown content, including various string literals. The cell's code is hidden from view.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/snapshots/converted_markdown.py.txt#2025-04-19_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n@app.cell(hide_code=True)\ndef _(mo):\n    mo.md(\n        r\"\"\"\n        # Hello, markdown\n\n        \"\"\"\n        'hello\"\n        '''\n        \"\"\"\n        \"\"\"\n    )\n    return\n```\n\n----------------------------------------\n\nTITLE: Markdown Cell with Embedded Code Block\nDESCRIPTION: A markdown cell containing a Python execution block using mo.md\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/snapshots/unsafe-doc.md.txt#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nmo.md(\"\"\"\n  This is a markdown cell with an execution block in it\n  ```python {.marimo}\n  # To ambiguous to convert\n  ```\n  \"\"\")\n```\n\n----------------------------------------\n\nTITLE: Importing Label Component in React\nDESCRIPTION: This snippet shows how to import the Label component from the UI library and Meta and Story from Storybook.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/frontend/src/stories/label.mdx#2025-04-19_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Meta, Story } from \"@storybook/blocks\";\n\nimport { Label } from \"@/components/ui/label\";\n```\n\n----------------------------------------\n\nTITLE: Building Marimo from Source (Using Hatch)\nDESCRIPTION: Commands to build Marimo using Hatch for the Python environment, creating a shell with an editable install of Marimo.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/CONTRIBUTING.md#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmake fe\nhatch shell\n```\n\n----------------------------------------\n\nTITLE: Extended For Loop in Python\nDESCRIPTION: This snippet shows an extended version of the previous for loop, now iterating over a range of numbers from 0 to 3 and printing each number. It demonstrates how changing the range affects the loop's output.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/ipynb_data/multiple_defs.ipynb.txt#2025-04-19_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfor i in range(4):\n    print(i)\n```\n\n----------------------------------------\n\nTITLE: Reassigning Value to Existing Variable in Python\nDESCRIPTION: This snippet reassigns the value of the variable 'y' to 1. It shows how to update an existing variable's value without outputting the result.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/ipynb_data/multiple_defs.ipynb.txt#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ny = 1\n```\n\n----------------------------------------\n\nTITLE: Disabled Python Addition\nDESCRIPTION: A disabled Python code block performing basic addition\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/snapshots/unsafe-doc.md.txt#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n1 + 1\n```\n\n----------------------------------------\n\nTITLE: Rendering Markdown with Nested Code Blocks in Marimo\nDESCRIPTION: Creates a markdown cell with nested code blocks and HTML comments, showcasing Marimo's ability to handle complex markdown structures.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/snapshots/unsafe-doc.py.txt#2025-04-19_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n@app.cell(hide_code=True)\ndef _(mo):\n    mo.md(\n        r\"\"\"\n        \\\"\\\"\\\"\n        ```\n\n        <!-- Improperly nested code block -->\n        ```python {.marimo}\n        ````python {.marimo}\n        print(\"Hello, World!\")\n        ````\n        ```\n\n        -->\n\n        <!-- from the notebook, should remain unchanged -->\n        \"\"\"\n    )\n    return\n```\n\n----------------------------------------\n\nTITLE: Testing Marimo Branch from GitHub using uv\nDESCRIPTION: This bash command uses uv to install and run a specific branch of Marimo directly from GitHub. It requires uv to be installed and may take some time to install frontend dependencies and build the frontend.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/CONTRIBUTING.md#2025-04-19_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\nMARIMO_BUILD_FRONTEND=true \\\nuvx --with git+https://github.com/marimo-team/marimo.git@BRANCH_NAME \\\nmarimo edit\n```\n\n----------------------------------------\n\nTITLE: Configuring Python Dependencies for Jupyter Notebook\nDESCRIPTION: This code snippet defines the Python version requirement and package dependencies for the notebook. It specifies Python 3.12 or higher and includes 'anywidget' and 'polars' as required packages.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/ipynb_data/juv.ipynb.txt#2025-04-19_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n# /// script\n# requires-python = \">=3.12\"\n# dependencies = [\n#     \"anywidget\",\n#     \"polars\",\n# ]\n# ///\n```\n\n----------------------------------------\n\nTITLE: Valid Variable Assignment in Python\nDESCRIPTION: A complete and valid Python statement assigning a numeric value to a variable.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/snapshots/broken.txt#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nvalid_statement = 1\n```\n\n----------------------------------------\n\nTITLE: Installing Sage CLI Tool\nDESCRIPTION: Command to install the Sage CLI tool using pipx for repository indexing.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/examples/third_party/sage/README.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npipx install git+https://github.com/Storia-AI/sage.git@main\n```\n\n----------------------------------------\n\nTITLE: Creating Markdown Table for Documentation Navigation\nDESCRIPTION: A markdown table that organizes and links to key marimo documentation sections, including installation guide, quickstart tutorial, and key concepts overview.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/getting_started/index.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Guide | Description |\n|-------|-------------|\n| [Installation](installation.md) | Installing marimo |\n| [Quickstart](quickstart.md) | Create notebooks, run apps, and more from the marimo command-line |\n| [Key Concepts](key_concepts.md) | A tour of key features and concepts |\n```\n\n----------------------------------------\n\nTITLE: Empty Code Block Example\nDESCRIPTION: Demonstrates a minimal code block with only fence markers.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/snapshots/unsafe-app.py.txt#2025-04-19_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"\n```\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Importing NumberField Stories and Components\nDESCRIPTION: Imports required components and stories for the NumberField Storybook documentation. Includes imports for Meta and Story components from Storybook, NumberField component stories, and related UI components.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/frontend/src/stories/number-field.mdx#2025-04-19_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Meta, Story } from \"@storybook/blocks\";\nimport * as NumberFieldStories from \"./number-field.stories\";\n\nimport { NumberField } from \"@/components/ui/number-field\";\nimport { Label } from \"@/components/ui/label\";\n```\n\n----------------------------------------\n\nTITLE: Assigning Integer Value to Variable 'x' in Python\nDESCRIPTION: This code snippet assigns the integer value 1 to the variable 'x'. This variable is likely used in other cells for further operations.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_server/export/snapshots/notebook_top_down.ipynb.txt#2025-04-19_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nx = 1\n```\n\n----------------------------------------\n\nTITLE: Initializing and Displaying Variable in Python\nDESCRIPTION: This code snippet initializes a variable 'x' with the value 0 and then displays its value. It demonstrates basic variable assignment and output in Python.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/ipynb_data/arithmetic.ipynb.txt#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nx = 0\nx\n```\n\n----------------------------------------\n\nTITLE: Importing Marimo Library in Python\nDESCRIPTION: This code snippet imports the Marimo library, which is essential for creating interactive notebooks with Marimo.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/snapshots/ipynb.txt#2025-04-19_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport marimo as mo\n```\n\n----------------------------------------\n\nTITLE: Analyzing Traces with Marimo Notebook\nDESCRIPTION: This command opens a Marimo notebook for analyzing server traces. The notebook is located in the scripts directory and is named analyze_traces.py.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/development_docs/traces.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmarimo edit scripts/analyze_traces.py\n```\n\n----------------------------------------\n\nTITLE: Running Marimo Notebooks Without uv\nDESCRIPTION: Alternative command for running marimo notebooks without uv, which requires manual installation of marimo and its dependencies.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/examples/third_party/README.md#2025-04-19_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nmarimo edit <notebook-url>\n```\n\n----------------------------------------\n\nTITLE: Creating and editing marimo notebooks\nDESCRIPTION: Command to create or edit marimo notebooks using the built-in editor interface.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/README.md#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmarimo edit\n```\n\n----------------------------------------\n\nTITLE: Unparsable Python Cell\nDESCRIPTION: Example of an unparsable Python code cell\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/snapshots/unsafe-doc.md.txt#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nit's an unparsable cell\n```\n\n----------------------------------------\n\nTITLE: Directory Tree Structure Overview\nDESCRIPTION: A tree view representation of the project's directory structure showing the organization of assets, components, core logic, plugins, and utility folders. Each directory has a specific purpose in organizing different aspects of the frontend application.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/frontend/src/README.md#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n┣ 📂assets - contains images assets\n┣ 📂components - contains \"connected\" components (i.e connected to state/store), split up by domain\n┣ 📂components/ui - re-usable \"dumb\" components\n┣ 📂core - core logic of the app, split up by domain\n┣ 📂css - various global css files\n┣ 📂fonts - app fonts\n┣ 📂hooks - shared, re-usable hooks\n┣ 📂mocks - shared mocks\n┣ 📂plugins - plugin logic\n┣ 📂plugins/impl - individual plugin implementations\n┣ 📂plugins/layout - individual \"stateless\" plugin implementations\n┣ 📂stories - storybook stories\n┣ 📂theme - app theme\n┣ 📂utils - shared utils\n```\n\n----------------------------------------\n\nTITLE: Running Playwright Tests in UI Mode\nDESCRIPTION: Command to run Playwright tests with the UI for interactive debugging in the frontend directory.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/CONTRIBUTING.md#2025-04-19_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\npnpm playwright test --ui\n```\n\n----------------------------------------\n\nTITLE: Loading External Resources in Marimo Head\nDESCRIPTION: HTML code for importing external JavaScript libraries and CSS frameworks into a Marimo notebook.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/configuration/html_head.md#2025-04-19_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<!-- Load external JavaScript libraries -->\n<script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/d3@7\"></script>\n\n<!-- Load external CSS -->\n<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css\" />\n```\n\n----------------------------------------\n\nTITLE: Importing Marimo Library in Python\nDESCRIPTION: This snippet imports the Marimo library, which is used for creating interactive UI elements in Jupyter notebooks.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/snapshots/ipynb_with_errors.txt#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport marimo as mo\n```\n\n----------------------------------------\n\nTITLE: Unparsable Python Cell in Marimo\nDESCRIPTION: An example of an unparsable Python cell in Marimo, demonstrating how the system handles invalid code.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/snapshots/unsafe-doc-old.md.txt#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nit's an unparsable cell\n```\n\n----------------------------------------\n\nTITLE: Styling Table Code Elements in CSS\nDESCRIPTION: CSS style definition that prevents code elements within table cells from wrapping to a new line. This ensures that command-line references display properly in the documentation.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/cli.md#2025-04-19_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n<style>\n  td code {\n    white-space: nowrap;\n  }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Assigning Value to Variable x in Python\nDESCRIPTION: This code snippet assigns the integer value 1 to the variable x.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_server/export/snapshots/notebook_topological.ipynb.txt#2025-04-19_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nx = 1\n```\n\n----------------------------------------\n\nTITLE: Demonstrating a Division by Zero Error in Python\nDESCRIPTION: This snippet intentionally creates a division by zero error to demonstrate how errors are displayed in the Jupyter notebook environment.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/snapshots/ipynb_with_errors.txt#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n1 / 0\n```\n\n----------------------------------------\n\nTITLE: Assigning Integer Value to Variable 'y' in Python\nDESCRIPTION: This code snippet assigns the integer value 1 to the variable 'y'. This variable is likely used in other cells for further operations.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_server/export/snapshots/notebook_top_down.ipynb.txt#2025-04-19_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\ny = 1\n```\n\n----------------------------------------\n\nTITLE: Converting Jupyter notebook to Python file with Jupytext\nDESCRIPTION: Command to convert a Jupyter notebook (.ipynb) to a Python file using Jupytext.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/coming_from/jupytext.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\njupytext --to py notebook.ipynb\n```\n\n----------------------------------------\n\nTITLE: Running Marimo Notebook in Sandbox Mode\nDESCRIPTION: Command to open the chat notebook in Marimo's sandbox environment with the specified GitHub repository.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/examples/third_party/sage/README.md#2025-04-19_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmarimo edit --sandbox chat_with_github.py -- $GITHUB_REPO\n```\n\n----------------------------------------\n\nTITLE: Checking Prerequisites for Marimo Development\nDESCRIPTION: Command to verify if all required tools are installed before contributing to Marimo.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/CONTRIBUTING.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake check-prereqs\n```\n\n----------------------------------------\n\nTITLE: Initializing Marimo App\nDESCRIPTION: Sets up a Marimo application with a custom title and imports required dependencies.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/snapshots/unsafe-doc-old.py.txt#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport marimo\n\n__generated_with = \"0.0.0\"\napp = marimo.App(app_title=\"Casually malicious md\")\n```\n\n----------------------------------------\n\nTITLE: Profiling Marimo Kernel in Edit Mode\nDESCRIPTION: This command shows how to generate profiling statistics for the Marimo kernel in edit mode. It uses the hidden --profile-dir option to specify where the profiling data should be saved.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/development_docs/traces.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmarimo edit --profile-dir profiles/ notebook.py\n```\n\n----------------------------------------\n\nTITLE: Invalid Partial Statement in Python\nDESCRIPTION: An incomplete assignment statement marked as unparsable in Marimo. Shows handling of incomplete syntax.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/snapshots/broken.txt#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\npartial_statement =\n```\n\n----------------------------------------\n\nTITLE: Printing Variable Value in Python\nDESCRIPTION: This snippet demonstrates how to print the current value of a variable 'y'. It shows the output of a previously assigned variable.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/ipynb_data/multiple_defs.ipynb.txt#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ny\n```\n\n----------------------------------------\n\nTITLE: Executing marimo notebooks as scripts\nDESCRIPTION: Command to execute a marimo notebook as a Python script from the command line.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/index.md#2025-04-19_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npython your_notebook.py\n```\n\n----------------------------------------\n\nTITLE: Adding Variables in Python\nDESCRIPTION: This code snippet adds two previously defined variables 'x' and 'y' and assigns the result to a new variable 'z'. It assumes that 'x' and 'y' have been defined in other cells.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_server/export/snapshots/notebook_top_down.ipynb.txt#2025-04-19_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nz = x + y\n```\n\n----------------------------------------\n\nTITLE: Importing Switch and Label Components in React\nDESCRIPTION: This snippet shows how to import the Switch and Label components from a custom UI library, likely for use in a React application.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/frontend/src/stories/switch.mdx#2025-04-19_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Label } from \"@/components/ui/label\";\nimport { Switch } from \"@/components/ui/switch\";\n```\n\n----------------------------------------\n\nTITLE: Executing Python Script via Command Line\nDESCRIPTION: Basic command to run a Python script directly using the Python interpreter.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/configuration/runtime_configuration.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython main.py\n```\n\n----------------------------------------\n\nTITLE: Enabling Traces for Marimo Server\nDESCRIPTION: This command demonstrates how to enable tracing for the Marimo server. It sets the MARIMO_TRACING environment variable to true before running the server command.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/development_docs/traces.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nMARIMO_TRACING=true ./your_server_command\n```\n\n----------------------------------------\n\nTITLE: Implementing Marimo Islands in HTML\nDESCRIPTION: Demonstrates the HTML structure required to implement Marimo islands, including necessary JS/CSS dependencies and custom HTML tags for island definition.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/exporting.md#2025-04-19_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<head>\n  <!-- marimo js/ccs --\n  <script type=\"module\" src=\"https://cdn.jsdelivr.net/npm/@marimo-team/islands@<version>/dist/main.js\"></script>\n  <link\n    href=\"https://cdn.jsdelivr.net/npm/@marimo-team/islands@<version>/dist/style.css\"\n    rel=\"stylesheet\"\n    crossorigin=\"anonymous\"\n  />\n  <!-- fonts -->\n  <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\" />\n  <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin />\n  <link\n    href=\"https://fonts.googleapis.com/css2?family=Fira+Mono:wght@400;500;700&amp;family=Lora&amp;family=PT+Sans:wght@400;700&amp;display=swap\"\n    rel=\"stylesheet\"\n  />\n  <link\n    rel=\"stylesheet\"\n    href=\"https://cdn.jsdelivr.net/npm/katex@0.16.10/dist/katex.min.css\"\n    integrity=\"sha384-wcIxkf4k558AjM3Yz3BBFQUbk/zgIYC2R0QpeeYb+TwlBVMrlgLqwRjRtGZiK7ww\"\n    crossorigin=\"anonymous\"\n  />\n</head>\n\n<body>\n  <marimo-island data-app-id=\"main\" data-cell-id=\"MJUe\" data-reactive=\"true\">\n    <marimo-cell-output>\n      <span class=\"markdown\">\n        <span class=\"paragraph\">Hello, islands!</span>\n      </span>\n    </marimo-cell-output>\n    <marimo-cell-code hidden>mo.md('Hello islands 🏝️!')</marimo-cell-code>\n  </marimo-island>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Running Apps - Command Line Usage\nDESCRIPTION: Demonstrates how to run applications from the command line in both frameworks.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/coming_from/streamlit.md#2025-04-19_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nstreamlit run your_app.py\n```\n\nLANGUAGE: bash\nCODE:\n```\nmarimo run your_notebook.py\n```\n\n----------------------------------------\n\nTITLE: Starting marimo with Ollama\nDESCRIPTION: This command demonstrates how to start marimo after setting up Ollama for local LLM usage.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/editor_features/ai_completion.md#2025-04-19_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nmarimo edit notebook.py\n```\n\n----------------------------------------\n\nTITLE: Doctest File Reference in Markdown\nDESCRIPTION: Marimo embed file directive pointing to a doctest example file in the examples/testing directory.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/testing/doctest.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n/// marimo-embed-file\n    filepath: examples/testing/running_doctests.py\n///\n```\n\n----------------------------------------\n\nTITLE: Print Hello World Statement\nDESCRIPTION: A simple code cell that prints 'Hello, World!' to demonstrate basic output in a Marimo notebook.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/snapshots/no-frontmatter.py.txt#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@app.cell\ndef _():\n    print(\"Hello, World!\")\n    return\n```\n\n----------------------------------------\n\nTITLE: Parsing JSON Output and Console Logs in Python\nDESCRIPTION: This code snippet represents a JSON structure containing output and console logs from the Marimo project. It includes information about internal tests, error messages, and a specific authentication failure.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_server/export/snapshots/run_until_completion_with_stack_trace.txt#2025-04-19_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"output\": \"\",\n    \"console\": [\n      \"running internal tests\\n\"\n    ],\n    \"status\": \"idle\"\n  },\n  {\n    \"output\": \"<pre style='font-size: 12px'>15</pre>\",\n    \"console\": [\n      \"internal error\\n\"\n    ],\n    \"status\": \"idle\"\n  },\n  {\n    \"output\": [\n      {\n        \"msg\": \"Failed to authenticate. The correct password is 's3cret'.\",\n        \"exception_type\": \"ValueError\",\n        \"raising_cell\": null,\n        \"type\": \"exception\"\n      }\n    ],\n    \"console\": [\n      \"<span class=\\\"codehilite\\\"><div class=\\\"highlight\\\"><pre><span></span><span class=\\\"gt\\\">Traceback (most recent call last):</span>\\n  &quot;</span>, line <span class=\\\"m\\\">3</span>, in <span class=\\\"n\\\">&lt;module&gt;</span>\\n<span class=\\\"w\\\">    </span><span class=\\\"k\\\">raise</span> <span class=\\\"ne\\\">ValueError</span><span class=\\\"p\\\">(</span>\\n<span class=\\\"gr\\\">ValueError</span>: <span class=\\\"n\\\">Failed to authenticate. The correct password is 's3cret'.</span>\\n</pre></div>\\n</span>\"\n    ],\n    \"status\": \"idle\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Running Python Tests with Optional Dependencies\nDESCRIPTION: Command to run Python tests with optional dependencies enabled using Hatch.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/CONTRIBUTING.md#2025-04-19_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nhatch run test-optional:test tests/_ast/\n```\n\n----------------------------------------\n\nTITLE: Creating Local Variables in Python\nDESCRIPTION: Demonstrates how to create local variables in marimo by prefixing them with an underscore. These variables are not accessible by other cells.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/reactivity.md#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n_x = 10  # This is a local variable\n```\n\n----------------------------------------\n\nTITLE: Hello World Print Example\nDESCRIPTION: Simple cell demonstrating basic print functionality in Marimo.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/snapshots/unsafe-doc-old.py.txt#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nprint(\"Hello, World!\")\n```\n\n----------------------------------------\n\nTITLE: Running Python Validation Checks with Hatch\nDESCRIPTION: Commands to run linting, formatting, and typechecking for Python code using Hatch.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/CONTRIBUTING.md#2025-04-19_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nhatch run lint\nhatch run format\nhatch run typecheck:check\n```\n\n----------------------------------------\n\nTITLE: Console Command Execution in Python\nDESCRIPTION: Shows how to execute console commands using subprocess.run instead of Jupyter magic commands\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/coming_from/jupyter.md#2025-04-19_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport subprocess\n\n# run: \"ls -l\"\nsubprocess.run([\"ls\", \"-l\"])\n```\n\n----------------------------------------\n\nTITLE: Executing Simple Python Print Statement in Marimo\nDESCRIPTION: Demonstrates a basic Python code execution within a Marimo cell, printing 'Hello, World!'.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/snapshots/unsafe-doc.py.txt#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@app.cell\ndef _():\n    print(\"Hello, World!\")\n    return\n```\n\n----------------------------------------\n\nTITLE: Running Specific Playwright Tests\nDESCRIPTION: Commands to run specific Playwright tests by filename in UI or debug mode from the frontend directory.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/CONTRIBUTING.md#2025-04-19_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\npnpm playwright test <filename> --ui\n# e.g.\npnpm playwright test cells.test.ts --ui\n```\n\n----------------------------------------\n\nTITLE: Running End-to-End Tests\nDESCRIPTION: Command to run end-to-end tests using Playwright, which exercise both the Marimo library and frontend together.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/CONTRIBUTING.md#2025-04-19_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nmake e2e\n```\n\n----------------------------------------\n\nTITLE: Hello World Execution\nDESCRIPTION: A simple cell that executes a print statement.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/snapshots/unsafe-app.py.txt#2025-04-19_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# Actual print\nprint(\"Hello World\")\n```\n\n----------------------------------------\n\nTITLE: Building Frontend in Watch Mode\nDESCRIPTION: Command to build the frontend and watch for changes, useful for testing in an environment closer to production.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/CONTRIBUTING.md#2025-04-19_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\npnpm build:watch\n```\n\n----------------------------------------\n\nTITLE: Disabled Python Code Block in Marimo\nDESCRIPTION: A Python code block that is marked as disabled in Marimo, showing how the system handles inactive code.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/snapshots/unsafe-doc-old.md.txt#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n1 + 1\n```\n\n----------------------------------------\n\nTITLE: Creating Empty Cell in Marimo\nDESCRIPTION: Defines an empty cell in the Marimo app, showcasing how the app handles cells without content.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/snapshots/unsafe-doc.py.txt#2025-04-19_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n@app.cell\ndef _():\n    return\n```\n\n----------------------------------------\n\nTITLE: Performing Addition on Variable in Python\nDESCRIPTION: This code snippet adds 1 to the previously defined variable 'x'. It demonstrates a simple arithmetic operation in Python, utilizing a variable from a previous cell.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/ipynb_data/arithmetic.ipynb.txt#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nx + 1\n```\n\n----------------------------------------\n\nTITLE: Displaying MIT License Text\nDESCRIPTION: This snippet shows the full text of the MIT License, which is a permissive open-source license allowing free use, modification, and distribution of software, with minimal restrictions.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/third_party_licenses.txt#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nMIT LICENSE TEXT\n\nCopyright (c) <year> <copyright holders>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n```\n\n----------------------------------------\n\nTITLE: Basic Print Statement\nDESCRIPTION: Simple Python print statement outputting 'hello'\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_server/export/snapshots/notebook_with_outputs.ipynb.txt#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nprint(\"hello\")\n```\n\n----------------------------------------\n\nTITLE: Variable Assignment with Hidden Code\nDESCRIPTION: Assigns value 10 to variable x with code hidden from display\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_server/export/snapshots/notebook_with_outputs.ipynb.txt#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nx = 10\n```\n\n----------------------------------------\n\nTITLE: Simple For Loop in Python\nDESCRIPTION: This snippet demonstrates a basic for loop in Python that iterates over a range of numbers from 0 to 2 and prints each number. It shows how to use the range() function and print values in a loop.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/ipynb_data/multiple_defs.ipynb.txt#2025-04-19_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfor i in range(3):\n    print(i)\n```\n\n----------------------------------------\n\nTITLE: Problematic Star Import Pattern\nDESCRIPTION: Shows the discouraged star import pattern that should be avoided in marimo notebooks.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/understanding_errors/import_star.md#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom math import *\n\npi\n```\n\n----------------------------------------\n\nTITLE: Printing Hello World in Python\nDESCRIPTION: A simple Python code snippet that prints 'Hello, World!' to the console.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/snapshots/unsafe-doc-old.md.txt#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nprint(\"Hello, World!\")\n```\n\n----------------------------------------\n\nTITLE: Empty Python Code Block in Marimo\nDESCRIPTION: An example of an empty Python code block in Marimo, showing how the system handles blocks without content.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/snapshots/unsafe-doc-old.md.txt#2025-04-19_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Defining Disabled Cell in Marimo\nDESCRIPTION: Creates a disabled cell in the Marimo app, demonstrating how to include code that is not executed by default.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/snapshots/unsafe-doc.py.txt#2025-04-19_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n@app.cell(disabled=True)\ndef _():\n    1 + 1\n    return\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Marimo Examples with uv\nDESCRIPTION: Instructions for installing uv and using it to open Marimo example notebooks in a sandboxed environment with automatic dependency installation.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/examples/control_flow/README.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. [Install `uv`](https://github.com/astral-sh/uv/?tab=readme-ov-file#installation)\n2. Open an example with `uvx marimo edit --sandbox <notebook-url>`\n```\n\n----------------------------------------\n\nTITLE: Installing Optional Dependencies with conda\nDESCRIPTION: Command to install recommended marimo dependencies using conda.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/getting_started/quickstart.md#2025-04-19_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nconda install -c conda-forge marimo duckdb altair polars openai ruff\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Error Handling in Python\nDESCRIPTION: This snippet intentionally creates a division by zero error. It's likely used to showcase error handling or debugging features in the Marimo notebook environment.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/snapshots/export_markdown_with_errors.txt#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n1 / 0\n```\n\n----------------------------------------\n\nTITLE: Initializing Marimo static configuration in JavaScript\nDESCRIPTION: This script sets up the initial static configuration for the Marimo application, including version information, notebook state, asset URL, and files object.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_server/templates/snapshots/export5.txt#2025-04-19_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nwindow.__MARIMO_STATIC__ = {};\nwindow.__MARIMO_STATIC__.version = \"0.0.0\";\nwindow.__MARIMO_STATIC__.notebookState = {\"cellIds\": [], \"cellNames\": [], \"cellCodes\": [], \"cellConfigs\": [], \"cellOutputs\": {}, \"cellConsoleOutputs\": {}};\nwindow.__MARIMO_STATIC__.assetUrl = \"https://cdn.jsdelivr.net/npm/@marimo-team/frontend@0.0.0/dist\";\nwindow.__MARIMO_STATIC__.files = {};\n```\n\n----------------------------------------\n\nTITLE: Configuring Windsurf API Key with Full Settings\nDESCRIPTION: Complete configuration for Windsurf integration including the API key and activation settings. This configuration goes in the user's home directory marimo.toml file.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/editor_features/ai_completion.md#2025-04-19_snippet_10\n\nLANGUAGE: toml\nCODE:\n```\n[completion]\ncodeium_api_key = \"a1e8...\"  # <-- paste your API key here\ncopilot = \"codeium\"\nactivate_on_typing = true\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Marimo Examples with uv\nDESCRIPTION: Instructions for installing uv and using it to open marimo example notebooks in a sandboxed environment. This method automatically installs dependencies.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/examples/ui/README.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. [Install `uv`](https://github.com/astral-sh/uv/?tab=readme-ov-file#installation)\n2. Open an example with `uvx marimo edit --sandbox <notebook-url>`\n```\n\n----------------------------------------\n\nTITLE: Defining Tooltip Component Story in JSX\nDESCRIPTION: This snippet defines the Tooltip component story using JSX. It demonstrates the structure of a tooltip with a button trigger and custom content.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/frontend/src/stories/tooltip.mdx#2025-04-19_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<Meta title=\"Tooltip\" component={TooltipRoot} />\n\n# Tooltip\n\n<TooltipProvider>\n  <TooltipRoot>\n    <TooltipTrigger asChild>\n      <Button variant=\"outline\" className=\"rounded-full\">\n        <Plus className=\"h-4 w-4\" />\n\n        <span className=\"sr-only\">Add</span>\n      </Button>\n    </TooltipTrigger>\n\n    <TooltipContent>\n      <p>Add to library</p>\n    </TooltipContent>\n\n  </TooltipRoot>\n</TooltipProvider>\n```\n\n----------------------------------------\n\nTITLE: Configuring Google AI in marimo.toml\nDESCRIPTION: This snippet shows the configuration for using Google AI with marimo. It includes setting the model in the OpenAI section and specifying the Google API key.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/editor_features/ai_completion.md#2025-04-19_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[ai.open_ai]\nmodel = \"gemini-1.5-flash\"\n# or any model from https://ai.google.dev/gemini-api/docs/models/gemini\n\n[ai.google]\napi_key = \"AI...\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Marimo Static Configuration\nDESCRIPTION: JavaScript code that initializes static configuration for the Marimo notebook, including version information, notebook state, asset URL, and files object.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_server/templates/snapshots/export4.txt#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.__MARIMO_STATIC__ = {};\nwindow.__MARIMO_STATIC__.version = \"0.0.0\";\nwindow.__MARIMO_STATIC__.notebookState = {\"cellIds\": [], \"cellNames\": [], \"cellCodes\": [], \"cellConfigs\": [], \"cellOutputs\": {}, \"cellConsoleOutputs\": {}};\nwindow.__MARIMO_STATIC__.assetUrl = \"https://cdn.jsdelivr.net/npm/@marimo-team/frontend@0.0.0/dist\";\nwindow.__MARIMO_STATIC__.files = {};\n```\n\n----------------------------------------\n\nTITLE: Running Basic Python Code in Marimo\nDESCRIPTION: This snippet demonstrates how to execute basic Python code in a Marimo notebook. It includes simple variable assignments, arithmetic operations, and string manipulations.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/examples/running_cells/basics.md#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Basic variable assignment\nx = 5\ny = 10\n\n# Arithmetic operation\nz = x + y\n\n# String manipulation\ngreeting = \"Hello, Marimo!\"\n\n# Print results\nprint(f\"x = {x}\")\nprint(f\"y = {y}\")\nprint(f\"z = {z}\")\nprint(greeting)\n```\n\n----------------------------------------\n\nTITLE: Configuring Marimo Snippets Rendering Behavior in HTML\nDESCRIPTION: Shows how to configure the global rendering behavior for marimo-snippets using script elements. It includes examples of configuring button titles and iframe heights.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/publishing/from_code_snippets.md#2025-04-19_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- Optionally configure how buttons and iframes are rendered. -->\n<!-- Configuration must come _before_ the main extractor script is loaded. -->\n<script type=\"text/x-marimo-snippets-config\">\nconfigureMarimoButtons({title: \"Open in a marimo notebook\"});\nconfigureMarimoIframes({height: \"400px\"});\n</script>\n\n<script src=\"https://cdn.jsdelivr.net/npm/@marimo-team/marimo-snippets@1\"></script>\n```\n\n----------------------------------------\n\nTITLE: Using mo.stop to Halt Cell Execution in Marimo\nDESCRIPTION: The mo.stop function halts execution of a cell and optionally outputs an object. It's particularly useful for validating user input before proceeding with execution.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/api/control_flow.md#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nmo.stop\n```\n\n----------------------------------------\n\nTITLE: Adding Unparsable Cell to Marimo App in Python\nDESCRIPTION: Adds an unparsable cell to the Marimo app. This cell contains a mixture of shell commands and Python code, which is not directly executable by Python.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/snapshots/converted_unparsable.py.txt#2025-04-19_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\napp._unparsable_cell(\n    r\"\"\"\n    !echo hello, world\n\n    x = 0\n    \"\"\",\n    name=\"_\"\n)\n```\n\n----------------------------------------\n\nTITLE: Referencing marimo Cell Component in Documentation\nDESCRIPTION: A directive that references the marimo Cell component, likely used in documentation to point to the Cell implementation or documentation.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/api/cell.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n::: marimo.Cell\n```\n\n----------------------------------------\n\nTITLE: Validating OpenAPI Schema in Marimo\nDESCRIPTION: These commands install the openapi-spec-validator and use it to validate the OpenAPI schema. It ensures that the schema is correctly formatted and follows OpenAPI specifications.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/development_docs/openapi.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npipx install openapi-spec-validator\nmarimo development openapi | openapi-spec-validator -\n```\n\n----------------------------------------\n\nTITLE: Configuring Windsurf Copilot in TOML\nDESCRIPTION: Basic configuration for setting up Windsurf (formerly Codeium) copilot integration in Marimo. Requires a Windsurf API key to be added to the configuration file.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/editor_features/ai_completion.md#2025-04-19_snippet_9\n\nLANGUAGE: toml\nCODE:\n```\n[completion]\ncopilot = \"codeium\"\ncodeium_api_key = \"\"\n```\n\n----------------------------------------\n\nTITLE: Starting Ollama Server\nDESCRIPTION: These commands show how to start the Ollama server and run a specific model for use with marimo.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/editor_features/ai_completion.md#2025-04-19_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nollama serve\n# In a new terminal\nollama run codellama  # or any model from ollama ls\n```\n\n----------------------------------------\n\nTITLE: Creating Altair Bar Chart for Datetime Data in Python\nDESCRIPTION: This snippet creates a bar chart using Altair for datetime data. It bins the temporal data on the x-axis and formats the axis labels as YYYY-MM-DD.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_data/snapshots/charts.txt#2025-04-19_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n_chart = (\n    alt.Chart(df)\n    .mark_bar()\n    .encode(\n        x=alt.X(\n            \"some_column\",\n            type=\"temporal\",\n            bin=alt.Bin(maxbins=20),\n            axis=alt.Axis(format=\"%Y-%m-%d\")\n        ),\n        y=alt.Y(\"count()\", type=\"quantitative\"),\n    )\n    .properties(width=\"container\")\n)\n_chart\n```\n\n----------------------------------------\n\nTITLE: Using Label Component in JSX\nDESCRIPTION: This snippet demonstrates how to use the Label component in JSX, setting the htmlFor attribute and providing label text.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/frontend/src/stories/label.mdx#2025-04-19_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<Label htmlFor=\"email\">Your email address</Label>\n```\n\n----------------------------------------\n\nTITLE: Configuring Vega-Lite Histogram Chart with Base64 Data\nDESCRIPTION: Defines a Vega-Lite visualization spec that creates a histogram from CSV data. The configuration includes container-width responsiveness, continuous height/width settings, and bar mark type with binned x-axis and count aggregation for y-axis.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_data/snapshots/column_preview_float_chart_spec.txt#2025-04-19_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://vega.github.io/schema/vega-lite/v5.20.1.json\",\n  \"config\": {\n    \"view\": {\n      \"continuousHeight\": 300,\n      \"continuousWidth\": 300\n    }\n  },\n  \"data\": {\n    \"format\": {\n      \"type\": \"csv\"\n    },\n    \"url\": \"data:text/csv;base64,ZmxvYXRfY29sCjEuMQoyLjIKMy4zCg==\"\n  },\n  \"encoding\": {\n    \"x\": {\n      \"bin\": true,\n      \"field\": \"float_col\",\n      \"type\": \"quantitative\"\n    },\n    \"y\": {\n      \"aggregate\": \"count\",\n      \"type\": \"quantitative\"\n    }\n  },\n  \"mark\": {\n    \"type\": \"bar\"\n  },\n  \"width\": \"container\"\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Notebook Configuration with Markdown Cells\nDESCRIPTION: Complete Jupyter notebook configuration in JSON format defining markdown cells and Python kernel settings. Includes metadata for kernel specification, language info, and notebook format version.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/ipynb_data/markdown.ipynb.txt#2025-04-19_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n \"cells\": [\n  {\n   \"cell_type\": \"markdown\",\n   \"id\": \"364bd4a5\",\n   \"metadata\": {},\n   \"source\": [\n    \"# Hello, markdown\\n\",\n    \"\\\"\\\"\\\"\\n\",\n    \"'hello\\\"\\n\",\n    \"'''\\n\",\n    \"\\\"\\\"\\\"\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"id\": \"5691372e\",\n   \"metadata\": {},\n   \"source\": [\n    \"Here is some math\\n\",\n    \"\\n\",\n    \"$x \\\\approx 0$\"\n   ]\n  }\n ],\n \"metadata\": {\n  \"kernelspec\": {\n   \"display_name\": \"Python 3\",\n   \"language\": \"python\",\n   \"name\": \"python3\"\n  },\n  \"language_info\": {\n   \"codemirror_mode\": {\n    \"name\": \"ipython\",\n    \"version\": 3\n   },\n   \"file_extension\": \".py\",\n   \"mimetype\": \"text/x-python\",\n   \"name\": \"python\",\n   \"nbconvert_exporter\": \"python\",\n   \"pygments_lexer\": \"ipython3\",\n   \"version\": \"3.10.6\"\n  }\n },\n \"nbformat\": 4,\n \"nbformat_minor\": 5\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Vega-Lite Histogram Chart in JSON\nDESCRIPTION: Defines a Vega-Lite specification for creating a histogram visualization. The chart uses CSV data encoded in base64 format, bins the 'A' field on the x-axis, and displays the count on the y-axis. The visualization is rendered as a bar chart with container-width responsiveness.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_data/snapshots/column_preview_int_chart_spec.txt#2025-04-19_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://vega.github.io/schema/vega-lite/v5.20.1.json\",\n  \"config\": {\n    \"view\": {\n      \"continuousHeight\": 300,\n      \"continuousWidth\": 300\n    }\n  },\n  \"data\": {\n    \"format\": {\n      \"type\": \"csv\"\n    },\n    \"url\": \"data:text/csv;base64,QQoxCjIKMwo=\"\n  },\n  \"encoding\": {\n    \"x\": {\n      \"bin\": true,\n      \"field\": \"A\",\n      \"type\": \"quantitative\"\n    },\n    \"y\": {\n      \"aggregate\": \"count\",\n      \"type\": \"quantitative\"\n    }\n  },\n  \"mark\": {\n    \"type\": \"bar\"\n  },\n  \"width\": \"container\"\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Frontend Package in Marimo\nDESCRIPTION: These commands navigate to the frontend directory and update the @marimo-team/marimo-api package. This step is necessary after generating a new client from the OpenAPI schema.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/development_docs/openapi.md#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd frontend\npnpm update @marimo-team/marimo-api\n```\n\n----------------------------------------\n\nTITLE: Opening Marimo Notebook in Edit Mode\nDESCRIPTION: Command to open and execute a Marimo notebook in edit mode.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/configuration/runtime_configuration.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmarimo edit notebook.py\n```\n\n----------------------------------------\n\nTITLE: Markdown Name Greeting\nDESCRIPTION: Displays a greeting using the entered name value in markdown format\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/outputs.md#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nmo.md(\n  f\"\"\"\n  Hello, {name.value}!\n  \"\"\"\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Marimo SQL Package with uv\nDESCRIPTION: Command to install Marimo with SQL support using uv package manager\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/integrations/motherduck.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nuv add \"marimo[sql]\"\n```\n\n----------------------------------------\n\nTITLE: Numeric Data Visualization with Vega-Lite\nDESCRIPTION: Configuration for visualizing numeric data (integer/number) using bar charts. Implements binning for quantitative x-axis values.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_data/snapshots/charts_json.txt#2025-04-19_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://vega.github.io/schema/vega-lite/v5.20.1.json\",\n  \"config\": {\n    \"view\": {\n      \"continuousHeight\": 300,\n      \"continuousWidth\": 300\n    }\n  },\n  \"data\": {\n    \"name\": \"data-afce120bec1de31b50bc39eae2fedbed\"\n  },\n  \"datasets\": {\n    \"data-afce120bec1de31b50bc39eae2fedbed\": [\n      {\n        \"some_column\": 1\n      },\n      {\n        \"some_column\": 2\n      },\n      {\n        \"some_column\": 3\n      }\n    ]\n  },\n  \"encoding\": {\n    \"x\": {\n      \"bin\": true,\n      \"field\": \"some_column\",\n      \"type\": \"quantitative\"\n    },\n    \"y\": {\n      \"aggregate\": \"count\",\n      \"type\": \"quantitative\"\n    }\n  },\n  \"mark\": {\n    \"type\": \"bar\"\n  },\n  \"width\": \"container\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running marimo Notebook as Web App (Bash)\nDESCRIPTION: Command to run a marimo notebook as a read-only web application.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/getting_started/key_concepts.md#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmarimo run my_notebook.py\n```\n\n----------------------------------------\n\nTITLE: Importing marimo Library (Python)\nDESCRIPTION: Standard import statement to use the marimo library in a notebook.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/getting_started/key_concepts.md#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport marimo as mo\n```\n\n----------------------------------------\n\nTITLE: Configuring Vim Keybindings in pyproject.toml\nDESCRIPTION: This snippet demonstrates how to set a custom vimrc file path in the pyproject.toml file. It provides an alternative way to customize the vim experience in the marimo editor using a relative path.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/guides/editor_features/overview.md#2025-04-19_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[tool.marimo.keymap]\nvimrc = relative/path/.vimrc\n```\n\n----------------------------------------\n\nTITLE: Creating Bar Chart with Colon Column Name\nDESCRIPTION: Creates an Altair bar chart using a column name containing a colon. Charts the count of values for 'col:colon' on the y-axis.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_data/snapshots/charts_bad_characters.txt#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n_chart = (\n    alt.Chart(df)\n    .mark_bar()\n    .encode(\n        y=alt.Y(\"col\\:colon\", type=\"nominal\"),\n        x=alt.X(\"count()\", type=\"quantitative\"),\n    )\n    .properties(width=\"container\")\n)\n_chart\n```\n\n----------------------------------------\n\nTITLE: Running Marimo Frontend with Local Backend using Pyodide\nDESCRIPTION: Multi-step process to build Marimo locally, serve it with a development server, and connect the frontend to this local backend using Pyodide. Requires running commands in two separate terminals.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/development_docs/pyodide.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# build once\nhatch build\n# server and watch for changes\nuv run pyodide/build_and_serve.py\n# in another terminal\ncd frontend\nPYODIDE=true VITE_MARIMO_VERSION=$(marimo --version) pnpm dev\n```\n\n----------------------------------------\n\nTITLE: Creating Bar Chart with Brackets Column Name\nDESCRIPTION: Creates an Altair bar chart using a column name containing square brackets. Charts the count of values for 'col[0]brackets' on the y-axis.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_data/snapshots/charts_bad_characters.txt#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n_chart = (\n    alt.Chart(df)\n    .mark_bar()\n    .encode(\n        y=alt.Y(\"col\\[0\\]brackets\", type=\"nominal\"),\n        x=alt.X(\"count()\", type=\"quantitative\"),\n    )\n    .properties(width=\"container\")\n)\n_chart\n```\n\n----------------------------------------\n\nTITLE: Creating Bar Chart with Period Column Name\nDESCRIPTION: Creates an Altair bar chart using a column name containing a period. Charts the count of values for 'col.period' on the y-axis.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_data/snapshots/charts_bad_characters.txt#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n_chart = (\n    alt.Chart(df)\n    .mark_bar()\n    .encode(\n        y=alt.Y(\"col\\.period\", type=\"nominal\"),\n        x=alt.X(\"count()\", type=\"quantitative\"),\n    )\n    .properties(width=\"container\")\n)\n_chart\n```\n\n----------------------------------------\n\nTITLE: Defining Jupyter Notebook Structure and Metadata in JSON\nDESCRIPTION: This JSON structure defines the configuration for a Jupyter Notebook. It specifies an empty code cell, sets Python 3 as the kernel, and includes metadata about the Python environment.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/ipynb_data/blank.ipynb.txt#2025-04-19_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n \"cells\": [\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"id\": \"f1cc6017\",\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": []\n  }\n ],\n \"metadata\": {\n  \"kernelspec\": {\n   \"display_name\": \"Python 3\",\n   \"language\": \"python\",\n   \"name\": \"python3\"\n  },\n  \"language_info\": {\n   \"codemirror_mode\": {\n    \"name\": \"ipython\",\n    \"version\": 3\n   },\n   \"file_extension\": \".py\",\n   \"mimetype\": \"text/x-python\",\n   \"name\": \"python\",\n   \"nbconvert_exporter\": \"python\",\n   \"pygments_lexer\": \"ipython3\",\n   \"version\": \"3.10.6\"\n  }\n },\n \"nbformat\": 4,\n \"nbformat_minor\": 5\n}\n```\n\n----------------------------------------\n\nTITLE: Main Application Runner\nDESCRIPTION: Entry point for running the Marimo application.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/snapshots/unsafe-doc-old.py.txt#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nif __name__ == \"__main__\":\n    app.run()\n```\n\n----------------------------------------\n\nTITLE: Improperly Nested Python Code Block in Marimo\nDESCRIPTION: An example of an improperly nested Python code block, demonstrating how Marimo handles nested code formatting issues.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/snapshots/unsafe-doc-old.md.txt#2025-04-19_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"\n```{python}\nprint(\"Hello, World!\")\n````\n\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Apache 2.0 License Text\nDESCRIPTION: This snippet contains the full text of the Apache 2.0 License, which is a permissive open-source license that allows free use, modification, and distribution of software while providing patent rights and requiring preservation of copyright notices.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/third_party_licenses.txt#2025-04-19_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nAPACHE 2.0 LICENSE TEXT\n\n                     Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n```\n\n----------------------------------------\n\nTITLE: Basic Python Print Statement\nDESCRIPTION: Simple Python code block printing 'Hello, World!'\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/snapshots/unsafe-doc.md.txt#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nprint(\"Hello, World!\")\n```\n\n----------------------------------------\n\nTITLE: Invalid UI Element Event Handler Implementation\nDESCRIPTION: Example showing incorrect implementation of button event handlers in an array that leads to closure issues\nSOURCE: https://github.com/marimo-team/marimo/blob/main/docs/faq.md#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\narray = mo.ui.array(\n  [mo.ui.button(on_change=lambda value: print(i)) for i in range(10)\n])\n```\n\n----------------------------------------\n\nTITLE: Generating Division by Zero Error\nDESCRIPTION: Deliberately creates a division by zero error for demonstration purposes\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/snapshots/script_with_errors.txt#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n1 / 0\n```\n\n----------------------------------------\n\nTITLE: Rendering Parameterized Markdown with Marimo in Python\nDESCRIPTION: This code demonstrates rendering parameterized markdown using Marimo. It includes a control dependency and interpolates a number into the markdown string.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/snapshots/ipynb.txt#2025-04-19_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\ncontrol_dep\nmo.md(f\"parameterized markdown {123}\")\n```\n\n----------------------------------------\n\nTITLE: Rendering Markdown with Ambiguous Execution Block in Marimo\nDESCRIPTION: Creates a markdown cell containing a Python code block that is too ambiguous to convert, demonstrating how Marimo handles potentially problematic code insertions in markdown.\nSOURCE: https://github.com/marimo-team/marimo/blob/main/tests/_cli/snapshots/unsafe-doc.py.txt#2025-04-19_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n@app.cell\ndef _(mo):\n    mo.md(\"\"\"\n      This is a markdown cell with an execution block in it\n      ```python {.marimo}\n      # To ambiguous to convert\n      ```\n      \"\"\")\n    return\n```"
  }
]