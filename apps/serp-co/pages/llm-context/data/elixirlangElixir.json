[
  {
    "owner": "elixir-lang",
    "repo": "elixir",
    "content": "TITLE: Defining a Module with Documentation Attributes in Elixir\nDESCRIPTION: This snippet demonstrates how to define a module and use `@moduledoc` and `@doc` to document the module and its functions in Elixir. It shows a simple function that greets a user by name.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/writing-documentation.md#2025-04-21_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\n```elixir\n\ndefmodule MyApp.Hello do\n  @moduledoc \"\"\"\n  This is the Hello module.\n  \"\"\"\n  @moduledoc since: \"1.0.0\"\n\n  @doc \"\"\"\n  Says hello to the given `name`.\n\n  Returns `:ok`.\n\n  ## Examples\n\n      iex> MyApp.Hello.world(:john)\n      :ok\n\n  \"\"\"\n  @doc since: \"1.3.0\"\n  def world(name) do\n    IO.puts(\"hello #{name}\")\n  end\nend\n```\n```\n\n----------------------------------------\n\nTITLE: Using the Match Operator in Elixir\nDESCRIPTION: Demonstrates the basic usage of the match operator (=) for variable assignment and pattern matching in Elixir. Shows how it can be used for equality comparison and raises a MatchError when patterns don't match.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/pattern-matching.md#2025-04-21_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\niex> x = 1\n1\niex> x\n1\n\niex> x = 1\n1\niex> 1 = x\n1\niex> 2 = x\n** (MatchError) no match of right hand side value: 1\n```\n\n----------------------------------------\n\nTITLE: Using case for Pattern Matching in Elixir\nDESCRIPTION: Demonstrates how to use the case structure to match a value against multiple patterns. The example shows matching against a tuple, binding variables, and using the catch-all underscore pattern.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/case-cond-and-if.md#2025-04-21_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\niex> case {1, 2, 3} do\n...>   {4, 5, 6} ->\n...>     \"This clause won't match\"\n...>   {1, x, 3} ->\n...>     \"This clause will match and bind x to 2 in this clause\"\n...>   _ ->\n...>     \"This clause would match any value\"\n...> end\n\"This clause will match and bind x to 2 in this clause\"\n```\n\n----------------------------------------\n\nTITLE: Using Guard Clauses with case in Elixir\nDESCRIPTION: Demonstrates adding guard conditions to case clauses for additional filtering. Guards allow for more complex conditions beyond simple pattern matching.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/case-cond-and-if.md#2025-04-21_snippet_2\n\nLANGUAGE: elixir\nCODE:\n```\niex> case {1, 2, 3} do\n...>   {1, x, 3} when x > 0 ->\n...>     \"Will match\"\n...>   _ ->\n...>     \"Would match, if guard condition were not satisfied\"\n...> end\n\"Will match\"\n```\n\n----------------------------------------\n\nTITLE: Utilizing dbg/2 for Advanced Debugging\nDESCRIPTION: This snippet shows how to use the dbg/2 function introduced in Elixir v1.14, which provides context about the location and the code being executed, making it suitable for debugging in pipelines.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/debugging.md#2025-04-21_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\nfeature = %{name: :dbg, inspiration: \"Rust\"}\ndbg(feature)\ndbg(Map.put(feature, :in_version, \"1.14.0\"))\n```\n\nLANGUAGE: elixir\nCODE:\n```\n__ENV__.file\n|> String.split(\"/\", trim: true)\n|> List.last()\n|> File.exists?()\n|> dbg()\n```\n\n----------------------------------------\n\nTITLE: Checking Process Status\nDESCRIPTION: Shows how to check if a spawned process is alive and retrieve the current process ID\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/processes.md#2025-04-21_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\npid = spawn(fn -> 1 + 2 end)\nProcess.alive?(pid)\n```\n\n----------------------------------------\n\nTITLE: Defining GenServer Callbacks\nDESCRIPTION: This snippet shows the implementation of a GenServer module that defines callbacks for initializing the registry process, looking up names, and creating new buckets. It illustrates how responses for calls and casts are managed.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/mix-and-otp/genservers.md#2025-04-21_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule KV.Registry do\\n  use GenServer\\n\\n  ## Missing Client API - will add this later\\n\\n  ## Defining GenServer Callbacks\\n\\n  @impl true\\n  def init(:ok) do\\n    {:ok, %{}}\\n  end\\n\\n  @impl true\\n  def handle_call({:lookup, name}, _from, names) do\\n    {:reply, Map.fetch(names, name), names}\\n  end\\n\\n  @impl true\\n  def handle_cast({:create, name}, names) do\\n    if Map.has_key?(names, name) do\\n      {:noreply, names}\\n    else\\n      {:ok, bucket} = KV.Bucket.start_link([])\\n      {:noreply, Map.put(names, name, bucket)}\\n    end\\n  end\\nend\n```\n\n----------------------------------------\n\nTITLE: Basic IO Operations in Elixir\nDESCRIPTION: Demonstrates standard input and output methods using the IO module, including writing to standard output and error streams\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/io-and-the-file-system.md#2025-04-21_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\nIO.puts(\"hello world\")\nIO.gets(\"yes or no? \")\nIO.puts(:stderr, \"hello world\")\n```\n\n----------------------------------------\n\nTITLE: Printing \"Hello world\" from Elixir\nDESCRIPTION: This snippet shows how to print \"Hello world from Elixir\" using the `IO.puts` function in Elixir. The code should be saved to a file named `simple.exs` before being executed with the `elixir` command. The command line will print the string.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/introduction.md#2025-04-21_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\nIO.puts(\"Hello world from Elixir\")\n```\n\n----------------------------------------\n\nTITLE: Specifying a permanent restart strategy in Elixir\nDESCRIPTION: This code snippet modifies the `start/2` function in `KVServer.Application` to use `Supervisor.child_spec/2` to configure the child specification for the acceptor task, ensuring it has a `:restart` value of `:permanent`. This ensures that the acceptor process is always restarted if it crashes, preventing service interruption.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/mix-and-otp/task-and-gen-tcp.md#2025-04-21_snippet_8\n\nLANGUAGE: elixir\nCODE:\n```\ndef start(_type, _args) do\n    port = String.to_integer(System.get_env(\"PORT\") || \"4040\")\n\n    children = [\n      {Task.Supervisor, name: KVServer.TaskSupervisor},\n      Supervisor.child_spec({Task, fn -> KVServer.accept(port) end}, restart: :permanent)\n    ]\n\n    opts = [strategy: :one_for_one, name: KVServer.Supervisor]\n    Supervisor.start_link(children, opts)\n  end\n```\n\n----------------------------------------\n\nTITLE: Message Passing Between Processes\nDESCRIPTION: Demonstrates sending and receiving messages between processes using send/2 and receive/1\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/processes.md#2025-04-21_snippet_2\n\nLANGUAGE: elixir\nCODE:\n```\nsend(self(), {:hello, \"world\"})\nreceive do\n  {:hello, msg} -> msg\n  {:world, _msg} -> \"won't match\"\nend\n```\n\n----------------------------------------\n\nTITLE: Basic Arithmetic Operations in Elixir\nDESCRIPTION: Shows basic arithmetic operations in Elixir including addition, multiplication, and division. Demonstrates how division always returns floats.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/basic-types.md#2025-04-21_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\niex> 1 + 2\n3\niex> 5 * 5\n25\niex> 10 / 2\n5.0\n```\n\n----------------------------------------\n\nTITLE: Debugging with IEx and Breakpoints\nDESCRIPTION: This snippet illustrates how to start an IEx session with debugging options and how to set breakpoints in the code without altering the source, allowing for detailed inspection during execution.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/debugging.md#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ iex --dbg pry\n```\n\nLANGUAGE: console\nCODE:\n```\n$ iex --dbg pry -S mix\n```\n\nLANGUAGE: console\nCODE:\n```\n$ iex -S mix test --breakpoints --failed\n```\n\nLANGUAGE: console\nCODE:\n```\n$ iex -S mix test -b path/to/file:line\n```\n\n----------------------------------------\n\nTITLE: Public and Private Function Definition\nDESCRIPTION: Demonstrates the difference between public (def) and private (defp) function definitions in Elixir.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/modules-and-functions.md#2025-04-21_snippet_4\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule Math do\n  def sum(a, b) do\n    do_sum(a, b)\n  end\n\n  defp do_sum(a, b) do\n    a + b\n  end\nend\n\nIO.puts Math.sum(1, 2)    #=> 3\nIO.puts Math.do_sum(1, 2) #=> ** (UndefinedFunctionError)\n```\n\n----------------------------------------\n\nTITLE: Creating and Inspecting a Stream in Elixir\nDESCRIPTION: Shows how to create a stream using `Stream.map` and how it returns a `Stream` data type representing the computation. This example demonstrates that stream operations are lazy and do not immediately execute the computation. This requires the `Stream` module.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/enumerable-and-streams.md#2025-04-21_snippet_7\n\nLANGUAGE: elixir\nCODE:\n```\niex> 1..100_000 |> Stream.map(&(&1 * 3))\n#Stream<[enum: 1..100000, funs: [#Function<34.16982430/1 in Stream.map/2>]]>\n```\n\n----------------------------------------\n\nTITLE: Chaining Stream Operations with Pipe in Elixir\nDESCRIPTION: Demonstrates chaining multiple `Stream` operations using the pipe operator `|>`. It starts with a range, lazily multiplies each element by 3, lazily filters out the even numbers, and then calculates the sum of the remaining odd numbers. This shows how data can be transformed through a series of operations in a concise manner. This snippet requires the `Stream` and `Enum` modules and knowledge of the pipe operator.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/enumerable-and-streams.md#2025-04-21_snippet_6\n\nLANGUAGE: elixir\nCODE:\n```\niex> 1..100_000 |> Stream.map(&(&1 * 3)) |> Stream.filter(odd?) |> Enum.sum()\n7500000000\n```\n\n----------------------------------------\n\nTITLE: Pattern Matching on Lists in Elixir\nDESCRIPTION: Demonstrates pattern matching on lists in Elixir, including matching on the head and tail of a list. Shows how to use the [head | tail] syntax for both pattern matching and list prepending.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/pattern-matching.md#2025-04-21_snippet_2\n\nLANGUAGE: elixir\nCODE:\n```\niex> [a, b, c] = [1, 2, 3]\n[1, 2, 3]\niex> a\n1\n\niex> [head | tail] = [1, 2, 3]\n[1, 2, 3]\niex> head\n1\niex> tail\n[2, 3]\n\niex> [head | tail] = []\n** (MatchError) no match of right hand side value: []\n\niex> list = [1, 2, 3]\n[1, 2, 3]\niex> [0 | list]\n[0, 1, 2, 3]\n```\n\n----------------------------------------\n\nTITLE: Function Definition with Guards\nDESCRIPTION: Shows how to implement function clauses with guards to handle different input cases.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/modules-and-functions.md#2025-04-21_snippet_5\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule Math do\n  def zero?(0) do\n    true\n  end\n\n  def zero?(x) when is_integer(x) do\n    false\n  end\nend\n\nIO.puts Math.zero?(0)         #=> true\nIO.puts Math.zero?(1)         #=> false\nIO.puts Math.zero?([1, 2, 3]) #=> ** (FunctionClauseError)\nIO.puts Math.zero?(0.0)       #=> ** (FunctionClauseError)\n```\n\n----------------------------------------\n\nTITLE: Basic String Module Usage in Elixir\nDESCRIPTION: Demonstrates the basic usage of the String module in Elixir by calculating string length.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/modules-and-functions.md#2025-04-21_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\niex> String.length(\"hello\")\n5\n```\n\n----------------------------------------\n\nTITLE: Type Inference Example - Map Field Access in Elixir\nDESCRIPTION: Demonstrates improved type inference for functions accessing map fields, where Elixir can now infer that the input must be a map with specific keys and numeric values.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\ndef add_foo_and_bar(data) do\n  data.foo + data.bar\nend\n```\n\n----------------------------------------\n\nTITLE: Applying Filters in Elixir Comprehensions\nDESCRIPTION: This example illustrates the use of filter conditions to select only specific elements from an enumerable before processing. It filters numbers divisible by 3 and computes their square, showcasing conditional processing within comprehensions.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/comprehensions.md#2025-04-21_snippet_3\n\nLANGUAGE: elixir\nCODE:\n```\niex> for n <- 0..5, rem(n, 3) == 0, do: n * n\n[0, 9]\n```\n\n----------------------------------------\n\nTITLE: Raising Runtime Errors with raise/1\nDESCRIPTION: Shows how to manually raise a runtime error in Elixir using the `raise/1` function. No additional dependencies are needed.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/try-catch-and-rescue.md#2025-04-21_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\niex> raise \"oops\"\n** (RuntimeError) oops\n```\n\n----------------------------------------\n\nTITLE: Streaming File Content with Enum in Elixir\nDESCRIPTION: This example showcases using `File.stream!()` to create a stream from a file and then using `Enum.take()` to retrieve a specified number of lines.  This approach is efficient for handling large files as it only loads a portion of the file into memory at a time. Requires the `File` and `Enum` modules.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/enumerable-and-streams.md#2025-04-21_snippet_10\n\nLANGUAGE: elixir\nCODE:\n```\niex> \"path/to/file\" |> File.stream!() |> Enum.take(10)\n```\n\n----------------------------------------\n\nTITLE: Starting and Monitoring Bucket Process in Registry\nDESCRIPTION: Initial implementation showing how the registry starts and monitors bucket processes using links and Process.monitor\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/mix-and-otp/dynamic-supervisor.md#2025-04-21_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\n{:ok, bucket} = KV.Bucket.start_link([])\nref = Process.monitor(bucket)\n```\n\n----------------------------------------\n\nTITLE: Mapping and Filtering with Elixir Comprehensions\nDESCRIPTION: The first snippet demonstrates using a comprehension to square elements of a list. It requires an enumerable input and outputs a list of squared numbers. This is a basic example showcasing the use of comprehensions for transformation.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/comprehensions.md#2025-04-21_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\niex> for n <- [1, 2, 3, 4], do: n * n\n[1, 4, 9, 16]\n```\n\n----------------------------------------\n\nTITLE: Using the Pin Operator in Elixir\nDESCRIPTION: Explains the use of the pin operator (^) in Elixir for matching against existing variable values instead of rebinding. Shows how it can be used in various pattern matching contexts.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/pattern-matching.md#2025-04-21_snippet_3\n\nLANGUAGE: elixir\nCODE:\n```\niex> x = 1\n1\niex> ^x = 2\n** (MatchError) no match of right hand side value: 2\n\niex> x = 1\n1\niex> [^x, 2, 3] = [1, 2, 3]\n[1, 2, 3]\niex> {y, ^x} = {2, 1}\n{2, 1}\niex> y\n2\niex> {y, ^x} = {2, 2}\n** (MatchError) no match of right hand side value: {2, 2}\n```\n\n----------------------------------------\n\nTITLE: Interacting with the Elixir Key-Value Store Process\nDESCRIPTION: This snippet shows how to interact with the `KV` module by starting the process in `iex`, sending `:get` and `:put` messages, and using `flush/0` to handle responses. The `send/2` function is used to pass messages to the process identified by `pid`. Initially, the state is empty, reflected by `nil` on retrieval, which changes after adding a key-value pair.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/processes.md#2025-04-21_snippet_10\n\nLANGUAGE: elixir\nCODE:\n```\niex> {:ok, pid} = KV.start_link()\n{:ok, #PID<0.62.0>}\niex> send(pid, {:get, :hello, self()})\n{:get, :hello, #PID<0.41.0>}\niex> flush()\nnil\n:ok\n```\n\n----------------------------------------\n\nTITLE: Basic Agent Operations in Elixir Console\nDESCRIPTION: Demonstrates basic Agent operations including starting, updating, getting values and stopping an agent.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/mix-and-otp/agents.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ iex -S mix\n```\n\nLANGUAGE: elixir\nCODE:\n```\niex> {:ok, agent} = Agent.start_link(fn -> [] end)\n{:ok, #PID<0.57.0>}\niex> Agent.update(agent, fn list -> [\"eggs\" | list] end)\n:ok\niex> Agent.get(agent, fn list -> list end)\n[\"eggs\"]\niex> Agent.stop(agent)\n:ok\n```\n\n----------------------------------------\n\nTITLE: Pattern Matching on Tuples in Elixir\nDESCRIPTION: Shows how to use pattern matching to destructure tuples in Elixir. Demonstrates successful matching and error cases when patterns don't match due to different sizes or types.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/pattern-matching.md#2025-04-21_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\niex> {a, b, c} = {:hello, \"world\", 42}\n{:hello, \"world\", 42}\niex> a\n:hello\niex> b\n\"world\"\n\niex> {a, b, c} = {:hello, \"world\"}\n** (MatchError) no match of right hand side value: {:hello, \"world\"}\n\niex> {a, b, c} = [:hello, \"world\", 42]\n** (MatchError) no match of right hand side value: [:hello, \"world\", 42]\n```\n\n----------------------------------------\n\nTITLE: Implementing Unless Macro and Function in Elixir\nDESCRIPTION: Shows the implementation of unless both as a macro and function, demonstrating the difference between macro expansion and function evaluation.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/meta-programming/macros.md#2025-04-21_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule Unless do\n  def fun_unless(clause, do: expression) do\n    if(!clause, do: expression)\n  end\n\n  defmacro macro_unless(clause, do: expression) do\n    quote do\n      if(!unquote(clause), do: unquote(expression))\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Mapping Ranges in Elixir\nDESCRIPTION: Illustrates the use of `Enum.map` to transform elements of a range. Each element in the range is multiplied by 2. This snippet requires the `Enum` module and an understanding of ranges in Elixir.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/enumerable-and-streams.md#2025-04-21_snippet_2\n\nLANGUAGE: elixir\nCODE:\n```\niex> Enum.map(1..3, fn x -> x * 2 end)\n[2, 4, 6]\n```\n\n----------------------------------------\n\nTITLE: Using the :into Option in Elixir Comprehensions\nDESCRIPTION: Utilizes the `:into` option to specify a different output data structure. This example removes spaces from a string and collects the result into another string, demonstrating data transformation capabilities within comprehensions.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/comprehensions.md#2025-04-21_snippet_7\n\nLANGUAGE: elixir\nCODE:\n```\niex> for <<c <- \" hello world \">>, c != ?\\s, into: \"\", do: <<c>>\n\"helloworld\"\n```\n\n----------------------------------------\n\nTITLE: Task-based Process Management\nDESCRIPTION: Shows how to use Task module for better process management and error reporting\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/processes.md#2025-04-21_snippet_8\n\nLANGUAGE: elixir\nCODE:\n```\nTask.start(fn -> raise \"oops\" end)\n```\n\n----------------------------------------\n\nTITLE: Using GenServer to Start a Registry and Manipulate Buckets\nDESCRIPTION: This snippet provides examples of how to start the GenServer registry, create a new named bucket, and look it up with respective API calls. It illustrates the asynchronous and synchronous request handling in GenServer.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/mix-and-otp/genservers.md#2025-04-21_snippet_2\n\nLANGUAGE: elixir\nCODE:\n```\niex> {:ok, registry} = GenServer.start_link(KV.Registry, :ok)\\n{:ok, #PID<0.136.0>}\\niex> GenServer.cast(registry, {:create, \"shopping\"})\\n:ok\\niex> {:ok, bucket} = GenServer.call(registry, {:lookup, \"shopping\"})\\n{:ok, #PID<0.174.0>}\n```\n\n----------------------------------------\n\nTITLE: Using Task.Supervisor to serve requests in Elixir\nDESCRIPTION: This code modifies the `loop_acceptor` function to use `Task.Supervisor.start_child` to start a new task under the supervision of `KVServer.TaskSupervisor` for each connection. It also sets the controlling process of the client socket to the newly created task, preventing the acceptor from crashing all clients if it fails. This ensures proper fault tolerance and prevents socket leaks if the acceptor process crashes.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/mix-and-otp/task-and-gen-tcp.md#2025-04-21_snippet_6\n\nLANGUAGE: elixir\nCODE:\n```\ndefp loop_acceptor(socket) do\n  {:ok, client} = :gen_tcp.accept(socket)\n  {:ok, pid} = Task.Supervisor.start_child(KVServer.TaskSupervisor, fn -> serve(client) end)\n  :ok = :gen_tcp.controlling_process(client, pid)\n  loop_acceptor(socket)\nend\n```\n\n----------------------------------------\n\nTITLE: Best Practice: Simplified Macro with Separate Function\nDESCRIPTION: Improved version that extracts macro logic into a separate function. This pattern improves testability and maintainability by providing a clear API that can be used without macros.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/meta-programming/macros.md#2025-04-21_snippet_6\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule MyModule do\n  defmacro my_macro(a, b, c) do\n    quote do\n      # Keep what you need to do here to a minimum\n      # and move everything else to a function\n      MyModule.do_this_that_and_that(unquote(a), unquote(b), unquote(c))\n    end\n  end\n\n  def do_this_that_and_that(a, b, c) do\n    do_this(a)\n    ...\n    do_that(b)\n    ...\n    and_that(c)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Chaining Enum Operations with Pipe in Elixir\nDESCRIPTION: Illustrates chaining multiple `Enum` operations using the pipe operator `|>`. It starts with a range, multiplies each element by 3, filters out the even numbers, and then calculates the sum of the remaining odd numbers.  This shows how data can be transformed through a series of operations in a concise manner. This snippet requires the `Enum` module and knowledge of the pipe operator.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/enumerable-and-streams.md#2025-04-21_snippet_5\n\nLANGUAGE: elixir\nCODE:\n```\niex> 1..100_000 |> Enum.map(&(&1 * 3)) |> Enum.filter(odd?) |> Enum.sum()\n7500000000\n```\n\n----------------------------------------\n\nTITLE: Capturing Functions with the Capture Operator\nDESCRIPTION: Explains how to capture an existing function into a data-type that can be passed around, similar to anonymous functions, using the `&` operator. It shows examples of capturing functions defined in modules and operators.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/anonymous-functions.md#2025-04-21_snippet_8\n\nLANGUAGE: elixir\nCODE:\n```\niex> fun = &is_atom/1\n&:erlang.is_atom/1\niex> is_function(fun)\ntrue\niex> fun.(:hello)\ntrue\niex> fun.(123)\nfalse\n```\n\nLANGUAGE: elixir\nCODE:\n```\niex> fun = &String.length/1\n&String.length/1\niex> fun.(\"hello\")\n5\n```\n\nLANGUAGE: elixir\nCODE:\n```\niex> add = &+/2\n&:erlang.+/2\niex> add.(1, 2)\n3\n```\n\n----------------------------------------\n\nTITLE: KV.Bucket Module Implementation\nDESCRIPTION: Implementation of a key-value store using Agents with get, put operations.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/mix-and-otp/agents.md#2025-04-21_snippet_3\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule KV.Bucket do\n  use Agent\n\n  @doc \"\"\"\n  Starts a new bucket.\n  \"\"\"\n  def start_link(_opts) do\n    Agent.start_link(fn -> %{} end)\n  end\n\n  @doc \"\"\"\n  Gets a value from the `bucket` by `key`.\n  \"\"\"\n  def get(bucket, key) do\n    Agent.get(bucket, &Map.get(&1, key))\n  end\n\n  @doc \"\"\"\n  Puts the `value` for the given `key` in the `bucket`.\n  \"\"\"\n  def put(bucket, key, value) do\n    Agent.update(bucket, &Map.put(&1, key, value))\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Elixir Server `serve` Function Using `with` Construct\nDESCRIPTION: This code demonstrates the `serve/1` function refactored to use the `with` construct. It attempts to read a line from the socket, parse the command, and then run the command. If any of these operations fail (i.e., return a value that does not match `{:ok, x}`), the `with` block aborts and returns the non-matching value. This greatly simplifies the error handling compared to nested `case` statements.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/mix-and-otp/docs-tests-and-with.md#2025-04-21_snippet_8\n\nLANGUAGE: elixir\nCODE:\n```\ndefp serve(socket) do\n  msg =\n    with {:ok, data} <- read_line(socket),\n         {:ok, command} <- KVServer.Command.parse(data),\n         do: KVServer.Command.run(command)\n\n  write_line(socket, msg)\n  serve(socket)\nend\n```\n\n----------------------------------------\n\nTITLE: Initializing GenServer Client API in Elixir\nDESCRIPTION: Defines client API methods for starting and interacting with a GenServer registry, providing methods to start the server, lookup buckets, and create new buckets\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/mix-and-otp/genservers.md#2025-04-21_snippet_3\n\nLANGUAGE: elixir\nCODE:\n```\ndef start_link(opts) do\n  GenServer.start_link(__MODULE__, :ok, opts)\nend\n\ndef lookup(server, name) do\n  GenServer.call(server, {:lookup, name})\nend\n\ndef create(server, name) do\n  GenServer.cast(server, {:create, name})\nend\n```\n\n----------------------------------------\n\nTITLE: Using Closures in Anonymous Functions\nDESCRIPTION: Explains how anonymous functions can access variables from their surrounding scope (closures).  An example shows how a function named `double` leverages a variable named `add` defined in the outer scope to double the passed in argument.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/anonymous-functions.md#2025-04-21_snippet_4\n\nLANGUAGE: elixir\nCODE:\n```\niex> double = fn a -> add.(a, a) end\n#Function<6.71889879/1 in :erl_eval.expr/5>\niex> double.(2)\n4\n```\n\n----------------------------------------\n\nTITLE: Implementing GenServer Registry Server Callbacks in Elixir\nDESCRIPTION: Defines comprehensive server callbacks for a GenServer registry, including initialization, lookup, create, and process monitoring handlers\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/mix-and-otp/genservers.md#2025-04-21_snippet_5\n\nLANGUAGE: elixir\nCODE:\n```\ndef init(:ok) do\n  names = %{}\n  refs = %{}\n  {:ok, {names, refs}}\nend\n\ndef handle_call({:lookup, name}, _from, state) do\n  {names, _} = state\n  {:reply, Map.fetch(names, name), state}\nend\n\ndef handle_cast({:create, name}, {names, refs}) do\n  if Map.has_key?(names, name) do\n    {:noreply, {names, refs}}\n  else\n    {:ok, bucket} = KV.Bucket.start_link([])\n    ref = Process.monitor(bucket)\n    refs = Map.put(refs, ref, name)\n    names = Map.put(names, name, bucket)\n    {:noreply, {names, refs}}\n  end\nend\n\ndef handle_info({:DOWN, ref, :process, _pid, _reason}, {names, refs}) do\n  {name, refs} = Map.pop(refs, ref)\n  names = Map.delete(names, name)\n  {:noreply, {names, refs}}\nend\n\ndef handle_info(msg, state) do\n  require Logger\n  Logger.debug(\"Unexpected message in KV.Registry: #{inspect(msg)}\")\n  {:noreply, state}\nend\n```\n\n----------------------------------------\n\nTITLE: Updating Nested Data with update_in/2 in Elixir\nDESCRIPTION: This snippet employs the `update_in/2` macro along with an anonymous function to modify a list within a nested map.  Specifically, it removes the string \"Clojure\" from the list of languages associated with the user 'mary'.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/keywords-and-maps.md#2025-04-21_snippet_8\n\nLANGUAGE: elixir\nCODE:\n```\niex> users = update_in(users[:mary].languages, fn languages -> List.delete(languages, \"Clojure\") end)\n[\n  john: %{age: 31, languages: [\"Erlang\", \"Ruby\", \"Elixir\"], name: \"John\"},\n  mary: %{age: 29, languages: [\"Elixir\", \"F#\"], name: \"Mary\"}\n]\n```\n\n----------------------------------------\n\nTITLE: Starting the Observer Tool\nDESCRIPTION: The snippet demonstrates how to initiate the Observer in IEx, following necessary application calls to ensure dependencies are in place. It presents the utility of the Observer for visualizing the runtime environment of Elixir applications.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/debugging.md#2025-04-21_snippet_3\n\nLANGUAGE: elixir\nCODE:\n```\n$ iex\niex> :observer.start()\n```\n\nLANGUAGE: elixir\nCODE:\n```\niex> Mix.ensure_application!(:wx)             # Not necessary on Erlang/OTP 27+\niex> Mix.ensure_application!(:runtime_tools)  # Not necessary on Erlang/OTP 27+\niex> Mix.ensure_application!(:observer)\niex> :observer.start()\n```\n\n----------------------------------------\n\nTITLE: Spawning Basic Elixir Process\nDESCRIPTION: Demonstrates how to spawn a new process using spawn/1 function that executes a simple arithmetic operation\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/processes.md#2025-04-21_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\nspawn(fn -> 1 + 2 end)\n```\n\n----------------------------------------\n\nTITLE: Logical Operators with Nil in Elixir\nDESCRIPTION: Demonstrates logical operators that work with nil values and how they handle truthy and falsy values.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/basic-types.md#2025-04-21_snippet_8\n\nLANGUAGE: elixir\nCODE:\n```\niex> 1 || true\n1\niex> false || 11\n11\n\niex> nil && 13\nnil\niex> true && 17\n17\n\niex> !true\nfalse\niex> !1\nfalse\niex> !nil\ntrue\n```\n\n----------------------------------------\n\nTITLE: Type Checking in Elixir\nDESCRIPTION: Demonstrates type checking using predicate functions like is_integer to verify value types.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/basic-types.md#2025-04-21_snippet_6\n\nLANGUAGE: elixir\nCODE:\n```\niex> is_integer(1)\ntrue\niex> is_integer(2.0)\nfalse\n```\n\n----------------------------------------\n\nTITLE: Rescuing Errors with try/rescue\nDESCRIPTION: This snippet shows using the `try/rescue` construct to catch and handle runtime errors, demonstrating different outcomes depending on whether the exception variable is used.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/try-catch-and-rescue.md#2025-04-21_snippet_4\n\nLANGUAGE: elixir\nCODE:\n```\niex> try do\n...>   raise \"oops\"\n...> rescue\n...>   e in RuntimeError -> e\n...> end\n%RuntimeError{message: \"oops\"}\n```\n\nLANGUAGE: elixir\nCODE:\n```\niex> try do\n...>   raise \"oops\"\n...> rescue\n...>   RuntimeError -> \"Error!\"\n...> end\n\"Error!\"\n```\n\n----------------------------------------\n\nTITLE: Importing Functions in Elixir\nDESCRIPTION: This code snippet demonstrates the import directive, showing how to access functions from a module without the fully-qualified name. It emphasizes the importance of importing only the necessary functions to avoid namespace pollution.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/alias-require-and-import.md#2025-04-21_snippet_2\n\nLANGUAGE: elixir\nCODE:\n```\niex> import List, only: [duplicate: 2]\nList\niex> duplicate(:ok, 3)\n[:ok, :ok, :ok]\n```\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule Math do\n  def some_function do\n    import List, only: [duplicate: 2]\n    duplicate(:ok, 10)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Multiple Generators in Elixir Comprehensions\nDESCRIPTION: This snippet demonstrates using multiple generators to iterate over a combination of directory paths and files. It calculates the size of each file, showcasing comprehensions handling multiple sources to compute results.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/comprehensions.md#2025-04-21_snippet_4\n\nLANGUAGE: elixir\nCODE:\n```\ndirs = [\"/home/mikey\", \"/home/james\"]\n\nfor dir <- dirs,\n    file <- File.ls!(dir),\n    path = Path.join(dir, file),\n    File.regular?(path) do\n  File.stat!(path).size\nend\n```\n\n----------------------------------------\n\nTITLE: Default Argument Evaluation\nDESCRIPTION: Shows how default arguments are evaluated at runtime rather than definition time.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/modules-and-functions.md#2025-04-21_snippet_8\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule DefaultTest do\n  def dowork(x \\\\ \"hello\") do\n    x\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using Agents for State Management in Elixir\nDESCRIPTION: Rewritten example using `Agent`, simplifying state management compared to the manual process approach. `Agent.start_link/1` initializes the state with an empty map. State updates and retrievals are performed with `Agent.update/2` and `Agent.get/2`, offering a more compact alternative for managing state in Elixir.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/processes.md#2025-04-21_snippet_13\n\nLANGUAGE: elixir\nCODE:\n```\niex> {:ok, pid} = Agent.start_link(fn -> %{} end)\n{:ok, #PID<0.72.0>}\niex> Agent.update(pid, fn map -> Map.put(map, :hello, :world) end)\n:ok\niex> Agent.get(pid, fn map -> Map.get(map, :hello) end)\n:world\n```\n\n----------------------------------------\n\nTITLE: Pattern Matching Against Existing Variables with the Pin Operator\nDESCRIPTION: Shows how to use the pin operator (^) to match against the value of an existing variable in a case statement, rather than rebinding the variable.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/case-cond-and-if.md#2025-04-21_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\niex> x = 1\n1\niex> case 10 do\n...>   ^x -> \"Won't match\"\n...>   _ -> \"Will match\"\n...> end\n\"Will match\"\n```\n\n----------------------------------------\n\nTITLE: Static vs Dynamic Map Access in Elixir\nDESCRIPTION: This example illustrates the risks of accessing map keys dynamically when they are expected to exist. It demonstrates how using static access can prevent unexpected nil values and improve code clarity.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/anti-patterns/code-anti-patterns.md#2025-04-21_snippet_10\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule Graphics do\n  def plot(point) do\n    # Some other code...\n    {point[:x], point[:y], point[:z]}\n  end\nend\n```\n\nLANGUAGE: elixir\nCODE:\n```\niex> point_2d = %{x: 2, y: 3}\n%{x: 2, y: 3}\niex> point_3d = %{x: 5, y: 6, z: 7}\n%{x: 5, y: 6, z: 7}\niex> Graphics.plot(point_2d)\n{2, 3, nil}\niex> Graphics.plot(point_3d)\n{5, 6, 7}\n```\n\nLANGUAGE: elixir\nCODE:\n```\niex> bad_point = %{y: 3, z: 4}\n%{y: 3, z: 4}\niex> Graphics.plot(bad_point)\n{nil, 3, 4}\n```\n\n----------------------------------------\n\nTITLE: Bitstring Generators in Elixir Comprehensions\nDESCRIPTION: This example uses bitstring comprehension to transform a list of pixels in binary format into a list of RGB tuples. It demonstrates comprehension usage for processing binary data in Elixir.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/comprehensions.md#2025-04-21_snippet_6\n\nLANGUAGE: elixir\nCODE:\n```\niex> pixels = <<213, 45, 132, 64, 76, 32, 76, 0, 0, 234, 32, 15>>\niex> for <<r::8, g::8, b::8 <- pixels>>, do: {r, g, b}\n[{213, 45, 132}, {64, 76, 32}, {76, 0, 0}, {234, 32, 15}]\n```\n\n----------------------------------------\n\nTITLE: Assertive Pattern Matching with case in Elixir\nDESCRIPTION: Demonstrates how to use case for assertive pattern matching, explicitly handling both success and error cases.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/anti-patterns/code-anti-patterns.md#2025-04-21_snippet_16\n\nLANGUAGE: elixir\nCODE:\n```\ncase some_function(arg) do\n  {:ok, value} -> # ...\n  {:error, _} -> # ...\nend\n```\n\n----------------------------------------\n\nTITLE: In-Memory and On-Disk Data Storage with `:ets` Module\nDESCRIPTION: This snippet showcases how to create and manipulate an ETS table in Erlang to store data as tuples. It emphasizes the protected nature of ETS tables, allowing only the owner process to write. Key-value store functionalities are also demonstrated.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/erlang-libraries.md#2025-04-21_snippet_5\n\nLANGUAGE: elixir\nCODE:\n```\niex> table = :ets.new(:ets_test, [])\n# Store as tuples with {name, population}\niex> :ets.insert(table, {\"China\", 1_374_000_000})\niex> :ets.insert(table, {\"India\", 1_284_000_000})\niex> :ets.insert(table, {\"USA\", 322_000_000})\niex> :ets.i(table)\n<1   > {<<\"India\">>,1284000000}\n<2   > {<<\"USA\">>,322000000}\n<3   > {<<\"China\">>,1374000000}\n```\n\n----------------------------------------\n\nTITLE: Basic if Statement Usage in Elixir\nDESCRIPTION: Demonstrates how to use the if control structure for simple conditional logic. The example shows both true and false conditions and their results.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/case-cond-and-if.md#2025-04-21_snippet_5\n\nLANGUAGE: elixir\nCODE:\n```\niex> if true do\n...>   \"This works!\"\n...> end\n\"This works!\"\niex> if false do\n...>   \"This will never be seen\"\n...> end\nnil\n```\n\n----------------------------------------\n\nTITLE: Supervised Task Configuration in Elixir\nDESCRIPTION: Configuration for running the TCP server as a supervised Task within the application's supervision tree. Shows both hardcoded and environment-variable based port configuration.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/mix-and-otp/task-and-gen-tcp.md#2025-04-21_snippet_2\n\nLANGUAGE: elixir\nCODE:\n```\n  def start(_type, _args) do\n    children = [\n      {Task, fn -> KVServer.accept(4040) end}\n    ]\n\n    opts = [strategy: :one_for_one, name: KVServer.Supervisor]\n    Supervisor.start_link(children, opts)\n  end\n```\n\nLANGUAGE: elixir\nCODE:\n```\nport = String.to_integer(System.get_env(\"PORT\") || \"4040\")\n# ...\n{Task, fn -> KVServer.accept(port) end}\n```\n\n----------------------------------------\n\nTITLE: Updating Nested Data with put_in/2 in Elixir\nDESCRIPTION: This code uses the `put_in/2` macro to update the age of the user 'john' in the nested data structure. It replaces the original age with a new value (31) while maintaining the immutability of the original data structure by creating a new updated copy.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/keywords-and-maps.md#2025-04-21_snippet_7\n\nLANGUAGE: elixir\nCODE:\n```\niex> users = put_in(users[:john].age, 31)\n[\n  john: %{age: 31, languages: [\"Erlang\", \"Ruby\", \"Elixir\"], name: \"John\"},\n  mary: %{age: 29, languages: [\"Elixir\", \"F#\", \"Clojure\"], name: \"Mary\"}\n]\n```\n\n----------------------------------------\n\nTITLE: Elixir Literals and Type Specification Syntax\nDESCRIPTION: Comprehensive example showing the diverse literal types supported in Elixir type specifications, including atoms, bitstrings, functions, integers, lists, maps, and tuples\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/references/typespecs.md#2025-04-21_snippet_2\n\nLANGUAGE: elixir\nCODE:\n```\ntype ::                               ## Atoms\n          :atom                           # atoms: :foo, :bar, ...\n          | true | false | nil            # special atom literals\n\n                                          ## Bitstrings\n          | <<>>                          # empty bitstring\n          | <<_::size>>                   # size is 0 or a positive integer\n          | <<_::_*unit>>                 # unit is an integer from 1 to 256\n          | <<_::size, _::_*unit>>\n```\n\n----------------------------------------\n\nTITLE: Defining and Implementing a Utility Protocol in Elixir\nDESCRIPTION: Shows how to define a Utility protocol and implement it for different types (BitString and Integer). This approach allows for better extensibility.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/protocols.md#2025-04-21_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\ndefprotocol Utility do\n  @spec type(t) :: String.t()\n  def type(value)\nend\n\ndefimpl Utility, for: BitString do\n  def type(_value), do: \"string\"\nend\n\ndefimpl Utility, for: Integer do\n  def type(_value), do: \"integer\"\nend\n```\n\n----------------------------------------\n\nTITLE: File Operations Without try/rescue Using Pattern Matching\nDESCRIPTION: Describes how to handle file reading operations in Elixir using pattern matching with `File.read/1`, emphasizing the use of tuples for success and error handling. Functions like `File.read/1` and `File.write/1` are used without exceptions.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/try-catch-and-rescue.md#2025-04-21_snippet_5\n\nLANGUAGE: elixir\nCODE:\n```\niex> File.read(\"hello\")\n{:error, :enoent}\niex> File.write(\"hello\", \"world\")\n:ok\niex> File.read(\"hello\")\n{:ok, \"world\"}\n```\n\nLANGUAGE: elixir\nCODE:\n```\niex> case File.read(\"hello\") do\n...>   {:ok, body} -> IO.puts(\"Success: #{body}\")\n...>   {:error, reason} -> IO.puts(\"Error: #{reason}\")\n...> end\n```\n\nLANGUAGE: elixir\nCODE:\n```\niex> File.read!(\"unknown\")\n** (File.Error) could not read file \"unknown\": no such file or directory\n    (elixir) lib/file.ex:272: File.read!/1\n```\n\n----------------------------------------\n\nTITLE: Graphemes and Codepoints in Elixir\nDESCRIPTION: Demonstrates how Elixir handles complex Unicode graphemes and codepoints.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/binaries-strings-and-charlists.md#2025-04-21_snippet_4\n\nLANGUAGE: elixir\nCODE:\n```\niex> String.codepoints(\"👩‍🚒\")\n[\"👩\", \"‍\", \"🚒\"]\niex> String.graphemes(\"👩‍🚒\")\n[\"👩‍🚒\"]\n```\n\n----------------------------------------\n\nTITLE: Unquoting a variable's value in Elixir\nDESCRIPTION: This snippet demonstrates the use of `unquote/1` to inject the value of a variable into a quoted expression. Without `unquote/1`, the variable name would be quoted literally. In this example, the value of the `number` variable (13) is injected into the expression `11 + number`.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/meta-programming/quote-and-unquote.md#2025-04-21_snippet_6\n\nLANGUAGE: elixir\nCODE:\n```\niex> number = 13\niex> Macro.to_string(quote do: 11 + unquote(number))\n\"11 + 13\"\n```\n\n----------------------------------------\n\nTITLE: Keyword List Representation and Manipulation\nDESCRIPTION: Shows how keyword lists are implemented as lists of tuples, demonstrating atom key requirements, ordering, and list operations\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/keywords-and-maps.md#2025-04-21_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\n[{:parts, 3}, {:trim, true}] == [parts: 3, trim: true]\n```\n\nLANGUAGE: elixir\nCODE:\n```\nlist = [a: 1, b: 2]\nlist ++ [c: 3]\n```\n\n----------------------------------------\n\nTITLE: Stream Processing with Elixir Comprehensions\nDESCRIPTION: Demonstrates using comprehensions with streams from the `IO` module to echo text input in uppercase. It highlights the capability of comprehensions to interact with streams and process IO operations.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/comprehensions.md#2025-04-21_snippet_9\n\nLANGUAGE: elixir\nCODE:\n```\niex> stream = IO.stream(:stdio, :line)\niex> for line <- stream, into: stream do\n...>   String.upcase(line) <> \"\\n\"\n...> end\n```\n\n----------------------------------------\n\nTITLE: Pattern Matching with Structs in Elixir\nDESCRIPTION: Demonstrates pattern matching on struct fields and ensuring matching value is of the same struct type.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/structs.md#2025-04-21_snippet_4\n\nLANGUAGE: elixir\nCODE:\n```\niex> %User{name: name} = john\n%User{age: 27, name: \"John\"}\niex> name\n\"John\"\niex> %User{} = %{}\n** (MatchError) no match of right hand side value: %{}\n```\n\n----------------------------------------\n\nTITLE: Initial acceptor loop implementation in Elixir\nDESCRIPTION: This code defines a function `loop_acceptor` that accepts a TCP connection on a given socket and then calls a `serve` function to handle it. Then the function calls itself, creating a loop for handling multiple connections. It is flawed because if `serve` crashes, the entire acceptor process crashes.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/mix-and-otp/task-and-gen-tcp.md#2025-04-21_snippet_3\n\nLANGUAGE: elixir\nCODE:\n```\ndefp loop_acceptor(socket) do\n  {:ok, client} = :gen_tcp.accept(socket)\n  serve(client)\n  loop_acceptor(socket)\nend\n```\n\n----------------------------------------\n\nTITLE: Complex Agent State Transformations\nDESCRIPTION: Shows various ways to transform Agent state using different data structures and operations.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/mix-and-otp/agents.md#2025-04-21_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\niex> {:ok, agent} = Agent.start_link(fn -> [] end)\n{:ok, #PID<0.338.0>}\niex> Agent.update(agent, fn _list -> 123 end)\n:ok\niex> Agent.update(agent, fn content -> %{a: content} end)\n:ok\niex> Agent.update(agent, fn content -> [12 | [content]] end)\n:ok\niex> Agent.update(agent, fn list -> [:nop | list] end)\n:ok\niex> Agent.get(agent, fn content -> content end)\n[:nop, 12, %{a: 123}]\n```\n\n----------------------------------------\n\nTITLE: Adding a Default true Condition in cond Statements\nDESCRIPTION: Shows how to add a true condition as the last clause in a cond statement to ensure there is always a match, similar to an else clause in other languages.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/case-cond-and-if.md#2025-04-21_snippet_10\n\nLANGUAGE: elixir\nCODE:\n```\niex> cond do\n...>   2 + 2 == 5 ->\n...>     \"This is never true\"\n...>   2 * 2 == 3 ->\n...>     \"Nor this\"\n...>   true ->\n...>     \"This is always true (equivalent to else)\"\n...> end\n\"This is always true (equivalent to else)\"\n```\n\n----------------------------------------\n\nTITLE: Creating and Accessing Maps\nDESCRIPTION: Demonstrates map creation, key access, and pattern matching with maps in Elixir, highlighting differences from keyword lists\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/keywords-and-maps.md#2025-04-21_snippet_2\n\nLANGUAGE: elixir\nCODE:\n```\nmap = %{:a => 1, 2 => :b}\nmap[:a]\nmap[2]\n```\n\nLANGUAGE: elixir\nCODE:\n```\nmap = %{name: \"John\", age: 23}\nmap.name\n```\n\n----------------------------------------\n\nTITLE: Implementing guards in Elixir function clauses\nDESCRIPTION: This snippet demonstrates how to use guards in function clauses to check for empty maps. It shows that guards allow for more specific matching than pattern matching alone.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/references/patterns-and-guards.md#2025-04-21_snippet_20\n\nLANGUAGE: elixir\nCODE:\n```\ndef empty_map?(map) when map_size(map) == 0, do: true\ndef empty_map?(map) when is_map(map), do: false\n```\n\n----------------------------------------\n\nTITLE: Capture Operator Shorthand\nDESCRIPTION: Illustrates how to use the capture operator `&` as a shortcut for creating functions that wrap existing functions. The `&1` represents the first argument passed into the function.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/anonymous-functions.md#2025-04-21_snippet_9\n\nLANGUAGE: elixir\nCODE:\n```\niex> is_arity_2 = &is_function(&1, 2)\n#Function<8.71889879/1 in :erl_eval.expr/5>\niex> is_arity_2.(add)\ntrue\n```\n\n----------------------------------------\n\nTITLE: Quoting a complex expression in Elixir\nDESCRIPTION: This snippet demonstrates the nested tuple structure that represents complex expressions when quoted. It shows how the `quote/2` macro captures the relationships between functions, operators, and arguments in an Abstract Syntax Tree (AST). The example quotes `sum(1, 2 + 3, 4)`.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/meta-programming/quote-and-unquote.md#2025-04-21_snippet_4\n\nLANGUAGE: elixir\nCODE:\n```\niex> quote do: sum(1, 2 + 3, 4)\n{:sum, [], [1, {:+, [context: Elixir, import: Kernel], [2, 3]}, 4]}\n```\n\n----------------------------------------\n\nTITLE: Recursive Sum Function in Elixir\nDESCRIPTION: This snippet implements a recursive function to sum a list of numbers. It uses pattern matching to separate the head from the tail of the list and accumulates the sum until the list is empty.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/recursion.md#2025-04-21_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule Math do\n  def sum_list([head | tail], accumulator) do\n    sum_list(tail, head + accumulator)\n  end\n\n  def sum_list([], accumulator) do\n    accumulator\n  end\nend\n\nIO.puts Math.sum_list([1, 2, 3], 0) #=> 6\n```\n\n----------------------------------------\n\nTITLE: Inter-Process Communication\nDESCRIPTION: Example of communication between parent and child processes using message passing\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/processes.md#2025-04-21_snippet_4\n\nLANGUAGE: elixir\nCODE:\n```\nparent = self()\nspawn(fn -> send(parent, {:hello, self()}) end)\nreceive do\n  {:hello, pid} -> \"Got hello from #{inspect pid}\"\nend\n```\n\n----------------------------------------\n\nTITLE: Elixir List Matching\nDESCRIPTION: Shows list matching in Elixir, requiring the same size and matching elements for a successful match. Examples illustrate successful matches and MatchErrors due to size or element mismatches.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/references/patterns-and-guards.md#2025-04-21_snippet_10\n\nLANGUAGE: elixir\nCODE:\n```\niex> [:ok, integer] = [:ok, 13]\n[:ok, 13]\n\n# won't match due to different size\niex> [:ok, integer] = [:ok, 11, 13]\n** (MatchError) no match of right hand side value: [:ok, 11, 13]\n\n# won't match due to mismatch on first element\niex> [:ok, binary] = [:error, :enoent]\n** (MatchError) no match of right hand side value: [:error, :enoent]\n```\n\n----------------------------------------\n\nTITLE: Implementing Type Checking with Pattern Matching in Elixir\nDESCRIPTION: Demonstrates a simple utility module that determines the type of input using pattern matching and guard clauses. This approach is limited in extensibility.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/protocols.md#2025-04-21_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule Utility do\n  def type(value) when is_binary(value), do: \"string\"\n  def type(value) when is_integer(value), do: \"integer\"\n  # ... other implementations ...\nend\n```\n\n----------------------------------------\n\nTITLE: Quoting a variable in Elixir\nDESCRIPTION: This example illustrates how variables are represented as tuples when quoted, with the last element being an atom representing the variable's context. Here, the variable `x` is quoted to reveal its internal structure.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/meta-programming/quote-and-unquote.md#2025-04-21_snippet_3\n\nLANGUAGE: elixir\nCODE:\n```\niex> quote do: x\n{:x, [], Elixir}\n```\n\n----------------------------------------\n\nTITLE: Defining Recursive Print Function in Elixir\nDESCRIPTION: This snippet defines a recursive function that prints a given message multiple times based on a specified count. It uses a guard clause to control the recursion and stops when the count reaches zero.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/recursion.md#2025-04-21_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule Recursion do\n  def print_multiple_times(msg, n) when n > 0 do\n    IO.puts(msg)\n    print_multiple_times(msg, n - 1)\n  end\n\n  def print_multiple_times(_msg, 0) do\n    :ok\n  end\nend\n\nRecursion.print_multiple_times(\"Hello!\", 3)\n# Hello!\n# Hello!\n# Hello!\n:ok\n```\n\nLANGUAGE: c\nCODE:\n```\nfor(i = 0; i < sizeof(array); i++) {\n  array[i] = array[i] * 2;\n}\n```\n\n----------------------------------------\n\nTITLE: Working with List Head and Tail in Elixir\nDESCRIPTION: Shows how to access list head and tail using hd/1 and tl/1 functions, including error handling for empty lists.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/lists-and-tuples.md#2025-04-21_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\niex> list = [1, 2, 3]\niex> hd(list)\n1\niex> tl(list)\n[2, 3]\n\niex> hd([])\n** (ArgumentError) argument error\n```\n\n----------------------------------------\n\nTITLE: Creating and Using ETS Table\nDESCRIPTION: This snippet demonstrates how to create an ETS table, insert a record, and perform a lookup operation, illustrating the basic functionalities provided by the ETS module in Elixir.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/mix-and-otp/erlang-term-storage.md#2025-04-21_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\niex> table = :ets.new(:buckets_registry, [:set, :protected])\n#Reference<0.1885502827.460455937.234656>\niex> :ets.insert(table, {\"foo\", self()})\ntrue\niex> :ets.lookup(table, \"foo\")\n[{\"foo\", #PID<0.41.0>}]\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Behaviour in Elixir\nDESCRIPTION: Illustrates how to define a behaviour module with callback specifications and implement it in multiple modules\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/references/typespecs.md#2025-04-21_snippet_6\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule Parser do\n  @callback parse(String.t) :: {:ok, term} | {:error, atom}\n  @callback extensions() :: [String.t]\nend\n\ndefmodule JSONParser do\n  @behaviour Parser\n\n  @impl Parser\n  def parse(str), do: {:ok, \"some json \" <> str}\n\n  @impl Parser\n  def extensions, do: [\".json\"]\nend\n```\n\nLANGUAGE: elixir\nCODE:\n```\ndef parse_path(filename, parsers) do\n  with {:ok, ext} <- parse_extension(filename),\n       {:ok, parser} <- find_parser(ext, parsers),\n       {:ok, contents} <- File.read(filename) do\n    parser.parse(contents)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: FIFO Queue with Erlang's `:queue` Module\nDESCRIPTION: This code snippet shows how to manage a first-in, first-out (FIFO) queue using the :queue module, with operations for adding elements to the queue and reading them in a FIFO order. It highlights efficient queue manipulations in Erlang.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/erlang-libraries.md#2025-04-21_snippet_7\n\nLANGUAGE: elixir\nCODE:\n```\niex> q = :queue.new\niex> q = :queue.in(\"A\", q)\niex> q = :queue.in(\"B\", q)\niex> {value, q} = :queue.out(q)\niex> value\n{:value, \"A\"}\niex> {value, q} = :queue.out(q)\niex> value\n{:value, \"B\"}\niex> {value, q} = :queue.out(q)\niex> value\n:empty\n```\n\n----------------------------------------\n\nTITLE: Using IO.inspect for Debugging Elixir Code\nDESCRIPTION: The code demonstrates the use of the IO.inspect/2 function to inspect values in a pipeline without altering the code's behavior. It shows how to use the label option for enhanced output visibility.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/debugging.md#2025-04-21_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\n(1..10)\n|> IO.inspect()\n|> Enum.map(fn x -> x * 2 end)\n|> IO.inspect()\n|> Enum.sum()\n|> IO.inspect()\n```\n\nLANGUAGE: elixir\nCODE:\n```\n[1, 2, 3]\n|> IO.inspect(label: \"before\")\n|> Enum.map(&(&1 * 2))\n|> IO.inspect(label: \"after\")\n|> Enum.sum\n```\n\nLANGUAGE: elixir\nCODE:\n```\ndef some_fun(a, b, c) do\n  IO.inspect(binding())\n  ...\nend\n```\n\n----------------------------------------\n\nTITLE: Updated Elixir Server `serve`, `read_line`, and `write_line` functions\nDESCRIPTION: These are the updated implementations of the `serve`, `read_line`, and `write_line` functions in the `KVServer` module.  The `serve` function now parses the incoming data using `KVServer.Command.parse` and then runs the command using `KVServer.Command.run`, handling potential errors. The `read_line` function now only calls `:gen_tcp.recv`. The `write_line` function is overloaded to handle different response types including `:ok`, `:error` with `:unknown_command`, `:error` with `:closed`, and other `:error` cases.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/mix-and-otp/docs-tests-and-with.md#2025-04-21_snippet_7\n\nLANGUAGE: elixir\nCODE:\n```\ndefp serve(socket) do\n  msg =\n    case read_line(socket) do\n      {:ok, data} ->\n        case KVServer.Command.parse(data) do\n          {:ok, command} ->\n            KVServer.Command.run(command)\n          {:error, _} = err ->\n            err\n        end\n      {:error, _} = err ->\n        err\n    end\n\n  write_line(socket, msg)\n  serve(socket)\nend\n\ndefp read_line(socket) do\n  :gen_tcp.recv(socket, 0)\nend\n\ndefp write_line(socket, {:ok, text}) do\n  :gen_tcp.send(socket, text)\nend\n\ndefp write_line(socket, {:error, :unknown_command}) do\n  # Known error; write to the client\n  :gen_tcp.send(socket, \"UNKNOWN COMMAND\\r\\n\")\nend\n\ndefp write_line(_socket, {:error, :closed}) do\n  # The connection was closed, exit politely\n  exit(:shutdown)\nend\n\ndefp write_line(socket, {:error, error}) do\n  # Unknown error; write to the client and exit\n  :gen_tcp.send(socket, \"ERROR\\r\\n\")\n  exit(error)\nend\n```\n\n----------------------------------------\n\nTITLE: String Operations in Elixir\nDESCRIPTION: Demonstrates string operations including concatenation, interpolation, and multiline strings.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/basic-types.md#2025-04-21_snippet_10\n\nLANGUAGE: elixir\nCODE:\n```\niex> \"hello \" <> \"world!\"\n\"hello world!\"\niex> string = \"world\"\niex> \"hello #{string}!\"\n\"hello world!\"\niex> \"hello\\nworld\"\n\"hello\\nworld\"\n```\n\n----------------------------------------\n\nTITLE: Handling errors in Elixir guards\nDESCRIPTION: This snippet shows how errors in guards cause the guard to fail instead of raising an exception. It demonstrates this behavior using the tuple_size/1 function in a case statement.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/references/patterns-and-guards.md#2025-04-21_snippet_22\n\nLANGUAGE: elixir\nCODE:\n```\niex> case \"hello\" do\n...>   something when tuple_size(something) == 2 ->\n...>     :worked\n...>   _anything_else ->\n...>     :failed\n...> end\n:failed\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic TCP Echo Server in Elixir\nDESCRIPTION: Core implementation of a TCP echo server that listens on a port, accepts connections, and echoes back received messages. Uses gen_tcp with binary format, line-based packets, and blocking mode.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/mix-and-otp/task-and-gen-tcp.md#2025-04-21_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule KVServer do\n  require Logger\n\n  def accept(port) do\n    {:ok, socket} =\n      :gen_tcp.listen(port, [:binary, packet: :line, active: false, reuseaddr: true])\n    Logger.info(\"Accepting connections on port #{port}\")\n    loop_acceptor(socket)\n  end\n\n  defp loop_acceptor(socket) do\n    {:ok, client} = :gen_tcp.accept(socket)\n    serve(client)\n    loop_acceptor(socket)\n  end\n\n  defp serve(socket) do\n    socket\n    |> read_line()\n    |> write_line(socket)\n\n    serve(socket)\n  end\n\n  defp read_line(socket) do\n    {:ok, data} = :gen_tcp.recv(socket, 0)\n    data\n  end\n\n  defp write_line(line, socket) do\n    :gen_tcp.send(socket, line)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Process Error Handling\nDESCRIPTION: Shows how errors are handled in isolated processes using spawn/1\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/processes.md#2025-04-21_snippet_6\n\nLANGUAGE: elixir\nCODE:\n```\nspawn(fn -> raise \"oops\" end)\n```\n\n----------------------------------------\n\nTITLE: Implementing Command Execution in Elixir for KVServer\nDESCRIPTION: This snippet defines the run/1 function to handle various commands (create, get, put, delete) by interacting with the KV.Registry. It also includes a private lookup/2 function for common bucket lookup functionality.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/mix-and-otp/docs-tests-and-with.md#2025-04-21_snippet_9\n\nLANGUAGE: elixir\nCODE:\n```\n@doc \"\"\"\nRuns the given command.\n\"\"\"\ndef run(command)\n\ndef run({:create, bucket}) do\n  KV.Registry.create(KV.Registry, bucket)\n  {:ok, \"OK\\r\\n\"}\nend\n\ndef run({:get, bucket, key}) do\n  lookup(bucket, fn pid ->\n    value = KV.Bucket.get(pid, key)\n    {:ok, \"#{value}\\r\\nOK\\r\\n\"}\n  end)\nend\n\ndef run({:put, bucket, key, value}) do\n  lookup(bucket, fn pid ->\n    KV.Bucket.put(pid, key, value)\n    {:ok, \"OK\\r\\n\"}\n  end)\nend\n\ndef run({:delete, bucket, key}) do\n  lookup(bucket, fn pid ->\n    KV.Bucket.delete(pid, key)\n    {:ok, \"OK\\r\\n\"}\n  end)\nend\n\ndefp lookup(bucket, callback) do\n  case KV.Registry.lookup(KV.Registry, bucket) do\n    {:ok, pid} -> callback.(pid)\n    :error -> {:error, :not_found}\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Process Monitoring Example in Elixir\nDESCRIPTION: Demonstrates process monitoring techniques using Elixir's Process module, showing how to monitor and handle process termination\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/mix-and-otp/genservers.md#2025-04-21_snippet_6\n\nLANGUAGE: elixir\nCODE:\n```\niex> {:ok, pid} = KV.Bucket.start_link([])\n{:ok, #PID<0.66.0>}\niex> Process.monitor(pid)\n#Reference<0.0.0.551>\niex> Agent.stop(pid)\n:ok\niex> flush()\n{:DOWN, #Reference<0.0.0.551>, :process, #PID<0.66.0>, :normal}\n```\n\n----------------------------------------\n\nTITLE: Using cond for Multiple Conditions in Elixir\nDESCRIPTION: Demonstrates the cond control structure which checks multiple conditions and executes the code for the first condition that evaluates to a truthy value.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/case-cond-and-if.md#2025-04-21_snippet_9\n\nLANGUAGE: elixir\nCODE:\n```\niex> cond do\n...>   2 + 2 == 5 ->\n...>     \"This will not be true\"\n...>   2 * 2 == 3 ->\n...>     \"Nor this\"\n...>   1 + 1 == 2 ->\n...>     \"But this will\"\n...> end\n\"But this will\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Delete Operation with Elixir Agent\nDESCRIPTION: Basic implementation of a delete function using Agent.get_and_update to remove a key-value pair from a map. The function demonstrates the separation between client and server operations in an Agent.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/mix-and-otp/agents.md#2025-04-21_snippet_6\n\nLANGUAGE: elixir\nCODE:\n```\ndef delete(bucket, key) do\n  Agent.get_and_update(bucket, fn map ->\n    Map.pop(map, key)\n  end)\nend\n```\n\n----------------------------------------\n\nTITLE: Reducing Arity by Grouping Parameters in Elixir\nDESCRIPTION: This snippet refactors a function that takes too many parameters, grouping them into maps to simplify the function's interface. This improves readability and maintainability while addressing the anti-pattern of long parameter lists.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/anti-patterns/code-anti-patterns.md#2025-04-21_snippet_8\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule Library do\n  # Too many parameters that can be grouped!\n  def loan(user_name, email, password, user_alias, book_title, book_ed) do\n    ...\n  end\nend\n```\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule Library do\n  def loan(%{name: name, email: email, password: password, alias: alias} = user, %{title: title, ed: ed} = book) do\n    ...\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Path Manipulation in Elixir\nDESCRIPTION: Demonstrates path joining and expansion using the Path module, ensuring cross-platform compatibility\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/io-and-the-file-system.md#2025-04-21_snippet_3\n\nLANGUAGE: elixir\nCODE:\n```\nPath.join(\"foo\", \"bar\")\nPath.expand(\"~/hello\")\n```\n\n----------------------------------------\n\nTITLE: UTF-8 String Pattern Matching in Elixir\nDESCRIPTION: Demonstrates proper pattern matching on UTF-8 encoded strings using the utf8 modifier.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/binaries-strings-and-charlists.md#2025-04-21_snippet_6\n\nLANGUAGE: elixir\nCODE:\n```\niex> <<x::utf8, rest::binary>> = \"über\"\n\"über\"\niex> x == ?ü\ntrue\niex> rest\n\"ber\"\n```\n\n----------------------------------------\n\nTITLE: Function with Default Arguments\nDESCRIPTION: Demonstrates how to define functions with default argument values.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/modules-and-functions.md#2025-04-21_snippet_7\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule Concat do\n  def join(a, b, sep \\\\ \" \") do\n    a <> sep <> b\n  end\nend\n\nIO.puts(Concat.join(\"Hello\", \"world\"))      #=> Hello world\nIO.puts(Concat.join(\"Hello\", \"world\", \"_\")) #=> Hello_world\n```\n\n----------------------------------------\n\nTITLE: Defining Nested Modules in Elixir\nDESCRIPTION: This code illustrates the definition and reference of nested modules in Elixir. It explains how nested modules can be accessed and the implications of moving them out of their parent scope.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/alias-require-and-import.md#2025-04-21_snippet_5\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule Foo do\n  defmodule Bar do\n  end\nend\n```\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule Foo.Bar do\nend\n\ndefmodule Foo do\n  alias Foo.Bar\n  # Can still access it as `Bar`\nend\n```\n\n----------------------------------------\n\nTITLE: Invoking Anonymous Function\nDESCRIPTION: Demonstrates how to invoke an anonymous function that's stored in a variable, using the dot syntax. The dot `.` makes it clear that you are calling an anonymous function, and not a named function.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/anonymous-functions.md#2025-04-21_snippet_2\n\nLANGUAGE: elixir\nCODE:\n```\niex> add.(1, 2)\n3\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Operators in Elixir\nDESCRIPTION: Demonstrates how to define custom operators ~> and <~ in Elixir using module definition. The operators implement maximum and minimum functions respectively.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/references/operators.md#2025-04-21_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule MyOperators do\n  # We define ~> to return the maximum of the given two numbers,\n  # and <~ to return the minimum.\n\n  def a ~> b, do: max(a, b)\n  def a <~ b, do: min(a, b)\nend\n```\n\n----------------------------------------\n\nTITLE: Composing Stream Operations in Elixir\nDESCRIPTION: Illustrates how stream operations can be composed using the pipe operator `|>`. The `Stream.map` and `Stream.filter` functions are chained together, creating a single stream that represents both operations. This demonstrates the composable nature of streams, allowing complex computations to be built from simpler operations. This requires the `Stream` module.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/enumerable-and-streams.md#2025-04-21_snippet_8\n\nLANGUAGE: elixir\nCODE:\n```\niex> 1..100_000 |> Stream.map(&(&1 * 3)) |> Stream.filter(odd?)\n#Stream<[enum: 1..100000, funs: [...]]>\n```\n\n----------------------------------------\n\nTITLE: Cartesian Product Calculation with Elixir Comprehensions\nDESCRIPTION: This comprehension calculates the Cartesian product of two lists, demonstrating how comprehensions can combine elements from different enumerables into new formats.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/comprehensions.md#2025-04-21_snippet_5\n\nLANGUAGE: elixir\nCODE:\n```\niex> for i <- [:a, :b, :c], j <- [1, 2], do:  {i, j}\n[a: 1, a: 2, b: 1, b: 2, c: 1, c: 2]\n```\n\n----------------------------------------\n\nTITLE: Creating and Accessing Maps in Elixir\nDESCRIPTION: Demonstrates the creation of a map, accessing its values, and updating a key-value pair.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/structs.md#2025-04-21_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\niex> map = %{a: 1, b: 2}\n%{a: 1, b: 2}\niex> map[:a]\n1\niex> %{map | a: 3}\n%{a: 3, b: 2}\n```\n\n----------------------------------------\n\nTITLE: Defining custom guards in Elixir\nDESCRIPTION: This example shows how to define custom guards using defguard/1 and use them in function definitions. It demonstrates creating an is_even/1 guard and using it in a function.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/references/patterns-and-guards.md#2025-04-21_snippet_25\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule MyInteger do\n  defguard is_even(term) when is_integer(term) and rem(term, 2) == 0\nend\n```\n\nLANGUAGE: elixir\nCODE:\n```\nimport MyInteger, only: [is_even: 1]\n\ndef my_function(number) when is_even(number) do\n  # do stuff\nend\n```\n\n----------------------------------------\n\nTITLE: Registering Process with a Name in Elixir\nDESCRIPTION: Illustrates how to register a process under a name using `Process.register/2`. Once registered, anyone knowing the name can send messages to the process. In this snippet, `:kv` is the name that allows sending messages like `:get`, simplifying interaction with the process.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/processes.md#2025-04-21_snippet_12\n\nLANGUAGE: elixir\nCODE:\n```\niex> Process.register(pid, :kv)\ntrue\niex> send(:kv, {:get, :hello, self()})\n{:get, :hello, #PID<0.41.0>}\niex> flush()\n:world\n:ok\n```\n\n----------------------------------------\n\nTITLE: Elixir Struct Matching\nDESCRIPTION: Demonstrates struct matching in Elixir, showing how to match struct fields and extract values. It also illustrates the CompileError that occurs when trying to match an unknown key.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/references/patterns-and-guards.md#2025-04-21_snippet_16\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule User do\n  defstruct [:name]\nend\n\niex> %User{name: name} = %User{name: \"meg\"}\n%User{name: \"meg\"}\niex> name\n\"meg\"\n\niex> %User{type: type} = %User{name: \"meg\"}\n** (CompileError) iex: unknown key :type for struct User\n```\n\n----------------------------------------\n\nTITLE: Ensuring Resource Cleanup with try/after in Elixir\nDESCRIPTION: This snippet demonstrates the use of the `try/after` construct in Elixir to manage resources. It ensures that a file is closed after attempting to write to it, even if an error occurs. The code highlights the behavior of the `after` block and its limits concerning linked process exits. Prerequisite includes having Elixir environment and the file should be open in `:write` mode before executing.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/try-catch-and-rescue.md#2025-04-21_snippet_10\n\nLANGUAGE: elixir\nCODE:\n```\niex> {:ok, file} = File.open(\"sample\", [:utf8, :write])\niex> try do\n...>   IO.write(file, \"olá\")\n...>   raise \"oops, something went wrong\"\n...> after\n...>   File.close(file)\n...> end\n** (RuntimeError) oops, something went wrong\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Supervisor in Elixir\nDESCRIPTION: Defines a supervisor module that monitors a KV.Registry process using a one-for-one supervision strategy. The supervisor is responsible for starting and restarting the registry process if it crashes.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/mix-and-otp/supervisor-and-application.md#2025-04-21_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule KV.Supervisor do\n  use Supervisor\n\n  def start_link(opts) do\n    Supervisor.start_link(__MODULE__, :ok, opts)\n  end\n\n  @impl true\n  def init(:ok) do\n    children = [\n      KV.Registry\n    ]\n\n    Supervisor.init(children, strategy: :one_for_one)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Elixir Binary Matching\nDESCRIPTION: Demonstrates binary matching in Elixir, including how to match segments with different types, sizes, and units. Refers to the `<<>>` documentation for a comprehensive definition.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/references/patterns-and-guards.md#2025-04-21_snippet_18\n\nLANGUAGE: elixir\nCODE:\n```\niex> <<val::unit(8)-size(2)-integer>> = <<123, 56>>\n\"{8\"\niex> val\n31544\n```\n\n----------------------------------------\n\nTITLE: Mapping Maps in Elixir\nDESCRIPTION: Shows how to use `Enum.map` to transform the key-value pairs of a map.  The function multiplies the key and value of each pair. This example requires the `Enum` module and knowledge of maps in Elixir.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/enumerable-and-streams.md#2025-04-21_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\niex> Enum.map(%{1 => 2, 3 => 4}, fn {k, v} -> k * v end)\n[2, 12]\n```\n\n----------------------------------------\n\nTITLE: Variable Interference Macro Example\nDESCRIPTION: Shows how to explicitly override variable hygiene using var!/1 in Elixir macros.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/meta-programming/macros.md#2025-04-21_snippet_3\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule Hygiene do\n  defmacro interference do\n    quote do: var!(a) = 1\n  end\nend\n\ndefmodule HygieneTest do\n  def go do\n    require Hygiene\n    a = 13\n    Hygiene.interference()\n    a\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Quoting a function call in Elixir\nDESCRIPTION: This snippet demonstrates how to use the `quote/2` macro to obtain the internal representation of an Elixir function call as a tuple. The resulting tuple represents the function name, metadata, and arguments. This example shows the internal representation of `sum(1, 2, 3)`. \nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/meta-programming/quote-and-unquote.md#2025-04-21_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\niex> quote do: sum(1, 2, 3)\n{:sum, [], [1, 2, 3]}\n```\n\n----------------------------------------\n\nTITLE: Importing Functions with Keyword Lists\nDESCRIPTION: Shows how keyword lists are used to specify function imports, demonstrating the ability to import multiple function variants\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/keywords-and-maps.md#2025-04-21_snippet_3\n\nLANGUAGE: elixir\nCODE:\n```\nimport String, only: [split: 1, split: 2]\nsplit(\"hello world\")\n```\n\n----------------------------------------\n\nTITLE: File Writing and Reading Operations\nDESCRIPTION: Illustrates file opening, writing binary content, closing files, and reading file contents using the File module\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/io-and-the-file-system.md#2025-04-21_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\n{:ok, file} = File.open(\"path/to/file/hello\", [:write])\nIO.binwrite(file, \"world\")\nFile.close(file)\nFile.read(\"path/to/file/hello\")\n```\n\n----------------------------------------\n\nTITLE: Elixir List Head Tail Matching\nDESCRIPTION: Demonstrates matching on non-empty lists using the `[head | tail]` notation in Elixir. It showcases extracting the head and tail of a list and handling multiple elements before the tail.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/references/patterns-and-guards.md#2025-04-21_snippet_11\n\nLANGUAGE: elixir\nCODE:\n```\niex> [head | tail] = [1, 2, 3]\n[1, 2, 3]\niex> head\n1\niex> tail\n[2, 3]\n\niex> [first, second | tail] = [1, 2, 3]\n[1, 2, 3]\niex> tail\n[3]\n```\n\n----------------------------------------\n\nTITLE: Documenting Math Module with @moduledoc and @doc in Elixir\nDESCRIPTION: This Elixir code defines a `Math` module with documentation using `@moduledoc` for the module and `@doc` for the `sum` function.  The `@moduledoc` attribute provides overall module documentation, including an example, while the `@doc` attribute documents the `sum` function. Elixir promotes Markdown with heredocs for writing readable documentation.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/module-attributes.md#2025-04-21_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule Math do\n  @moduledoc \"\"\"\n  Provides math-related functions.\n\n  ## Examples\n\n      iex> Math.sum(1, 2)\n      3\n\n  \"\"\"\n\n  @doc \"\"\"\n  Calculates the sum of two numbers.\n  \"\"\"\n  def sum(a, b), do: a + b\nend\n```\n\n----------------------------------------\n\nTITLE: Variable Scoping in Elixir Control Structures\nDESCRIPTION: Demonstrates variable scoping behavior in Elixir control structures. Changes to variables inside if, case, and similar structures are only visible within those structures.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/case-cond-and-if.md#2025-04-21_snippet_7\n\nLANGUAGE: elixir\nCODE:\n```\niex> x = 1\n1\niex> if true do\n...>   x = x + 1\n...> end\n2\niex> x\n1\n```\n\n----------------------------------------\n\nTITLE: Defining and Raising Custom Exceptions\nDESCRIPTION: Demonstrates how to define a custom exception in Elixir using `defexception/1` and how to raise it with and without a custom message. Dependency is the custom exception module.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/try-catch-and-rescue.md#2025-04-21_snippet_3\n\nLANGUAGE: elixir\nCODE:\n```\niex> defmodule MyError do\niex>   defexception message: \"default message\"\niex> end\niex> raise MyError\n** (MyError) default message\niex> raise MyError, message: \"custom message\"\n** (MyError) custom message\n```\n\n----------------------------------------\n\nTITLE: Modifying KV.Registry to Use ETS\nDESCRIPTION: This Elixir code snippet shows modifications made to the KV.Registry module to integrate ETS for bucket management, along with enhancements for starting the registry and the lookup process using ETS tables instead of internal maps.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/mix-and-otp/erlang-term-storage.md#2025-04-21_snippet_2\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule KV.Registry do\n  use GenServer\n\n  ## Client API\n\n  @doc \"\"\"\n  Starts the registry with the given options.\n\n  `:name` is always required.\n  \"\"\"\n  def start_link(opts) do\n    # 1. Pass the name to GenServer's init\n    server = Keyword.fetch!(opts, :name)\n    GenServer.start_link(__MODULE__, server, opts)\n  end\n\n  @doc \"\"\"\n  Looks up the bucket pid for `name` stored in `server`.\n\n  Returns `{:ok, pid}` if the bucket exists, `:error` otherwise.\n  \"\"\"\n  def lookup(server, name) do\n    # 2. Lookup is now done directly in ETS, without accessing the server\n    case :ets.lookup(server, name) do\n      [{^name, pid}] -> {:ok, pid}\n      [] -> :error\n    end\n  end\n\n  @doc \"\"\"\n  Ensures there is a bucket associated with the given `name` in `server`.\n  \"\"\"\n  def create(server, name) do\n    GenServer.cast(server, {:create, name})\n  end\n\n  ## Server callbacks\n\n  @impl true\n  def init(table) do\n    # 3. We have replaced the names map by the ETS table\n    names = :ets.new(table, [:named_table, read_concurrency: true])\n    refs  = %{}\n    {:ok, {names, refs}}\n  end\n\n  # 4. The previous handle_call callback for lookup was removed\n\n  @impl true\n  def handle_cast({:create, name}, {names, refs}) do\n    # 5. Read and write to the ETS table instead of the map\n    case lookup(names, name) do\n      {:ok, _pid} ->\n        {:noreply, {names, refs}}\n\n      :error ->\n        {:ok, pid} = DynamicSupervisor.start_child(KV.BucketSupervisor, KV.Bucket)\n        ref = Process.monitor(pid)\n        refs = Map.put(refs, ref, name)\n        :ets.insert(names, {name, pid})\n        {:noreply, {names, refs}}\n    end\n  end\n\n  @impl true\n  def handle_info({:DOWN, ref, :process, _pid, _reason}, {names, refs}) do\n    # 6. Delete from the ETS table instead of the map\n    {name, refs} = Map.pop(refs, ref)\n    :ets.delete(names, name)\n    {:noreply, {names, refs}}\n  end\n\n  @impl true\n  def handle_info(_msg, state) do\n    {:noreply, state}\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Reraise Exceptions for Logging and Monitoring\nDESCRIPTION: Illustrates how to use `try/rescue` constructs to log exceptions and re-raise them using `reraise`. It requires the Logger module for logging and uses `__STACKTRACE__` to maintain the original stack trace.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/try-catch-and-rescue.md#2025-04-21_snippet_6\n\nLANGUAGE: elixir\nCODE:\n```\ntry do\n  ... some code ... \nrescue\n  e ->\n    Logger.error(Exception.format(:error, e, __STACKTRACE__))\n    reraise e, __STACKTRACE__\nend\n```\n\n----------------------------------------\n\nTITLE: Float Rounding and Truncation in Elixir\nDESCRIPTION: Shows how to round floats to the nearest integer or truncate them using round and trunc functions.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/basic-types.md#2025-04-21_snippet_5\n\nLANGUAGE: elixir\nCODE:\n```\niex> round(3.58)\n4\niex> trunc(3.58)\n3\n```\n\n----------------------------------------\n\nTITLE: Fetching Documentation in Elixir with Code.fetch_docs/1\nDESCRIPTION: This snippet describes how documentation is handled in Elixir by highlighting the use of `Code.fetch_docs/1`. It explains how documentation is stored and retrieved from the bytecode, with limitations for in-memory modules.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/writing-documentation.md#2025-04-21_snippet_4\n\nLANGUAGE: elixir\nCODE:\n```\n```elixir\n# Fetch documentation for a module from its bytecode\ndocs = Code.fetch_docs(MyApp.Hello)\n```\n```\n\n----------------------------------------\n\nTITLE: Application Callback Implementation\nDESCRIPTION: Implements the Application behavior in the KV module to start the supervisor\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/mix-and-otp/supervisor-and-application.md#2025-04-21_snippet_9\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule KV do\n  use Application\n\n  @impl true\n  def start(_type, _args) do\n    # Although we don't use the supervisor name below directly,\n    # it can be useful when debugging or introspecting the system.\n    KV.Supervisor.start_link(name: KV.Supervisor)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Binary Pattern Matching in Elixir\nDESCRIPTION: Shows how to perform pattern matching on binaries and strings in Elixir.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/binaries-strings-and-charlists.md#2025-04-21_snippet_5\n\nLANGUAGE: elixir\nCODE:\n```\niex> <<0, 1, x>> = <<0, 1, 2>>\n<<0, 1, 2>>\niex> x\n2\n```\n\n----------------------------------------\n\nTITLE: GenServer Registry Test Case in Elixir\nDESCRIPTION: Demonstrates testing a GenServer registry by creating buckets, looking them up, and verifying their behavior using ExUnit test framework\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/mix-and-otp/genservers.md#2025-04-21_snippet_4\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule KV.RegistryTest do\n  use ExUnit.Case, async: true\n\n  setup do\n    registry = start_supervised!(KV.Registry)\n    %{registry: registry}\n  end\n\n  test \"spawns buckets\", %{registry: registry} do\n    assert KV.Registry.lookup(registry, \"shopping\") == :error\n\n    KV.Registry.create(registry, \"shopping\")\n    assert {:ok, bucket} = KV.Registry.lookup(registry, \"shopping\")\n\n    KV.Bucket.put(bucket, \"milk\", 1)\n    assert KV.Bucket.get(bucket, \"milk\") == 1\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Distributed Task Execution with Anonymous Function\nDESCRIPTION: Example of running a distributed task using Task.Supervisor with an anonymous function.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/mix-and-otp/distributed-tasks.md#2025-04-21_snippet_4\n\nLANGUAGE: elixir\nCODE:\n```\ntask = Task.Supervisor.async({KV.RouterTasks, :\"foo@computer-name\"}, fn ->\n  {:ok, node()}\nend)\n```\n\n----------------------------------------\n\nTITLE: Using else with if Statements in Elixir\nDESCRIPTION: Shows how to use the else clause with if statements to provide an alternative when the condition evaluates to false or nil.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/case-cond-and-if.md#2025-04-21_snippet_6\n\nLANGUAGE: elixir\nCODE:\n```\niex> if nil do\n...>   \"This won't be seen\"\n...> else\n...>   \"This will\"\n...> end\n\"This will\"\n```\n\n----------------------------------------\n\nTITLE: Creating Regular Expressions with Sigils in Elixir\nDESCRIPTION: Demonstrates how to create and use regular expressions using the ~r sigil, including pattern matching and case-insensitive modifier.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/sigils.md#2025-04-21_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\nregex = ~r/foo|bar/\n\"foo\" =~ regex\n\"bat\" =~ regex\n\n\"HELLO\" =~ ~r/hello/\n\"HELLO\" =~ ~r/hello/i\n```\n\n----------------------------------------\n\nTITLE: Using Generators in Elixir Comprehensions\nDESCRIPTION: This example shows a generator using a range. It demonstrates the simplicity of creating comprehensions with range-based generators to iterate over consecutive integers in Elixir.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/comprehensions.md#2025-04-21_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\niex> for n <- 1..4, do: n * n\n[1, 4, 9, 16]\n```\n\n----------------------------------------\n\nTITLE: Enabling Fallback to Any in Protocol Definition in Elixir\nDESCRIPTION: Demonstrates how to enable fallback to the Any implementation when no specific implementation is found for a type.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/protocols.md#2025-04-21_snippet_8\n\nLANGUAGE: elixir\nCODE:\n```\ndefprotocol Size do\n  @fallback_to_any true\n  def size(data)\nend\n```\n\n----------------------------------------\n\nTITLE: Working with Tuples in Elixir\nDESCRIPTION: Shows tuple creation, element access, and size operations using tuple_size/1 and elem/2 functions.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/lists-and-tuples.md#2025-04-21_snippet_3\n\nLANGUAGE: elixir\nCODE:\n```\niex> {:ok, \"hello\"}\n{:ok, \"hello\"}\niex> tuple_size({:ok, \"hello\"})\n2\n\niex> tuple = {:ok, \"hello\"}\n{:ok, \"hello\"}\niex> elem(tuple, 1)\n\"hello\"\niex> tuple_size(tuple)\n2\n```\n\n----------------------------------------\n\nTITLE: Defining Elixir Sigils\nDESCRIPTION: This example demonstrates how sigils are defined in Elixir using lowercase and uppercase letters. Uppercase sigils do not allow interpolation, while lowercase sigils do. The code showcases the difference in behavior between the two.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/references/syntax-reference.md#2025-04-21_snippet_4\n\nLANGUAGE: elixir\nCODE:\n```\n\"~s/f#{\\\"o\\\"}o/\\n~S/f#{\\\"o\\\"}o/\"\n```\n\n----------------------------------------\n\nTITLE: Recursive Double Function in Elixir\nDESCRIPTION: This snippet defines a recursive function that doubles each element in a list. It collects the results into a new list and demonstrates the recursion process until the original list is empty.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/recursion.md#2025-04-21_snippet_2\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule Math do\n  def double_each([head | tail]) do\n    [head * 2 | double_each(tail)]\n  end\n\n  def double_each([]) do\n    []\n  end\nend\n\nMath.double_each([1, 2, 3]) #=> [2, 4, 6]\n```\n\n----------------------------------------\n\nTITLE: Charlists Comparison Example in Elixir\nDESCRIPTION: Illustrates how charlists, which are lists of Unicode code points, can be compared to lists of integers in Elixir. This example uses single quotes to define a charlist and demonstrates its equivalence to a list of integer ASCII codes. No additional dependencies required.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/references/syntax-reference.md#2025-04-21_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\niex(6)> 'abc' === [97, 98, 99]\ntrue\n```\n\n----------------------------------------\n\nTITLE: Process Message Timeout\nDESCRIPTION: Shows how to implement a timeout when receiving messages in a process\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/processes.md#2025-04-21_snippet_3\n\nLANGUAGE: elixir\nCODE:\n```\nreceive do\n  {:hello, msg}  -> msg\nafter\n  1_000 -> \"nothing after 1s\"\nend\n```\n\n----------------------------------------\n\nTITLE: Elixir CompileError\nDESCRIPTION: Shows a CompileError that occurs when attempting to match against an unbound variable on the right side of the match operator (=). Variables must be assigned a value before they can be used in a pattern match.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/references/patterns-and-guards.md#2025-04-21_snippet_2\n\nLANGUAGE: elixir\nCODE:\n```\niex> 1 = y\n** (CompileError) iex:2: undefined variable \"y\"\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Types in Elixir\nDESCRIPTION: Shows different ways to define custom types using module attributes, including parameterized and access types\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/references/typespecs.md#2025-04-21_snippet_4\n\nLANGUAGE: elixir\nCODE:\n```\n@type type_name :: type\n@typep type_name :: type\n@opaque type_name :: type\n\n@type dict(key, value) :: [{key, value}]\n```\n\n----------------------------------------\n\nTITLE: String Splitting with Keyword List Options\nDESCRIPTION: Demonstrates using keyword lists to pass optional arguments to String.split/3, showing how to control splitting behavior with parts and trim options\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/keywords-and-maps.md#2025-04-21_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\nString.split(\"1 2 3 4\", \" \")\n```\n\nLANGUAGE: elixir\nCODE:\n```\nString.split(\"1 2 3 4\", \" \", [parts: 3])\n```\n\nLANGUAGE: elixir\nCODE:\n```\nString.split(\"1  2  3  4\", \" \", [parts: 3, trim: true])\n```\n\n----------------------------------------\n\nTITLE: Elixir Module Attribute Compilation Example\nDESCRIPTION: This snippet demonstrates how the Elixir compiler substitutes the value of a module attribute directly into a function where it's used.  The `@service` attribute, which holds a URI struct, is replaced with the actual struct value within the `status` function during compilation.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/module-attributes.md#2025-04-21_snippet_5\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule MyApp.Status do\n  def status(email) do\n    SomeHttpClient.get(%URI{\n      authority: \"example.com\",\n      host: \"example.com\",\n      port: 443,\n      scheme: \"https\"\n    })\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Pattern Matching for 2D and 3D Points in Elixir\nDESCRIPTION: Shows how to use pattern matching to handle different point types (2D and 3D) explicitly, improving code clarity and error handling.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/anti-patterns/code-anti-patterns.md#2025-04-21_snippet_12\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule Graphics do\n  # 3d\n  def plot(%{x: x, y: y, z: z}) do\n    # Some other code...\n    {x, y, z}\n  end\n\n  # 2d\n  def plot(%{x: x, y: y}) do\n    # Some other code...\n    {x, y}\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Pattern Matching with Anonymous Functions\nDESCRIPTION: Demonstrates how to use pattern matching, clauses, and guards within anonymous functions, similar to `case/2`. An example defines a function `f` with multiple clauses that execute based on the input values.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/anonymous-functions.md#2025-04-21_snippet_6\n\nLANGUAGE: elixir\nCODE:\n```\niex> f = fn\n...>   x, y when x > 0 -> x + y\n...>   x, y -> x * y\n...> end\n#Function<12.71889879/2 in :erl_eval.expr/5>\niex> f.(1, 3)\n4\niex> f.(-1, 3)\n-3\n```\n\n----------------------------------------\n\nTITLE: Creating Named ETS Table\nDESCRIPTION: This snippet shows how to create a named ETS table, allowing the table to be accessed by a given name, which facilitates more convenient interactions across different processes in Elixir.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/mix-and-otp/erlang-term-storage.md#2025-04-21_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\niex> :ets.new(:buckets_registry, [:named_table])\n:buckets_registry\niex> :ets.insert(:buckets_registry, {\"foo\", self()})\ntrue\niex> :ets.lookup(:buckets_registry, \"foo\")\n[{\"foo\", #PID<0.41.0>}]\n```\n\n----------------------------------------\n\nTITLE: Refactor acceptor loop using Task.start_link in Elixir\nDESCRIPTION: This code refactors the `loop_acceptor` function by using `Task.start_link/1` to spawn a new task for each connection. This solves the concurrency issue, but creates a new problem. Linking the serve task to the acceptor, a crash when serving a request will bring the acceptor, and consequently all other connections, down.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/mix-and-otp/task-and-gen-tcp.md#2025-04-21_snippet_4\n\nLANGUAGE: elixir\nCODE:\n```\ndefp loop_acceptor(socket) do\n  {:ok, client} = :gen_tcp.accept(socket)\n  Task.start_link(fn -> serve(client) end)\n  loop_acceptor(socket)\nend\n```\n\n----------------------------------------\n\nTITLE: Creating an Infinite Stream with Cycle in Elixir\nDESCRIPTION: Demonstrates the use of `Stream.cycle/1` to create an infinite stream from a finite enumerable.  The example then uses `Enum.take/2` to extract the first 10 elements from the infinite stream, showcasing how streams can represent infinite sequences. This example requires the `Stream` and `Enum` modules.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/enumerable-and-streams.md#2025-04-21_snippet_9\n\nLANGUAGE: elixir\nCODE:\n```\niex> stream = Stream.cycle([1, 2, 3])\n#Function<15.16982430/2 in Stream.unfold/2>\niex> Enum.take(stream, 10)\n[1, 2, 3, 1, 2, 3, 1, 2, 3, 1]\n```\n\n----------------------------------------\n\nTITLE: Return Values from try Constructs in Elixir\nDESCRIPTION: Shows correct handling of return values from a `try` block in Elixir, demonstrating that assignment of variables within the try should occur on return from the block. Necessary background includes familiarity with Elixir error handling and assignment operations.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/try-catch-and-rescue.md#2025-04-21_snippet_14\n\nLANGUAGE: elixir\nCODE:\n```\niex> what_happened =\n...>   try do\n...>     raise \"fail\"\n...>     :did_not_raise\n...>   rescue\n...>     _ -> :rescued\n...>   end\niex> what_happened\n:rescued\n```\n\n----------------------------------------\n\nTITLE: Using Enumerable Protocol with Enum Module\nDESCRIPTION: Demonstrates the usage of Enum module functions with collections implementing the Enumerable protocol. Shows examples of map and reduce operations.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/protocols.md#2025-04-21_snippet_9\n\nLANGUAGE: elixir\nCODE:\n```\niex> Enum.map([1, 2, 3], fn x -> x * 2 end)\n[2, 4, 6]\niex> Enum.reduce(1..3, 0, fn x, acc -> x + acc end)\n6\n```\n\n----------------------------------------\n\nTITLE: Creating Charlists in Elixir\nDESCRIPTION: Demonstrates two ways to create charlists using the ~c sigil and explicit list of code points. Shows how charlists are represented in Elixir.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/binaries-strings-and-charlists.md#2025-04-21_snippet_7\n\nLANGUAGE: elixir\nCODE:\n```\niex> ~c\"hello\"\n~c\"hello\"\niex> [?h, ?e, ?l, ?l, ?o]\n~c\"hello\"\n```\n\n----------------------------------------\n\nTITLE: Dynamic Supervisor Configuration\nDESCRIPTION: Initialization of supervisor with registry and dynamic bucket supervisor as children\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/mix-and-otp/dynamic-supervisor.md#2025-04-21_snippet_2\n\nLANGUAGE: elixir\nCODE:\n```\n  def init(:ok) do\n    children = [\n      {KV.Registry, name: KV.Registry},\n      {DynamicSupervisor, name: KV.BucketSupervisor, strategy: :one_for_one}\n    ]\n\n    Supervisor.init(children, strategy: :one_for_one)\n  end\n```\n\n----------------------------------------\n\nTITLE: Creating a Named Bucket Using Agent\nDESCRIPTION: This code snippet demonstrates how to start a named agent for a bucket, put and get values from the bucket. It emphasizes the importance of not using user-input strings as atom names due to memory management concerns.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/mix-and-otp/genservers.md#2025-04-21_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\niex> Agent.start_link(fn -> %{} end, name: :shopping)\\n{:ok, #PID<0.43.0>}\\niex> KV.Bucket.put(:shopping, \"milk\", 1)\\n:ok\\niex> KV.Bucket.get(:shopping, \"milk\")\\n1\n```\n\n----------------------------------------\n\nTITLE: IO Process Messaging Demonstration\nDESCRIPTION: Illustrates how IO operations are implemented as process messaging in the Erlang VM\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/io-and-the-file-system.md#2025-04-21_snippet_4\n\nLANGUAGE: elixir\nCODE:\n```\npid = spawn(fn ->\n  receive do\n    msg -> IO.inspect(msg)\n  end\nend)\nIO.write(pid, \"hello\")\n```\n\n----------------------------------------\n\nTITLE: Multi Alias/Import/Require/Use in Elixir\nDESCRIPTION: This snippet shows how to simultaneously alias multiple modules in Elixir, facilitating easier access to nested modules in applications.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/alias-require-and-import.md#2025-04-21_snippet_6\n\nLANGUAGE: elixir\nCODE:\n```\nalias MyApp.{Foo, Bar, Baz}\n```\n\n----------------------------------------\n\nTITLE: Pattern Matching and Filtering in Elixir Comprehensions\nDESCRIPTION: The snippet uses pattern matching within a comprehension to filter and transform elements based on the structure of input tuples. It highlights the power of Elixir's pattern matching in combination with comprehensions.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/comprehensions.md#2025-04-21_snippet_2\n\nLANGUAGE: elixir\nCODE:\n```\niex> values = [good: 1, good: 2, bad: 3, good: 4]\niex> for {:good, n} <- values, do: n * n\n[1, 4, 16]\n```\n\n----------------------------------------\n\nTITLE: List Performance Characteristics in Elixir\nDESCRIPTION: Shows performance implications of list operations like concatenation based on position.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/lists-and-tuples.md#2025-04-21_snippet_5\n\nLANGUAGE: elixir\nCODE:\n```\niex> list = [1, 2, 3]\n[1, 2, 3]\n\n# This is fast as we only need to traverse `[0]` to prepend to `list`\niex> [0] ++ list\n[0, 1, 2, 3]\n\n# This is slow as we need to traverse `list` to append 4\niex> list ++ [4]\n[1, 2, 3, 4]\n```\n\n----------------------------------------\n\nTITLE: Parsing Multiple Commands in Elixir Using Case\nDESCRIPTION: This code provides a complete implementation of the `parse/1` function. It uses a `case` statement to handle different commands based on the input `line`. It supports \"CREATE\", \"GET\", \"PUT\", and \"DELETE\" commands, returning appropriate tuples. If the command is unknown, it returns `{:error, :unknown_command}`.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/mix-and-otp/docs-tests-and-with.md#2025-04-21_snippet_4\n\nLANGUAGE: elixir\nCODE:\n```\ndef parse(line) do\n  case String.split(line) do\n    [\"CREATE\", bucket] -> {:ok, {:create, bucket}}\n    [\"GET\", bucket, key] -> {:ok, {:get, bucket, key}}\n    [\"PUT\", bucket, key, value] -> {:ok, {:put, bucket, key, value}}\n    [\"DELETE\", bucket, key] -> {:ok, {:delete, bucket, key}}\n    _ -> {:error, :unknown_command}\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Graph Algorithms with Erlang's `:digraph` Module\nDESCRIPTION: This example explains how to create and manipulate directed graphs using the :digraph module. It demonstrates adding vertices and edges, then finding the shortest path between vertices. The digraph structure is modified in-place, illustrating its reliance on ETS tables.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/erlang-libraries.md#2025-04-21_snippet_4\n\nLANGUAGE: elixir\nCODE:\n```\niex> digraph = :digraph.new()\niex> coords = [{0.0, 0.0}, {1.0, 0.0}, {1.0, 1.0}]\niex> [v0, v1, v2] = (for c <- coords, do: :digraph.add_vertex(digraph, c))\niex> :digraph.add_edge(digraph, v0, v1)\niex> :digraph.add_edge(digraph, v1, v2)\niex> :digraph.get_short_path(digraph, v0, v2)\n[{0.0, 0.0}, {1.0, 0.0}, {1.0, 1.0}]\n```\n\n----------------------------------------\n\nTITLE: Reading Module Attributes in Elixir\nDESCRIPTION: This snippet shows how to define a module attribute using `@` and read its value immediately after definition using `IO.inspect`. This demonstrates the use of module attributes as temporary storage during compilation.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/module-attributes.md#2025-04-21_snippet_3\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule MyServer do\n  @service URI.parse(\"https://example.com\")\n  IO.inspect(@service)\nend\n```\n\n----------------------------------------\n\nTITLE: Hiding Functions and Modules in Elixir Documentation\nDESCRIPTION: In this snippet, the usage of `@moduledoc false` and `@doc false` in Elixir is demonstrated to hide modules and functions from the documentation. It helps prevent functions from being exposed in the library's API.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/writing-documentation.md#2025-04-21_snippet_3\n\nLANGUAGE: elixir\nCODE:\n```\n```elixir\n\ndefmodule MyApp.Hidden do\n  @moduledoc false\n\n  @doc \"\"\"\n  This function won't be listed in docs.\n  \"\"\"\n  def function_that_wont_be_listed_in_docs do\n    # ...\n  end\nend\n\n\ndefmodule MyApp.Sample do\n  @doc false\n  def add(a, b), do: a + b\nend\n```\n```\n\n----------------------------------------\n\nTITLE: Updating Variables with if Return Values in Elixir\nDESCRIPTION: Shows how to update variables by assigning the return value of an if statement to the variable. This is the proper way to modify variables through control structures in Elixir.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/case-cond-and-if.md#2025-04-21_snippet_8\n\nLANGUAGE: elixir\nCODE:\n```\niex> x = 1\n1\niex> x = if true do\n...>   x + 1\n...> else\n...>   x\n...> end\n2\n```\n\n----------------------------------------\n\nTITLE: Custom Sigil Implementation in Elixir\nDESCRIPTION: Shows how to create custom sigils by implementing sigil_* functions, with an example of an integer sigil.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/sigils.md#2025-04-21_snippet_7\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule MySigils do\n  def sigil_i(string, []), do: String.to_integer(string)\n  def sigil_i(string, [?n]), do: -String.to_integer(string)\nend\nimport MySigils\n~i(13)\n~i(42)n\n```\n\n----------------------------------------\n\nTITLE: Elixir If Macro Implementation\nDESCRIPTION: Shows how the if/2 conditional is implemented as a macro in Elixir using case statements.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/meta-programming/macros.md#2025-04-21_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\ndefmacro if(clause, do: expression) do\n  quote do\n    case clause do\n      x when x in [false, nil] -> nil\n      _ -> unquote(expression)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using Capture Syntax with Enum Module in Elixir\nDESCRIPTION: This snippet presents a more concise way to use the Enum module with capture syntax for reduction and mapping of a list in Elixir, enhancing the readability and conciseness of the code.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/recursion.md#2025-04-21_snippet_4\n\nLANGUAGE: elixir\nCODE:\n```\niex> Enum.reduce([1, 2, 3], 0, &+/2)\n6\niex> Enum.map([1, 2, 3], &(&1 * 2))\n[2, 4, 6]\n```\n\n----------------------------------------\n\nTITLE: Pipe Operator Example in Elixir\nDESCRIPTION: Demonstrates the use of Elixir's pipe operator for chaining function calls. Shows both piped and non-piped equivalent expressions.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/mix-and-otp/task-and-gen-tcp.md#2025-04-21_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\nsocket |> read_line() |> write_line(socket)\n```\n\nLANGUAGE: elixir\nCODE:\n```\nwrite_line(read_line(socket), socket)\n```\n\n----------------------------------------\n\nTITLE: Integration Testing for KVServer in Elixir\nDESCRIPTION: This snippet demonstrates an integration test for KVServer. It sets up a TCP connection, sends various commands to the server, and verifies the responses. The test covers different scenarios including unknown commands and not found errors.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/mix-and-otp/docs-tests-and-with.md#2025-04-21_snippet_11\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule KVServerTest do\n  use ExUnit.Case\n\n  setup do\n    Application.stop(:kv)\n    :ok = Application.start(:kv)\n  end\n\n  setup do\n    opts = [:binary, packet: :line, active: false]\n    {:ok, socket} = :gen_tcp.connect(~c\"localhost\", 4040, opts)\n    %{socket: socket}\n  end\n\n  test \"server interaction\", %{socket: socket} do\n    assert send_and_recv(socket, \"UNKNOWN shopping\\r\\n\") ==\n           \"UNKNOWN COMMAND\\r\\n\"\n\n    assert send_and_recv(socket, \"GET shopping eggs\\r\\n\") ==\n           \"NOT FOUND\\r\\n\"\n\n    assert send_and_recv(socket, \"CREATE shopping\\r\\n\") ==\n           \"OK\\r\\n\"\n\n    assert send_and_recv(socket, \"PUT shopping eggs 3\\r\\n\") ==\n           \"OK\\r\\n\"\n\n    # GET returns two lines\n    assert send_and_recv(socket, \"GET shopping eggs\\r\\n\") == \"3\\r\\n\"\n    assert send_and_recv(socket, \"\") == \"OK\\r\\n\"\n\n    assert send_and_recv(socket, \"DELETE shopping eggs\\r\\n\") ==\n           \"OK\\r\\n\"\n\n    # GET returns two lines\n    assert send_and_recv(socket, \"GET shopping eggs\\r\\n\") == \"\\r\\n\"\n    assert send_and_recv(socket, \"\") == \"OK\\r\\n\"\n  end\n\n  defp send_and_recv(socket, command) do\n    :ok = :gen_tcp.send(socket, command)\n    {:ok, data} = :gen_tcp.recv(socket, 0, 1000)\n    data\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Creating a Synchronous Registry Bucket in Elixir\nDESCRIPTION: This snippet modifies the 'create' function to use GenServer.call instead of GenServer.cast, ensuring the client waits for the operation to complete before proceeding. This change helps eliminate race conditions by guaranteeing that the table is updated before a lookup is attempted.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/mix-and-otp/erlang-term-storage.md#2025-04-21_snippet_5\n\nLANGUAGE: elixir\nCODE:\n```\ndef create(server, name) do\n  GenServer.call(server, {:create, name})\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Struct Instances in Elixir\nDESCRIPTION: Demonstrates creating instances of the User struct, with and without overriding default values.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/structs.md#2025-04-21_snippet_2\n\nLANGUAGE: elixir\nCODE:\n```\niex> %User{}\n%User{age: 27, name: \"John\"}\niex> %User{name: \"Jane\"}\n%User{age: 27, name: \"Jane\"}\n```\n\n----------------------------------------\n\nTITLE: Remote Node Process Communication\nDESCRIPTION: Example of spawning a process on a remote node and implementing basic ping-pong message passing.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/mix-and-otp/distributed-tasks.md#2025-04-21_snippet_2\n\nLANGUAGE: elixir\nCODE:\n```\npid = Node.spawn_link(:\"foo@computer-name\", fn ->\n  receive do\n    {:ping, client} -> send(client, :pong)\n  end\nend)\n```\n\n----------------------------------------\n\nTITLE: Refactored Code Without Excessive Comments in Elixir\nDESCRIPTION: Improved version of the timestamp calculation function with better naming and module attributes instead of magic numbers.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/anti-patterns/code-anti-patterns.md#2025-04-21_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\n@five_min_in_seconds 60 * 5\n\ndefp unix_five_min_from_now do\n  now = DateTime.utc_now()\n  unix_now = DateTime.to_unix(now, :second)\n  unix_now + @five_min_in_seconds\nend\n```\n\n----------------------------------------\n\nTITLE: Transforming Map Values Using Elixir Comprehensions\nDESCRIPTION: Shows how to use the `:into` option in comprehensions to transform and collect map entries, illustrating the application of comprehensions for data manipulation in maps.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/comprehensions.md#2025-04-21_snippet_8\n\nLANGUAGE: elixir\nCODE:\n```\niex> for {key, val} <- %{\"a\" => 1, \"b\" => 2}, into: %{}, do: {key, val * val}\n%{\"a\" => 1, \"b\" => 4}\n```\n\n----------------------------------------\n\nTITLE: Testing Bucket Creation\nDESCRIPTION: This code snippet illustrates a test for ensuring that a bucket can be created and subsequently looked up using the modified KV.Registry, checking that the expected item can be stored and retrieved correctly.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/mix-and-otp/erlang-term-storage.md#2025-04-21_snippet_4\n\nLANGUAGE: elixir\nCODE:\n```\ntest \"spawns buckets\", %{registry: registry} do\n  assert KV.Registry.lookup(registry, \"shopping\") == :error\n\n  KV.Registry.create(registry, \"shopping\")\n  assert {:ok, bucket} = KV.Registry.lookup(registry, \"shopping\")\n\n  KV.Bucket.put(bucket, \"milk\", 1)\n  assert KV.Bucket.get(bucket, \"milk\") == 1\nend\n```\n\n----------------------------------------\n\nTITLE: Accessing Module Attributes Inside Functions in Elixir\nDESCRIPTION: This Elixir code demonstrates how to access module attributes within a function.  The `@service` attribute, which stores a pre-computed URI, is used inside the `status` function.  During compilation, the value of `@service` will be substituted directly into the function, showing how module attributes can act as temporary storage for computed values.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/module-attributes.md#2025-04-21_snippet_4\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule MyApp.Status do\n  @service URI.parse(\"https://example.com\")\n  def status(email) do\n    SomeHttpClient.get(@service)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Up Aliases in Elixir\nDESCRIPTION: This snippet illustrates how to create an alias for a module in Elixir using the alias directive. It allows referring to a module with a shorthand name, enhancing code readability.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/alias-require-and-import.md#2025-04-21_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\n# Alias the module so it can be called as Bar instead of Foo.Bar\nalias Foo.Bar, as: Bar\n```\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule Stats do\n  alias Math.List, as: List\n  # In the remaining module definition List expands to Math.List.\nend\n```\n\nLANGUAGE: elixir\nCODE:\n```\nalias Math.List\n```\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule Math do\n  def plus(a, b) do\n    alias Math.List\n    # ...\n  end\n\n  def minus(a, b) do\n    # ...\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Integer vs Float Comparison in Elixir\nDESCRIPTION: Shows the difference between == and === operators when comparing integers and floats in Elixir, where === is strict and == is loose comparison.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/references/operators.md#2025-04-21_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\niex> 1 == 1.0\ntrue\niex> 1 === 1.0\nfalse\n```\n\n----------------------------------------\n\nTITLE: Reducing Ranges in Elixir\nDESCRIPTION: Demonstrates the use of `Enum.reduce` to sum the elements of a range. The range `1..3` is reduced to a single value by adding each element to the accumulator, starting with an initial value of 0. This snippet requires the `Enum` module.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/enumerable-and-streams.md#2025-04-21_snippet_3\n\nLANGUAGE: elixir\nCODE:\n```\niex> Enum.reduce(1..3, 0, &+/2)\n6\n```\n\n----------------------------------------\n\nTITLE: KV.Bucket Test Implementation\nDESCRIPTION: ExUnit test case for KV.Bucket module testing basic key-value operations.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/mix-and-otp/agents.md#2025-04-21_snippet_2\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule KV.BucketTest do\n  use ExUnit.Case, async: true\n\n  test \"stores values by key\" do\n    {:ok, bucket} = KV.Bucket.start_link([])\n    assert KV.Bucket.get(bucket, \"milk\") == nil\n\n    KV.Bucket.put(bucket, \"milk\", 3)\n    assert KV.Bucket.get(bucket, \"milk\") == 3\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Examining Struct Properties in Elixir\nDESCRIPTION: Shows that structs are maps with a special __struct__ field, but don't inherit map protocols.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/structs.md#2025-04-21_snippet_5\n\nLANGUAGE: elixir\nCODE:\n```\niex> is_map(john)\ntrue\niex> john.__struct__\nUser\niex> john[:name]\n** (UndefinedFunctionError) function User.fetch/2 is undefined (User does not implement the Access behaviour)\n             User.fetch(%User{age: 27, name: \"John\"}, :name)\niex> Enum.each(john, fn {field, value} -> IO.puts(value) end)\n** (Protocol.UndefinedError) protocol Enumerable not implemented for %User{age: 27, name: \"John\"} of type User (a struct)\n```\n\n----------------------------------------\n\nTITLE: Defining a Struct in Elixir\nDESCRIPTION: Shows how to define a struct named User with default values for name and age fields.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/structs.md#2025-04-21_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\niex> defmodule User do\n...>   defstruct name: \"John\", age: 27\n...> end\n```\n\n----------------------------------------\n\nTITLE: Testing Registry Behavior with Synchronous Requests\nDESCRIPTION: The following tests validate the removal of buckets from the registry upon process termination. They utilize a synchronous command to ensure that the registry can process the termination notification, effectively eliminating race conditions when checking registry states after bucket termination.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/mix-and-otp/erlang-term-storage.md#2025-04-21_snippet_7\n\nLANGUAGE: elixir\nCODE:\n```\ntest \"removes buckets on exit\", %{registry: registry} do\n  KV.Registry.create(registry, \"shopping\")\n  {:ok, bucket} = KV.Registry.lookup(registry, \"shopping\")\n  Agent.stop(bucket)\n\n  // Do a call to ensure the registry processed the DOWN message\n  _ = KV.Registry.create(registry, \"bogus\")\n  assert KV.Registry.lookup(registry, \"shopping\") == :error\nend\n```\n\nLANGUAGE: elixir\nCODE:\n```\ntest \"removes bucket on crash\", %{registry: registry} do\n  KV.Registry.create(registry, \"shopping\")\n  {:ok, bucket} = KV.Registry.lookup(registry, \"shopping\")\n\n  // Stop the bucket with non-normal reason\n  Agent.stop(bucket, :shutdown)\n\n  // Do a call to ensure the registry processed the DOWN message\n  _ = KV.Registry.create(registry, \"bogus\")\n  assert KV.Registry.lookup(registry, \"shopping\") == :error\nend\n```\n\n----------------------------------------\n\nTITLE: Elixir Underscore Variable\nDESCRIPTION: Explains the use of the underscore variable (`_`) as a wildcard in pattern matching. It can match any value without binding it to a variable. Attempting to access the underscore variable after matching results in a CompileError.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/references/patterns-and-guards.md#2025-04-21_snippet_6\n\nLANGUAGE: elixir\nCODE:\n```\niex> {_, integer} = {:not_important, 1}\n{:not_important, 1}\niex> integer\n1\niex> _\n** (CompileError) iex:3: invalid use of _\n```\n\n----------------------------------------\n\nTITLE: Defining Anonymous Function\nDESCRIPTION: Shows how to define an anonymous function in Elixir using the `fn` and `end` keywords. The example defines a function that adds two arguments and stores it in the `add` variable, and then invokes the function using the dot syntax.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/anonymous-functions.md#2025-04-21_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\niex> add = fn a, b -> a + b end\n#Function<12.71889879/2 in :erl_eval.expr/5>\n```\n\n----------------------------------------\n\nTITLE: Using Macros in Elixir\nDESCRIPTION: This snippet explains the use macro, detailing how it incorporates functionality from another module into the current context. It provides an example of how to set up tests in Elixir using ExUnit.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/alias-require-and-import.md#2025-04-21_snippet_3\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule AssertionTest do\n  use ExUnit.Case, async: true\n\n  test \"always pass\" do\n    assert true\n  end\nend\n```\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule Example do\n  use Feature, option: :value\nend\n```\n\n----------------------------------------\n\nTITLE: Testing Router Functionality with ExUnit\nDESCRIPTION: This Elixir snippet sets up tests for the KV.Router module using ExUnit. It includes tests to verify routing and handling of unknown entries. The dependencies include the ExUnit framework, and it requires nodes to be running for distributed tests.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/mix-and-otp/distributed-tasks.md#2025-04-21_snippet_7\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule KV.RouterTest do\n  use ExUnit.Case, async: true\n\n  test \"route requests across nodes\" do\n    assert KV.Router.route(\"hello\", Kernel, :node, []) ==\n             :\"foo@computer-name\"\n    assert KV.Router.route(\"world\", Kernel, :node, []) ==\n             :\"bar@computer-name\"\n  end\n\n  test \"raises on unknown entries\" do\n    assert_raise RuntimeError, ~r/could not find entry/, fn ->\n      KV.Router.route(<<0>>, Kernel, :node, [])\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Initializing a Nested Data Structure (Keyword List of Maps) in Elixir\nDESCRIPTION: This code snippet initializes a keyword list where each key (john, mary) is associated with a map containing user information (name, age, languages). This demonstrates a common pattern of nesting maps within keyword lists in Elixir.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/keywords-and-maps.md#2025-04-21_snippet_5\n\nLANGUAGE: elixir\nCODE:\n```\niex> users = [\n  john: %{name: \"John\", age: 27, languages: [\"Erlang\", \"Ruby\", \"Elixir\"]},\n  mary: %{name: \"Mary\", age: 29, languages: [\"Elixir\", \"F#\", \"Clojure\"]}\n]\n[\n  john: %{age: 27, languages: [\"Erlang\", \"Ruby\", \"Elixir\"], name: \"John\"},\n  mary: %{age: 29, languages: [\"Elixir\", \"F#\", \"Clojure\"], name: \"Mary\"}\n]\n```\n\n----------------------------------------\n\nTITLE: Calendar Sigils in Elixir\nDESCRIPTION: Demonstrates the usage of various calendar-related sigils for dates, times, and datetimes.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/sigils.md#2025-04-21_snippet_6\n\nLANGUAGE: elixir\nCODE:\n```\nd = ~D[2019-10-31]\nd.day\n\nt = ~T[23:00:07.0]\nt.second\n\nndt = ~N[2019-10-31 23:00:07]\n\ndt = ~U[2019-10-31 19:59:03Z]\n%DateTime{minute: minute, time_zone: time_zone} = dt\n```\n\n----------------------------------------\n\nTITLE: Elixir Assignment\nDESCRIPTION: Demonstrates basic assignment and comparison using the match operator (=) in Elixir. The left side of the operator performs pattern matching, and a MatchError is raised if the pattern does not match.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/references/patterns-and-guards.md#2025-04-21_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\niex> x = 1\n1\niex> 1 = x\n1\n```\n\n----------------------------------------\n\nTITLE: String Interpolation and Escaping in Elixir Sigils\nDESCRIPTION: Shows the difference between lowercase and uppercase sigils for string interpolation and escape sequences.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/sigils.md#2025-04-21_snippet_5\n\nLANGUAGE: elixir\nCODE:\n```\n~s(String with escape codes \\x26 #{\"inter\" <> \"polation\"})\n~S(String without escape codes \\x26 without #{interpolation})\n```\n\n----------------------------------------\n\nTITLE: UTF-8 String Length and Byte Size in Elixir\nDESCRIPTION: Shows the difference between string length and byte size in UTF-8 encoded strings.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/binaries-strings-and-charlists.md#2025-04-21_snippet_3\n\nLANGUAGE: elixir\nCODE:\n```\niex> string = \"héllo\"\n\"héllo\"\niex> String.length(string)\n5\niex> byte_size(string)\n6\n```\n\n----------------------------------------\n\nTITLE: Defining Compile-Time Constants as Private Functions in Elixir\nDESCRIPTION: This code shows the preferred way to define constants in Elixir using private functions instead of module attributes. A private function `hours_in_a_day()` is defined to return the constant value, offering better encapsulation and avoiding potential issues associated with module attributes.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/module-attributes.md#2025-04-21_snippet_7\n\nLANGUAGE: elixir\nCODE:\n```\ndefp hours_in_a_day(), do: 24\n```\n\n----------------------------------------\n\nTITLE: Defining Structs with Default nil Values in Elixir\nDESCRIPTION: Demonstrates defining a struct with a field that defaults to nil.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/structs.md#2025-04-21_snippet_6\n\nLANGUAGE: elixir\nCODE:\n```\niex> defmodule Product do\n...>   defstruct [:name]\n...> end\niex> %Product{}\n%Product{name: nil}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Type with Documentation in Elixir\nDESCRIPTION: Demonstrates creating a custom type with documentation, type specification, and a simple function using the defined type\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/references/typespecs.md#2025-04-21_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule StringHelpers do\n  @typedoc \"A word from the dictionary\"\n  @type word() :: String.t()\n\n  @spec long_word?(word()) :: boolean()\n  def long_word?(word) when is_binary(word) do\n    String.length(word) > 8\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining a Size Protocol in Elixir\nDESCRIPTION: Defines a Size protocol that calculates the size of a data structure. This protocol is intended for data structures with pre-computed size information.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/protocols.md#2025-04-21_snippet_2\n\nLANGUAGE: elixir\nCODE:\n```\ndefprotocol Size do\n  @doc \"Calculates the size (and not the length!) of a data structure\"\n  def size(data)\nend\n```\n\n----------------------------------------\n\nTITLE: Creating a Bucket in KV Registry\nDESCRIPTION: Demonstrates how to create a new bucket in the KV Registry, which should spawn a new process visible in the Observer's supervision tree.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/mix-and-otp/dynamic-supervisor.md#2025-04-21_snippet_9\n\nLANGUAGE: elixir\nCODE:\n```\niex> KV.Registry.create(KV.Registry, \"shopping\")\n:ok\n```\n\n----------------------------------------\n\nTITLE: Defining External Dependencies with Hex Package Manager\nDESCRIPTION: Example showing how to specify an external dependency (Plug) using version constraints in mix.exs file.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/mix-and-otp/dependencies-and-umbrella-projects.md#2025-04-21_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\ndef deps do\n  [{:plug, \"~> 1.0\"}]\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Module Documentation with Attributes in Elixir\nDESCRIPTION: This snippet demonstrates how to define module documentation in Elixir using the `@moduledoc` attribute. The attribute allows you to provide a string containing documentation for the module, which can then be accessed via IEx or tools like ExDoc.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/module-attributes.md#2025-04-21_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule MyServer do\n  @moduledoc \"My server code.\"\nend\n```\n\n----------------------------------------\n\nTITLE: Function Type Intersection Example in Elixir\nDESCRIPTION: This example demonstrates how function types with multiple clauses are represented using intersections in Elixir's type system. The `negate` function, which can handle both integers and booleans, is described as belonging to both the `(integer() -> integer())` and `(boolean() -> boolean())` type sets, hence their intersection.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/references/gradual-set-theoretic-types.md#2025-04-21_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\n\"def negate(x) when is_integer(x), do: -x\ndef negate(x) when is_boolean(x), do: not x\"\n```\n\n----------------------------------------\n\nTITLE: Efficient Struct Usage in Elixir\nDESCRIPTION: Demonstrates efficient usage of structs with fewer than 32 fields, which allows for optimizations in memory usage and performance.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/anti-patterns/code-anti-patterns.md#2025-04-21_snippet_20\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule Example do\n  def users do\n    [%User{name: \"John\"}, %User{name: \"Meg\"}, ...]\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Mapping Lists in Elixir\nDESCRIPTION: Demonstrates the use of `Enum.map` to transform elements of a list by multiplying each element by 2.  The `Enum.map` function iterates through the list and applies the provided function to each element, returning a new list with the transformed elements.  This snippet requires the `Enum` module.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/enumerable-and-streams.md#2025-04-21_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\niex> Enum.map([1, 2, 3], fn x -> x * 2 end)\n[2, 4, 6]\n```\n\n----------------------------------------\n\nTITLE: Truthy Values in cond Statements\nDESCRIPTION: Demonstrates that cond considers any value besides nil and false to be true. This example shows how the return value of a function call can be used as a condition.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/case-cond-and-if.md#2025-04-21_snippet_11\n\nLANGUAGE: elixir\nCODE:\n```\niex> cond do\n...>   hd([1, 2, 3]) ->\n...>     \"1 is considered as true\"\n...> end\n\"1 is considered as true\"\n```\n\n----------------------------------------\n\nTITLE: Macro Hygiene Example in Elixir\nDESCRIPTION: Demonstrates macro hygiene by showing how variables in macros don't interfere with variables in the calling context.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/meta-programming/macros.md#2025-04-21_snippet_2\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule Hygiene do\n  defmacro no_interference do\n    quote do: a = 1\n  end\nend\n\ndefmodule HygieneTest do\n  def go do\n    require Hygiene\n    a = 13\n    Hygiene.no_interference()\n    a\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Atom Usage in Elixir\nDESCRIPTION: Shows how to use atoms (symbols) and perform equality comparisons between them.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/basic-types.md#2025-04-21_snippet_9\n\nLANGUAGE: elixir\nCODE:\n```\niex> :apple\n:apple\niex> :orange\n:orange\niex> :watermelon\n:watermelon\n```\n\n----------------------------------------\n\nTITLE: Refactored Route Macro in Elixir\nDESCRIPTION: Refactors the previous macro example to delegate logic to a function, minimizing the amount of code expanded during macro invocation. The `__define__/3` function centralizes error checking and attribute management, reducing compilation overhead.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/anti-patterns/macro-anti-patterns.md#2025-04-21_snippet_3\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule Routes do\n  defmacro get(route, handler) do\n    quote do\n      Routes.__define__(__MODULE__, unquote(route), unquote(handler))\n    end\n  end\n\n  def __define__(module, route, handler) do\n    if not is_binary(route) do\n      raise ArgumentError, \"route must be a binary\"\n    end\n\n    if not is_atom(handler) do\n      raise ArgumentError, \"handler must be a module\"\n    end\n\n    Module.put_attribute(module, :store_route_for_compilation, {route, handler})\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Math Module in Elixir\nDESCRIPTION: Shows how to define a simple Math module with a sum function that adds two numbers.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/modules-and-functions.md#2025-04-21_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\niex> defmodule Math do\n...>   def sum(a, b) do\n...>     a + b\n...>   end\n...> end\n\niex> Math.sum(1, 2)\n3\n```\n\n----------------------------------------\n\nTITLE: String Sigil Usage in Elixir\nDESCRIPTION: Demonstrates the ~s sigil for creating strings, particularly useful when the string contains double quotes.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/sigils.md#2025-04-21_snippet_2\n\nLANGUAGE: elixir\nCODE:\n```\n~s(this is a string with \"double\" quotes, not 'single' ones)\n```\n\n----------------------------------------\n\nTITLE: Raising Custom Errors with raise/2\nDESCRIPTION: Illustrates raising a custom error with a specified error name and message using `raise/2`. It requires defining the error and the message.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/try-catch-and-rescue.md#2025-04-21_snippet_2\n\nLANGUAGE: elixir\nCODE:\n```\niex> raise ArgumentError, message: \"invalid argument foo\"\n** (ArgumentError) invalid argument foo\n```\n\n----------------------------------------\n\nTITLE: Elixir String Prefix Matching\nDESCRIPTION: Shows prefix matching on strings using the binary concatenation operator (`<>`) in Elixir, enabling the extraction of the prefix and remaining part of the string.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/references/patterns-and-guards.md#2025-04-21_snippet_19\n\nLANGUAGE: elixir\nCODE:\n```\niex> \"hello \" <> world = \"hello world\"\n\"hello world\"\niex> world\n\"world\"\n```\n\n----------------------------------------\n\nTITLE: Elixir AST Representation of Operators\nDESCRIPTION: This snippet demonstrates how operators like `+` are represented in Elixir's Abstract Syntax Tree (AST) as non-qualified calls. The expression `1 + 2` is converted into a tuple where the first element is the operator as an atom, and the arguments are represented in a list.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/references/syntax-reference.md#2025-04-21_snippet_8\n\nLANGUAGE: elixir\nCODE:\n```\n\"quote do\\n  1 + 2\\nend\\n#=> {:+, [], [1, 2]}\"\n```\n\n----------------------------------------\n\nTITLE: Using throw and catch in Elixir\nDESCRIPTION: This snippet shows using `throw` and `catch` in Elixir for retrieving values, although such scenarios are rare. It involves throwing a value from a loop and catching it outside.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/try-catch-and-rescue.md#2025-04-21_snippet_7\n\nLANGUAGE: elixir\nCODE:\n```\niex> try do\n...>   Enum.each(-50..50, fn x ->\n...>     if rem(x, 13) == 0, do: throw(x)\n...>   end)\n...>   \"Got nothing\"\n...> catch\n...>   x -> \"Got #{x}\"\n...> end\n\"Got -39\"\n```\n\n----------------------------------------\n\nTITLE: Capture Operator with Operators and String Interpolation\nDESCRIPTION: Shows the capture syntax shorthand also works with operators or even string interpolation, providing equivalent anonymous function implementation.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/anonymous-functions.md#2025-04-21_snippet_10\n\nLANGUAGE: elixir\nCODE:\n```\niex> fun = &(&1 + 1)\n#Function<6.71889879/1 in :erl_eval.expr/5>\niex> fun.(1)\n2\n\niex> fun2 = &\"Good #{&1}\"\n#Function<6.127694169/1 in :erl_eval.expr/5>\niex> fun2.(\"morning\")\n\"Good morning\"\n```\n\n----------------------------------------\n\nTITLE: File Operations with Tagged Tuples in Elixir\nDESCRIPTION: Shows how File.read/1 uses tagged tuples to handle success and error cases.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/lists-and-tuples.md#2025-04-21_snippet_7\n\nLANGUAGE: elixir\nCODE:\n```\niex> File.read(\"path/to/existing/file\")\n{:ok, \"... contents ...\"}\niex> File.read(\"path/to/unknown/file\")\n{:error, :enoent}\n```\n\n----------------------------------------\n\nTITLE: Formatted Text Output using Erlang's `:io` Module\nDESCRIPTION: These examples show how to format text using Erlang's :io.format for terminal output and :io_lib.format for iolist formatting, similar to printf in C. Note the differences in format specifiers compared to printf. The output displays Pi formatted to three decimal places.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/erlang-libraries.md#2025-04-21_snippet_2\n\nLANGUAGE: elixir\nCODE:\n```\niex> :io.format(\"Pi is approximately given by:~10.3f~n\", [:math.pi])\nPi is approximately given by:     3.142\n:ok\niex> to_string(:io_lib.format(\"Pi is approximately given by:~10.3f~n\", [:math.pi]))\n\"Pi is approximately given by:     3.142\\n\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Size Protocol for Various Types in Elixir\nDESCRIPTION: Implements the Size protocol for BitString, Map, and Tuple types, demonstrating how to provide type-specific implementations.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/protocols.md#2025-04-21_snippet_3\n\nLANGUAGE: elixir\nCODE:\n```\ndefimpl Size, for: BitString do\n  def size(string), do: byte_size(string)\nend\n\ndefimpl Size, for: Map do\n  def size(map), do: map_size(map)\nend\n\ndefimpl Size, for: Tuple do\n  def size(tuple), do: tuple_size(tuple)\nend\n```\n\n----------------------------------------\n\nTITLE: Handling Exit Signals with catch\nDESCRIPTION: Examples of defining functions to handle exit signals using pattern matching with `catch` inside a module. This usage is less common in practice.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/try-catch-and-rescue.md#2025-04-21_snippet_9\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule Example do\n  def matched_catch do\n    exit(:timeout)\n  catch\n    :exit, :timeout ->\n      {:error, :timeout}\n  end\n\n  def mismatched_catch do\n    exit(:timeout)\n  catch\n    # Since no clause matches, this catch will have no effect\n    :exit, :explosion ->\n      {:error, :explosion}\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Mix\nDESCRIPTION: Illustrates running tests in an Elixir Mix project using 'mix test', displaying test results and handling failed tests.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/mix-and-otp/introduction-to-mix.md#2025-04-21_snippet_10\n\nLANGUAGE: console\nCODE:\n```\n$ mix test\nCompiled lib/kv.ex\nGenerated kv app\nRunning ExUnit with seed: 540224, max_cases: 16\n..\n\nFinished in 0.04 seconds\n1 doctest, 1 test, 0 failures\n```\n\nLANGUAGE: text\nCODE:\n```\n  1) test greets the world (KVTest)\n     test/kv_test.exs:5\n     Assertion with == failed\n     code:  assert KV.hello() == :oops\n     left:  :world\n     right: :oops\n     stacktrace:\n       test/kv_test.exs:6: (test)\n\n.\n\nFinished in 0.05 seconds\n1 doctest, 1 test, 1 failure\n```\n\n----------------------------------------\n\nTITLE: Elixir Struct Name Extraction\nDESCRIPTION: Shows how to extract the struct name during pattern matching by using a variable instead of the module name. The variable is then bound to the module representing the struct.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/references/patterns-and-guards.md#2025-04-21_snippet_17\n\nLANGUAGE: elixir\nCODE:\n```\niex> %struct_name{} = %User{name: \"meg\"}\n%User{name: \"meg\"}\niex> struct_name\nUser\n```\n\n----------------------------------------\n\nTITLE: Adding More Doctests in Elixir for Command Parsing\nDESCRIPTION: This code expands the doctests for the `KVServer.Command` module's `parse/1` function.  It includes tests for different commands such as \"CREATE\", \"PUT\", \"GET\", and \"DELETE\", as well as tests for whitespace-insensitive commands and error cases with unknown commands or incorrect arguments.  Each test case is defined using the `iex>` prompt followed by the expected result.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/mix-and-otp/docs-tests-and-with.md#2025-04-21_snippet_3\n\nLANGUAGE: elixir\nCODE:\n```\n@doc ~S\"\"\"\nParses the given `line` into a command.\n\n## Examples\n\n    iex> KVServer.Command.parse \"CREATE shopping\\r\\n\"\n    {:ok, {:create, \"shopping\"}}\n\n    iex> KVServer.Command.parse \"CREATE  shopping  \\r\\n\"\n    {:ok, {:create, \"shopping\"}}\n\n    iex> KVServer.Command.parse \"PUT shopping milk 1\\r\\n\"\n    {:ok, {:put, \"shopping\", \"milk\", \"1\"}}\n\n    iex> KVServer.Command.parse \"GET shopping milk\\r\\n\"\n    {:ok, {:get, \"shopping\", \"milk\"}}\n\n    iex> KVServer.Command.parse \"DELETE shopping eggs\\r\\n\"\n    {:ok, {:delete, \"shopping\", \"eggs\"}}\n\nUnknown commands or commands with the wrong number of\narguments return an error:\n\n    iex> KVServer.Command.parse \"UNKNOWN shopping eggs\\r\\n\"\n    {:error, :unknown_command}\n\n    iex> KVServer.Command.parse \"GET shopping\\r\\n\"\n    {:error, :unknown_command}\n\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Word List Sigil Usage in Elixir\nDESCRIPTION: Demonstrates the ~w sigil for creating lists of words with various type modifiers.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/sigils.md#2025-04-21_snippet_4\n\nLANGUAGE: elixir\nCODE:\n```\n~w(foo bar bat)\n~w(foo bar bat)a\n```\n\n----------------------------------------\n\nTITLE: Registry Usage Example\nDESCRIPTION: Demonstrates how to use the named registry in IEx to create and lookup buckets\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/mix-and-otp/supervisor-and-application.md#2025-04-21_snippet_6\n\nLANGUAGE: elixir\nCODE:\n```\niex> KV.Supervisor.start_link([])\n{:ok, #PID<0.66.0>}\niex> KV.Registry.create(KV.Registry, \"shopping\")\n:ok\niex> KV.Registry.lookup(KV.Registry, \"shopping\")\n{:ok, #PID<0.70.0>}\n```\n\n----------------------------------------\n\nTITLE: Original Elixir Server `serve`, `read_line`, and `write_line` functions\nDESCRIPTION: These are the initial implementations of the `serve`, `read_line`, and `write_line` functions in the `KVServer` module. The original code reads a line from the socket, echoes it back, and then recursively calls `serve`. The `read_line` function directly receives data from the socket, and the `write_line` function sends data back to the socket.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/mix-and-otp/docs-tests-and-with.md#2025-04-21_snippet_6\n\nLANGUAGE: elixir\nCODE:\n```\ndefp serve(socket) do\n  socket\n  |> read_line()\n  |> write_line(socket)\n\n  serve(socket)\nend\n\ndefp read_line(socket) do\n  {:ok, data} = :gen_tcp.recv(socket, 0)\n  data\nend\n\ndefp write_line(line, socket) do\n  :gen_tcp.send(socket, line)\nend\n```\n\n----------------------------------------\n\nTITLE: Elixir Type Specification Basic Types Example\nDESCRIPTION: Illustrates the syntax and variety of basic type specifications in Elixir, including primitive types, numbers, and collection types\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/references/typespecs.md#2025-04-21_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\ntype ::  any()                     # the top type, the set of all terms\n          | none()                  # the bottom type, contains no terms\n          | atom()\n          | map()                   # any map\n          | pid()                   # process identifier\n          | port()                  # port identifier\n          | reference()\n          | tuple()                 # tuple of any size\n\n                                    ## Numbers\n          | float()\n          | integer()\n          | neg_integer()           # ..., -3, -2, -1\n          | non_neg_integer()       # 0, 1, 2, 3, ...\n          | pos_integer()           # 1, 2, 3, ...\n```\n\n----------------------------------------\n\nTITLE: Using Nested iodata in Elixir\nDESCRIPTION: This snippet demonstrates how iodata can contain nested lists of strings, allowing for flexible and efficient string manipulation.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/io-and-the-file-system.md#2025-04-21_snippet_9\n\nLANGUAGE: elixir\nCODE:\n```\nIO.puts([\"apple\", [\",\", \"banana\", [\",\", \"lemon\"]]])\n```\n\n----------------------------------------\n\nTITLE: Elixir AST Representation of Tuples\nDESCRIPTION: This example illustrates how tuples are represented in Elixir's Abstract Syntax Tree (AST). Two-element tuples are represented as themselves, while tuples with more than two elements are represented as a tuple with the atom `:{}` and a list of elements.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/references/syntax-reference.md#2025-04-21_snippet_13\n\nLANGUAGE: elixir\nCODE:\n```\n\"quote do\\n  {1, 2}\\nend\\n#=> {1, 2}\"\n```\n\nLANGUAGE: elixir\nCODE:\n```\n\"quote do\\n  {1, 2, 3}\\nend\\n#=> {:{}, [], [1, 2, 3]}\"\n```\n\n----------------------------------------\n\nTITLE: Defining a 2D Point Struct in Elixir\nDESCRIPTION: Illustrates how to define a struct for a 2D point, which enforces static access to its fields and provides compile-time guarantees.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/anti-patterns/code-anti-patterns.md#2025-04-21_snippet_13\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule Point2D do\n  @enforce_keys [:x, :y]\n  defstruct [x: nil, y: nil]\nend\n```\n\n----------------------------------------\n\nTITLE: Basic String Binary Check in Elixir\nDESCRIPTION: Demonstrates how to check if a string is a binary using is_binary/1 function.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/binaries-strings-and-charlists.md#2025-04-21_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\niex> string = \"hello\"\n\"hello\"\niex> is_binary(string)\ntrue\n```\n\n----------------------------------------\n\nTITLE: Implementing Counter GenServer Module in Elixir\nDESCRIPTION: A GenServer implementation of a numerical counter that supports starting multiple counter instances, getting current values, and incrementing counter values. The module provides basic counter operations with configurable initial values and process names.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/anti-patterns/process-anti-patterns.md#2025-04-21_snippet_4\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule Counter do\n  @moduledoc \"\"\"\n  Global counter implemented through a GenServer process.\n  \"\"\"\n\n  use GenServer\n\n  @doc \"Starts a counter process.\"\n  def start_link(opts \\\\ []) do\n    initial_value = Keyword.get(opts, :initial_value, 0)\n    name = Keyword.get(opts, :name, __MODULE__)\n    GenServer.start(__MODULE__, initial_value, name: name)\n  end\n\n  @doc \"Gets the current value of the given counter.\"\n  def get(pid_name \\\\ __MODULE__) do\n    GenServer.call(pid_name, :get)\n  end\n\n  @doc \"Bumps the value of the given counter.\"\n  def bump(pid_name \\\\ __MODULE__, value) do\n    GenServer.call(pid_name, {:bump, value})\n  end\n\n  @impl true\n  def init(counter) do\n    {:ok, counter}\n  end\n\n  @impl true\n  def handle_call(:get, _from, counter) do\n    {:reply, counter, counter}\n  end\n\n  def handle_call({:bump, value}, _from, counter) do\n    {:reply, counter, counter + value}\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Tuple Modification in Elixir\nDESCRIPTION: Demonstrates tuple element modification using put_elem/3, highlighting immutability concept.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/lists-and-tuples.md#2025-04-21_snippet_4\n\nLANGUAGE: elixir\nCODE:\n```\niex> tuple = {:ok, \"hello\"}\n{:ok, \"hello\"}\niex> put_elem(tuple, 1, \"world\")\n{:ok, \"world\"}\niex> tuple\n{:ok, \"hello\"}\n```\n\n----------------------------------------\n\nTITLE: String Interpolation with to_string\nDESCRIPTION: Demonstrates string interpolation which internally uses the to_string function from String.Chars protocol.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/protocols.md#2025-04-21_snippet_11\n\nLANGUAGE: elixir\nCODE:\n```\niex> \"age: #{25}\"\n\"age: 25\"\n```\n\n----------------------------------------\n\nTITLE: Elixir Variable Matching\nDESCRIPTION: Demonstrates that if the same variable appears multiple times in a pattern, all instances must match the same value. If the values are different, a MatchError is raised.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/references/patterns-and-guards.md#2025-04-21_snippet_5\n\nLANGUAGE: elixir\nCODE:\n```\niex> {x, x} = {1, 1}\n{1, 1}\niex> {x, x} = {1, 2}\n** (MatchError) no match of right hand side value: {1, 2}\n```\n\n----------------------------------------\n\nTITLE: Project Configuration with mix.exs - Elixir\nDESCRIPTION: Defines project configuration using Mix. Sets application metadata like name and version, extra applications, and lists dependencies. Mix.env() is used to determine environment-specific settings.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/mix-and-otp/introduction-to-mix.md#2025-04-21_snippet_3\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule KV.MixProject do\n  use Mix.Project\n\n  def project do\n    [\n      app: :kv,\n      version: \"0.1.0\",\n      elixir: \"~> 1.11\",\n      start_permanent: Mix.env() == :prod,\n      deps: deps()\n    ]\n  end\n\n  # Run \"mix help compile.app\" to learn about applications\n  def application do\n    [\n      extra_applications: [:logger]\n    ]\n  end\n\n  # Run \"mix help deps\" to learn about dependencies\n  defp deps do\n    [\n      # {:dep_from_hexpm, \"~> 0.3.0\"},\n      # {:dep_from_git, git: \"https://github.com/elixir-lang/my_dep.git\", tag: \"0.1.0\"},\n    ]\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Enforcing Required Keys in Elixir Structs\nDESCRIPTION: Demonstrates how to use @enforce_keys to require certain keys when creating a struct.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/structs.md#2025-04-21_snippet_8\n\nLANGUAGE: elixir\nCODE:\n```\niex> defmodule Car do\n...>   @enforce_keys [:make]\n...>   defstruct [:model, :make]\n...> end\niex> %Car{}\n** (ArgumentError) the following keys must also be given when building struct Car: [:make]\n    expanding struct: Car.__struct__/1\n```\n\n----------------------------------------\n\nTITLE: String.Chars Protocol Usage\nDESCRIPTION: Shows how the String.Chars protocol converts data structures to strings using the to_string function.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/protocols.md#2025-04-21_snippet_10\n\nLANGUAGE: elixir\nCODE:\n```\niex> to_string(:hello)\n\"hello\"\n```\n\n----------------------------------------\n\nTITLE: Elixir AST Representation of Binaries\nDESCRIPTION: This example shows how binaries (e.g., `<<1, 2, 3>>`) are represented in Elixir's AST. They are represented similarly to tuples, but tagged with the atom `:<<>>` instead of `:{}`.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/references/syntax-reference.md#2025-04-21_snippet_14\n\nLANGUAGE: elixir\nCODE:\n```\n\"quote do\\n  <<1, 2, 3>>\\nend\\n#=> {:<<>>, [], [1, 2, 3]}\"\n```\n\n----------------------------------------\n\nTITLE: Updating Elixir Process State and Retrieving Values\nDESCRIPTION: Demonstrates updating a value in the `KV` process and retrieving it. The process state is updated with the `:put` message, adding a key-value pair. Subsequent `:get` message reflects the updated state, showcasing state persistence and retrieval through process messages.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/processes.md#2025-04-21_snippet_11\n\nLANGUAGE: elixir\nCODE:\n```\niex> send(pid, {:put, :hello, :world})\n{:put, :hello, :world}\niex> send(pid, {:get, :hello, self()})\n{:get, :hello, #PID<0.41.0>}\niex> flush()\n:world\n:ok\n```\n\n----------------------------------------\n\nTITLE: Monitoring and Linking Buckets in Elixir GenServer\nDESCRIPTION: This snippet demonstrates how to start a link to a KV.Bucket and set up a monitor for it within a GenServer. It's noted that this approach is not ideal, as linking the bucket to the registry could cause the registry to crash if the bucket fails.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/mix-and-otp/genservers.md#2025-04-21_snippet_7\n\nLANGUAGE: elixir\nCODE:\n```\n{:ok, bucket} = KV.Bucket.start_link([])\nref = Process.monitor(bucket)\n```\n\n----------------------------------------\n\nTITLE: Elixir Charlist Prefix Matching\nDESCRIPTION: Demonstrates prefix matching on charlists using the list concatenation operator (`++`) in Elixir. Similar to string prefix matching, this allows extracting the prefix and the remaining characters.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/references/patterns-and-guards.md#2025-04-21_snippet_13\n\nLANGUAGE: elixir\nCODE:\n```\niex> ~c\"hello \" ++ world = ~c\"hello world\"\n~c\"hello world\"\niex> world\n~c\"world\"\n```\n\n----------------------------------------\n\nTITLE: Parsing and Converting Status in Elixir\nDESCRIPTION: This snippet demonstrates a function that parses input data and converts status strings to atoms using explicit conversion. It includes error handling for unsupported statuses, ensuring that inputs are valid.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/anti-patterns/code-anti-patterns.md#2025-04-21_snippet_7\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule MyRequestHandler do\n  def parse(%{\"status\" => status, \"message\" => message} = _payload) do\n    %{status: convert_status(status), message: message}\n  end\n\n  defp convert_status(\"ok\"), do: :ok\n  defp convert_status(\"error\"), do: :error\n  defp convert_status(\"redirect\"), do: :redirect\nend\n```\n\nLANGUAGE: elixir\nCODE:\n```\niex> MyRequestHandler.parse(%{\"status\" => \"status_not_seen_anywhere\", \"message\" => \"all good\"})\n** (FunctionClauseError) no function clause matching in MyRequestHandler.convert_status/1\n```\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule MyRequestHandler do\n  def parse(%{\"status\" => status, \"message\" => message} = _payload) do\n    %{status: String.to_existing_atom(status), message: message}\n  end\nend\n```\n\nLANGUAGE: elixir\nCODE:\n```\niex> MyRequestHandler.parse(%{\"status\" => \"status_not_seen_anywhere\", \"message\" => \"all good\"})\n** (ArgumentError) errors were found at the given arguments:\n\n  * 1st argument: not an already existing atom\n```\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule MyRequestHandler do\n  def parse(%{\"status\" => status, \"message\" => message} = _payload) do\n    %{status: String.to_existing_atom(status), message: message}\n  end\n\n  def handle(%{status: status}) do\n    case status do\n      :ok -> ...\n      :error -> ...\n      :redirect -> ...\n    end\n  end\nend\n```\n\nLANGUAGE: elixir\nCODE:\n```\ndef valid_statuses do\n  [:ok, :error, :redirect]\nend\n```\n\n----------------------------------------\n\nTITLE: Elixir AST Representation of Remote Calls\nDESCRIPTION: This example illustrates how remote calls (e.g., `foo.bar(1, 2, 3)`) are represented in Elixir's AST. The dot operator `.` is used, with the first argument being the expression on the left side of the dot and the second argument being the atom representing the function being called.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/references/syntax-reference.md#2025-04-21_snippet_9\n\nLANGUAGE: elixir\nCODE:\n```\n\"quote do\\n  foo.bar(1, 2, 3)\\nend\\n#=> {{:., [], [{:foo, [], Elixir}, :bar]}, [], [1, 2, 3]}\"\n```\n\n----------------------------------------\n\nTITLE: Starting a Task Supervisor in Elixir\nDESCRIPTION: This code defines a `start` function that starts a `Task.Supervisor` as part of a supervision tree. The children include the supervisor itself and a task that calls `KVServer.accept(port)`.  This allows the server to handle connections concurrently.  The `strategy: :one_for_one` configuration specifies that if one child fails, only that child is restarted.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/mix-and-otp/task-and-gen-tcp.md#2025-04-21_snippet_5\n\nLANGUAGE: elixir\nCODE:\n```\ndef start(_type, _args) do\n    port = String.to_integer(System.get_env(\"PORT\") || \"4040\")\n\n    children = [\n      {Task.Supervisor, name: KVServer.TaskSupervisor},\n      {Task, fn -> KVServer.accept(port) end}\n    ]\n\n    opts = [strategy: :one_for_one, name: KVServer.Supervisor]\n    Supervisor.start_link(children, opts)\n  end\n```\n\n----------------------------------------\n\nTITLE: Using Enum Module for Reduction and Mapping in Elixir\nDESCRIPTION: This snippet showcases the usage of the Enum module to perform reduction and mapping operations on a list. It simplifies the process of summing and doubling list elements without explicit recursion.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/recursion.md#2025-04-21_snippet_3\n\nLANGUAGE: elixir\nCODE:\n```\niex> Enum.reduce([1, 2, 3], 0, fn x, acc -> x + acc end)\n6\niex> Enum.map([1, 2, 3], fn x -> x * 2 end)\n[2, 4, 6]\n```\n\n----------------------------------------\n\nTITLE: Refactoring Map Access in Elixir\nDESCRIPTION: Demonstrates how to refactor map access to use both dynamic and static syntax based on requirements. This approach improves clarity and intent in the code.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/anti-patterns/code-anti-patterns.md#2025-04-21_snippet_11\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule Graphics do\n  def plot(point) do\n    # Some other code...\n    {point.x, point.y, point[:z]}\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Distributed Task with Explicit Module Function\nDESCRIPTION: Example of running a distributed task using explicit module, function, and arguments approach.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/mix-and-otp/distributed-tasks.md#2025-04-21_snippet_5\n\nLANGUAGE: elixir\nCODE:\n```\ntask = Task.Supervisor.async({KV.RouterTasks, :\"foo@computer-name\"}, Kernel, :node, [])\n```\n\n----------------------------------------\n\nTITLE: Unicode Character Representation in Elixir\nDESCRIPTION: Demonstrates Unicode character representation using \\uXXXX notation and comparison.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/binaries-strings-and-charlists.md#2025-04-21_snippet_2\n\nLANGUAGE: elixir\nCODE:\n```\niex> \"\\u0061\" == \"a\"\ntrue\niex> 0x0061 = 97 = ?a\n97\n```\n\n----------------------------------------\n\nTITLE: Using Inspect Protocol\nDESCRIPTION: Demonstrates the use of the inspect function based on the Inspect protocol for converting complex data structures to readable text.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/protocols.md#2025-04-21_snippet_13\n\nLANGUAGE: elixir\nCODE:\n```\niex> \"tuple: #{inspect(tuple)}\"\n\"tuple: {1, 2, 3}\"\n```\n\n----------------------------------------\n\nTITLE: Elixir AST Representation of Lists\nDESCRIPTION: This snippet demonstrates how lists are represented as literals in Elixir's Abstract Syntax Tree (AST). The list `[1, 2, 3]` is represented as itself in the AST.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/references/syntax-reference.md#2025-04-21_snippet_12\n\nLANGUAGE: elixir\nCODE:\n```\n\"quote do\\n  [1, 2, 3]\\nend\\n#=> [1, 2, 3]\"\n```\n\n----------------------------------------\n\nTITLE: Accessing and Updating Struct Fields in Elixir\nDESCRIPTION: Shows how to access struct fields and update them using map-like syntax.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/structs.md#2025-04-21_snippet_3\n\nLANGUAGE: elixir\nCODE:\n```\niex> john = %User{}\n%User{age: 27, name: \"John\"}\niex> john.name\n\"John\"\niex> jane = %{john | name: \"Jane\"}\n%User{age: 27, name: \"Jane\"}\n```\n\n----------------------------------------\n\nTITLE: Generating Random Values with Erlang's `:rand` Module\nDESCRIPTION: This example illustrates how to generate random numbers using the :rand module in Erlang. It includes seeding the random number generator and generating uniform random values, with explicit constraints on the number of outputs.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/erlang-libraries.md#2025-04-21_snippet_8\n\nLANGUAGE: elixir\nCODE:\n```\niex> :rand.uniform()\n0.8175669086010815\niex> _ = :rand.seed(:exs1024, {123, 123534, 345345})\niex> :rand.uniform()\n0.5820506340260994\niex> :rand.uniform(6)\n6\n```\n\n----------------------------------------\n\nTITLE: Elixir Integer vs Float Matching\nDESCRIPTION: Illustrates that numbers in patterns perform strict comparison. Integers do not match floats, resulting in a MatchError.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/references/patterns-and-guards.md#2025-04-21_snippet_8\n\nLANGUAGE: elixir\nCODE:\n```\niex> 1 = 1.0\n** (MatchError) no match of right hand side value: 1.0\n```\n\n----------------------------------------\n\nTITLE: Handling Zip Files with Erlang's `:zip` and `:zlib` Modules\nDESCRIPTION: This code demonstrates counting files in a ZIP file using the :zip module, followed by compressing and uncompressing text data with :zlib for efficient storage and retrieval. Both functionalities highlight Erlang's robust data handling capabilities.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/erlang-libraries.md#2025-04-21_snippet_9\n\nLANGUAGE: elixir\nCODE:\n```\niex> :zip.foldl(fn _, _, _, acc -> acc + 1 end, 0, :binary.bin_to_list(\"file.zip\"))\n{:ok, 633}\n```\n\nLANGUAGE: elixir\nCODE:\n```\niex> song = \"\\n...> Mary had a little lamb,\\n...> His fleece was white as snow,\\n...> And everywhere that Mary went,\\n...> The lamb was sure to go.\"\niex> compressed = :zlib.compress(song)\niex> byte_size(song)\n110\niex> byte_size(compressed)\n99\niex> :zlib.uncompress(compressed)\n\"\\nMary had a little lamb,\\nHis fleece was white as snow,\\nAnd everywhere that Mary went,\\nThe lamb was sure to go.\"\n```\n\n----------------------------------------\n\nTITLE: Elixir AST Representation of Aliases\nDESCRIPTION: This example demonstrates how aliases (e.g., `Foo.Bar.Baz`) are represented in Elixir's AST using the `__aliases__` call. Each segment of the alias, separated by a dot, is represented as an atom within a list.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/references/syntax-reference.md#2025-04-21_snippet_11\n\nLANGUAGE: elixir\nCODE:\n```\n\"quote do\\n  Foo.Bar.Baz\\nend\\n#=> {:__aliases__, [], [:Foo, :Bar, :Baz]}\"\n```\n\nLANGUAGE: elixir\nCODE:\n```\n\"quote do\\n  __MODULE__.Bar.Baz\\nend\\n#=> {:__aliases__, [], [{:__MODULE__, [], Elixir}, :Bar, :Baz]}\"\n```\n\n----------------------------------------\n\nTITLE: Handling Bucket Creation in a GenServer Callback\nDESCRIPTION: This snippet shows the handle_call callback that processes the synchronous requests to create a bucket. It checks if the bucket already exists, starts a new bucket if it doesn't, and updates the registry accordingly.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/mix-and-otp/erlang-term-storage.md#2025-04-21_snippet_6\n\nLANGUAGE: elixir\nCODE:\n```\n@impl true\n\ndef handle_call({:create, name}, _from, {names, refs}) do\n  case lookup(names, name) do\n    {:ok, pid} ->\n      {:reply, pid, {names, refs}}\n\n    :error ->\n      {:ok, pid} = DynamicSupervisor.start_child(KV.BucketSupervisor, KV.Bucket)\n      ref = Process.monitor(pid)\n      refs = Map.put(refs, ref, name)\n      :ets.insert(names, {name, pid})\n      {:reply, pid, {names, refs}}\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Parsing Commands in Elixir Using String Split\nDESCRIPTION: This code implements the `parse/1` function in the `KVServer.Command` module. It splits the input `line` based on whitespace and then uses a `case` statement to match the command against a list containing the command and its arguments.  It handles the \"CREATE\" command, returning an appropriate tuple.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/mix-and-otp/docs-tests-and-with.md#2025-04-21_snippet_2\n\nLANGUAGE: elixir\nCODE:\n```\ndef parse(line) do\n  case String.split(line) do\n    [\"CREATE\", bucket] -> {:ok, {:create, bucket}}\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Number Base Representations in Elixir\nDESCRIPTION: Shows how to represent numbers in binary, octal, and hexadecimal formats in Elixir using different prefixes.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/basic-types.md#2025-04-21_snippet_3\n\nLANGUAGE: elixir\nCODE:\n```\niex> 0b1010\n10\niex> 0o777\n511\niex> 0x1F\n31\n```\n\n----------------------------------------\n\nTITLE: Task Supervisor Configuration in KV Application\nDESCRIPTION: Adding Task.Supervisor to the supervision tree for managing distributed tasks.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/mix-and-otp/distributed-tasks.md#2025-04-21_snippet_3\n\nLANGUAGE: elixir\nCODE:\n```\n{Task.Supervisor, name: KV.RouterTasks},\n```\n\n----------------------------------------\n\nTITLE: Defining Function Specifications with Guards\nDESCRIPTION: Demonstrates different ways to specify function types and use guard clauses to restrict type variables\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/references/typespecs.md#2025-04-21_snippet_5\n\nLANGUAGE: elixir\nCODE:\n```\n@spec function_name(type1, type2) :: return_type\n\n@spec function(arg) :: [arg] when arg: atom\n\n@spec function(arg1, arg2) :: {arg1, arg2} when arg1: atom, arg2: integer\n\n@spec days_since_epoch(year :: integer, month :: integer, day :: integer) :: integer\n```\n\n----------------------------------------\n\nTITLE: Defining Git-based External Dependencies\nDESCRIPTION: Example showing how to specify an external dependency using a Git repository instead of Hex package manager.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/mix-and-otp/dependencies-and-umbrella-projects.md#2025-04-21_snippet_2\n\nLANGUAGE: elixir\nCODE:\n```\ndef deps do\n  [{:plug, git: \"https://github.com/elixir-lang/plug.git\"}]\nend\n```\n\n----------------------------------------\n\nTITLE: Basic Test Definitions with ExUnit\nDESCRIPTION: Illustrates a test module for the Mix project using ExUnit. Includes a simple test asserting KV.hello/0 returns :world.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/mix-and-otp/introduction-to-mix.md#2025-04-21_snippet_8\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule KVTest do\n  use ExUnit.Case\n  doctest KV\n\n  test \"greets the world\" do\n    assert KV.hello() == :world\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Starting Observer in Elixir\nDESCRIPTION: Demonstrates how to start the Observer tool in an Elixir application. This snippet shows the basic command to launch Observer from within an IEx session.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/mix-and-otp/dynamic-supervisor.md#2025-04-21_snippet_7\n\nLANGUAGE: elixir\nCODE:\n```\niex> :observer.start()\n```\n\n----------------------------------------\n\nTITLE: Wiring KVServer with Routing Logic\nDESCRIPTION: This excerpt shows how to modify the lookup and run functions in the KVServer.Command to leverage the KV.Router for routing requests, ensuring actions like create and lookup are directed to the appropriate node.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/mix-and-otp/distributed-tasks.md#2025-04-21_snippet_10\n\nLANGUAGE: elixir\nCODE:\n```\ndefp lookup(bucket, callback) do\n  case KV.Router.route(bucket, KV.Registry, :lookup, [KV.Registry, bucket]) do\n    {:ok, pid} -> callback.(pid)\n    :error -> {:error, :not_found}\n  end\nend\ndef run({:create, bucket}) do\n  case KV.Router.route(bucket, KV.Registry, :create, [KV.Registry, bucket]) do\n    pid when is_pid(pid) -> {:ok, \"OK\\r\\n\"}\n    _ -> {:error, \"FAILED TO CREATE BUCKET\"}\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Binary Data Handling with `:binary` Module in Elixir\nDESCRIPTION: This snippet demonstrates how to convert strings into character lists and raw data bytes, highlighting the difference in handling UTF-8 encoded strings versus raw binary data. Elixir's String.to_charlist returns Unicode code points, while :binary.bin_to_list returns raw byte data.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/erlang-libraries.md#2025-04-21_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\niex> String.to_charlist(\"Ø\")\n[216]\niex> :binary.bin_to_list(\"Ø\")\n[195, 152]\n```\n\n----------------------------------------\n\nTITLE: Invalid Variable Access in Elixir try Blocks\nDESCRIPTION: Demonstrates Elixir's restriction on accessing variables declared within a `try` block from `rescue`/`after`/`else`, highlighting scope constraints. Understanding `try` and variable scope in Elixir is essential.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/try-catch-and-rescue.md#2025-04-21_snippet_15\n\nLANGUAGE: elixir\nCODE:\n```\niex> try do\n...>   raise \"fail\"\n...>   another_what_happened = :did_not_raise\n...> rescue\n...>   _ -> another_what_happened\n...> end\n** (CompileError) undefined variable \"another_what_happened\"\n```\n\n----------------------------------------\n\nTITLE: Mathematical Computations with Erlang's `:math` Module\nDESCRIPTION: This snippet demonstrates common mathematical operations such as calculating sine, exponential, and logarithmic values using the :math module in Erlang. It covers trigonometric functions and conversions between different units (e.g., degrees to radians).\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/erlang-libraries.md#2025-04-21_snippet_6\n\nLANGUAGE: elixir\nCODE:\n```\niex> angle_45_deg = :math.pi() * 45.0 / 180.0\niex> :math.sin(angle_45_deg)\n0.7071067811865475\niex> :math.exp(55.0)\n7.694785265142018e23\niex> :math.log(7.694785265142018e23)\n55.0\n```\n\n----------------------------------------\n\nTITLE: Proper Namespace Definition in Elixir\nDESCRIPTION: This snippet explains the importance of defining modules properly within their namespaces to avoid conflicts. It transforms an improperly defined module into a correctly namespaced module.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/anti-patterns/code-anti-patterns.md#2025-04-21_snippet_9\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule Plug.Auth do\n  # ...\nend\n```\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule PlugAuth do\n  # ...\nend\n```\n\n----------------------------------------\n\nTITLE: Elixir List Head Tail Empty List MatchError\nDESCRIPTION: Highlights that the `[head | tail]` notation does not match empty lists in Elixir. Attempting to match an empty list with this pattern results in a MatchError.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/references/patterns-and-guards.md#2025-04-21_snippet_12\n\nLANGUAGE: elixir\nCODE:\n```\niex> [head | tail] = []\n** (MatchError) no match of right hand side value: []\n```\n\n----------------------------------------\n\nTITLE: Automatic try Wrapping for Function Cleanup in Elixir\nDESCRIPTION: This example shows how a function in Elixir can automatically wrap its body in a `try` block when an `after` clause is specified. It illustrates executing clean-up code post-function execution. There are no additional dependencies; however, the Elixir environment is needed.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/try-catch-and-rescue.md#2025-04-21_snippet_11\n\nLANGUAGE: elixir\nCODE:\n```\niex> defmodule RunAfter do\n...>   def without_even_trying do\n...>     raise \"oops\"\n...>   after\n...>     IO.puts(\"cleaning up!\")\n...>   end\n...> end\niex> RunAfter.without_even_trying\ncleaning up!\n** (RuntimeError) oops\n```\n\n----------------------------------------\n\nTITLE: Full Echo Server Implementation in Elixir\nDESCRIPTION: This code provides a complete implementation of a basic echo server using Elixir's `gen_tcp` and `Task.Supervisor`. It includes the `accept`, `loop_acceptor`, `serve`, `read_line`, and `write_line` functions to handle incoming connections, read data, and send it back to the client.  The Task.Supervisor ensures that client connection processes are managed with fault tolerance.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/mix-and-otp/task-and-gen-tcp.md#2025-04-21_snippet_7\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule KVServer do\n  require Logger\n\n  @doc \"\"\"\n  Starts accepting connections on the given `port`.\n  \"\"\"\n  def accept(port) do\n    {:ok, socket} = :gen_tcp.listen(port,\n                      [:binary, packet: :line, active: false, reuseaddr: true])\n    Logger.info \"Accepting connections on port #{port}\"\n    loop_acceptor(socket)\n  end\n\n  defp loop_acceptor(socket) do\n    {:ok, client} = :gen_tcp.accept(socket)\n    {:ok, pid} = Task.Supervisor.start_child(KVServer.TaskSupervisor, fn -> serve(client) end)\n    :ok = :gen_tcp.controlling_process(client, pid)\n    loop_acceptor(socket)\n  end\n\n  defp serve(socket) do\n    socket\n    |> read_line()\n    |> write_line(socket)\n\n    serve(socket)\n  end\n\n  defp read_line(socket) do\n    {:ok, data} = :gen_tcp.recv(socket, 0)\n    data\n  end\n\n  defp write_line(line, socket) do\n    :gen_tcp.send(socket, line)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using no_return() Type in Elixir Typespecs\nDESCRIPTION: This snippet demonstrates the correct usage of the no_return() type in Elixir typespecs. It should be used for functions that never return a value, such as those that loop forever, exist to raise an error, or shut down the VM.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/references/typespecs.md#2025-04-21_snippet_8\n\nLANGUAGE: elixir\nCODE:\n```\n@spec infinite_loop() :: no_return()\ndef infinite_loop do\n  receive do\n    _ -> infinite_loop()\n  end\nend\n\n@spec raise_error() :: no_return()\ndef raise_error do\n  raise \"This function always raises an error\"\nend\n\n@spec shutdown_vm() :: no_return()\ndef shutdown_vm do\n  System.halt(0)\nend\n```\n\n----------------------------------------\n\nTITLE: Registry Create Handler with Dynamic Supervisor\nDESCRIPTION: Updated registry handle_cast implementation using DynamicSupervisor to create buckets\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/mix-and-otp/dynamic-supervisor.md#2025-04-21_snippet_3\n\nLANGUAGE: elixir\nCODE:\n```\n  def handle_cast({:create, name}, {names, refs}) do\n    if Map.has_key?(names, name) do\n      {:noreply, {names, refs}}\n    else\n      {:ok, pid} = DynamicSupervisor.start_child(KV.BucketSupervisor, KV.Bucket)\n      ref = Process.monitor(pid)\n      refs = Map.put(refs, ref, name)\n      names = Map.put(names, name, pid)\n      {:noreply, {names, refs}}\n    end\n  end\n```\n\n----------------------------------------\n\nTITLE: Error Handling in Guards with case\nDESCRIPTION: Shows how errors in guards do not propagate but instead cause the guard to fail silently. This example demonstrates how a function call that would normally raise an error just causes the guard to fail.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/case-cond-and-if.md#2025-04-21_snippet_3\n\nLANGUAGE: elixir\nCODE:\n```\niex> hd(1)\n** (ArgumentError) argument error\niex> case 1 do\n...>   x when hd(x) -> \"Won't match\"\n...>   x -> \"Got #{x}\"\n...> end\n\"Got 1\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Router Table Lookup\nDESCRIPTION: Implements the table function to fetch routing configuration from the application environment.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/mix-and-otp/config-and-releases.md#2025-04-21_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\n@doc \"\"\"\nThe routing table.\n\"\"\"\ndef table do\n  Application.fetch_env!(:kv, :routing_table)\nend\n```\n\n----------------------------------------\n\nTITLE: KV.Bucket Test with ExUnit Callbacks\nDESCRIPTION: Enhanced test implementation using ExUnit callbacks for setup.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/mix-and-otp/agents.md#2025-04-21_snippet_4\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule KV.BucketTest do\n  use ExUnit.Case, async: true\n\n  setup do\n    {:ok, bucket} = KV.Bucket.start_link([])\n    %{bucket: bucket}\n  end\n\n  test \"stores values by key\", %{bucket: bucket} do\n    assert KV.Bucket.get(bucket, \"milk\") == nil\n\n    KV.Bucket.put(bucket, \"milk\", 3)\n    assert KV.Bucket.get(bucket, \"milk\") == 3\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Size Protocol for MapSet Struct in Elixir\nDESCRIPTION: Shows how to implement the Size protocol for a custom struct (MapSet), demonstrating that structs require their own protocol implementations.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/protocols.md#2025-04-21_snippet_4\n\nLANGUAGE: elixir\nCODE:\n```\ndefimpl Size, for: MapSet do\n  def size(set), do: MapSet.size(set)\nend\n```\n\n----------------------------------------\n\nTITLE: Compiling the Elixir Mix Project\nDESCRIPTION: Console commands to compile the Elixir project, showing output upon successful compilation.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/mix-and-otp/introduction-to-mix.md#2025-04-21_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ cd kv\n$ mix compile\n```\n\nLANGUAGE: text\nCODE:\n```\nCompiling 1 file (.ex)\nGenerated kv app\n```\n\n----------------------------------------\n\nTITLE: Implementing Supervised Counter Application in Elixir\nDESCRIPTION: Implementation of an Application module that starts Counter processes under supervision. Demonstrates how to configure multiple counters with different settings within a supervision tree.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/anti-patterns/process-anti-patterns.md#2025-04-21_snippet_6\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule SupervisedProcess.Application do\n  use Application\n\n  @impl true\n  def start(_type, _args) do\n    children = [\n      # With the default values for counter and name\n      Counter,\n      # With custom values for counter, name, and a custom ID\n      Supervisor.child_spec(\n        {Counter, name: :other_counter, initial_value: 15},\n        id: :other_counter\n      )\n    ]\n\n    Supervisor.start_link(children, strategy: :one_for_one, name: App.Supervisor)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Protocol Type Checking - Enumerable Example\nDESCRIPTION: Shows type checking for protocol implementations with for-comprehensions, demonstrating how Elixir warns when using non-enumerable types.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/CHANGELOG.md#2025-04-21_snippet_3\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule Example do\n  def my_code(%Date{} = date) do\n    for(x <- date, do: x)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Avoiding Redundant Module Attribute Reads in Elixir\nDESCRIPTION: This example demonstrates how to avoid reading the same module attribute multiple times, which can increase compilation times. Instead of directly accessing the attribute in multiple functions, a private helper function is introduced to encapsulate the attribute access.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/module-attributes.md#2025-04-21_snippet_6\n\nLANGUAGE: elixir\nCODE:\n```\ndef some_function, do: do_something_with(example())\ndef another_function, do: do_something_else_with(example())\ndefp example, do: @example\n```\n\n----------------------------------------\n\nTITLE: Umbrella Project mix.exs\nDESCRIPTION: This `mix.exs` file defines the umbrella project.  The key difference from a standard project is the `apps_path: \"apps\"` configuration, which tells Mix that child applications will be located in the `apps` directory.  Umbrella projects don't typically contain source code themselves.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/mix-and-otp/dependencies-and-umbrella-projects.md#2025-04-21_snippet_6\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule KvUmbrella.MixProject do\n  use Mix.Project\n\n  def project do\n    [\n      apps_path: \"apps\",\n      start_permanent: Mix.env() == :prod,\n      deps: deps()\n    ]\n  end\n\n  defp deps do\n    []\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Cryptographic Operations using `:crypto` in Elixir\nDESCRIPTION: This example uses the :crypto module to compute the SHA-256 hash of a string, which is then encoded in Base16 (hexadecimal). Ensure that :crypto is listed under extra_applications in your project's mix.exs file to access cryptographic functions.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/erlang-libraries.md#2025-04-21_snippet_3\n\nLANGUAGE: elixir\nCODE:\n```\niex> Base.encode16(:crypto.hash(:sha256, \"Elixir\"))\n\"3315715A7A3AD57428298676C5AE465DADA38D951BDFAC9348A8A31E9C7401CB\"\n```\n\n----------------------------------------\n\nTITLE: Refactored With Expression Pattern in Elixir\nDESCRIPTION: Improved version with normalized error handling in separate private functions for better organization and maintainability.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/anti-patterns/code-anti-patterns.md#2025-04-21_snippet_3\n\nLANGUAGE: elixir\nCODE:\n```\ndef open_decoded_file(path) do\n  with {:ok, encoded} <- file_read(path),\n       {:ok, decoded} <- base_decode64(encoded) do\n    {:ok, String.trim(decoded)}\n  end\nend\n\ndefp file_read(path) do\n  case File.read(path) do\n    {:ok, contents} -> {:ok, contents}\n    {:error, _} -> {:error, :badfile}\n  end\nend\n\ndefp base_decode64(contents) do\n  case Base.decode64(contents) do\n    {:ok, decoded} -> {:ok, decoded}\n    :error -> {:error, :badencoding}\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Command Parser Module with Doctest in Elixir\nDESCRIPTION: This code defines a `KVServer.Command` module with a `parse/1` function. The function is documented using a doctest, which specifies the expected output when parsing a \"CREATE shopping\\r\\n\" command.  The initial implementation simply returns `:not_implemented`.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/mix-and-otp/docs-tests-and-with.md#2025-04-21_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule KVServer.Command do\n  @doc ~S\"\"\"\n  Parses the given `line` into a command.\n\n  ## Examples\n\n      iex> KVServer.Command.parse(\"CREATE shopping\\r\\n\")\n      {:ok, {:create, \"shopping\"}}\n\n  \"\"\"\n  def parse(_line) do\n    :not_implemented\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using Custom Operators in Elixir\nDESCRIPTION: Shows how to import and use custom operators defined in a module, demonstrating the requirement to import the module before using its operators.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/references/operators.md#2025-04-21_snippet_2\n\nLANGUAGE: elixir\nCODE:\n```\niex> import MyOperators\niex> 1 ~> 2\n2\niex> 1 <~ 2\n1\n```\n\n----------------------------------------\n\nTITLE: Configuring Named Registry in Supervisor\nDESCRIPTION: Updates the supervisor initialization to start KV.Registry with a named process configuration\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/mix-and-otp/supervisor-and-application.md#2025-04-21_snippet_4\n\nLANGUAGE: elixir\nCODE:\n```\n  def init(:ok) do\n    children = [\n      {KV.Registry, name: KV.Registry}\n    ]\n```\n\n----------------------------------------\n\nTITLE: Ensuring Observer Dependencies in Elixir\nDESCRIPTION: Shows how to ensure the necessary dependencies for Observer are available when running IEx inside a project. This includes ensuring wx, runtime_tools, and observer applications are started.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/mix-and-otp/dynamic-supervisor.md#2025-04-21_snippet_8\n\nLANGUAGE: elixir\nCODE:\n```\niex> Mix.ensure_application!(:wx)             # Not necessary on Erlang/OTP 27+\niex> Mix.ensure_application!(:runtime_tools)  # Not necessary on Erlang/OTP 27+\niex> Mix.ensure_application!(:observer)\niex> :observer.start()\n```\n\n----------------------------------------\n\nTITLE: Linked Process Error Propagation\nDESCRIPTION: Demonstrates error propagation between linked processes using spawn_link/1\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/processes.md#2025-04-21_snippet_7\n\nLANGUAGE: elixir\nCODE:\n```\nspawn_link(fn -> raise \"oops\" end)\n```\n\n----------------------------------------\n\nTITLE: Compiling Elixir Project in Production Environment on Windows\nDESCRIPTION: This batch command demonstrates how to compile an Elixir project in the production environment on Windows by setting the MIX_ENV environment variable.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/mix-and-otp/introduction-to-mix.md#2025-04-21_snippet_14\n\nLANGUAGE: batch\nCODE:\n```\n> set \"MIX_ENV=prod\" && mix compile\n```\n\n----------------------------------------\n\nTITLE: Anonymous Function Example using Arrow Syntax in Elixir\nDESCRIPTION: Example of using the left-to-right arrow (->) to define clauses in anonymous functions within Elixir. This snippet shows how the arrow separates the function's arguments from its body, within 'fn' and 'end' delimiters. This construct does not require additional dependencies.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/references/syntax-reference.md#2025-04-21_snippet_3\n\nLANGUAGE: elixir\nCODE:\n```\nfn\n  x, y -> x + y\nend\n```\n\n----------------------------------------\n\nTITLE: Using Counter GenServer in IEx Shell\nDESCRIPTION: Interactive example showing how to start and interact with multiple Counter instances in the Elixir shell. Demonstrates starting counters with different configurations and performing basic operations.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/anti-patterns/process-anti-patterns.md#2025-04-21_snippet_5\n\nLANGUAGE: elixir\nCODE:\n```\niex> Counter.start_link()\n{:ok, #PID<0.115.0>}\niex> Counter.get()\n0\niex> Counter.start_link(initial_value: 15, name: :other_counter)\n{:ok, #PID<0.120.0>}\niex> Counter.get(:other_counter)\n15\niex> Counter.bump(:other_counter, -3)\n12\niex> Counter.bump(Counter, 7)\n7\n```\n\n----------------------------------------\n\nTITLE: Elixir Length Function Comparison\nDESCRIPTION: This snippet showcases the optional parentheses syntax in Elixir. It compares the length of a list using the `length` function with and without parentheses, demonstrating their equivalence.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/optional-syntax.md#2025-04-21_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\n```elixir\niex> length([1, 2, 3]) == length [1, 2, 3]\ntrue\n```\n```\n\n----------------------------------------\n\nTITLE: Using multiple guards in a single Elixir clause\nDESCRIPTION: This example demonstrates how to use multiple guards in a single clause as an alternative to chaining 'or' expressions. It shows two equivalent implementations.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/references/patterns-and-guards.md#2025-04-21_snippet_23\n\nLANGUAGE: elixir\nCODE:\n```\ndef is_number_or_nil(term) when is_integer(term) or is_float(term) or is_nil(term),\n  do: :maybe_number\ndef is_number_or_nil(_other),\n  do: :something_else\n```\n\nLANGUAGE: elixir\nCODE:\n```\ndef is_number_or_nil(term)\n    when is_integer(term)\n    when is_float(term)\n    when is_nil(term) do\n  :maybe_number\nend\n\ndef is_number_or_nil(_other) do\n  :something_else\nend\n```\n\n----------------------------------------\n\nTITLE: Deriving Protocol Implementation in Elixir Struct\nDESCRIPTION: Shows how to use the @derive attribute to derive a protocol implementation for a struct based on the Any implementation.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/protocols.md#2025-04-21_snippet_7\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule OtherUser do\n  @derive [Size]\n  defstruct [:name, :age]\nend\n```\n\n----------------------------------------\n\nTITLE: Inspect Protocol Display Examples\nDESCRIPTION: Shows how IEx uses the Inspect protocol to display various data structures in a readable format.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/protocols.md#2025-04-21_snippet_14\n\nLANGUAGE: elixir\nCODE:\n```\niex> {1, 2, 3}\n{1, 2, 3}\niex> %User{}\n%User{name: \"john\", age: 27}\n```\n\n----------------------------------------\n\nTITLE: Handling Non-Matching case Clauses in Elixir\nDESCRIPTION: Demonstrates what happens when none of the case clauses match the given value. In this scenario, Elixir raises a CaseClauseError.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/case-cond-and-if.md#2025-04-21_snippet_4\n\nLANGUAGE: elixir\nCODE:\n```\niex> case :ok do\n...>   :error -> \"Won't match\"\n...> end\n** (CaseClauseError) no case clause matching: :ok\n```\n\n----------------------------------------\n\nTITLE: KV.Bucket Delete Implementation\nDESCRIPTION: Implementation of delete operation using Agent.get_and_update/2.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/mix-and-otp/agents.md#2025-04-21_snippet_5\n\nLANGUAGE: elixir\nCODE:\n```\n@doc \"\"\"\nDeletes `key` from `bucket`.\n\nReturns the current value of `key`, if `key` exists.\n\"\"\"\ndef delete(bucket, key) do\n  Agent.get_and_update(bucket, &Map.pop(&1, key))\nend\n```\n\n----------------------------------------\n\nTITLE: Variable Scope within Anonymous Functions\nDESCRIPTION: Demonstrates that assigning a variable inside an anonymous function does not affect the value of the same variable in the surrounding environment. This showcases the concept of variable scope.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/anonymous-functions.md#2025-04-21_snippet_5\n\nLANGUAGE: elixir\nCODE:\n```\niex> x = 42\n42\niex> (fn -> x = 0 end).()\n0\niex> x\n42\n```\n\n----------------------------------------\n\nTITLE: Basic Type Examples in Elixir\nDESCRIPTION: Demonstrates the basic data types available in Elixir including integers, floats, booleans, atoms, strings, lists, and tuples.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/basic-types.md#2025-04-21_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\niex> 1          # integer\niex> 0x1F       # integer\niex> 1.0        # float\niex> true       # boolean\niex> :atom      # atom / symbol\niex> \"elixir\"   # string\niex> [1, 2, 3]  # list\niex> {1, 2, 3}  # tuple\n```\n\n----------------------------------------\n\nTITLE: Defining Release Configuration in mix.exs\nDESCRIPTION: Configures release settings for the umbrella project, specifying version and included applications.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/mix-and-otp/config-and-releases.md#2025-04-21_snippet_5\n\nLANGUAGE: elixir\nCODE:\n```\nreleases: [\n  foo: [\n    version: \"0.0.1\",\n    applications: [kv_server: :permanent, kv: :permanent]\n  ]\n]\n```\n\n----------------------------------------\n\nTITLE: Running Single Test Line in Elixir\nDESCRIPTION: Command for running a specific test by line number using the LINE environment variable\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/CONTRIBUTING.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nLINE=123 bin/elixir lib/elixir/test/elixir/string_test.exs\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Performance Impact in Agent Operations\nDESCRIPTION: Extended version of the delete function that includes deliberate delays to demonstrate the impact of long-running operations on both client and server sides. Shows how server-side delays can affect overall system performance.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/mix-and-otp/agents.md#2025-04-21_snippet_7\n\nLANGUAGE: elixir\nCODE:\n```\ndef delete(bucket, key) do\n  Process.sleep(1000) # puts client to sleep\n  Agent.get_and_update(bucket, fn map ->\n    Process.sleep(1000) # puts server to sleep\n    Map.pop(map, key)\n  end)\nend\n```\n\n----------------------------------------\n\nTITLE: Building Elixir Documentation\nDESCRIPTION: Commands for building HTML and EPUB documentation for Elixir project components using ExDoc\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/CONTRIBUTING.md#2025-04-21_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nmake docs                  # to generate HTML pages\nmake docs DOCS_FORMAT=epub # to generate EPUB documents\n```\n\n----------------------------------------\n\nTITLE: Anonymous Function Clause Arity Error\nDESCRIPTION: Shows an example of the error that occurs when anonymous function clauses have different arities.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/anonymous-functions.md#2025-04-21_snippet_7\n\nLANGUAGE: elixir\nCODE:\n```\niex> f2 = fn\n...>   x, y when x > 0 -> x + y\n...>   x, y, z -> x * y + z\n...> end\n** (CompileError) iex:1: cannot mix clauses with different arities in anonymous functions\n```\n\n----------------------------------------\n\nTITLE: Complex Extractions in Multi-Clause Functions Example\nDESCRIPTION: Shows problematic pattern of mixing extractions for pattern matching and function body usage across multiple clauses.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/anti-patterns/code-anti-patterns.md#2025-04-21_snippet_4\n\nLANGUAGE: elixir\nCODE:\n```\ndef drive(%User{name: name, age: age}) when age >= 18 do\n  \"#{name} can drive\"\nend\n\ndef drive(%User{name: name, age: age}) when age < 18 do\n  \"#{name} cannot drive\"\nend\n```\n\n----------------------------------------\n\nTITLE: Elixir If Statement with do-end and Keyword Lists\nDESCRIPTION: This snippet demonstrates the equivalence between `do`-`end` blocks and keyword lists in Elixir's `if` statement. It shows how a block of code can be written using both syntaxes, providing flexibility in code formatting.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/optional-syntax.md#2025-04-21_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\n```elixir\n# do-end blocks\niex> if true do\n...>   :this\n...> else\n...>   :that\n...> end\n:this\n\n# keyword lists\niex> if true, do: :this, else: :that\n:this\n```\n```\n\n----------------------------------------\n\nTITLE: Elixir AST Representation of a Function Call\nDESCRIPTION: This snippet illustrates how a simple function call is represented in Elixir's Abstract Syntax Tree (AST). The function call `sum(1, 2, 3)` is transformed into a tuple containing the function name as an atom, metadata (an empty list in this case), and a list of arguments.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/references/syntax-reference.md#2025-04-21_snippet_5\n\nLANGUAGE: elixir\nCODE:\n```\n\"{:sum, meta, [1, 2, 3]}\"\n```\n\n----------------------------------------\n\nTITLE: Creating and Manipulating Lists in Elixir\nDESCRIPTION: Demonstrates basic list creation and operations including length checking and list concatenation/subtraction using ++ and -- operators.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/lists-and-tuples.md#2025-04-21_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\niex> [1, 2, true, 3]\n[1, 2, true, 3]\niex> length([1, 2, 3])\n3\n\niex> [1, 2, 3] ++ [4, 5, 6]\n[1, 2, 3, 4, 5, 6]\niex> [1, true, 2, false, 3, true] -- [true, false]\n[1, 2, 3, true]\n```\n\n----------------------------------------\n\nTITLE: Charlist Representation in Elixir\nDESCRIPTION: Demonstrates how Elixir handles and displays lists of ASCII numbers as charlists, including inspection using the i helper.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/lists-and-tuples.md#2025-04-21_snippet_2\n\nLANGUAGE: elixir\nCODE:\n```\niex> [11, 12, 13]\n~c\"\\v\\f\\r\"\niex> [104, 101, 108, 108, 111]\n~c\"hello\"\n\niex> i ~c\"hello\"\nTerm\n  i ~c\"hello\"\nData type\n  List\nDescription\n  ...\nRaw representation\n  [104, 101, 108, 108, 111]\nReference modules\n  List\nImplemented protocols\n  ...\n```\n\n----------------------------------------\n\nTITLE: Implementing Size Protocol for Any Type in Elixir\nDESCRIPTION: Demonstrates how to implement a protocol for Any type, which can be used as a fallback or for deriving implementations.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/protocols.md#2025-04-21_snippet_6\n\nLANGUAGE: elixir\nCODE:\n```\ndefimpl Size, for: Any do\n  def size(_), do: 0\nend\n```\n\n----------------------------------------\n\nTITLE: Accessing Function Documentation with `h`\nDESCRIPTION: Demonstrates how to access function documentation using the `h` helper function in the Elixir shell, showing both the short form (e.g., `h trunc/1`) and the fully qualified form (e.g., `h Kernel.trunc/1`). It explains that functions in the Kernel module are automatically imported.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/anonymous-functions.md#2025-04-21_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\niex> h trunc/1\n                             def trunc(number)\n\nReturns the integer part of number.\n```\n\nLANGUAGE: elixir\nCODE:\n```\niex> h Kernel.trunc/1\n                             def trunc(number)\n\nReturns the integer part of number.\n```\n\n----------------------------------------\n\nTITLE: Capturing Exits in Elixir Processes\nDESCRIPTION: Demonstrates sending an `exit` signal within a process using `exit/1` and handling it with `try/catch`, showcasing process termination and recovery strategies.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/try-catch-and-rescue.md#2025-04-21_snippet_8\n\nLANGUAGE: elixir\nCODE:\n```\niex> spawn_link(fn -> exit(1) end)\n** (EXIT from #PID<0.56.0>) shell process exited with reason: 1\n```\n\nLANGUAGE: elixir\nCODE:\n```\niex> try do\n...>   exit(\"I am exiting\")\n...> catch\n...>   :exit, _ -> \"not really\"\n...> end\n\"not really\"\n```\n\n----------------------------------------\n\nTITLE: Elixir If-Else with Parentheses\nDESCRIPTION: This snippet explicitly adds parentheses to the `if` expression, demonstrating that parentheses are optional in function calls. It presents the most verbose form of the expression.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/optional-syntax.md#2025-04-21_snippet_6\n\nLANGUAGE: elixir\nCODE:\n```\n```elixir\nif(variable?, [{:do, Call.this()}, {:else, Call.that()}])\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Routing Table Structure in Elixir\nDESCRIPTION: Example of a routing table structure that maps Unicode character ranges to specific nodes in a distributed system.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/mix-and-otp/distributed-tasks.md#2025-04-21_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\n[\n  {?a..?m, :\"foo@computer-name\"},\n  {?n..?z, :\"bar@computer-name\"}\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring IEx Prompt in runtime.exs\nDESCRIPTION: Example of runtime configuration to customize the IEx prompt.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/mix-and-otp/config-and-releases.md#2025-04-21_snippet_2\n\nLANGUAGE: elixir\nCODE:\n```\nimport Config\nconfig :iex, default_prompt: \">>>\"\n```\n\n----------------------------------------\n\nTITLE: Refactored Multi-Clause Function in Elixir\nDESCRIPTION: Improved version separating pattern matching concerns from function body usage.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/anti-patterns/code-anti-patterns.md#2025-04-21_snippet_5\n\nLANGUAGE: elixir\nCODE:\n```\ndef drive(%User{age: age} = user) when age >= 18 do\n  %User{name: name} = user\n  \"#{name} can drive\"\nend\n\ndef drive(%User{age: age} = user) when age < 18 do\n  %User{name: name} = user\n  \"#{name} cannot drive\"\nend\n```\n\n----------------------------------------\n\nTITLE: Elixir If-Else with Keywords\nDESCRIPTION: This snippet demonstrates the conversion of a `do-end` block to keywords using the `, do:` and `, else:` syntax. This is the first step in showing the equivalence between blocks and keyword arguments.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/optional-syntax.md#2025-04-21_snippet_3\n\nLANGUAGE: elixir\nCODE:\n```\n```elixir\nif variable?, do: Call.this(), else: Call.that()\n```\n```\n\n----------------------------------------\n\nTITLE: Boolean Operations in Elixir\nDESCRIPTION: Shows boolean operations using strict logical operators and, or, and not that require boolean arguments.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/basic-types.md#2025-04-21_snippet_7\n\nLANGUAGE: elixir\nCODE:\n```\niex> true and true\ntrue\niex> false or is_boolean(true)\ntrue\n```\n\n----------------------------------------\n\nTITLE: Registry Crash Test Implementation\nDESCRIPTION: Test case demonstrating registry behavior when a bucket crashes with non-normal termination\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/mix-and-otp/dynamic-supervisor.md#2025-04-21_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\ntest \"removes bucket on crash\", %{registry: registry} do\n  KV.Registry.create(registry, \"shopping\")\n  {:ok, bucket} = KV.Registry.lookup(registry, \"shopping\")\n\n  # Stop the bucket with non-normal reason\n  Agent.stop(bucket, :shutdown)\n  assert KV.Registry.lookup(registry, \"shopping\") == :error\nend\n```\n\n----------------------------------------\n\nTITLE: Using iodata for Efficient String Concatenation in Elixir\nDESCRIPTION: This snippet shows how to use iodata (a list of strings) for more efficient string concatenation, avoiding unnecessary copying of large strings.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/io-and-the-file-system.md#2025-04-21_snippet_6\n\nLANGUAGE: elixir\nCODE:\n```\nname = \"Mary\"\nIO.puts([\"Hello \", name, \"!\"])\n```\n\n----------------------------------------\n\nTITLE: Conditional Syntax with Keyword Lists\nDESCRIPTION: Demonstrates the equivalence between block syntax and keyword list syntax in control structures like if/2\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/keywords-and-maps.md#2025-04-21_snippet_4\n\nLANGUAGE: elixir\nCODE:\n```\nif true do\n  \"This will be seen\"\nelse\n  \"This won't\"\nend\n```\n\nLANGUAGE: elixir\nCODE:\n```\nif true, do: \"This will be seen\", else: \"This won't\"\n```\n\n----------------------------------------\n\nTITLE: Dynamic Variable Creation in Macros\nDESCRIPTION: Demonstrates how to dynamically create variables in macros using Macro.var/2.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/meta-programming/macros.md#2025-04-21_snippet_4\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule Sample do\n  defmacro initialize_to_char_count(variables) do\n    Enum.map(variables, fn name ->\n      var = Macro.var(name, nil)\n      length = name |> Atom.to_string() |> String.length()\n\n      quote do\n        unquote(var) = unquote(length)\n      end\n    end)\n  end\n\n  def run do\n    initialize_to_char_count([:red, :green, :yellow])\n    [red, green, yellow]\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Starting and Inspecting Supervisor in Elixir\nDESCRIPTION: Demonstrates starting the supervisor and checking its children using Supervisor.which_children/1.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/mix-and-otp/supervisor-and-application.md#2025-04-21_snippet_2\n\nLANGUAGE: elixir\nCODE:\n```\n{:ok, sup} = KV.Supervisor.start_link([])\nSupervisor.which_children(sup)\n```\n\n----------------------------------------\n\nTITLE: Defining a Polymorphic Function with Guards in Elixir\nDESCRIPTION: This snippet demonstrates how to define a polymorphic 'negate' function in Elixir using guards. The function handles both integer and boolean inputs, showcasing Elixir's ability to work with dynamic types.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/references/gradual-set-theoretic-types.md#2025-04-21_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\ndef negate(x) when is_integer(x), do: -x\ndef negate(x) when is_boolean(x), do: not x\n```\n\n----------------------------------------\n\nTITLE: Pattern Matching with Underscore in Elixir\nDESCRIPTION: Shows how to use the underscore (_) in pattern matching to ignore specific values. Demonstrates its usage in list destructuring and explains that it cannot be read from.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/pattern-matching.md#2025-04-21_snippet_4\n\nLANGUAGE: elixir\nCODE:\n```\niex> [head | _] = [1, 2, 3]\n[1, 2, 3]\niex> head\n1\n\niex> _\n** (CompileError) iex:1: invalid use of _. \"_\" represents a value to be ignored in a pattern and cannot be used in expressions\n```\n\n----------------------------------------\n\nTITLE: Displaying Elixir Version Support Matrix\nDESCRIPTION: Markdown table showing current Elixir versions and their support status for bug fixes and security patches.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/references/compatibility-and-deprecations.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nElixir version | Support\n:------------- | :-----------------------------\n1.19           | Development\n1.18           | Bug fixes and security patches\n1.17           | Security patches only\n1.16           | Security patches only\n1.15           | Security patches only\n1.14           | Security patches only\n```\n\n----------------------------------------\n\nTITLE: Interacting with Key-Value Store - Text Example\nDESCRIPTION: Demonstrates command syntax for interacting with the key-value store using simple text commands. Key operations include creating a bucket, and then putting, getting, and deleting key-value pairs.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/mix-and-otp/introduction-to-mix.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nCREATE shopping\nOK\n\nPUT shopping milk 1\nOK\n\nPUT shopping eggs 3\nOK\n\nGET shopping milk\n1\nOK\n\nDELETE shopping eggs\nOK\n```\n\n----------------------------------------\n\nTITLE: Escaping a map into a quoted expression in Elixir\nDESCRIPTION: This example demonstrates how to use `Macro.escape/1` to convert a map into a valid quoted expression. This is necessary because maps are not valid quoted expressions by default and need to be explicitly converted for use in macros. The code escapes the `map` variable `%{hello: :world}`.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/meta-programming/quote-and-unquote.md#2025-04-21_snippet_9\n\nLANGUAGE: elixir\nCODE:\n```\niex> map = %{hello: :world}\niex> Macro.escape(map)\n{:%{}, [], [hello: :world]}\n```\n\n----------------------------------------\n\nTITLE: Router Test Setup with Dynamic Configuration\nDESCRIPTION: Sets up test environment with a custom routing table configuration and cleanup.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/mix-and-otp/config-and-releases.md#2025-04-21_snippet_4\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule KV.RouterTest do\n  use ExUnit.Case\n\n  setup_all do\n    current = Application.get_env(:kv, :routing_table)\n\n    Application.put_env(:kv, :routing_table, [\n      {?a..?m, :\"foo@computer-name\"},\n      {?n..?z, :\"bar@computer-name\"}\n    ])\n\n    on_exit fn -> Application.put_env(:kv, :routing_table, current) end\n  end\n\n  @tag :distributed\n  test \"route requests across nodes\" do\n```\n\n----------------------------------------\n\nTITLE: Compiling Elixir from Source\nDESCRIPTION: Commands to clone the Elixir repository and compile it from source. This is required for contributors who want to work on the Elixir codebase.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/elixir-lang/elixir.git\ncd elixir\nmake\n```\n\n----------------------------------------\n\nTITLE: Refactored: Centralized Bucket Implementation\nDESCRIPTION: Proper implementation with centralized process interface using a single module to manage Agent interactions.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/anti-patterns/process-anti-patterns.md#2025-04-21_snippet_3\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule Foo.Bucket do\n  use Agent\n\n  def start_link(_opts) do\n    Agent.start_link(fn -> %{} end)\n  end\n\n  def get(bucket, key) do\n    Agent.get(bucket, &Map.get(&1, key))\n  end\n\n  def put(bucket, key, value) do\n    Agent.update(bucket, &Map.put(&1, key, value))\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Creating a Doctest Case in ExUnit for Elixir Module\nDESCRIPTION: This code defines an ExUnit test case for the `KVServer.Command` module.  It uses `doctest KVServer.Command` to automatically run the doctests defined within the `KVServer.Command` module.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/mix-and-otp/docs-tests-and-with.md#2025-04-21_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule KVServer.CommandTest do\n  use ExUnit.Case, async: true\n  doctest KVServer.Command\nend\n```\n\n----------------------------------------\n\nTITLE: Testing Supervisor Recovery in Elixir\nDESCRIPTION: Shows how the supervisor handles process crashes by automatically restarting the failed child process with a new PID.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/mix-and-otp/supervisor-and-application.md#2025-04-21_snippet_3\n\nLANGUAGE: elixir\nCODE:\n```\n[{_, registry, _, _}] = Supervisor.which_children(sup)\nGenServer.call(registry, :bad_input)\nSupervisor.which_children(sup)\n```\n\n----------------------------------------\n\nTITLE: Configuring Project Environment in Elixir mix.exs\nDESCRIPTION: This snippet demonstrates how to set up the project configuration in mix.exs, specifically showing how to use Mix.env() to set the start_permanent option based on the current environment.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/mix-and-otp/introduction-to-mix.md#2025-04-21_snippet_12\n\nLANGUAGE: elixir\nCODE:\n```\ndef project do\n  [\n    ...,\n    start_permanent: Mix.env() == :prod,\n    ...\n  ]\nend\n```\n\n----------------------------------------\n\nTITLE: Elixir Pin Operator\nDESCRIPTION: Illustrates how to use the pin operator (`^`) to prevent variable rebinding during pattern matching. When the pin operator is used, the variable's current value is used in the pattern match, and a MatchError is raised if the values do not match.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/references/patterns-and-guards.md#2025-04-21_snippet_4\n\nLANGUAGE: elixir\nCODE:\n```\niex> x = 1\n1\niex> ^x = 2\n** (MatchError) no match of right hand side value: 2\n```\n\n----------------------------------------\n\nTITLE: Defining a User Struct and Implementing Size Protocol in Elixir\nDESCRIPTION: Defines a User struct and implements the Size protocol for it, showing how to provide custom size semantics for structs.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/protocols.md#2025-04-21_snippet_5\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule User do\n  defstruct [:name, :age]\nend\n\ndefimpl Size, for: User do\n  def size(_user), do: 2\nend\n```\n\n----------------------------------------\n\nTITLE: Elixir AST Representation of Blocks\nDESCRIPTION: This example illustrates how blocks of code are represented in Elixir's AST. Blocks are represented as a `__block__` call with each line of code in the block as a separate argument in a list.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/references/syntax-reference.md#2025-04-21_snippet_16\n\nLANGUAGE: elixir\nCODE:\n```\n\"quote do\\n  1\\n  2\\n  3\\nend\\n#=> {:__block__, [], [1, 2, 3]}\"\n```\n\nLANGUAGE: elixir\nCODE:\n```\n\"quote do 1; 2; 3; end\\n#=> {:__block__, [], [1, 2, 3]}\"\n```\n\n----------------------------------------\n\nTITLE: Using Plug in Elixir\nDESCRIPTION: Demonstrates how to use the Plug library with the `Plug.Builder` module in Elixir by accumulating modules as compile-time dependencies. It shows the macro definitions being used to register attributes and compile them. This highlights the issue of unnecessary compile-time dependencies.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/anti-patterns/macro-anti-patterns.md#2025-04-21_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule MyApp do\n  use Plug.Builder\n\n  plug MyApp.Authentication\nend\n```\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule Plug.Builder do\n  defmacro __using__(_opts) do\n    quote do\n      Module.register_attribute(__MODULE__, :plugs, accumulate: true)\n      @before_compile Plug.Builder\n    end\n  end\n\n  defmacro plug(mod) do\n    quote do\n      @plugs unquote(mod)\n    end\n  end\n\n  ...\nend\n```\n\nLANGUAGE: elixir\nCODE:\n```\ndef call(conn, _opts) do\n  MyApp.Authentication.call(conn)\nend\n```\n\n----------------------------------------\n\nTITLE: Converting Between Charlists and Strings in Elixir\nDESCRIPTION: Demonstrates conversion between charlists and strings using to_string/1 and to_charlist/1 functions. Shows polymorphic nature of these functions.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/binaries-strings-and-charlists.md#2025-04-21_snippet_11\n\nLANGUAGE: elixir\nCODE:\n```\niex> to_charlist(\"hełło\")\n[104, 101, 322, 322, 111]\niex> to_string(~c\"hełło\")\n\"hełło\"\niex> to_string(:hello)\n\"hello\"\niex> to_string(1)\n\"1\"\n```\n\n----------------------------------------\n\nTITLE: Handling exceptions in Elixir guards\nDESCRIPTION: This snippet illustrates how exceptions in guards can lead to unexpected behavior and demonstrates a corrected version using multiple guards to handle potential exceptions.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/references/patterns-and-guards.md#2025-04-21_snippet_24\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule Check do\n  # If given a tuple, map_size/1 will raise, and tuple_size/1 will not be evaluated\n  def empty?(val) when map_size(val) == 0 or tuple_size(val) == 0, do: true\n  def empty?(_val), do: false\nend\n\nCheck.empty?(%{})\n#=> true\n\nCheck.empty?({})\n#=> false # true was expected!\n```\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule Check do\n  # If given a tuple, map_size/1 will raise, and the second guard will be evaluated\n  def empty?(val)\n      when map_size(val) == 0\n      when tuple_size(val) == 0,\n      do: true\n\n  def empty?(_val), do: false\nend\n\nCheck.empty?(%{})\n#=> true\n\nCheck.empty?({})\n#=> true\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Releases in Mix Configuration\nDESCRIPTION: Defines release configurations for foo and bar nodes with version, applications, and distributed system cookie\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/mix-and-otp/config-and-releases.md#2025-04-21_snippet_7\n\nLANGUAGE: elixir\nCODE:\n```\nreleases: [\n  foo: [\n    version: \"0.0.1\",\n    applications: [kv_server: :permanent, kv: :permanent],\n    cookie: \"weknoweachother\"\n  ],\n  bar: [\n    version: \"0.0.1\",\n    applications: [kv: :permanent],\n    cookie: \"weknoweachother\"\n  ]\n]\n```\n\n----------------------------------------\n\nTITLE: Elixir Module Definition - Verbose\nDESCRIPTION: This snippet shows a more verbose, less readable, but equivalent way to define the same `Math` module and `add` function. This illustrates the underlying structure that the Elixir syntax simplifies.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/optional-syntax.md#2025-04-21_snippet_8\n\nLANGUAGE: elixir\nCODE:\n```\n```elixir\ndefmodule(Math, [\n  {:do, def(add(a, b), [{:do, a + b}])}\n])\n```\n```\n\n----------------------------------------\n\nTITLE: Executing an Elixir Script\nDESCRIPTION: This snippet demonstrates how to execute a simple Elixir script from the command line. The script, assumed to be saved as `simple.exs`, is executed using the `elixir` command. This will run the script and print the specified output to the console.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/introduction.md#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ elixir simple.exs\nHello world from Elixir\n```\n\n----------------------------------------\n\nTITLE: Non-reversible Inspect Protocol Example\nDESCRIPTION: Demonstrates how the Inspect protocol may lose information when representing certain data structures, indicated by the # prefix.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/protocols.md#2025-04-21_snippet_15\n\nLANGUAGE: elixir\nCODE:\n```\niex> inspect &(&1+2)\n\"#Function<6.71889879/1 in :erl_eval.expr/5>\"\n```\n\n----------------------------------------\n\nTITLE: Elixir AST Representation of Anonymous Function Calls\nDESCRIPTION: This code snippet shows how calls to anonymous functions (e.g., `foo.(1, 2, 3)`) are represented in Elixir's Abstract Syntax Tree (AST). Similar to remote calls, it uses the dot operator `.` but with a single argument representing the anonymous function.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/references/syntax-reference.md#2025-04-21_snippet_10\n\nLANGUAGE: elixir\nCODE:\n```\n\"quote do\\n  foo.(1, 2, 3)\\nend\\n#=> {{:., [], [{:foo, [], Elixir}]}, [], [1, 2, 3]}\"\n```\n\n----------------------------------------\n\nTITLE: Using Else in try Blocks for Pattern Matching in Elixir\nDESCRIPTION: Illustrates the use of an `else` block within a `try` construct for additional matching on results from the `try` block when successful. Here, different arithmetic outcomes lead to distinct symbolic results. Arithmetic operations and error management concepts form the prerequisites and context.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/try-catch-and-rescue.md#2025-04-21_snippet_12\n\nLANGUAGE: elixir\nCODE:\n```\niex> x = 2\n2\niex> try do\n...>   1 / x\n...> rescue\n...>   ArithmeticError ->\n...>     :infinity\n...> else\n...>   y when y < 1 and y > -1 ->\n...>     :small\n...>   _ ->\n...>     :large\n...> end\n:small\n```\n\n----------------------------------------\n\nTITLE: Macro for Route Definition in Elixir\nDESCRIPTION: Illustrates a macro for defining routes in a web application in Elixir. It dynamically checks the route and handler types, raising errors if they are incompatible, demonstrating how excessive code generation can emerge through repetitious macro use.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/anti-patterns/macro-anti-patterns.md#2025-04-21_snippet_2\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule Routes do\n  defmacro get(route, handler) do\n    quote do\n      route = unquote(route)\n      handler = unquote(handler)\n\n      if not is_binary(route) do\n        raise ArgumentError, \"route must be a binary\"\n      end\n\n      if not is_atom(handler) do\n        raise ArgumentError, \"handler must be a module\"\n      end\n\n      @store_route_for_compilation {route, handler}\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Unicode Code Points in Elixir\nDESCRIPTION: Shows how to get Unicode code points of characters using the ? operator and hex notation.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/binaries-strings-and-charlists.md#2025-04-21_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\niex> ?a\n97\niex> ?ł\n322\n```\n\n----------------------------------------\n\nTITLE: Bucket Temporary Status Test\nDESCRIPTION: Test case verifying that bucket processes are configured as temporary workers\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/mix-and-otp/dynamic-supervisor.md#2025-04-21_snippet_5\n\nLANGUAGE: elixir\nCODE:\n```\n  test \"are temporary workers\" do\n    assert Supervisor.child_spec(KV.Bucket, []).restart == :temporary\n  end\n```\n\n----------------------------------------\n\nTITLE: Non-Assertive Value Extraction from URL Query String\nDESCRIPTION: An example of non-assertive code that attempts to extract values from a URL query string without proper error handling or validation.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/anti-patterns/code-anti-patterns.md#2025-04-21_snippet_14\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule Extract do\n  def get_value(string, desired_key) do\n    parts = String.split(string, \"&\")\n\n    Enum.find_value(parts, fn pair ->\n      key_value = String.split(pair, \"=\")\n      Enum.at(key_value, 0) == desired_key && Enum.at(key_value, 1)\n    end)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Refactored Summation Function in Elixir\nDESCRIPTION: Transforms the `sum/2` macro into a standard named function, simplifying the logic and enhancing code clarity. This refactoring removes the need for meta-programming, making the function easier to use and maintain.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/anti-patterns/macro-anti-patterns.md#2025-04-21_snippet_5\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule MyMath do\n  def sum(v1, v2) do # <= The macro became a named function\n    v1 + v2\n  end\nend\n```\n\nLANGUAGE: elixir\nCODE:\n```\niex> MyMath.sum(3, 5)\n8\niex> MyMath.sum(3+1, 5+6)\n15\n```\n\n----------------------------------------\n\nTITLE: Elixir Empty Map Matching\nDESCRIPTION: Illustrates that an empty map pattern (`%{}`) matches all maps in Elixir, unlike tuples and lists where empty collections only match empty collections.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/references/patterns-and-guards.md#2025-04-21_snippet_15\n\nLANGUAGE: elixir\nCODE:\n```\niex> %{} = %{name: \"meg\"}\n%{name: \"meg\"}\n```\n\n----------------------------------------\n\nTITLE: Accessing Module Documentation in IEx\nDESCRIPTION: These IEx commands demonstrate how to access the documentation of a module and a function within that module using the `h` helper.  `h Math` displays the module-level documentation, while `h Math.sum` displays the documentation for the `sum` function.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/module-attributes.md#2025-04-21_snippet_2\n\nLANGUAGE: elixir\nCODE:\n```\niex> h Math # Access the docs for the module Math\n...\niex> h Math.sum # Access the docs for the sum function\n...\n```\n\n----------------------------------------\n\nTITLE: Defining System Configuration as a Constant in Elixir\nDESCRIPTION: This example defines a system configuration as a constant using a private function that returns a map.  Since data structures in Elixir are immutable, only a single instance of the map is allocated and shared across all function calls, as long as the data structure doesn't have any executable expression.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/module-attributes.md#2025-04-21_snippet_8\n\nLANGUAGE: elixir\nCODE:\n```\ndefp system_config(), do: %{timezone: \"Etc/UTC\", locale: \"pt-BR\"}\n```\n\n----------------------------------------\n\nTITLE: Anti-pattern: Complex Macro Implementation\nDESCRIPTION: Example showing a problematic macro implementation with too much logic embedded in the quoted expression. This approach makes the code harder to test and maintain.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/meta-programming/macros.md#2025-04-21_snippet_5\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule MyModule do\n  defmacro my_macro(a, b, c) do\n    quote do\n      do_this(unquote(a))\n      # ...\n      do_that(unquote(b))\n      # ...\n      and_that(unquote(c))\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Routing Table Configuration\nDESCRIPTION: Configures the routing table to point to the current node for development and testing.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/mix-and-otp/config-and-releases.md#2025-04-21_snippet_3\n\nLANGUAGE: elixir\nCODE:\n```\nconfig :kv, :routing_table, [{?a..?z, node()}]\n```\n\n----------------------------------------\n\nTITLE: Checking Child Specification in Elixir\nDESCRIPTION: Example of retrieving the child specification for KV.Registry, showing the automatically generated specification structure returned by child_spec/1.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/mix-and-otp/supervisor-and-application.md#2025-04-21_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\nKV.Registry.child_spec([])\n%{id: KV.Registry, start: {KV.Registry, :start_link, [[]]}}\n```\n\n----------------------------------------\n\nTITLE: Non-ASCII Charlist Representation in Elixir\nDESCRIPTION: Shows how charlists containing non-ASCII characters are represented as lists of integer code points. Demonstrates type checking with is_list/1.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/binaries-strings-and-charlists.md#2025-04-21_snippet_8\n\nLANGUAGE: elixir\nCODE:\n```\niex> ~c\"hełło\"\n[104, 101, 322, 322, 111]\niex> is_list(~c\"hełło\")\ntrue\n```\n\n----------------------------------------\n\nTITLE: Defining a Router Module in Elixir\nDESCRIPTION: This Elixir code snippet defines a module responsible for routing requests to specific nodes based on a routing table. Dependencies include Kernel and Task modules. Expects a bucket, module, function, and arguments as inputs, and routes the request based on the first byte of the bucket.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/mix-and-otp/distributed-tasks.md#2025-04-21_snippet_6\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule KV.Router do\n  @doc \"\"\"\n  Dispatch the given `mod`, `fun`, `args` request\n  to the appropriate node based on the `bucket`.\n  \"\"\"\n  def route(bucket, mod, fun, args) do\n    # Get the first byte of the binary\n    first = :binary.first(bucket)\n\n    # Try to find an entry in the table() or raise\n    entry =\n      Enum.find(table(), fn {enum, _node} ->\n        first in enum\n      end) || no_entry_error(bucket)\n\n    # If the entry node is the current node\n    if elem(entry, 1) == node() do\n      apply(mod, fun, args)\n    else\n      {KV.RouterTasks, elem(entry, 1)}\n      |> Task.Supervisor.async(KV.Router, :route, [bucket, mod, fun, args])\n      |> Task.await()\n    end\n  end\n\n  defp no_entry_error(bucket) do\n    raise \"could not find entry for #{inspect bucket} in table #{inspect table()}\"\n  end\n\n  @doc \"\"\"\n  The routing table.\n  \"\"\"\n  def table do\n    # Replace computer-name with your local machine name\n    [{?a..?m, :\"foo@computer-name\"}, {?n..?z, :\"bar@computer-name\"}]\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using Module Attributes in Patterns and Guards in Elixir\nDESCRIPTION: This snippet illustrates how module attributes can be used as compile-time constants within patterns and guards in Elixir.  `@default_timezone` is used in a pattern match, and `@time_periods` is used in a guard clause, providing a way to define constraints using module attributes since patterns and guards support limited expressions.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/module-attributes.md#2025-04-21_snippet_9\n\nLANGUAGE: elixir\nCODE:\n```\n# Inside pattern\n@default_timezone \"Etc/UTC\"\ndef shift(@default_timezone), do: ...\n\n# Inside guards\n@time_periods [:am, :pm]\ndef shift(time, period) when period in @time_periods, do: ...\n```\n\n----------------------------------------\n\nTITLE: Elixir If-Else with Square Brackets\nDESCRIPTION: This snippet encloses the keyword arguments of the `if` statement in square brackets. This illustrates that keyword lists as the last argument don't require square brackets, but they can be added.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/optional-syntax.md#2025-04-21_snippet_4\n\nLANGUAGE: elixir\nCODE:\n```\n```elixir\nif variable?, [do: Call.this(), else: Call.that()]\n```\n```\n\n----------------------------------------\n\nTITLE: Refactored Plug Macro in Elixir\nDESCRIPTION: Refactors the macro to expand literals within its intended context, reducing unnecessary compile-time dependencies. It shows a more efficient usage pattern by expanding macros in the runtime context of a function, enhancing modularity.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/anti-patterns/macro-anti-patterns.md#2025-04-21_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\ndefmacro plug(mod) do\n  mod = Macro.expand_literals(mod, %{__CALLER__ | function: {:call, 2}})\n\n  quote do\n    @plugs unquote(mod)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Elixir MatchError\nDESCRIPTION: Illustrates a MatchError that occurs when the left side of the match operator (=) does not match the value on the right side. This happens when attempting to match a different value (2) against an existing variable (x) that holds a different value (1).\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/references/patterns-and-guards.md#2025-04-21_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\niex> 2 = x\n** (MatchError) no match of right hand side value: 1\n```\n\n----------------------------------------\n\nTITLE: Forcing List Representation of Charlists in Elixir\nDESCRIPTION: Shows how to force charlists to be displayed as integer lists using inspect/2 function with charlists option.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/binaries-strings-and-charlists.md#2025-04-21_snippet_10\n\nLANGUAGE: elixir\nCODE:\n```\niex> inspect(heartbeats_per_minute, charlists: :as_list)\n\"[99, 97, 116]\"\n```\n\n----------------------------------------\n\nTITLE: Using Enum.intersperse for Efficient String Joining in Elixir\nDESCRIPTION: This snippet shows how to use Enum.intersperse to create an iodata structure for efficient string joining without unnecessary copying.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/io-and-the-file-system.md#2025-04-21_snippet_8\n\nLANGUAGE: elixir\nCODE:\n```\nEnum.intersperse([\"apple\", \"banana\", \"lemon\"], \",\")\n```\n\n----------------------------------------\n\nTITLE: Handling Arithmetic Errors in Elixir\nDESCRIPTION: This snippet demonstrates an arithmetic operation error in Elixir when adding a number to an atom. No prerequisites are required to reproduce this error in the Elixir interactive shell.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/try-catch-and-rescue.md#2025-04-21_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\niex> :foo + 1\n** (ArithmeticError) bad argument in arithmetic expression\n     :erlang.+(:foo, 1)\n```\n\n----------------------------------------\n\nTITLE: Comments Overuse Example in Elixir\nDESCRIPTION: Example showing excessive commenting of self-explanatory code that reduces readability. The function calculates Unix timestamp 5 minutes from current time.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/anti-patterns/code-anti-patterns.md#2025-04-21_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\n# Returns the Unix timestamp of 5 minutes from the current time\ndefp unix_five_min_from_now do\n  # Get the current time\n  now = DateTime.utc_now()\n\n  # Convert it to a Unix timestamp\n  unix_now = DateTime.to_unix(now, :second)\n\n  # Add five minutes in seconds\n  unix_now + (60 * 5)\nend\n```\n\n----------------------------------------\n\nTITLE: String and Charlist Concatenation in Elixir\nDESCRIPTION: Shows the difference between string concatenation (<>) and charlist concatenation (++) operators, including error cases.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/binaries-strings-and-charlists.md#2025-04-21_snippet_12\n\nLANGUAGE: elixir\nCODE:\n```\niex> ~c\"this \" <> ~c\"fails\"\n** (ArgumentError) expected binary argument in <> operator but got: ~c\"this \"\n    (elixir) lib/kernel.ex:1821: Kernel.wrap_concatenation/3\n    (elixir) lib/kernel.ex:1808: Kernel.extract_concatenations/2\n    (elixir) expanding macro: Kernel.<>/2\n    iex:1: (file)\niex> ~c\"this \" ++ ~c\"works\"\n~c\"this works\"\niex> \"he\" ++ \"llo\"\n** (ArgumentError) argument error\n    :erlang.++(\"he\", \"llo\")\niex> \"he\" <> \"llo\"\n\"hello\"\n```\n\n----------------------------------------\n\nTITLE: Protocol Type Checking - String Interpolation Example\nDESCRIPTION: Demonstrates type checking for protocol dispatch with string interpolation, showing how Elixir warns when attempting to interpolate incompatible types.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule Example do\n  def my_code(first..last//step = range) do\n    \"hello #{range}\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Elixir AST Representation of Maps\nDESCRIPTION: This snippet demonstrates how maps are represented in Elixir's AST. Pairs within the map are treated as a list of two-element tuples, and the entire map is represented as a tuple with the atom `:%{}` and a list of these pairs.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/references/syntax-reference.md#2025-04-21_snippet_15\n\nLANGUAGE: elixir\nCODE:\n```\n\"quote do\\n  %{1 => 2, 3 => 4}\\nend\\n#=> {:%{}, [], [{1, 2}, {3, 4}]}\"\n```\n\n----------------------------------------\n\nTITLE: Anti-Pattern: Scattered Agent Interface Implementation\nDESCRIPTION: Example showing problematic scattered process interfaces across multiple modules using Agent.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/anti-patterns/process-anti-patterns.md#2025-04-21_snippet_2\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule A do\n  def update(process) do\n    # Some other code...\n    Agent.update(process, fn _list -> 123 end)\n  end\nend\n```\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule B do\n  def update(process) do\n    # Some other code...\n    Agent.update(process, fn content -> %{a: content} end)\n  end\nend\n```\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule C do\n  def update(process) do\n    # Some other code...\n    Agent.update(process, fn content -> [:atom_value | content] end)\n  end\nend\n```\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule D do\n  def get(process) do\n    # Some other code...\n    Agent.get(process, fn content -> content end)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Elixir Atom Matching\nDESCRIPTION: Shows how atoms are matched in Elixir. Atoms must be exactly the same to match. A MatchError occurs if they are different.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/references/patterns-and-guards.md#2025-04-21_snippet_7\n\nLANGUAGE: elixir\nCODE:\n```\niex> :atom = :atom\n:atom\niex> :atom = :another_atom\n** (MatchError) no match of right hand side value: :another_atom\n```\n\n----------------------------------------\n\nTITLE: Type Inference Example - Integer Operations in Elixir\nDESCRIPTION: Shows type inference for function parameters where Elixir determines they must be integers based on usage with Integer.to_string/1.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\ndef sum_to_string(a, b) do\n  Integer.to_string(a + b)\nend\n```\n\n----------------------------------------\n\nTITLE: Child Application mix.exs\nDESCRIPTION: This `mix.exs` file defines the `kv_server` application within the umbrella project. The `build_path`, `config_path`, `deps_path`, and `lockfile` configurations point to the umbrella project's directories, ensuring that dependencies and configuration are shared across all child applications. The `application` function specifies the application callback module.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/mix-and-otp/dependencies-and-umbrella-projects.md#2025-04-21_snippet_8\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule KVServer.MixProject do\n  use Mix.Project\n\n  def project do\n    [\n      app: :kv_server,\n      version: \"0.1.0\",\n      build_path: \"../../_build\",\n      config_path: \"../../config/config.exs\",\n      deps_path: \"../../deps\",\n      lockfile: \"../../mix.lock\",\n      elixir: \"~> 1.14\",\n      start_permanent: Mix.env() == :prod,\n      deps: deps()\n    ]\n  end\n\n  # Run \"mix help compile.app\" to learn about applications\n  def application do\n    [\n      extra_applications: [:logger],\n      mod: {KVServer.Application, []}\n    ]\n  end\n\n  # Run \"mix help deps\" to learn about dependencies\n  defp deps do\n    [\n      # {:dep_from_hexpm, \"~> 0.3.0\"},\n      # {:dep_from_git, git: \"https://github.com/elixir-lang/my_dep.git\", tag: \"0.1.0\"},\n      # {:sibling_app_in_umbrella, in_umbrella: true},\n    ]\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Starting Interactive Elixir Shell with Mix\nDESCRIPTION: Demonstrates how to start an interactive Elixir shell with the Mix environment loaded to experiment with the project.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/mix-and-otp/introduction-to-mix.md#2025-04-21_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ iex -S mix\n```\n\n----------------------------------------\n\nTITLE: Assertive Value Extraction from URL Query String\nDESCRIPTION: Refactored version of the previous example, using pattern matching to handle errors and provide more assertive behavior.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/anti-patterns/code-anti-patterns.md#2025-04-21_snippet_15\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule Extract do\n  def get_value(string, desired_key) do\n    parts = String.split(string, \"&\")\n\n    Enum.find_value(parts, fn pair ->\n      [key, value] = String.split(pair, \"=\") # <= pattern matching\n      key == desired_key && value\n    end)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: String Operations with Lists and Tuples in Elixir\nDESCRIPTION: Demonstrates String module operations returning lists and tuples based on operation characteristics.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/lists-and-tuples.md#2025-04-21_snippet_6\n\nLANGUAGE: elixir\nCODE:\n```\niex> String.split(\"hello world\")\n[\"hello\", \"world\"]\niex> String.split(\"hello beautiful world\")\n[\"hello\", \"beautiful\", \"world\"]\n\niex> String.split_at(\"hello world\", 3)\n{\"hel\", \"lo world\"}\niex> String.split_at(\"hello world\", -4)\n{\"hello w\", \"orld\"}\n```\n\n----------------------------------------\n\nTITLE: File Reading with Error Handling\nDESCRIPTION: Shows different approaches to reading files, including pattern matching for error handling and using bang (!) variants\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/io-and-the-file-system.md#2025-04-21_snippet_2\n\nLANGUAGE: elixir\nCODE:\n```\nFile.read(\"path/to/file/hello\")\nFile.read!(\"path/to/file/hello\")\n\ncase File.read(\"path/to/file/hello\") do\n  {:ok, body} -> # do something with the body\n  {:error, reason} -> # handle the error\nend\n```\n\n----------------------------------------\n\nTITLE: Optional Callbacks in Elixir Behaviours\nDESCRIPTION: Shows how to define optional callbacks using the @optional_callbacks module attribute\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/references/typespecs.md#2025-04-21_snippet_7\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule MyBehaviour do\n  @callback vital_fun() :: any\n  @callback non_vital_fun() :: any\n  @macrocallback non_vital_macro(arg :: any) :: Macro.t\n  @optional_callbacks non_vital_fun: 0, non_vital_macro: 1\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Application Environment in mix.exs\nDESCRIPTION: Defines the application configuration in mix.exs file, setting up the routing table with an empty default value.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/mix-and-otp/config-and-releases.md#2025-04-21_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\ndef application do\n  [\n    extra_applications: [:logger],\n    env: [routing_table: []],\n    mod: {KV, []}\n  ]\nend\n```\n\n----------------------------------------\n\nTITLE: Anti-Pattern: Calculator Implementation Using GenServer\nDESCRIPTION: Example of unnecessarily organizing arithmetic operations in a GenServer process, which can create performance bottlenecks.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/anti-patterns/process-anti-patterns.md#2025-04-21_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule Calculator do\n  @moduledoc \"\"\"\n  Calculator that performs basic arithmetic operations.\n\n  This code is unnecessarily organized in a GenServer process.\n  \"\"\"\n\n  use GenServer\n\n  def add(a, b, pid) do\n    GenServer.call(pid, {:add, a, b})\n  end\n\n  def subtract(a, b, pid) do\n    GenServer.call(pid, {:subtract, a, b})\n  end\n\n  @impl GenServer\n  def init(init_arg) do\n    {:ok, init_arg}\n  end\n\n  @impl GenServer\n  def handle_call({:add, a, b}, _from, state) do\n    {:reply, a + b, state}\n  end\n\n  def handle_call({:subtract, a, b}, _from, state) do\n    {:reply, a - b, state}\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Regular Expression Delimiter Options in Elixir\nDESCRIPTION: Shows the eight different delimiter options available for regular expression sigils in Elixir.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/sigils.md#2025-04-21_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\n~r/hello/\n~r|hello|\n~r\"hello\"\n~r'hello'\n~r(hello)\n~r[hello]\n~r{hello}\n~r<hello>\n```\n\n----------------------------------------\n\nTITLE: Variable Scope Management in try Constructs in Elixir\nDESCRIPTION: Describes how variables within `try` blocks are scoped in Elixir. The snippet shows that variables declared inside `try/catch/rescue/after` do not propagate to outer scopes, requiring a return to handle variable values. Prerequisites include understanding Elixir variable scoping and `try` semantics.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/try-catch-and-rescue.md#2025-04-21_snippet_13\n\nLANGUAGE: elixir\nCODE:\n```\niex> try do\n...>   raise \"fail\"\n...>   what_happened = :did_not_raise\n...> rescue\n...>   _ -> what_happened = :rescued\n...> end\niex> what_happened\n** (CompileError) undefined variable \"what_happened\"\n```\n\n----------------------------------------\n\nTITLE: Quoting Elixir Code to Get AST\nDESCRIPTION: This example shows how to use the `quote` macro in Elixir to retrieve the Abstract Syntax Tree (AST) of a given expression. The `quote do ... end` block captures the Elixir code within and returns its AST representation, which can then be inspected and manipulated.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/references/syntax-reference.md#2025-04-21_snippet_6\n\nLANGUAGE: elixir\nCODE:\n```\n\"quote do\\n  sum()\\nend\\n#=> {:sum, [], []}\"\n```\n\n----------------------------------------\n\nTITLE: Macro for Summation in Elixir\nDESCRIPTION: Showcases a macro `sum/2` that sums two numbers using Elixir's meta-programming features. Highlights how macros can complicate code unnecessarily, suggesting a simpler approach using functions.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/anti-patterns/macro-anti-patterns.md#2025-04-21_snippet_4\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule MyMath do\n  defmacro sum(v1, v2) do\n    quote do\n      unquote(v1) + unquote(v2)\n    end\n  end\nend\n```\n\nLANGUAGE: elixir\nCODE:\n```\niex> require MyMath\nMyMath\niex> MyMath.sum(3, 5)\n8\niex> MyMath.sum(3 + 1, 5 + 6)\n15\n```\n\n----------------------------------------\n\nTITLE: Application Callback Configuration\nDESCRIPTION: Updates Mix project configuration to specify the application callback module\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/mix-and-otp/supervisor-and-application.md#2025-04-21_snippet_8\n\nLANGUAGE: elixir\nCODE:\n```\n  def application do\n    [\n      extra_applications: [:logger],\n      mod: {KV, []}\n    ]\n  end\n```\n\n----------------------------------------\n\nTITLE: Snake Case Variable Definition in Elixir\nDESCRIPTION: Demonstrates the proper snake_case naming convention for variables and function calls in Elixir.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/references/naming-conventions.md#2025-04-21_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\nsome_map = %{this_is_a_key: \"and a value\"}\nis_map(some_map)\n```\n\n----------------------------------------\n\nTITLE: ExUnit Test Helper Initialization\nDESCRIPTION: A single line Elixir script that starts the ExUnit framework, ensuring tests are properly initialized before running.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/mix-and-otp/introduction-to-mix.md#2025-04-21_snippet_9\n\nLANGUAGE: elixir\nCODE:\n```\nExUnit.start()\n```\n\n----------------------------------------\n\nTITLE: Non-Assertive Truthiness in Elixir Conditionals\nDESCRIPTION: An example of using the && operator in a conditional where both operands are expected to be booleans, which may lead to unclear code.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/anti-patterns/code-anti-patterns.md#2025-04-21_snippet_17\n\nLANGUAGE: elixir\nCODE:\n```\nif is_binary(name) && is_integer(age) do\n  # ...\nelse\n  # ...\nend\n```\n\n----------------------------------------\n\nTITLE: Running Elixir Node for Tests\nDESCRIPTION: Shell commands to start Elixir nodes necessary for distributed test execution. This requires IEx and Mix tools for the environment setup.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/mix-and-otp/distributed-tasks.md#2025-04-21_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n$ iex --sname bar -S mix\n$ elixir --sname foo -S mix test\n```\n\n----------------------------------------\n\nTITLE: Registry Start Link Implementation\nDESCRIPTION: Shows how the Registry module passes options to GenServer for process initialization\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/mix-and-otp/supervisor-and-application.md#2025-04-21_snippet_5\n\nLANGUAGE: elixir\nCODE:\n```\n  def start_link(opts) do\n    GenServer.start_link(__MODULE__, :ok, opts)\n  end\n```\n\n----------------------------------------\n\nTITLE: Basic Distributed Module Definition\nDESCRIPTION: Simple module definition demonstrating basic distributed functionality with a hello world example.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/mix-and-otp/distributed-tasks.md#2025-04-21_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule Hello do\n  def world, do: IO.puts(\"hello world\")\nend\n```\n\n----------------------------------------\n\nTITLE: Displaying Elixir-Erlang/OTP Compatibility Matrix\nDESCRIPTION: Markdown table showing compatibility between Elixir versions and their supported Erlang/OTP versions.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/references/compatibility-and-deprecations.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nElixir version | Supported Erlang/OTP versions\n:------------- | :-------------------------------\n1.19           | 26 - 27\n1.18           | 25 - 27\n1.17           | 25 - 27\n1.16           | 24 - 26\n1.15           | 24 - 26\n1.14           | 23 - 25 (and Erlang/OTP 26 from v1.14.5)\n1.13           | 22 - 24 (and Erlang/OTP 25 from v1.13.4)\n1.12           | 22 - 24\n1.11           | 21 - 23 (and Erlang/OTP 24 from v1.11.4)\n1.10           | 21 - 22 (and Erlang/OTP 23 from v1.10.3)\n1.9            | 20 - 22\n1.8            | 20 - 22\n1.7            | 19 - 22\n1.6            | 19 - 20 (and Erlang/OTP 21 from v1.6.6)\n1.5            | 18 - 20\n1.4            | 18 - 19 (and Erlang/OTP 20 from v1.4.5)\n1.3            | 18 - 19\n1.2            | 18 - 18 (and Erlang/OTP 19 from v1.2.6)\n1.1            | 17 - 18\n1.0            | 17 - 17 (and Erlang/OTP 18 from v1.0.5)\n```\n\n----------------------------------------\n\nTITLE: Defining Umbrella Dependency\nDESCRIPTION: This code snippet defines a dependency on the `:kv` application within the umbrella project for the `:kv_server` application. The `in_umbrella: true` option tells Mix to look for the dependency within the umbrella project.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/mix-and-otp/dependencies-and-umbrella-projects.md#2025-04-21_snippet_11\n\nLANGUAGE: elixir\nCODE:\n```\ndefp deps do\n  [{:kv, in_umbrella: true}]\nend\n```\n\n----------------------------------------\n\nTITLE: Conflict with use Directive in Elixir\nDESCRIPTION: Demonstrates how using the `use/1` directive in Elixir can propagate dependencies unexpectedly, leading to conflicts and difficult-to-read code. It shows a conflict arising from function name clashes due to module imports.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/anti-patterns/macro-anti-patterns.md#2025-04-21_snippet_6\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule ModuleA do\n  def foo do\n    \"From Module A\"\n  end\nend\n```\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule Library do\n  defmacro __using__(_opts) do\n    quote do\n      import Library\n      import ModuleA  # <= propagating dependencies!\n    end\n  end\n\n  def from_lib do\n    \"From Library\"\n  end\nend\n```\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule ClientApp do\n  use Library\n\n  def foo do\n    \"Local function from client app\"\n  end\n\n  def from_client_app do\n    from_lib() <> \" - \" <> foo()\n  end\nend\n```\n\nLANGUAGE: elixir\nCODE:\n```\niex> ClientApp.from_client_app()\n\"From Library - Local function from client app\"\n```\n\n----------------------------------------\n\nTITLE: Refactored: Simple Module-based Calculator\nDESCRIPTION: Proper implementation of calculator functionality using plain modules and functions without unnecessary process overhead.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/anti-patterns/process-anti-patterns.md#2025-04-21_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule Calculator do\n  def add(a, b) do\n    a + b\n  end\n\n  def subtract(a, b) do\n    a - b\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Creating a New Mix Project\nDESCRIPTION: Shows the console command for creating a new Elixir project named 'kv' with Mix, specifying 'KV' as the main module.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/mix-and-otp/introduction-to-mix.md#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ mix new kv --module KV\n```\n\n----------------------------------------\n\nTITLE: Elixir Module Definition\nDESCRIPTION: This snippet defines a simple Elixir module named `Math` with a function `add` that takes two arguments and returns their sum.  It showcases the typical concise syntax used in Elixir.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/optional-syntax.md#2025-04-21_snippet_7\n\nLANGUAGE: elixir\nCODE:\n```\n```elixir\ndefmodule Math do\n  def add(a, b) do\n    a + b\n  end\nend\n```\n```\n\n----------------------------------------\n\nTITLE: Creating New Elixir Library with Mix\nDESCRIPTION: Command to create a new Elixir library project using the mix build tool. The project name follows snake_case convention.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/references/library-guidelines.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ mix new my_library\n```\n\n----------------------------------------\n\nTITLE: Understanding Elixir Aliases\nDESCRIPTION: This snippet provides insight into how Elixir translates aliases into atoms, demonstrating with examples the conversion process during compilation.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/alias-require-and-import.md#2025-04-21_snippet_4\n\nLANGUAGE: elixir\nCODE:\n```\niex> is_atom(String)\ntrue\niex> to_string(String)\n\"Elixir.String\"\niex> :\"Elixir.String\" == String\ntrue\n```\n\n----------------------------------------\n\nTITLE: Configuring Umbrella Path in mix.exs\nDESCRIPTION: These lines configure the build, config, deps, and lock file paths for the `kv` application within the umbrella. This ensures that the dependencies and configuration are shared across all applications in the umbrella.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/mix-and-otp/dependencies-and-umbrella-projects.md#2025-04-21_snippet_12\n\nLANGUAGE: elixir\nCODE:\n```\nbuild_path: \"../../_build\",\nconfig_path: \"../../config/config.exs\",\ndeps_path: \"../../deps\",\nlockfile: \"../../mix.lock\",\n```\n\n----------------------------------------\n\nTITLE: Compiling Elixir Project in Production Environment\nDESCRIPTION: This console command shows how to compile an Elixir project in the production environment by setting the MIX_ENV environment variable.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/mix-and-otp/introduction-to-mix.md#2025-04-21_snippet_13\n\nLANGUAGE: console\nCODE:\n```\n$ MIX_ENV=prod mix compile\n```\n\n----------------------------------------\n\nTITLE: Specifying Function Arguments for Documentation in Elixir\nDESCRIPTION: This snippet shows how to document function argument names in Elixir. By specifying the function head before the implementation, clearer names can be provided instead of relying on compiler inference.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/writing-documentation.md#2025-04-21_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\n```elixir\n\ndef size(map_with_size)\n\ndef size(%{size: size}) do\n  size\nend\n```\n```\n\n----------------------------------------\n\nTITLE: Unquoting a function name in Elixir\nDESCRIPTION: This example shows how `unquote/1` can be used to inject a function name into a quoted expression, allowing for dynamic function calls. The value of the `fun` variable (:hello) is injected as the function name in the expression `unquote(fun)(:world)`.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/meta-programming/quote-and-unquote.md#2025-04-21_snippet_7\n\nLANGUAGE: elixir\nCODE:\n```\niex> fun = :hello\niex> Macro.to_string(quote do: unquote(fun)(:world))\n\"hello(:world)\"\n```\n\n----------------------------------------\n\nTITLE: Recompiling Project within IEx\nDESCRIPTION: Shows the 'recompile' helper command usage in IEx for recompiling project files without restarting the session.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/mix-and-otp/introduction-to-mix.md#2025-04-21_snippet_7\n\nLANGUAGE: elixir\nCODE:\n```\niex> recompile()\nCompiling 1 file (.ex)\n:ok\niex> recompile()\n:noop\n```\n\n----------------------------------------\n\nTITLE: Managing Supervised Counters in IEx Shell\nDESCRIPTION: Interactive example demonstrating supervisor operations including checking child process status, terminating and restarting processes, and handling process failures.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/anti-patterns/process-anti-patterns.md#2025-04-21_snippet_7\n\nLANGUAGE: elixir\nCODE:\n```\niex> Supervisor.count_children(App.Supervisor)\n%{active: 2, specs: 2, supervisors: 0, workers: 2}\niex> Counter.get(Counter)\n0\niex> Counter.get(:other_counter)\n15\niex> Counter.bump(Counter, 7)\n7\niex> Supervisor.terminate_child(App.Supervisor, Counter)\niex> Supervisor.count_children(App.Supervisor) # Only one active child\n%{active: 1, specs: 2, supervisors: 0, workers: 2}\niex> Counter.get(Counter) # The process was terminated\n** (EXIT) no process: the process is not alive...\niex> Supervisor.restart_child(App.Supervisor, Counter)\niex> Counter.get(Counter) # After the restart, this process can be used again\n0\n```\n\n----------------------------------------\n\nTITLE: Basic Module Definition in Elixir\nDESCRIPTION: An Elixir module with a single 'hello' function, demonstrating basic module and function documentation within a Mix project.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/mix-and-otp/introduction-to-mix.md#2025-04-21_snippet_4\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule KV do\n  @moduledoc \"\"\"\n  Documentation for KV.\n  \"\"\"\n\n  @doc \"\"\"\n  Hello world.\n\n  ## Examples\n\n      iex> KV.hello()\n      :world\n\n  \"\"\"\n  def hello do\n    :world\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Elixir If-Else with Tuples\nDESCRIPTION: This snippet shows that keyword lists are the same as lists of two-element tuples where the first element is an atom.  This representation highlights the underlying structure of keyword lists.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/optional-syntax.md#2025-04-21_snippet_5\n\nLANGUAGE: elixir\nCODE:\n```\n```elixir\nif variable?, [{:do, Call.this()}, {:else, Call.that()}]\n```\n```\n\n----------------------------------------\n\nTITLE: Creating an Admonition Block for Module Usage Documentation in Markdown\nDESCRIPTION: This code snippet demonstrates how to create an admonition block in Markdown to document the effects of using a module. It uses the GenServer module as an example, explaining how it sets the behavior and defines a child_spec/1 function.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/anti-patterns/macro-anti-patterns.md#2025-04-21_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n> #### `use GenServer` {: .info}\n>\n> When you `use GenServer`, the `GenServer` module will\n> set `@behaviour GenServer` and define a `child_spec/1`\n> function, so your module can be used as a child\n> in a supervision tree.\n```\n\n----------------------------------------\n\nTITLE: Running Tests in Umbrella Project\nDESCRIPTION: This command runs all tests for all applications within the umbrella project. It needs to be executed from the root directory of the umbrella project.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/mix-and-otp/dependencies-and-umbrella-projects.md#2025-04-21_snippet_10\n\nLANGUAGE: console\nCODE:\n```\n$ mix test\n```\n\n----------------------------------------\n\nTITLE: Adjusting Tests After ETS Integration\nDESCRIPTION: This snippet modifies the setup function in tests to accommodate the new naming convention required by the ETS cache mechanism, ensuring that the registry is started with a unique name for each test context.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/mix-and-otp/erlang-term-storage.md#2025-04-21_snippet_3\n\nLANGUAGE: elixir\nCODE:\n```\nsetup context do\n  _ = start_supervised!({KV.Registry, name: context.test})\n  %{registry: context.test}\nend\n```\n\n----------------------------------------\n\nTITLE: Using Module Attributes with ExUnit\nDESCRIPTION: This example shows how to use module attributes with ExUnit, Elixir's unit testing framework.  It demonstrates setting `async: true` to change module compilation and using `@tag` to annotate tests, enabling filtering and setup for specific test scenarios.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/module-attributes.md#2025-04-21_snippet_10\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule MyTest do\n  use ExUnit.Case, async: true\n\n  @tag :external\n  @tag os: :unix\n  test \"contacts external service\" do\n    # ...\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Application Resource File\nDESCRIPTION: Shows the content of the generated .app file containing application metadata\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/mix-and-otp/supervisor-and-application.md#2025-04-21_snippet_7\n\nLANGUAGE: erlang\nCODE:\n```\n{application,kv,\n             [{applications,[kernel,stdlib,elixir,logger]},\n              {description,\"kv\"},\n              {modules,['Elixir.KV','Elixir.KV.Bucket','Elixir.KV.Registry',\n                        'Elixir.KV.Supervisor']},\n              {registered,[]},\n              {vsn,\"0.1.0\"}]}.\n```\n\n----------------------------------------\n\nTITLE: Complex With-Else Pattern Example in Elixir\nDESCRIPTION: Demonstrates problematic handling of multiple error cases in a single else block within a with expression.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/anti-patterns/code-anti-patterns.md#2025-04-21_snippet_2\n\nLANGUAGE: elixir\nCODE:\n```\ndef open_decoded_file(path) do\n  with {:ok, encoded} <- File.read(path),\n       {:ok, decoded} <- Base.decode64(encoded) do\n    {:ok, String.trim(decoded)}\n  else\n    {:error, _} -> {:error, :badfile}\n    :error -> {:error, :badencoding}\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Running a Specific Test with Mix\nDESCRIPTION: Shows how to target and run a specific test case in an Elixir project by providing the test location to 'mix test'.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/mix-and-otp/introduction-to-mix.md#2025-04-21_snippet_11\n\nLANGUAGE: console\nCODE:\n```\n$ mix test test/kv_test.exs:5\n```\n\n----------------------------------------\n\nTITLE: Demonstrating KV Store Protocol Commands\nDESCRIPTION: Example showing the basic command protocol for a key-value store application, including CREATE, PUT, GET, and DELETE operations.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/mix-and-otp/dependencies-and-umbrella-projects.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nCREATE shopping\nOK\n\nPUT shopping milk 1\nOK\n\nPUT shopping eggs 3\nOK\n\nGET shopping milk\n1\nOK\n\nDELETE shopping eggs\nOK\n```\n\n----------------------------------------\n\nTITLE: Final Supervisor Configuration\nDESCRIPTION: Updated supervisor configuration with one_for_all strategy and correct child ordering\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/mix-and-otp/dynamic-supervisor.md#2025-04-21_snippet_6\n\nLANGUAGE: elixir\nCODE:\n```\n  def init(:ok) do\n    children = [\n      {DynamicSupervisor, name: KV.BucketSupervisor, strategy: :one_for_one},\n      {KV.Registry, name: KV.Registry}\n    ]\n\n    Supervisor.init(children, strategy: :one_for_all)\n  end\n```\n\n----------------------------------------\n\nTITLE: Elixir AST Representation of a Variable\nDESCRIPTION: This example shows how variables are represented in Elixir's Abstract Syntax Tree (AST). Variables are represented by a tuple where the third element is an atom representing the variable context. Here, the variable `sum` is in the `Elixir` context.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/references/syntax-reference.md#2025-04-21_snippet_7\n\nLANGUAGE: elixir\nCODE:\n```\n\"quote do\\n  sum\\nend\\n#=> {:sum, [], Elixir}\"\n```\n\n----------------------------------------\n\nTITLE: Application Callback Module\nDESCRIPTION: This module defines the application callback function, `start/2`, which is responsible for starting the application's supervision tree.  The `Supervisor.start_link` function starts the supervisor with a `one_for_one` strategy and a name.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/mix-and-otp/dependencies-and-umbrella-projects.md#2025-04-21_snippet_9\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule KVServer.Application do\n  # See https://hexdocs.pm/elixir/Application.html\n  # for more information on OTP Applications\n  @moduledoc false\n\n  use Application\n\n  @impl true\n  def start(_type, _args) do\n    # List all child processes to be supervised\n    children = [\n      # Starts a worker by calling: KVServer.Worker.start_link(arg)\n      # {KVServer.Worker, arg},\n    ]\n\n    # See https://hexdocs.pm/elixir/Supervisor.html\n    # for other strategies and supported options\n    opts = [strategy: :one_for_one, name: KVServer.Supervisor]\n    Supervisor.start_link(children, opts)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Filtering Ranges with Enum in Elixir\nDESCRIPTION: This example shows how to filter a range of numbers using `Enum.filter` to keep only the odd numbers.  A function `odd?` is defined to check if a number is odd, and then `Enum.filter` is used to apply this function to the range `1..3`.  The snippet requires the `Enum` module.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/enumerable-and-streams.md#2025-04-21_snippet_4\n\nLANGUAGE: elixir\nCODE:\n```\niex> odd? = fn x -> rem(x, 2) != 0 end\n#Function<6.80484245/1 in :erl_eval.expr/5>\niex> Enum.filter(1..3, odd?)\n[1, 3]\n```\n\n----------------------------------------\n\nTITLE: Concise Function Definition Syntax\nDESCRIPTION: Alternative syntax for function definitions using do: notation.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/modules-and-functions.md#2025-04-21_snippet_6\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule Math do\n  def zero?(0), do: true\n  def zero?(x) when is_integer(x), do: false\nend\n```\n\n----------------------------------------\n\nTITLE: Recompiling Elixir Project\nDESCRIPTION: Command for recompiling all Elixir and Erlang modules in the project\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/CONTRIBUTING.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nmake compile\n```\n\n----------------------------------------\n\nTITLE: Compilable Math Module Definition\nDESCRIPTION: Example of a Math module definition saved in a .ex file for compilation.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/modules-and-functions.md#2025-04-21_snippet_2\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule Math do\n  def sum(a, b) do\n    a + b\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Windows Release Environment Configuration\nDESCRIPTION: Configures release environment variables for distributed node management in batch script\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/mix-and-otp/config-and-releases.md#2025-04-21_snippet_9\n\nLANGUAGE: bat\nCODE:\n```\n@echo off\nrem Set the release to work across nodes\nset RELEASE_DISTRIBUTION=name\nset RELEASE_NODE=<%= @release.name %>\n```\n\n----------------------------------------\n\nTITLE: Temporary Bucket Agent Configuration\nDESCRIPTION: Configuration of bucket as temporary agent that won't be restarted on termination\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/mix-and-otp/dynamic-supervisor.md#2025-04-21_snippet_4\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule KV.Bucket do\n  use Agent, restart: :temporary\n```\n\n----------------------------------------\n\nTITLE: Creating an Umbrella Project with Mix\nDESCRIPTION: This command creates a new Elixir umbrella project named `kv_umbrella`. The `--umbrella` flag tells Mix to create a project with a different structure, designed to hold multiple child applications.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/mix-and-otp/dependencies-and-umbrella-projects.md#2025-04-21_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ mix new kv_umbrella --umbrella\n* creating README.md\n* creating .formatter.exs\n* creating .gitignore\n* creating mix.exs\n* creating apps\n* creating config\n* creating config/config.exs\n```\n\n----------------------------------------\n\nTITLE: Creating a Child Application with Mix\nDESCRIPTION: This command creates a new Elixir application named `kv_server` within the `apps` directory of the `kv_umbrella` project.  The `--sup` flag instructs Mix to generate a supervision tree for the application.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/mix-and-otp/dependencies-and-umbrella-projects.md#2025-04-21_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ cd kv_umbrella/apps\n$ mix new kv_server --module KVServer --sup\n```\n\n----------------------------------------\n\nTITLE: Combining Explicit and Implicit Default Values in Elixir Structs\nDESCRIPTION: Shows how to define a struct with both explicit default values and implicit nil values.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/structs.md#2025-04-21_snippet_7\n\nLANGUAGE: elixir\nCODE:\n```\niex> defmodule User do\n...>   defstruct [:email, name: \"John\", age: 27]\n...> end\niex> %User{}\n%User{age: 27, email: nil, name: \"John\"}\n```\n\n----------------------------------------\n\nTITLE: Case and Cond Clause Example using Arrow Syntax in Elixir\nDESCRIPTION: Demonstrates the use of the left-to-right arrow (->) in Elixir, which is used to associate conditions with expressions in 'case' and 'cond' constructs. The example shows how the arrow separates pattern matching clauses from their corresponding expressions, encapsulated within 'do' and 'end' blocks. No external dependencies are necessary.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/references/syntax-reference.md#2025-04-21_snippet_2\n\nLANGUAGE: elixir\nCODE:\n```\ncase 1 do\n  2 -> 3\n  4 -> 5\nend\n\ncond do\n  true -> false\nend\n```\n\n----------------------------------------\n\nTITLE: Apache License Boilerplate Notice Template\nDESCRIPTION: Standard boilerplate notice template for applying the Apache License to software works. The template includes placeholders for copyright year and owner information.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/LICENSES/Apache-2.0.txt#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nCopyright [yyyy] [name of copyright owner]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n```\n\n----------------------------------------\n\nTITLE: Charlist Sigil Implementation in Elixir\nDESCRIPTION: Shows how to create charlists using the ~c sigil and equivalent character code representation.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/sigils.md#2025-04-21_snippet_3\n\nLANGUAGE: elixir\nCODE:\n```\n[?c, ?a, ?t]\n~c(this is a char list containing \"double quotes\")\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Character Ranges for Gurung Khema Script\nDESCRIPTION: This snippet defines the Unicode character ranges for the Gurung Khema script. It includes letter characters (Lo), combining marks (Mn), spacing marks (Mc), and numeric digits (Nd).\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/Scripts.txt#2025-04-21_snippet_102\n\nLANGUAGE: Unicode\nCODE:\n```\n16100..1611D  ; Gurung_Khema # Lo  [30] GURUNG KHEMA LETTER A..GURUNG KHEMA LETTER SA\n1611E..16129  ; Gurung_Khema # Mn  [12] GURUNG KHEMA VOWEL SIGN AA..GURUNG KHEMA VOWEL LENGTH MARK\n1612A..1612C  ; Gurung_Khema # Mc   [3] GURUNG KHEMA CONSONANT SIGN MEDIAL YA..GURUNG KHEMA CONSONANT SIGN MEDIAL HA\n1612D..1612F  ; Gurung_Khema # Mn   [3] GURUNG KHEMA SIGN ANUSVARA..GURUNG KHEMA SIGN THOLHOMA\n16130..16139  ; Gurung_Khema # Nd  [10] GURUNG KHEMA DIGIT ZERO..GURUNG KHEMA DIGIT NINE\n\n# Total code points: 58\n```\n\n----------------------------------------\n\nTITLE: Refactored Usage of Library in Elixir\nDESCRIPTION: Refactors `ClientApp` to use `import/1` instead of `use/1`, avoiding the function conflict and making module interactions explicit, hence easier to understand and maintain.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/anti-patterns/macro-anti-patterns.md#2025-04-21_snippet_7\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule ClientApp do\n  import Library\n\n  def foo do\n    \"Local function from client app\"\n  end\n\n  def from_client_app do\n    from_lib() <> \" - \" <> foo()\n  end\nend\n```\n\nLANGUAGE: elixir\nCODE:\n```\niex> ClientApp.from_client_app()\n\"From Library - Local function from client app\"\n```\n\n----------------------------------------\n\nTITLE: String.Chars Protocol Error Example\nDESCRIPTION: Shows the error that occurs when trying to interpolate a tuple, which doesn't implement the String.Chars protocol.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/protocols.md#2025-04-21_snippet_12\n\nLANGUAGE: elixir\nCODE:\n```\niex> tuple = {1, 2, 3}\n{1, 2, 3}\niex> \"tuple: #{tuple}\"\n** (Protocol.UndefinedError) protocol String.Chars not implemented for {1, 2, 3} of type Tuple\n```\n\n----------------------------------------\n\nTITLE: SPDX License Header Example\nDESCRIPTION: Example of required SPDX license headers for new or modified files in the Elixir project\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/CONTRIBUTING.md#2025-04-21_snippet_5\n\nLANGUAGE: elixir\nCODE:\n```\n# SPDX-License-Identifier: Apache-2.0\n# SPDX-FileCopyrightText: 2021 The Elixir Team\n```\n\n----------------------------------------\n\nTITLE: Basic Arithmetic in Elixir IEx Shell\nDESCRIPTION: Demonstrates simple integer addition operations in Elixir's interactive shell. The examples show the expected result of adding two integers together, formatted in the standard IEx input/output format.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/ex_unit/test/fixtures/passing.md#2025-04-21_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\niex> 1 + 2\n3\n\niex> 2 + 3\n5\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode ASCII_Hex_Digit Character Ranges\nDESCRIPTION: This snippet defines Unicode character ranges for the ASCII_Hex_Digit property, which includes only the ASCII digits and Latin letters A-F (uppercase and lowercase).\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/PropList.txt#2025-04-21_snippet_11\n\nLANGUAGE: Unicode\nCODE:\n```\n0030..0039    ; ASCII_Hex_Digit # Nd  [10] DIGIT ZERO..DIGIT NINE\n0041..0046    ; ASCII_Hex_Digit # L&   [6] LATIN CAPITAL LETTER A..LATIN CAPITAL LETTER F\n0061..0066    ; ASCII_Hex_Digit # L&   [6] LATIN SMALL LETTER A..LATIN SMALL LETTER F\n```\n\n----------------------------------------\n\nTITLE: Running Single File Tests in Elixir\nDESCRIPTION: Commands for compiling and testing individual Elixir modules for faster development cycles, using the String module as an example\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nbin/elixirc lib/elixir/lib/string.ex -o lib/elixir/ebin\nbin/elixir lib/elixir/test/elixir/string_test.exs\n```\n\n----------------------------------------\n\nTITLE: Quoting a map in Elixir\nDESCRIPTION: This snippet demonstrates how a map is represented as a function call to `%{}{}` when quoted. The resulting tuple represents the map constructor and a list of key-value pairs. This example shows the internal representation of `%{1 => 2}`.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/meta-programming/quote-and-unquote.md#2025-04-21_snippet_2\n\nLANGUAGE: elixir\nCODE:\n```\niex> quote do: %{1 => 2}\n{:%{}, [], [{1, 2}]}\n```\n\n----------------------------------------\n\nTITLE: Elixir If-Else with Variable Check\nDESCRIPTION: This snippet provides an `if` statement with a variable check and different function calls depending on the condition. It is used as the base for demonstrating the optional syntax rules in the following examples.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/optional-syntax.md#2025-04-21_snippet_2\n\nLANGUAGE: elixir\nCODE:\n```\n```elixir\nif variable? do\n  Call.this()\nelse\n  Call.that()\nend\n```\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation for Elixir Open Source Policy\nDESCRIPTION: Complete markdown formatted documentation detailing Elixir's open source policies, including licensing requirements (Apache-2.0, Unicode, Elixir Trademark), contribution guidelines, compliance procedures, and organizational roles.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/OPEN_SOURCE_POLICY.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Open Source Policy\n\n## 1. Introduction\n\nThis Open Source Policy outlines the licensing, contribution, and compliance\nrequirements for all code released under the Elixir project...\n\n[Content truncated for brevity]\n\n*Effective Date: 2025-02-20*  \n*Last Reviewed: 2025-02-20*\n```\n\n----------------------------------------\n\nTITLE: Elixir AST Representation of Qualified Tuples\nDESCRIPTION: This example demonstrates how qualified tuples (e.g., `Foo.{Bar, Baz}`) are represented in Elixir's AST using a combination of the dot operator and tuples. They are used to implement multi-aliases.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/references/syntax-reference.md#2025-04-21_snippet_18\n\nLANGUAGE: elixir\nCODE:\n```\n\"quote do\\n  Foo.{Bar, Baz}\\nend\\n#=> {{:., [], [{:__aliases__, [], [:Foo]}, :{}]}, [], [{:__aliases__, [], [:Bar]}, {:__aliases__, [], [:Baz]}]}\"\n```\n\n----------------------------------------\n\nTITLE: File Operations with Bang and Non-Bang Functions\nDESCRIPTION: Demonstrates the difference between functions with and without bang (!) suffix for handling success/failure cases.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/references/naming-conventions.md#2025-04-21_snippet_3\n\nLANGUAGE: elixir\nCODE:\n```\ncase File.read(file) do\n  {:ok, body} -> # do something with the `body`\n  {:error, reason} -> # handle the error caused by `reason`\nend\n```\n\n----------------------------------------\n\nTITLE: Performing Addition in Elixir Interactive Shell\nDESCRIPTION: This snippet shows how to perform a simple addition operation in the Elixir interactive shell (IEx). It adds 1 and 2, but the expected output is incorrect, which might be intentional to demonstrate error handling or testing.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/ex_unit/test/fixtures/failing.md#2025-04-21_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\niex> 1 + 2\n4\n```\n\n----------------------------------------\n\nTITLE: Integer Division and Remainder in Elixir\nDESCRIPTION: Demonstrates integer division and remainder operations using div and rem functions, showing both parentheses and non-parentheses syntax.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/basic-types.md#2025-04-21_snippet_2\n\nLANGUAGE: elixir\nCODE:\n```\niex> div(10, 2)\n5\niex> div 10, 2\n5\niex> rem 10, 3\n1\n```\n\n----------------------------------------\n\nTITLE: Underscore Usage for Unused Variables\nDESCRIPTION: Shows how to handle unused values in pattern matching using underscore prefix convention.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/references/naming-conventions.md#2025-04-21_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\n{:ok, _contents} = File.read(\"README.md\")\n```\n\n----------------------------------------\n\nTITLE: Sentence_Terminal (STerm) Property Mapping in Unicode\nDESCRIPTION: A mapping of Sentence_Terminal (STerm) property values to their full names and alternative representations in Unicode. This property indicates whether a character marks the end of a sentence.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/PropertyValueAliases.txt#2025-04-21_snippet_22\n\nLANGUAGE: plaintext\nCODE:\n```\n# Sentence_Terminal (STerm)\n\nSTerm; N                              ; No                               ; F                                ; False\nSTerm; Y                              ; Yes                              ; T                                ; True\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Characters as Not_XID\nDESCRIPTION: This snippet shows the format used to define Unicode characters or ranges that are not allowed in XID contexts. Each line includes the code point(s), the Not_XID property, and a comment with version and description.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/IdentifierType.txt#2025-04-21_snippet_31\n\nLANGUAGE: Unicode\nCODE:\n```\nAA77..AA79    ; Not_XID                        # 5.2    [3] MYANMAR SYMBOL AITON EXCLAMATION..MYANMAR SYMBOL AITON TWO\nAB5B          ; Not_XID                        # 7.0        MODIFIER BREVE WITH INVERTED BREVE\nAB6A..AB6B    ; Not_XID                        # 13.0   [2] MODIFIER LETTER LEFT TACK..MODIFIER LETTER RIGHT TACK\n```\n\n----------------------------------------\n\nTITLE: Unicode Default_Ignorable Code Point Definitions\nDESCRIPTION: Lists Unicode code points that should be ignored by default in text processing. Includes control characters, format characters, and variation selectors.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/IdentifierType.txt#2025-04-21_snippet_38\n\nLANGUAGE: unicode-data\nCODE:\n```\n00AD          ; Default_Ignorable              # 1.1        SOFT HYPHEN\n034F          ; Default_Ignorable              # 3.2        COMBINING GRAPHEME JOINER\n# Total code points: 398\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Test Helper in Elixir\nDESCRIPTION: Command for running tests that require a test helper file to be explicitly required before execution\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/CONTRIBUTING.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nbin/elixir -r lib/logger/test/test_helper.exs lib/logger/test/logger_test.exs\n```\n\n----------------------------------------\n\nTITLE: Accessing Nested Data in Elixir\nDESCRIPTION: This snippet demonstrates how to access a specific value within a nested data structure using the key-based access syntax `users[:john].age`.  It retrieves the age of the user 'john' from the nested keyword list of maps.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/keywords-and-maps.md#2025-04-21_snippet_6\n\nLANGUAGE: elixir\nCODE:\n```\niex> users[:john].age\n27\n```\n\n----------------------------------------\n\nTITLE: Unix Release Environment Configuration\nDESCRIPTION: Configures release environment variables for distributed node management in shell script\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/mix-and-otp/config-and-releases.md#2025-04-21_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n#!/bin/sh\n\n# Set the release to work across nodes\nexport RELEASE_DISTRIBUTION=name\nexport RELEASE_NODE=<%= @release.name %>\n```\n\n----------------------------------------\n\nTITLE: Unicode Range Definitions for Various Scripts\nDESCRIPTION: Defines Unicode code point ranges and their script assignments with properties like character types (Lo, Mn, Mc, etc). Includes total code point counts for each script block.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/Scripts.txt#2025-04-21_snippet_29\n\nLANGUAGE: unicode\nCODE:\n```\n1900..191E    ; Limbu # Lo  [31] LIMBU VOWEL-CARRIER LETTER..LIMBU LETTER TRA\n1920..1922    ; Limbu # Mn   [3] LIMBU VOWEL SIGN A..LIMBU VOWEL SIGN U\n1923..1926    ; Limbu # Mc   [4] LIMBU VOWEL SIGN EE..LIMBU VOWEL SIGN AU\n1927..1928    ; Limbu # Mn   [2] LIMBU VOWEL SIGN E..LIMBU VOWEL SIGN O\n1929..192B    ; Limbu # Mc   [3] LIMBU SUBJOINED LETTER YA..LIMBU SUBJOINED LETTER WA\n1930..1931    ; Limbu # Mc   [2] LIMBU SMALL LETTER KA..LIMBU SMALL LETTER NGA\n1932          ; Limbu # Mn       LIMBU SMALL LETTER ANUSVARA\n1933..1938    ; Limbu # Mc   [6] LIMBU SMALL LETTER TA..LIMBU SMALL LETTER LA\n1939..193B    ; Limbu # Mn   [3] LIMBU SIGN MUKPHRENG..LIMBU SIGN SA-I\n1940          ; Limbu # So       LIMBU SIGN LOO\n1944..1945    ; Limbu # Po   [2] LIMBU EXCLAMATION MARK..LIMBU QUESTION MARK\n1946..194F    ; Limbu # Nd  [10] LIMBU DIGIT ZERO..LIMBU DIGIT NINE\n```\n\n----------------------------------------\n\nTITLE: Defining Age Property Values in Unicode\nDESCRIPTION: Lists the aliases for the Age (age) property values, representing different Unicode versions from 1.1 to 16.0. It also includes 'NA' for unassigned code points.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/PropertyValueAliases.txt#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nage; 1.1                              ; V1_1\nage; 2.0                              ; V2_0\nage; 2.1                              ; V2_1\nage; 3.0                              ; V3_0\nage; 3.1                              ; V3_1\nage; 3.2                              ; V3_2\nage; 4.0                              ; V4_0\nage; 4.1                              ; V4_1\nage; 5.0                              ; V5_0\nage; 5.1                              ; V5_1\nage; 5.2                              ; V5_2\nage; 6.0                              ; V6_0\nage; 6.1                              ; V6_1\nage; 6.2                              ; V6_2\nage; 6.3                              ; V6_3\nage; 7.0                              ; V7_0\nage; 8.0                              ; V8_0\nage; 9.0                              ; V9_0\nage; 10.0                             ; V10_0\nage; 11.0                             ; V11_0\nage; 12.0                             ; V12_0\nage; 12.1                             ; V12_1\nage; 13.0                             ; V13_0\nage; 14.0                             ; V14_0\nage; 15.0                             ; V15_0\nage; 15.1                             ; V15_1\nage; 16.0                             ; V16_0\nage; NA                               ; Unassigned\n```\n\n----------------------------------------\n\nTITLE: Defining Hanifi Rohingya Script Unicode Block\nDESCRIPTION: Defines the Unicode code point ranges for the Hanifi Rohingya script. Includes letters, signs, and digits with their corresponding Unicode character categories.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/Scripts.txt#2025-04-21_snippet_83\n\nLANGUAGE: unicode\nCODE:\n```\n10D00..10D23  ; Hanifi_Rohingya # Lo  [36] HANIFI ROHINGYA LETTER A..HANIFI ROHINGYA MARK NA KHONNA\n10D24..10D27  ; Hanifi_Rohingya # Mn   [4] HANIFI ROHINGYA SIGN HARBAHAY..HANIFI ROHINGYA SIGN TASSI\n10D30..10D39  ; Hanifi_Rohingya # Nd  [10] HANIFI ROHINGYA DIGIT ZERO..HANIFI ROHINGYA DIGIT NINE\n\n# Total code points: 50\n```\n\n----------------------------------------\n\nTITLE: Converting a quoted expression to a string in Elixir\nDESCRIPTION: This example demonstrates how to use `Macro.to_string/1` to convert a quoted expression back into its textual code representation. This is useful for debugging and understanding the structure of the quoted expression. The code converts the quoted expression of `sum(1, 2 + 3, 4)` back to its string representation.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/meta-programming/quote-and-unquote.md#2025-04-21_snippet_5\n\nLANGUAGE: elixir\nCODE:\n```\niex> Macro.to_string(quote do: sum(1, 2 + 3, 4))\n\"sum(1, 2 + 3, 4)\"\n```\n\n----------------------------------------\n\nTITLE: Unicode Not_XID Character Range Definition Block\nDESCRIPTION: Defines ranges of Unicode code points that are classified as Not_XID (Not Identifier) characters, including emoji, symbols, and special characters. Each line specifies a range or single code point with its Unicode version and description.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/IdentifierType.txt#2025-04-21_snippet_32\n\nLANGUAGE: unicode\nCODE:\n```\n1F601..1F610  ; Not_XID                        # 6.0   [16] GRINNING FACE WITH SMILING EYES..NEUTRAL FACE\n1F611         ; Not_XID                        # 6.1        EXPRESSIONLESS FACE\n1F612..1F614  ; Not_XID                        # 6.0    [3] UNAMUSED FACE..PENSIVE FACE\n```\n\n----------------------------------------\n\nTITLE: Using chardata with Unicode in Elixir\nDESCRIPTION: This snippet demonstrates the use of chardata, which allows for Unicode codepoints as integers, to print a string with non-ASCII characters.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/io-and-the-file-system.md#2025-04-21_snippet_11\n\nLANGUAGE: elixir\nCODE:\n```\nIO.puts([?O, ?l, ?á, ?\\s, \"Mary\", ?!])\n```\n\n----------------------------------------\n\nTITLE: Configuring VM Arguments for Elixir Projects in Erlang\nDESCRIPTION: This snippet demonstrates the default configuration for VM arguments in an Elixir project. It includes comments explaining the purpose of certain flags and how to customize the Erlang VM behavior.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/mix-and-otp/config-and-releases.md#2025-04-21_snippet_10\n\nLANGUAGE: erlang\nCODE:\n```\n## Customize flags given to the VM: https://www.erlang.org/doc/man/erl.html\n## -mode/-name/-sname/-setcookie are configured via env vars, do not set them here\n\n## Increase number of concurrent ports/sockets\n##+Q 65536\n\n## Tweak GC to run more often\n##-env ERL_FULLSWEEP_AFTER 10\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Block for Javanese Script\nDESCRIPTION: This snippet defines the Unicode block for the Javanese script, including signs, letters, vowel signs, consonant signs, punctuation marks, and digits. It specifies code point ranges and character types.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/Scripts.txt#2025-04-21_snippet_53\n\nLANGUAGE: Unicode\nCODE:\n```\nA980..A982    ; Javanese # Mn   [3] JAVANESE SIGN PANYANGGA..JAVANESE SIGN LAYAR\nA983          ; Javanese # Mc       JAVANESE SIGN WIGNYAN\nA984..A9B2    ; Javanese # Lo  [47] JAVANESE LETTER A..JAVANESE LETTER HA\nA9B3          ; Javanese # Mn       JAVANESE SIGN CECAK TELU\nA9B4..A9B5    ; Javanese # Mc   [2] JAVANESE VOWEL SIGN TARUNG..JAVANESE VOWEL SIGN TOLONG\nA9B6..A9B9    ; Javanese # Mn   [4] JAVANESE VOWEL SIGN WULU..JAVANESE VOWEL SIGN SUKU MENDUT\nA9BA..A9BB    ; Javanese # Mc   [2] JAVANESE VOWEL SIGN TALING..JAVANESE VOWEL SIGN DIRGA MURE\nA9BC..A9BD    ; Javanese # Mn   [2] JAVANESE VOWEL SIGN PEPET..JAVANESE CONSONANT SIGN KERET\nA9BE..A9C0    ; Javanese # Mc   [3] JAVANESE CONSONANT SIGN PENGKAL..JAVANESE PANGKON\nA9C1..A9CD    ; Javanese # Po  [13] JAVANESE LEFT RERENGGAN..JAVANESE TURNED PADA PISELEH\nA9D0..A9D9    ; Javanese # Nd  [10] JAVANESE DIGIT ZERO..JAVANESE DIGIT NINE\nA9DE..A9DF    ; Javanese # Po   [2] JAVANESE PADA TIRTA TUMETES..JAVANESE PADA ISEN-ISEN\n\n# Total code points: 90\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Normalization Quick Check Properties\nDESCRIPTION: Lists the possible values for various Unicode normalization quick check properties such as NFC_Quick_Check, NFD_Quick_Check, NFKC_Quick_Check, and NFKD_Quick_Check.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/PropertyValueAliases.txt#2025-04-21_snippet_19\n\nLANGUAGE: Unicode\nCODE:\n```\nNFC_QC; M                             ; Maybe\nNFC_QC; N                             ; No\nNFC_QC; Y                             ; Yes\n\nNFD_QC; N                             ; No\nNFD_QC; Y                             ; Yes\n\nNFKC_QC; M                            ; Maybe\nNFKC_QC; N                            ; No\nNFKC_QC; Y                            ; Yes\n\nNFKD_QC; N                            ; No\nNFKD_QC; Y                            ; Yes\n```\n\n----------------------------------------\n\nTITLE: Defining Hyphen Characters in Unicode\nDESCRIPTION: This snippet lists Unicode code points classified as Hyphen. It includes various hyphen characters used in different contexts and writing systems.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/PropList.txt#2025-04-21_snippet_4\n\nLANGUAGE: Unicode\nCODE:\n```\n002D          ; Hyphen # Pd       HYPHEN-MINUS\n00AD          ; Hyphen # Cf       SOFT HYPHEN\n058A          ; Hyphen # Pd       ARMENIAN HYPHEN\n1806          ; Hyphen # Pd       MONGOLIAN TODO SOFT HYPHEN\n2010..2011    ; Hyphen # Pd   [2] HYPHEN..NON-BREAKING HYPHEN\n2E17          ; Hyphen # Pd       DOUBLE OBLIQUE HYPHEN\n30FB          ; Hyphen # Po       KATAKANA MIDDLE DOT\nFE63          ; Hyphen # Pd       SMALL HYPHEN-MINUS\nFF0D          ; Hyphen # Pd       FULLWIDTH HYPHEN-MINUS\nFF65          ; Hyphen # Po       HALFWIDTH KATAKANA MIDDLE DOT\n```\n\n----------------------------------------\n\nTITLE: Unicode Not_NFKC Character Range Definitions\nDESCRIPTION: Defines ranges of Unicode characters that are not normalized under NFKC (Normalization Form Compatibility Composition). Each entry includes the character range, property marker, Unicode version, and character description.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/IdentifierType.txt#2025-04-21_snippet_36\n\nLANGUAGE: unicode\nCODE:\n```\nFE30..FE44    ; Not_NFKC                       # 1.1   [21] PRESENTATION FORM FOR VERTICAL TWO DOT LEADER..PRESENTATION FORM FOR VERTICAL RIGHT WHITE CORNER BRACKET\nFE47..FE48    ; Not_NFKC                       # 4.0    [2] PRESENTATION FORM FOR VERTICAL LEFT SQUARE BRACKET..PRESENTATION FORM FOR VERTICAL RIGHT SQUARE BRACKET\nFE49..FE52    ; Not_NFKC                       # 1.1   [10] DASHED OVERLINE..SMALL FULL STOP\n```\n\n----------------------------------------\n\nTITLE: Rebuilding Elixir from Scratch\nDESCRIPTION: Commands for cleaning and recompiling the Elixir language from scratch when bootstrapping fails\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/CONTRIBUTING.md#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nmake clean_elixir compile\n```\n\n----------------------------------------\n\nTITLE: Checking Function Type and Arity\nDESCRIPTION: Illustrates how to use `is_function/1` to check if a value is a function, and `is_function/2` to check if a function has a specific arity (number of arguments).\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/anonymous-functions.md#2025-04-21_snippet_3\n\nLANGUAGE: elixir\nCODE:\n```\niex> is_function(add)\ntrue\n# check if add is a function that expects exactly 2 arguments\niex> is_function(add, 2)\ntrue\n# check if add is a function that expects exactly 1 argument\niex> is_function(add, 1)\nfalse\n```\n\n----------------------------------------\n\nTITLE: Accessing Mix Help Commands in Console\nDESCRIPTION: These console commands show how to access Mix help information, including a general overview and help for a specific task (compile).\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/mix-and-otp/introduction-to-mix.md#2025-04-21_snippet_15\n\nLANGUAGE: console\nCODE:\n```\n$ mix help\n$ mix help compile\n```\n\n----------------------------------------\n\nTITLE: Defining Bidi_Paired_Bracket_Type Property Values in Unicode\nDESCRIPTION: Lists the aliases for Bidi_Paired_Bracket_Type (bpt) property values, defining categories for paired brackets in bidirectional text.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/PropertyValueAliases.txt#2025-04-21_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\nbpt; c                                ; Close\nbpt; n                                ; None\nbpt; o                                ; Open\n# @missing: 0000..10FFFF; Bidi_Paired_Bracket_Type; n\n```\n\n----------------------------------------\n\nTITLE: Unicode Pattern Syntax Character Definitions\nDESCRIPTION: Defines Unicode code points and their Pattern_Syntax property assignments. Each line contains a code point or range, followed by the property name and character category information along with character description.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/PropList.txt#2025-04-21_snippet_30\n\nLANGUAGE: unicode\nCODE:\n```\n0021..0023    ; Pattern_Syntax # Po   [3] EXCLAMATION MARK..NUMBER SIGN\n0024          ; Pattern_Syntax # Sc       DOLLAR SIGN\n0025..0027    ; Pattern_Syntax # Po   [3] PERCENT SIGN..APOSTROPHE\n0028          ; Pattern_Syntax # Ps       LEFT PARENTHESIS\n0029          ; Pattern_Syntax # Pe       RIGHT PARENTHESIS\n```\n\n----------------------------------------\n\nTITLE: Handling 'Not Found' Errors in KVServer's write_line Function\nDESCRIPTION: This snippet shows how to modify the write_line/2 function in KVServer to handle the {:error, :not_found} case by sending a 'NOT FOUND' message to the socket.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/mix-and-otp/docs-tests-and-with.md#2025-04-21_snippet_10\n\nLANGUAGE: elixir\nCODE:\n```\ndefp write_line(socket, {:error, :not_found}) do\n  :gen_tcp.send(socket, \"NOT FOUND\\r\\n\")\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Chorasmian Script Unicode Block\nDESCRIPTION: Defines the Unicode code point ranges for the Chorasmian script. Includes letters and numbers with their corresponding Unicode character categories.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/Scripts.txt#2025-04-21_snippet_90\n\nLANGUAGE: unicode\nCODE:\n```\n10FB0..10FC4  ; Chorasmian # Lo  [21] CHORASMIAN LETTER ALEPH..CHORASMIAN LETTER TAW\n10FC5..10FCB  ; Chorasmian # No   [7] CHORASMIAN NUMBER ONE..CHORASMIAN NUMBER ONE HUNDRED\n\n# Total code points: 28\n```\n\n----------------------------------------\n\nTITLE: Executing Basic Expressions in IEx\nDESCRIPTION: This snippet demonstrates how to execute basic expressions in the Elixir Interactive Shell (IEx). It shows addition and string concatenation examples. The expected output includes the result of the expressions as shown. User needs to start IEx before writing these expressions.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/introduction.md#2025-04-21_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\nErlang/OTP 26 [64-bit] [smp:2:2] [...]\n\nInteractive Elixir - press Ctrl+C to exit\niex(1)> 40 + 2\n42\niex(2)> \"hello\" <> \" world\"\n\"hello world\"\n```\n\n----------------------------------------\n\nTITLE: Elixir AST Representation of Left to Right Arrow\nDESCRIPTION: This example shows how the left-to-right arrow (`->`) is represented in Elixir's Abstract Syntax Tree (AST). It is treated as an operator and is often part of a list. The left side represents a list of arguments, and the right side is an expression.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/references/syntax-reference.md#2025-04-21_snippet_17\n\nLANGUAGE: elixir\nCODE:\n```\n\"quote do\\n  case 1 do\\n    2 -> 3\\n    4 -> 5\\n  end\\nend\\n#=> {:case, [], [1, [do: [{:->, [], [[2], 3]}, {:->, [], [[4], 5]}]]]}\"\n```\n\nLANGUAGE: elixir\nCODE:\n```\n\"quote do\\n  cond do\\n    true -> false\\n  end\\nend\\n#=> {:cond, [], [[do: [{:->, [], [[true], false]}]]]}\"\n```\n\nLANGUAGE: elixir\nCODE:\n```\n\"quote do\\n  (1, 2 -> 3\\n   4, 5 -> 6)\\nend\\n#=> [{:->, [], [[1, 2], 3]}, {:->, [], [[4, 5], 6]}]\"\n```\n\nLANGUAGE: elixir\nCODE:\n```\n\"quote do\\n  fn\\n    1, 2 -> 3\\n    4, 5 -> 6\\n  end\\nend\\n#=> {:fn, [], [{:->, [], [[1, 2], 3]}, {:->, [], [[4, 5], 6]}]}\"\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Joining_Type Property\nDESCRIPTION: Specifies the possible values for the Joining_Type (jt) property in Unicode. This property is used to determine the joining behavior of characters in certain scripts.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/PropertyValueAliases.txt#2025-04-21_snippet_16\n\nLANGUAGE: Unicode\nCODE:\n```\njt ; C                                ; Join_Causing\njt ; D                                ; Dual_Joining\njt ; L                                ; Left_Joining\njt ; R                                ; Right_Joining\njt ; T                                ; Transparent\njt ; U                                ; Non_Joining\n```\n\n----------------------------------------\n\nTITLE: Defining Sogdian Script Unicode Block\nDESCRIPTION: Defines the Unicode code point ranges for the Sogdian script. Includes letters, combining marks, numbers, and punctuation marks with their corresponding Unicode character categories.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/Scripts.txt#2025-04-21_snippet_84\n\nLANGUAGE: unicode\nCODE:\n```\n10F30..10F45  ; Sogdian # Lo  [22] SOGDIAN LETTER ALEPH..SOGDIAN INDEPENDENT SHIN\n10F46..10F50  ; Sogdian # Mn  [11] SOGDIAN COMBINING DOT BELOW..SOGDIAN COMBINING STROKE BELOW\n10F51..10F54  ; Sogdian # No   [4] SOGDIAN NUMBER ONE..SOGDIAN NUMBER ONE HUNDRED\n10F55..10F59  ; Sogdian # Po   [5] SOGDIAN PUNCTUATION TWO VERTICAL BARS..SOGDIAN PUNCTUATION HALF CIRCLE WITH DOT\n\n# Total code points: 42\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Code Blocks for Rejang Script\nDESCRIPTION: Lists the Unicode code point ranges for the Rejang script, categorizing characters by their types (Lo, Mn, Mc, Po) and providing character descriptions. Includes a total of 37 code points.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/Scripts.txt#2025-04-21_snippet_41\n\nLANGUAGE: unicode\nCODE:\n```\nA930..A946    ; Rejang # Lo  [23] REJANG LETTER KA..REJANG LETTER A\nA947..A951    ; Rejang # Mn  [11] REJANG VOWEL SIGN I..REJANG CONSONANT SIGN R\nA952..A953    ; Rejang # Mc   [2] REJANG CONSONANT SIGN H..REJANG VIRAMA\nA95F          ; Rejang # Po       REJANG SECTION MARK\n\n# Total code points: 37\n```\n\n----------------------------------------\n\nTITLE: Security Changelog Entry Format in Markdown\nDESCRIPTION: Example format for documenting security vulnerabilities with CVEs in the CHANGELOG.md file.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/RELEASE.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Security\n- Fixed CVE-2025-00000: Description of the vulnerability\n```\n\n----------------------------------------\n\nTITLE: Elixir Variable Rebinding\nDESCRIPTION: Demonstrates variable rebinding in Elixir. Variables can be assigned new values, overwriting their previous values. This illustrates the mutable nature of variables within a given scope during pattern matching.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/references/patterns-and-guards.md#2025-04-21_snippet_3\n\nLANGUAGE: elixir\nCODE:\n```\niex> x = 1\n1\niex> x = 2\n2\niex> x\n2\n```\n\n----------------------------------------\n\nTITLE: Defining Alphabetic Property Values in Unicode\nDESCRIPTION: Specifies the aliases for Alphabetic (Alpha) property values. It defines 'N' (No) and 'Y' (Yes) as the primary aliases, with additional aliases 'F' (False) and 'T' (True).\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/PropertyValueAliases.txt#2025-04-21_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nAlpha; N                              ; No                               ; F                                ; False\nAlpha; Y                              ; Yes                              ; T                                ; True\n```\n\n----------------------------------------\n\nTITLE: Unicode Technical Characters Definition\nDESCRIPTION: Defines code point ranges for technical Unicode characters including various musical symbols, combining marks, and special characters.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/IdentifierType.txt#2025-04-21_snippet_16\n\nLANGUAGE: unicode\nCODE:\n```\nFE73          ; Technical                      # 3.2        ARABIC TAIL FRAGMENT\n1CF00..1CF2D  ; Technical                      # 14.0  [46] ZNAMENNY COMBINING MARK GORAZDO NIZKO S KRYZHEM ON LEFT..ZNAMENNY COMBINING MARK KRYZH ON LEFT\n1CF30..1CF46  ; Technical                      # 14.0  [23] ZNAMENNY COMBINING TONAL RANGE MARK MRACHNO..ZNAMENNY PRIZNAK MODIFIER ROG\n1D165..1D169  ; Technical                      # 3.1    [5] MUSICAL SYMBOL COMBINING STEM..MUSICAL SYMBOL COMBINING TREMOLO-3\n```\n\n----------------------------------------\n\nTITLE: Production Routing Table Configuration\nDESCRIPTION: Sets up environment-specific routing table configuration for production deployment.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/mix-and-otp/config-and-releases.md#2025-04-21_snippet_6\n\nLANGUAGE: elixir\nCODE:\n```\nimport Config\n\nconfig :kv, :routing_table, [{?a..?z, node()}]\n\nif config_env() == :prod do\n  config :kv, :routing_table, [\n    {?a..?m, :\"foo@computer-name\"},\n    {?n..?z, :\"bar@computer-name\"}\n  ]\nend\n```\n\n----------------------------------------\n\nTITLE: Gujarati Unicode Block Definition\nDESCRIPTION: Defines the Unicode codepoint ranges for Gujarati script characters including letters, vowel signs and digits. Total codepoints: 91\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/Scripts.txt#2025-04-21_snippet_14\n\nLANGUAGE: Unicode\nCODE:\n```\n0A81..0A82    ; Gujarati # Mn   [2] GUJARATI SIGN CANDRABINDU..GUJARATI SIGN ANUSVARA\n0A83          ; Gujarati # Mc       GUJARATI SIGN VISARGA\n[...remaining Gujarati ranges...]\n```\n\n----------------------------------------\n\nTITLE: String Heredocs Example in Elixir\nDESCRIPTION: Demonstrates multi-line strings (heredocs) in Elixir, which are written with three double-quotes and allow unescaped quotes within them. This example shows how heredocs preserve indentation and end with a newline. No additional dependencies are required, and heredocs naturally convert into strings in the AST.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/references/syntax-reference.md#2025-04-21_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\niex> test = \"\"\"\n...>     this\n...>     is\n...>     a\n...>     test\n...> \"\"\"\n\"    this\\n    is\\n    a\\n    test\\n\"\niex> test = \"\"\"\n...>     This\n...>     Is\n...>     A\n...>     Test\n...>     \"\"\"\n\"This\\nIs\\nA\\nTest\\n\"\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Other_Alphabetic Character Ranges and Properties\nDESCRIPTION: A comprehensive listing of Unicode code points that belong to the 'Other_Alphabetic' category. Each line defines either a single code point or a range with its category and description. These are typically combining marks, diacritics, and vowel signs from various writing systems.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/PropList.txt#2025-04-21_snippet_12\n\nLANGUAGE: unicode\nCODE:\n```\n0345          ; Other_Alphabetic # Mn       COMBINING GREEK YPOGEGRAMMENI\n0363..036F    ; Other_Alphabetic # Mn  [13] COMBINING LATIN SMALL LETTER A..COMBINING LATIN SMALL LETTER X\n05B0..05BD    ; Other_Alphabetic # Mn  [14] HEBREW POINT SHEVA..HEBREW POINT METEG\n05BF          ; Other_Alphabetic # Mn       HEBREW POINT RAFE\n05C1..05C2    ; Other_Alphabetic # Mn   [2] HEBREW POINT SHIN DOT..HEBREW POINT SIN DOT\n05C4..05C5    ; Other_Alphabetic # Mn   [2] HEBREW MARK UPPER DOT..HEBREW MARK LOWER DOT\n05C7          ; Other_Alphabetic # Mn       HEBREW POINT QAMATS QATAN\n0610..061A    ; Other_Alphabetic # Mn  [11] ARABIC SIGN SALLALLAHOU ALAYHE WASSALLAM..ARABIC SMALL KASRA\n064B..0657    ; Other_Alphabetic # Mn  [13] ARABIC FATHATAN..ARABIC INVERTED DAMMA\n0659..065F    ; Other_Alphabetic # Mn   [7] ARABIC ZWARAKAY..ARABIC WAVY HAMZA BELOW\n0670          ; Other_Alphabetic # Mn       ARABIC LETTER SUPERSCRIPT ALEF\n06D6..06DC    ; Other_Alphabetic # Mn   [7] ARABIC SMALL HIGH LIGATURE SAD WITH LAM WITH ALEF MAKSURA..ARABIC SMALL HIGH SEEN\n06E1..06E4    ; Other_Alphabetic # Mn   [4] ARABIC SMALL HIGH DOTLESS HEAD OF KHAH..ARABIC SMALL HIGH MADDA\n06E7..06E8    ; Other_Alphabetic # Mn   [2] ARABIC SMALL HIGH YEH..ARABIC SMALL HIGH NOON\n06ED          ; Other_Alphabetic # Mn       ARABIC SMALL LOW MEEM\n0711          ; Other_Alphabetic # Mn       SYRIAC LETTER SUPERSCRIPT ALAPH\n0730..073F    ; Other_Alphabetic # Mn  [16] SYRIAC PTHAHA ABOVE..SYRIAC RWAHA\n07A6..07B0    ; Other_Alphabetic # Mn  [11] THAANA ABAFILI..THAANA SUKUN\n0816..0817    ; Other_Alphabetic # Mn   [2] SAMARITAN MARK IN..SAMARITAN MARK IN-ALAF\n081B..0823    ; Other_Alphabetic # Mn   [9] SAMARITAN MARK EPENTHETIC YUT..SAMARITAN VOWEL SIGN A\n0825..0827    ; Other_Alphabetic # Mn   [3] SAMARITAN VOWEL SIGN SHORT A..SAMARITAN VOWEL SIGN U\n0829..082C    ; Other_Alphabetic # Mn   [4] SAMARITAN VOWEL SIGN LONG I..SAMARITAN VOWEL SIGN SUKUN\n0897          ; Other_Alphabetic # Mn       ARABIC PEPET\n08D4..08DF    ; Other_Alphabetic # Mn  [12] ARABIC SMALL HIGH WORD AR-RUB..ARABIC SMALL HIGH WORD WAQFA\n08E3..08E9    ; Other_Alphabetic # Mn   [7] ARABIC TURNED DAMMA BELOW..ARABIC CURLY KASRATAN\n08F0..0902    ; Other_Alphabetic # Mn  [19] ARABIC OPEN FATHATAN..DEVANAGARI SIGN ANUSVARA\n0903          ; Other_Alphabetic # Mc       DEVANAGARI SIGN VISARGA\n093A          ; Other_Alphabetic # Mn       DEVANAGARI VOWEL SIGN OE\n093B          ; Other_Alphabetic # Mc       DEVANAGARI VOWEL SIGN OOE\n093E..0940    ; Other_Alphabetic # Mc   [3] DEVANAGARI VOWEL SIGN AA..DEVANAGARI VOWEL SIGN II\n0941..0948    ; Other_Alphabetic # Mn   [8] DEVANAGARI VOWEL SIGN U..DEVANAGARI VOWEL SIGN AI\n0949..094C    ; Other_Alphabetic # Mc   [4] DEVANAGARI VOWEL SIGN CANDRA O..DEVANAGARI VOWEL SIGN AU\n094E..094F    ; Other_Alphabetic # Mc   [2] DEVANAGARI VOWEL SIGN PRISHTHAMATRA E..DEVANAGARI VOWEL SIGN AW\n0955..0957    ; Other_Alphabetic # Mn   [3] DEVANAGARI VOWEL SIGN CANDRA LONG E..DEVANAGARI VOWEL SIGN UUE\n0962..0963    ; Other_Alphabetic # Mn   [2] DEVANAGARI VOWEL SIGN VOCALIC L..DEVANAGARI VOWEL SIGN VOCALIC LL\n0981          ; Other_Alphabetic # Mn       BENGALI SIGN CANDRABINDU\n0982..0983    ; Other_Alphabetic # Mc   [2] BENGALI SIGN ANUSVARA..BENGALI SIGN VISARGA\n09BE..09C0    ; Other_Alphabetic # Mc   [3] BENGALI VOWEL SIGN AA..BENGALI VOWEL SIGN II\n09C1..09C4    ; Other_Alphabetic # Mn   [4] BENGALI VOWEL SIGN U..BENGALI VOWEL SIGN VOCALIC RR\n09C7..09C8    ; Other_Alphabetic # Mc   [2] BENGALI VOWEL SIGN E..BENGALI VOWEL SIGN AI\n09CB..09CC    ; Other_Alphabetic # Mc   [2] BENGALI VOWEL SIGN O..BENGALI VOWEL SIGN AU\n09D7          ; Other_Alphabetic # Mc       BENGALI AU LENGTH MARK\n09E2..09E3    ; Other_Alphabetic # Mn   [2] BENGALI VOWEL SIGN VOCALIC L..BENGALI VOWEL SIGN VOCALIC LL\n0A01..0A02    ; Other_Alphabetic # Mn   [2] GURMUKHI SIGN ADAK BINDI..GURMUKHI SIGN BINDI\n0A03          ; Other_Alphabetic # Mc       GURMUKHI SIGN VISARGA\n0A3E..0A40    ; Other_Alphabetic # Mc   [3] GURMUKHI VOWEL SIGN AA..GURMUKHI VOWEL SIGN II\n0A41..0A42    ; Other_Alphabetic # Mn   [2] GURMUKHI VOWEL SIGN U..GURMUKHI VOWEL SIGN UU\n0A47..0A48    ; Other_Alphabetic # Mn   [2] GURMUKHI VOWEL SIGN EE..GURMUKHI VOWEL SIGN AI\n0A4B..0A4C    ; Other_Alphabetic # Mn   [2] GURMUKHI VOWEL SIGN OO..GURMUKHI VOWEL SIGN AU\n0A51          ; Other_Alphabetic # Mn       GURMUKHI SIGN UDAAT\n0A70..0A71    ; Other_Alphabetic # Mn   [2] GURMUKHI TIPPI..GURMUKHI ADDAK\n0A75          ; Other_Alphabetic # Mn       GURMUKHI SIGN YAKASH\n0A81..0A82    ; Other_Alphabetic # Mn   [2] GUJARATI SIGN CANDRABINDU..GUJARATI SIGN ANUSVARA\n0A83          ; Other_Alphabetic # Mc       GUJARATI SIGN VISARGA\n0ABE..0AC0    ; Other_Alphabetic # Mc   [3] GUJARATI VOWEL SIGN AA..GUJARATI VOWEL SIGN II\n0AC1..0AC5    ; Other_Alphabetic # Mn   [5] GUJARATI VOWEL SIGN U..GUJARATI VOWEL SIGN CANDRA E\n0AC7..0AC8    ; Other_Alphabetic # Mn   [2] GUJARATI VOWEL SIGN E..GUJARATI VOWEL SIGN AI\n0AC9          ; Other_Alphabetic # Mc       GUJARATI VOWEL SIGN CANDRA O\n0ACB..0ACC    ; Other_Alphabetic # Mc   [2] GUJARATI VOWEL SIGN O..GUJARATI VOWEL SIGN AU\n0AE2..0AE3    ; Other_Alphabetic # Mn   [2] GUJARATI VOWEL SIGN VOCALIC L..GUJARATI VOWEL SIGN VOCALIC LL\n0AFA..0AFC    ; Other_Alphabetic # Mn   [3] GUJARATI SIGN SUKUN..GUJARATI SIGN MADDAH\n0B01          ; Other_Alphabetic # Mn       ORIYA SIGN CANDRABINDU\n0B02..0B03    ; Other_Alphabetic # Mc   [2] ORIYA SIGN ANUSVARA..ORIYA SIGN VISARGA\n0B3E          ; Other_Alphabetic # Mc       ORIYA VOWEL SIGN AA\n0B3F          ; Other_Alphabetic # Mn       ORIYA VOWEL SIGN I\n0B40          ; Other_Alphabetic # Mc       ORIYA VOWEL SIGN II\n0B41..0B44    ; Other_Alphabetic # Mn   [4] ORIYA VOWEL SIGN U..ORIYA VOWEL SIGN VOCALIC RR\n0B47..0B48    ; Other_Alphabetic # Mc   [2] ORIYA VOWEL SIGN E..ORIYA VOWEL SIGN AI\n0B4B..0B4C    ; Other_Alphabetic # Mc   [2] ORIYA VOWEL SIGN O..ORIYA VOWEL SIGN AU\n0B56          ; Other_Alphabetic # Mn       ORIYA AI LENGTH MARK\n0B57          ; Other_Alphabetic # Mc       ORIYA AU LENGTH MARK\n0B62..0B63    ; Other_Alphabetic # Mn   [2] ORIYA VOWEL SIGN VOCALIC L..ORIYA VOWEL SIGN VOCALIC LL\n0B82          ; Other_Alphabetic # Mn       TAMIL SIGN ANUSVARA\n0BBE..0BBF    ; Other_Alphabetic # Mc   [2] TAMIL VOWEL SIGN AA..TAMIL VOWEL SIGN I\n0BC0          ; Other_Alphabetic # Mn       TAMIL VOWEL SIGN II\n0BC1..0BC2    ; Other_Alphabetic # Mc   [2] TAMIL VOWEL SIGN U..TAMIL VOWEL SIGN UU\n0BC6..0BC8    ; Other_Alphabetic # Mc   [3] TAMIL VOWEL SIGN E..TAMIL VOWEL SIGN AI\n0BCA..0BCC    ; Other_Alphabetic # Mc   [3] TAMIL VOWEL SIGN O..TAMIL VOWEL SIGN AU\n0BD7          ; Other_Alphabetic # Mc       TAMIL AU LENGTH MARK\n0C00          ; Other_Alphabetic # Mn       TELUGU SIGN COMBINING CANDRABINDU ABOVE\n0C01..0C03    ; Other_Alphabetic # Mc   [3] TELUGU SIGN CANDRABINDU..TELUGU SIGN VISARGA\n0C04          ; Other_Alphabetic # Mn       TELUGU SIGN COMBINING ANUSVARA ABOVE\n0C3E..0C40    ; Other_Alphabetic # Mn   [3] TELUGU VOWEL SIGN AA..TELUGU VOWEL SIGN II\n0C41..0C44    ; Other_Alphabetic # Mc   [4] TELUGU VOWEL SIGN U..TELUGU VOWEL SIGN VOCALIC RR\n0C46..0C48    ; Other_Alphabetic # Mn   [3] TELUGU VOWEL SIGN E..TELUGU VOWEL SIGN AI\n0C4A..0C4C    ; Other_Alphabetic # Mn   [3] TELUGU VOWEL SIGN O..TELUGU VOWEL SIGN AU\n0C55..0C56    ; Other_Alphabetic # Mn   [2] TELUGU LENGTH MARK..TELUGU AI LENGTH MARK\n0C62..0C63    ; Other_Alphabetic # Mn   [2] TELUGU VOWEL SIGN VOCALIC L..TELUGU VOWEL SIGN VOCALIC LL\n0C81          ; Other_Alphabetic # Mn       KANNADA SIGN CANDRABINDU\n0C82..0C83    ; Other_Alphabetic # Mc   [2] KANNADA SIGN ANUSVARA..KANNADA SIGN VISARGA\n0CBE          ; Other_Alphabetic # Mc       KANNADA VOWEL SIGN AA\n0CBF          ; Other_Alphabetic # Mn       KANNADA VOWEL SIGN I\n0CC0..0CC4    ; Other_Alphabetic # Mc   [5] KANNADA VOWEL SIGN II..KANNADA VOWEL SIGN VOCALIC RR\n0CC6          ; Other_Alphabetic # Mn       KANNADA VOWEL SIGN E\n0CC7..0CC8    ; Other_Alphabetic # Mc   [2] KANNADA VOWEL SIGN EE..KANNADA VOWEL SIGN AI\n0CCA..0CCB    ; Other_Alphabetic # Mc   [2] KANNADA VOWEL SIGN O..KANNADA VOWEL SIGN OO\n0CCC          ; Other_Alphabetic # Mn       KANNADA VOWEL SIGN AU\n0CD5..0CD6    ; Other_Alphabetic # Mc   [2] KANNADA LENGTH MARK..KANNADA AI LENGTH MARK\n0CE2..0CE3    ; Other_Alphabetic # Mn   [2] KANNADA VOWEL SIGN VOCALIC L..KANNADA VOWEL SIGN VOCALIC LL\n0CF3          ; Other_Alphabetic # Mc       KANNADA SIGN COMBINING ANUSVARA ABOVE RIGHT\n0D00..0D01    ; Other_Alphabetic # Mn   [2] MALAYALAM SIGN COMBINING ANUSVARA ABOVE..MALAYALAM SIGN CANDRABINDU\n0D02..0D03    ; Other_Alphabetic # Mc   [2] MALAYALAM SIGN ANUSVARA..MALAYALAM SIGN VISARGA\n0D3E..0D40    ; Other_Alphabetic # Mc   [3] MALAYALAM VOWEL SIGN AA..MALAYALAM VOWEL SIGN II\n0D41..0D44    ; Other_Alphabetic # Mn   [4] MALAYALAM VOWEL SIGN U..MALAYALAM VOWEL SIGN VOCALIC RR\n0D46..0D48    ; Other_Alphabetic # Mc   [3] MALAYALAM VOWEL SIGN E..MALAYALAM VOWEL SIGN AI\n0D4A..0D4C    ; Other_Alphabetic # Mc   [3] MALAYALAM VOWEL SIGN O..MALAYALAM VOWEL SIGN AU\n0D57          ; Other_Alphabetic # Mc       MALAYALAM AU LENGTH MARK\n0D62..0D63    ; Other_Alphabetic # Mn   [2] MALAYALAM VOWEL SIGN VOCALIC L..MALAYALAM VOWEL SIGN VOCALIC LL\n0D81          ; Other_Alphabetic # Mn       SINHALA SIGN CANDRABINDU\n0D82..0D83    ; Other_Alphabetic # Mc   [2] SINHALA SIGN ANUSVARAYA..SINHALA SIGN VISARGAYA\n0DCF..0DD1    ; Other_Alphabetic # Mc   [3] SINHALA VOWEL SIGN AELA-PILLA..SINHALA VOWEL SIGN DIGA AEDA-PILLA\n0DD2..0DD4    ; Other_Alphabetic # Mn   [3] SINHALA VOWEL SIGN KETTI IS-PILLA..SINHALA VOWEL SIGN KETTI PAA-PILLA\n0DD6          ; Other_Alphabetic # Mn       SINHALA VOWEL SIGN DIGA PAA-PILLA\n0DD8..0DDF    ; Other_Alphabetic # Mc   [8] SINHALA VOWEL SIGN GAETTA-PILLA..SINHALA VOWEL SIGN GAYANUKITTA\n0DF2..0DF3    ; Other_Alphabetic # Mc   [2] SINHALA VOWEL SIGN DIGA GAETTA-PILLA..SINHALA VOWEL SIGN DIGA GAYANUKITTA\n0E31          ; Other_Alphabetic # Mn       THAI CHARACTER MAI HAN-AKAT\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Code Blocks for Carian Script\nDESCRIPTION: Lists the Unicode code point range for the Carian script, categorizing characters by their type (Lo) and providing character descriptions. Includes a total of 49 code points.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/Scripts.txt#2025-04-21_snippet_43\n\nLANGUAGE: unicode\nCODE:\n```\n102A0..102D0  ; Carian # Lo  [49] CARIAN LETTER A..CARIAN LETTER UUU3\n\n# Total code points: 49\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Code Blocks for Lydian Script\nDESCRIPTION: Lists the Unicode code point ranges for the Lydian script, categorizing characters by their types (Lo, Po) and providing character descriptions. Includes a total of 27 code points.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/Scripts.txt#2025-04-21_snippet_44\n\nLANGUAGE: unicode\nCODE:\n```\n10920..10939  ; Lydian # Lo  [26] LYDIAN LETTER A..LYDIAN LETTER C\n1093F         ; Lydian # Po       LYDIAN TRIANGULAR MARK\n\n# Total code points: 27\n```\n\n----------------------------------------\n\nTITLE: Joining Strings with Enum.join in Elixir\nDESCRIPTION: This snippet demonstrates how to join a list of strings using Enum.join/2, which creates a new string by copying each value.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/io-and-the-file-system.md#2025-04-21_snippet_7\n\nLANGUAGE: elixir\nCODE:\n```\nEnum.join([\"apple\", \"banana\", \"lemon\"], \",\")\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Hex_Digit Character Ranges\nDESCRIPTION: This snippet defines Unicode character ranges for the Hex_Digit property, including ASCII digits, Latin letters A-F (uppercase and lowercase), and their fullwidth counterparts.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/PropList.txt#2025-04-21_snippet_10\n\nLANGUAGE: Unicode\nCODE:\n```\n0030..0039    ; Hex_Digit # Nd  [10] DIGIT ZERO..DIGIT NINE\n0041..0046    ; Hex_Digit # L&   [6] LATIN CAPITAL LETTER A..LATIN CAPITAL LETTER F\n0061..0066    ; Hex_Digit # L&   [6] LATIN SMALL LETTER A..LATIN SMALL LETTER F\nFF10..FF19    ; Hex_Digit # Nd  [10] FULLWIDTH DIGIT ZERO..FULLWIDTH DIGIT NINE\nFF21..FF26    ; Hex_Digit # L&   [6] FULLWIDTH LATIN CAPITAL LETTER A..FULLWIDTH LATIN CAPITAL LETTER F\nFF41..FF46    ; Hex_Digit # L&   [6] FULLWIDTH LATIN SMALL LETTER A..FULLWIDTH LATIN SMALL LETTER F\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Joining_Group Property\nDESCRIPTION: Lists the possible values for the Joining_Group (jg) property in Unicode. This property is used for Arabic and Syriac shaping.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/PropertyValueAliases.txt#2025-04-21_snippet_15\n\nLANGUAGE: Unicode\nCODE:\n```\njg ; African_Feh                      ; African_Feh\njg ; African_Noon                     ; African_Noon\njg ; African_Qaf                      ; African_Qaf\njg ; Ain                              ; Ain\njg ; Alaph                            ; Alaph\njg ; Alef                             ; Alef\n# ... (truncated for brevity)\n```\n\n----------------------------------------\n\nTITLE: Handling non-passing guards in Elixir\nDESCRIPTION: This example illustrates how guards in Elixir only pass when they evaluate to true, not when they are 'truthy'. It shows an incorrect implementation and its correction.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/references/patterns-and-guards.md#2025-04-21_snippet_21\n\nLANGUAGE: elixir\nCODE:\n```\ndef not_nil_head?([head | _]) when head, do: true\ndef not_nil_head?(_), do: false\n\nnot_nil_head?([\"some_value\", \"another_value\"])\n#=> false\n```\n\nLANGUAGE: elixir\nCODE:\n```\ndef not_nil_head?([head | _]) when head != nil, do: true\ndef not_nil_head?(_), do: false\n\nnot_nil_head?([\"some_value\", \"another_value\"])\n#=> true\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Character Ranges for Sunuwar Script\nDESCRIPTION: This snippet defines the Unicode character ranges for the Sunuwar script. It includes letter characters (Lo), punctuation (Po), and numeric digits (Nd).\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/Scripts.txt#2025-04-21_snippet_105\n\nLANGUAGE: Unicode\nCODE:\n```\n11BC0..11BE0  ; Sunuwar # Lo  [33] SUNUWAR LETTER DEVI..SUNUWAR LETTER KLOKO\n11BE1         ; Sunuwar # Po       SUNUWAR SIGN PVO\n11BF0..11BF9  ; Sunuwar # Nd  [10] SUNUWAR DIGIT ZERO..SUNUWAR DIGIT NINE\n\n# Total code points: 44\n```\n\n----------------------------------------\n\nTITLE: Concatenating Strings in Elixir\nDESCRIPTION: This snippet demonstrates the traditional way of concatenating strings in Elixir, which involves copying and can be inefficient for large strings.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/io-and-the-file-system.md#2025-04-21_snippet_5\n\nLANGUAGE: elixir\nCODE:\n```\nname = \"Mary\"\nIO.puts(\"Hello \" <> name <> \"!\")\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Other_Math Character Ranges\nDESCRIPTION: This snippet defines Unicode character ranges for the Other_Math property, including mathematical symbols and Arabic mathematical characters.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/PropList.txt#2025-04-21_snippet_9\n\nLANGUAGE: Unicode\nCODE:\n```\n1D6A8..1D6C0  ; Other_Math # L&  [25] MATHEMATICAL BOLD CAPITAL ALPHA..MATHEMATICAL BOLD CAPITAL OMEGA\n1D6C2..1D6DA  ; Other_Math # L&  [25] MATHEMATICAL BOLD SMALL ALPHA..MATHEMATICAL BOLD SMALL OMEGA\n1D6DC..1D6FA  ; Other_Math # L&  [31] MATHEMATICAL BOLD EPSILON SYMBOL..MATHEMATICAL ITALIC CAPITAL OMEGA\n1D6FC..1D714  ; Other_Math # L&  [25] MATHEMATICAL ITALIC SMALL ALPHA..MATHEMATICAL ITALIC SMALL OMEGA\n1D716..1D734  ; Other_Math # L&  [31] MATHEMATICAL ITALIC EPSILON SYMBOL..MATHEMATICAL BOLD ITALIC CAPITAL OMEGA\n1D736..1D74E  ; Other_Math # L&  [25] MATHEMATICAL BOLD ITALIC SMALL ALPHA..MATHEMATICAL BOLD ITALIC SMALL OMEGA\n1D750..1D76E  ; Other_Math # L&  [31] MATHEMATICAL BOLD ITALIC EPSILON SYMBOL..MATHEMATICAL SANS-SERIF BOLD CAPITAL OMEGA\n1D770..1D788  ; Other_Math # L&  [25] MATHEMATICAL SANS-SERIF BOLD SMALL ALPHA..MATHEMATICAL SANS-SERIF BOLD SMALL OMEGA\n1D78A..1D7A8  ; Other_Math # L&  [31] MATHEMATICAL SANS-SERIF BOLD EPSILON SYMBOL..MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL OMEGA\n1D7AA..1D7C2  ; Other_Math # L&  [25] MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL ALPHA..MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL OMEGA\n1D7C4..1D7CB  ; Other_Math # L&   [8] MATHEMATICAL SANS-SERIF BOLD ITALIC EPSILON SYMBOL..MATHEMATICAL BOLD SMALL DIGAMMA\n1D7CE..1D7FF  ; Other_Math # Nd  [50] MATHEMATICAL BOLD DIGIT ZERO..MATHEMATICAL MONOSPACE DIGIT NINE\n1EE00..1EE03  ; Other_Math # Lo   [4] ARABIC MATHEMATICAL ALEF..ARABIC MATHEMATICAL DAL\n1EE05..1EE1F  ; Other_Math # Lo  [27] ARABIC MATHEMATICAL WAW..ARABIC MATHEMATICAL DOTLESS QAF\n1EE21..1EE22  ; Other_Math # Lo   [2] ARABIC MATHEMATICAL INITIAL BEH..ARABIC MATHEMATICAL INITIAL JEEM\n1EE24         ; Other_Math # Lo       ARABIC MATHEMATICAL INITIAL HEH\n1EE27         ; Other_Math # Lo       ARABIC MATHEMATICAL INITIAL HAH\n1EE29..1EE32  ; Other_Math # Lo  [10] ARABIC MATHEMATICAL INITIAL YEH..ARABIC MATHEMATICAL INITIAL QAF\n1EE34..1EE37  ; Other_Math # Lo   [4] ARABIC MATHEMATICAL INITIAL SHEEN..ARABIC MATHEMATICAL INITIAL KHAH\n1EE39         ; Other_Math # Lo       ARABIC MATHEMATICAL INITIAL DAD\n1EE3B         ; Other_Math # Lo       ARABIC MATHEMATICAL INITIAL GHAIN\n1EE42         ; Other_Math # Lo       ARABIC MATHEMATICAL TAILED JEEM\n1EE47         ; Other_Math # Lo       ARABIC MATHEMATICAL TAILED HAH\n1EE49         ; Other_Math # Lo       ARABIC MATHEMATICAL TAILED YEH\n1EE4B         ; Other_Math # Lo       ARABIC MATHEMATICAL TAILED LAM\n1EE4D..1EE4F  ; Other_Math # Lo   [3] ARABIC MATHEMATICAL TAILED NOON..ARABIC MATHEMATICAL TAILED AIN\n1EE51..1EE52  ; Other_Math # Lo   [2] ARABIC MATHEMATICAL TAILED SAD..ARABIC MATHEMATICAL TAILED QAF\n1EE54         ; Other_Math # Lo       ARABIC MATHEMATICAL TAILED SHEEN\n1EE57         ; Other_Math # Lo       ARABIC MATHEMATICAL TAILED KHAH\n1EE59         ; Other_Math # Lo       ARABIC MATHEMATICAL TAILED DAD\n1EE5B         ; Other_Math # Lo       ARABIC MATHEMATICAL TAILED GHAIN\n1EE5D         ; Other_Math # Lo       ARABIC MATHEMATICAL TAILED DOTLESS NOON\n1EE5F         ; Other_Math # Lo       ARABIC MATHEMATICAL TAILED DOTLESS QAF\n1EE61..1EE62  ; Other_Math # Lo   [2] ARABIC MATHEMATICAL STRETCHED BEH..ARABIC MATHEMATICAL STRETCHED JEEM\n1EE64         ; Other_Math # Lo       ARABIC MATHEMATICAL STRETCHED HEH\n1EE67..1EE6A  ; Other_Math # Lo   [4] ARABIC MATHEMATICAL STRETCHED HAH..ARABIC MATHEMATICAL STRETCHED KAF\n1EE6C..1EE72  ; Other_Math # Lo   [7] ARABIC MATHEMATICAL STRETCHED MEEM..ARABIC MATHEMATICAL STRETCHED QAF\n1EE74..1EE77  ; Other_Math # Lo   [4] ARABIC MATHEMATICAL STRETCHED SHEEN..ARABIC MATHEMATICAL STRETCHED KHAH\n1EE79..1EE7C  ; Other_Math # Lo   [4] ARABIC MATHEMATICAL STRETCHED DAD..ARABIC MATHEMATICAL STRETCHED DOTLESS BEH\n1EE7E         ; Other_Math # Lo       ARABIC MATHEMATICAL STRETCHED DOTLESS FEH\n1EE80..1EE89  ; Other_Math # Lo  [10] ARABIC MATHEMATICAL LOOPED ALEF..ARABIC MATHEMATICAL LOOPED YEH\n1EE8B..1EE9B  ; Other_Math # Lo  [17] ARABIC MATHEMATICAL LOOPED LAM..ARABIC MATHEMATICAL LOOPED GHAIN\n1EEA1..1EEA3  ; Other_Math # Lo   [3] ARABIC MATHEMATICAL DOUBLE-STRUCK BEH..ARABIC MATHEMATICAL DOUBLE-STRUCK DAL\n1EEA5..1EEA9  ; Other_Math # Lo   [5] ARABIC MATHEMATICAL DOUBLE-STRUCK WAW..ARABIC MATHEMATICAL DOUBLE-STRUCK YEH\n1EEAB..1EEBB  ; Other_Math # Lo  [17] ARABIC MATHEMATICAL DOUBLE-STRUCK LAM..ARABIC MATHEMATICAL DOUBLE-STRUCK GHAIN\n```\n\n----------------------------------------\n\nTITLE: Defining Indic Syllabic Category Properties in Unicode\nDESCRIPTION: Lists all possible values for the Indic Syllabic Category (InSC) property in Unicode. This property is used to classify characters in Indic and similar scripts for rendering and processing purposes.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/PropertyValueAliases.txt#2025-04-21_snippet_12\n\nLANGUAGE: markup\nCODE:\n```\n# Indic_Syllabic_Category (InSC)\n\nInSC; Avagraha                        ; Avagraha\nInSC; Bindu                           ; Bindu\nInSC; Brahmi_Joining_Number           ; Brahmi_Joining_Number\nInSC; Cantillation_Mark               ; Cantillation_Mark\nInSC; Consonant                       ; Consonant\nInSC; Consonant_Dead                  ; Consonant_Dead\nInSC; Consonant_Final                 ; Consonant_Final\nInSC; Consonant_Head_Letter           ; Consonant_Head_Letter\nInSC; Consonant_Initial_Postfixed     ; Consonant_Initial_Postfixed\nInSC; Consonant_Killer                ; Consonant_Killer\nInSC; Consonant_Medial                ; Consonant_Medial\nInSC; Consonant_Placeholder           ; Consonant_Placeholder\nInSC; Consonant_Preceding_Repha       ; Consonant_Preceding_Repha\nInSC; Consonant_Prefixed              ; Consonant_Prefixed\nInSC; Consonant_Subjoined             ; Consonant_Subjoined\nInSC; Consonant_Succeeding_Repha      ; Consonant_Succeeding_Repha\nInSC; Consonant_With_Stacker          ; Consonant_With_Stacker\nInSC; Gemination_Mark                 ; Gemination_Mark\nInSC; Invisible_Stacker               ; Invisible_Stacker\nInSC; Joiner                          ; Joiner\nInSC; Modifying_Letter                ; Modifying_Letter\nInSC; Non_Joiner                      ; Non_Joiner\nInSC; Nukta                           ; Nukta\nInSC; Number                          ; Number\nInSC; Number_Joiner                   ; Number_Joiner\nInSC; Other                           ; Other\nInSC; Pure_Killer                     ; Pure_Killer\nInSC; Register_Shifter                ; Register_Shifter\nInSC; Reordering_Killer               ; Reordering_Killer\nInSC; Syllable_Modifier               ; Syllable_Modifier\nInSC; Tone_Letter                     ; Tone_Letter\nInSC; Tone_Mark                       ; Tone_Mark\nInSC; Virama                          ; Virama\nInSC; Visarga                         ; Visarga\nInSC; Vowel                           ; Vowel\nInSC; Vowel_Dependent                 ; Vowel_Dependent\nInSC; Vowel_Independent               ; Vowel_Independent\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Character Ranges for Tulu-Tigalari Script\nDESCRIPTION: This snippet defines the Unicode character ranges for the Tulu-Tigalari script. It includes letter characters (Lo), spacing marks (Mc), combining marks (Mn), and punctuation (Po).\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/Scripts.txt#2025-04-21_snippet_107\n\nLANGUAGE: Unicode\nCODE:\n```\n11380..11389  ; Tulu_Tigalari # Lo  [10] TULU-TIGALARI LETTER A..TULU-TIGALARI LETTER VOCALIC LL\n1138B         ; Tulu_Tigalari # Lo       TULU-TIGALARI LETTER EE\n1138E         ; Tulu_Tigalari # Lo       TULU-TIGALARI LETTER AI\n11390..113B5  ; Tulu_Tigalari # Lo  [38] TULU-TIGALARI LETTER OO..TULU-TIGALARI LETTER LLLA\n113B7         ; Tulu_Tigalari # Lo       TULU-TIGALARI SIGN AVAGRAHA\n113B8..113BA  ; Tulu_Tigalari # Mc   [3] TULU-TIGALARI VOWEL SIGN AA..TULU-TIGALARI VOWEL SIGN II\n113BB..113C0  ; Tulu_Tigalari # Mn   [6] TULU-TIGALARI VOWEL SIGN U..TULU-TIGALARI VOWEL SIGN VOCALIC LL\n113C2         ; Tulu_Tigalari # Mc       TULU-TIGALARI VOWEL SIGN EE\n113C5         ; Tulu_Tigalari # Mc       TULU-TIGALARI VOWEL SIGN AI\n113C7..113CA  ; Tulu_Tigalari # Mc   [4] TULU-TIGALARI VOWEL SIGN OO..TULU-TIGALARI SIGN CANDRA ANUNASIKA\n113CC..113CD  ; Tulu_Tigalari # Mc   [2] TULU-TIGALARI SIGN ANUSVARA..TULU-TIGALARI SIGN VISARGA\n113CE         ; Tulu_Tigalari # Mn       TULU-TIGALARI SIGN VIRAMA\n113CF         ; Tulu_Tigalari # Mc       TULU-TIGALARI SIGN LOOPED VIRAMA\n113D0         ; Tulu_Tigalari # Mn       TULU-TIGALARI CONJOINER\n113D1         ; Tulu_Tigalari # Lo       TULU-TIGALARI REPHA\n113D2         ; Tulu_Tigalari # Mn       TULU-TIGALARI GEMINATION MARK\n113D3         ; Tulu_Tigalari # Lo       TULU-TIGALARI SIGN PLUTA\n113D4..113D5  ; Tulu_Tigalari # Po   [2] TULU-TIGALARI DANDA..TULU-TIGALARI DOUBLE DANDA\n113D7..113D8  ; Tulu_Tigalari # Po   [2] TULU-TIGALARI SIGN OM PUSHPIKA..TULU-TIGALARI SIGN SHRII PUSHPIKA\n113E1..113E2  ; Tulu_Tigalari # Mn   [2] TULU-TIGALARI VEDIC TONE SVARITA..TULU-TIGALARI VEDIC TONE ANUDATTA\n\n# Total code points: 80\n```\n\n----------------------------------------\n\nTITLE: Listing Available Mix Dependency Commands\nDESCRIPTION: Console output showing various Mix commands available for managing dependencies.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/mix-and-otp/dependencies-and-umbrella-projects.md#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ mix help\nmix deps              # Lists dependencies and their status\nmix deps.clean        # Deletes the given dependencies' files\nmix deps.compile      # Compiles dependencies\nmix deps.get         # Gets all out of date dependencies\nmix deps.tree         # Prints the dependency tree\nmix deps.unlock       # Unlocks the given dependencies\nmix deps.update       # Updates the given dependencies\n```\n\n----------------------------------------\n\nTITLE: Defining Uncommon Obsolete Unicode Characters\nDESCRIPTION: Defines Unicode code points for obsolete characters that are uncommonly used, including Hebrew, Cyrillic, and Devanagari characters.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/IdentifierType.txt#2025-04-21_snippet_13\n\nLANGUAGE: unicode-data\nCODE:\n```\n05A2          ; Uncommon_Use Obsolete          # 4.1        HEBREW ACCENT ATNAH HAFUKH\n05C5          ; Uncommon_Use Obsolete          # 4.1        HEBREW MARK LOWER DOT\nA69E          ; Uncommon_Use Obsolete          # 8.0        COMBINING CYRILLIC LETTER EF\nA8FD          ; Uncommon_Use Obsolete          # 8.0        DEVANAGARI JAIN OM\n```\n\n----------------------------------------\n\nTITLE: Defining Keyword List Types in Elixir\nDESCRIPTION: Demonstrates how to define custom keyword list types with specific options and compositions\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/references/typespecs.md#2025-04-21_snippet_3\n\nLANGUAGE: elixir\nCODE:\n```\n@type option :: {:name, String.t} | {:max, pos_integer} | {:min, pos_integer}\n@type options :: [option()]\n```\n\nLANGUAGE: elixir\nCODE:\n```\n@type option :: {:my_option, String.t()} | GenServer.option()\n\n@spec start_link([option()]) :: GenServer.on_start()\ndef start_link(opts) do\n  {my_opts, gen_server_opts} = Keyword.split(opts, [:my_option])\n  GenServer.start_link(__MODULE__, my_opts, gen_server_opts)\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Code Blocks for Balinese Script\nDESCRIPTION: Lists the Unicode code point ranges for the Balinese script, categorizing characters by their types (Mn, Mc, Lo, etc.) and providing character descriptions. Includes a total of 127 code points.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/Scripts.txt#2025-04-21_snippet_30\n\nLANGUAGE: unicode\nCODE:\n```\n1B00..1B03    ; Balinese # Mn   [4] BALINESE SIGN ULU RICEM..BALINESE SIGN SURANG\n1B04          ; Balinese # Mc       BALINESE SIGN BISAH\n1B05..1B33    ; Balinese # Lo  [47] BALINESE LETTER AKARA..BALINESE LETTER HA\n1B34          ; Balinese # Mn       BALINESE SIGN REREKAN\n1B35          ; Balinese # Mc       BALINESE VOWEL SIGN TEDUNG\n1B36..1B3A    ; Balinese # Mn   [5] BALINESE VOWEL SIGN ULU..BALINESE VOWEL SIGN RA REPA\n1B3B          ; Balinese # Mc       BALINESE VOWEL SIGN RA REPA TEDUNG\n1B3C          ; Balinese # Mn       BALINESE VOWEL SIGN LA LENGA\n1B3D..1B41    ; Balinese # Mc   [5] BALINESE VOWEL SIGN LA LENGA TEDUNG..BALINESE VOWEL SIGN TALING REPA TEDUNG\n1B42          ; Balinese # Mn       BALINESE VOWEL SIGN PEPET\n1B43..1B44    ; Balinese # Mc   [2] BALINESE VOWEL SIGN PEPET TEDUNG..BALINESE ADEG ADEG\n1B45..1B4C    ; Balinese # Lo   [8] BALINESE LETTER KAF SASAK..BALINESE LETTER ARCHAIC JNYA\n1B4E..1B4F    ; Balinese # Po   [2] BALINESE INVERTED CARIK SIKI..BALINESE INVERTED CARIK PAREREN\n1B50..1B59    ; Balinese # Nd  [10] BALINESE DIGIT ZERO..BALINESE DIGIT NINE\n1B5A..1B60    ; Balinese # Po   [7] BALINESE PANTI..BALINESE PAMENENG\n1B61..1B6A    ; Balinese # So  [10] BALINESE MUSICAL SYMBOL DONG..BALINESE MUSICAL SYMBOL DANG GEDE\n1B6B..1B73    ; Balinese # Mn   [9] BALINESE MUSICAL SYMBOL COMBINING TEGEH..BALINESE MUSICAL SYMBOL COMBINING GONG\n1B74..1B7C    ; Balinese # So   [9] BALINESE MUSICAL SYMBOL RIGHT-HAND OPEN DUG..BALINESE MUSICAL SYMBOL LEFT-HAND OPEN PING\n1B7D..1B7F    ; Balinese # Po   [3] BALINESE PANTI LANTANG..BALINESE PANTI BAWAK\n\n# Total code points: 127\n```\n\n----------------------------------------\n\nTITLE: Float Number Notation in Elixir\nDESCRIPTION: Demonstrates float number notation including standard decimal and scientific notation with e.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/basic-types.md#2025-04-21_snippet_4\n\nLANGUAGE: elixir\nCODE:\n```\niex> 1.0\n1.0\niex> 1.0e-10\n1.0e-10\n```\n\n----------------------------------------\n\nTITLE: Defining Limited_Use Uncommon_Use Unicode Code Point\nDESCRIPTION: This snippet defines a single Unicode code point with both Limited_Use and Uncommon_Use identifier types. It specifies the Javanese Pangrangkep character.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/IdentifierType.txt#2025-04-21_snippet_5\n\nLANGUAGE: Unicode\nCODE:\n```\nA9CF          ; Limited_Use Uncommon_Use       # 5.2        JAVANESE PANGRANGKEP\n```\n\n----------------------------------------\n\nTITLE: Bengali Unicode Block Definition\nDESCRIPTION: Defines the Unicode codepoint ranges for Bengali script characters including letters, vowel signs, digits and currency symbols. Total codepoints: 96\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/Scripts.txt#2025-04-21_snippet_12\n\nLANGUAGE: Unicode\nCODE:\n```\n0980          ; Bengali # Lo       BENGALI ANJI\n0981          ; Bengali # Mn       BENGALI SIGN CANDRABINDU\n[...remaining Bengali ranges...]\n```\n\n----------------------------------------\n\nTITLE: ASCII Integer List Interpretation in Elixir\nDESCRIPTION: Demonstrates how IEx automatically interprets lists of integers within ASCII range as charlists.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/binaries-strings-and-charlists.md#2025-04-21_snippet_9\n\nLANGUAGE: elixir\nCODE:\n```\niex> heartbeats_per_minute = [99, 97, 116]\n~c\"cat\"\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Ranges for Indian Scripts\nDESCRIPTION: This snippet defines Unicode character ranges for various Indian scripts. Each line specifies a range or single character, its recommendation status, and the Unicode version where it was introduced.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/IdentifierType.txt#2025-04-21_snippet_2\n\nLANGUAGE: Unicode\nCODE:\n```\n0AE1..0AE3    ; Recommended                    # 4.0    [3] GUJARATI LETTER VOCALIC LL..GUJARATI VOWEL SIGN VOCALIC LL\n0AE6..0AEF    ; Recommended                    # 1.1   [10] GUJARATI DIGIT ZERO..GUJARATI DIGIT NINE\n0AFA..0AFF    ; Recommended                    # 10.0   [6] GUJARATI SIGN SUKUN..GUJARATI SIGN TWO-CIRCLE NUKTA ABOVE\n0B01..0B03    ; Recommended                    # 1.1    [3] ORIYA SIGN CANDRABINDU..ORIYA SIGN VISARGA\n0B05..0B0C    ; Recommended                    # 1.1    [8] ORIYA LETTER A..ORIYA LETTER VOCALIC L\n0B0F..0B10    ; Recommended                    # 1.1    [2] ORIYA LETTER E..ORIYA LETTER AI\n0B13..0B28    ; Recommended                    # 1.1   [22] ORIYA LETTER O..ORIYA LETTER NA\n0B2A..0B30    ; Recommended                    # 1.1    [7] ORIYA LETTER PA..ORIYA LETTER RA\n0B32..0B33    ; Recommended                    # 1.1    [2] ORIYA LETTER LA..ORIYA LETTER LLA\n0B35          ; Recommended                    # 4.0        ORIYA LETTER VA\n0B36..0B39    ; Recommended                    # 1.1    [4] ORIYA LETTER SHA..ORIYA LETTER HA\n0B3C..0B43    ; Recommended                    # 1.1    [8] ORIYA SIGN NUKTA..ORIYA VOWEL SIGN VOCALIC R\n0B47..0B48    ; Recommended                    # 1.1    [2] ORIYA VOWEL SIGN E..ORIYA VOWEL SIGN AI\n0B4B..0B4D    ; Recommended                    # 1.1    [3] ORIYA VOWEL SIGN O..ORIYA SIGN VIRAMA\n0B55          ; Recommended                    # 13.0       ORIYA SIGN OVERLINE\n0B56..0B57    ; Recommended                    # 1.1    [2] ORIYA AI LENGTH MARK..ORIYA AU LENGTH MARK\n0B5F..0B61    ; Recommended                    # 1.1    [3] ORIYA LETTER YYA..ORIYA LETTER VOCALIC LL\n0B66..0B6F    ; Recommended                    # 1.1   [10] ORIYA DIGIT ZERO..ORIYA DIGIT NINE\n0B71          ; Recommended                    # 4.0        ORIYA LETTER WA\n0B82..0B83    ; Recommended                    # 1.1    [2] TAMIL SIGN ANUSVARA..TAMIL SIGN VISARGA\n0B85..0B8A    ; Recommended                    # 1.1    [6] TAMIL LETTER A..TAMIL LETTER UU\n0B8E..0B90    ; Recommended                    # 1.1    [3] TAMIL LETTER E..TAMIL LETTER AI\n0B92..0B95    ; Recommended                    # 1.1    [4] TAMIL LETTER O..TAMIL LETTER KA\n0B99..0B9A    ; Recommended                    # 1.1    [2] TAMIL LETTER NGA..TAMIL LETTER CA\n0B9C          ; Recommended                    # 1.1        TAMIL LETTER JA\n0B9E..0B9F    ; Recommended                    # 1.1    [2] TAMIL LETTER NYA..TAMIL LETTER TTA\n0BA3..0BA4    ; Recommended                    # 1.1    [2] TAMIL LETTER NNA..TAMIL LETTER TA\n0BA8..0BAA    ; Recommended                    # 1.1    [3] TAMIL LETTER NA..TAMIL LETTER PA\n0BAE..0BB5    ; Recommended                    # 1.1    [8] TAMIL LETTER MA..TAMIL LETTER VA\n0BB6          ; Recommended                    # 4.1        TAMIL LETTER SHA\n0BB7..0BB9    ; Recommended                    # 1.1    [3] TAMIL LETTER SSA..TAMIL LETTER HA\n0BBE..0BC2    ; Recommended                    # 1.1    [5] TAMIL VOWEL SIGN AA..TAMIL VOWEL SIGN UU\n0BC6..0BC8    ; Recommended                    # 1.1    [3] TAMIL VOWEL SIGN E..TAMIL VOWEL SIGN AI\n0BCA..0BCD    ; Recommended                    # 1.1    [4] TAMIL VOWEL SIGN O..TAMIL SIGN VIRAMA\n0BD0          ; Recommended                    # 5.1        TAMIL OM\n0BD7          ; Recommended                    # 1.1        TAMIL AU LENGTH MARK\n0BE6          ; Recommended                    # 4.1        TAMIL DIGIT ZERO\n0BE7..0BEF    ; Recommended                    # 1.1    [9] TAMIL DIGIT ONE..TAMIL DIGIT NINE\n0C01..0C03    ; Recommended                    # 1.1    [3] TELUGU SIGN CANDRABINDU..TELUGU SIGN VISARGA\n0C04          ; Recommended                    # 11.0       TELUGU SIGN COMBINING ANUSVARA ABOVE\n0C05..0C0C    ; Recommended                    # 1.1    [8] TELUGU LETTER A..TELUGU LETTER VOCALIC L\n0C0E..0C10    ; Recommended                    # 1.1    [3] TELUGU LETTER E..TELUGU LETTER AI\n0C12..0C28    ; Recommended                    # 1.1   [23] TELUGU LETTER O..TELUGU LETTER NA\n0C2A..0C33    ; Recommended                    # 1.1   [10] TELUGU LETTER PA..TELUGU LETTER LLA\n0C35..0C39    ; Recommended                    # 1.1    [5] TELUGU LETTER VA..TELUGU LETTER HA\n0C3C          ; Recommended                    # 14.0       TELUGU SIGN NUKTA\n0C3D          ; Recommended                    # 5.1        TELUGU SIGN AVAGRAHA\n0C3E..0C44    ; Recommended                    # 1.1    [7] TELUGU VOWEL SIGN AA..TELUGU VOWEL SIGN VOCALIC RR\n0C46..0C48    ; Recommended                    # 1.1    [3] TELUGU VOWEL SIGN E..TELUGU VOWEL SIGN AI\n0C4A..0C4D    ; Recommended                    # 1.1    [4] TELUGU VOWEL SIGN O..TELUGU SIGN VIRAMA\n0C55..0C56    ; Recommended                    # 1.1    [2] TELUGU LENGTH MARK..TELUGU AI LENGTH MARK\n0C5D          ; Recommended                    # 14.0       TELUGU LETTER NAKAARA POLLU\n0C60..0C61    ; Recommended                    # 1.1    [2] TELUGU LETTER VOCALIC RR..TELUGU LETTER VOCALIC LL\n0C66..0C6F    ; Recommended                    # 1.1   [10] TELUGU DIGIT ZERO..TELUGU DIGIT NINE\n0C80          ; Recommended                    # 9.0        KANNADA SIGN SPACING CANDRABINDU\n0C82..0C83    ; Recommended                    # 1.1    [2] KANNADA SIGN ANUSVARA..KANNADA SIGN VISARGA\n0C85..0C8C    ; Recommended                    # 1.1    [8] KANNADA LETTER A..KANNADA LETTER VOCALIC L\n0C8E..0C90    ; Recommended                    # 1.1    [3] KANNADA LETTER E..KANNADA LETTER AI\n0C92..0CA8    ; Recommended                    # 1.1   [23] KANNADA LETTER O..KANNADA LETTER NA\n0CAA..0CB3    ; Recommended                    # 1.1   [10] KANNADA LETTER PA..KANNADA LETTER LLA\n0CB5..0CB9    ; Recommended                    # 1.1    [5] KANNADA LETTER VA..KANNADA LETTER HA\n0CBC..0CBD    ; Recommended                    # 4.0    [2] KANNADA SIGN NUKTA..KANNADA SIGN AVAGRAHA\n0CBE..0CC4    ; Recommended                    # 1.1    [7] KANNADA VOWEL SIGN AA..KANNADA VOWEL SIGN VOCALIC RR\n0CC6..0CC8    ; Recommended                    # 1.1    [3] KANNADA VOWEL SIGN E..KANNADA VOWEL SIGN AI\n0CCA..0CCD    ; Recommended                    # 1.1    [4] KANNADA VOWEL SIGN O..KANNADA SIGN VIRAMA\n0CD5..0CD6    ; Recommended                    # 1.1    [2] KANNADA LENGTH MARK..KANNADA AI LENGTH MARK\n0CDD          ; Recommended                    # 14.0       KANNADA LETTER NAKAARA POLLU\n0CE0..0CE1    ; Recommended                    # 1.1    [2] KANNADA LETTER VOCALIC RR..KANNADA LETTER VOCALIC LL\n0CE2..0CE3    ; Recommended                    # 5.0    [2] KANNADA VOWEL SIGN VOCALIC L..KANNADA VOWEL SIGN VOCALIC LL\n0CE6..0CEF    ; Recommended                    # 1.1   [10] KANNADA DIGIT ZERO..KANNADA DIGIT NINE\n0CF1..0CF2    ; Recommended                    # 5.0    [2] KANNADA SIGN JIHVAMULIYA..KANNADA SIGN UPADHMANIYA\n0CF3          ; Recommended                    # 15.0       KANNADA SIGN COMBINING ANUSVARA ABOVE RIGHT\n0D00          ; Recommended                    # 10.0       MALAYALAM SIGN COMBINING ANUSVARA ABOVE\n0D02..0D03    ; Recommended                    # 1.1    [2] MALAYALAM SIGN ANUSVARA..MALAYALAM SIGN VISARGA\n0D05..0D0C    ; Recommended                    # 1.1    [8] MALAYALAM LETTER A..MALAYALAM LETTER VOCALIC L\n0D0E..0D10    ; Recommended                    # 1.1    [3] MALAYALAM LETTER E..MALAYALAM LETTER AI\n0D12..0D28    ; Recommended                    # 1.1   [23] MALAYALAM LETTER O..MALAYALAM LETTER NA\n0D29          ; Recommended                    # 6.0        MALAYALAM LETTER NNNA\n0D2A..0D39    ; Recommended                    # 1.1   [16] MALAYALAM LETTER PA..MALAYALAM LETTER HA\n0D3A          ; Recommended                    # 6.0        MALAYALAM LETTER TTTA\n0D3D          ; Recommended                    # 5.1        MALAYALAM SIGN AVAGRAHA\n0D3E..0D43    ; Recommended                    # 1.1    [6] MALAYALAM VOWEL SIGN AA..MALAYALAM VOWEL SIGN VOCALIC R\n0D46..0D48    ; Recommended                    # 1.1    [3] MALAYALAM VOWEL SIGN E..MALAYALAM VOWEL SIGN AI\n0D4A..0D4D    ; Recommended                    # 1.1    [4] MALAYALAM VOWEL SIGN O..MALAYALAM SIGN VIRAMA\n0D4E          ; Recommended                    # 6.0        MALAYALAM LETTER DOT REPH\n0D54..0D56    ; Recommended                    # 9.0    [3] MALAYALAM LETTER CHILLU M..MALAYALAM LETTER CHILLU LLL\n0D57          ; Recommended                    # 1.1        MALAYALAM AU LENGTH MARK\n0D60..0D61    ; Recommended                    # 1.1    [2] MALAYALAM LETTER VOCALIC RR..MALAYALAM LETTER VOCALIC LL\n0D66..0D6F    ; Recommended                    # 1.1   [10] MALAYALAM DIGIT ZERO..MALAYALAM DIGIT NINE\n0D7A..0D7F    ; Recommended                    # 5.1    [6] MALAYALAM LETTER CHILLU NN..MALAYALAM LETTER CHILLU K\n0D82..0D83    ; Recommended                    # 3.0    [2] SINHALA SIGN ANUSVARAYA..SINHALA SIGN VISARGAYA\n0D85..0D8E    ; Recommended                    # 3.0   [10] SINHALA LETTER AYANNA..SINHALA LETTER IRUUYANNA\n0D91..0D96    ; Recommended                    # 3.0    [6] SINHALA LETTER EYANNA..SINHALA LETTER AUYANNA\n0D9A..0DA5    ; Recommended                    # 3.0   [12] SINHALA LETTER ALPAPRAANA KAYANNA..SINHALA LETTER TAALUJA SANYOOGA NAAKSIKYAYA\n0DA7..0DB1    ; Recommended                    # 3.0   [11] SINHALA LETTER ALPAPRAANA TTAYANNA..SINHALA LETTER DANTAJA NAYANNA\n0DB3..0DBB    ; Recommended                    # 3.0    [9] SINHALA LETTER SANYAKA DAYANNA..SINHALA LETTER RAYANNA\n0DBD          ; Recommended                    # 3.0        SINHALA LETTER DANTAJA LAYANNA\n0DC0..0DC6    ; Recommended                    # 3.0    [7] SINHALA LETTER VAYANNA..SINHALA LETTER FAYANNA\n0DCA          ; Recommended                    # 3.0        SINHALA SIGN AL-LAKUNA\n0DCF..0DD4    ; Recommended                    # 3.0    [6] SINHALA VOWEL SIGN AELA-PILLA..SINHALA VOWEL SIGN KETTI PAA-PILLA\n0DD6          ; Recommended                    # 3.0        SINHALA VOWEL SIGN DIGA PAA-PILLA\n```\n\n----------------------------------------\n\nTITLE: Unicode Obsolete Characters Definition Block\nDESCRIPTION: Defines ranges of Unicode code points marked as obsolete, including Hangul, Myanmar, Latin, and other script characters. Each line specifies the code point range and the Unicode version where it was marked obsolete.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/IdentifierType.txt#2025-04-21_snippet_26\n\nLANGUAGE: unicode-data\nCODE:\n```\nA960..A97C    ; Obsolete                       # 5.2   [29] HANGUL CHOSEONG TIKEUT-MIEUM..HANGUL CHOSEONG SSANGYEORINHIEUH\nA9E0..A9E6    ; Obsolete                       # 7.0    [7] MYANMAR LETTER SHAN GHA..MYANMAR MODIFIER LETTER SHAN REDUPLICATION\nAB30..AB5A    ; Obsolete                       # 7.0   [43] LATIN SMALL LETTER BARRED ALPHA..LATIN SMALL LETTER Y WITH SHORT RIGHT LEG\n```\n\n----------------------------------------\n\nTITLE: Defining Uncommon Technical Non-XID Unicode Characters\nDESCRIPTION: Defines Unicode code points for technical characters that are uncommonly used and not valid for XID (identifier) use, specifically Kievan musical symbols.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/IdentifierType.txt#2025-04-21_snippet_11\n\nLANGUAGE: unicode-data\nCODE:\n```\n1D1DE..1D1E8  ; Uncommon_Use Technical Not_XID # 8.0   [11] MUSICAL SYMBOL KIEVAN C CLEF..MUSICAL SYMBOL KIEVAN FLAT SIGN\n```\n\n----------------------------------------\n\nTITLE: Syntax Error Example: Invalid Mixed-Script Identifier\nDESCRIPTION: This code snippet demonstrates the syntax error that Elixir raises when encountering a mixed-script identifier (e.g., Cyrillic and Latin characters without underscore separation). It shows the error message, including the scripts detected and the need for all characters to resolve to a single script or a highly restrictive script for security reasons.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/references/unicode-syntax.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n\"** (SyntaxError) invalid mixed-script identifier found: аdmin\\n\\nMixed-script identifiers are not supported for security reasons. 'аdmin' is made of the following scripts:\\n\\n  \\u0430 а {Cyrillic}\\n  \\u0064 d {Latin}\\n  \\u006D m {Latin}\\n  \\u0069 i {Latin}\\n  \\u006E n {Latin}\\n\\nMake sure all characters in the identifier resolve to a single script or a highly\\nrestrictive script. See https://hexdocs.pm/elixir/unicode-syntax.html for more information.\\n\"\n```\n\n----------------------------------------\n\nTITLE: Defining Uncommon Obsolete Non-XID Unicode Characters\nDESCRIPTION: Specifies Unicode code points for obsolete characters that are uncommonly used and not valid for XID use.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/IdentifierType.txt#2025-04-21_snippet_14\n\nLANGUAGE: unicode-data\nCODE:\n```\nA8FC          ; Uncommon_Use Obsolete Not_XID  # 8.0        DEVANAGARI SIGN SIDDHAM\n```\n\n----------------------------------------\n\nTITLE: Implementing a Key-Value Store Using Processes in Elixir\nDESCRIPTION: This snippet defines a module `KV` that creates a process to act as a key-value store. It initializes a process with an empty map and updates or retrieves values based on messages sent to it. The process communicates using the `receive` block which handles `:get` and `:put` operations on the map. The `start_link/0` function initializes the process using `Task.start_link/1`, and the `loop/1` function recursively updates the map state.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/processes.md#2025-04-21_snippet_9\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule KV do\n  def start_link do\n    Task.start_link(fn -> loop(%{}) end)\n  end\n\n  defp loop(map) do\n    receive do\n      {:get, key, caller} ->\n        send(caller, Map.get(map, key))\n        loop(map)\n      {:put, key, value} ->\n        loop(Map.put(map, key, value))\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Uncommon Excluded Unicode Characters\nDESCRIPTION: Specifies Unicode code points for characters that are uncommonly used and explicitly excluded, including Mongolian and Mro script characters.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/IdentifierType.txt#2025-04-21_snippet_12\n\nLANGUAGE: unicode-data\nCODE:\n```\n18A9          ; Uncommon_Use Exclusion         # 3.0        MONGOLIAN LETTER ALI GALI DAGALGA\n16A40..16A5E  ; Uncommon_Use Exclusion         # 7.0   [31] MRO LETTER TA..MRO LETTER TEK\n16A60..16A69  ; Uncommon_Use Exclusion         # 7.0   [10] MRO DIGIT ZERO..MRO DIGIT NINE\n```\n\n----------------------------------------\n\nTITLE: Quoting an operator expression in Elixir\nDESCRIPTION: This example showcases how operators in Elixir are also represented as tuples when quoted. The tuple includes the operator, context/import metadata, and operands. Here, `1 + 2` is quoted to reveal its internal structure.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/meta-programming/quote-and-unquote.md#2025-04-21_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\niex> quote do: 1 + 2\n{:+, [context: Elixir, import: Kernel], [1, 2]}\n```\n\n----------------------------------------\n\nTITLE: Unicode Character Range Exclusions\nDESCRIPTION: Defines ranges of Unicode characters that should be excluded from processing. Each line specifies a character range or single character, followed by the exclusion tag and a comment indicating the Unicode version and description of the characters.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/IdentifierType.txt#2025-04-21_snippet_20\n\nLANGUAGE: config\nCODE:\n```\n#\tIdentifier_Type:\tExclusion\n\n03E2..03EF    ; Exclusion     # 1.1   [14] COPTIC CAPITAL LETTER SHEI..COPTIC SMALL LETTER DEI\n0800..082D    ; Exclusion     # 5.2   [46] SAMARITAN LETTER ALAF..SAMARITAN MARK NEQUDAA\n1681..169A    ; Exclusion     # 3.0   [26] OGHAM LETTER BEITH..OGHAM LETTER PEITH\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Block for Inscriptional Parthian Script\nDESCRIPTION: This snippet defines the Unicode block for the Inscriptional Parthian script, including letters and numbers. It specifies code point ranges and character types.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/Scripts.txt#2025-04-21_snippet_57\n\nLANGUAGE: Unicode\nCODE:\n```\n10B40..10B55  ; Inscriptional_Parthian # Lo  [22] INSCRIPTIONAL PARTHIAN LETTER ALEPH..INSCRIPTIONAL PARTHIAN LETTER TAW\n10B58..10B5F  ; Inscriptional_Parthian # No   [8] INSCRIPTIONAL PARTHIAN NUMBER ONE..INSCRIPTIONAL PARTHIAN NUMBER ONE THOUSAND\n\n# Total code points: 30\n```\n\n----------------------------------------\n\nTITLE: Directory Structure of New Mix Project\nDESCRIPTION: Lists the files and directories generated by Mix when creating a new project. This includes the mix.exs configuration file, a default lib folder, and a test setup.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/mix-and-otp/introduction-to-mix.md#2025-04-21_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n* creating README.md\n* creating .formatter.exs\n* creating .gitignore\n* creating mix.exs\n* creating lib\n* creating lib/kv.ex\n* creating test\n* creating test/test_helper.exs\n* creating test/kv_test.exs\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Code Blocks for Cham Script\nDESCRIPTION: Lists the Unicode code point ranges for the Cham script, categorizing characters by their types (Lo, Mn, Mc, Nd, Po) and providing character descriptions. Includes a total of 83 code points.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/Scripts.txt#2025-04-21_snippet_45\n\nLANGUAGE: unicode\nCODE:\n```\nAA00..AA28    ; Cham # Lo  [41] CHAM LETTER A..CHAM LETTER HA\nAA29..AA2E    ; Cham # Mn   [6] CHAM VOWEL SIGN AA..CHAM VOWEL SIGN OE\nAA2F..AA30    ; Cham # Mc   [2] CHAM VOWEL SIGN O..CHAM VOWEL SIGN AI\nAA31..AA32    ; Cham # Mn   [2] CHAM VOWEL SIGN AU..CHAM VOWEL SIGN UE\nAA33..AA34    ; Cham # Mc   [2] CHAM CONSONANT SIGN YA..CHAM CONSONANT SIGN RA\nAA35..AA36    ; Cham # Mn   [2] CHAM CONSONANT SIGN LA..CHAM CONSONANT SIGN WA\nAA40..AA42    ; Cham # Lo   [3] CHAM LETTER FINAL K..CHAM LETTER FINAL NG\nAA43          ; Cham # Mn       CHAM CONSONANT SIGN FINAL NG\nAA44..AA4B    ; Cham # Lo   [8] CHAM LETTER FINAL CH..CHAM LETTER FINAL SS\nAA4C          ; Cham # Mn       CHAM CONSONANT SIGN FINAL M\nAA4D          ; Cham # Mc       CHAM CONSONANT SIGN FINAL H\nAA50..AA59    ; Cham # Nd  [10] CHAM DIGIT ZERO..CHAM DIGIT NINE\nAA5C..AA5F    ; Cham # Po   [4] CHAM PUNCTUATION SPIRAL..CHAM PUNCTUATION TRIPLE DANDA\n\n# Total code points: 83\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Identifier Type Property in Plaintext\nDESCRIPTION: This snippet defines the Identifier_Type property for Unicode code points. It explains the file format, field definitions, and possible enumerated values for the property. The property is used in Unicode security mechanisms as described in UTS #39.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/IdentifierType.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# Format\n#\n# Field 0: code point\n# Field 1: set of Identifier_Type values (see Table 1 of http://www.unicode.org/reports/tr39)\n#\n# For the purpose of regular expressions, the property Identifier_Type is defined as\n# mapping each code point to a set of enumerated values.\n# The short name of Identifier_Type is ID_Type.\n# The possible values are:\n#   Not_Character, Deprecated, Default_Ignorable, Not_NFKC, Not_XID,\n#   Exclusion, Obsolete, Technical, Uncommon_Use, Limited_Use, Inclusion, Recommended\n# The short name of each value is the same as its long name.\n\n# All code points not explicitly listed for Identifier_Type\n# have the value Not_Character.\n\n# @missing: 0000..10FFFF; Not_Character\n\n# As usual, sets are unordered, with no duplicate values.\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Extender Code Points\nDESCRIPTION: This snippet provides the code point ranges for extender characters in Unicode. Extenders are characters that extend the length of a grapheme, including marks like MIDDLE DOT, ARABIC TATWEEL, and various iteration and lengthening symbols across multiple scripts.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/PropList.txt#2025-04-21_snippet_17\n\nLANGUAGE: unicode\nCODE:\n```\n00B7          ; Extender # Po       MIDDLE DOT\n02D0..02D1    ; Extender # Lm   [2] MODIFIER LETTER TRIANGULAR COLON..MODIFIER LETTER HALF TRIANGULAR COLON\n0640          ; Extender # Lm       ARABIC TATWEEL\n07FA          ; Extender # Lm       NKO LAJANYALAN\n0A71          ; Extender # Mn       GURMUKHI ADDAK\n0AFB          ; Extender # Mn       GUJARATI SIGN SHADDA\n0B55          ; Extender # Mn       ORIYA SIGN OVERLINE\n0E46          ; Extender # Lm       THAI CHARACTER MAIYAMOK\n0EC6          ; Extender # Lm       LAO KO LA\n180A          ; Extender # Po       MONGOLIAN NIRUGU\n1843          ; Extender # Lm       MONGOLIAN LETTER TODO LONG VOWEL SIGN\n1AA7          ; Extender # Lm       TAI THAM SIGN MAI YAMOK\n1C36          ; Extender # Mn       LEPCHA SIGN RAN\n1C7B          ; Extender # Lm       OL CHIKI RELAA\n3005          ; Extender # Lm       IDEOGRAPHIC ITERATION MARK\n3031..3035    ; Extender # Lm   [5] VERTICAL KANA REPEAT MARK..VERTICAL KANA REPEAT MARK LOWER HALF\n309D..309E    ; Extender # Lm   [2] HIRAGANA ITERATION MARK..HIRAGANA VOICED ITERATION MARK\n30FC..30FE    ; Extender # Lm   [3] KATAKANA-HIRAGANA PROLONGED SOUND MARK..KATAKANA VOICED ITERATION MARK\nA015          ; Extender # Lm       YI SYLLABLE WU\nA60C          ; Extender # Lm       VAI SYLLABLE LENGTHENER\nA9CF          ; Extender # Lm       JAVANESE PANGRANGKEP\nA9E6          ; Extender # Lm       MYANMAR MODIFIER LETTER SHAN REDUPLICATION\nAA70          ; Extender # Lm       MYANMAR MODIFIER LETTER KHAMTI REDUPLICATION\nAADD          ; Extender # Lm       TAI VIET SYMBOL SAM\nAAF3..AAF4    ; Extender # Lm   [2] MEETEI MAYEK SYLLABLE REPETITION MARK..MEETEI MAYEK WORD REPETITION MARK\nFF70          ; Extender # Lm       HALFWIDTH KATAKANA-HIRAGANA PROLONGED SOUND MARK\n10781..10782  ; Extender # Lm   [2] MODIFIER LETTER SUPERSCRIPT TRIANGULAR COLON..MODIFIER LETTER SUPERSCRIPT HALF TRIANGULAR COLON\n10D4E         ; Extender # Lm       GARAY VOWEL LENGTH MARK\n10D6A         ; Extender # Mn       GARAY CONSONANT GEMINATION MARK\n10D6F         ; Extender # Lm       GARAY REDUPLICATION MARK\n11237         ; Extender # Mn       KHOJKI SIGN SHADDA\n1135D         ; Extender # Lo       GRANTHA SIGN PLUTA\n113D2         ; Extender # Mn       TULU-TIGALARI GEMINATION MARK\n113D3         ; Extender # Lo       TULU-TIGALARI SIGN PLUTA\n115C6..115C8  ; Extender # Po   [3] SIDDHAM REPETITION MARK-1..SIDDHAM REPETITION MARK-3\n11A98         ; Extender # Mn       SOYOMBO GEMINATION MARK\n16B42..16B43  ; Extender # Lm   [2] PAHAWH HMONG SIGN VOS NRUA..PAHAWH HMONG SIGN IB YAM\n16FE0..16FE1  ; Extender # Lm   [2] TANGUT ITERATION MARK..NUSHU ITERATION MARK\n16FE3         ; Extender # Lm       OLD CHINESE ITERATION MARK\n1E13C..1E13D  ; Extender # Lm   [2] NYIAKENG PUACHUE HMONG SIGN XW XW..NYIAKENG PUACHUE HMONG SYLLABLE LENGTHENER\n1E5EF         ; Extender # Mn       OL ONAL SIGN IKIR\n1E944..1E946  ; Extender # Mn   [3] ADLAM ALIF LENGTHENER..ADLAM GEMINATION MARK\n\n# Total code points: 59\n```\n\n----------------------------------------\n\nTITLE: Defining Special Case Mapping for German Sharp S (ß)\nDESCRIPTION: Specifies the lowercase, titlecase, and uppercase mappings for the German es-zed (ß) character. The uppercase mapping is to 'SS'.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/SpecialCasing.txt#2025-04-21_snippet_0\n\nLANGUAGE: Unicode\nCODE:\n```\n00DF; 00DF; 0053 0073; 0053 0053; # LATIN SMALL LETTER SHARP S\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Block for Tai Viet Script\nDESCRIPTION: This snippet defines the Unicode block for the Tai Viet script, including letters, vowel signs, tone marks, and symbols. It specifies code point ranges and character types.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/Scripts.txt#2025-04-21_snippet_47\n\nLANGUAGE: Unicode\nCODE:\n```\nAA80..AAAF    ; Tai_Viet # Lo  [48] TAI VIET LETTER LOW KO..TAI VIET LETTER HIGH O\nAAB0          ; Tai_Viet # Mn       TAI VIET MAI KANG\nAAB1          ; Tai_Viet # Lo       TAI VIET VOWEL AA\nAAB2..AAB4    ; Tai_Viet # Mn   [3] TAI VIET VOWEL I..TAI VIET VOWEL U\nAAB5..AAB6    ; Tai_Viet # Lo   [2] TAI VIET VOWEL E..TAI VIET VOWEL O\nAAB7..AAB8    ; Tai_Viet # Mn   [2] TAI VIET MAI KHIT..TAI VIET VOWEL IA\nAAB9..AABD    ; Tai_Viet # Lo   [5] TAI VIET VOWEL UEA..TAI VIET VOWEL AN\nAABE..AABF    ; Tai_Viet # Mn   [2] TAI VIET VOWEL AM..TAI VIET TONE MAI EK\nAAC0          ; Tai_Viet # Lo       TAI VIET TONE MAI NUENG\nAAC1          ; Tai_Viet # Mn       TAI VIET TONE MAI THO\nAAC2          ; Tai_Viet # Lo       TAI VIET TONE MAI SONG\nAADB..AADC    ; Tai_Viet # Lo   [2] TAI VIET SYMBOL KON..TAI VIET SYMBOL NUENG\nAADD          ; Tai_Viet # Lm       TAI VIET SYMBOL SAM\nAADE..AADF    ; Tai_Viet # Po   [2] TAI VIET SYMBOL HO HOI..TAI VIET SYMBOL KOI KOI\n\n# Total code points: 72\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Character Ranges for Greek Script\nDESCRIPTION: This snippet defines Unicode character ranges for the Greek script, including various letter forms, diacritical marks, and symbols. It covers both ancient and modern Greek characters.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/Scripts.txt#2025-04-21_snippet_7\n\nLANGUAGE: Unicode\nCODE:\n```\n0370..0373    ; Greek # L&   [4] GREEK CAPITAL LETTER HETA..GREEK SMALL LETTER ARCHAIC SAMPI\n0375          ; Greek # Sk       GREEK LOWER NUMERAL SIGN\n0376..0377    ; Greek # L&   [2] GREEK CAPITAL LETTER PAMPHYLIAN DIGAMMA..GREEK SMALL LETTER PAMPHYLIAN DIGAMMA\n037A          ; Greek # Lm       GREEK YPOGEGRAMMENI\n037B..037D    ; Greek # L&   [3] GREEK SMALL REVERSED LUNATE SIGMA SYMBOL..GREEK SMALL REVERSED DOTTED LUNATE SIGMA SYMBOL\n037F          ; Greek # L&       GREEK CAPITAL LETTER YOT\n0384          ; Greek # Sk       GREEK TONOS\n0386          ; Greek # L&       GREEK CAPITAL LETTER ALPHA WITH TONOS\n0388..038A    ; Greek # L&   [3] GREEK CAPITAL LETTER EPSILON WITH TONOS..GREEK CAPITAL LETTER IOTA WITH TONOS\n038C          ; Greek # L&       GREEK CAPITAL LETTER OMICRON WITH TONOS\n038E..03A1    ; Greek # L&  [20] GREEK CAPITAL LETTER UPSILON WITH TONOS..GREEK CAPITAL LETTER RHO\n03A3..03E1    ; Greek # L&  [63] GREEK CAPITAL LETTER SIGMA..GREEK SMALL LETTER SAMPI\n03F0..03F5    ; Greek # L&   [6] GREEK KAPPA SYMBOL..GREEK LUNATE EPSILON SYMBOL\n03F6          ; Greek # Sm       GREEK REVERSED LUNATE EPSILON SYMBOL\n03F7..03FF    ; Greek # L&   [9] GREEK CAPITAL LETTER SHO..GREEK CAPITAL REVERSED DOTTED LUNATE SIGMA SYMBOL\n1D26..1D2A    ; Greek # L&   [5] GREEK LETTER SMALL CAPITAL GAMMA..GREEK LETTER SMALL CAPITAL PSI\n1D5D..1D61    ; Greek # Lm   [5] MODIFIER LETTER SMALL BETA..MODIFIER LETTER SMALL CHI\n1D66..1D6A    ; Greek # Lm   [5] GREEK SUBSCRIPT SMALL LETTER BETA..GREEK SUBSCRIPT SMALL LETTER CHI\n1DBF          ; Greek # Lm       MODIFIER LETTER SMALL THETA\n1F00..1F15    ; Greek # L&  [22] GREEK SMALL LETTER ALPHA WITH PSILI..GREEK SMALL LETTER EPSILON WITH DASIA AND OXIA\n1F18..1F1D    ; Greek # L&   [6] GREEK CAPITAL LETTER EPSILON WITH PSILI..GREEK CAPITAL LETTER EPSILON WITH DASIA AND OXIA\n1F20..1F45    ; Greek # L&  [38] GREEK SMALL LETTER ETA WITH PSILI..GREEK SMALL LETTER OMICRON WITH DASIA AND OXIA\n1F48..1F4D    ; Greek # L&   [6] GREEK CAPITAL LETTER OMICRON WITH PSILI..GREEK CAPITAL LETTER OMICRON WITH DASIA AND OXIA\n1F50..1F57    ; Greek # L&   [8] GREEK SMALL LETTER UPSILON WITH PSILI..GREEK SMALL LETTER UPSILON WITH DASIA AND PERISPOMENI\n1F59          ; Greek # L&       GREEK CAPITAL LETTER UPSILON WITH DASIA\n1F5B          ; Greek # L&       GREEK CAPITAL LETTER UPSILON WITH DASIA AND VARIA\n1F5D          ; Greek # L&       GREEK CAPITAL LETTER UPSILON WITH DASIA AND OXIA\n1F5F..1F7D    ; Greek # L&  [31] GREEK CAPITAL LETTER UPSILON WITH DASIA AND PERISPOMENI..GREEK SMALL LETTER OMEGA WITH OXIA\n1F80..1FB4    ; Greek # L&  [53] GREEK SMALL LETTER ALPHA WITH PSILI AND YPOGEGRAMMENI..GREEK SMALL LETTER ALPHA WITH OXIA AND YPOGEGRAMMENI\n1FB6..1FBC    ; Greek # L&   [7] GREEK SMALL LETTER ALPHA WITH PERISPOMENI..GREEK CAPITAL LETTER ALPHA WITH PROSGEGRAMMENI\n1FBD          ; Greek # Sk       GREEK KORONIS\n1FBE          ; Greek # L&       GREEK PROSGEGRAMMENI\n1FBF..1FC1    ; Greek # Sk   [3] GREEK PSILI..GREEK DIALYTIKA AND PERISPOMENI\n1FC2..1FC4    ; Greek # L&   [3] GREEK SMALL LETTER ETA WITH VARIA AND YPOGEGRAMMENI..GREEK SMALL LETTER ETA WITH OXIA AND YPOGEGRAMMENI\n1FC6..1FCC    ; Greek # L&   [7] GREEK SMALL LETTER ETA WITH PERISPOMENI..GREEK CAPITAL LETTER ETA WITH PROSGEGRAMMENI\n1FCD..1FCF    ; Greek # Sk   [3] GREEK PSILI AND VARIA..GREEK PSILI AND PERISPOMENI\n1FD0..1FD3    ; Greek # L&   [4] GREEK SMALL LETTER IOTA WITH VRACHY..GREEK SMALL LETTER IOTA WITH DIALYTIKA AND OXIA\n1FD6..1FDB    ; Greek # L&   [6] GREEK SMALL LETTER IOTA WITH PERISPOMENI..GREEK CAPITAL LETTER IOTA WITH OXIA\n1FDD..1FDF    ; Greek # Sk   [3] GREEK DASIA AND VARIA..GREEK DASIA AND PERISPOMENI\n1FE0..1FEC    ; Greek # L&  [13] GREEK SMALL LETTER UPSILON WITH VRACHY..GREEK CAPITAL LETTER RHO WITH DASIA\n1FED..1FEF    ; Greek # Sk   [3] GREEK DIALYTIKA AND VARIA..GREEK VARIA\n1FF2..1FF4    ; Greek # L&   [3] GREEK SMALL LETTER OMEGA WITH VARIA AND YPOGEGRAMMENI..GREEK SMALL LETTER OMEGA WITH OXIA AND YPOGEGRAMMENI\n1FF6..1FFC    ; Greek # L&   [7] GREEK SMALL LETTER OMEGA WITH PERISPOMENI..GREEK CAPITAL LETTER OMEGA WITH PROSGEGRAMMENI\n1FFD..1FFE    ; Greek # Sk   [2] GREEK OXIA..GREEK DASIA\n2126          ; Greek # L&       OHM SIGN\nAB65          ; Greek # L&       GREEK LETTER SMALL CAPITAL OMEGA\n10140..10174  ; Greek # Nl  [53] GREEK ACROPHONIC ATTIC ONE QUARTER..GREEK ACROPHONIC STRATIAN FIFTY MNAS\n10175..10178  ; Greek # No   [4] GREEK ONE HALF SIGN..GREEK THREE QUARTERS SIGN\n10179..10189  ; Greek # So  [17] GREEK YEAR SIGN..GREEK TRYBLION BASE SIGN\n1018A..1018B  ; Greek # No   [2] GREEK ZERO SIGN..GREEK ONE QUARTER SIGN\n1018C..1018E  ; Greek # So   [3] GREEK SINUSOID SIGN..NOMISMA SIGN\n101A0         ; Greek # So       GREEK SYMBOL TAU RHO\n1D200..1D241  ; Greek # So  [66] GREEK VOCAL NOTATION SYMBOL-1..GREEK INSTRUMENTAL NOTATION SYMBOL-54\n1D242..1D244  ; Greek # Mn   [3] COMBINING GREEK MUSICAL TRISEME..COMBINING GREEK MUSICAL PENTASEME\n1D245         ; Greek # So       GREEK MUSICAL LEIMMA\n```\n\n----------------------------------------\n\nTITLE: Defining Command Run Function in Elixir\nDESCRIPTION: This code defines a stub implementation for the `run/1` function in the `KVServer.Command` module.  The function takes a command as input and currently returns `{:ok, \"OK\\r\\n\"}` regardless of the command received.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/mix-and-otp/docs-tests-and-with.md#2025-04-21_snippet_5\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule KVServer.Command do\n  @doc \"\"\"\n  Runs the given command.\n  \"\"\"\n  def run(command) do\n    {:ok, \"OK\\r\\n\"}\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Noncharacter Code Points\nDESCRIPTION: This snippet defines the Unicode noncharacter code points, which are code points permanently reserved in the Unicode Standard and not used for character assignment. These include specific ranges at the end of each plane (FFFE-FFFF) and the block from FDD0 to FDEF.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/PropList.txt#2025-04-21_snippet_20\n\nLANGUAGE: unicode\nCODE:\n```\nFDD0..FDEF    ; Noncharacter_Code_Point # Cn  [32] <noncharacter-FDD0>..<noncharacter-FDEF>\nFFFE..FFFF    ; Noncharacter_Code_Point # Cn   [2] <noncharacter-FFFE>..<noncharacter-FFFF>\n1FFFE..1FFFF  ; Noncharacter_Code_Point # Cn   [2] <noncharacter-1FFFE>..<noncharacter-1FFFF>\n2FFFE..2FFFF  ; Noncharacter_Code_Point # Cn   [2] <noncharacter-2FFFE>..<noncharacter-2FFFF>\n3FFFE..3FFFF  ; Noncharacter_Code_Point # Cn   [2] <noncharacter-3FFFE>..<noncharacter-3FFFF>\n4FFFE..4FFFF  ; Noncharacter_Code_Point # Cn   [2] <noncharacter-4FFFE>..<noncharacter-4FFFF>\n5FFFE..5FFFF  ; Noncharacter_Code_Point # Cn   [2] <noncharacter-5FFFE>..<noncharacter-5FFFF>\n6FFFE..6FFFF  ; Noncharacter_Code_Point # Cn   [2] <noncharacter-6FFFE>..<noncharacter-6FFFF>\n7FFFE..7FFFF  ; Noncharacter_Code_Point # Cn   [2] <noncharacter-7FFFE>..<noncharacter-7FFFF>\n8FFFE..8FFFF  ; Noncharacter_Code_Point # Cn   [2] <noncharacter-8FFFE>..<noncharacter-8FFFF>\n9FFFE..9FFFF  ; Noncharacter_Code_Point # Cn   [2] <noncharacter-9FFFE>..<noncharacter-9FFFF>\nAFFFE..AFFFF  ; Noncharacter_Code_Point # Cn   [2] <noncharacter-AFFFE>..<noncharacter-AFFFF>\nBFFFE..BFFFF  ; Noncharacter_Code_Point # Cn   [2] <noncharacter-BFFFE>..<noncharacter-BFFFF>\nCFFFE..CFFFF  ; Noncharacter_Code_Point # Cn   [2] <noncharacter-CFFFE>..<noncharacter-CFFFF>\nDFFFE..DFFFF  ; Noncharacter_Code_Point # Cn   [2] <noncharacter-DFFFE>..<noncharacter-DFFFF>\nEFFFE..EFFFF  ; Noncharacter_Code_Point # Cn   [2] <noncharacter-EFFFE>..<noncharacter-EFFFF>\nFFFFE..FFFFF  ; Noncharacter_Code_Point # Cn   [2] <noncharacter-FFFFE>..<noncharacter-FFFFF>\n10FFFE..10FFFF; Noncharacter_Code_Point # Cn   [2] <noncharacter-10FFFE>..<noncharacter-10FFFF>\n\n# Total code points: 66\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Block for Lisu Script\nDESCRIPTION: This snippet defines the Unicode block for the Lisu script, including letters, tone letters, punctuation marks, and an additional letter. It specifies code point ranges and character types.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/Scripts.txt#2025-04-21_snippet_51\n\nLANGUAGE: Unicode\nCODE:\n```\nA4D0..A4F7    ; Lisu # Lo  [40] LISU LETTER BA..LISU LETTER OE\nA4F8..A4FD    ; Lisu # Lm   [6] LISU LETTER TONE MYA TI..LISU LETTER TONE MYA JEU\nA4FE..A4FF    ; Lisu # Po   [2] LISU PUNCTUATION COMMA..LISU PUNCTUATION FULL STOP\n11FB0         ; Lisu # Lo       LISU LETTER YHA\n\n# Total code points: 49\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Character Ranges for Hebrew Script\nDESCRIPTION: This snippet defines Unicode character ranges for the Hebrew script, including various letter forms, diacritical marks, punctuation, and special symbols used in Hebrew writing.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/Scripts.txt#2025-04-21_snippet_10\n\nLANGUAGE: Unicode\nCODE:\n```\n0591..05BD    ; Hebrew # Mn  [45] HEBREW ACCENT ETNAHTA..HEBREW POINT METEG\n05BE          ; Hebrew # Pd       HEBREW PUNCTUATION MAQAF\n05BF          ; Hebrew # Mn       HEBREW POINT RAFE\n05C0          ; Hebrew # Po       HEBREW PUNCTUATION PASEQ\n05C1..05C2    ; Hebrew # Mn   [2] HEBREW POINT SHIN DOT..HEBREW POINT SIN DOT\n05C3          ; Hebrew # Po       HEBREW PUNCTUATION SOF PASUQ\n05C4..05C5    ; Hebrew # Mn   [2] HEBREW MARK UPPER DOT..HEBREW MARK LOWER DOT\n05C6          ; Hebrew # Po       HEBREW PUNCTUATION NUN HAFUKHA\n05C7          ; Hebrew # Mn       HEBREW POINT QAMATS QATAN\n05D0..05EA    ; Hebrew # Lo  [27] HEBREW LETTER ALEF..HEBREW LETTER TAV\n05EF..05F2    ; Hebrew # Lo   [4] HEBREW YOD TRIANGLE..HEBREW LIGATURE YIDDISH DOUBLE YOD\n05F3..05F4    ; Hebrew # Po   [2] HEBREW PUNCTUATION GERESH..HEBREW PUNCTUATION GERSHAYIM\nFB1D          ; Hebrew # Lo       HEBREW LETTER YOD WITH HIRIQ\nFB1E          ; Hebrew # Mn       HEBREW POINT JUDEO-SPANISH VARIKA\nFB1F..FB28    ; Hebrew # Lo  [10] HEBREW LIGATURE YIDDISH YOD YOD PATAH..HEBREW LETTER WIDE TAV\nFB29          ; Hebrew # Sm       HEBREW LETTER ALTERNATIVE PLUS SIGN\nFB2A..FB36    ; Hebrew # Lo  [13] HEBREW LETTER SHIN WITH SHIN DOT..HEBREW LETTER ZAYIN WITH DAGESH\nFB38..FB3C    ; Hebrew # Lo   [5] HEBREW LETTER TET WITH DAGESH..HEBREW LETTER LAMED WITH DAGESH\nFB3E          ; Hebrew # Lo       HEBREW LETTER MEM WITH DAGESH\nFB40..FB41    ; Hebrew # Lo   [2] HEBREW LETTER NUN WITH DAGESH..HEBREW LETTER SAMEKH WITH DAGESH\nFB43..FB44    ; Hebrew # Lo   [2] HEBREW LETTER FINAL PE WITH DAGESH..HEBREW LETTER PE WITH DAGESH\nFB46..FB4F    ; Hebrew # Lo  [10] HEBREW LETTER TSADI WITH DAGESH..HEBREW LIGATURE ALEF LAMED\n```\n\n----------------------------------------\n\nTITLE: Unicode Soft_Dotted Character Definitions\nDESCRIPTION: Lists all Unicode code points that have the Soft_Dotted property. This includes various forms of Latin small letter 'i' and 'j', as well as similar characters from other scripts that feature a dot that disappears when certain diacritical marks are applied.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/PropList.txt#2025-04-21_snippet_21\n\nLANGUAGE: unicode\nCODE:\n```\n0069..006A    ; Soft_Dotted # L&   [2] LATIN SMALL LETTER I..LATIN SMALL LETTER J\n012F          ; Soft_Dotted # L&       LATIN SMALL LETTER I WITH OGONEK\n0249          ; Soft_Dotted # L&       LATIN SMALL LETTER J WITH STROKE\n0268          ; Soft_Dotted # L&       LATIN SMALL LETTER I WITH STROKE\n029D          ; Soft_Dotted # L&       LATIN SMALL LETTER J WITH CROSSED-TAIL\n02B2          ; Soft_Dotted # Lm       MODIFIER LETTER SMALL J\n03F3          ; Soft_Dotted # L&       GREEK LETTER YOT\n0456          ; Soft_Dotted # L&       CYRILLIC SMALL LETTER BYELORUSSIAN-UKRAINIAN I\n0458          ; Soft_Dotted # L&       CYRILLIC SMALL LETTER JE\n1D62          ; Soft_Dotted # Lm       LATIN SUBSCRIPT SMALL LETTER I\n1D96          ; Soft_Dotted # L&       LATIN SMALL LETTER I WITH RETROFLEX HOOK\n1DA4          ; Soft_Dotted # Lm       MODIFIER LETTER SMALL I WITH STROKE\n1DA8          ; Soft_Dotted # Lm       MODIFIER LETTER SMALL J WITH CROSSED-TAIL\n1E2D          ; Soft_Dotted # L&       LATIN SMALL LETTER I WITH TILDE BELOW\n1ECB          ; Soft_Dotted # L&       LATIN SMALL LETTER I WITH DOT BELOW\n2071          ; Soft_Dotted # Lm       SUPERSCRIPT LATIN SMALL LETTER I\n2148..2149    ; Soft_Dotted # L&   [2] DOUBLE-STRUCK ITALIC SMALL I..DOUBLE-STRUCK ITALIC SMALL J\n2C7C          ; Soft_Dotted # Lm       LATIN SUBSCRIPT SMALL LETTER J\n1D422..1D423  ; Soft_Dotted # L&   [2] MATHEMATICAL BOLD SMALL I..MATHEMATICAL BOLD SMALL J\n1D456..1D457  ; Soft_Dotted # L&   [2] MATHEMATICAL ITALIC SMALL I..MATHEMATICAL ITALIC SMALL J\n1D48A..1D48B  ; Soft_Dotted # L&   [2] MATHEMATICAL BOLD ITALIC SMALL I..MATHEMATICAL BOLD ITALIC SMALL J\n1D4BE..1D4BF  ; Soft_Dotted # L&   [2] MATHEMATICAL SCRIPT SMALL I..MATHEMATICAL SCRIPT SMALL J\n1D4F2..1D4F3  ; Soft_Dotted # L&   [2] MATHEMATICAL BOLD SCRIPT SMALL I..MATHEMATICAL BOLD SCRIPT SMALL J\n1D526..1D527  ; Soft_Dotted # L&   [2] MATHEMATICAL FRAKTUR SMALL I..MATHEMATICAL FRAKTUR SMALL J\n1D55A..1D55B  ; Soft_Dotted # L&   [2] MATHEMATICAL DOUBLE-STRUCK SMALL I..MATHEMATICAL DOUBLE-STRUCK SMALL J\n1D58E..1D58F  ; Soft_Dotted # L&   [2] MATHEMATICAL BOLD FRAKTUR SMALL I..MATHEMATICAL BOLD FRAKTUR SMALL J\n1D5C2..1D5C3  ; Soft_Dotted # L&   [2] MATHEMATICAL SANS-SERIF SMALL I..MATHEMATICAL SANS-SERIF SMALL J\n1D5F6..1D5F7  ; Soft_Dotted # L&   [2] MATHEMATICAL SANS-SERIF BOLD SMALL I..MATHEMATICAL SANS-SERIF BOLD SMALL J\n1D62A..1D62B  ; Soft_Dotted # L&   [2] MATHEMATICAL SANS-SERIF ITALIC SMALL I..MATHEMATICAL SANS-SERIF ITALIC SMALL J\n1D65E..1D65F  ; Soft_Dotted # L&   [2] MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL I..MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL J\n1D692..1D693  ; Soft_Dotted # L&   [2] MATHEMATICAL MONOSPACE SMALL I..MATHEMATICAL MONOSPACE SMALL J\n1DF1A         ; Soft_Dotted # L&       LATIN SMALL LETTER I WITH STROKE AND RETROFLEX HOOK\n1E04C..1E04D  ; Soft_Dotted # Lm   [2] MODIFIER LETTER CYRILLIC SMALL BYELORUSSIAN-UKRAINIAN I..MODIFIER LETTER CYRILLIC SMALL JE\n1E068         ; Soft_Dotted # Lm       CYRILLIC SUBSCRIPT SMALL LETTER BYELORUSSIAN-UKRAINIAN I\n\n# Total code points: 50\n```\n\n----------------------------------------\n\nTITLE: Defining Batak Unicode Block\nDESCRIPTION: Lists the Unicode code points for the Batak script, categorizing letters, vowel signs, and symbols with their respective ranges and categories.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/Scripts.txt#2025-04-21_snippet_61\n\nLANGUAGE: text\nCODE:\n```\n1BC0..1BE5    ; Batak # Lo  [38] BATAK LETTER A..BATAK LETTER U\n1BE6          ; Batak # Mn       BATAK SIGN TOMPI\n1BE7          ; Batak # Mc       BATAK VOWEL SIGN E\n1BE8..1BE9    ; Batak # Mn   [2] BATAK VOWEL SIGN PAKPAK E..BATAK VOWEL SIGN EE\n1BEA..1BEC    ; Batak # Mc   [3] BATAK VOWEL SIGN I..BATAK VOWEL SIGN O\n1BED          ; Batak # Mn       BATAK VOWEL SIGN KARO O\n1BEE          ; Batak # Mc       BATAK VOWEL SIGN U\n1BEF..1BF1    ; Batak # Mn   [3] BATAK VOWEL SIGN U FOR SIMALUNGUN SA..BATAK CONSONANT SIGN H\n1BF2..1BF3    ; Batak # Mc   [2] BATAK PANGOLAT..BATAK PANONGONAN\n1BFC..1BFF    ; Batak # Po   [4] BATAK SYMBOL BINDU NA METEK..BATAK SYMBOL BINDU PANGOLAT\n\n# Total code points: 56\n```\n\n----------------------------------------\n\nTITLE: Interfacing with Erlang Modules using Elixir\nDESCRIPTION: This snippet shows how to check if a module is an atom and demonstrates function calls in both Elixir and Erlang styles. The is_atom function checks if a module is an atom, while String.first and :binary.first functions retrieve the first character from a string in different contexts. Ensure you understand Erlang's naming conventions when calling its functions in Elixir.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/erlang-libraries.md#2025-04-21_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\niex> is_atom(String)\ntrue\niex> String.first(\"hello\")\n\"h\"\niex> is_atom(:binary)\ntrue\niex> :binary.first(\"hello\")\n104\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Character Ranges for Tamil Script\nDESCRIPTION: This snippet defines the Unicode character ranges for the Tamil script, including various letter types, vowel signs, digits, and special symbols.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/Scripts.txt#2025-04-21_snippet_16\n\nLANGUAGE: Unicode\nCODE:\n```\n0B82          ; Tamil # Mn       TAMIL SIGN ANUSVARA\n0B83          ; Tamil # Lo       TAMIL SIGN VISARGA\n0B85..0B8A    ; Tamil # Lo   [6] TAMIL LETTER A..TAMIL LETTER UU\n0B8E..0B90    ; Tamil # Lo   [3] TAMIL LETTER E..TAMIL LETTER AI\n0B92..0B95    ; Tamil # Lo   [4] TAMIL LETTER O..TAMIL LETTER KA\n0B99..0B9A    ; Tamil # Lo   [2] TAMIL LETTER NGA..TAMIL LETTER CA\n0B9C          ; Tamil # Lo       TAMIL LETTER JA\n0B9E..0B9F    ; Tamil # Lo   [2] TAMIL LETTER NYA..TAMIL LETTER TTA\n0BA3..0BA4    ; Tamil # Lo   [2] TAMIL LETTER NNA..TAMIL LETTER TA\n0BA8..0BAA    ; Tamil # Lo   [3] TAMIL LETTER NA..TAMIL LETTER PA\n0BAE..0BB9    ; Tamil # Lo  [12] TAMIL LETTER MA..TAMIL LETTER HA\n0BBE..0BBF    ; Tamil # Mc   [2] TAMIL VOWEL SIGN AA..TAMIL VOWEL SIGN I\n0BC0          ; Tamil # Mn       TAMIL VOWEL SIGN II\n0BC1..0BC2    ; Tamil # Mc   [2] TAMIL VOWEL SIGN U..TAMIL VOWEL SIGN UU\n0BC6..0BC8    ; Tamil # Mc   [3] TAMIL VOWEL SIGN E..TAMIL VOWEL SIGN AI\n0BCA..0BCC    ; Tamil # Mc   [3] TAMIL VOWEL SIGN O..TAMIL VOWEL SIGN AU\n0BCD          ; Tamil # Mn       TAMIL SIGN VIRAMA\n0BD0          ; Tamil # Lo       TAMIL OM\n0BD7          ; Tamil # Mc       TAMIL AU LENGTH MARK\n0BE6..0BEF    ; Tamil # Nd  [10] TAMIL DIGIT ZERO..TAMIL DIGIT NINE\n0BF0..0BF2    ; Tamil # No   [3] TAMIL NUMBER TEN..TAMIL NUMBER ONE THOUSAND\n0BF3..0BF8    ; Tamil # So   [6] TAMIL DAY SIGN..TAMIL AS ABOVE SIGN\n0BF9          ; Tamil # Sc       TAMIL RUPEE SIGN\n0BFA          ; Tamil # So       TAMIL NUMBER SIGN\n11FC0..11FD4  ; Tamil # No  [21] TAMIL FRACTION ONE THREE-HUNDRED-AND-TWENTIETH..TAMIL FRACTION DOWNSCALING FACTOR KIIZH\n11FD5..11FDC  ; Tamil # So   [8] TAMIL SIGN NEL..TAMIL SIGN MUKKURUNI\n11FDD..11FE0  ; Tamil # Sc   [4] TAMIL SIGN KAACU..TAMIL SIGN VARAAKAN\n11FE1..11FF1  ; Tamil # So  [17] TAMIL SIGN PAARAM..TAMIL SIGN VAKAIYARAA\n11FFF         ; Tamil # Po       TAMIL PUNCTUATION END OF TEXT\n```\n\n----------------------------------------\n\nTITLE: Defining Non-Imported Functions with Underscore\nDESCRIPTION: Example of defining a function with underscore prefix that won't be imported by default.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/references/naming-conventions.md#2025-04-21_snippet_2\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule Example do\n  def _wont_be_imported do\n    :oops\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Unicode Logical_Order_Exception Character Definitions\nDESCRIPTION: Defines Unicode code points with the Logical_Order_Exception property. These characters, primarily vowel signs from Thai, Lao, New Tai Lue, and Tai Viet scripts, have special logical ordering behavior where they are stored before consonants but displayed after them.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/PropList.txt#2025-04-21_snippet_22\n\nLANGUAGE: unicode\nCODE:\n```\n0E40..0E44    ; Logical_Order_Exception # Lo   [5] THAI CHARACTER SARA E..THAI CHARACTER SARA AI MAIMALAI\n0EC0..0EC4    ; Logical_Order_Exception # Lo   [5] LAO VOWEL SIGN E..LAO VOWEL SIGN AI\n19B5..19B7    ; Logical_Order_Exception # Lo   [3] NEW TAI LUE VOWEL SIGN E..NEW TAI LUE VOWEL SIGN O\n19BA          ; Logical_Order_Exception # Lo       NEW TAI LUE VOWEL SIGN AY\nAAB5..AAB6    ; Logical_Order_Exception # Lo   [2] TAI VIET VOWEL E..TAI VIET VOWEL O\nAAB9          ; Logical_Order_Exception # Lo       TAI VIET VOWEL UEA\nAABB..AABC    ; Logical_Order_Exception # Lo   [2] TAI VIET VOWEL AUE..TAI VIET VOWEL AY\n\n# Total code points: 19\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Block for Egyptian Hieroglyphs\nDESCRIPTION: This snippet defines the Unicode block for Egyptian Hieroglyphs, including hieroglyphs, joiners, modifiers, and damaged signs. It specifies code point ranges and character types.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/Scripts.txt#2025-04-21_snippet_49\n\nLANGUAGE: Unicode\nCODE:\n```\n13000..1342F  ; Egyptian_Hieroglyphs # Lo [1072] EGYPTIAN HIEROGLYPH A001..EGYPTIAN HIEROGLYPH V011D\n13430..1343F  ; Egyptian_Hieroglyphs # Cf  [16] EGYPTIAN HIEROGLYPH VERTICAL JOINER..EGYPTIAN HIEROGLYPH END WALLED ENCLOSURE\n13440         ; Egyptian_Hieroglyphs # Mn       EGYPTIAN HIEROGLYPH MIRROR HORIZONTALLY\n13441..13446  ; Egyptian_Hieroglyphs # Lo   [6] EGYPTIAN HIEROGLYPH FULL BLANK..EGYPTIAN HIEROGLYPH WIDE LOST SIGN\n13447..13455  ; Egyptian_Hieroglyphs # Mn  [15] EGYPTIAN HIEROGLYPH MODIFIER DAMAGED AT TOP START..EGYPTIAN HIEROGLYPH MODIFIER DAMAGED\n13460..143FA  ; Egyptian_Hieroglyphs # Lo [3995] EGYPTIAN HIEROGLYPH-13460..EGYPTIAN HIEROGLYPH-143FA\n\n# Total code points: 5105\n```\n\n----------------------------------------\n\nTITLE: Bopomofo Unicode Range Definition\nDESCRIPTION: Specifies the Unicode code point ranges for Bopomofo characters, including modifier letters and standard letters.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/Scripts.txt#2025-04-21_snippet_27\n\nLANGUAGE: text\nCODE:\n```\n02EA..02EB    ; Bopomofo # Sk   [2] MODIFIER LETTER YIN DEPARTING TONE MARK..MODIFIER LETTER YANG DEPARTING TONE MARK\n3105..312F    ; Bopomofo # Lo  [43] BOPOMOFO LETTER B..BOPOMOFO LETTER NN\n31A0..31BF    ; Bopomofo # Lo  [32] BOPOMOFO LETTER BU..BOPOMOFO LETTER AH\n```\n\n----------------------------------------\n\nTITLE: Unicode ID_Compat_Math_Continue Character Definitions\nDESCRIPTION: Lists Unicode code points with the ID_Compat_Math_Continue property. These characters can appear within identifiers for compatibility with mathematical notation. Includes superscript/subscript digits, parentheses, operators, and mathematical symbols.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/PropList.txt#2025-04-21_snippet_25\n\nLANGUAGE: unicode\nCODE:\n```\n00B2..00B3    ; ID_Compat_Math_Continue # No   [2] SUPERSCRIPT TWO..SUPERSCRIPT THREE\n00B9          ; ID_Compat_Math_Continue # No       SUPERSCRIPT ONE\n2070          ; ID_Compat_Math_Continue # No       SUPERSCRIPT ZERO\n2074..2079    ; ID_Compat_Math_Continue # No   [6] SUPERSCRIPT FOUR..SUPERSCRIPT NINE\n207A..207C    ; ID_Compat_Math_Continue # Sm   [3] SUPERSCRIPT PLUS SIGN..SUPERSCRIPT EQUALS SIGN\n207D          ; ID_Compat_Math_Continue # Ps       SUPERSCRIPT LEFT PARENTHESIS\n207E          ; ID_Compat_Math_Continue # Pe       SUPERSCRIPT RIGHT PARENTHESIS\n2080..2089    ; ID_Compat_Math_Continue # No  [10] SUBSCRIPT ZERO..SUBSCRIPT NINE\n208A..208C    ; ID_Compat_Math_Continue # Sm   [3] SUBSCRIPT PLUS SIGN..SUBSCRIPT EQUALS SIGN\n208D          ; ID_Compat_Math_Continue # Ps       SUBSCRIPT LEFT PARENTHESIS\n208E          ; ID_Compat_Math_Continue # Pe       SUBSCRIPT RIGHT PARENTHESIS\n2202          ; ID_Compat_Math_Continue # Sm       PARTIAL DIFFERENTIAL\n2207          ; ID_Compat_Math_Continue # Sm       NABLA\n221E          ; ID_Compat_Math_Continue # Sm       INFINITY\n1D6C1         ; ID_Compat_Math_Continue # Sm       MATHEMATICAL BOLD NABLA\n1D6DB         ; ID_Compat_Math_Continue # Sm       MATHEMATICAL BOLD PARTIAL DIFFERENTIAL\n1D6FB         ; ID_Compat_Math_Continue # Sm       MATHEMATICAL ITALIC NABLA\n1D715         ; ID_Compat_Math_Continue # Sm       MATHEMATICAL ITALIC PARTIAL DIFFERENTIAL\n1D735         ; ID_Compat_Math_Continue # Sm       MATHEMATICAL BOLD ITALIC NABLA\n1D74F         ; ID_Compat_Math_Continue # Sm       MATHEMATICAL BOLD ITALIC PARTIAL DIFFERENTIAL\n1D76F         ; ID_Compat_Math_Continue # Sm       MATHEMATICAL SANS-SERIF BOLD NABLA\n1D789         ; ID_Compat_Math_Continue # Sm       MATHEMATICAL SANS-SERIF BOLD PARTIAL DIFFERENTIAL\n1D7A9         ; ID_Compat_Math_Continue # Sm       MATHEMATICAL SANS-SERIF BOLD ITALIC NABLA\n1D7C3         ; ID_Compat_Math_Continue # Sm       MATHEMATICAL SANS-SERIF BOLD ITALIC PARTIAL DIFFERENTIAL\n\n# Total code points: 43\n```\n\n----------------------------------------\n\nTITLE: Defining Meroitic Cursive Unicode Block\nDESCRIPTION: Outlines the Unicode code points for the Meroitic Cursive script, including letters, logograms, numbers, and fractions with their respective categories.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/Scripts.txt#2025-04-21_snippet_65\n\nLANGUAGE: text\nCODE:\n```\n109A0..109B7  ; Meroitic_Cursive # Lo  [24] MEROITIC CURSIVE LETTER A..MEROITIC CURSIVE LETTER DA\n109BC..109BD  ; Meroitic_Cursive # No   [2] MEROITIC CURSIVE FRACTION ELEVEN TWELFTHS..MEROITIC CURSIVE FRACTION ONE HALF\n109BE..109BF  ; Meroitic_Cursive # Lo   [2] MEROITIC CURSIVE LOGOGRAM RMT..MEROITIC CURSIVE LOGOGRAM IMN\n109C0..109CF  ; Meroitic_Cursive # No  [16] MEROITIC CURSIVE NUMBER ONE..MEROITIC CURSIVE NUMBER SEVENTY\n109D2..109FF  ; Meroitic_Cursive # No  [46] MEROITIC CURSIVE NUMBER ONE HUNDRED..MEROITIC CURSIVE FRACTION TEN TWELFTHS\n\n# Total code points: 90\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Code Blocks for Cuneiform Script\nDESCRIPTION: Lists the Unicode code point ranges for the Cuneiform script, categorizing characters by their types (Lo, Nl, Po) and providing character descriptions. Includes a total of 1234 code points.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/Scripts.txt#2025-04-21_snippet_31\n\nLANGUAGE: unicode\nCODE:\n```\n12000..12399  ; Cuneiform # Lo [922] CUNEIFORM SIGN A..CUNEIFORM SIGN U U\n12400..1246E  ; Cuneiform # Nl [111] CUNEIFORM NUMERIC SIGN TWO ASH..CUNEIFORM NUMERIC SIGN NINE U VARIANT FORM\n12470..12474  ; Cuneiform # Po   [5] CUNEIFORM PUNCTUATION SIGN OLD ASSYRIAN WORD DIVIDER..CUNEIFORM PUNCTUATION SIGN DIAGONAL QUADCOLON\n12480..12543  ; Cuneiform # Lo [196] CUNEIFORM SIGN AB TIMES NUN TENU..CUNEIFORM SIGN ZU5 TIMES THREE DISH TENU\n\n# Total code points: 1234\n```\n\n----------------------------------------\n\nTITLE: Latin Unicode Character Range Definitions\nDESCRIPTION: Defines Unicode code point ranges for Latin script characters. Includes categories like uppercase letters (L&), lowercase letters (L&), modifier letters (Lm), other letters (Lo), and number letters (Nl). Each range includes a description of the characters it contains and the count of code points.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/Scripts.txt#2025-04-21_snippet_6\n\nLANGUAGE: Unicode\nCODE:\n```\n0041..005A    ; Latin # L&  [26] LATIN CAPITAL LETTER A..LATIN CAPITAL LETTER Z\n0061..007A    ; Latin # L&  [26] LATIN SMALL LETTER A..LATIN SMALL LETTER Z\n00AA          ; Latin # Lo       FEMININE ORDINAL INDICATOR\n00BA          ; Latin # Lo       MASCULINE ORDINAL INDICATOR\n00C0..00D6    ; Latin # L&  [23] LATIN CAPITAL LETTER A WITH GRAVE..LATIN CAPITAL LETTER O WITH DIAERESIS\n[...additional ranges omitted for brevity...]\n1DF25..1DF2A  ; Latin # L&   [6] LATIN SMALL LETTER D WITH MID-HEIGHT LEFT HOOK..LATIN SMALL LETTER T WITH MID-HEIGHT LEFT HOOK\n\n# Total code points: 1487\n```\n\n----------------------------------------\n\nTITLE: Unicode ID_Compat_Math_Start Character Definitions\nDESCRIPTION: Lists Unicode code points with the ID_Compat_Math_Start property. These characters can begin identifiers for compatibility with mathematical notation. Includes special mathematical symbols like PARTIAL DIFFERENTIAL, NABLA, and INFINITY in various styles.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/PropList.txt#2025-04-21_snippet_26\n\nLANGUAGE: unicode\nCODE:\n```\n2202          ; ID_Compat_Math_Start # Sm       PARTIAL DIFFERENTIAL\n2207          ; ID_Compat_Math_Start # Sm       NABLA\n221E          ; ID_Compat_Math_Start # Sm       INFINITY\n1D6C1         ; ID_Compat_Math_Start # Sm       MATHEMATICAL BOLD NABLA\n1D6DB         ; ID_Compat_Math_Start # Sm       MATHEMATICAL BOLD PARTIAL DIFFERENTIAL\n1D6FB         ; ID_Compat_Math_Start # Sm       MATHEMATICAL ITALIC NABLA\n1D715         ; ID_Compat_Math_Start # Sm       MATHEMATICAL ITALIC PARTIAL DIFFERENTIAL\n1D735         ; ID_Compat_Math_Start # Sm       MATHEMATICAL BOLD ITALIC NABLA\n1D74F         ; ID_Compat_Math_Start # Sm       MATHEMATICAL BOLD ITALIC PARTIAL DIFFERENTIAL\n1D76F         ; ID_Compat_Math_Start # Sm       MATHEMATICAL SANS-SERIF BOLD NABLA\n1D789         ; ID_Compat_Math_Start # Sm       MATHEMATICAL SANS-SERIF BOLD PARTIAL DIFFERENTIAL\n1D7A9         ; ID_Compat_Math_Start # Sm       MATHEMATICAL SANS-SERIF BOLD ITALIC NABLA\n1D7C3         ; ID_Compat_Math_Start # Sm       MATHEMATICAL SANS-SERIF BOLD ITALIC PARTIAL DIFFERENTIAL\n\n# Total code points: 13\n```\n\n----------------------------------------\n\nTITLE: Defining Meroitic Hieroglyphs Unicode Block\nDESCRIPTION: Lists the Unicode code points for Meroitic Hieroglyphs, covering the range of letters and symbols with their categories.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/Scripts.txt#2025-04-21_snippet_66\n\nLANGUAGE: text\nCODE:\n```\n10980..1099F  ; Meroitic_Hieroglyphs # Lo  [32] MEROITIC HIEROGLYPHIC LETTER A..MEROITIC HIEROGLYPHIC SYMBOL VIDJ-2\n\n# Total code points: 32\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Code Blocks for Lepcha Script\nDESCRIPTION: Lists the Unicode code point ranges for the Lepcha script, categorizing characters by their types (Lo, Mc, Mn, Po, Nd) and providing character descriptions. Includes a total of 74 code points.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/Scripts.txt#2025-04-21_snippet_36\n\nLANGUAGE: unicode\nCODE:\n```\n1C00..1C23    ; Lepcha # Lo  [36] LEPCHA LETTER KA..LEPCHA LETTER A\n1C24..1C2B    ; Lepcha # Mc   [8] LEPCHA SUBJOINED LETTER YA..LEPCHA VOWEL SIGN UU\n1C2C..1C33    ; Lepcha # Mn   [8] LEPCHA VOWEL SIGN E..LEPCHA CONSONANT SIGN T\n1C34..1C35    ; Lepcha # Mc   [2] LEPCHA CONSONANT SIGN NYIN-DO..LEPCHA CONSONANT SIGN KANG\n1C36..1C37    ; Lepcha # Mn   [2] LEPCHA SIGN RAN..LEPCHA SIGN NUKTA\n1C3B..1C3F    ; Lepcha # Po   [5] LEPCHA PUNCTUATION TA-ROL..LEPCHA PUNCTUATION TSHOOK\n1C40..1C49    ; Lepcha # Nd  [10] LEPCHA DIGIT ZERO..LEPCHA DIGIT NINE\n1C4D..1C4F    ; Lepcha # Lo   [3] LEPCHA LETTER TTA..LEPCHA LETTER DDA\n\n# Total code points: 74\n```\n\n----------------------------------------\n\nTITLE: Unicode Variation Selector Characters Definition\nDESCRIPTION: Specifies code points for variation selector characters used to modify the appearance of preceding characters. Total of 260 code points.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/PropList.txt#2025-04-21_snippet_28\n\nLANGUAGE: unicode-data\nCODE:\n```\n180B..180D    ; Variation_Selector # Mn   [3] MONGOLIAN FREE VARIATION SELECTOR ONE..MONGOLIAN FREE VARIATION SELECTOR THREE\n180F          ; Variation_Selector # Mn       MONGOLIAN FREE VARIATION SELECTOR FOUR\n[...additional code points...]\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Block for Samaritan Script\nDESCRIPTION: This snippet defines the Unicode block for the Samaritan script, including letters, marks, modifiers, vowel signs, and punctuation. It specifies code point ranges and character types.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/Scripts.txt#2025-04-21_snippet_50\n\nLANGUAGE: Unicode\nCODE:\n```\n0800..0815    ; Samaritan # Lo  [22] SAMARITAN LETTER ALAF..SAMARITAN LETTER TAAF\n0816..0819    ; Samaritan # Mn   [4] SAMARITAN MARK IN..SAMARITAN MARK DAGESH\n081A          ; Samaritan # Lm       SAMARITAN MODIFIER LETTER EPENTHETIC YUT\n081B..0823    ; Samaritan # Mn   [9] SAMARITAN MARK EPENTHETIC YUT..SAMARITAN VOWEL SIGN A\n0824          ; Samaritan # Lm       SAMARITAN MODIFIER LETTER SHORT A\n0825..0827    ; Samaritan # Mn   [3] SAMARITAN VOWEL SIGN SHORT A..SAMARITAN VOWEL SIGN U\n0828          ; Samaritan # Lm       SAMARITAN MODIFIER LETTER I\n0829..082D    ; Samaritan # Mn   [5] SAMARITAN VOWEL SIGN LONG I..SAMARITAN MARK NEQUDAA\n0830..083E    ; Samaritan # Po  [15] SAMARITAN PUNCTUATION NEQUDAA..SAMARITAN PUNCTUATION ANNAAU\n\n# Total code points: 61\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Code Blocks for Vai Script\nDESCRIPTION: Lists the Unicode code point ranges for the Vai script, categorizing characters by their types (Lo, Lm, Po, Nd) and providing character descriptions. Includes a total of 300 code points.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/Scripts.txt#2025-04-21_snippet_38\n\nLANGUAGE: unicode\nCODE:\n```\nA500..A60B    ; Vai # Lo [268] VAI SYLLABLE EE..VAI SYLLABLE NG\nA60C          ; Vai # Lm       VAI SYLLABLE LENGTHENER\nA60D..A60F    ; Vai # Po   [3] VAI COMMA..VAI QUESTION MARK\nA610..A61F    ; Vai # Lo  [16] VAI SYLLABLE NDOLE FA..VAI SYMBOL JONG\nA620..A629    ; Vai # Nd  [10] VAI DIGIT ZERO..VAI DIGIT NINE\nA62A..A62B    ; Vai # Lo   [2] VAI SYLLABLE NDOLE MA..VAI SYLLABLE NDOLE DO\n\n# Total code points: 300\n```\n\n----------------------------------------\n\nTITLE: Devanagari Unicode Block Definition\nDESCRIPTION: Defines the Unicode codepoint ranges for Devanagari script characters including letters, vowel signs, digits and special marks. Total codepoints: 164\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/Scripts.txt#2025-04-21_snippet_11\n\nLANGUAGE: Unicode\nCODE:\n```\n0900..0902    ; Devanagari # Mn   [3] DEVANAGARI SIGN INVERTED CANDRABINDU..DEVANAGARI SIGN ANUSVARA\n0903          ; Devanagari # Mc       DEVANAGARI SIGN VISARGA\n[...remaining Devanagari ranges...]\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Prepended Concatenation Mark Characters\nDESCRIPTION: This snippet defines Unicode code points for Prepended Concatenation Mark characters. Each line specifies a range or single code point, its category (Prepended_Concatenation_Mark), and a brief description of the character.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/PropList.txt#2025-04-21_snippet_32\n\nLANGUAGE: Unicode\nCODE:\n```\n0600..0605    ; Prepended_Concatenation_Mark # Cf   [6] ARABIC NUMBER SIGN..ARABIC NUMBER MARK ABOVE\n06DD          ; Prepended_Concatenation_Mark # Cf       ARABIC END OF AYAH\n070F          ; Prepended_Concatenation_Mark # Cf       SYRIAC ABBREVIATION MARK\n0890..0891    ; Prepended_Concatenation_Mark # Cf   [2] ARABIC POUND MARK ABOVE..ARABIC PIASTRE MARK ABOVE\n08E2          ; Prepended_Concatenation_Mark # Cf       ARABIC DISPUTED END OF AYAH\n110BD         ; Prepended_Concatenation_Mark # Cf       KAITHI NUMBER SIGN\n110CD         ; Prepended_Concatenation_Mark # Cf       KAITHI NUMBER SIGN ABOVE\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Block for Imperial Aramaic Script\nDESCRIPTION: This snippet defines the Unicode block for the Imperial Aramaic script, including letters, a section sign, and numbers. It specifies code point ranges and character types.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/Scripts.txt#2025-04-21_snippet_55\n\nLANGUAGE: Unicode\nCODE:\n```\n10840..10855  ; Imperial_Aramaic # Lo  [22] IMPERIAL ARAMAIC LETTER ALEPH..IMPERIAL ARAMAIC LETTER TAW\n10857         ; Imperial_Aramaic # Po       IMPERIAL ARAMAIC SECTION SIGN\n10858..1085F  ; Imperial_Aramaic # No   [8] IMPERIAL ARAMAIC NUMBER ONE..IMPERIAL ARAMAIC NUMBER TEN THOUSAND\n\n# Total code points: 31\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Code Blocks for Kayah Li Script\nDESCRIPTION: Lists the Unicode code point ranges for the Kayah Li script, categorizing characters by their types (Nd, Lo, Mn, Po) and providing character descriptions. Includes a total of 47 code points.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/Scripts.txt#2025-04-21_snippet_40\n\nLANGUAGE: unicode\nCODE:\n```\nA900..A909    ; Kayah_Li # Nd  [10] KAYAH LI DIGIT ZERO..KAYAH LI DIGIT NINE\nA90A..A925    ; Kayah_Li # Lo  [28] KAYAH LI LETTER KA..KAYAH LI LETTER OO\nA926..A92D    ; Kayah_Li # Mn   [8] KAYAH LI VOWEL UE..KAYAH LI TONE CALYA PLOPHU\nA92F          ; Kayah_Li # Po       KAYAH LI SIGN SHYA\n\n# Total code points: 47\n```\n\n----------------------------------------\n\nTITLE: Defining Bidi_Class Property Values in Unicode\nDESCRIPTION: Lists the aliases for Bidi_Class (bc) property values, defining various bidirectional categories used in the Unicode Bidirectional Algorithm.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/PropertyValueAliases.txt#2025-04-21_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nbc ; AL                               ; Arabic_Letter\nbc ; AN                               ; Arabic_Number\nbc ; B                                ; Paragraph_Separator\nbc ; BN                               ; Boundary_Neutral\nbc ; CS                               ; Common_Separator\nbc ; EN                               ; European_Number\nbc ; ES                               ; European_Separator\nbc ; ET                               ; European_Terminator\nbc ; FSI                              ; First_Strong_Isolate\nbc ; L                                ; Left_To_Right\nbc ; LRE                              ; Left_To_Right_Embedding\nbc ; LRI                              ; Left_To_Right_Isolate\nbc ; LRO                              ; Left_To_Right_Override\nbc ; NSM                              ; Nonspacing_Mark\nbc ; ON                               ; Other_Neutral\nbc ; PDF                              ; Pop_Directional_Format\nbc ; PDI                              ; Pop_Directional_Isolate\nbc ; R                                ; Right_To_Left\nbc ; RLE                              ; Right_To_Left_Embedding\nbc ; RLI                              ; Right_To_Left_Isolate\nbc ; RLO                              ; Right_To_Left_Override\nbc ; S                                ; Segment_Separator\nbc ; WS                               ; White_Space\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Characters as Not_XID\nDESCRIPTION: This snippet shows the format used to define Unicode characters or ranges as Not_XID. Each line includes the code point(s), the Not_XID designation, the Unicode version, and the character description.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/IdentifierType.txt#2025-04-21_snippet_29\n\nLANGUAGE: Unicode\nCODE:\n```\n17D9..17DB    ; Not_XID                        # 3.0    [3] KHMER SIGN PHNAEK MUAN..KHMER CURRENCY SYMBOL RIEL\n17F0..17F9    ; Not_XID                        # 4.0   [10] KHMER SYMBOL LEK ATTAK SON..KHMER SYMBOL LEK ATTAK PRAM-BUON\n19E0..19FF    ; Not_XID                        # 4.0   [32] KHMER SYMBOL PATHAMASAT..KHMER SYMBOL DAP-PRAM ROC\n1ABE          ; Not_XID                        # 7.0        COMBINING PARENTHESES OVERLAY\n```\n\n----------------------------------------\n\nTITLE: Elixir Map Matching\nDESCRIPTION: Explains map matching in Elixir, where a map pattern matches any map that contains at least the keys specified in the pattern (subset match). Examples show both successful matches and a MatchError when a key is missing.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/references/patterns-and-guards.md#2025-04-21_snippet_14\n\nLANGUAGE: elixir\nCODE:\n```\niex> %{name: name} = %{name: \"meg\"}\n%{name: \"meg\"}\niex> name\n\"meg\"\n\niex> %{name: name} = %{name: \"meg\", age: 23}\n%{age: 23, name: \"meg\"}\niex> name\n\"meg\"\n\niex> %{name: name, age: age} = %{name: \"meg\"}\n** (MatchError) no match of right hand side value: %{name: \"meg\"}\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Block for Meetei Mayek Script\nDESCRIPTION: This snippet defines the Unicode block for the Meetei Mayek script, including letters, vowel signs, punctuation marks, modifiers, and digits. It specifies code point ranges and character types.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/Scripts.txt#2025-04-21_snippet_54\n\nLANGUAGE: Unicode\nCODE:\n```\nAAE0..AAEA    ; Meetei_Mayek # Lo  [11] MEETEI MAYEK LETTER E..MEETEI MAYEK LETTER SSA\nAAEB          ; Meetei_Mayek # Mc       MEETEI MAYEK VOWEL SIGN II\nAAEC..AAED    ; Meetei_Mayek # Mn   [2] MEETEI MAYEK VOWEL SIGN UU..MEETEI MAYEK VOWEL SIGN AAI\nAAEE..AAEF    ; Meetei_Mayek # Mc   [2] MEETEI MAYEK VOWEL SIGN AU..MEETEI MAYEK VOWEL SIGN AAU\nAAF0..AAF1    ; Meetei_Mayek # Po   [2] MEETEI MAYEK CHEIKHAN..MEETEI MAYEK AHANG KHUDAM\nAAF2          ; Meetei_Mayek # Lo       MEETEI MAYEK ANJI\nAAF3..AAF4    ; Meetei_Mayek # Lm   [2] MEETEI MAYEK SYLLABLE REPETITION MARK..MEETEI MAYEK WORD REPETITION MARK\nAAF5          ; Meetei_Mayek # Mc       MEETEI MAYEK VOWEL SIGN VISARGA\nAAF6          ; Meetei_Mayek # Mn       MEETEI MAYEK VIRAMA\nABC0..ABE2    ; Meetei_Mayek # Lo  [35] MEETEI MAYEK LETTER KOK..MEETEI MAYEK LETTER I LONSUM\nABE3..ABE4    ; Meetei_Mayek # Mc   [2] MEETEI MAYEK VOWEL SIGN ONAP..MEETEI MAYEK VOWEL SIGN INAP\nABE5          ; Meetei_Mayek # Mn       MEETEI MAYEK VOWEL SIGN ANAP\nABE6..ABE7    ; Meetei_Mayek # Mc   [2] MEETEI MAYEK VOWEL SIGN YENAP..MEETEI MAYEK VOWEL SIGN SOUNAP\nABE8          ; Meetei_Mayek # Mn       MEETEI MAYEK VOWEL SIGN UNAP\nABE9..ABEA    ; Meetei_Mayek # Mc   [2] MEETEI MAYEK VOWEL SIGN CHEINAP..MEETEI MAYEK VOWEL SIGN NUNG\nABEB          ; Meetei_Mayek # Po       MEETEI MAYEK CHEIKHEI\nABEC          ; Meetei_Mayek # Mc       MEETEI MAYEK LUM IYEK\nABED          ; Meetei_Mayek # Mn       MEETEI MAYEK APUN IYEK\nABF0..ABF9    ; Meetei_Mayek # Nd  [10] MEETEI MAYEK DIGIT ZERO..MEETEI MAYEK DIGIT NINE\n\n# Total code points: 79\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Character Ranges for Telugu Script\nDESCRIPTION: This snippet defines the Unicode character ranges for the Telugu script, including various letter types, vowel signs, digits, and special symbols.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/Scripts.txt#2025-04-21_snippet_17\n\nLANGUAGE: Unicode\nCODE:\n```\n0C00          ; Telugu # Mn       TELUGU SIGN COMBINING CANDRABINDU ABOVE\n0C01..0C03    ; Telugu # Mc   [3] TELUGU SIGN CANDRABINDU..TELUGU SIGN VISARGA\n0C04          ; Telugu # Mn       TELUGU SIGN COMBINING ANUSVARA ABOVE\n0C05..0C0C    ; Telugu # Lo   [8] TELUGU LETTER A..TELUGU LETTER VOCALIC L\n0C0E..0C10    ; Telugu # Lo   [3] TELUGU LETTER E..TELUGU LETTER AI\n0C12..0C28    ; Telugu # Lo  [23] TELUGU LETTER O..TELUGU LETTER NA\n0C2A..0C39    ; Telugu # Lo  [16] TELUGU LETTER PA..TELUGU LETTER HA\n0C3C          ; Telugu # Mn       TELUGU SIGN NUKTA\n0C3D          ; Telugu # Lo       TELUGU SIGN AVAGRAHA\n0C3E..0C40    ; Telugu # Mn   [3] TELUGU VOWEL SIGN AA..TELUGU VOWEL SIGN II\n0C41..0C44    ; Telugu # Mc   [4] TELUGU VOWEL SIGN U..TELUGU VOWEL SIGN VOCALIC RR\n0C46..0C48    ; Telugu # Mn   [3] TELUGU VOWEL SIGN E..TELUGU VOWEL SIGN AI\n0C4A..0C4D    ; Telugu # Mn   [4] TELUGU VOWEL SIGN O..TELUGU SIGN VIRAMA\n0C55..0C56    ; Telugu # Mn   [2] TELUGU LENGTH MARK..TELUGU AI LENGTH MARK\n0C58..0C5A    ; Telugu # Lo   [3] TELUGU LETTER TSA..TELUGU LETTER RRRA\n0C5D          ; Telugu # Lo       TELUGU LETTER NAKAARA POLLU\n0C60..0C61    ; Telugu # Lo   [2] TELUGU LETTER VOCALIC RR..TELUGU LETTER VOCALIC LL\n0C62..0C63    ; Telugu # Mn   [2] TELUGU VOWEL SIGN VOCALIC L..TELUGU VOWEL SIGN VOCALIC LL\n0C66..0C6F    ; Telugu # Nd  [10] TELUGU DIGIT ZERO..TELUGU DIGIT NINE\n0C77          ; Telugu # Po       TELUGU SIGN SIDDHAM\n0C78..0C7E    ; Telugu # No   [7] TELUGU FRACTION DIGIT ZERO FOR ODD POWERS OF FOUR..TELUGU FRACTION DIGIT THREE FOR EVEN POWERS OF FOUR\n0C7F          ; Telugu # So       TELUGU SIGN TUUMU\n```\n\n----------------------------------------\n\nTITLE: Defining Bidi_Control Property Values in Unicode\nDESCRIPTION: Specifies the aliases for Bidi_Control (Bidi_C) property values. It defines 'N' (No) and 'Y' (Yes) as the primary aliases, with additional aliases 'F' (False) and 'T' (True).\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/PropertyValueAliases.txt#2025-04-21_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nBidi_C; N                             ; No                               ; F                                ; False\nBidi_C; Y                             ; Yes                              ; T                                ; True\n```\n\n----------------------------------------\n\nTITLE: Elixir Tuple Matching\nDESCRIPTION: Demonstrates tuple matching in Elixir. Tuples must have the same size and matching elements to successfully match. Examples showcase both successful matches and MatchErrors due to size and element mismatches.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/references/patterns-and-guards.md#2025-04-21_snippet_9\n\nLANGUAGE: elixir\nCODE:\n```\niex> {:ok, integer} = {:ok, 13}\n{:ok, 13}\n\n# won't match due to different size\niex> {:ok, integer} = {:ok, 11, 13}\n** (MatchError) no match of right hand side value: {:ok, 11, 13}\n\n# won't match due to mismatch on first element\niex> {:ok, binary} = {:error, :enoent}\n** (MatchError) no match of right hand side value: {:error, :enoent}\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Block for Old Turkic Script\nDESCRIPTION: This snippet defines the Unicode block for the Old Turkic script, including letters. It specifies the code point range and character type.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/Scripts.txt#2025-04-21_snippet_59\n\nLANGUAGE: Unicode\nCODE:\n```\n10C00..10C48  ; Old_Turkic # Lo  [73] OLD TURKIC LETTER ORKHON A..OLD TURKIC LETTER ORKHON BASH\n\n# Total code points: 73\n```\n\n----------------------------------------\n\nTITLE: Canonical Combining Class Property Definitions\nDESCRIPTION: Defines the canonical combining classes (ccc) for Unicode characters, specifying how characters combine with surrounding characters for normalization. Values range from 0 to 240 with specific meanings for each class.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/PropertyValueAliases.txt#2025-04-21_snippet_8\n\nLANGUAGE: properties\nCODE:\n```\nccc;   0; NR                         ; Not_Reordered\nccc;   1; OV                         ; Overlay\nccc;   6; HANR                       ; Han_Reading\nccc;   7; NK                         ; Nukta\nccc;   8; KV                         ; Kana_Voicing\nccc;   9; VR                         ; Virama\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Character Ranges for Kirat Rai Script\nDESCRIPTION: This snippet defines the Unicode character ranges for the Kirat Rai script. It includes modifier letters (Lm), letter characters (Lo), punctuation (Po), and numeric digits (Nd).\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/Scripts.txt#2025-04-21_snippet_103\n\nLANGUAGE: Unicode\nCODE:\n```\n16D40..16D42  ; Kirat_Rai # Lm   [3] KIRAT RAI SIGN ANUSVARA..KIRAT RAI SIGN VISARGA\n16D43..16D6A  ; Kirat_Rai # Lo  [40] KIRAT RAI LETTER A..KIRAT RAI VOWEL SIGN AU\n16D6B..16D6C  ; Kirat_Rai # Lm   [2] KIRAT RAI SIGN VIRAMA..KIRAT RAI SIGN SAAT\n16D6D..16D6F  ; Kirat_Rai # Po   [3] KIRAT RAI SIGN YUPI..KIRAT RAI DOUBLE DANDA\n16D70..16D79  ; Kirat_Rai # Nd  [10] KIRAT RAI DIGIT ZERO..KIRAT RAI DIGIT NINE\n\n# Total code points: 58\n```\n\n----------------------------------------\n\nTITLE: Unicode Pattern White Space Characters Definition\nDESCRIPTION: Defines code points for various types of whitespace characters including spaces, line breaks, and directional marks. Total of 11 code points.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/PropList.txt#2025-04-21_snippet_29\n\nLANGUAGE: unicode-data\nCODE:\n```\n0009..000D    ; Pattern_White_Space # Cc   [5] <control-0009>..<control-000D>\n0020          ; Pattern_White_Space # Zs       SPACE\n[...additional code points...]\n```\n\n----------------------------------------\n\nTITLE: Defining White_Space Characters in Unicode\nDESCRIPTION: This snippet lists Unicode code points classified as White_Space. It includes various space characters and control characters used for whitespace purposes.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/PropList.txt#2025-04-21_snippet_0\n\nLANGUAGE: Unicode\nCODE:\n```\n0009..000D    ; White_Space # Cc   [5] <control-0009>..<control-000D>\n0020          ; White_Space # Zs       SPACE\n0085          ; White_Space # Cc       <control-0085>\n00A0          ; White_Space # Zs       NO-BREAK SPACE\n1680          ; White_Space # Zs       OGHAM SPACE MARK\n2000..200A    ; White_Space # Zs  [11] EN QUAD..HAIR SPACE\n2028          ; White_Space # Zl       LINE SEPARATOR\n2029          ; White_Space # Zp       PARAGRAPH SEPARATOR\n202F          ; White_Space # Zs       NARROW NO-BREAK SPACE\n205F          ; White_Space # Zs       MEDIUM MATHEMATICAL SPACE\n3000          ; White_Space # Zs       IDEOGRAPHIC SPACE\n```\n\n----------------------------------------\n\nTITLE: Defining Mandaic Unicode Block\nDESCRIPTION: Provides the Unicode code points for the Mandaic script, including letters and diacritical marks with their respective categories.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/Scripts.txt#2025-04-21_snippet_63\n\nLANGUAGE: text\nCODE:\n```\n0840..0858    ; Mandaic # Lo  [25] MANDAIC LETTER HALQA..MANDAIC LETTER AIN\n0859..085B    ; Mandaic # Mn   [3] MANDAIC AFFRICATION MARK..MANDAIC GEMINATION MARK\n085E          ; Mandaic # Po       MANDAIC PUNCTUATION\n\n# Total code points: 29\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Character Ranges for Sinhala Script\nDESCRIPTION: This snippet defines the Unicode character ranges for the Sinhala script, including various letter types, vowel signs, digits, and special symbols.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/Scripts.txt#2025-04-21_snippet_20\n\nLANGUAGE: Unicode\nCODE:\n```\n0D81          ; Sinhala # Mn       SINHALA SIGN CANDRABINDU\n0D82..0D83    ; Sinhala # Mc   [2] SINHALA SIGN ANUSVARAYA..SINHALA SIGN VISARGAYA\n0D85..0D96    ; Sinhala # Lo  [18] SINHALA LETTER AYANNA..SINHALA LETTER AUYANNA\n0D9A..0DB1    ; Sinhala # Lo  [24] SINHALA LETTER ALPAPRAANA KAYANNA..SINHALA LETTER DANTAJA NAYANNA\n0DB3..0DBB    ; Sinhala # Lo   [9] SINHALA LETTER SANYAKA DAYANNA..SINHALA LETTER RAYANNA\n0DBD          ; Sinhala # Lo       SINHALA LETTER DANTAJA LAYANNA\n0DC0..0DC6    ; Sinhala # Lo   [7] SINHALA LETTER VAYANNA..SINHALA LETTER FAYANNA\n0DCA          ; Sinhala # Mn       SINHALA SIGN AL-LAKUNA\n0DCF..0DD1    ; Sinhala # Mc   [3] SINHALA VOWEL SIGN AELA-PILLA..SINHALA VOWEL SIGN DIGA AEDA-PILLA\n0DD2..0DD4    ; Sinhala # Mn   [3] SINHALA VOWEL SIGN KETTI IS-PILLA..SINHALA VOWEL SIGN KETTI PAA-PILLA\n0DD6          ; Sinhala # Mn       SINHALA VOWEL SIGN DIGA PAA-PILLA\n0DD8..0DDF    ; Sinhala # Mc   [8] SINHALA VOWEL SIGN GAETTA-PILLA..SINHALA VOWEL SIGN GAYANUKITTA\n0DE6..0DEF    ; Sinhala # Nd  [10] SINHALA LITH DIGIT ZERO..SINHALA LITH DIGIT NINE\n0DF2..0DF3    ; Sinhala # Mc   [2] SINHALA VOWEL SIGN DIGA GAETTA-PILLA..SINHALA VOWEL SIGN DIGA GAYANUKITTA\n0DF4          ; Sinhala # Po       SINHALA PUNCTUATION KUNDDALIYA\n111E1..111F4  ; Sinhala # No  [20] SINHALA ARCHAIC DIGIT ONE..SINHALA ARCHAIC NUMBER ONE THOUSAND\n```\n\n----------------------------------------\n\nTITLE: Boolean Unicode Properties\nDESCRIPTION: Defines various boolean character properties like Case_Ignorable, Cased, Changes_When_Casefolded, etc. Each property has possible values of Yes/No or True/False with their abbreviations.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/PropertyValueAliases.txt#2025-04-21_snippet_9\n\nLANGUAGE: properties\nCODE:\n```\nCI ; N                                ; No                               ; F                                ; False\nCI ; Y                                ; Yes                              ; T                                ; True\n\nCased; N                              ; No                               ; F                                ; False\nCased; Y                              ; Yes                              ; T                                ; True\n```\n\n----------------------------------------\n\nTITLE: Defining Nyiakeng Puachue Hmong Script Unicode Block\nDESCRIPTION: Defines the Unicode code point ranges for the Nyiakeng Puachue Hmong script. Includes letters, tone marks, signs, digits, and logograms with their corresponding Unicode character categories.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/Scripts.txt#2025-04-21_snippet_88\n\nLANGUAGE: unicode\nCODE:\n```\n1E100..1E12C  ; Nyiakeng_Puachue_Hmong # Lo  [45] NYIAKENG PUACHUE HMONG LETTER MA..NYIAKENG PUACHUE HMONG LETTER W\n1E130..1E136  ; Nyiakeng_Puachue_Hmong # Mn   [7] NYIAKENG PUACHUE HMONG TONE-B..NYIAKENG PUACHUE HMONG TONE-D\n1E137..1E13D  ; Nyiakeng_Puachue_Hmong # Lm   [7] NYIAKENG PUACHUE HMONG SIGN FOR PERSON..NYIAKENG PUACHUE HMONG SYLLABLE LENGTHENER\n1E140..1E149  ; Nyiakeng_Puachue_Hmong # Nd  [10] NYIAKENG PUACHUE HMONG DIGIT ZERO..NYIAKENG PUACHUE HMONG DIGIT NINE\n1E14E         ; Nyiakeng_Puachue_Hmong # Lo       NYIAKENG PUACHUE HMONG LOGOGRAM NYAJ\n1E14F         ; Nyiakeng_Puachue_Hmong # So       NYIAKENG PUACHUE HMONG CIRCLED CA\n\n# Total code points: 71\n```\n\n----------------------------------------\n\nTITLE: Defining Takri Unicode Block\nDESCRIPTION: Outlines the Unicode code points for the Takri script, including letters, vowel signs, digits, and other marks with their respective categories.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/Scripts.txt#2025-04-21_snippet_70\n\nLANGUAGE: text\nCODE:\n```\n11680..116AA  ; Takri # Lo  [43] TAKRI LETTER A..TAKRI LETTER RRA\n116AB         ; Takri # Mn       TAKRI SIGN ANUSVARA\n116AC         ; Takri # Mc       TAKRI SIGN VISARGA\n116AD         ; Takri # Mn       TAKRI VOWEL SIGN AA\n116AE..116AF  ; Takri # Mc   [2] TAKRI VOWEL SIGN I..TAKRI VOWEL SIGN II\n116B0..116B5  ; Takri # Mn   [6] TAKRI VOWEL SIGN U..TAKRI VOWEL SIGN AU\n116B6         ; Takri # Mc       TAKRI SIGN VIRAMA\n116B7         ; Takri # Mn       TAKRI SIGN NUKTA\n116B8         ; Takri # Lo       TAKRI LETTER ARCHAIC KHA\n116B9         ; Takri # Po       TAKRI ABBREVIATION SIGN\n116C0..116C9  ; Takri # Nd  [10] TAKRI DIGIT ZERO..TAKRI DIGIT NINE\n\n# Total code points: 68\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Character Properties and Values\nDESCRIPTION: This snippet defines various Unicode character properties and their possible values. It includes properties like Expands_On_NFKC, General_Category, Grapheme_Cluster_Break, and others. Each property is listed with its abbreviation, full name, and possible values.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/PropertyValueAliases.txt#2025-04-21_snippet_11\n\nLANGUAGE: Unicode\nCODE:\n```\n# Expands_On_NFKC (XO_NFKC)\n\nXO_NFKC; N                            ; No                               ; F                                ; False\nXO_NFKC; Y                            ; Yes                              ; T                                ; True\n\n# Expands_On_NFKD (XO_NFKD)\n\nXO_NFKD; N                            ; No                               ; F                                ; False\nXO_NFKD; Y                            ; Yes                              ; T                                ; True\n\n# Extended_Pictographic (ExtPict)\n\nExtPict; N                            ; No                               ; F                                ; False\nExtPict; Y                            ; Yes                              ; T                                ; True\n\n# Extender (Ext)\n\nExt; N                                ; No                               ; F                                ; False\nExt; Y                                ; Yes                              ; T                                ; True\n\n# FC_NFKC_Closure (FC_NFKC)\n\n# @missing: 0000..10FFFF; FC_NFKC_Closure; <code point>\n\n# Full_Composition_Exclusion (Comp_Ex)\n\nComp_Ex; N                            ; No                               ; F                                ; False\nComp_Ex; Y                            ; Yes                              ; T                                ; True\n\n# General_Category (gc)\n\ngc ; C                                ; Other                            # Cc | Cf | Cn | Co | Cs\ngc ; Cc                               ; Control                          ; cntrl\ngc ; Cf                               ; Format\ngc ; Cn                               ; Unassigned\ngc ; Co                               ; Private_Use\ngc ; Cs                               ; Surrogate\ngc ; L                                ; Letter                           # Ll | Lm | Lo | Lt | Lu\ngc ; LC                               ; Cased_Letter                     # Ll | Lt | Lu\ngc ; Ll                               ; Lowercase_Letter\ngc ; Lm                               ; Modifier_Letter\ngc ; Lo                               ; Other_Letter\ngc ; Lt                               ; Titlecase_Letter\ngc ; Lu                               ; Uppercase_Letter\ngc ; M                                ; Mark                             ; Combining_Mark                   # Mc | Me | Mn\ngc ; Mc                               ; Spacing_Mark\ngc ; Me                               ; Enclosing_Mark\ngc ; Mn                               ; Nonspacing_Mark\ngc ; N                                ; Number                           # Nd | Nl | No\ngc ; Nd                               ; Decimal_Number                   ; digit\ngc ; Nl                               ; Letter_Number\ngc ; No                               ; Other_Number\ngc ; P                                ; Punctuation                      ; punct                            # Pc | Pd | Pe | Pf | Pi | Po | Ps\ngc ; Pc                               ; Connector_Punctuation\ngc ; Pd                               ; Dash_Punctuation\ngc ; Pe                               ; Close_Punctuation\ngc ; Pf                               ; Final_Punctuation\ngc ; Pi                               ; Initial_Punctuation\ngc ; Po                               ; Other_Punctuation\ngc ; Ps                               ; Open_Punctuation\ngc ; S                                ; Symbol                           # Sc | Sk | Sm | So\ngc ; Sc                               ; Currency_Symbol\ngc ; Sk                               ; Modifier_Symbol\ngc ; Sm                               ; Math_Symbol\ngc ; So                               ; Other_Symbol\ngc ; Z                                ; Separator                        # Zl | Zp | Zs\ngc ; Zl                               ; Line_Separator\ngc ; Zp                               ; Paragraph_Separator\ngc ; Zs                               ; Space_Separator\n# @missing: 0000..10FFFF; General_Category; Unassigned\n\n# Grapheme_Base (Gr_Base)\n\nGr_Base; N                            ; No                               ; F                                ; False\nGr_Base; Y                            ; Yes                              ; T                                ; True\n\n# Grapheme_Cluster_Break (GCB)\n\nGCB; CN                               ; Control\nGCB; CR                               ; CR\nGCB; EB                               ; E_Base\nGCB; EBG                              ; E_Base_GAZ\nGCB; EM                               ; E_Modifier\nGCB; EX                               ; Extend\nGCB; GAZ                              ; Glue_After_Zwj\nGCB; L                                ; L\nGCB; LF                               ; LF\nGCB; LV                               ; LV\nGCB; LVT                              ; LVT\nGCB; PP                               ; Prepend\nGCB; RI                               ; Regional_Indicator\nGCB; SM                               ; SpacingMark\nGCB; T                                ; T\nGCB; V                                ; V\nGCB; XX                               ; Other\nGCB; ZWJ                              ; ZWJ\n\n# Grapheme_Extend (Gr_Ext)\n\nGr_Ext; N                             ; No                               ; F                                ; False\nGr_Ext; Y                             ; Yes                              ; T                                ; True\n\n# Grapheme_Link (Gr_Link)\n\nGr_Link; N                            ; No                               ; F                                ; False\nGr_Link; Y                            ; Yes                              ; T                                ; True\n\n# Hangul_Syllable_Type (hst)\n\nhst; L                                ; Leading_Jamo\nhst; LV                               ; LV_Syllable\nhst; LVT                              ; LVT_Syllable\nhst; NA                               ; Not_Applicable\nhst; T                                ; Trailing_Jamo\nhst; V                                ; Vowel_Jamo\n\n# Hex_Digit (Hex)\n\nHex; N                                ; No                               ; F                                ; False\nHex; Y                                ; Yes                              ; T                                ; True\n\n# Hyphen (Hyphen)\n\nHyphen; N                             ; No                               ; F                                ; False\nHyphen; Y                             ; Yes                              ; T                                ; True\n\n# IDS_Binary_Operator (IDSB)\n\nIDSB; N                               ; No                               ; F                                ; False\nIDSB; Y                               ; Yes                              ; T                                ; True\n\n# IDS_Trinary_Operator (IDST)\n\nIDST; N                               ; No                               ; F                                ; False\nIDST; Y                               ; Yes                              ; T                                ; True\n\n# IDS_Unary_Operator (IDSU)\n\nIDSU; N                               ; No                               ; F                                ; False\nIDSU; Y                               ; Yes                              ; T                                ; True\n\n# ID_Compat_Math_Continue (ID_Compat_Math_Continue)\n\nID_Compat_Math_Continue; N            ; No                               ; F                                ; False\nID_Compat_Math_Continue; Y            ; Yes                              ; T                                ; True\n\n# ID_Compat_Math_Start (ID_Compat_Math_Start)\n\nID_Compat_Math_Start; N               ; No                               ; F                                ; False\nID_Compat_Math_Start; Y               ; Yes                              ; T                                ; True\n\n# ID_Continue (IDC)\n\nIDC; N                                ; No                               ; F                                ; False\nIDC; Y                                ; Yes                              ; T                                ; True\n\n# ID_Start (IDS)\n\nIDS; N                                ; No                               ; F                                ; False\nIDS; Y                                ; Yes                              ; T                                ; True\n\n# ISO_Comment (isc)\n\n# @missing: 0000..10FFFF; ISO_Comment; <none>\n\n# Ideographic (Ideo)\n\nIdeo; N                               ; No                               ; F                                ; False\nIdeo; Y                               ; Yes                              ; T                                ; True\n\n# Indic_Conjunct_Break (InCB)\n\nInCB; Consonant                       ; Consonant\nInCB; Extend                          ; Extend\nInCB; Linker                          ; Linker\nInCB; None                            ; None\n\n# Indic_Positional_Category (InPC)\n\nInPC; Bottom                          ; Bottom\nInPC; Bottom_And_Left                 ; Bottom_And_Left\nInPC; Bottom_And_Right                ; Bottom_And_Right\nInPC; Left                            ; Left\nInPC; Left_And_Right                  ; Left_And_Right\nInPC; NA                              ; NA\nInPC; Overstruck                      ; Overstruck\nInPC; Right                           ; Right\nInPC; Top                             ; Top\nInPC; Top_And_Bottom                  ; Top_And_Bottom\nInPC; Top_And_Bottom_And_Left         ; Top_And_Bottom_And_Left\nInPC; Top_And_Bottom_And_Right        ; Top_And_Bottom_And_Right\nInPC; Top_And_Left                    ; Top_And_Left\nInPC; Top_And_Left_And_Right          ; Top_And_Left_And_Right\nInPC; Top_And_Right                   ; Top_And_Right\nInPC; Visual_Order_Left               ; Visual_Order_Left\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Block for Inscriptional Pahlavi Script\nDESCRIPTION: This snippet defines the Unicode block for the Inscriptional Pahlavi script, including letters and numbers. It specifies code point ranges and character types.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/Scripts.txt#2025-04-21_snippet_58\n\nLANGUAGE: Unicode\nCODE:\n```\n10B60..10B72  ; Inscriptional_Pahlavi # Lo  [19] INSCRIPTIONAL PAHLAVI LETTER ALEPH..INSCRIPTIONAL PAHLAVI LETTER TAW\n10B78..10B7F  ; Inscriptional_Pahlavi # No   [8] INSCRIPTIONAL PAHLAVI NUMBER ONE..INSCRIPTIONAL PAHLAVI NUMBER ONE THOUSAND\n\n# Total code points: 27\n```\n\n----------------------------------------\n\nTITLE: Defining ASCII_Hex_Digit Property Values in Unicode\nDESCRIPTION: Specifies the aliases for ASCII_Hex_Digit (AHex) property values. It defines 'N' (No) and 'Y' (Yes) as the primary aliases, with additional aliases 'F' (False) and 'T' (True).\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/PropertyValueAliases.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nAHex; N                               ; No                               ; F                                ; False\nAHex; Y                               ; Yes                              ; T                                ; True\n```\n\n----------------------------------------\n\nTITLE: Defining Bassa Vah Unicode Block\nDESCRIPTION: Provides the Unicode code points for the Bassa Vah script, including letters, combining tone marks, and punctuation with their respective categories.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/Scripts.txt#2025-04-21_snippet_72\n\nLANGUAGE: text\nCODE:\n```\n16AD0..16AED  ; Bassa_Vah # Lo  [30] BASSA VAH LETTER ENNI..BASSA VAH LETTER I\n16AF0..16AF4  ; Bassa_Vah # Mn   [5] BASSA VAH COMBINING HIGH TONE..BASSA VAH COMBINING HIGH-LOW TONE\n16AF5         ; Bassa_Vah # Po       BASSA VAH FULL STOP\n\n# Total code points: 36\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Character Ranges for Vithkuqi Script\nDESCRIPTION: This snippet defines the Unicode character ranges for the Vithkuqi script. It includes 70 letter characters (L&) for both capital and small letters.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/Scripts.txt#2025-04-21_snippet_98\n\nLANGUAGE: Unicode\nCODE:\n```\n10570..1057A  ; Vithkuqi # L&  [11] VITHKUQI CAPITAL LETTER A..VITHKUQI CAPITAL LETTER GA\n1057C..1058A  ; Vithkuqi # L&  [15] VITHKUQI CAPITAL LETTER HA..VITHKUQI CAPITAL LETTER RE\n1058C..10592  ; Vithkuqi # L&   [7] VITHKUQI CAPITAL LETTER SE..VITHKUQI CAPITAL LETTER XE\n10594..10595  ; Vithkuqi # L&   [2] VITHKUQI CAPITAL LETTER Y..VITHKUQI CAPITAL LETTER ZE\n10597..105A1  ; Vithkuqi # L&  [11] VITHKUQI SMALL LETTER A..VITHKUQI SMALL LETTER GA\n105A3..105B1  ; Vithkuqi # L&  [15] VITHKUQI SMALL LETTER HA..VITHKUQI SMALL LETTER RE\n105B3..105B9  ; Vithkuqi # L&   [7] VITHKUQI SMALL LETTER SE..VITHKUQI SMALL LETTER XE\n105BB..105BC  ; Vithkuqi # L&   [2] VITHKUQI SMALL LETTER Y..VITHKUQI SMALL LETTER ZE\n\n# Total code points: 70\n```\n\n----------------------------------------\n\nTITLE: Myanmar Script Unicode Ranges\nDESCRIPTION: Defines the Unicode code point ranges for Myanmar script characters including letters, vowel signs, tone marks and digits. Covers 243 total code points from 1000 to 116E3.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/Scripts.txt#2025-04-21_snippet_24\n\nLANGUAGE: Unicode\nCODE:\n```\n1000..102A    ; Myanmar # Lo  [43] MYANMAR LETTER KA..MYANMAR LETTER AU\n102B..102C    ; Myanmar # Mc   [2] MYANMAR VOWEL SIGN TALL AA..MYANMAR VOWEL SIGN AA\n102D..1030    ; Myanmar # Mn   [4] MYANMAR VOWEL SIGN I..MYANMAR VOWEL SIGN UU\n```\n\n----------------------------------------\n\nTITLE: Sentence_Break (SB) Property Mapping in Unicode\nDESCRIPTION: A mapping of Sentence_Break (SB) property codes to their full names in Unicode. This property is used to determine sentence boundaries in text.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/PropertyValueAliases.txt#2025-04-21_snippet_21\n\nLANGUAGE: plaintext\nCODE:\n```\n# Sentence_Break (SB)\n\nSB ; AT                               ; ATerm\nSB ; CL                               ; Close\nSB ; CR                               ; CR\nSB ; EX                               ; Extend\nSB ; FO                               ; Format\nSB ; LE                               ; OLetter\nSB ; LF                               ; LF\nSB ; LO                               ; Lower\nSB ; NU                               ; Numeric\nSB ; SC                               ; SContinue\nSB ; SE                               ; Sep\nSB ; SP                               ; Sp\nSB ; ST                               ; STerm\nSB ; UP                               ; Upper\nSB ; XX                               ; Other\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Block for Bamum Script\nDESCRIPTION: This snippet defines the Unicode block for the Bamum script, including letters, numbers, combining marks, punctuation, and additional letters. It specifies code point ranges and character types.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/Scripts.txt#2025-04-21_snippet_52\n\nLANGUAGE: Unicode\nCODE:\n```\nA6A0..A6E5    ; Bamum # Lo  [70] BAMUM LETTER A..BAMUM LETTER KI\nA6E6..A6EF    ; Bamum # Nl  [10] BAMUM LETTER MO..BAMUM LETTER KOGHOM\nA6F0..A6F1    ; Bamum # Mn   [2] BAMUM COMBINING MARK KOQNDON..BAMUM COMBINING MARK TUKWENTIS\nA6F2..A6F7    ; Bamum # Po   [6] BAMUM NJAEMLI..BAMUM QUESTION MARK\n16800..16A38  ; Bamum # Lo [569] BAMUM LETTER PHASE-A NGKUE MFON..BAMUM LETTER PHASE-F VUEQ\n\n# Total code points: 657\n```\n\n----------------------------------------\n\nTITLE: Defining Quotation_Mark Characters in Unicode\nDESCRIPTION: This snippet lists Unicode code points classified as Quotation_Mark. It includes various quotation marks used in different writing systems and contexts.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/PropList.txt#2025-04-21_snippet_5\n\nLANGUAGE: Unicode\nCODE:\n```\n0022          ; Quotation_Mark # Po       QUOTATION MARK\n0027          ; Quotation_Mark # Po       APOSTROPHE\n00AB          ; Quotation_Mark # Pi       LEFT-POINTING DOUBLE ANGLE QUOTATION MARK\n00BB          ; Quotation_Mark # Pf       RIGHT-POINTING DOUBLE ANGLE QUOTATION MARK\n2018          ; Quotation_Mark # Pi       LEFT SINGLE QUOTATION MARK\n2019          ; Quotation_Mark # Pf       RIGHT SINGLE QUOTATION MARK\n201A          ; Quotation_Mark # Ps       SINGLE LOW-9 QUOTATION MARK\n201B..201C    ; Quotation_Mark # Pi   [2] SINGLE HIGH-REVERSED-9 QUOTATION MARK..LEFT DOUBLE QUOTATION MARK\n201D          ; Quotation_Mark # Pf       RIGHT DOUBLE QUOTATION MARK\n201E          ; Quotation_Mark # Ps       DOUBLE LOW-9 QUOTATION MARK\n201F          ; Quotation_Mark # Pi       DOUBLE HIGH-REVERSED-9 QUOTATION MARK\n2039          ; Quotation_Mark # Pi       SINGLE LEFT-POINTING ANGLE QUOTATION MARK\n203A          ; Quotation_Mark # Pf       SINGLE RIGHT-POINTING ANGLE QUOTATION MARK\n2E42          ; Quotation_Mark # Ps       DOUBLE LOW-REVERSED-9 QUOTATION MARK\n300C          ; Quotation_Mark # Ps       LEFT CORNER BRACKET\n300D          ; Quotation_Mark # Pe       RIGHT CORNER BRACKET\n300E          ; Quotation_Mark # Ps       LEFT WHITE CORNER BRACKET\n300F          ; Quotation_Mark # Pe       RIGHT WHITE CORNER BRACKET\n301D          ; Quotation_Mark # Ps       REVERSED DOUBLE PRIME QUOTATION MARK\n301E..301F    ; Quotation_Mark # Pe   [2] DOUBLE PRIME QUOTATION MARK..LOW DOUBLE PRIME QUOTATION MARK\nFE41          ; Quotation_Mark # Ps       PRESENTATION FORM FOR VERTICAL LEFT CORNER BRACKET\nFE42          ; Quotation_Mark # Pe       PRESENTATION FORM FOR VERTICAL RIGHT CORNER BRACKET\nFE43          ; Quotation_Mark # Ps       PRESENTATION FORM FOR VERTICAL LEFT WHITE CORNER BRACKET\nFE44          ; Quotation_Mark # Pe       PRESENTATION FORM FOR VERTICAL RIGHT WHITE CORNER BRACKET\nFF02          ; Quotation_Mark # Po       FULLWIDTH QUOTATION MARK\nFF07          ; Quotation_Mark # Po       FULLWIDTH APOSTROPHE\nFF62          ; Quotation_Mark # Ps       HALFWIDTH LEFT CORNER BRACKET\nFF63          ; Quotation_Mark # Pe       HALFWIDTH RIGHT CORNER BRACKET\n```\n\n----------------------------------------\n\nTITLE: Lao Script Unicode Ranges\nDESCRIPTION: Defines the Unicode code point ranges for Lao script characters including letters, vowel signs, tone marks and digits. Covers 83 total code points from 0E81 to 0EDF.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/Scripts.txt#2025-04-21_snippet_22\n\nLANGUAGE: Unicode\nCODE:\n```\n0E81..0E82    ; Lao # Lo   [2] LAO LETTER KO..LAO LETTER KHO SUNG\n0E84          ; Lao # Lo       LAO LETTER KHO TAM\n0E86..0E8A    ; Lao # Lo   [5] LAO LETTER PALI GHA..LAO LETTER SO TAM\n```\n\n----------------------------------------\n\nTITLE: Defining Conditional Case Mappings for Greek Sigma in Unicode\nDESCRIPTION: This snippet defines conditional case mappings for the Greek letter sigma, including special handling for the final form of sigma.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/SpecialCasing.txt#2025-04-21_snippet_7\n\nLANGUAGE: Unicode\nCODE:\n```\n03A3; 03C2; 03A3; 03A3; Final_Sigma; # GREEK CAPITAL LETTER SIGMA\n\n# Note: the following cases for non-final are already in the UnicodeData.txt file.\n\n# 03A3; 03C3; 03A3; 03A3; # GREEK CAPITAL LETTER SIGMA\n# 03C3; 03C3; 03A3; 03A3; # GREEK SMALL LETTER SIGMA\n# 03C2; 03C2; 03A3; 03A3; # GREEK SMALL LETTER FINAL SIGMA\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Code Blocks for Ol Chiki Script\nDESCRIPTION: Lists the Unicode code point ranges for the Ol Chiki script, categorizing characters by their types (Nd, Lo, Lm, Po) and providing character descriptions. Includes a total of 48 code points.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/Scripts.txt#2025-04-21_snippet_37\n\nLANGUAGE: unicode\nCODE:\n```\n1C50..1C59    ; Ol_Chiki # Nd  [10] OL CHIKI DIGIT ZERO..OL CHIKI DIGIT NINE\n1C5A..1C77    ; Ol_Chiki # Lo  [30] OL CHIKI LETTER LA..OL CHIKI LETTER OH\n1C78..1C7D    ; Ol_Chiki # Lm   [6] OL CHIKI MU TTUDDAG..OL CHIKI AHAD\n1C7E..1C7F    ; Ol_Chiki # Po   [2] OL CHIKI PUNCTUATION MUCAAD..OL CHIKI PUNCTUATION DOUBLE MUCAAD\n\n# Total code points: 48\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Block for Avestan Script\nDESCRIPTION: This snippet defines the Unicode block for the Avestan script, including letters and punctuation marks. It specifies code point ranges and character types.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/Scripts.txt#2025-04-21_snippet_48\n\nLANGUAGE: Unicode\nCODE:\n```\n10B00..10B35  ; Avestan # Lo  [54] AVESTAN LETTER A..AVESTAN LETTER HE\n10B39..10B3F  ; Avestan # Po   [7] AVESTAN ABBREVIATION MARK..LARGE ONE RING OVER TWO RINGS PUNCTUATION\n\n# Total code points: 61\n```\n\n----------------------------------------\n\nTITLE: Script Property Default Values Definition\nDESCRIPTION: Defines the default value for the Script property, specifying that all code points not explicitly listed have the 'Unknown' (Zzzz) script value.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/Scripts.txt#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n# Property:\tScript\n\n#  All code points not explicitly listed for Script\n#  have the value Unknown (Zzzz).\n\n# @missing: 0000..10FFFF; Unknown\n```\n\n----------------------------------------\n\nTITLE: Unicode Diacritic Character Code Points\nDESCRIPTION: Defines Unicode code point ranges and properties for diacritic characters across different writing systems. Each line specifies a code point or range, followed by the property 'Diacritic' and additional metadata including the general category and character description.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/PropList.txt#2025-04-21_snippet_15\n\nLANGUAGE: unicode\nCODE:\n```\n302E..302F    ; Diacritic # Mc   [2] HANGUL SINGLE DOT TONE MARK..HANGUL DOUBLE DOT TONE MARK\n3099..309A    ; Diacritic # Mn   [2] COMBINING KATAKANA-HIRAGANA VOICED SOUND MARK..COMBINING KATAKANA-HIRAGANA SEMI-VOICED SOUND MARK\n309B..309C    ; Diacritic # Sk   [2] KATAKANA-HIRAGANA VOICED SOUND MARK..KATAKANA-HIRAGANA SEMI-VOICED SOUND MARK\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Other_Alphabetic Characters\nDESCRIPTION: This snippet defines Unicode code points for characters classified as Other_Alphabetic. It includes various diacritical marks, vowel signs, and other alphabetic symbols from different writing systems. The format is: Unicode code point range or individual code point, followed by the property (Other_Alphabetic), the character category (Mn for nonspacing mark or Mc for spacing combining mark), and the character description.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/PropList.txt#2025-04-21_snippet_13\n\nLANGUAGE: Unicode\nCODE:\n```\n0E34..0E3A    ; Other_Alphabetic # Mn   [7] THAI CHARACTER SARA I..THAI CHARACTER PHINTHU\n0E4D          ; Other_Alphabetic # Mn       THAI CHARACTER NIKHAHIT\n0EB1          ; Other_Alphabetic # Mn       LAO VOWEL SIGN MAI KAN\n0EB4..0EB9    ; Other_Alphabetic # Mn   [6] LAO VOWEL SIGN I..LAO VOWEL SIGN UU\n0EBB..0EBC    ; Other_Alphabetic # Mn   [2] LAO VOWEL SIGN MAI KON..LAO SEMIVOWEL SIGN LO\n0ECD          ; Other_Alphabetic # Mn       LAO NIGGAHITA\n0F71..0F7E    ; Other_Alphabetic # Mn  [14] TIBETAN VOWEL SIGN AA..TIBETAN SIGN RJES SU NGA RO\n0F7F          ; Other_Alphabetic # Mc       TIBETAN SIGN RNAM BCAD\n0F80..0F83    ; Other_Alphabetic # Mn   [4] TIBETAN VOWEL SIGN REVERSED I..TIBETAN SIGN SNA LDAN\n0F8D..0F97    ; Other_Alphabetic # Mn  [11] TIBETAN SUBJOINED SIGN LCE TSA CAN..TIBETAN SUBJOINED LETTER JA\n0F99..0FBC    ; Other_Alphabetic # Mn  [36] TIBETAN SUBJOINED LETTER NYA..TIBETAN SUBJOINED LETTER FIXED-FORM RA\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Character Ranges for Common Script\nDESCRIPTION: This snippet defines Unicode character ranges and their properties for the Common script. It includes code points, general categories, and character descriptions.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/Scripts.txt#2025-04-21_snippet_4\n\nLANGUAGE: Unicode\nCODE:\n```\n2E0E..2E16    ; Common # Po   [9] EDITORIAL CORONIS..DOTTED RIGHT-POINTING ANGLE\n2E17          ; Common # Pd       DOUBLE OBLIQUE HYPHEN\n2E18..2E19    ; Common # Po   [2] INVERTED INTERROBANG..PALM BRANCH\n2E1A          ; Common # Pd       HYPHEN WITH DIAERESIS\n2E1B          ; Common # Po       TILDE WITH RING ABOVE\n2E1C          ; Common # Pi       LEFT LOW PARAPHRASE BRACKET\n2E1D          ; Common # Pf       RIGHT LOW PARAPHRASE BRACKET\n2E1E..2E1F    ; Common # Po   [2] TILDE WITH DOT ABOVE..TILDE WITH DOT BELOW\n2E20          ; Common # Pi       LEFT VERTICAL BAR WITH QUILL\n2E21          ; Common # Pf       RIGHT VERTICAL BAR WITH QUILL\n2E22          ; Common # Ps       TOP LEFT HALF BRACKET\n2E23          ; Common # Pe       TOP RIGHT HALF BRACKET\n2E24          ; Common # Ps       BOTTOM LEFT HALF BRACKET\n2E25          ; Common # Pe       BOTTOM RIGHT HALF BRACKET\n2E26          ; Common # Ps       LEFT SIDEWAYS U BRACKET\n2E27          ; Common # Pe       RIGHT SIDEWAYS U BRACKET\n2E28          ; Common # Ps       LEFT DOUBLE PARENTHESIS\n2E29          ; Common # Pe       RIGHT DOUBLE PARENTHESIS\n2E2A..2E2E    ; Common # Po   [5] TWO DOTS OVER ONE DOT PUNCTUATION..REVERSED QUESTION MARK\n2E2F          ; Common # Lm       VERTICAL TILDE\n2E30..2E39    ; Common # Po  [10] RING POINT..TOP HALF SECTION SIGN\n2E3A..2E3B    ; Common # Pd   [2] TWO-EM DASH..THREE-EM DASH\n2E3C..2E3F    ; Common # Po   [4] STENOGRAPHIC FULL STOP..CAPITULUM\n2E40          ; Common # Pd       DOUBLE HYPHEN\n2E41          ; Common # Po       REVERSED COMMA\n2E42          ; Common # Ps       DOUBLE LOW-REVERSED-9 QUOTATION MARK\n2E43..2E4F    ; Common # Po  [13] DASH WITH LEFT UPTURN..CORNISH VERSE DIVIDER\n2E50..2E51    ; Common # So   [2] CROSS PATTY WITH RIGHT CROSSBAR..CROSS PATTY WITH LEFT CROSSBAR\n2E52..2E54    ; Common # Po   [3] TIRONIAN SIGN CAPITAL ET..MEDIEVAL QUESTION MARK\n2E55          ; Common # Ps       LEFT SQUARE BRACKET WITH STROKE\n2E56          ; Common # Pe       RIGHT SQUARE BRACKET WITH STROKE\n2E57          ; Common # Ps       LEFT SQUARE BRACKET WITH DOUBLE STROKE\n2E58          ; Common # Pe       RIGHT SQUARE BRACKET WITH DOUBLE STROKE\n2E59          ; Common # Ps       TOP HALF LEFT PARENTHESIS\n2E5A          ; Common # Pe       TOP HALF RIGHT PARENTHESIS\n2E5B          ; Common # Ps       BOTTOM HALF LEFT PARENTHESIS\n2E5C          ; Common # Pe       BOTTOM HALF RIGHT PARENTHESIS\n2E5D          ; Common # Pd       OBLIQUE HYPHEN\n```\n\n----------------------------------------\n\nTITLE: Defining Miao Unicode Block\nDESCRIPTION: Details the Unicode code points for the Miao script, including letters, signs, and tone marks with their respective categories.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/Scripts.txt#2025-04-21_snippet_67\n\nLANGUAGE: text\nCODE:\n```\n16F00..16F4A  ; Miao # Lo  [75] MIAO LETTER PA..MIAO LETTER RTE\n16F4F         ; Miao # Mn       MIAO SIGN CONSONANT MODIFIER BAR\n16F50         ; Miao # Lo       MIAO LETTER NASALIZATION\n16F51..16F87  ; Miao # Mc  [55] MIAO SIGN ASPIRATION..MIAO VOWEL SIGN UI\n16F8F..16F92  ; Miao # Mn   [4] MIAO TONE RIGHT..MIAO TONE BELOW\n16F93..16F9F  ; Miao # Lm  [13] MIAO LETTER TONE-2..MIAO LETTER REFORMED TONE-8\n\n# Total code points: 149\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Code Blocks for Lycian Script\nDESCRIPTION: Lists the Unicode code point range for the Lycian script, categorizing characters by their type (Lo) and providing character descriptions. Includes a total of 29 code points.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/Scripts.txt#2025-04-21_snippet_42\n\nLANGUAGE: unicode\nCODE:\n```\n10280..1029C  ; Lycian # Lo  [29] LYCIAN LETTER A..LYCIAN LETTER X\n\n# Total code points: 29\n```\n\n----------------------------------------\n\nTITLE: Regional Indicator Symbol Range Definition\nDESCRIPTION: Defines the code point range for Regional Indicator symbols from letter A to Z. These symbols are used to represent country codes and regional indicators.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/PropList.txt#2025-04-21_snippet_33\n\nLANGUAGE: unicode-data\nCODE:\n```\n1F1E6..1F1FF  ; Regional_Indicator # So  [26] REGIONAL INDICATOR SYMBOL LETTER A..REGIONAL INDICATOR SYMBOL LETTER Z\n```\n\n----------------------------------------\n\nTITLE: Requiring Macros in Elixir\nDESCRIPTION: This snippet shows how to require a module in Elixir to gain access to its macros. It highlights the necessity of requiring the Integer module before invoking its macro.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/alias-require-and-import.md#2025-04-21_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\niex> Integer.is_odd(3)\n** (UndefinedFunctionError) function Integer.is_odd/1 is undefined or private. However, there is a macro with the same name and arity. Be sure to require Integer if you intend to invoke this macro\n    (elixir) Integer.is_odd(3)\niex> require Integer\nInteger\niex> Integer.is_odd(3)\ntrue\n```\n\n----------------------------------------\n\nTITLE: Unicode Other_ID_Continue Character Definitions\nDESCRIPTION: Lists Unicode code points with the Other_ID_Continue property. These characters can appear within an identifier but don't have the standard ID_Continue property. Includes characters like MIDDLE DOT, ZERO WIDTH JOINER/NON-JOINER, and certain digits.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/PropList.txt#2025-04-21_snippet_24\n\nLANGUAGE: unicode\nCODE:\n```\n00B7          ; Other_ID_Continue # Po       MIDDLE DOT\n0387          ; Other_ID_Continue # Po       GREEK ANO TELEIA\n1369..1371    ; Other_ID_Continue # No   [9] ETHIOPIC DIGIT ONE..ETHIOPIC DIGIT NINE\n19DA          ; Other_ID_Continue # No       NEW TAI LUE THAM DIGIT ONE\n200C..200D    ; Other_ID_Continue # Cf   [2] ZERO WIDTH NON-JOINER..ZERO WIDTH JOINER\n30FB          ; Other_ID_Continue # Po       KATAKANA MIDDLE DOT\nFF65          ; Other_ID_Continue # Po       HALFWIDTH KATAKANA MIDDLE DOT\n\n# Total code points: 16\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Character Ranges for Nag Mundari Script\nDESCRIPTION: This snippet defines the Unicode character ranges for the Nag Mundari script. It includes letter characters (Lo), modifier letters (Lm), combining marks (Mn), and numeric digits (Nd).\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/Scripts.txt#2025-04-21_snippet_100\n\nLANGUAGE: Unicode\nCODE:\n```\n1E4D0..1E4EA  ; Nag_Mundari # Lo  [27] NAG MUNDARI LETTER O..NAG MUNDARI LETTER ELL\n1E4EB         ; Nag_Mundari # Lm       NAG MUNDARI SIGN OJOD\n1E4EC..1E4EF  ; Nag_Mundari # Mn   [4] NAG MUNDARI SIGN MUHOR..NAG MUNDARI SIGN SUTUH\n1E4F0..1E4F9  ; Nag_Mundari # Nd  [10] NAG MUNDARI DIGIT ZERO..NAG MUNDARI DIGIT NINE\n\n# Total code points: 42\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Code Blocks for Saurashtra Script\nDESCRIPTION: Lists the Unicode code point ranges for the Saurashtra script, categorizing characters by their types (Mc, Lo, Mn, Po, Nd) and providing character descriptions. Includes a total of 82 code points.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/Scripts.txt#2025-04-21_snippet_39\n\nLANGUAGE: unicode\nCODE:\n```\nA880..A881    ; Saurashtra # Mc   [2] SAURASHTRA SIGN ANUSVARA..SAURASHTRA SIGN VISARGA\nA882..A8B3    ; Saurashtra # Lo  [50] SAURASHTRA LETTER A..SAURASHTRA LETTER LLA\nA8B4..A8C3    ; Saurashtra # Mc  [16] SAURASHTRA CONSONANT SIGN HAARU..SAURASHTRA VOWEL SIGN AU\nA8C4..A8C5    ; Saurashtra # Mn   [2] SAURASHTRA SIGN VIRAMA..SAURASHTRA SIGN CANDRABINDU\nA8CE..A8CF    ; Saurashtra # Po   [2] SAURASHTRA DANDA..SAURASHTRA DOUBLE DANDA\nA8D0..A8D9    ; Saurashtra # Nd  [10] SAURASHTRA DIGIT ZERO..SAURASHTRA DIGIT NINE\n\n# Total code points: 82\n```\n\n----------------------------------------\n\nTITLE: Unicode Common Script Character Range Definitions\nDESCRIPTION: Defines Unicode code point ranges for Common script characters including presentation forms, punctuation marks, mathematical symbols, musical notation, and special characters. Each line specifies a code point or range along with its category and description.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/Scripts.txt#2025-04-21_snippet_5\n\nLANGUAGE: unicode\nCODE:\n```\nFE48          ; Common # Pe       PRESENTATION FORM FOR VERTICAL RIGHT SQUARE BRACKET\nFE49..FE4C    ; Common # Po   [4] DASHED OVERLINE..DOUBLE WAVY OVERLINE\nFE4D..FE4F    ; Common # Pc   [3] DASHED LOW LINE..WAVY LOW LINE\n# ... Additional ranges omitted for brevity ...\n1D7C2         ; Common # L&  [25] MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL OMEGA\n1D7C3         ; Common # Sm       MATHEMATICAL SANS-SERIF BOLD ITALIC PARTIAL DIFFERENTIAL\n```\n\n----------------------------------------\n\nTITLE: Script (sc) Property Mapping in Unicode\nDESCRIPTION: A comprehensive mapping of script codes to their full names in Unicode. Each line follows the format 'sc ; [code] ; [full_name]' with optional alternative codes.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/PropertyValueAliases.txt#2025-04-21_snippet_20\n\nLANGUAGE: plaintext\nCODE:\n```\n# Script (sc)\n\nsc ; Adlm                             ; Adlam\nsc ; Aghb                             ; Caucasian_Albanian\nsc ; Ahom                             ; Ahom\nsc ; Arab                             ; Arabic\nsc ; Armi                             ; Imperial_Aramaic\nsc ; Armn                             ; Armenian\nsc ; Avst                             ; Avestan\nsc ; Bali                             ; Balinese\nsc ; Bamu                             ; Bamum\nsc ; Bass                             ; Bassa_Vah\nsc ; Batk                             ; Batak\nsc ; Beng                             ; Bengali\nsc ; Bhks                             ; Bhaiksuki\nsc ; Bopo                             ; Bopomofo\nsc ; Brah                             ; Brahmi\nsc ; Brai                             ; Braille\nsc ; Bugi                             ; Buginese\nsc ; Buhd                             ; Buhid\nsc ; Cakm                             ; Chakma\nsc ; Cans                             ; Canadian_Aboriginal\nsc ; Cari                             ; Carian\nsc ; Cham                             ; Cham\nsc ; Cher                             ; Cherokee\nsc ; Chrs                             ; Chorasmian\nsc ; Copt                             ; Coptic                           ; Qaac\nsc ; Cpmn                             ; Cypro_Minoan\nsc ; Cprt                             ; Cypriot\nsc ; Cyrl                             ; Cyrillic\nsc ; Deva                             ; Devanagari\nsc ; Diak                             ; Dives_Akuru\nsc ; Dogr                             ; Dogra\nsc ; Dsrt                             ; Deseret\nsc ; Dupl                             ; Duployan\nsc ; Egyp                             ; Egyptian_Hieroglyphs\nsc ; Elba                             ; Elbasan\nsc ; Elym                             ; Elymaic\nsc ; Ethi                             ; Ethiopic\nsc ; Gara                             ; Garay\nsc ; Geor                             ; Georgian\nsc ; Glag                             ; Glagolitic\nsc ; Gong                             ; Gunjala_Gondi\nsc ; Gonm                             ; Masaram_Gondi\nsc ; Goth                             ; Gothic\nsc ; Gran                             ; Grantha\nsc ; Grek                             ; Greek\nsc ; Gujr                             ; Gujarati\nsc ; Gukh                             ; Gurung_Khema\nsc ; Guru                             ; Gurmukhi\nsc ; Hang                             ; Hangul\nsc ; Hani                             ; Han\nsc ; Hano                             ; Hanunoo\nsc ; Hatr                             ; Hatran\nsc ; Hebr                             ; Hebrew\nsc ; Hira                             ; Hiragana\nsc ; Hluw                             ; Anatolian_Hieroglyphs\nsc ; Hmng                             ; Pahawh_Hmong\nsc ; Hmnp                             ; Nyiakeng_Puachue_Hmong\nsc ; Hrkt                             ; Katakana_Or_Hiragana\nsc ; Hung                             ; Old_Hungarian\nsc ; Ital                             ; Old_Italic\nsc ; Java                             ; Javanese\nsc ; Kali                             ; Kayah_Li\nsc ; Kana                             ; Katakana\nsc ; Kawi                             ; Kawi\nsc ; Khar                             ; Kharoshthi\nsc ; Khmr                             ; Khmer\nsc ; Khoj                             ; Khojki\nsc ; Kits                             ; Khitan_Small_Script\nsc ; Knda                             ; Kannada\nsc ; Krai                             ; Kirat_Rai\nsc ; Kthi                             ; Kaithi\nsc ; Lana                             ; Tai_Tham\nsc ; Laoo                             ; Lao\nsc ; Latn                             ; Latin\nsc ; Lepc                             ; Lepcha\nsc ; Limb                             ; Limbu\nsc ; Lina                             ; Linear_A\nsc ; Linb                             ; Linear_B\nsc ; Lisu                             ; Lisu\nsc ; Lyci                             ; Lycian\nsc ; Lydi                             ; Lydian\nsc ; Mahj                             ; Mahajani\nsc ; Maka                             ; Makasar\nsc ; Mand                             ; Mandaic\nsc ; Mani                             ; Manichaean\nsc ; Marc                             ; Marchen\nsc ; Medf                             ; Medefaidrin\nsc ; Mend                             ; Mende_Kikakui\nsc ; Merc                             ; Meroitic_Cursive\nsc ; Mero                             ; Meroitic_Hieroglyphs\nsc ; Mlym                             ; Malayalam\nsc ; Modi                             ; Modi\nsc ; Mong                             ; Mongolian\nsc ; Mroo                             ; Mro\nsc ; Mtei                             ; Meetei_Mayek\nsc ; Mult                             ; Multani\nsc ; Mymr                             ; Myanmar\nsc ; Nagm                             ; Nag_Mundari\nsc ; Nand                             ; Nandinagari\nsc ; Narb                             ; Old_North_Arabian\nsc ; Nbat                             ; Nabataean\nsc ; Newa                             ; Newa\nsc ; Nkoo                             ; Nko\nsc ; Nshu                             ; Nushu\nsc ; Ogam                             ; Ogham\nsc ; Olck                             ; Ol_Chiki\nsc ; Onao                             ; Ol_Onal\nsc ; Orkh                             ; Old_Turkic\nsc ; Orya                             ; Oriya\nsc ; Osge                             ; Osage\nsc ; Osma                             ; Osmanya\nsc ; Ougr                             ; Old_Uyghur\nsc ; Palm                             ; Palmyrene\nsc ; Pauc                             ; Pau_Cin_Hau\nsc ; Perm                             ; Old_Permic\nsc ; Phag                             ; Phags_Pa\nsc ; Phli                             ; Inscriptional_Pahlavi\nsc ; Phlp                             ; Psalter_Pahlavi\nsc ; Phnx                             ; Phoenician\nsc ; Plrd                             ; Miao\nsc ; Prti                             ; Inscriptional_Parthian\nsc ; Rjng                             ; Rejang\nsc ; Rohg                             ; Hanifi_Rohingya\nsc ; Runr                             ; Runic\nsc ; Samr                             ; Samaritan\nsc ; Sarb                             ; Old_South_Arabian\nsc ; Saur                             ; Saurashtra\nsc ; Sgnw                             ; SignWriting\nsc ; Shaw                             ; Shavian\nsc ; Shrd                             ; Sharada\nsc ; Sidd                             ; Siddham\nsc ; Sind                             ; Khudawadi\nsc ; Sinh                             ; Sinhala\nsc ; Sogd                             ; Sogdian\nsc ; Sogo                             ; Old_Sogdian\nsc ; Sora                             ; Sora_Sompeng\nsc ; Soyo                             ; Soyombo\nsc ; Sund                             ; Sundanese\nsc ; Sunu                             ; Sunuwar\nsc ; Sylo                             ; Syloti_Nagri\nsc ; Syrc                             ; Syriac\nsc ; Tagb                             ; Tagbanwa\nsc ; Takr                             ; Takri\nsc ; Tale                             ; Tai_Le\nsc ; Talu                             ; New_Tai_Lue\nsc ; Taml                             ; Tamil\nsc ; Tang                             ; Tangut\nsc ; Tavt                             ; Tai_Viet\nsc ; Telu                             ; Telugu\nsc ; Tfng                             ; Tifinagh\nsc ; Tglg                             ; Tagalog\nsc ; Thaa                             ; Thaana\nsc ; Thai                             ; Thai\nsc ; Tibt                             ; Tibetan\nsc ; Tirh                             ; Tirhuta\nsc ; Tnsa                             ; Tangsa\nsc ; Todr                             ; Todhri\nsc ; Toto                             ; Toto\nsc ; Tutg                             ; Tulu_Tigalari\nsc ; Ugar                             ; Ugaritic\nsc ; Vaii                             ; Vai\nsc ; Vith                             ; Vithkuqi\nsc ; Wara                             ; Warang_Citi\nsc ; Wcho                             ; Wancho\nsc ; Xpeo                             ; Old_Persian\nsc ; Xsux                             ; Cuneiform\nsc ; Yezi                             ; Yezidi\nsc ; Yiii                             ; Yi\nsc ; Zanb                             ; Zanabazar_Square\nsc ; Zinh                             ; Inherited                        ; Qaai\nsc ; Zyyy                             ; Common\nsc ; Zzzz                             ; Unknown\n```\n\n----------------------------------------\n\nTITLE: Using Metadata in Elixir Documentation\nDESCRIPTION: This snippet illustrates how to use metadata in documentation attributes in Elixir. It encompasses using keys like `:deprecated`, `:group`, and `:since` to enrich documentation for users.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/writing-documentation.md#2025-04-21_snippet_2\n\nLANGUAGE: elixir\nCODE:\n```\n```elixir\n@doc deprecated: \"Use Foo.bar/2 instead\"\n@deprecated \"Use Foo.bar/2 instead\"\n@doc group: \"Query\"\ndef all(query)\n\n@doc group: \"Schema\"\ndef insert(schema)\n\n@doc since: \"1.3.0\"\ndef world(name) do\n  IO.puts(\"hello #{name}\")\nend\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Limited_Use Not_XID Unicode Code Point Ranges\nDESCRIPTION: This snippet defines Unicode code point ranges for characters with both Limited_Use and Not_XID identifier types. It includes ranges for various scripts and punctuation marks.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/IdentifierType.txt#2025-04-21_snippet_8\n\nLANGUAGE: Unicode\nCODE:\n```\n0700..070D    ; Limited_Use Not_XID            # 3.0   [14] SYRIAC END OF PARAGRAPH..SYRIAC HARKLEAN ASTERISCUS\n070F          ; Limited_Use Not_XID            # 3.0        SYRIAC ABBREVIATION MARK\n07F6..07F9    ; Limited_Use Not_XID            # 5.0    [4] NKO SYMBOL OO DENNEN..NKO EXCLAMATION MARK\n07FE..07FF    ; Limited_Use Not_XID            # 11.0   [2] NKO DOROME SIGN..NKO TAMAN SIGN\n085E          ; Limited_Use Not_XID            # 6.0        MANDAIC PUNCTUATION\n1400          ; Limited_Use Not_XID            # 5.2        CANADIAN SYLLABICS HYPHEN\n166D..166E    ; Limited_Use Not_XID            # 3.0    [2] CANADIAN SYLLABICS CHI SIGN..CANADIAN SYLLABICS FULL STOP\n1940          ; Limited_Use Not_XID            # 4.0        LIMBU SIGN LOO\n1944..1945    ; Limited_Use Not_XID            # 4.0    [2] LIMBU EXCLAMATION MARK..LIMBU QUESTION MARK\n19DE..19DF    ; Limited_Use Not_XID            # 4.1    [2] NEW TAI LUE SIGN LAE..NEW TAI LUE SIGN LAEV\n1AA0..1AA6    ; Limited_Use Not_XID            # 5.2    [7] TAI THAM SIGN WIANG..TAI THAM SIGN REVERSED ROTATED RANA\n1AA8..1AAD    ; Limited_Use Not_XID            # 5.2    [6] TAI THAM SIGN KAAN..TAI THAM SIGN CAANG\n1B4E..1B4F    ; Limited_Use Not_XID            # 16.0   [2] BALINESE INVERTED CARIK SIKI..BALINESE INVERTED CARIK PAREREN\n1B5A..1B6A    ; Limited_Use Not_XID            # 5.0   [17] BALINESE PANTI..BALINESE MUSICAL SYMBOL DANG GEDE\n1B74..1B7C    ; Limited_Use Not_XID            # 5.0    [9] BALINESE MUSICAL SYMBOL RIGHT-HAND OPEN DUG..BALINESE MUSICAL SYMBOL LEFT-HAND OPEN PING\n1B7D..1B7E    ; Limited_Use Not_XID            # 14.0   [2] BALINESE PANTI LANTANG..BALINESE PAMADA LANTANG\n1B7F          ; Limited_Use Not_XID            # 16.0       BALINESE PANTI BAWAK\n1BFC..1BFF    ; Limited_Use Not_XID            # 6.0    [4] BATAK SYMBOL BINDU NA METEK..BATAK SYMBOL BINDU PANGOLAT\n1C3B..1C3F    ; Limited_Use Not_XID            # 5.1    [5] LEPCHA PUNCTUATION TA-ROL..LEPCHA PUNCTUATION TSHOOK\n1C7E..1C7F    ; Limited_Use Not_XID            # 5.1    [2] OL CHIKI PUNCTUATION MUCAAD..OL CHIKI PUNCTUATION DOUBLE MUCAAD\n1CC0..1CC7    ; Limited_Use Not_XID            # 6.1    [8] SUNDANESE PUNCTUATION BINDU SURYA..SUNDANESE PUNCTUATION BINDU BA SATANGA\n2D70          ; Limited_Use Not_XID            # 6.0        TIFINAGH SEPARATOR MARK\nA490..A4A1    ; Limited_Use Not_XID            # 3.0   [18] YI RADICAL QOT..YI RADICAL GA\nA4A2..A4A3    ; Limited_Use Not_XID            # 3.2    [2] YI RADICAL ZUP..YI RADICAL CYT\nA4A4..A4B3    ; Limited_Use Not_XID            # 3.0   [16] YI RADICAL DDUR..YI RADICAL JO\nA4B4          ; Limited_Use Not_XID            # 3.2        YI RADICAL NZUP\nA4B5..A4C0    ; Limited_Use Not_XID            # 3.0   [12] YI RADICAL JJY..YI RADICAL SHAT\nA4C1          ; Limited_Use Not_XID            # 3.2        YI RADICAL ZUR\nA4C2..A4C4    ; Limited_Use Not_XID            # 3.0    [3] YI RADICAL SHOP..YI RADICAL ZZIET\nA4C5          ; Limited_Use Not_XID            # 3.2        YI RADICAL NBIE\nA4C6          ; Limited_Use Not_XID            # 3.0        YI RADICAL KE\nA4FE..A4FF    ; Limited_Use Not_XID            # 5.2    [2] LISU PUNCTUATION COMMA..LISU PUNCTUATION FULL STOP\nA60D..A60F    ; Limited_Use Not_XID            # 5.1    [3] VAI COMMA..VAI QUESTION MARK\nA6F2..A6F7    ; Limited_Use Not_XID            # 5.2    [6] BAMUM NJAEMLI..BAMUM QUESTION MARK\nA828..A82B    ; Limited_Use Not_XID            # 4.1    [4] SYLOTI NAGRI POETRY MARK-1..SYLOTI NAGRI POETRY MARK-4\nA8CE..A8CF    ; Limited_Use Not_XID            # 5.1    [2] SAURASHTRA DANDA..SAURASHTRA DOUBLE DANDA\nA92F          ; Limited_Use Not_XID            # 5.1        KAYAH LI SIGN SHYA\nA9C1..A9CD    ; Limited_Use Not_XID            # 5.2   [13] JAVANESE LEFT RERENGGAN..JAVANESE TURNED PADA PISELEH\nA9DE..A9DF    ; Limited_Use Not_XID            # 5.2    [2] JAVANESE PADA TIRTA TUMETES..JAVANESE PADA ISEN-ISEN\nAA5C..AA5F    ; Limited_Use Not_XID            # 5.1    [4] CHAM PUNCTUATION SPIRAL..CHAM PUNCTUATION TRIPLE DANDA\nAADE..AADF    ; Limited_Use Not_XID            # 5.2    [2] TAI VIET SYMBOL HO HOI..TAI VIET SYMBOL KOI KOI\nAAF0..AAF1    ; Limited_Use Not_XID            # 6.1    [2] MEETEI MAYEK CHEIKHAN..MEETEI MAYEK AHANG KHUDAM\nABEB          ; Limited_Use Not_XID            # 5.2        MEETEI MAYEK CHEIKHEI\n11140..11143  ; Limited_Use Not_XID            # 6.1    [4] CHAKMA SECTION MARK..CHAKMA QUESTION MARK\n1144B..1144F  ; Limited_Use Not_XID            # 9.0    [5] NEWA DANDA..NEWA ABBREVIATION SIGN\n1145A         ; Limited_Use Not_XID            # 13.0       NEWA DOUBLE COMMA\n1145B         ; Limited_Use Not_XID            # 9.0        NEWA PLACEHOLDER MARK\n1145D         ; Limited_Use Not_XID            # 9.0        NEWA INSERTION SIGN\n1E14F         ; Limited_Use Not_XID            # 12.0       NYIAKENG PUACHUE HMONG CIRCLED CA\n1E2FF         ; Limited_Use Not_XID            # 12.0       WANCHO NGUN SIGN\n1E95E..1E95F  ; Limited_Use Not_XID            # 9.0    [2] ADLAM INITIAL EXCLAMATION MARK..ADLAM INITIAL QUESTION MARK\n```\n\n----------------------------------------\n\nTITLE: Defining Brahmi Unicode Block\nDESCRIPTION: Outlines the Unicode code points for the Brahmi script, including detailed categories for letters, signs, numbers, and punctuation marks.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/Scripts.txt#2025-04-21_snippet_62\n\nLANGUAGE: text\nCODE:\n```\n11000         ; Brahmi # Mc       BRAHMI SIGN CANDRABINDU\n11001         ; Brahmi # Mn       BRAHMI SIGN ANUSVARA\n11002         ; Brahmi # Mc       BRAHMI SIGN VISARGA\n11003..11037  ; Brahmi # Lo  [53] BRAHMI SIGN JIHVAMULIYA..BRAHMI LETTER OLD TAMIL NNNA\n11038..11046  ; Brahmi # Mn  [15] BRAHMI VOWEL SIGN AA..BRAHMI VIRAMA\n11047..1104D  ; Brahmi # Po   [7] BRAHMI DANDA..BRAHMI PUNCTUATION LOTUS\n11052..11065  ; Brahmi # No  [20] BRAHMI NUMBER ONE..BRAHMI NUMBER ONE THOUSAND\n11066..1106F  ; Brahmi # Nd  [10] BRAHMI DIGIT ZERO..BRAHMI DIGIT NINE\n11070         ; Brahmi # Mn       BRAHMI SIGN OLD TAMIL VIRAMA\n11071..11072  ; Brahmi # Lo   [2] BRAHMI LETTER OLD TAMIL SHORT E..BRAHMI LETTER OLD TAMIL SHORT O\n11073..11074  ; Brahmi # Mn   [2] BRAHMI VOWEL SIGN OLD TAMIL SHORT E..BRAHMI VOWEL SIGN OLD TAMIL SHORT O\n11075         ; Brahmi # Lo       BRAHMI LETTER OLD TAMIL LLA\n1107F         ; Brahmi # Mn       BRAHMI NUMBER JOINER\n\n# Total code points: 115\n```\n\n----------------------------------------\n\nTITLE: Mapping Unicode Characters to Scripts\nDESCRIPTION: This code snippet shows the format used throughout the file to map Unicode characters to their corresponding scripts. Each line contains a Unicode code point or range, followed by a semicolon-separated list of script abbreviations, and a description of the character.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/ScriptExtensions.txt#2025-04-21_snippet_1\n\nLANGUAGE: Unicode\nCODE:\n```\n2E31          ; Avst Cari Geor Hung Kthi Lydi Samr #Po   WORD SEPARATOR MIDDLE DOT\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Code Blocks for Sundanese Script\nDESCRIPTION: Lists the Unicode code point ranges for the Sundanese script, categorizing characters by their types (Mn, Mc, Lo, Nd, Po) and providing character descriptions. Includes a total of 72 code points.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/Scripts.txt#2025-04-21_snippet_35\n\nLANGUAGE: unicode\nCODE:\n```\n1B80..1B81    ; Sundanese # Mn   [2] SUNDANESE SIGN PANYECEK..SUNDANESE SIGN PANGLAYAR\n1B82          ; Sundanese # Mc       SUNDANESE SIGN PANGWISAD\n1B83..1BA0    ; Sundanese # Lo  [30] SUNDANESE LETTER A..SUNDANESE LETTER HA\n1BA1          ; Sundanese # Mc       SUNDANESE CONSONANT SIGN PAMINGKAL\n1BA2..1BA5    ; Sundanese # Mn   [4] SUNDANESE CONSONANT SIGN PANYAKRA..SUNDANESE VOWEL SIGN PANYUKU\n1BA6..1BA7    ; Sundanese # Mc   [2] SUNDANESE VOWEL SIGN PANAELAENG..SUNDANESE VOWEL SIGN PANOLONG\n1BA8..1BA9    ; Sundanese # Mn   [2] SUNDANESE VOWEL SIGN PAMEPET..SUNDANESE VOWEL SIGN PANEULEUNG\n1BAA          ; Sundanese # Mc       SUNDANESE SIGN PAMAAEH\n1BAB..1BAD    ; Sundanese # Mn   [3] SUNDANESE SIGN VIRAMA..SUNDANESE CONSONANT SIGN PASANGAN WA\n1BAE..1BAF    ; Sundanese # Lo   [2] SUNDANESE LETTER KHA..SUNDANESE LETTER SYA\n1BB0..1BB9    ; Sundanese # Nd  [10] SUNDANESE DIGIT ZERO..SUNDANESE DIGIT NINE\n1BBA..1BBF    ; Sundanese # Lo   [6] SUNDANESE AVAGRAHA..SUNDANESE LETTER FINAL M\n1CC0..1CC7    ; Sundanese # Po   [8] SUNDANESE PUNCTUATION BINDU SURYA..SUNDANESE PUNCTUATION BINDU BA SATANGA\n\n# Total code points: 72\n```\n\n----------------------------------------\n\nTITLE: Defining Language-Sensitive Case Mappings for Lithuanian in Unicode\nDESCRIPTION: This snippet defines language-sensitive case mappings for Lithuanian, handling the retention of dots in lowercase i when followed by accents and introducing explicit dots when lowercasing capital I's and J's with additional accents.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/SpecialCasing.txt#2025-04-21_snippet_8\n\nLANGUAGE: Unicode\nCODE:\n```\n0307; 0307; ; ; lt After_Soft_Dotted; # COMBINING DOT ABOVE\n\n0049; 0069 0307; 0049; 0049; lt More_Above; # LATIN CAPITAL LETTER I\n004A; 006A 0307; 004A; 004A; lt More_Above; # LATIN CAPITAL LETTER J\n012E; 012F 0307; 012E; 012E; lt More_Above; # LATIN CAPITAL LETTER I WITH OGONEK\n00CC; 0069 0307 0300; 00CC; 00CC; lt; # LATIN CAPITAL LETTER I WITH GRAVE\n00CD; 0069 0307 0301; 00CD; 00CD; lt; # LATIN CAPITAL LETTER I WITH ACUTE\n0128; 0069 0307 0303; 0128; 0128; lt; # LATIN CAPITAL LETTER I WITH TILDE\n```\n\n----------------------------------------\n\nTITLE: Han Unicode Range Definition\nDESCRIPTION: Defines Unicode ranges for Han characters, including CJK unified ideographs, radicals, and compatibility ideographs.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/Scripts.txt#2025-04-21_snippet_28\n\nLANGUAGE: text\nCODE:\n```\n2E80..2E99    ; Han # So  [26] CJK RADICAL REPEAT..CJK RADICAL RAP\n2E9B..2EF3    ; Han # So  [89] CJK RADICAL CHOKE..CJK RADICAL C-SIMPLIFIED TURTLE\n2F00..2FD5    ; Han # So [214] KANGXI RADICAL ONE..KANGXI RADICAL FLUTE\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Code Points with Uncommon_Use Classification\nDESCRIPTION: This code block defines ranges of Unicode code points classified as 'Uncommon_Use'. Each line specifies either a single code point or a range, followed by the classification and a comment indicating the Unicode version where it was introduced and how many code points are included.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/IdentifierType.txt#2025-04-21_snippet_9\n\nLANGUAGE: unicode\nCODE:\n```\n#\tIdentifier_Type:\tUncommon_Use\n\n0181..018C    ; Uncommon_Use                   # 1.1   [12] LATIN CAPITAL LETTER B WITH HOOK..LATIN SMALL LETTER D WITH TOPBAR\n018E          ; Uncommon_Use                   # 1.1        LATIN CAPITAL LETTER REVERSED E\n0190..019F    ; Uncommon_Use                   # 1.1   [16] LATIN CAPITAL LETTER OPEN E..LATIN CAPITAL LETTER O WITH MIDDLE TILDE\n01A2..01A9    ; Uncommon_Use                   # 1.1    [8] LATIN CAPITAL LETTER OI..LATIN CAPITAL LETTER ESH\n01AC..01AE    ; Uncommon_Use                   # 1.1    [3] LATIN CAPITAL LETTER T WITH HOOK..LATIN CAPITAL LETTER T WITH RETROFLEX HOOK\n01B1..01B8    ; Uncommon_Use                   # 1.1    [8] LATIN CAPITAL LETTER UPSILON..LATIN CAPITAL LETTER EZH REVERSED\n01BC..01BD    ; Uncommon_Use                   # 1.1    [2] LATIN CAPITAL LETTER TONE FIVE..LATIN SMALL LETTER TONE FIVE\n01DD          ; Uncommon_Use                   # 1.1        LATIN SMALL LETTER TURNED E\n01E4..01E5    ; Uncommon_Use                   # 1.1    [2] LATIN CAPITAL LETTER G WITH STROKE..LATIN SMALL LETTER G WITH STROKE\n0220          ; Uncommon_Use                   # 3.2        LATIN CAPITAL LETTER N WITH LONG RIGHT LEG\n0221          ; Uncommon_Use                   # 4.0        LATIN SMALL LETTER D WITH CURL\n0222..0225    ; Uncommon_Use                   # 3.0    [4] LATIN CAPITAL LETTER OU..LATIN SMALL LETTER Z WITH HOOK\n0237..0241    ; Uncommon_Use                   # 4.1   [11] LATIN SMALL LETTER DOTLESS J..LATIN CAPITAL LETTER GLOTTAL STOP\n0242..024F    ; Uncommon_Use                   # 5.0   [14] LATIN SMALL LETTER GLOTTAL STOP..LATIN SMALL LETTER Y WITH STROKE\n0305          ; Uncommon_Use                   # 1.1        COMBINING OVERLINE\n030D          ; Uncommon_Use                   # 1.1        COMBINING VERTICAL LINE ABOVE\n0316          ; Uncommon_Use                   # 1.1        COMBINING GRAVE ACCENT BELOW\n0321..0322    ; Uncommon_Use                   # 1.1    [2] COMBINING PALATALIZED HOOK BELOW..COMBINING RETROFLEX HOOK BELOW\n0332          ; Uncommon_Use                   # 1.1        COMBINING LOW LINE\n0334          ; Uncommon_Use                   # 1.1        COMBINING TILDE OVERLAY\n0336          ; Uncommon_Use                   # 1.1        COMBINING LONG STROKE OVERLAY\n0358          ; Uncommon_Use                   # 4.1        COMBINING DOT ABOVE RIGHT\n0591..05A1    ; Uncommon_Use                   # 2.0   [17] HEBREW ACCENT ETNAHTA..HEBREW ACCENT PAZER\n05A3..05AF    ; Uncommon_Use                   # 2.0   [13] HEBREW ACCENT MUNAH..HEBREW MARK MASORA CIRCLE\n05B0..05B3    ; Uncommon_Use                   # 1.1    [4] HEBREW POINT SHEVA..HEBREW POINT HATAF QAMATS\n05B5..05B9    ; Uncommon_Use                   # 1.1    [5] HEBREW POINT TSERE..HEBREW POINT HOLAM\n05BA          ; Uncommon_Use                   # 5.0        HEBREW POINT HOLAM HASER FOR VAV\n05BB..05BD    ; Uncommon_Use                   # 1.1    [3] HEBREW POINT QUBUTS..HEBREW POINT METEG\n05BF          ; Uncommon_Use                   # 1.1        HEBREW POINT RAFE\n05C1..05C2    ; Uncommon_Use                   # 1.1    [2] HEBREW POINT SHIN DOT..HEBREW POINT SIN DOT\n05C4          ; Uncommon_Use                   # 2.0        HEBREW MARK UPPER DOT\n0610..0615    ; Uncommon_Use                   # 4.0    [6] ARABIC SIGN SALLALLAHOU ALAYHE WASSALLAM..ARABIC SMALL HIGH TAH\n0616..061A    ; Uncommon_Use                   # 5.1    [5] ARABIC SMALL HIGH LIGATURE ALEF WITH LAM WITH YEH..ARABIC SMALL KASRA\n0656..0658    ; Uncommon_Use                   # 4.0    [3] ARABIC SUBSCRIPT ALEF..ARABIC MARK NOON GHUNNA\n0659..065E    ; Uncommon_Use                   # 4.1    [6] ARABIC ZWARAKAY..ARABIC FATHA WITH TWO DOTS\n065F          ; Uncommon_Use                   # 6.0        ARABIC WAVY HAMZA BELOW\n06D6..06DC    ; Uncommon_Use                   # 1.1    [7] ARABIC SMALL HIGH LIGATURE SAD WITH LAM WITH ALEF MAKSURA..ARABIC SMALL HIGH SEEN\n06DF..06E4    ; Uncommon_Use                   # 1.1    [6] ARABIC SMALL HIGH ROUNDED ZERO..ARABIC SMALL HIGH MADDA\n06E7..06E8    ; Uncommon_Use                   # 1.1    [2] ARABIC SMALL HIGH YEH..ARABIC SMALL HIGH NOON\n06EA..06ED    ; Uncommon_Use                   # 1.1    [4] ARABIC EMPTY CENTRE LOW STOP..ARABIC SMALL LOW MEEM\n0897          ; Uncommon_Use                   # 16.0       ARABIC PEPET\n0898..089F    ; Uncommon_Use                   # 14.0   [8] ARABIC SMALL HIGH WORD AL-JUZ..ARABIC HALF MADDA OVER MADDA\n08B3..08B4    ; Uncommon_Use                   # 8.0    [2] ARABIC LETTER AIN WITH THREE DOTS BELOW..ARABIC LETTER KAF WITH DOT BELOW\n08CA..08D2    ; Uncommon_Use                   # 14.0   [9] ARABIC SMALL HIGH FARSI YEH..ARABIC LARGE ROUND DOT INSIDE CIRCLE BELOW\n08D3          ; Uncommon_Use                   # 11.0       ARABIC SMALL LOW WAW\n08D4..08E1    ; Uncommon_Use                   # 9.0   [14] ARABIC SMALL HIGH WORD AR-RUB..ARABIC SMALL HIGH SIGN SAFHA\n08E3          ; Uncommon_Use                   # 8.0        ARABIC TURNED DAMMA BELOW\n08E4..08FE    ; Uncommon_Use                   # 6.1   [27] ARABIC CURLY FATHA..ARABIC DAMMA WITH DOT\n08FF          ; Uncommon_Use                   # 7.0        ARABIC MARK SIDEWAYS NOON GHUNNA\n0900          ; Uncommon_Use                   # 5.2        DEVANAGARI SIGN INVERTED CANDRABINDU\n0955          ; Uncommon_Use                   # 5.2        DEVANAGARI VOWEL SIGN CANDRA LONG E\n0A51          ; Uncommon_Use                   # 5.1        GURMUKHI SIGN UDAAT\n0A75          ; Uncommon_Use                   # 5.1        GURMUKHI SIGN YAKASH\n0AF9          ; Uncommon_Use                   # 8.0        GUJARATI LETTER ZHA\n0B44          ; Uncommon_Use                   # 5.1        ORIYA VOWEL SIGN VOCALIC RR\n0B62..0B63    ; Uncommon_Use                   # 5.1    [2] ORIYA VOWEL SIGN VOCALIC L..ORIYA VOWEL SIGN VOCALIC LL\n0C5A          ; Uncommon_Use                   # 8.0        TELUGU LETTER RRRA\n0C62..0C63    ; Uncommon_Use                   # 5.1    [2] TELUGU VOWEL SIGN VOCALIC L..TELUGU VOWEL SIGN VOCALIC LL\n0D44          ; Uncommon_Use                   # 5.1        MALAYALAM VOWEL SIGN VOCALIC RR\n0D62..0D63    ; Uncommon_Use                   # 5.1    [2] MALAYALAM VOWEL SIGN VOCALIC L..MALAYALAM VOWEL SIGN VOCALIC LL\n0F39          ; Uncommon_Use                   # 2.0        TIBETAN MARK TSA -PHRU\n1AC1..1ACE    ; Uncommon_Use                   # 14.0  [14] COMBINING LEFT PARENTHESIS ABOVE LEFT..COMBINING LATIN SMALL LETTER INSULAR T\n1C89..1C8A    ; Uncommon_Use                   # 16.0   [2] CYRILLIC CAPITAL LETTER TJE..CYRILLIC SMALL LETTER TJE\n2054          ; Uncommon_Use                   # 4.0        INVERTED UNDERTIE\n2C68..2C6C    ; Uncommon_Use                   # 5.0    [5] LATIN SMALL LETTER H WITH DESCENDER..LATIN SMALL LETTER Z WITH DESCENDER\nA66F          ; Uncommon_Use                   # 5.1        COMBINING CYRILLIC VZMET\nA67C..A67D    ; Uncommon_Use                   # 5.1    [2] COMBINING CYRILLIC KAVYKA..COMBINING CYRILLIC PAYEROK\nA78B..A78C    ; Uncommon_Use                   # 5.1    [2] LATIN CAPITAL LETTER SALTILLO..LATIN SMALL LETTER SALTILLO\nA78F          ; Uncommon_Use                   # 8.0        LATIN LETTER SINOLOGICAL DOT\nA7B2..A7B7    ; Uncommon_Use                   # 8.0    [6] LATIN CAPITAL LETTER J WITH CROSSED-TAIL..LATIN SMALL LETTER OMEGA\nA7B8..A7B9    ; Uncommon_Use                   # 11.0   [2] LATIN CAPITAL LETTER U WITH STROKE..LATIN SMALL LETTER U WITH STROKE\nA7CB..A7CD    ; Uncommon_Use                   # 16.0   [3] LATIN CAPITAL LETTER RAMS HORN..LATIN SMALL LETTER S WITH DIAGONAL STROKE\nA7DA..A7DC    ; Uncommon_Use                   # 16.0   [3] LATIN CAPITAL LETTER LAMBDA..LATIN CAPITAL LETTER LAMBDA WITH STROKE\nAB60..AB63    ; Uncommon_Use                   # 8.0    [4] LATIN SMALL LETTER SAKHA YAT..LATIN SMALL LETTER UO\n10780         ; Uncommon_Use                   # 14.0       MODIFIER LETTER SMALL CAPITAL AA\n10EC2..10EC4  ; Uncommon_Use                   # 16.0   [3] ARABIC LETTER DAL WITH TWO DOTS VERTICALLY BELOW..ARABIC LETTER KAF WITH TWO DOTS VERTICALLY BELOW\n10EFC         ; Uncommon_Use                   # 16.0       ARABIC COMBINING ALEF OVERLAY\n10EFD..10EFF  ; Uncommon_Use                   # 15.0   [3] ARABIC SMALL LOW WORD SAKTA..ARABIC SMALL LOW WORD MADDA\n116D0..116E3  ; Uncommon_Use                   # 16.0  [20] MYANMAR PAO DIGIT ZERO..MYANMAR EASTERN PWO KAREN DIGIT NINE\n1AFF0..1AFF3  ; Uncommon_Use                   # 14.0   [4] KATAKANA LETTER MINNAN TONE-2..KATAKANA LETTER MINNAN TONE-5\n1AFF5..1AFFB  ; Uncommon_Use                   # 14.0   [7] KATAKANA LETTER MINNAN TONE-7..KATAKANA LETTER MINNAN NASALIZED TONE-5\n1AFFD..1AFFE  ; Uncommon_Use                   # 14.0   [2] KATAKANA LETTER MINNAN NASALIZED TONE-7..KATAKANA LETTER MINNAN NASALIZED TONE-8\n\n# Total code points: 346\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Code Blocks for Phags-Pa Script\nDESCRIPTION: Lists the Unicode code point ranges for the Phags-Pa script, categorizing characters by their types (Lo, Po) and providing character descriptions. Includes a total of 56 code points.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/Scripts.txt#2025-04-21_snippet_33\n\nLANGUAGE: unicode\nCODE:\n```\nA840..A873    ; Phags_Pa # Lo  [52] PHAGS-PA LETTER KA..PHAGS-PA LETTER CANDRABINDU\nA874..A877    ; Phags_Pa # Po   [4] PHAGS-PA SINGLE HEAD MARK..PHAGS-PA MARK DOUBLE SHAD\n\n# Total code points: 56\n```\n\n----------------------------------------\n\nTITLE: Defining Greek Character Case Mappings in Unicode\nDESCRIPTION: This snippet defines case mappings for Greek characters with PROSGEGRAMMENI and YPOGEGRAMMENI. It includes lowercase, uppercase, titlecase, and decomposition mappings for various Greek letters.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/SpecialCasing.txt#2025-04-21_snippet_5\n\nLANGUAGE: Unicode\nCODE:\n```\n1F80; 1F80; 1F88; 1F08 0399; # GREEK SMALL LETTER ALPHA WITH PSILI AND YPOGEGRAMMENI\n1F81; 1F81; 1F89; 1F09 0399; # GREEK SMALL LETTER ALPHA WITH DASIA AND YPOGEGRAMMENI\n1F82; 1F82; 1F8A; 1F0A 0399; # GREEK SMALL LETTER ALPHA WITH PSILI AND VARIA AND YPOGEGRAMMENI\n# ... (additional lines omitted for brevity)\n1FF3; 1FF3; 1FFC; 03A9 0399; # GREEK SMALL LETTER OMEGA WITH YPOGEGRAMMENI\n1FFC; 1FF3; 1FFC; 03A9 0399; # GREEK CAPITAL LETTER OMEGA WITH PROSGEGRAMMENI\n```\n\n----------------------------------------\n\nTITLE: Unicode Block Property Mapping for Script Systems\nDESCRIPTION: This data represents the mapping of abbreviated Unicode block codes to their full property names. The format for each line is 'blk; [abbreviated_name]; [full_name]' with optional alternative names following semicolons. These block definitions are used for Unicode character property lookups.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/PropertyValueAliases.txt#2025-04-21_snippet_7\n\nLANGUAGE: data\nCODE:\n```\nblk; Latin_Ext_D                      ; Latin_Extended_D\nblk; Latin_Ext_E                      ; Latin_Extended_E\nblk; Latin_Ext_F                      ; Latin_Extended_F\nblk; Latin_Ext_G                      ; Latin_Extended_G\nblk; Lepcha                           ; Lepcha\nblk; Letterlike_Symbols               ; Letterlike_Symbols\nblk; Limbu                            ; Limbu\nblk; Linear_A                         ; Linear_A\nblk; Linear_B_Ideograms               ; Linear_B_Ideograms\nblk; Linear_B_Syllabary               ; Linear_B_Syllabary\nblk; Lisu                             ; Lisu\nblk; Lisu_Sup                         ; Lisu_Supplement\nblk; Low_Surrogates                   ; Low_Surrogates\nblk; Lycian                           ; Lycian\nblk; Lydian                           ; Lydian\nblk; Mahajani                         ; Mahajani\nblk; Mahjong                          ; Mahjong_Tiles\nblk; Makasar                          ; Makasar\nblk; Malayalam                        ; Malayalam\nblk; Mandaic                          ; Mandaic\nblk; Manichaean                       ; Manichaean\nblk; Marchen                          ; Marchen\nblk; Masaram_Gondi                    ; Masaram_Gondi\nblk; Math_Alphanum                    ; Mathematical_Alphanumeric_Symbols\nblk; Math_Operators                   ; Mathematical_Operators\nblk; Mayan_Numerals                   ; Mayan_Numerals\nblk; Medefaidrin                      ; Medefaidrin\nblk; Meetei_Mayek                     ; Meetei_Mayek\nblk; Meetei_Mayek_Ext                 ; Meetei_Mayek_Extensions\nblk; Mende_Kikakui                    ; Mende_Kikakui\nblk; Meroitic_Cursive                 ; Meroitic_Cursive\nblk; Meroitic_Hieroglyphs             ; Meroitic_Hieroglyphs\nblk; Miao                             ; Miao\nblk; Misc_Arrows                      ; Miscellaneous_Symbols_And_Arrows\nblk; Misc_Math_Symbols_A              ; Miscellaneous_Mathematical_Symbols_A\nblk; Misc_Math_Symbols_B              ; Miscellaneous_Mathematical_Symbols_B\nblk; Misc_Pictographs                 ; Miscellaneous_Symbols_And_Pictographs\nblk; Misc_Symbols                     ; Miscellaneous_Symbols\nblk; Misc_Technical                   ; Miscellaneous_Technical\nblk; Modi                             ; Modi\nblk; Modifier_Letters                 ; Spacing_Modifier_Letters\nblk; Modifier_Tone_Letters            ; Modifier_Tone_Letters\nblk; Mongolian                        ; Mongolian\nblk; Mongolian_Sup                    ; Mongolian_Supplement\nblk; Mro                              ; Mro\nblk; Multani                          ; Multani\nblk; Music                            ; Musical_Symbols\nblk; Myanmar                          ; Myanmar\nblk; Myanmar_Ext_A                    ; Myanmar_Extended_A\nblk; Myanmar_Ext_B                    ; Myanmar_Extended_B\nblk; Myanmar_Ext_C                    ; Myanmar_Extended_C\nblk; Nabataean                        ; Nabataean\nblk; Nag_Mundari                      ; Nag_Mundari\nblk; Nandinagari                      ; Nandinagari\nblk; NB                               ; No_Block\nblk; New_Tai_Lue                      ; New_Tai_Lue\nblk; Newa                             ; Newa\nblk; NKo                              ; NKo\nblk; Number_Forms                     ; Number_Forms\nblk; Nushu                            ; Nushu\nblk; Nyiakeng_Puachue_Hmong           ; Nyiakeng_Puachue_Hmong\nblk; OCR                              ; Optical_Character_Recognition\nblk; Ogham                            ; Ogham\nblk; Ol_Chiki                         ; Ol_Chiki\nblk; Ol_Onal                          ; Ol_Onal\nblk; Old_Hungarian                    ; Old_Hungarian\nblk; Old_Italic                       ; Old_Italic\nblk; Old_North_Arabian                ; Old_North_Arabian\nblk; Old_Permic                       ; Old_Permic\nblk; Old_Persian                      ; Old_Persian\nblk; Old_Sogdian                      ; Old_Sogdian\nblk; Old_South_Arabian                ; Old_South_Arabian\nblk; Old_Turkic                       ; Old_Turkic\nblk; Old_Uyghur                       ; Old_Uyghur\nblk; Oriya                            ; Oriya\nblk; Ornamental_Dingbats              ; Ornamental_Dingbats\nblk; Osage                            ; Osage\nblk; Osmanya                          ; Osmanya\nblk; Ottoman_Siyaq_Numbers            ; Ottoman_Siyaq_Numbers\nblk; Pahawh_Hmong                     ; Pahawh_Hmong\nblk; Palmyrene                        ; Palmyrene\nblk; Pau_Cin_Hau                      ; Pau_Cin_Hau\nblk; Phags_Pa                         ; Phags_Pa\nblk; Phaistos                         ; Phaistos_Disc\nblk; Phoenician                       ; Phoenician\nblk; Phonetic_Ext                     ; Phonetic_Extensions\nblk; Phonetic_Ext_Sup                 ; Phonetic_Extensions_Supplement\nblk; Playing_Cards                    ; Playing_Cards\nblk; Psalter_Pahlavi                  ; Psalter_Pahlavi\nblk; PUA                              ; Private_Use_Area                 ; Private_Use\nblk; Punctuation                      ; General_Punctuation\nblk; Rejang                           ; Rejang\nblk; Rumi                             ; Rumi_Numeral_Symbols\nblk; Runic                            ; Runic\nblk; Samaritan                        ; Samaritan\nblk; Saurashtra                       ; Saurashtra\nblk; Sharada                          ; Sharada\nblk; Shavian                          ; Shavian\nblk; Shorthand_Format_Controls        ; Shorthand_Format_Controls\nblk; Siddham                          ; Siddham\nblk; Sinhala                          ; Sinhala\nblk; Sinhala_Archaic_Numbers          ; Sinhala_Archaic_Numbers\nblk; Small_Forms                      ; Small_Form_Variants\nblk; Small_Kana_Ext                   ; Small_Kana_Extension\nblk; Sogdian                          ; Sogdian\nblk; Sora_Sompeng                     ; Sora_Sompeng\nblk; Soyombo                          ; Soyombo\nblk; Specials                         ; Specials\nblk; Sundanese                        ; Sundanese\nblk; Sundanese_Sup                    ; Sundanese_Supplement\nblk; Sunuwar                          ; Sunuwar\nblk; Sup_Arrows_A                     ; Supplemental_Arrows_A\nblk; Sup_Arrows_B                     ; Supplemental_Arrows_B\nblk; Sup_Arrows_C                     ; Supplemental_Arrows_C\nblk; Sup_Math_Operators               ; Supplemental_Mathematical_Operators\nblk; Sup_PUA_A                        ; Supplementary_Private_Use_Area_A\nblk; Sup_PUA_B                        ; Supplementary_Private_Use_Area_B\nblk; Sup_Punctuation                  ; Supplemental_Punctuation\nblk; Sup_Symbols_And_Pictographs      ; Supplemental_Symbols_And_Pictographs\nblk; Super_And_Sub                    ; Superscripts_And_Subscripts\nblk; Sutton_SignWriting               ; Sutton_SignWriting\nblk; Syloti_Nagri                     ; Syloti_Nagri\nblk; Symbols_And_Pictographs_Ext_A    ; Symbols_And_Pictographs_Extended_A\nblk; Symbols_For_Legacy_Computing     ; Symbols_For_Legacy_Computing\nblk; Symbols_For_Legacy_Computing_Sup ; Symbols_For_Legacy_Computing_Supplement\nblk; Syriac                           ; Syriac\nblk; Syriac_Sup                       ; Syriac_Supplement\nblk; Tagalog                          ; Tagalog\nblk; Tagbanwa                         ; Tagbanwa\nblk; Tags                             ; Tags\nblk; Tai_Le                           ; Tai_Le\nblk; Tai_Tham                         ; Tai_Tham\nblk; Tai_Viet                         ; Tai_Viet\nblk; Tai_Xuan_Jing                    ; Tai_Xuan_Jing_Symbols\nblk; Takri                            ; Takri\nblk; Tamil                            ; Tamil\nblk; Tamil_Sup                        ; Tamil_Supplement\nblk; Tangsa                           ; Tangsa\nblk; Tangut                           ; Tangut\nblk; Tangut_Components                ; Tangut_Components\nblk; Tangut_Sup                       ; Tangut_Supplement\nblk; Telugu                           ; Telugu\nblk; Thaana                           ; Thaana\nblk; Thai                             ; Thai\nblk; Tibetan                          ; Tibetan\nblk; Tifinagh                         ; Tifinagh\nblk; Tirhuta                          ; Tirhuta\nblk; Todhri                           ; Todhri\nblk; Toto                             ; Toto\nblk; Transport_And_Map                ; Transport_And_Map_Symbols\nblk; Tulu_Tigalari                    ; Tulu_Tigalari\nblk; UCAS                             ; Unified_Canadian_Aboriginal_Syllabics; Canadian_Syllabics\nblk; UCAS_Ext                         ; Unified_Canadian_Aboriginal_Syllabics_Extended\nblk; UCAS_Ext_A                       ; Unified_Canadian_Aboriginal_Syllabics_Extended_A\nblk; Ugaritic                         ; Ugaritic\nblk; Vai                              ; Vai\nblk; Vedic_Ext                        ; Vedic_Extensions\nblk; Vertical_Forms                   ; Vertical_Forms\nblk; Vithkuqi                         ; Vithkuqi\nblk; VS                               ; Variation_Selectors\nblk; VS_Sup                           ; Variation_Selectors_Supplement\nblk; Wancho                           ; Wancho\nblk; Warang_Citi                      ; Warang_Citi\nblk; Yezidi                           ; Yezidi\nblk; Yi_Radicals                      ; Yi_Radicals\nblk; Yi_Syllables                     ; Yi_Syllables\nblk; Yijing                           ; Yijing_Hexagram_Symbols\nblk; Zanabazar_Square                 ; Zanabazar_Square\nblk; Znamenny_Music                   ; Znamenny_Musical_Notation\n```\n\n----------------------------------------\n\nTITLE: Oriya Unicode Block Definition\nDESCRIPTION: Defines the Unicode codepoint ranges for Oriya script characters including letters, vowel signs, digits and fractions. Total codepoints: 91\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/Scripts.txt#2025-04-21_snippet_15\n\nLANGUAGE: Unicode\nCODE:\n```\n0B01          ; Oriya # Mn       ORIYA SIGN CANDRABINDU\n0B02..0B03    ; Oriya # Mc   [2] ORIYA SIGN ANUSVARA..ORIYA SIGN VISARGA\n[...remaining Oriya ranges...]\n```\n\n----------------------------------------\n\nTITLE: Defining Not_XID Unicode Characters\nDESCRIPTION: This snippet defines Unicode code points that are not valid for use as identifiers (Not_XID). It covers various emoji and special characters, including their Unicode versions.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/IdentifierType.txt#2025-04-21_snippet_33\n\nLANGUAGE: Unicode\nCODE:\n```\n1FA83..1FA86  ; Not_XID                        # 13.0   [4] BOOMERANG..NESTING DOLLS\n1FA87..1FA88  ; Not_XID                        # 15.0   [2] MARACAS..FLUTE\n1FA89         ; Not_XID                        # 16.0       HARP\n1FA8F         ; Not_XID                        # 16.0       SHOVEL\n1FA90..1FA95  ; Not_XID                        # 12.0   [6] RINGED PLANET..BANJO\n1FA96..1FAA8  ; Not_XID                        # 13.0  [19] MILITARY HELMET..ROCK\n1FAA9..1FAAC  ; Not_XID                        # 14.0   [4] MIRROR BALL..HAMSA\n1FAAD..1FAAF  ; Not_XID                        # 15.0   [3] FOLDING HAND FAN..KHANDA\n1FAB0..1FAB6  ; Not_XID                        # 13.0   [7] FLY..FEATHER\n1FAB7..1FABA  ; Not_XID                        # 14.0   [4] LOTUS..NEST WITH EGGS\n1FABB..1FABD  ; Not_XID                        # 15.0   [3] HYACINTH..WING\n1FABE         ; Not_XID                        # 16.0       LEAFLESS TREE\n1FABF         ; Not_XID                        # 15.0       GOOSE\n1FAC0..1FAC2  ; Not_XID                        # 13.0   [3] ANATOMICAL HEART..PEOPLE HUGGING\n1FAC3..1FAC5  ; Not_XID                        # 14.0   [3] PREGNANT MAN..PERSON WITH CROWN\n1FAC6         ; Not_XID                        # 16.0       FINGERPRINT\n1FACE..1FACF  ; Not_XID                        # 15.0   [2] MOOSE..DONKEY\n1FAD0..1FAD6  ; Not_XID                        # 13.0   [7] BLUEBERRIES..TEAPOT\n1FAD7..1FAD9  ; Not_XID                        # 14.0   [3] POURING LIQUID..JAR\n1FADA..1FADB  ; Not_XID                        # 15.0   [2] GINGER ROOT..PEA POD\n1FADC         ; Not_XID                        # 16.0       ROOT VEGETABLE\n1FADF         ; Not_XID                        # 16.0       SPLATTER\n1FAE0..1FAE7  ; Not_XID                        # 14.0   [8] MELTING FACE..BUBBLES\n1FAE8         ; Not_XID                        # 15.0       SHAKING FACE\n1FAE9         ; Not_XID                        # 16.0       FACE WITH BAGS UNDER EYES\n1FAF0..1FAF6  ; Not_XID                        # 14.0   [7] HAND WITH INDEX FINGER AND THUMB CROSSED..HEART HANDS\n1FAF7..1FAF8  ; Not_XID                        # 15.0   [2] LEFTWARDS PUSHING HAND..RIGHTWARDS PUSHING HAND\n1FB00..1FB92  ; Not_XID                        # 13.0 [147] BLOCK SEXTANT-1..UPPER HALF INVERSE MEDIUM SHADE AND LOWER HALF BLOCK\n1FB94..1FBCA  ; Not_XID                        # 13.0  [55] LEFT HALF INVERSE MEDIUM SHADE AND RIGHT HALF BLOCK..WHITE UP-POINTING CHEVRON\n1FBCB..1FBEF  ; Not_XID                        # 16.0  [37] WHITE CROSS MARK..TOP LEFT JUSTIFIED LOWER RIGHT QUARTER BLACK CIRCLE\n```\n\n----------------------------------------\n\nTITLE: Defining Old Sogdian Script Unicode Block\nDESCRIPTION: Defines the Unicode code point ranges for the Old Sogdian script. Includes letters, numbers, and ligatures with their corresponding Unicode character categories.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/Scripts.txt#2025-04-21_snippet_85\n\nLANGUAGE: unicode\nCODE:\n```\n10F00..10F1C  ; Old_Sogdian # Lo  [29] OLD SOGDIAN LETTER ALEPH..OLD SOGDIAN LETTER FINAL TAW WITH VERTICAL TAIL\n10F1D..10F26  ; Old_Sogdian # No  [10] OLD SOGDIAN NUMBER ONE..OLD SOGDIAN FRACTION ONE HALF\n10F27         ; Old_Sogdian # Lo       OLD SOGDIAN LIGATURE AYIN-DALETH\n\n# Total code points: 40\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Character Ranges for Thai Script\nDESCRIPTION: This snippet defines the Unicode character ranges for the Thai script, including various letter types, vowel signs, digits, and special symbols.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/Scripts.txt#2025-04-21_snippet_21\n\nLANGUAGE: Unicode\nCODE:\n```\n0E01..0E30    ; Thai # Lo  [48] THAI CHARACTER KO KAI..THAI CHARACTER SARA A\n0E31          ; Thai # Mn       THAI CHARACTER MAI HAN-AKAT\n0E32..0E33    ; Thai # Lo   [2] THAI CHARACTER SARA AA..THAI CHARACTER SARA AM\n0E34..0E3A    ; Thai # Mn   [7] THAI CHARACTER SARA I..THAI CHARACTER PHINTHU\n0E40..0E45    ; Thai # Lo   [6] THAI CHARACTER SARA E..THAI CHARACTER LAKKHANGYAO\n0E46          ; Thai # Lm       THAI CHARACTER MAIYAMOK\n0E47..0E4E    ; Thai # Mn   [8] THAI CHARACTER MAITAIKHU..THAI CHARACTER YAMAKKAN\n0E4F          ; Thai # Po       THAI CHARACTER FONGMAN\n0E50..0E59    ; Thai # Nd  [10] THAI DIGIT ZERO..THAI DIGIT NINE\n0E5A..0E5B    ; Thai # Po   [2] THAI CHARACTER ANGKHANKHU..THAI CHARACTER KHOMUT\n```\n\n----------------------------------------\n\nTITLE: Unicode Range Definitions for Not_NFKC Characters\nDESCRIPTION: Defines ranges of Unicode code points that are not normalized in NFKC form. Each line specifies a range or single code point, followed by the property name 'Not_NFKC', Unicode version, and character descriptions.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/IdentifierType.txt#2025-04-21_snippet_35\n\nLANGUAGE: unicode\nCODE:\n```\n2100..2103    ; Not_NFKC                       # 1.1    [4] ACCOUNT OF..DEGREE CELSIUS\n2105..2107    ; Not_NFKC                       # 1.1    [3] CARE OF..EULER CONSTANT\n2109..2113    ; Not_NFKC                       # 1.1   [11] DEGREE FAHRENHEIT..SCRIPT SMALL L\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Character Ranges for Armenian Script\nDESCRIPTION: This snippet defines Unicode character ranges for the Armenian script, including capital and small letters, punctuation marks, and special symbols used in Armenian writing.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/Scripts.txt#2025-04-21_snippet_9\n\nLANGUAGE: Unicode\nCODE:\n```\n0531..0556    ; Armenian # L&  [38] ARMENIAN CAPITAL LETTER AYB..ARMENIAN CAPITAL LETTER FEH\n0559          ; Armenian # Lm       ARMENIAN MODIFIER LETTER LEFT HALF RING\n055A..055F    ; Armenian # Po   [6] ARMENIAN APOSTROPHE..ARMENIAN ABBREVIATION MARK\n0560..0588    ; Armenian # L&  [41] ARMENIAN SMALL LETTER TURNED AYB..ARMENIAN SMALL LETTER YI WITH STROKE\n0589          ; Armenian # Po       ARMENIAN FULL STOP\n058A          ; Armenian # Pd       ARMENIAN HYPHEN\n058D..058E    ; Armenian # So   [2] RIGHT-FACING ARMENIAN ETERNITY SIGN..LEFT-FACING ARMENIAN ETERNITY SIGN\n058F          ; Armenian # Sc       ARMENIAN DRAM SIGN\nFB13..FB17    ; Armenian # L&   [5] ARMENIAN SMALL LIGATURE MEN NOW..ARMENIAN SMALL LIGATURE MEN XEH\n```\n\n----------------------------------------\n\nTITLE: Defining Bidi_Mirrored Property Values in Unicode\nDESCRIPTION: Specifies the aliases for Bidi_Mirrored (Bidi_M) property values. It defines 'N' (No) and 'Y' (Yes) as the primary aliases, with additional aliases 'F' (False) and 'T' (True).\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/PropertyValueAliases.txt#2025-04-21_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\nBidi_M; N                             ; No                               ; F                                ; False\nBidi_M; Y                             ; Yes                              ; T                                ; True\n```\n\n----------------------------------------\n\nTITLE: East Asian Width Property Definitions\nDESCRIPTION: Defines the East Asian Width property values used for determining character width in East Asian text layout. Includes classifications like Ambiguous, Fullwidth, Halfwidth, etc.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/PropertyValueAliases.txt#2025-04-21_snippet_10\n\nLANGUAGE: properties\nCODE:\n```\nea ; A                                ; Ambiguous\nea ; F                                ; Fullwidth\nea ; H                                ; Halfwidth\nea ; N                                ; Neutral\nea ; Na                               ; Narrow\nea ; W                                ; Wide\n```\n\n----------------------------------------\n\nTITLE: Unicode Script Property Header Information\nDESCRIPTION: Header metadata for the Unicode Character Database Script property definitions file, including copyright information, version number, and references to relevant documentation.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/Scripts.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# Scripts-16.0.0.txt\n# Date: 2024-04-30, 21:48:40 GMT\n# © 2024 Unicode®, Inc.\n# Unicode and the Unicode Logo are registered trademarks of Unicode, Inc. in the U.S. and other countries.\n# For terms of use and license, see https://www.unicode.org/terms_of_use.html\n#\n# Unicode Character Database\n#   For documentation, see https://www.unicode.org/reports/tr44/\n# For more information, see:\n#   UAX #24, Unicode Script Property: https://www.unicode.org/reports/tr24/\n#     Especially the sections:\n#       https://www.unicode.org/reports/tr24/#Assignment_Script_Values\n#       https://www.unicode.org/reports/tr24/#Assignment_ScriptX_Values\n```\n\n----------------------------------------\n\nTITLE: Assertive Boolean Operations in Elixir\nDESCRIPTION: Refactored version of the previous example, using the 'and' operator to assert that both operands are booleans, improving code clarity.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/anti-patterns/code-anti-patterns.md#2025-04-21_snippet_18\n\nLANGUAGE: elixir\nCODE:\n```\nif is_binary(name) and is_integer(age) do\n  # ...\nelse\n  # ...\nend\n```\n\n----------------------------------------\n\nTITLE: Dynamic Atom Creation Anti-Pattern Example\nDESCRIPTION: Demonstrates risky pattern of converting arbitrary strings to atoms which could lead to memory issues.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/anti-patterns/code-anti-patterns.md#2025-04-21_snippet_6\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule MyRequestHandler do\n  def parse(%{\"status\" => status, \"message\" => message} = _payload) do\n    %{status: String.to_atom(status), message: message}\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Structural Comparison in Elixir\nDESCRIPTION: Shows how to perform structural comparisons between different data types using comparison operators.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/basic-types.md#2025-04-21_snippet_11\n\nLANGUAGE: elixir\nCODE:\n```\niex> 1 == 1\ntrue\niex> 1 != 2\ntrue\niex> 1 < 2\ntrue\niex> 1 === 1.0\nfalse\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Character Ranges for Tangsa Script\nDESCRIPTION: This snippet defines the Unicode character ranges for the Tangsa script. It includes 79 letter characters (Lo) and 10 numeric digit characters (Nd).\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/Scripts.txt#2025-04-21_snippet_96\n\nLANGUAGE: Unicode\nCODE:\n```\n16A70..16ABE  ; Tangsa # Lo  [79] TANGSA LETTER OZ..TANGSA LETTER ZA\n16AC0..16AC9  ; Tangsa # Nd  [10] TANGSA DIGIT ZERO..TANGSA DIGIT NINE\n\n# Total code points: 89\n```\n\n----------------------------------------\n\nTITLE: Unicode Deprecated Code Point Definitions\nDESCRIPTION: Defines Unicode code points that are deprecated and should not be used in new documents. Includes various letters, symbols, and formatting characters.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/IdentifierType.txt#2025-04-21_snippet_39\n\nLANGUAGE: unicode-data\nCODE:\n```\n0149          ; Deprecated                     # 1.1        LATIN SMALL LETTER N PRECEDED BY APOSTROPHE\n0673          ; Deprecated                     # 1.1        ARABIC LETTER ALEF WITH WAVY HAMZA BELOW\n# Total code points: 15\n```\n\n----------------------------------------\n\nTITLE: Using Integer Separators in iodata in Elixir\nDESCRIPTION: This snippet shows how integers can be used in iodata to represent separators, in this case using the ASCII value of a comma.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/io-and-the-file-system.md#2025-04-21_snippet_10\n\nLANGUAGE: elixir\nCODE:\n```\nIO.puts([\"apple\", ?,, \"banana\", ?,, \"lemon\"])\n```\n\n----------------------------------------\n\nTITLE: Defining a Struct with Many Fields in Elixir\nDESCRIPTION: An example of defining a struct with 35 fields, which can lead to performance issues due to changes in internal representation.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/anti-patterns/code-anti-patterns.md#2025-04-21_snippet_19\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule MyExample do\n  defstruct [\n    :field1,\n    :field2,\n    ...,\n    :field35\n  ]\nend\n```\n\n----------------------------------------\n\nTITLE: Unquoting a list with unquote_splicing in Elixir\nDESCRIPTION: This snippet showcases the use of `unquote_splicing/1` to inject the elements of a list into another list within a quoted expression.  Unlike `unquote/1`, `unquote_splicing/1` inserts the list's elements directly into the target list. The elements of `inner` are spliced into the list `[1, 2, unquote_splicing(inner), 6]`.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/meta-programming/quote-and-unquote.md#2025-04-21_snippet_8\n\nLANGUAGE: elixir\nCODE:\n```\niex> inner = [3, 4, 5]\niex> Macro.to_string(quote do: [1, 2, unquote_splicing(inner), 6])\n\"[1, 2, 3, 4, 5, 6]\"\n```\n\n----------------------------------------\n\nTITLE: Defining Join Control Properties in Unicode\nDESCRIPTION: Lists possible values for the Join Control (Join_C) property in Unicode. This binary property identifies characters that affect the joining behavior of surrounding characters and is used in text processing and rendering.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/PropertyValueAliases.txt#2025-04-21_snippet_14\n\nLANGUAGE: markup\nCODE:\n```\n# Join_Control (Join_C)\n\nJoin_C; N                             ; No                               ; F                                ; False\nJoin_C; Y                             ; Yes                              ; T                                ; True\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Boolean Properties\nDESCRIPTION: Specifies the possible values for various boolean Unicode properties such as Logical_Order_Exception, Lowercase, Math, and others.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/PropertyValueAliases.txt#2025-04-21_snippet_18\n\nLANGUAGE: Unicode\nCODE:\n```\nLOE; N                                ; No                               ; F                                ; False\nLOE; Y                                ; Yes                              ; T                                ; True\n\nLower; N                              ; No                               ; F                                ; False\nLower; Y                              ; Yes                              ; T                                ; True\n\nMath; N                               ; No                               ; F                                ; False\nMath; Y                               ; Yes                              ; T                                ; True\n\nMCM; N                                ; No                               ; F                                ; False\nMCM; Y                                ; Yes                              ; T                                ; True\n```\n\n----------------------------------------\n\nTITLE: Defining Bidi_Control Characters in Unicode\nDESCRIPTION: This snippet lists Unicode code points classified as Bidi_Control. These characters are used for controlling bidirectional text layout.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/PropList.txt#2025-04-21_snippet_1\n\nLANGUAGE: Unicode\nCODE:\n```\n061C          ; Bidi_Control # Cf       ARABIC LETTER MARK\n200E..200F    ; Bidi_Control # Cf   [2] LEFT-TO-RIGHT MARK..RIGHT-TO-LEFT MARK\n202A..202E    ; Bidi_Control # Cf   [5] LEFT-TO-RIGHT EMBEDDING..RIGHT-TO-LEFT OVERRIDE\n2066..2069    ; Bidi_Control # Cf   [4] LEFT-TO-RIGHT ISOLATE..POP DIRECTIONAL ISOLATE\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Other_Lowercase Code Points\nDESCRIPTION: This snippet defines code point ranges for characters with the Other_Lowercase property in Unicode. These include characters like ordinal indicators, modifier letters, subscripts, superscripts, and circled lowercase letters that have lowercase properties but don't fit in standard lowercase categories.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/PropList.txt#2025-04-21_snippet_18\n\nLANGUAGE: unicode\nCODE:\n```\n00AA          ; Other_Lowercase # Lo       FEMININE ORDINAL INDICATOR\n00BA          ; Other_Lowercase # Lo       MASCULINE ORDINAL INDICATOR\n02B0..02B8    ; Other_Lowercase # Lm   [9] MODIFIER LETTER SMALL H..MODIFIER LETTER SMALL Y\n02C0..02C1    ; Other_Lowercase # Lm   [2] MODIFIER LETTER GLOTTAL STOP..MODIFIER LETTER REVERSED GLOTTAL STOP\n02E0..02E4    ; Other_Lowercase # Lm   [5] MODIFIER LETTER SMALL GAMMA..MODIFIER LETTER SMALL REVERSED GLOTTAL STOP\n0345          ; Other_Lowercase # Mn       COMBINING GREEK YPOGEGRAMMENI\n037A          ; Other_Lowercase # Lm       GREEK YPOGEGRAMMENI\n10FC          ; Other_Lowercase # Lm       MODIFIER LETTER GEORGIAN NAR\n1D2C..1D6A    ; Other_Lowercase # Lm  [63] MODIFIER LETTER CAPITAL A..GREEK SUBSCRIPT SMALL LETTER CHI\n1D78          ; Other_Lowercase # Lm       MODIFIER LETTER CYRILLIC EN\n1D9B..1DBF    ; Other_Lowercase # Lm  [37] MODIFIER LETTER SMALL TURNED ALPHA..MODIFIER LETTER SMALL THETA\n2071          ; Other_Lowercase # Lm       SUPERSCRIPT LATIN SMALL LETTER I\n207F          ; Other_Lowercase # Lm       SUPERSCRIPT LATIN SMALL LETTER N\n2090..209C    ; Other_Lowercase # Lm  [13] LATIN SUBSCRIPT SMALL LETTER A..LATIN SUBSCRIPT SMALL LETTER T\n2170..217F    ; Other_Lowercase # Nl  [16] SMALL ROMAN NUMERAL ONE..SMALL ROMAN NUMERAL ONE THOUSAND\n24D0..24E9    ; Other_Lowercase # So  [26] CIRCLED LATIN SMALL LETTER A..CIRCLED LATIN SMALL LETTER Z\n2C7C..2C7D    ; Other_Lowercase # Lm   [2] LATIN SUBSCRIPT SMALL LETTER J..MODIFIER LETTER CAPITAL V\nA69C..A69D    ; Other_Lowercase # Lm   [2] MODIFIER LETTER CYRILLIC HARD SIGN..MODIFIER LETTER CYRILLIC SOFT SIGN\nA770          ; Other_Lowercase # Lm       MODIFIER LETTER US\nA7F2..A7F4    ; Other_Lowercase # Lm   [3] MODIFIER LETTER CAPITAL C..MODIFIER LETTER CAPITAL Q\nA7F8..A7F9    ; Other_Lowercase # Lm   [2] MODIFIER LETTER CAPITAL H WITH STROKE..MODIFIER LETTER SMALL LIGATURE OE\nAB5C..AB5F    ; Other_Lowercase # Lm   [4] MODIFIER LETTER SMALL HENG..MODIFIER LETTER SMALL U WITH LEFT HOOK\nAB69          ; Other_Lowercase # Lm       MODIFIER LETTER SMALL TURNED W\n10780         ; Other_Lowercase # Lm       MODIFIER LETTER SMALL CAPITAL AA\n10783..10785  ; Other_Lowercase # Lm   [3] MODIFIER LETTER SMALL AE..MODIFIER LETTER SMALL B WITH HOOK\n10787..107B0  ; Other_Lowercase # Lm  [42] MODIFIER LETTER SMALL DZ DIGRAPH..MODIFIER LETTER SMALL V WITH RIGHT HOOK\n107B2..107BA  ; Other_Lowercase # Lm   [9] MODIFIER LETTER SMALL CAPITAL Y..MODIFIER LETTER SMALL S WITH CURL\n1E030..1E06D  ; Other_Lowercase # Lm  [62] MODIFIER LETTER CYRILLIC SMALL A..MODIFIER LETTER CYRILLIC SMALL STRAIGHT U WITH STROKE\n\n# Total code points: 311\n```\n\n----------------------------------------\n\nTITLE: Defining Case Mappings for Latin Ligatures\nDESCRIPTION: Specifies case mappings for various Latin ligatures, including ff, fi, fl, ffi, ffl, long s t, and st.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/SpecialCasing.txt#2025-04-21_snippet_2\n\nLANGUAGE: Unicode\nCODE:\n```\nFB00; FB00; 0046 0066; 0046 0046; # LATIN SMALL LIGATURE FF\nFB01; FB01; 0046 0069; 0046 0049; # LATIN SMALL LIGATURE FI\nFB02; FB02; 0046 006C; 0046 004C; # LATIN SMALL LIGATURE FL\nFB03; FB03; 0046 0066 0069; 0046 0046 0049; # LATIN SMALL LIGATURE FFI\nFB04; FB04; 0046 0066 006C; 0046 0046 004C; # LATIN SMALL LIGATURE FFL\nFB05; FB05; 0053 0074; 0053 0054; # LATIN SMALL LIGATURE LONG S T\nFB06; FB06; 0053 0074; 0053 0054; # LATIN SMALL LIGATURE ST\n```\n\n----------------------------------------\n\nTITLE: Total Count of Terminal Punctuation Code Points\nDESCRIPTION: This line indicates the total number of Unicode code points defined in the Terminal_Punctuation category across the entire Unicode specification.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/PropList.txt#2025-04-21_snippet_7\n\nLANGUAGE: plain text\nCODE:\n```\n# Total code points: 291\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Other_Uppercase Code Points\nDESCRIPTION: This snippet defines code point ranges for characters with the Other_Uppercase property in Unicode. These include Roman numerals, circled capital letters, and various squared or negative circled Latin capital letters used for special presentation but with uppercase characteristics.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/PropList.txt#2025-04-21_snippet_19\n\nLANGUAGE: unicode\nCODE:\n```\n2160..216F    ; Other_Uppercase # Nl  [16] ROMAN NUMERAL ONE..ROMAN NUMERAL ONE THOUSAND\n24B6..24CF    ; Other_Uppercase # So  [26] CIRCLED LATIN CAPITAL LETTER A..CIRCLED LATIN CAPITAL LETTER Z\n1F130..1F149  ; Other_Uppercase # So  [26] SQUARED LATIN CAPITAL LETTER A..SQUARED LATIN CAPITAL LETTER Z\n1F150..1F169  ; Other_Uppercase # So  [26] NEGATIVE CIRCLED LATIN CAPITAL LETTER A..NEGATIVE CIRCLED LATIN CAPITAL LETTER Z\n1F170..1F189  ; Other_Uppercase # So  [26] NEGATIVE SQUARED LATIN CAPITAL LETTER A..NEGATIVE SQUARED LATIN CAPITAL LETTER Z\n\n# Total code points: 120\n```\n\n----------------------------------------\n\nTITLE: Defining Case Mappings for Characters without Uppercase Precomposed Forms\nDESCRIPTION: Specifies case mappings for various characters that do not have corresponding uppercase precomposed characters, including Latin, Greek, and diacritical combinations.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/SpecialCasing.txt#2025-04-21_snippet_4\n\nLANGUAGE: Unicode\nCODE:\n```\n0149; 0149; 02BC 004E; 02BC 004E; # LATIN SMALL LETTER N PRECEDED BY APOSTROPHE\n0390; 0390; 0399 0308 0301; 0399 0308 0301; # GREEK SMALL LETTER IOTA WITH DIALYTIKA AND TONOS\n03B0; 03B0; 03A5 0308 0301; 03A5 0308 0301; # GREEK SMALL LETTER UPSILON WITH DIALYTIKA AND TONOS\n01F0; 01F0; 004A 030C; 004A 030C; # LATIN SMALL LETTER J WITH CARON\n1E96; 1E96; 0048 0331; 0048 0331; # LATIN SMALL LETTER H WITH LINE BELOW\n1E97; 1E97; 0054 0308; 0054 0308; # LATIN SMALL LETTER T WITH DIAERESIS\n1E98; 1E98; 0057 030A; 0057 030A; # LATIN SMALL LETTER W WITH RING ABOVE\n1E99; 1E99; 0059 030A; 0059 030A; # LATIN SMALL LETTER Y WITH RING ABOVE\n1E9A; 1E9A; 0041 02BE; 0041 02BE; # LATIN SMALL LETTER A WITH RIGHT HALF RING\n1F50; 1F50; 03A5 0313; 03A5 0313; # GREEK SMALL LETTER UPSILON WITH PSILI\n1F52; 1F52; 03A5 0313 0300; 03A5 0313 0300; # GREEK SMALL LETTER UPSILON WITH PSILI AND VARIA\n1F54; 1F54; 03A5 0313 0301; 03A5 0313 0301; # GREEK SMALL LETTER UPSILON WITH PSILI AND OXIA\n1F56; 1F56; 03A5 0313 0342; 03A5 0313 0342; # GREEK SMALL LETTER UPSILON WITH PSILI AND PERISPOMENI\n1FB6; 1FB6; 0391 0342; 0391 0342; # GREEK SMALL LETTER ALPHA WITH PERISPOMENI\n1FC6; 1FC6; 0397 0342; 0397 0342; # GREEK SMALL LETTER ETA WITH PERISPOMENI\n1FD2; 1FD2; 0399 0308 0300; 0399 0308 0300; # GREEK SMALL LETTER IOTA WITH DIALYTIKA AND VARIA\n1FD3; 1FD3; 0399 0308 0301; 0399 0308 0301; # GREEK SMALL LETTER IOTA WITH DIALYTIKA AND OXIA\n1FD6; 1FD6; 0399 0342; 0399 0342; # GREEK SMALL LETTER IOTA WITH PERISPOMENI\n1FD7; 1FD7; 0399 0308 0342; 0399 0308 0342; # GREEK SMALL LETTER IOTA WITH DIALYTIKA AND PERISPOMENI\n1FE2; 1FE2; 03A5 0308 0300; 03A5 0308 0300; # GREEK SMALL LETTER UPSILON WITH DIALYTIKA AND VARIA\n1FE3; 1FE3; 03A5 0308 0301; 03A5 0308 0301; # GREEK SMALL LETTER UPSILON WITH DIALYTIKA AND OXIA\n1FE4; 1FE4; 03A1 0313; 03A1 0313; # GREEK SMALL LETTER RHO WITH PSILI\n1FE6; 1FE6; 03A5 0342; 03A5 0342; # GREEK SMALL LETTER UPSILON WITH PERISPOMENI\n1FE7; 1FE7; 03A5 0308 0342; 03A5 0308 0342; # GREEK SMALL LETTER UPSILON WITH DIALYTIKA AND PERISPOMENI\n1FF6; 1FF6; 03A9 0342; 03A9 0342; # GREEK SMALL LETTER OMEGA WITH PERISPOMENI\n```\n\n----------------------------------------\n\nTITLE: Preserving Canonical Equivalence for I with Dot\nDESCRIPTION: Defines case mappings for Latin capital letter I with dot above, preserving canonical equivalence. Turkic cases are handled separately.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/SpecialCasing.txt#2025-04-21_snippet_1\n\nLANGUAGE: Unicode\nCODE:\n```\n0130; 0069 0307; 0130; 0130; # LATIN CAPITAL LETTER I WITH DOT ABOVE\n```\n\n----------------------------------------\n\nTITLE: Defining Dash Characters in Unicode\nDESCRIPTION: This snippet lists Unicode code points classified as Dash. It includes various types of dashes and hyphens used in different writing systems.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/PropList.txt#2025-04-21_snippet_3\n\nLANGUAGE: Unicode\nCODE:\n```\n002D          ; Dash # Pd       HYPHEN-MINUS\n058A          ; Dash # Pd       ARMENIAN HYPHEN\n05BE          ; Dash # Pd       HEBREW PUNCTUATION MAQAF\n1400          ; Dash # Pd       CANADIAN SYLLABICS HYPHEN\n1806          ; Dash # Pd       MONGOLIAN TODO SOFT HYPHEN\n2010..2015    ; Dash # Pd   [6] HYPHEN..HORIZONTAL BAR\n2053          ; Dash # Po       SWUNG DASH\n207B          ; Dash # Sm       SUPERSCRIPT MINUS\n208B          ; Dash # Sm       SUBSCRIPT MINUS\n2212          ; Dash # Sm       MINUS SIGN\n2E17          ; Dash # Pd       DOUBLE OBLIQUE HYPHEN\n2E1A          ; Dash # Pd       HYPHEN WITH DIAERESIS\n2E3A..2E3B    ; Dash # Pd   [2] TWO-EM DASH..THREE-EM DASH\n2E40          ; Dash # Pd       DOUBLE HYPHEN\n2E5D          ; Dash # Pd       OBLIQUE HYPHEN\n301C          ; Dash # Pd       WAVE DASH\n3030          ; Dash # Pd       WAVY DASH\n30A0          ; Dash # Pd       KATAKANA-HIRAGANA DOUBLE HYPHEN\nFE31..FE32    ; Dash # Pd   [2] PRESENTATION FORM FOR VERTICAL EM DASH..PRESENTATION FORM FOR VERTICAL EN DASH\nFE58          ; Dash # Pd       SMALL EM DASH\nFE63          ; Dash # Pd       SMALL HYPHEN-MINUS\nFF0D          ; Dash # Pd       FULLWIDTH HYPHEN-MINUS\n10D6E         ; Dash # Pd       GARAY HYPHEN\n10EAD         ; Dash # Pd       YEZIDI HYPHENATION MARK\n```\n\n----------------------------------------\n\nTITLE: Defining Jamo Short Name Properties in Unicode\nDESCRIPTION: Lists all possible values for the Jamo Short Name (JSN) property in Unicode. This property provides short identifiers for Korean Hangul Jamo characters used in composition and decomposition.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/PropertyValueAliases.txt#2025-04-21_snippet_13\n\nLANGUAGE: markup\nCODE:\n```\n# Jamo_Short_Name (JSN)\n\nJSN; A                                ; A\nJSN; AE                               ; AE\nJSN; B                                ; B\nJSN; BB                               ; BB\nJSN; BS                               ; BS\nJSN; C                                ; C\nJSN; D                                ; D\nJSN; DD                               ; DD\nJSN; E                                ; E\nJSN; EO                               ; EO\nJSN; EU                               ; EU\nJSN; G                                ; G\nJSN; GG                               ; GG\nJSN; GS                               ; GS\nJSN; H                                ; H\nJSN; I                                ; I\nJSN; J                                ; J\nJSN; JJ                               ; JJ\nJSN; K                                ; K\nJSN; L                                ; L\nJSN; LB                               ; LB\nJSN; LG                               ; LG\nJSN; LH                               ; LH\nJSN; LM                               ; LM\nJSN; LP                               ; LP\nJSN; LS                               ; LS\nJSN; LT                               ; LT\nJSN; M                                ; M\nJSN; N                                ; N\nJSN; NG                               ; NG\nJSN; NH                               ; NH\nJSN; NJ                               ; NJ\nJSN; O                                ; O\nJSN; OE                               ; OE\nJSN; P                                ; P\nJSN; R                                ; R\nJSN; S                                ; S\nJSN; SS                               ; SS\nJSN; T                                ; T\nJSN; U                                ; U\nJSN; WA                               ; WA\nJSN; WAE                              ; WAE\nJSN; WE                               ; WE\nJSN; WEO                              ; WEO\nJSN; WI                               ; WI\nJSN; YA                               ; YA\nJSN; YAE                              ; YAE\nJSN; YE                               ; YE\nJSN; YEO                              ; YEO\nJSN; YI                               ; YI\nJSN; YO                               ; YO\nJSN; YU                               ; YU\n# @missing: 0000..10FFFF; Jamo_Short_Name; <none>\n```\n\n----------------------------------------\n\nTITLE: Mailbox Flushing\nDESCRIPTION: Demonstrates how to flush and print all messages in a process mailbox\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/processes.md#2025-04-21_snippet_5\n\nLANGUAGE: elixir\nCODE:\n```\nsend(self(), :hello)\nflush()\n```\n\n----------------------------------------\n\nTITLE: Defining Limited_Use Technical Unicode Code Point Ranges\nDESCRIPTION: This snippet defines Unicode code point ranges for characters with both Limited_Use and Technical identifier types. It includes ranges for Syriac, Balinese, and a combining dot character.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/IdentifierType.txt#2025-04-21_snippet_6\n\nLANGUAGE: Unicode\nCODE:\n```\n0740..074A    ; Limited_Use Technical          # 3.0   [11] SYRIAC FEMININE DOT..SYRIAC BARREKH\n1B6B..1B73    ; Limited_Use Technical          # 5.0    [9] BALINESE MUSICAL SYMBOL COMBINING TEGEH..BALINESE MUSICAL SYMBOL COMBINING GONG\n1DFA          ; Limited_Use Technical          # 14.0       COMBINING DOT BELOW LEFT\n```\n\n----------------------------------------\n\nTITLE: Defining Limited Use Unicode Code Point Ranges\nDESCRIPTION: This snippet defines ranges of Unicode code points that are designated as Limited_Use. Each line specifies a range or single code point, followed by the Limited_Use designation and a comment indicating the Unicode version and number of code points.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/IdentifierType.txt#2025-04-21_snippet_3\n\nLANGUAGE: Unicode\nCODE:\n```\n0710..072C    ; Limited_Use                    # 3.0   [29] SYRIAC LETTER ALAPH..SYRIAC LETTER TAW\n072D..072F    ; Limited_Use                    # 4.0    [3] SYRIAC LETTER PERSIAN BHETH..SYRIAC LETTER PERSIAN DHALATH\n0730..073F    ; Limited_Use                    # 3.0   [16] SYRIAC PTHAHA ABOVE..SYRIAC RWAHA\n074D..074F    ; Limited_Use                    # 4.0    [3] SYRIAC LETTER SOGDIAN ZHAIN..SYRIAC LETTER SOGDIAN FE\n07C0..07E7    ; Limited_Use                    # 5.0   [40] NKO DIGIT ZERO..NKO LETTER NYA WOLOSO\n07EB..07F5    ; Limited_Use                    # 5.0   [11] NKO COMBINING SHORT HIGH TONE..NKO LOW TONE APOSTROPHE\n07FD          ; Limited_Use                    # 11.0       NKO DANTAYALAN\n0840..085B    ; Limited_Use                    # 6.0   [28] MANDAIC LETTER HALQA..MANDAIC GEMINATION MARK\n0860..086A    ; Limited_Use                    # 10.0  [11] SYRIAC LETTER MALAYALAM NGA..SYRIAC LETTER MALAYALAM SSA\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Line_Break Property\nDESCRIPTION: Lists the possible values for the Line_Break (lb) property in Unicode. This property is used to determine line breaking behavior of characters.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/PropertyValueAliases.txt#2025-04-21_snippet_17\n\nLANGUAGE: Unicode\nCODE:\n```\nlb ; AI                               ; Ambiguous\nlb ; AK                               ; Aksara\nlb ; AL                               ; Alphabetic\nlb ; AP                               ; Aksara_Prebase\nlb ; AS                               ; Aksara_Start\n# ... (truncated for brevity)\n```\n\n----------------------------------------\n\nTITLE: Tibetan Script Unicode Ranges\nDESCRIPTION: Defines the Unicode code point ranges for Tibetan script characters including syllables, marks, digits and signs. Covers 207 total code points from 0F00 to 0FDA.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/Scripts.txt#2025-04-21_snippet_23\n\nLANGUAGE: Unicode\nCODE:\n```\n0F00          ; Tibetan # Lo       TIBETAN SYLLABLE OM\n0F01..0F03    ; Tibetan # So   [3] TIBETAN MARK GTER YIG MGO TRUNCATED A..TIBETAN MARK GTER YIG MGO -UM GTER TSHEG MA\n0F04..0F12    ; Tibetan # Po  [15] TIBETAN MARK INITIAL YIG MGO MDUN MA..TIBETAN MARK RGYA GRAM SHAD\n```\n\n----------------------------------------\n\nTITLE: Unicode Common Script Character Mappings\nDESCRIPTION: Mapping of Unicode code points to the Common script category, including control characters, punctuation, symbols, and other shared characters. Each line contains a code point or range, script designation, category code, and character description.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/Scripts.txt#2025-04-21_snippet_2\n\nLANGUAGE: unicode-data\nCODE:\n```\n0000..001F    ; Common # Cc  [32] <control-0000>..<control-001F>\n0020          ; Common # Zs       SPACE\n0021..0023    ; Common # Po   [3] EXCLAMATION MARK..NUMBER SIGN\n0024          ; Common # Sc       DOLLAR SIGN\n# ... additional mappings truncated for brevity\n```\n\n----------------------------------------\n\nTITLE: Katakana Unicode Range Definition\nDESCRIPTION: Defines the Unicode code point ranges for Katakana characters, including regular, small, halfwidth, and archaic characters.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/Scripts.txt#2025-04-21_snippet_26\n\nLANGUAGE: text\nCODE:\n```\n30A1..30FA    ; Katakana # Lo  [90] KATAKANA LETTER SMALL A..KATAKANA LETTER VO\n30FD..30FE    ; Katakana # Lm   [2] KATAKANA ITERATION MARK..KATAKANA VOICED ITERATION MARK\n30FF          ; Katakana # Lo       KATAKANA DIGRAPH KOTO\n31F0..31FF    ; Katakana # Lo  [16] KATAKANA LETTER SMALL KU..KATAKANA LETTER SMALL RO\n```\n\n----------------------------------------\n\nTITLE: Defining Limited_Use Obsolete Unicode Code Point Ranges\nDESCRIPTION: This snippet defines Unicode code point ranges for characters with both Limited_Use and Obsolete identifier types. It includes ranges for NKo and Vai scripts.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/IdentifierType.txt#2025-04-21_snippet_7\n\nLANGUAGE: Unicode\nCODE:\n```\n07E8..07EA    ; Limited_Use Obsolete           # 5.0    [3] NKO LETTER JONA JA..NKO LETTER JONA RA\n07FA          ; Limited_Use Obsolete           # 5.0        NKO LAJANYALAN\nA610..A612    ; Limited_Use Obsolete           # 5.1    [3] VAI SYLLABLE NDOLE FA..VAI SYLLABLE NDOLE SOO\nA62A..A62B    ; Limited_Use Obsolete           # 5.1    [2] VAI SYLLABLE NDOLE MA..VAI SYLLABLE NDOLE DO\n```\n\n----------------------------------------\n\nTITLE: Unicode Technical Obsolete Characters Definition\nDESCRIPTION: Lists obsolete technical characters including Latin, Greek, Cyrillic, and other scripts that are considered technically deprecated.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/IdentifierType.txt#2025-04-21_snippet_18\n\nLANGUAGE: unicode\nCODE:\n```\n018D          ; Technical Obsolete             # 1.1        LATIN SMALL LETTER TURNED DELTA\n01AA..01AB    ; Technical Obsolete             # 1.1    [2] LATIN LETTER REVERSED ESH LOOP..LATIN SMALL LETTER T WITH PALATAL HOOK\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Code Blocks for Nko Script\nDESCRIPTION: Lists the Unicode code point ranges for the Nko script, categorizing characters by their types (Nd, Lo, Mn, Lm, So, Po, Sc) and providing character descriptions. Includes a total of 62 code points.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/Scripts.txt#2025-04-21_snippet_34\n\nLANGUAGE: unicode\nCODE:\n```\n07C0..07C9    ; Nko # Nd  [10] NKO DIGIT ZERO..NKO DIGIT NINE\n07CA..07EA    ; Nko # Lo  [33] NKO LETTER A..NKO LETTER JONA RA\n07EB..07F3    ; Nko # Mn   [9] NKO COMBINING SHORT HIGH TONE..NKO COMBINING DOUBLE DOT ABOVE\n07F4..07F5    ; Nko # Lm   [2] NKO HIGH TONE APOSTROPHE..NKO LOW TONE APOSTROPHE\n07F6          ; Nko # So       NKO SYMBOL OO DENNEN\n07F7..07F9    ; Nko # Po   [3] NKO SYMBOL GBAKURUNEN..NKO EXCLAMATION MARK\n07FA          ; Nko # Lm       NKO LAJANYALAN\n07FD          ; Nko # Mn       NKO DANTAYALAN\n07FE..07FF    ; Nko # Sc   [2] NKO DOROME SIGN..NKO TAMAN SIGN\n\n# Total code points: 62\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Diacritic Code Points\nDESCRIPTION: This snippet defines code point ranges for diacritical marks in the Unicode standard. It includes Mende Kikakui combining numbers and Adlam modifiers with their respective general categories.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/PropList.txt#2025-04-21_snippet_16\n\nLANGUAGE: unicode\nCODE:\n```\n1E8D0..1E8D6  ; Diacritic # Mn   [7] MENDE KIKAKUI COMBINING NUMBER TEENS..MENDE KIKAKUI COMBINING NUMBER MILLIONS\n1E944..1E946  ; Diacritic # Mn   [3] ADLAM ALIF LENGTHENER..ADLAM GEMINATION MARK\n1E948..1E94A  ; Diacritic # Mn   [3] ADLAM CONSONANT MODIFIER..ADLAM NUKTA\n\n# Total code points: 1178\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Script Extensions for Characters\nDESCRIPTION: This data file defines which scripts can use specific Unicode characters. Each line shows a code point (or range), followed by script codes where the character is valid, then Unicode category information and the character name.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/ScriptExtensions.txt#2025-04-21_snippet_0\n\nLANGUAGE: unicode\nCODE:\n```\n# @missing: 0000..10FFFF; <script>\n00B7          ; Avst Cari Copt Dupl Elba Geor Glag Gong Goth Grek Hani Latn Lydi Mahj Perm Shaw #Po MIDDLE DOT\n02BC          ; Beng Cyrl Deva Latn Lisu Thai Toto #Lm   MODIFIER LETTER APOSTROPHE\n02C7          ; Bopo Latn                      # Lm      CARON\n02C9..02CB    ; Bopo Latn                      # Lm  [3] MODIFIER LETTER MACRON..MODIFIER LETTER GRAVE ACCENT\n02CD          ; Latn Lisu                      # Lm      MODIFIER LETTER LOW MACRON\n02D7          ; Latn Thai                      # Sk      MODIFIER LETTER MINUS SIGN\n02D9          ; Bopo Latn                      # Sk      DOT ABOVE\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Character Ranges for Malayalam Script\nDESCRIPTION: This snippet defines the Unicode character ranges for the Malayalam script, including various letter types, vowel signs, digits, and special symbols.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/Scripts.txt#2025-04-21_snippet_19\n\nLANGUAGE: Unicode\nCODE:\n```\n0D00..0D01    ; Malayalam # Mn   [2] MALAYALAM SIGN COMBINING ANUSVARA ABOVE..MALAYALAM SIGN CANDRABINDU\n0D02..0D03    ; Malayalam # Mc   [2] MALAYALAM SIGN ANUSVARA..MALAYALAM SIGN VISARGA\n0D04..0D0C    ; Malayalam # Lo   [9] MALAYALAM LETTER VEDIC ANUSVARA..MALAYALAM LETTER VOCALIC L\n0D0E..0D10    ; Malayalam # Lo   [3] MALAYALAM LETTER E..MALAYALAM LETTER AI\n0D12..0D3A    ; Malayalam # Lo  [41] MALAYALAM LETTER O..MALAYALAM LETTER TTTA\n0D3B..0D3C    ; Malayalam # Mn   [2] MALAYALAM SIGN VERTICAL BAR VIRAMA..MALAYALAM SIGN CIRCULAR VIRAMA\n0D3D          ; Malayalam # Lo       MALAYALAM SIGN AVAGRAHA\n0D3E..0D40    ; Malayalam # Mc   [3] MALAYALAM VOWEL SIGN AA..MALAYALAM VOWEL SIGN II\n0D41..0D44    ; Malayalam # Mn   [4] MALAYALAM VOWEL SIGN U..MALAYALAM VOWEL SIGN VOCALIC RR\n0D46..0D48    ; Malayalam # Mc   [3] MALAYALAM VOWEL SIGN E..MALAYALAM VOWEL SIGN AI\n0D4A..0D4C    ; Malayalam # Mc   [3] MALAYALAM VOWEL SIGN O..MALAYALAM VOWEL SIGN AU\n0D4D          ; Malayalam # Mn       MALAYALAM SIGN VIRAMA\n0D4E          ; Malayalam # Lo       MALAYALAM LETTER DOT REPH\n0D4F          ; Malayalam # So       MALAYALAM SIGN PARA\n0D54..0D56    ; Malayalam # Lo   [3] MALAYALAM LETTER CHILLU M..MALAYALAM LETTER CHILLU LLL\n0D57          ; Malayalam # Mc       MALAYALAM AU LENGTH MARK\n0D58..0D5E    ; Malayalam # No   [7] MALAYALAM FRACTION ONE ONE-HUNDRED-AND-SIXTIETH..MALAYALAM FRACTION ONE FIFTH\n0D5F..0D61    ; Malayalam # Lo   [3] MALAYALAM LETTER ARCHAIC II..MALAYALAM LETTER VOCALIC LL\n0D62..0D63    ; Malayalam # Mn   [2] MALAYALAM VOWEL SIGN VOCALIC L..MALAYALAM VOWEL SIGN VOCALIC LL\n0D66..0D6F    ; Malayalam # Nd  [10] MALAYALAM DIGIT ZERO..MALAYALAM DIGIT NINE\n0D70..0D78    ; Malayalam # No   [9] MALAYALAM NUMBER TEN..MALAYALAM FRACTION THREE SIXTEENTHS\n0D79          ; Malayalam # So       MALAYALAM DATE MARK\n0D7A..0D7F    ; Malayalam # Lo   [6] MALAYALAM LETTER CHILLU NN..MALAYALAM LETTER CHILLU K\n```\n\n----------------------------------------\n\nTITLE: Defining Caucasian Albanian Unicode Block\nDESCRIPTION: Lists the Unicode code points for the Caucasian Albanian script, including letters and punctuation marks with their respective categories.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/Scripts.txt#2025-04-21_snippet_71\n\nLANGUAGE: text\nCODE:\n```\n10530..10563  ; Caucasian_Albanian # Lo  [52] CAUCASIAN ALBANIAN LETTER ALT..CAUCASIAN ALBANIAN LETTER KIW\n1056F         ; Caucasian_Albanian # Po       CAUCASIAN ALBANIAN CITATION MARK\n\n# Total code points: 53\n```\n\n----------------------------------------\n\nTITLE: Unicode Character Range Definitions\nDESCRIPTION: Specification of Unicode character ranges for common symbols, including arrows, mathematical operators, brackets and special characters. Each line follows the format: codepoint(s); script # category [count] description\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/Scripts.txt#2025-04-21_snippet_3\n\nLANGUAGE: unicode\nCODE:\n```\n214B          ; Common # Sm       TURNED AMPERSAND\n214C..214D    ; Common # So   [2] PER SIGN..AKTIESELSKAB\n214F          ; Common # So       SYMBOL FOR SAMARITAN SOURCE\n2150..215F    ; Common # No  [16] VULGAR FRACTION ONE SEVENTH..FRACTION NUMERATOR ONE\n```\n\n----------------------------------------\n\nTITLE: Unicode Script Range Definition - Multiple Scripts\nDESCRIPTION: Defines Unicode codepoint ranges for multiple scripts including Tirhuta, Warang Citi, Ahom, Anatolian Hieroglyphs, Hatran, Multani, Old Hungarian, SignWriting, Adlam, Bhaiksuki, Marchen, Newa, Osage, Tangut, Masaram Gondi, and Nushu. Each range includes character classifications (Lo, Mc, Mn, etc.) and total codepoint counts.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/Scripts.txt#2025-04-21_snippet_76\n\nLANGUAGE: unicode\nCODE:\n```\n11480..114AF  ; Tirhuta # Lo  [48] TIRHUTA ANJI..TIRHUTA LETTER HA\n114B0..114B2  ; Tirhuta # Mc   [3] TIRHUTA VOWEL SIGN AA..TIRHUTA VOWEL SIGN II\n114B3..114B8  ; Tirhuta # Mn   [6] TIRHUTA VOWEL SIGN U..TIRHUTA VOWEL SIGN VOCALIC LL\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Block for Tai Tham Script\nDESCRIPTION: This snippet defines the Unicode block for the Tai Tham script, including letters, consonant signs, vowel signs, digits, and punctuation marks. It specifies code point ranges and character types.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/Scripts.txt#2025-04-21_snippet_46\n\nLANGUAGE: Unicode\nCODE:\n```\n1A20..1A54    ; Tai_Tham # Lo  [53] TAI THAM LETTER HIGH KA..TAI THAM LETTER GREAT SA\n1A55          ; Tai_Tham # Mc       TAI THAM CONSONANT SIGN MEDIAL RA\n1A56          ; Tai_Tham # Mn       TAI THAM CONSONANT SIGN MEDIAL LA\n1A57          ; Tai_Tham # Mc       TAI THAM CONSONANT SIGN LA TANG LAI\n1A58..1A5E    ; Tai_Tham # Mn   [7] TAI THAM SIGN MAI KANG LAI..TAI THAM CONSONANT SIGN SA\n1A60          ; Tai_Tham # Mn       TAI THAM SIGN SAKOT\n1A61          ; Tai_Tham # Mc       TAI THAM VOWEL SIGN A\n1A62          ; Tai_Tham # Mn       TAI THAM VOWEL SIGN MAI SAT\n1A63..1A64    ; Tai_Tham # Mc   [2] TAI THAM VOWEL SIGN AA..TAI THAM VOWEL SIGN TALL AA\n1A65..1A6C    ; Tai_Tham # Mn   [8] TAI THAM VOWEL SIGN I..TAI THAM VOWEL SIGN OA BELOW\n1A6D..1A72    ; Tai_Tham # Mc   [6] TAI THAM VOWEL SIGN OY..TAI THAM VOWEL SIGN THAM AI\n1A73..1A7C    ; Tai_Tham # Mn  [10] TAI THAM VOWEL SIGN OA ABOVE..TAI THAM SIGN KHUEN-LUE KARAN\n1A7F          ; Tai_Tham # Mn       TAI THAM COMBINING CRYPTOGRAMMIC DOT\n1A80..1A89    ; Tai_Tham # Nd  [10] TAI THAM HORA DIGIT ZERO..TAI THAM HORA DIGIT NINE\n1A90..1A99    ; Tai_Tham # Nd  [10] TAI THAM THAM DIGIT ZERO..TAI THAM THAM DIGIT NINE\n1AA0..1AA6    ; Tai_Tham # Po   [7] TAI THAM SIGN WIANG..TAI THAM SIGN REVERSED ROTATED RANA\n1AA7          ; Tai_Tham # Lm       TAI THAM SIGN MAI YAMOK\n1AA8..1AAD    ; Tai_Tham # Po   [6] TAI THAM SIGN KAAN..TAI THAM SIGN CAANG\n\n# Total code points: 127\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Exclusion Ranges in Elixir\nDESCRIPTION: This configuration defines Unicode character ranges that are excluded from certain operations in Elixir. Each line follows the format of range, exclusion designation, Unicode version, and character description. These exclusions primarily cover specialized writing systems and non-Latin scripts.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/IdentifierType.txt#2025-04-21_snippet_21\n\nLANGUAGE: config\nCODE:\n```\n11918..11935  ; Exclusion                      # 13.0  [30] DIVES AKURU LETTER DDA..DIVES AKURU VOWEL SIGN E\n11937..11938  ; Exclusion                      # 13.0   [2] DIVES AKURU VOWEL SIGN AI..DIVES AKURU VOWEL SIGN O\n1193B..11943  ; Exclusion                      # 13.0   [9] DIVES AKURU SIGN ANUSVARA..DIVES AKURU SIGN NUKTA\n11950..11959  ; Exclusion                      # 13.0  [10] DIVES AKURU DIGIT ZERO..DIVES AKURU DIGIT NINE\n119A0..119A7  ; Exclusion                      # 12.0   [8] NANDINAGARI LETTER A..NANDINAGARI LETTER VOCALIC RR\n119AA..119D7  ; Exclusion                      # 12.0  [46] NANDINAGARI LETTER E..NANDINAGARI VOWEL SIGN VOCALIC RR\n119DA..119E1  ; Exclusion                      # 12.0   [8] NANDINAGARI VOWEL SIGN E..NANDINAGARI SIGN AVAGRAHA\n119E3..119E4  ; Exclusion                      # 12.0   [2] NANDINAGARI HEADSTROKE..NANDINAGARI VOWEL SIGN PRISHTHAMATRA E\n11A00..11A3E  ; Exclusion                      # 10.0  [63] ZANABAZAR SQUARE LETTER A..ZANABAZAR SQUARE CLUSTER-FINAL LETTER VA\n11A47         ; Exclusion                      # 10.0       ZANABAZAR SQUARE SUBJOINER\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Character Ranges for Kannada Script\nDESCRIPTION: This snippet defines the Unicode character ranges for the Kannada script, including various letter types, vowel signs, digits, and special symbols.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/Scripts.txt#2025-04-21_snippet_18\n\nLANGUAGE: Unicode\nCODE:\n```\n0C80          ; Kannada # Lo       KANNADA SIGN SPACING CANDRABINDU\n0C81          ; Kannada # Mn       KANNADA SIGN CANDRABINDU\n0C82..0C83    ; Kannada # Mc   [2] KANNADA SIGN ANUSVARA..KANNADA SIGN VISARGA\n0C84          ; Kannada # Po       KANNADA SIGN SIDDHAM\n0C85..0C8C    ; Kannada # Lo   [8] KANNADA LETTER A..KANNADA LETTER VOCALIC L\n0C8E..0C90    ; Kannada # Lo   [3] KANNADA LETTER E..KANNADA LETTER AI\n0C92..0CA8    ; Kannada # Lo  [23] KANNADA LETTER O..KANNADA LETTER NA\n0CAA..0CB3    ; Kannada # Lo  [10] KANNADA LETTER PA..KANNADA LETTER LLA\n0CB5..0CB9    ; Kannada # Lo   [5] KANNADA LETTER VA..KANNADA LETTER HA\n0CBC          ; Kannada # Mn       KANNADA SIGN NUKTA\n0CBD          ; Kannada # Lo       KANNADA SIGN AVAGRAHA\n0CBE          ; Kannada # Mc       KANNADA VOWEL SIGN AA\n0CBF          ; Kannada # Mn       KANNADA VOWEL SIGN I\n0CC0..0CC4    ; Kannada # Mc   [5] KANNADA VOWEL SIGN II..KANNADA VOWEL SIGN VOCALIC RR\n0CC6          ; Kannada # Mn       KANNADA VOWEL SIGN E\n0CC7..0CC8    ; Kannada # Mc   [2] KANNADA VOWEL SIGN EE..KANNADA VOWEL SIGN AI\n0CCA..0CCB    ; Kannada # Mc   [2] KANNADA VOWEL SIGN O..KANNADA VOWEL SIGN OO\n0CCC..0CCD    ; Kannada # Mn   [2] KANNADA VOWEL SIGN AU..KANNADA SIGN VIRAMA\n0CD5..0CD6    ; Kannada # Mc   [2] KANNADA LENGTH MARK..KANNADA AI LENGTH MARK\n0CDD..0CDE    ; Kannada # Lo   [2] KANNADA LETTER NAKAARA POLLU..KANNADA LETTER FA\n0CE0..0CE1    ; Kannada # Lo   [2] KANNADA LETTER VOCALIC RR..KANNADA LETTER VOCALIC LL\n0CE2..0CE3    ; Kannada # Mn   [2] KANNADA VOWEL SIGN VOCALIC L..KANNADA VOWEL SIGN VOCALIC LL\n0CE6..0CEF    ; Kannada # Nd  [10] KANNADA DIGIT ZERO..KANNADA DIGIT NINE\n0CF1..0CF2    ; Kannada # Lo   [2] KANNADA SIGN JIHVAMULIYA..KANNADA SIGN UPADHMANIYA\n0CF3          ; Kannada # Mc       KANNADA SIGN COMBINING ANUSVARA ABOVE RIGHT\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Character Ranges for Old Uyghur Script\nDESCRIPTION: This snippet defines the Unicode character ranges for the Old Uyghur script. It includes 18 letter characters (Lo), 4 combining mark characters (Mn), and 4 punctuation characters (Po).\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/Scripts.txt#2025-04-21_snippet_95\n\nLANGUAGE: Unicode\nCODE:\n```\n10F70..10F81  ; Old_Uyghur # Lo  [18] OLD UYGHUR LETTER ALEPH..OLD UYGHUR LETTER LESH\n10F82..10F85  ; Old_Uyghur # Mn   [4] OLD UYGHUR COMBINING DOT ABOVE..OLD UYGHUR COMBINING TWO DOTS BELOW\n10F86..10F89  ; Old_Uyghur # Po   [4] OLD UYGHUR PUNCTUATION BAR..OLD UYGHUR PUNCTUATION FOUR DOTS\n\n# Total code points: 26\n```\n\n----------------------------------------\n\nTITLE: Defining Kaithi Unicode Block\nDESCRIPTION: Details the Unicode code points for the Kaithi script, including letters, vowel signs, and other symbols with their respective categories.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/Scripts.txt#2025-04-21_snippet_60\n\nLANGUAGE: text\nCODE:\n```\n11080..11081  ; Kaithi # Mn   [2] KAITHI SIGN CANDRABINDU..KAITHI SIGN ANUSVARA\n11082         ; Kaithi # Mc       KAITHI SIGN VISARGA\n11083..110AF  ; Kaithi # Lo  [45] KAITHI LETTER A..KAITHI LETTER HA\n110B0..110B2  ; Kaithi # Mc   [3] KAITHI VOWEL SIGN AA..KAITHI VOWEL SIGN II\n110B3..110B6  ; Kaithi # Mn   [4] KAITHI VOWEL SIGN U..KAITHI VOWEL SIGN AI\n110B7..110B8  ; Kaithi # Mc   [2] KAITHI VOWEL SIGN O..KAITHI VOWEL SIGN AU\n110B9..110BA  ; Kaithi # Mn   [2] KAITHI SIGN VIRAMA..KAITHI SIGN NUKTA\n110BB..110BC  ; Kaithi # Po   [2] KAITHI ABBREVIATION SIGN..KAITHI ENUMERATION SIGN\n110BD         ; Kaithi # Cf       KAITHI NUMBER SIGN\n110BE..110C1  ; Kaithi # Po   [4] KAITHI SECTION MARK..KAITHI DOUBLE DANDA\n110C2         ; Kaithi # Mn       KAITHI VOWEL SIGN VOCALIC R\n110CD         ; Kaithi # Cf       KAITHI NUMBER SIGN ABOVE\n\n# Total code points: 68\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Character Ranges\nDESCRIPTION: This snippet demonstrates how Unicode character ranges are defined in the file. It uses two dots (..) to indicate a range of code points that share the same script mappings and general category.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/ScriptExtensions.txt#2025-04-21_snippet_2\n\nLANGUAGE: Unicode\nCODE:\n```\n2FF0..2FFF    ; Hani Tang                      # So [16] IDEOGRAPHIC DESCRIPTION CHARACTER LEFT TO RIGHT..IDEOGRAPHIC DESCRIPTION CHARACTER ROTATION\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Code Blocks for Phoenician Script\nDESCRIPTION: Lists the Unicode code point ranges for the Phoenician script, categorizing characters by their types (Lo, No, Po) and providing character descriptions. Includes a total of 29 code points.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/Scripts.txt#2025-04-21_snippet_32\n\nLANGUAGE: unicode\nCODE:\n```\n10900..10915  ; Phoenician # Lo  [22] PHOENICIAN LETTER ALF..PHOENICIAN LETTER TAU\n10916..1091B  ; Phoenician # No   [6] PHOENICIAN NUMBER ONE..PHOENICIAN NUMBER THREE\n1091F         ; Phoenician # Po       PHOENICIAN WORD SEPARATOR\n\n# Total code points: 29\n```\n\n----------------------------------------\n\nTITLE: Defining Elbasan Unicode Block\nDESCRIPTION: Lists the Unicode code points for the Elbasan script, covering the complete range of letters with their categories.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/Scripts.txt#2025-04-21_snippet_74\n\nLANGUAGE: text\nCODE:\n```\n10500..10527  ; Elbasan # Lo  [40] ELBASAN LETTER A..ELBASAN LETTER KHE\n\n# Total code points: 40\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Characters for Other_Math Category\nDESCRIPTION: This code block defines Unicode characters that belong to the Other_Math category. It includes various mathematical symbols, Greek letters, and specialized notations, specifying their code points and descriptions.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/PropList.txt#2025-04-21_snippet_8\n\nLANGUAGE: Unicode\nCODE:\n```\n005E          ; Other_Math # Sk       CIRCUMFLEX ACCENT\n03D0..03D2    ; Other_Math # L&   [3] GREEK BETA SYMBOL..GREEK UPSILON WITH HOOK SYMBOL\n03D5          ; Other_Math # L&       GREEK PHI SYMBOL\n03F0..03F1    ; Other_Math # L&   [2] GREEK KAPPA SYMBOL..GREEK RHO SYMBOL\n03F4..03F5    ; Other_Math # L&   [2] GREEK CAPITAL THETA SYMBOL..GREEK LUNATE EPSILON SYMBOL\n2016          ; Other_Math # Po       DOUBLE VERTICAL LINE\n2032..2034    ; Other_Math # Po   [3] PRIME..TRIPLE PRIME\n2040          ; Other_Math # Pc       CHARACTER TIE\n2061..2064    ; Other_Math # Cf   [4] FUNCTION APPLICATION..INVISIBLE PLUS\n207D          ; Other_Math # Ps       SUPERSCRIPT LEFT PARENTHESIS\n207E          ; Other_Math # Pe       SUPERSCRIPT RIGHT PARENTHESIS\n208D          ; Other_Math # Ps       SUBSCRIPT LEFT PARENTHESIS\n208E          ; Other_Math # Pe       SUBSCRIPT RIGHT PARENTHESIS\n20D0..20DC    ; Other_Math # Mn  [13] COMBINING LEFT HARPOON ABOVE..COMBINING FOUR DOTS ABOVE\n20E1          ; Other_Math # Mn       COMBINING LEFT RIGHT ARROW ABOVE\n20E5..20E6    ; Other_Math # Mn   [2] COMBINING REVERSE SOLIDUS OVERLAY..COMBINING DOUBLE VERTICAL STROKE OVERLAY\n20EB..20EF    ; Other_Math # Mn   [5] COMBINING LONG DOUBLE SOLIDUS OVERLAY..COMBINING RIGHT ARROW BELOW\n2102          ; Other_Math # L&       DOUBLE-STRUCK CAPITAL C\n2107          ; Other_Math # L&       EULER CONSTANT\n210A..2113    ; Other_Math # L&  [10] SCRIPT SMALL G..SCRIPT SMALL L\n2115          ; Other_Math # L&       DOUBLE-STRUCK CAPITAL N\n2119..211D    ; Other_Math # L&   [5] DOUBLE-STRUCK CAPITAL P..DOUBLE-STRUCK CAPITAL R\n2124          ; Other_Math # L&       DOUBLE-STRUCK CAPITAL Z\n2128          ; Other_Math # L&       BLACK-LETTER CAPITAL Z\n2129          ; Other_Math # So       TURNED GREEK SMALL LETTER IOTA\n212C..212D    ; Other_Math # L&   [2] SCRIPT CAPITAL B..BLACK-LETTER CAPITAL C\n212F..2131    ; Other_Math # L&   [3] SCRIPT SMALL E..SCRIPT CAPITAL F\n2133..2134    ; Other_Math # L&   [2] SCRIPT CAPITAL M..SCRIPT SMALL O\n2135..2138    ; Other_Math # Lo   [4] ALEF SYMBOL..DALET SYMBOL\n213C..213F    ; Other_Math # L&   [4] DOUBLE-STRUCK SMALL PI..DOUBLE-STRUCK CAPITAL PI\n2145..2149    ; Other_Math # L&   [5] DOUBLE-STRUCK ITALIC CAPITAL D..DOUBLE-STRUCK ITALIC SMALL J\n2195..2199    ; Other_Math # So   [5] UP DOWN ARROW..SOUTH WEST ARROW\n219C..219F    ; Other_Math # So   [4] LEFTWARDS WAVE ARROW..UPWARDS TWO HEADED ARROW\n21A1..21A2    ; Other_Math # So   [2] DOWNWARDS TWO HEADED ARROW..LEFTWARDS ARROW WITH TAIL\n21A4..21A5    ; Other_Math # So   [2] LEFTWARDS ARROW FROM BAR..UPWARDS ARROW FROM BAR\n21A7          ; Other_Math # So       DOWNWARDS ARROW FROM BAR\n21A9..21AD    ; Other_Math # So   [5] LEFTWARDS ARROW WITH HOOK..LEFT RIGHT WAVE ARROW\n21B0..21B1    ; Other_Math # So   [2] UPWARDS ARROW WITH TIP LEFTWARDS..UPWARDS ARROW WITH TIP RIGHTWARDS\n21B6..21B7    ; Other_Math # So   [2] ANTICLOCKWISE TOP SEMICIRCLE ARROW..CLOCKWISE TOP SEMICIRCLE ARROW\n21BC..21CD    ; Other_Math # So  [18] LEFTWARDS HARPOON WITH BARB UPWARDS..LEFTWARDS DOUBLE ARROW WITH STROKE\n21D0..21D1    ; Other_Math # So   [2] LEFTWARDS DOUBLE ARROW..UPWARDS DOUBLE ARROW\n21D3          ; Other_Math # So       DOWNWARDS DOUBLE ARROW\n21D5..21DB    ; Other_Math # So   [7] UP DOWN DOUBLE ARROW..RIGHTWARDS TRIPLE ARROW\n21DD          ; Other_Math # So       RIGHTWARDS SQUIGGLE ARROW\n21E4..21E5    ; Other_Math # So   [2] LEFTWARDS ARROW TO BAR..RIGHTWARDS ARROW TO BAR\n2308          ; Other_Math # Ps       LEFT CEILING\n2309          ; Other_Math # Pe       RIGHT CEILING\n230A          ; Other_Math # Ps       LEFT FLOOR\n230B          ; Other_Math # Pe       RIGHT FLOOR\n23B4..23B5    ; Other_Math # So   [2] TOP SQUARE BRACKET..BOTTOM SQUARE BRACKET\n23B7          ; Other_Math # So       RADICAL SYMBOL BOTTOM\n23D0          ; Other_Math # So       VERTICAL LINE EXTENSION\n23E2          ; Other_Math # So       WHITE TRAPEZIUM\n25A0..25A1    ; Other_Math # So   [2] BLACK SQUARE..WHITE SQUARE\n25AE..25B6    ; Other_Math # So   [9] BLACK VERTICAL RECTANGLE..BLACK RIGHT-POINTING TRIANGLE\n25BC..25C0    ; Other_Math # So   [5] BLACK DOWN-POINTING TRIANGLE..BLACK LEFT-POINTING TRIANGLE\n25C6..25C7    ; Other_Math # So   [2] BLACK DIAMOND..WHITE DIAMOND\n25CA..25CB    ; Other_Math # So   [2] LOZENGE..WHITE CIRCLE\n25CF..25D3    ; Other_Math # So   [5] BLACK CIRCLE..CIRCLE WITH UPPER HALF BLACK\n25E2          ; Other_Math # So       BLACK LOWER RIGHT TRIANGLE\n25E4          ; Other_Math # So       BLACK UPPER LEFT TRIANGLE\n25E7..25EC    ; Other_Math # So   [6] SQUARE WITH LEFT HALF BLACK..WHITE UP-POINTING TRIANGLE WITH DOT\n2605..2606    ; Other_Math # So   [2] BLACK STAR..WHITE STAR\n2640          ; Other_Math # So       FEMALE SIGN\n2642          ; Other_Math # So       MALE SIGN\n2660..2663    ; Other_Math # So   [4] BLACK SPADE SUIT..BLACK CLUB SUIT\n266D..266E    ; Other_Math # So   [2] MUSIC FLAT SIGN..MUSIC NATURAL SIGN\n27C5          ; Other_Math # Ps       LEFT S-SHAPED BAG DELIMITER\n27C6          ; Other_Math # Pe       RIGHT S-SHAPED BAG DELIMITER\n27E6          ; Other_Math # Ps       MATHEMATICAL LEFT WHITE SQUARE BRACKET\n27E7          ; Other_Math # Pe       MATHEMATICAL RIGHT WHITE SQUARE BRACKET\n27E8          ; Other_Math # Ps       MATHEMATICAL LEFT ANGLE BRACKET\n27E9          ; Other_Math # Pe       MATHEMATICAL RIGHT ANGLE BRACKET\n27EA          ; Other_Math # Ps       MATHEMATICAL LEFT DOUBLE ANGLE BRACKET\n27EB          ; Other_Math # Pe       MATHEMATICAL RIGHT DOUBLE ANGLE BRACKET\n27EC          ; Other_Math # Ps       MATHEMATICAL LEFT WHITE TORTOISE SHELL BRACKET\n27ED          ; Other_Math # Pe       MATHEMATICAL RIGHT WHITE TORTOISE SHELL BRACKET\n27EE          ; Other_Math # Ps       MATHEMATICAL LEFT FLATTENED PARENTHESIS\n27EF          ; Other_Math # Pe       MATHEMATICAL RIGHT FLATTENED PARENTHESIS\n2983          ; Other_Math # Ps       LEFT WHITE CURLY BRACKET\n2984          ; Other_Math # Pe       RIGHT WHITE CURLY BRACKET\n2985          ; Other_Math # Ps       LEFT WHITE PARENTHESIS\n2986          ; Other_Math # Pe       RIGHT WHITE PARENTHESIS\n2987          ; Other_Math # Ps       Z NOTATION LEFT IMAGE BRACKET\n2988          ; Other_Math # Pe       Z NOTATION RIGHT IMAGE BRACKET\n2989          ; Other_Math # Ps       Z NOTATION LEFT BINDING BRACKET\n298A          ; Other_Math # Pe       Z NOTATION RIGHT BINDING BRACKET\n298B          ; Other_Math # Ps       LEFT SQUARE BRACKET WITH UNDERBAR\n298C          ; Other_Math # Pe       RIGHT SQUARE BRACKET WITH UNDERBAR\n298D          ; Other_Math # Ps       LEFT SQUARE BRACKET WITH TICK IN TOP CORNER\n298E          ; Other_Math # Pe       RIGHT SQUARE BRACKET WITH TICK IN BOTTOM CORNER\n298F          ; Other_Math # Ps       LEFT SQUARE BRACKET WITH TICK IN BOTTOM CORNER\n2990          ; Other_Math # Pe       RIGHT SQUARE BRACKET WITH TICK IN TOP CORNER\n2991          ; Other_Math # Ps       LEFT ANGLE BRACKET WITH DOT\n2992          ; Other_Math # Pe       RIGHT ANGLE BRACKET WITH DOT\n2993          ; Other_Math # Ps       LEFT ARC LESS-THAN BRACKET\n2994          ; Other_Math # Pe       RIGHT ARC GREATER-THAN BRACKET\n2995          ; Other_Math # Ps       DOUBLE LEFT ARC GREATER-THAN BRACKET\n2996          ; Other_Math # Pe       DOUBLE RIGHT ARC LESS-THAN BRACKET\n2997          ; Other_Math # Ps       LEFT BLACK TORTOISE SHELL BRACKET\n2998          ; Other_Math # Pe       RIGHT BLACK TORTOISE SHELL BRACKET\n29D8          ; Other_Math # Ps       LEFT WIGGLY FENCE\n29D9          ; Other_Math # Pe       RIGHT WIGGLY FENCE\n29DA          ; Other_Math # Ps       LEFT DOUBLE WIGGLY FENCE\n29DB          ; Other_Math # Pe       RIGHT DOUBLE WIGGLY FENCE\n29FC          ; Other_Math # Ps       LEFT-POINTING CURVED ANGLE BRACKET\n29FD          ; Other_Math # Pe       RIGHT-POINTING CURVED ANGLE BRACKET\nFE61          ; Other_Math # Po       SMALL ASTERISK\nFE63          ; Other_Math # Pd       SMALL HYPHEN-MINUS\nFE68          ; Other_Math # Po       SMALL REVERSE SOLIDUS\nFF3C          ; Other_Math # Po       FULLWIDTH REVERSE SOLIDUS\nFF3E          ; Other_Math # Sk       FULLWIDTH CIRCUMFLEX ACCENT\n1D400..1D454  ; Other_Math # L&  [85] MATHEMATICAL BOLD CAPITAL A..MATHEMATICAL ITALIC SMALL G\n1D456..1D49C  ; Other_Math # L&  [71] MATHEMATICAL ITALIC SMALL I..MATHEMATICAL SCRIPT CAPITAL A\n1D49E..1D49F  ; Other_Math # L&   [2] MATHEMATICAL SCRIPT CAPITAL C..MATHEMATICAL SCRIPT CAPITAL D\n1D4A2         ; Other_Math # L&       MATHEMATICAL SCRIPT CAPITAL G\n1D4A5..1D4A6  ; Other_Math # L&   [2] MATHEMATICAL SCRIPT CAPITAL J..MATHEMATICAL SCRIPT CAPITAL K\n1D4A9..1D4AC  ; Other_Math # L&   [4] MATHEMATICAL SCRIPT CAPITAL N..MATHEMATICAL SCRIPT CAPITAL Q\n1D4AE..1D4B9  ; Other_Math # L&  [12] MATHEMATICAL SCRIPT CAPITAL S..MATHEMATICAL SCRIPT SMALL D\n1D4BB         ; Other_Math # L&       MATHEMATICAL SCRIPT SMALL F\n1D4BD..1D4C3  ; Other_Math # L&   [7] MATHEMATICAL SCRIPT SMALL H..MATHEMATICAL SCRIPT SMALL N\n1D4C5..1D505  ; Other_Math # L&  [65] MATHEMATICAL SCRIPT SMALL P..MATHEMATICAL FRAKTUR CAPITAL B\n1D507..1D50A  ; Other_Math # L&   [4] MATHEMATICAL FRAKTUR CAPITAL D..MATHEMATICAL FRAKTUR CAPITAL G\n1D50D..1D514  ; Other_Math # L&   [8] MATHEMATICAL FRAKTUR CAPITAL J..MATHEMATICAL FRAKTUR CAPITAL Q\n1D516..1D51C  ; Other_Math # L&   [7] MATHEMATICAL FRAKTUR CAPITAL S..MATHEMATICAL FRAKTUR CAPITAL Y\n1D51E..1D539  ; Other_Math # L&  [28] MATHEMATICAL FRAKTUR SMALL A..MATHEMATICAL DOUBLE-STRUCK CAPITAL B\n1D53B..1D53E  ; Other_Math # L&   [4] MATHEMATICAL DOUBLE-STRUCK CAPITAL D..MATHEMATICAL DOUBLE-STRUCK CAPITAL G\n1D540..1D544  ; Other_Math # L&   [5] MATHEMATICAL DOUBLE-STRUCK CAPITAL I..MATHEMATICAL DOUBLE-STRUCK CAPITAL M\n1D546         ; Other_Math # L&       MATHEMATICAL DOUBLE-STRUCK CAPITAL O\n1D54A..1D550  ; Other_Math # L&   [7] MATHEMATICAL DOUBLE-STRUCK CAPITAL S..MATHEMATICAL DOUBLE-STRUCK CAPITAL Y\n1D552..1D6A5  ; Other_Math # L& [340] MATHEMATICAL DOUBLE-STRUCK SMALL A..MATHEMATICAL ITALIC SMALL DOTLESS J\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Character Ranges for Ol Onal Script\nDESCRIPTION: This snippet defines the Unicode character ranges for the Ol Onal script. It includes letter characters (Lo), combining marks (Mn), numeric digits (Nd), and punctuation (Po).\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/Scripts.txt#2025-04-21_snippet_104\n\nLANGUAGE: Unicode\nCODE:\n```\n1E5D0..1E5ED  ; Ol_Onal # Lo  [30] OL ONAL LETTER O..OL ONAL LETTER EG\n1E5EE..1E5EF  ; Ol_Onal # Mn   [2] OL ONAL SIGN MU..OL ONAL SIGN IKIR\n1E5F0         ; Ol_Onal # Lo       OL ONAL SIGN HODDOND\n1E5F1..1E5FA  ; Ol_Onal # Nd  [10] OL ONAL DIGIT ZERO..OL ONAL DIGIT NINE\n1E5FF         ; Ol_Onal # Po       OL ONAL ABBREVIATION SIGN\n\n# Total code points: 44\n```\n\n----------------------------------------\n\nTITLE: Defining Sharada Unicode Block\nDESCRIPTION: Provides the Unicode code points for the Sharada script, including letters, vowel signs, digits, and punctuation marks with their respective categories.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/Scripts.txt#2025-04-21_snippet_68\n\nLANGUAGE: text\nCODE:\n```\n11180..11181  ; Sharada # Mn   [2] SHARADA SIGN CANDRABINDU..SHARADA SIGN ANUSVARA\n11182         ; Sharada # Mc       SHARADA SIGN VISARGA\n11183..111B2  ; Sharada # Lo  [48] SHARADA LETTER A..SHARADA LETTER HA\n111B3..111B5  ; Sharada # Mc   [3] SHARADA VOWEL SIGN AA..SHARADA VOWEL SIGN II\n111B6..111BE  ; Sharada # Mn   [9] SHARADA VOWEL SIGN U..SHARADA VOWEL SIGN O\n111BF..111C0  ; Sharada # Mc   [2] SHARADA VOWEL SIGN AU..SHARADA SIGN VIRAMA\n111C1..111C4  ; Sharada # Lo   [4] SHARADA SIGN AVAGRAHA..SHARADA OM\n111C5..111C8  ; Sharada # Po   [4] SHARADA DANDA..SHARADA SEPARATOR\n111C9..111CC  ; Sharada # Mn   [4] SHARADA SANDHI MARK..SHARADA EXTRA SHORT VOWEL MARK\n111CD         ; Sharada # Po       SHARADA SUTRA MARK\n111CE         ; Sharada # Mc       SHARADA VOWEL SIGN PRISHTHAMATRA E\n111CF         ; Sharada # Mn       SHARADA SIGN INVERTED CANDRABINDU\n111D0..111D9  ; Sharada # Nd  [10] SHARADA DIGIT ZERO..SHARADA DIGIT NINE\n111DA         ; Sharada # Lo       SHARADA EKAM\n111DB         ; Sharada # Po       SHARADA SIGN SIDDHAM\n111DC         ; Sharada # Lo       SHARADA HEADSTROKE\n111DD..111DF  ; Sharada # Po   [3] SHARADA CONTINUATION SIGN..SHARADA SECTION MARK-2\n\n# Total code points: 96\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Character Ranges for Not_XID Classification\nDESCRIPTION: This snippet defines Unicode character ranges that are classified as Not_XID. It includes the character range, classification, Unicode version, and character description.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/IdentifierType.txt#2025-04-21_snippet_30\n\nLANGUAGE: Unicode\nCODE:\n```\n270A..270B    ; Not_XID                        # 6.0    [2] RAISED FIST..RAISED HAND\n270C..2727    ; Not_XID                        # 1.1   [28] VICTORY HAND..WHITE FOUR POINTED STAR\n2728          ; Not_XID                        # 6.0        SPARKLES\n2729..274B    ; Not_XID                        # 1.1   [35] STRESS OUTLINED WHITE STAR..HEAVY EIGHT TEARDROP-SPOKED PROPELLER ASTERISK\n274C          ; Not_XID                        # 6.0        CROSS MARK\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Block for Old South Arabian Script\nDESCRIPTION: This snippet defines the Unicode block for the Old South Arabian script, including letters, numbers, and a numeric indicator. It specifies code point ranges and character types.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/Scripts.txt#2025-04-21_snippet_56\n\nLANGUAGE: Unicode\nCODE:\n```\n10A60..10A7C  ; Old_South_Arabian # Lo  [29] OLD SOUTH ARABIAN LETTER HE..OLD SOUTH ARABIAN LETTER THETH\n10A7D..10A7E  ; Old_South_Arabian # No   [2] OLD SOUTH ARABIAN NUMBER ONE..OLD SOUTH ARABIAN NUMBER FIFTY\n10A7F         ; Old_South_Arabian # Po       OLD SOUTH ARABIAN NUMERIC INDICATOR\n\n# Total code points: 32\n```\n\n----------------------------------------\n\nTITLE: Mapping Multi-Script Characters\nDESCRIPTION: This example shows how characters used in multiple scripts are mapped. The character is associated with several script abbreviations, indicating its use across different writing systems.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/ScriptExtensions.txt#2025-04-21_snippet_3\n\nLANGUAGE: Unicode\nCODE:\n```\n3001          ; Bopo Hang Hani Hira Kana Mong Yiii #Po   IDEOGRAPHIC COMMA\n```\n\n----------------------------------------\n\nTITLE: Defining Sora Sompeng Unicode Block\nDESCRIPTION: Lists the Unicode code points for the Sora Sompeng script, including letters and digits with their respective categories.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/Scripts.txt#2025-04-21_snippet_69\n\nLANGUAGE: text\nCODE:\n```\n110D0..110E8  ; Sora_Sompeng # Lo  [25] SORA SOMPENG LETTER SAH..SORA SOMPENG LETTER MAE\n110F0..110F9  ; Sora_Sompeng # Nd  [10] SORA SOMPENG DIGIT ZERO..SORA SOMPENG DIGIT NINE\n\n# Total code points: 35\n```\n\n----------------------------------------\n\nTITLE: Unicode Other_ID_Start Character Definitions\nDESCRIPTION: Lists Unicode code points with the Other_ID_Start property. These characters can begin an identifier but don't have the standard ID_Start property. This includes special characters like SCRIPT CAPITAL P, ESTIMATED SYMBOL, and specific Mongolian letters.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/PropList.txt#2025-04-21_snippet_23\n\nLANGUAGE: unicode\nCODE:\n```\n1885..1886    ; Other_ID_Start # Mn   [2] MONGOLIAN LETTER ALI GALI BALUDA..MONGOLIAN LETTER ALI GALI THREE BALUDA\n2118          ; Other_ID_Start # Sm       SCRIPT CAPITAL P\n212E          ; Other_ID_Start # So       ESTIMATED SYMBOL\n309B..309C    ; Other_ID_Start # Sk   [2] KATAKANA-HIRAGANA VOICED SOUND MARK..KATAKANA-HIRAGANA SEMI-VOICED SOUND MARK\n\n# Total code points: 6\n```\n\n----------------------------------------\n\nTITLE: Defining Duployan Unicode Block\nDESCRIPTION: Outlines the Unicode code points for the Duployan shorthand script, including letters, affixes, signs, and punctuation with their respective categories.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/Scripts.txt#2025-04-21_snippet_73\n\nLANGUAGE: text\nCODE:\n```\n1BC00..1BC6A  ; Duployan # Lo [107] DUPLOYAN LETTER H..DUPLOYAN LETTER VOCALIC M\n1BC70..1BC7C  ; Duployan # Lo  [13] DUPLOYAN AFFIX LEFT HORIZONTAL SECANT..DUPLOYAN AFFIX ATTACHED TANGENT HOOK\n1BC80..1BC88  ; Duployan # Lo   [9] DUPLOYAN AFFIX HIGH ACUTE..DUPLOYAN AFFIX HIGH VERTICAL\n1BC90..1BC99  ; Duployan # Lo  [10] DUPLOYAN AFFIX LOW ACUTE..DUPLOYAN AFFIX LOW ARROW\n1BC9C         ; Duployan # So       DUPLOYAN SIGN O WITH CROSS\n1BC9D..1BC9E  ; Duployan # Mn   [2] DUPLOYAN THICK LETTER SELECTOR..DUPLOYAN DOUBLE MARK\n1BC9F         ; Duployan # Po       DUPLOYAN PUNCTUATION CHINOOK FULL STOP\n\n# Total code points: 143\n```\n\n----------------------------------------\n\nTITLE: Defining Elymaic Script Unicode Block\nDESCRIPTION: Defines the Unicode code point ranges for the Elymaic script. Includes letters and a ligature with their corresponding Unicode character categories.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/Scripts.txt#2025-04-21_snippet_86\n\nLANGUAGE: unicode\nCODE:\n```\n10FE0..10FF6  ; Elymaic # Lo  [23] ELYMAIC LETTER ALEPH..ELYMAIC LIGATURE ZAYIN-YODH\n\n# Total code points: 23\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Character Ranges for Cyrillic Script\nDESCRIPTION: This snippet defines Unicode character ranges for the Cyrillic script, including various letter forms, diacritical marks, and special symbols used in Cyrillic writing systems.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/Scripts.txt#2025-04-21_snippet_8\n\nLANGUAGE: Unicode\nCODE:\n```\n0400..0481    ; Cyrillic # L& [130] CYRILLIC CAPITAL LETTER IE WITH GRAVE..CYRILLIC SMALL LETTER KOPPA\n0482          ; Cyrillic # So       CYRILLIC THOUSANDS SIGN\n0483..0484    ; Cyrillic # Mn   [2] COMBINING CYRILLIC TITLO..COMBINING CYRILLIC PALATALIZATION\n0487          ; Cyrillic # Mn       COMBINING CYRILLIC POKRYTIE\n0488..0489    ; Cyrillic # Me   [2] COMBINING CYRILLIC HUNDRED THOUSANDS SIGN..COMBINING CYRILLIC MILLIONS SIGN\n048A..052F    ; Cyrillic # L& [166] CYRILLIC CAPITAL LETTER SHORT I WITH TAIL..CYRILLIC SMALL LETTER EL WITH DESCENDER\n1C80..1C8A    ; Cyrillic # L&  [11] CYRILLIC SMALL LETTER ROUNDED VE..CYRILLIC SMALL LETTER TJE\n1D2B          ; Cyrillic # L&       CYRILLIC LETTER SMALL CAPITAL EL\n1D78          ; Cyrillic # Lm       MODIFIER LETTER CYRILLIC EN\n2DE0..2DFF    ; Cyrillic # Mn  [32] COMBINING CYRILLIC LETTER BE..COMBINING CYRILLIC LETTER IOTIFIED BIG YUS\nA640..A66D    ; Cyrillic # L&  [46] CYRILLIC CAPITAL LETTER ZEMLYA..CYRILLIC SMALL LETTER DOUBLE MONOCULAR O\nA66E          ; Cyrillic # Lo       CYRILLIC LETTER MULTIOCULAR O\nA66F          ; Cyrillic # Mn       COMBINING CYRILLIC VZMET\nA670..A672    ; Cyrillic # Me   [3] COMBINING CYRILLIC TEN MILLIONS SIGN..COMBINING CYRILLIC THOUSAND MILLIONS SIGN\nA673          ; Cyrillic # Po       SLAVONIC ASTERISK\nA674..A67D    ; Cyrillic # Mn  [10] COMBINING CYRILLIC LETTER UKRAINIAN IE..COMBINING CYRILLIC PAYEROK\nA67E          ; Cyrillic # Po       CYRILLIC KAVYKA\nA67F          ; Cyrillic # Lm       CYRILLIC PAYEROK\nA680..A69B    ; Cyrillic # L&  [28] CYRILLIC CAPITAL LETTER DWE..CYRILLIC SMALL LETTER CROSSED O\nA69C..A69D    ; Cyrillic # Lm   [2] MODIFIER LETTER CYRILLIC HARD SIGN..MODIFIER LETTER CYRILLIC SOFT SIGN\nA69E..A69F    ; Cyrillic # Mn   [2] COMBINING CYRILLIC LETTER EF..COMBINING CYRILLIC LETTER IOTIFIED E\nFE2E..FE2F    ; Cyrillic # Mn   [2] COMBINING CYRILLIC TITLO LEFT HALF..COMBINING CYRILLIC TITLO RIGHT HALF\n1E030..1E06D  ; Cyrillic # Lm  [62] MODIFIER LETTER CYRILLIC SMALL A..MODIFIER LETTER CYRILLIC SMALL STRAIGHT U WITH STROKE\n1E08F         ; Cyrillic # Mn       COMBINING CYRILLIC SMALL LETTER BYELORUSSIAN-UKRAINIAN I\n```\n\n----------------------------------------\n\nTITLE: Defining Case Mappings for Armenian Ligatures\nDESCRIPTION: Specifies case mappings for various Armenian ligatures, including ech yiwn, men now, men ech, men ini, vew now, and men xeh.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/SpecialCasing.txt#2025-04-21_snippet_3\n\nLANGUAGE: Unicode\nCODE:\n```\n0587; 0587; 0535 0582; 0535 0552; # ARMENIAN SMALL LIGATURE ECH YIWN\nFB13; FB13; 0544 0576; 0544 0546; # ARMENIAN SMALL LIGATURE MEN NOW\nFB14; FB14; 0544 0565; 0544 0535; # ARMENIAN SMALL LIGATURE MEN ECH\nFB15; FB15; 0544 056B; 0544 053B; # ARMENIAN SMALL LIGATURE MEN INI\nFB16; FB16; 054E 0576; 054E 0546; # ARMENIAN SMALL LIGATURE VEW NOW\nFB17; FB17; 0544 056D; 0544 053D; # ARMENIAN SMALL LIGATURE MEN XEH\n```\n\n----------------------------------------\n\nTITLE: Unicode Range Definition for Various Scripts\nDESCRIPTION: Defines Unicode codepoint ranges and categories for multiple scripts including Grantha, Pahawh Hmong, Khojki, Linear A, Mahajani, Manichaean, and others. Each range specifies the script name, codepoint range, category (Lo, Mn, Mc, etc.), and number of characters in the range.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/Scripts.txt#2025-04-21_snippet_75\n\nLANGUAGE: unicode\nCODE:\n```\n11300..11301  ; Grantha # Mn   [2] GRANTHA SIGN COMBINING ANUSVARA ABOVE..GRANTHA SIGN CANDRABINDU\n11302..11303  ; Grantha # Mc   [2] GRANTHA SIGN ANUSVARA..GRANTHA SIGN VISARGA\n11305..1130C  ; Grantha # Lo   [8] GRANTHA LETTER A..GRANTHA LETTER VOCALIC L\n# ... additional ranges omitted for brevity ...\n112F0..112F9  ; Khudawadi # Nd  [10] KHUDAWADI DIGIT ZERO..KHUDAWADI DIGIT NINE\n```\n\n----------------------------------------\n\nTITLE: Defining Internal Dependencies with Git\nDESCRIPTION: Example showing how to specify an internal project dependency using a Git repository.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/mix-and-otp/dependencies-and-umbrella-projects.md#2025-04-21_snippet_4\n\nLANGUAGE: elixir\nCODE:\n```\ndef deps do\n  [{:kv, git: \"https://github.com/YOUR_ACCOUNT/kv.git\"}]\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Wancho Script Unicode Block\nDESCRIPTION: Defines the Unicode code point ranges for the Wancho script. Includes letters, tone marks, digits, and a currency sign with their corresponding Unicode character categories.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/Scripts.txt#2025-04-21_snippet_89\n\nLANGUAGE: unicode\nCODE:\n```\n1E2C0..1E2EB  ; Wancho # Lo  [44] WANCHO LETTER AA..WANCHO LETTER YIH\n1E2EC..1E2EF  ; Wancho # Mn   [4] WANCHO TONE TUP..WANCHO TONE KOINI\n1E2F0..1E2F9  ; Wancho # Nd  [10] WANCHO DIGIT ZERO..WANCHO DIGIT NINE\n1E2FF         ; Wancho # Sc       WANCHO NGUN SIGN\n\n# Total code points: 59\n```\n\n----------------------------------------\n\nTITLE: Unicode Technical Exclusions Definition\nDESCRIPTION: Specifies code points that are explicitly excluded from technical character classifications.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/IdentifierType.txt#2025-04-21_snippet_17\n\nLANGUAGE: unicode\nCODE:\n```\n2CF0..2CF1    ; Technical Exclusion            # 5.2    [2] COPTIC COMBINING SPIRITUS ASPER..COPTIC COMBINING SPIRITUS LENIS\n```\n\n----------------------------------------\n\nTITLE: Defining Soyombo Script Unicode Block\nDESCRIPTION: Defines the Unicode code point ranges for the Soyombo script. Includes letters, vowel signs, consonant signs, and punctuation marks with their corresponding Unicode character categories.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/Scripts.txt#2025-04-21_snippet_77\n\nLANGUAGE: unicode\nCODE:\n```\n11A50         ; Soyombo # Lo       SOYOMBO LETTER A\n11A51..11A56  ; Soyombo # Mn   [6] SOYOMBO VOWEL SIGN I..SOYOMBO VOWEL SIGN OE\n11A57..11A58  ; Soyombo # Mc   [2] SOYOMBO VOWEL SIGN AI..SOYOMBO VOWEL SIGN AU\n11A59..11A5B  ; Soyombo # Mn   [3] SOYOMBO VOWEL SIGN VOCALIC R..SOYOMBO VOWEL LENGTH MARK\n11A5C..11A89  ; Soyombo # Lo  [46] SOYOMBO LETTER KA..SOYOMBO CLUSTER-INITIAL LETTER SA\n11A8A..11A96  ; Soyombo # Mn  [13] SOYOMBO FINAL CONSONANT SIGN G..SOYOMBO SIGN ANUSVARA\n11A97         ; Soyombo # Mc       SOYOMBO SIGN VISARGA\n11A98..11A99  ; Soyombo # Mn   [2] SOYOMBO GEMINATION MARK..SOYOMBO SUBJOINER\n11A9A..11A9C  ; Soyombo # Po   [3] SOYOMBO MARK TSHEG..SOYOMBO MARK DOUBLE SHAD\n11A9D         ; Soyombo # Lo       SOYOMBO MARK PLUTA\n11A9E..11AA2  ; Soyombo # Po   [5] SOYOMBO HEAD MARK WITH MOON AND SUN AND TRIPLE FLAME..SOYOMBO TERMINAL MARK-2\n\n# Total code points: 83\n```\n\n----------------------------------------\n\nTITLE: Unicode Sentence Terminal Characters Definition\nDESCRIPTION: Defines code points for characters that can terminate sentences across various writing systems, including punctuation marks, full stops, and question marks. Total of 170 code points.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/PropList.txt#2025-04-21_snippet_27\n\nLANGUAGE: unicode-data\nCODE:\n```\n0021          ; Sentence_Terminal # Po       EXCLAMATION MARK\n002E          ; Sentence_Terminal # Po       FULL STOP\n003F          ; Sentence_Terminal # Po       QUESTION MARK\n[...additional code points...]\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Character Ranges for Toto Script\nDESCRIPTION: This snippet defines the Unicode character ranges for the Toto script. It includes 30 letter characters (Lo) and 1 combining mark character (Mn).\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/Scripts.txt#2025-04-21_snippet_97\n\nLANGUAGE: Unicode\nCODE:\n```\n1E290..1E2AD  ; Toto # Lo  [30] TOTO LETTER PA..TOTO LETTER A\n1E2AE         ; Toto # Mn       TOTO SIGN RISING TONE\n\n# Total code points: 31\n```\n\n----------------------------------------\n\nTITLE: Defining Nandinagari Script Unicode Block\nDESCRIPTION: Defines the Unicode code point ranges for the Nandinagari script. Includes letters, vowel signs, virama, avagraha, and other marks with their corresponding Unicode character categories.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/Scripts.txt#2025-04-21_snippet_87\n\nLANGUAGE: unicode\nCODE:\n```\n119A0..119A7  ; Nandinagari # Lo   [8] NANDINAGARI LETTER A..NANDINAGARI LETTER VOCALIC RR\n119AA..119D0  ; Nandinagari # Lo  [39] NANDINAGARI LETTER E..NANDINAGARI LETTER RRA\n119D1..119D3  ; Nandinagari # Mc   [3] NANDINAGARI VOWEL SIGN AA..NANDINAGARI VOWEL SIGN II\n119D4..119D7  ; Nandinagari # Mn   [4] NANDINAGARI VOWEL SIGN U..NANDINAGARI VOWEL SIGN VOCALIC RR\n119DA..119DB  ; Nandinagari # Mn   [2] NANDINAGARI VOWEL SIGN E..NANDINAGARI VOWEL SIGN AI\n119DC..119DF  ; Nandinagari # Mc   [4] NANDINAGARI VOWEL SIGN O..NANDINAGARI SIGN VISARGA\n119E0         ; Nandinagari # Mn       NANDINAGARI SIGN VIRAMA\n119E1         ; Nandinagari # Lo       NANDINAGARI SIGN AVAGRAHA\n119E2         ; Nandinagari # Po       NANDINAGARI SIGN SIDDHAM\n119E3         ; Nandinagari # Lo       NANDINAGARI HEADSTROKE\n119E4         ; Nandinagari # Mc       NANDINAGARI VOWEL SIGN PRISHTHAMATRA E\n\n# Total code points: 65\n```\n\n----------------------------------------\n\nTITLE: Defining Special Case Mappings for Greek Characters in Unicode\nDESCRIPTION: This snippet defines special case mappings for Greek characters without corresponding titlecases, including characters with YPOGEGRAMMENI and additional diacritical marks.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/SpecialCasing.txt#2025-04-21_snippet_6\n\nLANGUAGE: Unicode\nCODE:\n```\n1FB2; 1FB2; 1FBA 0345; 1FBA 0399; # GREEK SMALL LETTER ALPHA WITH VARIA AND YPOGEGRAMMENI\n1FB4; 1FB4; 0386 0345; 0386 0399; # GREEK SMALL LETTER ALPHA WITH OXIA AND YPOGEGRAMMENI\n1FC2; 1FC2; 1FCA 0345; 1FCA 0399; # GREEK SMALL LETTER ETA WITH VARIA AND YPOGEGRAMMENI\n# ... (additional lines omitted for brevity)\n1FF7; 1FF7; 03A9 0342 0345; 03A9 0342 0399; # GREEK SMALL LETTER OMEGA WITH PERISPOMENI AND YPOGEGRAMMENI\n```\n\n----------------------------------------\n\nTITLE: Defining Zanabazar Square Script Unicode Block\nDESCRIPTION: Defines the Unicode code point ranges for the Zanabazar Square script. Includes letters, vowel signs, consonant marks, and punctuation marks with their corresponding Unicode character categories.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/Scripts.txt#2025-04-21_snippet_78\n\nLANGUAGE: unicode\nCODE:\n```\n11A00         ; Zanabazar_Square # Lo       ZANABAZAR SQUARE LETTER A\n11A01..11A0A  ; Zanabazar_Square # Mn  [10] ZANABAZAR SQUARE VOWEL SIGN I..ZANABAZAR SQUARE VOWEL LENGTH MARK\n11A0B..11A32  ; Zanabazar_Square # Lo  [40] ZANABAZAR SQUARE LETTER KA..ZANABAZAR SQUARE LETTER KSSA\n11A33..11A38  ; Zanabazar_Square # Mn   [6] ZANABAZAR SQUARE FINAL CONSONANT MARK..ZANABAZAR SQUARE SIGN ANUSVARA\n11A39         ; Zanabazar_Square # Mc       ZANABAZAR SQUARE SIGN VISARGA\n11A3A         ; Zanabazar_Square # Lo       ZANABAZAR SQUARE CLUSTER-INITIAL LETTER RA\n11A3B..11A3E  ; Zanabazar_Square # Mn   [4] ZANABAZAR SQUARE CLUSTER-FINAL LETTER YA..ZANABAZAR SQUARE CLUSTER-FINAL LETTER VA\n11A3F..11A46  ; Zanabazar_Square # Po   [8] ZANABAZAR SQUARE INITIAL HEAD MARK..ZANABAZAR SQUARE CLOSING DOUBLE-LINED HEAD MARK\n11A47         ; Zanabazar_Square # Mn       ZANABAZAR SQUARE SUBJOINER\n\n# Total code points: 72\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Filters and Tags\nDESCRIPTION: This Elixir snippet demonstrates how to configure test filtering in ExUnit by using tags like :distributed to manage test execution based on network connectivity and node availability.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/mix-and-otp/distributed-tasks.md#2025-04-21_snippet_9\n\nLANGUAGE: elixir\nCODE:\n```\nexclude =\n  if Node.alive?(), do: [], else: [distributed: true]\n\nExUnit.start(exclude: exclude)\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Character Ranges for Kawi Script\nDESCRIPTION: This snippet defines the Unicode character ranges for the Kawi script. It includes various character types such as combining marks (Mn), letters (Lo), spacing marks (Mc), punctuation (Po), and numeric digits (Nd).\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/Scripts.txt#2025-04-21_snippet_99\n\nLANGUAGE: Unicode\nCODE:\n```\n11F00..11F01  ; Kawi # Mn   [2] KAWI SIGN CANDRABINDU..KAWI SIGN ANUSVARA\n11F02         ; Kawi # Lo       KAWI SIGN REPHA\n11F03         ; Kawi # Mc       KAWI SIGN VISARGA\n11F04..11F10  ; Kawi # Lo  [13] KAWI LETTER A..KAWI LETTER O\n11F12..11F33  ; Kawi # Lo  [34] KAWI LETTER KA..KAWI LETTER JNYA\n11F34..11F35  ; Kawi # Mc   [2] KAWI VOWEL SIGN AA..KAWI VOWEL SIGN ALTERNATE AA\n11F36..11F3A  ; Kawi # Mn   [5] KAWI VOWEL SIGN I..KAWI VOWEL SIGN VOCALIC R\n11F3E..11F3F  ; Kawi # Mc   [2] KAWI VOWEL SIGN E..KAWI VOWEL SIGN AI\n11F40         ; Kawi # Mn       KAWI VOWEL SIGN EU\n11F41         ; Kawi # Mc       KAWI SIGN KILLER\n11F42         ; Kawi # Mn       KAWI CONJOINER\n11F43..11F4F  ; Kawi # Po  [13] KAWI DANDA..KAWI PUNCTUATION CLOSING SPIRAL\n11F50..11F59  ; Kawi # Nd  [10] KAWI DIGIT ZERO..KAWI DIGIT NINE\n11F5A         ; Kawi # Mn       KAWI SIGN NUKTA\n\n# Total code points: 87\n```\n\n----------------------------------------\n\nTITLE: Defining Gunjala Gondi Script Unicode Block\nDESCRIPTION: Defines the Unicode code point ranges for the Gunjala Gondi script. Includes letters, vowel signs, anusvara, visarga, virama, om, and digits with their corresponding Unicode character categories.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/Scripts.txt#2025-04-21_snippet_80\n\nLANGUAGE: unicode\nCODE:\n```\n11D60..11D65  ; Gunjala_Gondi # Lo   [6] GUNJALA GONDI LETTER A..GUNJALA GONDI LETTER UU\n11D67..11D68  ; Gunjala_Gondi # Lo   [2] GUNJALA GONDI LETTER EE..GUNJALA GONDI LETTER AI\n11D6A..11D89  ; Gunjala_Gondi # Lo  [32] GUNJALA GONDI LETTER OO..GUNJALA GONDI LETTER SA\n11D8A..11D8E  ; Gunjala_Gondi # Mc   [5] GUNJALA GONDI VOWEL SIGN AA..GUNJALA GONDI VOWEL SIGN UU\n11D90..11D91  ; Gunjala_Gondi # Mn   [2] GUNJALA GONDI VOWEL SIGN EE..GUNJALA GONDI VOWEL SIGN AI\n11D93..11D94  ; Gunjala_Gondi # Mc   [2] GUNJALA GONDI VOWEL SIGN OO..GUNJALA GONDI VOWEL SIGN AU\n11D95         ; Gunjala_Gondi # Mn       GUNJALA GONDI SIGN ANUSVARA\n11D96         ; Gunjala_Gondi # Mc       GUNJALA GONDI SIGN VISARGA\n11D97         ; Gunjala_Gondi # Mn       GUNJALA GONDI VIRAMA\n11D98         ; Gunjala_Gondi # Lo       GUNJALA GONDI OM\n11DA0..11DA9  ; Gunjala_Gondi # Nd  [10] GUNJALA GONDI DIGIT ZERO..GUNJALA GONDI DIGIT NINE\n\n# Total code points: 63\n```\n\n----------------------------------------\n\nTITLE: Simple Case Folding and Case Mapping Properties in Unicode\nDESCRIPTION: Reference headers for Simple_Case_Folding (scf), Simple_Lowercase_Mapping (slc), Simple_Titlecase_Mapping (stc), and Simple_Uppercase_Mapping (suc) properties in Unicode.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/PropertyValueAliases.txt#2025-04-21_snippet_23\n\nLANGUAGE: plaintext\nCODE:\n```\n# Simple_Case_Folding (scf)\n\n# @missing: 0000..10FFFF; Simple_Case_Folding; <code point>\n\n# Simple_Lowercase_Mapping (slc)\n\n# @missing: 0000..10FFFF; Simple_Lowercase_Mapping; <code point>\n\n# Simple_Titlecase_Mapping (stc)\n\n# @missing: 0000..10FFFF; Simple_Titlecase_Mapping; <code point>\n\n# Simple_Uppercase_Mapping (suc)\n\n# @missing: 0000..10FFFF; Simple_Uppercase_Mapping; <code point>\n```\n\n----------------------------------------\n\nTITLE: Defining Uncommon Non-XID Unicode Characters\nDESCRIPTION: Defines Unicode code points for characters that are uncommonly used and not valid for XID use, including turned digits and arrows.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/IdentifierType.txt#2025-04-21_snippet_15\n\nLANGUAGE: unicode-data\nCODE:\n```\n218A..218B    ; Uncommon_Use Not_XID           # 8.0    [2] TURNED DIGIT TWO..TURNED DIGIT THREE\n2BEC..2BEF    ; Uncommon_Use Not_XID           # 8.0    [4] LEFTWARDS TWO-HEADED ARROW WITH TRIANGLE ARROWHEADS..DOWNWARDS TWO-HEADED ARROW WITH TRIANGLE ARROWHEADS\n1F54F         ; Uncommon_Use Not_XID           # 8.0        BOWL OF HYGIEIA\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Character Ranges for Cypro-Minoan Script\nDESCRIPTION: This snippet defines the Unicode character ranges for the Cypro-Minoan script. It includes 97 letter characters (Lo) and 2 punctuation characters (Po).\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/Scripts.txt#2025-04-21_snippet_94\n\nLANGUAGE: Unicode\nCODE:\n```\n12F90..12FF0  ; Cypro_Minoan # Lo  [97] CYPRO-MINOAN SIGN CM001..CYPRO-MINOAN SIGN CM114\n12FF1..12FF2  ; Cypro_Minoan # Po   [2] CYPRO-MINOAN SIGN CM301..CYPRO-MINOAN SIGN CM302\n\n# Total code points: 99\n```\n\n----------------------------------------\n\nTITLE: Defining Language-Sensitive Case Mappings for Turkish and Azeri in Unicode\nDESCRIPTION: This snippet defines language-sensitive case mappings for Turkish and Azeri, handling special cases for I, i, and i-dotless characters, including removal of dot above in certain sequences and specific uppercasing and lowercasing rules.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/SpecialCasing.txt#2025-04-21_snippet_9\n\nLANGUAGE: Unicode\nCODE:\n```\n0130; 0069; 0130; 0130; tr; # LATIN CAPITAL LETTER I WITH DOT ABOVE\n0130; 0069; 0130; 0130; az; # LATIN CAPITAL LETTER I WITH DOT ABOVE\n\n0307; ; 0307; 0307; tr After_I; # COMBINING DOT ABOVE\n0307; ; 0307; 0307; az After_I; # COMBINING DOT ABOVE\n\n0049; 0131; 0049; 0049; tr Not_Before_Dot; # LATIN CAPITAL LETTER I\n0049; 0131; 0049; 0049; az Not_Before_Dot; # LATIN CAPITAL LETTER I\n\n0069; 0069; 0130; 0130; tr; # LATIN SMALL LETTER I\n0069; 0069; 0130; 0130; az; # LATIN SMALL LETTER I\n```\n\n----------------------------------------\n\nTITLE: Defining Makasar Script Unicode Block\nDESCRIPTION: Defines the Unicode code point ranges for the Makasar script. Includes letters, vowel signs, and punctuation marks with their corresponding Unicode character categories.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/Scripts.txt#2025-04-21_snippet_81\n\nLANGUAGE: unicode\nCODE:\n```\n11EE0..11EF2  ; Makasar # Lo  [19] MAKASAR LETTER KA..MAKASAR ANGKA\n11EF3..11EF4  ; Makasar # Mn   [2] MAKASAR VOWEL SIGN I..MAKASAR VOWEL SIGN U\n11EF5..11EF6  ; Makasar # Mc   [2] MAKASAR VOWEL SIGN E..MAKASAR VOWEL SIGN O\n11EF7..11EF8  ; Makasar # Po   [2] MAKASAR PASSIMBANG..MAKASAR END OF SECTION\n\n# Total code points: 25\n```\n\n----------------------------------------\n\nTITLE: Scripting Mode Math Module\nDESCRIPTION: Math module implementation with immediate output for scripting purposes.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/modules-and-functions.md#2025-04-21_snippet_3\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule Math do\n  def sum(a, b) do\n    a + b\n  end\nend\n\nIO.puts Math.sum(1, 2)\n```\n\n----------------------------------------\n\nTITLE: Unicode Character Ranges Excluded from Identifier Usage\nDESCRIPTION: Detailed listing of Unicode character ranges that are excluded from being used in identifiers (Exclusion Not_XID). Each line defines a range of code points followed by a comment describing the characters, including their Unicode version and description.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/IdentifierType.txt#2025-04-21_snippet_23\n\nLANGUAGE: unicode\nCODE:\n```\n#\tIdentifier_Type:\tExclusion Not_XID\n\n0830..083E    ; Exclusion Not_XID              # 5.2   [15] SAMARITAN PUNCTUATION NEQUDAA..SAMARITAN PUNCTUATION ANNAAU\n1680          ; Exclusion Not_XID              # 3.0        OGHAM SPACE MARK\n169B..169C    ; Exclusion Not_XID              # 3.0    [2] OGHAM FEATHER MARK..OGHAM REVERSED FEATHER MARK\n16EB..16ED    ; Exclusion Not_XID              # 3.0    [3] RUNIC SINGLE PUNCTUATION..RUNIC CROSS PUNCTUATION\n1735..1736    ; Exclusion Not_XID              # 3.2    [2] PHILIPPINE SINGLE PUNCTUATION..PHILIPPINE DOUBLE PUNCTUATION\n1800..180A    ; Exclusion Not_XID              # 3.0   [11] MONGOLIAN BIRGA..MONGOLIAN NIRUGU\n1A1E..1A1F    ; Exclusion Not_XID              # 4.1    [2] BUGINESE PALLAWA..BUGINESE END OF SECTION\n2CE5..2CEA    ; Exclusion Not_XID              # 4.1    [6] COPTIC SYMBOL MI RO..COPTIC SYMBOL SHIMA SIMA\n2CF9..2CFF    ; Exclusion Not_XID              # 4.1    [7] COPTIC OLD NUBIAN FULL STOP..COPTIC MORPHOLOGICAL DIVIDER\n2E30          ; Exclusion Not_XID              # 5.1        RING POINT\n2E3C          ; Exclusion Not_XID              # 7.0        STENOGRAPHIC FULL STOP\nA874..A877    ; Exclusion Not_XID              # 5.0    [4] PHAGS-PA SINGLE HEAD MARK..PHAGS-PA MARK DOUBLE SHAD\nA95F          ; Exclusion Not_XID              # 5.1        REJANG SECTION MARK\n10100..10102  ; Exclusion Not_XID              # 4.0    [3] AEGEAN WORD SEPARATOR LINE..AEGEAN CHECK MARK\n10107..10133  ; Exclusion Not_XID              # 4.0   [45] AEGEAN NUMBER ONE..AEGEAN NUMBER NINETY THOUSAND\n10137..1013F  ; Exclusion Not_XID              # 4.0    [9] AEGEAN WEIGHT BASE UNIT..AEGEAN MEASURE THIRD SUBUNIT\n10320..10323  ; Exclusion Not_XID              # 3.1    [4] OLD ITALIC NUMERAL ONE..OLD ITALIC NUMERAL FIFTY\n1039F         ; Exclusion Not_XID              # 4.0        UGARITIC WORD DIVIDER\n103D0         ; Exclusion Not_XID              # 4.1        OLD PERSIAN WORD DIVIDER\n1056F         ; Exclusion Not_XID              # 7.0        CAUCASIAN ALBANIAN CITATION MARK\n10857..1085F  ; Exclusion Not_XID              # 5.2    [9] IMPERIAL ARAMAIC SECTION SIGN..IMPERIAL ARAMAIC NUMBER TEN THOUSAND\n10877..1087F  ; Exclusion Not_XID              # 7.0    [9] PALMYRENE LEFT-POINTING FLEURON..PALMYRENE NUMBER TWENTY\n108A7..108AF  ; Exclusion Not_XID              # 7.0    [9] NABATAEAN NUMBER ONE..NABATAEAN NUMBER ONE HUNDRED\n108FB..108FF  ; Exclusion Not_XID              # 8.0    [5] HATRAN NUMBER ONE..HATRAN NUMBER ONE HUNDRED\n10916..10919  ; Exclusion Not_XID              # 5.0    [4] PHOENICIAN NUMBER ONE..PHOENICIAN NUMBER ONE HUNDRED\n1091A..1091B  ; Exclusion Not_XID              # 5.2    [2] PHOENICIAN NUMBER TWO..PHOENICIAN NUMBER THREE\n1091F         ; Exclusion Not_XID              # 5.0        PHOENICIAN WORD SEPARATOR\n1093F         ; Exclusion Not_XID              # 5.1        LYDIAN TRIANGULAR MARK\n109BC..109BD  ; Exclusion Not_XID              # 8.0    [2] MEROITIC CURSIVE FRACTION ELEVEN TWELFTHS..MEROITIC CURSIVE FRACTION ONE HALF\n109C0..109CF  ; Exclusion Not_XID              # 8.0   [16] MEROITIC CURSIVE NUMBER ONE..MEROITIC CURSIVE NUMBER SEVENTY\n109D2..109FF  ; Exclusion Not_XID              # 8.0   [46] MEROITIC CURSIVE NUMBER ONE HUNDRED..MEROITIC CURSIVE FRACTION TEN TWELFTHS\n10A40..10A47  ; Exclusion Not_XID              # 4.1    [8] KHAROSHTHI DIGIT ONE..KHAROSHTHI NUMBER ONE THOUSAND\n10A48         ; Exclusion Not_XID              # 11.0       KHAROSHTHI FRACTION ONE HALF\n10A50..10A58  ; Exclusion Not_XID              # 4.1    [9] KHAROSHTHI PUNCTUATION DOT..KHAROSHTHI PUNCTUATION LINES\n10A7D..10A7F  ; Exclusion Not_XID              # 5.2    [3] OLD SOUTH ARABIAN NUMBER ONE..OLD SOUTH ARABIAN NUMERIC INDICATOR\n10A9D..10A9F  ; Exclusion Not_XID              # 7.0    [3] OLD NORTH ARABIAN NUMBER ONE..OLD NORTH ARABIAN NUMBER TWENTY\n10AC8         ; Exclusion Not_XID              # 7.0        MANICHAEAN SIGN UD\n10AEB..10AF6  ; Exclusion Not_XID              # 7.0   [12] MANICHAEAN NUMBER ONE..MANICHAEAN PUNCTUATION LINE FILLER\n10B39..10B3F  ; Exclusion Not_XID              # 5.2    [7] AVESTAN ABBREVIATION MARK..LARGE ONE RING OVER TWO RINGS PUNCTUATION\n10B58..10B5F  ; Exclusion Not_XID              # 5.2    [8] INSCRIPTIONAL PARTHIAN NUMBER ONE..INSCRIPTIONAL PARTHIAN NUMBER ONE THOUSAND\n10B78..10B7F  ; Exclusion Not_XID              # 5.2    [8] INSCRIPTIONAL PAHLAVI NUMBER ONE..INSCRIPTIONAL PAHLAVI NUMBER ONE THOUSAND\n10B99..10B9C  ; Exclusion Not_XID              # 7.0    [4] PSALTER PAHLAVI SECTION MARK..PSALTER PAHLAVI FOUR DOTS WITH DOT\n10BA9..10BAF  ; Exclusion Not_XID              # 7.0    [7] PSALTER PAHLAVI NUMBER ONE..PSALTER PAHLAVI NUMBER ONE HUNDRED\n10CFA..10CFF  ; Exclusion Not_XID              # 8.0    [6] OLD HUNGARIAN NUMBER ONE..OLD HUNGARIAN NUMBER ONE THOUSAND\n10D6E         ; Exclusion Not_XID              # 16.0       GARAY HYPHEN\n10D8E..10D8F  ; Exclusion Not_XID              # 16.0   [2] GARAY PLUS SIGN..GARAY MINUS SIGN\n10EAD         ; Exclusion Not_XID              # 13.0       YEZIDI HYPHENATION MARK\n10F1D..10F26  ; Exclusion Not_XID              # 11.0  [10] OLD SOGDIAN NUMBER ONE..OLD SOGDIAN FRACTION ONE HALF\n10F51..10F59  ; Exclusion Not_XID              # 11.0   [9] SOGDIAN NUMBER ONE..SOGDIAN PUNCTUATION HALF CIRCLE WITH DOT\n10F86..10F89  ; Exclusion Not_XID              # 14.0   [4] OLD UYGHUR PUNCTUATION BAR..OLD UYGHUR PUNCTUATION FOUR DOTS\n10FC5..10FCB  ; Exclusion Not_XID              # 13.0   [7] CHORASMIAN NUMBER ONE..CHORASMIAN NUMBER ONE HUNDRED\n11047..1104D  ; Exclusion Not_XID              # 6.0    [7] BRAHMI DANDA..BRAHMI PUNCTUATION LOTUS\n11052..11065  ; Exclusion Not_XID              # 6.0   [20] BRAHMI NUMBER ONE..BRAHMI NUMBER ONE THOUSAND\n110BB..110BC  ; Exclusion Not_XID              # 5.2    [2] KAITHI ABBREVIATION SIGN..KAITHI ENUMERATION SIGN\n110BD         ; Exclusion Not_XID              # 5.2        KAITHI NUMBER SIGN\n110BE..110C1  ; Exclusion Not_XID              # 5.2    [4] KAITHI SECTION MARK..KAITHI DOUBLE DANDA\n110CD         ; Exclusion Not_XID              # 11.0       KAITHI NUMBER SIGN ABOVE\n11174..11175  ; Exclusion Not_XID              # 7.0    [2] MAHAJANI ABBREVIATION SIGN..MAHAJANI SECTION MARK\n111C5..111C8  ; Exclusion Not_XID              # 6.1    [4] SHARADA DANDA..SHARADA SEPARATOR\n111CD         ; Exclusion Not_XID              # 7.0        SHARADA SUTRA MARK\n111DB         ; Exclusion Not_XID              # 8.0        SHARADA SIGN SIDDHAM\n111DD..111DF  ; Exclusion Not_XID              # 8.0    [3] SHARADA CONTINUATION SIGN..SHARADA SECTION MARK-2\n11238..1123D  ; Exclusion Not_XID              # 7.0    [6] KHOJKI DANDA..KHOJKI ABBREVIATION SIGN\n112A9         ; Exclusion Not_XID              # 8.0        MULTANI SECTION MARK\n113D4..113D5  ; Exclusion Not_XID              # 16.0   [2] TULU-TIGALARI DANDA..TULU-TIGALARI DOUBLE DANDA\n113D7..113D8  ; Exclusion Not_XID              # 16.0   [2] TULU-TIGALARI SIGN OM PUSHPIKA..TULU-TIGALARI SIGN SHRII PUSHPIKA\n114C6         ; Exclusion Not_XID              # 7.0        TIRHUTA ABBREVIATION SIGN\n115C1..115C9  ; Exclusion Not_XID              # 7.0    [9] SIDDHAM SIGN SIDDHAM..SIDDHAM END OF TEXT MARK\n115CA..115D7  ; Exclusion Not_XID              # 8.0   [14] SIDDHAM SECTION MARK WITH TRIDENT AND U-SHAPED ORNAMENTS..SIDDHAM SECTION MARK WITH CIRCLES AND FOUR ENCLOSURES\n11641..11643  ; Exclusion Not_XID              # 7.0    [3] MODI DANDA..MODI ABBREVIATION SIGN\n11660..1166C  ; Exclusion Not_XID              # 9.0   [13] MONGOLIAN BIRGA WITH ORNAMENT..MONGOLIAN TURNED SWIRL BIRGA WITH DOUBLE ORNAMENT\n116B9         ; Exclusion Not_XID              # 14.0       TAKRI ABBREVIATION SIGN\n1173A..1173F  ; Exclusion Not_XID              # 8.0    [6] AHOM NUMBER TEN..AHOM SYMBOL VI\n1183B         ; Exclusion Not_XID              # 11.0       DOGRA ABBREVIATION SIGN\n118EA..118F2  ; Exclusion Not_XID              # 7.0    [9] WARANG CITI NUMBER TEN..WARANG CITI NUMBER NINETY\n11944..11946  ; Exclusion Not_XID              # 13.0   [3] DIVES AKURU DOUBLE DANDA..DIVES AKURU END OF TEXT MARK\n119E2         ; Exclusion Not_XID              # 12.0       NANDINAGARI SIGN SIDDHAM\n11A3F..11A46  ; Exclusion Not_XID              # 10.0   [8] ZANABAZAR SQUARE INITIAL HEAD MARK..ZANABAZAR SQUARE CLOSING DOUBLE-LINED HEAD MARK\n11A9A..11A9C  ; Exclusion Not_XID              # 10.0   [3] SOYOMBO MARK TSHEG..SOYOMBO MARK DOUBLE SHAD\n11A9E..11AA2  ; Exclusion Not_XID              # 10.0   [5] SOYOMBO HEAD MARK WITH MOON AND SUN AND TRIPLE FLAME..SOYOMBO TERMINAL MARK-2\n11BE1         ; Exclusion Not_XID              # 16.0       SUNUWAR SIGN PVO\n11C41..11C45  ; Exclusion Not_XID              # 9.0    [5] BHAIKSUKI DANDA..BHAIKSUKI GAP FILLER-2\n11C5A..11C6C  ; Exclusion Not_XID              # 9.0   [19] BHAIKSUKI NUMBER ONE..BHAIKSUKI HUNDREDS UNIT MARK\n11C70..11C71  ; Exclusion Not_XID              # 9.0    [2] MARCHEN HEAD MARK..MARCHEN MARK SHAD\n11EF7..11EF8  ; Exclusion Not_XID              # 11.0   [2] MAKASAR PASSIMBANG..MAKASAR END OF SECTION\n11F43..11F4F  ; Exclusion Not_XID              # 15.0  [13] KAWI DANDA..KAWI PUNCTUATION CLOSING SPIRAL\n12470..12473  ; Exclusion Not_XID              # 5.0    [4] CUNEIFORM PUNCTUATION SIGN OLD ASSYRIAN WORD DIVIDER..CUNEIFORM PUNCTUATION SIGN DIAGONAL TRICOLON\n12474         ; Exclusion Not_XID              # 7.0        CUNEIFORM PUNCTUATION SIGN DIAGONAL QUADCOLON\n12FF1..12FF2  ; Exclusion Not_XID              # 14.0   [2] CYPRO-MINOAN SIGN CM301..CYPRO-MINOAN SIGN CM302\n13430..13438  ; Exclusion Not_XID              # 12.0   [9] EGYPTIAN HIEROGLYPH VERTICAL JOINER..EGYPTIAN HIEROGLYPH END SEGMENT\n13439..1343F  ; Exclusion Not_XID              # 15.0   [7] EGYPTIAN HIEROGLYPH INSERT AT MIDDLE..EGYPTIAN HIEROGLYPH END WALLED ENCLOSURE\n16A6E..16A6F  ; Exclusion Not_XID              # 7.0    [2] MRO DANDA..MRO DOUBLE DANDA\n16AF5         ; Exclusion Not_XID              # 7.0        BASSA VAH FULL STOP\n```\n\n----------------------------------------\n\nTITLE: Defining Medefaidrin Script Unicode Block\nDESCRIPTION: Defines the Unicode code point ranges for the Medefaidrin script. Includes letters (both capital and small), digits, and punctuation marks with their corresponding Unicode character categories.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/Scripts.txt#2025-04-21_snippet_82\n\nLANGUAGE: unicode\nCODE:\n```\n16E40..16E7F  ; Medefaidrin # L&  [64] MEDEFAIDRIN CAPITAL LETTER M..MEDEFAIDRIN SMALL LETTER Y\n16E80..16E96  ; Medefaidrin # No  [23] MEDEFAIDRIN DIGIT ZERO..MEDEFAIDRIN DIGIT THREE ALTERNATE FORM\n16E97..16E9A  ; Medefaidrin # Po   [4] MEDEFAIDRIN COMMA..MEDEFAIDRIN EXCLAMATION OH\n\n# Total code points: 91\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Pattern Syntax Characters\nDESCRIPTION: This snippet defines Unicode code points for Pattern Syntax characters, including various brackets, punctuation marks, and symbols. Each line specifies a range or single code point, its category (Pattern_Syntax), and a brief description of the character.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/PropList.txt#2025-04-21_snippet_31\n\nLANGUAGE: Unicode\nCODE:\n```\n27EE          ; Pattern_Syntax # Ps       MATHEMATICAL LEFT FLATTENED PARENTHESIS\n27EF          ; Pattern_Syntax # Pe       MATHEMATICAL RIGHT FLATTENED PARENTHESIS\n27F0..27FF    ; Pattern_Syntax # Sm  [16] UPWARDS QUADRUPLE ARROW..LONG RIGHTWARDS SQUIGGLE ARROW\n2800..28FF    ; Pattern_Syntax # So [256] BRAILLE PATTERN BLANK..BRAILLE PATTERN DOTS-12345678\n2900..2982    ; Pattern_Syntax # Sm [131] RIGHTWARDS TWO-HEADED ARROW WITH VERTICAL STROKE..Z NOTATION TYPE COLON\n2983          ; Pattern_Syntax # Ps       LEFT WHITE CURLY BRACKET\n2984          ; Pattern_Syntax # Pe       RIGHT WHITE CURLY BRACKET\n2985          ; Pattern_Syntax # Ps       LEFT WHITE PARENTHESIS\n2986          ; Pattern_Syntax # Pe       RIGHT WHITE PARENTHESIS\n```\n\n----------------------------------------\n\nTITLE: Unicode Not_NFKC Code Point Definitions\nDESCRIPTION: Defines Unicode code points that are not compatible with Normalization Form KC (NFKC). Includes squared Latin capitals, CJK compatibility ideographs, and other special characters.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/IdentifierType.txt#2025-04-21_snippet_37\n\nLANGUAGE: unicode-data\nCODE:\n```\n1F131         ; Not_NFKC                       # 5.2        SQUARED LATIN CAPITAL LETTER B\n1F132..1F13C  ; Not_NFKC                       # 6.0   [11] SQUARED LATIN CAPITAL LETTER C..SQUARED LATIN CAPITAL LETTER M\n# Total code points: 4957\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Character Ranges for Garay Script\nDESCRIPTION: This snippet defines the Unicode character ranges for the Garay script. It includes numeric digits (Nd), letters (Lo, L&), modifier letters (Lm), combining marks (Mn), dashes (Pd), and math symbols (Sm).\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/Scripts.txt#2025-04-21_snippet_101\n\nLANGUAGE: Unicode\nCODE:\n```\n10D40..10D49  ; Garay # Nd  [10] GARAY DIGIT ZERO..GARAY DIGIT NINE\n10D4A..10D4D  ; Garay # Lo   [4] GARAY VOWEL SIGN A..GARAY VOWEL SIGN EE\n10D4E         ; Garay # Lm       GARAY VOWEL LENGTH MARK\n10D4F         ; Garay # Lo       GARAY SUKUN\n10D50..10D65  ; Garay # L&  [22] GARAY CAPITAL LETTER A..GARAY CAPITAL LETTER OLD NA\n10D69..10D6D  ; Garay # Mn   [5] GARAY VOWEL SIGN E..GARAY CONSONANT NASALIZATION MARK\n10D6E         ; Garay # Pd       GARAY HYPHEN\n10D6F         ; Garay # Lm       GARAY REDUPLICATION MARK\n10D70..10D85  ; Garay # L&  [22] GARAY SMALL LETTER A..GARAY SMALL LETTER OLD NA\n10D8E..10D8F  ; Garay # Sm   [2] GARAY PLUS SIGN..GARAY MINUS SIGN\n\n# Total code points: 69\n```\n\n----------------------------------------\n\nTITLE: Gurmukhi Unicode Block Definition\nDESCRIPTION: Defines the Unicode codepoint ranges for Gurmukhi script characters including letters, vowel signs and digits. Total codepoints: 80\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/Scripts.txt#2025-04-21_snippet_13\n\nLANGUAGE: Unicode\nCODE:\n```\n0A01..0A02    ; Gurmukhi # Mn   [2] GURMUKHI SIGN ADAK BINDI..GURMUKHI SIGN BINDI\n0A03          ; Gurmukhi # Mc       GURMUKHI SIGN VISARGA\n[...remaining Gurmukhi ranges...]\n```\n\n----------------------------------------\n\nTITLE: Unicode Not_XID Character Range Definitions\nDESCRIPTION: Comprehensive listing of Unicode character ranges that are not allowed in identifiers (Not_XID). Each entry includes the Unicode code point range, property marking, Unicode version, and character descriptions.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/IdentifierType.txt#2025-04-21_snippet_28\n\nLANGUAGE: unicode\nCODE:\n```\n#\tIdentifier_Type:\tNot_XID\n\n0009..000D    ; Not_XID                        # 1.1    [5] <control-0009>..<control-000D>\n0020..0026    ; Not_XID                        # 1.1    [7] SPACE..AMPERSAND\n0028..002C    ; Not_XID                        # 1.1    [5] LEFT PARENTHESIS..COMMA\n002F          ; Not_XID                        # 1.1        SOLIDUS\n```\n\n----------------------------------------\n\nTITLE: Function Head with Default Arguments\nDESCRIPTION: Demonstrates the use of function heads when combining default arguments with multiple clauses.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/pages/getting-started/modules-and-functions.md#2025-04-21_snippet_9\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule Concat do\n  # A function head declaring defaults\n  def join(a, b, sep \\\\ \" \")\n\n  def join(a, b, _sep) when b == \"\" do\n    a\n  end\n\n  def join(a, b, sep) do\n    a <> sep <> b\n  end\nend\n\nIO.puts(Concat.join(\"Hello\", \"\"))           #=> Hello\nIO.puts(Concat.join(\"Hello\", \"world\"))      #=> Hello world\nIO.puts(Concat.join(\"Hello\", \"world\", \"_\")) #=> Hello_world\n```\n\n----------------------------------------\n\nTITLE: Arabic Modifier Combining Mark Definitions\nDESCRIPTION: Defines code point ranges for various Arabic modifier combining marks including hamza, noon ghunna, high/low seen, and other diacritical marks used in Arabic script notation.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/PropList.txt#2025-04-21_snippet_34\n\nLANGUAGE: unicode-data\nCODE:\n```\n0654..0655    ; Modifier_Combining_Mark # Mn   [2] ARABIC HAMZA ABOVE..ARABIC HAMZA BELOW\n0658          ; Modifier_Combining_Mark # Mn       ARABIC MARK NOON GHUNNA\n06DC          ; Modifier_Combining_Mark # Mn       ARABIC SMALL HIGH SEEN\n06E3          ; Modifier_Combining_Mark # Mn       ARABIC SMALL LOW SEEN\n06E7..06E8    ; Modifier_Combining_Mark # Mn   [2] ARABIC SMALL HIGH YEH..ARABIC SMALL HIGH NOON\n08CA..08CB    ; Modifier_Combining_Mark # Mn   [2] ARABIC SMALL HIGH FARSI YEH..ARABIC SMALL HIGH YEH BARREE WITH TWO DOTS BELOW\n08CD..08CF    ; Modifier_Combining_Mark # Mn   [3] ARABIC SMALL HIGH ZAH..ARABIC LARGE ROUND DOT BELOW\n08D3          ; Modifier_Combining_Mark # Mn       ARABIC SMALL LOW WAW\n08F3          ; Modifier_Combining_Mark # Mn       ARABIC SMALL HIGH WAW\n```\n\n----------------------------------------\n\nTITLE: Defining Uncommon Technical Unicode Characters\nDESCRIPTION: Specifies Unicode code point ranges for characters that are technical and uncommonly used, including various Latin, Hebrew, Sinhala and Cyrillic characters.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/IdentifierType.txt#2025-04-21_snippet_10\n\nLANGUAGE: unicode-data\nCODE:\n```\n0253..0254    ; Uncommon_Use Technical         # 1.1    [2] LATIN SMALL LETTER B WITH HOOK..LATIN SMALL LETTER OPEN O\n0256..0257    ; Uncommon_Use Technical         # 1.1    [2] LATIN SMALL LETTER D WITH TAIL..LATIN SMALL LETTER D WITH HOOK\n025B          ; Uncommon_Use Technical         # 1.1        LATIN SMALL LETTER OPEN E\n```\n\n----------------------------------------\n\nTITLE: Defining Join_Control Characters in Unicode\nDESCRIPTION: This snippet lists Unicode code points classified as Join_Control. These characters are used to control the joining behavior of surrounding characters.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/PropList.txt#2025-04-21_snippet_2\n\nLANGUAGE: Unicode\nCODE:\n```\n200C..200D    ; Join_Control # Cf   [2] ZERO WIDTH NON-JOINER..ZERO WIDTH JOINER\n```\n\n----------------------------------------\n\nTITLE: Unicode Character Ranges Recommended for Identifiers\nDESCRIPTION: This data file specifies Unicode character ranges that are recommended for use in programming language identifiers. Each line defines a code point or range, labeled as 'Recommended', along with version information and character descriptions.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/IdentifierType.txt#2025-04-21_snippet_1\n\nLANGUAGE: data\nCODE:\n```\n#\tIdentifier_Type:\tRecommended\n\n0030..0039    ; Recommended                    # 1.1   [10] DIGIT ZERO..DIGIT NINE\n0041..005A    ; Recommended                    # 1.1   [26] LATIN CAPITAL LETTER A..LATIN CAPITAL LETTER Z\n005F          ; Recommended                    # 1.1        LOW LINE\n0061..007A    ; Recommended                    # 1.1   [26] LATIN SMALL LETTER A..LATIN SMALL LETTER Z\n00C0..00D6    ; Recommended                    # 1.1   [23] LATIN CAPITAL LETTER A WITH GRAVE..LATIN CAPITAL LETTER O WITH DIAERESIS\n00D8..00F6    ; Recommended                    # 1.1   [31] LATIN CAPITAL LETTER O WITH STROKE..LATIN SMALL LETTER O WITH DIAERESIS\n00F8..0131    ; Recommended                    # 1.1   [58] LATIN SMALL LETTER O WITH STROKE..LATIN SMALL LETTER DOTLESS I\n0134..013E    ; Recommended                    # 1.1   [11] LATIN CAPITAL LETTER J WITH CIRCUMFLEX..LATIN SMALL LETTER L WITH CARON\n0141..0148    ; Recommended                    # 1.1    [8] LATIN CAPITAL LETTER L WITH STROKE..LATIN SMALL LETTER N WITH CARON\n014A..017E    ; Recommended                    # 1.1   [53] LATIN CAPITAL LETTER ENG..LATIN SMALL LETTER Z WITH CARON\n018F          ; Recommended                    # 1.1        LATIN CAPITAL LETTER SCHWA\n01A0..01A1    ; Recommended                    # 1.1    [2] LATIN CAPITAL LETTER O WITH HORN..LATIN SMALL LETTER O WITH HORN\n01AF..01B0    ; Recommended                    # 1.1    [2] LATIN CAPITAL LETTER U WITH HORN..LATIN SMALL LETTER U WITH HORN\n01CD..01DC    ; Recommended                    # 1.1   [16] LATIN CAPITAL LETTER A WITH CARON..LATIN SMALL LETTER U WITH DIAERESIS AND GRAVE\n01DE..01E3    ; Recommended                    # 1.1    [6] LATIN CAPITAL LETTER A WITH DIAERESIS AND MACRON..LATIN SMALL LETTER AE WITH MACRON\n01E6..01F0    ; Recommended                    # 1.1   [11] LATIN CAPITAL LETTER G WITH CARON..LATIN SMALL LETTER J WITH CARON\n01F4..01F5    ; Recommended                    # 1.1    [2] LATIN CAPITAL LETTER G WITH ACUTE..LATIN SMALL LETTER G WITH ACUTE\n01F8..01F9    ; Recommended                    # 3.0    [2] LATIN CAPITAL LETTER N WITH GRAVE..LATIN SMALL LETTER N WITH GRAVE\n01FA..0217    ; Recommended                    # 1.1   [30] LATIN CAPITAL LETTER A WITH RING ABOVE AND ACUTE..LATIN SMALL LETTER U WITH INVERTED BREVE\n0218..021B    ; Recommended                    # 3.0    [4] LATIN CAPITAL LETTER S WITH COMMA BELOW..LATIN SMALL LETTER T WITH COMMA BELOW\n021E..021F    ; Recommended                    # 3.0    [2] LATIN CAPITAL LETTER H WITH CARON..LATIN SMALL LETTER H WITH CARON\n0226..0233    ; Recommended                    # 3.0   [14] LATIN CAPITAL LETTER A WITH DOT ABOVE..LATIN SMALL LETTER Y WITH MACRON\n0259          ; Recommended                    # 1.1        LATIN SMALL LETTER SCHWA\n02BB..02BC    ; Recommended                    # 1.1    [2] MODIFIER LETTER TURNED COMMA..MODIFIER LETTER APOSTROPHE\n02EC          ; Recommended                    # 3.0        MODIFIER LETTER VOICING\n0300..0304    ; Recommended                    # 1.1    [5] COMBINING GRAVE ACCENT..COMBINING MACRON\n0306..030C    ; Recommended                    # 1.1    [7] COMBINING BREVE..COMBINING CARON\n030F..0311    ; Recommended                    # 1.1    [3] COMBINING DOUBLE GRAVE ACCENT..COMBINING INVERTED BREVE\n0313..0314    ; Recommended                    # 1.1    [2] COMBINING COMMA ABOVE..COMBINING REVERSED COMMA ABOVE\n031B          ; Recommended                    # 1.1        COMBINING HORN\n0323..0328    ; Recommended                    # 1.1    [6] COMBINING DOT BELOW..COMBINING OGONEK\n032D..032E    ; Recommended                    # 1.1    [2] COMBINING CIRCUMFLEX ACCENT BELOW..COMBINING BREVE BELOW\n0330..0331    ; Recommended                    # 1.1    [2] COMBINING TILDE BELOW..COMBINING MACRON BELOW\n0335          ; Recommended                    # 1.1        COMBINING SHORT STROKE OVERLAY\n0338..0339    ; Recommended                    # 1.1    [2] COMBINING LONG SOLIDUS OVERLAY..COMBINING RIGHT HALF RING BELOW\n0342          ; Recommended                    # 1.1        COMBINING GREEK PERISPOMENI\n0345          ; Recommended                    # 1.1        COMBINING GREEK YPOGEGRAMMENI\n037B..037D    ; Recommended                    # 5.0    [3] GREEK SMALL REVERSED LUNATE SIGMA SYMBOL..GREEK SMALL REVERSED DOTTED LUNATE SIGMA SYMBOL\n0386          ; Recommended                    # 1.1        GREEK CAPITAL LETTER ALPHA WITH TONOS\n0388..038A    ; Recommended                    # 1.1    [3] GREEK CAPITAL LETTER EPSILON WITH TONOS..GREEK CAPITAL LETTER IOTA WITH TONOS\n038C          ; Recommended                    # 1.1        GREEK CAPITAL LETTER OMICRON WITH TONOS\n038E..03A1    ; Recommended                    # 1.1   [20] GREEK CAPITAL LETTER UPSILON WITH TONOS..GREEK CAPITAL LETTER RHO\n03A3..03CE    ; Recommended                    # 1.1   [44] GREEK CAPITAL LETTER SIGMA..GREEK SMALL LETTER OMEGA WITH TONOS\n03FC..03FF    ; Recommended                    # 4.1    [4] GREEK RHO WITH STROKE SYMBOL..GREEK CAPITAL REVERSED DOTTED LUNATE SIGMA SYMBOL\n0400          ; Recommended                    # 3.0        CYRILLIC CAPITAL LETTER IE WITH GRAVE\n0401..040C    ; Recommended                    # 1.1   [12] CYRILLIC CAPITAL LETTER IO..CYRILLIC CAPITAL LETTER KJE\n040D          ; Recommended                    # 3.0        CYRILLIC CAPITAL LETTER I WITH GRAVE\n040E..044F    ; Recommended                    # 1.1   [66] CYRILLIC CAPITAL LETTER SHORT U..CYRILLIC SMALL LETTER YA\n0450          ; Recommended                    # 3.0        CYRILLIC SMALL LETTER IE WITH GRAVE\n0451..045C    ; Recommended                    # 1.1   [12] CYRILLIC SMALL LETTER IO..CYRILLIC SMALL LETTER KJE\n045D          ; Recommended                    # 3.0        CYRILLIC SMALL LETTER I WITH GRAVE\n045E..045F    ; Recommended                    # 1.1    [2] CYRILLIC SMALL LETTER SHORT U..CYRILLIC SMALL LETTER DZHE\n048A..048B    ; Recommended                    # 3.2    [2] CYRILLIC CAPITAL LETTER SHORT I WITH TAIL..CYRILLIC SMALL LETTER SHORT I WITH TAIL\n048C..048F    ; Recommended                    # 3.0    [4] CYRILLIC CAPITAL LETTER SEMISOFT SIGN..CYRILLIC SMALL LETTER ER WITH TICK\n0490..04C4    ; Recommended                    # 1.1   [53] CYRILLIC CAPITAL LETTER GHE WITH UPTURN..CYRILLIC SMALL LETTER KA WITH HOOK\n04C5..04C6    ; Recommended                    # 3.2    [2] CYRILLIC CAPITAL LETTER EL WITH TAIL..CYRILLIC SMALL LETTER EL WITH TAIL\n04C7..04C8    ; Recommended                    # 1.1    [2] CYRILLIC CAPITAL LETTER EN WITH HOOK..CYRILLIC SMALL LETTER EN WITH HOOK\n04C9..04CA    ; Recommended                    # 3.2    [2] CYRILLIC CAPITAL LETTER EN WITH TAIL..CYRILLIC SMALL LETTER EN WITH TAIL\n04CB..04CC    ; Recommended                    # 1.1    [2] CYRILLIC CAPITAL LETTER KHAKASSIAN CHE..CYRILLIC SMALL LETTER KHAKASSIAN CHE\n04CD..04CE    ; Recommended                    # 3.2    [2] CYRILLIC CAPITAL LETTER EM WITH TAIL..CYRILLIC SMALL LETTER EM WITH TAIL\n04CF          ; Recommended                    # 5.0        CYRILLIC SMALL LETTER PALOCHKA\n04D0..04EB    ; Recommended                    # 1.1   [28] CYRILLIC CAPITAL LETTER A WITH BREVE..CYRILLIC SMALL LETTER BARRED O WITH DIAERESIS\n04EC..04ED    ; Recommended                    # 3.0    [2] CYRILLIC CAPITAL LETTER E WITH DIAERESIS..CYRILLIC SMALL LETTER E WITH DIAERESIS\n04EE..04F5    ; Recommended                    # 1.1    [8] CYRILLIC CAPITAL LETTER U WITH MACRON..CYRILLIC SMALL LETTER CHE WITH DIAERESIS\n04F6..04F7    ; Recommended                    # 4.1    [2] CYRILLIC CAPITAL LETTER GHE WITH DESCENDER..CYRILLIC SMALL LETTER GHE WITH DESCENDER\n04F8..04F9    ; Recommended                    # 1.1    [2] CYRILLIC CAPITAL LETTER YERU WITH DIAERESIS..CYRILLIC SMALL LETTER YERU WITH DIAERESIS\n04FA..04FF    ; Recommended                    # 5.0    [6] CYRILLIC CAPITAL LETTER GHE WITH STROKE AND HOOK..CYRILLIC SMALL LETTER HA WITH STROKE\n0510..0513    ; Recommended                    # 5.0    [4] CYRILLIC CAPITAL LETTER REVERSED ZE..CYRILLIC SMALL LETTER EL WITH HOOK\n0514..0523    ; Recommended                    # 5.1   [16] CYRILLIC CAPITAL LETTER LHA..CYRILLIC SMALL LETTER EN WITH MIDDLE HOOK\n0524..0525    ; Recommended                    # 5.2    [2] CYRILLIC CAPITAL LETTER PE WITH DESCENDER..CYRILLIC SMALL LETTER PE WITH DESCENDER\n0526..0527    ; Recommended                    # 6.0    [2] CYRILLIC CAPITAL LETTER SHHA WITH DESCENDER..CYRILLIC SMALL LETTER SHHA WITH DESCENDER\n0528..0529    ; Recommended                    # 7.0    [2] CYRILLIC CAPITAL LETTER EN WITH LEFT HOOK..CYRILLIC SMALL LETTER EN WITH LEFT HOOK\n052E..052F    ; Recommended                    # 7.0    [2] CYRILLIC CAPITAL LETTER EL WITH DESCENDER..CYRILLIC SMALL LETTER EL WITH DESCENDER\n0531..0556    ; Recommended                    # 1.1   [38] ARMENIAN CAPITAL LETTER AYB..ARMENIAN CAPITAL LETTER FEH\n0559          ; Recommended                    # 1.1        ARMENIAN MODIFIER LETTER LEFT HALF RING\n0561..0586    ; Recommended                    # 1.1   [38] ARMENIAN SMALL LETTER AYB..ARMENIAN SMALL LETTER FEH\n05B4          ; Recommended                    # 1.1        HEBREW POINT HIRIQ\n05D0..05EA    ; Recommended                    # 1.1   [27] HEBREW LETTER ALEF..HEBREW LETTER TAV\n05EF          ; Recommended                    # 11.0       HEBREW YOD TRIANGLE\n05F0..05F2    ; Recommended                    # 1.1    [3] HEBREW LIGATURE YIDDISH DOUBLE VAV..HEBREW LIGATURE YIDDISH DOUBLE YOD\n0620          ; Recommended                    # 6.0        ARABIC LETTER KASHMIRI YEH\n0621..063A    ; Recommended                    # 1.1   [26] ARABIC LETTER HAMZA..ARABIC LETTER GHAIN\n063B..063F    ; Recommended                    # 5.1    [5] ARABIC LETTER KEHEH WITH TWO DOTS ABOVE..ARABIC LETTER FARSI YEH WITH THREE DOTS ABOVE\n0641..0652    ; Recommended                    # 1.1   [18] ARABIC LETTER FEH..ARABIC SUKUN\n```\n\n----------------------------------------\n\nTITLE: Defining Mende Kikakui Script Unicode Exclusion Ranges\nDESCRIPTION: Specifies Unicode code point ranges for the Mende Kikakui script characters that should be excluded from certain operations. The first range covers 197 syllable characters, while the second range covers 7 combining number characters.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/IdentifierType.txt#2025-04-21_snippet_22\n\nLANGUAGE: text\nCODE:\n```\n1E800..1E8C4  ; Exclusion                      # 7.0  [197] MENDE KIKAKUI SYLLABLE M001 KI..MENDE KIKAKUI SYLLABLE M060 NYON\n1E8D0..1E8D6  ; Exclusion                      # 7.0    [7] MENDE KIKAKUI COMBINING NUMBER TEENS..MENDE KIKAKUI COMBINING NUMBER MILLIONS\n\n# Total code points: 20461\n```\n\n----------------------------------------\n\nTITLE: Georgian Script Unicode Ranges\nDESCRIPTION: Defines the Unicode code point ranges for Georgian script characters including capital letters, modifier letters and small letters. Covers 173 total code points from 10A0 to 2D2D.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/Scripts.txt#2025-04-21_snippet_25\n\nLANGUAGE: Unicode\nCODE:\n```\n10A0..10C5    ; Georgian # L&  [38] GEORGIAN CAPITAL LETTER AN..GEORGIAN CAPITAL LETTER HOE\n10C7          ; Georgian # L&       GEORGIAN CAPITAL LETTER YN\n10CD          ; Georgian # L&       GEORGIAN CAPITAL LETTER AEN\n```\n\n----------------------------------------\n\nTITLE: Defining Limited_Use Unicode Code Point Ranges\nDESCRIPTION: This snippet defines Unicode code point ranges for characters with Limited_Use identifier type. It includes ranges for various scripts such as Miao, Nyiakeng Puachue Hmong, Wancho, and Adlam.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/IdentifierType.txt#2025-04-21_snippet_4\n\nLANGUAGE: Unicode\nCODE:\n```\n16F7F..16F87  ; Limited_Use                    # 12.0   [9] MIAO VOWEL SIGN UOG..MIAO VOWEL SIGN UI\n16F8F..16F9F  ; Limited_Use                    # 6.1   [17] MIAO TONE RIGHT..MIAO LETTER REFORMED TONE-8\n1E100..1E12C  ; Limited_Use                    # 12.0  [45] NYIAKENG PUACHUE HMONG LETTER MA..NYIAKENG PUACHUE HMONG LETTER W\n1E130..1E13D  ; Limited_Use                    # 12.0  [14] NYIAKENG PUACHUE HMONG TONE-B..NYIAKENG PUACHUE HMONG SYLLABLE LENGTHENER\n1E140..1E149  ; Limited_Use                    # 12.0  [10] NYIAKENG PUACHUE HMONG DIGIT ZERO..NYIAKENG PUACHUE HMONG DIGIT NINE\n1E14E         ; Limited_Use                    # 12.0       NYIAKENG PUACHUE HMONG LOGOGRAM NYAJ\n1E2C0..1E2F9  ; Limited_Use                    # 12.0  [58] WANCHO LETTER AA..WANCHO DIGIT NINE\n1E900..1E94A  ; Limited_Use                    # 9.0   [75] ADLAM CAPITAL LETTER ALIF..ADLAM NUKTA\n1E94B         ; Limited_Use                    # 12.0       ADLAM NASALIZATION MARK\n1E950..1E959  ; Limited_Use                    # 9.0   [10] ADLAM DIGIT ZERO..ADLAM DIGIT NINE\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Characters with Not_NFKC Property\nDESCRIPTION: A comprehensive listing of Unicode code points that are categorized as 'Not_NFKC' (not compatible with normalization form KC). Each line provides the code point or range, property marking, Unicode version, and full character name.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/IdentifierType.txt#2025-04-21_snippet_34\n\nLANGUAGE: txt\nCODE:\n```\n#\tIdentifier_Type:\tNot_NFKC\n\n00A0          ; Not_NFKC                       # 1.1        NO-BREAK SPACE\n00A8          ; Not_NFKC                       # 1.1        DIAERESIS\n00AA          ; Not_NFKC                       # 1.1        FEMININE ORDINAL INDICATOR\n00AF          ; Not_NFKC                       # 1.1        MACRON\n00B2..00B5    ; Not_NFKC                       # 1.1    [4] SUPERSCRIPT TWO..MICRO SIGN\n00B8..00BA    ; Not_NFKC                       # 1.1    [3] CEDILLA..MASCULINE ORDINAL INDICATOR\n00BC..00BE    ; Not_NFKC                       # 1.1    [3] VULGAR FRACTION ONE QUARTER..VULGAR FRACTION THREE QUARTERS\n0132..0133    ; Not_NFKC                       # 1.1    [2] LATIN CAPITAL LIGATURE IJ..LATIN SMALL LIGATURE IJ\n013F..0140    ; Not_NFKC                       # 1.1    [2] LATIN CAPITAL LETTER L WITH MIDDLE DOT..LATIN SMALL LETTER L WITH MIDDLE DOT\n017F          ; Not_NFKC                       # 1.1        LATIN SMALL LETTER LONG S\n01C4..01CC    ; Not_NFKC                       # 1.1    [9] LATIN CAPITAL LETTER DZ WITH CARON..LATIN SMALL LETTER NJ\n01F1..01F3    ; Not_NFKC                       # 1.1    [3] LATIN CAPITAL LETTER DZ..LATIN SMALL LETTER DZ\n02B0..02B8    ; Not_NFKC                       # 1.1    [9] MODIFIER LETTER SMALL H..MODIFIER LETTER SMALL Y\n02D8..02DD    ; Not_NFKC                       # 1.1    [6] BREVE..DOUBLE ACUTE ACCENT\n02E0..02E4    ; Not_NFKC                       # 1.1    [5] MODIFIER LETTER SMALL GAMMA..MODIFIER LETTER SMALL REVERSED GLOTTAL STOP\n0340..0341    ; Not_NFKC                       # 1.1    [2] COMBINING GRAVE TONE MARK..COMBINING ACUTE TONE MARK\n0343..0344    ; Not_NFKC                       # 1.1    [2] COMBINING GREEK KORONIS..COMBINING GREEK DIALYTIKA TONOS\n0374          ; Not_NFKC                       # 1.1        GREEK NUMERAL SIGN\n037A          ; Not_NFKC                       # 1.1        GREEK YPOGEGRAMMENI\n037E          ; Not_NFKC                       # 1.1        GREEK QUESTION MARK\n0384..0385    ; Not_NFKC                       # 1.1    [2] GREEK TONOS..GREEK DIALYTIKA TONOS\n0387          ; Not_NFKC                       # 1.1        GREEK ANO TELEIA\n03D0..03D6    ; Not_NFKC                       # 1.1    [7] GREEK BETA SYMBOL..GREEK PI SYMBOL\n03F0..03F2    ; Not_NFKC                       # 1.1    [3] GREEK KAPPA SYMBOL..GREEK LUNATE SIGMA SYMBOL\n03F4..03F5    ; Not_NFKC                       # 3.1    [2] GREEK CAPITAL THETA SYMBOL..GREEK LUNATE EPSILON SYMBOL\n03F9          ; Not_NFKC                       # 4.0        GREEK CAPITAL LUNATE SIGMA SYMBOL\n0587          ; Not_NFKC                       # 1.1        ARMENIAN SMALL LIGATURE ECH YIWN\n0675..0678    ; Not_NFKC                       # 1.1    [4] ARABIC LETTER HIGH HAMZA ALEF..ARABIC LETTER HIGH HAMZA YEH\n0958..095F    ; Not_NFKC                       # 1.1    [8] DEVANAGARI LETTER QA..DEVANAGARI LETTER YYA\n09DC..09DD    ; Not_NFKC                       # 1.1    [2] BENGALI LETTER RRA..BENGALI LETTER RHA\n09DF          ; Not_NFKC                       # 1.1        BENGALI LETTER YYA\n0A33          ; Not_NFKC                       # 1.1        GURMUKHI LETTER LLA\n0A36          ; Not_NFKC                       # 1.1        GURMUKHI LETTER SHA\n0A59..0A5B    ; Not_NFKC                       # 1.1    [3] GURMUKHI LETTER KHHA..GURMUKHI LETTER ZA\n0A5E          ; Not_NFKC                       # 1.1        GURMUKHI LETTER FA\n0B5C..0B5D    ; Not_NFKC                       # 1.1    [2] ORIYA LETTER RRA..ORIYA LETTER RHA\n0E33          ; Not_NFKC                       # 1.1        THAI CHARACTER SARA AM\n0EB3          ; Not_NFKC                       # 1.1        LAO VOWEL SIGN AM\n0EDC..0EDD    ; Not_NFKC                       # 1.1    [2] LAO HO NO..LAO HO MO\n0F0C          ; Not_NFKC                       # 2.0        TIBETAN MARK DELIMITER TSHEG BSTAR\n0F43          ; Not_NFKC                       # 2.0        TIBETAN LETTER GHA\n0F4D          ; Not_NFKC                       # 2.0        TIBETAN LETTER DDHA\n0F52          ; Not_NFKC                       # 2.0        TIBETAN LETTER DHA\n0F57          ; Not_NFKC                       # 2.0        TIBETAN LETTER BHA\n0F5C          ; Not_NFKC                       # 2.0        TIBETAN LETTER DZHA\n0F69          ; Not_NFKC                       # 2.0        TIBETAN LETTER KSSA\n0F73          ; Not_NFKC                       # 2.0        TIBETAN VOWEL SIGN II\n0F75..0F76    ; Not_NFKC                       # 2.0    [2] TIBETAN VOWEL SIGN UU..TIBETAN VOWEL SIGN VOCALIC R\n0F78          ; Not_NFKC                       # 2.0        TIBETAN VOWEL SIGN VOCALIC L\n0F81          ; Not_NFKC                       # 2.0        TIBETAN VOWEL SIGN REVERSED II\n0F93          ; Not_NFKC                       # 2.0        TIBETAN SUBJOINED LETTER GHA\n0F9D          ; Not_NFKC                       # 2.0        TIBETAN SUBJOINED LETTER DDHA\n0FA2          ; Not_NFKC                       # 2.0        TIBETAN SUBJOINED LETTER DHA\n0FA7          ; Not_NFKC                       # 2.0        TIBETAN SUBJOINED LETTER BHA\n0FAC          ; Not_NFKC                       # 2.0        TIBETAN SUBJOINED LETTER DZHA\n0FB9          ; Not_NFKC                       # 2.0        TIBETAN SUBJOINED LETTER KSSA\n10FC          ; Not_NFKC                       # 4.1        MODIFIER LETTER GEORGIAN NAR\n1D2C..1D2E    ; Not_NFKC                       # 4.0    [3] MODIFIER LETTER CAPITAL A..MODIFIER LETTER CAPITAL B\n1D30..1D3A    ; Not_NFKC                       # 4.0   [11] MODIFIER LETTER CAPITAL D..MODIFIER LETTER CAPITAL N\n1D3C..1D4D    ; Not_NFKC                       # 4.0   [18] MODIFIER LETTER CAPITAL O..MODIFIER LETTER SMALL G\n1D4F..1D6A    ; Not_NFKC                       # 4.0   [28] MODIFIER LETTER SMALL K..GREEK SUBSCRIPT SMALL LETTER CHI\n1D78          ; Not_NFKC                       # 4.1        MODIFIER LETTER CYRILLIC EN\n1D9B..1DBF    ; Not_NFKC                       # 4.1   [37] MODIFIER LETTER SMALL TURNED ALPHA..MODIFIER LETTER SMALL THETA\n1E9A          ; Not_NFKC                       # 1.1        LATIN SMALL LETTER A WITH RIGHT HALF RING\n1E9B          ; Not_NFKC                       # 2.0        LATIN SMALL LETTER LONG S WITH DOT ABOVE\n1F71          ; Not_NFKC                       # 1.1        GREEK SMALL LETTER ALPHA WITH OXIA\n1F73          ; Not_NFKC                       # 1.1        GREEK SMALL LETTER EPSILON WITH OXIA\n1F75          ; Not_NFKC                       # 1.1        GREEK SMALL LETTER ETA WITH OXIA\n1F77          ; Not_NFKC                       # 1.1        GREEK SMALL LETTER IOTA WITH OXIA\n1F79          ; Not_NFKC                       # 1.1        GREEK SMALL LETTER OMICRON WITH OXIA\n1F7B          ; Not_NFKC                       # 1.1        GREEK SMALL LETTER UPSILON WITH OXIA\n1F7D          ; Not_NFKC                       # 1.1        GREEK SMALL LETTER OMEGA WITH OXIA\n1FBB          ; Not_NFKC                       # 1.1        GREEK CAPITAL LETTER ALPHA WITH OXIA\n1FBD..1FC1    ; Not_NFKC                       # 1.1    [5] GREEK KORONIS..GREEK DIALYTIKA AND PERISPOMENI\n1FC9          ; Not_NFKC                       # 1.1        GREEK CAPITAL LETTER EPSILON WITH OXIA\n1FCB          ; Not_NFKC                       # 1.1        GREEK CAPITAL LETTER ETA WITH OXIA\n1FCD..1FCF    ; Not_NFKC                       # 1.1    [3] GREEK PSILI AND VARIA..GREEK PSILI AND PERISPOMENI\n1FD3          ; Not_NFKC                       # 1.1        GREEK SMALL LETTER IOTA WITH DIALYTIKA AND OXIA\n1FDB          ; Not_NFKC                       # 1.1        GREEK CAPITAL LETTER IOTA WITH OXIA\n1FDD..1FDF    ; Not_NFKC                       # 1.1    [3] GREEK DASIA AND VARIA..GREEK DASIA AND PERISPOMENI\n1FE3          ; Not_NFKC                       # 1.1        GREEK SMALL LETTER UPSILON WITH DIALYTIKA AND OXIA\n1FEB          ; Not_NFKC                       # 1.1        GREEK CAPITAL LETTER UPSILON WITH OXIA\n1FED..1FEF    ; Not_NFKC                       # 1.1    [3] GREEK DIALYTIKA AND VARIA..GREEK VARIA\n1FF9          ; Not_NFKC                       # 1.1        GREEK CAPITAL LETTER OMICRON WITH OXIA\n1FFB          ; Not_NFKC                       # 1.1        GREEK CAPITAL LETTER OMEGA WITH OXIA\n1FFD..1FFE    ; Not_NFKC                       # 1.1    [2] GREEK OXIA..GREEK DASIA\n2000..200A    ; Not_NFKC                       # 1.1   [11] EN QUAD..HAIR SPACE\n2011          ; Not_NFKC                       # 1.1        NON-BREAKING HYPHEN\n2017          ; Not_NFKC                       # 1.1        DOUBLE LOW LINE\n2024..2026    ; Not_NFKC                       # 1.1    [3] ONE DOT LEADER..HORIZONTAL ELLIPSIS\n202F          ; Not_NFKC                       # 3.0        NARROW NO-BREAK SPACE\n2033..2034    ; Not_NFKC                       # 1.1    [2] DOUBLE PRIME..TRIPLE PRIME\n2036..2037    ; Not_NFKC                       # 1.1    [2] REVERSED DOUBLE PRIME..REVERSED TRIPLE PRIME\n203C          ; Not_NFKC                       # 1.1        DOUBLE EXCLAMATION MARK\n203E          ; Not_NFKC                       # 1.1        OVERLINE\n2047          ; Not_NFKC                       # 3.2        DOUBLE QUESTION MARK\n2048..2049    ; Not_NFKC                       # 3.0    [2] QUESTION EXCLAMATION MARK..EXCLAMATION QUESTION MARK\n2057          ; Not_NFKC                       # 3.2        QUADRUPLE PRIME\n205F          ; Not_NFKC                       # 3.2        MEDIUM MATHEMATICAL SPACE\n2070          ; Not_NFKC                       # 1.1        SUPERSCRIPT ZERO\n2071          ; Not_NFKC                       # 3.2        SUPERSCRIPT LATIN SMALL LETTER I\n2074..208E    ; Not_NFKC                       # 1.1   [27] SUPERSCRIPT FOUR..SUBSCRIPT RIGHT PARENTHESIS\n2090..2094    ; Not_NFKC                       # 4.1    [5] LATIN SUBSCRIPT SMALL LETTER A..LATIN SUBSCRIPT SMALL LETTER SCHWA\n2095..209C    ; Not_NFKC                       # 6.0    [8] LATIN SUBSCRIPT SMALL LETTER H..LATIN SUBSCRIPT SMALL LETTER T\n20A8          ; Not_NFKC                       # 1.1        RUPEE SIGN\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Range for SignWriting Terminal Punctuation\nDESCRIPTION: This snippet defines a range of Unicode code points (1DA87 to 1DA8A) categorized as Terminal_Punctuation. These four code points represent SignWriting punctuation marks including comma through colon characters.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/PropList.txt#2025-04-21_snippet_6\n\nLANGUAGE: plain text\nCODE:\n```\n1DA87..1DA8A  ; Terminal_Punctuation # Po   [4] SIGNWRITING COMMA..SIGNWRITING COLON\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Not_XID Exclusion Ranges\nDESCRIPTION: Specifies ranges of Unicode code points that are excluded from XID identifiers. Each line defines a range or single code point with its version number and description. The data covers various scripts including Pahawh Hmong, Kirat Rai, Medefaidrin, Duployan, and SignWriting symbols.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/IdentifierType.txt#2025-04-21_snippet_24\n\nLANGUAGE: unicode-data\nCODE:\n```\n16B37..16B3F  ; Exclusion Not_XID              # 7.0    [9] PAHAWH HMONG SIGN VOS THOM..PAHAWH HMONG SIGN XYEEM FAIB\n16B44..16B45  ; Exclusion Not_XID              # 7.0    [2] PAHAWH HMONG SIGN XAUS..PAHAWH HMONG SIGN CIM TSOV ROG\n16B5B..16B61  ; Exclusion Not_XID              # 7.0    [7] PAHAWH HMONG NUMBER TENS..PAHAWH HMONG NUMBER TRILLIONS\n16D6D..16D6F  ; Exclusion Not_XID              # 16.0   [3] KIRAT RAI SIGN YUPI..KIRAT RAI DOUBLE DANDA\n16E80..16E9A  ; Exclusion Not_XID              # 11.0  [27] MEDEFAIDRIN DIGIT ZERO..MEDEFAIDRIN EXCLAMATION OH\n1BC9C         ; Exclusion Not_XID              # 7.0        DUPLOYAN SIGN O WITH CROSS\n1BC9F         ; Exclusion Not_XID              # 7.0        DUPLOYAN PUNCTUATION CHINOOK FULL STOP\n1D800..1D9FF  ; Exclusion Not_XID              # 8.0  [512] SIGNWRITING HAND-FIST INDEX..SIGNWRITING HEAD\n1DA37..1DA3A  ; Exclusion Not_XID              # 8.0    [4] SIGNWRITING AIR BLOW SMALL ROTATIONS..SIGNWRITING BREATH EXHALE\n1DA6D..1DA74  ; Exclusion Not_XID              # 8.0    [8] SIGNWRITING SHOULDER HIP SPINE..SIGNWRITING TORSO-FLOORPLANE TWISTING\n1DA76..1DA83  ; Exclusion Not_XID              # 8.0   [14] SIGNWRITING LIMB COMBINATION..SIGNWRITING LOCATION DEPTH\n1DA85..1DA8B  ; Exclusion Not_XID              # 8.0    [7] SIGNWRITING LOCATION TORSO..SIGNWRITING PARENTHESIS\n1E5FF         ; Exclusion Not_XID              # 16.0       OL ONAL ABBREVIATION SIGN\n1E8C7..1E8CF  ; Exclusion Not_XID              # 7.0    [9] MENDE KIKAKUI DIGIT ONE..MENDE KIKAKUI DIGIT NINE\n```\n\n----------------------------------------\n\nTITLE: Defining Chakma Unicode Block\nDESCRIPTION: Lists the Unicode code points for the Chakma script, including letters, vowel signs, digits, and punctuation marks with their respective categories.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/Scripts.txt#2025-04-21_snippet_64\n\nLANGUAGE: text\nCODE:\n```\n11100..11102  ; Chakma # Mn   [3] CHAKMA SIGN CANDRABINDU..CHAKMA SIGN VISARGA\n11103..11126  ; Chakma # Lo  [36] CHAKMA LETTER AA..CHAKMA LETTER HAA\n11127..1112B  ; Chakma # Mn   [5] CHAKMA VOWEL SIGN A..CHAKMA VOWEL SIGN UU\n1112C         ; Chakma # Mc       CHAKMA VOWEL SIGN E\n1112D..11134  ; Chakma # Mn   [8] CHAKMA VOWEL SIGN AI..CHAKMA MAAYYAA\n11136..1113F  ; Chakma # Nd  [10] CHAKMA DIGIT ZERO..CHAKMA DIGIT NINE\n11140..11143  ; Chakma # Po   [4] CHAKMA SECTION MARK..CHAKMA QUESTION MARK\n11144         ; Chakma # Lo       CHAKMA LETTER LHAA\n11145..11146  ; Chakma # Mc   [2] CHAKMA VOWEL SIGN AA..CHAKMA VOWEL SIGN EI\n11147         ; Chakma # Lo       CHAKMA LETTER VAA\n\n# Total code points: 71\n```\n\n----------------------------------------\n\nTITLE: Unicode Diacritic Character Mapping\nDESCRIPTION: Defines the Unicode code points for diacritic characters along with their categories and descriptions. Each line contains the hex code point(s), property type 'Diacritic', category code, and character description.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/PropList.txt#2025-04-21_snippet_14\n\nLANGUAGE: plaintext\nCODE:\n```\n005E          ; Diacritic # Sk       CIRCUMFLEX ACCENT\n0060          ; Diacritic # Sk       GRAVE ACCENT\n00A8          ; Diacritic # Sk       DIAERESIS\n00AF          ; Diacritic # Sk       MACRON\n00B4          ; Diacritic # Sk       ACUTE ACCENT\n00B7          ; Diacritic # Po       MIDDLE DOT\n00B8          ; Diacritic # Sk       CEDILLA\n# ... additional characters omitted for brevity\n```\n\n----------------------------------------\n\nTITLE: Defining Dogra Script Unicode Block\nDESCRIPTION: Defines the Unicode code point ranges for the Dogra script. Includes letters, vowel signs, anusvara, virama, nukta, and abbreviation sign with their corresponding Unicode character categories.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/Scripts.txt#2025-04-21_snippet_79\n\nLANGUAGE: unicode\nCODE:\n```\n11800..1182B  ; Dogra # Lo  [44] DOGRA LETTER A..DOGRA LETTER RRA\n1182C..1182E  ; Dogra # Mc   [3] DOGRA VOWEL SIGN AA..DOGRA VOWEL SIGN II\n1182F..11837  ; Dogra # Mn   [9] DOGRA VOWEL SIGN U..DOGRA SIGN ANUSVARA\n11838         ; Dogra # Mc       DOGRA SIGN VISARGA\n11839..1183A  ; Dogra # Mn   [2] DOGRA SIGN VIRAMA..DOGRA SIGN NUKTA\n1183B         ; Dogra # Po       DOGRA ABBREVIATION SIGN\n\n# Total code points: 60\n```\n\n----------------------------------------\n\nTITLE: Unicode Technical Non-XID Characters Definition\nDESCRIPTION: Defines technical characters that are not valid for use in identifiers (XID), including various symbols, enclosing marks, and special notations.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/IdentifierType.txt#2025-04-21_snippet_19\n\nLANGUAGE: unicode\nCODE:\n```\n20DD..20E0    ; Technical Not_XID              # 1.1    [4] COMBINING ENCLOSING CIRCLE..COMBINING ENCLOSING CIRCLE BACKSLASH\n20E2..20E3    ; Technical Not_XID              # 3.0    [2] COMBINING ENCLOSING SCREEN..COMBINING ENCLOSING KEYCAP\n```\n\n----------------------------------------\n\nTITLE: Unicode Obsolete Character Mappings\nDESCRIPTION: Defines obsolete Unicode characters with their code points, version numbers, and descriptions. Each line contains the Unicode code point(s), property type (Obsolete), version number, and character name.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/IdentifierType.txt#2025-04-21_snippet_25\n\nLANGUAGE: unicode\nCODE:\n```\n01B9          ; Obsolete                       # 1.1        LATIN SMALL LETTER EZH REVERSED\n01BF          ; Obsolete                       # 1.1        LATIN LETTER WYNN\n01F6..01F7    ; Obsolete                       # 3.0    [2] LATIN CAPITAL LETTER HWAIR..LATIN CAPITAL LETTER WYNN\n```\n\n----------------------------------------\n\nTITLE: Defining Dives Akuru Script Unicode Block\nDESCRIPTION: Defines the Unicode code point ranges for the Dives Akuru script. Includes letters, vowel signs, various marks, punctuation, and digits with their corresponding Unicode character categories.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/Scripts.txt#2025-04-21_snippet_91\n\nLANGUAGE: unicode\nCODE:\n```\n11900..11906  ; Dives_Akuru # Lo   [7] DIVES AKURU LETTER A..DIVES AKURU LETTER E\n11909         ; Dives_Akuru # Lo       DIVES AKURU LETTER O\n1190C..11913  ; Dives_Akuru # Lo   [8] DIVES AKURU LETTER KA..DIVES AKURU LETTER JA\n11915..11916  ; Dives_Akuru # Lo   [2] DIVES AKURU LETTER NYA..DIVES AKURU LETTER TTA\n11918..1192F  ; Dives_Akuru # Lo  [24] DIVES AKURU LETTER DDA..DIVES AKURU LETTER ZA\n11930..11935  ; Dives_Akuru # Mc   [6] DIVES AKURU VOWEL SIGN AA..DIVES AKURU VOWEL SIGN E\n11937..11938  ; Dives_Akuru # Mc   [2] DIVES AKURU VOWEL SIGN AI..DIVES AKURU VOWEL SIGN O\n1193B..1193C  ; Dives_Akuru # Mn   [2] DIVES AKURU SIGN ANUSVARA..DIVES AKURU SIGN CANDRABINDU\n1193D         ; Dives_Akuru # Mc       DIVES AKURU SIGN HALANTA\n1193E         ; Dives_Akuru # Mn       DIVES AKURU VIRAMA\n1193F         ; Dives_Akuru # Lo       DIVES AKURU PREFIXED NASAL SIGN\n11940         ; Dives_Akuru # Mc       DIVES AKURU MEDIAL YA\n11941         ; Dives_Akuru # Lo       DIVES AKURU INITIAL RA\n11942         ; Dives_Akuru # Mc       DIVES AKURU MEDIAL RA\n11943         ; Dives_Akuru # Mn       DIVES AKURU SIGN NUKTA\n11944..11946  ; Dives_Akuru # Po   [3] DIVES AKURU DOUBLE DANDA..DIVES AKURU END OF TEXT MARK\n11950..11959  ; Dives_Akuru # Nd  [10] DIVES AKURU DIGIT ZERO..DIVES AKURU DIGIT NINE\n\n# Total code points: 72\n```\n\n----------------------------------------\n\nTITLE: Defining Khitan Small Script Unicode Block\nDESCRIPTION: Defines the Unicode code point ranges for the Khitan Small Script. Includes a filler character and a large range of character code points with their corresponding Unicode character categories.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/Scripts.txt#2025-04-21_snippet_92\n\nLANGUAGE: unicode\nCODE:\n```\n16FE4         ; Khitan_Small_Script # Mn       KHITAN SMALL SCRIPT FILLER\n18B00..18CD5  ; Khitan_Small_Script # Lo [470] KHITAN SMALL SCRIPT CHARACTER-18B00..KHITAN SMALL SCRIPT CHARACTER-18CD5\n18CFF         ; Khitan_Small_Script # Lo       KHITAN SMALL SCRIPT CHARACTER-18CFF\n\n# Total code points: 472\n```\n\n----------------------------------------\n\nTITLE: Defining Yezidi Script Unicode Block\nDESCRIPTION: Defines the Unicode code point ranges for the Yezidi script. Includes letters, combining marks, a hyphenation mark, and special letter forms with their corresponding Unicode character categories.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/Scripts.txt#2025-04-21_snippet_93\n\nLANGUAGE: unicode\nCODE:\n```\n10E80..10EA9  ; Yezidi # Lo  [42] YEZIDI LETTER ELIF..YEZIDI LETTER ET\n10EAB..10EAC  ; Yezidi # Mn   [2] YEZIDI COMBINING HAMZA MARK..YEZIDI COMBINING MADDA MARK\n10EAD         ; Yezidi # Pd       YEZIDI HYPHENATION MARK\n10EB0..10EB1  ; Yezidi # Lo   [2] YEZIDI LETTER LAM WITH DOT ABOVE..YEZIDI LETTER YOT WITH CIRCUMFLEX ABOVE\n\n# Total code points: 47\n```\n\n----------------------------------------\n\nTITLE: Unicode Obsolete Not_XID Characters Definition Block\nDESCRIPTION: Defines Unicode code points marked as both obsolete and not valid for use in identifiers (Not_XID). Includes various punctuation marks, symbols, and notation characters from different scripts.\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/IdentifierType.txt#2025-04-21_snippet_27\n\nLANGUAGE: unicode-data\nCODE:\n```\n0482          ; Obsolete Not_XID               # 1.1        CYRILLIC THOUSANDS SIGN\n0488..0489    ; Obsolete Not_XID               # 3.0    [2] COMBINING CYRILLIC HUNDRED THOUSANDS SIGN..COMBINING CYRILLIC MILLIONS SIGN\n05C6          ; Obsolete Not_XID               # 4.1        HEBREW PUNCTUATION NUN HAFUKHA\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Character Ranges for Todhri Script\nDESCRIPTION: This snippet defines the Unicode character ranges for the Todhri script. It includes 52 letter characters (Lo).\nSOURCE: https://github.com/elixir-lang/elixir/blob/main/lib/elixir/unicode/Scripts.txt#2025-04-21_snippet_106\n\nLANGUAGE: Unicode\nCODE:\n```\n105C0..105F3  ; Todhri # Lo  [52] TODHRI LETTER A..TODHRI LETTER OO\n\n# Total code points: 52\n```"
  }
]