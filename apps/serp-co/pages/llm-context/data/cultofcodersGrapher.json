[
  {
    "owner": "cult-of-coders",
    "repo": "grapher",
    "content": "TITLE: Creating Named Queries with Grapher in JavaScript\nDESCRIPTION: Demonstrates how to create a named query using `Collection.createQuery`. Named queries allow defining reusable queries with options for filtering, sorting, and post-processing.  It showcases the use of `$options`, `$filters`, `$filter`, `$postOptions`, `$postFilters`, `$postFilter`, and `body` to define the query, along with parameters and validation options.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/docs/api.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nCollection.createQuery(\n    'queryName',\n    {\n        $options, // Mongo Options {sort, limit, skip}\n        $filters, // Mongo Filters\n        $filter({ filters, options, params }) {}, // Function or [Function]\n        $postOptions, // {limit, sort, skip}\n        $postFilters, // any sift() available filters\n        $postFilter(results, params) {}, // Function => results, or [Function] => results\n        body, // The query body\n    },\n    {\n        params, // Default parameters\n        validateParams, // Object or Function\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Link with Grapher\nDESCRIPTION: This code defines a basic 'one' type link between the Posts collection and the Meteor.users collection using Grapher. The 'author' link is established based on the 'authorId' field in the Posts collection, which corresponds to the '_id' in the Meteor.users collection.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/docs/linking_collections.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// file: /imports/db/posts/links.js\nimport Posts from '...';\n\nPosts.addLinks({\n    'author': {\n        type: 'one',\n        collection: Meteor.users,\n        field: 'authorId',\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating GraphQL Queries with Grapher\nDESCRIPTION: This code snippet demonstrates how to create GraphQL queries using Grapher's `astToQuery` function within a resolver. It allows manipulation of the query body, setting filters and options, restricting the query to a specific body graph, limiting depth, enforcing maximum results, and denying specific fields. Dependencies include the `Users` collection and the `ast` object representing the GraphQL query.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/docs/graphql.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Query = {\n    users(_, args, context, ast) {\n       return Users.astToQuery(ast, {\n            // Manipulate the transformed body\n           embody({body, getArgs}) {},\n\n           $filters, // Mongo Filters/Selector\n           $options, // Mongo Options\n\n           // It will only allow you to query against this body graph\n           // Meaning it won't allow fields outside, links outside, or deeper nested than the ones you specify\n           intersect: Body,\n\n           // Useful when you don't have an intersection body, to restrict the limit of depth, to avoid a nested GraphQL attack\n           maxDepth,\n\n           // Automatically enforces a maximum number of results\n           maxLimit, // Integer\n\n           // Simply removes from the graph what fields it won't allow\n           // Can work with deep strings like 'comments.author'\n           deny, // String[]\n        }).fetch();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Links with Grapher in JavaScript\nDESCRIPTION: Demonstrates adding links between collections using `Collection.addLinks`.  It showcases defining links with direct collection references, specifying the type ('one' or 'many'), metadata, field, index, and denormalization configurations. It also shows the use of `inversedBy` for defining the link from the other side of the relationship, including denormalization.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/docs/api.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nCollection.addLinks({\n    linkName: {\n        collection, // Mongo.Collection\n        type, // 'one' or 'many'\n        metadata, // Boolean\n        field, // String\n        index, // Boolean, whether to index your collections\n        denormalize: {\n            field, // String\n            body, // Body from related collection\n        },\n    },\n});\n\nCollection.addLinks({\n    linkName: {\n        collection, // Mongo.Collection\n        inversedBy, // The link name from the other side\n        denormalize: {\n            field, // String\n            body, // Body from related collection\n        },\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Linking to Another Collection within Meta\nDESCRIPTION: These code snippets illustrate how to link to another collection within the metadata using an intermediate collection.  It involves defining links between Meteor.users, GroupUserLinks, and Groups collections to represent user-group relationships and additional information about those relationships.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/docs/linking_collections.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n// file: /imports/db/groupUserLinks/links.js\nimport Groups from '...';\nimport GroupUserLinks from '...';\n\n// file: /imports/db/users/links.js\nMeteor.users.addLinks({\n    groupLink: {\n        collection: GroupUserLinks,\n        type: 'one',\n        field: 'groupLinkId',\n    }\n})\n\nGroupUserLinks.addLinks({\n    user: {\n        collection: Meteor.users,\n        inversedBy: 'groupLink',\n    },\n    adder: {\n        type: 'one',\n        collection: Meteor.users,\n        field: 'addedBy'\n    },\n    group: {\n        type: 'one',\n        collection: Meteor.users,\n        field: 'groupId'\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Collection Exposure Options in Grapher\nDESCRIPTION: This code demonstrates various options for configuring collection exposure. These options include firewall functions to filter data, publication and method settings to control data access, limitations on query depth and item count, and restrictions on specific fields and links.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/docs/global_exposure.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nCollection.expose({\n    // it can also be an array of functions\n    firewall(filters, options, userId) {\n        filters.userId = userId;\n    },\n    // Allow reactive query-ing\n    publication: true,\n    // Allow static query-in\n    method: true,\n    // Unblock() the method/publication\n    blocking: false,\n    // The publication/method will not allow data fetching for more than 100 items.\n    maxLimit: 100, \n    // The publication/method will not allow a query with more than 3 levels deep.\n    maxDepth: 3,\n    // This will clean up filters, options.sort and options.fields and remove those fields from there.\n    // It even removes it from deep filters with $or, $nin, etc\n    restrictedFields: ['services', 'secretField'],\n    // Array of strings or a function that has userId\n    restrictLinks: ['link1', 'link2']\n});\n```\n\n----------------------------------------\n\nTITLE: Exposing a Grapher Query with Options in JavaScript\nDESCRIPTION: This snippet demonstrates how to expose a Grapher query with various options, including firewall for security, method and publication flags, unblocking for performance, parameter validation, and embody for extending the query body. The `firewall` function allows modification of parameters before the query is executed. The `embody` option allows deep extension of the graph's body, providing server-side modifications before processing.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/docs/named_queries.md#_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nquery.expose({\n    // Secure your query\n    firewall(userId, params) {\n        // you can modify the parameters here\n    },\n    \n    // Allow the query to be fetched statically\n    method: true, // default\n    \n    // Allow the query to be fetched reactively (for heavy queries, you may want to set it to false)\n    publication: true, // default\n    \n    // Unblocks your method (and if you have .unblock() in publication context it also unblocks it)\n    unblock: true,  // default\n    \n    // This can be an object or a function(params) that you don't want to expose it on the client via\n    // The query options as it may hold some secret business data\n    // If you don't specify it the default validateParams from the query applies, but not both!\n    // If you allow subbody requests, don't forget to add {$body: Match.Maybe(Boolean)}\n    validateParams: {},\n    \n    // This deep extends your graph's body before processing it.\n    // For example, you want a hidden $filter() functionality, or anything else.\n    embody: {}, // Accepts Object or Function(body, params)\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching Posts with Grapher Query\nDESCRIPTION: This snippet demonstrates how to fetch posts using a Grapher query within a Meteor method. It utilizes `Posts.createQuery()` to define the fields to be fetched and then uses `query.fetch()` to retrieve the data. This promotes code reusability and controlled data exposure.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/docs/introduction.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nMeteor.methods({\n    posts() {\n        const query = Posts.createQuery({\n            title: 1,\n            createdAt: 1,\n            createdBy: 1,\n        });\n        \n        return query.fetch();\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Options in Named Query\nDESCRIPTION: Demonstrates how to specify options, such as sorting, within a named query using `createQuery`. The options are passed to the underlying database query.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/docs/named_queries.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst admins = createQuery({\n    userAdminList: {\n        options: {createdAt: -1}\n    },\n}).fetch();\n```\n\n----------------------------------------\n\nTITLE: Creating GraphQL Queries with Grapher in JavaScript\nDESCRIPTION: Illustrates how to create GraphQL queries using Grapher's `astToQuery` method. It shows how to transform a GraphQL AST into a Grapher query with options for filtering, limiting depth, and denying specific fields. It also demonstrates the usage of the `embody` function for manipulating the transformed body, and setting $filters and $options.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/docs/api.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst Query = {\n    users(_, args, context, ast) {\n        const query = Users.astToQuery(ast, {\n            // Manipulate the transformed body\n           embody({body, getArgs}) {}\n\n           $filters, // Mongo Filters/Selector\n           $options, // Mongo Options\n\n           // It will only allow you to query against this body graph\n           // Meaning it won't allow fields outside, links outside, or deeper nested than the ones you specify\n           intersect: Body,\n\n           // Useful when you don't have an intersection body, to restrict the limit of depth, to avoid a nested GraphQL attack\n           maxDepth,\n\n           // Automatically enforces a maximum number of results\n           maxLimit, // Integer\n\n           // Simply removes from the graph what fields it won't allow\n           // Can work with deep strings like 'comments.author'\n           deny, // String[]\n        })\n\n        return query.fetch();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Links for Grapher Query in JavaScript\nDESCRIPTION: This snippet demonstrates how to define a link for a Grapher query. The `addLinks` function is used to establish a relationship between the `Users` collection and the `friends` field, specifying the target collection, the field containing the relationship, and the link type.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/docs/named_queries.md#_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nUsers.addLinks({\n    friends: {\n        collection: Users,\n        field: 'friendIds',\n        type: 'many'\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Default Exposure Configuration in Grapher\nDESCRIPTION: This code snippet demonstrates how to set default exposure configurations using the `Exposure.setConfig` method.  This allows for applying global settings such as firewalls, method/publication options, and field restrictions to all exposed collections, reducing code duplication and ensuring consistency.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/docs/global_exposure.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Exposure } from 'meteor/cultofcoders:grapher';\n\n// Make sure you do this before exposing any collections.\nExposure.setConfig({\n    firewall,\n    method,\n    publication,\n    blocking,\n    maxLimit,\n    maxDepth,\n    restrictedFields\n});\n```\n\n----------------------------------------\n\nTITLE: Making Fields Invisible for Certain Users in Grapher\nDESCRIPTION: This code shows how to restrict certain fields from being accessed by specific users using the `Exposure.restrictFields` method. This approach involves modifying the filters and options to prevent exposure of sensitive information to unauthorized users. It is important to filter from both filters and options to prevent a hacker from requesting the data via sorting or filtering on restricted fields.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/docs/global_exposure.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// Make certain fields invisible for certain users\nimport { Exposure } from 'meteor/cultofcoders:grapher'\nCollection.expose({\n    firewall(filters, options, userId) {\n        if (!isAdmin(userId)) {\n            Exposure.restrictFields(filters, options, ['privateData']);\n            // it will remove all specified fields from filters, options.sort, options.fields\n            // this way you will not expose unwanted data.\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Exposing Named Queries with Grapher in JavaScript\nDESCRIPTION: Demonstrates how to expose a named query using `query.expose`. Exposing a query makes it accessible via methods and publications. It showcases options like `firewall`, `method`, `publication`, `unblock`, `validateParams`, and `embody` to control access and customize the query's behavior.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/docs/api.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nquery.expose({\n    firewall(userId, params) {}, // Function or [Function]\n    method, // Boolean\n    publication, // Boolean\n    unblock, // Boolean\n    validateParams, // Function or Object\n    embody, // Object which extends the body server-side securely, or Function(body, params)\n});\n```\n\n----------------------------------------\n\nTITLE: Restrict Links by User ID in Grapher\nDESCRIPTION: This example shows how to dynamically restrict links based on the user's ID using the `restrictLinks` option. This function should return an array of link names that should be restricted for the given user. This allows for fine-grained control over data relationships based on user roles or permissions.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/docs/global_exposure.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nCollection.expose({\n    restrictLinks(userId) {\n        return ['privateLink', 'anotherPrivateLink']\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Exposing a Grapher Query with Multiple Firewalls in JavaScript\nDESCRIPTION: This shows how to use an array of functions for the firewall option when exposing a Grapher query.  The example includes a `checkLoggedIn` function and an anonymous function. This enables more complex security logic to be applied to the query execution. Each function in the array is executed sequentially.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/docs/named_queries.md#_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nfunction checkLoggedIn(userId, params) {\n    if (!userId) {\n        throw new Meteor.Error('not-allowed');\n    }\n}\n\nquery.expose({\n    firewall: [checkLoggedIn, (userId, params) => {\n        params.userId = userId;\n        // other stuff here if you want\n    }]\n})\n```\n\n----------------------------------------\n\nTITLE: Denormalizing a One-to-One Link in Meteor.users Collection (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to add a denormalized link to the `Meteor.users` collection. It links the `avatar` field to the `Images` collection, caching the `path` and `smallThumbPath` fields of the avatar image in the `avatarCache` field of the `Meteor.users` document.  It assumes the existence of an `Images` collection with fields like `_id`, `path`, `smallThumbPath`, and `createdAt`.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/docs/denormalization.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Assuming Images of schema: {_id, path, smallThumbPath, createdAt}\nimport Images from '...';\n\nMeteor.users.addLinks({\n    avatar: {\n        collection: Images,\n        field: 'avatarId',\n        type: 'one',\n        denormalize: {\n            field: 'avatarCache', // in which field to store the cache\n            // what fields to cache from Images, this only works for fields and not links\n            body: { \n                path: 1,\n                smallThumbPath: 1,\n            }\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Filtering and Sorting Grapher Query Results\nDESCRIPTION: This snippet demonstrates how to filter and sort results using `$filters` and `$options` within a Grapher query. It uses the `Posts.createQuery()` method to define the query. It includes filtering for approved posts and sorting by creation date in descending order.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/docs/introduction.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nMeteor.methods({\n    posts() {\n        // Previously Posts.find({isApproved: true}, {sort: '...', fields: '...'});\n        const query = Posts.createQuery({\n            $filters: {\n                isApproved: true,\n            },\n            $options: {\n                sort: {createdAt: -1}\n            },\n            title: 1,\n            createdAt: 1,\n            createdBy: 1,\n        });\n        \n        return query.fetch();\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Exposing Global Queries with Grapher in JavaScript\nDESCRIPTION: Shows how to expose global queries using `Collection.expose`. This makes the global query accessible via methods and publications with options for access control, limiting depth and results, and restricting fields.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/docs/api.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nCollection.expose({\n    firewall(filters, options, userId) {}, // Function or [Function]\n    publication, // Boolean\n    method, // Boolean\n    blocking, // Boolean\n    maxLimit, // Number\n    maxDepth, // Number\n    restrictedFields, // [String]\n    restrictLinks, // [String] or Function,\n    body, // Object or Function(userId) => Object\n});\n```\n\n----------------------------------------\n\nTITLE: Exposing Grapher as HTTP API with Picker\nDESCRIPTION: This snippet creates an HTTP endpoint using Picker to expose Grapher queries. It parses the request body as EJSON, authorizes the user, creates a Grapher query, and returns the results as EJSON. It includes error handling and security checks to prevent unauthorized queries.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/docs/outside_meteor.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n// This is how you can create a sample endpoint\n\nimport {createQuery} from 'meteor/cultofcoders:grapher';\nimport Picker from 'meteor/meteorhacks:picker';\nimport {EJSON} from 'meteor/ejson';\nimport {Meteor} from 'meteor/meteor';\nimport bodyParser from 'body-parser';\n\nconst grapherRoutes = Picker.filter(function () {\n    return true;\n});\n\ngrapherRoutes.middleware(bodyParser.raw({\n    'type': 'application/ejson',\n}));\n\ngrapherRoutes.route('/grapher', function (req, res) {\n    const body = req.body.toString();\n    const data = EJSON.parse(body);\n    \n    // lets say this is a named query that looks like\n    const {query} = data; // query = {userList: params}\n    \n    // authorize the user somehow\n    // it's up to you to extract an userId\n    // or something else that you use for authorization\n    \n    const actualQuery = createQuery(query);\n    \n    // if it's not a named query and the collection is not exposed, don't allow it.\n    // if you don't put this snippet of code, people will be able to do { users: { services: 1 } } types of queries.\n    // this is related to global queries.\n    if (actualQuery.isGlobalQuery && !actualQuery.collection.__isExposedForGrapher) {\n        throw new Meteor.Error('not-allowed');\n    }\n    \n    try {\n        const data = actualQuery.fetch({\n            // the userId (User Identification) that hits the firewalls\n            // user id can be anything, an API KEY, an Object, you and your firewalls decide\n            userId: 'XXX',\n            // you can specify other fields, because this is the context of the firewall\n            // whatever you define here, it can be accessed with `this`\n        });\n        \n        res.statusCode = 200;\n        res.end(EJSON.stringify({\n            data,\n        }));\n    } catch (e) {\n        res.statusCode = 500;\n        res.end(EJSON.stringify({\n            error: e.reason,\n        }));\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Defining an autoremoval link in Grapher (JS)\nDESCRIPTION: This code defines a link between `Meteor.users` and `Posts` collections with the `autoremove` option set to `true`. This means that when a user is deleted, all associated posts linked through this relation will also be automatically deleted.  This helps maintain data integrity by removing orphaned data. It requires `Posts` collection to have an inversed link to `Meteor.users`.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/docs/linking_collections.md#_snippet_21\n\nLANGUAGE: js\nCODE:\n```\nMeteor.users.addLinks({\n    'posts': {\n        collection: Posts,\n        inversedBy: 'author',\n        autoremove: true\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Securing Collection Exposure with Restrictions in Grapher\nDESCRIPTION: This code demonstrates how to restrict access to specific fields and links when exposing a Meteor collection.  'restrictedFields' prevents the client from querying specified fields, while 'restrictLinks' prevents access to specified links. This improves the security of the exposed data.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/docs/global_exposure.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nMeteor.users.expose({\n    restrictedFields: ['services'],\n    restrictLinks: ['anyLink'], \n});\n```\n\n----------------------------------------\n\nTITLE: Exposing a Named Query with a Firewall\nDESCRIPTION: Demonstrates how to expose a named query and define a firewall to control access based on user roles. The firewall can modify parameters passed to the query.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/docs/named_queries.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// server-side \n// make sure it's imported from somewhere on the server only\n// file: /imports/api/users/queries/userAdminList.expose.js\nimport userAdminListQuery from './userAdminList';\n\nuserAdminListQuery.expose({\n    firewall(userId, params) {\n        if (!Roles.userIsInRole(userId, 'ADMIN')) {\n            throw new Meteor.Error('not-allowed');\n        }\n        \n        // in the firewall you also have the ability to modify the parameters\n        // that are going to hit the $filter() function in the query\n        \n        // the firewall runs in the Meteor.methods or Meteor.publish context\n        // Meaning you can have access to this.userId and others.\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Defining a link with a foreign identity field in Grapher (JS)\nDESCRIPTION: This code defines a link between the `Appointments` and `Tasks` collections using the `foreignIdentityField` option. It specifies that the `tasks` field in `Appointments` should be linked to the `referenceId` field in `Tasks`, instead of the default `_id` field. This allows linking based on a field other than the primary key.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/docs/linking_collections.md#_snippet_19\n\nLANGUAGE: js\nCODE:\n```\nAppointments.addLinks({\n  tasks: {\n    collection: Tasks,\n    type: \"many\",\n    field: \"_id\", // field from Appointments collection\n    foreignIdentityField: \"referenceId\", // field from Tasks collection\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Reducer Example (Grapher)\nDESCRIPTION: This code shows a basic example of a reducer that combines the first and last names from the user's profile into a full name.  It defines the body, which specifies the fields needed from the database, and the reduce function, which performs the concatenation. Requires Meteor.users collection with profile.firstName and profile.lastName fields.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/docs/reducers.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nMeteor.users.addReducers({\n    fullName: {\n        body: {\n            profile: {\n                firstName: 1,\n                lastName: 1\n            }\n        },\n        reduce(object) {\n            const {profile} = object;\n            \n            return `${profile.firstName} ${profile.lastName}`;\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Compose User Fragments\nDESCRIPTION: Shows how to compose multiple fragments using the `compose` function from the `meteor/cultofcoders:grapher` package. This allows combining multiple sets of fields into a single structure for use in a Grapher query.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/docs/structure_and_patterns.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport {compose} from 'meteor/cultofcoders:grapher';\n\nimport {\n    UserPublicFragment,\n    UserBillingFragment,\n} from '/imports/db/fragments';\n\nInvoices.createQuery({\n    number: 1,\n    total: 1,\n    user: {\n        ...compose(\n            UserPublicFragment,\n            UserBillingFragment\n        )\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Setting One Link with Object JavaScript\nDESCRIPTION: This example shows how to set a `one` link by providing an object directly. This will automatically insert or update the related document in the database before setting the link. It demonstrates creating a new payment profile and linking it to a user. It depends on the `PaymentProfiles` collection having the correct schema.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/docs/linker_engine.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst userPaymentProfileLink = Meteor.users.getLink(userId, 'paymentProfile');\n\nuserPaymentProfileLink.set({\n    last4digits: '1234',\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Complex Query with Grapher\nDESCRIPTION: This code snippet demonstrates how to create a complex query in Grapher to fetch posts, categories, authors, and comments with nested author information. It showcases the structure of a Grapher query with nested fields and options.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/docs/hypernova.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncreateQuery({\n    posts: {\n        categories: {\n            name: 1,\n        },\n        author: {\n            name: 1,\n        },\n        comments: {\n            $options: {limit: 10},\n            author: {\n                name: 1,\n            }\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Exposing and Resolving a Grapher Query in JavaScript\nDESCRIPTION: This server-side snippet demonstrates how to expose and resolve a Grapher query. It imports the previously created `getAnalyticsQuery`, exposes it with a firewall and `validateParams`, and defines a `resolve` function that performs the actual data retrieval or computation.  The resolve function is in `Meteor.method` context, giving access to `this.userId`.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/docs/named_queries.md#_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\n// server code only\nimport getAnalyticsQuery from './getAnalytics';\n\ngetAnalyticsQuery.expose({\n    firewall(userId, params) {\n        params.userId = userId;\n    },\n    validateParams: {} // Object or Function that you don't want exposed\n});\n\ngetAnalyticsQuery.resolve(function(params) {\n    // perform your magic here\n    // you are in `Meteor.method` context, so you have access to `this.userId`\n})\n```\n\n----------------------------------------\n\nTITLE: Exposing Collection with Body Definition in Grapher\nDESCRIPTION: This snippet demonstrates how to use the 'body' option in `Collection.expose` to define the structure of the data that is exposed. The provided example shows the basic usage where only 'firstName' from the 'users' collection and 'name' from the linked 'groups' collection are exposed.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/docs/global_exposure.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nMeteor.users.expose({\n    body: {\n        firstName: 1,\n        groups: {\n            name: 1\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Caching Named Queries with Grapher in JavaScript\nDESCRIPTION: Shows how to cache the results of a named query using `query.cacheResults` and `MemoryResultCacher`. This can improve performance by reducing the number of database queries. The example demonstrates setting a TTL (time-to-live) for the cached results.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/docs/api.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { MemoryResultCacher } from 'meteor/cultofcoders:grapher';\n\n// server-side\nquery.cacheResults(\n    new MemoryResultCacher({\n        ttl: 60 * 1000, // 60 seconds\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Exposing a Named Query and Caching with MemoryResultCacher\nDESCRIPTION: This snippet shows how to expose a named query on the server and configure caching using `MemoryResultCacher`. It sets up a firewall to pass the user ID as a parameter and initializes the cacher with a time-to-live (TTL) of 60 seconds.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/docs/caching_results.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// server-side\nimport myFriendsQuery from '...';\nimport {MemoryResultCacher} from 'meteor/cultofcoders:grapher';\n\nmyFriendsQuery.expose({\n    firewall(userId, params) {\n        params.userId = userId;\n    }\n});\n\nconst cacher = new MemoryResultCacher({\n   ttl: 60 * 1000, // 60 seconds caching\n});\n\nmyFriendsQuery.cacheResults(cacher);\n```\n\n----------------------------------------\n\nTITLE: Mapping Fields in Grapher\nDESCRIPTION: This code snippet shows how to map database fields to different field names in the GraphQL API using Grapher's `addFieldMap` function. This allows you to expose a different naming convention to the API consumers. The dependency is the `Users` collection.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/docs/graphql.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nUsers.addFieldMap({\n    createdAt: 'created_at',\n});\n```\n\n----------------------------------------\n\nTITLE: Using Queries with Grapher in JavaScript\nDESCRIPTION: Demonstrates how to use a query to fetch data on both the server and client sides. It showcases setting parameters, cloning queries with specific parameters, and fetching data using `fetch`, `fetchOne`, and `getCount`. It also shows how to use reactive queries with `subscribe`, `fetch`, and `getCount` on the client.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/docs/api.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nquery.setParams({}); // extends current params\n```\n\nLANGUAGE: javascript\nCODE:\n```\nquery.clone({ params }).fetch();\nquery.clone({ params }).fetchOne();\nquery.clone({ params }).getCount();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nquery.clone({ params }).fetch((err, res) => {});\nquery.clone({ params }).fetchOne((err, res) => {});\nquery.clone({ params }).getCount((err, res) => {});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst query = userListQuery.clone({ params });\n\nconst handle = query.subscribe(); // handle.ready()\nconst data = query.fetch();\nconst oneData = query.fetchOne();\n\nconst handleCount = query.subscribeCount();\nconst count = query.getCount();\n```\n\n----------------------------------------\n\nTITLE: Querying Appointments with linked Tasks in Grapher (JS)\nDESCRIPTION: This code demonstrates how to query the `Appointments` collection and retrieve linked `Tasks` based on the foreign identity field configuration. It specifies filters and the fields to retrieve from both `Appointments` and `Tasks`. This illustrates how to fetch linked data using the defined link.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/docs/linking_collections.md#_snippet_20\n\nLANGUAGE: js\nCODE:\n```\nAppointments.createQuery({\n    $filters: { ... },\n    tasks: {\n        title: 1,\n    },\n    startDate: 1,\n    endDate: 1,\n}).fetch();\n```\n\n----------------------------------------\n\nTITLE: Custom Parameter Validation\nDESCRIPTION: This snippet demonstrates how to implement custom parameter validation for a Grapher query.  It provides a function within `validateParams` that can perform custom checks and throw a `Meteor.Error` if the parameters are invalid. This allows for more complex validation logic.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/docs/introduction.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    validateParams(params) {\n        if (somethingIsWrong) {\n            throw new Meteor.Error('invalid-params', 'Explain why');\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Meta Link with Grapher\nDESCRIPTION: This code defines a meta link between the Meteor.users collection and the Groups collection using Grapher. The 'group' link stores metadata about the user's relationship with the group, such as roles and creation date. The 'groupLink' field in the user document is an object containing the group's _id and the metadata.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/docs/linking_collections.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// file: /imports/db/users/links.js\nimport Groups from '...'\n\nMeteor.users.addLinks({\n    group: {\n        type: 'one',\n        collection: Groups,\n        field: 'groupLink',\n        metadata: true,\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Querying an Inversed Link\nDESCRIPTION: This code demonstrates querying the Meteor.users collection to fetch posts related to each user via an inversed link.  It will return user documents with a 'posts' field containing related post documents.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/docs/linking_collections.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nMeteor.users.createQuery({\n    posts: {\n        title: 1\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Impure Reducer with External API (Grapher)\nDESCRIPTION: This shows an example of an impure reducer fetching data from an external API. The reducer calls an external API using Meteor.wrapAsync.  This type of reducer must be defined server-side and used with static queries only. Requires the Projects collection to have a 'repository' field, and an API.doSomething method to exist.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/docs/reducers.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nProjects.addReducers({\n    githubStars: {\n        body: {\n            repository: 1,\n        },\n        reduce(collectionItem) {\n            // you can use anything that is in sync\n            // don't return the result inside a callback because it won't work.\n            const {repository} = collectionItem;\n            const call = Meteor.wrapAsync(API.doSomething, API);\n            return call();\n        },\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching Linked Data JavaScript\nDESCRIPTION: This example demonstrates different ways to fetch linked data using the linker. It shows how to fetch all linked groups, filter the linked elements using `find(filters, options)` and `fetch(filters, options)`, and count the number of linked groups using `count()`. It requires a `userGroupLinker` instance initialized via `getLink()` and a predefined link between users and groups.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/docs/linker_engine.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst userGroupLinker = Meteor.users.getLink(userId, 'groups');\n\n// fetching the groups for that user:\nconst groups = userGroupLinker.find().fetch();\n// or for ease of use\nconst groups = userGroupLinker.fetch();\n// or to filter the linked elements\nconst groups = userGroupLinker.find(filters, options).fetch();\n// and again simpler\nconst groups = userGroupLinker.fetch(filters, options);\n\n// and if you want to get a count()\nconst groups = userGroupLinker.find(filters, options).count();\n```\n\n----------------------------------------\n\nTITLE: Grapher Query Embodyment with Function in JavaScript\nDESCRIPTION: This example shows how to use `embody` as a function to modify the query body. It assigns a `userId` filter based on the `params` passed from the firewall. This provides a way to dynamically modify the query based on server-side logic and user context. The function receives `body` and `params` as arguments, allowing modification of the query's filter settings.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/docs/named_queries.md#_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nquery.expose({\n    firewall(userId, params) {\n        params.userId = userId,\n    },\n    embody(body, params) {\n        body.$filters = body.$filters || {}; // make sure it has it first.\n        Object.assign(body.$filters, {\n            userId: params.userId\n        });\n\n        // if you find it easier, you can also do: body.$filter = ({filters}) => { ... } \n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Taming the Firewall: Applying Filters Based on User ID in Grapher\nDESCRIPTION: This example demonstrates how to customize the firewall to apply filters based on the user's ID.  If the user is not an administrator, the firewall adds a filter to only show visible data, enhancing security.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/docs/global_exposure.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// Apply filters based on userId\nCollection.expose({\n    firewall(filters, options, userId) {\n        if (!isAdmin(userId)) {\n            filters.isVisible = true;\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Filtering Denormalized Data with Cached Fields (JavaScript)\nDESCRIPTION: This snippet shows how to filter users based on the `type` of books they have reviewed, using the denormalized `reviewedBooksCache`. The query uses the `$filters` operator to find users where `reviewedBooksCache.type` is `Drama`. This allows for efficient retrieval of users who have reviewed books of a specific type, leveraging the cached data.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/docs/denormalization.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst dramaticUsers = Meteor.users.createQuery({\n    $filters: {\n        'reviewedBooksCache.type': 'Drama'\n    },\n    email: 1,\n}).fetch();\n```\n\n----------------------------------------\n\nTITLE: GraphQL Schema Directives Example\nDESCRIPTION: This code snippet provides an example of using GraphQL schema directives for defining data structures and relationships. It showcases the usage of `@mongo`, `@link`, and `@map` directives.  The code defines types User, Comment and Post and their respective relationships via the @link directive.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/docs/graphql.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ntype User @mongo(name: \"users\") {\n    comments: [Comment] @link(to: \"user\")\n}\n\ntype Comment @mongo(name: \"comments\") {\n   user: User @link(field: \"userId\")\n   post: Post @link(field: \"postId\")\n   createdAt: Date @map(\"created_at\")\n}\n\ntype Post @mongo(name: \"posts\") {\n    comments: [Comment] @link(to: \"post\")\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Post and Author Data\nDESCRIPTION: This method demonstrates fetching a post and its author's information using Meteor's standard methods. It fetches the post data and then queries the users collection to retrieve the author's first and last names. Finally, it combines the post and author data into a single object before returning it.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/docs/linking_collections.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nMeteor.methods({\n    getPost({postId}) {\n        let post = Posts.findOne(postId, {\n            fields: {\n                title: 1,\n                createdAt: 1,\n                authorId: 1,\n            }\n        });\n        \n        if (!post) { throw new Meteor.Error('not-found') }\n        const author = Meteor.users.findOne(post.authorId, {\n            fields: {\n                firstName: 1,\n                lastName: 1\n            }\n        });\n        \n        Object.assign(post, {author});\n        \n        return post;\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Scoped Grapher Query in JavaScript\nDESCRIPTION: This snippet shows how to create a scoped Grapher query using `createQuery`.  The `scoped: true` parameter is essential for enabling client-side recursive fetching to distinguish between different parts of the graph. This is particularly useful when dealing with linked data and server-side filtering, ensuring that the client only receives the intended data.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/docs/named_queries.md#_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nconst usersQuery = Users.createQuery('getUsers', {\n    name: 1,\n    friends: {\n        name: 1,\n    },\n}, {\n    scoped: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Redis Cacher\nDESCRIPTION: This code demonstrates how to implement a custom cacher using Redis. It extends `BaseResultCacher` and overrides the `generateQueryId` and `fetch` methods to store and retrieve data from Redis. It uses `EJSON` for serialization.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/docs/caching_results.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport {BaseResultCacher} from 'meteor/cultofcoders:grapher';\nimport {EJSON} from 'meteor/ejson';\n\n/**\n * Redis Cacher\n */\nexport default class RedisCacher extends BaseResultCacher {\n    // the constructor accepts a config object, that stores it in this.config\n    \n    // this is the default one in case you need to override it \n    // if don't specify if it, it will use this one from BaseResultCacher\n    generateQueryId(queryName, params) {\n        return `${queryName}::${EJSON.stringify(params)}`;    \n    }\n    \n    // in case of a count cursor cacheId gets prefixed with 'count::'\n    fetch(cacheId, fetchables) {\n        // client and ttl are the configs passed when we instantiate it\n        const {client, ttl} = this.config;\n        \n        const cacheData = client.get(cacheId);\n        if (cacheData) {\n            return EJSON.parse(cacheData);\n        }\n\n        const data = BaseResultCacher.fetchData(fetchables);\n        client.set(cacheId, EJSON.stringify(data), 'PX', ttl);\n\n        return data;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting the DB Context with Grapher in JavaScript\nDESCRIPTION: Shows how to import the `db` context from Grapher. This allows direct access to Mongo collections using `db.collectionName`. This provides a convenient way to interact with the database within the Grapher environment.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/docs/api.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { db } from 'meteor/cultofcoders:grapher';\n\n// db.users\n// db.posts\n// db.${collectionName}\n```\n\n----------------------------------------\n\nTITLE: Defining an Inversed Link with Grapher\nDESCRIPTION: This code defines an inversed link from the Meteor.users collection to the Posts collection using Grapher. The 'posts' link allows fetching all posts associated with a user, based on the 'author' link defined in the Posts collection.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/docs/linking_collections.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// file: /imports/db/users/links.js\nimport Posts from '...';\n\nMeteor.users.addLinks({\n    'posts': {\n        collection: Posts,\n        inversedBy: 'author'\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Query using Body Definition in Grapher\nDESCRIPTION: This shows an example of the client-side of the exposure and how it automatically restricts the result of the query to only be what's in the body. In this case, even though the query specifies last name and created at, the result will only contain the first name and the groups' name.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/docs/global_exposure.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\ncreateQuery({\n    users: {\n        firstName: 1,\n        lastName: 1,\n        groups: {\n            name: 1,\n            createdAt: 1,\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Reducer Using Links (Grapher)\nDESCRIPTION: This example shows how to create a reducer that uses linked data.  The reducer retrieves group names associated with a user via a 'groups' link and joins them into a comma-separated string. Assumes a 'groups' link exists on the Meteor.users collection and each group has a 'name' field.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/docs/reducers.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nMeteor.users.addReducers({\n    groupNames: {\n        body: {\n            // assuming you have a link called groups\n            groups: { name: 1 }\n        },\n        reduce(object) {\n            return object.groups.map(group => group.name).join(',')\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Reusing Dynamic Query with setParams()\nDESCRIPTION: This snippet demonstrates how to reuse a dynamic query using `setParams()`.  It's important to clone the original query before using `setParams()` to avoid modifying the original query's parameters. This snippet sets the `isApproved` parameter.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/docs/introduction.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport postListQuery from '...';\n\nMeteor.methods({\n    posts() {\n        const query = postListQuery.clone();\n        \n        // Warning, if you don't use .clone() and you just .setParams(),\n        // those params will remain stored in your query\n        query.setParams({\n            isApproved: true,\n        });\n        \n        return query.fetch();\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Complex Post Query\nDESCRIPTION: Illustrates creating a complex query for posts, including nested data for authors and comments, demonstrating the ability to define a rich data structure.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/docs/named_queries.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst fullPostList = Posts.createQuery('fullPostList', {\n    title: 1,\n    author: {\n        firstName: 1,\n        lastName: 1,\n    },\n    comments: {\n        text: 1,\n        createdAt: 1,\n        author: {\n            firstName: 1,\n            lastName: 1,\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Dynamic Filtering with $filter()\nDESCRIPTION: This snippet demonstrates how to use the `$filter` field to create a dynamic Grapher query. It allows the query to be adapted based on parameters passed to it. The filter modifies the filters based on the `isApproved` parameter.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/docs/introduction.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// We export the query, notice there is no .fetch()\n\nexport default Posts.createQuery({\n    $filter({filters, options, params}) {\n    filters.isApproved = params.isApproved;\n    },\n    $options: {sort: {createdAt: -1}},\n    title: 1,\n    createdAt: 1,\n    createdBy: 1,\n});\n```\n\n----------------------------------------\n\nTITLE: Reusing Dynamic Query with clone()\nDESCRIPTION: This snippet shows how to reuse a dynamic query defined with `$filter`. It uses the `clone()` method to create a new instance of the query with specific parameters.  `clone()` ensures that the parameters are applied only to the new instance.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/docs/introduction.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport postListQuery from '...';\n\nMeteor.methods({\n    posts() {\n        return postListQuery.clone({\n            isApproved: true\n        }).fetch()\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Using a Named Query with createQuery\nDESCRIPTION: Shows how to use a named query by cloning it with createQuery.  Provides an option to specify parameters which get passed to $filter.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/docs/named_queries.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport {createQuery} from 'meteor/cultofcoders:grapher';\n\nconst admins = createQuery({\n    userAdminList: params, // or {} if no params\n}).fetch(); \n// will return a clone of the named query, with the params specified\n```\n\n----------------------------------------\n\nTITLE: Querying with Meta Link\nDESCRIPTION: This code snippet demonstrates how to query the database using a meta link that has been established between the `Meteor.users` and `Groups` collections. It fetches the user's group name, as well as metadata related to the user's group such as their roles and creation date.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/docs/linking_collections.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst user = Meteor.users.createQuery({\n    $filters: {_id: userId},\n    group: {\n        name: 1,\n    }\n}).fetchOne()\n```\n\n----------------------------------------\n\nTITLE: Adding and Removing Many Links with Arrays JavaScript\nDESCRIPTION: This example demonstrates how to add and remove multiple related entities using arrays with the `add()` and `remove()` methods respectively. It shows adding a list of group IDs and removing a list of group IDs. The remove method cannot accept objects without _id.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/docs/linker_engine.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nuserGroupsLink.add([\n    groupId1,\n    groupId2\n]);\n\nuserGroupsLink.remove(groupIds)\n```\n\n----------------------------------------\n\nTITLE: Querying a Link Loopback\nDESCRIPTION: This code shows querying nested friends using the loopback relationship. It will return the user document with nested friend lists.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/docs/linking_collections.md#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nMeteor.users.createQuery({\n    $filters: {_id: userId},\n    friends: {\n        nickname: 1,\n        friends: {\n            nickname: 1,\n            friends: {\n                nickname: 1,\n            }\n        }\n    } \n});\n```\n\n----------------------------------------\n\nTITLE: Dynamic Body Definition Based on User ID in Grapher\nDESCRIPTION: This snippet shows how to dynamically define the 'body' option based on the user's ID. The 'body' is defined as a function that takes userId as an argument. This enables to conditionally include fields based on user roles.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/docs/global_exposure.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nCollection.expose({\n    body(userId) {\n        let body = { firstName: 1 };\n        \n        if (isAdmin(userId)) {\n            _.extend(body, { lastName: 1 })\n        }\n        \n        return body;\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Exposing a Collection to Everyone in Grapher\nDESCRIPTION: This code snippet demonstrates how to expose a Meteor collection to all users, allowing them to query any field. It is generally discouraged for security reasons, and the subsequent examples show how to restrict access.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/docs/global_exposure.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// server-side\nMeteor.users.expose();\n```\n\n----------------------------------------\n\nTITLE: Initializing User Group Linker JavaScript\nDESCRIPTION: This snippet shows how to initialize a linker to manage the relationship between users and groups, assuming a direct or inverse link named 'groups' exists.  It uses the `getLink` function on the `Meteor.users` collection to obtain a linker for a specific user. It relies on the existence of `Meteor.users` collection and 'groups' link definition.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/docs/linker_engine.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst userGroupLinker = Meteor.users.getLink(userId, 'groups');\n```\n\n----------------------------------------\n\nTITLE: Setting One Link JavaScript\nDESCRIPTION: This snippet demonstrates how to set a `one` link between a user and a payment profile. It shows how to set the link using a payment profile ID or directly with a payment profile object containing the `_id`. It also shows how to set the link from the other side of the relationship using the `PaymentProfiles` collection. It relies on `Meteor.users` and `PaymentProfiles` collections with appropriate links defined.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/docs/linker_engine.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst userPaymentProfileLink = Meteor.users.getLink(userId, 'paymentProfile');\n\nuserPaymentProfileLink.set(paymentProfileId);\n// but it also works if you have the object directly if it has _id, for ease of use:\nuserPaymentProfileLink.set(paymentProfile);\n\n// it works from the other side as well\nconst paymentProfileUserLink = PaymentProfiles.getLink(paymentProfileId, 'user');\npaymentProfileUserLink.set(userId); // or a user object that contains `_id`\n```\n\n----------------------------------------\n\nTITLE: Denormalizing a Many-to-Many Link with Filters (JavaScript)\nDESCRIPTION: This code demonstrates denormalizing a many-to-many link between `Meteor.users` and `Books` via the `reviewedBooks` link.  The `type` of the reviewed books is cached in the `reviewedBooksCache` field on the user. It assumes that `Books.addLinks` is defined elsewhere.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/docs/denormalization.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nMeteor.users.addLinks({\n    'reviewedBooks': {\n        type: 'many',\n        collection: Books,\n        field: 'reviewedBookIds',\n        denormalize: {\n            body: {\n                type: 1,\n            },\n            field: 'reviewedBooksCache',\n        }\n    }\n})\n\nBooks.addLinks({\n     'reviewers': {\n         collection: Meteor.users,\n         inversedBy: 'reviewedBooks',\n     }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Grapher Resolver Query in JavaScript\nDESCRIPTION: This snippet demonstrates creating a Grapher resolver query that can be executed on the server. It defines a `getAnalytics` query using `createQuery` with a dummy function. This signals to Grapher that it's a resolver query. The `validateParams` option defines the allowed parameters. Note that the dummy function is replaced with the resolve function on the server.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/docs/named_queries.md#_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\n// shared code between client and server\nconst getAnalytics = createQuery('getAnalytics', () => {}, {\n    validateParams: {} // Object or Function\n});\n```\n\n----------------------------------------\n\nTITLE: Expose Query with $filter and namespace\nDESCRIPTION: Shows how to expose a Grapher query with an `embody` function that defines a `$filter` option to modify the query based on parameters. This allows for server-side control over the query and namespaced watchers for scalability. ThreadId is used as the parameter to adjust query results.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/docs/structure_and_patterns.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// query.expose.js\nquery.expose({\n    embody: {\n        $filter({options, filters, params}) {\n            filters.threadId = params.threadId;\n            options.namespace = `thread::${params.threadId}`;\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Default Query Parameters\nDESCRIPTION: This snippet demonstrates how to set default parameters for a Grapher query using the `params` option.  These default parameters will be applied if no other parameters are provided. The default `isApproved` parameter is set to `true`.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/docs/introduction.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nexport default Posts.createQuery({...}, {\n    params: {\n        isApproved: true,\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Create Reactive Query with $filter and namespace\nDESCRIPTION: Demonstrates how to create a reactive Grapher query that uses the `$filter` option to dynamically adjust the query based on parameters.  The `namespace` option is used to create namespaced watchers for improved scalability with RedisOplog. ThreadId is used as the parameter to adjust query results.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/docs/structure_and_patterns.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport default Messages.createQuery('messagesForThread', {\n    $filter({filters, options, params}) {\n        filters.threadId = params.threadId;\n        options.namespace = `thread::${params.threadId}`;\n    },\n    text: 1,\n})\n```\n\n----------------------------------------\n\nTITLE: Grapher Query Embodyment with Object in JavaScript\nDESCRIPTION: This snippet illustrates using the `embody` option with an object to deep extend the query body on the server-side. It defines a `$filter` function within the `embody` object that modifies the `filters` based on the `userId` passed through the `params` object from the `firewall`. This ensures that the correct `userId` is always applied regardless of the client's parameters.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/docs/named_queries.md#_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nquery.expose({\n    firewall(userId, params) {\n        params.userId = userId,\n    },\n    embody: {\n        // This will deepExtend your body\n        $filter({filters, params}) {\n            filters.userId = params.userId;\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Defining an Inversed Link for 'many'\nDESCRIPTION: This code defines an inversed link from the Categories collection to the Posts collection, enabling querying for posts belonging to a specific category. This complements the 'many' link defined from Posts to Categories.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/docs/linking_collections.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// file: /imports/db/posts/links.js\nimport Categories from '...';\nimport Posts from '...';\n\nCategories.addLinks({\n    'posts': {\n        collection: Posts,\n        inversedBy: 'categories'\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Expanding Fields in Grapher\nDESCRIPTION: This code snippet illustrates how to expand a GraphQL field into multiple database fields using Grapher's `addExpanders` function. When the `totalAmount` field is queried, the result will include `amount` and `vatPercentage` fields. The dependency is the `Users` collection.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/docs/graphql.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// When {totalAmount: 1} is in your query\n// The result will contain \"amount\" and \"vatPercentage\" as fields\nUsers.addExpanders({\n    totalAmount: {\n        amount: 1,\n        vatPercentage: 1,\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Exposing a Collection to Logged-In Users with Firewall in Grapher\nDESCRIPTION: This example demonstrates how to restrict collection access to logged-in users using a firewall.  The firewall function checks if a userId exists. If no user is logged in, it throws an error, preventing unauthorized access to the collection.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/docs/global_exposure.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// server-side\nCollection.expose({\n    firewall(filters, options, userId) {\n        if (!userId) {\n            throw new Meteor.Error('...');\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Link Loopback\nDESCRIPTION: This code defines a link loopback, where the Meteor.users collection is linked to itself through the 'friends' link. This allows representing relationships between users, such as friendships.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/docs/linking_collections.md#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nMeteor.users.addLinks({\n    friends: {\n        collection: Meteor.users,\n        type: 'many',\n        field: 'friendIds',\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Global Queries with Grapher in JavaScript\nDESCRIPTION: Demonstrates how to create global queries using `Collection.createQuery`. Global queries are similar to named queries but are defined on the collection itself. This example showcases options for filtering, sorting, and post-processing, along with the query body.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/docs/api.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nCollection.createQuery({\n    $options, // Mongo Options {sort, limit, skip}\n    $filters, // Mongo Filters\n    $filter({ filters, options, params }) {}, // Function or [Function]\n    $postOptions, // {limit, sort, skip}\n    $postFilters, // any sift() available filters\n    $postFilter, // Function => results, or [Function] => results\n    body, // the rest of the object\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Collection Linker JavaScript\nDESCRIPTION: This code snippet demonstrates how to initialize a linker for a collection.  It uses the `getLink` function to retrieve a linker instance for a specific item within a collection, targeting a specified link name. This requires the Grapher library and assumes that links have been defined using `addLinks()` method. It returns a linker object used for data retrieval and setting links.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/docs/linker_engine.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst linker = Collection.getLink(collectionItemId, 'linkName');\n```\n\n----------------------------------------\n\nTITLE: Reactive Query Count with Subscription\nDESCRIPTION: Demonstrates how to subscribe to reactive counts and uses Tracker to autorun when the data is available.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/docs/named_queries.md#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n// reactive counts\nconst handle = query.subscribeCount();\n\nTracker.autorun(() => {\n    if (handle.ready()) {\n        console.log(query.getCount());\n        query.unsubscribeCount();\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Expose Query with embody function\nDESCRIPTION: Demonstrates how to expose a Grapher query with a simple `embody` function that directly modifies the query body. This provides a flexible way to adjust the query structure on the server-side based on parameters.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/docs/structure_and_patterns.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// query.expose.js\nquery.expose({\n    embody(body, params) {\n        // Modify body here\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching Post and Author Data with Grapher\nDESCRIPTION: This method demonstrates fetching a post and its author's information using Grapher.  It creates a query that specifies the desired fields for the post and the author, then fetches a single result. Grapher handles the underlying data fetching and linking.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/docs/linking_collections.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nMeteor.methods({\n    getPost({postId}) {\n        let post = Posts.createQuery({\n            $filters: {_id: postId},\n            title: 1,\n            createdAt: 1,\n            author: {\n                firstName: 1,\n                lastName: 1\n            }\n        });\n        \n        return post.fetchOne();\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Running a Denormalization Migration (JavaScript)\nDESCRIPTION: This snippet shows how to run a migration script to add the denormalized `avatarCache` field to the `users` collection. This is required if the denormalization configuration was not added from the beginning of the application. It uses the `migrate` function from the `meteor/herteby:denormalize` package.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/docs/denormalization.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {migrate} from 'meteor/herteby:denormalize'\nmigrate('users', 'avatarCache');\n```\n\n----------------------------------------\n\nTITLE: Defining a Nested Link with Grapher\nDESCRIPTION: This code defines a nested link between the Posts collection and the Meteor.users collection using Grapher. It assumes that the Posts collection contains a nested document called 'authorObject', which has an 'authorId' field used to link to the Meteor.users collection.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/docs/linking_collections.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// file: /imports/db/posts/links.js\nimport Posts from '...';\n\nPosts.addLinks({\n    'authorObject.authorId': {\n        type: 'one',\n        collection: Meteor.users,\n        field: 'authorObject.authorId',\n    },\n})\n```\n\n----------------------------------------\n\nTITLE: Reactive Query with Subscription and Tracker\nDESCRIPTION: Demonstrates creating a reactive query using `subscribe` and `Tracker.autorun` to automatically update the data when changes occur on the server.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/docs/named_queries.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Tracker} from 'meteor/tracker';\nimport userAdminListQuery from '/imports/api/users/queries/userAdminList.js';\n\nconst query = userAdminListQuery.clone();\nconst subscriptionHandle = query.subscribe();\n// if we did subscribe, we no longer need to supply a callback for fetch()\n// as the query morphed into a reactive query\n\nTracker.autorun(() => {\n    if (subscriptionHandle.ready()) {\n        console.log(query.fetch());\n        query.unsubscribe();\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Global Config for Grapher Queries\nDESCRIPTION: This code snippet demonstrates how to set global defaults for all `astToQuery` manipulations using the `setAstToQueryDefaults` function. This allows you to enforce maximum limits on query depth and result size. Dependencies include importing `setAstToQueryDefaults` from the Grapher package.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/docs/graphql.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { setAstToQueryDefaults } from 'meteor/cultofcoders:grapher';\n\nsetAstToQueryDefaults({\n    maxLimit: 100,\n    maxDepth: 5,\n});\n```\n\n----------------------------------------\n\nTITLE: Querying Inversed Meta Link\nDESCRIPTION: This code demonstrates how to query the Groups collection to fetch a group with its associated users using an inversed meta link. The query retrieves the name of the group and the first name of each user associated with it, along with the metadata related to their association.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/docs/linking_collections.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst group = Groups.createQuery({\n    $filters: {_id: groupId},\n    name: 1,\n    users: {\n        firstName: 1,\n    }\n}).fetchOne()\n```\n\n----------------------------------------\n\nTITLE: Querying with a Reducer (Grapher)\nDESCRIPTION: This snippet demonstrates how to query for data using a reducer. The createQuery method is used to specify that the fullName reducer should be included in the results. Depends on the fullName reducer being defined in the Meteor.users collection.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/docs/reducers.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst user = Meteor.users.createQuery({\n    fullName: 1,\n}).fetchOne();\n```\n\n----------------------------------------\n\nTITLE: Adding a Reducer to a Collection (Grapher)\nDESCRIPTION: This snippet demonstrates how to add a reducer to a Mongo.Collection using the addReducers() method. It shows the structure of a reducer, including the body (graph dependency), reduce function (which transforms the object), and the expand flag (which controls whether reduce() is called and the body is cleaned).\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/docs/reducers.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nCollection.addReducer({\n    reducerName: {\n        body: graphDependencyBody,\n        reduce(object) {\n            return value; // can be anything, object, date, string, number, etc\n        }\n        expand: false, // if this is true, reduce() will not be called and body() will not be cleaned\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Query with Grapher\nDESCRIPTION: This Javascript code snippet demonstrates creating a query using Grapher to fetch posts, their authors, comments, and categories. It shows the structure of the query and specifies the fields to retrieve for each entity.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncreateQuery({\n    posts: {\n        title: 1,\n        author: {\n            fullName: 1,\n        },\n        comments: {\n            text: 1,\n            createdAt: 1,\n            author: {\n                fullName: 1,\n            },\n        },\n        categories: {\n            name: 1,\n        },\n    },\n}).fetch();\n```\n\n----------------------------------------\n\nTITLE: Alternative Query Creation for Posts Collection\nDESCRIPTION: Illustrates creating a query for the 'posts' collection using `createQuery`, specifying that only the 'title' field should be retrieved. Demonstrates integration with a Mongo Collection.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/docs/named_queries.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst Posts = new Mongo.Collection('posts');\n\n// then we can do:\ncreateQuery({\n    posts: {\n        title: 1\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Querying Unique Links\nDESCRIPTION: This snippet showcases querying with a unique link.  The result for `paymentProfile` will be a single object and not an array, because the relationship is defined as unique.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/docs/linking_collections.md#_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nMeteor.users.createQuery({\n    paymentProfile: {\n        type: 1,\n        last4digits: 1,\n    } \n});\n```\n\n----------------------------------------\n\nTITLE: Cloning a Grapher Query with Parameters in JavaScript\nDESCRIPTION: This snippet demonstrates how to clone a Grapher query and pass parameters for the cloned query using the clone method. This allows client-side modification of queries without modifying the base query. The reactive option allows the query to react to data changes.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/docs/named_queries.md#_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nwithQuery(props => {\n    return usersQuery.clone({\n        name: 'John',\n    });\n}, {\n    reactive: true,\n})(SomeComponent);\n```\n\n----------------------------------------\n\nTITLE: Fetching One Document with a Callback\nDESCRIPTION: Illustrates fetching a single document from a named query reactively using `fetchOne` and a callback function.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/docs/named_queries.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nuserAdminListQuery.clone().fetchOne((err, user) => {\n    // do something\n});\n```\n\n----------------------------------------\n\nTITLE: Simple Grapher Query Example\nDESCRIPTION: This snippet shows a simplified Grapher query used to retrieve posts and their associated categories, selecting only the name field for the categories. It serves as an example to illustrate how Hypernova efficiently fetches related data.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/docs/hypernova.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    posts: {\n        categories: {\n            name: 1\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Nested Array Link with Grapher\nDESCRIPTION: This code defines a nested array link between the Posts collection and the Meteor.users collection. It assumes that the Posts collection contains an array of objects called 'authorsArray', where each object has an 'authorId' field used to link to the Meteor.users collection.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/docs/linking_collections.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// file: /imports/db/posts/links.js\nimport Posts from '...';\n\nPosts.addLinks({\n    'authorsArray.authorId': {\n        type: 'one',\n        collection: Meteor.users,\n        field: 'authorsArray.authorId',\n    },\n})\n```\n\n----------------------------------------\n\nTITLE: Params-Aware Reducer Definition (Grapher)\nDESCRIPTION: This example demonstrates how to define a reducer that accepts parameters from the query. The reduce function takes a 'user' object and a 'params' object as arguments, allowing the reducer to be customized based on the query parameters. This assumes usage with the Grapher package and Meteor framework.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/docs/reducers.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nCollection.addReducers({\n    reducer: {\n        body,\n        reduce(user, params) {}\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Example Result from Grapher Query\nDESCRIPTION: This is the expected result of the query created in the previous code snippet. It demonstrates the structure and content of the data returned by Grapher, showing how related entities are nested within each other.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n[\n    {\n        _id: 'postId',\n        title: 'Introducing Grapher',\n        author: {\n            _id: 'authorId',\n            fullName: 'John Smith'\n        },\n        comments: [\n            {\n                _id: 'commentId',\n                text: 'Nice article!,\n                createdAt: Date,\n                author: {\n                    fullName: 1\n                }\n            }\n        ],\n        categories: [ {_id: 'categoryId', name: 'JavaScript'} ]\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Adding a link to a Collection (pre-1.3)\nDESCRIPTION: This snippet demonstrates how to add a link to a Collection in Grapher using `Users.addLinks` prior to version 1.3. It shows the configuration of a 'one' type link to the `Posts` collection based on the `postId` field.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/MIGRATION.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nUsers.addLinks({\n    post: {\n        type: 'one',\n        collection: Posts,\n        field: 'postId'\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a 'many' Link with Grapher\nDESCRIPTION: This code defines a 'many' type link between the Posts collection and the Categories collection using Grapher. The 'categories' link allows a post to be associated with multiple categories, where 'categoryIds' is an array of category _ids.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/docs/linking_collections.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// file: /imports/db/posts/links.js\nimport Posts from '...';\nimport Categories from '...';\n\nPosts.addLinks({\n    'categories': {\n        type: 'many',\n        collection: Categories,\n        field: 'categoryIds',\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Composed Reducers Example (Grapher)\nDESCRIPTION: This demonstrates how reducers can be composed, meaning one reducer can use the result of another.  In this example, 'fullNameWithRoles' uses the 'fullName' reducer to build its result. Requires a previously defined 'fullName' reducer on the Users collection.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/docs/reducers.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// setting up\nUsers.addReducers({\n    fullName: {...}\n    fullNameWithRoles: {\n        body: {\n            fullName: 1,\n            roles: 1\n        },\n        reduce(object) {\n            return object.fullName + ' ' + object.roles.join(',');\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Exposing a Scoped Grapher Query with Embodyment in JavaScript\nDESCRIPTION: This example shows how to expose a scoped Grapher query with embodyment. The server-side exposure uses embodyment to filter results based on the name parameter, adding a name filter via params. This combination allows for efficient data retrieval and filtering, especially when used with linked data.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/docs/named_queries.md#_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nusersQuery.expose({\n    embody: {\n        $filter({filters, params}) {\n            filters.name = params.name;\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Validating $body Parameter\nDESCRIPTION: Shows how to add validation for the `$body` parameter using `Match.Maybe(Object)` to ensure data integrity when dynamically modifying query fields.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/docs/named_queries.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Match} from 'meteor/check';\nconst fullPostList = Posts.createQuery('fullPostList', {}, {\n    validateParams: {\n        $body: Match.Maybe(Object),\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Many Links JavaScript\nDESCRIPTION: This code demonstrates how to add multiple links to a 'many' relationship, using `add()`. It showcases the flexibility of the `add()` method, which can accept a single ID, an object with an `_id`, or an object without an `_id` (which will be inserted). It relies on the `userGroupsLink` being initialized and a properly defined link between users and groups.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/docs/linker_engine.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst userGroupsLink = Meteor.users.getLink(userId, 'groups');\nuserGroupsLink.add(groupId);\nuserGroupsLink.add(group); // object containing an _id\nuserGroupsLink.add({\n    name: 1,\n}); // will add the group to the database and link it accordingly\n```\n\n----------------------------------------\n\nTITLE: Using $body to Intersect Query Fields\nDESCRIPTION: Demonstrates how to use the `$body` parameter to dynamically reduce the fields fetched by a named query, effectively intersecting the requested fields with the defined query structure.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/docs/named_queries.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nfullPostsList.clone({\n    $body: {\n        title: 1,\n        author: {\n            firstName: 1,\n            services: 1, // will be removed after intersection, and not queried\n        },\n        otherLink: {} // will be removed after intersection, and not queried\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Querying Linked Exposure Bodies\nDESCRIPTION: This shows an example of the query made to use the linking functionality of bodies. This showcases how the nested structure of related entities can be queried through defined relationships.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/docs/global_exposure.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    users: {\n        comments: {\n            user: {\n                // It doesn't make much sense for this case\n                // but you can :) \n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining an indexed link in Grapher (JS)\nDESCRIPTION: This code defines a link between `PaymentProfiles` and `Meteor.users` collections with the `index` option set to `true`. This automatically creates an index on the `userId` field in `PaymentProfiles`, improving query performance when fetching linked user data. The index is only applied to the `_id` field.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/docs/linking_collections.md#_snippet_22\n\nLANGUAGE: js\nCODE:\n```\nPaymentProfiles.addLinks({\n    user: {\n        field: 'userId',\n        collection: Meteor.users,\n        type: 'one',\n        unique: true,\n        index: true,\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Using a Named Query Directly\nDESCRIPTION: Demonstrates how to import and directly use a named query (e.g., 'userAdminListQuery') to fetch data. This approach allows for executing the query without modifications.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/docs/named_queries.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport userAdminListQuery from '/imports/db/users/queries/userAdminList.js';\n\nconst admins = userAdminListQuery.fetch();\n```\n\n----------------------------------------\n\nTITLE: Query with Reducer and Linked Data (Grapher)\nDESCRIPTION: This shows how to query both a reducer (groupNames) and linked data (groups). If you request both the reducer field and the linked field, the linked data is included in the result as well, but cleaned based on the body definition of the reducer and the fields requested in the query.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/docs/reducers.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst user = Meteor.users.createQuery({\n    groupNames: 1,\n    groups: {\n        createdAt: 1,\n    }\n}).fetchOne();\n```\n\n----------------------------------------\n\nTITLE: Using Grapher with Resolver's Context\nDESCRIPTION: This code snippet shows how to inject the database instance into the resolver's context to use Grapher. It shows how to then leverage that context within a resolver function to fetch data using `astToQuery`. Dependencies include importing the database instance from the Grapher package.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/docs/graphql.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { db } from 'meteor/cultofcoders:grapher';\n\n// Inject db in your context\n// And you can do\nconst resolvers = {\n    Query: {\n        users(_, args, ctx, ast) {\n            const query = db.users.astToQuery(ast);\n\n            return query.fetch();\n        },\n    },\n};\n```\n\n----------------------------------------\n\nTITLE: Querying with a Link-Based Reducer (Grapher)\nDESCRIPTION: This snippet demonstrates querying with the 'groupNames' reducer which uses linked data. It retrieves the computed group names for a user. Requires the 'groupNames' reducer to be defined on the Meteor.users collection.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/docs/reducers.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst user = Meteor.users.createQuery({\n    groupNames: 1,\n}).fetchOne();\n```\n\n----------------------------------------\n\nTITLE: Impure Reducer Example (Grapher)\nDESCRIPTION: This code demonstrates an impure reducer that counts the number of posts a user has posted using a link.  The reducer performs a database query within its reduce function. This type of reducer should only be defined server-side and used with static queries. Requires the Users collection to have a link named 'posts'.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/docs/reducers.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nMeteor.users.addReducers({\n    postCount: {\n        body: {_id: 1},\n        reduce(user) {\n            const linker = Users.getLink(user, 'posts');\n            \n            return linker.find().count();\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Using the Custom Redis Cacher\nDESCRIPTION: This snippet demonstrates how to use the custom Redis cacher implemented in the previous example. It instantiates the `RedisCacher` with a Redis client and TTL, then applies it to the named query.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/docs/caching_results.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport RedisCacher from 'somewhere';\n\nconst cacher = new RedisCacher({\n    client: redisClient,\n    ttl: 60 * 1000\n});\n\nmyFriendsQuery.cacheResults(cacher);\n```\n\n----------------------------------------\n\nTITLE: Setting Meta Links JavaScript\nDESCRIPTION: This demonstrates how to set metadata for both `one` and `many` links. It showcases the ability to pass a metadata object as the second argument to the `set()` and `add()` methods. This allows you to store additional information about the link itself, such as creation timestamps.  The link definition needs to include `{metadata: true}`.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/docs/linker_engine.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// assumming our link now have {metadata: true} in their definition\n\n// one\nconst userPaymentProfileLink = Meteor.users.getLink(userId, 'paymentProfile');\n\nuserPaymentProfileLink.set(paymentProfileId, {\n    createdAt: new Date()\n});\n\n// many\nconst userGroupsLink = Meteor.users.getLink(userId, 'groups');\n\nuserGroupsLink.add(groupId, {\n    createdAt: new Date(),\n})\n\n// if you add multiple objects, they will receive the same metadata\nuserGroupsLink.add([groupId1, groupId2], {\n    createdAt: new Date(),\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Reducers with Grapher in JavaScript\nDESCRIPTION: Shows how to add reducers to collections using `Collection.addReducers`. Reducers allow calculating derived values based on related data. This example defines a reducer with a body (dependency graph), a `reduce` function to calculate the value, and an optional `expand` flag to act as a data expander instead of a field.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/docs/api.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nCollection.addReducers({\n    reducerName: {\n        body, // Object, dependency graph\n        reduce(object) {\n            // return the value\n        },\n        // if this option is specified, this will act as a data expander, not a field\n        expand: true, \n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Querying Denormalized Data with Cached Fields (JavaScript)\nDESCRIPTION: This code demonstrates how to query the `Meteor.users` collection and retrieve the denormalized avatar data, specifically the `smallThumbPath`. Because the `smallThumbPath` field is part of the denormalized `avatarCache`, this query will hit the cache, resulting in a single database request. It uses the `createQuery` function to define the query.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/docs/denormalization.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst user = Meteor.users.createQuery({\n    avatar: {\n        smallThumbPath: 1,\n    }\n}).fetchOne()\n```\n\n----------------------------------------\n\nTITLE: Creating a Named Query\nDESCRIPTION: This code snippet demonstrates how to create a named query in Grapher using `Meteor.users.createQuery`. It defines a filter based on user ID and sets sorting options. This example is used to illustrate caching.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/docs/caching_results.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default Meteor.users.createQuery('myFriendsEmails', {\n    $filter({filters, params}) {\n        filters.friendIds = params.userId;\n    },\n    $options: {\n        sort: {createdAt: -1}\n    },\n    email: 1,\n})\n```\n\n----------------------------------------\n\nTITLE: Querying Complex Meta Links\nDESCRIPTION: This code shows querying related collections through a meta link. It will return user documents, including the group's name, the adder's first name, roles, and creation date.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/docs/linking_collections.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nMeteor.users.createQuery({\n    groupLink: {\n        group: {\n            name: 1,\n        },\n        adder: {\n            firstName: 1\n        },\n        roles: 1,\n        createdAt: 1,\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Query with Exposed Collection in Grapher\nDESCRIPTION: This example illustrates a client-side query on a globally exposed 'users' collection. It highlights the potential security risks of exposing all fields and links without restriction.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/docs/global_exposure.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncreateQuery({\n    users: {\n        services: 1, // yes, everything becomes exposed\n        anyLink: {\n            anySubLink: {\n                // and it can go on and on and on\n            }\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching Posts with Meteor Methods (Without Grapher)\nDESCRIPTION: This snippet demonstrates how to fetch posts using a standard Meteor method and `Mongo.Collection.find()`.  It fetches posts and specifies which fields to return. This is the starting point before using Grapher.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/docs/introduction.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst Posts = new Mongo.Collection('posts');\n\nMeteor.methods({\n    posts() {\n        return Posts.find({}, {\n            fields: {\n                title: 1,\n                createdAt: 1,\n                createdBy: 1,\n            }\n        }).fetch();\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Grapher Query\nDESCRIPTION: This snippet demonstrates creating a basic Grapher query using `createQuery`. It specifies the fields to be included in the query result. This query can then be used to fetch data from the 'users' collection.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/docs/introduction.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncreateQuery({\n    users: {\n        firstName: 1\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Exposing Grapher as DDP Method\nDESCRIPTION: This code snippet demonstrates how to expose Grapher queries as a Meteor method, making it accessible via DDP. It takes a query as input, creates a Grapher query, and returns the results. It includes a check to prevent unauthorized global queries and utilizes the userId for firewall authorization.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/docs/outside_meteor.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport {createQuery} from 'meteor/cultofcoders:grapher';\n\nMeteor.methods({\n    'grapher'(query) {\n        const actualQuery = createQuery(query);\n        \n        if (actualQuery.isGlobalQuery && !actualQuery.collection.__isExposedForGrapher) {\n            throw new Meteor.Error('not-allowed');\n        }\n        \n        return actualQuery.fetch({\n            userId: this.userId,\n        })\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Alternative Query Creation with createQuery\nDESCRIPTION: This code snippet demonstrates an alternative way to create a Grapher query directly using the `createQuery` function, specifying the collection and fields to retrieve.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/docs/named_queries.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {createQuery} from 'meteor/cultofcoders:grapher';\n\ncreateQuery({\n    users: {\n        profile: 1,\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Unique Link\nDESCRIPTION: These code snippets define a unique link between the `Meteor.users` and `PaymentProfiles` collections. Setting `unique: true` in the link definition ensures that each user has only one associated payment profile.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/docs/linking_collections.md#_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nMeteor.users.addLinks({\n    paymentProfile: {\n        collection: PaymentProfiles,\n        inversedBy: 'user'\n    }\n});\n\nPaymentProfiles.addLinks({\n    user: {\n        field: 'userId',\n        collection: Meteor.users,\n        type: 'one',\n        unique: true\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Unsetting One Link JavaScript\nDESCRIPTION: This snippet demonstrates how to remove a `one` link.  It utilizes the `unset()` method, which requires no arguments, to remove the link from either the direct or inverse side.  This assumes the `userPaymentProfileLink` or `paymentProfileUserLink` are already initialized using `getLink()`.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/docs/linker_engine.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// from direct or inversed side\nuserPaymentProfileLink.unset();\npaymentProfileUserLink.unset();\n```\n\n----------------------------------------\n\nTITLE: Updating Meta Links JavaScript\nDESCRIPTION: This snippet demonstrates how to update existing metadata using the `metadata()` method. It shows how to update metadata for a single object in a `one` link and for multiple objects in a `many` link. The `metadata` method only works with strings or objects containing `_id`. Assumes link has {metadata: true} defined.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/docs/linker_engine.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// one\nconst userPaymentProfileLink = Meteor.users.getLink(userId, 'paymentProfile');\n\nuserPaymentProfileLink.metadata({\n    updatedAt: new Date()\n});\n\n// many\nuserGroupsLink.metadata(groupId, {\n    createdAt: new Date(),\n})\nuserGroupsLink.metadata([groupId1, groupId2], {\n    createdAt: new Date(),\n})\n```\n\n----------------------------------------\n\nTITLE: Linking Grapher Exposure Bodies\nDESCRIPTION: This snippet demonstrates how you can link bodies in a custom way, referencing links in other bodies. Functions are computed on-demand allowing self-referencing body functions.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/docs/global_exposure.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// Comments ONE link to Users as 'user' \n// Users INVERSED 'user' from Comments AS 'comments'\n\nconst commentBody = function(userId) {\n    return {\n        user: userBody,\n        text: 1\n    }\n}\n\nconst userBody = function(userId) {\n    if (isAdmin(userId)) {\n        return {\n            comments: commentBody\n        };        \n    }\n    \n    return somethingElse;\n}\n\nUsers.expose({\n    body: userBody\n})\n\nComments.expose({\n    body: commentBody\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching Data Synchronously Using Async/Await\nDESCRIPTION: Demonstrates using `fetchSync` and `fetchOneSync` with async/await to fetch data synchronously, working with promises.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/docs/named_queries.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst users = await userAdminListQuery.clone().fetchSync();\nconst user = await userAdminListQuery.clone().fetchOneSync();\n```\n\n----------------------------------------\n\nTITLE: Setting Global Defaults for astToQuery with Grapher\nDESCRIPTION: Demonstrates how to set global defaults for all `astToQuery` queries using `setAstToQueryDefaults`. This allows configuring default values for options like `maxLimit` and `maxDepth`, ensuring consistent behavior across all GraphQL queries.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/docs/api.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { setAstToQueryDefaults } from 'meteor/cultofcoders:grapher';\n\nsetAstToQueryDefaults({\n    maxLimit: 100,\n    maxDepth: 5,\n});\n```\n\n----------------------------------------\n\nTITLE: Defining an Inversed Meta Link\nDESCRIPTION: This code defines an inversed meta link from the Groups collection to the Meteor.users collection.  It enables fetching users associated with a group and also accessing the metadata related to their association.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/docs/linking_collections.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nGroups.addLinks({\n    users: {\n        collection: Meteor.users,\n        inversedBy: 'group'\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Use User Fragment in Query\nDESCRIPTION: Demonstrates how to import and use the `UserPublicFragment` within a Grapher query. The spread operator (`...`) is used to include the fields defined in the fragment directly into the query's `user` field. Invoices is a grapher collection.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/docs/structure_and_patterns.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport {UserPublicFragment} from '/imports/db/fragments';\nInvoices.createQuery({\n    number: 1,\n    total: 1,\n    user: {\n        ...UserPublicFragment,\n        billingInfo: {\n            // etc\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Querying Denormalized Data with Non-Cached Fields (JavaScript)\nDESCRIPTION: This code snippet shows a query that will *not* hit the denormalized cache.  The query requests both `smallThumbPath` (which is cached) and `createdAt` (which is not cached) from the `avatar` link. Because `createdAt` is not in the denormalized `avatarCache`, this query will result in a subsequent database request to fetch the avatar data.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/docs/denormalization.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst user = Meteor.users.createQuery({\n    avatar: {\n        smallThumbPath: 1,\n        createdAt: 1,\n    }\n}).fetchOne()\n```\n\n----------------------------------------\n\nTITLE: Creating a Named Query for User Admin List\nDESCRIPTION: This snippet shows how to create a named query called 'userAdminList' to retrieve admin users.  It filters users by role and selects their name.  This file is located at /imports/api/users/queries/userAdminList.js\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/docs/named_queries.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// file: /imports/api/users/queries/userAdminList.js\nexport default Meteor.users.createQuery('userAdminList', {\n    $filters: {\n        roles: {$in: 'ADMIN'}\n    },\n    name: 1,\n})\n```\n\n----------------------------------------\n\nTITLE: Creating and Exposing Resolvers with Grapher in JavaScript\nDESCRIPTION: Shows how to create a query, expose it with a firewall, and define a resolver function. The resolver function defines the server-side logic for fetching data. This provides a secure and controlled way to access data via queries.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/docs/api.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// both\nconst query = createQuery('queryName', () => {});\n\n// server\nquery.expose({\n    firewall, // Function or [Function]\n});\n\nquery.resolve(function(params) {\n    // this.userId\n    return [];\n});\n```\n\n----------------------------------------\n\nTITLE: Metadata link configuration (updated)\nDESCRIPTION: This snippet shows the updated metadata link configuration using a boolean value.  The 'metadata' property should be set to true instead of defining a schema.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/MIGRATION.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// working\nUsers.addLinks({\n    profile: {\n        collection: Profiles,\n        metadata: true,\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Adding the corresponding field to the schema\nDESCRIPTION: This snippet demonstrates how to add the corresponding field to the schema using SimpleSchema. It specifies that the `postId` field is of type String and is optional.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/MIGRATION.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// schema for Users\nSimpleSchema({\n    postId: {\n        type: String,\n        optional: true\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Validating Query Parameters\nDESCRIPTION: This snippet demonstrates how to validate parameters passed to a dynamic query using the `check` library from Meteor. It defines the expected types for the `isApproved` and `authorId` parameters. This validation helps ensure that the query receives valid input.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/docs/introduction.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Match} from 'meteor/check';\n\nexport default Posts.createQuery({\n  $filter({filters, options, params}) {\n    filters.isApproved = params.isApproved;\n    if (params.authorId) {\n        filters.authorId = params.authorId;\n    }\n  },\n  ...\n}, {\n    validateParams: {\n        isApproved: Boolean,\n        authorId: Match.Maybe(String),\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching Query Count Synchronously\nDESCRIPTION: Demonstrates fetching the count of a named query synchronously with async/await.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/docs/named_queries.md#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n// promises\nconst count = await query.getCountSync();\n```\n\n----------------------------------------\n\nTITLE: Define User Fragment\nDESCRIPTION: Defines a JavaScript fragment for common user fields (fullName, avatar, and email). This fragment is intended for reuse in Grapher queries to avoid repetitive field specifications.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/docs/structure_and_patterns.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// file: /imports/db/fragments/UserPublic.js\nexport default {\n    fullName: 1,\n    avatar: {\n        path: 1,\n    },\n    email: 1,\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default Configuration for Named Queries in JavaScript\nDESCRIPTION: This code snippet demonstrates how to set default configurations for named queries using `NamedQuery.setConfig`.  In this case, it sets the `scoped` option to `true`, ensuring all named queries are scoped by default.  This configuration should be loaded both on the client and server.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/docs/named_queries.md#_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nimport {NamedQuery} from 'meteor/cultofcoders:grapher';\nNamedQuery.setConfig({scoped: true});\n```\n\n----------------------------------------\n\nTITLE: Export User Fragment\nDESCRIPTION: Exports the `UserPublic` fragment from the `/imports/db/fragments/UserPublicFields.js` file, making it available for use in other modules. It is good practice to create an index file for the fragments to keep the import paths clean.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/docs/structure_and_patterns.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// file: /imports/db/fragments/index.js\nexport {default as UserPublicFragment} from './UserPublicFields';\n```\n\n----------------------------------------\n\nTITLE: Installing Grapher with Meteor\nDESCRIPTION: This command adds the Grapher package to a Meteor project. It's a straightforward way to integrate Grapher into an existing Meteor application.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmeteor add cultofcoders:grapher\n```\n\n----------------------------------------\n\nTITLE: Deep Filters and Denormalization Caution (JavaScript)\nDESCRIPTION: This example clarifies that deep filters applied within nested objects will not use the denormalized cache. Using `$filters` within the `avatar` link will bypass the cache and fetch the linked Collection, reverting to the original behavior.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/docs/denormalization.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    users: {\n        avatar: {\n            $filters: {} // will not hit the cache\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Meteor for Grapher Testing\nDESCRIPTION: These shell commands are used to set up a Meteor application for testing Grapher. It includes creating a bare Meteor app, navigating into the test directory, installing npm dependencies required for testing, and finally running the tests using Meteor's test-packages command.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/README.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n# create meteor app for testing\n# you can add a specific release with --release flag, this will just create the app with the latest release\nmeteor create --bare test \ncd test\n# install npm dependencies used for testing\nmeteor npm i --save selenium-webdriver@3.6.0 chromedriver@2.36.0 simpl-schema@1.13.1 chai\n\n# Running tests (always from ./test directory)\nMETEOR_PACKAGE_DIRS=\"../\" TEST_BROWSER_DRIVER=chrome meteor test-packages --once --driver-package meteortesting:mocha ../\n```\n\n----------------------------------------\n\nTITLE: Fetching Query Count with Callback\nDESCRIPTION: Demonstrates how to fetch the count of a named query reactively using getCount and a callback.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/docs/named_queries.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n// static query\nquery.getCount((err, count) => {\n    // do something\n});\n```\n\n----------------------------------------\n\nTITLE: Client-Side Usage of Named Query\nDESCRIPTION: Shows how to use a named query on the client side, handling potential errors thrown by the firewall.  Calls the server side method which exposes the query.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/docs/named_queries.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// client side\nimport userAdminListQuery from '/imports/api/users/queries/userAdminList.js';\n\nuserAdminListQuery.clone().fetch((err, users) => {\n    // it will be an error if the current user is not an admin, thrown by the firewall\n});\n```\n\n----------------------------------------\n\nTITLE: Using createQuery\nDESCRIPTION: This snippet shows the updated `createQuery` function, which should be used instead of the deprecated `createNamedQuery` function.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/MIGRATION.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// working\ncreateQuery('xxx', {});\n```\n\n----------------------------------------\n\nTITLE: Metadata link configuration (deprecated)\nDESCRIPTION: This snippet shows the deprecated metadata link configuration as an object. This configuration is no longer supported and should be updated to use a boolean value.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/MIGRATION.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// no longer working\nUsers.addLinks({\n    profile: {\n        collection: Profiles,\n        metadata: {\n            createdAt: { type: Date },\n        },\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Deprecated createNamedQuery usage\nDESCRIPTION: This snippet shows the deprecated `createNamedQuery` function. It is no longer supported and should be replaced with `createQuery`.\nSOURCE: https://github.com/cult-of-coders/grapher/blob/master/MIGRATION.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// no longer working\ncreateNamedQuery('xxx', {});\n```"
  }
]