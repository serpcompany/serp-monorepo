[
  {
    "owner": "azuread",
    "repo": "microsoft-authentication-library-for-dotnet",
    "content": "TITLE: MSAL Error Constants Definition\nDESCRIPTION: Comprehensive collection of error code constants used throughout MSAL.NET for various authentication and authorization scenarios.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-ios/PublicAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nconst Microsoft.Identity.Client.ConfidentialClientApplication.AttemptRegionDiscovery = \"TryAutoDetect\" -> string\nconst Microsoft.Identity.Client.MsalError.AccessDenied = \"access_denied\" -> string\nconst Microsoft.Identity.Client.MsalError.AccessingWsMetadataExchangeFailed = \"accessing_ws_metadata_exchange_failed\" -> string\n/* ... additional error constants ... */\nconst Microsoft.Identity.Client.MsalError.NonceRequiredForPopOnPCA = \"nonce_required_for_pop_on_pca\" -> string\n```\n\n----------------------------------------\n\nTITLE: IConfidentialClientApplication Interface Methods in MSAL.NET\nDESCRIPTION: Interface definition for confidential client applications in MSAL.NET, which represents applications that can keep secrets securely. It includes methods for acquiring tokens using various flows like authorization code, client credentials, and on-behalf-of flows.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-ios/PublicAPI.Shipped.txt#2025-04-23_snippet_24\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.IConfidentialClientApplication\nMicrosoft.Identity.Client.IConfidentialClientApplication.AcquireTokenByAuthorizationCode(System.Collections.Generic.IEnumerable<string> scopes, string authorizationCode) -> Microsoft.Identity.Client.AcquireTokenByAuthorizationCodeParameterBuilder\nMicrosoft.Identity.Client.IConfidentialClientApplication.AcquireTokenForClient(System.Collections.Generic.IEnumerable<string> scopes) -> Microsoft.Identity.Client.AcquireTokenForClientParameterBuilder\nMicrosoft.Identity.Client.IConfidentialClientApplication.AcquireTokenOnBehalfOf(System.Collections.Generic.IEnumerable<string> scopes, Microsoft.Identity.Client.UserAssertion userAssertion) -> Microsoft.Identity.Client.AcquireTokenOnBehalfOfParameterBuilder\nMicrosoft.Identity.Client.IConfidentialClientApplication.AcquireTokenSilent(System.Collections.Generic.IEnumerable<string> scopes, string loginHint) -> Microsoft.Identity.Client.AcquireTokenSilentParameterBuilder\nMicrosoft.Identity.Client.IConfidentialClientApplication.AppTokenCache.get -> Microsoft.Identity.Client.ITokenCache\nMicrosoft.Identity.Client.IConfidentialClientApplication.GetAccountsAsync() -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.Identity.Client.IAccount>>\nMicrosoft.Identity.Client.IConfidentialClientApplication.GetAuthorizationRequestUrl(System.Collections.Generic.IEnumerable<string> scopes) -> Microsoft.Identity.Client.GetAuthorizationRequestUrlParameterBuilder\n```\n\n----------------------------------------\n\nTITLE: Token Acquisition Flow Diagram - MSI V2\nDESCRIPTION: Sequence diagram illustrating the token acquisition process for MSI V2, showing interactions between Application, MSAL, IMDS, and ESTS endpoints. Includes both the new /credential flow and legacy fallback.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/docs/msi_v2/msi_with_credential_design.md#2025-04-23_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant Application\n    participant MSAL\n    participant IMDS\n    participant ESTS\n\n    Application ->> MSAL: 1. Request token using Managed Identity\n    MSAL ->> IMDS: 2. Probe for `/credential` endpoint availability\n    IMDS -->> MSAL: 3. Response (200 OK / 404 Not Found)\n\n    alt `/credential` endpoint available\n        MSAL ->> IMDS: 4. Request Short-Lived Credential (SLC) via `/credential`\n        IMDS -->> MSAL: 5. Return SLC\n        MSAL ->> ESTS: 6. Exchange SLC for Access Token via MTLS\n        ESTS -->> MSAL: 7. Return Access Token\n        MSAL ->> Application: 8. Return Access Token\n    else `/credential` endpoint not available\n        MSAL ->> IMDS: 4a. Fallback to legacy `/token` endpoint\n        IMDS -->> MSAL: 5a. Return Access Token\n        MSAL ->> Application: 6a. Return Access Token\n    end\n```\n\n----------------------------------------\n\nTITLE: Defining IPublicClientApplication Interface in C#\nDESCRIPTION: This snippet defines the IPublicClientApplication interface, which represents a public client application in MSAL.NET. It includes methods for acquiring tokens through various authentication flows, such as interactive, device code, and username/password.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/netstandard2.0/PublicAPI.Shipped.txt#2025-04-23_snippet_62\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.IPublicClientApplication\nMicrosoft.Identity.Client.IPublicClientApplication.AcquireTokenByIntegratedWindowsAuth(System.Collections.Generic.IEnumerable<string> scopes) -> Microsoft.Identity.Client.AcquireTokenByIntegratedWindowsAuthParameterBuilder\nMicrosoft.Identity.Client.IPublicClientApplication.AcquireTokenByUsernamePassword(System.Collections.Generic.IEnumerable<string> scopes, string username, string password) -> Microsoft.Identity.Client.AcquireTokenByUsernamePasswordParameterBuilder\nMicrosoft.Identity.Client.IPublicClientApplication.AcquireTokenByUsernamePassword(System.Collections.Generic.IEnumerable<string> scopes, string username, System.Security.SecureString password) -> Microsoft.Identity.Client.AcquireTokenByUsernamePasswordParameterBuilder\nMicrosoft.Identity.Client.IPublicClientApplication.AcquireTokenInteractive(System.Collections.Generic.IEnumerable<string> scopes) -> Microsoft.Identity.Client.AcquireTokenInteractiveParameterBuilder\nMicrosoft.Identity.Client.IPublicClientApplication.AcquireTokenWithDeviceCode(System.Collections.Generic.IEnumerable<string> scopes, System.Func<Microsoft.Identity.Client.DeviceCodeResult, System.Threading.Tasks.Task> deviceCodeResultCallback) -> Microsoft.Identity.Client.AcquireTokenWithDeviceCodeParameterBuilder\nMicrosoft.Identity.Client.IPublicClientApplication.IsSystemWebViewAvailable.get -> bool\n```\n\n----------------------------------------\n\nTITLE: Authentication Flow Extensions for MSAL.NET Client Applications\nDESCRIPTION: Extension methods for different token acquisition flows including client credentials, interactive authentication, and on-behalf-of flows, enabling specific configurations like custom web UI and cache search for long-running processes.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0/PublicAPI.Shipped.txt#2025-04-23_snippet_59\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Client.Extensibility.AcquireTokenForClientBuilderExtensions.WithProofOfPosessionKeyId(this Microsoft.Identity.Client.AcquireTokenForClientParameterBuilder builder, string keyId, string expectedTokenTypeFromAad = \"Bearer\") -> Microsoft.Identity.Client.AcquireTokenForClientParameterBuilder\nstatic Microsoft.Identity.Client.Extensibility.AcquireTokenInteractiveParameterBuilderExtensions.WithCustomWebUi(this Microsoft.Identity.Client.AcquireTokenInteractiveParameterBuilder builder, Microsoft.Identity.Client.Extensibility.ICustomWebUi customWebUi) -> Microsoft.Identity.Client.AcquireTokenInteractiveParameterBuilder\nstatic Microsoft.Identity.Client.Extensibility.AcquireTokenOnBehalfOfParameterBuilderExtensions.WithSearchInCacheForLongRunningProcess(this Microsoft.Identity.Client.AcquireTokenOnBehalfOfParameterBuilder builder, bool searchInCache = true) -> Microsoft.Identity.Client.AcquireTokenOnBehalfOfParameterBuilder\n```\n\n----------------------------------------\n\nTITLE: Implementing mTLS PoP Token Authentication in MSAL.NET\nDESCRIPTION: Sample code demonstrating how to configure and use mTLS Proof-of-Possession tokens with MSAL.NET. Shows creation of a Confidential Client Application with certificate authentication, regional configuration, and token acquisition with mTLS PoP support.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/docs/sni_mtls_pop_token_design.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nstring clientId = \"163ffef9-a313-45b4-ab2f-c7e2f5e0e23e\";\nstring authority = \"https://login.microsoftonline.com/bea21ebe-8b64-4d06-9f6d-6a889b120a7c\";\nstring[] scopes = new string[] { \"https://graph.microsoft.com/.default\" };\n\nX509Certificate2 certificate = GetCertificateFromStore(\"Use The Lab Auth Cert\");\n\nIConfidentialClientApplication app = ConfidentialClientApplicationBuilder.Create(clientId)\n    .WithAuthority(authority)\n    .WithAzureRegion(\"westus\")\n    .WithCertificate(certificate, true)\n    .WithExperimentalFeatures(true)\n    .Build();\n\nAuthenticationResult result = await app.AcquireTokenForClient(scopes).WithMtlsProofOfPossession()\n    .WithExtraQueryParameters(\"dc=ESTSR-PUB-WUS3-AZ1-TEST1&slice=TestSlice\") //Feature in test slice \n    .WithSendX5C(true)\n    .ExecuteAsync();\n```\n\n----------------------------------------\n\nTITLE: Acquiring an Access Token with MSAL.NET in C#\nDESCRIPTION: This code snippet shows how to acquire an access token using MSAL.NET. It creates a public client application, defines the scopes, and uses the AcquireTokenInteractive method to obtain the token. This is a basic example of how to authenticate and obtain an access token for accessing protected resources.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/tests/Microsoft.Identity.Test.LabInfrastructure/data.txt#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Identity.Client;\n\nvar app = PublicClientApplicationBuilder\n    .Create(\"your_client_id\")\n    .WithAuthority(AzureCloudInstance.AzurePublic, \"your_tenant_id\")\n    .WithRedirectUri(\"your_redirect_uri\")\n    .Build();\n\nstring[] scopes = { \"user.read\" };\n\nAuthenticationResult result = await app.AcquireTokenInteractive(scopes).ExecuteAsync();\n```\n\n----------------------------------------\n\nTITLE: Creating and configuring MsalCacheHelper in C#\nDESCRIPTION: Creates a MsalCacheHelper instance with specified storage properties for secure token caching. This is the main entry point for enabling persistent token cache in MSAL applications.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client.Extensions.Msal/PublicApi/PublicAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Client.Extensions.Msal.MsalCacheHelper.CreateAsync(Microsoft.Identity.Client.Extensions.Msal.StorageCreationProperties storageCreationProperties, System.Diagnostics.TraceSource logger = null) -> System.Threading.Tasks.Task<Microsoft.Identity.Client.Extensions.Msal.MsalCacheHelper>\n```\n\n----------------------------------------\n\nTITLE: Proof of Possession Methods for Token Acquisition in MSAL.NET (C#)\nDESCRIPTION: Methods for configuring Proof of Possession (PoP) and Mutual TLS (MTLS) token requests. These enhance security by binding access tokens to a specific client.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/netstandard2.0/PublicAPI.Shipped.txt#2025-04-23_snippet_93\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.AbstractConfidentialClientAcquireTokenParameterBuilder<T>.WithSignedHttpRequestProofOfPossession(Microsoft.Identity.Client.AppConfig.PoPAuthenticationConfiguration popAuthenticationConfiguration) -> T\nMicrosoft.Identity.Client.AcquireTokenForClientParameterBuilder.WithMtlsProofOfPossession() -> Microsoft.Identity.Client.AcquireTokenForClientParameterBuilder\n```\n\n----------------------------------------\n\nTITLE: Defining IConfidentialClientApplication Interface in C#\nDESCRIPTION: This snippet defines the IConfidentialClientApplication interface, which represents a confidential client application in MSAL.NET. It includes methods for acquiring tokens and managing the application's token cache.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/netstandard2.0/PublicAPI.Shipped.txt#2025-04-23_snippet_61\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.IConfidentialClientApplication.AcquireTokenOnBehalfOf(System.Collections.Generic.IEnumerable<string> scopes, Microsoft.Identity.Client.UserAssertion userAssertion) -> Microsoft.Identity.Client.AcquireTokenOnBehalfOfParameterBuilder\nMicrosoft.Identity.Client.IConfidentialClientApplication.AcquireTokenSilent(System.Collections.Generic.IEnumerable<string> scopes, string loginHint) -> Microsoft.Identity.Client.AcquireTokenSilentParameterBuilder\nMicrosoft.Identity.Client.IConfidentialClientApplication.AppTokenCache.get -> Microsoft.Identity.Client.ITokenCache\nMicrosoft.Identity.Client.IConfidentialClientApplication.GetAccountsAsync() -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.Identity.Client.IAccount>>\nMicrosoft.Identity.Client.IConfidentialClientApplication.GetAuthorizationRequestUrl(System.Collections.Generic.IEnumerable<string> scopes) -> Microsoft.Identity.Client.GetAuthorizationRequestUrlParameterBuilder\n```\n\n----------------------------------------\n\nTITLE: Acquiring Access Token Using MSAL.NET\nDESCRIPTION: This snippet shows how to acquire an access token interactively using MSAL.NET. It includes error handling for common exceptions that may occur during the authentication process.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client.Broker/PublicApi/PublicAPI.Unshipped.txt#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nstring[] scopes = { \"user.read\" };\nAuthenticationResult result = null;\ntry\n{\n    result = await app.AcquireTokenInteractive(scopes).ExecuteAsync();\n}\ncatch (MsalException msalex)\n{\n    // Handling MsalException\n}\n```\n\n----------------------------------------\n\nTITLE: Interactive Authentication Parameter Builder\nDESCRIPTION: Methods for configuring interactive token acquisition flow. Includes options for account selection, web view configuration, login hints, parent window association, prompt behavior, proof of possession, and embedded web view settings.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0/PublicAPI.Shipped.txt#2025-04-23_snippet_18\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.AcquireTokenInteractiveParameterBuilder\nMicrosoft.Identity.Client.AcquireTokenInteractiveParameterBuilder.WithAccount(Microsoft.Identity.Client.IAccount account) -> Microsoft.Identity.Client.AcquireTokenInteractiveParameterBuilder\nMicrosoft.Identity.Client.AcquireTokenInteractiveParameterBuilder.WithEmbeddedWebViewOptions(Microsoft.Identity.Client.EmbeddedWebViewOptions options) -> Microsoft.Identity.Client.AcquireTokenInteractiveParameterBuilder\nMicrosoft.Identity.Client.AcquireTokenInteractiveParameterBuilder.WithExtraScopesToConsent(System.Collections.Generic.IEnumerable<string> extraScopesToConsent) -> Microsoft.Identity.Client.AcquireTokenInteractiveParameterBuilder\nMicrosoft.Identity.Client.AcquireTokenInteractiveParameterBuilder.WithLoginHint(string loginHint) -> Microsoft.Identity.Client.AcquireTokenInteractiveParameterBuilder\nMicrosoft.Identity.Client.AcquireTokenInteractiveParameterBuilder.WithParentActivityOrWindow(nint window) -> Microsoft.Identity.Client.AcquireTokenInteractiveParameterBuilder\nMicrosoft.Identity.Client.AcquireTokenInteractiveParameterBuilder.WithParentActivityOrWindow(object parent) -> Microsoft.Identity.Client.AcquireTokenInteractiveParameterBuilder\nMicrosoft.Identity.Client.AcquireTokenInteractiveParameterBuilder.WithPrompt(Microsoft.Identity.Client.Prompt prompt) -> Microsoft.Identity.Client.AcquireTokenInteractiveParameterBuilder\nMicrosoft.Identity.Client.AcquireTokenInteractiveParameterBuilder.WithProofOfPossession(string nonce, System.Net.Http.HttpMethod httpMethod, System.Uri requestUri) -> Microsoft.Identity.Client.AcquireTokenInteractiveParameterBuilder\nMicrosoft.Identity.Client.AcquireTokenInteractiveParameterBuilder.WithSystemWebViewOptions(Microsoft.Identity.Client.SystemWebViewOptions options) -> Microsoft.Identity.Client.AcquireTokenInteractiveParameterBuilder\nMicrosoft.Identity.Client.AcquireTokenInteractiveParameterBuilder.WithUseEmbeddedWebView(bool useEmbeddedWebView) -> Microsoft.Identity.Client.AcquireTokenInteractiveParameterBuilder\n```\n\n----------------------------------------\n\nTITLE: Token Acquisition Parameter Builders\nDESCRIPTION: Collection of builder classes for configuring different token acquisition flows including interactive, client credentials, username/password, and managed identity scenarios.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net472/PublicAPI.Shipped.txt#2025-04-23_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.AcquireTokenInteractiveParameterBuilder\nMicrosoft.Identity.Client.AcquireTokenForClientParameterBuilder\nMicrosoft.Identity.Client.AcquireTokenByUsernamePasswordParameterBuilder\nMicrosoft.Identity.Client.AcquireTokenForManagedIdentityParameterBuilder\n```\n\n----------------------------------------\n\nTITLE: AbstractAcquireTokenParameterBuilder Generic Class in C#\nDESCRIPTION: A generic abstract class that provides fluent API methods for configuring token acquisition parameters. It enables specifying authority types, claims, scopes, and other authentication parameters needed for token requests.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net472/PublicAPI.Shipped.txt#2025-04-23_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.AbstractAcquireTokenParameterBuilder<T>\nMicrosoft.Identity.Client.AbstractAcquireTokenParameterBuilder<T>.AbstractAcquireTokenParameterBuilder() -> void\nMicrosoft.Identity.Client.AbstractAcquireTokenParameterBuilder<T>.WithAdfsAuthority(string authorityUri, bool validateAuthority = true) -> T\nMicrosoft.Identity.Client.AbstractAcquireTokenParameterBuilder<T>.WithAuthority(Microsoft.Identity.Client.AadAuthorityAudience authorityAudience, bool validateAuthority = true) -> T\nMicrosoft.Identity.Client.AbstractAcquireTokenParameterBuilder<T>.WithAuthority(Microsoft.Identity.Client.AzureCloudInstance azureCloudInstance, Microsoft.Identity.Client.AadAuthorityAudience authorityAudience, bool validateAuthority = true) -> T\nMicrosoft.Identity.Client.AbstractAcquireTokenParameterBuilder<T>.WithAuthority(Microsoft.Identity.Client.AzureCloudInstance azureCloudInstance, string tenant, bool validateAuthority = true) -> T\nMicrosoft.Identity.Client.AbstractAcquireTokenParameterBuilder<T>.WithAuthority(Microsoft.Identity.Client.AzureCloudInstance azureCloudInstance, System.Guid tenantId, bool validateAuthority = true) -> T\nMicrosoft.Identity.Client.AbstractAcquireTokenParameterBuilder<T>.WithAuthority(string authorityUri, bool validateAuthority = true) -> T\nMicrosoft.Identity.Client.AbstractAcquireTokenParameterBuilder<T>.WithAuthority(string cloudInstanceUri, string tenant, bool validateAuthority = true) -> T\nMicrosoft.Identity.Client.AbstractAcquireTokenParameterBuilder<T>.WithAuthority(string cloudInstanceUri, System.Guid tenantId, bool validateAuthority = true) -> T\nMicrosoft.Identity.Client.AbstractAcquireTokenParameterBuilder<T>.WithB2CAuthority(string authorityUri) -> T\nMicrosoft.Identity.Client.AbstractAcquireTokenParameterBuilder<T>.WithClaims(string claims) -> T\nMicrosoft.Identity.Client.AbstractAcquireTokenParameterBuilder<T>.WithExtraQueryParameters(string extraQueryParameters) -> T\nMicrosoft.Identity.Client.AbstractAcquireTokenParameterBuilder<T>.WithScopes(System.Collections.Generic.IEnumerable<string> scopes) -> T\nMicrosoft.Identity.Client.AbstractAcquireTokenParameterBuilder<T>.WithTenantId(string tenantId) -> T\nMicrosoft.Identity.Client.AbstractAcquireTokenParameterBuilder<T>.WithTenantIdFromAuthority(System.Uri authorityUri) -> T\n```\n\n----------------------------------------\n\nTITLE: Visualizing IMDS Request Flow and Error Handling with Mermaid\nDESCRIPTION: This diagram visualizes the error handling flow for IMDS requests, showing the decision paths for different error scenarios and their corresponding retry strategies. It maps the token request process from initial request through various error conditions to either successful token issuance or appropriate retry strategies.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/docs/imds_retry_based_on_errors.md#2025-04-23_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD;\n  \n  A[IMDS Request] -->|Success| B[✅ Token Issued]\n  A -->|4xx Error?| C{Identity Not Found?}\n  C -- Yes --> D[🔄 Retry: 1s → 2s → 4s]\n  C -- No --> E[❌ Do Not Retry]\n  A -->|5xx Error?| F[🔄 Retry: 1s → 2s → 4s]\n  A -->|410 IMDS Updating?| H[🔄 Retry: 10s up to 7 attempts]\n  A -->|429 Throttling?| G[🔄 Retry: 1s → 2s → 4s]\n```\n\n----------------------------------------\n\nTITLE: Creating Public Client Applications in MSAL.NET\nDESCRIPTION: Methods for creating public client applications in MSAL.NET either with a client ID or with application options. These are entry points for interactive authentication flows.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net462/PublicAPI.Shipped.txt#2025-04-23_snippet_30\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Client.PublicClientApplicationBuilder.Create(string clientId) -> Microsoft.Identity.Client.PublicClientApplicationBuilder\nstatic Microsoft.Identity.Client.PublicClientApplicationBuilder.CreateWithApplicationOptions(Microsoft.Identity.Client.PublicClientApplicationOptions options) -> Microsoft.Identity.Client.PublicClientApplicationBuilder\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Cache Key in MSAL with C#\nDESCRIPTION: Example showing how to use the new WithAdditionalCacheKeyComponents API to associate tokens with custom identifiers like certificate thumbprints and SPIFEE IDs when acquiring tokens.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/docs/cache_extensibility.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar app = ConfidentialClientApplicationBuilder.Create(\"client_id\")             \n              .WithClientCertifiacte(x509Cert)\n              .WithExperimentalFeatures(true)               // All extensiblity APIs remain experimental\n              .BuildConcrete();\n\nvar result = await app.AcquireTokenForClient(\"https://graph.microsoft.com/.default\")\n    .WithAdditionalCacheKeyComponents(new Dictionary<string, string>{ // New API\n        {\"cert_thubprint\", x509Cert.GetSha2THumbprint() }, \n        {\"spiffee_id\", \"37\" }\n    });\n    .ExecuteAsync();\n```\n\n----------------------------------------\n\nTITLE: ConfidentialClientApplication Class Method Signatures in C#\nDESCRIPTION: Defines methods specific to confidential client applications (apps with secrets), including client credential flow, on-behalf-of flow, and authorization code flow. These flows are typically used in web applications and APIs.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-android/PublicAPI.Shipped.txt#2025-04-23_snippet_20\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.ConfidentialClientApplication.AcquireTokenByAuthorizationCode(System.Collections.Generic.IEnumerable<string> scopes, string authorizationCode) -> Microsoft.Identity.Client.AcquireTokenByAuthorizationCodeParameterBuilder\nMicrosoft.Identity.Client.ConfidentialClientApplication.AcquireTokenForClient(System.Collections.Generic.IEnumerable<string> scopes) -> Microsoft.Identity.Client.AcquireTokenForClientParameterBuilder\nMicrosoft.Identity.Client.ConfidentialClientApplication.AcquireTokenInLongRunningProcess(System.Collections.Generic.IEnumerable<string> scopes, string longRunningProcessSessionKey) -> Microsoft.Identity.Client.AcquireTokenOnBehalfOfParameterBuilder\nMicrosoft.Identity.Client.ConfidentialClientApplication.AcquireTokenOnBehalfOf(System.Collections.Generic.IEnumerable<string> scopes, Microsoft.Identity.Client.UserAssertion userAssertion) -> Microsoft.Identity.Client.AcquireTokenOnBehalfOfParameterBuilder\nMicrosoft.Identity.Client.ConfidentialClientApplication.AppTokenCache.get -> Microsoft.Identity.Client.ITokenCache\nMicrosoft.Identity.Client.ConfidentialClientApplication.Certificate.get -> System.Security.Cryptography.X509Certificates.X509Certificate2\nMicrosoft.Identity.Client.ConfidentialClientApplication.GetAuthorizationRequestUrl(System.Collections.Generic.IEnumerable<string> scopes) -> Microsoft.Identity.Client.GetAuthorizationRequestUrlParameterBuilder\nMicrosoft.Identity.Client.ConfidentialClientApplication.InitiateLongRunningProcessInWebApi(System.Collections.Generic.IEnumerable<string> scopes, string userToken, ref string longRunningProcessSessionKey) -> Microsoft.Identity.Client.AcquireTokenOnBehalfOfParameterBuilder\nMicrosoft.Identity.Client.ConfidentialClientApplication.StopLongRunningProcessInWebApiAsync(string longRunningProcessSessionKey, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<bool>\n```\n\n----------------------------------------\n\nTITLE: IPublicClientApplication Interface Methods in MSAL.NET\nDESCRIPTION: Interface definition for public client applications in MSAL.NET, which represents applications that run on devices or desktop applications where the client secret cannot be securely stored. It includes methods for interactive authentication, device code flow, and more.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-ios/PublicAPI.Shipped.txt#2025-04-23_snippet_25\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.IPublicClientApplication\nMicrosoft.Identity.Client.IPublicClientApplication.AcquireTokenByIntegratedWindowsAuth(System.Collections.Generic.IEnumerable<string> scopes) -> Microsoft.Identity.Client.AcquireTokenByIntegratedWindowsAuthParameterBuilder\nMicrosoft.Identity.Client.IPublicClientApplication.AcquireTokenByUsernamePassword(System.Collections.Generic.IEnumerable<string> scopes, string username, string password) -> Microsoft.Identity.Client.AcquireTokenByUsernamePasswordParameterBuilder\nMicrosoft.Identity.Client.IPublicClientApplication.AcquireTokenByUsernamePassword(System.Collections.Generic.IEnumerable<string> scopes, string username, System.Security.SecureString password) -> Microsoft.Identity.Client.AcquireTokenByUsernamePasswordParameterBuilder\nMicrosoft.Identity.Client.IPublicClientApplication.AcquireTokenInteractive(System.Collections.Generic.IEnumerable<string> scopes) -> Microsoft.Identity.Client.AcquireTokenInteractiveParameterBuilder\nMicrosoft.Identity.Client.IPublicClientApplication.AcquireTokenWithDeviceCode(System.Collections.Generic.IEnumerable<string> scopes, System.Func<Microsoft.Identity.Client.DeviceCodeResult, System.Threading.Tasks.Task> deviceCodeResultCallback) -> Microsoft.Identity.Client.AcquireTokenWithDeviceCodeParameterBuilder\nMicrosoft.Identity.Client.IPublicClientApplication.IsSystemWebViewAvailable.get -> bool\n```\n\n----------------------------------------\n\nTITLE: Creating Public Client Application with Client ID in C#\nDESCRIPTION: Static factory method for creating a public client application builder with a specific client ID. This is the entry point for applications using public client authentication flows.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-ios/PublicAPI.Shipped.txt#2025-04-23_snippet_66\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Client.PublicClientApplicationBuilder.Create(string clientId) -> Microsoft.Identity.Client.PublicClientApplicationBuilder\n```\n\n----------------------------------------\n\nTITLE: Authentication Result Class Definition in C#\nDESCRIPTION: Core class that represents the result of an authentication operation in MSAL.NET. Contains properties for access token, account information, expiration times, and other authentication metadata.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net462/PublicAPI.Shipped.txt#2025-04-23_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\npublic class AuthenticationResult\n{\n    public string AccessToken { get; set; }\n    public IAccount Account { get; }\n    public IReadOnlyDictionary<string, string> AdditionalResponseParameters { get; }\n    public AuthenticationResultMetadata AuthenticationResultMetadata { get; }\n    public ClaimsPrincipal ClaimsPrincipal { get; }\n    public Guid CorrelationId { get; }\n    public DateTimeOffset ExpiresOn { get; }\n    \n    public AuthenticationResult(string accessToken, \n        bool isExtendedLifeTimeToken,\n        string uniqueId,\n        DateTimeOffset expiresOn,\n        DateTimeOffset extendedExpiresOn,\n        string tenantId,\n        IAccount account,\n        string idToken,\n        IEnumerable<string> scopes,\n        Guid correlationId,\n        string tokenType = \"Bearer\",\n        AuthenticationResultMetadata authenticationResultMetadata = null,\n        ClaimsPrincipal claimsPrincipal = null,\n        string spaAuthCode = null,\n        IReadOnlyDictionary<string, string> additionalResponseParameters = null)\n    \n    public string CreateAuthorizationHeader()\n}\n```\n\n----------------------------------------\n\nTITLE: Visualizing Token Revocation Process with Mermaid Sequence Diagram\nDESCRIPTION: This Mermaid sequence diagram illustrates the process of token acquisition, revocation, and re-acquisition in an Azure Managed Identity environment. It showcases interactions between Azure AD, Managed Identity Host, Target Resource, Revocation Mechanism, and Monitoring & Logging components.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/prototype/token-revocation-msiv1.md#2025-04-23_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant AAD as Azure AD (Entra ID)\n    participant Host as Managed Identity Host\n    participant Resource as Target Resource\n    participant Revo as Revocation Mechanism\n    participant Monitor as Monitoring & Logging\n\n    rect rgb(245, 245, 245)\n    Note over Host: 1) Host requests MSI token\n    Host->>AAD: Request token (MSI/IMDS endpoint)\n    AAD-->>Host: Returns short-lived access token\n    Host->>Resource: Presents access token\n    Resource-->>Host: Access granted\n    end\n\n    rect rgb(245, 245, 245)\n    Note over Revo: 2) Revoke token via RevoGuard\n    Revo->>AAD: Revocation action (invalidate token)\n    AAD-->>Resource: Updated revocation status\n    Host->>Resource: Attempts to use old token\n    Resource-->>Host: Access denied (revoked token)\n    end\n\n    rect rgb(245, 245, 245)\n    Note over Monitor: 3) Observe logs & metrics\n    Monitor->>AAD: Collect sign-in & token logs\n    Monitor->>Resource: Collect access & denial events\n    end\n\n    rect rgb(245, 245, 245)\n    Note over Host: 4) Host acquires new token & retries\n    Host->>AAD: Request new token (MSI/IMDS endpoint)\n    AAD-->>Host: Returns fresh short-lived token\n    Host->>Resource: Presents new valid token\n    Resource-->>Host: Access granted (new token)\n    end\n```\n\n----------------------------------------\n\nTITLE: Defining AuthenticationResult Class in C#\nDESCRIPTION: Class definition for AuthenticationResult with properties and methods for handling the result of an authentication operation, including access token, account information, and claims.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0/PublicAPI.Shipped.txt#2025-04-23_snippet_24\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.AuthenticationResult\nMicrosoft.Identity.Client.AuthenticationResult.AccessToken.get -> string\nMicrosoft.Identity.Client.AuthenticationResult.AccessToken.set -> void\nMicrosoft.Identity.Client.AuthenticationResult.Account.get -> Microsoft.Identity.Client.IAccount\nMicrosoft.Identity.Client.AuthenticationResult.AdditionalResponseParameters.get -> System.Collections.Generic.IReadOnlyDictionary<string, string>\nMicrosoft.Identity.Client.AuthenticationResult.AuthenticationResult(string accessToken, bool isExtendedLifeTimeToken, string uniqueId, System.DateTimeOffset expiresOn, System.DateTimeOffset extendedExpiresOn, string tenantId, Microsoft.Identity.Client.IAccount account, string idToken, System.Collections.Generic.IEnumerable<string> scopes, System.Guid correlationId, Microsoft.Identity.Client.AuthenticationResultMetadata authenticationResultMetadata, string tokenType = \"Bearer\") -> void\nMicrosoft.Identity.Client.AuthenticationResult.AuthenticationResult(string accessToken, bool isExtendedLifeTimeToken, string uniqueId, System.DateTimeOffset expiresOn, System.DateTimeOffset extendedExpiresOn, string tenantId, Microsoft.Identity.Client.IAccount account, string idToken, System.Collections.Generic.IEnumerable<string> scopes, System.Guid correlationId, string tokenType = \"Bearer\", Microsoft.Identity.Client.AuthenticationResultMetadata authenticationResultMetadata = null, System.Security.Claims.ClaimsPrincipal claimsPrincipal = null, string spaAuthCode = null, System.Collections.Generic.IReadOnlyDictionary<string, string> additionalResponseParameters = null) -> void\nMicrosoft.Identity.Client.AuthenticationResult.AuthenticationResultMetadata.get -> Microsoft.Identity.Client.AuthenticationResultMetadata\nMicrosoft.Identity.Client.AuthenticationResult.ClaimsPrincipal.get -> System.Security.Claims.ClaimsPrincipal\nMicrosoft.Identity.Client.AuthenticationResult.CorrelationId.get -> System.Guid\nMicrosoft.Identity.Client.AuthenticationResult.CreateAuthorizationHeader() -> string\nMicrosoft.Identity.Client.AuthenticationResult.ExpiresOn.get -> System.DateTimeOffset\nMicrosoft.Identity.Client.AuthenticationResult.ExtendedExpiresOn.get -> System.DateTimeOffset\nMicrosoft.Identity.Client.AuthenticationResult.IdToken.get -> string\nMicrosoft.Identity.Client.AuthenticationResult.IsExtendedLifeTimeToken.get -> bool\nMicrosoft.Identity.Client.AuthenticationResult.Scopes.get -> System.Collections.Generic.IEnumerable<string>\n```\n\n----------------------------------------\n\nTITLE: Public Client Application Implementation in C#\nDESCRIPTION: Class for authenticating users in public client applications (desktop, mobile). Provides methods for various authentication flows including interactive, integrated Windows auth, username/password, and device code flows.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0/PublicAPI.Shipped.txt#2025-04-23_snippet_48\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.PublicClientApplication\nMicrosoft.Identity.Client.PublicClientApplication.AcquireTokenByIntegratedWindowsAuth(System.Collections.Generic.IEnumerable<string> scopes) -> Microsoft.Identity.Client.AcquireTokenByIntegratedWindowsAuthParameterBuilder\nMicrosoft.Identity.Client.PublicClientApplication.AcquireTokenByUsernamePassword(System.Collections.Generic.IEnumerable<string> scopes, string username, string password) -> Microsoft.Identity.Client.AcquireTokenByUsernamePasswordParameterBuilder\nMicrosoft.Identity.Client.PublicClientApplication.AcquireTokenByUsernamePassword(System.Collections.Generic.IEnumerable<string> scopes, string username, System.Security.SecureString password) -> Microsoft.Identity.Client.AcquireTokenByUsernamePasswordParameterBuilder\nMicrosoft.Identity.Client.PublicClientApplication.AcquireTokenInteractive(System.Collections.Generic.IEnumerable<string> scopes) -> Microsoft.Identity.Client.AcquireTokenInteractiveParameterBuilder\nMicrosoft.Identity.Client.PublicClientApplication.AcquireTokenWithDeviceCode(System.Collections.Generic.IEnumerable<string> scopes, System.Func<Microsoft.Identity.Client.DeviceCodeResult, System.Threading.Tasks.Task> deviceCodeResultCallback) -> Microsoft.Identity.Client.AcquireTokenWithDeviceCodeParameterBuilder\nMicrosoft.Identity.Client.PublicClientApplication.IsBrokerAvailable() -> bool\nMicrosoft.Identity.Client.PublicClientApplication.IsEmbeddedWebViewAvailable() -> bool\nMicrosoft.Identity.Client.PublicClientApplication.IsProofOfPossessionSupportedByClient() -> bool\nMicrosoft.Identity.Client.PublicClientApplication.IsSystemWebViewAvailable.get -> bool\nMicrosoft.Identity.Client.PublicClientApplication.IsUserInteractive() -> bool\nMicrosoft.Identity.Client.PublicClientApplicationBuilder\nMicrosoft.Identity.Client.PublicClientApplicationBuilder.Build() -> Microsoft.Identity.Client.IPublicClientApplication\n```\n\n----------------------------------------\n\nTITLE: Authentication Result Class\nDESCRIPTION: Represents the result of an authentication operation including access token, account information, and additional response parameters.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-ios/PublicAPI.Shipped.txt#2025-04-23_snippet_12\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.AuthenticationResult\n{\n    string AccessToken { get; set; }\n    IAccount Account { get; set; }\n    IReadOnlyDictionary<string, string> AdditionalResponseParameters { get; }\n}\n```\n\n----------------------------------------\n\nTITLE: SPA Authorization Code Implementation\nDESCRIPTION: Configuration for Single Page Applications to use authorization code flow, which is now generally available and no longer requires the experimental features flag.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/CHANGELOG.md#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n// Previous (experimental) implementation\nappBuilder.WithExperimentalFeatures().WithSpaAuthorizationCode()\n\n// New implementation - experimental flag no longer needed\nappBuilder.WithSpaAuthorizationCode()\n```\n\n----------------------------------------\n\nTITLE: PublicClientApplication Class Methods in MSAL.NET\nDESCRIPTION: Defines methods for public client authentication flows including interactive, device code, integrated Windows authentication, and username/password flows. Also provides methods to check platform capabilities.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/netstandard2.0/PublicAPI.Shipped.txt#2025-04-23_snippet_75\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.PublicClientApplication\nMicrosoft.Identity.Client.PublicClientApplication.AcquireTokenByIntegratedWindowsAuth(System.Collections.Generic.IEnumerable<string> scopes) -> Microsoft.Identity.Client.AcquireTokenByIntegratedWindowsAuthParameterBuilder\nMicrosoft.Identity.Client.PublicClientApplication.AcquireTokenByUsernamePassword(System.Collections.Generic.IEnumerable<string> scopes, string username, string password) -> Microsoft.Identity.Client.AcquireTokenByUsernamePasswordParameterBuilder\nMicrosoft.Identity.Client.PublicClientApplication.AcquireTokenByUsernamePassword(System.Collections.Generic.IEnumerable<string> scopes, string username, System.Security.SecureString password) -> Microsoft.Identity.Client.AcquireTokenByUsernamePasswordParameterBuilder\nMicrosoft.Identity.Client.PublicClientApplication.AcquireTokenInteractive(System.Collections.Generic.IEnumerable<string> scopes) -> Microsoft.Identity.Client.AcquireTokenInteractiveParameterBuilder\nMicrosoft.Identity.Client.PublicClientApplication.AcquireTokenWithDeviceCode(System.Collections.Generic.IEnumerable<string> scopes, System.Func<Microsoft.Identity.Client.DeviceCodeResult, System.Threading.Tasks.Task> deviceCodeResultCallback) -> Microsoft.Identity.Client.AcquireTokenWithDeviceCodeParameterBuilder\nMicrosoft.Identity.Client.PublicClientApplication.IsBrokerAvailable() -> bool\nMicrosoft.Identity.Client.PublicClientApplication.IsEmbeddedWebViewAvailable() -> bool\nMicrosoft.Identity.Client.PublicClientApplication.IsProofOfPossessionSupportedByClient() -> bool\nMicrosoft.Identity.Client.PublicClientApplication.IsSystemWebViewAvailable.get -> bool\nMicrosoft.Identity.Client.PublicClientApplication.IsUserInteractive() -> bool\n```\n\n----------------------------------------\n\nTITLE: Defining ClientApplicationBase Methods in C#\nDESCRIPTION: Declares methods for ClientApplicationBase class, including token acquisition, account management, and property accessors. These methods are part of the core functionality for client applications using MSAL.NET.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0/PublicAPI.Shipped.txt#2025-04-23_snippet_29\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.ClientApplicationBase.AcquireTokenSilent(System.Collections.Generic.IEnumerable<string> scopes, string loginHint) -> Microsoft.Identity.Client.AcquireTokenSilentParameterBuilder\nMicrosoft.Identity.Client.ClientApplicationBase.AppConfig.get -> Microsoft.Identity.Client.IAppConfig\nMicrosoft.Identity.Client.ClientApplicationBase.Authority.get -> string\nMicrosoft.Identity.Client.ClientApplicationBase.GetAccountAsync(string accountId) -> System.Threading.Tasks.Task<Microsoft.Identity.Client.IAccount>\nMicrosoft.Identity.Client.ClientApplicationBase.GetAccountAsync(string accountId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Microsoft.Identity.Client.IAccount>\nMicrosoft.Identity.Client.ClientApplicationBase.GetAccountsAsync() -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.Identity.Client.IAccount>>\nMicrosoft.Identity.Client.ClientApplicationBase.GetAccountsAsync(string userFlow) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.Identity.Client.IAccount>>\nMicrosoft.Identity.Client.ClientApplicationBase.GetAccountsAsync(string userFlow, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.Identity.Client.IAccount>>\nMicrosoft.Identity.Client.ClientApplicationBase.GetAccountsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.Identity.Client.IAccount>>\nMicrosoft.Identity.Client.ClientApplicationBase.RemoveAsync(Microsoft.Identity.Client.IAccount account) -> System.Threading.Tasks.Task\nMicrosoft.Identity.Client.ClientApplicationBase.RemoveAsync(Microsoft.Identity.Client.IAccount account, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task\nMicrosoft.Identity.Client.ClientApplicationBase.UserTokenCache.get -> Microsoft.Identity.Client.ITokenCache\n```\n\n----------------------------------------\n\nTITLE: Defining ConfidentialClientApplication Methods in C#\nDESCRIPTION: Declares methods for the ConfidentialClientApplication class, including token acquisition for various scenarios, authorization request URL generation, and long-running process management. These methods are specific to confidential client applications in MSAL.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/netstandard2.0/PublicAPI.Shipped.txt#2025-04-23_snippet_43\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.ConfidentialClientApplication\nMicrosoft.Identity.Client.ConfidentialClientApplication.AcquireTokenByAuthorizationCode(System.Collections.Generic.IEnumerable<string> scopes, string authorizationCode) -> Microsoft.Identity.Client.AcquireTokenByAuthorizationCodeParameterBuilder\nMicrosoft.Identity.Client.ConfidentialClientApplication.AcquireTokenForClient(System.Collections.Generic.IEnumerable<string> scopes) -> Microsoft.Identity.Client.AcquireTokenForClientParameterBuilder\nMicrosoft.Identity.Client.ConfidentialClientApplication.AcquireTokenInLongRunningProcess(System.Collections.Generic.IEnumerable<string> scopes, string longRunningProcessSessionKey) -> Microsoft.Identity.Client.AcquireTokenOnBehalfOfParameterBuilder\nMicrosoft.Identity.Client.ConfidentialClientApplication.AcquireTokenOnBehalfOf(System.Collections.Generic.IEnumerable<string> scopes, Microsoft.Identity.Client.UserAssertion userAssertion) -> Microsoft.Identity.Client.AcquireTokenOnBehalfOfParameterBuilder\nMicrosoft.Identity.Client.ConfidentialClientApplication.AppTokenCache.get -> Microsoft.Identity.Client.ITokenCache\nMicrosoft.Identity.Client.ConfidentialClientApplication.Certificate.get -> System.Security.Cryptography.X509Certificates.X509Certificate2\nMicrosoft.Identity.Client.ConfidentialClientApplication.GetAuthorizationRequestUrl(System.Collections.Generic.IEnumerable<string> scopes) -> Microsoft.Identity.Client.GetAuthorizationRequestUrlParameterBuilder\nMicrosoft.Identity.Client.ConfidentialClientApplication.InitiateLongRunningProcessInWebApi(System.Collections.Generic.IEnumerable<string> scopes, string userToken, ref string longRunningProcessSessionKey) -> Microsoft.Identity.Client.AcquireTokenOnBehalfOfParameterBuilder\nMicrosoft.Identity.Client.ConfidentialClientApplication.StopLongRunningProcessInWebApiAsync(string longRunningProcessSessionKey, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<bool>\n```\n\n----------------------------------------\n\nTITLE: Configuring Storage Creation Properties with Builder Pattern in C#\nDESCRIPTION: Uses the builder pattern to configure storage properties for token cache persistence. Demonstrates how to set up cache file location and customize platform-specific storage options.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client.Extensions.Msal/PublicApi/PublicAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.Extensions.Msal.StorageCreationPropertiesBuilder.StorageCreationPropertiesBuilder(string cacheFileName, string cacheDirectory) -> void\nMicrosoft.Identity.Client.Extensions.Msal.StorageCreationPropertiesBuilder.WithMacKeyChain(string serviceName, string accountName) -> Microsoft.Identity.Client.Extensions.Msal.StorageCreationPropertiesBuilder\nMicrosoft.Identity.Client.Extensions.Msal.StorageCreationPropertiesBuilder.WithLinuxKeyring(string schemaName, string collection, string secretLabel, System.Collections.Generic.KeyValuePair<string, string> attribute1, System.Collections.Generic.KeyValuePair<string, string> attribute2) -> Microsoft.Identity.Client.Extensions.Msal.StorageCreationPropertiesBuilder\nMicrosoft.Identity.Client.Extensions.Msal.StorageCreationPropertiesBuilder.Build() -> Microsoft.Identity.Client.Extensions.Msal.StorageCreationProperties\n```\n\n----------------------------------------\n\nTITLE: Defining ConfidentialClientApplication Methods in C#\nDESCRIPTION: Declares methods for ConfidentialClientApplication class, including various token acquisition methods for different scenarios like client credentials, authorization code, and on-behalf-of flows. It also includes methods for handling long-running processes and retrieving authorization request URLs.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0/PublicAPI.Shipped.txt#2025-04-23_snippet_30\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.ConfidentialClientApplication.AcquireTokenByAuthorizationCode(System.Collections.Generic.IEnumerable<string> scopes, string authorizationCode) -> Microsoft.Identity.Client.AcquireTokenByAuthorizationCodeParameterBuilder\nMicrosoft.Identity.Client.ConfidentialClientApplication.AcquireTokenForClient(System.Collections.Generic.IEnumerable<string> scopes) -> Microsoft.Identity.Client.AcquireTokenForClientParameterBuilder\nMicrosoft.Identity.Client.ConfidentialClientApplication.AcquireTokenInLongRunningProcess(System.Collections.Generic.IEnumerable<string> scopes, string longRunningProcessSessionKey) -> Microsoft.Identity.Client.AcquireTokenOnBehalfOfParameterBuilder\nMicrosoft.Identity.Client.ConfidentialClientApplication.AcquireTokenOnBehalfOf(System.Collections.Generic.IEnumerable<string> scopes, Microsoft.Identity.Client.UserAssertion userAssertion) -> Microsoft.Identity.Client.AcquireTokenOnBehalfOfParameterBuilder\nMicrosoft.Identity.Client.ConfidentialClientApplication.AppTokenCache.get -> Microsoft.Identity.Client.ITokenCache\nMicrosoft.Identity.Client.ConfidentialClientApplication.Certificate.get -> System.Security.Cryptography.X509Certificates.X509Certificate2\nMicrosoft.Identity.Client.ConfidentialClientApplication.GetAuthorizationRequestUrl(System.Collections.Generic.IEnumerable<string> scopes) -> Microsoft.Identity.Client.GetAuthorizationRequestUrlParameterBuilder\nMicrosoft.Identity.Client.ConfidentialClientApplication.InitiateLongRunningProcessInWebApi(System.Collections.Generic.IEnumerable<string> scopes, string userToken, ref string longRunningProcessSessionKey) -> Microsoft.Identity.Client.AcquireTokenOnBehalfOfParameterBuilder\nMicrosoft.Identity.Client.ConfidentialClientApplication.StopLongRunningProcessInWebApiAsync(string longRunningProcessSessionKey, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<bool>\n```\n\n----------------------------------------\n\nTITLE: Confidential Client Application Builder Factory Methods in C#\nDESCRIPTION: Defines static factory methods for creating ConfidentialClientApplicationBuilder instances. These methods are the entry points for configuring confidential client applications in MSAL.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-android/PublicAPI.Shipped.txt#2025-04-23_snippet_43\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Client.ConfidentialClientApplicationBuilder.Create(string clientId) -> Microsoft.Identity.Client.ConfidentialClientApplicationBuilder\nstatic Microsoft.Identity.Client.ConfidentialClientApplicationBuilder.CreateWithApplicationOptions(Microsoft.Identity.Client.ConfidentialClientApplicationOptions options) -> Microsoft.Identity.Client.ConfidentialClientApplicationBuilder\n```\n\n----------------------------------------\n\nTITLE: ConfidentialClientApplicationBuilder Configuration in C#\nDESCRIPTION: Builder class for configuring confidential client applications with various authentication options including certificates, client secrets, and custom claims.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-ios/PublicAPI.Shipped.txt#2025-04-23_snippet_20\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.ConfidentialClientApplicationBuilder.WithCertificate(System.Security.Cryptography.X509Certificates.X509Certificate2 certificate)\nMicrosoft.Client.ConfidentialClientApplicationBuilder.WithClientSecret(string clientSecret)\nMicrosoft.Identity.Client.ConfidentialClientApplicationBuilder.WithClientClaims(System.Security.Cryptography.X509Certificates.X509Certificate2 certificate, System.Collections.Generic.IDictionary<string, string> claimsToSign, bool mergeWithDefaultClaims)\n```\n\n----------------------------------------\n\nTITLE: Defining IConfidentialClientApplication Interface in C#\nDESCRIPTION: Declares the IConfidentialClientApplication interface with methods for acquiring tokens by authorization code and for client credentials flow.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/netstandard2.0/PublicAPI.Shipped.txt#2025-04-23_snippet_60\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.IConfidentialClientApplication\nMicrosoft.Identity.Client.IConfidentialClientApplication.AcquireTokenByAuthorizationCode(System.Collections.Generic.IEnumerable<string> scopes, string authorizationCode) -> Microsoft.Identity.Client.AcquireTokenByAuthorizationCodeParameterBuilder\nMicrosoft.Identity.Client.IConfidentialClientApplication.AcquireTokenForClient(System.Collections.Generic.IEnumerable<string> scopes) -> Microsoft.Identity.Client.AcquireTokenForClientParameterBuilder\n```\n\n----------------------------------------\n\nTITLE: ITokenCache Interface Methods in MSAL.NET\nDESCRIPTION: Interface for token cache management in MSAL.NET. It provides methods to set callbacks for cache access and modification events, allowing applications to serialize and persist the token cache.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-ios/PublicAPI.Shipped.txt#2025-04-23_snippet_28\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.ITokenCache\nMicrosoft.Identity.Client.ITokenCache.SetAfterAccess(Microsoft.Identity.Client.TokenCacheCallback afterAccess) -> void\nMicrosoft.Identity.Client.ITokenCache.SetAfterAccessAsync(System.Func<Microsoft.Identity.Client.TokenCacheNotificationArgs, System.Threading.Tasks.Task> afterAccess) -> void\nMicrosoft.Identity.Client.ITokenCache.SetBeforeAccess(Microsoft.Identity.Client.TokenCacheCallback beforeAccess) -> void\nMicrosoft.Identity.Client.ITokenCache.SetBeforeAccessAsync(System.Func<Microsoft.Identity.Client.TokenCacheNotificationArgs, System.Threading.Tasks.Task> beforeAccess) -> void\nMicrosoft.Identity.Client.ITokenCache.SetBeforeWrite(Microsoft.Identity.Client.TokenCacheCallback beforeWrite) -> void\nMicrosoft.Identity.Client.ITokenCache.SetBeforeWriteAsync(System.Func<Microsoft.Identity.Client.TokenCacheNotificationArgs, System.Threading.Tasks.Task> beforeWrite) -> void\n```\n\n----------------------------------------\n\nTITLE: Registering and Managing Token Caches in C#\nDESCRIPTION: Methods to register, unregister, and manage token caches with MsalCacheHelper. These methods enable automatic synchronization between the in-memory token cache and persistent storage.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client.Extensions.Msal/PublicApi/PublicAPI.Shipped.txt#2025-04-23_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.Extensions.Msal.MsalCacheHelper.RegisterCache(Microsoft.Identity.Client.ITokenCache tokenCache) -> void\nMicrosoft.Identity.Client.Extensions.Msal.MsalCacheHelper.UnregisterCache(Microsoft.Identity.Client.ITokenCache tokenCache) -> void\nMicrosoft.Client.Extensions.Msal.MsalCacheHelper.Clear() -> void\nMicrosoft.Identity.Client.Extensions.Msal.MsalCacheHelper.VerifyPersistence() -> void\n```\n\n----------------------------------------\n\nTITLE: ManagedIdentityApplication Class Definition and Methods in C#\nDESCRIPTION: Class for acquiring tokens using managed identity in Azure environments. Provides methods for token acquisition using managed identity authentication flow.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0/PublicAPI.Shipped.txt#2025-04-23_snippet_43\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.ManagedIdentityApplication\nMicrosoft.Identity.Client.ManagedIdentityApplication.AcquireTokenForManagedIdentity(string resource) -> Microsoft.Identity.Client.AcquireTokenForManagedIdentityParameterBuilder\n```\n\n----------------------------------------\n\nTITLE: Defining IPublicClientApplication Interface in C#\nDESCRIPTION: This snippet defines the IPublicClientApplication interface, which provides methods for acquiring tokens and managing authentication flows for public client applications in MSAL.NET.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0/PublicAPI.Shipped.txt#2025-04-23_snippet_39\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.IPublicClientApplication\nMicrosoft.Identity.Client.IPublicClientApplication.AcquireTokenByIntegratedWindowsAuth(System.Collections.Generic.IEnumerable<string> scopes) -> Microsoft.Identity.Client.AcquireTokenByIntegratedWindowsAuthParameterBuilder\nMicrosoft.Identity.Client.IPublicClientApplication.AcquireTokenByUsernamePassword(System.Collections.Generic.IEnumerable<string> scopes, string username, string password) -> Microsoft.Identity.Client.AcquireTokenByUsernamePasswordParameterBuilder\nMicrosoft.Identity.Client.IPublicClientApplication.AcquireTokenByUsernamePassword(System.Collections.Generic.IEnumerable<string> scopes, string username, System.Security.SecureString password) -> Microsoft.Identity.Client.AcquireTokenByUsernamePasswordParameterBuilder\nMicrosoft.Identity.Client.IPublicClientApplication.AcquireTokenInteractive(System.Collections.Generic.IEnumerable<string> scopes) -> Microsoft.Identity.Client.AcquireTokenInteractiveParameterBuilder\nMicrosoft.Identity.Client.IPublicClientApplication.AcquireTokenWithDeviceCode(System.Collections.Generic.IEnumerable<string> scopes, System.Func<Microsoft.Identity.Client.DeviceCodeResult, System.Threading.Tasks.Task> deviceCodeResultCallback) -> Microsoft.Identity.Client.AcquireTokenWithDeviceCodeParameterBuilder\nMicrosoft.Identity.Client.IPublicClientApplication.IsSystemWebViewAvailable.get -> bool\n```\n\n----------------------------------------\n\nTITLE: Configuring Broker Authentication with Options in MSAL.NET\nDESCRIPTION: Extension method that enables broker authentication with specific options. This method configures a PublicClientApplicationBuilder to work with an authentication broker using the provided BrokerOptions parameter.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client.Broker/PublicApi/PublicAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Client.Broker.BrokerExtension.WithBroker(this Microsoft.Identity.Client.PublicClientApplicationBuilder builder, Microsoft.Identity.Client.BrokerOptions brokerOptions) -> Microsoft.Identity.Client.PublicClientApplicationBuilder\n```\n\n----------------------------------------\n\nTITLE: ManagedIdentityApplicationBuilder Class Implementation in C#\nDESCRIPTION: Builder class for configuring and creating managed identity applications. Provides fluent methods for specifying client capabilities, telemetry, and other configuration options.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0/PublicAPI.Shipped.txt#2025-04-23_snippet_44\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.ManagedIdentityApplicationBuilder\nMicrosoft.Identity.Client.ManagedIdentityApplicationBuilder.Build() -> Microsoft.Identity.Client.IManagedIdentityApplication\nMicrosoft.Identity.Client.ManagedIdentityApplicationBuilder.WithClientCapabilities(System.Collections.Generic.IEnumerable<string> clientCapabilities) -> Microsoft.Identity.Client.ManagedIdentityApplicationBuilder\nMicrosoft.Identity.Client.ManagedIdentityApplicationBuilder.WithTelemetryClient(params Microsoft.IdentityModel.Abstractions.ITelemetryClient[] telemetryClients) -> Microsoft.Identity.Client.ManagedIdentityApplicationBuilder\n```\n\n----------------------------------------\n\nTITLE: Managed Identity Configuration in MSAL.NET\nDESCRIPTION: Methods for creating and configuring managed identity credentials including system-assigned and user-assigned identities. These methods allow applications to authenticate using Azure managed identities.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net472/PublicAPI.Shipped.txt#2025-04-23_snippet_17\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Client.AppConfig.ManagedIdentityId.SystemAssigned.get -> Microsoft.Identity.Client.AppConfig.ManagedIdentityId\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Client.AppConfig.ManagedIdentityId.WithUserAssignedClientId(string clientId) -> Microsoft.Identity.Client.AppConfig.ManagedIdentityId\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Client.AppConfig.ManagedIdentityId.WithUserAssignedObjectId(string objectId) -> Microsoft.Identity.Client.AppConfig.ManagedIdentityId\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Client.AppConfig.ManagedIdentityId.WithUserAssignedResourceId(string resourceId) -> Microsoft.Identity.Client.AppConfig.ManagedIdentityId\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Client.ManagedIdentityApplication.GetManagedIdentitySource() -> Microsoft.Identity.Client.ManagedIdentity.ManagedIdentitySource\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Client.ManagedIdentityApplicationBuilder.Create(Microsoft.Identity.Client.AppConfig.ManagedIdentityId managedIdentityId) -> Microsoft.Identity.Client.ManagedIdentityApplicationBuilder\n```\n\n----------------------------------------\n\nTITLE: Acquiring an Access Token Using MSAL.NET in C#\nDESCRIPTION: This code snippet shows how to acquire an access token for Microsoft Graph API using MSAL.NET. It demonstrates the async pattern and error handling.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/netstandard2.0/PublicAPI.Unshipped.txt#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nstring[] scopes = { \"user.read\" };\nAuthenticationResult result = await app.AcquireTokenInteractive(scopes).ExecuteAsync();\n```\n\n----------------------------------------\n\nTITLE: Configuring SSO Policy for Broker Authentication in MSAL.NET\nDESCRIPTION: Extension method that configures Single Sign-On (SSO) policy for broker authentication. This method sets up the appropriate SSO behavior when using an authentication broker.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client.Broker/PublicApi/PublicAPI.Shipped.txt#2025-04-23_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Client.Broker.BrokerExtension.WithSsoPolicy(this Microsoft.Identity.Client.PublicClientApplicationBuilder builder) -> Microsoft.Identity.Client.PublicClientApplicationBuilder\n```\n\n----------------------------------------\n\nTITLE: MSAL Error Constants Definition\nDESCRIPTION: Comprehensive collection of error code constants used throughout MSAL.NET for various error scenarios including authentication failures, configuration issues, and runtime errors.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/netstandard2.0/PublicAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nconst Microsoft.Identity.Client.ConfidentialClientApplication.AttemptRegionDiscovery = \"TryAutoDetect\" -> string\nconst Microsoft.Identity.Client.MsalError.AccessDenied = \"access_denied\" -> string\nconst Microsoft.Identity.Client.MsalError.AccessingWsMetadataExchangeFailed = \"accessing_ws_metadata_exchange_failed\" -> string\n/* ... continuing with other error constants ... */\n```\n\n----------------------------------------\n\nTITLE: Managed Identity Support in MSAL.NET\nDESCRIPTION: Methods for utilizing Azure Managed Identity authentication within MSAL.NET applications, allowing applications deployed to Azure to authenticate without storing credentials.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0/PublicAPI.Shipped.txt#2025-04-23_snippet_62\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Client.ManagedIdentityApplication.GetManagedIdentitySource() -> Microsoft.Identity.Client.ManagedIdentity.ManagedIdentitySource\nstatic Microsoft.Identity.Client.ManagedIdentityApplicationBuilder.Create(Microsoft.Identity.Client.AppConfig.ManagedIdentityId managedIdentityId) -> Microsoft.Identity.Client.ManagedIdentityApplicationBuilder\n```\n\n----------------------------------------\n\nTITLE: Managed Identity Operations in MSAL.NET\nDESCRIPTION: Methods for working with managed identities, including getting the managed identity source and creating a ManagedIdentityApplicationBuilder.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-android/PublicAPI.Shipped.txt#2025-04-23_snippet_48\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Client.ManagedIdentityApplication.GetManagedIdentitySource() -> Microsoft.Identity.Client.ManagedIdentity.ManagedIdentitySource\nstatic Microsoft.Identity.Client.ManagedIdentityApplicationBuilder.Create(Microsoft.Identity.Client.AppConfig.ManagedIdentityId managedIdentityId) -> Microsoft.Identity.Client.ManagedIdentityApplicationBuilder\n```\n\n----------------------------------------\n\nTITLE: Defining IAppConfig Interface for Application Configuration in C#\nDESCRIPTION: This interface defines properties for configuring a client application, including client ID, credentials, redirect URI, and various other settings related to logging, telemetry, and experimental features.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-android/PublicAPI.Shipped.txt#2025-04-23_snippet_27\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.IAppConfig\nMicrosoft.Identity.Client.IAppConfig.ClientCapabilities.get -> System.Collections.Generic.IEnumerable<string>\nMicrosoft.Identity.Client.IAppConfig.ClientCredentialCertificate.get -> System.Security.Cryptography.X509Certificates.X509Certificate2\nMicrosoft.Identity.Client.IAppConfig.ClientId.get -> string\nMicrosoft.Identity.Client.IAppConfig.ClientName.get -> string\nMicrosoft.Identity.Client.IAppConfig.ClientSecret.get -> string\nMicrosoft.Identity.Client.IAppConfig.ClientVersion.get -> string\nMicrosoft.Identity.Client.IAppConfig.EnablePiiLogging.get -> bool\nMicrosoft.Identity.Client.IAppConfig.ExperimentalFeaturesEnabled.get -> bool\nMicrosoft.Identity.Client.IAppConfig.ExtraQueryParameters.get -> System.Collections.Generic.IDictionary<string, string>\nMicrosoft.Identity.Client.IAppConfig.HttpClientFactory.get -> Microsoft.Identity.Client.IMsalHttpClientFactory\nMicrosoft.Identity.Client.IAppConfig.IsBrokerEnabled.get -> bool\nMicrosoft.Identity.Client.IAppConfig.IsDefaultPlatformLoggingEnabled.get -> bool\nMicrosoft.Identity.Client.IAppConfig.LegacyCacheCompatibilityEnabled.get -> bool\nMicrosoft.Identity.Client.IAppConfig.LoggingCallback.get -> Microsoft.Identity.Client.LogCallback\nMicrosoft.Identity.Client.IAppConfig.LogLevel.get -> Microsoft.Identity.Client.LogLevel\nMicrosoft.Identity.Client.IAppConfig.ParentActivityOrWindowFunc.get -> System.Func<object>\nMicrosoft.Identity.Client.IAppConfig.RedirectUri.get -> string\nMicrosoft.Identity.Client.IAppConfig.TelemetryConfig.get -> Microsoft.Identity.Client.ITelemetryConfig\nMicrosoft.Identity.Client.IAppConfig.TenantId.get -> string\n```\n\n----------------------------------------\n\nTITLE: Defining AbstractAcquireTokenParameterBuilder Class in C# for MSAL.NET\nDESCRIPTION: This snippet defines an abstract generic class AbstractAcquireTokenParameterBuilder<T> with various methods for configuring token acquisition parameters. It includes methods for setting authority, claims, scopes, and other options.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/netstandard2.0/PublicAPI.Shipped.txt#2025-04-23_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.AbstractAcquireTokenParameterBuilder<T>\nMicrosoft.Identity.Client.AbstractAcquireTokenParameterBuilder<T>.AbstractAcquireTokenParameterBuilder() -> void\nMicrosoft.Identity.Client.AbstractAcquireTokenParameterBuilder<T>.WithAdfsAuthority(string authorityUri, bool validateAuthority = true) -> T\nMicrosoft.Identity.Client.AbstractAcquireTokenParameterBuilder<T>.WithAuthority(Microsoft.Identity.Client.AadAuthorityAudience authorityAudience, bool validateAuthority = true) -> T\n// ... (additional methods)\n```\n\n----------------------------------------\n\nTITLE: Creating WWW-Authenticate Parameters in MSAL.NET (C#)\nDESCRIPTION: Static methods for creating and manipulating WWW-Authenticate parameters from HTTP responses, resource URIs, and header values. These methods help handle authentication challenges in OAuth 2.0 flows.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/netstandard2.0/PublicAPI.Shipped.txt#2025-04-23_snippet_89\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Client.WwwAuthenticateParameters.CreateFromResourceResponseAsync(string resourceUri, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Microsoft.Identity.Client.WwwAuthenticateParameters>\nstatic Microsoft.Identity.Client.WwwAuthenticateParameters.CreateFromResourceResponseAsync(System.Net.Http.HttpClient httpClient, string resourceUri, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Microsoft.Identity.Client.WwwAuthenticateParameters>\nstatic Microsoft.Identity.Client.WwwAuthenticateParameters.CreateFromResponseHeaders(System.Net.Http.Headers.HttpResponseHeaders httpResponseHeaders, string scheme = \"Bearer\") -> Microsoft.Identity.Client.WwwAuthenticateParameters\nstatic Microsoft.Identity.Client.WwwAuthenticateParameters.CreateFromWwwAuthenticateHeaderValue(string wwwAuthenticateValue) -> Microsoft.Identity.Client.WwwAuthenticateParameters\nstatic Microsoft.Identity.Client.WwwAuthenticateParameters.GetClaimChallengeFromResponseHeaders(System.Net.Http.Headers.HttpResponseHeaders httpResponseHeaders, string scheme = \"Bearer\") -> string\n```\n\n----------------------------------------\n\nTITLE: ConfidentialClientApplicationBuilder Class Method Signatures in C#\nDESCRIPTION: Provides a fluent builder pattern for creating and configuring confidential client applications. Includes methods for specifying client credentials, certificates, custom claims, and configuration options.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-android/PublicAPI.Shipped.txt#2025-04-23_snippet_21\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.ConfidentialClientApplicationBuilder.Build() -> Microsoft.Identity.Client.IConfidentialClientApplication\nMicrosoft.Identity.Client.ConfidentialClientApplicationBuilder.WithAzureRegion(string azureRegion = \"TryAutoDetect\") -> Microsoft.Identity.Client.ConfidentialClientApplicationBuilder\nMicrosoft.Identity.Client.ConfidentialClientApplicationBuilder.WithCacheSynchronization(bool enableCacheSynchronization) -> Microsoft.Identity.Client.ConfidentialClientApplicationBuilder\nMicrosoft.Identity.Client.ConfidentialClientApplicationBuilder.WithCertificate(System.Security.Cryptography.X509Certificates.X509Certificate2 certificate) -> Microsoft.Identity.Client.ConfidentialClientApplicationBuilder\nMicrosoft.Identity.Client.ConfidentialClientApplicationBuilder.WithCertificate(System.Security.Cryptography.X509Certificates.X509Certificate2 certificate, bool sendX5C) -> Microsoft.Identity.Client.ConfidentialClientApplicationBuilder\nMicrosoft.Identity.Client.ConfidentialClientApplicationBuilder.WithClientAssertion(string signedClientAssertion) -> Microsoft.Identity.Client.ConfidentialClientApplicationBuilder\nMicrosoft.Identity.Client.ConfidentialClientApplicationBuilder.WithClientAssertion(System.Func<Microsoft.Identity.Client.AssertionRequestOptions, System.Threading.Tasks.Task<string>> clientAssertionAsyncDelegate) -> Microsoft.Identity.Client.ConfidentialClientApplicationBuilder\nMicrosoft.Identity.Client.ConfidentialClientApplicationBuilder.WithClientAssertion(System.Func<string> clientAssertionDelegate) -> Microsoft.Identity.Client.ConfidentialClientApplicationBuilder\nMicrosoft.Identity.Client.ConfidentialClientApplicationBuilder.WithClientAssertion(System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task<string>> clientAssertionAsyncDelegate) -> Microsoft.Identity.Client.ConfidentialClientApplicationBuilder\nMicrosoft.Identity.Client.ConfidentialClientApplicationBuilder.WithClientClaims(System.Security.Cryptography.X509Certificates.X509Certificate2 certificate, System.Collections.Generic.IDictionary<string, string> claimsToSign, bool mergeWithDefaultClaims = true, bool sendX5C = false) -> Microsoft.Identity.Client.ConfidentialClientApplicationBuilder\nMicrosoft.Identity.Client.ConfidentialClientApplicationBuilder.WithClientClaims(System.Security.Cryptography.X509Certificates.X509Certificate2 certificate, System.Collections.Generic.IDictionary<string, string> claimsToSign, bool mergeWithDefaultClaims) -> Microsoft.Identity.Client.ConfidentialClientApplicationBuilder\nMicrosoft.Identity.Client.ConfidentialClientApplicationBuilder.WithClientSecret(string clientSecret) -> Microsoft.Identity.Client.ConfidentialClientApplicationBuilder\nMicrosoft.Identity.Client.ConfidentialClientApplicationBuilder.WithGenericAuthority(string authorityUri) -> Microsoft.Identity.Client.ConfidentialClientApplicationBuilder\nMicrosoft.Identity.Client.ConfidentialClientApplicationBuilder.WithOidcAuthority(string authorityUri) -> Microsoft.Identity.Client.ConfidentialClientApplicationBuilder\nMicrosoft.Identity.Client.ConfidentialClientApplicationBuilder.WithTelemetryClient(params Microsoft.IdentityModel.Abstractions.ITelemetryClient[] telemetryClients) -> Microsoft.Identity.Client.ConfidentialClientApplicationBuilder\n```\n\n----------------------------------------\n\nTITLE: Defining IAccount Interface in C#\nDESCRIPTION: Declares the IAccount interface with properties for Environment, HomeAccountId, and Username.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/netstandard2.0/PublicAPI.Shipped.txt#2025-04-23_snippet_55\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.IAccount\nMicrosoft.Identity.Client.IAccount.Environment.get -> string\nMicrosoft.Identity.Client.IAccount.HomeAccountId.get -> Microsoft.Identity.Client.AccountId\nMicrosoft.Identity.Client.IAccount.Username.get -> string\n```\n\n----------------------------------------\n\nTITLE: Defining IClientApplicationBase Interface for Client Applications in C#\nDESCRIPTION: This interface defines the base functionality for client applications, including methods for token acquisition, account management, and access to application configuration and token cache.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-android/PublicAPI.Shipped.txt#2025-04-23_snippet_28\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.IClientApplicationBase\nMicrosoft.Identity.Client.IClientApplicationBase.AcquireTokenSilent(System.Collections.Generic.IEnumerable<string> scopes, Microsoft.Identity.Client.IAccount account) -> Microsoft.Identity.Client.AcquireTokenSilentParameterBuilder\nMicrosoft.Identity.Client.IClientApplicationBase.AcquireTokenSilent(System.Collections.Generic.IEnumerable<string> scopes, string loginHint) -> Microsoft.Identity.Client.AcquireTokenSilentParameterBuilder\nMicrosoft.Identity.Client.IClientApplicationBase.AppConfig.get -> Microsoft.Identity.Client.IAppConfig\nMicrosoft.Identity.Client.IClientApplicationBase.Authority.get -> string\nMicrosoft.Identity.Client.IClientApplicationBase.GetAccountAsync(string identifier) -> System.Threading.Tasks.Task<Microsoft.Identity.Client.IAccount>\nMicrosoft.Identity.Client.IClientApplicationBase.GetAccountsAsync() -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.Identity.Client.IAccount>>\nMicrosoft.Identity.Client.IClientApplicationBase.GetAccountsAsync(string userFlow) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.Identity.Client.IAccount>>\nMicrosoft.Identity.Client.IClientApplicationBase.RemoveAsync(Microsoft.Identity.Client.IAccount account) -> System.Threading.Tasks.Task\nMicrosoft.Identity.Client.IClientApplicationBase.UserTokenCache.get -> Microsoft.Identity.Client.ITokenCache\n```\n\n----------------------------------------\n\nTITLE: Defining ConfidentialClientApplicationBuilder Methods in C#\nDESCRIPTION: Declares methods for the ConfidentialClientApplicationBuilder class, which is used to configure and create instances of ConfidentialClientApplication. These methods allow setting various options like certificates, client secrets, and authority URIs.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/netstandard2.0/PublicAPI.Shipped.txt#2025-04-23_snippet_44\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.ConfidentialClientApplicationBuilder\nMicrosoft.Identity.Client.ConfidentialClientApplicationBuilder.Build() -> Microsoft.Identity.Client.IConfidentialClientApplication\nMicrosoft.Identity.Client.ConfidentialClientApplicationBuilder.WithAzureRegion(string azureRegion = \"TryAutoDetect\") -> Microsoft.Identity.Client.ConfidentialClientApplicationBuilder\nMicrosoft.Identity.Client.ConfidentialClientApplicationBuilder.WithCacheSynchronization(bool enableCacheSynchronization) -> Microsoft.Identity.Client.ConfidentialClientApplicationBuilder\nMicrosoft.Identity.Client.ConfidentialClientApplicationBuilder.WithCertificate(System.Security.Cryptography.X509Certificates.X509Certificate2 certificate) -> Microsoft.Identity.Client.ConfidentialClientApplicationBuilder\nMicrosoft.Identity.Client.ConfidentialClientApplicationBuilder.WithCertificate(System.Security.Cryptography.X509Certificates.X509Certificate2 certificate, bool sendX5C) -> Microsoft.Identity.Client.ConfidentialClientApplicationBuilder\nMicrosoft.Identity.Client.ConfidentialClientApplicationBuilder.WithClientAssertion(string signedClientAssertion) -> Microsoft.Identity.Client.ConfidentialClientApplicationBuilder\nMicrosoft.Identity.Client.ConfidentialClientApplicationBuilder.WithClientAssertion(System.Func<Microsoft.Identity.Client.AssertionRequestOptions, System.Threading.Tasks.Task<string>> clientAssertionAsyncDelegate) -> Microsoft.Identity.Client.ConfidentialClientApplicationBuilder\nMicrosoft.Identity.Client.ConfidentialClientApplicationBuilder.WithClientAssertion(System.Func<string> clientAssertionDelegate) -> Microsoft.Identity.Client.ConfidentialClientApplicationBuilder\nMicrosoft.Identity.Client.ConfidentialClientApplicationBuilder.WithClientAssertion(System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task<string>> clientAssertionAsyncDelegate) -> Microsoft.Identity.Client.ConfidentialClientApplicationBuilder\nMicrosoft.Identity.Client.ConfidentialClientApplicationBuilder.WithClientClaims(System.Security.Cryptography.X509Certificates.X509Certificate2 certificate, System.Collections.Generic.IDictionary<string, string> claimsToSign, bool mergeWithDefaultClaims = true, bool sendX5C = false) -> Microsoft.Identity.Client.ConfidentialClientApplicationBuilder\nMicrosoft.Identity.Client.ConfidentialClientApplicationBuilder.WithClientClaims(System.Security.Cryptography.X509Certificates.X509Certificate2 certificate, System.Collections.Generic.IDictionary<string, string> claimsToSign, bool mergeWithDefaultClaims) -> Microsoft.Identity.Client.ConfidentialClientApplicationBuilder\nMicrosoft.Identity.Client.ConfidentialClientApplicationBuilder.WithClientSecret(string clientSecret) -> Microsoft.Identity.Client.ConfidentialClientApplicationBuilder\nMicrosoft.Identity.Client.ConfidentialClientApplicationBuilder.WithGenericAuthority(string authorityUri) -> Microsoft.Identity.Client.ConfidentialClientApplicationBuilder\nMicrosoft.Identity.Client.ConfidentialClientApplicationBuilder.WithOidcAuthority(string authorityUri) -> Microsoft.Identity.Client.ConfidentialClientApplicationBuilder\nMicrosoft.Identity.Client.ConfidentialClientApplicationBuilder.WithTelemetryClient(params Microsoft.IdentityModel.Abstractions.ITelemetryClient[] telemetryClients) -> Microsoft.Identity.Client.ConfidentialClientApplicationBuilder\n```\n\n----------------------------------------\n\nTITLE: Defining ClientApplicationBase Methods in C#\nDESCRIPTION: Declares methods for the ClientApplicationBase class, including token acquisition, account management, and property accessors. These methods provide core functionality for MSAL client applications.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/netstandard2.0/PublicAPI.Shipped.txt#2025-04-23_snippet_42\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.ClientApplicationBase.AcquireTokenSilent(System.Collections.Generic.IEnumerable<string> scopes, string loginHint) -> Microsoft.Identity.Client.AcquireTokenSilentParameterBuilder\nMicrosoft.Identity.Client.ClientApplicationBase.AppConfig.get -> Microsoft.Identity.Client.IAppConfig\nMicrosoft.Identity.Client.ClientApplicationBase.Authority.get -> string\nMicrosoft.Identity.Client.ClientApplicationBase.GetAccountAsync(string accountId) -> System.Threading.Tasks.Task<Microsoft.Identity.Client.IAccount>\nMicrosoft.Identity.Client.ClientApplicationBase.GetAccountAsync(string accountId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Microsoft.Identity.Client.IAccount>\nMicrosoft.Identity.Client.ClientApplicationBase.GetAccountsAsync() -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.Identity.Client.IAccount>>\nMicrosoft.Identity.Client.ClientApplicationBase.GetAccountsAsync(string userFlow) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.Identity.Client.IAccount>>\nMicrosoft.Identity.Client.ClientApplicationBase.GetAccountsAsync(string userFlow, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.Identity.Client.IAccount>>\nMicrosoft.Identity.Client.ClientApplicationBase.GetAccountsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.Identity.Client.IAccount>>\nMicrosoft.Identity.Client.ClientApplicationBase.RemoveAsync(Microsoft.Identity.Client.IAccount account) -> System.Threading.Tasks.Task\nMicrosoft.Identity.Client.ClientApplicationBase.RemoveAsync(Microsoft.Identity.Client.IAccount account, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task\nMicrosoft.Identity.Client.ClientApplicationBase.UserTokenCache.get -> Microsoft.Identity.Client.ITokenCache\n```\n\n----------------------------------------\n\nTITLE: AbstractConfidentialClientAcquireTokenParameterBuilder Class Declaration in C#\nDESCRIPTION: Declaration of the AbstractConfidentialClientAcquireTokenParameterBuilder generic class and its method for configuring Proof of Possession.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/netstandard2.0/PublicAPI.Shipped.txt#2025-04-23_snippet_12\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.AbstractConfidentialClientAcquireTokenParameterBuilder<T>\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.AbstractConfidentialClientAcquireTokenParameterBuilder<T>.WithProofOfPossession(Microsoft.Identity.Client.AppConfig.PoPAuthenticationConfiguration popAuthenticationConfiguration) -> T\n```\n\n----------------------------------------\n\nTITLE: Confidential Client Authentication Extensions in MSAL.NET\nDESCRIPTION: Extension methods for configuring confidential client authentication including proof of possession, MTLS support, and certificate-based authentication for resource providers.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-ios/PublicAPI.Shipped.txt#2025-04-23_snippet_85\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.AbstractConfidentialClientAcquireTokenParameterBuilder<T>.WithSignedHttpRequestProofOfPossession(Microsoft.Identity.Client.AppConfig.PoPAuthenticationConfiguration popAuthenticationConfiguration) -> T\nMicrosoft.Identity.Client.AcquireTokenForClientParameterBuilder.WithMtlsProofOfPossession() -> Microsoft.Identity.Client.AcquireTokenForClientParameterBuilder\nMicrosoft.Identity.Client.AcquireTokenForClientParameterBuilder.WithFmiPath(string pathSuffix) -> Microsoft.Identity.Client.AcquireTokenForClientParameterBuilder\nstatic Microsoft.Identity.Client.RP.ConfidentialClientApplicationBuilderForResourceProviders.WithCertificate(this Microsoft.Identity.Client.ConfidentialClientApplicationBuilder builder, System.Security.Cryptography.X509Certificates.X509Certificate2 certificate, bool sendX5C, bool associateTokensWithCertificateSerialNumber) -> Microsoft.Identity.Client.ConfidentialClientApplicationBuilder\nstatic Microsoft.Identity.Client.RP.AcquireTokenForClientParameterBuilderForResourceProviders.WithAccessTokenSha256ToRefresh(this Microsoft.Identity.Client.AcquireTokenForClientParameterBuilder builder, string hash) -> Microsoft.Identity.Client.AcquireTokenForClientParameterBuilder\n```\n\n----------------------------------------\n\nTITLE: Managed Identity Support in MSAL.NET\nDESCRIPTION: API signature for the ManagedIdentityId class which provides support for Azure Managed Identities, allowing applications running in Azure to authenticate without storing credentials.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-android/PublicAPI.Shipped.txt#2025-04-23_snippet_17\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.AppConfig.ManagedIdentityId\n```\n\n----------------------------------------\n\nTITLE: Certificate Configuration for Confidential Client\nDESCRIPTION: Setting up a confidential client application to send the certificate (as x5c) once during application building rather than on every token acquisition request for better performance.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/CHANGELOG.md#2025-04-23_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nConfidentialClientApplicationBuilder\n    .Create(clientId)\n    .WithCertificate(certificate, sendX5C: true)\n    .Build();\n```\n\n----------------------------------------\n\nTITLE: PublicClientApplication Authentication Methods\nDESCRIPTION: Defines authentication methods for public client applications including interactive, device code, and integrated Windows auth\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-ios/PublicAPI.Shipped.txt#2025-04-23_snippet_36\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.PublicClientApplication.AcquireTokenInteractive(System.Collections.Generic.IEnumerable<string> scopes)\nMicrosoft.Identity.Client.PublicClientApplication.AcquireTokenByIntegratedWindowsAuth(System.Collections.Generic.IEnumerable<string> scopes)\nMicrosoft.Identity.Client.PublicClientApplication.AcquireTokenWithDeviceCode(System.Collections.Generic.IEnumerable<string> scopes, System.Func<Microsoft.Identity.Client.DeviceCodeResult, System.Threading.Tasks.Task> deviceCodeResultCallback)\nMicrosoft.Identity.Client.PublicClientApplication.AcquireTokenByUsernamePassword(System.Collections.Generic.IEnumerable<string> scopes, string username, string password)\n```\n\n----------------------------------------\n\nTITLE: Managed Identity Token Acquisition in MSAL.NET\nDESCRIPTION: MSAL.NET supports Azure Managed Identity authentication through the AcquireTokenForManagedIdentityParameterBuilder class. This enables applications running in Azure to authenticate using the managed identity assigned to the Azure resource.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-android/PublicAPI.Shipped.txt#2025-04-23_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\n// AcquireTokenForManagedIdentityParameterBuilder methods\nWithClaims(string claims)\nWithForceRefresh(bool forceRefresh)\n```\n\n----------------------------------------\n\nTITLE: Defining IConfidentialClientApplication Interface in C#\nDESCRIPTION: This snippet defines the IConfidentialClientApplication interface, which provides methods for acquiring tokens and managing token caches for confidential client applications in MSAL.NET.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0/PublicAPI.Shipped.txt#2025-04-23_snippet_38\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.IConfidentialClientApplication.AcquireTokenOnBehalfOf(System.Collections.Generic.IEnumerable<string> scopes, Microsoft.Identity.Client.UserAssertion userAssertion) -> Microsoft.Identity.Client.AcquireTokenOnBehalfOfParameterBuilder\nMicrosoft.Identity.Client.IConfidentialClientApplication.AcquireTokenSilent(System.Collections.Generic.IEnumerable<string> scopes, string loginHint) -> Microsoft.Identity.Client.AcquireTokenSilentParameterBuilder\nMicrosoft.Identity.Client.IConfidentialClientApplication.AppTokenCache.get -> Microsoft.Identity.Client.ITokenCache\nMicrosoft.Identity.Client.IConfidentialClientApplication.GetAccountsAsync() -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.Identity.Client.IAccount>>\nMicrosoft.Identity.Client.IConfidentialClientApplication.GetAuthorizationRequestUrl(System.Collections.Generic.IEnumerable<string> scopes) -> Microsoft.Identity.Client.GetAuthorizationRequestUrlParameterBuilder\n```\n\n----------------------------------------\n\nTITLE: Installing MSAL.NET via NuGet in C#\nDESCRIPTION: This snippet demonstrates how to install the Microsoft.Identity.Client NuGet package, which is the core package for MSAL.NET. It uses the Package Manager Console in Visual Studio to install the latest stable version of the library.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/tests/Microsoft.Identity.Test.LabInfrastructure/data.txt#2025-04-23_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nInstall-Package Microsoft.Identity.Client\n```\n\n----------------------------------------\n\nTITLE: Interface Definition - IClientApplicationBase\nDESCRIPTION: Base interface for client applications defining core authentication methods and properties.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-ios/PublicAPI.Shipped.txt#2025-04-23_snippet_22\n\nLANGUAGE: C#\nCODE:\n```\npublic interface IClientApplicationBase\n{\n    IAppConfig AppConfig { get; }\n    string Authority { get; }\n    Task<IAccount> GetAccountAsync(string identifier);\n    Task<IEnumerable<IAccount>> GetAccountsAsync();\n    Task<IEnumerable<IAccount>> GetAccountsAsync(string userFlow);\n    Task RemoveAsync(IAccount account);\n    AcquireTokenSilentParameterBuilder AcquireTokenSilent(IEnumerable<string> scopes, IAccount account);\n    AcquireTokenSilentParameterBuilder AcquireTokenSilent(IEnumerable<string> scopes, string loginHint);\n}\n```\n\n----------------------------------------\n\nTITLE: Authentication Interface Definitions in C#\nDESCRIPTION: Core interface definitions for Microsoft Authentication Library (MSAL) for .NET, including account management, token acquisition, and client application configuration interfaces.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net462/PublicAPI.Shipped.txt#2025-04-23_snippet_22\n\nLANGUAGE: C#\nCODE:\n```\npublic interface IAccount\n{\n    string Environment { get; }\n    AccountId HomeAccountId { get; }\n    string Username { get; }\n}\n\npublic interface IClientApplicationBase\n{\n    IAppConfig AppConfig { get; }\n    string Authority { get; }\n    Task<IAccount> GetAccountAsync(string identifier);\n    Task<IEnumerable<IAccount>> GetAccountsAsync();\n    Task<IEnumerable<IAccount>> GetAccountsAsync(string userFlow);\n    Task RemoveAsync(IAccount account);\n    ITokenCache UserTokenCache { get; }\n}\n```\n\n----------------------------------------\n\nTITLE: Proof of Possession Authentication Configuration in MSAL.NET\nDESCRIPTION: API signatures for the PoPAuthenticationConfiguration class which is used to configure Proof of Possession token authentication, including HTTP request details and cryptographic providers.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-android/PublicAPI.Shipped.txt#2025-04-23_snippet_12\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.AppConfig.PoPAuthenticationConfiguration\nMicrosoft.Identity.Client.AppConfig.PoPAuthenticationConfiguration.HttpHost.get -> string\nMicrosoft.Identity.Client.AppConfig.PoPAuthenticationConfiguration.HttpHost.set -> void\nMicrosoft.Identity.Client.AppConfig.PoPAuthenticationConfiguration.HttpMethod.get -> System.Net.Http.HttpMethod\nMicrosoft.Identity.Client.AppConfig.PoPAuthenticationConfiguration.HttpMethod.set -> void\nMicrosoft.Identity.Client.AppConfig.PoPAuthenticationConfiguration.HttpPath.get -> string\nMicrosoft.Identity.Client.AppConfig.PoPAuthenticationConfiguration.HttpPath.set -> void\nMicrosoft.Identity.Client.AppConfig.PoPAuthenticationConfiguration.Nonce.get -> string\nMicrosoft.Identity.Client.AppConfig.PoPAuthenticationConfiguration.Nonce.set -> void\nMicrosoft.Identity.Client.AppConfig.PoPAuthenticationConfiguration.PoPAuthenticationConfiguration() -> void\nMicrosoft.Identity.Client.AppConfig.PoPAuthenticationConfiguration.PoPAuthenticationConfiguration(System.Net.Http.HttpRequestMessage httpRequestMessage) -> void\nMicrosoft.Identity.Client.AppConfig.PoPAuthenticationConfiguration.PoPAuthenticationConfiguration(System.Uri requestUri) -> void\nMicrosoft.Identity.Client.AppConfig.PoPAuthenticationConfiguration.PopCryptoProvider.get -> Microsoft.Identity.Client.AuthScheme.PoP.IPoPCryptoProvider\nMicrosoft.Identity.Client.AppConfig.PoPAuthenticationConfiguration.PopCryptoProvider.set -> void\nMicrosoft.Identity.Client.AppConfig.PoPAuthenticationConfiguration.SignHttpRequest.get -> bool\nMicrosoft.Identity.Client.AppConfig.PoPAuthenticationConfiguration.SignHttpRequest.set -> void\n```\n\n----------------------------------------\n\nTITLE: Microsoft Identity Client Token Acquisition Parameter Builders\nDESCRIPTION: Defines builder classes for configuring different token acquisition flows including interactive, on-behalf-of, silent, and device code authentication.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-ios/PublicAPI.Shipped.txt#2025-04-23_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.AcquireTokenInteractiveParameterBuilder\nMicrosoft.Identity.Client.AcquireTokenOnBehalfOfParameterBuilder\nMicrosoft.Identity.Client.AcquireTokenSilentParameterBuilder\nMicrosoft.Identity.Client.AcquireTokenWithDeviceCodeParameterBuilder\n```\n\n----------------------------------------\n\nTITLE: Extending Token Request Behavior with OnBeforeTokenRequest in C#\nDESCRIPTION: Extension method that allows adding a callback function to be executed before a token request is made. This enables customizing or inspecting token requests right before they are sent to the authentication server.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-ios/PublicAPI.Shipped.txt#2025-04-23_snippet_37\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Client.Extensibility.AbstractConfidentialClientAcquireTokenParameterBuilderExtension.OnBeforeTokenRequest<T>(this Microsoft.Identity.Client.AbstractAcquireTokenParameterBuilder<T> builder, System.Func<Microsoft.Identity.Client.Extensibility.OnBeforeTokenRequestData, System.Threading.Tasks.Task> onBeforeTokenRequestHandler) -> Microsoft.Identity.Client.AbstractAcquireTokenParameterBuilder<T>\n```\n\n----------------------------------------\n\nTITLE: Initializing PublicClientApplication in C# for MSAL.NET\nDESCRIPTION: This code snippet demonstrates how to create a PublicClientApplication instance, which is the main entry point for MSAL.NET in desktop or mobile applications.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/netstandard2.0/PublicAPI.Unshipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nIPublicClientApplication app = PublicClientApplicationBuilder.Create(clientId)\n    .WithAuthority(AzureCloudInstance.AzurePublic, tenantId)\n    .WithRedirectUri(\"http://localhost\")\n    .Build();\n```\n\n----------------------------------------\n\nTITLE: PublicClientApplicationBuilder in MSAL.NET\nDESCRIPTION: Defines the builder pattern for creating PublicClientApplication instances. Provides the Build method to finalize the configuration and create the application instance.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/netstandard2.0/PublicAPI.Shipped.txt#2025-04-23_snippet_76\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.PublicClientApplicationBuilder\nMicrosoft.Identity.Client.PublicClientApplicationBuilder.Build() -> Microsoft.Identity.Client.IPublicClientApplication\n```\n\n----------------------------------------\n\nTITLE: Defining ConfidentialClientApplicationOptions Properties in C#\nDESCRIPTION: Declares properties for ConfidentialClientApplicationOptions class, which is used to configure options for confidential client applications. It includes properties for setting Azure region, client secret, and cache synchronization.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0/PublicAPI.Shipped.txt#2025-04-23_snippet_32\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.ConfidentialClientApplicationOptions.AzureRegion.get -> string\nMicrosoft.Identity.Client.ConfidentialClientApplicationOptions.AzureRegion.set -> void\nMicrosoft.Identity.Client.ConfidentialClientApplicationOptions.ClientSecret.get -> string\nMicrosoft.Identity.Client.ConfidentialClientApplicationOptions.ClientSecret.set -> void\nMicrosoft.Identity.Client.ConfidentialClientApplicationOptions.ConfidentialClientApplicationOptions() -> void\nMicrosoft.Identity.Client.ConfidentialClientApplicationOptions.EnableCacheSynchronization.get -> bool\nMicrosoft.Identity.Client.ConfidentialClientApplicationOptions.EnableCacheSynchronization.set -> void\n```\n\n----------------------------------------\n\nTITLE: IManagedIdentityApplication Interface in MSAL.NET\nDESCRIPTION: Interface for acquiring tokens using managed identity in Azure environments. Managed identities eliminate the need for developers to manage credentials by providing applications with an automatically managed identity in Azure AD.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-ios/PublicAPI.Shipped.txt#2025-04-23_snippet_26\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.IManagedIdentityApplication\nMicrosoft.Identity.Client.IManagedIdentityApplication.AcquireTokenForManagedIdentity(string resource) -> Microsoft.Identity.Client.AcquireTokenForManagedIdentityParameterBuilder\n```\n\n----------------------------------------\n\nTITLE: Authorization Code Flow Parameter Builder\nDESCRIPTION: Methods for configuring token acquisition using the OAuth 2.0 authorization code flow. Includes methods for configuring PKCE code verifier, CCS routing hints, X.509 certificate sending, and SPA authorization code handling.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0/PublicAPI.Shipped.txt#2025-04-23_snippet_12\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.AcquireTokenByAuthorizationCodeParameterBuilder\nMicrosoft.Identity.Client.AcquireTokenByAuthorizationCodeParameterBuilder.WithCcsRoutingHint(string userName) -> Microsoft.Identity.Client.AcquireTokenByAuthorizationCodeParameterBuilder\nMicrosoft.Identity.Client.AcquireTokenByAuthorizationCodeParameterBuilder.WithCcsRoutingHint(string userObjectIdentifier, string tenantIdentifier) -> Microsoft.Identity.Client.AcquireTokenByAuthorizationCodeParameterBuilder\nMicrosoft.Identity.Client.AcquireTokenByAuthorizationCodeParameterBuilder.WithPkceCodeVerifier(string pkceCodeVerifier) -> Microsoft.Identity.Client.AcquireTokenByAuthorizationCodeParameterBuilder\nMicrosoft.Identity.Client.AcquireTokenByAuthorizationCodeParameterBuilder.WithSendX5C(bool withSendX5C) -> Microsoft.Identity.Client.AcquireTokenByAuthorizationCodeParameterBuilder\nMicrosoft.Identity.Client.AcquireTokenByAuthorizationCodeParameterBuilder.WithSpaAuthorizationCode(bool requestSpaAuthorizationCode = true) -> Microsoft.Identity.Client.AcquireTokenByAuthorizationCodeParameterBuilder\n```\n\n----------------------------------------\n\nTITLE: ILongRunningWebApi Interface in MSAL.NET\nDESCRIPTION: Interface for handling token acquisition in long-running processes in web APIs. It provides methods to initiate and acquire tokens for long-running operations where the user may not be present for the duration of the process.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-ios/PublicAPI.Shipped.txt#2025-04-23_snippet_27\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.ILongRunningWebApi\nMicrosoft.Identity.Client.ILongRunningWebApi.AcquireTokenInLongRunningProcess(System.Collections.Generic.IEnumerable<string> scopes, string longRunningProcessSessionKey) -> Microsoft.Identity.Client.AcquireTokenOnBehalfOfParameterBuilder\nMicrosoft.Identity.Client.ILongRunningWebApi.InitiateLongRunningProcessInWebApi(System.Collections.Generic.IEnumerable<string> scopes, string userToken, ref string longRunningProcessSessionKey) -> Microsoft.Identity.Client.AcquireTokenOnBehalfOfParameterBuilder\n```\n\n----------------------------------------\n\nTITLE: ClientApplicationBase Class Methods in C#\nDESCRIPTION: Base class for client applications with methods for token acquisition, account management and configuration access. Includes silent token acquisition and account operations.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-ios/PublicAPI.Shipped.txt#2025-04-23_snippet_18\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.ClientApplicationBase.AcquireTokenSilent(System.Collections.Generic.IEnumerable<string> scopes, Microsoft.Identity.Client.IAccount account)\nMicrosoft.Identity.Client.ClientApplicationBase.GetAccountAsync(string accountId)\nMicrosoft.Identity.Client.ClientApplicationBase.GetAccountsAsync()\nMicrosoft.Identity.Client.ClientApplicationBase.RemoveAsync(Microsoft.Identity.Client.IAccount account)\n```\n\n----------------------------------------\n\nTITLE: Defining ITokenCache Interface in C#\nDESCRIPTION: This snippet defines the ITokenCache interface, which represents a token cache in MSAL.NET. It includes methods for setting callbacks to be executed before and after cache access and write operations.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/netstandard2.0/PublicAPI.Shipped.txt#2025-04-23_snippet_63\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.ITokenCache\nMicrosoft.Identity.Client.ITokenCache.SetAfterAccess(Microsoft.Identity.Client.TokenCacheCallback afterAccess) -> void\nMicrosoft.Identity.Client.ITokenCache.SetAfterAccessAsync(System.Func<Microsoft.Identity.Client.TokenCacheNotificationArgs, System.Threading.Tasks.Task> afterAccess) -> void\nMicrosoft.Identity.Client.ITokenCache.SetBeforeAccess(Microsoft.Identity.Client.TokenCacheCallback beforeAccess) -> void\nMicrosoft.Identity.Client.ITokenCache.SetBeforeAccessAsync(System.Func<Microsoft.Identity.Client.TokenCacheNotificationArgs, System.Threading.Tasks.Task> beforeAccess) -> void\nMicrosoft.Identity.Client.ITokenCache.SetBeforeWrite(Microsoft.Identity.Client.TokenCacheCallback beforeWrite) -> void\nMicrosoft.Identity.Client.ITokenCache.SetBeforeWriteAsync(System.Func<Microsoft.Identity.Client.TokenCacheNotificationArgs, System.Threading.Tasks.Task> beforeWrite) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining ConfidentialClientApplicationBuilder Methods in C#\nDESCRIPTION: Declares methods for ConfidentialClientApplicationBuilder class, which is used to configure and create instances of ConfidentialClientApplication. It includes methods for setting various authentication options, client credentials, and other configuration parameters.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0/PublicAPI.Shipped.txt#2025-04-23_snippet_31\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.ConfidentialClientApplicationBuilder.Build() -> Microsoft.Identity.Client.IConfidentialClientApplication\nMicrosoft.Identity.Client.ConfidentialClientApplicationBuilder.WithAzureRegion(string azureRegion = \"TryAutoDetect\") -> Microsoft.Identity.Client.ConfidentialClientApplicationBuilder\nMicrosoft.Identity.Client.ConfidentialClientApplicationBuilder.WithCacheSynchronization(bool enableCacheSynchronization) -> Microsoft.Identity.Client.ConfidentialClientApplicationBuilder\nMicrosoft.Identity.Client.ConfidentialClientApplicationBuilder.WithCertificate(System.Security.Cryptography.X509Certificates.X509Certificate2 certificate) -> Microsoft.Identity.Client.ConfidentialClientApplicationBuilder\nMicrosoft.Identity.Client.ConfidentialClientApplicationBuilder.WithCertificate(System.Security.Cryptography.X509Certificates.X509Certificate2 certificate, bool sendX5C) -> Microsoft.Identity.Client.ConfidentialClientApplicationBuilder\nMicrosoft.Identity.Client.ConfidentialClientApplicationBuilder.WithClientAssertion(string signedClientAssertion) -> Microsoft.Identity.Client.ConfidentialClientApplicationBuilder\nMicrosoft.Identity.Client.ConfidentialClientApplicationBuilder.WithClientAssertion(System.Func<Microsoft.Identity.Client.AssertionRequestOptions, System.Threading.Tasks.Task<string>> clientAssertionAsyncDelegate) -> Microsoft.Identity.Client.ConfidentialClientApplicationBuilder\nMicrosoft.Identity.Client.ConfidentialClientApplicationBuilder.WithClientAssertion(System.Func<string> clientAssertionDelegate) -> Microsoft.Identity.Client.ConfidentialClientApplicationBuilder\nMicrosoft.Identity.Client.ConfidentialClientApplicationBuilder.WithClientAssertion(System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task<string>> clientAssertionAsyncDelegate) -> Microsoft.Identity.Client.ConfidentialClientApplicationBuilder\nMicrosoft.Identity.Client.ConfidentialClientApplicationBuilder.WithClientClaims(System.Security.Cryptography.X509Certificates.X509Certificate2 certificate, System.Collections.Generic.IDictionary<string, string> claimsToSign, bool mergeWithDefaultClaims = true, bool sendX5C = false) -> Microsoft.Identity.Client.ConfidentialClientApplicationBuilder\nMicrosoft.Identity.Client.ConfidentialClientApplicationBuilder.WithClientClaims(System.Security.Cryptography.X509Certificates.X509Certificate2 certificate, System.Collections.Generic.IDictionary<string, string> claimsToSign, bool mergeWithDefaultClaims) -> Microsoft.Identity.Client.ConfidentialClientApplicationBuilder\nMicrosoft.Identity.Client.ConfidentialClientApplicationBuilder.WithClientSecret(string clientSecret) -> Microsoft.Identity.Client.ConfidentialClientApplicationBuilder\nMicrosoft.Identity.Client.ConfidentialClientApplicationBuilder.WithGenericAuthority(string authorityUri) -> Microsoft.Identity.Client.ConfidentialClientApplicationBuilder\nMicrosoft.Identity.Client.ConfidentialClientApplicationBuilder.WithOidcAuthority(string authorityUri) -> Microsoft.Identity.Client.ConfidentialClientApplicationBuilder\nMicrosoft.Identity.Client.ConfidentialClientApplicationBuilder.WithTelemetryClient(params Microsoft.IdentityModel.Abstractions.ITelemetryClient[] telemetryClients) -> Microsoft.Identity.Client.ConfidentialClientApplicationBuilder\n```\n\n----------------------------------------\n\nTITLE: ManagedIdentityApplication Class Methods in MSAL.NET\nDESCRIPTION: Defines the ManagedIdentityApplication class that supports authentication using managed identities in Azure. Includes the AcquireTokenForManagedIdentity method which requests tokens for accessing resources.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/netstandard2.0/PublicAPI.Shipped.txt#2025-04-23_snippet_66\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.ManagedIdentityApplication\nMicrosoft.Identity.Client.ManagedIdentityApplication.AcquireTokenForManagedIdentity(string resource) -> Microsoft.Identity.Client.AcquireTokenForManagedIdentityParameterBuilder\n```\n\n----------------------------------------\n\nTITLE: Enabling Shared Token Cache\nDESCRIPTION: Configuration to enable a shared token cache between different MSAL client application instances using the new WithCacheOptions API call.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/CHANGELOG.md#2025-04-23_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n// Enable shared cache between application instances\nappBuilder.WithCacheOptions(CacheOptions.EnableSharedCache)\n```\n\n----------------------------------------\n\nTITLE: Creating Public Client Application with Application Options in C#\nDESCRIPTION: Static factory method for creating a public client application builder with pre-configured application options. This allows for more structured configuration of authentication parameters.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-ios/PublicAPI.Shipped.txt#2025-04-23_snippet_67\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Client.PublicClientApplicationBuilder.CreateWithApplicationOptions(Microsoft.Identity.Client.PublicClientApplicationOptions options) -> Microsoft.Identity.Client.PublicClientApplicationBuilder\n```\n\n----------------------------------------\n\nTITLE: Creating Managed Identity Application in C#\nDESCRIPTION: Static factory method for creating a managed identity application builder with a specific managed identity ID. This is the entry point for applications using managed identity authentication.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-ios/PublicAPI.Shipped.txt#2025-04-23_snippet_53\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Client.ManagedIdentityApplicationBuilder.Create(Microsoft.Identity.Client.AppConfig.ManagedIdentityId managedIdentityId) -> Microsoft.Identity.Client.ManagedIdentityApplicationBuilder\n```\n\n----------------------------------------\n\nTITLE: Working with AbstractApplicationBuilder in MSAL.NET\nDESCRIPTION: The AbstractApplicationBuilder<T> is a generic base class for building authentication applications in MSAL.NET. It provides methods for configuring authority endpoints, client credentials, cache options, and other authentication parameters.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-android/PublicAPI.Shipped.txt#2025-04-23_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\n// Examples of AbstractApplicationBuilder methods\nWithClientId(string clientId)\nWithAuthority(string authorityUri, bool validateAuthority = true)\nWithB2CAuthority(string authorityUri)\nWithAdfsAuthority(string authorityUri, bool validateAuthority = true)\nWithRedirectUri(string redirectUri)\nWithTenantId(string tenantId)\nWithClientCapabilities(IEnumerable<string> clientCapabilities)\n```\n\n----------------------------------------\n\nTITLE: ITokenCacheSerializer Interface Methods in MSAL.NET\nDESCRIPTION: Interface for serializing and deserializing token caches in MSAL.NET. It provides methods to convert the token cache to and from byte arrays, supporting multiple serialization formats for compatibility with different versions of ADAL and MSAL.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-ios/PublicAPI.Shipped.txt#2025-04-23_snippet_29\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.ITokenCacheSerializer\nMicrosoft.Identity.Client.ITokenCacheSerializer.DeserializeAdalV3(byte[] adalV3State) -> void\nMicrosoft.Identity.Client.ITokenCacheSerializer.DeserializeMsalV2(byte[] msalV2State) -> void\nMicrosoft.Identity.Client.ITokenCacheSerializer.DeserializeMsalV3(byte[] msalV3State, bool shouldClearExistingCache = false) -> void\nMicrosoft.Identity.Client.ITokenCacheSerializer.SerializeAdalV3() -> byte[]\nMicrosoft.Identity.Client.ITokenCacheSerializer.SerializeMsalV2() -> byte[]\nMicrosoft.Identity.Client.ITokenCacheSerializer.SerializeMsalV3() -> byte[]\n```\n\n----------------------------------------\n\nTITLE: Confidential Client Application Extensions in MSAL.NET\nDESCRIPTION: Extensions for confidential client applications to configure token providers and manage long-running processes in web APIs, enhancing the flexibility of authentication flows for server-side applications.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0/PublicAPI.Shipped.txt#2025-04-23_snippet_60\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Client.Extensibility.ConfidentialClientApplicationBuilderExtensions.WithAppTokenProvider(this Microsoft.Identity.Client.ConfidentialClientApplicationBuilder builder, System.Func<Microsoft.Identity.Client.Extensibility.AppTokenProviderParameters, System.Threading.Tasks.Task<Microsoft.Identity.Client.Extensibility.AppTokenProviderResult>> appTokenProvider) -> Microsoft.Identity.Client.ConfidentialClientApplicationBuilder\nstatic Microsoft.Identity.Client.Extensibility.ConfidentialClientApplicationExtensions.StopLongRunningProcessInWebApiAsync(this Microsoft.Identity.Client.ILongRunningWebApi clientApp, string longRunningProcessSessionKey, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<bool>\n```\n\n----------------------------------------\n\nTITLE: Extending Token Acquisition Parameters in MSAL.NET\nDESCRIPTION: Extension methods for AbstractAcquireTokenParameterBuilder to add additional cache parameters, authentication extensions, and proof of possession key IDs.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-android/PublicAPI.Shipped.txt#2025-04-23_snippet_46\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Client.Extensibility.AbstractConfidentialClientAcquireTokenParameterBuilderExtension.WithAdditionalCacheParameters<T>(this Microsoft.Identity.Client.AbstractAcquireTokenParameterBuilder<T> builder, System.Collections.Generic.IEnumerable<string> cacheParameters) -> Microsoft.Identity.Client.AbstractAcquireTokenParameterBuilder<T>\nstatic Microsoft.Identity.Client.Extensibility.AbstractConfidentialClientAcquireTokenParameterBuilderExtension.WithAuthenticationExtension<T>(this Microsoft.Identity.Client.AbstractAcquireTokenParameterBuilder<T> builder, Microsoft.Identity.Client.Extensibility.MsalAuthenticationExtension authenticationExtension) -> Microsoft.Identity.Client.AbstractAcquireTokenParameterBuilder<T>\nstatic Microsoft.Identity.Client.Extensibility.AbstractConfidentialClientAcquireTokenParameterBuilderExtension.WithProofOfPosessionKeyId<T>(this Microsoft.Identity.Client.AbstractAcquireTokenParameterBuilder<T> builder, string keyId, string expectedTokenTypeFromAad = \"Bearer\") -> Microsoft.Identity.Client.AbstractAcquireTokenParameterBuilder<T>\n```\n\n----------------------------------------\n\nTITLE: Application Configuration in MSAL.NET\nDESCRIPTION: API signatures for application configuration classes including ApplicationOptions which allow setting client ID, redirect URI, authority details, and other application-specific settings for authentication.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-android/PublicAPI.Shipped.txt#2025-04-23_snippet_13\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.ApplicationBase\nMicrosoft.Identity.Client.ApplicationOptions\nMicrosoft.Identity.Client.ApplicationOptions.AadAuthorityAudience.get -> Microsoft.Identity.Client.AadAuthorityAudience\nMicrosoft.Identity.Client.ApplicationOptions.AadAuthorityAudience.set -> void\nMicrosoft.Identity.Client.ApplicationOptions.ApplicationOptions() -> void\nMicrosoft.Identity.Client.ApplicationOptions.AzureCloudInstance.get -> Microsoft.Identity.Client.AzureCloudInstance\nMicrosoft.Identity.Client.ApplicationOptions.AzureCloudInstance.set -> void\nMicrosoft.Identity.Client.ApplicationOptions.ClientCapabilities.get -> System.Collections.Generic.IEnumerable<string>\nMicrosoft.Identity.Client.ApplicationOptions.ClientCapabilities.set -> void\nMicrosoft.Identity.Client.ApplicationOptions.ClientId.get -> string\nMicrosoft.Identity.Client.ApplicationOptions.ClientId.set -> void\nMicrosoft.Identity.Client.ApplicationOptions.ClientName.get -> string\nMicrosoft.Identity.Client.ApplicationOptions.ClientName.set -> void\nMicrosoft.Identity.Client.ApplicationOptions.ClientVersion.get -> string\nMicrosoft.Identity.Client.ApplicationOptions.ClientVersion.set -> void\nMicrosoft.Identity.Client.ApplicationOptions.Instance.get -> string\nMicrosoft.Identity.Client.ApplicationOptions.Instance.set -> void\nMicrosoft.Identity.Client.ApplicationOptions.KerberosServicePrincipalName.get -> string\nMicrosoft.Identity.Client.ApplicationOptions.KerberosServicePrincipalName.set -> void\nMicrosoft.Identity.Client.ApplicationOptions.LegacyCacheCompatibilityEnabled.get -> bool\nMicrosoft.Identity.Client.ApplicationOptions.LegacyCacheCompatibilityEnabled.set -> void\nMicrosoft.Identity.Client.ApplicationOptions.RedirectUri.get -> string\nMicrosoft.Identity.Client.ApplicationOptions.RedirectUri.set -> void\nMicrosoft.Identity.Client.ApplicationOptions.TenantId.get -> string\nMicrosoft.Identity.Client.ApplicationOptions.TenantId.set -> void\nMicrosoft.Identity.Client.ApplicationOptions.TicketContainer.get -> Microsoft.Identity.Client.Kerberos.KerberosTicketContainer\nMicrosoft.Identity.Client.ApplicationOptions.TicketContainer.set -> void\n```\n\n----------------------------------------\n\nTITLE: Parsing Client Capabilities in C# for Resource Providers\nDESCRIPTION: This code snippet demonstrates how a Service Fabric Resource Provider (SFRP) should handle and parse the xms_cc parameter containing multiple client capabilities. It URL-decodes the input and splits it into individual capabilities.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/docs/msiv1_token_revocation.md#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n// Example: \"cp1,cp2,cp3\"\nstring raw = HttpUtility.UrlDecode(request.Query[\"xms_cc\"]);\nstring[] caps = raw.Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries);\nvar clientCapabilities = caps.Select(c => c.Trim());\n```\n\n----------------------------------------\n\nTITLE: Defining ApplicationOptions Class in C#\nDESCRIPTION: Defines the ApplicationOptions class for configuring MSAL application settings, including client ID, authority, and various Azure AD-specific options.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/netstandard2.0/PublicAPI.Shipped.txt#2025-04-23_snippet_28\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.ApplicationOptions\nMicrosoft.Identity.Client.ApplicationOptions.AadAuthorityAudience.get -> Microsoft.Identity.Client.AadAuthorityAudience\nMicrosoft.Identity.Client.ApplicationOptions.AadAuthorityAudience.set -> void\nMicrosoft.Identity.Client.ApplicationOptions.ApplicationOptions() -> void\nMicrosoft.Identity.Client.ApplicationOptions.AzureCloudInstance.get -> Microsoft.Identity.Client.AzureCloudInstance\nMicrosoft.Identity.Client.ApplicationOptions.AzureCloudInstance.set -> void\nMicrosoft.Identity.Client.ApplicationOptions.ClientCapabilities.get -> System.Collections.Generic.IEnumerable<string>\nMicrosoft.Identity.Client.ApplicationOptions.ClientCapabilities.set -> void\nMicrosoft.Identity.Client.ApplicationOptions.ClientId.get -> string\nMicrosoft.Identity.Client.ApplicationOptions.ClientId.set -> void\nMicrosoft.Identity.Client.ApplicationOptions.ClientName.get -> string\nMicrosoft.Identity.Client.ApplicationOptions.ClientName.set -> void\nMicrosoft.Identity.Client.ApplicationOptions.ClientVersion.get -> string\nMicrosoft.Identity.Client.ApplicationOptions.ClientVersion.set -> void\nMicrosoft.Identity.Client.ApplicationOptions.Instance.get -> string\nMicrosoft.Identity.Client.ApplicationOptions.Instance.set -> void\nMicrosoft.Identity.Client.ApplicationOptions.KerberosServicePrincipalName.get -> string\nMicrosoft.Identity.Client.ApplicationOptions.KerberosServicePrincipalName.set -> void\nMicrosoft.Identity.Client.ApplicationOptions.LegacyCacheCompatibilityEnabled.get -> bool\nMicrosoft.Identity.Client.ApplicationOptions.LegacyCacheCompatibilityEnabled.set -> void\nMicrosoft.Identity.Client.ApplicationOptions.RedirectUri.get -> string\nMicrosoft.Identity.Client.ApplicationOptions.RedirectUri.set -> void\nMicrosoft.Identity.Client.ApplicationOptions.TenantId.get -> string\nMicrosoft.Identity.Client.ApplicationOptions.TenantId.set -> void\nMicrosoft.Identity.Client.ApplicationOptions.TicketContainer.get -> Microsoft.Identity.Client.Kerberos.KerberosTicketContainer\nMicrosoft.Identity.Client.ApplicationOptions.TicketContainer.set -> void\n```\n\n----------------------------------------\n\nTITLE: Checking Embedded WebView Availability in C#\nDESCRIPTION: Extension method that determines if embedded web view is available on the current platform for interactive authentication. This helps applications make decisions about which authentication UI to use.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-ios/PublicAPI.Shipped.txt#2025-04-23_snippet_60\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Client.OsCapabilitiesExtensions.IsEmbeddedWebViewAvailable(this Microsoft.Identity.Client.IPublicClientApplication publicClientApplication) -> bool\n```\n\n----------------------------------------\n\nTITLE: Proof of Possession Authentication in MSAL.NET\nDESCRIPTION: Methods for configuring Proof of Possession authentication for confidential clients, including MTLS and HTTP request-based PoP.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net462/PublicAPI.Shipped.txt#2025-04-23_snippet_39\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.AbstractConfidentialClientAcquireTokenParameterBuilder<T>.WithSignedHttpRequestProofOfPossession(Microsoft.Identity.Client.AppConfig.PoPAuthenticationConfiguration popAuthenticationConfiguration) -> T\nMicrosoft.Identity.Client.AcquireTokenForClientParameterBuilder.WithMtlsProofOfPossession() -> Microsoft.Identity.Client.AcquireTokenForClientParameterBuilder\nstatic Microsoft.Identity.Client.PublicClientApplicationExtensions.IsProofOfPossessionSupportedByClient(this Microsoft.Identity.Client.IPublicClientApplication app) -> bool\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Using MSI Credentials in PowerShell\nDESCRIPTION: Performs authentication with Azure using the Managed Identity credentials obtained from IMDS. This snippet constructs a token request with the proper OAuth parameters, sends it to the regional token endpoint, and handles the response or errors.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/docs/msi_v2/msi_with_credential_design.md#2025-04-23_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\n# Step 9: Authenticate with Azure\n$tokenHeaders = @{\n    \"Content-Type\" = \"application/x-www-form-urlencoded\"\n    \"Accept\" = \"application/json\"\n}\n\n$tokenRequestBody = \"grant_type=client_credentials&scope=https://management.azure.com/.default&client_id=$($jsonContent.client_id)&client_assertion=$($jsonContent.credential)&client_assertion_type=urn:ietf:params:oauth:client-assertion-type:jwt-bearer\"\n\ntry {\n    $tokenResponse = Invoke-WebRequest -Uri $regionalEndpoint \\\n        -Method POST \\\n        -Headers $tokenHeaders \\\n        -Body $tokenRequestBody \\\n        -Certificate $cert  # Use the full certificate object\n\n    $tokenJson = $tokenResponse.Content | ConvertFrom-Json\n    Write-Output \"🔑 Access Token: $($tokenJson.access_token)\"\n} catch {\n    Write-Error \"❌ Failed to retrieve access token. Error: $_\"\n}\n```\n\n----------------------------------------\n\nTITLE: ConfidentialClientApplicationOptions Class Properties in C#\nDESCRIPTION: Defines configuration options for confidential client applications that can be used with dependency injection. Includes properties for client secrets, Azure region, and cache synchronization.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-android/PublicAPI.Shipped.txt#2025-04-23_snippet_22\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.ConfidentialClientApplicationOptions.AzureRegion.get -> string\nMicrosoft.Identity.Client.ConfidentialClientApplicationOptions.AzureRegion.set -> void\nMicrosoft.Identity.Client.ConfidentialClientApplicationOptions.ClientSecret.get -> string\nMicrosoft.Identity.Client.ConfidentialClientApplicationOptions.ClientSecret.set -> void\nMicrosoft.Identity.Client.ConfidentialClientApplicationOptions.ConfidentialClientApplicationOptions() -> void\nMicrosoft.Identity.Client.ConfidentialClientApplicationOptions.EnableCacheSynchronization.get -> bool\nMicrosoft.Identity.Client.ConfidentialClientApplicationOptions.EnableCacheSynchronization.set -> void\n```\n\n----------------------------------------\n\nTITLE: Enabling Preview Broker Support in MSAL.NET\nDESCRIPTION: Extension method that enables broker authentication in preview mode. This method allows developers to opt in to preview broker functionality with an optional parameter to enable or disable the broker.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client.Broker/PublicApi/PublicAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Client.Broker.BrokerExtension.WithBrokerPreview(this Microsoft.Identity.Client.PublicClientApplicationBuilder builder, bool enableBroker = true) -> Microsoft.Identity.Client.PublicClientApplicationBuilder\n```\n\n----------------------------------------\n\nTITLE: Managed Identity and Resource Provider Extensions in MSAL.NET (C#)\nDESCRIPTION: Enums, properties, and extension methods for managed identity sources, client capabilities, and resource provider integration. These components support Azure-hosted applications using managed identities.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/netstandard2.0/PublicAPI.Shipped.txt#2025-04-23_snippet_94\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.ManagedIdentity.ManagedIdentitySource.MachineLearning = 7 -> Microsoft.Identity.Client.ManagedIdentity.ManagedIdentitySource\nMicrosoft.Identity.Client.AcquireTokenForClientParameterBuilder.WithFmiPath(string pathSuffix) -> Microsoft.Identity.Client.AcquireTokenForClientParameterBuilder\nMicrosoft.Identity.Client.BrokerOptions.OperatingSystems.Linux = 2 -> Microsoft.Identity.Client.BrokerOptions.OperatingSystems\nMicrosoft.Identity.Client.AssertionRequestOptions.ClientCapabilities.get -> System.Collections.Generic.IEnumerable<string>\nMicrosoft.Identity.Client.AssertionRequestOptions.ClientCapabilities.set -> void\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication Extensions for Token Acquisition in C#\nDESCRIPTION: Extension method that allows attaching an authentication extension to a token request builder. This supports advanced authentication scenarios by plugging in custom authentication logic.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-ios/PublicAPI.Shipped.txt#2025-04-23_snippet_39\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Client.Extensibility.AbstractConfidentialClientAcquireTokenParameterBuilderExtension.WithAuthenticationExtension<T>(this Microsoft.Identity.Client.AbstractAcquireTokenParameterBuilder<T> builder, Microsoft.Identity.Client.Extensibility.MsalAuthenticationExtension authenticationExtension) -> Microsoft.Identity.Client.AbstractAcquireTokenParameterBuilder<T>\n```\n\n----------------------------------------\n\nTITLE: Managed Identity and Resource Provider Extensions in MSAL.NET\nDESCRIPTION: Types and methods for working with managed identities and resource provider scenarios, including specialized certificate handling and token refresh capabilities.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net462/PublicAPI.Shipped.txt#2025-04-23_snippet_40\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.ManagedIdentity.ManagedIdentitySource.MachineLearning = 7 -> Microsoft.Identity.Client.ManagedIdentity.ManagedIdentitySource\nMicrosoft.Identity.Client.AcquireTokenForClientParameterBuilder.WithFmiPath(string pathSuffix) -> Microsoft.Identity.Client.AcquireTokenForClientParameterBuilder\nMicrosoft.Identity.Client.BrokerOptions.OperatingSystems.Linux = 2 -> Microsoft.Identity.Client.BrokerOptions.OperatingSystems\nMicrosoft.Identity.Client.AssertionRequestOptions.ClientCapabilities.get -> System.Collections.Generic.IEnumerable<string>\nMicrosoft.Identity.Client.AssertionRequestOptions.ClientCapabilities.set -> void\nMicrosoft.Identity.Client.RP.ConfidentialClientApplicationBuilderForResourceProviders\nstatic Microsoft.Identity.Client.RP.ConfidentialClientApplicationBuilderForResourceProviders.WithCertificate(this Microsoft.Identity.Client.ConfidentialClientApplicationBuilder builder, System.Security.Cryptography.X509Certificates.X509Certificate2 certificate, bool sendX5C, bool associateTokensWithCertificateSerialNumber) -> Microsoft.Identity.Client.ConfidentialClientApplicationBuilder\nMicrosoft.Identity.Client.TokenCacheNotificationArgs.NoDistributedCacheUseReason.get -> string\nMicrosoft.Identity.Client.RP.AcquireTokenForClientParameterBuilderForResourceProviders\nstatic Microsoft.Identity.Client.RP.AcquireTokenForClientParameterBuilderForResourceProviders.WithAccessTokenSha256ToRefresh(this Microsoft.Identity.Client.AcquireTokenForClientParameterBuilder builder, string hash) -> Microsoft.Identity.Client.AcquireTokenForClientParameterBuilder\nMicrosoft.Identity.Client.IMsalSFHttpClientFactory\nMicrosoft.Identity.Client.IMsalSFHttpClientFactory.GetHttpClient(System.Func<System.Net.Http.HttpRequestMessage, System.Security.Cryptography.X509Certificates.X509Certificate2, System.Security.Cryptography.X509Certificates.X509Chain, System.Net.Security.SslPolicyErrors, bool> validateServerCert) -> System.Net.Http.HttpClient\n```\n\n----------------------------------------\n\nTITLE: ConfidentialClientApplication Class Methods in C#\nDESCRIPTION: Class for confidential client applications implementing various token acquisition flows including client credentials, authorization code, and on-behalf-of flows.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-ios/PublicAPI.Shipped.txt#2025-04-23_snippet_19\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.ConfidentialClientApplication.AcquireTokenByAuthorizationCode(System.Collections.Generic.IEnumerable<string> scopes, string authorizationCode)\nMicrosoft.Identity.Client.ConfidentialClientApplication.AcquireTokenForClient(System.Collections.Generic.IEnumerable<string> scopes)\nMicrosoft.Identity.Client.ConfidentialClientApplication.AcquireTokenOnBehalfOf(System.Collections.Generic.IEnumerable<string> scopes, Microsoft.Identity.Client.UserAssertion userAssertion)\n```\n\n----------------------------------------\n\nTITLE: MSAL.NET Authorization Request Builder Interface\nDESCRIPTION: Interface definitions for building and executing authorization requests with various parameters including PKCE, login hints, and redirect URIs.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0/PublicAPI.Shipped.txt#2025-04-23_snippet_37\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.GetAuthorizationRequestUrlParameterBuilder.ExecuteAsync() -> System.Threading.Tasks.Task<System.Uri>\nMicrosoft.Identity.Client.GetAuthorizationRequestUrlParameterBuilder.ExecuteAsync(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.Uri>\nMicrosoft.Identity.Client.GetAuthorizationRequestUrlParameterBuilder.WithAccount(Microsoft.Identity.Client.IAccount account) -> Microsoft.Identity.Client.GetAuthorizationRequestUrlParameterBuilder\nMicrosoft.Identity.Client.GetAuthorizationRequestUrlParameterBuilder.WithLoginHint(string loginHint) -> Microsoft.Identity.Client.GetAuthorizationRequestUrlParameterBuilder\nMicrosoft.Identity.Client.GetAuthorizationRequestUrlParameterBuilder.WithPkce(out string codeVerifier) -> Microsoft.Identity.Client.GetAuthorizationRequestUrlParameterBuilder\n```\n\n----------------------------------------\n\nTITLE: Saving Kerberos Tickets to Windows Ticket Cache in C#\nDESCRIPTION: Static method that saves a Kerberos supplemental ticket to the Windows ticket cache. This allows applications to store Azure AD-obtained Kerberos tickets for use with other applications.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-ios/PublicAPI.Shipped.txt#2025-04-23_snippet_50\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Client.Kerberos.KerberosSupplementalTicketManager.SaveToWindowsTicketCache(Microsoft.Identity.Client.Kerberos.KerberosSupplementalTicket ticket) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining IAccount Interface for User Account Information in C#\nDESCRIPTION: This interface represents a user account and provides properties for accessing the account's environment, home account ID, and username.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-android/PublicAPI.Shipped.txt#2025-04-23_snippet_26\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.IAccount\nMicrosoft.Identity.Client.IAccount.Environment.get -> string\nMicrosoft.Identity.Client.IAccount.HomeAccountId.get -> Microsoft.Identity.Client.AccountId\nMicrosoft.Identity.Client.IAccount.Username.get -> string\n```\n\n----------------------------------------\n\nTITLE: Defining AuthenticationResult Class in C#\nDESCRIPTION: Defines the AuthenticationResult class which encapsulates the result of an authentication operation, including access token, account information, and various metadata.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/netstandard2.0/PublicAPI.Shipped.txt#2025-04-23_snippet_29\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.AuthenticationResult\nMicrosoft.Identity.Client.AuthenticationResult.AccessToken.get -> string\nMicrosoft.Identity.Client.AuthenticationResult.AccessToken.set -> void\nMicrosoft.Identity.Client.AuthenticationResult.Account.get -> Microsoft.Identity.Client.IAccount\nMicrosoft.Identity.Client.AuthenticationResult.AdditionalResponseParameters.get -> System.Collections.Generic.IReadOnlyDictionary<string, string>\nMicrosoft.Identity.Client.AuthenticationResult.AuthenticationResult(string accessToken, bool isExtendedLifeTimeToken, string uniqueId, System.DateTimeOffset expiresOn, System.DateTimeOffset extendedExpiresOn, string tenantId, Microsoft.Identity.Client.IAccount account, string idToken, System.Collections.Generic.IEnumerable<string> scopes, System.Guid correlationId, Microsoft.Identity.Client.AuthenticationResultMetadata authenticationResultMetadata, string tokenType = \"Bearer\") -> void\nMicrosoft.Identity.Client.AuthenticationResult.AuthenticationResult(string accessToken, bool isExtendedLifeTimeToken, string uniqueId, System.DateTimeOffset expiresOn, System.DateTimeOffset extendedExpiresOn, string tenantId, Microsoft.Identity.Client.IAccount account, string idToken, System.Collections.Generic.IEnumerable<string> scopes, System.Guid correlationId, string tokenType = \"Bearer\", Microsoft.Identity.Client.AuthenticationResultMetadata authenticationResultMetadata = null, System.Security.Claims.ClaimsPrincipal claimsPrincipal = null, string spaAuthCode = null, System.Collections.Generic.IReadOnlyDictionary<string, string> additionalResponseParameters = null) -> void\nMicrosoft.Identity.Client.AuthenticationResult.AuthenticationResultMetadata.get -> Microsoft.Identity.Client.AuthenticationResultMetadata\nMicrosoft.Identity.Client.AuthenticationResult.ClaimsPrincipal.get -> System.Security.Claims.ClaimsPrincipal\nMicrosoft.Identity.Client.AuthenticationResult.CorrelationId.get -> System.Guid\nMicrosoft.Identity.Client.AuthenticationResult.CreateAuthorizationHeader() -> string\nMicrosoft.Identity.Client.AuthenticationResult.ExpiresOn.get -> System.DateTimeOffset\nMicrosoft.Identity.Client.AuthenticationResult.ExtendedExpiresOn.get -> System.DateTimeOffset\nMicrosoft.Identity.Client.AuthenticationResult.IdToken.get -> string\nMicrosoft.Identity.Client.AuthenticationResult.IsExtendedLifeTimeToken.get -> bool\nMicrosoft.Identity.Client.AuthenticationResult.Scopes.get -> System.Collections.Generic.IEnumerable<string>\n```\n\n----------------------------------------\n\nTITLE: Defining ApplicationOptions Class in C#\nDESCRIPTION: Class definition for ApplicationOptions with properties for configuring MSAL application settings, including cloud instance, client capabilities, and Kerberos options.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0/PublicAPI.Shipped.txt#2025-04-23_snippet_23\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.ApplicationOptions\nMicrosoft.Identity.Client.ApplicationOptions.AadAuthorityAudience.get -> Microsoft.Identity.Client.AadAuthorityAudience\nMicrosoft.Identity.Client.ApplicationOptions.AadAuthorityAudience.set -> void\nMicrosoft.Identity.Client.ApplicationOptions.ApplicationOptions() -> void\nMicrosoft.Identity.Client.ApplicationOptions.AzureCloudInstance.get -> Microsoft.Identity.Client.AzureCloudInstance\nMicrosoft.Identity.Client.ApplicationOptions.AzureCloudInstance.set -> void\nMicrosoft.Identity.Client.ApplicationOptions.ClientCapabilities.get -> System.Collections.Generic.IEnumerable<string>\nMicrosoft.Identity.Client.ApplicationOptions.ClientCapabilities.set -> void\nMicrosoft.Identity.Client.ApplicationOptions.ClientId.get -> string\nMicrosoft.Identity.Client.ApplicationOptions.ClientId.set -> void\nMicrosoft.Identity.Client.ApplicationOptions.ClientName.get -> string\nMicrosoft.Identity.Client.ApplicationOptions.ClientName.set -> void\nMicrosoft.Identity.Client.ApplicationOptions.ClientVersion.get -> string\nMicrosoft.Identity.Client.ApplicationOptions.ClientVersion.set -> void\nMicrosoft.Identity.Client.ApplicationOptions.Instance.get -> string\nMicrosoft.Identity.Client.ApplicationOptions.Instance.set -> void\nMicrosoft.Identity.Client.ApplicationOptions.KerberosServicePrincipalName.get -> string\nMicrosoft.Identity.Client.ApplicationOptions.KerberosServicePrincipalName.set -> void\nMicrosoft.Identity.Client.ApplicationOptions.LegacyCacheCompatibilityEnabled.get -> bool\nMicrosoft.Identity.Client.ApplicationOptions.LegacyCacheCompatibilityEnabled.set -> void\nMicrosoft.Identity.Client.ApplicationOptions.RedirectUri.get -> string\nMicrosoft.Identity.Client.ApplicationOptions.RedirectUri.set -> void\nMicrosoft.Identity.Client.ApplicationOptions.TenantId.get -> string\nMicrosoft.Identity.Client.ApplicationOptions.TenantId.set -> void\nMicrosoft.Identity.Client.ApplicationOptions.TicketContainer.get -> Microsoft.Identity.Client.Kerberos.KerberosTicketContainer\nMicrosoft.Identity.Client.ApplicationOptions.TicketContainer.set -> void\n```\n\n----------------------------------------\n\nTITLE: TokenCacheNotificationArgs Class in C#\nDESCRIPTION: A class that provides detailed context for token cache operations via notification callbacks, including information about accounts, client IDs, and cache state.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-android/PublicAPI.Shipped.txt#2025-04-23_snippet_36\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.TokenCacheNotificationArgs\nMicrosoft.Identity.Client.TokenCacheNotificationArgs.Account.get -> Microsoft.Identity.Client.IAccount\nMicrosoft.Identity.Client.TokenCacheNotificationArgs.CancellationToken.get -> System.Threading.CancellationToken\nMicrosoft.Identity.Client.TokenCacheNotificationArgs.ClientId.get -> string\nMicrosoft.Identity.Client.TokenCacheNotificationArgs.CorrelationId.get -> System.Guid\nMicrosoft.Identity.Client.TokenCacheNotificationArgs.HasStateChanged.get -> bool\nMicrosoft.Identity.Client.TokenCacheNotificationArgs.HasTokens.get -> bool\nMicrosoft.Identity.Client.TokenCacheNotificationArgs.IdentityLogger.get -> Microsoft.IdentityModel.Abstractions.IIdentityLogger\nMicrosoft.Identity.Client.TokenCacheNotificationArgs.IsApplicationCache.get -> bool\nMicrosoft.Identity.Client.TokenCacheNotificationArgs.PiiLoggingEnabled.get -> bool\nMicrosoft.Identity.Client.TokenCacheNotificationArgs.RequestScopes.get -> System.Collections.Generic.IEnumerable<string>\nMicrosoft.Identity.Client.TokenCacheNotificationArgs.RequestTenantId.get -> string\nMicrosoft.Identity.Client.TokenCacheNotificationArgs.SuggestedCacheExpiry.get -> System.DateTimeOffset?\nMicrosoft.Identity.Client.TokenCacheNotificationArgs.SuggestedCacheKey.get -> string\nMicrosoft.Identity.Client.TokenCacheNotificationArgs.TelemetryData.get -> Microsoft.Identity.Client.TelemetryCore.TelemetryClient.TelemetryData\nMicrosoft.Identity.Client.TokenCacheNotificationArgs.TokenCache.get -> Microsoft.Identity.Client.ITokenCacheSerializer\nMicrosoft.Identity.Client.TokenCacheNotificationArgs.TokenCacheNotificationArgs(Microsoft.Identity.Client.ITokenCacheSerializer tokenCache, string clientId, Microsoft.Identity.Client.IAccount account, bool hasStateChanged, bool isApplicationCache, string suggestedCacheKey, bool hasTokens, System.DateTimeOffset? suggestedCacheExpiry, System.Threading.CancellationToken cancellationToken) -> void\nMicrosoft.Identity.Client.TokenCacheNotificationArgs.TokenCacheNotificationArgs(Microsoft.Identity.Client.ITokenCacheSerializer tokenCache, string clientId, Microsoft.Identity.Client.IAccount account, bool hasStateChanged, bool isApplicationCache, string suggestedCacheKey, bool hasTokens, System.DateTimeOffset? suggestedCacheExpiry, System.Threading.CancellationToken cancellationToken, System.Guid correlationId) -> void\nMicrosoft.Identity.Client.TokenCacheNotificationArgs.TokenCacheNotificationArgs(Microsoft.Identity.Client.ITokenCacheSerializer tokenCache, string clientId, Microsoft.Identity.Client.IAccount account, bool hasStateChanged, bool isApplicationCache, string suggestedCacheKey, bool hasTokens, System.DateTimeOffset? suggestedCacheExpiry, System.Threading.CancellationToken cancellationToken, System.Guid correlationId, System.Collections.Generic.IEnumerable<string> requestScopes, string requestTenantId) -> void\n```\n\n----------------------------------------\n\nTITLE: Managed Identity and Platform Support in MSAL.NET\nDESCRIPTION: Enums and constants for specifying managed identity sources, supported operating systems (including Linux), and HTTP client factory interfaces for Service Fabric integration.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-ios/PublicAPI.Shipped.txt#2025-04-23_snippet_86\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.ManagedIdentity.ManagedIdentitySource.MachineLearning = 7 -> Microsoft.Identity.Client.ManagedIdentity.ManagedIdentitySource\nMicrosoft.Identity.Client.BrokerOptions.OperatingSystems.Linux = 2 -> Microsoft.Identity.Client.BrokerOptions.OperatingSystems\nMicrosoft.Identity.Client.IMsalSFHttpClientFactory\nMicrosoft.Identity.Client.IMsalSFHttpClientFactory.GetHttpClient(System.Func<System.Net.Http.HttpRequestMessage, System.Security.Cryptography.X509Certificates.X509Certificate2, System.Security.Cryptography.X509Certificates.X509Chain, System.Net.Security.SslPolicyErrors, bool> validateServerCert) -> System.Net.Http.HttpClient\n```\n\n----------------------------------------\n\nTITLE: SSH Certificate Integration in MSAL.NET\nDESCRIPTION: Extension methods for configuring SSH certificate authentication schemes with various token acquisition flows, enabling secure SSH-based authentication scenarios.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0/PublicAPI.Shipped.txt#2025-04-23_snippet_67\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Client.SSHCertificates.SSHExtensions.WithSSHCertificateAuthenticationScheme(this Microsoft.Identity.Client.AcquireTokenInteractiveParameterBuilder builder, string publicKeyJwk, string keyId) -> Microsoft.Identity.Client.AcquireTokenInteractiveParameterBuilder\nstatic Microsoft.Identity.Client.SSHCertificates.SSHExtensions.WithSSHCertificateAuthenticationScheme(this Microsoft.Identity.Client.AcquireTokenSilentParameterBuilder builder, string publicKeyJwk, string keyId) -> Microsoft.Identity.Client.AcquireTokenSilentParameterBuilder\n```\n\n----------------------------------------\n\nTITLE: Configuration Methods in AbstractApplicationBuilder\nDESCRIPTION: Methods for configuring various aspects of the authentication application including B2C authority, cache options, client capabilities, client ID, query parameters, instance discovery settings, legacy cache compatibility, redirect URI, telemetry, and tenant ID.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0/PublicAPI.Shipped.txt#2025-04-23_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.AbstractApplicationBuilder<T>.WithB2CAuthority(string authorityUri) -> T\nMicrosoft.Identity.Client.AbstractApplicationBuilder<T>.WithCacheOptions(Microsoft.Identity.Client.CacheOptions options) -> T\nMicrosoft.Identity.Client.AbstractApplicationBuilder<T>.WithClientCapabilities(System.Collections.Generic.IEnumerable<string> clientCapabilities) -> T\nMicrosoft.Identity.Client.AbstractApplicationBuilder<T>.WithClientId(string clientId) -> T\nMicrosoft.Identity.Client.AbstractApplicationBuilder<T>.WithExtraQueryParameters(string extraQueryParameters) -> T\nMicrosoft.Identity.Client.AbstractApplicationBuilder<T>.WithExtraQueryParameters(System.Collections.Generic.IDictionary<string, string> extraQueryParameters) -> T\nMicrosoft.Identity.Client.AbstractApplicationBuilder<T>.WithInstanceDicoveryMetadata(string instanceDiscoveryJson) -> T\nMicrosoft.Identity.Client.AbstractApplicationBuilder<T>.WithInstanceDicoveryMetadata(System.Uri instanceDiscoveryUri) -> T\nMicrosoft.Identity.Client.AbstractApplicationBuilder<T>.WithInstanceDiscovery(bool enableInstanceDiscovery) -> T\nMicrosoft.Identity.Client.AbstractApplicationBuilder<T>.WithInstanceDiscoveryMetadata(string instanceDiscoveryJson) -> T\nMicrosoft.Identity.Client.AbstractApplicationBuilder<T>.WithInstanceDiscoveryMetadata(System.Uri instanceDiscoveryUri) -> T\nMicrosoft.Identity.Client.AbstractApplicationBuilder<T>.WithLegacyCacheCompatibility(bool enableLegacyCacheCompatibility = true) -> T\nMicrosoft.Identity.Client.AbstractApplicationBuilder<T>.WithRedirectUri(string redirectUri) -> T\nMicrosoft.Identity.Client.AbstractApplicationBuilder<T>.WithTelemetry(Microsoft.Identity.Client.ITelemetryConfig telemetryConfig) -> T\nMicrosoft.Identity.Client.AbstractApplicationBuilder<T>.WithTenantId(string tenantId) -> T\n```\n\n----------------------------------------\n\nTITLE: Assertion-Based Authentication in MSAL.NET\nDESCRIPTION: API signatures for assertion-based authentication configuration through the AssertionRequestOptions class, which enables client credentials flow with client assertions instead of client secrets.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-android/PublicAPI.Shipped.txt#2025-04-23_snippet_16\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.AssertionRequestOptions\nMicrosoft.Identity.Client.AssertionRequestOptions.AssertionRequestOptions() -> void\nMicrosoft.Identity.Client.AssertionRequestOptions.CancellationToken.get -> System.Threading.CancellationToken\nMicrosoft.Identity.Client.AssertionRequestOptions.CancellationToken.set -> void\nMicrosoft.Identity.Client.AssertionRequestOptions.Claims.get -> string\nMicrosoft.Identity.Client.AssertionRequestOptions.Claims.set -> void\nMicrosoft.Identity.Client.AssertionRequestOptions.ClientID.get -> string\nMicrosoft.Identity.Client.AssertionRequestOptions.ClientID.set -> void\nMicrosoft.Identity.Client.AssertionRequestOptions.TokenEndpoint.get -> string\nMicrosoft.Identity.Client.AssertionRequestOptions.TokenEndpoint.set -> void\n```\n\n----------------------------------------\n\nTITLE: Token Acquisition Parameter Extensions in MSAL.NET\nDESCRIPTION: Extension methods for token acquisition parameter builders that allow customizing authentication requests with additional parameters and handlers.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net472/PublicAPI.Shipped.txt#2025-04-23_snippet_20\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Client.Advanced.AcquireTokenParameterBuilderExtensions.WithExtraHttpHeaders<T>(this Microsoft.Identity.Client.AbstractAcquireTokenParameterBuilder<T> builder, System.Collections.Generic.IDictionary<string, string> extraHttpHeaders) -> T\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Client.Extensibility.AbstractConfidentialClientAcquireTokenParameterBuilderExtension.OnBeforeTokenRequest<T>(this Microsoft.Identity.Client.AbstractAcquireTokenParameterBuilder<T> builder, System.Func<Microsoft.Identity.Client.Extensibility.OnBeforeTokenRequestData, System.Threading.Tasks.Task> onBeforeTokenRequestHandler) -> Microsoft.Identity.Client.AbstractAcquireTokenParameterBuilder<T>\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Client.Extensibility.AbstractConfidentialClientAcquireTokenParameterBuilderExtension.WithAdditionalCacheParameters<T>(this Microsoft.Identity.Client.AbstractAcquireTokenParameterBuilder<T> builder, System.Collections.Generic.IEnumerable<string> cacheParameters) -> Microsoft.Identity.Client.AbstractAcquireTokenParameterBuilder<T>\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Client.Extensibility.AbstractConfidentialClientAcquireTokenParameterBuilderExtension.WithAuthenticationExtension<T>(this Microsoft.Identity.Client.AbstractAcquireTokenParameterBuilder<T> builder, Microsoft.Identity.Client.Extensibility.MsalAuthenticationExtension authenticationExtension) -> Microsoft.Identity.Client.AbstractAcquireTokenParameterBuilder<T>\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Client.Extensibility.AbstractConfidentialClientAcquireTokenParameterBuilderExtension.WithProofOfPosessionKeyId<T>(this Microsoft.Identity.Client.AbstractAcquireTokenParameterBuilder<T> builder, string keyId, string expectedTokenTypeFromAad = \"Bearer\") -> Microsoft.Identity.Client.AbstractAcquireTokenParameterBuilder<T>\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Client.Extensibility.AcquireTokenForClientBuilderExtensions.WithProofOfPosessionKeyId(this Microsoft.Identity.Client.AcquireTokenForClientParameterBuilder builder, string keyId, string expectedTokenTypeFromAad = \"Bearer\") -> Microsoft.Identity.Client.AcquireTokenForClientParameterBuilder\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Client.Extensibility.AcquireTokenInteractiveParameterBuilderExtensions.WithCustomWebUi(this Microsoft.Identity.Client.AcquireTokenInteractiveParameterBuilder builder, Microsoft.Identity.Client.Extensibility.ICustomWebUi customWebUi) -> Microsoft.Identity.Client.AcquireTokenInteractiveParameterBuilder\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Client.Extensibility.AcquireTokenOnBehalfOfParameterBuilderExtensions.WithSearchInCacheForLongRunningProcess(this Microsoft.Identity.Client.AcquireTokenOnBehalfOfParameterBuilder builder, bool searchInCache = true) -> Microsoft.Identity.Client.AcquireTokenOnBehalfOfParameterBuilder\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Client.Extensibility.ConfidentialClientApplicationBuilderExtensions.WithAppTokenProvider(this Microsoft.Identity.Client.ConfidentialClientApplicationBuilder builder, System.Func<Microsoft.Identity.Client.Extensibility.AppTokenProviderParameters, System.Threading.Tasks.Task<Microsoft.Identity.Client.Extensibility.AppTokenProviderResult>> appTokenProvider) -> Microsoft.Identity.Client.ConfidentialClientApplicationBuilder\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Client.Extensibility.ConfidentialClientApplicationExtensions.StopLongRunningProcessInWebApiAsync(this Microsoft.Identity.Client.ILongRunningWebApi clientApp, string longRunningProcessSessionKey, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<bool>\n```\n\n----------------------------------------\n\nTITLE: Prompt Types for Authentication UI in MSAL.NET (C#)\nDESCRIPTION: Static readonly properties defining different prompt behaviors during interactive authentication. These control how the authentication UI is presented to the user.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/netstandard2.0/PublicAPI.Shipped.txt#2025-04-23_snippet_90\n\nLANGUAGE: C#\nCODE:\n```\nstatic readonly Microsoft.Identity.Client.Prompt.Consent -> Microsoft.Identity.Client.Prompt\nstatic readonly Microsoft.Identity.Client.Prompt.Create -> Microsoft.Identity.Client.Prompt\nstatic readonly Microsoft.Identity.Client.Prompt.ForceLogin -> Microsoft.Identity.Client.Prompt\nstatic readonly Microsoft.Identity.Client.Prompt.NoPrompt -> Microsoft.Identity.Client.Prompt\nstatic readonly Microsoft.Identity.Client.Prompt.SelectAccount -> Microsoft.Identity.Client.Prompt\n```\n\n----------------------------------------\n\nTITLE: Managed Identity ID Static Methods in C#\nDESCRIPTION: Defines static methods for creating ManagedIdentityId instances for different types of managed identities. Includes support for system-assigned and user-assigned identities with various identifier formats.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-android/PublicAPI.Shipped.txt#2025-04-23_snippet_44\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Client.AppConfig.ManagedIdentityId.SystemAssigned.get -> Microsoft.Identity.Client.AppConfig.ManagedIdentityId\nstatic Microsoft.Identity.Client.AppConfig.ManagedIdentityId.WithUserAssignedClientId(string clientId) -> Microsoft.Identity.Client.AppConfig.ManagedIdentityId\nstatic Microsoft.Identity.Client.AppConfig.ManagedIdentityId.WithUserAssignedObjectId(string objectId) -> Microsoft.Identity.Client.AppConfig.ManagedIdentityId\nstatic Microsoft.Identity.Client.AppConfig.ManagedIdentityId.WithUserAssignedResourceId(string resourceId) -> Microsoft.Identity.Client.AppConfig.ManagedIdentityId\n```\n\n----------------------------------------\n\nTITLE: Defining IClientApplicationBase Interface in C#\nDESCRIPTION: Declares the IClientApplicationBase interface with methods for token acquisition, account management, and application configuration.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/netstandard2.0/PublicAPI.Shipped.txt#2025-04-23_snippet_59\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.IClientApplicationBase\nMicrosoft.Identity.Client.IClientApplicationBase.AcquireTokenSilent(System.Collections.Generic.IEnumerable<string> scopes, Microsoft.Identity.Client.IAccount account) -> Microsoft.Identity.Client.AcquireTokenSilentParameterBuilder\nMicrosoft.Identity.Client.IClientApplicationBase.AcquireTokenSilent(System.Collections.Generic.IEnumerable<string> scopes, string loginHint) -> Microsoft.Identity.Client.AcquireTokenSilentParameterBuilder\nMicrosoft.Identity.Client.IClientApplicationBase.AppConfig.get -> Microsoft.Identity.Client.IAppConfig\nMicrosoft.Identity.Client.IClientApplicationBase.Authority.get -> string\nMicrosoft.Identity.Client.IClientApplicationBase.GetAccountAsync(string identifier) -> System.Threading.Tasks.Task<Microsoft.Identity.Client.IAccount>\nMicrosoft.Identity.Client.IClientApplicationBase.GetAccountsAsync() -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.Identity.Client.IAccount>>\nMicrosoft.Identity.Client.IClientApplicationBase.GetAccountsAsync(string userFlow) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.Identity.Client.IAccount>>\nMicrosoft.Identity.Client.IClientApplicationBase.RemoveAsync(Microsoft.Identity.Client.IAccount account) -> System.Threading.Tasks.Task\nMicrosoft.Identity.Client.IClientApplicationBase.UserTokenCache.get -> Microsoft.Identity.Client.ITokenCache\n```\n\n----------------------------------------\n\nTITLE: Configuring Token Acquisition Parameters in MSAL.NET\nDESCRIPTION: MSAL.NET provides various parameter builders for different token acquisition flows. Each builder has methods for configuring the specific parameters needed for that flow, such as integrated Windows authentication, username/password, authorization code, and interactive flows.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-android/PublicAPI.Shipped.txt#2025-04-23_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\n// AcquireTokenInteractiveParameterBuilder\nWithAccount(IAccount account)\nWithLoginHint(string loginHint)\nWithPrompt(Prompt prompt)\nWithExtraScopesToConsent(IEnumerable<string> extraScopesToConsent)\nWithParentActivityOrWindow(object parent)\nWithEmbeddedWebViewOptions(EmbeddedWebViewOptions options)\nWithProofOfPossession(string nonce, HttpMethod httpMethod, Uri requestUri)\n\n// AcquireTokenByUsernamePasswordParameterBuilder\nWithFederationMetadata(string federationMetadata)\nWithProofOfPossession(string nonce, HttpMethod httpMethod, Uri requestUri)\n\n// AcquireTokenByAuthorizationCodeParameterBuilder\nWithPkceCodeVerifier(string pkceCodeVerifier)\nWithSendX5C(bool withSendX5C)\nWithSpaAuthorizationCode(bool requestSpaAuthorizationCode = true)\nWithCcsRoutingHint(string userName)\n```\n\n----------------------------------------\n\nTITLE: Client Credentials Flow Parameter Builder\nDESCRIPTION: Methods for configuring token acquisition using the client credentials (app-only) flow. Includes options for Azure regional settings, forcing refresh, and X.509 certificate sending.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0/PublicAPI.Shipped.txt#2025-04-23_snippet_16\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.AcquireTokenForClientParameterBuilder\nMicrosoft.Identity.Client.AcquireTokenForClientParameterBuilder.WithAzureRegion(bool useAzureRegion) -> Microsoft.Identity.Client.AcquireTokenForClientParameterBuilder\nMicrosoft.Identity.Client.AcquireTokenForClientParameterBuilder.WithForceRefresh(bool forceRefresh) -> Microsoft.Identity.Client.AcquireTokenForClientParameterBuilder\nMicrosoft.Identity.Client.AcquireTokenForClientParameterBuilder.WithPreferredAzureRegion(bool useAzureRegion = true, string regionUsedIfAutoDetectFails = \"\", bool fallbackToGlobal = true) -> Microsoft.Identity.Client.AcquireTokenForClientParameterBuilder\nMicrosoft.Identity.Client.AcquireTokenForClientParameterBuilder.WithSendX5C(bool withSendX5C) -> Microsoft.Identity.Client.AcquireTokenForClientParameterBuilder\n```\n\n----------------------------------------\n\nTITLE: Defining IPoPCryptoProvider Interface in C#\nDESCRIPTION: This snippet defines the IPoPCryptoProvider interface for Proof of Possession (PoP) functionality, including properties for the canonical public key JWK and cryptographic algorithm, and a method for signing data.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/netstandard2.0/PublicAPI.Shipped.txt#2025-04-23_snippet_33\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.AuthScheme.PoP.IPoPCryptoProvider\nMicrosoft.Identity.Client.AuthScheme.PoP.IPoPCryptoProvider.CannonicalPublicKeyJwk.get -> string\nMicrosoft.Identity.Client.AuthScheme.PoP.IPoPCryptoProvider.CryptographicAlgorithm.get -> string\nMicrosoft.Identity.Client.AuthScheme.PoP.IPoPCryptoProvider.Sign(byte[] data) -> byte[]\n```\n\n----------------------------------------\n\nTITLE: Installing MSAL.NET via NuGet Package Manager Console\nDESCRIPTION: This command installs the Microsoft.Identity.Client NuGet package, which is the core MSAL library for .NET applications.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/netstandard2.0/PublicAPI.Unshipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nInstall-Package Microsoft.Identity.Client\n```\n\n----------------------------------------\n\nTITLE: AcquireTokenByAuthorizationCodeParameterBuilder Methods in C#\nDESCRIPTION: Methods for configuring the AcquireTokenByAuthorizationCodeParameterBuilder, including CCS routing hint, PKCE code verifier, and other options.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/netstandard2.0/PublicAPI.Shipped.txt#2025-04-23_snippet_17\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.AcquireTokenByAuthorizationCodeParameterBuilder.WithCcsRoutingHint(string userName) -> Microsoft.Identity.Client.AcquireTokenByAuthorizationCodeParameterBuilder\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.AcquireTokenByAuthorizationCodeParameterBuilder.WithCcsRoutingHint(string userObjectIdentifier, string tenantIdentifier) -> Microsoft.Identity.Client.AcquireTokenByAuthorizationCodeParameterBuilder\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.AcquireTokenByAuthorizationCodeParameterBuilder.WithPkceCodeVerifier(string pkceCodeVerifier) -> Microsoft.Identity.Client.AcquireTokenByAuthorizationCodeParameterBuilder\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.AcquireTokenByAuthorizationCodeParameterBuilder.WithSendX5C(bool withSendX5C) -> Microsoft.Identity.Client.AcquireTokenByAuthorizationCodeParameterBuilder\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.AcquireTokenByAuthorizationCodeParameterBuilder.WithSpaAuthorizationCode(bool requestSpaAuthorizationCode = true) -> Microsoft.Identity.Client.AcquireTokenByAuthorizationCodeParameterBuilder\n```\n\n----------------------------------------\n\nTITLE: TokenCache Class in C#\nDESCRIPTION: A class responsible for token caching functionality, providing methods to set callbacks for various cache access events and configure platform-specific cache settings.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-android/PublicAPI.Shipped.txt#2025-04-23_snippet_35\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.TokenCache\nMicrosoft.Identity.Client.TokenCache.SetAfterAccess(Microsoft.Identity.Client.TokenCacheCallback afterAccess) -> void\nMicrosoft.Identity.Client.TokenCache.SetAfterAccessAsync(System.Func<Microsoft.Identity.Client.TokenCacheNotificationArgs, System.Threading.Tasks.Task> afterAccess) -> void\nMicrosoft.Identity.Client.TokenCache.SetBeforeAccess(Microsoft.Identity.Client.TokenCacheCallback beforeAccess) -> void\nMicrosoft.Identity.Client.TokenCache.SetBeforeAccessAsync(System.Func<Microsoft.Identity.Client.TokenCacheNotificationArgs, System.Threading.Tasks.Task> beforeAccess) -> void\nMicrosoft.Identity.Client.TokenCache.SetBeforeWrite(Microsoft.Identity.Client.TokenCacheCallback beforeWrite) -> void\nMicrosoft.Identity.Client.TokenCache.SetBeforeWriteAsync(System.Func<Microsoft.Identity.Client.TokenCacheNotificationArgs, System.Threading.Tasks.Task> beforeWrite) -> void\nMicrosoft.Identity.Client.TokenCache.SetIosKeychainSecurityGroup(string securityGroup) -> void\nMicrosoft.Identity.Client.TokenCache.TokenCache() -> void\n```\n\n----------------------------------------\n\nTITLE: Token Acquisition Parameter Builder Extensions in MSAL.NET\nDESCRIPTION: Static extension methods for AbstractAcquireTokenParameterBuilder that provide additional configuration options for token acquisition flows, including cache parameters, authentication extensions, and proof of possession capabilities.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0/PublicAPI.Shipped.txt#2025-04-23_snippet_58\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Client.Extensibility.AbstractConfidentialClientAcquireTokenParameterBuilderExtension.WithAdditionalCacheParameters<T>(this Microsoft.Identity.Client.AbstractAcquireTokenParameterBuilder<T> builder, System.Collections.Generic.IEnumerable<string> cacheParameters) -> Microsoft.Identity.Client.AbstractAcquireTokenParameterBuilder<T>\nstatic Microsoft.Identity.Client.Extensibility.AbstractConfidentialClientAcquireTokenParameterBuilderExtension.WithAuthenticationExtension<T>(this Microsoft.Identity.Client.AbstractAcquireTokenParameterBuilder<T> builder, Microsoft.Identity.Client.Extensibility.MsalAuthenticationExtension authenticationExtension) -> Microsoft.Identity.Client.AbstractAcquireTokenParameterBuilder<T>\nstatic Microsoft.Identity.Client.Extensibility.AbstractConfidentialClientAcquireTokenParameterBuilderExtension.WithProofOfPosessionKeyId<T>(this Microsoft.Identity.Client.AbstractAcquireTokenParameterBuilder<T> builder, string keyId, string expectedTokenTypeFromAad = \"Bearer\") -> Microsoft.Identity.Client.AbstractAcquireTokenParameterBuilder<T>\n```\n\n----------------------------------------\n\nTITLE: Sending Probe Request to IMDS /credential Endpoint in PowerShell\nDESCRIPTION: A PowerShell example demonstrating how to send a probe request to the IMDS /credential endpoint. This request is used to determine if the MSI V2 /credential endpoint is available for VM/VMSS.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/docs/msi_v2/vm_vmss_credential_probe.md#2025-04-23_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nInvoke-WebRequest -Uri 'http://169.254.169.254/metadata/identity/credential?cred-api-version=1.0' `\n    -Method POST `\n    -Body '.' `\n    -UseBasicParsing\n```\n\n----------------------------------------\n\nTITLE: Storage Operations for Token Cache in C#\nDESCRIPTION: Low-level storage operations for reading, writing, and managing token cache data. These methods handle the actual persistence of token cache data to the filesystem or secure storage.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client.Extensions.Msal/PublicApi/PublicAPI.Shipped.txt#2025-04-23_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.Extensions.Msal.Storage.ReadData() -> byte[]\nMicrosoft.Identity.Client.Extensions.Msal.Storage.WriteData(byte[] data) -> void\nMicrosoft.Identity.Client.Extensions.Msal.Storage.Clear(bool ignoreExceptions = false) -> void\nMicrosoft.Identity.Client.Extensions.Msal.Storage.VerifyPersistence() -> void\n```\n\n----------------------------------------\n\nTITLE: Defining AcquireTokenSilentParameterBuilder Class in C#\nDESCRIPTION: Class definition for AcquireTokenSilentParameterBuilder with methods for configuring silent token acquisition parameters, including Proof of Possession support.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0/PublicAPI.Shipped.txt#2025-04-23_snippet_20\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.AcquireTokenSilentParameterBuilder\nMicrosoft.Identity.Client.AcquireTokenSilentParameterBuilder.WithForceRefresh(bool forceRefresh) -> Microsoft.Identity.Client.AcquireTokenSilentParameterBuilder\nMicrosoft.Identity.Client.AcquireTokenSilentParameterBuilder.WithProofOfPossession(Microsoft.Identity.Client.AppConfig.PoPAuthenticationConfiguration popAuthenticationConfiguration) -> Microsoft.Identity.Client.AcquireTokenSilentParameterBuilder\nMicrosoft.Identity.Client.AcquireTokenSilentParameterBuilder.WithProofOfPossession(string nonce, System.Net.Http.HttpMethod httpMethod, System.Uri requestUri) -> Microsoft.Identity.Client.AcquireTokenSilentParameterBuilder\nMicrosoft.Identity.Client.AcquireTokenSilentParameterBuilder.WithSendX5C(bool withSendX5C) -> Microsoft.Identity.Client.AcquireTokenSilentParameterBuilder\n```\n\n----------------------------------------\n\nTITLE: DeviceCodeResult Class Properties in C#\nDESCRIPTION: Represents the result of initiating a device code flow authentication. Contains properties for the device code, user code, verification URL, and expiration information that should be displayed to the user.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-android/PublicAPI.Shipped.txt#2025-04-23_snippet_23\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.DeviceCodeResult.ClientId.get -> string\nMicrosoft.Identity.Client.DeviceCodeResult.DeviceCode.get -> string\nMicrosoft.Identity.Client.DeviceCodeResult.ExpiresOn.get -> System.DateTimeOffset\nMicrosoft.Identity.Client.DeviceCodeResult.Interval.get -> long\nMicrosoft.Identity.Client.DeviceCodeResult.Message.get -> string\nMicrosoft.Identity.Client.DeviceCodeResult.Scopes.get -> System.Collections.Generic.IReadOnlyCollection<string>\nMicrosoft.Identity.Client.DeviceCodeResult.UserCode.get -> string\nMicrosoft.Identity.Client.DeviceCodeResult.VerificationUrl.get -> string\n```\n\n----------------------------------------\n\nTITLE: Defining ITokenCache Interface in C#\nDESCRIPTION: This snippet defines the ITokenCache interface, which provides methods for managing token cache events and callbacks in MSAL.NET.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0/PublicAPI.Shipped.txt#2025-04-23_snippet_40\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.ITokenCache\nMicrosoft.Identity.Client.ITokenCache.SetAfterAccess(Microsoft.Identity.Client.TokenCacheCallback afterAccess) -> void\nMicrosoft.Identity.Client.ITokenCache.SetAfterAccessAsync(System.Func<Microsoft.Identity.Client.TokenCacheNotificationArgs, System.Threading.Tasks.Task> afterAccess) -> void\nMicrosoft.Identity.Client.ITokenCache.SetBeforeAccess(Microsoft.Identity.Client.TokenCacheCallback beforeAccess) -> void\nMicrosoft.Identity.Client.ITokenCache.SetBeforeAccessAsync(System.Func<Microsoft.Identity.Client.TokenCacheNotificationArgs, System.Threading.Tasks.Task> beforeAccess) -> void\nMicrosoft.Identity.Client.ITokenCache.SetBeforeWrite(Microsoft.Identity.Client.TokenCacheCallback beforeWrite) -> void\nMicrosoft.Identity.Client.ITokenCache.SetBeforeWriteAsync(System.Func<Microsoft.Identity.Client.TokenCacheNotificationArgs, System.Threading.Tasks.Task> beforeWrite) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining ManagedIdentitySource Enumeration\nDESCRIPTION: Enumerates different sources for managed identity authentication including IMDS, AppService, AzureArc, etc.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-ios/PublicAPI.Shipped.txt#2025-04-23_snippet_35\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.ManagedIdentity.ManagedIdentitySource.None = 0\nMicrosoft.Identity.Client.ManagedIdentity.ManagedIdentitySource.Imds = 1\nMicrosoft.Identity.Client.ManagedIdentity.ManagedIdentitySource.AppService = 2\nMicrosoft.Identity.Client.ManagedIdentity.ManagedIdentitySource.AzureArc = 3\nMicrosoft.Identity.Client.ManagedIdentity.ManagedIdentitySource.CloudShell = 4\nMicrosoft.Identity.Client.ManagedIdentity.ManagedIdentitySource.ServiceFabric = 5\nMicrosoft.Identity.Client.ManagedIdentity.ManagedIdentitySource.DefaultToImds = 6\n```\n\n----------------------------------------\n\nTITLE: Using Custom Web UI for Interactive Authentication in C#\nDESCRIPTION: Extension method that allows specifying a custom web UI implementation for interactive authentication flows. This provides applications with full control over the web authentication UI experience.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-ios/PublicAPI.Shipped.txt#2025-04-23_snippet_42\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Client.Extensibility.AcquireTokenInteractiveParameterBuilderExtensions.WithCustomWebUi(this Microsoft.Identity.Client.AcquireTokenInteractiveParameterBuilder builder, Microsoft.Identity.Client.Extensibility.ICustomWebUi customWebUi) -> Microsoft.Identity.Client.AcquireTokenInteractiveParameterBuilder\n```\n\n----------------------------------------\n\nTITLE: Initializing PublicClientApplication for MSAL.NET\nDESCRIPTION: This code snippet demonstrates how to create an instance of PublicClientApplication, which is used to acquire tokens for accessing protected resources.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client.Broker/PublicApi/PublicAPI.Unshipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nIPublicClientApplication app = PublicClientApplicationBuilder.Create(clientId)\n    .WithAuthority(AzureCloudInstance.AzurePublic, tenantId)\n    .WithRedirectUri(\"http://localhost\")\n    .Build();\n```\n\n----------------------------------------\n\nTITLE: Implementing ManagedIdentityApplicationBuilder in C#\nDESCRIPTION: Defines the ManagedIdentityApplicationBuilder class with methods for building and configuring managed identity applications. It includes methods for adding client capabilities and telemetry clients.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net462/PublicAPI.Shipped.txt#2025-04-23_snippet_26\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.ManagedIdentityApplicationBuilder\nMicrosoft.Identity.Client.ManagedIdentityApplicationBuilder.Build() -> Microsoft.Identity.Client.IManagedIdentityApplication\nMicrosoft.Identity.Client.ManagedIdentityApplicationBuilder.WithClientCapabilities(System.Collections.Generic.IEnumerable<string> clientCapabilities) -> Microsoft.Identity.Client.ManagedIdentityApplicationBuilder\nMicrosoft.Identity.Client.ManagedIdentityApplicationBuilder.WithTelemetryClient(params Microsoft.IdentityModel.Abstractions.ITelemetryClient[] telemetryClients) -> Microsoft.Identity.Client.ManagedIdentityApplicationBuilder\n```\n\n----------------------------------------\n\nTITLE: Authentication Result Handling in MSAL.NET\nDESCRIPTION: API signatures for classes that handle authentication results including AuthenticationResult which contains access tokens, account information, and other metadata returned after successful authentication.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-android/PublicAPI.Shipped.txt#2025-04-23_snippet_14\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.AuthenticationResult\nMicrosoft.Identity.Client.AuthenticationResult.AccessToken.get -> string\nMicrosoft.Identity.Client.AuthenticationResult.AccessToken.set -> void\nMicrosoft.Identity.Client.AuthenticationResult.Account.get -> Microsoft.Identity.Client.IAccount\nMicrosoft.Identity.Client.AuthenticationResult.AdditionalResponseParameters.get -> System.Collections.Generic.IReadOnlyDictionary<string, string>\nMicrosoft.Identity.Client.AuthenticationResult.AuthenticationResult(string accessToken, bool isExtendedLifeTimeToken, string uniqueId, System.DateTimeOffset expiresOn, System.DateTimeOffset extendedExpiresOn, string tenantId, Microsoft.Identity.Client.IAccount account, string idToken, System.Collections.Generic.IEnumerable<string> scopes, System.Guid correlationId, Microsoft.Identity.Client.AuthenticationResultMetadata authenticationResultMetadata, string tokenType = \"Bearer\") -> void\nMicrosoft.Identity.Client.AuthenticationResult.AuthenticationResult(string accessToken, bool isExtendedLifeTimeToken, string uniqueId, System.DateTimeOffset expiresOn, System.DateTimeOffset extendedExpiresOn, string tenantId, Microsoft.Identity.Client.IAccount account, string idToken, System.Collections.Generic.IEnumerable<string> scopes, System.Guid correlationId, string tokenType = \"Bearer\", Microsoft.Identity.Client.AuthenticationResultMetadata authenticationResultMetadata = null, System.Security.Claims.ClaimsPrincipal claimsPrincipal = null, string spaAuthCode = null, System.Collections.Generic.IReadOnlyDictionary<string, string> additionalResponseParameters = null) -> void\nMicrosoft.Identity.Client.AuthenticationResult.AuthenticationResultMetadata.get -> Microsoft.Identity.Client.AuthenticationResultMetadata\nMicrosoft.Identity.Client.AuthenticationResult.ClaimsPrincipal.get -> System.Security.Claims.ClaimsPrincipal\nMicrosoft.Identity.Client.AuthenticationResult.CorrelationId.get -> System.Guid\nMicrosoft.Identity.Client.AuthenticationResult.CreateAuthorizationHeader() -> string\n```\n\n----------------------------------------\n\nTITLE: WWW-Authenticate Parameter Handling in MSAL.NET\nDESCRIPTION: Methods for creating and processing WWW-Authenticate headers for authentication challenges, enabling proper response to HTTP 401 challenges and resource authentication requirements.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0/PublicAPI.Shipped.txt#2025-04-23_snippet_70\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Client.WwwAuthenticateParameters.CreateFromAuthenticationHeaders(System.Net.Http.Headers.HttpResponseHeaders httpResponseHeaders) -> System.Collections.Generic.IReadOnlyList<Microsoft.Identity.Client.WwwAuthenticateParameters>\nstatic Microsoft.Identity.Client.WwwAuthenticateParameters.CreateFromAuthenticationHeaders(System.Net.Http.Headers.HttpResponseHeaders httpResponseHeaders, string scheme) -> Microsoft.Identity.Client.WwwAuthenticateParameters\nstatic Microsoft.Identity.Client.WwwAuthenticateParameters.CreateFromAuthenticationResponseAsync(string resourceUri, string scheme, System.Net.Http.HttpClient httpClient, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Microsoft.Identity.Client.WwwAuthenticateParameters>\nstatic Microsoft.Identity.Client.WwwAuthenticateParameters.CreateFromAuthenticationResponseAsync(string resourceUri, string scheme, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Microsoft.Identity.Client.WwwAuthenticateParameters>\nstatic Microsoft.Identity.Client.WwwAuthenticateParameters.CreateFromAuthenticationResponseAsync(string resourceUri, System.Net.Http.HttpClient httpClient, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<Microsoft.Identity.Client.WwwAuthenticateParameters>>\nstatic Microsoft.Identity.Client.WwwAuthenticateParameters.CreateFromAuthenticationResponseAsync(string resourceUri, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<Microsoft.Identity.Client.WwwAuthenticateParameters>>\nstatic Microsoft.Identity.Client.WwwAuthenticateParameters.CreateFromResourceResponseAsync(string resourceUri) -> System.Threading.Tasks.Task<Microsoft.Identity.Client.WwwAuthenticateParameters>\n```\n\n----------------------------------------\n\nTITLE: WWW-Authenticate Parameter Handling in MSAL.NET\nDESCRIPTION: Methods for creating WWW-Authenticate parameters from various sources, including authentication headers and resource responses.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-android/PublicAPI.Shipped.txt#2025-04-23_snippet_49\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Client.WwwAuthenticateParameters.CreateFromAuthenticationHeaders(System.Net.Http.Headers.HttpResponseHeaders httpResponseHeaders) -> System.Collections.Generic.IReadOnlyList<Microsoft.Identity.Client.WwwAuthenticateParameters>\nstatic Microsoft.Identity.Client.WwwAuthenticateParameters.CreateFromAuthenticationHeaders(System.Net.Http.Headers.HttpResponseHeaders httpResponseHeaders, string scheme) -> Microsoft.Identity.Client.WwwAuthenticateParameters\nstatic Microsoft.Identity.Client.WwwAuthenticateParameters.CreateFromAuthenticationResponseAsync(string resourceUri, string scheme, System.Net.Http.HttpClient httpClient, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Microsoft.Identity.Client.WwwAuthenticateParameters>\nstatic Microsoft.Identity.Client.WwwAuthenticateParameters.CreateFromAuthenticationResponseAsync(string resourceUri, string scheme, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Microsoft.Identity.Client.WwwAuthenticateParameters>\nstatic Microsoft.Identity.Client.WwwAuthenticateParameters.CreateFromAuthenticationResponseAsync(string resourceUri, System.Net.Http.HttpClient httpClient, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<Microsoft.Identity.Client.WwwAuthenticateParameters>>\nstatic Microsoft.Identity.Client.WwwAuthenticateParameters.CreateFromAuthenticationResponseAsync(string resourceUri, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<Microsoft.Identity.Client.WwwAuthenticateParameters>>\nstatic Microsoft.Identity.Client.WwwAuthenticateParameters.CreateFromResourceResponseAsync(string resourceUri) -> System.Threading.Tasks.Task<Microsoft.Identity.Client.WwwAuthenticateParameters>\nstatic Microsoft.Identity.Client.WwwAuthenticateParameters.CreateFromResourceResponseAsync(string resourceUri, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Microsoft.Identity.Client.WwwAuthenticateParameters>\n```\n\n----------------------------------------\n\nTITLE: Configuring Proof of Possession for Token Requests in C#\nDESCRIPTION: Extension method that configures a token request to use a specific key ID for proof of possession (PoP). PoP tokens provide stronger security by binding the token to a specific client key.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-ios/PublicAPI.Shipped.txt#2025-04-23_snippet_40\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Client.Extensibility.AbstractConfidentialClientAcquireTokenParameterBuilderExtension.WithProofOfPosessionKeyId<T>(this Microsoft.Identity.Client.AbstractAcquireTokenParameterBuilder<T> builder, string keyId, string expectedTokenTypeFromAad = \"Bearer\") -> Microsoft.Identity.Client.AbstractAcquireTokenParameterBuilder<T>\n```\n\n----------------------------------------\n\nTITLE: Authentication Extension Methods in C#\nDESCRIPTION: Collection of static extension methods for authentication parameter builders, including support for proof of possession, custom web UI, and additional cache parameters\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/netstandard2.0/PublicAPI.Shipped.txt#2025-04-23_snippet_86\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Client.Extensibility.AbstractConfidentialClientAcquireTokenParameterBuilderExtension.WithAdditionalCacheParameters<T>(this Microsoft.Identity.Client.AbstractAcquireTokenParameterBuilder<T> builder, System.Collections.Generic.IEnumerable<string> cacheParameters) -> Microsoft.Identity.Client.AbstractAcquireTokenParameterBuilder<T>\n\nstatic Microsoft.Identity.Client.Extensibility.AbstractConfidentialClientAcquireTokenParameterBuilderExtension.WithAuthenticationExtension<T>(this Microsoft.Identity.Client.AbstractAcquireTokenParameterBuilder<T> builder, Microsoft.Identity.Client.Extensibility.MsalAuthenticationExtension authenticationExtension) -> Microsoft.Identity.Client.AbstractAcquireTokenParameterBuilder<T>\n```\n\n----------------------------------------\n\nTITLE: Defining AadAuthorityAudience Enum in C#\nDESCRIPTION: This snippet defines an enumeration 'AadAuthorityAudience' which represents different types of Azure AD authority audiences. It includes options for various Azure AD configurations and Microsoft accounts.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0/PublicAPI.Shipped.txt#2025-04-23_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.AadAuthorityAudience\nMicrosoft.Identity.Client.AadAuthorityAudience.AzureAdAndPersonalMicrosoftAccount = 2 -> Microsoft.Identity.Client.AadAuthorityAudience\nMicrosoft.Identity.Client.AadAuthorityAudience.AzureAdMultipleOrgs = 3 -> Microsoft.Identity.Client.AadAuthorityAudience\nMicrosoft.Identity.Client.AadAuthorityAudience.AzureAdMyOrg = 1 -> Microsoft.Identity.Client.AadAuthorityAudience\nMicrosoft.Identity.Client.AadAuthorityAudience.None = 0 -> Microsoft.Identity.Client.AadAuthorityAudience\nMicrosoft.Identity.Client.AadAuthorityAudience.PersonalMicrosoftAccount = 4 -> Microsoft.Identity.Client.AadAuthorityAudience\n```\n\n----------------------------------------\n\nTITLE: Account-Related Classes for Identity Management\nDESCRIPTION: Classes for handling user account information, including AccountExtensions utility class and AccountId structure which stores identity information such as identifier, object ID, and tenant ID for an authenticated user.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0/PublicAPI.Shipped.txt#2025-04-23_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.AccountExtensions\nMicrosoft.Identity.Client.AccountId\nMicrosoft.Identity.Client.AccountId.AccountId(string adfsIdentifier) -> void\nMicrosoft.Identity.Client.AccountId.AccountId(string identifier, string objectId, string tenantId) -> void\nMicrosoft.Identity.Client.AccountId.Identifier.get -> string\nMicrosoft.Identity.Client.AccountId.ObjectId.get -> string\nMicrosoft.Identity.Client.AccountId.TenantId.get -> string\n```\n\n----------------------------------------\n\nTITLE: Adding Proof of Possession to Client Credential Flow in C#\nDESCRIPTION: Extension method specifically for confidential client applications that adds proof of possession capabilities to client credential flow. This enhances security by binding access tokens to a specific key.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-ios/PublicAPI.Shipped.txt#2025-04-23_snippet_41\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Client.Extensibility.AcquireTokenForClientBuilderExtensions.WithProofOfPosessionKeyId(this Microsoft.Identity.Client.AcquireTokenForClientParameterBuilder builder, string keyId, string expectedTokenTypeFromAad = \"Bearer\") -> Microsoft.Identity.Client.AcquireTokenForClientParameterBuilder\n```\n\n----------------------------------------\n\nTITLE: Converting Certificate to Base64 for JWT in PowerShell\nDESCRIPTION: Converts a certificate to Base64 format for use in the x5c field of a JWT. This is a crucial step in preparing certificate-based authentication with Azure Managed Identity.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/docs/msi_v2/msi_with_credential_design.md#2025-04-23_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n# Step 6: Convert certificate to Base64 for JWT (x5c field)\n$x5c = [System.Convert]::ToBase64String($cert.RawData)\nWrite-Output \"📜 x5c: $x5c\"\n```\n\n----------------------------------------\n\nTITLE: WithAuthority Method Overloads in AbstractApplicationBuilder\nDESCRIPTION: Multiple overloads of the WithAuthority method in the AbstractApplicationBuilder class that allow configuring the authority URL for the authentication application. These methods support different ways to specify the authority including AadAuthorityAudience enum, AzureCloudInstance enum, tenant identifier as string or GUID, and direct URI specification.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0/PublicAPI.Shipped.txt#2025-04-23_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.AbstractApplicationBuilder<T>.WithAuthority(Microsoft.Identity.Client.AadAuthorityAudience authorityAudience, bool validateAuthority = true) -> T\nMicrosoft.Identity.Client.AbstractApplicationBuilder<T>.WithAuthority(Microsoft.Identity.Client.AzureCloudInstance azureCloudInstance, Microsoft.Identity.Client.AadAuthorityAudience authorityAudience, bool validateAuthority = true) -> T\nMicrosoft.Identity.Client.AbstractApplicationBuilder<T>.WithAuthority(Microsoft.Identity.Client.AzureCloudInstance azureCloudInstance, string tenant, bool validateAuthority = true) -> T\nMicrosoft.Identity.Client.AbstractApplicationBuilder<T>.WithAuthority(Microsoft.Identity.Client.AzureCloudInstance azureCloudInstance, System.Guid tenantId, bool validateAuthority = true) -> T\nMicrosoft.Identity.Client.AbstractApplicationBuilder<T>.WithAuthority(string authorityUri, bool validateAuthority = true) -> T\nMicrosoft.Identity.Client.AbstractApplicationBuilder<T>.WithAuthority(string cloudInstanceUri, string tenant, bool validateAuthority = true) -> T\nMicrosoft.Identity.Client.AbstractApplicationBuilder<T>.WithAuthority(string cloudInstanceUri, System.Guid tenantId, bool validateAuthority = true) -> T\nMicrosoft.Identity.Client.AbstractApplicationBuilder<T>.WithAuthority(System.Uri authorityUri, bool validateAuthority = true) -> T\n```\n\n----------------------------------------\n\nTITLE: Implementing BrokerOptions Class in C#\nDESCRIPTION: Defines options for broker integration, including properties for enabling on specific operating systems and configuring broker behavior.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net462/PublicAPI.Shipped.txt#2025-04-23_snippet_16\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.BrokerOptions\nMicrosoft.Identity.Client.BrokerOptions.BrokerOptions(Microsoft.Identity.Client.BrokerOptions.OperatingSystems enabledOn) -> void\nMicrosoft.Identity.Client.BrokerOptions.EnabledOn.get -> Microsoft.Identity.Client.BrokerOptions.OperatingSystems\nMicrosoft.Identity.Client.BrokerOptions.ListOperatingSystemAccounts.get -> bool\nMicrosoft.Identity.Client.BrokerOptions.ListOperatingSystemAccounts.set -> void\nMicrosoft.Identity.Client.BrokerOptions.MsaPassthrough.get -> bool\nMicrosoft.Identity.Client.BrokerOptions.MsaPassthrough.set -> void\nMicrosoft.Identity.Client.BrokerOptions.OperatingSystems\nMicrosoft.Identity.Client.BrokerOptions.OperatingSystems.None = 0 -> Microsoft.Identity.Client.BrokerOptions.OperatingSystems\nMicrosoft.Identity.Client.BrokerOptions.OperatingSystems.Windows = 1 -> Microsoft.Identity.Client.BrokerOptions.OperatingSystems\nMicrosoft.Identity.Client.BrokerOptions.Title.get -> string\nMicrosoft.Identity.Client.BrokerOptions.Title.set -> void\n```\n\n----------------------------------------\n\nTITLE: Creating WWW-Authenticate Parameters in MSAL.NET\nDESCRIPTION: Static methods for creating WWW-Authenticate parameter objects from various sources including resource responses, HTTP headers, and header values. These methods support authentication challenges and claim extraction.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-ios/PublicAPI.Shipped.txt#2025-04-23_snippet_81\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Client.WwwAuthenticateParameters.CreateFromResourceResponseAsync(string resourceUri, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Microsoft.Identity.Client.WwwAuthenticateParameters>\nstatic Microsoft.Identity.Client.WwwAuthenticateParameters.CreateFromResourceResponseAsync(System.Net.Http.HttpClient httpClient, string resourceUri, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Microsoft.Identity.Client.WwwAuthenticateParameters>\nstatic Microsoft.Identity.Client.WwwAuthenticateParameters.CreateFromResponseHeaders(System.Net.Http.Headers.HttpResponseHeaders httpResponseHeaders, string scheme = \"Bearer\") -> Microsoft.Identity.Client.WwwAuthenticateParameters\nstatic Microsoft.Identity.Client.WwwAuthenticateParameters.CreateFromWwwAuthenticateHeaderValue(string wwwAuthenticateValue) -> Microsoft.Identity.Client.WwwAuthenticateParameters\nstatic Microsoft.Identity.Client.WwwAuthenticateParameters.GetClaimChallengeFromResponseHeaders(System.Net.Http.Headers.HttpResponseHeaders httpResponseHeaders, string scheme = \"Bearer\") -> string\n```\n\n----------------------------------------\n\nTITLE: PublicClientApplicationBuilder API Methods in C#\nDESCRIPTION: A collection of methods from the PublicClientApplicationBuilder class that configure various aspects of authentication including broker availability, redirect URIs, and platform-specific settings.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-android/PublicAPI.Shipped.txt#2025-04-23_snippet_29\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.PublicClientApplicationBuilder.IsBrokerAvailable() -> bool\nMicrosoft.Identity.Client.PublicClientApplicationBuilder.WithBroker(bool enableBroker = true) -> Microsoft.Identity.Client.PublicClientApplicationBuilder\nMicrosoft.Identity.Client.PublicClientApplicationBuilder.WithDefaultRedirectUri() -> Microsoft.Identity.Client.PublicClientApplicationBuilder\nMicrosoft.Identity.Client.PublicClientApplicationBuilder.WithIosKeychainSecurityGroup(string keychainSecurityGroup) -> Microsoft.Identity.Client.PublicClientApplicationBuilder\nMicrosoft.Identity.Client.PublicClientApplicationBuilder.WithKerberosTicketClaim(string servicePrincipalName, Microsoft.Identity.Client.Kerberos.KerberosTicketContainer ticketContainer) -> Microsoft.Identity.Client.PublicClientApplicationBuilder\nMicrosoft.Identity.Client.PublicClientApplicationBuilder.WithMultiCloudSupport(bool enableMultiCloudSupport) -> Microsoft.Identity.Client.PublicClientApplicationBuilder\nMicrosoft.Identity.Client.PublicClientApplicationBuilder.WithOidcAuthority(string authorityUri) -> Microsoft.Identity.Client.PublicClientApplicationBuilder\nMicrosoft.Identity.Client.PublicClientApplicationBuilder.WithParentActivityOrWindow(System.Func<Android.App.Activity> activityFunc) -> Microsoft.Identity.Client.PublicClientApplicationBuilder\nMicrosoft.Identity.Client.PublicClientApplicationBuilder.WithParentActivityOrWindow(System.Func<object> parentActivityOrWindowFunc) -> Microsoft.Identity.Client.PublicClientApplicationBuilder\nMicrosoft.Identity.Client.PublicClientApplicationBuilder.WithWindowsBrokerOptions(Microsoft.Identity.Client.WindowsBrokerOptions options) -> Microsoft.Identity.Client.PublicClientApplicationBuilder\n```\n\n----------------------------------------\n\nTITLE: Configuring SSH Certificate Authentication for Silent Flows in C#\nDESCRIPTION: Extension method that configures silent token acquisition to use SSH certificate authentication. This enables applications to obtain SSH certificates from Azure AD without user interaction when a token cache is available.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-ios/PublicAPI.Shipped.txt#2025-04-23_snippet_70\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Client.SSHCertificates.SSHExtensions.WithSSHCertificateAuthenticationScheme(this Microsoft.Identity.Client.AcquireTokenSilentParameterBuilder builder, string publicKeyJwk, string keyId) -> Microsoft.Identity.Client.AcquireTokenSilentParameterBuilder\n```\n\n----------------------------------------\n\nTITLE: Abstract Token Parameter Builder Methods in C#\nDESCRIPTION: Abstract class defining methods for building token acquisition parameters in MSAL.NET. This class provides various overloads to configure authority endpoints, including ADFS, AAD with different audiences, cloud instances, and B2C configurations.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-ios/PublicAPI.Shipped.txt#2025-04-23_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.AbstractAcquireTokenParameterBuilder<T>\nMicrosoft.Identity.Client.AbstractAcquireTokenParameterBuilder<T>.AbstractAcquireTokenParameterBuilder() -> void\nMicrosoft.Identity.Client.AbstractAcquireTokenParameterBuilder<T>.WithAdfsAuthority(string authorityUri, bool validateAuthority = true) -> T\nMicrosoft.Identity.Client.AbstractAcquireTokenParameterBuilder<T>.WithAuthority(Microsoft.Identity.Client.AadAuthorityAudience authorityAudience, bool validateAuthority = true) -> T\nMicrosoft.Identity.Client.AbstractAcquireTokenParameterBuilder<T>.WithAuthority(Microsoft.Identity.Client.AzureCloudInstance azureCloudInstance, Microsoft.Identity.Client.AadAuthorityAudience authorityAudience, bool validateAuthority = true) -> T\nMicrosoft.Identity.Client.AbstractAcquireTokenParameterBuilder<T>.WithAuthority(Microsoft.Identity.Client.AzureCloudInstance azureCloudInstance, string tenant, bool validateAuthority = true) -> T\nMicrosoft.Identity.Client.AbstractAcquireTokenParameterBuilder<T>.WithAuthority(Microsoft.Identity.Client.AzureCloudInstance azureCloudInstance, System.Guid tenantId, bool validateAuthority = true) -> T\nMicrosoft.Identity.Client.AbstractAcquireTokenParameterBuilder<T>.WithAuthority(string authorityUri, bool validateAuthority = true) -> T\nMicrosoft.Identity.Client.AbstractAcquireTokenParameterBuilder<T>.WithAuthority(string cloudInstanceUri, string tenant, bool validateAuthority = true) -> T\nMicrosoft.Identity.Client.AbstractAcquireTokenParameterBuilder<T>.WithAuthority(string cloudInstanceUri, System.Guid tenantId, bool validateAuthority = true) -> T\nMicrosoft.Identity.Client.AbstractAcquireTokenParameterBuilder<T>.WithB2CAuthority(string authorityUri) -> T\n```\n\n----------------------------------------\n\nTITLE: Defining Authority Audience Enumeration in C#\nDESCRIPTION: Enumeration defining the possible audience types for Azure Active Directory (AAD) authorities. These values are used to configure the authority when building authentication requests to target specific identity directories.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-android/PublicAPI.Shipped.txt#2025-04-23_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.AadAuthorityAudience\nMicrosoft.Identity.Client.AadAuthorityAudience.AzureAdAndPersonalMicrosoftAccount = 2 -> Microsoft.Identity.Client.AadAuthorityAudience\nMicrosoft.Identity.Client.AadAuthorityAudience.AzureAdMultipleOrgs = 3 -> Microsoft.Identity.Client.AadAuthorityAudience\nMicrosoft.Identity.Client.AadAuthorityAudience.AzureAdMyOrg = 1 -> Microsoft.Identity.Client.AadAuthorityAudience\nMicrosoft.Identity.Client.AadAuthorityAudience.None = 0 -> Microsoft.Identity.Client.AadAuthorityAudience\nMicrosoft.Identity.Client.AadAuthorityAudience.PersonalMicrosoftAccount = 4 -> Microsoft.Identity.Client.AadAuthorityAudience\n```\n\n----------------------------------------\n\nTITLE: Defining AcquireTokenOnBehalfOfParameterBuilder Class in C#\nDESCRIPTION: Defines the AcquireTokenOnBehalfOfParameterBuilder class with methods for configuring on-behalf-of token acquisition parameters.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/netstandard2.0/PublicAPI.Shipped.txt#2025-04-23_snippet_24\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.AcquireTokenOnBehalfOfParameterBuilder\nMicrosoft.Identity.Client.AcquireTokenOnBehalfOfParameterBuilder.WithCcsRoutingHint(string userName) -> Microsoft.Identity.Client.AcquireTokenOnBehalfOfParameterBuilder\nMicrosoft.Identity.Client.AcquireTokenOnBehalfOfParameterBuilder.WithCcsRoutingHint(string userObjectIdentifier, string tenantIdentifier) -> Microsoft.Identity.Client.AcquireTokenOnBehalfOfParameterBuilder\nMicrosoft.Identity.Client.AcquireTokenOnBehalfOfParameterBuilder.WithForceRefresh(bool forceRefresh) -> Microsoft.Identity.Client.AcquireTokenOnBehalfOfParameterBuilder\nMicrosoft.Identity.Client.AcquireTokenOnBehalfOfParameterBuilder.WithSendX5C(bool withSendX5C) -> Microsoft.Identity.Client.AcquireTokenOnBehalfOfParameterBuilder\n```\n\n----------------------------------------\n\nTITLE: Certificate Management Script for MSI V2\nDESCRIPTION: PowerShell script demonstrating certificate management for MSI V2 authentication. Handles searching for existing certificates, creating new self-signed certificates, and computing certificate identifiers.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/docs/msi_v2/msi_with_credential_design.md#2025-04-23_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n# Define certificate subject names\n$searchSubject = \"CN=devicecert.mtlsauth.local\"  # Existing cert to look for\n$newCertSubject = \"CN=mtls-auth\"  # Subject for new self-signed cert\n\n# Step 1: Search for an existing certificate in LocalMachine\\My\n$cert = Get-ChildItem -Path \"Cert:\\LocalMachine\\My\" | Where-Object { $_.Subject -eq $searchSubject -and $_.NotAfter -gt (Get-Date) }\n\n# Step 2: If not found, search in CurrentUser\\My\nif (-not $cert) {\n    Write-Output \"🔍 No valid certificate found in LocalMachine\\My. Checking CurrentUser\\My...\"\n    $cert = Get-ChildItem -Path \"Cert:\\CurrentUser\\My\" | Where-Object { $_.Subject -eq $searchSubject -and $_.NotAfter -gt (Get-Date) }\n}\n\n# Step 3: If found, use it\nif ($cert) {\n    Write-Output \"✅ Found valid certificate: $($cert.Subject)\"\n} else {\n    Write-Output \"❌ No valid certificate found in both stores. Creating a new self-signed certificate in `CurrentUser\\My`...\"\n\n    # Step 4: Generate a new self-signed certificate in `CurrentUser\\My`\n    # For POC we are creating the cert in the user store. But in Product this will be a in-memory cert\n    $cert = New-SelfSignedCertificate `\n        -Subject $newCertSubject `\n        -CertStoreLocation \"Cert:\\CurrentUser\\My\" `\n        -KeyExportPolicy Exportable `\n        -KeySpec Signature `\n        -KeyUsage DigitalSignature, KeyEncipherment `\n        -TextExtension @(\"2.5.29.37={text}1.3.6.1.5.5.7.3.2\") `\n        -NotAfter (Get-Date).AddDays(90)\n\n    Write-Output \"✅ Created certificate in CurrentUser\\My: $($cert.Thumbprint)\"\n}\n\n# Ensure `$cert` is valid\nif (-not $cert) {\n    Write-Error \"❌ No certificate found or created. Exiting.\"\n    exit\n}\n\n# Step 5: Compute SHA-256 of the Public Key for `kid`\n$publicKeyBytes = $cert.GetPublicKey()\n$sha256 = New-Object System.Security.Cryptography.SHA256Managed\n$certSha256 = [BitConverter]::ToString($sha256.ComputeHash($publicKeyBytes)) -replace \"-\", \"\"\n\nWrite-Output \"🔐 Using SHA-256 Certificate Identifier (kid): $certSha256\"\n```\n\n----------------------------------------\n\nTITLE: Username and Password Authentication Parameter Builders\nDESCRIPTION: Classes for configuring token acquisition using username and password flow, both for confidential clients and public clients. Includes methods for configuring federation metadata and proof of possession.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0/PublicAPI.Shipped.txt#2025-04-23_snippet_15\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.AcquireTokenByUsernameAndPasswordConfidentialParameterBuilder\nMicrosoft.Identity.Client.AcquireTokenByUsernamePasswordParameterBuilder\nMicrosoft.Identity.Client.AcquireTokenByUsernamePasswordParameterBuilder.WithFederationMetadata(string federationMetadata) -> Microsoft.Identity.Client.AcquireTokenByUsernamePasswordParameterBuilder\nMicrosoft.Identity.Client.AcquireTokenByUsernamePasswordParameterBuilder.WithProofOfPossession(string nonce, System.Net.Http.HttpMethod httpMethod, System.Uri requestUri) -> Microsoft.Identity.Client.AcquireTokenByUsernamePasswordParameterBuilder\n```\n\n----------------------------------------\n\nTITLE: Application Builder Methods in C#\nDESCRIPTION: Static factory methods for creating public client applications and managed identity applications with various configurations\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/netstandard2.0/PublicAPI.Shipped.txt#2025-04-23_snippet_88\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Client.PublicClientApplicationBuilder.Create(string clientId) -> Microsoft.Identity.Client.PublicClientApplicationBuilder\n\nstatic Microsoft.Identity.Client.PublicClientApplicationBuilder.CreateWithApplicationOptions(Microsoft.Identity.Client.PublicClientApplicationOptions options) -> Microsoft.Identity.Client.PublicClientApplicationBuilder\n\nstatic Microsoft.Identity.Client.ManagedIdentityApplicationBuilder.Create(Microsoft.Identity.Client.AppConfig.ManagedIdentityId managedIdentityId) -> Microsoft.Identity.Client.ManagedIdentityApplicationBuilder\n```\n\n----------------------------------------\n\nTITLE: Obtaining WWW-Authenticate Parameters from Resource Response in C#\nDESCRIPTION: Static method that obtains authentication parameters from a resource response. This is a simplified method for getting authentication challenges from a resource.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-ios/PublicAPI.Shipped.txt#2025-04-23_snippet_80\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Client.WwwAuthenticateParameters.CreateFromResourceResponseAsync(string resourceUri) -> System.Threading.Tasks.Task<Microsoft.Identity.Client.WwwAuthenticateParameters>\n```\n\n----------------------------------------\n\nTITLE: Implementing SLC Revocation Handling in C#\nDESCRIPTION: Pseudocode implementation in C# demonstrating how MSAL should handle invalid_client errors from eSTS by requesting a new credential from IMDS with the appropriate error code.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/docs/msi_v2/slc_revocation_spec.md#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar tokenResponse = HttpClient.post(\"https://ests-r/token\", clientCredential=currentSLC);\n\nif (tokenResponse.get(\"error\") == \"invalid_client\") {\n    if (tokenResponse.get(\"suberror\") != empty) {\n        suberror = tokenResponse.get(\"suberror\");\n    } else {\n        suberror = \"unspecified\";\n    }\n    currentSLC = HttpClient.post(\n        \"http://169.254.169.254/.../credential?...&error_code=\" + suberror\n    );\n    \n    tokenResponse = HttpClient.post(\"https://ests-r/token\", clientCredential=currentSLC);\n}\n\nreturn tokenResponse;\n```\n\n----------------------------------------\n\nTITLE: MsalServiceException Class in MSAL.NET\nDESCRIPTION: Defines an exception class for service-side errors during authentication. Includes properties for HTTP response details, status code, claims, and constructors with various parameter combinations.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/netstandard2.0/PublicAPI.Shipped.txt#2025-04-23_snippet_72\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.MsalServiceException\nMicrosoft.Identity.Client.MsalServiceException.Claims.get -> string\nMicrosoft.Identity.Client.MsalServiceException.Headers.get -> System.Net.Http.Headers.HttpResponseHeaders\nMicrosoft.Identity.Client.MsalServiceException.Headers.set -> void\nMicrosoft.Identity.Client.MsalServiceException.MsalServiceException(string errorCode, string errorMessage) -> void\nMicrosoft.Identity.Client.MsalServiceException.MsalServiceException(string errorCode, string errorMessage, int statusCode) -> void\nMicrosoft.Identity.Client.MsalServiceException.MsalServiceException(string errorCode, string errorMessage, int statusCode, string claims, System.Exception innerException) -> void\nMicrosoft.Identity.Client.MsalServiceException.MsalServiceException(string errorCode, string errorMessage, int statusCode, System.Exception innerException) -> void\nMicrosoft.Identity.Client.MsalServiceException.MsalServiceException(string errorCode, string errorMessage, System.Exception innerException) -> void\nMicrosoft.Identity.Client.MsalServiceException.ResponseBody.get -> string\nMicrosoft.Identity.Client.MsalServiceException.ResponseBody.set -> void\nMicrosoft.Identity.Client.MsalServiceException.StatusCode.get -> int\n```\n\n----------------------------------------\n\nTITLE: Defining AadAuthorityAudience Enum in C# for MSAL.NET\nDESCRIPTION: This snippet defines an enum called AadAuthorityAudience, which represents different types of Azure AD authority audiences. It includes options for various Azure AD configurations and Microsoft accounts.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/netstandard2.0/PublicAPI.Shipped.txt#2025-04-23_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.AadAuthorityAudience\nMicrosoft.Identity.Client.AadAuthorityAudience.AzureAdAndPersonalMicrosoftAccount = 2 -> Microsoft.Identity.Client.AadAuthorityAudience\nMicrosoft.Identity.Client.AadAuthorityAudience.AzureAdMultipleOrgs = 3 -> Microsoft.Identity.Client.AadAuthorityAudience\nMicrosoft.Identity.Client.AadAuthorityAudience.AzureAdMyOrg = 1 -> Microsoft.Identity.Client.AadAuthorityAudience\nMicrosoft.Identity.Client.AadAuthorityAudience.None = 0 -> Microsoft.Identity.Client.AadAuthorityAudience\nMicrosoft.Identity.Client.AadAuthorityAudience.PersonalMicrosoftAccount = 4 -> Microsoft.Identity.Client.AadAuthorityAudience\n```\n\n----------------------------------------\n\nTITLE: ClientApplicationBase Class Method Signatures in C#\nDESCRIPTION: Defines the base methods for Microsoft Identity Client applications, including token acquisition and account management functionality. These methods are available to both public and confidential client applications.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-android/PublicAPI.Shipped.txt#2025-04-23_snippet_19\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.ClientApplicationBase.AcquireTokenSilent(System.Collections.Generic.IEnumerable<string> scopes, Microsoft.Identity.Client.IAccount account) -> Microsoft.Identity.Client.AcquireTokenSilentParameterBuilder\nMicrosoft.Identity.Client.ClientApplicationBase.AcquireTokenSilent(System.Collections.Generic.IEnumerable<string> scopes, string loginHint) -> Microsoft.Identity.Client.AcquireTokenSilentParameterBuilder\nMicrosoft.Identity.Client.ClientApplicationBase.AppConfig.get -> Microsoft.Identity.Client.IAppConfig\nMicrosoft.Identity.Client.ClientApplicationBase.Authority.get -> string\nMicrosoft.Identity.Client.ClientApplicationBase.GetAccountAsync(string accountId) -> System.Threading.Tasks.Task<Microsoft.Identity.Client.IAccount>\nMicrosoft.Identity.Client.ClientApplicationBase.GetAccountAsync(string accountId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Microsoft.Identity.Client.IAccount>\nMicrosoft.Identity.Client.ClientApplicationBase.GetAccountsAsync() -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.Identity.Client.IAccount>>\nMicrosoft.Identity.Client.ClientApplicationBase.GetAccountsAsync(string userFlow) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.Identity.Client.IAccount>>\nMicrosoft.Identity.Client.ClientApplicationBase.GetAccountsAsync(string userFlow, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.Identity.Client.IAccount>>\nMicrosoft.Identity.Client.ClientApplicationBase.GetAccountsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.Identity.Client.IAccount>>\nMicrosoft.Identity.Client.ClientApplicationBase.RemoveAsync(Microsoft.Identity.Client.IAccount account) -> System.Threading.Tasks.Task\nMicrosoft.Identity.Client.ClientApplicationBase.RemoveAsync(Microsoft.Identity.Client.IAccount account, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task\nMicrosoft.Identity.Client.ClientApplicationBase.UserTokenCache.get -> Microsoft.Identity.Client.ITokenCache\n```\n\n----------------------------------------\n\nTITLE: Defining IAppConfig Interface in C#\nDESCRIPTION: Declares the IAppConfig interface with various configuration properties for MSAL applications.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/netstandard2.0/PublicAPI.Shipped.txt#2025-04-23_snippet_56\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.IAppConfig\nMicrosoft.Identity.Client.IAppConfig.ClientCapabilities.get -> System.Collections.Generic.IEnumerable<string>\nMicrosoft.Identity.Client.IAppConfig.ClientCredentialCertificate.get -> System.Security.Cryptography.X509Certificates.X509Certificate2\nMicrosoft.Identity.Client.IAppConfig.ClientId.get -> string\nMicrosoft.Identity.Client.IAppConfig.ClientName.get -> string\nMicrosoft.Identity.Client.IAppConfig.ClientSecret.get -> string\nMicrosoft.Identity.Client.IAppConfig.ClientVersion.get -> string\nMicrosoft.Identity.Client.IAppConfig.EnablePiiLogging.get -> bool\nMicrosoft.Identity.Client.IAppConfig.ExperimentalFeaturesEnabled.get -> bool\nMicrosoft.Identity.Client.IAppConfig.ExtraQueryParameters.get -> System.Collections.Generic.IDictionary<string, string>\nMicrosoft.Identity.Client.IAppConfig.HttpClientFactory.get -> Microsoft.Identity.Client.IMsalHttpClientFactory\nMicrosoft.Identity.Client.IAppConfig.IsBrokerEnabled.get -> bool\nMicrosoft.Identity.Client.IAppConfig.IsDefaultPlatformLoggingEnabled.get -> bool\nMicrosoft.Identity.Client.IAppConfig.LegacyCacheCompatibilityEnabled.get -> bool\nMicrosoft.Identity.Client.IAppConfig.LoggingCallback.get -> Microsoft.Identity.Client.LogCallback\nMicrosoft.Identity.Client.IAppConfig.LogLevel.get -> Microsoft.Identity.Client.LogLevel\nMicrosoft.Identity.Client.IAppConfig.ParentActivityOrWindowFunc.get -> System.Func<object>\nMicrosoft.Identity.Client.IAppConfig.RedirectUri.get -> string\nMicrosoft.Identity.Client.IAppConfig.TelemetryConfig.get -> Microsoft.Identity.Client.ITelemetryConfig\nMicrosoft.Identity.Client.IAppConfig.TenantId.get -> string\n```\n\n----------------------------------------\n\nTITLE: MSAL Exception Classes\nDESCRIPTION: Definitions for various MSAL exception classes including MsalException, MsalClientException, MsalServiceException, and related specialized exceptions.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net472/PublicAPI.Shipped.txt#2025-04-23_snippet_14\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.MsalException.MsalException() -> void\nMicrosoft.Identity.Client.MsalException.MsalException(string errorCode) -> void\nMicrosoft.Identity.Client.MsalException.MsalException(string errorCode, string errorMessage) -> void\nMicrosoft.Identity.Client.MsalException.MsalException(string errorCode, string errorMessage, System.Exception innerException) -> void\n\nMicrosoft.Identity.Client.MsalServiceException.MsalServiceException(string errorCode, string errorMessage) -> void\nMicrosoft.Identity.Client.MsalServiceException.MsalServiceException(string errorCode, string errorMessage, int statusCode) -> void\n```\n\n----------------------------------------\n\nTITLE: WWW-Authenticate Header Processing in MSAL.NET\nDESCRIPTION: Methods for creating and processing WWW-Authenticate parameters from HTTP responses, supporting various authentication schemes and resource challenges.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net462/PublicAPI.Shipped.txt#2025-04-23_snippet_35\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Client.WwwAuthenticateParameters.CreateFromAuthenticationHeaders(System.Net.Http.Headers.HttpResponseHeaders httpResponseHeaders) -> System.Collections.Generic.IReadOnlyList<Microsoft.Identity.Client.WwwAuthenticateParameters>\nstatic Microsoft.Identity.Client.WwwAuthenticateParameters.CreateFromAuthenticationHeaders(System.Net.Http.Headers.HttpResponseHeaders httpResponseHeaders, string scheme) -> Microsoft.Identity.Client.WwwAuthenticateParameters\nstatic Microsoft.Identity.Client.WwwAuthenticateParameters.CreateFromAuthenticationResponseAsync(string resourceUri, string scheme, System.Net.Http.HttpClient httpClient, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Microsoft.Identity.Client.WwwAuthenticateParameters>\nstatic Microsoft.Identity.Client.WwwAuthenticateParameters.CreateFromAuthenticationResponseAsync(string resourceUri, string scheme, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Microsoft.Identity.Client.WwwAuthenticateParameters>\nstatic Microsoft.Identity.Client.WwwAuthenticateParameters.CreateFromAuthenticationResponseAsync(string resourceUri, System.Net.Http.HttpClient httpClient, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<Microsoft.Identity.Client.WwwAuthenticateParameters>>\nstatic Microsoft.Identity.Client.WwwAuthenticateParameters.CreateFromAuthenticationResponseAsync(string resourceUri, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<Microsoft.Identity.Client.WwwAuthenticateParameters>>\nstatic Microsoft.Identity.Client.WwwAuthenticateParameters.CreateFromResourceResponseAsync(string resourceUri) -> System.Threading.Tasks.Task<Microsoft.Identity.Client.WwwAuthenticateParameters>\nstatic Microsoft.Identity.Client.WwwAuthenticateParameters.CreateFromResourceResponseAsync(string resourceUri, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Microsoft.Identity.Client.WwwAuthenticateParameters>\nstatic Microsoft.Identity.Client.WwwAuthenticateParameters.CreateFromResourceResponseAsync(System.Net.Http.HttpClient httpClient, string resourceUri, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Microsoft.Identity.Client.WwwAuthenticateParameters>\nstatic Microsoft.Identity.Client.WwwAuthenticateParameters.CreateFromResponseHeaders(System.Net.Http.Headers.HttpResponseHeaders httpResponseHeaders, string scheme = \"Bearer\") -> Microsoft.Identity.Client.WwwAuthenticateParameters\nstatic Microsoft.Identity.Client.WwwAuthenticateParameters.CreateFromWwwAuthenticateHeaderValue(string wwwAuthenticateValue) -> Microsoft.Identity.Client.WwwAuthenticateParameters\nstatic Microsoft.Identity.Client.WwwAuthenticateParameters.GetClaimChallengeFromResponseHeaders(System.Net.Http.Headers.HttpResponseHeaders httpResponseHeaders, string scheme = \"Bearer\") -> string\n```\n\n----------------------------------------\n\nTITLE: MSAL.NET Authentication Parameter Getters and Setters\nDESCRIPTION: Interface and class definitions for Microsoft Authentication Library parameter handling, including token providers, authentication extensions, and web UI customization.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0/PublicAPI.Shipped.txt#2025-04-23_snippet_35\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.Extensibility.AppTokenProviderParameters.CancellationToken.get -> System.Threading.CancellationToken\nMicrosoft.Identity.Client.Extensibility.AppTokenProviderParameters.Claims.get -> string\nMicrosoft.Identity.Client.Extensibility.AppTokenProviderParameters.CorrelationId.get -> string\nMicrosoft.Identity.Client.Extensibility.AppTokenProviderParameters.Scopes.get -> System.Collections.Generic.IEnumerable<string>\nMicrosoft.Identity.Client.Extensibility.AppTokenProviderParameters.TenantId.get -> string\n```\n\n----------------------------------------\n\nTITLE: Authentication Scheme Interfaces\nDESCRIPTION: Interface definitions for authentication operations including token formatting, request parameters, and cryptographic operations for Proof of Possession (PoP) tokens.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0/PublicAPI.Shipped.txt#2025-04-23_snippet_26\n\nLANGUAGE: C#\nCODE:\n```\npublic interface IAuthenticationOperation\n{\n    string AccessTokenType { get; }\n    string AuthorizationHeaderPrefix { get; }\n    string KeyId { get; }\n    int TelemetryTokenType { get; }\n    void FormatResult(AuthenticationResult authenticationResult);\n    IReadOnlyDictionary<string, string> GetTokenRequestParams();\n}\n```\n\n----------------------------------------\n\nTITLE: Resource Provider Extensions for Confidential Clients in MSAL.NET (C#)\nDESCRIPTION: Extension classes and methods for resource provider scenarios, including certificate handling, token hashing, and HTTP client factory interfaces. These components extend MSAL functionality for specific integration patterns.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/netstandard2.0/PublicAPI.Shipped.txt#2025-04-23_snippet_95\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.RP.ConfidentialClientApplicationBuilderForResourceProviders\nstatic Microsoft.Identity.Client.RP.ConfidentialClientApplicationBuilderForResourceProviders.WithCertificate(this Microsoft.Identity.Client.ConfidentialClientApplicationBuilder builder, System.Security.Cryptography.X509Certificates.X509Certificate2 certificate, bool sendX5C, bool associateTokensWithCertificateSerialNumber) -> Microsoft.Identity.Client.ConfidentialClientApplicationBuilder\nMicrosoft.Identity.Client.TokenCacheNotificationArgs.NoDistributedCacheUseReason.get -> string\nMicrosoft.Identity.Client.RP.AcquireTokenForClientParameterBuilderForResourceProviders\nstatic Microsoft.Identity.Client.RP.AcquireTokenForClientParameterBuilderForResourceProviders.WithAccessTokenSha256ToRefresh(this Microsoft.Identity.Client.AcquireTokenForClientParameterBuilder builder, string hash) -> Microsoft.Identity.Client.AcquireTokenForClientParameterBuilder\nMicrosoft.Identity.Client.IMsalSFHttpClientFactory\nMicrosoft.Identity.Client.IMsalSFHttpClientFactory.GetHttpClient(System.Func<System.Net.Http.HttpRequestMessage, System.Security.Cryptography.X509Certificates.X509Certificate2, System.Security.Cryptography.X509Certificates.X509Chain, System.Net.Security.SslPolicyErrors, bool> validateServerCert) -> System.Net.Http.HttpClient\n```\n\n----------------------------------------\n\nTITLE: AcquireTokenInteractiveParameterBuilder Methods in C#\nDESCRIPTION: Methods for configuring the AcquireTokenInteractiveParameterBuilder, including account settings, web view options, and various interactive authentication parameters.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/netstandard2.0/PublicAPI.Shipped.txt#2025-04-23_snippet_23\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.AcquireTokenInteractiveParameterBuilder.WithAccount(Microsoft.Identity.Client.IAccount account) -> Microsoft.Identity.Client.AcquireTokenInteractiveParameterBuilder\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.AcquireTokenInteractiveParameterBuilder.WithEmbeddedWebViewOptions(Microsoft.Identity.Client.EmbeddedWebViewOptions options) -> Microsoft.Identity.Client.AcquireTokenInteractiveParameterBuilder\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.AcquireTokenInteractiveParameterBuilder.WithExtraScopesToConsent(System.Collections.Generic.IEnumerable<string> extraScopesToConsent) -> Microsoft.Identity.Client.AcquireTokenInteractiveParameterBuilder\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.AcquireTokenInteractiveParameterBuilder.WithLoginHint(string loginHint) -> Microsoft.Identity.Client.AcquireTokenInteractiveParameterBuilder\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.AcquireTokenInteractiveParameterBuilder.WithParentActivityOrWindow(object parent) -> Microsoft.Identity.Client.AcquireTokenInteractiveParameterBuilder\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.AcquireTokenInteractiveParameterBuilder.WithParentActivityOrWindow(System.IntPtr window) -> Microsoft.Identity.Client.AcquireTokenInteractiveParameterBuilder\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.AcquireTokenInteractiveParameterBuilder.WithPrompt(Microsoft.Identity.Client.Prompt prompt) -> Microsoft.Identity.Client.AcquireTokenInteractiveParameterBuilder\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.AcquireTokenInteractiveParameterBuilder.WithProofOfPossession(string nonce, System.Net.Http.HttpMethod httpMethod, System.Uri requestUri) -> Microsoft.Identity.Client.AcquireTokenInteractiveParameterBuilder\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.AcquireTokenInteractiveParameterBuilder.WithSystemWebViewOptions(Microsoft.Identity.Client.SystemWebViewOptions options) -> Microsoft.Identity.Client.AcquireTokenInteractiveParameterBuilder\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.AcquireTokenInteractiveParameterBuilder.WithUseEmbeddedWebView(bool useEmbeddedWebView) -> Microsoft.Identity.Client.AcquireTokenInteractiveParameterBuilder\n```\n\n----------------------------------------\n\nTITLE: MsalUiRequiredException Class in MSAL.NET\nDESCRIPTION: Defines an exception class for scenarios where user interaction is required to complete authentication. Includes a classification property and constructors for different error information combinations.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/netstandard2.0/PublicAPI.Shipped.txt#2025-04-23_snippet_74\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.MsalUiRequiredException\nMicrosoft.Identity.Client.MsalUiRequiredException.Classification.get -> Microsoft.Identity.Client.UiRequiredExceptionClassification\nMicrosoft.Identity.Client.MsalUiRequiredException.MsalUiRequiredException(string errorCode, string errorMessage) -> void\nMicrosoft.Identity.Client.MsalUiRequiredException.MsalUiRequiredException(string errorCode, string errorMessage, System.Exception innerException) -> void\nMicrosoft.Identity.Client.MsalUiRequiredException.MsalUiRequiredException(string errorCode, string errorMessage, System.Exception innerException, Microsoft.Identity.Client.UiRequiredExceptionClassification classification) -> void\n```\n\n----------------------------------------\n\nTITLE: Implementing AbstractAcquireTokenParameterBuilder in C#\nDESCRIPTION: Abstract generic class for token acquisition parameter builders in MSAL.NET. This class provides methods for configuring authority settings, claims, scopes, and other parameters used when requesting authentication tokens.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-android/PublicAPI.Shipped.txt#2025-04-23_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.AbstractAcquireTokenParameterBuilder<T>\nMicrosoft.Identity.Client.AbstractAcquireTokenParameterBuilder<T>.AbstractAcquireTokenParameterBuilder() -> void\nMicrosoft.Identity.Client.AbstractAcquireTokenParameterBuilder<T>.WithAdfsAuthority(string authorityUri, bool validateAuthority = true) -> T\nMicrosoft.Identity.Client.AbstractAcquireTokenParameterBuilder<T>.WithAuthority(Microsoft.Identity.Client.AadAuthorityAudience authorityAudience, bool validateAuthority = true) -> T\nMicrosoft.Identity.Client.AbstractAcquireTokenParameterBuilder<T>.WithAuthority(Microsoft.Identity.Client.AzureCloudInstance azureCloudInstance, Microsoft.Identity.Client.AadAuthorityAudience authorityAudience, bool validateAuthority = true) -> T\nMicrosoft.Identity.Client.AbstractAcquireTokenParameterBuilder<T>.WithAuthority(Microsoft.Identity.Client.AzureCloudInstance azureCloudInstance, string tenant, bool validateAuthority = true) -> T\nMicrosoft.Identity.Client.AbstractAcquireTokenParameterBuilder<T>.WithAuthority(Microsoft.Identity.Client.AzureCloudInstance azureCloudInstance, System.Guid tenantId, bool validateAuthority = true) -> T\nMicrosoft.Identity.Client.AbstractAcquireTokenParameterBuilder<T>.WithAuthority(string authorityUri, bool validateAuthority = true) -> T\nMicrosoft.Identity.Client.AbstractAcquireTokenParameterBuilder<T>.WithAuthority(string cloudInstanceUri, string tenant, bool validateAuthority = true) -> T\nMicrosoft.Identity.Client.AbstractAcquireTokenParameterBuilder<T>.WithAuthority(string cloudInstanceUri, System.Guid tenantId, bool validateAuthority = true) -> T\nMicrosoft.Identity.Client.AbstractAcquireTokenParameterBuilder<T>.WithB2CAuthority(string authorityUri) -> T\nMicrosoft.Identity.Client.AbstractAcquireTokenParameterBuilder<T>.WithClaims(string claims) -> T\nMicrosoft.Identity.Client.AbstractAcquireTokenParameterBuilder<T>.WithExtraQueryParameters(string extraQueryParameters) -> T\nMicrosoft.Identity.Client.AbstractAcquireTokenParameterBuilder<T>.WithScopes(System.Collections.Generic.IEnumerable<string> scopes) -> T\nMicrosoft.Identity.Client.AbstractAcquireTokenParameterBuilder<T>.WithTenantId(string tenantId) -> T\n```\n\n----------------------------------------\n\nTITLE: Authentication Continuation Helper in MSAL.NET\nDESCRIPTION: API signature for the AuthenticationContinuationHelper class which is used to handle redirection in authentication flows, particularly in mobile applications.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-android/PublicAPI.Shipped.txt#2025-04-23_snippet_18\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.AuthenticationContinuationHelper\n```\n\n----------------------------------------\n\nTITLE: Service Exception Classes for Authentication Errors in C#\nDESCRIPTION: Exception classes for handling service-related authentication errors. Includes properties for HTTP status codes, response headers/body, and specialized throttling exceptions.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0/PublicAPI.Shipped.txt#2025-04-23_snippet_47\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.MsalServiceException\nMicrosoft.Identity.Client.MsalServiceException.Claims.get -> string\nMicrosoft.Identity.Client.MsalServiceException.Headers.get -> System.Net.Http.Headers.HttpResponseHeaders\nMicrosoft.Identity.Client.MsalServiceException.Headers.set -> void\nMicrosoft.Identity.Client.MsalServiceException.MsalServiceException(string errorCode, string errorMessage) -> void\nMicrosoft.Identity.Client.MsalServiceException.MsalServiceException(string errorCode, string errorMessage, int statusCode) -> void\nMicrosoft.Identity.Client.MsalServiceException.MsalServiceException(string errorCode, string errorMessage, int statusCode, string claims, System.Exception innerException) -> void\nMicrosoft.Identity.Client.MsalServiceException.MsalServiceException(string errorCode, string errorMessage, int statusCode, System.Exception innerException) -> void\nMicrosoft.Identity.Client.MsalServiceException.MsalServiceException(string errorCode, string errorMessage, System.Exception innerException) -> void\nMicrosoft.Identity.Client.MsalServiceException.ResponseBody.get -> string\nMicrosoft.Identity.Client.MsalServiceException.ResponseBody.set -> void\nMicrosoft.Identity.Client.MsalServiceException.StatusCode.get -> int\nMicrosoft.Identity.Client.MsalThrottledServiceException\nMicrosoft.Identity.Client.MsalThrottledServiceException.MsalThrottledServiceException(Microsoft.Identity.Client.MsalServiceException originalException) -> void\nMicrosoft.Identity.Client.MsalThrottledServiceException.OriginalServiceException.get -> Microsoft.Identity.Client.MsalServiceException\nMicrosoft.Identity.Client.MsalThrottledUiRequiredException\nMicrosoft.Identity.Client.MsalThrottledUiRequiredException.MsalThrottledUiRequiredException(Microsoft.Identity.Client.MsalUiRequiredException originalException) -> void\nMicrosoft.Identity.Client.MsalThrottledUiRequiredException.OriginalServiceException.get -> Microsoft.Identity.Client.MsalUiRequiredException\nMicrosoft.Identity.Client.MsalUiRequiredException\nMicrosoft.Identity.Client.MsalUiRequiredException.Classification.get -> Microsoft.Identity.Client.UiRequiredExceptionClassification\nMicrosoft.Identity.Client.MsalUiRequiredException.MsalUiRequiredException(string errorCode, string errorMessage) -> void\nMicrosoft.Identity.Client.MsalUiRequiredException.MsalUiRequiredException(string errorCode, string errorMessage, System.Exception innerException) -> void\nMicrosoft.Identity.Client.MsalUiRequiredException.MsalUiRequiredException(string errorCode, string errorMessage, System.Exception innerException, Microsoft.Identity.Client.UiRequiredExceptionClassification classification) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining AcquireTokenSilentParameterBuilder Class in C#\nDESCRIPTION: Defines the AcquireTokenSilentParameterBuilder class with methods for configuring silent token acquisition parameters, including proof of possession.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/netstandard2.0/PublicAPI.Shipped.txt#2025-04-23_snippet_25\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.AcquireTokenSilentParameterBuilder\nMicrosoft.Identity.Client.AcquireTokenSilentParameterBuilder.WithForceRefresh(bool forceRefresh) -> Microsoft.Identity.Client.AcquireTokenSilentParameterBuilder\nMicrosoft.Identity.Client.AcquireTokenSilentParameterBuilder.WithProofOfPossession(Microsoft.Identity.Client.AppConfig.PoPAuthenticationConfiguration popAuthenticationConfiguration) -> Microsoft.Identity.Client.AcquireTokenSilentParameterBuilder\nMicrosoft.Identity.Client.AcquireTokenSilentParameterBuilder.WithProofOfPossession(string nonce, System.Net.Http.HttpMethod httpMethod, System.Uri requestUri) -> Microsoft.Identity.Client.AcquireTokenSilentParameterBuilder\nMicrosoft.Identity.Client.AcquireTokenSilentParameterBuilder.WithSendX5C(bool withSendX5C) -> Microsoft.Identity.Client.AcquireTokenSilentParameterBuilder\n```\n\n----------------------------------------\n\nTITLE: Configuring SSH Certificate Authentication for Interactive Flows in C#\nDESCRIPTION: Extension method that configures interactive token acquisition to use SSH certificate authentication. This enables applications to obtain SSH certificates from Azure AD.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-ios/PublicAPI.Shipped.txt#2025-04-23_snippet_69\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Client.SSHCertificates.SSHExtensions.WithSSHCertificateAuthenticationScheme(this Microsoft.Identity.Client.AcquireTokenInteractiveParameterBuilder builder, string publicKeyJwk, string keyId) -> Microsoft.Identity.Client.AcquireTokenInteractiveParameterBuilder\n```\n\n----------------------------------------\n\nTITLE: Defining MSAL Token Cache Schema in JSON\nDESCRIPTION: A comprehensive JSON schema defining how the Microsoft Authentication Library for .NET caches authentication data including access tokens, refresh tokens, ID tokens, and account information. It specifies both general and iOS-specific cache keys along with their corresponding values.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/tests/Microsoft.Identity.Test.Unit/Resources/MSATestData.txt#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"client_id\": \"b6c69a37-df96-4db0-9088-2ab96e1d8215\",\n  \"authority\": \"https://login.microsoftonline.com/common\",\n  \"token_response\": {\n    \"token_type\": \"Bearer\",\n    \"scope\": \"Tasks.Read User.Read openid profile\",\n    \"expires_in\": 3600,\n    \"ext_expires_in\": 0,\n    \"access_token\": \"<removed_at>\",\n    \"refresh_token\": \"<removed_rt>\",\n    \"id_token\": \"{0}\",\n    \"client_info\": \"eyJ2ZXIiOiIxLjAiLCJzdWIiOiJBQUFBQUFBQUFBQUFBQUFBQUFBQUFNTmVBRnBTTGdsSGlPVHI5SVpISkVBIiwibmFtZSI6Ik9sZ2EgRGFsdG9tIiwicHJlZmVycmVkX3VzZXJuYW1lIjoibXNhbHNka3Rlc3RAb3V0bG9vay5jb20iLCJvaWQiOiIwMDAwMDAwMC0wMDAwLTAwMDAtNDBjMC0zYmFjMTg4ZDAxZDEiLCJ0aWQiOiI5MTg4MDQwZC02YzY3LTRjNWItYjExMi0zNmEzMDRiNjZkYWQiLCJob21lX29pZCI6IjAwMDAwMDAwLTAwMDAtMDAwMC00MGMwLTNiYWMxODhkMDFkMSIsInVpZCI6IjAwMDAwMDAwLTAwMDAtMDAwMC00MGMwLTNiYWMxODhkMDFkMSIsInV0aWQiOiI5MTg4MDQwZC02YzY3LTRjNWItYjExMi0zNmEzMDRiNjZkYWQifQ\"\n  },\n  \"id_token_response\": {\n    \"ver\": \"2.0\",\n    \"iss\": \"https://login.microsoftonline.com/9188040d-6c67-4c5b-b112-36a304b66dad/v2.0\",\n    \"sub\": \"AAAAAAAAAAAAAAAAAAAAAMNeAFpSLglHiOTr9IZHJEA\",\n    \"aud\": \"b6c69a37-df96-4db0-9088-2ab96e1d8215\",\n    \"exp\": 1538885254,\n    \"iat\": 1538798554,\n    \"nbf\": 1538798554,\n    \"name\": \"Test Username\",\n    \"preferred_username\": \"msalsdktest@outlook.com\",\n    \"oid\": \"00000000-0000-0000-40c0-3bac188d01d1\",\n    \"tid\": \"9188040d-6c67-4c5b-b112-36a304b66dad\",\n    \"aio\": \"DWgKnl!EsfVkSU8jFVbxM6PhZaR2EyXsMBymRGSXvREu4i*FmBU1RBl5hHvNvoGSGlqdBJFxndAsA6*Z3qZBr0c9vaIRwUpeICV*SXZjw8!B\"\n  },\n  \"at_cache_key\": \"00000000-0000-0000-40c0-3bac188d01d1.9188040d-6c67-4c5b-b112-36a304b66dad-login.windows.net-accesstoken-b6c69a37-df96-4db0-9088-2ab96e1d8215-9188040d-6c67-4c5b-b112-36a304b66dad-openid profile tasks.read user.read\",\n  \"at_cache_key_ios_service\": \"accesstoken-b6c69a37-df96-4db0-9088-2ab96e1d8215-9188040d-6c67-4c5b-b112-36a304b66dad-openid profile tasks.read user.read\",\n  \"at_cache_key_ios_account\": \"00000000-0000-0000-40c0-3bac188d01d1.9188040d-6c67-4c5b-b112-36a304b66dad-login.windows.net\",\n  \"at_cache_key_ios_generic\": \"accesstoken-b6c69a37-df96-4db0-9088-2ab96e1d8215-9188040d-6c67-4c5b-b112-36a304b66dad\",\n  \"at_cache_value\": {\n    \"secret\": \"<removed_at>\",\n    \"target\": \"openid profile Tasks.Read User.Read\",\n    \"credential_type\": \"AccessToken\",\n    \"environment\": \"login.windows.net\",\n    \"realm\": \"9188040d-6c67-4c5b-b112-36a304b66dad\",\n    \"expires_on\": \"1538802835\",\n    \"cached_at\": \"1538799235\",\n    \"client_id\": \"b6c69a37-df96-4db0-9088-2ab96e1d8215\",\n    \"home_account_id\": \"00000000-0000-0000-40c0-3bac188d01d1.9188040d-6c67-4c5b-b112-36a304b66dad\"\n  },\n  \"id_token_cache_key\": \"00000000-0000-0000-40c0-3bac188d01d1.9188040d-6c67-4c5b-b112-36a304b66dad-login.windows.net-idtoken-b6c69a37-df96-4db0-9088-2ab96e1d8215-9188040d-6c67-4c5b-b112-36a304b66dad-\",\n  \"id_token_cache_key_ios_service\": \"idtoken-b6c69a37-df96-4db0-9088-2ab96e1d8215-9188040d-6c67-4c5b-b112-36a304b66dad-\",\n  \"id_token_cache_key_ios_account\": \"00000000-0000-0000-40c0-3bac188d01d1.9188040d-6c67-4c5b-b112-36a304b66dad-login.windows.net\",\n  \"id_token_cache_key_ios_generic\": \"idtoken-b6c69a37-df96-4db0-9088-2ab96e1d8215-9188040d-6c67-4c5b-b112-36a304b66dad\",\n  \"id_token_cache_value\": {\n    \"secret\": \"{0}\",\n    \"credential_type\": \"IdToken\",\n    \"environment\": \"login.windows.net\",\n    \"home_account_id\": \"00000000-0000-0000-40c0-3bac188d01d1.9188040d-6c67-4c5b-b112-36a304b66dad\",\n    \"realm\": \"9188040d-6c67-4c5b-b112-36a304b66dad\",\n    \"client_id\": \"b6c69a37-df96-4db0-9088-2ab96e1d8215\"\n  },\n  \"rt_cache_key\": \"00000000-0000-0000-40c0-3bac188d01d1.9188040d-6c67-4c5b-b112-36a304b66dad-login.windows.net-refreshtoken-b6c69a37-df96-4db0-9088-2ab96e1d8215--\",\n  \"rt_cache_key_ios_service\": \"refreshtoken-b6c69a37-df96-4db0-9088-2ab96e1d8215--\",\n  \"rt_cache_key_ios_account\": \"00000000-0000-0000-40c0-3bac188d01d1.9188040d-6c67-4c5b-b112-36a304b66dad-login.windows.net\",\n  \"rt_cache_key_ios_generic\": \"refreshtoken-b6c69a37-df96-4db0-9088-2ab96e1d8215-\",\n  \"rt_cache_value\": {\n    \"client_id\": \"b6c69a37-df96-4db0-9088-2ab96e1d8215\",\n    \"secret\": \"<removed_rt>\",\n    \"environment\": \"login.windows.net\",\n    \"credential_type\": \"RefreshToken\",\n    \"home_account_id\": \"00000000-0000-0000-40c0-3bac188d01d1.9188040d-6c67-4c5b-b112-36a304b66dad\"\n  },\n  \"account_cache_key\": \"00000000-0000-0000-40c0-3bac188d01d1.9188040d-6c67-4c5b-b112-36a304b66dad-login.windows.net-9188040d-6c67-4c5b-b112-36a304b66dad\",\n  \"account_cache_key_ios_service\": \"9188040d-6c67-4c5b-b112-36a304b66dad\",\n  \"account_cache_key_ios_account\": \"00000000-0000-0000-40c0-3bac188d01d1.9188040d-6c67-4c5b-b112-36a304b66dad-login.windows.net\",\n  \"account_cache_key_ios_generic\": \"msalsdktest@outlook.com\",\n  \"account_cache_value\": {\n    \"local_account_id\": \"00000000-0000-0000-40c0-3bac188d01d1\",\n    \"home_account_id\": \"00000000-0000-0000-40c0-3bac188d01d1.9188040d-6c67-4c5b-b112-36a304b66dad\",\n    \"username\": \"msalsdktest@outlook.com\",\n    \"environment\": \"login.windows.net\",\n    \"realm\": \"9188040d-6c67-4c5b-b112-36a304b66dad\",\n    \"authority_type\": \"MSSTS\",\n    \"name\": \"Test Username\",\n\t\"client_info\": \"eyJ2ZXIiOiIxLjAiLCJzdWIiOiJBQUFBQUFBQUFBQUFBQUFBQUFBQUFNTmVBRnBTTGdsSGlPVHI5SVpISkVBIiwibmFtZSI6Ik9sZ2EgRGFsdG9tIiwicHJlZmVycmVkX3VzZXJuYW1lIjoibXNhbHNka3Rlc3RAb3V0bG9vay5jb20iLCJvaWQiOiIwMDAwMDAwMC0wMDAwLTAwMDAtNDBjMC0zYmFjMTg4ZDAxZDEiLCJ0aWQiOiI5MTg4MDQwZC02YzY3LTRjNWItYjExMi0zNmEzMDRiNjZkYWQiLCJob21lX29pZCI6IjAwMDAwMDAwLTAwMDAtMDAwMC00MGMwLTNiYWMxODhkMDFkMSIsInVpZCI6IjAwMDAwMDAwLTAwMDAtMDAwMC00MGMwLTNiYWMxODhkMDFkMSIsInV0aWQiOiI5MTg4MDQwZC02YzY3LTRjNWItYjExMi0zNmEzMDRiNjZkYWQifQ\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: IMsalHttpClientFactory Interface in MSAL.NET\nDESCRIPTION: Interface for providing custom HTTP clients to MSAL.NET. It allows applications to customize how HTTP requests are made, which can be useful for scenarios requiring special handling such as proxies or custom headers.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-ios/PublicAPI.Shipped.txt#2025-04-23_snippet_33\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.IMsalHttpClientFactory\nMicrosoft.Identity.Client.IMsalHttpClientFactory.GetHttpClient() -> System.Net.Http.HttpClient\n```\n\n----------------------------------------\n\nTITLE: Authentication Result Class Members in C#\nDESCRIPTION: Defines the core authentication result properties and methods including token management, claims handling, and correlation tracking\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-ios/PublicAPI.Shipped.txt#2025-04-23_snippet_13\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.AuthenticationResult.AuthenticationResultMetadata.get -> Microsoft.Identity.Client.AuthenticationResultMetadata\nMicrosoft.Identity.Client.AuthenticationResult.ClaimsPrincipal.get -> System.Security.Claims.ClaimsPrincipal\nMicrosoft.Identity.Client.AuthenticationResult.CorrelationId.get -> System.Guid\nMicrosoft.Identity.Client.AuthenticationResult.CreateAuthorizationHeader() -> string\n```\n\n----------------------------------------\n\nTITLE: Defining MSAL.NET Error Constants in C#\nDESCRIPTION: A collection of string constants representing various error codes used throughout the Microsoft Authentication Library for .NET. These error codes identify specific failure scenarios encountered during authentication flows.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-android/PublicAPI.Shipped.txt#2025-04-23_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Identity.Client.MsalError.NonParsableOAuthError = \"non_parsable_oauth_error\" -> string\nconst Microsoft.Identity.Client.MsalError.NoPromptFailedError = \"no_prompt_failed\" -> string\nconst Microsoft.Identity.Client.MsalError.NoRedirectUri = \"no_redirect_uri\" -> string\nconst Microsoft.Identity.Client.MsalError.NoTokensFoundError = \"no_tokens_found\" -> string\nconst Microsoft.Identity.Client.MsalError.NoUsernameOrAccountIDProvidedForSilentAndroidBrokerAuthentication = \"no_username_or_accountid_provided_for_silent_android_broker_authentication\" -> string\nconst Microsoft.Identity.Client.MsalError.NullIntentReturnedFromAndroidBroker = \"null_intent_returned_from_broker\" -> string\nconst Microsoft.Identity.Client.MsalError.OboCacheKeyNotInCacheError = \"obo_cache_key_not_in_cache_error\" -> string\nconst Microsoft.Identity.Client.MsalError.ParsingWsMetadataExchangeFailed = \"parsing_ws_metadata_exchange_failed\" -> string\nconst Microsoft.Identity.Client.MsalError.ParsingWsTrustResponseFailed = \"parsing_wstrust_response_failed\" -> string\nconst Microsoft.Identity.Client.MsalError.PasswordRequiredForManagedUserError = \"password_required_for_managed_user\" -> string\nconst Microsoft.Identity.Client.MsalError.PlatformNotSupported = \"platform_not_supported\" -> string\nconst Microsoft.Identity.Client.MsalError.RedirectUriValidationFailed = \"redirect_uri_validation_failed\" -> string\nconst Microsoft.Identity.Client.MsalError.RegionalAndAuthorityOverride = \"authority_override_regional\" -> string\nconst Microsoft.Identity.Client.MsalError.RegionalAuthorityValidation = \"regional_authority_validation\" -> string\nconst Microsoft.Identity.Client.MsalError.RegionDiscoveryFailed = \"region_discovery_failed\" -> string\nconst Microsoft.Identity.Client.MsalError.RegionDiscoveryNotEnabled = \"region_discovery_unavailable\" -> string\nconst Microsoft.Identity.Client.MsalError.RegionDiscoveryWithCustomInstanceMetadata = \"region_discovery_with_custom_instance_metadata\" -> string\nconst Microsoft.Identity.Client.MsalError.RequestThrottled = \"request_throttled\" -> string\nconst Microsoft.Identity.Client.MsalError.RequestTimeout = \"request_timeout\" -> string\nconst Microsoft.Identity.Client.MsalError.RopcDoesNotSupportMsaAccounts = \"ropc_not_supported_for_msa\" -> string\nconst Microsoft.Identity.Client.MsalError.ScopesRequired = \"scopes_required_client_credentials\" -> string\nconst Microsoft.Identity.Client.MsalError.ServiceNotAvailable = \"service_not_available\" -> string\nconst Microsoft.Identity.Client.MsalError.SetCiamAuthorityAtRequestLevelNotSupported = \"set_ciam_authority_at_request_level_not_supported\" -> string\nconst Microsoft.Identity.Client.MsalError.SSHCertUsedAsHttpHeader = \"ssh_cert_used_as_http_header\" -> string\nconst Microsoft.Identity.Client.MsalError.StateMismatchError = \"state_mismatch\" -> string\nconst Microsoft.Identity.Client.MsalError.StaticCacheWithExternalSerialization = \"static_cache_with_external_serialization\" -> string\nconst Microsoft.Identity.Client.MsalError.SystemWebviewOptionsNotApplicable = \"embedded_webview_not_compatible_default_browser\" -> string\nconst Microsoft.Identity.Client.MsalError.TelemetryConfigOrTelemetryCallback = \"telemetry_config_or_telemetry_callback\" -> string\nconst Microsoft.Identity.Client.MsalError.TenantDiscoveryFailedError = \"tenant_discovery_failed\" -> string\nconst Microsoft.Identity.Client.MsalError.TenantOverrideNonAad = \"tenant_override_non_aad\" -> string\nconst Microsoft.Identity.Client.MsalError.TokenCacheNullError = \"token_cache_null\" -> string\nconst Microsoft.Identity.Client.MsalError.TokenTypeMismatch = \"token_type_mismatch\" -> string\nconst Microsoft.Identity.Client.MsalError.UapCannotFindDomainUser = \"user_information_access_failed\" -> string\nconst Microsoft.Identity.Client.MsalError.UapCannotFindUpn = \"uap_cannot_find_upn\" -> string\nconst Microsoft.Identity.Client.MsalError.UnableToParseAuthenticationHeader = \"unable_to_parse_authentication_header\" -> string\nconst Microsoft.Identity.Client.MsalError.UnauthorizedClient = \"unauthorized_client\" -> string\nconst Microsoft.Identity.Client.MsalError.UnknownBrokerError = \"unknown_broker_error\" -> string\nconst Microsoft.Identity.Client.MsalError.UnknownError = \"unknown_error\" -> string\nconst Microsoft.Identity.Client.MsalError.UnknownManagedIdentityError = \"unknown_managed_identity_error\" -> string\nconst Microsoft.Identity.Client.MsalError.UnknownUser = \"unknown_user\" -> string\nconst Microsoft.Identity.Client.MsalError.UnknownUserType = \"unknown_user_type\" -> string\nconst Microsoft.Identity.Client.MsalError.UnresolvableIntentError = \"unresolvable_intent\" -> string\nconst Microsoft.Identity.Client.MsalError.UpnRequired = \"upn_required\" -> string\nconst Microsoft.Identity.Client.MsalError.UserAssertionNullError = \"user_assertion_null\" -> string\nconst Microsoft.Identity.Client.MsalError.UserAssignedManagedIdentityNotConfigurableAtRuntime = \"user_assigned_managed_identity_not_configurable_at_runtime\" -> string\nconst Microsoft.Identity.Client.MsalError.UserAssignedManagedIdentityNotSupported = \"user_assigned_managed_identity_not_supported\" -> string\nconst Microsoft.Identity.Client.MsalError.UserMismatch = \"user_mismatch\" -> string\nconst Microsoft.Identity.Client.MsalError.UserNullError = \"user_null\" -> string\nconst Microsoft.Identity.Client.MsalError.UserRealmDiscoveryFailed = \"user_realm_discovery_failed\" -> string\nconst Microsoft.Identity.Client.MsalError.ValidateAuthorityOrCustomMetadata = \"validate_authority_or_custom_instance_metadata\" -> string\nconst Microsoft.Identity.Client.MsalError.WABError = \"wab_error\" -> string\nconst Microsoft.Identity.Client.MsalError.WamFailedToSignout = \"wam_failed_to_signout\" -> string\nconst Microsoft.Identity.Client.MsalError.WamInteractiveError = \"wam_interactive_error\" -> string\nconst Microsoft.Identity.Client.MsalError.WamNoB2C = \"wam_no_b2c\" -> string\nconst Microsoft.Identity.Client.MsalError.WamPickerError = \"wam_interactive_picker_error\" -> string\nconst Microsoft.Identity.Client.MsalError.WamScopesRequired = \"scopes_required_wam\" -> string\nconst Microsoft.Identity.Client.MsalError.WamUiThread = \"wam_ui_thread_only\" -> string\nconst Microsoft.Identity.Client.MsalError.WebView2LoaderNotFound = \"webview2loader_not_found\" -> string\nconst Microsoft.Identity.Client.MsalError.WebView2NotInstalled = \"webview2_runtime_not_installed\" -> string\nconst Microsoft.Identity.Client.MsalError.WebviewUnavailable = \"no_system_webview\" -> string\nconst Microsoft.Identity.Client.MsalError.WsTrustEndpointNotFoundInMetadataDocument = \"wstrust_endpoint_not_found\" -> string\n```\n\n----------------------------------------\n\nTITLE: AbstractApplicationBuilder Configuration Methods in C#\nDESCRIPTION: Methods for configuring MSAL application builders including authority, cache options, client capabilities and telemetry.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-ios/PublicAPI.Shipped.txt#2025-04-23_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.AbstractApplicationBuilder<T>.WithAuthority(string authorityUri, bool validateAuthority = true) -> T\nMicrosoft.Identity.Client.AbstractApplicationBuilder<T>.WithCacheOptions(Microsoft.Identity.Client.CacheOptions options) -> T\nMicrosoft.Identity.Client.AbstractApplicationBuilder<T>.WithClientCapabilities(System.Collections.Generic.IEnumerable<string> clientCapabilities) -> T\n```\n\n----------------------------------------\n\nTITLE: Obtaining WWW-Authenticate Parameters from Resource with Default HTTP Client in C#\nDESCRIPTION: Static method that sends a request to a resource URI to obtain authentication parameters for a specific scheme using the default HTTP client. This provides a simpler API for obtaining authentication challenges.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-ios/PublicAPI.Shipped.txt#2025-04-23_snippet_77\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Client.WwwAuthenticateParameters.CreateFromAuthenticationResponseAsync(string resourceUri, string scheme, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Microsoft.Identity.Client.WwwAuthenticateParameters>\n```\n\n----------------------------------------\n\nTITLE: Implementing IPoPCryptoProvider Interface in C#\nDESCRIPTION: Defines the interface for Proof of Possession (PoP) crypto providers, including methods for signing data and retrieving cryptographic information.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net462/PublicAPI.Shipped.txt#2025-04-23_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.AuthScheme.PoP.IPoPCryptoProvider\nMicrosoft.Identity.Client.AuthScheme.PoP.IPoPCryptoProvider.CannonicalPublicKeyJwk.get -> string\nMicrosoft.Identity.Client.AuthScheme.PoP.IPoPCryptoProvider.CryptographicAlgorithm.get -> string\nMicrosoft.Identity.Client.AuthScheme.PoP.IPoPCryptoProvider.Sign(byte[] data) -> byte[]\n```\n\n----------------------------------------\n\nTITLE: Defining MSAL.NET Error Constants in C#\nDESCRIPTION: This snippet defines a series of constant string values representing various error codes used in the Microsoft Authentication Library for .NET. These constants are used to identify specific error conditions throughout the library.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0/PublicAPI.Shipped.txt#2025-04-23_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Identity.Client.MsalError.NoTokensFoundError = \"no_tokens_found\" -> string\nconst Microsoft.Identity.Client.MsalError.NoUsernameOrAccountIDProvidedForSilentAndroidBrokerAuthentication = \"no_username_or_accountid_provided_for_silent_android_broker_authentication\" -> string\nconst Microsoft.Identity.Client.MsalError.NullIntentReturnedFromAndroidBroker = \"null_intent_returned_from_broker\" -> string\n// ... (additional error constants)\n```\n\n----------------------------------------\n\nTITLE: Managed Identity Parameter Builder\nDESCRIPTION: Methods for configuring token acquisition using managed identity credentials. Includes options for specifying claims and forcing token refresh.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0/PublicAPI.Shipped.txt#2025-04-23_snippet_17\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.AcquireTokenForManagedIdentityParameterBuilder\nMicrosoft.Identity.Client.AcquireTokenForManagedIdentityParameterBuilder.WithClaims(string claims) -> Microsoft.Identity.Client.AcquireTokenForManagedIdentityParameterBuilder\nMicrosoft.Identity.Client.AcquireTokenForManagedIdentityParameterBuilder.WithForceRefresh(bool forceRefresh) -> Microsoft.Identity.Client.AcquireTokenForManagedIdentityParameterBuilder\n```\n\n----------------------------------------\n\nTITLE: Creating WWW-Authenticate Parameters from HTTP Headers in C#\nDESCRIPTION: Static method that parses WWW-Authenticate headers from HTTP response headers to extract authentication parameters. This helps applications understand and respond to authentication challenges.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-ios/PublicAPI.Shipped.txt#2025-04-23_snippet_74\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Client.WwwAuthenticateParameters.CreateFromAuthenticationHeaders(System.Net.Http.Headers.HttpResponseHeaders httpResponseHeaders) -> System.Collections.Generic.IReadOnlyList<Microsoft.Identity.Client.WwwAuthenticateParameters>\n```\n\n----------------------------------------\n\nTITLE: SSH Certificate Authentication Extensions in MSAL.NET\nDESCRIPTION: Extension methods for adding SSH certificate authentication to token acquisition flows, supporting both interactive and silent authentication patterns.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net462/PublicAPI.Shipped.txt#2025-04-23_snippet_31\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Client.SSHCertificates.SSHExtensions.WithSSHCertificateAuthenticationScheme(this Microsoft.Identity.Client.AcquireTokenInteractiveParameterBuilder builder, string publicKeyJwk, string keyId) -> Microsoft.Identity.Client.AcquireTokenInteractiveParameterBuilder\nstatic Microsoft.Identity.Client.SSHCertificates.SSHExtensions.WithSSHCertificateAuthenticationScheme(this Microsoft.Identity.Client.AcquireTokenSilentParameterBuilder builder, string publicKeyJwk, string keyId) -> Microsoft.Identity.Client.AcquireTokenSilentParameterBuilder\n```\n\n----------------------------------------\n\nTITLE: Token Acquisition Builder Methods\nDESCRIPTION: Methods for configuring token acquisition with Proof of Possession (PoP), Mutual TLS, and other authentication options for confidential client applications.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0/PublicAPI.Shipped.txt#2025-04-23_snippet_75\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.AbstractConfidentialClientAcquireTokenParameterBuilder<T>.WithSignedHttpRequestProofOfPossession(Microsoft.Identity.Client.AppConfig.PoPAuthenticationConfiguration popAuthenticationConfiguration) -> T\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.AcquireTokenForClientParameterBuilder.WithMtlsProofOfPossession() -> Microsoft.Identity.Client.AcquireTokenForClientParameterBuilder\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.AcquireTokenForClientParameterBuilder.WithFmiPath(string pathSuffix) -> Microsoft.Identity.Client.AcquireTokenForClientParameterBuilder\n```\n\n----------------------------------------\n\nTITLE: Defining IAuthenticationOperation Interface in C#\nDESCRIPTION: This snippet defines the IAuthenticationOperation interface with properties and methods related to authentication operations, including access token type, authorization header prefix, and token request parameters.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/netstandard2.0/PublicAPI.Shipped.txt#2025-04-23_snippet_32\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.AuthScheme.IAuthenticationOperation\nMicrosoft.Identity.Client.AuthScheme.IAuthenticationOperation.AccessTokenType.get -> string\nMicrosoft.Identity.Client.AuthScheme.IAuthenticationOperation.AuthorizationHeaderPrefix.get -> string\nMicrosoft.Identity.Client.AuthScheme.IAuthenticationOperation.FormatResult(Microsoft.Identity.Client.AuthenticationResult authenticationResult) -> void\nMicrosoft.Identity.Client.AuthScheme.IAuthenticationOperation.GetTokenRequestParams() -> System.Collections.Generic.IReadOnlyDictionary<string, string>\nMicrosoft.Identity.Client.AuthScheme.IAuthenticationOperation.KeyId.get -> string\nMicrosoft.Identity.Client.AuthScheme.IAuthenticationOperation.TelemetryTokenType.get -> int\n```\n\n----------------------------------------\n\nTITLE: Cross-Platform Locking Mechanism in C#\nDESCRIPTION: Implements a cross-platform file locking mechanism to ensure thread safety when multiple processes access the token cache. Provides methods to create and dispose of locks.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client.Extensions.Msal/PublicApi/PublicAPI.Shipped.txt#2025-04-23_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.Extensions.Msal.CrossPlatLock.CrossPlatLock(string lockfilePath, int lockFileRetryDelay = 100, int lockFileRetryCount = 600) -> void\nMicrosoft.Identity.Client.Extensions.Msal.CrossPlatLock.Dispose() -> void\n```\n\n----------------------------------------\n\nTITLE: Obtaining All WWW-Authenticate Parameters from Resource with Default HTTP Client in C#\nDESCRIPTION: Static method that sends a request to a resource URI to obtain all authentication parameters using the default HTTP client. This provides a simpler API for discovering all authentication challenges.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-ios/PublicAPI.Shipped.txt#2025-04-23_snippet_79\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Client.WwwAuthenticateParameters.CreateFromAuthenticationResponseAsync(string resourceUri, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<Microsoft.Identity.Client.WwwAuthenticateParameters>>\n```\n\n----------------------------------------\n\nTITLE: Trace-based Logging in C#\nDESCRIPTION: Logging implementation using System.Diagnostics.TraceSource for MSAL cache operations. Provides methods for logging information, warnings, and errors during cache operations.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client.Extensions.Msal/PublicApi/PublicAPI.Shipped.txt#2025-04-23_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.Extensions.Msal.TraceSourceLogger.TraceSourceLogger(System.Diagnostics.TraceSource traceSource) -> void\nMicrosoft.Identity.Client.Extensions.Msal.TraceSourceLogger.LogInformation(string message) -> void\nMicrosoft.Identity.Client.Extensions.Msal.TraceSourceLogger.LogWarning(string message) -> void\nMicrosoft.Identity.Client.Extensions.Msal.TraceSourceLogger.LogError(string message) -> void\n```\n\n----------------------------------------\n\nTITLE: Opening Browser with Legacy Edge for Authentication in C#\nDESCRIPTION: Static method that opens a URI with the legacy Edge browser. This allows applications to customize the system browser used for interactive authentication.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-ios/PublicAPI.Shipped.txt#2025-04-23_snippet_72\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Client.SystemWebViewOptions.OpenWithEdgeBrowserAsync(System.Uri uri) -> System.Threading.Tasks.Task\n```\n\n----------------------------------------\n\nTITLE: Defining MSAL.NET Exception Property Constants in C#\nDESCRIPTION: Constants representing property names used in MSAL exception objects. These properties provide additional context for error scenarios, particularly for broker-related errors and managed identity operations.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-android/PublicAPI.Shipped.txt#2025-04-23_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Identity.Client.MsalException.BrokerErrorCode = \"BrokerErrorCode\" -> string\nconst Microsoft.Identity.Client.MsalException.BrokerErrorContext = \"BrokerErrorContext\" -> string\nconst Microsoft.Identity.Client.MsalException.BrokerErrorStatus = \"BrokerErrorStatus\" -> string\nconst Microsoft.Identity.Client.MsalException.BrokerErrorTag = \"BrokerErrorTag\" -> string\nconst Microsoft.Identity.Client.MsalException.BrokerTelemetry = \"BrokerTelemetry\" -> string\nconst Microsoft.Identity.Client.MsalException.ManagedIdentitySource = \"ManagedIdentitySource\" -> string\n```\n\n----------------------------------------\n\nTITLE: AAD Authority Audience Enumeration in C#\nDESCRIPTION: Enumeration defining different Azure Active Directory authority audience types for authentication. These values determine which type of accounts (organizational, personal Microsoft accounts, or both) are targeted for authentication requests.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-ios/PublicAPI.Shipped.txt#2025-04-23_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.AadAuthorityAudience\nMicrosoft.Identity.Client.AadAuthorityAudience.AzureAdAndPersonalMicrosoftAccount = 2 -> Microsoft.Identity.Client.AadAuthorityAudience\nMicrosoft.Identity.Client.AadAuthorityAudience.AzureAdMultipleOrgs = 3 -> Microsoft.Identity.Client.AadAuthorityAudience\nMicrosoft.Identity.Client.AadAuthorityAudience.AzureAdMyOrg = 1 -> Microsoft.Identity.Client.AadAuthorityAudience\nMicrosoft.Identity.Client.AadAuthorityAudience.None = 0 -> Microsoft.Identity.Client.AadAuthorityAudience\nMicrosoft.Identity.Client.AadAuthorityAudience.PersonalMicrosoftAccount = 4 -> Microsoft.Identity.Client.AadAuthorityAudience\n```\n\n----------------------------------------\n\nTITLE: Implementing AbstractAcquireTokenParameterBuilder in C#\nDESCRIPTION: Abstract generic base class for token acquisition parameter builders in MSAL.NET. Provides methods for configuring authentication parameters such as authority, claims, scopes, and tenant information when building token acquisition requests.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net462/PublicAPI.Shipped.txt#2025-04-23_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.AbstractAcquireTokenParameterBuilder<T>\nMicrosoft.Identity.Client.AbstractAcquireTokenParameterBuilder<T>.AbstractAcquireTokenParameterBuilder() -> void\nMicrosoft.Identity.Client.AbstractAcquireTokenParameterBuilder<T>.WithAdfsAuthority(string authorityUri, bool validateAuthority = true) -> T\nMicrosoft.Identity.Client.AbstractAcquireTokenParameterBuilder<T>.WithAuthority(Microsoft.Identity.Client.AadAuthorityAudience authorityAudience, bool validateAuthority = true) -> T\nMicrosoft.Identity.Client.AbstractAcquireTokenParameterBuilder<T>.WithAuthority(Microsoft.Identity.Client.AzureCloudInstance azureCloudInstance, Microsoft.Identity.Client.AadAuthorityAudience authorityAudience, bool validateAuthority = true) -> T\nMicrosoft.Identity.Client.AbstractAcquireTokenParameterBuilder<T>.WithAuthority(Microsoft.Identity.Client.AzureCloudInstance azureCloudInstance, string tenant, bool validateAuthority = true) -> T\nMicrosoft.Identity.Client.AbstractAcquireTokenParameterBuilder<T>.WithAuthority(Microsoft.Identity.Client.AzureCloudInstance azureCloudInstance, System.Guid tenantId, bool validateAuthority = true) -> T\nMicrosoft.Identity.Client.AbstractAcquireTokenParameterBuilder<T>.WithAuthority(string authorityUri, bool validateAuthority = true) -> T\nMicrosoft.Identity.Client.AbstractAcquireTokenParameterBuilder<T>.WithAuthority(string cloudInstanceUri, string tenant, bool validateAuthority = true) -> T\nMicrosoft.Identity.Client.AbstractAcquireTokenParameterBuilder<T>.WithAuthority(string cloudInstanceUri, System.Guid tenantId, bool validateAuthority = true) -> T\nMicrosoft.Identity.Client.AbstractAcquireTokenParameterBuilder<T>.WithB2CAuthority(string authorityUri) -> T\nMicrosoft.Identity.Client.AbstractAcquireTokenParameterBuilder<T>.WithClaims(string claims) -> T\nMicrosoft.Identity.Client.AbstractAcquireTokenParameterBuilder<T>.WithExtraQueryParameters(string extraQueryParameters) -> T\nMicrosoft.Identity.Client.AbstractAcquireTokenParameterBuilder<T>.WithScopes(System.Collections.Generic.IEnumerable<string> scopes) -> T\nMicrosoft.Identity.Client.AbstractAcquireTokenParameterBuilder<T>.WithTenantId(string tenantId) -> T\nMicrosoft.Identity.Client.AbstractAcquireTokenParameterBuilder<T>.WithTenantIdFromAuthority(System.Uri authorityUri) -> T\n```\n\n----------------------------------------\n\nTITLE: Abstract Builder Classes for Token Acquisition\nDESCRIPTION: Declaration of abstract builder classes that serve as base classes for various token acquisition parameter builders. These include generic client app builders, confidential client builders, managed identity builders, and public client builders.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0/PublicAPI.Shipped.txt#2025-04-23_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.AbstractClientAppBaseAcquireTokenParameterBuilder<T>\nMicrosoft.Identity.Client.AbstractConfidentialClientAcquireTokenParameterBuilder<T>\nMicrosoft.Identity.Client.AbstractConfidentialClientAcquireTokenParameterBuilder<T>.WithProofOfPossession(Microsoft.Identity.Client.AppConfig.PoPAuthenticationConfiguration popAuthenticationConfiguration) -> T\nMicrosoft.Identity.Client.AbstractManagedIdentityAcquireTokenParameterBuilder<T>\nMicrosoft.Identity.Client.AbstractManagedIdentityAcquireTokenParameterBuilder<T>.AbstractManagedIdentityAcquireTokenParameterBuilder() -> void\nMicrosoft.Identity.Client.AbstractPublicClientAcquireTokenParameterBuilder<T>\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom App Token Provider for Confidential Applications in C#\nDESCRIPTION: Extension method that allows specifying a custom token provider for confidential client applications. This provider can implement custom logic for retrieving application tokens.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-ios/PublicAPI.Shipped.txt#2025-04-23_snippet_44\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Client.Extensibility.ConfidentialClientApplicationBuilderExtensions.WithAppTokenProvider(this Microsoft.Identity.Client.ConfidentialClientApplicationBuilder builder, System.Func<Microsoft.Identity.Client.Extensibility.AppTokenProviderParameters, System.Threading.Tasks.Task<Microsoft.Identity.Client.Extensibility.AppTokenProviderResult>> appTokenProvider) -> Microsoft.Identity.Client.ConfidentialClientApplicationBuilder\n```\n\n----------------------------------------\n\nTITLE: Public Client Application Configuration and Extensions in MSAL.NET\nDESCRIPTION: Methods for creating and configuring public client applications (used in client-side scenarios), including operating system account access and proof of possession support detection.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0/PublicAPI.Shipped.txt#2025-04-23_snippet_66\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Client.PublicClientApplication.OperatingSystemAccount.get -> Microsoft.Identity.Client.IAccount\nstatic Microsoft.Identity.Client.PublicClientApplicationBuilder.Create(string clientId) -> Microsoft.Identity.Client.PublicClientApplicationBuilder\nstatic Microsoft.Identity.Client.PublicClientApplicationBuilder.CreateWithApplicationOptions(Microsoft.Identity.Client.PublicClientApplicationOptions options) -> Microsoft.Identity.Client.PublicClientApplicationBuilder\nstatic Microsoft.Identity.Client.PublicClientApplicationExtensions.IsProofOfPossessionSupportedByClient(this Microsoft.Identity.Client.IPublicClientApplication app) -> bool\n```\n\n----------------------------------------\n\nTITLE: Defining IByRefreshToken Interface in C#\nDESCRIPTION: Declares the IByRefreshToken interface with a method for acquiring a token by refresh token.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/netstandard2.0/PublicAPI.Shipped.txt#2025-04-23_snippet_57\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.IByRefreshToken\nMicrosoft.Identity.Client.IByRefreshToken.AcquireTokenByRefreshToken(System.Collections.Generic.IEnumerable<string> scopes, string refreshToken) -> Microsoft.Identity.Client.AcquireTokenByRefreshTokenParameterBuilder\n```\n\n----------------------------------------\n\nTITLE: Application Options Configuration in C#\nDESCRIPTION: Configuration class for MSAL.NET applications defining client credentials, authority settings, and application capabilities.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net462/PublicAPI.Shipped.txt#2025-04-23_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\npublic class ApplicationOptions\n{\n    public AadAuthorityAudience AadAuthorityAudience { get; set; }\n    public AzureCloudInstance AzureCloudInstance { get; set; }\n    public IEnumerable<string> ClientCapabilities { get; set; }\n    public string ClientId { get; set; }\n    public string ClientName { get; set; }\n    public string ClientVersion { get; set; }\n    public string Instance { get; set; }\n    public string RedirectUri { get; set; }\n    public string TenantId { get; set; }\n    public bool LegacyCacheCompatibilityEnabled { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Class Definition - GetAuthorizationRequestUrlParameterBuilder\nDESCRIPTION: Builder class for constructing authorization request URLs with various parameters and options.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-ios/PublicAPI.Shipped.txt#2025-04-23_snippet_23\n\nLANGUAGE: C#\nCODE:\n```\npublic class GetAuthorizationRequestUrlParameterBuilder\n{\n    public Task<Uri> ExecuteAsync();\n    public Task<Uri> ExecuteAsync(CancellationToken cancellationToken);\n    public GetAuthorizationRequestUrlParameterBuilder WithAccount(IAccount account);\n    public GetAuthorizationRequestUrlParameterBuilder WithCcsRoutingHint(string userObjectIdentifier, string tenantIdentifier);\n    public GetAuthorizationRequestUrlParameterBuilder WithExtraScopesToConsent(IEnumerable<string> extraScopesToConsent);\n    public GetAuthorizationRequestUrlParameterBuilder WithLoginHint(string loginHint);\n    public GetAuthorizationRequestUrlParameterBuilder WithPkce(out string codeVerifier);\n    public GetAuthorizationRequestUrlParameterBuilder WithPrompt(Prompt prompt);\n    public GetAuthorizationRequestUrlParameterBuilder WithRedirectUri(string redirectUri);\n}\n```\n\n----------------------------------------\n\nTITLE: MSAL Exception Classes and Constructors in C#\nDESCRIPTION: Hierarchy of exception classes for handling authentication errors in MSAL. Includes base MsalException class and specialized exceptions for different scenarios like claims challenges, client errors, and service errors.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0/PublicAPI.Shipped.txt#2025-04-23_snippet_45\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.MsalClaimsChallengeException\nMicrosoft.Identity.Client.MsalClaimsChallengeException.MsalClaimsChallengeException(string errorCode, string errorMessage) -> void\nMicrosoft.Identity.Client.MsalClaimsChallengeException.MsalClaimsChallengeException(string errorCode, string errorMessage, System.Exception innerException) -> void\nMicrosoft.Identity.Client.MsalClaimsChallengeException.MsalClaimsChallengeException(string errorCode, string errorMessage, System.Exception innerException, Microsoft.Identity.Client.UiRequiredExceptionClassification classification) -> void\nMicrosoft.Identity.Client.MsalClientException\nMicrosoft.Identity.Client.MsalClientException.MsalClientException(string errorCode) -> void\nMicrosoft.Identity.Client.MsalClientException.MsalClientException(string errorCode, string errorMessage) -> void\nMicrosoft.Identity.Client.MsalClientException.MsalClientException(string errorCode, string errorMessage, System.Exception innerException) -> void\nMicrosoft.Identity.Client.MsalError\nMicrosoft.Identity.Client.MsalException\nMicrosoft.Identity.Client.MsalException.AdditionalExceptionData.get -> System.Collections.Generic.IReadOnlyDictionary<string, string>\nMicrosoft.Identity.Client.MsalException.AdditionalExceptionData.set -> void\nMicrosoft.Identity.Client.MsalException.CorrelationId.get -> string\nMicrosoft.Identity.Client.MsalException.CorrelationId.set -> void\nMicrosoft.Identity.Client.MsalException.ErrorCode.get -> string\nMicrosoft.Identity.Client.MsalException.IsRetryable.get -> bool\nMicrosoft.Identity.Client.MsalException.IsRetryable.set -> void\nMicrosoft.Identity.Client.MsalException.MsalException() -> void\nMicrosoft.Identity.Client.MsalException.MsalException(string errorCode) -> void\nMicrosoft.Identity.Client.MsalException.MsalException(string errorCode, string errorMessage) -> void\nMicrosoft.Identity.Client.MsalException.MsalException(string errorCode, string errorMessage, System.Exception innerException) -> void\nMicrosoft.Identity.Client.MsalException.ToJsonString() -> string\n```\n\n----------------------------------------\n\nTITLE: Token Cache and HTTP Client Factory\nDESCRIPTION: Properties and interfaces for token cache notifications and Service Fabric HTTP client factory customization with server certificate validation support.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0/PublicAPI.Shipped.txt#2025-04-23_snippet_79\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.TokenCacheNotificationArgs.NoDistributedCacheUseReason.get -> string\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.IMsalSFHttpClientFactory\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.IMsalSFHttpClientFactory.GetHttpClient(System.Func<System.Net.Http.HttpRequestMessage, System.Security.Cryptography.X509Certificates.X509Certificate2, System.Security.Cryptography.X509Certificates.X509Chain, System.Net.Security.SslPolicyErrors, bool> validateServerCert) -> System.Net.Http.HttpClient\n```\n\n----------------------------------------\n\nTITLE: AbstractAcquireTokenParameterBuilder Method Signatures in C#\nDESCRIPTION: Base class methods for configuring token acquisition parameters including claims, scopes, tenant ID and query parameters.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-ios/PublicAPI.Shipped.txt#2025-04-23_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.AbstractAcquireTokenParameterBuilder<T>.WithClaims(string claims) -> T\nMicrosoft.Identity.Client.AbstractAcquireTokenParameterBuilder<T>.WithExtraQueryParameters(string extraQueryParameters) -> T\nMicrosoft.Identity.Client.AbstractAcquireTokenParameterBuilder<T>.WithScopes(System.Collections.Generic.IEnumerable<string> scopes) -> T\nMicrosoft.Identity.Client.AbstractAcquireTokenParameterBuilder<T>.WithTenantId(string tenantId) -> T\n```\n\n----------------------------------------\n\nTITLE: Kerberos Ticket Management in MSAL.NET\nDESCRIPTION: Static methods for managing Kerberos supplemental tickets, including creation from ID tokens, retrieval from Windows ticket cache, and saving to Windows ticket cache.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-android/PublicAPI.Shipped.txt#2025-04-23_snippet_47\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Client.Kerberos.KerberosSupplementalTicketManager.FromIdToken(string idToken) -> Microsoft.Identity.Client.Kerberos.KerberosSupplementalTicket\nstatic Microsoft.Identity.Client.Kerberos.KerberosSupplementalTicketManager.GetKerberosTicketFromWindowsTicketCache(string servicePrincipalName) -> byte[]\nstatic Microsoft.Identity.Client.Kerberos.KerberosSupplementalTicketManager.GetKerberosTicketFromWindowsTicketCache(string servicePrincipalName, long logonId) -> byte[]\nstatic Microsoft.Identity.Client.Kerberos.KerberosSupplementalTicketManager.GetKrbCred(Microsoft.Identity.Client.Kerberos.KerberosSupplementalTicket ticket) -> byte[]\nstatic Microsoft.Identity.Client.Kerberos.KerberosSupplementalTicketManager.SaveToWindowsTicketCache(Microsoft.Identity.Client.Kerberos.KerberosSupplementalTicket ticket) -> void\nstatic Microsoft.Identity.Client.Kerberos.KerberosSupplementalTicketManager.SaveToWindowsTicketCache(Microsoft.Identity.Client.Kerberos.KerberosSupplementalTicket ticket, long logonId) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining AcquireTokenWithDeviceCodeParameterBuilder Class in C#\nDESCRIPTION: Class definition for AcquireTokenWithDeviceCodeParameterBuilder with a method for configuring device code flow parameters.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0/PublicAPI.Shipped.txt#2025-04-23_snippet_21\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.AcquireTokenWithDeviceCodeParameterBuilder\nMicrosoft.Identity.Client.AcquireTokenWithDeviceCodeParameterBuilder.WithDeviceCodeResultCallback(System.Func<Microsoft.Identity.Client.DeviceCodeResult, System.Threading.Tasks.Task> deviceCodeResultCallback) -> Microsoft.Identity.Client.AcquireTokenWithDeviceCodeParameterBuilder\n```\n\n----------------------------------------\n\nTITLE: MSAL.NET Error Constants\nDESCRIPTION: Comprehensive set of error code constants used throughout MSAL.NET for various authentication and authorization scenarios\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net472/PublicAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Identity.Client.ConfidentialClientApplication.AttemptRegionDiscovery = \"TryAutoDetect\" -> string\nconst Microsoft.Identity.Client.MsalError.AccessDenied = \"access_denied\" -> string\nconst Microsoft.Identity.Client.MsalError.AccessingWsMetadataExchangeFailed = \"accessing_ws_metadata_exchange_failed\" -> string\n// ... [remaining error constants]\n```\n\n----------------------------------------\n\nTITLE: AcquireTokenForClientParameterBuilder Methods in C#\nDESCRIPTION: Methods for configuring the AcquireTokenForClientParameterBuilder, including Azure region settings, force refresh, and X5C sending option.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/netstandard2.0/PublicAPI.Shipped.txt#2025-04-23_snippet_21\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.AcquireTokenForClientParameterBuilder.WithAzureRegion(bool useAzureRegion) -> Microsoft.Identity.Client.AcquireTokenForClientParameterBuilder\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.AcquireTokenForClientParameterBuilder.WithForceRefresh(bool forceRefresh) -> Microsoft.Identity.Client.AcquireTokenForClientParameterBuilder\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.AcquireTokenForClientParameterBuilder.WithPreferredAzureRegion(bool useAzureRegion = true, string regionUsedIfAutoDetectFails = \"\", bool fallbackToGlobal = true) -> Microsoft.Identity.Client.AcquireTokenForClientParameterBuilder\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.AcquireTokenForClientParameterBuilder.WithSendX5C(bool withSendX5C) -> Microsoft.Identity.Client.AcquireTokenForClientParameterBuilder\n```\n\n----------------------------------------\n\nTITLE: Defining IByUsernameAndPassword Interface in C#\nDESCRIPTION: Declares the IByUsernameAndPassword interface with a method for acquiring a token by username and password.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/netstandard2.0/PublicAPI.Shipped.txt#2025-04-23_snippet_58\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.IByUsernameAndPassword\nMicrosoft.Identity.Client.IByUsernameAndPassword.AcquireTokenByUsernamePassword(System.Collections.Generic.IEnumerable<string> scopes, string username, string password) -> Microsoft.Identity.Client.AcquireTokenByUsernameAndPasswordConfidentialParameterBuilder\n```\n\n----------------------------------------\n\nTITLE: MSAL.NET Error Constants Definition\nDESCRIPTION: Defines constant string values used as error codes in the Microsoft Authentication Library for .NET. These constants serve as standardized error identifiers used throughout the library for various authentication failure scenarios.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net462/PublicAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Identity.Client.ConfidentialClientApplication.AttemptRegionDiscovery = \"TryAutoDetect\" -> string\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Identity.Client.MsalError.AccessDenied = \"access_denied\" -> string\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Identity.Client.MsalError.AccessingWsMetadataExchangeFailed = \"accessing_ws_metadata_exchange_failed\" -> string\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Identity.Client.MsalError.AccessTokenTypeMissing = \"token_type_missing\" -> string\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Identity.Client.MsalError.ActivityRequired = \"activity_required\" -> string\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Identity.Client.MsalError.AdfsNotSupportedWithBroker = \"adfs_not_supported_with_broker\" -> string\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Identity.Client.MsalError.AndroidBrokerOperationFailed = \"android_broker_operation_failed\" -> string\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Identity.Client.MsalError.AndroidBrokerSignatureVerificationFailed = \"broker_signature_verification_failed\" -> string\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Identity.Client.MsalError.AuthenticationCanceledError = \"authentication_canceled\" -> string\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Identity.Client.MsalError.AuthenticationFailed = \"authentication_failed\" -> string\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Identity.Client.MsalError.AuthenticationUiFailed = \"authentication_ui_failed\" -> string\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Identity.Client.MsalError.AuthenticationUiFailedError = \"authentication_ui_failed\" -> string\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Identity.Client.MsalError.AuthorityHostMismatch = \"authority_host_mismatch\" -> string\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Identity.Client.MsalError.AuthorityTenantSpecifiedTwice = \"authority_tenant_specified_twice\" -> string\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Identity.Client.MsalError.AuthorityTypeMismatch = \"authority_type_mismatch\" -> string\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Identity.Client.MsalError.AuthorityValidationFailed = \"authority_validation_failed\" -> string\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Identity.Client.MsalError.B2CAuthorityHostMismatch = \"B2C_authority_host_mismatch\" -> string\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Identity.Client.MsalError.BrokerApplicationRequired = \"broker_application_required\" -> string\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Identity.Client.MsalError.BrokerDoesNotSupportPop = \"broker_does_not_support_pop\" -> string\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Identity.Client.MsalError.BrokerNonceMismatch = \"broker_nonce_mismatch\" -> string\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Identity.Client.MsalError.BrokerRequiredForPop = \"broker_required_for_pop\" -> string\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Identity.Client.MsalError.BrokerResponseHashMismatch = \"broker_response_hash_mismatch\" -> string\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Identity.Client.MsalError.BrokerResponseReturnedError = \"broker_response_returned_error\" -> string\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Identity.Client.MsalError.CannotAccessUserInformationOrUserNotDomainJoined = \"user_information_access_failed\" -> string\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Identity.Client.MsalError.CannotInvokeBroker = \"cannot_invoke_broker\" -> string\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Identity.Client.MsalError.CertificateNotRsa = \"certificate_not_rsa\" -> string\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Identity.Client.MsalError.CertWithoutPrivateKey = \"cert_without_private_key\" -> string\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Identity.Client.MsalError.ClientCredentialAuthenticationTypeMustBeDefined = \"Client_Credentials_Required_In_Confidential_Client_Application\" -> string\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Identity.Client.MsalError.ClientCredentialAuthenticationTypesAreMutuallyExclusive = \"Client_Credential_Authentication_Types_Are_Mutually_Exclusive\" -> string\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Identity.Client.MsalError.CodeExpired = \"code_expired\" -> string\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Identity.Client.MsalError.CombinedUserAppCacheNotSupported = \"combined_user_app_cache_not_supported\" -> string\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Identity.Client.MsalError.CryptographicError = \"cryptographic_error\" -> string\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Identity.Client.MsalError.CurrentBrokerAccount = \"current_broker_account\" -> string\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Identity.Client.MsalError.CustomMetadataInstanceOrUri = \"custom_metadata_instance_or_uri\" -> string\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Identity.Client.MsalError.CustomWebUiRedirectUriMismatch = \"custom_webui_invalid_mismatch\" -> string\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Identity.Client.MsalError.CustomWebUiReturnedInvalidUri = \"custom_webui_returned_invalid_uri\" -> string\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Identity.Client.MsalError.DefaultRedirectUriIsInvalid = \"redirect_uri_validation_failed\" -> string\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Identity.Client.MsalError.DeviceCertificateNotFound = \"device_certificate_not_found\" -> string\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Identity.Client.MsalError.DuplicateQueryParameterError = \"duplicate_query_parameter\" -> string\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Identity.Client.MsalError.EncodedTokenTooLong = \"encoded_token_too_long\" -> string\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Identity.Client.MsalError.ExactlyOneScopeExpected = \"exactly_one_scope_expected\" -> string\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Identity.Client.MsalError.ExperimentalFeature = \"experimental_feature\" -> string\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Identity.Client.MsalError.FailedToAcquireTokenSilentlyFromBroker = \"failed_to_acquire_token_silently_from_broker\" -> string\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Identity.Client.MsalError.FailedToGetBrokerResponse = \"failed_to_get_broker_response\" -> string\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Identity.Client.MsalError.FailedToRefreshToken = \"failed_to_refresh_token\" -> string\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Identity.Client.MsalError.FederatedServiceReturnedError = \"federated_service_returned_error\" -> string\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Identity.Client.MsalError.GetUserNameFailed = \"get_user_name_failed\" -> string\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Identity.Client.MsalError.HttpListenerError = \"http_listener_error\" -> string\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Identity.Client.MsalError.HttpStatusCodeNotOk = \"http_status_not_200\" -> string\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Identity.Client.MsalError.HttpStatusNotFound = \"not_found\" -> string\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Identity.Client.MsalError.InitializeProcessSecurityError = \"initialize_process_security_error\" -> string\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Identity.Client.MsalError.IntegratedWindowsAuthenticationFailed = \"integrated_windows_authentication_failed\" -> string\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Identity.Client.MsalError.IntegratedWindowsAuthNotSupportedForManagedUser = \"integrated_windows_auth_not_supported_managed_user\" -> string\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Identity.Client.MsalError.InteractionRequired = \"interaction_required\" -> string\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Identity.Client.MsalError.InternalError = \"internal_error\" -> string\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Identity.Client.MsalError.InvalidAdalCacheMultipleRTs = \"invalid_adal_cache\" -> string\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Identity.Client.MsalError.InvalidAuthority = \"invalid_authority\" -> string\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Identity.Client.MsalError.InvalidAuthorityType = \"invalid_authority_type\" -> string\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Identity.Client.MsalError.InvalidAuthorizationUri = \"invalid_authorization_uri\" -> string\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Identity.Client.MsalError.InvalidClient = \"invalid_client\" -> string\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Identity.Client.MsalError.InvalidGrantError = \"invalid_grant\" -> string\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Identity.Client.MsalError.InvalidInstance = \"invalid_instance\" -> string\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Identity.Client.MsalError.InvalidJsonClaimsFormat = \"invalid_json_claims_format\" -> string\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Identity.Client.MsalError.InvalidJwtError = \"invalid_jwt\" -> string\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Identity.Client.MsalError.InvalidManagedIdentityEndpoint = \"invalid_managed_identity_endpoint\" -> string\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Identity.Client.MsalError.InvalidManagedIdentityResponse = \"invalid_managed_identity_response\" -> string\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Identity.Client.MsalError.InvalidOwnerWindowType = \"invalid_owner_window_type\" -> string\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Identity.Client.MsalError.InvalidRequest = \"invalid_request\" -> string\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Identity.Client.MsalError.InvalidTokenProviderResponseValue = \"invalid_token_provider_response_value\" -> string\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Identity.Client.MsalError.InvalidUserInstanceMetadata = \"invalid-custom-instance-metadata\" -> string\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Identity.Client.MsalError.JsonParseError = \"json_parse_failed\" -> string\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Identity.Client.MsalError.LinuxXdgOpen = \"linux_xdg_open_failed\" -> string\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Identity.Client.MsalError.LoopbackRedirectUri = \"loopback_redirect_uri\" -> string\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Identity.Client.MsalError.LoopbackResponseUriMismatch = \"loopback_response_uri_mismatch\" -> string\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Identity.Client.MsalError.ManagedIdentityRequestFailed = \"managed_identity_request_failed\" -> string\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Identity.Client.MsalError.ManagedIdentityUnreachableNetwork = \"managed_identity_unreachable_network\" -> string\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Identity.Client.MsalError.MissingFederationMetadataUrl = \"missing_federation_metadata_url\" -> string\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Identity.Client.MsalError.MissingPassiveAuthEndpoint = \"missing_passive_auth_endpoint\" -> string\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Identity.Client.MsalError.MultipleAccountsForLoginHint = \"multiple_accounts_for_login_hint\" -> string\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Identity.Client.MsalError.MultipleTokensMatchedError = \"multiple_matching_tokens_detected\" -> string\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Identity.Client.MsalError.NetworkNotAvailableError = \"network_not_available\" -> string\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Identity.Client.MsalError.NoAccountForLoginHint = \"no_account_for_login_hint\" -> string\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Identity.Client.MsalError.NoAndroidBrokerAccountFound = \"no_broker_account_found\" -> string\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Identity.Client.MsalError.NoAndroidBrokerInstalledOnDevice = \"No_Broker_Installed_On_Device\" -> string\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Identity.Client.MsalError.NoClientId = \"no_client_id\" -> string\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Identity.Client.MsalError.NonceRequiredForPopOnPCA = \"nonce_required_for_pop_on_pca\" -> string\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Identity.Client.MsalError.NonHttpsRedirectNotSupported = \"non_https_redirect_failed\" -> string\n```\n\n----------------------------------------\n\nTITLE: MSAL Token Cache JSON Schema\nDESCRIPTION: Example of the modified token cache JSON structure showing how additional cache key components are stored in the payload along with standard token information.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/docs/cache_extensibility.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"AccessToken\": {\n    \"-login.microsoftonline.com-atext-client_id-tenant_id-https://graph.microsoft.com/.deafult-cc252f65706f969930208e4b2403435a95f7f7d9c964bd190ae2c6e032938235\": {\n      \"home_account_id\": \"6afc833f-49c0-4fd5-b685-2998a6cc8d8d.469fdeb4-d4fd-4fde-991e-308a78e4bea4\",\n      \"environment\": \"login.microsoftonline.de\",     \n      \"client_id\": \"0615b6ca-88d4-4884-8729-b178178f7c27\",\n      \"secret\": \"omitted\",\n      \"credential_type\": \"atext\", \n      \"realm\": \"469fdeb4-d4fd-4fde-991e-308a78e4bea4\",\n      \"target\": \"https://graph.cloudapi.de/62e90394-69f5-4237-9190-012177145e10 https://graph.cloudapi.de/.default\",      \n      \"cached_at\": \"1553819803\",\n      \"expires_on\": \"1553823402\",\n      \"key1\": \"val1\",\n      \"key2\": \"val2\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: IntuneAppProtectionPolicyRequiredException Class in MSAL.NET\nDESCRIPTION: Exception class that is thrown when Intune app protection policy requirements are not met. It contains properties for tenant and user information needed to enforce the policy requirements.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-ios/PublicAPI.Shipped.txt#2025-04-23_snippet_32\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.IntuneAppProtectionPolicyRequiredException\nMicrosoft.Identity.Client.IntuneAppProtectionPolicyRequiredException.AccountUserId.get -> string\nMicrosoft.Identity.Client.IntuneAppProtectionPolicyRequiredException.AccountUserId.set -> void\nMicrosoft.Identity.Client.IntuneAppProtectionPolicyRequiredException.AuthorityUrl.get -> string\nMicrosoft.Identity.Client.IntuneAppProtectionPolicyRequiredException.AuthorityUrl.set -> void\nMicrosoft.Identity.Client.IntuneAppProtectionPolicyRequiredException.IntuneAppProtectionPolicyRequiredException(string errorCode, string errorMessage) -> void\nMicrosoft.Identity.Client.IntuneAppProtectionPolicyRequiredException.TenantId.get -> string\nMicrosoft.Identity.Client.IntuneAppProtectionPolicyRequiredException.TenantId.set -> void\nMicrosoft.Identity.Client.IntuneAppProtectionPolicyRequiredException.Upn.get -> string\nMicrosoft.Identity.Client.IntuneAppProtectionPolicyRequiredException.Upn.set -> void\n```\n\n----------------------------------------\n\nTITLE: Abstract Methods for Token Acquisition in MSAL.NET (C#)\nDESCRIPTION: Virtual methods for token parameter validation and exception handling in MSAL.NET. These methods are part of the token acquisition pipeline and can be overridden in derived classes.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/netstandard2.0/PublicAPI.Shipped.txt#2025-04-23_snippet_91\n\nLANGUAGE: C#\nCODE:\n```\nvirtual Microsoft.Identity.Client.BaseAbstractAcquireTokenParameterBuilder<T>.Validate() -> void\nvirtual Microsoft.Identity.Client.MsalServiceException.UpdateIsRetryable() -> void\n```\n\n----------------------------------------\n\nTITLE: MSAL Authentication Parameter Methods\nDESCRIPTION: Static methods for creating and handling WwwAuthenticateParameters, including creation from resource responses, headers, and header values.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-android/PublicAPI.Shipped.txt#2025-04-23_snippet_50\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Client.WwwAuthenticateParameters.CreateFromResourceResponseAsync(System.Net.Http.HttpClient httpClient, string resourceUri, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Microsoft.Identity.Client.WwwAuthenticateParameters>\nstatic Microsoft.Identity.Client.WwwAuthenticateParameters.CreateFromResponseHeaders(System.Net.Http.Headers.HttpResponseHeaders httpResponseHeaders, string scheme = \"Bearer\") -> Microsoft.Identity.Client.WwwAuthenticateParameters\nstatic Microsoft.Identity.Client.WwwAuthenticateParameters.CreateFromWwwAuthenticateHeaderValue(string wwwAuthenticateValue) -> Microsoft.Identity.Client.WwwAuthenticateParameters\n```\n\n----------------------------------------\n\nTITLE: Throttled Exception Classes in MSAL.NET\nDESCRIPTION: Defines specialized exception classes for handling throttled service and UI required scenarios. Includes wrappers around original exceptions to indicate throttling state while preserving original exception details.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/netstandard2.0/PublicAPI.Shipped.txt#2025-04-23_snippet_73\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.MsalThrottledServiceException\nMicrosoft.Identity.Client.MsalThrottledServiceException.MsalThrottledServiceException(Microsoft.Identity.Client.MsalServiceException originalException) -> void\nMicrosoft.Identity.Client.MsalThrottledServiceException.OriginalServiceException.get -> Microsoft.Identity.Client.MsalServiceException\nMicrosoft.Identity.Client.MsalThrottledUiRequiredException\nMicrosoft.Identity.Client.MsalThrottledUiRequiredException.MsalThrottledUiRequiredException(Microsoft.Identity.Client.MsalUiRequiredException originalException) -> void\nMicrosoft.Identity.Client.MsalThrottledUiRequiredException.OriginalServiceException.get -> Microsoft.Identity.Client.MsalUiRequiredException\n```\n\n----------------------------------------\n\nTITLE: Creating WwwAuthenticateParameters from Resource Response\nDESCRIPTION: Static methods for creating WwwAuthenticateParameters objects from HTTP responses, headers, and resource URIs to handle authentication challenges.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0/PublicAPI.Shipped.txt#2025-04-23_snippet_71\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Client.WwwAuthenticateParameters.CreateFromResourceResponseAsync(string resourceUri, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Microsoft.Identity.Client.WwwAuthenticateParameters>\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Client.WwwAuthenticateParameters.CreateFromResourceResponseAsync(System.Net.Http.HttpClient httpClient, string resourceUri, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Microsoft.Identity.Client.WwwAuthenticateParameters>\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Client.WwwAuthenticateParameters.CreateFromResponseHeaders(System.Net.Http.Headers.HttpResponseHeaders httpResponseHeaders, string scheme = \"Bearer\") -> Microsoft.Identity.Client.WwwAuthenticateParameters\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Client.WwwAuthenticateParameters.CreateFromWwwAuthenticateHeaderValue(string wwwAuthenticateValue) -> Microsoft.Identity.Client.WwwAuthenticateParameters\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Client.WwwAuthenticateParameters.GetClaimChallengeFromResponseHeaders(System.Net.Http.Headers.HttpResponseHeaders httpResponseHeaders, string scheme = \"Bearer\") -> string\n```\n\n----------------------------------------\n\nTITLE: Kerberos Support Classes in MSAL.NET\nDESCRIPTION: Classes for Kerberos authentication support in MSAL.NET. These provide functionality for handling Kerberos tickets, which can be used for Windows integrated authentication scenarios in enterprise environments.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-ios/PublicAPI.Shipped.txt#2025-04-23_snippet_31\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.Kerberos.KerberosKeyTypes\nMicrosoft.Identity.Client.Kerberos.KerberosKeyTypes.Aes128CtsHmacSha196 = 17 -> Microsoft.Identity.Client.Kerberos.KerberosKeyTypes\nMicrosoft.Identity.Client.Kerberos.KerberosKeyTypes.Aes256CtsHmacSha196 = 18 -> Microsoft.Identity.Client.Kerberos.KerberosKeyTypes\nMicrosoft.Identity.Client.Kerberos.KerberosKeyTypes.DecCbcCrc = 1 -> Microsoft.Identity.Client.Kerberos.KerberosKeyTypes\nMicrosoft.Identity.Client.Kerberos.KerberosKeyTypes.DesCbcMd5 = 3 -> Microsoft.Identity.Client.Kerberos.KerberosKeyTypes\nMicrosoft.Identity.Client.Kerberos.KerberosKeyTypes.None = 0 -> Microsoft.Identity.Client.Kerberos.KerberosKeyTypes\nMicrosoft.Identity.Client.Kerberos.KerberosSupplementalTicket\nMicrosoft.Identity.Client.Kerberos.KerberosSupplementalTicket.ClientKey.get -> string\nMicrosoft.Identity.Client.Kerberos.KerberosSupplementalTicket.ClientKey.set -> void\nMicrosoft.Identity.Client.Kerberos.KerberosSupplementalTicket.ClientName.get -> string\nMicrosoft.Identity.Client.Kerberos.KerberosSupplementalTicket.ClientName.set -> void\nMicrosoft.Identity.Client.Kerberos.KerberosSupplementalTicket.ErrorMessage.get -> string\nMicrosoft.Identity.Client.Kerberos.KerberosSupplementalTicket.ErrorMessage.set -> void\nMicrosoft.Identity.Client.Kerberos.KerberosSupplementalTicket.KerberosMessageBuffer.get -> string\nMicrosoft.Identity.Client.Kerberos.KerberosSupplementalTicket.KerberosMessageBuffer.set -> void\nMicrosoft.Identity.Client.Kerberos.KerberosSupplementalTicket.KerberosSupplementalTicket() -> void\nMicrosoft.Identity.Client.Kerberos.KerberosSupplementalTicket.KerberosSupplementalTicket(string errorMessage) -> void\nMicrosoft.Identity.Client.Kerberos.KerberosSupplementalTicket.KeyType.get -> Microsoft.Identity.Client.Kerberos.KerberosKeyTypes\nMicrosoft.Identity.Client.Kerberos.KerberosSupplementalTicket.KeyType.set -> void\nMicrosoft.Identity.Client.Kerberos.KerberosSupplementalTicket.Realm.get -> string\nMicrosoft.Identity.Client.Kerberos.KerberosSupplementalTicket.Realm.set -> void\nMicrosoft.Identity.Client.Kerberos.KerberosSupplementalTicket.ServicePrincipalName.get -> string\nMicrosoft.Identity.Client.Kerberos.KerberosSupplementalTicket.ServicePrincipalName.set -> void\nMicrosoft.Identity.Client.Kerberos.KerberosSupplementalTicketManager\nMicrosoft.Identity.Client.Kerberos.KerberosTicketContainer\nMicrosoft.Identity.Client.Kerberos.KerberosTicketContainer.AccessToken = 1 -> Microsoft.Identity.Client.Kerberos.KerberosTicketContainer\n```\n\n----------------------------------------\n\nTITLE: MsalClientException Class in MSAL.NET\nDESCRIPTION: Defines an exception class for client-side errors during authentication. Provides constructors with error code, message, and inner exception parameters.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/netstandard2.0/PublicAPI.Shipped.txt#2025-04-23_snippet_69\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.MsalClientException\nMicrosoft.Identity.Client.MsalClientException.MsalClientException(string errorCode) -> void\nMicrosoft.Identity.Client.MsalClientException.MsalClientException(string errorCode, string errorMessage) -> void\nMicrosoft.Identity.Client.MsalClientException.MsalClientException(string errorCode, string errorMessage, System.Exception innerException) -> void\n```\n\n----------------------------------------\n\nTITLE: WindowsBrokerOptions Class Implementation in C#\nDESCRIPTION: Defines the WindowsBrokerOptions class which configures options for Windows broker authentication. Includes properties for customizing broker behavior like HeaderText, ListWindowsWorkAndSchoolAccounts, and MsaPassthrough.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-android/PublicAPI.Shipped.txt#2025-04-23_snippet_40\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.WindowsBrokerOptions\nMicrosoft.Identity.Client.WindowsBrokerOptions.HeaderText.get -> string\nMicrosoft.Identity.Client.WindowsBrokerOptions.HeaderText.set -> void\nMicrosoft.Identity.Client.WindowsBrokerOptions.ListWindowsWorkAndSchoolAccounts.get -> bool\nMicrosoft.Identity.Client.WindowsBrokerOptions.ListWindowsWorkAndSchoolAccounts.set -> void\nMicrosoft.Identity.Client.WindowsBrokerOptions.MsaPassthrough.get -> bool\nMicrosoft.Identity.Client.WindowsBrokerOptions.MsaPassthrough.set -> void\nMicrosoft.Identity.Client.WindowsBrokerOptions.WindowsBrokerOptions() -> void\n```\n\n----------------------------------------\n\nTITLE: Defining UserAssertion Class in C#\nDESCRIPTION: Class representing a user assertion in the Microsoft.Identity.Client namespace. It includes properties for the assertion and assertion type, and constructors for creating instances.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/netstandard2.0/PublicAPI.Shipped.txt#2025-04-23_snippet_81\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.UserAssertion\nMicrosoft.Identity.Client.UserAssertion.Assertion.get -> string\nMicrosoft.Identity.Client.UserAssertion.AssertionType.get -> string\nMicrosoft.Identity.Client.UserAssertion.UserAssertion(string assertion, string assertionType) -> void\nMicrosoft.Identity.Client.UserAssertion.UserAssertion(string jwtBearerToken) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining ManagedIdentityApplication Class in C#\nDESCRIPTION: Defines the ManagedIdentityApplication class with a method for acquiring tokens for managed identities. This class is used for authenticating with managed identities in Azure.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net462/PublicAPI.Shipped.txt#2025-04-23_snippet_25\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.ManagedIdentityApplication\nMicrosoft.Identity.Client.ManagedIdentityApplication.AcquireTokenForManagedIdentity(string resource) -> Microsoft.Identity.Client.AcquireTokenForManagedIdentityParameterBuilder\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Response from MSI Helper Service\nDESCRIPTION: A sample response from the EnvironmentVariables endpoint showing the identity header, endpoint, and API version needed to construct a token request. These values will be used to form the MSI token request.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/tests/devapps/Managed Identity apps/MSIHelperService/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: http\nCODE:\n```\n{\n    \"IDENTITY_HEADER\":\"DFD8834E6E754712A405D48C23160297\",\n    \"IDENTITY_ENDPOINT\":\"http://127.0.0.1:41872/msi/token/\",\n    \"IDENTITY_API_VERSION\":\"2019-08-01\"\n}\n```\n\n----------------------------------------\n\nTITLE: Token Acquisition Parameter Validation in MSAL.NET\nDESCRIPTION: Virtual methods for validating token acquisition parameters and handling authentication exceptions, including WebForms authentication dialog implementations.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net462/PublicAPI.Shipped.txt#2025-04-23_snippet_37\n\nLANGUAGE: C#\nCODE:\n```\nvirtual Microsoft.Identity.Client.BaseAbstractAcquireTokenParameterBuilder<T>.Validate() -> void\nvirtual Microsoft.Identity.Client.MsalServiceException.UpdateIsRetryable() -> void\nvirtual Microsoft.Identity.Client.Platforms.Features.WinFormsLegacyWebUi.WindowsFormsWebAuthenticationDialogBase.OnAuthenticate(System.Threading.CancellationToken cancellationToken) -> void\nvirtual Microsoft.Identity.Client.Platforms.Features.WinFormsLegacyWebUi.WindowsFormsWebAuthenticationDialogBase.WebBrowserBeforeNavigateHandler(object sender, Microsoft.Identity.Client.Platforms.Features.WinFormsLegacyWebUi.WebBrowserBeforeNavigateEventArgs e) -> void\nvirtual Microsoft.Identity.Client.Platforms.Features.WinFormsLegacyWebUi.WindowsFormsWebAuthenticationDialogBase.WebBrowserNavigateErrorHandler(object sender, Microsoft.Identity.Client.Platforms.Features.WinFormsLegacyWebUi.WebBrowserNavigateErrorEventArgs e) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining DeviceCodeResult Properties in C#\nDESCRIPTION: Declares properties for the DeviceCodeResult class, which represents the result of a device code flow authentication request. These properties include device code, user code, verification URL, and expiration information.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/netstandard2.0/PublicAPI.Shipped.txt#2025-04-23_snippet_46\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.DeviceCodeResult\nMicrosoft.Identity.Client.DeviceCodeResult.ClientId.get -> string\nMicrosoft.Identity.Client.DeviceCodeResult.DeviceCode.get -> string\nMicrosoft.Identity.Client.DeviceCodeResult.ExpiresOn.get -> System.DateTimeOffset\nMicrosoft.Identity.Client.DeviceCodeResult.Interval.get -> long\nMicrosoft.Identity.Client.DeviceCodeResult.Message.get -> string\nMicrosoft.Identity.Client.DeviceCodeResult.Scopes.get -> System.Collections.Generic.IReadOnlyCollection<string>\nMicrosoft.Identity.Client.DeviceCodeResult.UserCode.get -> string\nMicrosoft.Identity.Client.DeviceCodeResult.VerificationUrl.get -> string\n```\n\n----------------------------------------\n\nTITLE: Cache Management Classes in C#\nDESCRIPTION: Defines cache data structures and options for managing authentication token caching\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-ios/PublicAPI.Shipped.txt#2025-04-23_snippet_16\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.Cache.CacheData\nMicrosoft.Identity.Client.Cache.CacheData.AdalV3State.get -> byte[]\nMicrosoft.Identity.Client.Cache.CacheData.AdalV3State.set -> void\nMicrosoft.Identity.Client.Cache.CacheData.UnifiedState.get -> byte[]\nMicrosoft.Identity.Client.Cache.CacheData.UnifiedState.set -> void\n```\n\n----------------------------------------\n\nTITLE: Public Client Authentication Class Definitions in C#\nDESCRIPTION: Class and method definitions for MSAL.NET public client authentication components including Windows Forms web authentication dialog, public client application builders, token cache, and telemetry features. These APIs enable various authentication flows including interactive, device code, and integrated Windows authentication.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net462/PublicAPI.Shipped.txt#2025-04-23_snippet_29\n\nLANGUAGE: C#\nCODE:\n```\npublic class WindowsFormsWebAuthenticationDialog\n{\n    public void ShowBrowser(CancellationToken cancellationToken);\n    public WindowsFormsWebAuthenticationDialog(object ownerWindow, EmbeddedWebViewOptions embeddedWebViewOptions);\n}\n\npublic class PublicClientApplication\n{\n    public AcquireTokenInteractiveParameterBuilder AcquireTokenInteractive(IEnumerable<string> scopes);\n    public AcquireTokenByIntegratedWindowsAuthParameterBuilder AcquireTokenByIntegratedWindowsAuth(IEnumerable<string> scopes);\n    public bool IsBrokerAvailable();\n    public bool IsEmbeddedWebViewAvailable();\n}\n\npublic class TokenCache\n{\n    public void SetBeforeAccess(TokenCacheCallback beforeAccess);\n    public void SetAfterAccess(TokenCacheCallback afterAccess);\n    public void SetBeforeWrite(TokenCacheCallback beforeWrite);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Kerberos Ticket from ID Token in C#\nDESCRIPTION: Static method that extracts Kerberos supplemental ticket information from an ID token. This enables applications to use Kerberos authentication derived from an Azure AD token.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-ios/PublicAPI.Shipped.txt#2025-04-23_snippet_46\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Client.Kerberos.KerberosSupplementalTicketManager.FromIdToken(string idToken) -> Microsoft.Identity.Client.Kerberos.KerberosSupplementalTicket\n```\n\n----------------------------------------\n\nTITLE: MsalClaimsChallengeException Class in MSAL.NET\nDESCRIPTION: Defines an exception class for handling claims challenges during authentication. Provides constructors with varying parameters including error code, message, inner exception, and UI classification.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/netstandard2.0/PublicAPI.Shipped.txt#2025-04-23_snippet_68\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.MsalClaimsChallengeException\nMicrosoft.Identity.Client.MsalClaimsChallengeException.MsalClaimsChallengeException(string errorCode, string errorMessage) -> void\nMicrosoft.Identity.Client.MsalClaimsChallengeException.MsalClaimsChallengeException(string errorCode, string errorMessage, System.Exception innerException) -> void\nMicrosoft.Identity.Client.MsalClaimsChallengeException.MsalClaimsChallengeException(string errorCode, string errorMessage, System.Exception innerException, Microsoft.Identity.Client.UiRequiredExceptionClassification classification) -> void\n```\n\n----------------------------------------\n\nTITLE: Confidential Client Application Configuration in MSAL.NET\nDESCRIPTION: Methods for creating and configuring confidential client applications in MSAL.NET, which represent applications that can securely store credentials.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net472/PublicAPI.Shipped.txt#2025-04-23_snippet_19\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Client.CacheOptions.EnableSharedCacheOptions.get -> Microsoft.Identity.Client.CacheOptions\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Client.ConfidentialClientApplicationBuilder.Create(string clientId) -> Microsoft.Identity.Client.ConfidentialClientApplicationBuilder\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Client.ConfidentialClientApplicationBuilder.CreateWithApplicationOptions(Microsoft.Identity.Client.ConfidentialClientApplicationOptions options) -> Microsoft.Identity.Client.ConfidentialClientApplicationBuilder\n```\n\n----------------------------------------\n\nTITLE: Configuring Cache Search for On-Behalf-Of Flow in C#\nDESCRIPTION: Extension method that configures whether to search for tokens in the cache for long-running On-Behalf-Of processes. This helps optimize token acquisition in long-running service scenarios.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-ios/PublicAPI.Shipped.txt#2025-04-23_snippet_43\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Client.Extensibility.AcquireTokenOnBehalfOfParameterBuilderExtensions.WithSearchInCacheForLongRunningProcess(this Microsoft.Identity.Client.AcquireTokenOnBehalfOfParameterBuilder builder, bool searchInCache = true) -> Microsoft.Identity.Client.AcquireTokenOnBehalfOfParameterBuilder\n```\n\n----------------------------------------\n\nTITLE: Defining ManagedIdentitySource Enumeration in C#\nDESCRIPTION: Enumeration defining different sources of managed identity authentication for Azure resources. Includes values for IMDS, App Service, Azure Arc, Cloud Shell, Service Fabric, and default options.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0/PublicAPI.Shipped.txt#2025-04-23_snippet_42\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.ManagedIdentity.ManagedIdentitySource\nMicrosoft.Identity.Client.ManagedIdentity.ManagedIdentitySource.AppService = 2 -> Microsoft.Identity.Client.ManagedIdentity.ManagedIdentitySource\nMicrosoft.Identity.Client.ManagedIdentity.ManagedIdentitySource.AzureArc = 3 -> Microsoft.Identity.Client.ManagedIdentity.ManagedIdentitySource\nMicrosoft.Identity.Client.ManagedIdentity.ManagedIdentitySource.CloudShell = 4 -> Microsoft.Identity.Client.ManagedIdentity.ManagedIdentitySource\nMicrosoft.Identity.Client.ManagedIdentity.ManagedIdentitySource.DefaultToImds = 6 -> Microsoft.Identity.Client.ManagedIdentity.ManagedIdentitySource\nMicrosoft.Identity.Client.ManagedIdentity.ManagedIdentitySource.Imds = 1 -> Microsoft.Identity.Client.ManagedIdentity.ManagedIdentitySource\nMicrosoft.Identity.Client.ManagedIdentity.ManagedIdentitySource.None = 0 -> Microsoft.Identity.Client.ManagedIdentity.ManagedIdentitySource\nMicrosoft.Identity.Client.ManagedIdentity.ManagedIdentitySource.ServiceFabric = 5 -> Microsoft.Identity.Client.ManagedIdentity.ManagedIdentitySource\n```\n\n----------------------------------------\n\nTITLE: Metrics and Diagnostics in MSAL.NET\nDESCRIPTION: Methods for accessing authentication metrics in MSAL.NET, providing insight into token acquisition performance and sources.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net472/PublicAPI.Shipped.txt#2025-04-23_snippet_22\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Client.Metrics.TotalAccessTokensFromBroker.get -> long\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Client.Metrics.TotalAccessTokensFromCache.get -> long\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Client.Metrics.TotalAccessTokensFromIdP.get -> long\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Client.Metrics.TotalDurationInMs.get -> long\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Client.MsalException.FromJsonString(string json) -> Microsoft.Identity.Client.MsalException\n```\n\n----------------------------------------\n\nTITLE: Refresh Token Parameter Builder\nDESCRIPTION: Methods for configuring token acquisition using the refresh token flow. Includes options for X.509 certificate sending during the token request.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0/PublicAPI.Shipped.txt#2025-04-23_snippet_14\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.AcquireTokenByRefreshTokenParameterBuilder\nMicrosoft.Identity.Client.AcquireTokenByRefreshTokenParameterBuilder.WithSendX5C(bool withSendX5C) -> Microsoft.Identity.Client.AcquireTokenByRefreshTokenParameterBuilder\n```\n\n----------------------------------------\n\nTITLE: MSAL.NET Token Provider Result Class Definition\nDESCRIPTION: Class definition for handling token provider results, including access token management and expiration timing.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0/PublicAPI.Shipped.txt#2025-04-23_snippet_36\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.Extensibility.AppTokenProviderResult\nMicrosoft.Identity.Client.Extensibility.AppTokenProviderResult.AccessToken.get -> string\nMicrosoft.Identity.Client.Extensibility.AppTokenProviderResult.AccessToken.set -> void\nMicrosoft.Identity.Client.Extensibility.AppTokenProviderResult.AppTokenProviderResult() -> void\nMicrosoft.Identity.Client.Extensibility.AppTokenProviderResult.ExpiresInSeconds.get -> long\nMicrosoft.Identity.Client.Extensibility.AppTokenProviderResult.ExpiresInSeconds.set -> void\nMicrosoft.Identity.Client.Extensibility.AppTokenProviderResult.RefreshInSeconds.get -> long?\nMicrosoft.Identity.Client.Extensibility.AppTokenProviderResult.RefreshInSeconds.set -> void\n```\n\n----------------------------------------\n\nTITLE: Defining ClientApplicationBase Class in C#\nDESCRIPTION: This snippet defines the ClientApplicationBase class with a method for acquiring a token silently using specified scopes and an account.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/netstandard2.0/PublicAPI.Shipped.txt#2025-04-23_snippet_41\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.ClientApplicationBase\nMicrosoft.Identity.Client.ClientApplicationBase.AcquireTokenSilent(System.Collections.Generic.IEnumerable<string> scopes, Microsoft.Identity.Client.IAccount account) -> Microsoft.Identity.Client.AcquireTokenSilentParameterBuilder\n```\n\n----------------------------------------\n\nTITLE: Defining AadAuthorityAudience Enumeration in C#\nDESCRIPTION: Enumeration of Azure Active Directory (AAD) authority audience types used when configuring authentication flows. This defines the target audience for the authentication, such as personal Microsoft accounts, Azure AD organizations, or combinations.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net462/PublicAPI.Shipped.txt#2025-04-23_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.AadAuthorityAudience\nMicrosoft.Identity.Client.AadAuthorityAudience.AzureAdAndPersonalMicrosoftAccount = 2 -> Microsoft.Identity.Client.AadAuthorityAudience\nMicrosoft.Identity.Client.AadAuthorityAudience.AzureAdMultipleOrgs = 3 -> Microsoft.Identity.Client.AadAuthorityAudience\nMicrosoft.Identity.Client.AadAuthorityAudience.AzureAdMyOrg = 1 -> Microsoft.Identity.Client.AadAuthorityAudience\nMicrosoft.Identity.Client.AadAuthorityAudience.None = 0 -> Microsoft.Identity.Client.AadAuthorityAudience\nMicrosoft.Identity.Client.AadAuthorityAudience.PersonalMicrosoftAccount = 4 -> Microsoft.Identity.Client.AadAuthorityAudience\n```\n\n----------------------------------------\n\nTITLE: MSAL Error Code Constants in C#\nDESCRIPTION: Constants defining error codes for various authentication failure scenarios in the Microsoft Authentication Library. These constants represent different error conditions that can occur during authentication flows, such as redirect issues, parsing failures, and platform-specific problems.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-ios/PublicAPI.Shipped.txt#2025-04-23_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Identity.Client.MsalError.NonHttpsRedirectNotSupported = \"non_https_redirect_failed\" -> string\nconst Microsoft.Identity.Client.MsalError.NonParsableOAuthError = \"non_parsable_oauth_error\" -> string\nconst Microsoft.Identity.Client.MsalError.NoPromptFailedError = \"no_prompt_failed\" -> string\nconst Microsoft.Identity.Client.MsalError.NoRedirectUri = \"no_redirect_uri\" -> string\nconst Microsoft.Identity.Client.MsalError.NoTokensFoundError = \"no_tokens_found\" -> string\nconst Microsoft.Identity.Client.MsalError.NoUsernameOrAccountIDProvidedForSilentAndroidBrokerAuthentication = \"no_username_or_accountid_provided_for_silent_android_broker_authentication\" -> string\nconst Microsoft.Identity.Client.MsalError.NullIntentReturnedFromAndroidBroker = \"null_intent_returned_from_broker\" -> string\nconst Microsoft.Identity.Client.MsalError.OboCacheKeyNotInCacheError = \"obo_cache_key_not_in_cache_error\" -> string\nconst Microsoft.Identity.Client.MsalError.ParsingWsMetadataExchangeFailed = \"parsing_ws_metadata_exchange_failed\" -> string\nconst Microsoft.Identity.Client.MsalError.ParsingWsTrustResponseFailed = \"parsing_wstrust_response_failed\" -> string\nconst Microsoft.Identity.Client.MsalError.PasswordRequiredForManagedUserError = \"password_required_for_managed_user\" -> string\nconst Microsoft.Identity.Client.MsalError.PlatformNotSupported = \"platform_not_supported\" -> string\nconst Microsoft.Identity.Client.MsalError.ReadingApplicationTokenFromKeychainFailed = \"reading_application_token_from_keychain_failed\" -> string\nconst Microsoft.Identity.Client.MsalError.RedirectUriValidationFailed = \"redirect_uri_validation_failed\" -> string\nconst Microsoft.Identity.Client.MsalError.RegionalAndAuthorityOverride = \"authority_override_regional\" -> string\nconst Microsoft.Identity.Client.MsalError.RegionalAuthorityValidation = \"regional_authority_validation\" -> string\nconst Microsoft.Identity.Client.MsalError.RegionDiscoveryFailed = \"region_discovery_failed\" -> string\nconst Microsoft.Identity.Client.MsalError.RegionDiscoveryNotEnabled = \"region_discovery_unavailable\" -> string\nconst Microsoft.Identity.Client.MsalError.RegionDiscoveryWithCustomInstanceMetadata = \"region_discovery_with_custom_instance_metadata\" -> string\nconst Microsoft.Identity.Client.MsalError.RequestThrottled = \"request_throttled\" -> string\nconst Microsoft.Identity.Client.MsalError.RequestTimeout = \"request_timeout\" -> string\nconst Microsoft.Identity.Client.MsalError.RopcDoesNotSupportMsaAccounts = \"ropc_not_supported_for_msa\" -> string\nconst Microsoft.Identity.Client.MsalError.ScopesRequired = \"scopes_required_client_credentials\" -> string\nconst Microsoft.Identity.Client.MsalError.ServiceNotAvailable = \"service_not_available\" -> string\nconst Microsoft.Identity.Client.MsalError.SetCiamAuthorityAtRequestLevelNotSupported = \"set_ciam_authority_at_request_level_not_supported\" -> string\nconst Microsoft.Identity.Client.MsalError.SSHCertUsedAsHttpHeader = \"ssh_cert_used_as_http_header\" -> string\nconst Microsoft.Identity.Client.MsalError.StateMismatchError = \"state_mismatch\" -> string\nconst Microsoft.Identity.Client.MsalError.StaticCacheWithExternalSerialization = \"static_cache_with_external_serialization\" -> string\nconst Microsoft.Identity.Client.MsalError.SystemWebviewOptionsNotApplicable = \"embedded_webview_not_compatible_default_browser\" -> string\nconst Microsoft.Identity.Client.MsalError.TelemetryConfigOrTelemetryCallback = \"telemetry_config_or_telemetry_callback\" -> string\nconst Microsoft.Identity.Client.MsalError.TenantDiscoveryFailedError = \"tenant_discovery_failed\" -> string\nconst Microsoft.Identity.Client.MsalError.TenantOverrideNonAad = \"tenant_override_non_aad\" -> string\nconst Microsoft.Identity.Client.MsalError.TokenCacheNullError = \"token_cache_null\" -> string\nconst Microsoft.Identity.Client.MsalError.TokenTypeMismatch = \"token_type_mismatch\" -> string\nconst Microsoft.Identity.Client.MsalError.UapCannotFindDomainUser = \"user_information_access_failed\" -> string\nconst Microsoft.Identity.Client.MsalError.UapCannotFindUpn = \"uap_cannot_find_upn\" -> string\nconst Microsoft.Identity.Client.MsalError.UIViewControllerRequiredForiOSBroker = \"uiviewcontroller_required_for_ios_broker\" -> string\nconst Microsoft.Identity.Client.MsalError.UnableToParseAuthenticationHeader = \"unable_to_parse_authentication_header\" -> string\nconst Microsoft.Identity.Client.MsalError.UnauthorizedClient = \"unauthorized_client\" -> string\nconst Microsoft.Identity.Client.MsalError.UnknownBrokerError = \"unknown_broker_error\" -> string\nconst Microsoft.Identity.Client.MsalError.UnknownError = \"unknown_error\" -> string\nconst Microsoft.Identity.Client.MsalError.UnknownManagedIdentityError = \"unknown_managed_identity_error\" -> string\nconst Microsoft.Identity.Client.MsalError.UnknownUser = \"unknown_user\" -> string\nconst Microsoft.Identity.Client.MsalError.UnknownUserType = \"unknown_user_type\" -> string\nconst Microsoft.Identity.Client.MsalError.UpnRequired = \"upn_required\" -> string\nconst Microsoft.Identity.Client.MsalError.UserAssertionNullError = \"user_assertion_null\" -> string\nconst Microsoft.Identity.Client.MsalError.UserAssignedManagedIdentityNotConfigurableAtRuntime = \"user_assigned_managed_identity_not_configurable_at_runtime\" -> string\nconst Microsoft.Identity.Client.MsalError.UserAssignedManagedIdentityNotSupported = \"user_assigned_managed_identity_not_supported\" -> string\nconst Microsoft.Identity.Client.MsalError.UserMismatch = \"user_mismatch\" -> string\nconst Microsoft.Identity.Client.MsalError.UserNullError = \"user_null\" -> string\nconst Microsoft.Identity.Client.MsalError.UserRealmDiscoveryFailed = \"user_realm_discovery_failed\" -> string\nconst Microsoft.Identity.Client.MsalError.ValidateAuthorityOrCustomMetadata = \"validate_authority_or_custom_instance_metadata\" -> string\nconst Microsoft.Identity.Client.MsalError.WABError = \"wab_error\" -> string\nconst Microsoft.Identity.Client.MsalError.WamFailedToSignout = \"wam_failed_to_signout\" -> string\nconst Microsoft.Identity.Client.MsalError.WamInteractiveError = \"wam_interactive_error\" -> string\nconst Microsoft.Identity.Client.MsalError.WamNoB2C = \"wam_no_b2c\" -> string\nconst Microsoft.Identity.Client.MsalError.WamPickerError = \"wam_interactive_picker_error\" -> string\nconst Microsoft.Identity.Client.MsalError.WamScopesRequired = \"scopes_required_wam\" -> string\nconst Microsoft.Identity.Client.MsalError.WamUiThread = \"wam_ui_thread_only\" -> string\nconst Microsoft.Identity.Client.MsalError.WebView2LoaderNotFound = \"webview2loader_not_found\" -> string\nconst Microsoft.Identity.Client.MsalError.WebView2NotInstalled = \"webview2_runtime_not_installed\" -> string\nconst Microsoft.Identity.Client.MsalError.WebviewUnavailable = \"no_system_webview\" -> string\nconst Microsoft.Identity.Client.MsalError.WritingApplicationTokenToKeychainFailed = \"writing_application_token_to_keychain_failed\" -> string\nconst Microsoft.Identity.Client.MsalError.WsTrustEndpointNotFoundInMetadataDocument = \"wstrust_endpoint_not_found\" -> string\n```\n\n----------------------------------------\n\nTITLE: RegionDetails Class in C#\nDESCRIPTION: A class that provides details about the Azure region used for authentication requests, including the outcome of region determination and any error encountered during auto-detection.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-android/PublicAPI.Shipped.txt#2025-04-23_snippet_31\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.RegionDetails\nMicrosoft.Identity.Client.RegionDetails.AutoDetectionError.get -> string\nMicrosoft.Identity.Client.RegionDetails.RegionDetails(Microsoft.Identity.Client.Region.RegionOutcome regionOutcome, string regionUsed, string autoDetectionError) -> void\nMicrosoft.Identity.Client.RegionDetails.RegionOutcome.get -> Microsoft.Identity.Client.Region.RegionOutcome\nMicrosoft.Identity.Client.RegionDetails.RegionUsed.get -> string\n```\n\n----------------------------------------\n\nTITLE: Retrieving Certificate from Confidential Client Application in C#\nDESCRIPTION: Extension method that retrieves the X.509 certificate used by a confidential client application for authentication. This allows applications to inspect or use the certificate for other purposes.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-ios/PublicAPI.Shipped.txt#2025-04-23_snippet_59\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Client.OsCapabilitiesExtensions.GetCertificate(this Microsoft.Identity.Client.IConfidentialClientApplication confidentialClientApplication) -> System.Security.Cryptography.X509Certificates.X509Certificate2\n```\n\n----------------------------------------\n\nTITLE: AcquireTokenByUsernamePasswordParameterBuilder Methods in C#\nDESCRIPTION: Methods for configuring the AcquireTokenByUsernamePasswordParameterBuilder, including setting federation metadata and proof of possession.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/netstandard2.0/PublicAPI.Shipped.txt#2025-04-23_snippet_20\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.AcquireTokenByUsernamePasswordParameterBuilder.WithFederationMetadata(string federationMetadata) -> Microsoft.Identity.Client.AcquireTokenByUsernamePasswordParameterBuilder\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.AcquireTokenByUsernamePasswordParameterBuilder.WithProofOfPossession(string nonce, System.Net.Http.HttpMethod httpMethod, System.Uri requestUri) -> Microsoft.Identity.Client.AcquireTokenByUsernamePasswordParameterBuilder\n```\n\n----------------------------------------\n\nTITLE: Metrics and Diagnostics Methods in MSAL.NET\nDESCRIPTION: Static properties for retrieving performance metrics about token acquisitions, including counts of tokens from different sources and total operation duration.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0/PublicAPI.Shipped.txt#2025-04-23_snippet_63\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Client.Metrics.TotalAccessTokensFromBroker.get -> long\nstatic Microsoft.Identity.Client.Metrics.TotalAccessTokensFromCache.get -> long\nstatic Microsoft.Identity.Client.Metrics.TotalAccessTokensFromIdP.get -> long\nstatic Microsoft.Identity.Client.Metrics.TotalDurationInMs.get -> long\n```\n\n----------------------------------------\n\nTITLE: Defining PoPAuthenticationConfiguration Class in C#\nDESCRIPTION: Class definition for PoPAuthenticationConfiguration with properties and constructors for configuring Proof of Possession authentication.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0/PublicAPI.Shipped.txt#2025-04-23_snippet_22\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.AppConfig.PoPAuthenticationConfiguration\nMicrosoft.Identity.Client.AppConfig.PoPAuthenticationConfiguration.HttpHost.get -> string\nMicrosoft.Identity.Client.AppConfig.PoPAuthenticationConfiguration.HttpHost.set -> void\nMicrosoft.Identity.Client.AppConfig.PoPAuthenticationConfiguration.HttpMethod.get -> System.Net.Http.HttpMethod\nMicrosoft.Identity.Client.AppConfig.PoPAuthenticationConfiguration.HttpMethod.set -> void\nMicrosoft.Identity.Client.AppConfig.PoPAuthenticationConfiguration.HttpPath.get -> string\nMicrosoft.Identity.Client.AppConfig.PoPAuthenticationConfiguration.HttpPath.set -> void\nMicrosoft.Identity.Client.AppConfig.PoPAuthenticationConfiguration.Nonce.get -> string\nMicrosoft.Identity.Client.AppConfig.PoPAuthenticationConfiguration.Nonce.set -> void\nMicrosoft.Identity.Client.AppConfig.PoPAuthenticationConfiguration.PoPAuthenticationConfiguration() -> void\nMicrosoft.Identity.Client.AppConfig.PoPAuthenticationConfiguration.PoPAuthenticationConfiguration(System.Net.Http.HttpRequestMessage httpRequestMessage) -> void\nMicrosoft.Identity.Client.AppConfig.PoPAuthenticationConfiguration.PoPAuthenticationConfiguration(System.Uri requestUri) -> void\nMicrosoft.Identity.Client.AppConfig.PoPAuthenticationConfiguration.PopCryptoProvider.get -> Microsoft.Identity.Client.AuthScheme.PoP.IPoPCryptoProvider\nMicrosoft.Identity.Client.AppConfig.PoPAuthenticationConfiguration.PopCryptoProvider.set -> void\nMicrosoft.Identity.Client.AppConfig.PoPAuthenticationConfiguration.SignHttpRequest.get -> bool\nMicrosoft.Identity.Client.AppConfig.PoPAuthenticationConfiguration.SignHttpRequest.set -> void\n```\n\n----------------------------------------\n\nTITLE: Exception and OS Capability Extensions in MSAL.NET\nDESCRIPTION: Utility methods for serializing/deserializing MSAL exceptions and detecting operating system capabilities relevant to authentication flows, such as certificate access and web view availability.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0/PublicAPI.Shipped.txt#2025-04-23_snippet_64\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Client.MsalException.FromJsonString(string json) -> Microsoft.Identity.Client.MsalException\nstatic Microsoft.Identity.Client.OsCapabilitiesExtensions.GetCertificate(this Microsoft.Identity.Client.IConfidentialClientApplication confidentialClientApplication) -> System.Security.Cryptography.X509Certificates.X509Certificate2\nstatic Microsoft.Identity.Client.OsCapabilitiesExtensions.IsEmbeddedWebViewAvailable(this Microsoft.Identity.Client.IPublicClientApplication publicClientApplication) -> bool\nstatic Microsoft.Identity.Client.OsCapabilitiesExtensions.IsSystemWebViewAvailable(this Microsoft.Identity.Client.IPublicClientApplication publicClientApplication) -> bool\nstatic Microsoft.Identity.Client.OsCapabilitiesExtensions.IsUserInteractive(this Microsoft.Identity.Client.IPublicClientApplication publicClientApplication) -> bool\n```\n\n----------------------------------------\n\nTITLE: Defining ConfidentialClientApplicationOptions Properties in C#\nDESCRIPTION: Declares properties for the ConfidentialClientApplicationOptions class, which represents configuration options for confidential client applications. These properties include settings for Azure region, client secret, and cache synchronization.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/netstandard2.0/PublicAPI.Shipped.txt#2025-04-23_snippet_45\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.ConfidentialClientApplicationOptions\nMicrosoft.Identity.Client.ConfidentialClientApplicationOptions.AzureRegion.get -> string\nMicrosoft.Identity.Client.ConfidentialClientApplicationOptions.AzureRegion.set -> void\nMicrosoft.Identity.Client.ConfidentialClientApplicationOptions.ClientSecret.get -> string\nMicrosoft.Identity.Client.ConfidentialClientApplicationOptions.ClientSecret.set -> void\nMicrosoft.Identity.Client.ConfidentialClientApplicationOptions.ConfidentialClientApplicationOptions() -> void\nMicrosoft.Identity.Client.ConfidentialClientApplicationOptions.EnableCacheSynchronization.get -> bool\nMicrosoft.Identity.Client.ConfidentialClientApplicationOptions.EnableCacheSynchronization.set -> void\n```\n\n----------------------------------------\n\nTITLE: Defining AzureCloudInstance Enum in C#\nDESCRIPTION: This snippet defines the AzureCloudInstance enum, which represents different Azure cloud instances such as AzurePublic, AzureChina, AzureGermany, and AzureUsGovernment.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/netstandard2.0/PublicAPI.Shipped.txt#2025-04-23_snippet_34\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.AzureCloudInstance\nMicrosoft.Identity.Client.AzureCloudInstance.AzureChina = 2 -> Microsoft.Identity.Client.AzureCloudInstance\nMicrosoft.Identity.Client.AzureCloudInstance.AzureGermany = 3 -> Microsoft.Identity.Client.AzureCloudInstance\nMicrosoft.Identity.Client.AzureCloudInstance.AzurePublic = 1 -> Microsoft.Identity.Client.AzureCloudInstance\nMicrosoft.Identity.Client.AzureCloudInstance.AzureUsGovernment = 4 -> Microsoft.Identity.Client.AzureCloudInstance\nMicrosoft.Identity.Client.AzureCloudInstance.None = 0 -> Microsoft.Identity.Client.AzureCloudInstance\n```\n\n----------------------------------------\n\nTITLE: Defining MSAL Exception Classes in C#\nDESCRIPTION: Defines various exception classes used in the Microsoft Authentication Library for .NET. These include general MSAL exceptions, client exceptions, service exceptions, and UI-required exceptions.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net462/PublicAPI.Shipped.txt#2025-04-23_snippet_27\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.MsalException\nMicrosoft.Identity.Client.MsalClientException\nMicrosoft.Identity.Client.MsalServiceException\nMicrosoft.Identity.Client.MsalUiRequiredException\nMicrosoft.Identity.Client.MsalThrottledServiceException\nMicrosoft.Identity.Client.MsalThrottledUiRequiredException\nMicrosoft.Identity.Client.MsalManagedIdentityException\n```\n\n----------------------------------------\n\nTITLE: TenantProfile Class in C#\nDESCRIPTION: A class that represents a tenant profile containing claims, tenant ID, and object ID information for an authenticated user, useful for multi-tenant applications.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-android/PublicAPI.Shipped.txt#2025-04-23_snippet_34\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.TenantProfile\nMicrosoft.Identity.Client.TenantProfile.ClaimsPrincipal.get -> System.Security.Claims.ClaimsPrincipal\nMicrosoft.Identity.Client.TenantProfile.IsHomeTenant.get -> bool\nMicrosoft.Identity.Client.TenantProfile.Oid.get -> string\nMicrosoft.Identity.Client.TenantProfile.TenantId.get -> string\n```\n\n----------------------------------------\n\nTITLE: Checking Proof of Possession Support in Client in C#\nDESCRIPTION: Extension method that determines if proof of possession tokens are supported by the current public client. This allows applications to check capability before attempting to use PoP tokens.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-ios/PublicAPI.Shipped.txt#2025-04-23_snippet_68\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Client.PublicClientApplicationExtensions.IsProofOfPossessionSupportedByClient(this Microsoft.Identity.Client.IPublicClientApplication app) -> bool\n```\n\n----------------------------------------\n\nTITLE: AcquireTokenByIntegratedWindowsAuthParameterBuilder Methods in C#\nDESCRIPTION: Methods for configuring the AcquireTokenByIntegratedWindowsAuthParameterBuilder, including setting federation metadata and username.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/netstandard2.0/PublicAPI.Shipped.txt#2025-04-23_snippet_18\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.AcquireTokenByIntegratedWindowsAuthParameterBuilder.WithFederationMetadata(string federationMetadata) -> Microsoft.Identity.Client.AcquireTokenByIntegratedWindowsAuthParameterBuilder\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.AcquireTokenByIntegratedWindowsAuthParameterBuilder.WithUsername(string username) -> Microsoft.Identity.Client.AcquireTokenByIntegratedWindowsAuthParameterBuilder\n```\n\n----------------------------------------\n\nTITLE: Defining PoPAuthenticationConfiguration Class in C#\nDESCRIPTION: Defines the PoPAuthenticationConfiguration class for configuring Proof of Possession (PoP) authentication, including HTTP request details and crypto provider.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/netstandard2.0/PublicAPI.Shipped.txt#2025-04-23_snippet_27\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.AppConfig.PoPAuthenticationConfiguration\nMicrosoft.Identity.Client.AppConfig.PoPAuthenticationConfiguration.HttpHost.get -> string\nMicrosoft.Identity.Client.AppConfig.PoPAuthenticationConfiguration.HttpHost.set -> void\nMicrosoft.Identity.Client.AppConfig.PoPAuthenticationConfiguration.HttpMethod.get -> System.Net.Http.HttpMethod\nMicrosoft.Identity.Client.AppConfig.PoPAuthenticationConfiguration.HttpMethod.set -> void\nMicrosoft.Identity.Client.AppConfig.PoPAuthenticationConfiguration.HttpPath.get -> string\nMicrosoft.Identity.Client.AppConfig.PoPAuthenticationConfiguration.HttpPath.set -> void\nMicrosoft.Identity.Client.AppConfig.PoPAuthenticationConfiguration.Nonce.get -> string\nMicrosoft.Identity.Client.AppConfig.PoPAuthenticationConfiguration.Nonce.set -> void\nMicrosoft.Identity.Client.AppConfig.PoPAuthenticationConfiguration.PoPAuthenticationConfiguration() -> void\nMicrosoft.Identity.Client.AppConfig.PoPAuthenticationConfiguration.PoPAuthenticationConfiguration(System.Net.Http.HttpRequestMessage httpRequestMessage) -> void\nMicrosoft.Identity.Client.AppConfig.PoPAuthenticationConfiguration.PoPAuthenticationConfiguration(System.Uri requestUri) -> void\nMicrosoft.Identity.Client.AppConfig.PoPAuthenticationConfiguration.PopCryptoProvider.get -> Microsoft.Identity.Client.AuthScheme.PoP.IPoPCryptoProvider\nMicrosoft.Identity.Client.AppConfig.PoPAuthenticationConfiguration.PopCryptoProvider.set -> void\nMicrosoft.Identity.Client.AppConfig.PoPAuthenticationConfiguration.SignHttpRequest.get -> bool\nMicrosoft.Identity.Client.AppConfig.PoPAuthenticationConfiguration.SignHttpRequest.set -> void\n```\n\n----------------------------------------\n\nTITLE: Defining ICustomWebUi Interface for Custom Web UI in C#\nDESCRIPTION: This interface allows for implementing custom web UI for acquiring authorization codes. It defines a method for asynchronously acquiring an authorization code given an authorization URI and redirect URI.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-android/PublicAPI.Shipped.txt#2025-04-23_snippet_25\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.Extensibility.ICustomWebUi\nMicrosoft.Identity.Client.Extensibility.ICustomWebUi.AcquireAuthorizationCodeAsync(System.Uri authorizationUri, System.Uri redirectUri, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.Uri>\n```\n\n----------------------------------------\n\nTITLE: Requesting MSI Token via MSI Helper Service with HTTP\nDESCRIPTION: This HTTP request demonstrates how to obtain a token from the MSI Helper service by passing the URI constructed from the environment variables and specifying the Azure resource type. The X-IDENTITY-HEADER is included from the previous response.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/tests/devapps/Managed Identity apps/MSIHelperService/readme.md#2025-04-23_snippet_4\n\nLANGUAGE: http\nCODE:\n```\ncurl -X 'GET' \\\n  'https://service.msidlab.com/MSIToken?uri=http%3A%2F%2F127.0.0.1%3A41872%2Fmsi%2Ftoken%2F%3Fapi-version%3D2019-08-01%26resource%3Dhttps%3A%2F%2Fmanagement.azure.com&azureResource=WebApp' \\\n  -H 'accept: text/plain' \\\n  -H 'X-IDENTITY-HEADER: DFD8834E6E754712A405D48C23160297'\n```\n\n----------------------------------------\n\nTITLE: Obtaining All WWW-Authenticate Parameters from Resource with Custom HTTP Client in C#\nDESCRIPTION: Static method that sends a request to a resource URI to obtain all authentication parameters using a custom HTTP client. This allows applications to discover all supported authentication methods.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-ios/PublicAPI.Shipped.txt#2025-04-23_snippet_78\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Client.WwwAuthenticateParameters.CreateFromAuthenticationResponseAsync(string resourceUri, System.Net.Http.HttpClient httpClient, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<Microsoft.Identity.Client.WwwAuthenticateParameters>>\n```\n\n----------------------------------------\n\nTITLE: AssertionRequestOptions Properties\nDESCRIPTION: Properties for configuring client capabilities in assertion requests, allowing customization of authentication behavior.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0/PublicAPI.Shipped.txt#2025-04-23_snippet_77\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.AssertionRequestOptions.ClientCapabilities.get -> System.Collections.Generic.IEnumerable<string>\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.AssertionRequestOptions.ClientCapabilities.set -> void\n```\n\n----------------------------------------\n\nTITLE: Implementing IMsalMtlsHttpClientFactory Interface in C#\nDESCRIPTION: Interface definition for managing mTLS-enabled HttpClient instances in Azure SDKs. This interface extends IMsalHttpClientFactory and provides methods for creating HttpClient instances configured with X509 certificates for mutual TLS authentication.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/docs/msi_v2/guidance_for_sdks_consuming_msal.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface IMsalMtlsHttpClientFactory : IMsalHttpClientFactory\n{\n    /// <summary>\n    /// Returns an HttpClient configured with a certificate for mutual TLS authentication.\n    /// </summary>\n    /// <param name=\"x509Certificate2\">The certificate to be used for MTLS authentication.</param>\n    /// <returns>An HttpClient instance configured with the specified certificate.</returns>\n    HttpClient GetHttpClient(X509Certificate2 x509Certificate2);\n}\n```\n\n----------------------------------------\n\nTITLE: Authentication Scheme Interface Definition in C#\nDESCRIPTION: Defines the interface for authentication operations including token formatting and request parameter handling\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-ios/PublicAPI.Shipped.txt#2025-04-23_snippet_14\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.AuthScheme.IAuthenticationOperation\nMicrosoft.Identity.Client.AuthScheme.IAuthenticationOperation.AccessTokenType.get -> string\nMicrosoft.Identity.Client.AuthScheme.IAuthenticationOperation.AuthorizationHeaderPrefix.get -> string\nMicrosoft.Identity.Client.AuthScheme.IAuthenticationOperation.FormatResult(Microsoft.Identity.Client.AuthenticationResult authenticationResult) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining AuthenticationResult Properties in C#\nDESCRIPTION: Defines getter methods for various properties of the AuthenticationResult class, including token details, scopes, and tenant information.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net462/PublicAPI.Shipped.txt#2025-04-23_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.AuthenticationResult.ExtendedExpiresOn.get -> System.DateTimeOffset\nMicrosoft.Identity.Client.AuthenticationResult.IdToken.get -> string\nMicrosoft.Identity.Client.AuthenticationResult.IsExtendedLifeTimeToken.get -> bool\nMicrosoft.Identity.Client.AuthenticationResult.Scopes.get -> System.Collections.Generic.IEnumerable<string>\nMicrosoft.Identity.Client.AuthenticationResult.SpaAuthCode.get -> string\nMicrosoft.Identity.Client.AuthenticationResult.TenantId.get -> string\nMicrosoft.Identity.Client.AuthenticationResult.TokenType.get -> string\nMicrosoft.Identity.Client.AuthenticationResult.UniqueId.get -> string\n```\n\n----------------------------------------\n\nTITLE: Integrated Windows Authentication Parameter Builder\nDESCRIPTION: Methods for configuring token acquisition using Integrated Windows Authentication flow. This includes setting federation metadata and username for the IWA authentication process.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0/PublicAPI.Shipped.txt#2025-04-23_snippet_13\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.AcquireTokenByIntegratedWindowsAuthParameterBuilder\nMicrosoft.Identity.Client.AcquireTokenByIntegratedWindowsAuthParameterBuilder.WithFederationMetadata(string federationMetadata) -> Microsoft.Identity.Client.AcquireTokenByIntegratedWindowsAuthParameterBuilder\nMicrosoft.Identity.Client.AcquireTokenByIntegratedWindowsAuthParameterBuilder.WithUsername(string username) -> Microsoft.Identity.Client.AcquireTokenByIntegratedWindowsAuthParameterBuilder\n```\n\n----------------------------------------\n\nTITLE: POP Authentication Configuration Class\nDESCRIPTION: Defines the configuration for Proof of Possession (PoP) token authentication including HTTP request details and crypto provider settings.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-ios/PublicAPI.Shipped.txt#2025-04-23_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.AppConfig.PoPAuthenticationConfiguration\n{\n    string HttpHost { get; set; }\n    HttpMethod HttpMethod { get; set; }\n    string HttpPath { get; set; }\n    string Nonce { get; set; }\n    IPoPCryptoProvider PopCryptoProvider { get; set; }\n    bool SignHttpRequest { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AcquireTokenWithDeviceCodeParameterBuilder Class in C#\nDESCRIPTION: Defines the AcquireTokenWithDeviceCodeParameterBuilder class with a method for setting a device code result callback.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/netstandard2.0/PublicAPI.Shipped.txt#2025-04-23_snippet_26\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.AcquireTokenWithDeviceCodeParameterBuilder\nMicrosoft.Identity.Client.AcquireTokenWithDeviceCodeParameterBuilder.WithDeviceCodeResultCallback(System.Func<Microsoft.Identity.Client.DeviceCodeResult, System.Threading.Tasks.Task> deviceCodeResultCallback) -> Microsoft.Identity.Client.AcquireTokenWithDeviceCodeParameterBuilder\n```\n\n----------------------------------------\n\nTITLE: Checking System WebView Availability in C#\nDESCRIPTION: Extension method that determines if system web view is available on the current platform for interactive authentication. This helps applications decide which authentication UI to use.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-ios/PublicAPI.Shipped.txt#2025-04-23_snippet_61\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Client.OsCapabilitiesExtensions.IsSystemWebViewAvailable(this Microsoft.Identity.Client.IPublicClientApplication publicClientApplication) -> bool\n```\n\n----------------------------------------\n\nTITLE: Obtaining WWW-Authenticate Parameters from Resource with Custom HTTP Client in C#\nDESCRIPTION: Static method that sends a request to a resource URI to obtain authentication parameters for a specific scheme using a custom HTTP client. This allows for more control over the HTTP request.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-ios/PublicAPI.Shipped.txt#2025-04-23_snippet_76\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Client.WwwAuthenticateParameters.CreateFromAuthenticationResponseAsync(string resourceUri, string scheme, System.Net.Http.HttpClient httpClient, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Microsoft.Identity.Client.WwwAuthenticateParameters>\n```\n\n----------------------------------------\n\nTITLE: Implementing OnBeforeTokenRequestData Class in C#\nDESCRIPTION: Defines the OnBeforeTokenRequestData class with properties for BodyParameters, CancellationToken, Headers, and RequestUri, along with a constructor.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/netstandard2.0/PublicAPI.Shipped.txt#2025-04-23_snippet_53\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.Extensibility.OnBeforeTokenRequestData\nMicrosoft.Identity.Client.Extensibility.OnBeforeTokenRequestData.BodyParameters.get -> System.Collections.Generic.IDictionary<string, string>\nMicrosoft.Identity.Client.Extensibility.OnBeforeTokenRequestData.CancellationToken.get -> System.Threading.CancellationToken\nMicrosoft.Identity.Client.Extensibility.OnBeforeTokenRequestData.Headers.get -> System.Collections.Generic.IDictionary<string, string>\nMicrosoft.Identity.Client.Extensibility.OnBeforeTokenRequestData.OnBeforeTokenRequestData(System.Collections.Generic.IDictionary<string, string> bodyParameters, System.Collections.Generic.IDictionary<string, string> headers, System.Uri requestUri, System.Threading.CancellationToken cancellationToken) -> void\nMicrosoft.Identity.Client.Extensibility.OnBeforeTokenRequestData.RequestUri.get -> System.Uri\nMicrosoft.Identity.Client.Extensibility.OnBeforeTokenRequestData.RequestUri.set -> void\n```\n\n----------------------------------------\n\nTITLE: AcquireTokenForManagedIdentityParameterBuilder Methods in C#\nDESCRIPTION: Methods for configuring the AcquireTokenForManagedIdentityParameterBuilder, including setting claims and force refresh option.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/netstandard2.0/PublicAPI.Shipped.txt#2025-04-23_snippet_22\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.AcquireTokenForManagedIdentityParameterBuilder.WithClaims(string claims) -> Microsoft.Identity.Client.AcquireTokenForManagedIdentityParameterBuilder\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.AcquireTokenForManagedIdentityParameterBuilder.WithForceRefresh(bool forceRefresh) -> Microsoft.Identity.Client.AcquireTokenForManagedIdentityParameterBuilder\n```\n\n----------------------------------------\n\nTITLE: Requesting Environment Variables from MSI Helper Service with HTTP\nDESCRIPTION: This HTTP request demonstrates how to get environment variables for a specific Azure resource (WebApp) from the MSI Helper service. The endpoint returns variables needed to form a subsequent token request.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/tests/devapps/Managed Identity apps/MSIHelperService/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: http\nCODE:\n```\ncurl -X 'GET' \\\n  'https://service.msidlab.com/EnvironmentVariables?resource=WebApp' \\\n  -H 'accept: text/plain'\n```\n\n----------------------------------------\n\nTITLE: MSI Token Response from MSI Helper Service\nDESCRIPTION: A successful response from the MSIToken endpoint containing an access token, expiration time, resource, token type, and client ID. This response simulates what would be returned by an actual MSI endpoint in Azure.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/tests/devapps/Managed Identity apps/MSIHelperService/readme.md#2025-04-23_snippet_5\n\nLANGUAGE: http\nCODE:\n```\n{\n  \"access_token\": \"eyJ0eXAiOiJKV1QiLCJh-trimmed\",\n  \"expires_on\": \"1670868725\",\n  \"resource\": \"https://vault.azure.net\",\n  \"token_type\": \"Bearer\",\n  \"client_id\": \"D67DE30B-1051-4254-909E-85AF7E28C98E\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AuthenticationResult Properties in C#\nDESCRIPTION: This snippet defines several properties of the AuthenticationResult class, including SpaAuthCode, TenantId, TokenType, and UniqueId. These properties provide access to various aspects of the authentication result.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/netstandard2.0/PublicAPI.Shipped.txt#2025-04-23_snippet_30\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.AuthenticationResult.SpaAuthCode.get -> string\nMicrosoft.Identity.Client.AuthenticationResult.TenantId.get -> string\nMicrosoft.Identity.Client.AuthenticationResult.TokenType.get -> string\nMicrosoft.Identity.Client.AuthenticationResult.UniqueId.get -> string\n```\n\n----------------------------------------\n\nTITLE: Authentication Header Parsing in MSAL.NET\nDESCRIPTION: API signatures for classes that handle parsing of authentication headers including WWW-Authenticate headers and Authentication-Info headers used in HTTP authentication flows.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-android/PublicAPI.Shipped.txt#2025-04-23_snippet_15\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.AuthenticationHeaderParser\nMicrosoft.Identity.Client.AuthenticationHeaderParser.AuthenticationHeaderParser() -> void\nMicrosoft.Identity.Client.AuthenticationHeaderParser.AuthenticationInfoParameters.get -> Microsoft.Identity.Client.AuthenticationInfoParameters\nMicrosoft.Identity.Client.AuthenticationHeaderParser.PopNonce.get -> string\nMicrosoft.Identity.Client.AuthenticationHeaderParser.WwwAuthenticateParameters.get -> System.Collections.Generic.IReadOnlyList<Microsoft.Identity.Client.WwwAuthenticateParameters>\nMicrosoft.Identity.Client.AuthenticationInfoParameters\nMicrosoft.Identity.Client.AuthenticationInfoParameters.AuthenticationInfoParameters() -> void\nMicrosoft.Identity.Client.AuthenticationInfoParameters.NextNonce.get -> string\nMicrosoft.Identity.Client.AuthenticationInfoParameters.this[string key].get -> string\n```\n\n----------------------------------------\n\nTITLE: MSAL .NET Error Code Constants\nDESCRIPTION: Collection of string constants representing different error codes used in the Microsoft Authentication Library (MSAL) for .NET. These constants help identify specific authentication failures, configuration issues, and runtime errors.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0/PublicAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Identity.Client.MsalError.AccessDenied = \"access_denied\" -> string\nconst Microsoft.Identity.Client.MsalError.AccessingWsMetadataExchangeFailed = \"accessing_ws_metadata_exchange_failed\" -> string\nconst Microsoft.Identity.Client.MsalError.AccessTokenTypeMissing = \"token_type_missing\" -> string\nconst Microsoft.Identity.Client.MsalError.ActivityRequired = \"activity_required\" -> string\n// ... additional error constants\n```\n\n----------------------------------------\n\nTITLE: ManagedIdentityApplication Class Methods\nDESCRIPTION: Class definition for managed identity application functionality, including methods for token acquisition and builder pattern implementation.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net472/PublicAPI.Shipped.txt#2025-04-23_snippet_13\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.ManagedIdentityApplication.AcquireTokenForManagedIdentity(string resource) -> Microsoft.Identity.Client.AcquireTokenForManagedIdentityParameterBuilder\n\nMicrosoft.Identity.Client.ManagedIdentityApplicationBuilder.Build() -> Microsoft.Identity.Client.IManagedIdentityApplication\nMicrosoft.Identity.Client.ManagedIdentityApplicationBuilder.WithClientCapabilities(System.Collections.Generic.IEnumerable<string> clientCapabilities) -> Microsoft.Identity.Client.ManagedIdentityApplicationBuilder\nMicrosoft.Identity.Client.ManagedIdentityApplicationBuilder.WithTelemetryClient(params Microsoft.IdentityModel.Abstractions.ITelemetryClient[] telemetryClients) -> Microsoft.Identity.Client.ManagedIdentityApplicationBuilder\n```\n\n----------------------------------------\n\nTITLE: Retrieving Operating System Account in C#\nDESCRIPTION: Static property that retrieves the current operating system account information. This allows applications to authenticate using the current OS user context without requiring additional credentials.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-ios/PublicAPI.Shipped.txt#2025-04-23_snippet_65\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Client.PublicClientApplication.OperatingSystemAccount.get -> Microsoft.Identity.Client.IAccount\n```\n\n----------------------------------------\n\nTITLE: WithTenantId API Implementation\nDESCRIPTION: New API method to specify tenant ID instead of the full authority at token acquisition level, replacing the deprecated WithAuthority method.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/CHANGELOG.md#2025-04-23_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n// Deprecated approach\nauthBuilder.WithAuthority(\"https://login.microsoftonline.com/tenantId\")\n\n// New recommended approach\nauthBuilder.WithTenantId(\"tenantId\")\n```\n\n----------------------------------------\n\nTITLE: Platform Detection Utilities in C#\nDESCRIPTION: Static utility methods to detect the current operating system platform. These are used internally to apply platform-specific cache persistence strategies.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client.Extensions.Msal/PublicApi/PublicAPI.Shipped.txt#2025-04-23_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Client.Extensions.Msal.SharedUtilities.IsWindowsPlatform() -> bool\nstatic Microsoft.Identity.Client.Extensions.Msal.SharedUtilities.IsMacPlatform() -> bool\nstatic Microsoft.Identity.Client.Extensions.Msal.SharedUtilities.IsLinuxPlatform() -> bool\nstatic Microsoft.Identity.Client.Extensions.Msal.SharedUtilities.GetUserRootDirectory() -> string\n```\n\n----------------------------------------\n\nTITLE: Adding Cache Parameters to Token Acquisition in C#\nDESCRIPTION: Extension method that allows specifying additional cache parameters when building a token request. This helps in controlling how tokens are cached and retrieved during authentication flows.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-ios/PublicAPI.Shipped.txt#2025-04-23_snippet_38\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Client.Extensibility.AbstractConfidentialClientAcquireTokenParameterBuilderExtension.WithAdditionalCacheParameters<T>(this Microsoft.Identity.Client.AbstractAcquireTokenParameterBuilder<T> builder, System.Collections.Generic.IEnumerable<string> cacheParameters) -> Microsoft.Identity.Client.AbstractAcquireTokenParameterBuilder<T>\n```\n\n----------------------------------------\n\nTITLE: Defining AuthenticationResultMetadata Class in C#\nDESCRIPTION: This snippet defines the AuthenticationResultMetadata class with various properties related to token acquisition timing, cache details, and telemetry information. It includes a constructor and several get/set properties.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/netstandard2.0/PublicAPI.Shipped.txt#2025-04-23_snippet_31\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.AuthenticationResultMetadata\nMicrosoft.Identity.Client.AuthenticationResultMetadata.AuthenticationResultMetadata(Microsoft.Identity.Client.TokenSource tokenSource) -> void\nMicrosoft.Identity.Client.AuthenticationResultMetadata.CacheLevel.get -> Microsoft.Identity.Client.Cache.CacheLevel\nMicrosoft.Identity.Client.AuthenticationResultMetadata.CacheLevel.set -> void\nMicrosoft.Identity.Client.AuthenticationResultMetadata.CacheRefreshReason.get -> Microsoft.Identity.Client.CacheRefreshReason\nMicrosoft.Identity.Client.AuthenticationResultMetadata.CacheRefreshReason.set -> void\nMicrosoft.Identity.Client.AuthenticationResultMetadata.DurationCreatingExtendedTokenInUs.get -> long\nMicrosoft.Identity.Client.AuthenticationResultMetadata.DurationCreatingExtendedTokenInUs.set -> void\nMicrosoft.Identity.Client.AuthenticationResultMetadata.DurationInCacheInMs.get -> long\nMicrosoft.Identity.Client.AuthenticationResultMetadata.DurationInCacheInMs.set -> void\nMicrosoft.Identity.Client.AuthenticationResultMetadata.DurationInHttpInMs.get -> long\nMicrosoft.Identity.Client.AuthenticationResultMetadata.DurationInHttpInMs.set -> void\nMicrosoft.Identity.Client.AuthenticationResultMetadata.DurationTotalInMs.get -> long\nMicrosoft.Identity.Client.AuthenticationResultMetadata.DurationTotalInMs.set -> void\nMicrosoft.Identity.Client.AuthenticationResultMetadata.RefreshOn.get -> System.DateTimeOffset?\nMicrosoft.Identity.Client.AuthenticationResultMetadata.RefreshOn.set -> void\nMicrosoft.Identity.Client.AuthenticationResultMetadata.RegionDetails.get -> Microsoft.Identity.Client.RegionDetails\nMicrosoft.Identity.Client.AuthenticationResultMetadata.RegionDetails.set -> void\nMicrosoft.Identity.Client.AuthenticationResultMetadata.Telemetry.get -> string\nMicrosoft.Identity.Client.AuthenticationResultMetadata.Telemetry.set -> void\nMicrosoft.Identity.Client.AuthenticationResultMetadata.TokenEndpoint.get -> string\nMicrosoft.Identity.Client.AuthenticationResultMetadata.TokenEndpoint.set -> void\nMicrosoft.Identity.Client.AuthenticationResultMetadata.TokenSource.get -> Microsoft.Identity.Client.TokenSource\n```\n\n----------------------------------------\n\nTITLE: MSAL Error Constants\nDESCRIPTION: Constant string values for various MSAL error conditions and states.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-android/PublicAPI.Shipped.txt#2025-04-23_snippet_52\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Identity.Client.MsalError.ManagedIdentityResponseParseFailure = \"managed_identity_response_parse_failure\" -> string\nconst Microsoft.Identity.Client.MsalError.MissingTenantedAuthority = \"missing_tenanted_authority\" -> string\nconst Microsoft.Identity.Client.MsalError.MtlsCertificateNotProvided = \"mtls_certificate_not_provided\" -> string\nconst Microsoft.Identity.Client.MsalError.MtlsPopWithoutRegion = \"mtls_pop_without_region\" -> string\nconst Microsoft.Identity.Client.MsalError.RegionRequiredForMtlsPop = \"region_required_for_mtls_pop\" -> string\nconst Microsoft.Identity.Client.MsalError.ForceRefreshNotCompatibleWithTokenHash = \"force_refresh_and_token_hash_not_compatible\" -> string\n```\n\n----------------------------------------\n\nTITLE: SystemWebViewOptions Class in C#\nDESCRIPTION: Configuration options for the system web view used during interactive authentication, including customization of redirect URIs, success/error messages, and platform-specific settings like iOS privacy prompts.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-android/PublicAPI.Shipped.txt#2025-04-23_snippet_32\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.SystemWebViewOptions\nMicrosoft.Identity.Client.SystemWebViewOptions.BrowserRedirectError.get -> System.Uri\nMicrosoft.Identity.Client.SystemWebViewOptions.BrowserRedirectError.set -> void\nMicrosoft.Identity.Client.SystemWebViewOptions.BrowserRedirectSuccess.get -> System.Uri\nMicrosoft.Identity.Client.SystemWebViewOptions.BrowserRedirectSuccess.set -> void\nMicrosoft.Identity.Client.SystemWebViewOptions.HtmlMessageError.get -> string\nMicrosoft.Identity.Client.SystemWebViewOptions.HtmlMessageError.set -> void\nMicrosoft.Identity.Client.SystemWebViewOptions.HtmlMessageSuccess.get -> string\nMicrosoft.Identity.Client.SystemWebViewOptions.HtmlMessageSuccess.set -> void\nMicrosoft.Identity.Client.SystemWebViewOptions.iOSHidePrivacyPrompt.get -> bool\nMicrosoft.Identity.Client.SystemWebViewOptions.iOSHidePrivacyPrompt.set -> void\nMicrosoft.Identity.Client.SystemWebViewOptions.OpenBrowserAsync.get -> System.Func<System.Uri, System.Threading.Tasks.Task>\nMicrosoft.Identity.Client.SystemWebViewOptions.OpenBrowserAsync.set -> void\nMicrosoft.Identity.Client.SystemWebViewOptions.SystemWebViewOptions() -> void\n```\n\n----------------------------------------\n\nTITLE: Parameter Builder Methods for Token Acquisition in MSAL.NET\nDESCRIPTION: API signatures for various parameter builder classes used in token acquisition flows such as interactive authentication, on-behalf-of flow, silent authentication, and device code flow.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-android/PublicAPI.Shipped.txt#2025-04-23_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.AcquireTokenInteractiveParameterBuilder.WithSystemWebViewOptions(Microsoft.Identity.Client.SystemWebViewOptions options) -> Microsoft.Identity.Client.AcquireTokenInteractiveParameterBuilder\nMicrosoft.Identity.Client.AcquireTokenInteractiveParameterBuilder.WithUseEmbeddedWebView(bool useEmbeddedWebView) -> Microsoft.Identity.Client.AcquireTokenInteractiveParameterBuilder\nMicrosoft.Identity.Client.AcquireTokenOnBehalfOfParameterBuilder\nMicrosoft.Identity.Client.AcquireTokenOnBehalfOfParameterBuilder.WithCcsRoutingHint(string userName) -> Microsoft.Identity.Client.AcquireTokenOnBehalfOfParameterBuilder\nMicrosoft.Identity.Client.AcquireTokenOnBehalfOfParameterBuilder.WithCcsRoutingHint(string userObjectIdentifier, string tenantIdentifier) -> Microsoft.Identity.Client.AcquireTokenOnBehalfOfParameterBuilder\nMicrosoft.Identity.Client.AcquireTokenOnBehalfOfParameterBuilder.WithForceRefresh(bool forceRefresh) -> Microsoft.Identity.Client.AcquireTokenOnBehalfOfParameterBuilder\nMicrosoft.Identity.Client.AcquireTokenOnBehalfOfParameterBuilder.WithSendX5C(bool withSendX5C) -> Microsoft.Identity.Client.AcquireTokenOnBehalfOfParameterBuilder\nMicrosoft.Identity.Client.AcquireTokenSilentParameterBuilder\nMicrosoft.Identity.Client.AcquireTokenSilentParameterBuilder.WithForceRefresh(bool forceRefresh) -> Microsoft.Identity.Client.AcquireTokenSilentParameterBuilder\nMicrosoft.Identity.Client.AcquireTokenSilentParameterBuilder.WithProofOfPossession(Microsoft.Identity.Client.AppConfig.PoPAuthenticationConfiguration popAuthenticationConfiguration) -> Microsoft.Identity.Client.AcquireTokenSilentParameterBuilder\nMicrosoft.Identity.Client.AcquireTokenSilentParameterBuilder.WithProofOfPossession(string nonce, System.Net.Http.HttpMethod httpMethod, System.Uri requestUri) -> Microsoft.Identity.Client.AcquireTokenSilentParameterBuilder\nMicrosoft.Identity.Client.AcquireTokenSilentParameterBuilder.WithSendX5C(bool withSendX5C) -> Microsoft.Identity.Client.AcquireTokenSilentParameterBuilder\nMicrosoft.Identity.Client.AcquireTokenWithDeviceCodeParameterBuilder\nMicrosoft.Identity.Client.AcquireTokenWithDeviceCodeParameterBuilder.WithDeviceCodeResultCallback(System.Func<Microsoft.Identity.Client.DeviceCodeResult, System.Threading.Tasks.Task> deviceCodeResultCallback) -> Microsoft.Identity.Client.AcquireTokenWithDeviceCodeParameterBuilder\nMicrosoft.Identity.Client.Advanced.AcquireTokenParameterBuilderExtensions\n```\n\n----------------------------------------\n\nTITLE: Defining MSAL.NET Error Constants in C#\nDESCRIPTION: This snippet defines a series of string constants representing various error codes and messages used in MSAL.NET. These constants are used throughout the library to provide specific error information for different scenarios.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/netstandard2.0/PublicAPI.Shipped.txt#2025-04-23_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Identity.Client.MsalError.NoTokensFoundError = \"no_tokens_found\" -> string\nconst Microsoft.Identity.Client.MsalError.NoUsernameOrAccountIDProvidedForSilentAndroidBrokerAuthentication = \"no_username_or_accountid_provided_for_silent_android_broker_authentication\" -> string\nconst Microsoft.Identity.Client.MsalError.NullIntentReturnedFromAndroidBroker = \"null_intent_returned_from_broker\" -> string\n// ... (additional error constants)\n```\n\n----------------------------------------\n\nTITLE: RegionOutcome Enumeration in C#\nDESCRIPTION: An enumeration that defines possible outcomes when determining the Azure region for authentication requests, including successful detection, fallback scenarios, and validation states.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-android/PublicAPI.Shipped.txt#2025-04-23_snippet_30\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.Region.RegionOutcome\nMicrosoft.Identity.Client.Region.RegionOutcome.AutodetectSuccess = 4 -> Microsoft.Identity.Client.Region.RegionOutcome\nMicrosoft.Identity.Client.Region.RegionOutcome.FallbackToGlobal = 5 -> Microsoft.Identity.Client.Region.RegionOutcome\nMicrosoft.Identity.Client.Region.RegionOutcome.None = 0 -> Microsoft.Identity.Client.Region.RegionOutcome\nMicrosoft.Identity.Client.Region.RegionOutcome.UserProvidedAutodetectionFailed = 2 -> Microsoft.Identity.Client.Region.RegionOutcome\nMicrosoft.Identity.Client.Region.RegionOutcome.UserProvidedInvalid = 3 -> Microsoft.Identity.Client.Region.RegionOutcome\nMicrosoft.Identity.Client.Region.RegionOutcome.UserProvidedValid = 1 -> Microsoft.Identity.Client.Region.RegionOutcome\n```\n\n----------------------------------------\n\nTITLE: TokenSource Enum Definition in C#\nDESCRIPTION: Defines the TokenSource enum which identifies the source of authentication tokens. Includes IdentityProvider, Cache, and Broker as possible token sources.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-android/PublicAPI.Shipped.txt#2025-04-23_snippet_37\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.TokenSource\nMicrosoft.Identity.Client.TokenSource.Broker = 2 -> Microsoft.Identity.Client.TokenSource\nMicrosoft.Identity.Client.TokenSource.Cache = 1 -> Microsoft.Identity.Client.TokenSource\nMicrosoft.Identity.Client.TokenSource.IdentityProvider = 0 -> Microsoft.Identity.Client.TokenSource\n```\n\n----------------------------------------\n\nTITLE: Defining MSAL.NET Error Code Constants\nDESCRIPTION: A comprehensive set of error code constants used throughout the Microsoft Authentication Library for error handling and reporting. These constants define specific error scenarios that can occur during authentication flows.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-android/PublicAPI.Shipped.txt#2025-04-23_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Identity.Client.MsalError.AccessDenied = \"access_denied\" -> string\nconst Microsoft.Identity.Client.MsalError.AccessingWsMetadataExchangeFailed = \"accessing_ws_metadata_exchange_failed\" -> string\nconst Microsoft.Identity.Client.MsalError.AccessTokenTypeMissing = \"token_type_missing\" -> string\nconst Microsoft.Identity.Client.MsalError.ActivityRequired = \"activity_required\" -> string\nconst Microsoft.Identity.Client.MsalError.AdfsNotSupportedWithBroker = \"adfs_not_supported_with_broker\" -> string\nconst Microsoft.Identity.Client.MsalError.AndroidActivityNotFound = \"android_activity_not_found\" -> string\nconst Microsoft.Identity.Client.MsalError.AndroidBrokerOperationFailed = \"android_broker_operation_failed\" -> string\nconst Microsoft.Identity.Client.MsalError.AndroidBrokerSignatureVerificationFailed = \"broker_signature_verification_failed\" -> string\nconst Microsoft.Identity.Client.MsalError.AuthenticationCanceledError = \"authentication_canceled\" -> string\nconst Microsoft.Identity.Client.MsalError.AuthenticationFailed = \"authentication_failed\" -> string\nconst Microsoft.Identity.Client.MsalError.AuthenticationUiFailed = \"authentication_ui_failed\" -> string\nconst Microsoft.Identity.Client.MsalError.AuthenticationUiFailedError = \"authentication_ui_failed\" -> string\nconst Microsoft.Identity.Client.MsalError.AuthorityHostMismatch = \"authority_host_mismatch\" -> string\nconst Microsoft.Identity.Client.MsalError.AuthorityTenantSpecifiedTwice = \"authority_tenant_specified_twice\" -> string\nconst Microsoft.Identity.Client.MsalError.AuthorityTypeMismatch = \"authority_type_mismatch\" -> string\nconst Microsoft.Identity.Client.MsalError.AuthorityValidationFailed = \"authority_validation_failed\" -> string\nconst Microsoft.Identity.Client.MsalError.B2CAuthorityHostMismatch = \"B2C_authority_host_mismatch\" -> string\nconst Microsoft.Identity.Client.MsalError.BrokerApplicationRequired = \"broker_application_required\" -> string\nconst Microsoft.Identity.Client.MsalError.BrokerDoesNotSupportPop = \"broker_does_not_support_pop\" -> string\nconst Microsoft.Identity.Client.MsalError.BrokerNonceMismatch = \"broker_nonce_mismatch\" -> string\nconst Microsoft.Identity.Client.MsalError.BrokerRequiredForPop = \"broker_required_for_pop\" -> string\nconst Microsoft.Identity.Client.MsalError.BrokerResponseHashMismatch = \"broker_response_hash_mismatch\" -> string\nconst Microsoft.Identity.Client.MsalError.BrokerResponseReturnedError = \"broker_response_returned_error\" -> string\nconst Microsoft.Identity.Client.MsalError.CannotAccessUserInformationOrUserNotDomainJoined = \"user_information_access_failed\" -> string\nconst Microsoft.Identity.Client.MsalError.CannotInvokeBroker = \"cannot_invoke_broker\" -> string\nconst Microsoft.Identity.Client.MsalError.CertificateNotRsa = \"certificate_not_rsa\" -> string\nconst Microsoft.Identity.Client.MsalError.CertWithoutPrivateKey = \"cert_without_private_key\" -> string\nconst Microsoft.Identity.Client.MsalError.ClientCredentialAuthenticationTypeMustBeDefined = \"Client_Credentials_Required_In_Confidential_Client_Application\" -> string\nconst Microsoft.Identity.Client.MsalError.ClientCredentialAuthenticationTypesAreMutuallyExclusive = \"Client_Credential_Authentication_Types_Are_Mutually_Exclusive\" -> string\nconst Microsoft.Identity.Client.MsalError.CodeExpired = \"code_expired\" -> string\nconst Microsoft.Identity.Client.MsalError.CombinedUserAppCacheNotSupported = \"combined_user_app_cache_not_supported\" -> string\nconst Microsoft.Identity.Client.MsalError.CryptographicError = \"cryptographic_error\" -> string\nconst Microsoft.Identity.Client.MsalError.CurrentBrokerAccount = \"current_broker_account\" -> string\nconst Microsoft.Identity.Client.MsalError.CustomMetadataInstanceOrUri = \"custom_metadata_instance_or_uri\" -> string\nconst Microsoft.Identity.Client.MsalError.CustomWebUiRedirectUriMismatch = \"custom_webui_invalid_mismatch\" -> string\nconst Microsoft.Identity.Client.MsalError.CustomWebUiReturnedInvalidUri = \"custom_webui_returned_invalid_uri\" -> string\nconst Microsoft.Identity.Client.MsalError.DefaultRedirectUriIsInvalid = \"redirect_uri_validation_failed\" -> string\nconst Microsoft.Identity.Client.MsalError.DeviceCertificateNotFound = \"device_certificate_not_found\" -> string\nconst Microsoft.Identity.Client.MsalError.DuplicateQueryParameterError = \"duplicate_query_parameter\" -> string\nconst Microsoft.Identity.Client.MsalError.EncodedTokenTooLong = \"encoded_token_too_long\" -> string\nconst Microsoft.Identity.Client.MsalError.ExactlyOneScopeExpected = \"exactly_one_scope_expected\" -> string\nconst Microsoft.Identity.Client.MsalError.ExperimentalFeature = \"experimental_feature\" -> string\nconst Microsoft.Identity.Client.MsalError.FailedToAcquireTokenSilentlyFromBroker = \"failed_to_acquire_token_silently_from_broker\" -> string\nconst Microsoft.Identity.Client.MsalError.FailedToCreateSharedPreference = \"shared_preference_creation_failed\" -> string\nconst Microsoft.Identity.Client.MsalError.FailedToGetBrokerResponse = \"failed_to_get_broker_response\" -> string\nconst Microsoft.Identity.Client.MsalError.FailedToRefreshToken = \"failed_to_refresh_token\" -> string\nconst Microsoft.Identity.Client.MsalError.FederatedServiceReturnedError = \"federated_service_returned_error\" -> string\nconst Microsoft.Identity.Client.MsalError.GetUserNameFailed = \"get_user_name_failed\" -> string\nconst Microsoft.Identity.Client.MsalError.HttpListenerError = \"http_listener_error\" -> string\nconst Microsoft.Identity.Client.MsalError.HttpStatusCodeNotOk = \"http_status_not_200\" -> string\nconst Microsoft.Identity.Client.MsalError.HttpStatusNotFound = \"not_found\" -> string\nconst Microsoft.Identity.Client.MsalError.InitializeProcessSecurityError = \"initialize_process_security_error\" -> string\nconst Microsoft.Identity.Client.MsalError.IntegratedWindowsAuthenticationFailed = \"integrated_windows_authentication_failed\" -> string\nconst Microsoft.Identity.Client.MsalError.IntegratedWindowsAuthNotSupportedForManagedUser = \"integrated_windows_auth_not_supported_managed_user\" -> string\nconst Microsoft.Identity.Client.MsalError.InteractionRequired = \"interaction_required\" -> string\nconst Microsoft.Identity.Client.MsalError.InternalError = \"internal_error\" -> string\nconst Microsoft.Identity.Client.MsalError.InvalidAdalCacheMultipleRTs = \"invalid_adal_cache\" -> string\nconst Microsoft.Identity.Client.MsalError.InvalidAuthority = \"invalid_authority\" -> string\nconst Microsoft.Identity.Client.MsalError.InvalidAuthorityType = \"invalid_authority_type\" -> string\nconst Microsoft.Identity.Client.MsalError.InvalidAuthorizationUri = \"invalid_authorization_uri\" -> string\nconst Microsoft.Identity.Client.MsalError.InvalidClient = \"invalid_client\" -> string\nconst Microsoft.Identity.Client.MsalError.InvalidGrantError = \"invalid_grant\" -> string\nconst Microsoft.Identity.Client.MsalError.InvalidInstance = \"invalid_instance\" -> string\nconst Microsoft.Identity.Client.MsalError.InvalidJsonClaimsFormat = \"invalid_json_claims_format\" -> string\nconst Microsoft.Identity.Client.MsalError.InvalidJwtError = \"invalid_jwt\" -> string\nconst Microsoft.Identity.Client.MsalError.InvalidManagedIdentityEndpoint = \"invalid_managed_identity_endpoint\" -> string\nconst Microsoft.Identity.Client.MsalError.InvalidManagedIdentityResponse = \"invalid_managed_identity_response\" -> string\nconst Microsoft.Identity.Client.MsalError.InvalidOwnerWindowType = \"invalid_owner_window_type\" -> string\nconst Microsoft.Identity.Client.MsalError.InvalidRequest = \"invalid_request\" -> string\nconst Microsoft.Identity.Client.MsalError.InvalidTokenProviderResponseValue = \"invalid_token_provider_response_value\" -> string\nconst Microsoft.Identity.Client.MsalError.InvalidUserInstanceMetadata = \"invalid-custom-instance-metadata\" -> string\nconst Microsoft.Identity.Client.MsalError.JsonParseError = \"json_parse_failed\" -> string\nconst Microsoft.Identity.Client.MsalError.LinuxXdgOpen = \"linux_xdg_open_failed\" -> string\nconst Microsoft.Identity.Client.MsalError.LoopbackRedirectUri = \"loopback_redirect_uri\" -> string\nconst Microsoft.Identity.Client.MsalError.LoopbackResponseUriMismatch = \"loopback_response_uri_mismatch\" -> string\nconst Microsoft.Identity.Client.MsalError.ManagedIdentityRequestFailed = \"managed_identity_request_failed\" -> string\nconst Microsoft.Identity.Client.MsalError.ManagedIdentityUnreachableNetwork = \"managed_identity_unreachable_network\" -> string\nconst Microsoft.Identity.Client.MsalError.MissingFederationMetadataUrl = \"missing_federation_metadata_url\" -> string\nconst Microsoft.Identity.Client.MsalError.MissingPassiveAuthEndpoint = \"missing_passive_auth_endpoint\" -> string\nconst Microsoft.Identity.Client.MsalError.MultipleAccountsForLoginHint = \"multiple_accounts_for_login_hint\" -> string\nconst Microsoft.Identity.Client.MsalError.MultipleTokensMatchedError = \"multiple_matching_tokens_detected\" -> string\nconst Microsoft.Identity.Client.MsalError.NetworkNotAvailableError = \"network_not_available\" -> string\nconst Microsoft.Identity.Client.MsalError.NoAccountForLoginHint = \"no_account_for_login_hint\" -> string\nconst Microsoft.Identity.Client.MsalError.NoAndroidBrokerAccountFound = \"no_broker_account_found\" -> string\nconst Microsoft.Identity.Client.MsalError.NoAndroidBrokerInstalledOnDevice = \"No_Broker_Installed_On_Device\" -> string\nconst Microsoft.Identity.Client.MsalError.NoClientId = \"no_client_id\" -> string\nconst Microsoft.Identity.Client.MsalError.NonceRequiredForPopOnPCA = \"nonce_required_for_pop_on_pca\" -> string\nconst Microsoft.Identity.Client.MsalError.NonHttpsRedirectNotSupported = \"non_https_redirect_failed\" -> string\n```\n\n----------------------------------------\n\nTITLE: Defining AbstractAcquireTokenParameterBuilder Class in C#\nDESCRIPTION: This snippet defines an abstract generic class 'AbstractAcquireTokenParameterBuilder<T>' with methods for configuring token acquisition parameters. It includes methods for setting authority, claims, scopes, and other authentication-related options.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0/PublicAPI.Shipped.txt#2025-04-23_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.AbstractAcquireTokenParameterBuilder<T>\nMicrosoft.Identity.Client.AbstractAcquireTokenParameterBuilder<T>.AbstractAcquireTokenParameterBuilder() -> void\nMicrosoft.Identity.Client.AbstractAcquireTokenParameterBuilder<T>.WithAdfsAuthority(string authorityUri, bool validateAuthority = true) -> T\nMicrosoft.Identity.Client.AbstractAcquireTokenParameterBuilder<T>.WithAuthority(Microsoft.Identity.Client.AadAuthorityAudience authorityAudience, bool validateAuthority = true) -> T\n// ... (additional methods)\n```\n\n----------------------------------------\n\nTITLE: Token Cache Configuration in MSAL.NET\nDESCRIPTION: Extension method for configuring token cache options, allowing customization of how tokens are cached and serialized.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net462/PublicAPI.Shipped.txt#2025-04-23_snippet_33\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Client.TokenCacheExtensions.SetCacheOptions(this Microsoft.Identity.Client.ITokenCache tokenCache, Microsoft.Identity.Client.CacheOptions options) -> void\n```\n\n----------------------------------------\n\nTITLE: Implementing BaseApplicationOptions Class in C#\nDESCRIPTION: Defines a base class for application options, including properties for configuring logging levels and PII logging.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net462/PublicAPI.Shipped.txt#2025-04-23_snippet_15\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.BaseApplicationOptions\nMicrosoft.Identity.Client.BaseApplicationOptions.BaseApplicationOptions() -> void\nMicrosoft.Identity.Client.BaseApplicationOptions.EnablePiiLogging.get -> bool\nMicrosoft.Identity.Client.BaseApplicationOptions.EnablePiiLogging.set -> void\nMicrosoft.Identity.Client.BaseApplicationOptions.IsDefaultPlatformLoggingEnabled.get -> bool\nMicrosoft.Identity.Client.BaseApplicationOptions.IsDefaultPlatformLoggingEnabled.set -> void\nMicrosoft.Identity.Client.BaseApplicationOptions.LogLevel.get -> Microsoft.Identity.Client.LogLevel\nMicrosoft.Identity.Client.BaseApplicationOptions.LogLevel.set -> void\n```\n\n----------------------------------------\n\nTITLE: AbstractManagedIdentityAcquireTokenParameterBuilder Class Declaration in C#\nDESCRIPTION: Declaration of the AbstractManagedIdentityAcquireTokenParameterBuilder generic class and its constructor.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/netstandard2.0/PublicAPI.Shipped.txt#2025-04-23_snippet_13\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.AbstractManagedIdentityAcquireTokenParameterBuilder<T>\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.AbstractManagedIdentityAcquireTokenParameterBuilder<T>.AbstractManagedIdentityAcquireTokenParameterBuilder() -> void\n```\n\n----------------------------------------\n\nTITLE: Microsoft.Identity.Client Error Constants\nDESCRIPTION: Constant string values representing specific error codes in the Microsoft Authentication Library, used for error identification and handling.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0/PublicAPI.Shipped.txt#2025-04-23_snippet_74\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Identity.Client.MsalError.ManagedIdentityResponseParseFailure = \"managed_identity_response_parse_failure\" -> string\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Identity.Client.MsalError.MissingTenantedAuthority = \"missing_tenanted_authority\" -> string\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Identity.Client.MsalError.MtlsCertificateNotProvided = \"mtls_certificate_not_provided\" -> string\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Identity.Client.MsalError.MtlsPopWithoutRegion = \"mtls_pop_without_region\" -> string\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Identity.Client.MsalError.RegionRequiredForMtlsPop = \"region_required_for_mtls_pop\" -> string\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Identity.Client.MsalError.ForceRefreshNotCompatibleWithTokenHash = \"force_refresh_and_token_hash_not_compatible\" -> string\n```\n\n----------------------------------------\n\nTITLE: AcquireTokenByRefreshTokenParameterBuilder Method in C#\nDESCRIPTION: Method for configuring the AcquireTokenByRefreshTokenParameterBuilder, including the option to send X5C.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/netstandard2.0/PublicAPI.Shipped.txt#2025-04-23_snippet_19\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.AcquireTokenByRefreshTokenParameterBuilder.WithSendX5C(bool withSendX5C) -> Microsoft.Identity.Client.AcquireTokenByRefreshTokenParameterBuilder\n```\n\n----------------------------------------\n\nTITLE: Defining MSAL Exception Property Constants in C#\nDESCRIPTION: String constants used for properties of MSAL exception objects. These constants represent keys for accessing broker-related error information, telemetry data, and managed identity sources when handling exceptions.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net462/PublicAPI.Shipped.txt#2025-04-23_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Identity.Client.MsalException.BrokerErrorCode = \"BrokerErrorCode\" -> string\nconst Microsoft.Identity.Client.MsalException.BrokerErrorContext = \"BrokerErrorContext\" -> string\nconst Microsoft.Identity.Client.MsalException.BrokerErrorStatus = \"BrokerErrorStatus\" -> string\nconst Microsoft.Identity.Client.MsalException.BrokerErrorTag = \"BrokerErrorTag\" -> string\nconst Microsoft.Identity.Client.MsalException.BrokerTelemetry = \"BrokerTelemetry\" -> string\nconst Microsoft.Identity.Client.MsalException.ManagedIdentitySource = \"ManagedIdentitySource\" -> string\n```\n\n----------------------------------------\n\nTITLE: Defining MSAL Error Code Constants in C#\nDESCRIPTION: A comprehensive set of error code string constants used by the Microsoft Authentication Library (MSAL) for .NET to identify specific authentication and authorization failures. These constants represent various error scenarios like invalid authority, authentication failures, and platform-specific errors.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net462/PublicAPI.Shipped.txt#2025-04-23_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Identity.Client.MsalError.NonParsableOAuthError = \"non_parsable_oauth_error\" -> string\nconst Microsoft.Identity.Client.MsalError.NoPromptFailedError = \"no_prompt_failed\" -> string\nconst Microsoft.Identity.Client.MsalError.NoRedirectUri = \"no_redirect_uri\" -> string\nconst Microsoft.Identity.Client.MsalError.NoTokensFoundError = \"no_tokens_found\" -> string\nconst Microsoft.Identity.Client.MsalError.NoUsernameOrAccountIDProvidedForSilentAndroidBrokerAuthentication = \"no_username_or_accountid_provided_for_silent_android_broker_authentication\" -> string\nconst Microsoft.Identity.Client.MsalError.NullIntentReturnedFromAndroidBroker = \"null_intent_returned_from_broker\" -> string\nconst Microsoft.Identity.Client.MsalError.OboCacheKeyNotInCacheError = \"obo_cache_key_not_in_cache_error\" -> string\nconst Microsoft.Identity.Client.MsalError.ParsingWsMetadataExchangeFailed = \"parsing_ws_metadata_exchange_failed\" -> string\nconst Microsoft.Identity.Client.MsalError.ParsingWsTrustResponseFailed = \"parsing_wstrust_response_failed\" -> string\nconst Microsoft.Identity.Client.MsalError.PasswordRequiredForManagedUserError = \"password_required_for_managed_user\" -> string\nconst Microsoft.Identity.Client.MsalError.PlatformNotSupported = \"platform_not_supported\" -> string\nconst Microsoft.Identity.Client.MsalError.RedirectUriValidationFailed = \"redirect_uri_validation_failed\" -> string\nconst Microsoft.Identity.Client.MsalError.RegionalAndAuthorityOverride = \"authority_override_regional\" -> string\nconst Microsoft.Identity.Client.MsalError.RegionalAuthorityValidation = \"regional_authority_validation\" -> string\nconst Microsoft.Identity.Client.MsalError.RegionDiscoveryFailed = \"region_discovery_failed\" -> string\nconst Microsoft.Identity.Client.MsalError.RegionDiscoveryNotEnabled = \"region_discovery_unavailable\" -> string\nconst Microsoft.Identity.Client.MsalError.RegionDiscoveryWithCustomInstanceMetadata = \"region_discovery_with_custom_instance_metadata\" -> string\nconst Microsoft.Identity.Client.MsalError.RequestThrottled = \"request_throttled\" -> string\nconst Microsoft.Identity.Client.MsalError.RequestTimeout = \"request_timeout\" -> string\nconst Microsoft.Identity.Client.MsalError.RopcDoesNotSupportMsaAccounts = \"ropc_not_supported_for_msa\" -> string\nconst Microsoft.Identity.Client.MsalError.ScopesRequired = \"scopes_required_client_credentials\" -> string\nconst Microsoft.Identity.Client.MsalError.ServiceNotAvailable = \"service_not_available\" -> string\nconst Microsoft.Identity.Client.MsalError.SetCiamAuthorityAtRequestLevelNotSupported = \"set_ciam_authority_at_request_level_not_supported\" -> string\nconst Microsoft.Identity.Client.MsalError.SSHCertUsedAsHttpHeader = \"ssh_cert_used_as_http_header\" -> string\nconst Microsoft.Identity.Client.MsalError.StateMismatchError = \"state_mismatch\" -> string\nconst Microsoft.Identity.Client.MsalError.StaticCacheWithExternalSerialization = \"static_cache_with_external_serialization\" -> string\nconst Microsoft.Identity.Client.MsalError.SystemWebviewOptionsNotApplicable = \"embedded_webview_not_compatible_default_browser\" -> string\nconst Microsoft.Identity.Client.MsalError.TelemetryConfigOrTelemetryCallback = \"telemetry_config_or_telemetry_callback\" -> string\nconst Microsoft.Identity.Client.MsalError.TenantDiscoveryFailedError = \"tenant_discovery_failed\" -> string\nconst Microsoft.Identity.Client.MsalError.TenantOverrideNonAad = \"tenant_override_non_aad\" -> string\nconst Microsoft.Identity.Client.MsalError.TokenCacheNullError = \"token_cache_null\" -> string\nconst Microsoft.Identity.Client.MsalError.TokenTypeMismatch = \"token_type_mismatch\" -> string\nconst Microsoft.Identity.Client.MsalError.UapCannotFindDomainUser = \"user_information_access_failed\" -> string\nconst Microsoft.Identity.Client.MsalError.UapCannotFindUpn = \"uap_cannot_find_upn\" -> string\nconst Microsoft.Identity.Client.MsalError.UnableToParseAuthenticationHeader = \"unable_to_parse_authentication_header\" -> string\nconst Microsoft.Identity.Client.MsalError.UnauthorizedClient = \"unauthorized_client\" -> string\nconst Microsoft.Identity.Client.MsalError.UnknownBrokerError = \"unknown_broker_error\" -> string\nconst Microsoft.Identity.Client.MsalError.UnknownError = \"unknown_error\" -> string\nconst Microsoft.Identity.Client.MsalError.UnknownManagedIdentityError = \"unknown_managed_identity_error\" -> string\nconst Microsoft.Identity.Client.MsalError.UnknownUser = \"unknown_user\" -> string\nconst Microsoft.Identity.Client.MsalError.UnknownUserType = \"unknown_user_type\" -> string\nconst Microsoft.Identity.Client.MsalError.UpnRequired = \"upn_required\" -> string\nconst Microsoft.Identity.Client.MsalError.UserAssertionNullError = \"user_assertion_null\" -> string\nconst Microsoft.Identity.Client.MsalError.UserAssignedManagedIdentityNotConfigurableAtRuntime = \"user_assigned_managed_identity_not_configurable_at_runtime\" -> string\nconst Microsoft.Identity.Client.MsalError.UserAssignedManagedIdentityNotSupported = \"user_assigned_managed_identity_not_supported\" -> string\nconst Microsoft.Identity.Client.MsalError.UserMismatch = \"user_mismatch\" -> string\nconst Microsoft.Identity.Client.MsalError.UserNullError = \"user_null\" -> string\nconst Microsoft.Identity.Client.MsalError.UserRealmDiscoveryFailed = \"user_realm_discovery_failed\" -> string\nconst Microsoft.Identity.Client.MsalError.ValidateAuthorityOrCustomMetadata = \"validate_authority_or_custom_instance_metadata\" -> string\nconst Microsoft.Identity.Client.MsalError.WABError = \"wab_error\" -> string\nconst Microsoft.Identity.Client.MsalError.WamFailedToSignout = \"wam_failed_to_signout\" -> string\nconst Microsoft.Identity.Client.MsalError.WamInteractiveError = \"wam_interactive_error\" -> string\nconst Microsoft.Identity.Client.MsalError.WamNoB2C = \"wam_no_b2c\" -> string\nconst Microsoft.Identity.Client.MsalError.WamPickerError = \"wam_interactive_picker_error\" -> string\nconst Microsoft.Identity.Client.MsalError.WamScopesRequired = \"scopes_required_wam\" -> string\nconst Microsoft.Identity.Client.MsalError.WamUiThread = \"wam_ui_thread_only\" -> string\nconst Microsoft.Identity.Client.MsalError.WebView2LoaderNotFound = \"webview2loader_not_found\" -> string\nconst Microsoft.Identity.Client.MsalError.WebView2NotInstalled = \"webview2_runtime_not_installed\" -> string\nconst Microsoft.Identity.Client.MsalError.WebviewUnavailable = \"no_system_webview\" -> string\nconst Microsoft.Identity.Client.MsalError.WsTrustEndpointNotFoundInMetadataDocument = \"wstrust_endpoint_not_found\" -> string\n```\n\n----------------------------------------\n\nTITLE: MSAL Base Token Acquisition Method\nDESCRIPTION: Abstract asynchronous method for executing token acquisition operations. Takes a cancellation token parameter and returns an AuthenticationResult.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0/PublicAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nabstract Microsoft.Identity.Client.BaseAbstractAcquireTokenParameterBuilder<T>.ExecuteAsync(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<Microsoft.Identity.Client.AuthenticationResult>\n```\n\n----------------------------------------\n\nTITLE: Application Options Configuration\nDESCRIPTION: Defines the configuration options for MSAL applications including client credentials, authority settings, and cache compatibility options.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-ios/PublicAPI.Shipped.txt#2025-04-23_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.ApplicationOptions\n{\n    string ClientId { get; set; }\n    string RedirectUri { get; set; }\n    string TenantId { get; set; }\n    AadAuthorityAudience AadAuthorityAudience { get; set; }\n    AzureCloudInstance AzureCloudInstance { get; set; }\n    IEnumerable<string> ClientCapabilities { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Account and Account ID Structures in MSAL.NET\nDESCRIPTION: MSAL.NET uses the AccountId class to represent and store identifiers for user accounts. It contains properties for the unique identifier, object ID, and tenant ID of the user account, which are used for silent authentication flows.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-android/PublicAPI.Shipped.txt#2025-04-23_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\n// AccountId constructors and properties\nAccountId(string identifier, string objectId, string tenantId)\nAccountId(string adfsIdentifier)\n\nIdentifier.get -> string\nObjectId.get -> string\nTenantId.get -> string\n```\n\n----------------------------------------\n\nTITLE: Defining AbstractApplicationBuilder Class in C#\nDESCRIPTION: This snippet defines an abstract generic class 'AbstractApplicationBuilder<T>' with a method for configuring ADFS authority. This class is likely used as a base for building MSAL.NET application instances.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0/PublicAPI.Shipped.txt#2025-04-23_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.AbstractApplicationBuilder<T>\nMicrosoft.Identity.Client.AbstractApplicationBuilder<T>.WithAdfsAuthority(string authorityUri, bool validateAuthority = true) -> T\n```\n\n----------------------------------------\n\nTITLE: Configuring Authority for AbstractApplicationBuilder in C#\nDESCRIPTION: Methods for configuring the authority for the AbstractApplicationBuilder class. These methods allow setting up different types of authorities, including AzureAD, B2C, and custom URIs.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/netstandard2.0/PublicAPI.Shipped.txt#2025-04-23_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.AbstractApplicationBuilder<T>.WithAuthority(Microsoft.Identity.Client.AadAuthorityAudience authorityAudience, bool validateAuthority = true) -> T\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.AbstractApplicationBuilder<T>.WithAuthority(Microsoft.Identity.Client.AzureCloudInstance azureCloudInstance, Microsoft.Identity.Client.AadAuthorityAudience authorityAudience, bool validateAuthority = true) -> T\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.AbstractApplicationBuilder<T>.WithAuthority(Microsoft.Identity.Client.AzureCloudInstance azureCloudInstance, string tenant, bool validateAuthority = true) -> T\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.AbstractApplicationBuilder<T>.WithAuthority(Microsoft.Identity.Client.AzureCloudInstance azureCloudInstance, System.Guid tenantId, bool validateAuthority = true) -> T\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.AbstractApplicationBuilder<T>.WithAuthority(string authorityUri, bool validateAuthority = true) -> T\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.AbstractApplicationBuilder<T>.WithAuthority(string cloudInstanceUri, string tenant, bool validateAuthority = true) -> T\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.AbstractApplicationBuilder<T>.WithAuthority(string cloudInstanceUri, System.Guid tenantId, bool validateAuthority = true) -> T\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.AbstractApplicationBuilder<T>.WithAuthority(System.Uri authorityUri, bool validateAuthority = true) -> T\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.AbstractApplicationBuilder<T>.WithB2CAuthority(string authorityUri) -> T\n```\n\n----------------------------------------\n\nTITLE: Authentication Header Parsing in MSAL.NET\nDESCRIPTION: Methods for parsing authentication headers from HTTP responses, useful for implementing challenge-based authentication flows and handling WWW-Authenticate headers.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net472/PublicAPI.Shipped.txt#2025-04-23_snippet_18\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Client.AuthenticationHeaderParser.ParseAuthenticationHeaders(System.Net.Http.Headers.HttpResponseHeaders httpResponseHeaders) -> Microsoft.Identity.Client.AuthenticationHeaderParser\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Client.AuthenticationHeaderParser.ParseAuthenticationHeadersAsync(string resourceUri, System.Net.Http.HttpClient httpClient, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Microsoft.Identity.Client.AuthenticationHeaderParser>\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Client.AuthenticationHeaderParser.ParseAuthenticationHeadersAsync(string resourceUri, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Microsoft.Identity.Client.AuthenticationHeaderParser>\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Client.AuthenticationInfoParameters.CreateFromResponseHeaders(System.Net.Http.Headers.HttpResponseHeaders httpResponseHeaders) -> Microsoft.Identity.Client.AuthenticationInfoParameters\n```\n\n----------------------------------------\n\nTITLE: Error Constants in MSAL.NET\nDESCRIPTION: Constant strings defining various error codes used throughout the MSAL.NET library for specific authentication scenarios and failure cases.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net462/PublicAPI.Shipped.txt#2025-04-23_snippet_38\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Identity.Client.MsalError.ManagedIdentityResponseParseFailure = \"managed_identity_response_parse_failure\" -> string\nconst Microsoft.Identity.Client.MsalError.MissingTenantedAuthority = \"missing_tenanted_authority\" -> string\nconst Microsoft.Identity.Client.MsalError.MtlsCertificateNotProvided = \"mtls_certificate_not_provided\" -> string\nconst Microsoft.Identity.Client.MsalError.MtlsPopWithoutRegion = \"mtls_pop_without_region\" -> string\nconst Microsoft.Identity.Client.MsalError.RegionRequiredForMtlsPop = \"region_required_for_mtls_pop\" -> string\nconst Microsoft.Identity.Client.MsalError.ForceRefreshNotCompatibleWithTokenHash = \"force_refresh_and_token_hash_not_compatible\" -> string\n```\n\n----------------------------------------\n\nTITLE: Defining TokenSource Enum in C#\nDESCRIPTION: Enum definition for TokenSource, which specifies the source of an authentication token. It includes options for Broker, Cache, and IdentityProvider.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0/PublicAPI.Shipped.txt#2025-04-23_snippet_50\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.TokenSource\nMicrosoft.Identity.Client.TokenSource.Broker = 2 -> Microsoft.Identity.Client.TokenSource\nMicrosoft.Identity.Client.TokenSource.Cache = 1 -> Microsoft.Identity.Client.TokenSource\nMicrosoft.Identity.Client.TokenSource.IdentityProvider = 0 -> Microsoft.Identity.Client.TokenSource\n```\n\n----------------------------------------\n\nTITLE: MsalError Constants in C#\nDESCRIPTION: A comprehensive list of error code constants used by MSAL.NET to identify specific error conditions during authentication operations. These string constants serve as standardized identifiers for various error scenarios.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net472/PublicAPI.Shipped.txt#2025-04-23_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Identity.Client.MsalError.NonParsableOAuthError = \"non_parsable_oauth_error\" -> string\nconst Microsoft.Identity.Client.MsalError.NoPromptFailedError = \"no_prompt_failed\" -> string\nconst Microsoft.Identity.Client.MsalError.NoRedirectUri = \"no_redirect_uri\" -> string\nconst Microsoft.Identity.Client.MsalError.NoTokensFoundError = \"no_tokens_found\" -> string\nconst Microsoft.Identity.Client.MsalError.NoUsernameOrAccountIDProvidedForSilentAndroidBrokerAuthentication = \"no_username_or_accountid_provided_for_silent_android_broker_authentication\" -> string\nconst Microsoft.Identity.Client.MsalError.NullIntentReturnedFromAndroidBroker = \"null_intent_returned_from_broker\" -> string\nconst Microsoft.Identity.Client.MsalError.OboCacheKeyNotInCacheError = \"obo_cache_key_not_in_cache_error\" -> string\nconst Microsoft.Identity.Client.MsalError.ParsingWsMetadataExchangeFailed = \"parsing_ws_metadata_exchange_failed\" -> string\nconst Microsoft.Identity.Client.MsalError.ParsingWsTrustResponseFailed = \"parsing_wstrust_response_failed\" -> string\nconst Microsoft.Identity.Client.MsalError.PasswordRequiredForManagedUserError = \"password_required_for_managed_user\" -> string\nconst Microsoft.Identity.Client.MsalError.PlatformNotSupported = \"platform_not_supported\" -> string\nconst Microsoft.Identity.Client.MsalError.RedirectUriValidationFailed = \"redirect_uri_validation_failed\" -> string\nconst Microsoft.Identity.Client.MsalError.RegionalAndAuthorityOverride = \"authority_override_regional\" -> string\nconst Microsoft.Identity.Client.MsalError.RegionalAuthorityValidation = \"regional_authority_validation\" -> string\nconst Microsoft.Identity.Client.MsalError.RegionDiscoveryFailed = \"region_discovery_failed\" -> string\nconst Microsoft.Identity.Client.MsalError.RegionDiscoveryNotEnabled = \"region_discovery_unavailable\" -> string\nconst Microsoft.Identity.Client.MsalError.RegionDiscoveryWithCustomInstanceMetadata = \"region_discovery_with_custom_instance_metadata\" -> string\nconst Microsoft.Identity.Client.MsalError.RequestThrottled = \"request_throttled\" -> string\nconst Microsoft.Identity.Client.MsalError.RequestTimeout = \"request_timeout\" -> string\nconst Microsoft.Identity.Client.MsalError.RopcDoesNotSupportMsaAccounts = \"ropc_not_supported_for_msa\" -> string\nconst Microsoft.Identity.Client.MsalError.ScopesRequired = \"scopes_required_client_credentials\" -> string\nconst Microsoft.Identity.Client.MsalError.ServiceNotAvailable = \"service_not_available\" -> string\nconst Microsoft.Identity.Client.MsalError.SetCiamAuthorityAtRequestLevelNotSupported = \"set_ciam_authority_at_request_level_not_supported\" -> string\nconst Microsoft.Identity.Client.MsalError.SSHCertUsedAsHttpHeader = \"ssh_cert_used_as_http_header\" -> string\nconst Microsoft.Identity.Client.MsalError.StateMismatchError = \"state_mismatch\" -> string\nconst Microsoft.Identity.Client.MsalError.StaticCacheWithExternalSerialization = \"static_cache_with_external_serialization\" -> string\nconst Microsoft.Identity.Client.MsalError.SystemWebviewOptionsNotApplicable = \"embedded_webview_not_compatible_default_browser\" -> string\nconst Microsoft.Identity.Client.MsalError.TelemetryConfigOrTelemetryCallback = \"telemetry_config_or_telemetry_callback\" -> string\nconst Microsoft.Identity.Client.MsalError.TenantDiscoveryFailedError = \"tenant_discovery_failed\" -> string\nconst Microsoft.Identity.Client.MsalError.TenantOverrideNonAad = \"tenant_override_non_aad\" -> string\nconst Microsoft.Identity.Client.MsalError.TokenCacheNullError = \"token_cache_null\" -> string\nconst Microsoft.Identity.Client.MsalError.TokenTypeMismatch = \"token_type_mismatch\" -> string\nconst Microsoft.Identity.Client.MsalError.UapCannotFindDomainUser = \"user_information_access_failed\" -> string\nconst Microsoft.Identity.Client.MsalError.UapCannotFindUpn = \"uap_cannot_find_upn\" -> string\nconst Microsoft.Identity.Client.MsalError.UnableToParseAuthenticationHeader = \"unable_to_parse_authentication_header\" -> string\nconst Microsoft.Identity.Client.MsalError.UnauthorizedClient = \"unauthorized_client\" -> string\nconst Microsoft.Identity.Client.MsalError.UnknownBrokerError = \"unknown_broker_error\" -> string\nconst Microsoft.Identity.Client.MsalError.UnknownError = \"unknown_error\" -> string\nconst Microsoft.Identity.Client.MsalError.UnknownManagedIdentityError = \"unknown_managed_identity_error\" -> string\nconst Microsoft.Identity.Client.MsalError.UnknownUser = \"unknown_user\" -> string\nconst Microsoft.Identity.Client.MsalError.UnknownUserType = \"unknown_user_type\" -> string\nconst Microsoft.Identity.Client.MsalError.UpnRequired = \"upn_required\" -> string\nconst Microsoft.Identity.Client.MsalError.UserAssertionNullError = \"user_assertion_null\" -> string\nconst Microsoft.Identity.Client.MsalError.UserAssignedManagedIdentityNotConfigurableAtRuntime = \"user_assigned_managed_identity_not_configurable_at_runtime\" -> string\nconst Microsoft.Identity.Client.MsalError.UserAssignedManagedIdentityNotSupported = \"user_assigned_managed_identity_not_supported\" -> string\nconst Microsoft.Identity.Client.MsalError.UserMismatch = \"user_mismatch\" -> string\nconst Microsoft.Identity.Client.MsalError.UserNullError = \"user_null\" -> string\nconst Microsoft.Identity.Client.MsalError.UserRealmDiscoveryFailed = \"user_realm_discovery_failed\" -> string\nconst Microsoft.Identity.Client.MsalError.ValidateAuthorityOrCustomMetadata = \"validate_authority_or_custom_instance_metadata\" -> string\nconst Microsoft.Identity.Client.MsalError.WABError = \"wab_error\" -> string\nconst Microsoft.Identity.Client.MsalError.WamFailedToSignout = \"wam_failed_to_signout\" -> string\nconst Microsoft.Identity.Client.MsalError.WamInteractiveError = \"wam_interactive_error\" -> string\nconst Microsoft.Identity.Client.MsalError.WamNoB2C = \"wam_no_b2c\" -> string\nconst Microsoft.Identity.Client.MsalError.WamPickerError = \"wam_interactive_picker_error\" -> string\nconst Microsoft.Identity.Client.MsalError.WamScopesRequired = \"scopes_required_wam\" -> string\nconst Microsoft.Identity.Client.MsalError.WamUiThread = \"wam_ui_thread_only\" -> string\nconst Microsoft.Identity.Client.MsalError.WebView2LoaderNotFound = \"webview2loader_not_found\" -> string\nconst Microsoft.Identity.Client.MsalError.WebView2NotInstalled = \"webview2_runtime_not_installed\" -> string\nconst Microsoft.Identity.Client.MsalError.WebviewUnavailable = \"no_system_webview\" -> string\nconst Microsoft.Identity.Client.MsalError.WsTrustEndpointNotFoundInMetadataDocument = \"wstrust_endpoint_not_found\" -> string\n```\n\n----------------------------------------\n\nTITLE: AbstractPublicClientAcquireTokenParameterBuilder Class Declaration in C#\nDESCRIPTION: Declaration of the AbstractPublicClientAcquireTokenParameterBuilder generic class.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/netstandard2.0/PublicAPI.Shipped.txt#2025-04-23_snippet_14\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.AbstractPublicClientAcquireTokenParameterBuilder<T>\n```\n\n----------------------------------------\n\nTITLE: Kerberos Integration Methods in MSAL.NET\nDESCRIPTION: Static methods in the KerberosSupplementalTicketManager class for handling Kerberos authentication tickets, including extraction from ID tokens, interaction with Windows ticket cache, and ticket management operations.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0/PublicAPI.Shipped.txt#2025-04-23_snippet_61\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Client.Kerberos.KerberosSupplementalTicketManager.FromIdToken(string idToken) -> Microsoft.Identity.Client.Kerberos.KerberosSupplementalTicket\nstatic Microsoft.Identity.Client.Kerberos.KerberosSupplementalTicketManager.GetKerberosTicketFromWindowsTicketCache(string servicePrincipalName) -> byte[]\nstatic Microsoft.Identity.Client.Kerberos.KerberosSupplementalTicketManager.GetKerberosTicketFromWindowsTicketCache(string servicePrincipalName, long logonId) -> byte[]\nstatic Microsoft.Identity.Client.Kerberos.KerberosSupplementalTicketManager.GetKrbCred(Microsoft.Identity.Client.Kerberos.KerberosSupplementalTicket ticket) -> byte[]\nstatic Microsoft.Identity.Client.Kerberos.KerberosSupplementalTicketManager.SaveToWindowsTicketCache(Microsoft.Identity.Client.Kerberos.KerberosSupplementalTicket ticket) -> void\nstatic Microsoft.Identity.Client.Kerberos.KerberosSupplementalTicketManager.SaveToWindowsTicketCache(Microsoft.Identity.Client.Kerberos.KerberosSupplementalTicket ticket, long logonId) -> void\n```\n\n----------------------------------------\n\nTITLE: Account ID Class Definition\nDESCRIPTION: Class for managing account identifiers in authentication flows. Handles ADFS and Azure AD account identification with properties for identifier, object ID, and tenant ID.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net472/PublicAPI.Shipped.txt#2025-04-23_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.AccountId.AccountId(string identifier, string objectId, string tenantId) -> void\nMicrosoft.Identity.Client.AccountId.Identifier.get -> string\nMicrosoft.Identity.Client.AccountId.ObjectId.get -> string\nMicrosoft.Identity.Client.AccountId.TenantId.get -> string\n```\n\n----------------------------------------\n\nTITLE: Configuring Miscellaneous Options for AbstractApplicationBuilder in C#\nDESCRIPTION: Methods for configuring various options for the AbstractApplicationBuilder class, including legacy cache compatibility, redirect URI, telemetry, and tenant ID.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/netstandard2.0/PublicAPI.Shipped.txt#2025-04-23_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.AbstractApplicationBuilder<T>.WithLegacyCacheCompatibility(bool enableLegacyCacheCompatibility = true) -> T\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.AbstractApplicationBuilder<T>.WithRedirectUri(string redirectUri) -> T\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.AbstractApplicationBuilder<T>.WithTelemetry(Microsoft.Identity.Client.ITelemetryConfig telemetryConfig) -> T\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.AbstractApplicationBuilder<T>.WithTenantId(string tenantId) -> T\n```\n\n----------------------------------------\n\nTITLE: Configuring Token Cache with Custom Data Protection Requirement in .NET\nDESCRIPTION: Example showing how to register a token cache with a custom data protection requirement that extends beyond the current process, specifying entropy and a data protection scope.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net462/PublicAPI.Unshipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar storageProperties =\n    new StorageCreationPropertiesBuilder(\"msal.cache\", directoryPath)\n    .WithLinuxUnprotectedFile()\n    .WithMacKeyChain(\"login.keychain\", \"MSAL\")\n    .WithWindowsUserDataProtection(\n        optionalEntropy: Encoding.UTF8.GetBytes(\"EntropyBytes\"),\n        scope: DataProtectionScope.CurrentUser)\n    .Build();\n```\n\n----------------------------------------\n\nTITLE: Authentication Header Parser Static Methods in C#\nDESCRIPTION: Defines static methods for parsing authentication headers from HTTP responses. Includes methods to extract WWW-Authenticate headers and create AuthenticationHeaderParser objects from HTTP responses.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-android/PublicAPI.Shipped.txt#2025-04-23_snippet_42\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Client.AuthenticationHeaderParser.ParseAuthenticationHeaders(System.Net.Http.Headers.HttpResponseHeaders httpResponseHeaders) -> Microsoft.Identity.Client.AuthenticationHeaderParser\nstatic Microsoft.Identity.Client.AuthenticationHeaderParser.ParseAuthenticationHeadersAsync(string resourceUri, System.Net.Http.HttpClient httpClient, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Microsoft.Identity.Client.AuthenticationHeaderParser>\nstatic Microsoft.Identity.Client.AuthenticationHeaderParser.ParseAuthenticationHeadersAsync(string resourceUri, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Microsoft.Identity.Client.AuthenticationHeaderParser>\n```\n\n----------------------------------------\n\nTITLE: Error Constants in MSAL.NET\nDESCRIPTION: Constant error code strings used throughout MSAL.NET for different error scenarios related to managed identity, tenanted authority, MTLS certificates, and token refresh operations.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-ios/PublicAPI.Shipped.txt#2025-04-23_snippet_84\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Identity.Client.MsalError.ManagedIdentityResponseParseFailure = \"managed_identity_response_parse_failure\" -> string\nconst Microsoft.Identity.Client.MsalError.MissingTenantedAuthority = \"missing_tenanted_authority\" -> string\nconst Microsoft.Identity.Client.MsalError.MtlsCertificateNotProvided = \"mtls_certificate_not_provided\" -> string\nconst Microsoft.Identity.Client.MsalError.MtlsPopWithoutRegion = \"mtls_pop_without_region\" -> string\nconst Microsoft.Identity.Client.MsalError.RegionRequiredForMtlsPop = \"region_required_for_mtls_pop\" -> string\nconst Microsoft.Identity.Client.MsalError.ForceRefreshNotCompatibleWithTokenHash = \"force_refresh_and_token_hash_not_compatible\" -> string\n```\n\n----------------------------------------\n\nTITLE: Prompt Constants in MSAL.NET\nDESCRIPTION: Static readonly fields defining different prompt behaviors for authentication requests, including consent, create, force login, no prompt, and select account options.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-ios/PublicAPI.Shipped.txt#2025-04-23_snippet_82\n\nLANGUAGE: C#\nCODE:\n```\nstatic readonly Microsoft.Identity.Client.Prompt.Consent -> Microsoft.Identity.Client.Prompt\nstatic readonly Microsoft.Identity.Client.Prompt.Create -> Microsoft.Identity.Client.Prompt\nstatic readonly Microsoft.Identity.Client.Prompt.ForceLogin -> Microsoft.Identity.Client.Prompt\nstatic readonly Microsoft.Identity.Client.Prompt.NoPrompt -> Microsoft.Identity.Client.Prompt\nstatic readonly Microsoft.Identity.Client.Prompt.SelectAccount -> Microsoft.Identity.Client.Prompt\n```\n\n----------------------------------------\n\nTITLE: Authentication Classes and Properties\nDESCRIPTION: Core authentication result and metadata classes including property getters and setters for managing authentication state, token information, and telemetry data.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0/PublicAPI.Shipped.txt#2025-04-23_snippet_25\n\nLANGUAGE: C#\nCODE:\n```\npublic class AuthenticationResult\n{\n    public string SpaAuthCode { get; }\n    public string TenantId { get; }\n    public string TokenType { get; }\n    public string UniqueId { get; }\n}\n```\n\n----------------------------------------\n\nTITLE: LogLevel Configuration for MSAL Logging\nDESCRIPTION: Implementation of the new LogLevel.Always setting for logging important health metrics to aid in diagnostics of MSAL applications.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/CHANGELOG.md#2025-04-23_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n// Configure logging with the new Always level\nvar logger = LoggerFactory.CreateLogger(LogLevel.Always);\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional Options for AbstractApplicationBuilder in C#\nDESCRIPTION: Methods for configuring various options for the AbstractApplicationBuilder class, including cache options, client capabilities, client ID, and extra query parameters.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/netstandard2.0/PublicAPI.Shipped.txt#2025-04-23_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.AbstractApplicationBuilder<T>.WithCacheOptions(Microsoft.Identity.Client.CacheOptions options) -> T\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.AbstractApplicationBuilder<T>.WithClientCapabilities(System.Collections.Generic.IEnumerable<string> clientCapabilities) -> T\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.AbstractApplicationBuilder<T>.WithClientId(string clientId) -> T\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.AbstractApplicationBuilder<T>.WithExtraQueryParameters(string extraQueryParameters) -> T\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.AbstractApplicationBuilder<T>.WithExtraQueryParameters(System.Collections.Generic.IDictionary<string, string> extraQueryParameters) -> T\n```\n\n----------------------------------------\n\nTITLE: Implementing CacheData Class in C#\nDESCRIPTION: Defines a class for storing cache data, including properties for ADAL v3 and unified cache states.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net462/PublicAPI.Shipped.txt#2025-04-23_snippet_17\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.Cache.CacheData\nMicrosoft.Identity.Client.Cache.CacheData.AdalV3State.get -> byte[]\nMicrosoft.Identity.Client.Cache.CacheData.AdalV3State.set -> void\nMicrosoft.Identity.Client.Cache.CacheData.CacheData() -> void\nMicrosoft.Identity.Client.Cache.CacheData.UnifiedState.get -> byte[]\nMicrosoft.Identity.Client.Cache.CacheData.UnifiedState.set -> void\n```\n\n----------------------------------------\n\nTITLE: Flat Cache Performance Metrics\nDESCRIPTION: Performance metrics for flat cache implementation showing latency distributions in cold and warm cache scenarios.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/tests/devapps/WebApi/readme_perf.txt#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n              Cold     Warm\n     50%      0.83s    0.97s \n     75%      1.07s    1.21s\n     90%      1.41s    1.93s\n     95%      1.55s    2.62s\n     99%      1.86s    3.90s\n```\n\n----------------------------------------\n\nTITLE: Constructing JSON Payload for Managed Identity Request in PowerShell\nDESCRIPTION: Creates a properly formatted JSON payload containing certificate information (jwk) for the Managed Identity credential request. The payload includes RSA key type, signature usage, algorithm specification, and the certificate in x5c format.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/docs/msi_v2/msi_with_credential_design.md#2025-04-23_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\n# Step 7: Construct the JSON body properly\n$bodyObject = @{\n    cnf = @{\n        jwk = @{\n            kty = \"RSA\"\n            use = \"sig\"\n            alg = \"RS256\"\n            kid = $certSha256  # Use SHA-256 instead of Thumbprint\n            x5c = @($x5c)  # Ensures correct array formatting\n        }\n    }\n    latch_key = $false  # Final version of the product should not have this. IMDS team is working on removing this. \n}\n\n# Convert JSON object to a string\n$body = $bodyObject | ConvertTo-Json -Depth 10 -Compress\nWrite-Output \"🔹 JSON Payload: $body\"\n```\n\n----------------------------------------\n\nTITLE: MSAL Token Cache Configuration for Azure AD B2C\nDESCRIPTION: Comprehensive token cache configuration containing authentication tokens, cache keys, and account information for Azure AD B2C. Includes access token, ID token, refresh token storage formats and their corresponding cache keys for both general and iOS-specific implementations.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/tests/Microsoft.Identity.Test.Unit/Resources/B2CWithTenantIdTestData.txt#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"client_id\": \"0a7f52dd-260e-432f-94de-b47828c3f372\",\n  \"authority\": \"https://login.microsoftonline.com/tfp/iosmsalb2c.onmicrosoft.com/b2c_1_signin/\",\n  \"token_response\": {\n    \"access_token\": \"<removed_at>\",\n    \"id_token\": \"{0}\",\n    \"token_type\": \"Bearer\",\n    \"not_before\": 1538801260,\n    \"expires_in\": 3600,\n    \"expires_on\": 1538804860,\n    \"resource\": \"14df2240-96cc-4f42-a133-ef0807492869\",\n    \"client_info\": \"eyJ1aWQiOiJhZDAyMGY4ZS1iMWJhLTQ0YjItYmQ2OS1jMjJiZTg2NzM3ZjUtYjJjXzFfc2lnbmluIiwidXRpZCI6ImJhNmMwZDk0LWE4ZGEtNDViMi04M2FlLTMzODcxZjljMmRkOCJ9\",\n    \"scope\": \"https://iosmsalb2c.onmicrosoft.com/webapitest/user.read\",\n    \"refresh_token\": \"<removed_rt>\",\n    \"refresh_token_expires_in\": 1209600\n  },\n  \"id_token_response\": {\n    \"exp\": 1538804860,\n    \"nbf\": 1538801260,\n    \"ver\": \"1.0\",\n    \"iss\": \"https://login.microsoftonline.com/ba6c0d94-a8da-45b2-83ae-33871f9c2dd8/v2.0/\",\n    \"sub\": \"ad020f8e-b1ba-44b2-bd69-c22be86737f5\",\n    \"aud\": \"0a7f52dd-260e-432f-94de-b47828c3f372\",\n    \"iat\": 1538801260,\n    \"auth_time\": 1538801260,\n    \"idp\": \"live.com\",\n    \"name\": \"MSAL SDK Test\",\n    \"oid\": \"ad020f8e-b1ba-44b2-bd69-c22be86737f5\",\n    \"family_name\": \"SDK Test\",\n    \"given_name\": \"MSAL\",\n    \"emails\": [\n      \"msalsdktest@outlook.com\"\n    ],\n    \"tfp\": \"B2C_1_Signin\",\n    \"at_hash\": \"Q4O3HDClcaLl7y0uU-bJAg\",\n    \"tid\": \"ba6c0d94-a8da-45b2-83ae-33871f9c2dd8\",\n    \"preferred_username\": \"msalsdktest@outlook.com\"\n  },\n  \"at_cache_key\": \"ad020f8e-b1ba-44b2-bd69-c22be86737f5-b2c_1_signin.ba6c0d94-a8da-45b2-83ae-33871f9c2dd8-login.windows.net-accesstoken-0a7f52dd-260e-432f-94de-b47828c3f372-iosmsalb2c.onmicrosoft.com-https://iosmsalb2c.onmicrosoft.com/webapitest/user.read\",\n  \"at_cache_key_ios_service\": \"accesstoken-0a7f52dd-260e-432f-94de-b47828c3f372-ba6c0d94-a8da-45b2-83ae-33871f9c2dd8-https://iosmsalb2c.onmicrosoft.com/webapitest/user.read\",\n  \"at_cache_key_ios_account\": \"ad020f8e-b1ba-44b2-bd69-c22be86737f5-b2c_1_signin.ba6c0d94-a8da-45b2-83ae-33871f9c2dd8-login.windows.net\",\n  \"at_cache_key_ios_generic\": \"accesstoken-0a7f52dd-260e-432f-94de-b47828c3f372-ba6c0d94-a8da-45b2-83ae-33871f9c2dd8\",\n  \"at_cache_value\": {\n    \"secret\": \"<removed_at>\",\n    \"target\": \"https://iosmsalb2c.onmicrosoft.com/webapitest/user.read\",\n    \"credential_type\": \"AccessToken\",\n    \"environment\": \"login.windows.net\",\n    \"realm\": \"ba6c0d94-a8da-45b2-83ae-33871f9c2dd8\",\n    \"expires_on\": \"1538805103\",\n    \"cached_at\": \"1538801503\",\n    \"client_id\": \"0a7f52dd-260e-432f-94de-b47828c3f372\",\n    \"home_account_id\": \"ad020f8e-b1ba-44b2-bd69-c22be86737f5-b2c_1_signin.ba6c0d94-a8da-45b2-83ae-33871f9c2dd8\"\n  },\n  \"id_token_cache_key\": \"ad020f8e-b1ba-44b2-bd69-c22be86737f5-b2c_1_signin.ba6c0d94-a8da-45b2-83ae-33871f9c2dd8-login.windows.net-idtoken-0a7f52dd-260e-432f-94de-b47828c3f372-iosmsalb2c.onmicrosoft.com-\",\n  \"id_token_cache_key_ios_service\": \"idtoken-0a7f52dd-260e-432f-94de-b47828c3f372-ba6c0d94-a8da-45b2-83ae-33871f9c2dd8-\",\n  \"id_token_cache_key_ios_account\": \"ad020f8e-b1ba-44b2-bd69-c22be86737f5-b2c_1_signin.ba6c0d94-a8da-45b2-83ae-33871f9c2dd8-login.windows.net\",\n  \"id_token_cache_key_ios_generic\": \"idtoken-0a7f52dd-260e-432f-94de-b47828c3f372-ba6c0d94-a8da-45b2-83ae-33871f9c2dd8\",\n  \"id_token_cache_value\": {\n    \"secret\": \"{0}\",\n    \"credential_type\": \"IdToken\",\n    \"environment\": \"login.windows.net\",\n    \"home_account_id\": \"ad020f8e-b1ba-44b2-bd69-c22be86737f5-b2c_1_signin.ba6c0d94-a8da-45b2-83ae-33871f9c2dd8\",\n    \"realm\": \"ba6c0d94-a8da-45b2-83ae-33871f9c2dd8\",\n    \"client_id\": \"0a7f52dd-260e-432f-94de-b47828c3f372\"\n  },\n  \"rt_cache_key\": \"ad020f8e-b1ba-44b2-bd69-c22be86737f5-b2c_1_signin.ba6c0d94-a8da-45b2-83ae-33871f9c2dd8-login.windows.net-refreshtoken-0a7f52dd-260e-432f-94de-b47828c3f372--\",\n  \"rt_cache_key_ios_service\": \"refreshtoken-0a7f52dd-260e-432f-94de-b47828c3f372--\",\n  \"rt_cache_key_ios_account\": \"ad020f8e-b1ba-44b2-bd69-c22be86737f5-b2c_1_signin.ba6c0d94-a8da-45b2-83ae-33871f9c2dd8-login.windows.net\",\n  \"rt_cache_key_ios_generic\": \"refreshtoken-0a7f52dd-260e-432f-94de-b47828c3f372-\",\n  \"rt_cache_value\": {\n    \"client_id\": \"0a7f52dd-260e-432f-94de-b47828c3f372\",\n    \"secret\": \"<removed_rt>\",\n    \"environment\": \"login.windows.net\",\n    \"credential_type\": \"RefreshToken\",\n    \"home_account_id\": \"ad020f8e-b1ba-44b2-bd69-c22be86737f5-b2c_1_signin.ba6c0d94-a8da-45b2-83ae-33871f9c2dd8\"\n  },\n  \"account_cache_key\": \"ad020f8e-b1ba-44b2-bd69-c22be86737f5-b2c_1_signin.ba6c0d94-a8da-45b2-83ae-33871f9c2dd8-login.windows.net-ba6c0d94-a8da-45b2-83ae-33871f9c2dd8\",\n  \"account_cache_key_ios_service\": \"refreshtoken-0a7f52dd-260e-432f-94de-b47828c3f372-\",\n  \"account_cache_key_ios_account\": \"ad020f8e-b1ba-44b2-bd69-c22be86737f5-b2c_1_signin.ba6c0d94-a8da-45b2-83ae-33871f9c2dd8-login.windows.net\",\n  \"account_cache_key_ios_generic\": \"msalsdktest@outlook.com\",\n  \"account_cache_value\": {\n    \"family_name\": \"SDK Test\",\n    \"local_account_id\": \"ad020f8e-b1ba-44b2-bd69-c22be86737f5\",\n    \"home_account_id\": \"ad020f8e-b1ba-44b2-bd69-c22be86737f5-b2c_1_signin.ba6c0d94-a8da-45b2-83ae-33871f9c2dd8\",\n    \"username\": \"msalsdktest@outlook.com\",\n    \"authority_type\": \"MSSTS\",\n    \"given_name\": \"MSAL\",\n    \"environment\": \"login.windows.net\",\n    \"name\": \"MSAL SDK Test\",\n    \"realm\": \"ba6c0d94-a8da-45b2-83ae-33871f9c2dd8\",\n    \"client_info\": \"eyJ1aWQiOiJhZDAyMGY4ZS1iMWJhLTQ0YjItYmQ2OS1jMjJiZTg2NzM3ZjUtYjJjXzFfc2lnbmluIiwidXRpZCI6ImJhNmMwZDk0LWE4ZGEtNDViMi04M2FlLTMzODcxZjljMmRkOCJ9\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining EmbeddedWebViewOptions Properties in C#\nDESCRIPTION: Declares properties for EmbeddedWebViewOptions class, which is used to configure options for embedded web views in authentication flows. It includes properties for setting the title and WebView2 browser executable folder.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0/PublicAPI.Shipped.txt#2025-04-23_snippet_34\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.EmbeddedWebViewOptions.EmbeddedWebViewOptions() -> void\nMicrosoft.Identity.Client.EmbeddedWebViewOptions.Title.get -> string\nMicrosoft.Identity.Client.EmbeddedWebViewOptions.Title.set -> void\nMicrosoft.Identity.Client.EmbeddedWebViewOptions.WebView2BrowserExecutableFolder.get -> string\nMicrosoft.Identity.Client.EmbeddedWebViewOptions.WebView2BrowserExecutableFolder.set -> void\n```\n\n----------------------------------------\n\nTITLE: Azure Cloud Instance Enumeration\nDESCRIPTION: Enumeration defining different Azure cloud instances including Public, China, Germany and US Government clouds.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0/PublicAPI.Shipped.txt#2025-04-23_snippet_27\n\nLANGUAGE: C#\nCODE:\n```\npublic enum AzureCloudInstance\n{\n    None = 0,\n    AzurePublic = 1,\n    AzureChina = 2,\n    AzureGermany = 3,\n    AzureUsGovernment = 4\n}\n```\n\n----------------------------------------\n\nTITLE: Azure Cloud Instance Enumeration in C#\nDESCRIPTION: Enumerates the available Azure cloud instances including public, government, and sovereign clouds\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-ios/PublicAPI.Shipped.txt#2025-04-23_snippet_15\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.AzureCloudInstance\nMicrosoft.Identity.Client.AzureCloudInstance.AzureChina = 2 -> Microsoft.Identity.Client.AzureCloudInstance\nMicrosoft.Identity.Client.AzureCloudInstance.AzureGermany = 3 -> Microsoft.Identity.Client.AzureCloudInstance\nMicrosoft.Identity.Client.AzureCloudInstance.AzurePublic = 1 -> Microsoft.Identity.Client.AzureCloudInstance\n```\n\n----------------------------------------\n\nTITLE: Defining DeviceCodeResult Properties in C#\nDESCRIPTION: Declares properties for DeviceCodeResult class, which represents the result of a device code flow authentication. It includes properties for device code, user code, verification URL, and other related information.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0/PublicAPI.Shipped.txt#2025-04-23_snippet_33\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.DeviceCodeResult.ClientId.get -> string\nMicrosoft.Identity.Client.DeviceCodeResult.DeviceCode.get -> string\nMicrosoft.Identity.Client.DeviceCodeResult.ExpiresOn.get -> System.DateTimeOffset\nMicrosoft.Identity.Client.DeviceCodeResult.Interval.get -> long\nMicrosoft.Identity.Client.DeviceCodeResult.Message.get -> string\nMicrosoft.Identity.Client.DeviceCodeResult.Scopes.get -> System.Collections.Generic.IReadOnlyCollection<string>\nMicrosoft.Identity.Client.DeviceCodeResult.UserCode.get -> string\nMicrosoft.Identity.Client.DeviceCodeResult.VerificationUrl.get -> string\n```\n\n----------------------------------------\n\nTITLE: Defining CacheRefreshReason Enum in C#\nDESCRIPTION: This snippet defines the CacheRefreshReason enum, which specifies different reasons for refreshing the cache, such as force refresh, no cached access token, or proactive refresh.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/netstandard2.0/PublicAPI.Shipped.txt#2025-04-23_snippet_40\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.CacheRefreshReason\nMicrosoft.Identity.Client.CacheRefreshReason.Expired = 3 -> Microsoft.Identity.Client.CacheRefreshReason\nMicrosoft.Identity.Client.CacheRefreshReason.ForceRefreshOrClaims = 1 -> Microsoft.Identity.Client.CacheRefreshReason\nMicrosoft.Identity.Client.CacheRefreshReason.NoCachedAccessToken = 2 -> Microsoft.Identity.Client.CacheRefreshReason\nMicrosoft.Identity.Client.CacheRefreshReason.NotApplicable = 0 -> Microsoft.Identity.Client.CacheRefreshReason\nMicrosoft.Identity.Client.CacheRefreshReason.ProactivelyRefreshed = 4 -> Microsoft.Identity.Client.CacheRefreshReason\n```\n\n----------------------------------------\n\nTITLE: Defining BaseAbstractApplicationBuilder Class in C#\nDESCRIPTION: This snippet defines the BaseAbstractApplicationBuilder generic class with methods for configuring client name, version, logging, experimental features, and HTTP client factory.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/netstandard2.0/PublicAPI.Shipped.txt#2025-04-23_snippet_36\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.BaseAbstractApplicationBuilder<T>\nMicrosoft.Identity.Client.BaseAbstractApplicationBuilder<T>.WithClientName(string clientName) -> T\nMicrosoft.Identity.Client.BaseAbstractApplicationBuilder<T>.WithClientVersion(string clientVersion) -> T\nMicrosoft.Identity.Client.BaseAbstractApplicationBuilder<T>.WithDebugLoggingCallback(Microsoft.Identity.Client.LogLevel logLevel = Microsoft.Identity.Client.LogLevel.Info, bool enablePiiLogging = false, bool withDefaultPlatformLoggingEnabled = false) -> T\nMicrosoft.Identity.Client.BaseAbstractApplicationBuilder<T>.WithExperimentalFeatures(bool enableExperimentalFeatures = true) -> T\nMicrosoft.Identity.Client.BaseAbstractApplicationBuilder<T>.WithHttpClientFactory(Microsoft.Identity.Client.IMsalHttpClientFactory httpClientFactory) -> T\nMicrosoft.Identity.Client.BaseAbstractApplicationBuilder<T>.WithHttpClientFactory(Microsoft.Identity.Client.IMsalHttpClientFactory httpClientFactory, bool retryOnceOn5xx) -> T\nMicrosoft.Identity.Client.BaseAbstractApplicationBuilder<T>.WithLogging(Microsoft.Identity.Client.LogCallback loggingCallback, Microsoft.Identity.Client.LogLevel? logLevel = null, bool? enablePiiLogging = null, bool? enableDefaultPlatformLogging = null) -> T\nMicrosoft.Identity.Client.BaseAbstractApplicationBuilder<T>.WithLogging(Microsoft.IdentityModel.Abstractions.IIdentityLogger identityLogger, bool enablePiiLogging = false) -> T\n```\n\n----------------------------------------\n\nTITLE: MSAL Prompt Constants\nDESCRIPTION: Static readonly fields defining various prompt types for authentication flows.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-android/PublicAPI.Shipped.txt#2025-04-23_snippet_51\n\nLANGUAGE: C#\nCODE:\n```\nstatic readonly Microsoft.Identity.Client.Prompt.Consent -> Microsoft.Identity.Client.Prompt\nstatic readonly Microsoft.Identity.Client.Prompt.Create -> Microsoft.Identity.Client.Prompt\nstatic readonly Microsoft.Identity.Client.Prompt.ForceLogin -> Microsoft.Identity.Client.Prompt\nstatic readonly Microsoft.Identity.Client.Prompt.NoPrompt -> Microsoft.Identity.Client.Prompt\nstatic readonly Microsoft.Identity.Client.Prompt.SelectAccount -> Microsoft.Identity.Client.Prompt\n```\n\n----------------------------------------\n\nTITLE: Requesting MSI Credentials from IMDS in PowerShell\nDESCRIPTION: Makes an HTTP request to the Instance Metadata Service (IMDS) endpoint to obtain Managed Identity credentials. The request includes the previously constructed JSON payload with certificate information and adds required metadata headers.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/docs/msi_v2/msi_with_credential_design.md#2025-04-23_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\n# Step 8: Request MSI credential\n$headers = @{\n    \"Metadata\" = \"true\"\n    \"X-ms-Client-Request-id\" = [guid]::NewGuid().ToString()\n}\n\n$imdsResponse = Invoke-WebRequest -Uri \"http://169.254.169.254/metadata/identity/credential?cred-api-version=1.0\" \\\n    -Method POST \\\n    -Headers $headers \\\n    -Body $body\n\n$jsonContent = $imdsResponse.Content | ConvertFrom-Json\n\n$regionalEndpoint = $jsonContent.regional_token_url + \"/\" + $jsonContent.tenant_id + \"/oauth2/v2.0/token\"\nWrite-Output \"✅ Using Regional Endpoint: $regionalEndpoint\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Total Duration Metric for Authentication Operations in C#\nDESCRIPTION: Static property that provides the total time in milliseconds spent on authentication operations. This metric helps in performance monitoring and optimization.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-ios/PublicAPI.Shipped.txt#2025-04-23_snippet_57\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Client.Metrics.TotalDurationInMs.get -> long\n```\n\n----------------------------------------\n\nTITLE: EmbeddedWebViewOptions Class Properties in C#\nDESCRIPTION: Defines configuration options for the embedded web view used in interactive authentication flows. Includes properties for setting the window title and specifying the WebView2 browser executable folder.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-android/PublicAPI.Shipped.txt#2025-04-23_snippet_24\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.EmbeddedWebViewOptions.EmbeddedWebViewOptions() -> void\nMicrosoft.Identity.Client.EmbeddedWebViewOptions.Title.get -> string\nMicrosoft.Identity.Client.EmbeddedWebViewOptions.Title.set -> void\nMicrosoft.Identity.Client.EmbeddedWebViewOptions.WebView2BrowserExecutableFolder.get -> string\nMicrosoft.Identity.Client.EmbeddedWebViewOptions.WebView2BrowserExecutableFolder.set -> void\n```\n\n----------------------------------------\n\nTITLE: Enumeration of ManagedIdentitySource in MSAL.NET\nDESCRIPTION: Defines the possible sources for managed identity authentication in Azure services. The enumeration includes options for IMDS, AppService, AzureArc, CloudShell, ServiceFabric, and a default fallback option.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/netstandard2.0/PublicAPI.Shipped.txt#2025-04-23_snippet_65\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.ManagedIdentity.ManagedIdentitySource\nMicrosoft.Identity.Client.ManagedIdentity.ManagedIdentitySource.AppService = 2 -> Microsoft.Identity.Client.ManagedIdentity.ManagedIdentitySource\nMicrosoft.Identity.Client.ManagedIdentity.ManagedIdentitySource.AzureArc = 3 -> Microsoft.Identity.Client.ManagedIdentity.ManagedIdentitySource\nMicrosoft.Identity.Client.ManagedIdentity.ManagedIdentitySource.CloudShell = 4 -> Microsoft.Identity.Client.ManagedIdentity.ManagedIdentitySource\nMicrosoft.Identity.Client.ManagedIdentity.ManagedIdentitySource.DefaultToImds = 6 -> Microsoft.Identity.Client.ManagedIdentity.ManagedIdentitySource\nMicrosoft.Identity.Client.ManagedIdentity.ManagedIdentitySource.Imds = 1 -> Microsoft.Identity.Client.ManagedIdentity.ManagedIdentitySource\nMicrosoft.Identity.Client.ManagedIdentity.ManagedIdentitySource.None = 0 -> Microsoft.Identity.Client.ManagedIdentity.ManagedIdentitySource\nMicrosoft.Identity.Client.ManagedIdentity.ManagedIdentitySource.ServiceFabric = 5 -> Microsoft.Identity.Client.ManagedIdentity.ManagedIdentitySource\n```\n\n----------------------------------------\n\nTITLE: Defining UserAssertion Class in C#\nDESCRIPTION: Class definition for UserAssertion, which represents a user assertion in the authentication process. It includes properties for the assertion and assertion type, and constructors for creating instances.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0/PublicAPI.Shipped.txt#2025-04-23_snippet_53\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.UserAssertion\nMicrosoft.Identity.Client.UserAssertion.Assertion.get -> string\nMicrosoft.Identity.Client.UserAssertion.AssertionType.get -> string\nMicrosoft.Identity.Client.UserAssertion.UserAssertion(string assertion, string assertionType) -> void\nMicrosoft.Identity.Client.UserAssertion.UserAssertion(string jwtBearerToken) -> void\n```\n\n----------------------------------------\n\nTITLE: Determining Managed Identity Source in C#\nDESCRIPTION: Static method that detects and returns the source of managed identity available in the current environment. This helps applications determine what kind of managed identity they can use for authentication.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-ios/PublicAPI.Shipped.txt#2025-04-23_snippet_52\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Client.ManagedIdentityApplication.GetManagedIdentitySource() -> Microsoft.Identity.Client.ManagedIdentity.ManagedIdentitySource\n```\n\n----------------------------------------\n\nTITLE: WwwAuthenticateParameters Class Implementation in C#\nDESCRIPTION: Defines the WwwAuthenticateParameters class which processes WWW-Authenticate headers. Contains properties and methods to access authentication parameters such as Authority, Claims, Resource, and Scopes.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-android/PublicAPI.Shipped.txt#2025-04-23_snippet_41\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.WwwAuthenticateParameters\nMicrosoft.Identity.Client.WwwAuthenticateParameters.AuthenticationScheme.get -> string\nMicrosoft.Identity.Client.WwwAuthenticateParameters.Authority.get -> string\nMicrosoft.Identity.Client.WwwAuthenticateParameters.Authority.set -> void\nMicrosoft.Identity.Client.WwwAuthenticateParameters.Claims.get -> string\nMicrosoft.Identity.Client.WwwAuthenticateParameters.Claims.set -> void\nMicrosoft.Identity.Client.WwwAuthenticateParameters.Error.get -> string\nMicrosoft.Identity.Client.WwwAuthenticateParameters.Error.set -> void\nMicrosoft.Identity.Client.WwwAuthenticateParameters.GetTenantId() -> string\nMicrosoft.Identity.Client.WwwAuthenticateParameters.Nonce.get -> string\nMicrosoft.Identity.Client.WwwAuthenticateParameters.Resource.get -> string\nMicrosoft.Identity.Client.WwwAuthenticateParameters.Resource.set -> void\nMicrosoft.Identity.Client.WwwAuthenticateParameters.Scopes.get -> System.Collections.Generic.IEnumerable<string>\nMicrosoft.Identity.Client.WwwAuthenticateParameters.Scopes.set -> void\nMicrosoft.Identity.Client.WwwAuthenticateParameters.this[string key].get -> string\nMicrosoft.Identity.Client.WwwAuthenticateParameters.WwwAuthenticateParameters() -> void\n```\n\n----------------------------------------\n\nTITLE: Defining BaseApplicationOptions Class in C#\nDESCRIPTION: This snippet defines the BaseApplicationOptions class with properties for configuring logging options, including PII logging, default platform logging, and log level.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/netstandard2.0/PublicAPI.Shipped.txt#2025-04-23_snippet_37\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.BaseApplicationOptions\nMicrosoft.Identity.Client.BaseApplicationOptions.BaseApplicationOptions() -> void\nMicrosoft.Identity.Client.BaseApplicationOptions.EnablePiiLogging.get -> bool\nMicrosoft.Identity.Client.BaseApplicationOptions.EnablePiiLogging.set -> void\nMicrosoft.Identity.Client.BaseApplicationOptions.IsDefaultPlatformLoggingEnabled.get -> bool\nMicrosoft.Identity.Client.BaseApplicationOptions.IsDefaultPlatformLoggingEnabled.set -> void\nMicrosoft.Identity.Client.BaseApplicationOptions.LogLevel.get -> Microsoft.Identity.Client.LogLevel\nMicrosoft.Identity.Client.BaseApplicationOptions.LogLevel.set -> void\n```\n\n----------------------------------------\n\nTITLE: Microsoft.Identity.Client.Prompt Static Members\nDESCRIPTION: Static readonly fields defining prompt behaviors for authentication requests, such as forcing consent, login, or selecting an account.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0/PublicAPI.Shipped.txt#2025-04-23_snippet_72\n\nLANGUAGE: C#\nCODE:\n```\nstatic readonly Microsoft.Identity.Client.Prompt.Consent -> Microsoft.Identity.Client.Prompt\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic readonly Microsoft.Identity.Client.Prompt.Create -> Microsoft.Identity.Client.Prompt\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic readonly Microsoft.Identity.Client.Prompt.ForceLogin -> Microsoft.Identity.Client.Prompt\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic readonly Microsoft.Identity.Client.Prompt.NoPrompt -> Microsoft.Identity.Client.Prompt\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic readonly Microsoft.Identity.Client.Prompt.SelectAccount -> Microsoft.Identity.Client.Prompt\n```\n\n----------------------------------------\n\nTITLE: Configuring MSAL Token Cache Structure for Azure AD B2C\nDESCRIPTION: Comprehensive JSON configuration defining the token cache structure for Azure AD B2C authentication. Includes cache keys and values for access tokens, ID tokens, refresh tokens, and account information with their respective iOS-specific variants. Contains sensitive authentication data with placeholder values for tokens.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/tests/Microsoft.Identity.Test.Unit/Resources/B2CNoTenantIdTestData.txt#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"client_id\": \"0a7f52dd-260e-432f-94de-b47828c3f372\",\n  \"authority\": \"https://login.microsoftonline.com/tfp/iosmsalb2c.onmicrosoft.com/b2c_1_signin/\",\n  \"token_response\": {\n    \"access_token\": \"<removed_at>\",\n    \"id_token\": \"{0}\",\n    \"token_type\": \"Bearer\",\n    \"not_before\": 1538801260,\n    \"expires_in\": 3600,\n    \"expires_on\": 1538804860,\n    \"resource\": \"14df2240-96cc-4f42-a133-ef0807492869\",\n    \"client_info\": \"eyJ1aWQiOiJhZDAyMGY4ZS1iMWJhLTQ0YjItYmQ2OS1jMjJiZTg2NzM3ZjUtYjJjXzFfc2lnbmluIiwidXRpZCI6ImJhNmMwZDk0LWE4ZGEtNDViMi04M2FlLTMzODcxZjljMmRkOCJ9\",\n    \"scope\": \"https://iosmsalb2c.onmicrosoft.com/webapitest/user.read\",\n    \"refresh_token\": \"<removed_rt>\",\n    \"refresh_token_expires_in\": 1209600\n  },\n  \"id_token_response\": {\n    \"exp\": 1538804860,\n    \"nbf\": 1538801260,\n    \"ver\": \"1.0\",\n    \"iss\": \"https://login.microsoftonline.com/ba6c0d94-a8da-45b2-83ae-33871f9c2dd8/v2.0/\",\n    \"sub\": \"ad020f8e-b1ba-44b2-bd69-c22be86737f5\",\n    \"aud\": \"0a7f52dd-260e-432f-94de-b47828c3f372\",\n    \"iat\": 1538801260,\n    \"auth_time\": 1538801260,\n    \"idp\": \"live.com\",\n    \"name\": \"MSAL SDK Test\",\n    \"oid\": \"ad020f8e-b1ba-44b2-bd69-c22be86737f5\",\n    \"family_name\": \"SDK Test\",\n    \"given_name\": \"MSAL\",\n    \"emails\": [\n      \"msalsdktest@outlook.com\"\n    ],\n    \"tfp\": \"B2C_1_Signin\",\n    \"at_hash\": \"Q4O3HDClcaLl7y0uU-bJAg\"\n  },\n  \"at_cache_key\": \"ad020f8e-b1ba-44b2-bd69-c22be86737f5-b2c_1_signin.ba6c0d94-a8da-45b2-83ae-33871f9c2dd8-login.microsoftonline.com-accesstoken-0a7f52dd-260e-432f-94de-b47828c3f372-iosmsalb2c.onmicrosoft.com-https://iosmsalb2c.onmicrosoft.com/webapitest/user.read\",\n  \"at_cache_key_ios_service\": \"accesstoken-0a7f52dd-260e-432f-94de-b47828c3f372-iosmsalb2c.onmicrosoft.com-https://iosmsalb2c.onmicrosoft.com/webapitest/user.read\",\n  \"at_cache_key_ios_account\": \"ad020f8e-b1ba-44b2-bd69-c22be86737f5-b2c_1_signin.ba6c0d94-a8da-45b2-83ae-33871f9c2dd8-login.microsoftonline.com\",\n  \"at_cache_key_ios_generic\": \"accesstoken-0a7f52dd-260e-432f-94de-b47828c3f372-iosmsalb2c.onmicrosoft.com\",\n  \"at_cache_value\": {\n    \"secret\": \"<removed_at>\",\n    \"target\": \"https://iosmsalb2c.onmicrosoft.com/webapitest/user.read\",\n    \"credential_type\": \"AccessToken\",\n    \"environment\": \"login.microsoftonline.com\",\n    \"realm\": \"iosmsalb2c.onmicrosoft.com\",\n    \"expires_on\": \"1538805103\",\n    \"cached_at\": \"1538801503\",\n    \"client_id\": \"0a7f52dd-260e-432f-94de-b47828c3f372\",\n    \"home_account_id\": \"ad020f8e-b1ba-44b2-bd69-c22be86737f5-b2c_1_signin.ba6c0d94-a8da-45b2-83ae-33871f9c2dd8\"\n  },\n  \"id_token_cache_key\": \"ad020f8e-b1ba-44b2-bd69-c22be86737f5-b2c_1_signin.ba6c0d94-a8da-45b2-83ae-33871f9c2dd8-login.microsoftonline.com-idtoken-0a7f52dd-260e-432f-94de-b47828c3f372-iosmsalb2c.onmicrosoft.com-\",\n  \"id_token_cache_key_ios_service\": \"idtoken-0a7f52dd-260e-432f-94de-b47828c3f372-iosmsalb2c.onmicrosoft.com-\",\n  \"id_token_cache_key_ios_account\": \"ad020f8e-b1ba-44b2-bd69-c22be86737f5-b2c_1_signin.ba6c0d94-a8da-45b2-83ae-33871f9c2dd8-login.microsoftonline.com\",\n  \"id_token_cache_key_ios_generic\": \"idtoken-0a7f52dd-260e-432f-94de-b47828c3f372-iosmsalb2c.onmicrosoft.com\",\n  \"id_token_cache_value\": {\n    \"secret\": \"{0}\",\n    \"credential_type\": \"IdToken\",\n    \"environment\": \"login.microsoftonline.com\",\n    \"home_account_id\": \"ad020f8e-b1ba-44b2-bd69-c22be86737f5-b2c_1_signin.ba6c0d94-a8da-45b2-83ae-33871f9c2dd8\",\n    \"realm\": \"iosmsalb2c.onmicrosoft.com\",\n    \"client_id\": \"0a7f52dd-260e-432f-94de-b47828c3f372\"\n  },\n  \"rt_cache_key\": \"ad020f8e-b1ba-44b2-bd69-c22be86737f5-b2c_1_signin.ba6c0d94-a8da-45b2-83ae-33871f9c2dd8-login.microsoftonline.com-refreshtoken-0a7f52dd-260e-432f-94de-b47828c3f372--\",\n  \"rt_cache_key_ios_service\": \"refreshtoken-0a7f52dd-260e-432f-94de-b47828c3f372--\",\n  \"rt_cache_key_ios_account\": \"ad020f8e-b1ba-44b2-bd69-c22be86737f5-b2c_1_signin.ba6c0d94-a8da-45b2-83ae-33871f9c2dd8-login.microsoftonline.com\",\n  \"rt_cache_key_ios_generic\": \"refreshtoken-0a7f52dd-260e-432f-94de-b47828c3f372-\",\n  \"rt_cache_value\": {\n    \"client_id\": \"0a7f52dd-260e-432f-94de-b47828c3f372\",\n    \"secret\": \"<removed_rt>\",\n    \"environment\": \"login.microsoftonline.com\",\n    \"credential_type\": \"RefreshToken\",\n    \"home_account_id\": \"ad020f8e-b1ba-44b2-bd69-c22be86737f5-b2c_1_signin.ba6c0d94-a8da-45b2-83ae-33871f9c2dd8\"\n  },\n  \"account_cache_key\": \"ad020f8e-b1ba-44b2-bd69-c22be86737f5-b2c_1_signin.ba6c0d94-a8da-45b2-83ae-33871f9c2dd8-login.microsoftonline.com-iosmsalb2c.onmicrosoft.com\",\n  \"account_cache_key_ios_service\": \"iosmsalb2c.onmicrosoft.com\",\n  \"account_cache_key_ios_account\": \"ad020f8e-b1ba-44b2-bd69-c22be86737f5-b2c_1_signin.ba6c0d94-a8da-45b2-83ae-33871f9c2dd8-login.microsoftonline.com\",\n  \"account_cache_key_ios_generic\": \"missing from the token response\",\n  \"account_cache_value\": {\n    \"family_name\": \"SDK Test\",\n    \"local_account_id\": \"ad020f8e-b1ba-44b2-bd69-c22be86737f5\",\n    \"home_account_id\": \"ad020f8e-b1ba-44b2-bd69-c22be86737f5-b2c_1_signin.ba6c0d94-a8da-45b2-83ae-33871f9c2dd8\",\n    \"username\": \"Missing from the token response\",\n    \"authority_type\": \"MSSTS\",\n    \"given_name\": \"MSAL\",\n    \"environment\": \"login.microsoftonline.com\",\n    \"name\": \"MSAL SDK Test\",\n    \"realm\": \"iosmsalb2c.onmicrosoft.com\",\n\t\"client_info\": \"eyJ1aWQiOiJhZDAyMGY4ZS1iMWJhLTQ0YjItYmQ2OS1jMjJiZTg2NzM3ZjUtYjJjXzFfc2lnbmluIiwidXRpZCI6ImJhNmMwZDk0LWE4ZGEtNDViMi04M2FlLTMzODcxZjljMmRkOCJ9\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Static Methods for Various Classes in C#\nDESCRIPTION: Static method definitions for various classes in the Microsoft.Identity.Client namespace, including extension methods, factory methods, and utility methods for authentication and configuration.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0/PublicAPI.Shipped.txt#2025-04-23_snippet_57\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Client.AccountExtensions.GetTenantProfiles(this Microsoft.Identity.Client.IAccount account) -> System.Collections.Generic.IEnumerable<Microsoft.Identity.Client.TenantProfile>\nstatic Microsoft.Identity.Client.Advanced.AcquireTokenParameterBuilderExtensions.WithExtraHttpHeaders<T>(this Microsoft.Identity.Client.AbstractAcquireTokenParameterBuilder<T> builder, System.Collections.Generic.IDictionary<string, string> extraHttpHeaders) -> T\nstatic Microsoft.Identity.Client.AppConfig.ManagedIdentityId.SystemAssigned.get -> Microsoft.Identity.Client.AppConfig.ManagedIdentityId\nstatic Microsoft.Identity.Client.AppConfig.ManagedIdentityId.WithUserAssignedClientId(string clientId) -> Microsoft.Identity.Client.AppConfig.ManagedIdentityId\nstatic Microsoft.Identity.Client.AppConfig.ManagedIdentityId.WithUserAssignedObjectId(string objectId) -> Microsoft.Identity.Client.AppConfig.ManagedIdentityId\nstatic Microsoft.Identity.Client.AppConfig.ManagedIdentityId.WithUserAssignedResourceId(string resourceId) -> Microsoft.Identity.Client.AppConfig.ManagedIdentityId\nstatic Microsoft.Identity.Client.AuthenticationHeaderParser.ParseAuthenticationHeaders(System.Net.Http.Headers.HttpResponseHeaders httpResponseHeaders) -> Microsoft.Identity.Client.AuthenticationHeaderParser\nstatic Microsoft.Identity.Client.AuthenticationHeaderParser.ParseAuthenticationHeadersAsync(string resourceUri, System.Net.Http.HttpClient httpClient, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Microsoft.Identity.Client.AuthenticationHeaderParser>\nstatic Microsoft.Identity.Client.AuthenticationHeaderParser.ParseAuthenticationHeadersAsync(string resourceUri, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Microsoft.Identity.Client.AuthenticationHeaderParser>\nstatic Microsoft.Identity.Client.AuthenticationInfoParameters.CreateFromResponseHeaders(System.Net.Http.Headers.HttpResponseHeaders httpResponseHeaders) -> Microsoft.Identity.Client.AuthenticationInfoParameters\nstatic Microsoft.Identity.Client.CacheOptions.EnableSharedCacheOptions.get -> Microsoft.Identity.Client.CacheOptions\nstatic Microsoft.Identity.Client.ConfidentialClientApplicationBuilder.Create(string clientId) -> Microsoft.Identity.Client.ConfidentialClientApplicationBuilder\nstatic Microsoft.Identity.Client.ConfidentialClientApplicationBuilder.CreateWithApplicationOptions(Microsoft.Identity.Client.ConfidentialClientApplicationOptions options) -> Microsoft.Identity.Client.ConfidentialClientApplicationBuilder\nstatic Microsoft.Identity.Client.Extensibility.AbstractConfidentialClientAcquireTokenParameterBuilderExtension.OnBeforeTokenRequest<T>(this Microsoft.Identity.Client.AbstractAcquireTokenParameterBuilder<T> builder, System.Func<Microsoft.Identity.Client.Extensibility.OnBeforeTokenRequestData, System.Threading.Tasks.Task> onBeforeTokenRequestHandler) -> Microsoft.Identity.Client.AbstractAcquireTokenParameterBuilder<T>\n```\n\n----------------------------------------\n\nTITLE: Declaring Extensibility Classes in C#\nDESCRIPTION: Declares various extensibility classes for the Microsoft Authentication Library, including parameter builder extensions and app token provider parameters. These classes provide additional functionality and customization options for MSAL.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/netstandard2.0/PublicAPI.Shipped.txt#2025-04-23_snippet_48\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.Extensibility.AbstractConfidentialClientAcquireTokenParameterBuilderExtension\nMicrosoft.Identity.Client.Extensibility.AcquireTokenForClientBuilderExtensions\nMicrosoft.Identity.Client.Extensibility.AcquireTokenInteractiveParameterBuilderExtensions\nMicrosoft.Identity.Client.Extensibility.AcquireTokenOnBehalfOfParameterBuilderExtensions\nMicrosoft.Identity.Client.Extensibility.AppTokenProviderParameters\nMicrosoft.Identity.Client.Extensibility.AppTokenProviderParameters.AppTokenProviderParameters() -> void\n```\n\n----------------------------------------\n\nTITLE: Token Cache and Assertion Request Properties in MSAL.NET\nDESCRIPTION: Properties for token cache notification arguments and assertion request options, providing information about client capabilities and distributed cache usage reasons.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-ios/PublicAPI.Shipped.txt#2025-04-23_snippet_87\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.AssertionRequestOptions.ClientCapabilities.get -> System.Collections.Generic.IEnumerable<string>\nMicrosoft.Identity.Client.AssertionRequestOptions.ClientCapabilities.set -> void\nMicrosoft.Identity.Client.TokenCacheNotificationArgs.NoDistributedCacheUseReason.get -> string\n```\n\n----------------------------------------\n\nTITLE: Defining ClientApplicationBase Class in C#\nDESCRIPTION: Declares the ClientApplicationBase class, which serves as a base for client application implementations in the authentication library.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net462/PublicAPI.Shipped.txt#2025-04-23_snippet_21\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.ClientApplicationBase\n```\n\n----------------------------------------\n\nTITLE: Defining WwwAuthenticateParameters Class in C#\nDESCRIPTION: Class definition for WwwAuthenticateParameters, which contains properties and methods for handling WWW-Authenticate parameters in the authentication process.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0/PublicAPI.Shipped.txt#2025-04-23_snippet_55\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.WwwAuthenticateParameters\nMicrosoft.Identity.Client.WwwAuthenticateParameters.AuthenticationScheme.get -> string\nMicrosoft.Identity.Client.WwwAuthenticateParameters.Authority.get -> string\nMicrosoft.Identity.Client.WwwAuthenticateParameters.Authority.set -> void\nMicrosoft.Identity.Client.WwwAuthenticateParameters.Claims.get -> string\nMicrosoft.Identity.Client.WwwAuthenticateParameters.Claims.set -> void\nMicrosoft.Identity.Client.WwwAuthenticateParameters.Error.get -> string\nMicrosoft.Identity.Client.WwwAuthenticateParameters.Error.set -> void\nMicrosoft.Identity.Client.WwwAuthenticateParameters.GetTenantId() -> string\nMicrosoft.Identity.Client.WwwAuthenticateParameters.Nonce.get -> string\nMicrosoft.Identity.Client.WwwAuthenticateParameters.Resource.get -> string\nMicrosoft.Identity.Client.WwwAuthenticateParameters.Resource.set -> void\nMicrosoft.Identity.Client.WwwAuthenticateParameters.Scopes.get -> System.Collections.Generic.IEnumerable<string>\nMicrosoft.Identity.Client.WwwAuthenticateParameters.Scopes.set -> void\nMicrosoft.Identity.Client.WwwAuthenticateParameters.this[string key].get -> string\nMicrosoft.Identity.Client.WwwAuthenticateParameters.WwwAuthenticateParameters() -> void\n```\n\n----------------------------------------\n\nTITLE: Defining WwwAuthenticateParameters Class in C#\nDESCRIPTION: Class representing WWW-Authenticate parameters in the Microsoft.Identity.Client namespace. It includes properties for various authentication-related parameters and methods for accessing them.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/netstandard2.0/PublicAPI.Shipped.txt#2025-04-23_snippet_83\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.WwwAuthenticateParameters\nMicrosoft.Identity.Client.WwwAuthenticateParameters.AuthenticationScheme.get -> string\nMicrosoft.Identity.Client.WwwAuthenticateParameters.Authority.get -> string\nMicrosoft.Identity.Client.WwwAuthenticateParameters.Authority.set -> void\nMicrosoft.Identity.Client.WwwAuthenticateParameters.Claims.get -> string\nMicrosoft.Identity.Client.WwwAuthenticateParameters.Claims.set -> void\nMicrosoft.Identity.Client.WwwAuthenticateParameters.Error.get -> string\nMicrosoft.Identity.Client.WwwAuthenticateParameters.Error.set -> void\nMicrosoft.Identity.Client.WwwAuthenticateParameters.GetTenantId() -> string\nMicrosoft.Identity.Client.WwwAuthenticateParameters.Nonce.get -> string\nMicrosoft.Identity.Client.WwwAuthenticateParameters.Resource.get -> string\nMicrosoft.Identity.Client.WwwAuthenticateParameters.Resource.set -> void\nMicrosoft.Identity.Client.WwwAuthenticateParameters.Scopes.get -> System.Collections.Generic.IEnumerable<string>\nMicrosoft.Identity.Client.WwwAuthenticateParameters.Scopes.set -> void\nMicrosoft.Identity.Client.WwwAuthenticateParameters.this[string key].get -> string\nMicrosoft.Identity.Client.WwwAuthenticateParameters.WwwAuthenticateParameters() -> void\n```\n\n----------------------------------------\n\nTITLE: Implementing BaseAbstractApplicationBuilder in C#\nDESCRIPTION: Defines an abstract base class for application builders, including methods for configuring client details, logging, and HTTP client factory.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net462/PublicAPI.Shipped.txt#2025-04-23_snippet_14\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.BaseAbstractApplicationBuilder<T>\nMicrosoft.Identity.Client.BaseAbstractApplicationBuilder<T>.WithClientName(string clientName) -> T\nMicrosoft.Identity.Client.BaseAbstractApplicationBuilder<T>.WithClientVersion(string clientVersion) -> T\nMicrosoft.Identity.Client.BaseAbstractApplicationBuilder<T>.WithDebugLoggingCallback(Microsoft.Identity.Client.LogLevel logLevel = Microsoft.Identity.Client.LogLevel.Info, bool enablePiiLogging = false, bool withDefaultPlatformLoggingEnabled = false) -> T\nMicrosoft.Identity.Client.BaseAbstractApplicationBuilder<T>.WithExperimentalFeatures(bool enableExperimentalFeatures = true) -> T\nMicrosoft.Identity.Client.BaseAbstractApplicationBuilder<T>.WithHttpClientFactory(Microsoft.Identity.Client.IMsalHttpClientFactory httpClientFactory) -> T\nMicrosoft.Identity.Client.BaseAbstractApplicationBuilder<T>.WithHttpClientFactory(Microsoft.Identity.Client.IMsalHttpClientFactory httpClientFactory, bool retryOnceOn5xx) -> T\nMicrosoft.Identity.Client.BaseAbstractApplicationBuilder<T>.WithLogging(Microsoft.Identity.Client.LogCallback loggingCallback, Microsoft.Identity.Client.LogLevel? logLevel = null, bool? enablePiiLogging = null, bool? enableDefaultPlatformLogging = null) -> T\nMicrosoft.Identity.Client.BaseAbstractApplicationBuilder<T>.WithLogging(Microsoft.IdentityModel.Abstractions.IIdentityLogger identityLogger, bool enablePiiLogging = false) -> T\n```\n\n----------------------------------------\n\nTITLE: Resource Provider Extensions for Confidential Client Applications\nDESCRIPTION: Extension methods specifically designed for resource providers to configure confidential client applications with certificates and token handling options.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0/PublicAPI.Shipped.txt#2025-04-23_snippet_78\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.RP.ConfidentialClientApplicationBuilderForResourceProviders\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Client.RP.ConfidentialClientApplicationBuilderForResourceProviders.WithCertificate(this Microsoft.Identity.Client.ConfidentialClientApplicationBuilder builder, System.Security.Cryptography.X509Certificates.X509Certificate2 certificate, bool sendX5C, bool associateTokensWithCertificateSerialNumber) -> Microsoft.Identity.Client.ConfidentialClientApplicationBuilder\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.RP.AcquireTokenForClientParameterBuilderForResourceProviders\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Client.RP.AcquireTokenForClientParameterBuilderForResourceProviders.WithAccessTokenSha256ToRefresh(this Microsoft.Identity.Client.AcquireTokenForClientParameterBuilder builder, string hash) -> Microsoft.Identity.Client.AcquireTokenForClientParameterBuilder\n```\n\n----------------------------------------\n\nTITLE: Defining AppTokenProviderParameters Properties in C#\nDESCRIPTION: Defines read-only properties for the AppTokenProviderParameters class, including CancellationToken, Claims, CorrelationId, Scopes, and TenantId.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/netstandard2.0/PublicAPI.Shipped.txt#2025-04-23_snippet_49\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.Extensibility.AppTokenProviderParameters.CancellationToken.get -> System.Threading.CancellationToken\nMicrosoft.Identity.Client.Extensibility.AppTokenProviderParameters.Claims.get -> string\nMicrosoft.Identity.Client.Extensibility.AppTokenProviderParameters.CorrelationId.get -> string\nMicrosoft.Identity.Client.Extensibility.AppTokenProviderParameters.Scopes.get -> System.Collections.Generic.IEnumerable<string>\nMicrosoft.Identity.Client.Extensibility.AppTokenProviderParameters.TenantId.get -> string\n```\n\n----------------------------------------\n\nTITLE: MSAL Abstract Token Acquisition Method\nDESCRIPTION: Abstract asynchronous method for token acquisition that takes a cancellation token and returns an AuthenticationResult.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-ios/PublicAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nabstract Microsoft.Identity.Client.BaseAbstractAcquireTokenParameterBuilder<T>.ExecuteAsync(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<Microsoft.Identity.Client.AuthenticationResult>\n```\n\n----------------------------------------\n\nTITLE: Defining IAuthenticationOperation Interface in C#\nDESCRIPTION: Specifies the interface for authentication operations, including methods for formatting results and retrieving token request parameters.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net462/PublicAPI.Shipped.txt#2025-04-23_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.AuthScheme.IAuthenticationOperation\nMicrosoft.Identity.Client.AuthScheme.IAuthenticationOperation.AccessTokenType.get -> string\nMicrosoft.Identity.Client.AuthScheme.IAuthenticationOperation.AuthorizationHeaderPrefix.get -> string\nMicrosoft.Identity.Client.AuthScheme.IAuthenticationOperation.FormatResult(Microsoft.Identity.Client.AuthenticationResult authenticationResult) -> void\nMicrosoft.Identity.Client.AuthScheme.IAuthenticationOperation.GetTokenRequestParams() -> System.Collections.Generic.IReadOnlyDictionary<string, string>\nMicrosoft.Identity.Client.AuthScheme.IAuthenticationOperation.KeyId.get -> string\nMicrosoft.Identity.Client.AuthScheme.IAuthenticationOperation.TelemetryTokenType.get -> int\n```\n\n----------------------------------------\n\nTITLE: Defining WindowsBrokerOptions Class in C#\nDESCRIPTION: Class definition for WindowsBrokerOptions, which contains properties and methods for configuring Windows broker options in the authentication process.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0/PublicAPI.Shipped.txt#2025-04-23_snippet_54\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.WindowsBrokerOptions\nMicrosoft.Identity.Client.WindowsBrokerOptions.HeaderText.get -> string\nMicrosoft.Identity.Client.WindowsBrokerOptions.HeaderText.set -> void\nMicrosoft.Identity.Client.WindowsBrokerOptions.ListWindowsWorkAndSchoolAccounts.get -> bool\nMicrosoft.Identity.Client.WindowsBrokerOptions.ListWindowsWorkAndSchoolAccounts.set -> void\nMicrosoft.Identity.Client.WindowsBrokerOptions.MsaPassthrough.get -> bool\nMicrosoft.Identity.Client.WindowsBrokerOptions.MsaPassthrough.set -> void\nMicrosoft.Identity.Client.WindowsBrokerOptions.WindowsBrokerOptions() -> void\n```\n\n----------------------------------------\n\nTITLE: AadAuthorityAudience Enumeration in C#\nDESCRIPTION: An enumeration that defines the different audience types for Azure Active Directory authorities, used to specify which identity provider should be targeted for authentication requests.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net472/PublicAPI.Shipped.txt#2025-04-23_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.AadAuthorityAudience\nMicrosoft.Identity.Client.AadAuthorityAudience.AzureAdAndPersonalMicrosoftAccount = 2 -> Microsoft.Identity.Client.AadAuthorityAudience\nMicrosoft.Identity.Client.AadAuthorityAudience.AzureAdMultipleOrgs = 3 -> Microsoft.Identity.Client.AadAuthorityAudience\nMicrosoft.Identity.Client.AadAuthorityAudience.AzureAdMyOrg = 1 -> Microsoft.Identity.Client.AadAuthorityAudience\nMicrosoft.Identity.Client.AadAuthorityAudience.None = 0 -> Microsoft.Identity.Client.AadAuthorityAudience\nMicrosoft.Identity.Client.AadAuthorityAudience.PersonalMicrosoftAccount = 4 -> Microsoft.Identity.Client.AadAuthorityAudience\n```\n\n----------------------------------------\n\nTITLE: Defining CacheLevel Enum in C#\nDESCRIPTION: Enumerates different cache levels used in the authentication library, including L1 and L2 caches.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net462/PublicAPI.Shipped.txt#2025-04-23_snippet_18\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.Cache.CacheLevel\nMicrosoft.Identity.Client.Cache.CacheLevel.L1Cache = 2 -> Microsoft.Identity.Client.Cache.CacheLevel\nMicrosoft.Identity.Client.Cache.CacheLevel.L2Cache = 3 -> Microsoft.Identity.Client.Cache.CacheLevel\nMicrosoft.Identity.Client.Cache.CacheLevel.None = 0 -> Microsoft.Identity.Client.Cache.CacheLevel\nMicrosoft.Identity.Client.Cache.CacheLevel.Unknown = 1 -> Microsoft.Identity.Client.Cache.CacheLevel\n```\n\n----------------------------------------\n\nTITLE: Retrieving Kerberos Tickets from Windows Ticket Cache in C#\nDESCRIPTION: Static method that retrieves a Kerberos ticket for a specified service principal from the Windows ticket cache. This allows applications to access existing Kerberos tickets.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-ios/PublicAPI.Shipped.txt#2025-04-23_snippet_47\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Client.Kerberos.KerberosSupplementalTicketManager.GetKerberosTicketFromWindowsTicketCache(string servicePrincipalName) -> byte[]\n```\n\n----------------------------------------\n\nTITLE: UserAssertion Class Implementation in C#\nDESCRIPTION: Defines the UserAssertion class which encapsulates a user assertion for on-behalf-of authentication flows. Includes constructors for different assertion types and properties to access the assertion data.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-android/PublicAPI.Shipped.txt#2025-04-23_snippet_39\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.UserAssertion\nMicrosoft.Identity.Client.UserAssertion.Assertion.get -> string\nMicrosoft.Identity.Client.UserAssertion.AssertionType.get -> string\nMicrosoft.Identity.Client.UserAssertion.UserAssertion(string assertion, string assertionType) -> void\nMicrosoft.Identity.Client.UserAssertion.UserAssertion(string jwtBearerToken) -> void\n```\n\n----------------------------------------\n\nTITLE: Accessing MAUI Assets at Runtime Using FileSystem\nDESCRIPTION: This C# code snippet demonstrates how to access a deployed MAUI asset at runtime using the FileSystem.OpenAppPackageFileAsync method from .NET MAUI Essentials. It opens a file stream, reads the content with a StreamReader, and stores it in a string variable.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/tests/devapps/MauiApps/MauiAppB2C/Resources/Raw/AboutAssets.txt#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: MsalException Base Class in MSAL.NET\nDESCRIPTION: Defines the base exception class for all MSAL-specific exceptions. Includes properties for correlation ID, error code, additional data, and retry status, along with methods for serialization and constructors.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/netstandard2.0/PublicAPI.Shipped.txt#2025-04-23_snippet_70\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.MsalException\nMicrosoft.Identity.Client.MsalException.AdditionalExceptionData.get -> System.Collections.Generic.IReadOnlyDictionary<string, string>\nMicrosoft.Identity.Client.MsalException.AdditionalExceptionData.set -> void\nMicrosoft.Identity.Client.MsalException.CorrelationId.get -> string\nMicrosoft.Identity.Client.MsalException.CorrelationId.set -> void\nMicrosoft.Identity.Client.MsalException.ErrorCode.get -> string\nMicrosoft.Identity.Client.MsalException.IsRetryable.get -> bool\nMicrosoft.Identity.Client.MsalException.IsRetryable.set -> void\nMicrosoft.Identity.Client.MsalException.MsalException() -> void\nMicrosoft.Identity.Client.MsalException.MsalException(string errorCode) -> void\nMicrosoft.Identity.Client.MsalException.MsalException(string errorCode, string errorMessage) -> void\nMicrosoft.Identity.Client.MsalException.MsalException(string errorCode, string errorMessage, System.Exception innerException) -> void\nMicrosoft.Identity.Client.MsalException.ToJsonString() -> string\n```\n\n----------------------------------------\n\nTITLE: Defining BrokerOptions Class and Related Enum in C#\nDESCRIPTION: This snippet defines the BrokerOptions class for configuring broker-related options, including the OperatingSystems enum for specifying the enabled operating systems for broker usage.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/netstandard2.0/PublicAPI.Shipped.txt#2025-04-23_snippet_38\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.BrokerOptions\nMicrosoft.Identity.Client.BrokerOptions.BrokerOptions(Microsoft.Identity.Client.BrokerOptions.OperatingSystems enabledOn) -> void\nMicrosoft.Identity.Client.BrokerOptions.EnabledOn.get -> Microsoft.Identity.Client.BrokerOptions.OperatingSystems\nMicrosoft.Identity.Client.BrokerOptions.ListOperatingSystemAccounts.get -> bool\nMicrosoft.Identity.Client.BrokerOptions.ListOperatingSystemAccounts.set -> void\nMicrosoft.Identity.Client.BrokerOptions.MsaPassthrough.get -> bool\nMicrosoft.Identity.Client.BrokerOptions.MsaPassthrough.set -> void\nMicrosoft.Identity.Client.BrokerOptions.OperatingSystems\nMicrosoft.Identity.Client.BrokerOptions.OperatingSystems.None = 0 -> Microsoft.Identity.Client.BrokerOptions.OperatingSystems\nMicrosoft.Identity.Client.BrokerOptions.OperatingSystems.Windows = 1 -> Microsoft.Identity.Client.BrokerOptions.OperatingSystems\nMicrosoft.Identity.Client.BrokerOptions.Title.get -> string\nMicrosoft.Identity.Client.BrokerOptions.Title.set -> void\n```\n\n----------------------------------------\n\nTITLE: Defining MSAL.NET Abstract Method Signature for Token Acquisition\nDESCRIPTION: Abstract method signature for executing token acquisition asynchronously with cancellation support. This is part of the base parameter builder class that all token acquisition flows extend.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-android/PublicAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nabstract Microsoft.Identity.Client.BaseAbstractAcquireTokenParameterBuilder<T>.ExecuteAsync(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<Microsoft.Identity.Client.AuthenticationResult>\n```\n\n----------------------------------------\n\nTITLE: Defining MSAL LogLevel Enumeration\nDESCRIPTION: Defines log level constants for MSAL logging, ranging from Always (-1) to Verbose (3)\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-ios/PublicAPI.Shipped.txt#2025-04-23_snippet_34\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.LogLevel.Always = -1\nMicrosoft.Identity.Client.LogLevel.Error = 0\nMicrosoft.Identity.Client.LogLevel.Warning = 1\nMicrosoft.Identity.Client.LogLevel.Info = 2\nMicrosoft.Identity.Client.LogLevel.Verbose = 3\n```\n\n----------------------------------------\n\nTITLE: Defining Static Methods and Properties in Various Classes in C#\nDESCRIPTION: Static methods and properties for account extensions, parameter builder extensions, managed identity configurations, authentication header parsing, and client application building in the Microsoft.Identity.Client namespace.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/netstandard2.0/PublicAPI.Shipped.txt#2025-04-23_snippet_85\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Client.AccountExtensions.GetTenantProfiles(this Microsoft.Identity.Client.IAccount account) -> System.Collections.Generic.IEnumerable<Microsoft.Identity.Client.TenantProfile>\nstatic Microsoft.Identity.Client.Advanced.AcquireTokenParameterBuilderExtensions.WithExtraHttpHeaders<T>(this Microsoft.Identity.Client.AbstractAcquireTokenParameterBuilder<T> builder, System.Collections.Generic.IDictionary<string, string> extraHttpHeaders) -> T\nstatic Microsoft.Identity.Client.AppConfig.ManagedIdentityId.SystemAssigned.get -> Microsoft.Identity.Client.AppConfig.ManagedIdentityId\nstatic Microsoft.Identity.Client.AppConfig.ManagedIdentityId.WithUserAssignedClientId(string clientId) -> Microsoft.Identity.Client.AppConfig.ManagedIdentityId\nstatic Microsoft.Identity.Client.AppConfig.ManagedIdentityId.WithUserAssignedObjectId(string objectId) -> Microsoft.Identity.Client.AppConfig.ManagedIdentityId\nstatic Microsoft.Identity.Client.AppConfig.ManagedIdentityId.WithUserAssignedResourceId(string resourceId) -> Microsoft.Identity.Client.AppConfig.ManagedIdentityId\nstatic Microsoft.Identity.Client.AuthenticationHeaderParser.ParseAuthenticationHeaders(System.Net.Http.Headers.HttpResponseHeaders httpResponseHeaders) -> Microsoft.Identity.Client.AuthenticationHeaderParser\nstatic Microsoft.Identity.Client.AuthenticationHeaderParser.ParseAuthenticationHeadersAsync(string resourceUri, System.Net.Http.HttpClient httpClient, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Microsoft.Identity.Client.AuthenticationHeaderParser>\nstatic Microsoft.Identity.Client.AuthenticationHeaderParser.ParseAuthenticationHeadersAsync(string resourceUri, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Microsoft.Identity.Client.AuthenticationHeaderParser>\nstatic Microsoft.Identity.Client.AuthenticationInfoParameters.CreateFromResponseHeaders(System.Net.Http.Headers.HttpResponseHeaders httpResponseHeaders) -> Microsoft.Identity.Client.AuthenticationInfoParameters\nstatic Microsoft.Identity.Client.CacheOptions.EnableSharedCacheOptions.get -> Microsoft.Identity.Client.CacheOptions\nstatic Microsoft.Identity.Client.ConfidentialClientApplicationBuilder.Create(string clientId) -> Microsoft.Identity.Client.ConfidentialClientApplicationBuilder\nstatic Microsoft.Identity.Client.ConfidentialClientApplicationBuilder.CreateWithApplicationOptions(Microsoft.Identity.Client.ConfidentialClientApplicationOptions options) -> Microsoft.Identity.Client.ConfidentialClientApplicationBuilder\nstatic Microsoft.Identity.Client.Extensibility.AbstractConfidentialClientAcquireTokenParameterBuilderExtension.OnBeforeTokenRequest<T>(this Microsoft.Identity.Client.AbstractAcquireTokenParameterBuilder<T> builder, System.Func<Microsoft.Identity.Client.Extensibility.OnBeforeTokenRequestData, System.Threading.Tasks.Task> onBeforeTokenRequestHandler) -> Microsoft.Identity.Client.AbstractAcquireTokenParameterBuilder<T>\n```\n\n----------------------------------------\n\nTITLE: Implementing AuthenticationResultMetadata Class in C#\nDESCRIPTION: Defines the AuthenticationResultMetadata class with properties for caching, token sources, and performance metrics related to token acquisition.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net462/PublicAPI.Shipped.txt#2025-04-23_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.AuthenticationResultMetadata\nMicrosoft.Identity.Client.AuthenticationResultMetadata.AuthenticationResultMetadata(Microsoft.Identity.Client.TokenSource tokenSource) -> void\nMicrosoft.Identity.Client.AuthenticationResultMetadata.CacheLevel.get -> Microsoft.Identity.Client.Cache.CacheLevel\nMicrosoft.Identity.Client.AuthenticationResultMetadata.CacheLevel.set -> void\nMicrosoft.Identity.Client.AuthenticationResultMetadata.CacheRefreshReason.get -> Microsoft.Identity.Client.CacheRefreshReason\nMicrosoft.Identity.Client.AuthenticationResultMetadata.CacheRefreshReason.set -> void\nMicrosoft.Identity.Client.AuthenticationResultMetadata.DurationCreatingExtendedTokenInUs.get -> long\nMicrosoft.Identity.Client.AuthenticationResultMetadata.DurationCreatingExtendedTokenInUs.set -> void\nMicrosoft.Identity.Client.AuthenticationResultMetadata.DurationInCacheInMs.get -> long\nMicrosoft.Identity.Client.AuthenticationResultMetadata.DurationInCacheInMs.set -> void\nMicrosoft.Identity.Client.AuthenticationResultMetadata.DurationInHttpInMs.get -> long\nMicrosoft.Identity.Client.AuthenticationResultMetadata.DurationInHttpInMs.set -> void\nMicrosoft.Identity.Client.AuthenticationResultMetadata.DurationTotalInMs.get -> long\nMicrosoft.Identity.Client.AuthenticationResultMetadata.DurationTotalInMs.set -> void\nMicrosoft.Identity.Client.AuthenticationResultMetadata.RefreshOn.get -> System.DateTimeOffset?\nMicrosoft.Identity.Client.AuthenticationResultMetadata.RefreshOn.set -> void\nMicrosoft.Identity.Client.AuthenticationResultMetadata.RegionDetails.get -> Microsoft.Identity.Client.RegionDetails\nMicrosoft.Identity.Client.AuthenticationResultMetadata.RegionDetails.set -> void\nMicrosoft.Identity.Client.AuthenticationResultMetadata.Telemetry.get -> string\nMicrosoft.Identity.Client.AuthenticationResultMetadata.Telemetry.set -> void\nMicrosoft.Identity.Client.AuthenticationResultMetadata.TokenEndpoint.get -> string\nMicrosoft.Identity.Client.AuthenticationResultMetadata.TokenEndpoint.set -> void\nMicrosoft.Identity.Client.AuthenticationResultMetadata.TokenSource.get -> Microsoft.Identity.Client.TokenSource\n```\n\n----------------------------------------\n\nTITLE: Defining UiRequiredExceptionClassification Enum in C#\nDESCRIPTION: Enum definition for UiRequiredExceptionClassification, which specifies different types of UI-required exceptions in the authentication process.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0/PublicAPI.Shipped.txt#2025-04-23_snippet_52\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.UiRequiredExceptionClassification\nMicrosoft.Identity.Client.UiRequiredExceptionClassification.AcquireTokenSilentFailed = 7 -> Microsoft.Identity.Client.UiRequiredExceptionClassification\nMicrosoft.Identity.Client.UiRequiredExceptionClassification.AdditionalAction = 3 -> Microsoft.Identity.Client.UiRequiredExceptionClassification\nMicrosoft.Identity.Client.UiRequiredExceptionClassification.BasicAction = 2 -> Microsoft.Identity.Client.UiRequiredExceptionClassification\nMicrosoft.Identity.Client.UiRequiredExceptionClassification.ConsentRequired = 4 -> Microsoft.Identity.Client.UiRequiredExceptionClassification\nMicrosoft.Identity.Client.UiRequiredExceptionClassification.MessageOnly = 1 -> Microsoft.Identity.Client.UiRequiredExceptionClassification\nMicrosoft.Identity.Client.UiRequiredExceptionClassification.None = 0 -> Microsoft.Identity.Client.UiRequiredExceptionClassification\nMicrosoft.Identity.Client.UiRequiredExceptionClassification.PromptNeverFailed = 6 -> Microsoft.Identity.Client.UiRequiredExceptionClassification\nMicrosoft.Identity.Client.UiRequiredExceptionClassification.UserPasswordExpired = 5 -> Microsoft.Identity.Client.UiRequiredExceptionClassification\n```\n\n----------------------------------------\n\nTITLE: Extracting KRB-CRED Structure from Kerberos Ticket in C#\nDESCRIPTION: Static method that extracts the KRB-CRED structure from a Kerberos supplemental ticket. This structure contains the actual Kerberos credentials needed for authentication.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-ios/PublicAPI.Shipped.txt#2025-04-23_snippet_49\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Client.Kerberos.KerberosSupplementalTicketManager.GetKrbCred(Microsoft.Identity.Client.Kerberos.KerberosSupplementalTicket ticket) -> byte[]\n```\n\n----------------------------------------\n\nTITLE: Kerberos Ticket Management in MSAL.NET\nDESCRIPTION: Methods for managing Kerberos supplemental tickets in MSAL.NET, including retrieving, parsing, and saving Kerberos tickets for Windows authentication.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net472/PublicAPI.Shipped.txt#2025-04-23_snippet_21\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Client.Kerberos.KerberosSupplementalTicketManager.FromIdToken(string idToken) -> Microsoft.Identity.Client.Kerberos.KerberosSupplementalTicket\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Client.Kerberos.KerberosSupplementalTicketManager.GetKerberosTicketFromWindowsTicketCache(string servicePrincipalName) -> byte[]\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Client.Kerberos.KerberosSupplementalTicketManager.GetKerberosTicketFromWindowsTicketCache(string servicePrincipalName, long logonId) -> byte[]\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Client.Kerberos.KerberosSupplementalTicketManager.GetKrbCred(Microsoft.Identity.Client.Kerberos.KerberosSupplementalTicket ticket) -> byte[]\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Client.Kerberos.KerberosSupplementalTicketManager.SaveToWindowsTicketCache(Microsoft.Identity.Client.Kerberos.KerberosSupplementalTicket ticket) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Client.Kerberos.KerberosSupplementalTicketManager.SaveToWindowsTicketCache(Microsoft.Identity.Client.Kerberos.KerberosSupplementalTicket ticket, long logonId) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Client.Platforms.Features.DesktopOs.Kerberos.Credential.Current() -> Microsoft.Identity.Client.Platforms.Features.DesktopOs.Kerberos.Credential\n```\n\n----------------------------------------\n\nTITLE: UiRequiredExceptionClassification Enum Definition in C#\nDESCRIPTION: Defines the UiRequiredExceptionClassification enum which categorizes scenarios where user interaction is required. Contains various classifications such as None, MessageOnly, BasicAction, and more.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-android/PublicAPI.Shipped.txt#2025-04-23_snippet_38\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.UiRequiredExceptionClassification\nMicrosoft.Identity.Client.UiRequiredExceptionClassification.AcquireTokenSilentFailed = 7 -> Microsoft.Identity.Client.UiRequiredExceptionClassification\nMicrosoft.Identity.Client.UiRequiredExceptionClassification.AdditionalAction = 3 -> Microsoft.Identity.Client.UiRequiredExceptionClassification\nMicrosoft.Identity.Client.UiRequiredExceptionClassification.BasicAction = 2 -> Microsoft.Identity.Client.UiRequiredExceptionClassification\nMicrosoft.Identity.Client.UiRequiredExceptionClassification.ConsentRequired = 4 -> Microsoft.Identity.Client.UiRequiredExceptionClassification\nMicrosoft.Identity.Client.UiRequiredExceptionClassification.MessageOnly = 1 -> Microsoft.Identity.Client.UiRequiredExceptionClassification\nMicrosoft.Identity.Client.UiRequiredExceptionClassification.None = 0 -> Microsoft.Identity.Client.UiRequiredExceptionClassification\nMicrosoft.Identity.Client.UiRequiredExceptionClassification.PromptNeverFailed = 6 -> Microsoft.Identity.Client.UiRequiredExceptionClassification\nMicrosoft.Identity.Client.UiRequiredExceptionClassification.UserPasswordExpired = 5 -> Microsoft.Identity.Client.UiRequiredExceptionClassification\n```\n\n----------------------------------------\n\nTITLE: Managed Identity and Broker Options\nDESCRIPTION: Enum values and properties for managed identity sources and broker operating systems supported by the library.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0/PublicAPI.Shipped.txt#2025-04-23_snippet_76\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.ManagedIdentity.ManagedIdentitySource.MachineLearning = 7 -> Microsoft.Identity.Client.ManagedIdentity.ManagedIdentitySource\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.BrokerOptions.OperatingSystems.Linux = 2 -> Microsoft.Identity.Client.BrokerOptions.OperatingSystems\n```\n\n----------------------------------------\n\nTITLE: Cache Implementation Classes\nDESCRIPTION: Classes for managing token caching including cache levels, options and refresh mechanisms.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0/PublicAPI.Shipped.txt#2025-04-23_snippet_28\n\nLANGUAGE: C#\nCODE:\n```\npublic class CacheData\n{\n    public byte[] AdalV3State { get; set; }\n    public byte[] UnifiedState { get; set; }\n    public CacheData() { }\n}\n```\n\n----------------------------------------\n\nTITLE: Singleton Cache Performance Metrics\nDESCRIPTION: Performance metrics for singleton cache implementation showing latency distributions in cold and warm cache scenarios.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/tests/devapps/WebApi/readme_perf.txt#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n            Cold      Warm\n     50%    16.00ms   26.00ms\n     75%    20.00ms   29.00ms\n     90%    27.00ms   38.00ms\n     95%   119.00ms   136.00ms\n     99%   147.00ms   203.00ms\n```\n\n----------------------------------------\n\nTITLE: Interface Definition - IAccount\nDESCRIPTION: Core interface defining properties for user account information including environment, home account ID and username.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-ios/PublicAPI.Shipped.txt#2025-04-23_snippet_21\n\nLANGUAGE: C#\nCODE:\n```\npublic interface IAccount\n{\n    string Environment { get; }\n    AccountId HomeAccountId { get; }\n    string Username { get; }\n}\n```\n\n----------------------------------------\n\nTITLE: Account Management and Extension Methods in MSAL.NET\nDESCRIPTION: This section contains extension methods for account management in MSAL.NET, including methods to get tenant profiles from an account. These methods help with handling multi-tenant account scenarios.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net472/PublicAPI.Shipped.txt#2025-04-23_snippet_16\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Client.AccountExtensions.GetTenantProfiles(this Microsoft.Identity.Client.IAccount account) -> System.Collections.Generic.IEnumerable<Microsoft.Identity.Client.TenantProfile>\n```\n\n----------------------------------------\n\nTITLE: Defining UiRequiredExceptionClassification Enum in C#\nDESCRIPTION: Enumeration defining various classifications for UI-required exceptions in the Microsoft.Identity.Client namespace.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/netstandard2.0/PublicAPI.Shipped.txt#2025-04-23_snippet_80\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.UiRequiredExceptionClassification\nMicrosoft.Identity.Client.UiRequiredExceptionClassification.AcquireTokenSilentFailed = 7 -> Microsoft.Identity.Client.UiRequiredExceptionClassification\nMicrosoft.Identity.Client.UiRequiredExceptionClassification.AdditionalAction = 3 -> Microsoft.Identity.Client.UiRequiredExceptionClassification\nMicrosoft.Identity.Client.UiRequiredExceptionClassification.BasicAction = 2 -> Microsoft.Identity.Client.UiRequiredExceptionClassification\nMicrosoft.Identity.Client.UiRequiredExceptionClassification.ConsentRequired = 4 -> Microsoft.Identity.Client.UiRequiredExceptionClassification\nMicrosoft.Identity.Client.UiRequiredExceptionClassification.MessageOnly = 1 -> Microsoft.Identity.Client.UiRequiredExceptionClassification\nMicrosoft.Identity.Client.UiRequiredExceptionClassification.None = 0 -> Microsoft.Identity.Client.UiRequiredExceptionClassification\nMicrosoft.Identity.Client.UiRequiredExceptionClassification.PromptNeverFailed = 6 -> Microsoft.Identity.Client.UiRequiredExceptionClassification\nMicrosoft.Identity.Client.UiRequiredExceptionClassification.UserPasswordExpired = 5 -> Microsoft.Identity.Client.UiRequiredExceptionClassification\n```\n\n----------------------------------------\n\nTITLE: Defining CacheRefreshReason Enumeration in C#\nDESCRIPTION: Enumeration defining reasons why tokens need to be refreshed in the cache, including force refresh, no cached token, and proactive refresh scenarios.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-ios/PublicAPI.Shipped.txt#2025-04-23_snippet_17\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.CacheRefreshReason.ForceRefreshOrClaims = 1\nMicrosoft.Identity.Client.CacheRefreshReason.NoCachedAccessToken = 2\nMicrosoft.Identity.Client.CacheRefreshReason.NotApplicable = 0\nMicrosoft.Identity.Client.CacheRefreshReason.ProactivelyRefreshed = 4\n```\n\n----------------------------------------\n\nTITLE: Implementing Equality Operator for Prompt Enum in C#\nDESCRIPTION: Static operator that implements the equality comparison for Prompt enum values. This allows for more intuitive comparison syntax when working with authentication prompt behaviors.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-ios/PublicAPI.Shipped.txt#2025-04-23_snippet_64\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Client.Prompt.operator ==(Microsoft.Identity.Client.Prompt x, Microsoft.Identity.Client.Prompt y) -> bool\n```\n\n----------------------------------------\n\nTITLE: Authentication Prompt Types in MSAL.NET\nDESCRIPTION: Static readonly fields defining different prompt behaviors for authentication scenarios, controlling how users are prompted for credentials.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net462/PublicAPI.Shipped.txt#2025-04-23_snippet_36\n\nLANGUAGE: C#\nCODE:\n```\nstatic readonly Microsoft.Identity.Client.Prompt.Consent -> Microsoft.Identity.Client.Prompt\nstatic readonly Microsoft.Identity.Client.Prompt.Create -> Microsoft.Identity.Client.Prompt\nstatic readonly Microsoft.Identity.Client.Prompt.ForceLogin -> Microsoft.Identity.Client.Prompt\nstatic readonly Microsoft.Identity.Client.Prompt.Never -> Microsoft.Identity.Client.Prompt\nstatic readonly Microsoft.Identity.Client.Prompt.NoPrompt -> Microsoft.Identity.Client.Prompt\nstatic readonly Microsoft.Identity.Client.Prompt.SelectAccount -> Microsoft.Identity.Client.Prompt\n```\n\n----------------------------------------\n\nTITLE: Retrieving Kerberos Tickets with Specific Logon ID in C#\nDESCRIPTION: Static method that retrieves a Kerberos ticket for a specified service principal from the Windows ticket cache using a specific logon ID. This allows for more targeted ticket retrieval in multi-user scenarios.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-ios/PublicAPI.Shipped.txt#2025-04-23_snippet_48\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Client.Kerberos.KerberosSupplementalTicketManager.GetKerberosTicketFromWindowsTicketCache(string servicePrincipalName, long logonId) -> byte[]\n```\n\n----------------------------------------\n\nTITLE: Defining TokenCacheNotificationArgs Constructor in C#\nDESCRIPTION: Constructor for TokenCacheNotificationArgs class in Microsoft.Identity.Client namespace. It initializes various properties related to token cache serialization and management.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/netstandard2.0/PublicAPI.Shipped.txt#2025-04-23_snippet_77\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.TokenCacheNotificationArgs.TokenCacheNotificationArgs(Microsoft.Identity.Client.ITokenCacheSerializer tokenCache, string clientId, Microsoft.Identity.Client.IAccount account, bool hasStateChanged, bool isApplicationCache, string suggestedCacheKey, bool hasTokens, System.DateTimeOffset? suggestedCacheExpiry, System.Threading.CancellationToken cancellationToken, System.Guid correlationId, System.Collections.Generic.IEnumerable<string> requestScopes, string requestTenantId, Microsoft.IdentityModel.Abstractions.IIdentityLogger identityLogger, bool piiLoggingEnabled, Microsoft.Identity.Client.TelemetryCore.TelemetryClient.TelemetryData telemetryData = null) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining ManagedIdentitySource Enum Values\nDESCRIPTION: Enum definition for different types of managed identity sources in Azure, including IMDS, App Service, Azure Arc, Cloud Shell, and Service Fabric.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net472/PublicAPI.Shipped.txt#2025-04-23_snippet_12\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.ManagedIdentity.ManagedIdentitySource.None = 0\nMicrosoft.Identity.Client.ManagedIdentity.ManagedIdentitySource.Imds = 1\nMicrosoft.Identity.Client.ManagedIdentity.ManagedIdentitySource.AppService = 2\nMicrosoft.Identity.Client.ManagedIdentity.ManagedIdentitySource.AzureArc = 3\nMicrosoft.Identity.Client.ManagedIdentity.ManagedIdentitySource.CloudShell = 4\nMicrosoft.Identity.Client.ManagedIdentity.ManagedIdentitySource.ServiceFabric = 5\nMicrosoft.Identity.Client.ManagedIdentity.ManagedIdentitySource.DefaultToImds = 6\n```\n\n----------------------------------------\n\nTITLE: Virtual Methods in MSAL.NET Base Classes\nDESCRIPTION: Virtual methods for token parameter validation and exception handling in MSAL's base classes, allowing for customization in derived classes.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-ios/PublicAPI.Shipped.txt#2025-04-23_snippet_83\n\nLANGUAGE: C#\nCODE:\n```\nvirtual Microsoft.Identity.Client.BaseAbstractAcquireTokenParameterBuilder<T>.Validate() -> void\nvirtual Microsoft.Identity.Client.MsalServiceException.UpdateIsRetryable() -> void\n```\n\n----------------------------------------\n\nTITLE: Defining EmbeddedWebViewOptions Properties in C#\nDESCRIPTION: Declares properties for the EmbeddedWebViewOptions class, which represents options for embedded web views used in authentication flows. These properties include title and WebView2 browser executable folder.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/netstandard2.0/PublicAPI.Shipped.txt#2025-04-23_snippet_47\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.EmbeddedWebViewOptions\nMicrosoft.Identity.Client.EmbeddedWebViewOptions.EmbeddedWebViewOptions() -> void\nMicrosoft.Identity.Client.EmbeddedWebViewOptions.Title.get -> string\nMicrosoft.Identity.Client.EmbeddedWebViewOptions.Title.set -> void\nMicrosoft.Identity.Client.EmbeddedWebViewOptions.WebView2BrowserExecutableFolder.get -> string\nMicrosoft.Identity.Client.EmbeddedWebViewOptions.WebView2BrowserExecutableFolder.set -> void\n```\n\n----------------------------------------\n\nTITLE: Overriding Methods in Various Classes in C#\nDESCRIPTION: Overridden methods for executing asynchronous operations, equality comparisons, and string representations in various classes within the Microsoft.Identity.Client namespace.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/netstandard2.0/PublicAPI.Shipped.txt#2025-04-23_snippet_84\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Identity.Client.AbstractClientAppBaseAcquireTokenParameterBuilder<T>.ExecuteAsync(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<Microsoft.Identity.Client.AuthenticationResult>\noverride Microsoft.Identity.Client.AbstractConfidentialClientAcquireTokenParameterBuilder<T>.ExecuteAsync(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<Microsoft.Identity.Client.AuthenticationResult>\noverride Microsoft.Identity.Client.AbstractManagedIdentityAcquireTokenParameterBuilder<T>.ExecuteAsync(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<Microsoft.Identity.Client.AuthenticationResult>\noverride Microsoft.Identity.Client.AbstractPublicClientAcquireTokenParameterBuilder<T>.ExecuteAsync(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<Microsoft.Identity.Client.AuthenticationResult>\noverride Microsoft.Identity.Client.AccountId.Equals(object obj) -> bool\noverride Microsoft.Identity.Client.AccountId.GetHashCode() -> int\noverride Microsoft.Identity.Client.AccountId.ToString() -> string\noverride Microsoft.Identity.Client.Kerberos.KerberosSupplementalTicket.ToString() -> string\noverride Microsoft.Identity.Client.MsalException.ToString() -> string\noverride Microsoft.Identity.Client.MsalManagedIdentityException.UpdateIsRetryable() -> void\noverride Microsoft.Identity.Client.MsalServiceException.ToString() -> string\noverride Microsoft.Identity.Client.Prompt.Equals(object obj) -> bool\noverride Microsoft.Identity.Client.Prompt.GetHashCode() -> int\n```\n\n----------------------------------------\n\nTITLE: Defining CacheRefreshReason Enum in C#\nDESCRIPTION: Enumerates reasons for cache refresh, including token expiration and proactive refresh scenarios.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net462/PublicAPI.Shipped.txt#2025-04-23_snippet_20\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.CacheRefreshReason\nMicrosoft.Identity.Client.CacheRefreshReason.Expired = 3 -> Microsoft.Identity.Client.CacheRefreshReason\nMicrosoft.Identity.Client.CacheRefreshReason.ForceRefreshOrClaims = 1 -> Microsoft.Identity.Client.CacheRefreshReason\nMicrosoft.Identity.Client.CacheRefreshReason.NoCachedAccessToken = 2 -> Microsoft.Identity.Client.CacheRefreshReason\nMicrosoft.Identity.Client.CacheRefreshReason.NotApplicable = 0 -> Microsoft.Identity.Client.CacheRefreshReason\nMicrosoft.Identity.Client.CacheRefreshReason.ProactivelyRefreshed = 4 -> Microsoft.Identity.Client.CacheRefreshReason\n```\n\n----------------------------------------\n\nTITLE: MSAL Exception Property Constants in C#\nDESCRIPTION: Constants defining property names for MSAL exceptions. These properties contain additional metadata about authentication errors, such as broker-specific error codes, telemetry information, and identity sources.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-ios/PublicAPI.Shipped.txt#2025-04-23_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Identity.Client.MsalException.BrokerErrorCode = \"BrokerErrorCode\" -> string\nconst Microsoft.Identity.Client.MsalException.BrokerErrorContext = \"BrokerErrorContext\" -> string\nconst Microsoft.Identity.Client.MsalException.BrokerErrorStatus = \"BrokerErrorStatus\" -> string\nconst Microsoft.Identity.Client.MsalException.BrokerErrorTag = \"BrokerErrorTag\" -> string\nconst Microsoft.Identity.Client.MsalException.BrokerTelemetry = \"BrokerTelemetry\" -> string\nconst Microsoft.Identity.Client.MsalException.ManagedIdentitySource = \"ManagedIdentitySource\" -> string\n```\n\n----------------------------------------\n\nTITLE: Static Dictionary Performance Metrics\nDESCRIPTION: Performance metrics for static dictionary cache implementation showing latency distributions in cold and warm cache scenarios.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/tests/devapps/WebApi/readme_perf.txt#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n            Cold      Warm\n     50%    11.00ms   8.00ms\n     75%    13.00ms   10.00ms\n     90%    17.00ms   12.00ms\n     95%    21.00ms   14.00ms\n     99%   146.00ms   54.00ms\n```\n\n----------------------------------------\n\nTITLE: Token Provider Parameters Implementation in C#\nDESCRIPTION: Parameter and result classes for token provider operations, including access token management and correlation tracking.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net462/PublicAPI.Shipped.txt#2025-04-23_snippet_23\n\nLANGUAGE: C#\nCODE:\n```\npublic class AppTokenProviderParameters\n{\n    public CancellationToken CancellationToken { get; }\n    public string Claims { get; }\n    public string CorrelationId { get; }\n    public IEnumerable<string> Scopes { get; }\n    public string TenantId { get; }\n}\n\npublic class AppTokenProviderResult\n{\n    public string AccessToken { get; set; }\n    public long ExpiresInSeconds { get; set; }\n    public long? RefreshInSeconds { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing GetAuthorizationRequestUrlParameterBuilder Class in C#\nDESCRIPTION: Defines methods for the GetAuthorizationRequestUrlParameterBuilder class, including ExecuteAsync and various configuration options.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/netstandard2.0/PublicAPI.Shipped.txt#2025-04-23_snippet_54\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.GetAuthorizationRequestUrlParameterBuilder\nMicrosoft.Identity.Client.GetAuthorizationRequestUrlParameterBuilder.ExecuteAsync() -> System.Threading.Tasks.Task<System.Uri>\nMicrosoft.Identity.Client.GetAuthorizationRequestUrlParameterBuilder.ExecuteAsync(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.Uri>\nMicrosoft.Identity.Client.GetAuthorizationRequestUrlParameterBuilder.WithAccount(Microsoft.Identity.Client.IAccount account) -> Microsoft.Identity.Client.GetAuthorizationRequestUrlParameterBuilder\nMicrosoft.Identity.Client.GetAuthorizationRequestUrlParameterBuilder.WithCcsRoutingHint(string userObjectIdentifier, string tenantIdentifier) -> Microsoft.Identity.Client.GetAuthorizationRequestUrlParameterBuilder\nMicrosoft.Identity.Client.GetAuthorizationRequestUrlParameterBuilder.WithExtraScopesToConsent(System.Collections.Generic.IEnumerable<string> extraScopesToConsent) -> Microsoft.Identity.Client.GetAuthorizationRequestUrlParameterBuilder\nMicrosoft.Identity.Client.GetAuthorizationRequestUrlParameterBuilder.WithLoginHint(string loginHint) -> Microsoft.Identity.Client.GetAuthorizationRequestUrlParameterBuilder\nMicrosoft.Identity.Client.GetAuthorizationRequestUrlParameterBuilder.WithPkce(out string codeVerifier) -> Microsoft.Identity.Client.GetAuthorizationRequestUrlParameterBuilder\nMicrosoft.Identity.Client.GetAuthorizationRequestUrlParameterBuilder.WithPrompt(Microsoft.Identity.Client.Prompt prompt) -> Microsoft.Identity.Client.GetAuthorizationRequestUrlParameterBuilder\nMicrosoft.Identity.Client.GetAuthorizationRequestUrlParameterBuilder.WithRedirectUri(string redirectUri) -> Microsoft.Identity.Client.GetAuthorizationRequestUrlParameterBuilder\n```\n\n----------------------------------------\n\nTITLE: TokenCacheNotificationArgs Constructor in C#\nDESCRIPTION: Defines the constructor for TokenCacheNotificationArgs class which is used for token cache notification events. Takes various parameters to provide context about the cache operation being performed.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-android/PublicAPI.Shipped.txt#2025-04-23_snippet_45\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.TokenCacheNotificationArgs.TokenCacheNotificationArgs(Microsoft.Identity.Client.ITokenCacheSerializer tokenCache, string clientId, Microsoft.Identity.Client.IAccount account, bool hasStateChanged, bool isApplicationCache, string suggestedCacheKey, bool hasTokens, System.DateTimeOffset? suggestedCacheExpiry, System.Threading.CancellationToken cancellationToken, System.Guid correlationId, System.Collections.Generic.IEnumerable<string> requestScopes, string requestTenantId, Microsoft.IdentityModel.Abstractions.IIdentityLogger identityLogger, bool piiLoggingEnabled, Microsoft.Identity.Client.TelemetryCore.TelemetryClient.TelemetryData telemetryData = null) -> void\n```\n\n----------------------------------------\n\nTITLE: Windows Platform Utilities in MSAL.NET\nDESCRIPTION: Windows-specific native utilities for initializing process security and detecting elevated user status, supporting secure authentication flows on Windows platforms.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0/PublicAPI.Shipped.txt#2025-04-23_snippet_69\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Client.Utils.Windows.WindowsNativeUtils.InitializeProcessSecurity() -> void\nstatic Microsoft.Identity.Client.Utils.Windows.WindowsNativeUtils.IsElevatedUser() -> bool\n```\n\n----------------------------------------\n\nTITLE: OS Capabilities and Web View Support in MSAL.NET\nDESCRIPTION: Extension methods for checking platform capabilities and determining web view availability for interactive authentication flows.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net472/PublicAPI.Shipped.txt#2025-04-23_snippet_23\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Client.OsCapabilitiesExtensions.GetCertificate(this Microsoft.Identity.Client.IConfidentialClientApplication confidentialClientApplication) -> System.Security.Cryptography.X509Certificates.X509Certificate2\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Client.OsCapabilitiesExtensions.IsEmbeddedWebViewAvailable(this Microsoft.Identity.Client.IPublicClientApplication publicClientApplication) -> bool\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Client.OsCapabilitiesExtensions.IsSystemWebViewAvailable(this Microsoft.Identity.Client.IPublicClientApplication publicClientApplication) -> bool\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Client.OsCapabilitiesExtensions.IsUserInteractive(this Microsoft.Identity.Client.IPublicClientApplication publicClientApplication) -> bool\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Client.PublicClientApplication.OperatingSystemAccount.get -> Microsoft.Identity.Client.IAccount\n```\n\n----------------------------------------\n\nTITLE: Stopping Long-Running Process in Web API with Confidential Client in C#\nDESCRIPTION: Extension method that allows terminating a long-running process in a Web API scenario. This is useful for cleaning up resources associated with long-running authentication processes.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-ios/PublicAPI.Shipped.txt#2025-04-23_snippet_45\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Client.Extensibility.ConfidentialClientApplicationExtensions.StopLongRunningProcessInWebApiAsync(this Microsoft.Identity.Client.ILongRunningWebApi clientApp, string longRunningProcessSessionKey, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<bool>\n```\n\n----------------------------------------\n\nTITLE: Accessing MAUI Assets at Runtime Using FileSystem\nDESCRIPTION: C# method demonstrating how to access deployed assets at runtime using the MAUI Essentials FileSystem API. The example opens a file from the app package, reads its contents using a StreamReader, and returns the file's content as a string.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/tests/devapps/MauiApps/MauiAppBasic/Resources/Raw/AboutAssets.txt#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task LoadMauiAsset()\n\t{\n\t\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\t\tusing var reader = new StreamReader(stream);\n\n\t\tvar contents = reader.ReadToEnd();\n\t}\n```\n\n----------------------------------------\n\nTITLE: TelemetryAudienceType Enumeration in C#\nDESCRIPTION: Enumeration that defines the audience types for telemetry data collection, distinguishing between Production and PreProduction environments.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-android/PublicAPI.Shipped.txt#2025-04-23_snippet_33\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.TelemetryAudienceType\nMicrosoft.Identity.Client.TelemetryAudienceType.PreProduction = 0 -> Microsoft.Identity.Client.TelemetryAudienceType\nMicrosoft.Identity.Client.TelemetryAudienceType.Production = 1 -> Microsoft.Identity.Client.TelemetryAudienceType\n```\n\n----------------------------------------\n\nTITLE: Token Acquisition Parameter Builders in C#\nDESCRIPTION: Concrete implementations of token acquisition parameter builders for different authentication flows.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-ios/PublicAPI.Shipped.txt#2025-04-23_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.AcquireTokenInteractiveParameterBuilder.WithAccount(Microsoft.Identity.Client.IAccount account) -> Microsoft.Identity.Client.AcquireTokenInteractiveParameterBuilder\nMicrosoft.Identity.Client.AcquireTokenByUsernamePasswordParameterBuilder.WithFederationMetadata(string federationMetadata) -> Microsoft.Identity.Client.AcquireTokenByUsernamePasswordParameterBuilder\nMicrosoft.Identity.Client.AcquireTokenForClientParameterBuilder.WithForceRefresh(bool forceRefresh) -> Microsoft.Identity.Client.AcquireTokenForClientParameterBuilder\n```\n\n----------------------------------------\n\nTITLE: Defining BaseAbstractAcquireTokenParameterBuilder Class in C#\nDESCRIPTION: This snippet defines the BaseAbstractAcquireTokenParameterBuilder generic class with methods for executing token acquisition asynchronously and setting correlation ID and extra query parameters.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/netstandard2.0/PublicAPI.Shipped.txt#2025-04-23_snippet_35\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.BaseAbstractAcquireTokenParameterBuilder<T>\nMicrosoft.Identity.Client.BaseAbstractAcquireTokenParameterBuilder<T>.BaseAbstractAcquireTokenParameterBuilder() -> void\nMicrosoft.Identity.Client.BaseAbstractAcquireTokenParameterBuilder<T>.ExecuteAsync() -> System.Threading.Tasks.Task<Microsoft.Identity.Client.AuthenticationResult>\nMicrosoft.Identity.Client.BaseAbstractAcquireTokenParameterBuilder<T>.WithCorrelationId(System.Guid correlationId) -> T\nMicrosoft.Identity.Client.BaseAbstractAcquireTokenParameterBuilder<T>.WithExtraQueryParameters(System.Collections.Generic.Dictionary<string, string> extraQueryParameters) -> T\n```\n\n----------------------------------------\n\nTITLE: Sequence Diagram for Non-Revocation Events in MSAL\nDESCRIPTION: This diagram shows the flow for non-revocation events, illustrating how client capability information is propagated through the system and how token caching works in normal scenarios.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/docs/msiv1_token_revocation.md#2025-04-23_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    actor CX\n    participant MSAL\n    participant MITS\n    participant SFRP        \n    participant eSTS\n\nrect rgb(173, 216, 230)   \n    CX->>MSAL: 1. MSI.AcquireToken <br/> WithClientCapabilities(\"cp1\")\n    MSAL->>MSAL: 2. Find and return token T in cache. <br/>If not found, goto next step.\nend\nrect rgb(215, 234, 132)    \n    MSAL->>MITS: 3. Call MITS_endpoint?xms_cc=cp1\n    MITS->>SFRP: 4. Forward request to SFRP\n    alt Cache Hit\n        SFRP->>MSAL: 5a. Return cached token\n    else Cache Miss\n        SFRP->>eSTS: 5b. Call CCA.AcquireTokenForClient SN/I cert <br/> WithClientCapabilities(cp1)\n        eSTS->>SFRP: 6. Return new token\n        SFRP->>MSAL: 7. Return token to MSAL\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining KerberosSupplementalTicket Class in C#\nDESCRIPTION: This snippet defines the KerberosSupplementalTicket class, which represents a Kerberos supplemental ticket with properties for various ticket details in MSAL.NET.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0/PublicAPI.Shipped.txt#2025-04-23_snippet_41\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.Kerberos.KerberosSupplementalTicket\nMicrosoft.Identity.Client.Kerberos.KerberosSupplementalTicket.ClientKey.get -> string\nMicrosoft.Identity.Client.Kerberos.KerberosSupplementalTicket.ClientKey.set -> void\nMicrosoft.Identity.Client.Kerberos.KerberosSupplementalTicket.ClientName.get -> string\nMicrosoft.Identity.Client.Kerberos.KerberosSupplementalTicket.ClientName.set -> void\nMicrosoft.Identity.Client.Kerberos.KerberosSupplementalTicket.ErrorMessage.get -> string\nMicrosoft.Identity.Client.Kerberos.KerberosSupplementalTicket.ErrorMessage.set -> void\nMicrosoft.Identity.Client.Kerberos.KerberosSupplementalTicket.KerberosMessageBuffer.get -> string\nMicrosoft.Identity.Client.Kerberos.KerberosSupplementalTicket.KerberosMessageBuffer.set -> void\nMicrosoft.Identity.Client.Kerberos.KerberosSupplementalTicket.KerberosSupplementalTicket() -> void\nMicrosoft.Identity.Client.Kerberos.KerberosSupplementalTicket.KerberosSupplementalTicket(string errorMessage) -> void\nMicrosoft.Identity.Client.Kerberos.KerberosSupplementalTicket.KeyType.get -> Microsoft.Identity.Client.Kerberos.KerberosKeyTypes\nMicrosoft.Identity.Client.Kerberos.KerberosSupplementalTicket.KeyType.set -> void\nMicrosoft.Client.Kerberos.KerberosSupplementalTicket.Realm.get -> string\nMicrosoft.Identity.Client.Kerberos.KerberosSupplementalTicket.Realm.set -> void\nMicrosoft.Identity.Client.Kerberos.KerberosSupplementalTicket.ServicePrincipalName.get -> string\nMicrosoft.Identity.Client.Kerberos.KerberosSupplementalTicket.ServicePrincipalName.set -> void\n```\n\n----------------------------------------\n\nTITLE: Defining ManagedIdentitySource Enum in C#\nDESCRIPTION: Defines an enumeration of managed identity sources used in the Microsoft Authentication Library for .NET. Each enum value represents a different source of managed identity.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net462/PublicAPI.Shipped.txt#2025-04-23_snippet_24\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.ManagedIdentity.ManagedIdentitySource\nMicrosoft.Identity.Client.ManagedIdentity.ManagedIdentitySource.AppService = 2 -> Microsoft.Identity.Client.ManagedIdentity.ManagedIdentitySource\nMicrosoft.Identity.Client.ManagedIdentity.ManagedIdentitySource.AzureArc = 3 -> Microsoft.Identity.Client.ManagedIdentity.ManagedIdentitySource\nMicrosoft.Identity.Client.ManagedIdentity.ManagedIdentitySource.CloudShell = 4 -> Microsoft.Identity.Client.ManagedIdentity.ManagedIdentitySource\nMicrosoft.Identity.Client.ManagedIdentity.ManagedIdentitySource.DefaultToImds = 6 -> Microsoft.Identity.Client.ManagedIdentity.ManagedIdentitySource\nMicrosoft.Identity.Client.ManagedIdentity.ManagedIdentitySource.Imds = 1 -> Microsoft.Identity.Client.ManagedIdentity.ManagedIdentitySource\nMicrosoft.Identity.Client.ManagedIdentity.ManagedIdentitySource.None = 0 -> Microsoft.Identity.Client.ManagedIdentity.ManagedIdentitySource\nMicrosoft.Identity.Client.ManagedIdentity.ManagedIdentitySource.ServiceFabric = 5 -> Microsoft.Identity.Client.ManagedIdentity.ManagedIdentitySource\n```\n\n----------------------------------------\n\nTITLE: Retrieving Total Access Tokens From Identity Provider Metric in C#\nDESCRIPTION: Static property that provides the total count of access tokens obtained directly from the identity provider. This metric helps in understanding authentication patterns and server load.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-ios/PublicAPI.Shipped.txt#2025-04-23_snippet_56\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Client.Metrics.TotalAccessTokensFromIdP.get -> long\n```\n\n----------------------------------------\n\nTITLE: MsalManagedIdentityException Class in MSAL.NET\nDESCRIPTION: Defines an exception class specifically for managed identity authentication errors. Includes constructors with parameters for error details, source of the managed identity, and HTTP status code information.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/netstandard2.0/PublicAPI.Shipped.txt#2025-04-23_snippet_71\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.MsalManagedIdentityException\nMicrosoft.Identity.Client.MsalManagedIdentityException.ManagedIdentitySource.get -> Microsoft.Identity.Client.ManagedIdentity.ManagedIdentitySource\nMicrosoft.Identity.Client.MsalManagedIdentityException.MsalManagedIdentityException(string errorCode, string errorMessage, Microsoft.Identity.Client.ManagedIdentity.ManagedIdentitySource source) -> void\nMicrosoft.Identity.Client.MsalManagedIdentityException.MsalManagedIdentityException(string errorCode, string errorMessage, Microsoft.Identity.Client.ManagedIdentity.ManagedIdentitySource source, int statusCode) -> void\nMicrosoft.Identity.Client.MsalManagedIdentityException.MsalManagedIdentityException(string errorCode, string errorMessage, System.Exception innerException, Microsoft.Identity.Client.ManagedIdentity.ManagedIdentitySource source) -> void\nMicrosoft.Identity.Client.MsalManagedIdentityException.MsalManagedIdentityException(string errorCode, string errorMessage, System.Exception innerException, Microsoft.Identity.Client.ManagedIdentity.ManagedIdentitySource source, int statusCode) -> void\n```\n\n----------------------------------------\n\nTITLE: Loading MAUI Asset File\nDESCRIPTION: Asynchronous C# method demonstrating how to load and read a raw asset file using the FileSystem class from .NET MAUI Essentials. Shows proper stream handling with using statements.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/tests/devapps/WAM/WAMMauiApp/WAMMauiApp/Resources/Raw/AboutAssets.txt#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: AbstractClientAppBaseAcquireTokenParameterBuilder Class Declaration in C#\nDESCRIPTION: Declaration of the AbstractClientAppBaseAcquireTokenParameterBuilder generic class.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/netstandard2.0/PublicAPI.Shipped.txt#2025-04-23_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.AbstractClientAppBaseAcquireTokenParameterBuilder<T>\n```\n\n----------------------------------------\n\nTITLE: Defining AcquireTokenOnBehalfOfParameterBuilder Class in C#\nDESCRIPTION: Class definition for AcquireTokenOnBehalfOfParameterBuilder with methods for configuring token acquisition parameters in On-Behalf-Of flow.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0/PublicAPI.Shipped.txt#2025-04-23_snippet_19\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.AcquireTokenOnBehalfOfParameterBuilder\nMicrosoft.Identity.Client.AcquireTokenOnBehalfOfParameterBuilder.WithCcsRoutingHint(string userName) -> Microsoft.Identity.Client.AcquireTokenOnBehalfOfParameterBuilder\nMicrosoft.Identity.Client.AcquireTokenOnBehalfOfParameterBuilder.WithCcsRoutingHint(string userObjectIdentifier, string tenantIdentifier) -> Microsoft.Identity.Client.AcquireTokenOnBehalfOfParameterBuilder\nMicrosoft.Identity.Client.AcquireTokenOnBehalfOfParameterBuilder.WithForceRefresh(bool forceRefresh) -> Microsoft.Identity.Client.AcquireTokenOnBehalfOfParameterBuilder\nMicrosoft.Identity.Client.AcquireTokenOnBehalfOfParameterBuilder.WithSendX5C(bool withSendX5C) -> Microsoft.Identity.Client.AcquireTokenOnBehalfOfParameterBuilder\n```\n\n----------------------------------------\n\nTITLE: Defining MSAL.NET Region Discovery Configuration Constant\nDESCRIPTION: A configuration constant used in the ConfidentialClientApplication class to specify that the library should attempt automatic region discovery for Azure services.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-android/PublicAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Identity.Client.ConfidentialClientApplication.AttemptRegionDiscovery = \"TryAutoDetect\" -> string\n```\n\n----------------------------------------\n\nTITLE: Defining ICustomWebUi Interface in C#\nDESCRIPTION: Declares the ICustomWebUi interface with a method for acquiring an authorization code asynchronously.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/netstandard2.0/PublicAPI.Shipped.txt#2025-04-23_snippet_51\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.Extensibility.ICustomWebUi\nMicrosoft.Identity.Client.Extensibility.ICustomWebUi.AcquireAuthorizationCodeAsync(System.Uri authorizationUri, System.Uri redirectUri, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.Uri>\n```\n\n----------------------------------------\n\nTITLE: MSAL Token Acquisition Builder Methods\nDESCRIPTION: Methods for configuring token acquisition parameters and client authentication options.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-android/PublicAPI.Shipped.txt#2025-04-23_snippet_53\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.AbstractConfidentialClientAcquireTokenParameterBuilder<T>.WithSignedHttpRequestProofOfPossession(Microsoft.Identity.Client.AppConfig.PoPAuthenticationConfiguration popAuthenticationConfiguration) -> T\nMicrosoft.Identity.Client.AcquireTokenForClientParameterBuilder.WithMtlsProofOfPossession() -> Microsoft.Identity.Client.AcquireTokenForClientParameterBuilder\nMicrosoft.Identity.Client.AcquireTokenForClientParameterBuilder.WithFmiPath(string pathSuffix) -> Microsoft.Identity.Client.AcquireTokenForClientParameterBuilder\n```\n\n----------------------------------------\n\nTITLE: Installing MSAL.NET via NuGet Package Manager Console\nDESCRIPTION: This snippet shows how to install the Microsoft.Identity.Client NuGet package using the Package Manager Console in Visual Studio.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client.Broker/PublicApi/PublicAPI.Unshipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nInstall-Package Microsoft.Identity.Client\n```\n\n----------------------------------------\n\nTITLE: Browser Management for System Web View in MSAL.NET\nDESCRIPTION: Static methods for opening URIs with specific browsers (Chrome Edge or Edge) when using system web views for authentication flows.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net462/PublicAPI.Shipped.txt#2025-04-23_snippet_32\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Client.SystemWebViewOptions.OpenWithChromeEdgeBrowserAsync(System.Uri uri) -> System.Threading.Tasks.Task\nstatic Microsoft.Identity.Client.SystemWebViewOptions.OpenWithEdgeBrowserAsync(System.Uri uri) -> System.Threading.Tasks.Task\n```\n\n----------------------------------------\n\nTITLE: Defining MSAL.NET Exception Property Constants in C#\nDESCRIPTION: This snippet defines constant string values for property names used in MSAL.NET exceptions. These constants are likely used when handling and processing exceptions thrown by the library.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0/PublicAPI.Shipped.txt#2025-04-23_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Identity.Client.MsalException.BrokerErrorCode = \"BrokerErrorCode\" -> string\nconst Microsoft.Identity.Client.MsalException.BrokerErrorContext = \"BrokerErrorContext\" -> string\nconst Microsoft.Identity.Client.MsalException.BrokerErrorStatus = \"BrokerErrorStatus\" -> string\nconst Microsoft.Identity.Client.MsalException.BrokerErrorTag = \"BrokerErrorTag\" -> string\nconst Microsoft.Identity.Client.MsalException.BrokerTelemetry = \"BrokerTelemetry\" -> string\nconst Microsoft.Identity.Client.MsalException.ManagedIdentitySource = \"ManagedIdentitySource\" -> string\n```\n\n----------------------------------------\n\nTITLE: Authentication Token Cache Structure in JSON for MSAL.NET\nDESCRIPTION: This JSON structure defines the token cache format used by Microsoft Authentication Library for .NET. It contains token responses, cache keys for different platforms (including iOS-specific formats), and cache values for access tokens, ID tokens, refresh tokens, and account information.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/tests/Microsoft.Identity.Test.Unit/Resources/AADTestData.txt#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"client_id\": \"b6c69a37-df96-4db0-9088-2ab96e1d8215\",\n  \"authority\": \"https://login.microsoftonline.com/common\",\n  \"token_response\": {\n    \"token_type\": \"Bearer\",\n    \"scope\": \"Calendars.Read openid profile Tasks.Read User.Read email\",\n    \"expires_in\": 3600,\n    \"ext_expires_in\": 262800,\n    \"access_token\": \"<removed_at>\",\n    \"refresh_token\": \"<removed_rt>\",\n    \"id_token\": \"{0}\",\n    \"client_info\": \"eyJ1aWQiOiI5ZjQ4ODBkOC04MGJhLTRjNDAtOTdiYy1mN2EyM2M3MDMwODQiLCJ1dGlkIjoiZjY0NWFkOTItZTM4ZC00ZDFhLWI1MTAtZDFiMDlhNzRhOGNhIn0\"\n  },\n  \"id_token_response\": {\n    \"aud\": \"b6c69a37-df96-4db0-9088-2ab96e1d8215\",\n    \"iss\": \"https://login.microsoftonline.com/f645ad92-e38d-4d1a-b510-d1b09a74a8ca/v2.0\",\n    \"iat\": 1538538422,\n    \"nbf\": 1538538422,\n    \"exp\": 1538542322,\n    \"name\": \"Cloud IDLAB Basic User\",\n    \"oid\": \"9f4880d8-80ba-4c40-97bc-f7a23c703084\",\n    \"preferred_username\": \"idlab@msidlab4.onmicrosoft.com\",\n    \"sub\": \"Y6YkBdHNNLHNmTKel9KhRz8wrasxdLRFiP14BRPWrn4\",\n    \"tid\": \"f645ad92-e38d-4d1a-b510-d1b09a74a8ca\",\n    \"uti\": \"6nciX02SMki9k73-F1sZAA\",\n    \"ver\": \"2.0\"\n  },\n  \"at_cache_key\": \"9f4880d8-80ba-4c40-97bc-f7a23c703084.f645ad92-e38d-4d1a-b510-d1b09a74a8ca-login.windows.net-accesstoken-b6c69a37-df96-4db0-9088-2ab96e1d8215-f645ad92-e38d-4d1a-b510-d1b09a74a8ca-calendars.read email openid profile tasks.read user.read\",\n  \"at_cache_key_ios_service\": \"accesstoken-b6c69a37-df96-4db0-9088-2ab96e1d8215-f645ad92-e38d-4d1a-b510-d1b09a74a8ca-calendars.read email openid profile tasks.read user.read\",\n  \"at_cache_key_ios_account\": \"9f4880d8-80ba-4c40-97bc-f7a23c703084.f645ad92-e38d-4d1a-b510-d1b09a74a8ca-login.windows.net\",\n  \"at_cache_key_ios_generic\": \"accesstoken-b6c69a37-df96-4db0-9088-2ab96e1d8215-f645ad92-e38d-4d1a-b510-d1b09a74a8ca\",\n  \"at_cache_value\": {\n    \"secret\": \"<removed_at>\",\n    \"target\": \"Calendars.Read email openid profile Tasks.Read User.Read\",\n    \"extended_expires_on\": \"1538801522\",\n    \"credential_type\": \"AccessToken\",\n    \"environment\": \"login.windows.net\",\n    \"realm\": \"f645ad92-e38d-4d1a-b510-d1b09a74a8ca\",\n    \"expires_on\": \"1538542322\",\n    \"cached_at\": \"1538538722\",\n    \"client_id\": \"b6c69a37-df96-4db0-9088-2ab96e1d8215\",\n    \"home_account_id\": \"9f4880d8-80ba-4c40-97bc-f7a23c703084.f645ad92-e38d-4d1a-b510-d1b09a74a8ca\"\n  },\n  \"id_token_cache_key\": \"9f4880d8-80ba-4c40-97bc-f7a23c703084.f645ad92-e38d-4d1a-b510-d1b09a74a8ca-login.windows.net-idtoken-b6c69a37-df96-4db0-9088-2ab96e1d8215-f645ad92-e38d-4d1a-b510-d1b09a74a8ca-\",\n  \"id_token_cache_key_ios_service\": \"idtoken-b6c69a37-df96-4db0-9088-2ab96e1d8215-f645ad92-e38d-4d1a-b510-d1b09a74a8ca-\",\n  \"id_token_cache_key_ios_account\": \"9f4880d8-80ba-4c40-97bc-f7a23c703084.f645ad92-e38d-4d1a-b510-d1b09a74a8ca-login.windows.net\",\n  \"id_token_cache_key_ios_generic\": \"idtoken-b6c69a37-df96-4db0-9088-2ab96e1d8215-f645ad92-e38d-4d1a-b510-d1b09a74a8ca\",\n  \"id_token_cache_value\": {\n    \"secret\": \"{0}\",\n    \"credential_type\": \"IdToken\",\n    \"environment\": \"login.windows.net\",\n    \"home_account_id\": \"9f4880d8-80ba-4c40-97bc-f7a23c703084.f645ad92-e38d-4d1a-b510-d1b09a74a8ca\",\n    \"realm\": \"f645ad92-e38d-4d1a-b510-d1b09a74a8ca\",\n    \"client_id\": \"b6c69a37-df96-4db0-9088-2ab96e1d8215\"\n  },\n  \"rt_cache_key\": \"9f4880d8-80ba-4c40-97bc-f7a23c703084.f645ad92-e38d-4d1a-b510-d1b09a74a8ca-login.windows.net-refreshtoken-b6c69a37-df96-4db0-9088-2ab96e1d8215--\",\n  \"rt_cache_key_ios_service\": \"refreshtoken-b6c69a37-df96-4db0-9088-2ab96e1d8215--\",\n  \"rt_cache_key_ios_account\": \"9f4880d8-80ba-4c40-97bc-f7a23c703084.f645ad92-e38d-4d1a-b510-d1b09a74a8ca-login.windows.net\",\n  \"rt_cache_key_ios_generic\": \"refreshtoken-b6c69a37-df96-4db0-9088-2ab96e1d8215-\",\n  \"rt_cache_value\": {\n    \"client_id\": \"b6c69a37-df96-4db0-9088-2ab96e1d8215\",\n    \"secret\": \"<removed_rt>\",\n    \"environment\": \"login.windows.net\",\n    \"credential_type\": \"RefreshToken\",\n    \"home_account_id\": \"9f4880d8-80ba-4c40-97bc-f7a23c703084.f645ad92-e38d-4d1a-b510-d1b09a74a8ca\"\n  },\n  \"account_cache_key\": \"9f4880d8-80ba-4c40-97bc-f7a23c703084.f645ad92-e38d-4d1a-b510-d1b09a74a8ca-login.windows.net-f645ad92-e38d-4d1a-b510-d1b09a74a8ca\",\n  \"account_cache_key_ios_service\": \"f645ad92-e38d-4d1a-b510-d1b09a74a8ca\",\n  \"account_cache_key_ios_account\": \"9f4880d8-80ba-4c40-97bc-f7a23c703084.f645ad92-e38d-4d1a-b510-d1b09a74a8ca-login.windows.net\",\n  \"account_cache_key_ios_generic\": \"idlab@msidlab4.onmicrosoft.com\",\n  \"account_cache_value\": {\n    \"local_account_id\": \"9f4880d8-80ba-4c40-97bc-f7a23c703084\",\n    \"home_account_id\": \"9f4880d8-80ba-4c40-97bc-f7a23c703084.f645ad92-e38d-4d1a-b510-d1b09a74a8ca\",\n    \"username\": \"idlab@msidlab4.onmicrosoft.com\",\n    \"environment\": \"login.windows.net\",\n    \"realm\": \"f645ad92-e38d-4d1a-b510-d1b09a74a8ca\",\n    \"authority_type\": \"MSSTS\",\n    \"name\": \"Cloud IDLAB Basic User\",\n\t\"client_info\": \"eyJ1aWQiOiI5ZjQ4ODBkOC04MGJhLTRjNDAtOTdiYy1mN2EyM2M3MDMwODQiLCJ1dGlkIjoiZjY0NWFkOTItZTM4ZC00ZDFhLWI1MTAtZDFiMDlhNzRhOGNhIn0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GetAccountAsync API Call with Null Check\nDESCRIPTION: Fix for the GetAccountAsync API by checking for null on the accountId parameter to prevent exceptions when no account ID is provided.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nGetAccountAsync(accountId)\n```\n\n----------------------------------------\n\nTITLE: Error Constants in MSAL.NET (C#)\nDESCRIPTION: Constant string values representing various error conditions in MSAL.NET. These constants are used in error messages and exception handling throughout the library.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/netstandard2.0/PublicAPI.Shipped.txt#2025-04-23_snippet_92\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Identity.Client.MsalError.ManagedIdentityResponseParseFailure = \"managed_identity_response_parse_failure\" -> string\nconst Microsoft.Identity.Client.MsalError.MissingTenantedAuthority = \"missing_tenanted_authority\" -> string\nconst Microsoft.Identity.Client.MsalError.MtlsCertificateNotProvided = \"mtls_certificate_not_provided\" -> string\nconst Microsoft.Identity.Client.MsalError.MtlsPopWithoutRegion = \"mtls_pop_without_region\" -> string\nconst Microsoft.Identity.Client.MsalError.RegionRequiredForMtlsPop = \"region_required_for_mtls_pop\" -> string\nconst Microsoft.Identity.Client.MsalError.ForceRefreshNotCompatibleWithTokenHash = \"force_refresh_and_token_hash_not_compatible\" -> string\n```\n\n----------------------------------------\n\nTITLE: Socket Access Error Example from MSI Helper Service\nDESCRIPTION: An example of a socket access error that might be returned when testing exception scenarios with the MSI Helper service. This demonstrates how the service can be used to test error handling in MSAL applications.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/tests/devapps/Managed Identity apps/MSIHelperService/readme.md#2025-04-23_snippet_3\n\nLANGUAGE: http\nCODE:\n```\n\"An attempt was made to access a socket in a way forbidden by its access permissions. (127.0.0.1:41292) \\n\\nAn attempt was made to access a socket in a way forbidden by its access permissions.\"\n```\n\n----------------------------------------\n\nTITLE: AccountId Class and Methods in C#\nDESCRIPTION: Declaration of the AccountId class, its constructors, and property getters for Identifier, ObjectId, and TenantId.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/netstandard2.0/PublicAPI.Shipped.txt#2025-04-23_snippet_16\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.AccountId\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.AccountId.AccountId(string adfsIdentifier) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.AccountId.AccountId(string identifier, string objectId, string tenantId) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.AccountId.Identifier.get -> string\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.AccountId.ObjectId.get -> string\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.AccountId.TenantId.get -> string\n```\n\n----------------------------------------\n\nTITLE: Error Response Example from MSI Helper Service\nDESCRIPTION: An example of an error response returned by the MSI Helper service when an unexpected error occurs while fetching an AAD token. Includes HTTP status code, error message, and correlation ID.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/tests/devapps/Managed Identity apps/MSIHelperService/readme.md#2025-04-23_snippet_2\n\nLANGUAGE: http\nCODE:\n```\n\"{\\\"statusCode\\\":500,\\\"message\\\":\\\"An unexpected error occured while fetching the AAD Token.\\\",\\\"correlationId\\\":\\\"91acf506-d323-4bdd-a5f5-b5b71a09e1dc\\\"}\"\n```\n\n----------------------------------------\n\nTITLE: Desktop OS Kerberos Integration and Authentication Prompt Operators in MSAL.NET\nDESCRIPTION: Methods for desktop-specific Kerberos credential access and operator overloads for the Prompt type, facilitating authentication flow configuration and comparison.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0/PublicAPI.Shipped.txt#2025-04-23_snippet_65\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Client.Platforms.Features.DesktopOs.Kerberos.Credential.Current() -> Microsoft.Identity.Client.Platforms.Features.DesktopOs.Kerberos.Credential\nstatic Microsoft.Identity.Client.Prompt.operator !=(Microsoft.Identity.Client.Prompt x, Microsoft.Identity.Client.Prompt y) -> bool\nstatic Microsoft.Identity.Client.Prompt.operator ==(Microsoft.Identity.Client.Prompt x, Microsoft.Identity.Client.Prompt y) -> bool\n```\n\n----------------------------------------\n\nTITLE: Implementing AppTokenProviderResult Class in C#\nDESCRIPTION: Defines the AppTokenProviderResult class with properties for AccessToken, ExpiresInSeconds, and RefreshInSeconds, along with a default constructor.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/netstandard2.0/PublicAPI.Shipped.txt#2025-04-23_snippet_50\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.Extensibility.AppTokenProviderResult\nMicrosoft.Identity.Client.Extensibility.AppTokenProviderResult.AccessToken.get -> string\nMicrosoft.Identity.Client.Extensibility.AppTokenProviderResult.AccessToken.set -> void\nMicrosoft.Identity.Client.Extensibility.AppTokenProviderResult.AppTokenProviderResult() -> void\nMicrosoft.Identity.Client.Extensibility.AppTokenProviderResult.ExpiresInSeconds.get -> long\nMicrosoft.Identity.Client.Extensibility.AppTokenProviderResult.ExpiresInSeconds.set -> void\nMicrosoft.Identity.Client.Extensibility.AppTokenProviderResult.RefreshInSeconds.get -> long?\nMicrosoft.Identity.Client.Extensibility.AppTokenProviderResult.RefreshInSeconds.set -> void\n```\n\n----------------------------------------\n\nTITLE: Implementing WebBrowser Event Arguments in C#\nDESCRIPTION: Defines event argument classes for web browser navigation events in the WinForms legacy web UI. These classes are used to handle navigation and error events in the embedded web browser.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net462/PublicAPI.Shipped.txt#2025-04-23_snippet_28\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.Platforms.Features.WinFormsLegacyWebUi.WebBrowserBeforeNavigateEventArgs\nMicrosoft.Identity.Client.Platforms.Features.WinFormsLegacyWebUi.WebBrowserNavigateErrorEventArgs\n```\n\n----------------------------------------\n\nTITLE: Implementing BaseAbstractAcquireTokenParameterBuilder in C#\nDESCRIPTION: Defines an abstract base class for token acquisition parameter builders, including methods for setting correlation ID and extra query parameters.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net462/PublicAPI.Shipped.txt#2025-04-23_snippet_13\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.BaseAbstractAcquireTokenParameterBuilder<T>\nMicrosoft.Identity.Client.BaseAbstractAcquireTokenParameterBuilder<T>.BaseAbstractAcquireTokenParameterBuilder() -> void\nMicrosoft.Identity.Client.BaseAbstractAcquireTokenParameterBuilder<T>.ExecuteAsync() -> System.Threading.Tasks.Task<Microsoft.Identity.Client.AuthenticationResult>\nMicrosoft.Identity.Client.BaseAbstractAcquireTokenParameterBuilder<T>.WithCorrelationId(System.Guid correlationId) -> T\nMicrosoft.Identity.Client.BaseAbstractAcquireTokenParameterBuilder<T>.WithExtraQueryParameters(System.Collections.Generic.Dictionary<string, string> extraQueryParameters) -> T\n```\n\n----------------------------------------\n\nTITLE: Executing PowerShell to Acquire Managed Identity Token in VM\nDESCRIPTION: This PowerShell script is executed within a Lab Owned Virtual Machine (IDANLENG1) to acquire a Managed Identity token for both System Assigned and User Assigned Identities. The script forms a URI request to the MSI endpoint and returns the response content.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/tests/devapps/Managed Identity apps/MSIHelperService/readme.md#2025-04-23_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\n        try \n        {\n            #Form the URI \n            $uri = $RunbookHeaders.MSI_URI;\n            $MSIResponse = Invoke-WebRequest -UseBasicParsing -Uri $uri -Method GET -Headers @{Metadata=\"TRUE\"}\n            #$MSIResponse\n            $MSIContent = $MSIResponse.Content;\n            $MSIContent;\n        }\n        catch [System.Net.WebException] {\n            $ErrorMessage = $_.ErrorDetails\n            $ErrorMessage\n\n        }\n```\n\n----------------------------------------\n\nTITLE: Defining AzureCloudInstance Enum in C#\nDESCRIPTION: Enumerates different Azure cloud instances, including public, government, and country-specific clouds.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net462/PublicAPI.Shipped.txt#2025-04-23_snippet_12\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.AzureCloudInstance\nMicrosoft.Identity.Client.AzureCloudInstance.AzureChina = 2 -> Microsoft.Identity.Client.AzureCloudInstance\nMicrosoft.Identity.Client.AzureCloudInstance.AzureGermany = 3 -> Microsoft.Identity.Client.AzureCloudInstance\nMicrosoft.Identity.Client.AzureCloudInstance.AzurePublic = 1 -> Microsoft.Identity.Client.AzureCloudInstance\nMicrosoft.Identity.Client.AzureCloudInstance.AzureUsGovernment = 4 -> Microsoft.Identity.Client.AzureCloudInstance\nMicrosoft.Identity.Client.AzureCloudInstance.None = 0 -> Microsoft.Identity.Client.AzureCloudInstance\n```\n\n----------------------------------------\n\nTITLE: Implementing MsalAuthenticationExtension Class in C#\nDESCRIPTION: Defines the MsalAuthenticationExtension class with properties for AdditionalCacheParameters, AuthenticationOperation, and OnBeforeTokenRequestHandler.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/netstandard2.0/PublicAPI.Shipped.txt#2025-04-23_snippet_52\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.Extensibility.MsalAuthenticationExtension\nMicrosoft.Identity.Client.Extensibility.MsalAuthenticationExtension.AdditionalCacheParameters.get -> System.Collections.Generic.IEnumerable<string>\nMicrosoft.Identity.Client.Extensibility.MsalAuthenticationExtension.AdditionalCacheParameters.set -> void\nMicrosoft.Identity.Client.Extensibility.MsalAuthenticationExtension.AuthenticationOperation.get -> Microsoft.Identity.Client.AuthScheme.IAuthenticationOperation\nMicrosoft.Identity.Client.Extensibility.MsalAuthenticationExtension.AuthenticationOperation.set -> void\nMicrosoft.Identity.Client.Extensibility.MsalAuthenticationExtension.MsalAuthenticationExtension() -> void\nMicrosoft.Identity.Client.Extensibility.MsalAuthenticationExtension.OnBeforeTokenRequestHandler.get -> System.Func<Microsoft.Identity.Client.Extensibility.OnBeforeTokenRequestData, System.Threading.Tasks.Task>\nMicrosoft.Identity.Client.Extensibility.MsalAuthenticationExtension.OnBeforeTokenRequestHandler.set -> void\n```\n\n----------------------------------------\n\nTITLE: Abstract Application Builder Class Definition\nDESCRIPTION: Generic abstract class for building authentication configuration. Provides methods for configuring authority, client capabilities, caching, and other authentication parameters.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net472/PublicAPI.Shipped.txt#2025-04-23_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.AbstractApplicationBuilder<T>\n```\n\n----------------------------------------\n\nTITLE: Managing Git Remotes for Fork Integration in MSAL.NET\nDESCRIPTION: This bash script demonstrates how the MSAL team handles contributions from forks. It shows the process of adding a contributor's remote repository, fetching their branch, and pushing it to the original repository to run CI builds while preserving commit attribution.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# list existing remotes\ngit remote -v \n\n# add a remote to the fork of the contributor\ngit remote add joe joes_repo_url\n\n# sync\ngit fetch joe\n\n# checkout the contributor's branch \ngit checkout joes_feature_branch\n\n# push it to the original repository (AzureAD/MSAL)\ngit push origin\n```\n\n----------------------------------------\n\nTITLE: Telemetry Interfaces in MSAL.NET\nDESCRIPTION: Interfaces for telemetry configuration and event payload in MSAL.NET. These allow applications to configure and receive telemetry data about authentication operations, which can be useful for monitoring and diagnostics.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-ios/PublicAPI.Shipped.txt#2025-04-23_snippet_30\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.ITelemetryConfig\nMicrosoft.Identity.Client.ITelemetryConfig.AudienceType.get -> Microsoft.Identity.Client.TelemetryAudienceType\nMicrosoft.Identity.Client.ITelemetryConfig.DispatchAction.get -> System.Action<Microsoft.Identity.Client.ITelemetryEventPayload>\nMicrosoft.Identity.Client.ITelemetryConfig.SessionId.get -> string\nMicrosoft.Identity.Client.ITelemetryEventPayload\nMicrosoft.Identity.Client.ITelemetryEventPayload.BoolValues.get -> System.Collections.Generic.IReadOnlyDictionary<string, bool>\nMicrosoft.Identity.Client.ITelemetryEventPayload.Int64Values.get -> System.Collections.Generic.IReadOnlyDictionary<string, long>\nMicrosoft.Identity.Client.ITelemetryEventPayload.IntValues.get -> System.Collections.Generic.IReadOnlyDictionary<string, int>\nMicrosoft.Identity.Client.ITelemetryEventPayload.Name.get -> string\nMicrosoft.Identity.Client.ITelemetryEventPayload.StringValues.get -> System.Collections.Generic.IReadOnlyDictionary<string, string>\nMicrosoft.Identity.Client.ITelemetryEventPayload.ToJsonString() -> string\n```\n\n----------------------------------------\n\nTITLE: Kerberos Key Types Enum Definition\nDESCRIPTION: Defines the supported Kerberos encryption key types for authentication.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net472/PublicAPI.Shipped.txt#2025-04-23_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.Kerberos.KerberosKeyTypes\nMicrosoft.Identity.Client.Kerberos.KerberosKeyTypes.Aes128CtsHmacSha196 = 17\nMicrosoft.Identity.Client.Kerberos.KerberosKeyTypes.Aes256CtsHmacSha196 = 18\nMicrosoft.Identity.Client.Kerberos.KerberosKeyTypes.DecCbcCrc = 1\nMicrosoft.Identity.Client.Kerberos.KerberosKeyTypes.DesCbcMd5 = 3\nMicrosoft.Identity.Client.Kerberos.KerberosKeyTypes.None = 0\n```\n\n----------------------------------------\n\nTITLE: MSAL.NET Version Declaration\nDESCRIPTION: Declaration of the current version (13.0.1) of the Microsoft Authentication Library for .NET. This version number is used to track the library release version.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/json/Newtonsoft.Json.ReadMe.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nCurent version 13.0.1\n```\n\n----------------------------------------\n\nTITLE: Kerberos Ticket Management in C#\nDESCRIPTION: Static methods for managing Kerberos supplemental tickets, including retrieval from Windows ticket cache and saving operations\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/netstandard2.0/PublicAPI.Shipped.txt#2025-04-23_snippet_87\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Client.Kerberos.KerberosSupplementalTicketManager.FromIdToken(string idToken) -> Microsoft.Identity.Client.Kerberos.KerberosSupplementalTicket\n\nstatic Microsoft.Identity.Client.Kerberos.KerberosSupplementalTicketManager.GetKerberosTicketFromWindowsTicketCache(string servicePrincipalName) -> byte[]\n\nstatic Microsoft.Identity.Client.Kerberos.KerberosSupplementalTicketManager.SaveToWindowsTicketCache(Microsoft.Identity.Client.Kerberos.KerberosSupplementalTicket ticket) -> void\n```\n\n----------------------------------------\n\nTITLE: ManagedIdentity Exception Handling in C#\nDESCRIPTION: Specialized exception class for managed identity-related errors. Includes properties for identifying the managed identity source and HTTP status codes from failed requests.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0/PublicAPI.Shipped.txt#2025-04-23_snippet_46\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.MsalManagedIdentityException\nMicrosoft.Identity.Client.MsalManagedIdentityException.ManagedIdentitySource.get -> Microsoft.Identity.Client.ManagedIdentity.ManagedIdentitySource\nMicrosoft.Identity.Client.MsalManagedIdentityException.MsalManagedIdentityException(string errorCode, string errorMessage, Microsoft.Identity.Client.ManagedIdentity.ManagedIdentitySource source) -> void\nMicrosoft.Identity.Client.MsalManagedIdentityException.MsalManagedIdentityException(string errorCode, string errorMessage, Microsoft.Identity.Client.ManagedIdentity.ManagedIdentitySource source, int statusCode) -> void\nMicrosoft.Identity.Client.MsalManagedIdentityException.MsalManagedIdentityException(string errorCode, string errorMessage, System.Exception innerException, Microsoft.Identity.Client.ManagedIdentity.ManagedIdentitySource source) -> void\nMicrosoft.Identity.Client.MsalManagedIdentityException.MsalManagedIdentityException(string errorCode, string errorMessage, System.Exception innerException, Microsoft.Identity.Client.ManagedIdentity.ManagedIdentitySource source, int statusCode) -> void\n```\n\n----------------------------------------\n\nTITLE: ManagedIdentityApplicationBuilder Methods in MSAL.NET\nDESCRIPTION: Defines the builder pattern for creating ManagedIdentityApplication instances. Provides methods for configuring client capabilities, telemetry clients, and building the final application instance.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/netstandard2.0/PublicAPI.Shipped.txt#2025-04-23_snippet_67\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.ManagedIdentityApplicationBuilder\nMicrosoft.Identity.Client.ManagedIdentityApplicationBuilder.Build() -> Microsoft.Identity.Client.IManagedIdentityApplication\nMicrosoft.Identity.Client.ManagedIdentityApplicationBuilder.WithClientCapabilities(System.Collections.Generic.IEnumerable<string> clientCapabilities) -> Microsoft.Identity.Client.ManagedIdentityApplicationBuilder\nMicrosoft.Identity.Client.ManagedIdentityApplicationBuilder.WithTelemetryClient(params Microsoft.IdentityModel.Abstractions.ITelemetryClient[] telemetryClients) -> Microsoft.Identity.Client.ManagedIdentityApplicationBuilder\n```\n\n----------------------------------------\n\nTITLE: Log Level Enum Definition\nDESCRIPTION: Defines logging severity levels for the MSAL library.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net472/PublicAPI.Shipped.txt#2025-04-23_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.LogLevel\nMicrosoft.Identity.Client.LogLevel.Always = -1\nMicrosoft.Identity.Client.LogLevel.Error = 0\nMicrosoft.Identity.Client.LogLevel.Info = 2\nMicrosoft.Identity.Client.LogLevel.Verbose = 3\nMicrosoft.Identity.Client.LogLevel.Warning = 1\n```\n\n----------------------------------------\n\nTITLE: MSAL Base Method Declaration\nDESCRIPTION: Abstract method declaration for executing token acquisition asynchronously with cancellation support.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/netstandard2.0/PublicAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nabstract Microsoft.Identity.Client.BaseAbstractAcquireTokenParameterBuilder<T>.ExecuteAsync(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<Microsoft.Identity.Client.AuthenticationResult>\n```\n\n----------------------------------------\n\nTITLE: MSAL.NET Version Requirements Note for UWP\nDESCRIPTION: Documents the minimum requirements and package references needed for UWP applications using MSAL.NET.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Important changes for UWP apps\nUpgrade the minimum target platform to 10.0.17763.0\nUpgrade Microsoft.NETCore.UniversalWindowsPlatform to 6.1.9 or above\nAdd a reference to Microsoft.IdentityModel.Abstractions, for projects that use package.json\n```\n\n----------------------------------------\n\nTITLE: Configuring MAUI Asset Build Action\nDESCRIPTION: XML configuration in .csproj file that specifies how raw assets should be included and deployed with the MAUI application. The build action automatically handles deployment of files from the Resources/Raw directory.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/tests/devapps/WAM/WAMMauiApp/WAMMauiApp/Resources/Raw/AboutAssets.txt#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Prompt Class Method Overrides in MSAL.NET\nDESCRIPTION: Object comparison method overrides for the Prompt class in MSAL.NET, enabling proper equality checking and hash code generation.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net472/PublicAPI.Shipped.txt#2025-04-23_snippet_25\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Identity.Client.Prompt.Equals(object obj) -> bool\n```\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Identity.Client.Prompt.GetHashCode() -> int\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Client.Prompt.operator !=(Microsoft.Identity.Client.Prompt x, Microsoft.Identity.Client.Prompt y) -> bool\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Client.Prompt.operator ==(Microsoft.Identity.Client.Prompt x, Microsoft.Identity.Client.Prompt y) -> bool\n```\n\n----------------------------------------\n\nTITLE: Saving Kerberos Tickets with Specific Logon ID in C#\nDESCRIPTION: Static method that saves a Kerberos supplemental ticket to the Windows ticket cache using a specific logon ID. This provides more control over where tickets are saved in multi-user scenarios.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-ios/PublicAPI.Shipped.txt#2025-04-23_snippet_51\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Client.Kerberos.KerberosSupplementalTicketManager.SaveToWindowsTicketCache(Microsoft.Identity.Client.Kerberos.KerberosSupplementalTicket ticket, long logonId) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining WindowsBrokerOptions Class in C#\nDESCRIPTION: Class for configuring Windows broker options in the Microsoft.Identity.Client namespace. It includes properties for header text, listing Windows work and school accounts, and MSA passthrough.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/netstandard2.0/PublicAPI.Shipped.txt#2025-04-23_snippet_82\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.WindowsBrokerOptions\nMicrosoft.Identity.Client.WindowsBrokerOptions.HeaderText.get -> string\nMicrosoft.Identity.Client.WindowsBrokerOptions.HeaderText.set -> void\nMicrosoft.Identity.Client.WindowsBrokerOptions.ListWindowsWorkAndSchoolAccounts.get -> bool\nMicrosoft.Identity.Client.WindowsBrokerOptions.ListWindowsWorkAndSchoolAccounts.set -> void\nMicrosoft.Identity.Client.WindowsBrokerOptions.MsaPassthrough.get -> bool\nMicrosoft.Identity.Client.WindowsBrokerOptions.MsaPassthrough.set -> void\nMicrosoft.Identity.Client.WindowsBrokerOptions.WindowsBrokerOptions() -> void\n```\n\n----------------------------------------\n\nTITLE: Creating WWW-Authenticate Parameters with Specific Scheme in C#\nDESCRIPTION: Static method that parses WWW-Authenticate headers for a specific authentication scheme from HTTP response headers. This allows applications to focus on a particular authentication method.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-ios/PublicAPI.Shipped.txt#2025-04-23_snippet_75\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Client.WwwAuthenticateParameters.CreateFromAuthenticationHeaders(System.Net.Http.Headers.HttpResponseHeaders httpResponseHeaders, string scheme) -> Microsoft.Identity.Client.WwwAuthenticateParameters\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using MSAL.NET in C#\nDESCRIPTION: This snippet demonstrates how to initialize and use MSAL.NET in a C# application. It includes creating a PublicClientApplication, acquiring a token, and making an API call.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-ios/PublicAPI.Unshipped.txt#2025-04-23_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Identity.Client;\n\n// ...\n\nvar app = PublicClientApplicationBuilder.Create(ClientId)\n    .WithAuthority(AzureCloudInstance.AzurePublic, TenantId)\n    .WithRedirectUri(\"http://localhost\")\n    .Build();\n\nstring[] scopes = { \"user.read\" };\nAuthenticationResult result = await app.AcquireTokenInteractive(scopes).ExecuteAsync();\n\nhttpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(\"Bearer\", result.AccessToken);\nvar response = await httpClient.GetAsync(\"https://graph.microsoft.com/v1.0/me\");\n```\n\n----------------------------------------\n\nTITLE: Configuring MauiAsset Build Action in Project File\nDESCRIPTION: XML configuration for the project file (.csproj) that defines how raw assets should be included in the MAUI application build. This directive includes all files from the Resources/Raw directory and assigns them a logical name based on their path.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/tests/devapps/MauiApps/MauiAppWithBroker/Resources/Raw/AboutAssets.txt#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Defining TokenSource Enum in C#\nDESCRIPTION: Enumeration defining possible sources of authentication tokens in the Microsoft.Identity.Client namespace.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/netstandard2.0/PublicAPI.Shipped.txt#2025-04-23_snippet_78\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.TokenSource\nMicrosoft.Identity.Client.TokenSource.Broker = 2 -> Microsoft.Identity.Client.TokenSource\nMicrosoft.Identity.Client.TokenSource.Cache = 1 -> Microsoft.Identity.Client.TokenSource\nMicrosoft.Identity.Client.TokenSource.IdentityProvider = 0 -> Microsoft.Identity.Client.TokenSource\n```\n\n----------------------------------------\n\nTITLE: Defining TraceTelemetryConfig Class in C#\nDESCRIPTION: Class for configuring telemetry tracing in Microsoft.Identity.Client namespace. It includes properties for allowed scopes, audience type, dispatch action, and session ID.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/netstandard2.0/PublicAPI.Shipped.txt#2025-04-23_snippet_79\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.TraceTelemetryConfig\nMicrosoft.Identity.Client.TraceTelemetryConfig.AllowedScopes.get -> System.Collections.Generic.IEnumerable<string>\nMicrosoft.Identity.Client.TraceTelemetryConfig.AudienceType.get -> Microsoft.Identity.Client.TelemetryAudienceType\nMicrosoft.Identity.Client.TraceTelemetryConfig.DispatchAction.get -> System.Action<Microsoft.Identity.Client.ITelemetryEventPayload>\nMicrosoft.Identity.Client.TraceTelemetryConfig.SessionId.get -> string\nMicrosoft.Identity.Client.TraceTelemetryConfig.TraceTelemetryConfig() -> void\n```\n\n----------------------------------------\n\nTITLE: Defining MSAL.NET Exception Property Constants in C#\nDESCRIPTION: This snippet defines string constants for various property names used in MSAL.NET exceptions. These constants are likely used to access specific information from exception objects thrown by the library.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/netstandard2.0/PublicAPI.Shipped.txt#2025-04-23_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Identity.Client.MsalException.BrokerErrorCode = \"BrokerErrorCode\" -> string\nconst Microsoft.Identity.Client.MsalException.BrokerErrorContext = \"BrokerErrorContext\" -> string\nconst Microsoft.Identity.Client.MsalException.BrokerErrorStatus = \"BrokerErrorStatus\" -> string\nconst Microsoft.Identity.Client.MsalException.BrokerErrorTag = \"BrokerErrorTag\" -> string\nconst Microsoft.Identity.Client.MsalException.BrokerTelemetry = \"BrokerTelemetry\" -> string\nconst Microsoft.Identity.Client.MsalException.ManagedIdentitySource = \"ManagedIdentitySource\" -> string\n```\n\n----------------------------------------\n\nTITLE: Configuring MAUI Assets in .csproj file\nDESCRIPTION: This XML snippet shows how to configure the MauiAsset Build Action in your .csproj file to include all files from the Resources\\Raw directory and its subdirectories for deployment with your application.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/tests/devapps/MauiApps/MauiAppB2C/Resources/Raw/AboutAssets.txt#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Wilson LRU Cache Performance Metrics (Normal Limit)\nDESCRIPTION: Performance metrics for Wilson LRU cache with ~2GB limit showing latency distributions in cold and warm cache scenarios.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/tests/devapps/WebApi/readme_perf.txt#2025-04-23_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n            Cold      Warm\n     50%     9.00ms   9.00ms\n     75%    11.00ms   11.00ms\n     90%    14.00ms   14.00ms\n     95%    18.00ms   17.00ms\n     99%   116.00ms   112.00ms\n```\n\n----------------------------------------\n\nTITLE: Defining TokenCacheNotificationArgs Constructor in C#\nDESCRIPTION: Constructor for the TokenCacheNotificationArgs class, which is used for token cache notifications. It takes various parameters related to token caching and authentication.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0/PublicAPI.Shipped.txt#2025-04-23_snippet_49\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.TokenCacheNotificationArgs.TokenCacheNotificationArgs(Microsoft.Identity.Client.ITokenCacheSerializer tokenCache, string clientId, Microsoft.Identity.Client.IAccount account, bool hasStateChanged, bool isApplicationCache, string suggestedCacheKey, bool hasTokens, System.DateTimeOffset? suggestedCacheExpiry, System.Threading.CancellationToken cancellationToken, System.Guid correlationId, System.Collections.Generic.IEnumerable<string> requestScopes, string requestTenantId, Microsoft.IdentityModel.Abstractions.IIdentityLogger identityLogger, bool piiLoggingEnabled, Microsoft.Identity.Client.TelemetryCore.TelemetryClient.TelemetryData telemetryData = null) -> void\n```\n\n----------------------------------------\n\nTITLE: Visualizing SLC Revocation Flow with Mermaid Sequence Diagram\nDESCRIPTION: A sequence diagram illustrating the flow between Application, MSAL, IMDS, and eSTS during SLC revocation scenarios, showing both normal token acquisition and error handling paths.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/docs/msi_v2/slc_revocation_spec.md#2025-04-23_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant Application\n    participant MSAL\n    participant IMDS\n    participant eSTS\n\n    Application ->> MSAL: 1. Request Access Token\n    MSAL ->> IMDS: 2. Request Short-Lived Credential (SLC)\n    IMDS -->> MSAL: 3. Return SLC\n    MSAL ->> eSTS: 4. Exchange SLC for Access Token\n    eSTS -->> MSAL: 5. Response (HTTP 200 / error)\n\n    alt Token Revoked\n        eSTS -->> MSAL: 5a. Return `{\"error\": \"invalid_client\", \"suberror\": \"revoked_token\"}`\n        MSAL ->> IMDS: 6. Request new SLC with `error_code=revoked_token`\n        IMDS -->> MSAL: 7. Return new SLC\n        MSAL ->> eSTS: 8. Retry Access Token request with new SLC\n        eSTS -->> MSAL: 9. Return new Access Token\n    else Unspecified Credential Issue\n        eSTS -->> MSAL: 5b. Return `{\"error\": \"invalid_client\"}`\n        MSAL ->> IMDS: 6a. Request new SLC with `error_code=unspecified`\n        IMDS -->> MSAL: 7a. Return new SLC\n        MSAL ->> eSTS: 8a. Retry Access Token request with new SLC\n        eSTS -->> MSAL: 9a. Return new Access Token\n    end\n\n    MSAL ->> Application: 10. Return Access Token\n```\n\n----------------------------------------\n\nTITLE: Retrieving Total Access Tokens From Cache Metric in C#\nDESCRIPTION: Static property that provides the total count of access tokens retrieved from the token cache. This metric helps in monitoring cache efficiency and usage patterns.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-ios/PublicAPI.Shipped.txt#2025-04-23_snippet_55\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Client.Metrics.TotalAccessTokensFromCache.get -> long\n```\n\n----------------------------------------\n\nTITLE: Installing MSAL for Android using Gradle\nDESCRIPTION: This Gradle configuration adds the MSAL library as a dependency for an Android project. It includes both the core MSAL library and the common library.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/netstandard2.0/PublicAPI.Unshipped.txt#2025-04-23_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\ndependencies {\n    implementation 'com.microsoft.identity.client:msal:4.+'\n    implementation 'com.microsoft.identity.client:msal-common:4.+'\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Instance Discovery for AbstractApplicationBuilder in C#\nDESCRIPTION: Methods for configuring instance discovery options for the AbstractApplicationBuilder class, including enabling/disabling instance discovery and setting instance discovery metadata.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/netstandard2.0/PublicAPI.Shipped.txt#2025-04-23_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.AbstractApplicationBuilder<T>.WithInstanceDicoveryMetadata(string instanceDiscoveryJson) -> T\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.AbstractApplicationBuilder<T>.WithInstanceDicoveryMetadata(System.Uri instanceDiscoveryUri) -> T\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.AbstractApplicationBuilder<T>.WithInstanceDiscovery(bool enableInstanceDiscovery) -> T\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.AbstractApplicationBuilder<T>.WithInstanceDiscoveryMetadata(string instanceDiscoveryJson) -> T\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.AbstractApplicationBuilder<T>.WithInstanceDiscoveryMetadata(System.Uri instanceDiscoveryUri) -> T\n```\n\n----------------------------------------\n\nTITLE: Creating MSAL.NET Package from Command Line\nDESCRIPTION: Command line instruction for building an MSAL.NET package with custom versioning parameters. This allows developers to create a package with a specific semantic version (in this example, a preview version).\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/CONTRIBUTING.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmsbuild <msal>.csproj /t:pack /p:MsalClientSemVer=1.2.3-preview\n```\n\n----------------------------------------\n\nTITLE: AccountExtensions Class Declaration in C#\nDESCRIPTION: Declaration of the AccountExtensions class.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/netstandard2.0/PublicAPI.Shipped.txt#2025-04-23_snippet_15\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.AccountExtensions\n```\n\n----------------------------------------\n\nTITLE: MSAL.NET DLL Loading Exception\nDESCRIPTION: Error message showing the failure to load the msalruntime DLL in a WPF application using Microsoft.Identity.Client.Broker. The error includes both the main exception and inner exception details.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/tests/devapps/WAM/MSIX/README.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Identity.Client.MsalClientException: 'Unable to load DLL 'msalruntime': The specified module could not be found. (Exception from HRESULT: 0x8007007E) See https://aka.ms/msal-net-wam#troubleshooting'\n\nInner Exception\nDllNotFoundException: Unable to load DLL 'msalruntime_x86': The specified module could not be found. (Exception from HRESULT: 0x8007007E)\n```\n\n----------------------------------------\n\nTITLE: Kerberos Ticket Container Enum Definition\nDESCRIPTION: Defines token types for Kerberos ticket containers.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net472/PublicAPI.Shipped.txt#2025-04-23_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.Kerberos.KerberosTicketContainer\nMicrosoft.Identity.Client.Kerberos.KerberosTicketContainer.AccessToken = 1\nMicrosoft.Identity.Client.Kerberos.KerberosTicketContainer.IdToken = 0\n```\n\n----------------------------------------\n\nTITLE: Defining TraceTelemetryConfig Class in C#\nDESCRIPTION: Class definition for TraceTelemetryConfig, which contains properties and methods for configuring telemetry tracing in the Microsoft Identity Client.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0/PublicAPI.Shipped.txt#2025-04-23_snippet_51\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.TraceTelemetryConfig\nMicrosoft.Identity.Client.TraceTelemetryConfig.AllowedScopes.get -> System.Collections.Generic.IEnumerable<string>\nMicrosoft.Identity.Client.TraceTelemetryConfig.AudienceType.get -> Microsoft.Identity.Client.TelemetryAudienceType\nMicrosoft.Identity.Client.TraceTelemetryConfig.DispatchAction.get -> System.Action<Microsoft.Identity.Client.ITelemetryEventPayload>\nMicrosoft.Identity.Client.TraceTelemetryConfig.SessionId.get -> string\nMicrosoft.Identity.Client.TraceTelemetryConfig.TraceTelemetryConfig() -> void\n```\n\n----------------------------------------\n\nTITLE: Visualizing Claims Challenge Flow with Mermaid Sequence Diagram\nDESCRIPTION: A sequence diagram showing the flow between Application, MSAL, IMDS, eSTS, and Resource during a claims challenge scenario when a resource requires additional claims.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/docs/msi_v2/slc_revocation_spec.md#2025-04-23_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant Application\n    participant MSAL\n    participant IMDS\n    participant eSTS\n    participant Resource\n\n    Application ->> MSAL: 1. Request Access Token\n    MSAL ->> IMDS: 2. Request Short-Lived Credential (SLC)\n    IMDS -->> MSAL: 3. Return SLC\n    MSAL ->> eSTS: 4. Exchange SLC for Access Token\n    eSTS -->> MSAL: 5. Return Access Token\n    MSAL ->> Application: 6. Return Access Token\n\n    Application ->> Resource: 7. Call API with Access Token\n    Resource -->> Application: 8. Response (401 Unauthorized) + `WWW-Authenticate` header with claims\n    Application ->> MSAL: 9. Request new token with extracted claims\n    MSAL ->> eSTS: 10. Retry Access Token request with Claims\n    eSTS -->> MSAL: 11. Return new Access Token\n    MSAL ->> Application: 12. Return new Access Token\n```\n\n----------------------------------------\n\nTITLE: Verifying Maven Installation\nDESCRIPTION: Command to verify Maven installation using the mvn command\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/tests/CacheCompat/CommonCache.Test.MsalJava/Install Java.txt#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmvn.cmd\n```\n\n----------------------------------------\n\nTITLE: Checking User Interactivity Support in C#\nDESCRIPTION: Extension method that determines if the current environment supports user interaction for authentication. This helps applications decide whether to use interactive or non-interactive authentication flows.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-ios/PublicAPI.Shipped.txt#2025-04-23_snippet_62\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Client.OsCapabilitiesExtensions.IsUserInteractive(this Microsoft.Identity.Client.IPublicClientApplication publicClientApplication) -> bool\n```\n\n----------------------------------------\n\nTITLE: Implementing CacheOptions Class in C#\nDESCRIPTION: Defines options for cache configuration, including a property for enabling shared cache usage.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net462/PublicAPI.Shipped.txt#2025-04-23_snippet_19\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.CacheOptions\nMicrosoft.Identity.Client.CacheOptions.CacheOptions() -> void\nMicrosoft.Identity.Client.CacheOptions.CacheOptions(bool useSharedCache) -> void\nMicrosoft.Identity.Client.CacheOptions.UseSharedCache.get -> bool\nMicrosoft.Identity.Client.CacheOptions.UseSharedCache.set -> void\n```\n\n----------------------------------------\n\nTITLE: MSAL Region Discovery Configuration\nDESCRIPTION: Configuration constant for the ConfidentialClientApplication class that determines whether to attempt automatic region discovery.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0/PublicAPI.Shipped.txt#2025-04-23_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Identity.Client.ConfidentialClientApplication.AttemptRegionDiscovery = \"TryAutoDetect\" -> string\n```\n\n----------------------------------------\n\nTITLE: Defining KerberosSupplementalTicket Class in C#\nDESCRIPTION: This snippet defines the KerberosSupplementalTicket class, which represents a Kerberos supplemental ticket in MSAL.NET. It includes properties for storing various Kerberos-related information such as client key, client name, and service principal name.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/netstandard2.0/PublicAPI.Shipped.txt#2025-04-23_snippet_64\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.Kerberos.KerberosSupplementalTicket\nMicrosoft.Identity.Client.Kerberos.KerberosSupplementalTicket.ClientKey.get -> string\nMicrosoft.Identity.Client.Kerberos.KerberosSupplementalTicket.ClientKey.set -> void\nMicrosoft.Identity.Client.Kerberos.KerberosSupplementalTicket.ClientName.get -> string\nMicrosoft.Identity.Client.Kerberos.KerberosSupplementalTicket.ClientName.set -> void\nMicrosoft.Identity.Client.Kerberos.KerberosSupplementalTicket.ErrorMessage.get -> string\nMicrosoft.Identity.Client.Kerberos.KerberosSupplementalTicket.ErrorMessage.set -> void\nMicrosoft.Identity.Client.Kerberos.KerberosSupplementalTicket.KerberosMessageBuffer.get -> string\nMicrosoft.Identity.Client.Kerberos.KerberosSupplementalTicket.KerberosMessageBuffer.set -> void\nMicrosoft.Identity.Client.Kerberos.KerberosSupplementalTicket.KerberosSupplementalTicket() -> void\nMicrosoft.Identity.Client.Kerberos.KerberosSupplementalTicket.KerberosSupplementalTicket(string errorMessage) -> void\nMicrosoft.Identity.Client.Kerberos.KerberosSupplementalTicket.KeyType.get -> Microsoft.Identity.Client.Kerberos.KerberosKeyTypes\nMicrosoft.Identity.Client.Kerberos.KerberosSupplementalTicket.KeyType.set -> void\nMicrosoft.Identity.Client.Kerberos.KerberosSupplementalTicket.Realm.get -> string\nMicrosoft.Identity.Client.Kerberos.KerberosSupplementalTicket.Realm.set -> void\nMicrosoft.Identity.Client.Kerberos.KerberosSupplementalTicket.ServicePrincipalName.get -> string\nMicrosoft.Identity.Client.Kerberos.KerberosSupplementalTicket.ServicePrincipalName.set -> void\n```\n\n----------------------------------------\n\nTITLE: Deserializing MSAL Exception from JSON in C#\nDESCRIPTION: Static method that reconstructs an MSAL exception from its JSON representation. This is useful for serializing/deserializing exceptions across process boundaries or for logging purposes.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-ios/PublicAPI.Shipped.txt#2025-04-23_snippet_58\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Client.MsalException.FromJsonString(string json) -> Microsoft.Identity.Client.MsalException\n```\n\n----------------------------------------\n\nTITLE: Loading MAUI Assets Using FileSystem API\nDESCRIPTION: C# example showing how to access deployed assets at runtime using the FileSystem API from .NET MAUI Essentials. This async method opens a file from the app package, reads its contents using a StreamReader, and returns the content as a string.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/tests/devapps/MauiApps/MauiAppWithBroker/Resources/Raw/AboutAssets.txt#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Windows Forms WebBrowser Event Arguments\nDESCRIPTION: Event argument classes for Windows Forms WebBrowser control navigation events, used in legacy web UI implementations.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net472/PublicAPI.Shipped.txt#2025-04-23_snippet_15\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.Platforms.Features.WinFormsLegacyWebUi.WebBrowserBeforeNavigateEventArgs.WebBrowserBeforeNavigateEventArgs(string url, byte[] postData, string headers, int flags, string targetFrameName, object webBrowserActiveXInstance) -> void\n\nMicrosoft.Identity.Client.Platforms.Features.WinFormsLegacyWebUi.WebBrowserNavigateErrorEventArgs.WebBrowserNavigateErrorEventArgs(string url, string targetFrameName, int statusCode, object webBrowserActiveXInstance) -> void\n```\n\n----------------------------------------\n\nTITLE: Locking NuGet Dependency Version for MSALfordotNet\nDESCRIPTION: This XML snippet demonstrates how to specify a version range for the MSALfordotNet dependency in a NuGet package configuration. It ensures that all updates from version 1.1.0 to 1.1.x are included, but excludes version 1.2 and above.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/RELEASES.md#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency\nid=\"MSALfordotNet\"\nversion=\"[1.1,1.2)\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Total Access Tokens From Broker Metric in C#\nDESCRIPTION: Static property that provides the total count of access tokens obtained from an authentication broker. This metric helps in monitoring and diagnosing authentication performance.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-ios/PublicAPI.Shipped.txt#2025-04-23_snippet_54\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Client.Metrics.TotalAccessTokensFromBroker.get -> long\n```\n\n----------------------------------------\n\nTITLE: Configuring MSAL.NET in appsettings.json\nDESCRIPTION: This snippet shows how to configure MSAL.NET settings in the appsettings.json file, including the client ID, tenant ID, and redirect URI.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-ios/PublicAPI.Unshipped.txt#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"AzureAd\": {\n    \"Instance\": \"https://login.microsoftonline.com/\",\n    \"Domain\": \"qualified.domain.name\",\n    \"TenantId\": \"22222222-2222-2222-2222-222222222222\",\n    \"ClientId\": \"11111111-1111-1111-11111111111111111\",\n\n    \"CallbackPath\": \"/signin-oidc\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sequence Diagram for Token Revocation Flow in MSAL\nDESCRIPTION: This diagram illustrates the process flow when a token revocation event occurs, showing interactions between the Client, Resource, MSAL, MITS (Proxy), SFRP (RP), and eSTS. It demonstrates how revocation signals are propagated through the system.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/docs/msiv1_token_revocation.md#2025-04-23_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant Resource\n    actor CX as Client/Caller\n    participant MSAL as MSAL on Leaf\n    participant MITS as MITS (Proxy)\n    participant SFRP as SFRP (RP)\n    participant eSTS\n\nrect rgb(173, 216, 230)\n    CX->>Resource: 1. Call resource with \"bad\" token T\n    Resource->>CX: 2. HTTP 401 + claims C\n    CX->>CX: 3. Parse response, extract claims C\n    CX->>MSAL: 4. MSI.AcquireToken(...).WithClaims(C).WithClientCapabilities(\"cp1\")\nend\n\nrect rgb(215, 234, 132)\n    MSAL->>MSAL: 5. Looks up old token T in local cache\n    MSAL->>MITS: 6. MITS_endpoint?xms_cc=cp1&token_sha256_to_refresh=SHA256(T)\n    MITS->>SFRP: 7. (Forward request w/ cc=cp1, hash=SHA256(T))\n    SFRP->>SFRP: 8. Another MSAL call AcquireTokenForClient(...).WithClientCapabilities(cp1).WithAccessTokenSha256ToRefresh(hash)\n    SFRP->>eSTS: 9. eSTS issues a new token\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Inequality Operator for Prompt Enum in C#\nDESCRIPTION: Static operator that implements the inequality comparison for Prompt enum values. This allows for more intuitive comparison syntax when working with authentication prompt behaviors.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-ios/PublicAPI.Shipped.txt#2025-04-23_snippet_63\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Client.Prompt.operator !=(Microsoft.Identity.Client.Prompt x, Microsoft.Identity.Client.Prompt y) -> bool\n```\n\n----------------------------------------\n\nTITLE: Windows Native Utilities in MSAL.NET\nDESCRIPTION: Utility methods for Windows-specific operations, including process security initialization and elevated user detection.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net462/PublicAPI.Shipped.txt#2025-04-23_snippet_34\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Client.Utils.Windows.WindowsNativeUtils.InitializeProcessSecurity() -> void\nstatic Microsoft.Identity.Client.Utils.Windows.WindowsNativeUtils.IsElevatedUser() -> bool\n```\n\n----------------------------------------\n\nTITLE: Abstract Methods for Authentication in MSAL.NET\nDESCRIPTION: Defines abstract methods for token acquisition and web authentication dialog handling in the Microsoft.Identity.Client library. These methods serve as core building blocks for authentication flows.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net462/PublicAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nabstract Microsoft.Identity.Client.BaseAbstractAcquireTokenParameterBuilder<T>.ExecuteAsync(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<Microsoft.Identity.Client.AuthenticationResult>\n```\n\nLANGUAGE: C#\nCODE:\n```\nabstract Microsoft.Identity.Client.Platforms.Features.WinFormsLegacyWebUi.WindowsFormsWebAuthenticationDialogBase.OnClosingUrl() -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nabstract Microsoft.Identity.Client.Platforms.Features.WinFormsLegacyWebUi.WindowsFormsWebAuthenticationDialogBase.OnNavigationCanceled(int statusCode) -> void\n```\n\n----------------------------------------\n\nTITLE: Using StorageCreationProperties with System Crypto on Windows in .NET\nDESCRIPTION: Shows how to configure token cache storage with System.Security.Cryptography classes on Windows, providing an example of using the builder pattern to create storage properties.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net462/PublicAPI.Unshipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar storageProperties = new StorageCreationPropertiesBuilder(cacheFileName, cacheDir)\n                        .WithLinuxUnprotectedFile() // Linux - unprotected, as encryption is not available on Linux\n                        .WithMacKeyChain(          // Mac - protected by keychain\n                            serviceName: \"my service\", \n                            accountName: \"my account\")\n                        .WithCacheChangedEvent(tokenCache) // wire-up the event\n                        .Build();\n```\n\n----------------------------------------\n\nTITLE: Opening Browser with Chrome Edge for Authentication in C#\nDESCRIPTION: Static method that opens a URI with the Chrome-based Edge browser. This allows applications to customize the system browser used for interactive authentication.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-ios/PublicAPI.Shipped.txt#2025-04-23_snippet_71\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Client.SystemWebViewOptions.OpenWithChromeEdgeBrowserAsync(System.Uri uri) -> System.Threading.Tasks.Task\n```\n\n----------------------------------------\n\nTITLE: Microsoft.Identity.Client Virtual Methods\nDESCRIPTION: Virtual methods for token parameter builders and service exceptions, allowing derived classes to customize validation and error handling behavior.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0/PublicAPI.Shipped.txt#2025-04-23_snippet_73\n\nLANGUAGE: C#\nCODE:\n```\nvirtual Microsoft.Identity.Client.BaseAbstractAcquireTokenParameterBuilder<T>.Validate() -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nvirtual Microsoft.Identity.Client.MsalServiceException.UpdateIsRetryable() -> void\n```\n\n----------------------------------------\n\nTITLE: Initializing PublicClientApplication in Java for MSAL Android\nDESCRIPTION: This Java code creates a PublicClientApplication instance for an Android app using MSAL. It demonstrates setting up the application with a client ID and authority.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/netstandard2.0/PublicAPI.Unshipped.txt#2025-04-23_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nPublicClientApplication.create(\n    this.getApplicationContext(),\n    R.raw.auth_config_single_account);\n```\n\n----------------------------------------\n\nTITLE: Wilson LRU Cache Performance Metrics (Aggressive Limit)\nDESCRIPTION: Performance metrics for Wilson LRU cache with 250 token limit (~500KB) showing latency distributions in cold and warm cache scenarios.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/tests/devapps/WebApi/readme_perf.txt#2025-04-23_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n            Cold      Warm \n     50%    13.00ms   9.00ms \n     75%    18.00ms   10.01ms\n     90%   110.00ms   13.00ms\n     95%   123.01ms   16.00ms\n     99%   167.00ms   106.00ms\n```\n\n----------------------------------------\n\nTITLE: Running Bombardier Performance Tests\nDESCRIPTION: Shell commands for running performance tests against different cache implementations using bombardier load testing tool. Tests run for 60 seconds against various endpoints.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/tests/devapps/WebApi/readme_perf.txt#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nbombardier -d 60s -l https://localhost:44355/FlatCache\nbombardier -d 60s -l https://localhost:44355/StaticDictionary\nbombardier -d 60s -l https://localhost:44355/Singleton\nbombardier -d 60s -l https://localhost:44355/WilsonLruCache\nbombardier -d 60s -l https://localhost:44355/Obo?refreshFlow=true\nbombardier -d 60s -l https://localhost:44355/Obo?refreshFlow=false\n```\n\n----------------------------------------\n\nTITLE: Defining Cache-Related Classes and Enums in C#\nDESCRIPTION: This snippet defines cache-related classes and enums, including CacheData for storing cache state, CacheLevel enum for specifying cache levels, and CacheOptions for configuring cache behavior.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/netstandard2.0/PublicAPI.Shipped.txt#2025-04-23_snippet_39\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.Cache.CacheData\nMicrosoft.Identity.Client.Cache.CacheData.AdalV3State.get -> byte[]\nMicrosoft.Identity.Client.Cache.CacheData.AdalV3State.set -> void\nMicrosoft.Identity.Client.Cache.CacheData.CacheData() -> void\nMicrosoft.Identity.Client.Cache.CacheData.UnifiedState.get -> byte[]\nMicrosoft.Identity.Client.Cache.CacheData.UnifiedState.set -> void\nMicrosoft.Identity.Client.Cache.CacheLevel\nMicrosoft.Identity.Client.Cache.CacheLevel.L1Cache = 2 -> Microsoft.Identity.Client.Cache.CacheLevel\nMicrosoft.Identity.Client.Cache.CacheLevel.L2Cache = 3 -> Microsoft.Identity.Client.Cache.CacheLevel\nMicrosoft.Identity.Client.Cache.CacheLevel.None = 0 -> Microsoft.Identity.Client.Cache.CacheLevel\nMicrosoft.Identity.Client.Cache.CacheLevel.Unknown = 1 -> Microsoft.Identity.Client.Cache.CacheLevel\nMicrosoft.Identity.Client.CacheOptions\nMicrosoft.Identity.Client.CacheOptions.CacheOptions() -> void\nMicrosoft.Identity.Client.CacheOptions.CacheOptions(bool useSharedCache) -> void\nMicrosoft.Identity.Client.CacheOptions.UseSharedCache.get -> bool\nMicrosoft.Identity.Client.CacheOptions.UseSharedCache.set -> void\n```\n\n----------------------------------------\n\nTITLE: Verifying Java Installation\nDESCRIPTION: Command to verify Java installation and check the installed version\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/tests/CacheCompat/CommonCache.Test.MsalJava/Install Java.txt#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\njava -version\n```\n\n----------------------------------------\n\nTITLE: Configuring MAUI Asset Deployment in Project File\nDESCRIPTION: MSBuild configuration that specifies how raw assets should be included in the MAUI application package. The configuration uses the MauiAsset Build Action to include all files in the Resources/Raw directory and its subdirectories.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/tests/devapps/MauiApps/MauiAppBasic/Resources/Raw/AboutAssets.txt#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Override Methods for Various Classes in C#\nDESCRIPTION: Override method definitions for various classes in the Microsoft.Identity.Client namespace, including ExecuteAsync, Equals, GetHashCode, ToString, and UpdateIsRetryable.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0/PublicAPI.Shipped.txt#2025-04-23_snippet_56\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Identity.Client.AbstractClientAppBaseAcquireTokenParameterBuilder<T>.ExecuteAsync(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<Microsoft.Identity.Client.AuthenticationResult>\noverride Microsoft.Identity.Client.AbstractConfidentialClientAcquireTokenParameterBuilder<T>.ExecuteAsync(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<Microsoft.Identity.Client.AuthenticationResult>\noverride Microsoft.Identity.Client.AbstractManagedIdentityAcquireTokenParameterBuilder<T>.ExecuteAsync(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<Microsoft.Identity.Client.AuthenticationResult>\noverride Microsoft.Identity.Client.AbstractPublicClientAcquireTokenParameterBuilder<T>.ExecuteAsync(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<Microsoft.Identity.Client.AuthenticationResult>\noverride Microsoft.Identity.Client.AccountId.Equals(object obj) -> bool\noverride Microsoft.Identity.Client.AccountId.GetHashCode() -> int\noverride Microsoft.Identity.Client.AccountId.ToString() -> string\noverride Microsoft.Identity.Client.Kerberos.KerberosSupplementalTicket.ToString() -> string\noverride Microsoft.Identity.Client.MsalException.ToString() -> string\noverride Microsoft.Identity.Client.MsalManagedIdentityException.UpdateIsRetryable() -> void\noverride Microsoft.Identity.Client.MsalServiceException.ToString() -> string\noverride Microsoft.Identity.Client.Prompt.Equals(object obj) -> bool\noverride Microsoft.Identity.Client.Prompt.GetHashCode() -> int\n```\n\n----------------------------------------\n\nTITLE: Defining AbstractApplicationBuilder Class in C# for MSAL.NET\nDESCRIPTION: This snippet defines an abstract generic class AbstractApplicationBuilder<T> with a method for configuring ADFS authority. This class is likely used as a base for building MSAL.NET application objects.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/netstandard2.0/PublicAPI.Shipped.txt#2025-04-23_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Client.AbstractApplicationBuilder<T>\nMicrosoft.Identity.Client.AbstractApplicationBuilder<T>.WithAdfsAuthority(string authorityUri, bool validateAuthority = true) -> T\n```\n\n----------------------------------------\n\nTITLE: Executing Managed Identity Token Request in Azure ARC\nDESCRIPTION: PowerShell script that executes a web request to retrieve a Managed Identity token from an Azure ARC-enabled machine. The script handles authentication using basic auth when required and processes the MSI response.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/tests/devapps/Managed Identity apps/MSIHelperService/readme.md#2025-04-23_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\n        try \n        {\n            Invoke-WebRequest -Method GET -Uri $endpoint -Headers @{Metadata='TRUE'} -UseBasicParsing\n        }\n        catch {\n\n            $wwwAuthHeader = $_.Exception.Response.Headers[\"WWW-Authenticate\"]\n\n            if ($wwwAuthHeader -match \"Basic realm=.+\")\n            {\n                $secretFile = ($wwwAuthHeader -split \"Basic realm=\")[1]\n            }\n\n            $secret = cat -Raw $secretFile\n\n            try\n            {\n                $response = Invoke-WebRequest -Method GET -Uri $endpoint -Headers @{Metadata='True'; Authorization=\"Basic $secret\"} -UseBasicParsing\n\n                #$MSIResponse\n                $MSIContent = $response.Content;\n                $MSIContent;\n            }\n            catch [System.Net.WebException] {\n                $ErrorMessage = $_.ErrorDetails\n                $ErrorMessage\n            }\n        }\n```\n\n----------------------------------------\n\nTITLE: Visualizing VM/VMSS Credential Endpoint Probe Logic with Mermaid\nDESCRIPTION: A sequence diagram illustrating the probe logic for the VM/VMSS credential endpoint, including the request-response flow between the SDK and IMDS, and the decision-making process based on different response scenarios.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/docs/msi_v2/vm_vmss_credential_probe.md#2025-04-23_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant SDK\n    participant IMDS\n\n    SDK ->> IMDS: 1. Send probe request (POST `/credential` with `.` body, no headers)\n    IMDS -->> SDK: 2. Response (HTTP 400 Bad Request / HTTP 500 Internal Server Error / other)\n\n    alt `/credential` endpoint available\n        IMDS -->> SDK: 3. Return HTTP 400 Bad Request\n        SDK ->> SDK: 4. Confirm `/credential` endpoint exists\n    else IMDS is restarting\n        IMDS -->> SDK: 3a. Return HTTP 500 Internal Server Error\n        SDK ->> SDK: 4a. Check `Server` header for IMDS presence\n        alt IMDS header unavailable (No \"IMDS/\" in `Server` header)\n            SDK ->> SDK: 5. fallback to IMDS\n        else IMDS header available\n            SDK ->> SDK: 5a. Proceed with IMDS V2 Source\n        end\n    end\n```\n\n----------------------------------------\n\nTITLE: MsalException Constants in C#\nDESCRIPTION: Constants used by the MsalException class to provide additional context about errors, particularly those related to broker operations and managed identity authentication.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net472/PublicAPI.Shipped.txt#2025-04-23_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Identity.Client.MsalException.BrokerErrorCode = \"BrokerErrorCode\" -> string\nconst Microsoft.Identity.Client.MsalException.BrokerErrorContext = \"BrokerErrorContext\" -> string\nconst Microsoft.Identity.Client.MsalException.BrokerErrorStatus = \"BrokerErrorStatus\" -> string\nconst Microsoft.Identity.Client.MsalException.BrokerErrorTag = \"BrokerErrorTag\" -> string\nconst Microsoft.Identity.Client.MsalException.BrokerTelemetry = \"BrokerTelemetry\" -> string\nconst Microsoft.Identity.Client.MsalException.ManagedIdentitySource = \"ManagedIdentitySource\" -> string\n```\n\n----------------------------------------\n\nTITLE: System Web View and Token Cache Operations in MSAL.NET\nDESCRIPTION: Utility methods for working with system web browsers in authentication flows and configuring token cache options for optimizing token storage and retrieval.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0/PublicAPI.Shipped.txt#2025-04-23_snippet_68\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Client.SystemWebViewOptions.OpenWithChromeEdgeBrowserAsync(System.Uri uri) -> System.Threading.Tasks.Task\nstatic Microsoft.Identity.Client.SystemWebViewOptions.OpenWithEdgeBrowserAsync(System.Uri uri) -> System.Threading.Tasks.Task\nstatic Microsoft.Identity.Client.TokenCacheExtensions.SetCacheOptions(this Microsoft.Identity.Client.ITokenCache tokenCache, Microsoft.Identity.Client.CacheOptions options) -> void\n```\n\n----------------------------------------\n\nTITLE: Configuring Token Cache Options in C#\nDESCRIPTION: Extension method that allows configuring advanced options for the token cache. This enables applications to control cache behavior such as serialization format and encryption settings.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-ios/PublicAPI.Shipped.txt#2025-04-23_snippet_73\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Client.TokenCacheExtensions.SetCacheOptions(this Microsoft.Identity.Client.ITokenCache tokenCache, Microsoft.Identity.Client.CacheOptions options) -> void\n```\n\n----------------------------------------\n\nTITLE: Abstract Authentication Methods in MSAL.NET\nDESCRIPTION: Core abstract methods for token acquisition and web authentication dialog handling in MSAL.NET\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net472/PublicAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nabstract Microsoft.Identity.Client.BaseAbstractAcquireTokenParameterBuilder<T>.ExecuteAsync(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<Microsoft.Identity.Client.AuthenticationResult>\nabstract Microsoft.Identity.Client.Platforms.Features.WinFormsLegacyWebUi.WindowsFormsWebAuthenticationDialogBase.OnClosingUrl() -> void\nabstract Microsoft.Identity.Client.Platforms.Features.WinFormsLegacyWebUi.WindowsFormsWebAuthenticationDialogBase.OnNavigationCanceled(int statusCode) -> void\n```\n\n----------------------------------------\n\nTITLE: Installing MSAL.NET via NuGet Package Manager Console\nDESCRIPTION: This snippet shows how to install the Microsoft.Identity.Client NuGet package using the Package Manager Console in Visual Studio.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-ios/PublicAPI.Unshipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nInstall-Package Microsoft.Identity.Client\n```\n\n----------------------------------------\n\nTITLE: Web Authentication Dialog Implementation in MSAL.NET\nDESCRIPTION: Override methods for the Windows Forms web authentication dialog implementation in MSAL.NET, handling navigation events and dialog lifecycle.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net472/PublicAPI.Shipped.txt#2025-04-23_snippet_24\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Identity.Client.Platforms.Features.WinFormsLegacyWebUi.WindowsFormsWebAuthenticationDialog.OnClosingUrl() -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Identity.Client.Platforms.Features.WinFormsLegacyWebUi.WindowsFormsWebAuthenticationDialog.OnNavigationCanceled(int inputStatusCode) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Identity.Client.Platforms.Features.WinFormsLegacyWebUi.WindowsFormsWebAuthenticationDialog.WebBrowserBeforeNavigateHandler(object sender, Microsoft.Identity.Client.Platforms.Features.WinFormsLegacyWebUi.WebBrowserBeforeNavigateEventArgs e) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Identity.Client.Platforms.Features.WinFormsLegacyWebUi.WindowsFormsWebAuthenticationDialogBase.Dispose(bool disposing) -> void\n```\n\n----------------------------------------\n\nTITLE: Installing MSAL.NET via .NET CLI\nDESCRIPTION: This snippet demonstrates how to install the Microsoft.Identity.Client NuGet package using the .NET CLI.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-dotnet/blob/main/src/client/Microsoft.Identity.Client/PublicApi/net8.0-ios/PublicAPI.Unshipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\ndotnet add package Microsoft.Identity.Client\n```"
  }
]