[
  {
    "owner": "apache",
    "repo": "couchdb-nano",
    "content": "TITLE: Complete Nano Example: Creating and Using a CouchDB Database in JavaScript\nDESCRIPTION: A comprehensive example demonstrating database creation, document insertion, and response handling using Nano with async/await syntax.\nSOURCE: https://github.com/apache/couchdb-nano/blob/main/README.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nasync function asyncCall() {\n  await nano.db.destroy('alice')\n  await nano.db.create('alice')\n  const alice = nano.use('alice')\n  const response = await alice.insert({ happy: true }, 'rabbit')\n  return response\n}\nasyncCall()\n```\n\n----------------------------------------\n\nTITLE: Basic Configuration of Nano with CouchDB\nDESCRIPTION: Shows how to initialize nano with a CouchDB server URL and access a database. This basic configuration connects to a local CouchDB instance on the default port 5984.\nSOURCE: https://github.com/apache/couchdb-nano/blob/main/README.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst nano = require('nano')('http://localhost:5984')\nconst db = nano.use('foo');\n```\n\n----------------------------------------\n\nTITLE: Initializing Nano Connection to CouchDB in JavaScript\nDESCRIPTION: Creates a connection to a CouchDB instance using the Nano library. This is the first step in using Nano to interact with CouchDB.\nSOURCE: https://github.com/apache/couchdb-nano/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst nano = require('nano')('http://localhost:5984');\n```\n\n----------------------------------------\n\nTITLE: Handling Asynchronous Operations with Promises in Nano\nDESCRIPTION: Demonstrates using Promises to handle asynchronous database creation in Nano. It shows both the .then/.catch syntax and async/await syntax.\nSOURCE: https://github.com/apache/couchdb-nano/blob/main/README.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nnano.db.create('alice').then((data) => {\n  // success - response is in 'data'\n}).catch((err) => {\n  // failure - error information is in 'err'\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntry {\n  const response = await nano.db.create('alice')\n  // succeeded\n  console.log(response)\n} catch (e) {\n  // failed\n  console.error(e)\n}\n```\n\n----------------------------------------\n\nTITLE: Using Nano with TypeScript and Custom Classes\nDESCRIPTION: Demonstrates how to use nano with TypeScript, including type definitions and custom classes. This example shows how to create a Person class that interacts with the CouchDB database.\nSOURCE: https://github.com/apache/couchdb-nano/blob/main/README.md#2025-04-21_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as Nano  from 'nano'\n\nlet n = Nano('http://USERNAME:PASSWORD@localhost:5984')\nlet db = n.db.use('people')\n\ninterface iPerson extends Nano.MaybeDocument {\n  name: string,\n  dob: string\n}\n\nclass Person implements iPerson {\n  _id: string\n  _rev: string\n  name: string\n  dob: string\n\n  constructor(name: string, dob: string) {\n    this._id = undefined\n    this._rev = undefined\n    this.name = name\n    this.dob = dob\n  }\n\n  processAPIResponse(response: Nano.DocumentInsertResponse) {\n    if (response.ok === true) {\n      this._id = response.id\n      this._rev = response.rev\n    }\n  }\n}\n\nlet p = new Person('Bob', '2015-02-04')\ndb.insert(p).then((response) => {\n  p.processAPIResponse(response)\n  console.log(p)\n})\n```\n\n----------------------------------------\n\nTITLE: Listening to CouchDB Changes Feed with changesReader\nDESCRIPTION: Sets up a continuous listener for database changes using the changesReader API. This example listens for individual changes, batches, sequence tokens, and errors.\nSOURCE: https://github.com/apache/couchdb-nano/blob/main/README.md#2025-04-21_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\nconst db = nano.db.use('mydb')\ndb.changesReader.start()\n  .on('change', (change) => { console.log(change) })\n  .on('batch', (b) => {\n    console.log('a batch of', b.length, 'changes has arrived');\n  }).on('seq', (s) => {\n    console.log('sequence token', s);\n  }).on('error', (e) => {\n    console.error('error', e);\n  })\n```\n\n----------------------------------------\n\nTITLE: Bulk Fetching Documents by ID from CouchDB\nDESCRIPTION: Fetches multiple documents in a single request by specifying an array of document IDs. This is more efficient than making separate requests for each document.\nSOURCE: https://github.com/apache/couchdb-nano/blob/main/README.md#2025-04-21_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\nconst keys = ['tiger', 'zebra', 'donkey'];\nconst datat = await alice.fetch({keys: keys})\n```\n\n----------------------------------------\n\nTITLE: Updating an Existing Document\nDESCRIPTION: Shows how to update an existing document by including its revision token. The _rev field is required to update an existing document.\nSOURCE: https://github.com/apache/couchdb-nano/blob/main/README.md#2025-04-21_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nconst alice = nano.use('alice')\nconst response = await alice.insert({ _id: 'myid', _rev: '1-23202479633c2b380f79507a776743d5', happy: false })\n```\n\n----------------------------------------\n\nTITLE: Retrieving Documents from CouchDB with Nano\nDESCRIPTION: Gets a document from CouchDB by its ID. This example shows basic document retrieval for a document with ID 'rabbit'.\nSOURCE: https://github.com/apache/couchdb-nano/blob/main/README.md#2025-04-21_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nconst doc = await alice.get('rabbit')\n```\n\n----------------------------------------\n\nTITLE: Advanced Configuration with Custom Options\nDESCRIPTION: Shows how to configure nano with additional options like proxy settings and custom headers. This approach provides more control over the HTTP requests made to CouchDB.\nSOURCE: https://github.com/apache/couchdb-nano/blob/main/README.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// nano parses the URL and knows this is a database\nconst opts = {\n  url: 'http://localhost:5984/foo',\n  requestDefaults: {\n    proxy: {\n      protocol: 'http',\n      host: 'myproxy.net'\n    },\n    headers: {\n      customheader: 'MyCustomHeader'\n    }\n  }\n};\nconst db = require('nano')(opts);\n```\n\n----------------------------------------\n\nTITLE: Querying CouchDB with Mango Queries in Nano\nDESCRIPTION: Demonstrates how to use the find method to perform Mango queries in CouchDB. The example shows how to create a selector to filter documents by specific field values and limit the returned fields.\nSOURCE: https://github.com/apache/couchdb-nano/blob/main/README.md#2025-04-21_snippet_72\n\nLANGUAGE: javascript\nCODE:\n```\n// find documents where the name = \"Brian\" and age > 25.\nconst q = {\n  selector: {\n    name: { \"$eq\": \"Brian\"},\n    age : { \"$gt\": 25 }\n  },\n  fields: [ \"name\", \"age\", \"tags\", \"url\" ],\n  limit:50\n};\nconst response = await alice.find(q)\n```\n\n----------------------------------------\n\nTITLE: HTTPS Configuration with Custom Certificate\nDESCRIPTION: Shows how to configure nano to work with HTTPS connections using custom or self-signed certificates. This is important for secure production deployments with custom SSL certificates.\nSOURCE: https://github.com/apache/couchdb-nano/blob/main/README.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst httpsAgent = new https.Agent({\n  ca: '/path/to/cert',\n  rejectUnauthorized: true,\n  keepAlive: true,\n  maxSockets: 6\n})\nconst nano = Nano({\n  url: process.env.COUCH_URL,\n  requestDefaults: {\n    agent: httpsAgent,\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Listing All Documents in CouchDB\nDESCRIPTION: Retrieves a list of all documents in a database. This example retrieves all documents and logs each document to the console.\nSOURCE: https://github.com/apache/couchdb-nano/blob/main/README.md#2025-04-21_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\nconst doclist = await alice.list().then((body)=>{\n    body.rows.forEach((doc) => {\n        console.log(doc);\n    })\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Pool Size for Performance\nDESCRIPTION: Shows how to configure the HTTP agent with custom pool size for high-traffic applications. This is important for performance tuning in production environments.\nSOURCE: https://github.com/apache/couchdb-nano/blob/main/README.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst http = require('http')\nconst myagent = new http.Agent({\n  keepAlive: true,\n  maxSockets: 25\n})\n\nconst db = require('nano')({\n  url: 'http://localhost:5984/foo',\n  requestDefaults : {\n    agent : myagent\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Performing Bulk Operations in CouchDB with Nano\nDESCRIPTION: Executes bulk operations (insert/update/delete) on multiple documents at once. This example creates two documents: one without an ID and one with the ID 'tiger'.\nSOURCE: https://github.com/apache/couchdb-nano/blob/main/README.md#2025-04-21_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\nconst documents = [\n  { a:1, b:2 },\n  { _id: 'tiger', striped: true}\n];\nconst response = await alice.bulk({ docs: documents })\n```\n\n----------------------------------------\n\nTITLE: Streaming Documents from CouchDB\nDESCRIPTION: Lists all documents in the database as a stream, enabling efficient processing of large document sets. This example pipes the document stream to standard output.\nSOURCE: https://github.com/apache/couchdb-nano/blob/main/README.md#2025-04-21_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\nalice.listAsStream()\n  .on('error', (e) => console.error('error', e))\n  .pipe(process.stdout)\n```\n\n----------------------------------------\n\nTITLE: Using Mango Queries with Streams in Nano\nDESCRIPTION: Shows how to use the findAsStream method to perform Mango queries and process the results as a stream. Includes error handling and piping the output to stdout.\nSOURCE: https://github.com/apache/couchdb-nano/blob/main/README.md#2025-04-21_snippet_73\n\nLANGUAGE: javascript\nCODE:\n```\n// find documents where the name = \"Brian\" and age > 25.\nconst q = {\n  selector: {\n    name: { \"$eq\": \"Brian\"},\n    age : { \"$gt\": 25 }\n  },\n  fields: [ \"name\", \"age\", \"tags\", \"url\" ],\n  limit:50\n};\nalice.findAsStream(q)\n  .on('error', (e) => console.error('error', e))\n  .pipe(process.stdout);\n```\n\n----------------------------------------\n\nTITLE: Querying a View using Nano in JavaScript\nDESCRIPTION: Queries a view from a design document with optional parameters. Demonstrates filtering by keys and including document bodies.\nSOURCE: https://github.com/apache/couchdb-nano/blob/main/README.md#2025-04-21_snippet_64\n\nLANGUAGE: javascript\nCODE:\n```\nconst body = await alice.view('characters', 'happy_ones', { key: 'Tea Party', include_docs: true })\nbody.rows.forEach((doc) => {\n  console.log(doc.value)\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a New CouchDB Database with Nano in JavaScript\nDESCRIPTION: Demonstrates how to create a new database named 'alice' using the Nano library. This is an asynchronous operation.\nSOURCE: https://github.com/apache/couchdb-nano/blob/main/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nnano.db.create('alice');\n```\n\n----------------------------------------\n\nTITLE: Creating an Index in CouchDB with Nano\nDESCRIPTION: Creates an index on database fields to improve query performance. This example creates an index named 'fooindex' on the 'foo' field.\nSOURCE: https://github.com/apache/couchdb-nano/blob/main/README.md#2025-04-21_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\nconst indexDef = {\n  index: { fields: ['foo'] },\n  name: 'fooindex'\n};\nconst response = await alice.createIndex(indexDef)\n```\n\n----------------------------------------\n\nTITLE: Using an Existing CouchDB Database with Nano in JavaScript\nDESCRIPTION: Shows how to connect to an existing database named 'alice' using the Nano library. This creates a database-specific client.\nSOURCE: https://github.com/apache/couchdb-nano/blob/main/README.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst alice = nano.db.use('alice');\n```\n\n----------------------------------------\n\nTITLE: Creating a CouchDB Database with Options\nDESCRIPTION: Shows how to create a new CouchDB database with optional parameters. The example creates a database named 'alice' with 3 replicas.\nSOURCE: https://github.com/apache/couchdb-nano/blob/main/README.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nawait nano.db.create('alice', { n: 3 })\n```\n\n----------------------------------------\n\nTITLE: Accessing and Using a Specific Database\nDESCRIPTION: Shows how to get a database object and insert a document into it. Creates a reference to the 'alice' database and inserts a document with ID 'rabbit'.\nSOURCE: https://github.com/apache/couchdb-nano/blob/main/README.md#2025-04-21_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nconst alice = nano.use('alice');\nawait alice.insert({ happy: true }, 'rabbit')\n```\n\n----------------------------------------\n\nTITLE: Setting Up Database Replication with Options\nDESCRIPTION: Shows how to replicate a database to another CouchDB server with options. This example replicates 'alice' to a remote server and creates the target if it doesn't exist.\nSOURCE: https://github.com/apache/couchdb-nano/blob/main/README.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nconst response = await nano.db.replicate('alice',\n                  'http://admin:password@otherhost.com:5984/alice',\n                  { create_target:true })\n```\n\n----------------------------------------\n\nTITLE: Inserting a Document with an ID Parameter\nDESCRIPTION: Shows how to insert a document into a database with a specified ID. This creates a document with ID 'rabbit' in the 'alice' database.\nSOURCE: https://github.com/apache/couchdb-nano/blob/main/README.md#2025-04-21_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nconst alice = nano.use('alice');\nconst response = await alice.insert({ happy: true }, 'rabbit')\n```\n\n----------------------------------------\n\nTITLE: Streaming Database Changes\nDESCRIPTION: Shows how to stream the changes feed from a database. This pipes the changes stream directly to standard output.\nSOURCE: https://github.com/apache/couchdb-nano/blob/main/README.md#2025-04-21_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nnano.db.changes('alice').pipe(process.stdout);\n```\n\n----------------------------------------\n\nTITLE: Using Callbacks with Nano for CouchDB Operations in JavaScript\nDESCRIPTION: Shows how to use callbacks to handle asynchronous operations in Nano. The callback function receives error, body, and header parameters.\nSOURCE: https://github.com/apache/couchdb-nano/blob/main/README.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nnano.db.create('alice', (err, data) => {\n  // errors are in 'err' & response is in 'data'\n})\n```\n\n----------------------------------------\n\nTITLE: Listing Documents with Parameters in CouchDB\nDESCRIPTION: Retrieves a list of documents with optional query parameters. This example includes the full document content for each document in the result set.\nSOURCE: https://github.com/apache/couchdb-nano/blob/main/README.md#2025-04-21_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\nconst doclist = await alice.list({include_docs: true})\n```\n\n----------------------------------------\n\nTITLE: Retrieving Database Changes\nDESCRIPTION: Shows how to get the changes feed from a database. This returns a list of document changes in the 'alice' database.\nSOURCE: https://github.com/apache/couchdb-nano/blob/main/README.md#2025-04-21_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nconst c = await nano.db.changes('alice')\n```\n\n----------------------------------------\n\nTITLE: Performing CouchDB Search Queries with Nano\nDESCRIPTION: Demonstrates how to use the search method to query a CouchDB search index. It includes examples of simple search queries and more complex ones with drilldown parameters.\nSOURCE: https://github.com/apache/couchdb-nano/blob/main/README.md#2025-04-21_snippet_70\n\nLANGUAGE: javascript\nCODE:\n```\nconst response = await alice.search('characters', 'happy_ones', { q: 'cat' })\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst drilldown = [['author', 'Dickens']['publisher','Penguin']]\nconst response = await alice.search('inventory', 'books', { q: '*:*', drilldown: drilldown })\n```\n\n----------------------------------------\n\nTITLE: Retrieving Database Information\nDESCRIPTION: Shows how to get information about a specific CouchDB database. This returns metadata about the 'alice' database like document count and size.\nSOURCE: https://github.com/apache/couchdb-nano/blob/main/README.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst info = await nano.db.get('alice')\n```\n\n----------------------------------------\n\nTITLE: Creating a Partitioned MapReduce View with Nano in JavaScript\nDESCRIPTION: Creates a partitioned MapReduce view by inserting a design document with the 'partitioned' option set to true.\nSOURCE: https://github.com/apache/couchdb-nano/blob/main/README.md#2025-04-21_snippet_48\n\nLANGUAGE: javascript\nCODE:\n```\nconst func = function(doc) {\n  emit(doc.family, doc.weight)\n}\n\n// Design Document\nconst ddoc = {\n  _id: '_design/view-ddoc',\n  views: {\n    'family-weight': {\n      map: func.toString(),\n      reduce: '_sum'\n    }\n  },\n  options: {\n    partitioned: true\n  }\n}\n\n// create design document\nawait db.insert(ddoc)\n```\n\n----------------------------------------\n\nTITLE: Implementing Cookie Authentication in CouchDB with Nano\nDESCRIPTION: Shows how to configure the Nano client to use CouchDB's cookie authentication. This allows you to authenticate once and make subsequent authenticated requests without re-authenticating.\nSOURCE: https://github.com/apache/couchdb-nano/blob/main/README.md#2025-04-21_snippet_74\n\nLANGUAGE: javascript\nCODE:\n```\nconst nano = require('nano')({\n  url: 'http://localhost:5984',\n  requestDefaults: {\n    jar: true\n  }\n})\nconst username = 'user'\nconst userpass = 'pass'\nconst db = nano.db.use('mydb')\n\n// authenticate\nawait nano.auth(username, userpass)\n\n// requests from now on are authenticated\nconst doc = await db.get('mydoc')\nconsole.log(doc)\n```\n\n----------------------------------------\n\nTITLE: Creating a Partitioned Database with Nano in JavaScript\nDESCRIPTION: Creates a new partitioned database using the Nano library. The 'partitioned' option is set to true to enable partitioning.\nSOURCE: https://github.com/apache/couchdb-nano/blob/main/README.md#2025-04-21_snippet_42\n\nLANGUAGE: javascript\nCODE:\n```\nawait nano.db.create('my-partitioned-db', { partitioned: true })\n```\n\n----------------------------------------\n\nTITLE: Working with Attachments as Streams in Nano\nDESCRIPTION: Shows how to retrieve a document attachment as a stream and pipe it to a file. This approach is more memory-efficient when dealing with large attachments.\nSOURCE: https://github.com/apache/couchdb-nano/blob/main/README.md#2025-04-21_snippet_78\n\nLANGUAGE: javascript\nCODE:\n```\nconst fs = require('fs');\nconst nano = require('nano')('http://127.0.0.1:5984/');\nconst alice = nano.use('alice');\nalice.attachment.getAsStream('rabbit', 'picture.png')\n  .on('error', (e) => console.error('error', e))\n  .pipe(fs.createWriteStream('/tmp/rabbit.png'));\n```\n\n----------------------------------------\n\nTITLE: Inserting a Document with Attachments using Nano in JavaScript\nDESCRIPTION: Inserts a document with attachments using the multipart.insert method. Attachments are specified as an array of objects with name, data, and content_type properties.\nSOURCE: https://github.com/apache/couchdb-nano/blob/main/README.md#2025-04-21_snippet_58\n\nLANGUAGE: javascript\nCODE:\n```\nconst fs = require('fs');\n\nfs.readFile('rabbit.png', (err, data) => {\n  if (!err) {\n    await alice.multipart.insert({ foo: 'bar' }, [{name: 'rabbit.png', data: data, content_type: 'image/png'}], 'mydoc')\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Inserting an Attachment using Nano in JavaScript\nDESCRIPTION: Inserts an attachment to a document using the attachment.insert method. Requires the document name, attachment name, attachment data, content type, and document revision.\nSOURCE: https://github.com/apache/couchdb-nano/blob/main/README.md#2025-04-21_snippet_60\n\nLANGUAGE: javascript\nCODE:\n```\nconst fs = require('fs');\n\nfs.readFile('rabbit.png', (err, data) => {\n  if (!err) {\n    await alice.attachment.insert('rabbit', \n      'rabbit.png', \n      data, \n      'image/png',\n      { rev: '12-150985a725ec88be471921a54ce91452' })\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Destroying Documents in CouchDB with Nano\nDESCRIPTION: Removes a document from CouchDB by specifying the document ID and revision. This example shows how to delete a document with ID 'rabbit' and revision '3-66c01cdf99e84c83a9b3fe65b88db8c0'.\nSOURCE: https://github.com/apache/couchdb-nano/blob/main/README.md#2025-04-21_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nconst response = await alice.destroy('rabbit', '3-66c01cdf99e84c83a9b3fe65b88db8c0')\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Document with Attachments using Nano in JavaScript\nDESCRIPTION: Retrieves a document with its attachments using the multipart.get method. The response is returned as a Buffer.\nSOURCE: https://github.com/apache/couchdb-nano/blob/main/README.md#2025-04-21_snippet_59\n\nLANGUAGE: javascript\nCODE:\n```\nconst response = await alice.multipart.get('rabbit')\n```\n\n----------------------------------------\n\nTITLE: Checking User Session in CouchDB with Nano\nDESCRIPTION: Demonstrates how to retrieve the current user's session information including roles and permissions using the session method.\nSOURCE: https://github.com/apache/couchdb-nano/blob/main/README.md#2025-04-21_snippet_75\n\nLANGUAGE: javascript\nCODE:\n```\nconst doc = await nano.session()\n// { userCtx: { roles: [ '_admin', '_reader', '_writer' ], name: 'rita' },  ok: true }\n```\n\n----------------------------------------\n\nTITLE: Retrieving Documents with Parameters from CouchDB\nDESCRIPTION: Gets a document from CouchDB with additional query parameters. This example retrieves a document with ID 'rabbit' and includes revision information by setting the revs_info parameter to true.\nSOURCE: https://github.com/apache/couchdb-nano/blob/main/README.md#2025-04-21_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\nconst doc = await alice.get('rabbit', { revs_info: true })\n```\n\n----------------------------------------\n\nTITLE: Getting CouchDB Server Information\nDESCRIPTION: Shows how to retrieve information about the CouchDB database instance. Returns database metadata.\nSOURCE: https://github.com/apache/couchdb-nano/blob/main/README.md#2025-04-21_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nconst info = await nano.db.info()\n```\n\n----------------------------------------\n\nTITLE: Extending Nano with Custom Requests\nDESCRIPTION: Demonstrates how to extend the Nano client with custom functionality using the request method. The example creates a function to retrieve a specific revision of a document.\nSOURCE: https://github.com/apache/couchdb-nano/blob/main/README.md#2025-04-21_snippet_77\n\nLANGUAGE: javascript\nCODE:\n```\nfunction getrabbitrev(rev) {\n  return nano.request({ db: 'alice',\n                 doc: 'rabbit',\n                 method: 'get',\n                 params: { rev: rev }\n               });\n}\n\ngetrabbitrev('4-2e6cdc4c7e26b745c2881a24e0eeece2').then((body) => {\n  console.log(body);\n});\n```\n\n----------------------------------------\n\nTITLE: Listing All CouchDB Databases\nDESCRIPTION: Shows how to retrieve a list of all databases in the CouchDB instance. Returns an array of database names.\nSOURCE: https://github.com/apache/couchdb-nano/blob/main/README.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst dblist = await nano.db.list()\n```\n\n----------------------------------------\n\nTITLE: Using CouchDB Search as Stream with Nano\nDESCRIPTION: Shows how to use the searchAsStream method to query a CouchDB search index and process the results as a stream, which can be piped to other Node.js streams.\nSOURCE: https://github.com/apache/couchdb-nano/blob/main/README.md#2025-04-21_snippet_71\n\nLANGUAGE: javascript\nCODE:\n```\nalice.search('characters', 'happy_ones', { q: 'cat' }).pipe(process.stdout);\n```\n\n----------------------------------------\n\nTITLE: Enabling Persistent Replication Between Databases\nDESCRIPTION: Shows how to set up persistent replication that survives server restarts. Uses the newer CouchDB replication API.\nSOURCE: https://github.com/apache/couchdb-nano/blob/main/README.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nconst response = await nano.db.replication.enable('alice',\n                  'http://admin:password@otherhost.com:5984/alice',\n                  { create_target:true })\n```\n\n----------------------------------------\n\nTITLE: Calling Atomic Updates in CouchDB with Nano\nDESCRIPTION: Uses the atomic method to update a document through a design document's update function. This function allows for server-side document modifications based on the request body data.\nSOURCE: https://github.com/apache/couchdb-nano/blob/main/README.md#2025-04-21_snippet_69\n\nLANGUAGE: javascript\nCODE:\n```\nconst response = await db.atomic('update', 'inplace', 'foobar', {field: 'foo', value: 'bar'})\n```\n\nLANGUAGE: javascript\nCODE:\n```\n\"updates\": {\n  \"in-place\" : \"function(doc, req) {\n      var request_body = JSON.parse(req.body)\n      var field = request_body.field\n      var value = request_body.value\n      var message = 'set ' + field + ' to ' + value\n      doc[field] = value\n      return [doc, message]\n  }\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using Controlled Changes Feed Processing with wait Option\nDESCRIPTION: Configures the changes feed to wait for manual resumption between batches. This enables processing each batch completely before fetching the next batch of changes.\nSOURCE: https://github.com/apache/couchdb-nano/blob/main/README.md#2025-04-21_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\ndb.changesReader.get({wait: true})\n  .on('batch', (b) => {\n    console.log('a batch of', b.length, 'changes has arrived');\n    // do some asynchronous work here and call \"changesReader.resume()\"\n    // when you're ready for the next API call to be dispatched.\n    // In this case, wait 5s before the next changes feed request.\n    setTimeout( () => {\n      db.changesReader.resume()\n    }, 5000)\n  }).on('end', () => {\n    console.log('changes feed monitoring has stopped');\n  });\n```\n\n----------------------------------------\n\nTITLE: Using a Partitioned Database with Nano in JavaScript\nDESCRIPTION: Demonstrates how to use a partitioned database by selecting it with the Nano library.\nSOURCE: https://github.com/apache/couchdb-nano/blob/main/README.md#2025-04-21_snippet_43\n\nLANGUAGE: javascript\nCODE:\n```\nconst db = nano.db.use('my-partitioned-db')\n```\n\n----------------------------------------\n\nTITLE: Querying Documents from a Partition with Nano in JavaScript\nDESCRIPTION: Queries documents from a specific partition using a Mango selector.\nSOURCE: https://github.com/apache/couchdb-nano/blob/main/README.md#2025-04-21_snippet_52\n\nLANGUAGE: javascript\nCODE:\n```\n// find document whose name is 'wolf' in the 'canidae' partition\nawait db.partitionedFind('canidae', { 'selector' : { 'name': 'Wolf' }})\n```\n\n----------------------------------------\n\nTITLE: Inserting a Document into a Partitioned Database with Nano in JavaScript\nDESCRIPTION: Inserts a document into a partitioned database. The document ID must be in the format '<partition key>:<document id>'.\nSOURCE: https://github.com/apache/couchdb-nano/blob/main/README.md#2025-04-21_snippet_44\n\nLANGUAGE: javascript\nCODE:\n```\nconst doc = { _id: 'canidae:dog', name: 'Dog', latin: 'Canis lupus familiaris' }\nawait db.insert(doc)\n```\n\n----------------------------------------\n\nTITLE: Streaming View Results using Nano in JavaScript\nDESCRIPTION: Queries a view and returns the results as a stream using the viewAsStream method.\nSOURCE: https://github.com/apache/couchdb-nano/blob/main/README.md#2025-04-21_snippet_65\n\nLANGUAGE: javascript\nCODE:\n```\nalice.viewAsStream('characters', 'happy_ones', {reduce: false})\n  .on('error', (e) => console.error('error', e))\n  .pipe(process.stdout);\n```\n\n----------------------------------------\n\nTITLE: Deleting a CouchDB Database\nDESCRIPTION: Shows how to delete a CouchDB database. This will permanently remove the 'alice' database and all its documents.\nSOURCE: https://github.com/apache/couchdb-nano/blob/main/README.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nawait nano.db.destroy('alice')\n```\n\n----------------------------------------\n\nTITLE: Direct Database Initialization with Nano\nDESCRIPTION: Demonstrates how to initialize nano directly with a database URL. This method is simpler when you don't need separate server and database objects.\nSOURCE: https://github.com/apache/couchdb-nano/blob/main/README.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// nano parses the URL and knows this is a database\nconst db = require('nano')('http://localhost:5984/foo');\n```\n\n----------------------------------------\n\nTITLE: Streaming View Results with a List Function using Nano in JavaScript\nDESCRIPTION: Calls a list function fed by a view and returns the results as a stream using the viewWithListAsStream method.\nSOURCE: https://github.com/apache/couchdb-nano/blob/main/README.md#2025-04-21_snippet_67\n\nLANGUAGE: javascript\nCODE:\n```\nalice.viewWithListAsStream('characters', 'happy_ones', 'my_list')\n  .on('error', (e) => console.error('error', e))\n  .pipe(process.stdout);\n```\n\n----------------------------------------\n\nTITLE: Inserting a Document with ID in the Document\nDESCRIPTION: Shows how to insert a document that already contains its ID. The _id field is included directly in the document object.\nSOURCE: https://github.com/apache/couchdb-nano/blob/main/README.md#2025-04-21_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nconst alice = nano.use('alice')\nconst response = await alice.insert({ _id: 'myid', happy: true })\n```\n\n----------------------------------------\n\nTITLE: Querying a View with a List Function using Nano in JavaScript\nDESCRIPTION: Calls a list function fed by a view from a design document using the viewWithList method.\nSOURCE: https://github.com/apache/couchdb-nano/blob/main/README.md#2025-04-21_snippet_66\n\nLANGUAGE: javascript\nCODE:\n```\nconst body = await alice.viewWithList('characters', 'happy_ones', 'my_list')\n```\n\n----------------------------------------\n\nTITLE: Retrieving an Attachment using Nano in JavaScript\nDESCRIPTION: Retrieves an attachment from a document using the attachment.get method.\nSOURCE: https://github.com/apache/couchdb-nano/blob/main/README.md#2025-04-21_snippet_61\n\nLANGUAGE: javascript\nCODE:\n```\nconst fs = require('fs');\n\nconst body = await alice.attachment.get('rabbit', 'rabbit.png')\nfs.writeFile('rabbit.png', body)\n```\n\n----------------------------------------\n\nTITLE: Calling a Show Function using Nano in JavaScript\nDESCRIPTION: Calls a show function from a design document for a specific document using the show method.\nSOURCE: https://github.com/apache/couchdb-nano/blob/main/README.md#2025-04-21_snippet_68\n\nLANGUAGE: javascript\nCODE:\n```\nconst doc = await alice.show('characters', 'format_doc', '3621898430')\n```\n\n----------------------------------------\n\nTITLE: Streaming an Attachment using Nano in JavaScript\nDESCRIPTION: Retrieves an attachment as a stream using the attachment.getAsStream method.\nSOURCE: https://github.com/apache/couchdb-nano/blob/main/README.md#2025-04-21_snippet_62\n\nLANGUAGE: javascript\nCODE:\n```\nconst fs = require('fs');\nalice.attachment.getAsStream('rabbit', 'rabbit.png')\n  .on('error', e => console.error)\n  .pipe(fs.createWriteStream('rabbit.png'));\n```\n\n----------------------------------------\n\nTITLE: Fetching Partition Statistics with Nano in JavaScript\nDESCRIPTION: Retrieves statistics for a specific partition using the partitionInfo method.\nSOURCE: https://github.com/apache/couchdb-nano/blob/main/README.md#2025-04-21_snippet_49\n\nLANGUAGE: javascript\nCODE:\n```\nconst stats = await alice.partitionInfo('canidae')\n```\n\n----------------------------------------\n\nTITLE: Deleting an Attachment using Nano in JavaScript\nDESCRIPTION: Deletes an attachment from a document using the attachment.destroy method. Requires the document revision.\nSOURCE: https://github.com/apache/couchdb-nano/blob/main/README.md#2025-04-21_snippet_63\n\nLANGUAGE: javascript\nCODE:\n```\nconst response = await alice.attachment.destroy('rabbit', 'rabbit.png', {rev: '1-4701d73a08ce5c2f2983bf7c9ffd3320'})\n```\n\n----------------------------------------\n\nTITLE: Streaming Documents from a Partition with Nano in JavaScript\nDESCRIPTION: Retrieves documents from a partition as a stream, with options to include document bodies and limit the response size.\nSOURCE: https://github.com/apache/couchdb-nano/blob/main/README.md#2025-04-21_snippet_51\n\nLANGUAGE: javascript\nCODE:\n```\n// fetch document id/revs from a partition\nnano.db.partitionedListAsStream('canidae')\n  .on('error', (e) => console.error('error', e))\n  .pipe(process.stdout)\n\n// add document bodies but limit size of response\nnano.db.partitionedListAsStream('canidae', { include_docs: true, limit: 5 })\n  .on('error', (e) => console.error('error', e))\n  .pipe(process.stdout)\n```\n\n----------------------------------------\n\nTITLE: Getting Document Headers with Nano\nDESCRIPTION: Retrieves only the headers of a document without the full document body. This is a lightweight alternative to the get method for when only metadata is needed.\nSOURCE: https://github.com/apache/couchdb-nano/blob/main/README.md#2025-04-21_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\nconst headers = await alice.head('rabbit')\n```\n\n----------------------------------------\n\nTITLE: Streaming Query Results from a Partition with Nano in JavaScript\nDESCRIPTION: Queries documents from a specific partition using a Mango selector and returns the results as a stream.\nSOURCE: https://github.com/apache/couchdb-nano/blob/main/README.md#2025-04-21_snippet_53\n\nLANGUAGE: javascript\nCODE:\n```\n// find document whose name is 'wolf' in the 'canidae' partition\ndb.partitionedFindAsStream('canidae', { 'selector' : { 'name': 'Wolf' }})\n  .on('error', (e) => console.error('error', e))\n  .pipe(process.stdout)\n```\n\n----------------------------------------\n\nTITLE: Streaming List of CouchDB Databases\nDESCRIPTION: Shows how to get a list of databases as a stream, which is useful for handling large numbers of databases efficiently.\nSOURCE: https://github.com/apache/couchdb-nano/blob/main/README.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nnano.db.listAsStream()\n  .on('error', (e) => console.error('error', e))\n  .pipe(process.stdout);\n```\n\n----------------------------------------\n\nTITLE: Streaming Search Results from a Partition with Nano in JavaScript\nDESCRIPTION: Searches documents in a specific partition using a Lucene query and returns the results as a stream.\nSOURCE: https://github.com/apache/couchdb-nano/blob/main/README.md#2025-04-21_snippet_55\n\nLANGUAGE: javascript\nCODE:\n```\nconst params = {\n  q: 'name:\\'Wolf\\''\n}\ndb.partitionedSearchAsStream('canidae', 'search-ddoc', 'search-index', params)\n  .on('error', (e) => console.error('error', e))\n  .pipe(process.stdout)\n// { total_rows: ... , bookmark: ..., rows: [ ...] }\n```\n\n----------------------------------------\n\nTITLE: Creating a Partitioned Mango Index with Nano in JavaScript\nDESCRIPTION: Creates a partitioned Mango index in CouchDB using the Nano library. The 'partitioned' option is set to true.\nSOURCE: https://github.com/apache/couchdb-nano/blob/main/README.md#2025-04-21_snippet_46\n\nLANGUAGE: javascript\nCODE:\n```\nconst i = {\n  ddoc: 'partitioned-query',\n  index: { fields: ['name'] },\n  name: 'name-index',\n  partitioned: true,\n  type: 'json'\n}\n\n// instruct CouchDB to create the index\nawait db.index(i)\n```\n\n----------------------------------------\n\nTITLE: Streaming MapReduce View Results from a Partition with Nano in JavaScript\nDESCRIPTION: Retrieves documents from a MapReduce view in a specific partition and returns the results as a stream.\nSOURCE: https://github.com/apache/couchdb-nano/blob/main/README.md#2025-04-21_snippet_57\n\nLANGUAGE: javascript\nCODE:\n```\nconst params = {\n  startkey: 'a',\n  endkey: 'b',\n  limit: 1\n}\ndb.partitionedViewAsStream('canidae', 'view-ddoc', 'view-name', params)\n  .on('error', (e) => console.error('error', e))\n  .pipe(process.stdout)\n// { rows: [ { key: ... , value: [Object] } ] }\n```\n\n----------------------------------------\n\nTITLE: Listing Documents from a Partition with Nano in JavaScript\nDESCRIPTION: Retrieves documents from a specific partition, with options to include document bodies and limit the response size.\nSOURCE: https://github.com/apache/couchdb-nano/blob/main/README.md#2025-04-21_snippet_50\n\nLANGUAGE: javascript\nCODE:\n```\n// fetch document id/revs from a partition\nconst docs = await alice.partitionedList('canidae')\n\n// add document bodies but limit size of response\nconst docs = await alice.partitionedList('canidae', { include_docs: true, limit: 5 })\n```\n\n----------------------------------------\n\nTITLE: Creating a Partitioned Search Index with Nano in JavaScript\nDESCRIPTION: Creates a partitioned search index by inserting a design document with the 'partitioned' option set to true.\nSOURCE: https://github.com/apache/couchdb-nano/blob/main/README.md#2025-04-21_snippet_47\n\nLANGUAGE: javascript\nCODE:\n```\n// the search definition\nconst func = function(doc) {\n  index('name', doc.name)\n  index('latin', doc.latin)\n}\n\n// the design document containing the search definition function\nconst ddoc = {\n  _id: '_design/search-ddoc',\n  indexes: {\n    'search-index': {\n      index: func.toString()\n    }\n  },\n  options: {\n    partitioned: true\n  }\n}\n \nawait db.insert(ddoc)\n```\n\n----------------------------------------\n\nTITLE: Searching Documents in a Partition with Nano in JavaScript\nDESCRIPTION: Searches documents in a specific partition using a Lucene query.\nSOURCE: https://github.com/apache/couchdb-nano/blob/main/README.md#2025-04-21_snippet_54\n\nLANGUAGE: javascript\nCODE:\n```\nconst params = {\n  q: 'name:\\'Wolf\\''\n}\nawait db.partitionedSearch('canidae', 'search-ddoc', 'search-index', params)\n// { total_rows: ... , bookmark: ..., rows: [ ...] }\n```\n\n----------------------------------------\n\nTITLE: Querying a MapReduce View in a Partition with Nano in JavaScript\nDESCRIPTION: Retrieves documents from a MapReduce view in a specific partition with query parameters.\nSOURCE: https://github.com/apache/couchdb-nano/blob/main/README.md#2025-04-21_snippet_56\n\nLANGUAGE: javascript\nCODE:\n```\nconst params = {\n  startkey: 'a',\n  endkey: 'b',\n  limit: 1\n}\nawait db.partitionedView('canidae', 'view-ddoc', 'view-name', params)\n// { rows: [ { key: ... , value: [Object] } ] }\n```\n\n----------------------------------------\n\nTITLE: Configuring Logging in Nano\nDESCRIPTION: Demonstrates how to configure request and response logging in the Nano client. Shows both simple logging using console.log and a custom logging function for more control over output.\nSOURCE: https://github.com/apache/couchdb-nano/blob/main/README.md#2025-04-21_snippet_79\n\nLANGUAGE: javascript\nCODE:\n```\nconst nano = Nano({ url: process.env.COUCH_URL, log: console.log })\n// all requests and responses will be sent to console.log\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst url = require('url')\nconst logger = (data) => {\n  // only output logging if there is an environment variable set\n  if (process.env.LOG === 'nano') {\n    // if this is a request\n    if (typeof data.err === 'undefined') {\n      const u = new url.URL(data.uri)\n      console.log(data.method, u.pathname, data.qs)\n    } else {\n      // this is a response\n      const prefix = data.err ? 'ERR' : 'OK'\n      console.log(prefix, data.headers.statusCode, JSON.stringify(data.body).length)\n    }\n  }\n}\nconst nano = Nano({ url: process.env.COUCH_URL, log: logger })\n// all requests and responses will be formatted by my code\n// GET /cities/_all_docs { limit: 5 }\n// OK 200 468\n```\n\n----------------------------------------\n\nTITLE: Generating UUIDs from CouchDB with Nano\nDESCRIPTION: Shows how to request unique identifiers from CouchDB using the uuids method. This is useful when you need to generate document IDs before creating the documents.\nSOURCE: https://github.com/apache/couchdb-nano/blob/main/README.md#2025-04-21_snippet_76\n\nLANGUAGE: javascript\nCODE:\n```\nconst response = await nano.uuids(3)\n// { uuids: [\n// '5d1b3ef2bc7eea51f660c091e3dffa23',\n// '5d1b3ef2bc7eea51f660c091e3e006ff',\n// '5d1b3ef2bc7eea51f660c091e3e007f0',\n//]}\n```\n\n----------------------------------------\n\nTITLE: Retrieving CouchDB Cluster Information\nDESCRIPTION: Shows how to fetch information about the CouchDB cluster. Returns version and other cluster-level information.\nSOURCE: https://github.com/apache/couchdb-nano/blob/main/README.md#2025-04-21_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nconst info = await nano.info()\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Document from a Partitioned Database with Nano in JavaScript\nDESCRIPTION: Retrieves a document from a partitioned database using its full ID (partition key + document id).\nSOURCE: https://github.com/apache/couchdb-nano/blob/main/README.md#2025-04-21_snippet_45\n\nLANGUAGE: javascript\nCODE:\n```\nconst doc = db.get('canidae:dog')\n```\n\n----------------------------------------\n\nTITLE: Querying Replication Status\nDESCRIPTION: Shows how to check the status of an ongoing replication task. Uses the replication ID returned when enabling replication.\nSOURCE: https://github.com/apache/couchdb-nano/blob/main/README.md#2025-04-21_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nconst r = await nano.db.replication.enable('alice',\n                  'http://admin:password@otherhost.com:5984/alice',\n                   { create_target:true })\nconst q = await nano.db.replication.query(r.id)\n```\n\n----------------------------------------\n\nTITLE: Disabling Database Replication\nDESCRIPTION: Shows how to stop an ongoing replication process. Uses the replication ID returned when enabling replication.\nSOURCE: https://github.com/apache/couchdb-nano/blob/main/README.md#2025-04-21_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nconst r = await nano.db.replication.enable('alice',\n                   'http://admin:password@otherhost.com:5984/alice',\n                   { create_target:true })\nawait nano.db.replication.disable(r.id);\n```\n\n----------------------------------------\n\nTITLE: Configuring Nano with Unparsed URL\nDESCRIPTION: Shows how to configure nano without parsing the URL, useful for servers behind proxies or with rewrite rules. The parseUrl option tells nano not to attempt to parse the server URL.\nSOURCE: https://github.com/apache/couchdb-nano/blob/main/README.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// nano does not parse the URL and return the server api\n// \"http://localhost:5984/prefix\" is the CouchDB server root\nconst couch = require('nano')(\n  { url : \"http://localhost:5984/prefix\"\n    parseUrl : false\n  });\nconst db = couch.use('foo');\n```\n\n----------------------------------------\n\nTITLE: Using changesReader in Nano 9.x (JavaScript)\nDESCRIPTION: This snippet demonstrates how to use the new changesReader interface in Nano 9.x. It shows how to start the changes feed, handle batches of changes, track sequence tokens, and handle errors.\nSOURCE: https://github.com/apache/couchdb-nano/blob/main/migration_8_to_9.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst db = nano.db.use('mydb')\ndb.changesReader.start({ batchSize: 50 })\n  .on('batch', (b) => {\n    console.log('a batch of', b.length, 'changes has arrived');\n  }).on('seq', (s) => {\n    console.log('sequence token', s);\n  }).on('error', (e) => {\n    console.error('error', e);\n  })\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Logging in Nano 9.x (JavaScript)\nDESCRIPTION: This snippet shows how to implement custom logging in Nano 9.x. It defines a logger function that handles both requests and responses, logging different information for each. The logger is then passed to the Nano constructor.\nSOURCE: https://github.com/apache/couchdb-nano/blob/main/migration_8_to_9.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst url = require('url')\nconst logger = (data) => {\n  // if this is a request\n  if (typeof data.err === 'undefined') {\n    const u = new url.URL(data.uri)\n    console.log(data.method, u.pathname, data.qs)\n  } else {\n    // this is a response\n    const prefix = data.err ? 'ERR' : 'OK'\n    console.log(prefix, data.headers.statusCode, JSON.stringify(data.body).length)\n  }\n}\nconst nano = Nano({ url: process.env.COUCH_URL, log: logger })\n```\n\n----------------------------------------\n\nTITLE: Running Debug Messages in Nano Scripts\nDESCRIPTION: Shows how to enable verbose debug messages while running Nano scripts using the DEBUG environment variable. This helps with troubleshooting and development by providing more detailed output during script execution.\nSOURCE: https://github.com/apache/couchdb-nano/blob/main/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nDEBUG=* node your_nano_scripts.js\n```\n\n----------------------------------------\n\nTITLE: Releasing a New Version of Nano\nDESCRIPTION: Instructions for creating and publishing a new release of the nano library using npm version management, GitHub, and npm publish commands.\nSOURCE: https://github.com/apache/couchdb-nano/blob/main/README.md#2025-04-21_snippet_80\n\nLANGUAGE: bash\nCODE:\n```\nnpm version {patch|minor|major}\ngithub push  origin main --tags\nnpm publish\n```"
  }
]