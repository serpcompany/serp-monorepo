[
  {
    "owner": "obytes",
    "repo": "react-native-template-obytes",
    "content": "TITLE: Creating a New Project with Obytes React Native Template\nDESCRIPTION: Command to initialize a new React Native application using the Obytes template. This single command sets up a complete project with all the template's features including Expo, TypeScript, tailwindcss, and other dependencies.\nSOURCE: https://github.com/obytes/react-native-template-obytes/blob/master/cli/README.md#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx create-obytes-app@latest MyApp\n```\n\n----------------------------------------\n\nTITLE: Creating a New React Native App with Obytes Template\nDESCRIPTION: Command to initialize a new React Native project named 'MyApp' using the create-obytes-app CLI tool.\nSOURCE: https://github.com/obytes/react-native-template-obytes/blob/master/docs/src/content/docs/getting-started/create-new-app.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-obytes-app@latest MyApp\n```\n\n----------------------------------------\n\nTITLE: Cloning and Installing Dependencies for React Native Project\nDESCRIPTION: Commands to clone the project repository, navigate to the project directory, and install dependencies using pnpm.\nSOURCE: https://github.com/obytes/react-native-template-obytes/blob/master/README-project.md#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/user/repo-name\n\ncd ./repo-name\n\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Running the App on iOS and Android Simulators\nDESCRIPTION: Commands to launch the React Native app on iOS or Android simulators using PNPM scripts defined in the project.\nSOURCE: https://github.com/obytes/react-native-template-obytes/blob/master/docs/src/content/docs/getting-started/create-new-app.md#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Run the app on iOS simulator\npnpm ios\n\n# Run the app on Android simulator\npnpm android\n```\n\n----------------------------------------\n\nTITLE: Running React Native App on iOS\nDESCRIPTION: Command to run the React Native app on iOS simulator or device.\nSOURCE: https://github.com/obytes/react-native-template-obytes/blob/master/README-project.md#2025-04-18_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npnpm ios\n```\n\n----------------------------------------\n\nTITLE: Running React Native App on Android\nDESCRIPTION: Command to run the React Native app on Android emulator or device.\nSOURCE: https://github.com/obytes/react-native-template-obytes/blob/master/README-project.md#2025-04-18_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npnpm android\n```\n\n----------------------------------------\n\nTITLE: Implementing a Posts Feed Screen with React Query\nDESCRIPTION: This screen component uses the usePosts hook to fetch and display a list of posts. It handles loading states, errors, and renders the post data in a FlatList component with proper UI feedback.\nSOURCE: https://github.com/obytes/react-native-template-obytes/blob/master/docs/src/content/docs/guides/data-fetching.mdx#2025-04-18_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ActivityIndicator, FlatList, Text, View } from 'react-native';\nimport { Link } from 'expo-router';\n\nimport { usePosts } from '@/api/posts/use-posts';\nimport { ErrorMessage } from '@/components/error-message';\nimport { MainScreen } from '@/components/main-screen';\n\nexport default function Home() {\n  // now we can use our hooks to fetch data\n  const { data, isLoading, error, refetch } = usePosts({\n    // add any query options if you want\n    onSuccess: (data) => {\n      console.log(data);\n    },\n  });\n\n  if (isLoading) {\n    return (\n      <MainScreen>\n        <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n          <ActivityIndicator />\n        </View>\n      </MainScreen>\n    );\n  }\n\n  if (error || !data) {\n    return (\n      <MainScreen>\n        <ErrorMessage message={error?.message ?? 'Unknown error'} onRetry={refetch} />\n      </MainScreen>\n    );\n  }\n\n  return (\n    <MainScreen>\n      <FlatList\n        data={data}\n        keyExtractor={(item) => item.id.toString()}\n        renderItem={({ item }) => (\n          <Link href={`/feed/${item.id}`} asChild>\n            <View className=\"px-4 py-2 mb-2 bg-neutral-100\">\n              <Text className=\"font-bold\">{item.title}</Text>\n              <Text>{item.body.slice(0, 100)}</Text>\n            </View>\n          </Link>\n        )}\n      />\n    </MainScreen>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Running Jest Tests in React Native Project\nDESCRIPTION: Commands to run Jest tests in standard and watch mode for the React Native project.\nSOURCE: https://github.com/obytes/react-native-template-obytes/blob/master/docs/src/content/docs/testing/unit-testing.mdx#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm  test\npnpm test:watch # To run the tests in watch mode\n```\n\n----------------------------------------\n\nTITLE: Creating a Query Hook for Fetching Posts in React Native\nDESCRIPTION: This code demonstrates how to create a custom hook using react-query-kit to fetch a list of posts. It defines the Post type, creates a query with a specific key, and implements the fetcher function that calls the API client.\nSOURCE: https://github.com/obytes/react-native-template-obytes/blob/master/docs/src/content/docs/guides/data-fetching.mdx#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createQuery } from '@tanstack/react-query-kit';\nimport { client } from '../common/client';\n\nexport type Post = {\n  id: number;\n  title: string;\n  body: string;\n  userId: number;\n};\n\ntype PostsResponse = Post[];\n\nexport const usePosts = createQuery<PostsResponse, Error>({\n  queryKey: ['posts'],\n  fetcher: async () => {\n    // we can use the client to make requests to the API with full typescript support\n    const response = await client.get<PostsResponse>('posts');\n    return response.data;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Query Hook for Fetching Single Post Detail\nDESCRIPTION: This code creates a custom hook for fetching a single post by its ID. It leverages react-query-kit to define a parameterized query that accepts a post ID variable and returns the corresponding post data.\nSOURCE: https://github.com/obytes/react-native-template-obytes/blob/master/docs/src/content/docs/guides/data-fetching.mdx#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createQuery } from '@tanstack/react-query-kit';\nimport { client } from '../common/client';\nimport { Post } from './use-posts';\n\ntype PostParams = {\n  id: number;\n};\n\ntype PostResponse = Post;\n\nexport const usePost = createQuery<PostResponse, Error, PostParams>({\n  // When we have variables, we can use an array with the base query key and the variables\n  queryKey: (variables) => ['post', variables],\n  fetcher: async (variables) => {\n    const { id } = variables;\n    const response = await client.get<PostResponse>(`posts/${id}`);\n    return response.data;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Form to Add New Posts using React Hook Form and Zod\nDESCRIPTION: This screen component creates a form to add new posts using react-hook-form with Zod validation. It utilizes the useAddPost mutation hook to send the form data to the server and handles success/error states.\nSOURCE: https://github.com/obytes/react-native-template-obytes/blob/master/docs/src/content/docs/guides/data-fetching.mdx#2025-04-18_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useRouter } from 'expo-router';\nimport { Controller, useForm } from 'react-hook-form';\nimport { Text, View } from 'react-native';\nimport { z } from 'zod';\nimport { zodResolver } from '@hookform/resolvers/zod';\n\nimport { useAddPost } from '@/api/posts/use-add-post';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { MainScreen } from '@/components/main-screen';\nimport { Textarea } from '@/components/ui/textarea';\n\nconst schema = z.object({\n  title: z.string().min(1, 'Title is required'),\n  body: z.string().min(1, 'Body is required'),\n});\n\ntype FormType = z.infer<typeof schema>;\n\nexport default function AddPost() {\n  const router = useRouter();\n  const { control, handleSubmit, formState } = useForm<FormType>({\n    resolver: zodResolver(schema),\n  });\n\n  // we can use our mutation hook\n  const { mutate, isPending } = useAddPost({\n    onSuccess: () => {\n      router.replace('/');\n    },\n  });\n\n  const onSubmit = (data: FormType) => {\n    mutate({\n      ...data,\n      userId: 1,\n    });\n  };\n\n  return (\n    <MainScreen>\n      <View className=\"p-4\">\n        <Text className=\"text-xl font-bold\">Add Post</Text>\n        <View className=\"mt-4\">\n          <Controller\n            control={control}\n            name=\"title\"\n            render={({ field: { onChange, onBlur, value }, fieldState: { error } }) => (\n              <>\n                <Input\n                  placeholder=\"Title\"\n                  onBlur={onBlur}\n                  onChangeText={onChange}\n                  value={value}\n                  error={!!error}\n                />\n                {error?.message && (\n                  <Text className=\"text-sm text-red-500\">{error?.message}</Text>\n                )}\n              </>\n            )}\n          />\n        </View>\n        <View className=\"mt-4\">\n          <Controller\n            control={control}\n            name=\"body\"\n            render={({ field: { onChange, onBlur, value }, fieldState: { error } }) => (\n              <>\n                <Textarea\n                  placeholder=\"Body\"\n                  onBlur={onBlur}\n                  onChangeText={onChange}\n                  value={value}\n                  error={!!error}\n                />\n                {error?.message && (\n                  <Text className=\"text-sm text-red-500\">{error?.message}</Text>\n                )}\n              </>\n            )}\n          />\n        </View>\n        <View className=\"mt-4\">\n          <Button\n            disabled={!formState.isValid || isPending}\n            loading={isPending}\n            onPress={handleSubmit(onSubmit)}\n          >\n            <Text>Add Post</Text>\n          </Button>\n        </View>\n      </View>\n    </MainScreen>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Login Form with React Hook Form\nDESCRIPTION: A complete implementation of a login screen using react-hook-form with the controlled components provided by the starter. This example shows form validation with Zod, form submission handling, and integration with an authentication system.\nSOURCE: https://github.com/obytes/react-native-template-obytes/blob/master/docs/src/content/docs/ui-and-theme/Forms.mdx#2025-04-18_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport React from 'react';\nimport { useForm } from 'react-hook-form';\nimport * as z from 'zod';\n\nimport { useAuth } from '@/lib';\nimport { Button, ControlledInput, View } from '@/components/ui';\n\nconst schema = z.object({\n  email: z.string().email(),\n  password: z.string().min(6),\n});\n\ntype FormType = z.infer<typeof schema>;\n\nexport const Login = () => {\n  const { signIn } = useAuth();\n\n  const { handleSubmit, control } = useForm<FormType>({\n    resolver: zodResolver(schema),\n  });\n\n  const onSubmit = (data: FormType) => {\n    console.log(data);\n    signIn({ access: 'access-token', refresh: 'refresh-token' });\n  };\n  return (\n    <View className=\"flex-1 justify-center p-4\">\n      <ControlledInput control={control} name=\"email\" label=\"Email\" />\n      <ControlledInput\n        control={control}\n        name=\"password\"\n        label=\"Password\"\n        placeholder=\"***\"\n        secureTextEntry={true}\n      />\n      <Button\n        label=\"Login\"\n        onPress={handleSubmit(onSubmit)}\n        variant=\"primary\"\n      />\n    </View>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication Store with Zustand in TypeScript\nDESCRIPTION: This snippet defines the authentication store using Zustand. It includes states for authentication status and user token, along with actions for sign-in, sign-out, and hydration of the authentication state.\nSOURCE: https://github.com/obytes/react-native-template-obytes/blob/master/docs/src/content/docs/guides/authentication.mdx#2025-04-18_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { create } from 'zustand';\nimport { createJSONStorage, persist } from 'zustand/middleware';\nimport { getItem, removeItem, setItem } from '@/core';\nimport { AuthStore, TokenType } from './types';\n\nexport const useAuth = create<AuthStore>(\n  persist(\n    (set) => ({\n      status: 'idle',\n      token: null,\n      signIn: (token: TokenType) =>\n        set(() => ({ token, status: 'signIn' })),\n      signOut: () => set(() => ({ token: null, status: 'signOut' })),\n      hydrate: () => {\n        set({ status: 'idle' });\n        return getItem('token').then((token) => {\n          if (token) {\n            set({ token: JSON.parse(token), status: 'signIn' });\n          } else {\n            set({ token: null, status: 'signOut' });\n          }\n        });\n      },\n    }),\n    {\n      name: 'auth-storage',\n      storage: createJSONStorage(() => ({\n        setItem,\n        getItem,\n        removeItem,\n      })),\n    }\n  )\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Storage Module with MMKV in React Native\nDESCRIPTION: Implementation of a storage utility module using react-native-mmkv library. Creates a storage interface with methods for getting, setting, and removing values, along with helper functions for storing objects and managing storage state.\nSOURCE: https://github.com/obytes/react-native-template-obytes/blob/master/docs/src/content/docs/guides/storage.mdx#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nsrc/lib/storage.tsx\n```\n\n----------------------------------------\n\nTITLE: Creating Zod Schema Validation for Login Form\nDESCRIPTION: Demonstrates how to create a schema validation for a login form using Zod and infer TypeScript types from the schema. This validation checks that the email is valid and the password is at least 6 characters long.\nSOURCE: https://github.com/obytes/react-native-template-obytes/blob/master/docs/src/content/docs/ui-and-theme/Forms.mdx#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as z from 'zod';\n\nconst schema = z.object({\n  email: z.string().email(),\n  password: z.string().min(6),\n});\n\ntype FormType = z.infer<typeof schema>;\n```\n\n----------------------------------------\n\nTITLE: Creating a Login Form Component with React Hook Form and Zod in React Native\nDESCRIPTION: This snippet shows how to implement a login form component using React Native, react-hook-form, and zod for form validation. It includes input fields for name, email, and password, with custom styling and error handling. The component also uses KeyboardAvoidingView for better UX on mobile devices.\nSOURCE: https://github.com/obytes/react-native-template-obytes/blob/master/prompts/image-to-components.md#2025-04-18_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport React from 'react';\nimport type { SubmitHandler } from 'react-hook-form';\nimport { useForm } from 'react-hook-form';\nimport { KeyboardAvoidingView } from 'react-native-keyboard-controller';\nimport * as z from 'zod';\n\nimport { Button, ControlledInput, Text, View } from '@/components/ui';\n\nconst schema = z.object({\n  name: z.string().optional(),\n  email: z\n    .string({\n      required_error: 'Email is required',\n    })\n    .email('Invalid email format'),\n  password: z\n    .string({\n      required_error: 'Password is required',\n    })\n    .min(6, 'Password must be at least 6 characters'),\n});\n\nexport type FormType = z.infer<typeof schema>;\n\nexport type LoginFormProps = {\n  onSubmit?: SubmitHandler<FormType>;\n};\n\nexport const LoginForm = ({ onSubmit = () => {} }: LoginFormProps) => {\n  const { handleSubmit, control } = useForm<FormType>({\n    resolver: zodResolver(schema),\n  });\n  return (\n    <KeyboardAvoidingView\n      style={{ flex: 1 }}\n      behavior=\"padding\"\n      keyboardVerticalOffset={10}\n    >\n      <View className=\"flex-1 justify-center p-4\">\n        <View className=\"items-center justify-center\">\n          <Text\n            testID=\"form-title\"\n            className=\"pb-6 text-center text-4xl font-bold\"\n          >\n            Sign In\n          </Text>\n\n          <Text className=\"mb-6 max-w-xs text-center text-gray-500\">\n            Welcome! 👋 This is a demo login screen! Feel free to use any email\n            and password to sign in and try it out.\n          </Text>\n        </View>\n\n        <ControlledInput\n          testID=\"name\"\n          control={control}\n          name=\"name\"\n          label=\"Name\"\n        />\n\n        <ControlledInput\n          testID=\"email-input\"\n          control={control}\n          name=\"email\"\n          label=\"Email\"\n        />\n        <ControlledInput\n          testID=\"password-input\"\n          control={control}\n          name=\"password\"\n          label=\"Password\"\n          placeholder=\"***\"\n          secureTextEntry={true}\n        />\n        <Button\n          testID=\"login-button\"\n          label=\"Login\"\n          onPress={handleSubmit(onSubmit)}\n        />\n      </View>\n    </KeyboardAvoidingView>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: React Native Login Form Component Implementation\nDESCRIPTION: A login form component that includes form validation logic, error handling, and submission functionality. This component is designed to be testable by separating form logic from API calls and navigation.\nSOURCE: https://github.com/obytes/react-native-template-obytes/blob/master/docs/src/content/docs/testing/unit-testing.mdx#2025-04-18_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n./src/components/login-form.tsx\n```\n\n----------------------------------------\n\nTITLE: Unit Testing a React Native Login Form Component\nDESCRIPTION: A comprehensive test suite for the login form component that tests rendering, validation error messages, and form submission. It uses React Native Testing Library and custom test utilities.\nSOURCE: https://github.com/obytes/react-native-template-obytes/blob/master/docs/src/content/docs/testing/unit-testing.mdx#2025-04-18_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n./src/components/login-form.test.tsx\n```\n\n----------------------------------------\n\nTITLE: Implementing Conditional Navigation based on Authentication in React Native\nDESCRIPTION: This snippet shows how to implement conditional navigation based on the authentication status. It uses the authentication store to determine whether to show the login navigator or the home navigator.\nSOURCE: https://github.com/obytes/react-native-template-obytes/blob/master/docs/src/content/docs/guides/authentication.mdx#2025-04-18_snippet_2\n\nLANGUAGE: TSX\nCODE:\n```\nimport { Slot, useRouter, useSegments } from 'expo-router';\nimport { useEffect } from 'react';\n\nimport { useAuth } from '@/lib';\n\nexport default function AppLayout() {\n  const { status } = useAuth();\n  const segments = useSegments();\n  const router = useRouter();\n\n  useEffect(() => {\n    if (status === 'signOut') {\n      router.replace('/(auth)/sign-in');\n    } else if (status === 'signIn') {\n      router.replace('/(app)');\n    }\n  }, [status]);\n\n  return <Slot />;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing React Native Component Unit Tests with Jest and React Testing Library\nDESCRIPTION: This example demonstrates the proper structure for a React Native component test suite using Jest and React Native Testing Library. It includes setup, test organization by functionality, and demonstrates techniques for testing rendering, user interactions, and state management.\nSOURCE: https://github.com/obytes/react-native-template-obytes/blob/master/prompts/write-unit-tests.md#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\n\nimport { cleanup, screen, setup, waitFor } from '@/lib/test-utils';\nafterEach(cleanup);\n\nconst onSubmitMock: jest.Mock<LoginFormProps['onSubmit']> = jest.fn();\n\ndescribe('ComponentName', () => {\n  // Setup section\n  beforeAll(() => {\n    // Global setup\n  });\n\n  beforeEach(() => {\n    // Reset mocks and state\n    jest.clearAllMocks();\n  });\n\n  // Test cases grouped by functionality\n  describe('Rendering', () => {\n    test('renders correctly with default props', async () => {\n      setup(<ComponentName />);\n      expect(await screen.findByTestId('component-name')).toBeOnTheScreen();\n    });\n    test('renders correctly with custom props', async () => {});\n  });\n\n  describe('Interactions', () => {\n    test('handles user input correctly', async () => {\n      const { user } = setup(<ComponentName />);\n      const input = screen.getByTestId('input-id');\n      await user.type(input, 'test');\n      expect(input).toHaveValue('test');\n    });\n    test('triggers appropriate callbacks', async () => {});\n  });\n\n  describe('State Management', () => {\n    test('updates state correctly', async () => {});\n    test('handles side effects', async () => {});\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: List Component Usage with FlashList\nDESCRIPTION: Example showing how to use the List component which wraps @shopify/flash-list with empty state handling\nSOURCE: https://github.com/obytes/react-native-template-obytes/blob/master/docs/src/content/docs/ui-and-theme/components.mdx#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react';\nimport { List, EmptyList, Text } from '@/components/ui';\n\nconst MyComponent = () => {\n  return (\n    <List\n      data={['Item 1', 'Item 2']}\n      renderItem={({ item }) => <Text>{item}</Text>}\n      ListEmptyComponent={<EmptyList message=\"No items\" />}\n    />\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using Checkbox Component with Default Configuration in React Native\nDESCRIPTION: Example of implementing a checkbox with default configuration, which renders a label alongside the checkbox. The component accepts a checked state and onChange handler, with the label being clickable to toggle the checkbox state.\nSOURCE: https://github.com/obytes/react-native-template-obytes/blob/master/docs/src/content/docs/ui-and-theme/components.mdx#2025-04-18_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Checkbox } from '@/components/ui';\n\nconst App = () => {\n  const [checked, setChecked] = useState(false);\n\n  return (\n    <Checkbox\n      checked={checked}\n      onChange={setChecked}\n      accessibilityLabel=\"accept terms of condition\"\n      label=\"I accept terms and conditions\"\n    />\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Hook for Theme Selection in React Native\nDESCRIPTION: A hook that manages theme selection persistence using AsyncStorage. It provides functions to load and set the selected theme, with proper initialization for system theme preference.\nSOURCE: https://github.com/obytes/react-native-template-obytes/blob/master/docs/src/content/docs/ui-and-theme/ui-theming.mdx#2025-04-18_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react';\nimport { useColorScheme as useNativeWindColorScheme } from 'nativewind';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\nconst SELECTED_THEME = '@theme';\ntype Theme = 'light' | 'dark' | 'system';\n\nexport function loadSelectedTheme() {\n  return AsyncStorage.getItem(SELECTED_THEME).then((value) => {\n    return (value as Theme | null) ?? 'system';\n  });\n}\n\nexport const useSelectedTheme = () => {\n  const { setColorScheme } = useNativeWindColorScheme();\n  const [selectedTheme, _setSelectedTheme] = React.useState<Theme>('system');\n\n  React.useEffect(() => {\n    loadSelectedTheme().then(_setSelectedTheme);\n  }, []);\n\n  const setSelectedTheme = React.useCallback(\n    async (theme: Theme) => {\n      setColorScheme(theme);\n      await AsyncStorage.setItem(SELECTED_THEME, theme);\n      _setSelectedTheme(theme);\n    },\n    [setColorScheme]\n  );\n\n  return {\n    selectedTheme,\n    setSelectedTheme,\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Checkbox with Composition Pattern in React Native\nDESCRIPTION: Example of building a custom checkbox using the composition pattern with Root, Icon, and Label subcomponents. This approach provides more flexibility for custom styling and layout while maintaining the core checkbox functionality.\nSOURCE: https://github.com/obytes/react-native-template-obytes/blob/master/docs/src/content/docs/ui-and-theme/components.mdx#2025-04-18_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Checkbox } from '@/components/ui';\n\nconst App = () => {\n  const [checked, setChecked] = useState(false);\n\n  return (\n    <Checkbox.Root\n      checked={checked}\n      onChange={setChecked}\n      accessibilityLabel=\"accept terms of condition\"\n    >\n      <Checkbox.Icon checked={checked} />\n      <Checkbox.Label text=\"I agree to terms and conditions\" />\n    </Checkbox.Root>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Creating SVG Icon Component with React Native SVG\nDESCRIPTION: An example implementation of a React Native component for an SVG arrow icon using react-native-svg. The component accepts customizable properties like color and size with default values, and properly implements the SVG path elements.\nSOURCE: https://github.com/obytes/react-native-template-obytes/blob/master/prompts/svg-icon.md#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react';\nimport Svg, { Path, type SvgProps } from 'react-native-svg';\n\nexport function ArrowLeft({\n  color = 'white',\n  size = 24,\n  ...props\n}: SvgProps & { size?: number }) {\n  return (\n    <Svg width={size} height={size} viewBox=\"0 0 24 24\" fill=\"none\" {...props}>\n      <Path\n        d=\"m12 19-7-7 7-7\"\n        stroke={color}\n        strokeWidth={2}\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      />\n      <Path\n        d=\"M19 12H5\"\n        stroke={color}\n        strokeWidth={2}\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      />\n    </Svg>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Authentication Store in React Native Component\nDESCRIPTION: This snippet demonstrates how to use the authentication store in a React Native component. It shows importing the store, hydrating it on app start, and using its state and actions within a component.\nSOURCE: https://github.com/obytes/react-native-template-obytes/blob/master/docs/src/content/docs/guides/authentication.mdx#2025-04-18_snippet_1\n\nLANGUAGE: TSX\nCODE:\n```\nimport { useAuth, hydrate } from '@/lib';\n\nhydrate(); // call this when the application is started to check if the user is authenticated or not\n\nconst App = () => {\n  const status = useAuth.use.status();\n  const signOut = useAuth.use.signOut();\n\n  return (\n    <View>\n      <Text>{status}</Text>\n      <Button title=\"Sign Out\" onPress={signOut} />\n    </View>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Tabs Navigation Layout in Expo Router\nDESCRIPTION: This snippet demonstrates how to create a tab-based navigation layout in Expo Router. It uses the Tabs component from expo-router and configures tab screens for Home, Account, and Settings, with custom tab icons and styling.\nSOURCE: https://github.com/obytes/react-native-template-obytes/blob/master/docs/src/content/docs/guides/navigation.mdx#2025-04-18_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Tabs } from 'expo-router';\nimport { useColorScheme } from 'nativewind';\n\nimport { Avatar } from '@/components/ui/avatar';\nimport { Feather } from '@expo/vector-icons';\nimport { useTheme } from '@/lib/tamagui';\nimport { LightBulbIcon } from '@/components/icons';\n\nexport default function AppLayout() {\n  const { colorScheme, toggleColorScheme } = useColorScheme();\n  const theme = useTheme();\n  const isDark = colorScheme === 'dark';\n\n  return (\n    <Tabs\n      screenOptions={{\n        tabBarActiveTintColor: theme.primary.val,\n        tabBarInactiveTintColor: theme.secondary.val,\n        tabBarStyle: {\n          borderTopColor: theme.gray3.val,\n          backgroundColor: theme.background.val,\n        },\n      }}\n    >\n      <Tabs.Screen\n        name=\"home\"\n        options={{\n          title: 'Home',\n          tabBarIcon: ({ color, size }) => <Feather name=\"home\" size={size} color={color} />,\n          // you can add an icon to the header too\n          headerLeft: () => (\n            <LightBulbIcon\n              marginLeft=\"$2\"\n              size={30}\n              onPress={() => toggleColorScheme()}\n              color={isDark ? theme.yellow.val : theme.secondary.val}\n              fill={isDark ? theme.yellow.val : 'none'}\n            />\n          ),\n        }}\n      />\n      <Tabs.Screen\n        name=\"(account)\"\n        options={{\n          title: 'Account',\n          tabBarIcon: ({ color, size }) => <Feather name=\"user\" size={size} color={color} />,\n          headerRight: () => <Avatar mr=\"$4\" />,\n        }}\n      />\n      <Tabs.Screen\n        name=\"settings\"\n        options={{\n          title: 'Settings',\n          tabBarIcon: ({ color, size }) => <Feather name=\"settings\" size={size} color={color} />,\n        }}\n      />\n    </Tabs>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Theme Provider in Expo Router Layout\nDESCRIPTION: Implementation of the root layout file that sets up the theme provider with the configured theme. It loads the selected theme from storage and applies it to the application.\nSOURCE: https://github.com/obytes/react-native-template-obytes/blob/master/docs/src/content/docs/ui-and-theme/ui-theming.mdx#2025-04-18_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useThemeConfig } from '@/lib/use-theme-config';\nimport { ThemeProvider } from '@/ui/theme';\n\n// Rest of the imports and code...\n\nexport default function Layout() {\n  const { theme, selectedTheme, setSelectedTheme } = useThemeConfig();\n\n  return (\n    <ThemeProvider\n      value={{\n        theme,\n        selectedTheme,\n        setSelectedTheme,\n      }}\n    >\n      {/* Your layout content */}\n    </ThemeProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Translation Hook in React Native Component\nDESCRIPTION: Example of using the useTranslation hook from react-i18next to implement translations in a React Native component. Shows how to access translated text using the translation function.\nSOURCE: https://github.com/obytes/react-native-template-obytes/blob/master/docs/src/content/docs/guides/internationalization.mdx#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { Text } from '@/components/ui';\n\nexport const Foo = () => {\n  const { t } = useTranslation();\n  return (\n    <>\n      <Text className=\"text-center\">{t('settings.language')}</Text>\n    </>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing a Post Detail Screen with React Query\nDESCRIPTION: This screen component fetches and displays a single post's details using the usePost hook. It handles loading states, errors, and shows the post title and body when data is available.\nSOURCE: https://github.com/obytes/react-native-template-obytes/blob/master/docs/src/content/docs/guides/data-fetching.mdx#2025-04-18_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ActivityIndicator, Text, View } from 'react-native';\nimport { useLocalSearchParams } from 'expo-router';\n\nimport { usePost } from '@/api/posts/use-post';\nimport { ErrorMessage } from '@/components/error-message';\nimport { MainScreen } from '@/components/main-screen';\n\nexport default function PostScreen() {\n  const { id } = useLocalSearchParams<{ id: string }>();\n\n  const { data, isLoading, error, refetch } = usePost({\n    variables: { id: parseInt(id as string, 10) },\n  });\n\n  if (isLoading) {\n    return (\n      <MainScreen>\n        <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n          <ActivityIndicator />\n        </View>\n      </MainScreen>\n    );\n  }\n\n  if (error || !data) {\n    return (\n      <MainScreen>\n        <ErrorMessage message={error?.message ?? 'Unknown error'} onRetry={refetch} />\n      </MainScreen>\n    );\n  }\n\n  return (\n    <MainScreen>\n      <View className=\"p-4\">\n        <Text className=\"text-xl font-bold\">{data.title}</Text>\n        <Text className=\"mt-2\">{data.body}</Text>\n      </View>\n    </MainScreen>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring npm scripts for app release automation in package.json\nDESCRIPTION: JSON configuration that defines npm scripts for managing app releases. The app-release script uses np to handle version updates, while the version script runs prebuild and adds changes to git.\nSOURCE: https://github.com/obytes/react-native-template-obytes/blob/master/docs/src/content/docs/ci-cd/app-releasing-process.mdx#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"app-release\": \"cross-env SKIP_BRANCH_PROTECTION=true np --no-publish --no-cleanup --no-release-draft\",\n    \"version\": \"pnpm run prebuild && git add .\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running prebuild commands for staging environment in Expo/React Native\nDESCRIPTION: Bash command to run the prebuild script for the staging environment, which regenerates iOS and Android folders based on staging configuration.\nSOURCE: https://github.com/obytes/react-native-template-obytes/blob/master/docs/src/content/docs/ci-cd/app-releasing-process.mdx#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm run prebuild:staging\n```\n\n----------------------------------------\n\nTITLE: Creating a Mutation Hook for Adding New Posts\nDESCRIPTION: This hook uses react-query-kit's createMutation to define a mutation for adding new posts. It specifies the request variables type, response type, and implements the mutation function that communicates with the API.\nSOURCE: https://github.com/obytes/react-native-template-obytes/blob/master/docs/src/content/docs/guides/data-fetching.mdx#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMutation } from '@tanstack/react-query-kit';\nimport { client } from '../common/client';\nimport { Post } from './use-posts';\n\ntype AddPostVariables = {\n  title: string;\n  body: string;\n  userId: number;\n};\n\ntype AddPostResponse = Post;\n\nexport const useAddPost = createMutation<AddPostResponse, Error, AddPostVariables>({\n  mutationKey: ['addPost'],\n  mutationFn: async (variables) => {\n    const response = await client.post<AddPostResponse>('posts', variables);\n    return response.data;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Building staging apps for iOS and Android using EAS\nDESCRIPTION: Bash commands to build the app for iOS and Android in staging environment using Expo Application Services (EAS). These commands generate required credentials and store them on EAS servers.\nSOURCE: https://github.com/obytes/react-native-template-obytes/blob/master/docs/src/content/docs/ci-cd/app-releasing-process.mdx#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm run build:staging:ios\npnpm run build:staging:android\n```\n\n----------------------------------------\n\nTITLE: Building production apps for iOS and Android using EAS\nDESCRIPTION: Bash commands to build production-ready apps for iOS and Android using Expo Application Services (EAS). The prebuild command prepares the app configuration before building.\nSOURCE: https://github.com/obytes/react-native-template-obytes/blob/master/docs/src/content/docs/ci-cd/app-releasing-process.mdx#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm run prebuild:production\npnpm run build:production:ios\npnpm run build:production:android\n```\n\n----------------------------------------\n\nTITLE: E2E Testing with Maestro Cloud for Android in React Native\nDESCRIPTION: A GitHub Actions workflow that runs end-to-end tests on Android using Maestro Cloud. It uses a cloud service for testing to simplify infrastructure requirements.\nSOURCE: https://github.com/obytes/react-native-template-obytes/blob/master/docs/src/content/docs/ci-cd/workflows-references.mdx#2025-04-18_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nname: E2E Tests for Android using Maestro Cloud\n\n# This action works with pull requests and pushes to the main branch\non:\n  pull_request:\n  push:\n    branches: [main]\n\njobs:\n  e2e-android-maestro:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Install PNPM\n        uses: pnpm/action-setup@v2\n        with:\n          version: 8\n\n      - name: Setup node and install dependencies\n        uses: ./.github/actions/setup-node-pnpm-install\n\n      - name: Create .env file\n        run: cp .env.example .env\n\n      - name: Set app.json values\n        run: node -e \"const fs = require('fs'); const app = JSON.parse(fs.readFileSync('./app.json')); app.expo.android.package = 'com.obytes.staging'; fs.writeFileSync('./app.json', JSON.stringify(app, null, 2));\"\n\n      - name: Setup JDK & Generate APK\n        uses: ./.github/actions/setup-jdk-generate-apk\n\n      - name: Run Maestro cloud tests\n        uses: mobile-dev-inc/action-maestro-cloud@v1.3.1\n        with:\n          api-key: ${{ secrets.MAESTRO_CLOUD_API_KEY }}\n          app-file: android/app/build/outputs/apk/release/app-release.apk\n          env-variables: |\n            {\n              \"EMAIL\": \"${{ secrets.MAESTRO_TEST_EMAIL }}\",\n              \"PASSWORD\": \"${{ secrets.MAESTRO_TEST_PASSWORD }}\"\n            }\n```\n\n----------------------------------------\n\nTITLE: Implementing Theme Configuration Hook in React Native\nDESCRIPTION: A custom hook that configures the theme based on user preferences. It uses the system appearance by default and applies the appropriate theme colors from the defined palette.\nSOURCE: https://github.com/obytes/react-native-template-obytes/blob/master/docs/src/content/docs/ui-and-theme/ui-theming.mdx#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useSelectedTheme } from '@/lib/hooks/use-selected-theme';\nimport { colors } from '@/ui/theme/colors';\nimport { useColorScheme } from 'nativewind';\nimport { useMemo } from 'react';\n\nexport const useThemeConfig = () => {\n  const { selectedTheme, setSelectedTheme } = useSelectedTheme();\n  const { colorScheme } = useColorScheme();\n\n  const theme = useMemo(() => {\n    if (selectedTheme === 'system') {\n      return colorScheme === 'dark' ? 'dark' : 'light';\n    }\n    return selectedTheme ?? 'light';\n  }, [colorScheme, selectedTheme]);\n\n  return {\n    theme,\n    selectedTheme,\n    setSelectedTheme,\n    resolvedTheme: theme,\n    isDarkTheme: theme === 'dark',\n    colors: colors,\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Setup JDK and Generate APK Action in GitHub Actions\nDESCRIPTION: A reusable GitHub Action for setting up Java Development Kit and generating an Android APK. This action handles the configuration needed for building Android applications.\nSOURCE: https://github.com/obytes/react-native-template-obytes/blob/master/docs/src/content/docs/ci-cd/workflows-references.mdx#2025-04-18_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: Setup JDK & Generate APK\ndescription: Setup JDK and generate APK\n\nruns:\n  using: composite\n  steps:\n    - name: Setup JDK\n      uses: actions/setup-java@v3\n      with:\n        distribution: 'zulu'\n        java-version: '11'\n\n    - name: Setup Android SDK\n      uses: android-actions/setup-android@v2\n\n    - name: Install Moreutils\n      shell: bash\n      run: sudo apt-get install -y moreutils\n\n    - name: Generate APK\n      shell: bash\n      run: cd android && ./gradlew assembleRelease --no-daemon\n```\n\n----------------------------------------\n\nTITLE: Testing and Coverage Workflow for React Native Projects\nDESCRIPTION: A GitHub Actions workflow that runs Jest tests and generates coverage reports. It uploads coverage data to Codecov for tracking test coverage over time.\nSOURCE: https://github.com/obytes/react-native-template-obytes/blob/master/docs/src/content/docs/ci-cd/workflows-references.mdx#2025-04-18_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nname: Tests\n\n# This action works with pull requests and pushes to the main branch\non:\n  pull_request:\n  push:\n    branches: [main]\n\njobs:\n  test:\n    name: Test & Create Coverage\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Install PNPM\n        uses: pnpm/action-setup@v2\n        with:\n          version: 8\n\n      - name: Setup node and install dependencies\n        uses: ./.github/actions/setup-node-pnpm-install\n\n      - name: Run Jest tests\n        run: pnpm test:ci\n\n      - name: Upload coverage to Codecov\n        uses: codecov/codecov-action@v3\n```\n\n----------------------------------------\n\nTITLE: Select Component Implementation\nDESCRIPTION: Example demonstrating Select component usage with bottom sheet and options list\nSOURCE: https://github.com/obytes/react-native-template-obytes/blob/master/docs/src/content/docs/ui-and-theme/components.mdx#2025-04-18_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react';\n\nimport type { Option } from '@/components/ui';\nimport { SelectInput, View } from '@/components/ui';\n\nconst options: Option[] = [\n  { value: 'chocolate', label: 'Chocolate' },\n  { value: 'strawberry', label: 'Strawberry' },\n  { value: 'vanilla', label: 'Vanilla' },\n];\n\nconst MyComponent = () => {\n  const [value, setValue] = React.useState<string | number | undefined>();\n  return (\n    <View className=\"flex flex-col items-center justify-center\">\n      <Select\n        label=\"Select\"\n        error=\"Select is required\"\n        options={options}\n        value={value}\n        onSelect={(option) => setValue(option.value)}\n      />\n    </View>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Expo Doctor Workflow for React Native Projects\nDESCRIPTION: A GitHub Actions workflow that runs Expo Doctor to check for common issues and ensure compatibility with the latest Expo SDK. It validates project setup.\nSOURCE: https://github.com/obytes/react-native-template-obytes/blob/master/docs/src/content/docs/ci-cd/workflows-references.mdx#2025-04-18_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nname: Expo Doctor\n\n# This action works with pull requests and pushes to the main branch\non:\n  pull_request:\n  push:\n    branches: [main]\n\njobs:\n  expo-doctor:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Install PNPM\n        uses: pnpm/action-setup@v2\n        with:\n          version: 8\n\n      - name: Setup node and install dependencies\n        uses: ./.github/actions/setup-node-pnpm-install\n\n      - name: Install expo-cli\n        run: pnpm add -g expo-cli\n\n      - name: Doctor\n        run: pnpm expo:doctor\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow File Paths for React Native / Expo CI/CD\nDESCRIPTION: List of GitHub Actions workflow file paths used in the project for various CI/CD tasks including linting, testing, type checking, image compression, and app versioning.\nSOURCE: https://github.com/obytes/react-native-template-obytes/blob/master/docs/src/content/docs/ci-cd/overview.mdx#2025-04-18_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- .github/workflows/lint-ts.yml\n- .github/workflows/test.yml\n- .github/workflows/type-check.yml\n- .github/workflows/compress-images.yml\n- .github/workflows/expo-doctor.yml\n- .github/workflows/new-app-version.yml\n```\n\n----------------------------------------\n\nTITLE: Maestro E2E Test Configuration for React Native Login Screen\nDESCRIPTION: YAML configuration for a Maestro end-to-end test of a login screen, including validation checks.\nSOURCE: https://github.com/obytes/react-native-template-obytes/blob/master/docs/src/content/docs/testing/end-to-end-testing.mdx#2025-04-18_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# Content of .maestro/auth/login-with-validation.yaml\n# (Actual content not provided in the input)\n```\n\n----------------------------------------\n\nTITLE: Modal Component Implementation\nDESCRIPTION: Example showing Modal component usage with bottom sheet functionality\nSOURCE: https://github.com/obytes/react-native-template-obytes/blob/master/docs/src/content/docs/ui-and-theme/components.mdx#2025-04-18_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react';\nimport { Modal, useModal, View, Button, Text } from '@/components/ui';\n\nconst MyComponent = () => {\n  const modal = useModal();\n\n  return (\n    <View className=\"flex flex-col items-center justify-center\">\n      <Button variant=\"primary\" label=\"Show Modal\" onPress={modal.present} />\n      <Modal ref={modal.ref} title=\"modal title\" snapPoints={['60%']}>\n        <Text>Modal Content</Text>\n      </Modal>\n    </View>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Object Assignment\nDESCRIPTION: Assigns environment variables to client and build-time objects for validation.\nSOURCE: https://github.com/obytes/react-native-template-obytes/blob/master/docs/src/content/docs/getting-started/environment-vars-config.mdx#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst _clientEnv = {\n  // ...\n  // add the new environment variable here\n  NEW_ENV_VAR: process.env.NEW_ENV_VAR,\n};\n\nconst _buildTimeEnv = {\n  // ...\n  // add the new environment variable here\n  NEW_SECRET_ENV: process.env.NEW_SECRET_ENV,\n};\n```\n\n----------------------------------------\n\nTITLE: Using Environment Variables in Client Code\nDESCRIPTION: Example of accessing environment variables in client-side code using the Env object.\nSOURCE: https://github.com/obytes/react-native-template-obytes/blob/master/docs/src/content/docs/getting-started/environment-vars-config.mdx#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Env } from '@env';\nimport axios from 'axios';\nexport const client = axios.create({\n  baseURL: Env.API_URL,\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Root Layout in Expo Router with TypeScript\nDESCRIPTION: This snippet shows the implementation of the Root Layout component in Expo Router, which handles the overall structure and navigation setup for the application. It replaces the traditional root component found in ./App.js or ./index.js in conventional React Native projects.\nSOURCE: https://github.com/obytes/react-native-template-obytes/blob/master/docs/src/content/docs/guides/navigation.mdx#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Stack } from 'expo-router';\nimport { useColorScheme } from 'nativewind';\nimport { useEffect } from 'react';\n\nimport '../global.css';\nimport { TamaguiProvider } from '@/lib/tamagui';\nimport { GestureHandlerRootView } from 'react-native-gesture-handler';\nimport { StatusBar } from '@/components/status-bar';\nimport { useAppState } from '@/lib/hooks';\nimport { Provider } from '@/provider';\n\nexport default function RootLayoutNav() {\n  const { colorScheme, setColorScheme } = useColorScheme();\n  const appState = useAppState();\n  // Handle system theme changes\n  useEffect(() => {\n    const subscription = {\n      remove: () => {\n        // do nothing\n      },\n    };\n\n    return () => subscription.remove();\n  }, [appState, colorScheme, setColorScheme]);\n\n  return (\n    <GestureHandlerRootView style={{ flex: 1 }}>\n      <TamaguiProvider>\n        <Provider>\n          <StatusBar />\n          <Stack initialRouteName=\"(app)\" screenOptions={{ headerShown: false }} />\n        </Provider>\n      </TamaguiProvider>\n    </GestureHandlerRootView>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Sentry Configuration\nDESCRIPTION: Environment variables required for Sentry setup including organization slug, project name, and DSN\nSOURCE: https://github.com/obytes/react-native-template-obytes/blob/master/docs/src/content/docs/recipes/sentry-setup.mdx#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nSENTRY_ORG=your_sentry_organization_slug\nSENTRY_PROJECT=your_sentry_project_name\nSENTRY_DSN=your_sentry_dsn\n```\n\n----------------------------------------\n\nTITLE: Configuring Metro for Sentry Source Maps\nDESCRIPTION: Metro configuration to include debug ID in source maps for Sentry\nSOURCE: https://github.com/obytes/react-native-template-obytes/blob/master/docs/src/content/docs/recipes/sentry-setup.mdx#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst { getSentryExpoConfig } = require('@sentry/react-native/metro');\nconst { withNativeWind } = require('nativewind/metro');\n\nconst config = getSentryExpoConfig(__dirname);\n\nmodule.exports = withNativeWind(config, { input: './global.css' });\n```\n\n----------------------------------------\n\nTITLE: Updating Expo to Latest Version Using npm\nDESCRIPTION: Command for updating Expo to the latest version using pnpm. This is a crucial first step in upgrading a React Native project as Expo forms the foundation of many React Native applications.\nSOURCE: https://github.com/obytes/react-native-template-obytes/blob/master/docs/src/content/docs/guides/upgrading-deps.mdx#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm add expo@latest\n## pnpm add expo@48.0.5 for example\n```\n\n----------------------------------------\n\nTITLE: Text Component with Translation Support\nDESCRIPTION: Example of Text component usage with translation and RTL support\nSOURCE: https://github.com/obytes/react-native-template-obytes/blob/master/docs/src/content/docs/ui-and-theme/components.mdx#2025-04-18_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react';\nimport { Text, View } from 'react-native';\n\nconst MyComponent = () => {\n  return (\n    <View className=\"flex flex-col items-center justify-center\">\n      <Text className=\"text-2xl\" tx=\"welcome\" />\n      <Text className=\"text-md\" className=\"text-base\">\n        Hello world\n      </Text>\n    </View>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Fixing Expo Dependencies Compatibility\nDESCRIPTION: Command to automatically update dependencies to match the correct versions required by the latest Expo version. This helps ensure compatibility between Expo and its related dependencies.\nSOURCE: https://github.com/obytes/react-native-template-obytes/blob/master/docs/src/content/docs/guides/upgrading-deps.mdx#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm expo install --fix\n```\n\n----------------------------------------\n\nTITLE: Committing Dependency Fixes to Git\nDESCRIPTION: Command to add package.json and pnpm-lock.yaml to git staging and commit the changes with a semantic commit message following conventional commits format.\nSOURCE: https://github.com/obytes/react-native-template-obytes/blob/master/prompts/expo-doctor.md#2025-04-18_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngit add package.json pnpm-lock.yaml && git commit -m \"fix(deps): expo doctor issues\"\n```\n\n----------------------------------------\n\nTITLE: Image Component Implementation with Expo\nDESCRIPTION: Example demonstrating usage of Image component which wraps expo-image with Nativewind styling support\nSOURCE: https://github.com/obytes/react-native-template-obytes/blob/master/docs/src/content/docs/ui-and-theme/components.mdx#2025-04-18_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react';\nimport { Image } from '@/components/ui';\n\nconst MyComponent = () => {\n  return (\n    <Image\n      className=\"w-32 h-32\"\n      source={{\n        uri: 'https://images.unsplash.com/photo-1524758631624-e2822e304c36',\n      }}\n    />\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using Text Component with Translation Support\nDESCRIPTION: Simplified approach using a custom Text component that has built-in translation support through the tx prop. Demonstrates direct translation key usage without the translation hook.\nSOURCE: https://github.com/obytes/react-native-template-obytes/blob/master/docs/src/content/docs/guides/internationalization.mdx#2025-04-18_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\n\nimport { Text } from '@/components/ui';\n\nexport const Foo = () => {\n  return <Text className=\"text-center\" tx=\"settings.language\" />;\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Expo App Settings in TypeScript\nDESCRIPTION: This code snippet shows the structure of the app.config.ts file used to configure Expo app settings. It includes various attributes such as name, slug, version, orientation, icon, splash screen, and more.\nSOURCE: https://github.com/obytes/react-native-template-obytes/blob/master/docs/src/content/docs/getting-started/customize-app.mdx#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<Code file=\"app.config.ts\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing a Title Component in React Native with Nativewind\nDESCRIPTION: This snippet demonstrates how to create a Title component using React Native and Nativewind. It includes a text prop and incorporates a placeholder image. The component uses flex layout and custom styling for text and separators.\nSOURCE: https://github.com/obytes/react-native-template-obytes/blob/master/prompts/image-to-components.md#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react';\n\nimport { Text, View, Image, SavaAreaView } from '@/components/ui';\n\n// Props should be defined in the top of the component\ntype TitleProps = {\n  text: string;\n};\n\nexport function Title({ text }: TitleProps) {\n  return (\n    <View className=\"flex-row items-center justify-center  py-4 pb-2\">\n      <Text className=\"pr-2 text-2xl\">{text}</Text>\n      <View className=\"h-[2px] flex-1 bg-neutral-300\" />\n      <Image\n        source={require('@assets/images/placeholder.png')}\n        style={{ width: 24, height: 24 }}\n        contentFit=\"contain\"\n      />\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Schema Definition with Zod\nDESCRIPTION: Defines Zod schemas for validating client and build-time environment variables.\nSOURCE: https://github.com/obytes/react-native-template-obytes/blob/master/docs/src/content/docs/getting-started/environment-vars-config.mdx#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst client = z.object({\n  // ...\n  // add the new environment variable here/ accessible on the client side and build time(app.config.ts)\n  NEW_ENV_VAR: z.string(),\n});\n\nconst buildTime = z.object({\n  // ...\n  // add the new environment variable here / accessible only on build time(app.config.ts)\n  NEW_SECRET_ENV: z.string(),\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Fonts to Tailwind CSS Configuration\nDESCRIPTION: This snippet shows how to update the tailwind.config.js file to include custom fonts, making them available for use with className in Tailwind CSS. It extends the theme configuration with a fontFamily property.\nSOURCE: https://github.com/obytes/react-native-template-obytes/blob/master/docs/src/content/docs/ui-and-theme/fonts.mdx#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst colors = require('./src/components/ui/theme/colors');\n\n/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  // NOTE: Update this to include the paths to all of your component files.\n  content: ['./src/**/*.{js,jsx,ts,tsx}'],\n  presets: [require('nativewind/preset')],\n  theme: {\n    extend: {\n      fontFamily: {\n        inter: ['Inter'],\n      },\n      colors,\n    },\n  },\n  plugins: [],\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Up Absolute Imports in babel.config.js\nDESCRIPTION: Configuration for the Babel module resolver plugin that enables absolute imports in the React Native project, eliminating the need for long relative paths.\nSOURCE: https://github.com/obytes/react-native-template-obytes/blob/master/docs/src/content/docs/getting-started/project-structure.mdx#2025-04-18_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nbabel.config.js\n```\n\n----------------------------------------\n\nTITLE: Setting Up Test Utilities for React Native Components\nDESCRIPTION: A utility file that extends React Native Testing Library's render function to include necessary providers. It exports all testing library functions and provides a setup function for testing component interactions.\nSOURCE: https://github.com/obytes/react-native-template-obytes/blob/master/docs/src/content/docs/testing/unit-testing.mdx#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nsrc/lib/test-utils.tsx\n```\n\n----------------------------------------\n\nTITLE: Configuring expo-font Plugin in app.config.js\nDESCRIPTION: This snippet demonstrates how to configure the expo-font plugin in app.config.js to load custom fonts natively. It specifies the path to the font file in the assets/fonts directory.\nSOURCE: https://github.com/obytes/react-native-template-obytes/blob/master/docs/src/content/docs/ui-and-theme/fonts.mdx#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport type { ConfigContext, ExpoConfig } from '@expo/config';\n\nexport default ({ config }: ConfigContext): ExpoConfig => ({\n  ...config,\n  plugins: [\n    [\n      'expo-font',\n      {\n        fonts: ['./assets/fonts/Inter.ttf'],\n      },\n    ],\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Sentry Core Functionality\nDESCRIPTION: Core Sentry initialization and navigation integration implementation\nSOURCE: https://github.com/obytes/react-native-template-obytes/blob/master/docs/src/content/docs/recipes/sentry-setup.mdx#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Env } from '@env';\nimport * as Sentry from '@sentry/react-native';\nimport { useNavigationContainerRef } from 'expo-router';\nimport { useEffect } from 'react';\n\nconst navigationIntegration = Sentry.reactNavigationIntegration({\n  enableTimeToInitialDisplay: true,\n});\n\nexport const initSentry = () => {\n  if (!__DEV__) {\n    Sentry.init({\n      dsn: Env.SENTRY_DSN,\n      integrations: [navigationIntegration],\n    });\n  }\n};\n\nexport const useSentryNavigationConfig = () => {\n  const navigationRef = useNavigationContainerRef();\n\n  useEffect(() => {\n    if (navigationRef && !__DEV__) {\n      navigationIntegration.registerNavigationContainer(navigationRef);\n    }\n  }, [navigationRef]);\n};\n```\n\n----------------------------------------\n\nTITLE: EAS Build QA Workflow for React Native Projects\nDESCRIPTION: A GitHub Actions workflow that builds a QA version of the app using Expo Application Services (EAS). It's triggered manually and handles authentication and build configuration.\nSOURCE: https://github.com/obytes/react-native-template-obytes/blob/master/docs/src/content/docs/ci-cd/workflows-references.mdx#2025-04-18_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nname: EAS Build QA\n\n# This workflow is triggered manually\non:\n  workflow_dispatch:\n\njobs:\n  eas-build-qa:\n    runs-on: ubuntu-latest\n    steps:\n      - name: 🏗 Setup repo\n        uses: actions/checkout@v3\n\n      - name: Install PNPM\n        uses: pnpm/action-setup@v2\n        with:\n          version: 8\n\n      - name: Setup node and install dependencies\n        uses: ./.github/actions/setup-node-pnpm-install\n\n      - name: Create .env file\n        run: cp .env.example .env\n\n      - name: Run EAS Build for QA\n        uses: ./.github/actions/eas-build\n        with:\n          profile: 'qa'\n          eas-token: ${{ secrets.EXPO_TOKEN }}\n```\n\n----------------------------------------\n\nTITLE: EAS Build Production Workflow for React Native Projects\nDESCRIPTION: A GitHub Actions workflow that builds a production version of the app using Expo Application Services (EAS). It's triggered manually and handles authentication and build configuration.\nSOURCE: https://github.com/obytes/react-native-template-obytes/blob/master/docs/src/content/docs/ci-cd/workflows-references.mdx#2025-04-18_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nname: EAS Build Production\n\n# This workflow is triggered manually\non:\n  workflow_dispatch:\n\njobs:\n  eas-build-production:\n    runs-on: ubuntu-latest\n    steps:\n      - name: 🏗 Setup repo\n        uses: actions/checkout@v3\n\n      - name: Install PNPM\n        uses: pnpm/action-setup@v2\n        with:\n          version: 8\n\n      - name: Setup node and install dependencies\n        uses: ./.github/actions/setup-node-pnpm-install\n\n      - name: Create .env file\n        run: cp .env.example .env\n\n      - name: Run EAS Build for Production\n        uses: ./.github/actions/eas-build\n        with:\n          profile: 'production'\n          eas-token: ${{ secrets.EXPO_TOKEN }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Sentry Plugin in Expo Config\nDESCRIPTION: Configuration of Sentry plugin in app.config.ts for Expo application\nSOURCE: https://github.com/obytes/react-native-template-obytes/blob/master/docs/src/content/docs/recipes/sentry-setup.mdx#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default ({ config }: ConfigContext): ExpoConfig => ({\n  ...config,\n  plugins: [\n    ['@sentry/react-native/expo',\n      {\n        url: 'https://sentry.io/',\n        organization: Env.SENTRY_ORG,\n        project: Env.SENTRY_PROJECT,\n        note: 'Ensure you set the SENTRY_AUTH_TOKEN as an environment variable to authenticate with Sentry. Do not add it to the .env file. Instead, add it as an EAS secret or as an environment variable in your CI/CD pipeline for security.',\n      },\n    ],\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: New App Version Workflow for React Native Projects\nDESCRIPTION: A GitHub Actions workflow that creates a new app version by updating version numbers and generating a changelog. It's triggered manually and creates a PR with the version changes.\nSOURCE: https://github.com/obytes/react-native-template-obytes/blob/master/docs/src/content/docs/ci-cd/workflows-references.mdx#2025-04-18_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nname: New App Version\n\n# This workflow is triggered manually on demand\non:\n  workflow_dispatch:\n    inputs:\n      release-type:\n        description: 'Release type (one of): patch, minor, major'\n        required: true\n        default: 'patch'\n\njobs:\n  create-new-version:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          ref: main\n\n      - name: Setup git user\n        uses: fregante/setup-git-user@v2\n\n      - name: Install PNPM\n        uses: pnpm/action-setup@v2\n        with:\n          version: 8\n\n      - name: Setup node and install dependencies\n        uses: ./.github/actions/setup-node-pnpm-install\n\n      - name: Create .env file\n        run: cp .env.example .env\n\n      - name: Create a new version\n        run: |\n          OLD_VERSION=$(node -p \"require('./package.json').version\")\n          # Bump version in package.json\n          pnpm version ${{ github.event.inputs.release-type }} --no-git-tag-version\n\n          # Get the new version\n          NEW_VERSION=$(node -p \"require('./package.json').version\")\n\n          # Update version in app.json and app.config.js\n          node -e \"const fs = require('fs'); const app = JSON.parse(fs.readFileSync('./app.json')); app.expo.version = '$NEW_VERSION'; fs.writeFileSync('./app.json', JSON.stringify(app, null, 2));\"\n\n          # Create a git patch\n          git add package.json app.json\n          git commit -m \"chore: bump version from $OLD_VERSION to $NEW_VERSION\"\n\n          # Create a pull request\n          echo \"Creating PR for version bump: $NEW_VERSION\"\n\n          # create PR branch\n          PR_BRANCH=\"version-bump-$NEW_VERSION\"\n          git checkout -b $PR_BRANCH\n          git push --set-upstream origin $PR_BRANCH\n\n          # create PR\n          gh pr create --title \"Version $NEW_VERSION\" --body \"## Bump version from $OLD_VERSION to $NEW_VERSION\" --base main\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```\n\n----------------------------------------\n\nTITLE: New GitHub Release Workflow for React Native Projects\nDESCRIPTION: A GitHub Actions workflow that creates a new GitHub release with generated release notes. It's triggered by version tags and automates the release process.\nSOURCE: https://github.com/obytes/react-native-template-obytes/blob/master/docs/src/content/docs/ci-cd/workflows-references.mdx#2025-04-18_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nname: Create GitHub Release\n\n# Triggered when a tag that starts with 'v' is pushed\n# Example: v1.0.0\non:\n  push:\n    tags:\n      - 'v*'\n\njobs:\n  create-github-release:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: write\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Get Changelog\n        id: get-changelog\n        uses: actions/github-script@v6\n        with:\n          script: |\n            const tag = context.ref.replace('refs/tags/', '');\n            const latestTag = (await exec.getExecOutput('git describe --tags --abbrev=0 ' + tag + '^', [], { ignoreReturnCode: true })).stdout.trim();\n            \n            let changelog;\n            if (latestTag) {\n              changelog = (await exec.getExecOutput(`git log ${latestTag}..${tag} --pretty=format:\"- %s (%h)\"`, [], { ignoreReturnCode: true })).stdout.trim();\n            } else {\n              changelog = (await exec.getExecOutput(`git log --pretty=format:\"- %s (%h)\" ${tag}`, [], { ignoreReturnCode: true })).stdout.trim();\n            }\n            \n            return changelog || 'No significant changes';\n\n      - name: Create GitHub Release\n        uses: softprops/action-gh-release@v1\n        with:\n          body: |\n            ## Changes\n\n            ${{ steps.get-changelog.outputs.result }}\n          prerelease: false\n          draft: false\n          token: ${{ secrets.GITHUB_TOKEN }}\n```\n\n----------------------------------------\n\nTITLE: Environment File Configuration\nDESCRIPTION: Example of environment variable definition in .env files.\nSOURCE: https://github.com/obytes/react-native-template-obytes/blob/master/docs/src/content/docs/getting-started/environment-vars-config.mdx#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# ...\n# add the new environment variable here\nNEW_ENV_VAR=my-new-var\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables Validation\nDESCRIPTION: Implementation of environment variables validation using Zod schema in env.js\nSOURCE: https://github.com/obytes/react-native-template-obytes/blob/master/docs/src/content/docs/recipes/sentry-setup.mdx#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst client = z.object({\n  // ... other client env vars\n  SENTRY_DSN: z.string().min(1, 'SENTRY_DSN is required'),\n});\n\nconst buildTime = z.object({\n  // ... other build-time env vars\n  SENTRY_ORG: z.string().min(1, 'SENTRY_ORG is required'),\n  SENTRY_PROJECT: z.string().min(1, 'SENTRY_PROJECT is required'),\n});\n\nconst _clientEnv = {\n  // ... other client env vars\n  SENTRY_DSN: process.env.SENTRY_DSN,\n};\n\nconst _buildTimeEnv = {\n  // ... other build-time env vars\n  SENTRY_ORG: process.env.SENTRY_ORG,\n  SENTRY_PROJECT: process.env.SENTRY_PROJECT,\n};\n```\n\n----------------------------------------\n\nTITLE: Linting and Formatting Workflow for React Native Projects\nDESCRIPTION: A GitHub Actions workflow that checks code quality using ESLint and ensures proper formatting with Prettier. It runs on pushes to main and PRs.\nSOURCE: https://github.com/obytes/react-native-template-obytes/blob/master/docs/src/content/docs/ci-cd/workflows-references.mdx#2025-04-18_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nname: Lint & Format\n\n# This action works with pull requests and pushes to the main branch\non:\n  pull_request:\n  push:\n    branches: [main]\n\njobs:\n  lint:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Install PNPM\n        uses: pnpm/action-setup@v2\n        with:\n          version: 8\n\n      - name: Setup node and install dependencies\n        uses: ./.github/actions/setup-node-pnpm-install\n\n      - name: Lint & format\n        run: pnpm lint-ts\n```\n\n----------------------------------------\n\nTITLE: Type Checking Workflow for TypeScript in React Native Projects\nDESCRIPTION: A GitHub Actions workflow that performs TypeScript type checking on the codebase. It runs on pushes to main and PRs to ensure type safety.\nSOURCE: https://github.com/obytes/react-native-template-obytes/blob/master/docs/src/content/docs/ci-cd/workflows-references.mdx#2025-04-18_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nname: Type Check\n\n# This action works with pull requests and pushes to the main branch\non:\n  pull_request:\n  push:\n    branches: [main]\n\njobs:\n  type-check:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Install PNPM\n        uses: pnpm/action-setup@v2\n        with:\n          version: 8\n\n      - name: Setup node and install dependencies\n        uses: ./.github/actions/setup-node-pnpm-install\n\n      - name: Type check\n        run: pnpm type-check\n```\n\n----------------------------------------\n\nTITLE: Running Maestro E2E Tests for React Native\nDESCRIPTION: Command to execute end-to-end tests using Maestro on a local emulator.\nSOURCE: https://github.com/obytes/react-native-template-obytes/blob/master/docs/src/content/docs/testing/end-to-end-testing.mdx#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm e2e-test\n```\n\n----------------------------------------\n\nTITLE: E2E Testing Workflow for Android in React Native Projects\nDESCRIPTION: A GitHub Actions workflow that runs end-to-end tests on Android using Maestro. It builds an APK and executes tests against it to ensure app functionality.\nSOURCE: https://github.com/obytes/react-native-template-obytes/blob/master/docs/src/content/docs/ci-cd/workflows-references.mdx#2025-04-18_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nname: E2E Tests for Android\n\n# This action works with pull requests and pushes to the main branch\non:\n  pull_request:\n  push:\n    branches: [main]\n\njobs:\n  e2e-android:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Install PNPM\n        uses: pnpm/action-setup@v2\n        with:\n          version: 8\n\n      - name: Setup node and install dependencies\n        uses: ./.github/actions/setup-node-pnpm-install\n\n      - name: Create .env file\n        run: cp .env.example .env\n\n      - name: Set app.json values\n        run: node -e \"const fs = require('fs'); const app = JSON.parse(fs.readFileSync('./app.json')); app.expo.android.package = 'com.obytes.staging'; fs.writeFileSync('./app.json', JSON.stringify(app, null, 2));\"\n\n      - name: Setup JDK & Generate APK\n        uses: ./.github/actions/setup-jdk-generate-apk\n\n      - name: Run Maestro cloud tests\n        uses: mobile-dev-inc/action-maestro-cloud@v1.3.1\n        with:\n          api-key: ${{ secrets.MAESTRO_CLOUD_API_KEY }}\n          app-file: android/app/build/outputs/apk/release/app-release.apk\n          env-variables: |\n            {\n              \"EMAIL\": \"${{ secrets.MAESTRO_TEST_EMAIL }}\",\n              \"PASSWORD\": \"${{ secrets.MAESTRO_TEST_PASSWORD }}\"\n            }\n```\n\n----------------------------------------\n\nTITLE: E2E Testing with EAS Build for Android in React Native\nDESCRIPTION: A GitHub Actions workflow that runs end-to-end tests on Android using EAS Build. It builds the app using EAS and then runs Maestro tests against it.\nSOURCE: https://github.com/obytes/react-native-template-obytes/blob/master/docs/src/content/docs/ci-cd/workflows-references.mdx#2025-04-18_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nname: E2E Tests for Android using EAS Build\n\n# This action is manually triggered\non:\n  workflow_dispatch:\n\njobs:\n  e2e-android-eas-build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Install PNPM\n        uses: pnpm/action-setup@v2\n        with:\n          version: 8\n\n      - name: Setup node and install dependencies\n        uses: ./.github/actions/setup-node-pnpm-install\n\n      - name: Create .env file\n        run: cp .env.example .env\n\n      - name: Set platform to android\n        run: node -e \"const fs = require('fs'); const app = JSON.parse(fs.readFileSync('./app.json')); app.expo.android.package = 'com.obytes.staging'; fs.writeFileSync('./app.json', JSON.stringify(app, null, 2));\"\n\n      - name: Setup EAS\n        run: pnpm add -g eas-cli\n\n      - name: Login to EAS\n        run: echo ${{ secrets.EXPO_TOKEN }} | eas login\n\n      - name: Run EAS Build - development build profile\n        run: eas build --platform android --profile development --non-interactive\n\n      # once the build is done we need to get the APK url and run maestro cloud tests\n      - name: Run Maestro cloud tests\n        uses: mobile-dev-inc/action-maestro-cloud@v1.3.1\n        with:\n          api-key: ${{ secrets.MAESTRO_CLOUD_API_KEY }}\n          app-file: ${{ env.APK_URL }}\n          env-variables: |\n            {\n              \"EMAIL\": \"${{ secrets.MAESTRO_TEST_EMAIL }}\",\n              \"PASSWORD\": \"${{ secrets.MAESTRO_TEST_PASSWORD }}\"\n            }\n```\n\n----------------------------------------\n\nTITLE: Sentry Test Component Implementation\nDESCRIPTION: React Native component for testing Sentry error reporting\nSOURCE: https://github.com/obytes/react-native-template-obytes/blob/master/docs/src/content/docs/recipes/sentry-setup.mdx#2025-04-18_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport React from 'react';\nimport { View, Button } from 'react-native';\nimport * as Sentry from '@sentry/react-native';\n\nconst SentryTestComponent = () => {\n  const throwJSError = () => {\n    throw new Error('Test JavaScript Error for Sentry');\n  };\n\n  const triggerNativeError = () => {\n    Sentry.nativeCrash();\n  };\n\n  return (\n    <View>\n      <Button title=\"Trigger JS Error\" onPress={throwJSError} />\n      <Button title=\"Trigger Native Error\" onPress={triggerNativeError} />\n    </View>\n  );\n};\n\nexport default SentryTestComponent;\n```\n\n----------------------------------------\n\nTITLE: Installing Maestro for React Native E2E Testing\nDESCRIPTION: Command to install Maestro using a npm script that runs a curl command to download and install Maestro.\nSOURCE: https://github.com/obytes/react-native-template-obytes/blob/master/docs/src/content/docs/testing/end-to-end-testing.mdx#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm install-maestro\n```\n\n----------------------------------------\n\nTITLE: Image Compression Workflow for React Native Projects\nDESCRIPTION: A GitHub Actions workflow that compresses images in the project to reduce app size. It runs automatically on PRs containing image files and creates a new PR with compressed images.\nSOURCE: https://github.com/obytes/react-native-template-obytes/blob/master/docs/src/content/docs/ci-cd/workflows-references.mdx#2025-04-18_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nname: Compress Images\n\n# runs for any push to any branch if there are changes to image files\non:\n  push:\n    paths:\n      - '**.jpg'\n      - '**.jpeg'\n      - '**.png'\n      - '**.webp'\n  pull_request:\n    paths:\n      - '**.jpg'\n      - '**.jpeg'\n      - '**.png'\n      - '**.webp'\n\njobs:\n  compress-images:\n    name: Compress all images\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      # checkout PR if it's a PR\n      - name: Checkout Pull Request\n        if: github.event_name == 'pull_request'\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        run: |\n          gh pr checkout ${{ github.event.pull_request.number }}\n\n      # Compress Images\n      - name: Compress Images\n        uses: calibreapp/image-actions@main\n        with:\n          githubToken: ${{ secrets.GITHUB_TOKEN }}\n          jpegQuality: '80'\n          jpegProgressive: false\n          pngQuality: '80'\n          webpQuality: '80'\n          ignorePaths: 'node_modules/**,ios/**,android/**,build/**,dist/**'\n```\n\n----------------------------------------\n\nTITLE: Apple Privacy Manifest for Sentry\nDESCRIPTION: Apple privacy manifest configuration for Sentry data collection\nSOURCE: https://github.com/obytes/react-native-template-obytes/blob/master/docs/src/content/docs/recipes/sentry-setup.mdx#2025-04-18_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"NSPrivacyCollectedDataTypes\": [\n    {\n      \"NSPrivacyCollectedDataType\": \"NSPrivacyCollectedDataTypeCrashData\",\n      \"NSPrivacyCollectedDataTypeLinked\": false,\n      \"NSPrivacyCollectedDataTypeTracking\": false,\n      \"NSPrivacyCollectedDataTypePurposes\": [\n        \"NSPrivacyCollectedDataTypePurposeAppFunctionality\"\n      ]\n    },\n    {\n      \"NSPrivacyCollectedDataType\": \"NSPrivacyCollectedDataTypePerformanceData\",\n      \"NSPrivacyCollectedDataTypeLinked\": false,\n      \"NSPrivacyCollectedDataTypeTracking\": false,\n      \"NSPrivacyCollectedDataTypePurposes\": [\n        \"NSPrivacyCollectedDataTypePurposeAppFunctionality\"\n      ]\n    },\n    {\n      \"NSPrivacyCollectedDataType\": \"NSPrivacyCollectedDataTypeOtherDiagnosticData\",\n      \"NSPrivacyCollectedDataTypeLinked\": false,\n      \"NSPrivacyCollectedDataTypeTracking\": false,\n      \"NSPrivacyCollectedDataTypePurposes\": [\n        \"NSPrivacyCollectedDataTypePurposeAppFunctionality\"\n      ]\n    }\n  ],\n  \"NSPrivacyAccessedAPITypes\": [\n    {\n      \"NSPrivacyAccessedAPIType\": \"NSPrivacyAccessedAPICategoryUserDefaults\",\n      \"NSPrivacyAccessedAPITypeReasons\": [\"CA92.1\"]\n    },\n    {\n      \"NSPrivacyAccessedAPIType\": \"NSPrivacyAccessedAPICategorySystemBootTime\",\n      \"NSPrivacyAccessedAPITypeReasons\": [\"35F9.1\"]\n    },\n    {\n      \"NSPrivacyAccessedAPIType\": \"NSPrivacyAccessedAPICategoryFileTimestamp\",\n      \"NSPrivacyAccessedAPITypeReasons\": [\"C617.1\"]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: EAS Build Action for React Native Applications\nDESCRIPTION: A reusable GitHub Action for running Expo Application Services (EAS) builds. This action authenticates with EAS and runs the specified build profile.\nSOURCE: https://github.com/obytes/react-native-template-obytes/blob/master/docs/src/content/docs/ci-cd/workflows-references.mdx#2025-04-18_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nname: EAS Build\ndescription: Run EAS Build with the specified profile\n\ninputs:\n  profile:\n    description: The EAS Build profile to use\n    required: true\n  eas-token:\n    description: EAS Token\n    required: true\n\nruns:\n  using: composite\n  steps:\n    - name: Setup EAS\n      shell: bash\n      run: pnpm add -g eas-cli\n\n    - name: Login to EAS\n      shell: bash\n      run: echo ${{ inputs.eas-token }} | eas login\n\n    - name: Run EAS Build\n      shell: bash\n      run: eas build --platform android --profile ${{ inputs.profile }} --non-interactive\n```\n\n----------------------------------------\n\nTITLE: Conventional Commit Examples\nDESCRIPTION: Provides real-world examples of properly formatted commit messages showing different types and scopes.\nSOURCE: https://github.com/obytes/react-native-template-obytes/blob/master/docs/src/content/docs/getting-started/rules-and-conventions.mdx#2025-04-18_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nfix(ui): fix input width\nfeat(ui): add button variants\nfeat(api): add usePost query hook\n```\n\n----------------------------------------\n\nTITLE: Git Commit Message Format Example\nDESCRIPTION: Shows the standard format for commit messages following conventional commits specification, with optional scope and required subject.\nSOURCE: https://github.com/obytes/react-native-template-obytes/blob/master/docs/src/content/docs/getting-started/rules-and-conventions.mdx#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntype(scope?): subject  #scope is optional; multiple scopes are supported (current delimiter options: \"/\", \"\\\" and \",\")\n```\n\n----------------------------------------\n\nTITLE: Setup Node and PNPM Installation Action in GitHub Actions\nDESCRIPTION: A reusable GitHub Action for setting up Node.js and installing dependencies using PNPM. This action handles caching to improve workflow efficiency.\nSOURCE: https://github.com/obytes/react-native-template-obytes/blob/master/docs/src/content/docs/ci-cd/workflows-references.mdx#2025-04-18_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: Setup Node & PNPM Install\ndescription: Setup Node.js and install dependencies using PNPM\n\nruns:\n  using: composite\n  steps:\n    - name: Setup Node.js\n      uses: actions/setup-node@v3\n      with:\n        node-version-file: '.nvmrc'\n        cache: 'pnpm'\n\n    - name: Install dependencies\n      shell: bash\n      run: pnpm install\n```\n\n----------------------------------------\n\nTITLE: Running Expo Doctor Command with pnpm\nDESCRIPTION: Command to run the Expo Doctor tool using pnpm to check for dependency issues in the React Native project.\nSOURCE: https://github.com/obytes/react-native-template-obytes/blob/master/prompts/expo-doctor.md#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm run doctor\n```\n\n----------------------------------------\n\nTITLE: Installing PNPM Package Manager\nDESCRIPTION: Command to globally install PNPM, which is a required package manager for the Obytes starter template.\nSOURCE: https://github.com/obytes/react-native-template-obytes/blob/master/docs/src/content/docs/getting-started/create-new-app.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g pnpm\n```\n\n----------------------------------------\n\nTITLE: Starlight Project Structure\nDESCRIPTION: Shows the directory structure of a typical Starlight project, including key folders like public for static assets, src for content and configuration, and important files like astro.config.mjs and package.json.\nSOURCE: https://github.com/obytes/react-native-template-obytes/blob/master/docs/README.md#2025-04-18_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n.\n├── public/\n├── src/\n│   ├── assets/\n│   ├── content/\n│   │   ├── docs/\n│   │   └── config.ts\n│   └── env.d.ts\n├── astro.config.mjs\n├── package.json\n└── tsconfig.json\n```\n\n----------------------------------------\n\nTITLE: Installing Starlight with Astro\nDESCRIPTION: Command to create a new Astro project using the Starlight template. This is the primary method for scaffolding a new documentation website using Starlight and Astro.\nSOURCE: https://github.com/obytes/react-native-template-obytes/blob/master/docs/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create astro@latest -- --template starlight\n```\n\n----------------------------------------\n\nTITLE: Opening Project in Cursor Editor\nDESCRIPTION: Command to open the project in Cursor, which is the recommended code editor for the Obytes starter template.\nSOURCE: https://github.com/obytes/react-native-template-obytes/blob/master/docs/src/content/docs/getting-started/create-new-app.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncursor .\n```\n\n----------------------------------------\n\nTITLE: Running Dependency Update Check Commands for React Native Projects\nDESCRIPTION: A sequence of commands to verify that everything works correctly after updating dependencies. It includes removing node_modules, installing new dependencies, running various checks (linting, type-checking, tests), cleaning and regenerating build folders, and building for iOS and Android platforms.\nSOURCE: https://github.com/obytes/react-native-template-obytes/blob/master/docs/src/content/docs/guides/upgrading-deps.mdx#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrm -rf node_modules ## remove node_modules folder\npnpm install ## install new dependencies\npnpm run doctor ## check for any issues with the dependencies you added to your project\npnpm lint ## linting\npnpm type-check ## type checking\npnpm test ## tests\npnpm prebuild --clean ## clean ios and android build folders and regenerate them\npnpm ios ## run ios build\npnpm android ## run android build\npnpm start -c ## start the server\n```\n\n----------------------------------------\n\nTITLE: Running Expo Doctor for Dependency Diagnosis\nDESCRIPTION: Command to run the Expo doctor script that identifies and helps fix issues related to the new version of Expo and devDependencies. It lists issues requiring manual attention and suggests package updates.\nSOURCE: https://github.com/obytes/react-native-template-obytes/blob/master/docs/src/content/docs/guides/upgrading-deps.mdx#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm run doctor ## a script inside the starter\n```\n\n----------------------------------------\n\nTITLE: Updating Non-Native Dependencies with Interactive Selection\nDESCRIPTION: Command for updating non-native (JavaScript only) dependencies using pnpm's interactive mode. This allows selective updating of dependencies while providing information about version changes.\nSOURCE: https://github.com/obytes/react-native-template-obytes/blob/master/docs/src/content/docs/guides/upgrading-deps.mdx#2025-04-18_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npnpm up -i\n```"
  }
]