[
  {
    "owner": "sqlc-dev",
    "repo": "sqlc",
    "content": "TITLE: Creating and Altering Tables in SQL\nDESCRIPTION: This snippet demonstrates how to create a table and perform various alterations using SQL statements. It shows creating an 'authors' table, adding a column, dropping a column, and renaming the table.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/howto/ddl.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE authors (\n  id          SERIAL PRIMARY KEY,\n  birth_year  int    NOT NULL\n);\n\nALTER TABLE authors ADD COLUMN bio text NOT NULL;\nALTER TABLE authors DROP COLUMN birth_year;\nALTER TABLE authors RENAME TO writers;\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Table and Query for Prepared Statements\nDESCRIPTION: SQL definition that creates a records table with an auto-incrementing ID and defines a named query to retrieve a record by ID. This will be used to demonstrate prepared statements when generated by SQLC.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/howto/prepared_query.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE records (\n  id SERIAL PRIMARY KEY\n);\n\n-- name: GetRecord :one\nSELECT * FROM records\nWHERE id = $1;\n```\n\n----------------------------------------\n\nTITLE: Configuring sqlc v2 with YAML\nDESCRIPTION: Example YAML configuration for sqlc version 2, showing project settings, SQL mappings, and code generation options for PostgreSQL and MySQL.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/reference/config.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nversion: \"2\"\ncloud:\n  project: \"<PROJECT_ID>\"\nsql:\n- schema: \"postgresql/schema.sql\"\n  queries: \"postgresql/query.sql\"\n  engine: \"postgresql\"\n  gen:\n    go: \n      package: \"authors\"\n      out: \"postgresql\"\n  database:\n    managed: true\n  rules:\n    - sqlc/db-prepare\n- schema: \"mysql/schema.sql\"\n  queries: \"mysql/query.sql\"\n  engine: \"mysql\"\n  gen:\n    go:\n      package: \"authors\"\n      out: \"mysql\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Go Main Program with Generated Code\nDESCRIPTION: Example Go program demonstrating usage of the generated sqlc code including database connection and CRUD operations.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/tutorials/getting-started-postgresql.md#2025-04-21_snippet_5\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"log\"\n\t\"reflect\"\n\n\t\"github.com/jackc/pgx/v5\"\n\t\"github.com/jackc/pgx/v5/pgtype\"\n\n\t\"tutorial.sqlc.dev/app/tutorial\"\n)\n\nfunc run() error {\n\tctx := context.Background()\n\n\tconn, err := pgx.Connect(ctx, \"user=pqgotest dbname=pqgotest sslmode=verify-full\")\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer conn.Close(ctx)\n\n\tqueries := tutorial.New(conn)\n\n\t// list all authors\n\tauthors, err := queries.ListAuthors(ctx)\n\tif err != nil {\n\t\treturn err\n\t}\n\tlog.Println(authors)\n\n\t// create an author\n\tinsertedAuthor, err := queries.CreateAuthor(ctx, tutorial.CreateAuthorParams{\n\t\tName: \"Brian Kernighan\",\n\t\tBio:  pgtype.Text{String: \"Co-author of The C Programming Language and The Go Programming Language\", Valid: true},\n\t})\n\tif err != nil {\n\t\treturn err\n\t}\n\tlog.Println(insertedAuthor)\n\n\t// get the author we just inserted\n\tfetchedAuthor, err := queries.GetAuthor(ctx, insertedAuthor.ID)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// prints true\n\tlog.Println(reflect.DeepEqual(insertedAuthor, fetchedAuthor))\n\treturn nil\n}\n\nfunc main() {\n\tif err := run(); err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring sqlc for SQLite in YAML\nDESCRIPTION: Sets up the sqlc configuration file (sqlc.yaml) to specify the SQLite engine, input files, and output settings for Go code generation.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/tutorials/getting-started-sqlite.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nversion: \"2\"\nsql:\n  - engine: \"sqlite\"\n    queries: \"query.sql\"\n    schema: \"schema.sql\"\n    gen:\n      go:\n        package: \"tutorial\"\n        out: \"tutorial\"\n```\n\n----------------------------------------\n\nTITLE: Defining PostgreSQL CRUD Queries\nDESCRIPTION: Set of SQL queries for basic CRUD operations on the authors table including get, list, create, update, and delete operations.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/tutorials/getting-started-postgresql.md#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\n-- name: GetAuthor :one\nSELECT * FROM authors\nWHERE id = $1 LIMIT 1;\n\n-- name: ListAuthors :many\nSELECT * FROM authors\nORDER BY name;\n\n-- name: CreateAuthor :one\nINSERT INTO authors (\n  name, bio\n) VALUES (\n  $1, $2\n)\nRETURNING *;\n\n-- name: UpdateAuthor :exec\nUPDATE authors\n  set name = $2,\n  bio = $3\nWHERE id = $1;\n\n-- name: DeleteAuthor :exec\nDELETE FROM authors\nWHERE id = $1;\n```\n\n----------------------------------------\n\nTITLE: Defining MySQL Database Schema\nDESCRIPTION: SQL schema definition creating an authors table with id, name, and bio fields\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/tutorials/getting-started-mysql.md#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE authors (\n  id   BIGINT  NOT NULL AUTO_INCREMENT PRIMARY KEY,\n  name text    NOT NULL,\n  bio  text\n);\n```\n\n----------------------------------------\n\nTITLE: Using Generated pgx Code with PostgreSQL Database\nDESCRIPTION: Go code example demonstrating how to use the sqlc-generated code with pgx to connect to a PostgreSQL database and execute a query.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/guides/using-go-and-pgx.rst#2025-04-21_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"os\"\n\n\t\"github.com/jackc/pgx/v5\"\n    \n\t\"example.com/sqlc-tutorial/db\"\n)\n\nfunc main() {\n\t// urlExample := \"postgres://username:password@localhost:5432/database_name\"\n\tconn, err := pgx.Connect(context.Background(), os.Getenv(\"DATABASE_URL\"))\n\tif err != nil {\n\t\tfmt.Fprintf(os.Stderr, \"Unable to connect to database: %v\\n\", err)\n\t\tos.Exit(1)\n\t}\n\tdefer conn.Close(context.Background())\n\n\tq := db.New(conn)\n\n\tauthor, err := q.GetAuthor(context.Background(), 1)\n\tif err != nil {\n\t\tfmt.Fprintf(os.Stderr, \"GetAuthor failed: %v\\n\", err)\n\t\tos.Exit(1)\n\t}\n\n\tfmt.Println(author.Name)\n}\n```\n\n----------------------------------------\n\nTITLE: Go Implementation for Queries with RETURNING Clause\nDESCRIPTION: Go code implementing queries that return data from insertions. Includes parameter structs and functions for handling both complete record return and ID-only return cases.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/howto/insert.md#2025-04-21_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage db\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n)\n\nconst createAuthor = `-- name: CreateAuthor :one\nINSERT INTO authors (\n  name, bio\n) VALUES (\n  $1, $2\n)\nRETURNING id, name, bio\n`\n\ntype CreateAuthorParams struct {\n\tName string\n\tBio  sql.NullString\n}\n\nfunc (q *Queries) CreateAuthor(ctx context.Context, arg CreateAuthorParams) (Author, error) {\n\trow := q.db.QueryRowContext(ctx, createAuthor, arg.Name, arg.Bio)\n\tvar i Author\n\terr := row.Scan(&i.ID, &i.Name, &i.Bio)\n\treturn i, err\n}\n\nconst createAuthorAndReturnId = `-- name: CreateAuthorAndReturnId :one\nINSERT INTO authors (\n  name, bio\n) VALUES (\n  $1, $2\n)\nRETURNING id\n`\n\ntype CreateAuthorAndReturnIdParams struct {\n\tName string\n\tBio  sql.NullString\n}\n\nfunc (q *Queries) CreateAuthorAndReturnId(ctx context.Context, arg CreateAuthorAndReturnIdParams) (int64, error) {\n\trow := q.db.QueryRowContext(ctx, createAuthorAndReturnId, arg.Name, arg.Bio)\n\tvar id int64\n\terr := row.Scan(&id)\n\treturn id, err\n}\n```\n\n----------------------------------------\n\nTITLE: Creating PostgreSQL Schema and Queries for Authors Table\nDESCRIPTION: SQL file that defines an authors table schema and various operations (get, list, create, delete) with sqlc annotations.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/guides/using-go-and-pgx.rst#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE authors (\n  id   BIGSERIAL PRIMARY KEY,\n  name text      NOT NULL,\n  bio  text\n);\n\n-- name: GetAuthor :one\nSELECT * FROM authors\nWHERE id = $1 LIMIT 1;\n\n-- name: ListAuthors :many\nSELECT * FROM authors\nORDER BY name;\n\n-- name: CreateAuthor :one\nINSERT INTO authors (\n  name, bio\n) VALUES (\n  $1, $2\n)\nRETURNING *;\n\n-- name: DeleteAuthor :exec\nDELETE FROM authors\nWHERE id = $1;\n```\n\n----------------------------------------\n\nTITLE: SQL Schema and Queries with RETURNING Clause\nDESCRIPTION: SQL schema for an authors table with RETURNING clauses to fetch data after insertion. Includes two query variations: one returning all columns and another returning only the ID.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/howto/insert.md#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\n-- Example queries for sqlc\nCREATE TABLE authors (\n  id   BIGSERIAL PRIMARY KEY,\n  name text      NOT NULL,\n  bio  text\n);\n\n-- name: CreateAuthor :one\nINSERT INTO authors (\n  name, bio\n) VALUES (\n  $1, $2\n)\nRETURNING *;\n\n-- name: CreateAuthorAndReturnId :one\nINSERT INTO authors (\n  name, bio\n) VALUES (\n  $1, $2\n)\nRETURNING id;\n```\n\n----------------------------------------\n\nTITLE: Creating Database Tables for Users, Videos, and Tags in SQL\nDESCRIPTION: This SQL snippet defines the schema for three tables: 'users', 'videos', and 'tags'. It sets up primary keys, foreign key relationships, and various column constraints.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/examples/jets/README.md#2025-04-21_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE users (\n  id serial PRIMARY KEY,\n  name varchar NOT NULL,\n);\n\nCREATE TABLE videos (\n  id serial PRIMARY KEY,\n  name varchar NOT NULL,\n  user_id int REFERENCES users(id),\n  created_at timestamp NOT NULL,\n);\n\nCREATE TABLE tags (\n  id serial PRIMARY KEY,\n  name varchar NOT NULL,\n);\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Schema and Query for Bulk Insert with COPY\nDESCRIPTION: SQL schema and query using the :copyfrom directive for PostgreSQL's COPY protocol, which provides much faster bulk inserts than sequential operations.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/howto/insert.md#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE authors (\n  id         SERIAL PRIMARY KEY,\n  name       text   NOT NULL,\n  bio        text   NOT NULL\n);\n\n-- name: CreateAuthors :copyfrom\nINSERT INTO authors (name, bio) VALUES ($1, $2);\n```\n\n----------------------------------------\n\nTITLE: Using sqlc.arg Macro in SQL Query\nDESCRIPTION: Demonstrates how to use the sqlc.arg macro to attach a name to a parameter in a SQL query. The macro expands to an engine-specific parameter placeholder.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/reference/macros.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n-- name: GetAuthorByName :one\nSELECT *\nFROM authors\nWHERE lower(name) = sqlc.arg(name);\n\n-- >>> EXPANDS TO >>>\n\n-- name: GetAuthorByName :one\nSELECT *\nFROM authors\nWHERE lower(name) = ?;\n```\n\n----------------------------------------\n\nTITLE: Transaction Implementation with Different SQL Drivers\nDESCRIPTION: Example implementations of a transaction using both lib/pq and pgx drivers, showing how to increment a counter within a transaction.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/howto/transactions.md#2025-04-21_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// Using `github/lib/pq` as the driver.\nfunc bumpCounter(ctx context.Context, db *sql.DB, queries *tutorial.Queries, id int32) error {\n\ttx, err := db.Begin()\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer tx.Rollback()\n\tqtx := queries.WithTx(tx)\n\tr, err := qtx.GetRecord(ctx, id)\n\tif err != nil {\n\t\treturn err\n\t}\n\tif err := qtx.UpdateRecord(ctx, tutorial.UpdateRecordParams{\n\t\tID:      r.ID,\n\t\tCounter: r.Counter + 1,\n\t}); err != nil {\n\t\treturn err\n\t}\n\treturn tx.Commit()\n}\n\n// Using `github.com/jackc/pgx/v5` as the driver.\nfunc bumpCounter(ctx context.Context, db *pgx.Conn, queries *tutorial.Queries, id int32) error {\n\ttx, err := db.Begin(ctx)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer tx.Rollback(ctx)\n\tqtx := queries.WithTx(tx)\n\tr, err := qtx.GetRecord(ctx, id)\n\tif err != nil {\n\t\treturn err\n\t}\n\tif err := qtx.UpdateRecord(ctx, tutorial.UpdateRecordParams{\n\t\tID:      r.ID,\n\t\tCounter: r.Counter + 1,\n\t}); err != nil {\n\t\treturn err\n\t}\n\treturn tx.Commit(ctx)\n}\n```\n\n----------------------------------------\n\nTITLE: SQLC CLI Commands and Usage\nDESCRIPTION: Lists all available commands and flags for the SQLC command line tool. Key commands include compile, generate, init, push, verify, and vet. Global flags allow specifying config files and controlling database/remote execution.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/reference/cli.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nUsage:\n  sqlc [command]\n\nAvailable Commands:\n  compile     Statically check SQL for syntax and type errors\n  completion  Generate the autocompletion script for the specified shell\n  createdb    Create an ephemeral database\n  diff        Compare the generated files to the existing files\n  generate    Generate source code from SQL\n  help        Help about any command\n  init        Create an empty sqlc.yaml settings file\n  push        Push the schema, queries, and configuration for this project\n  verify      Verify schema, queries, and configuration for this project\n  version     Print the sqlc version number\n  vet         Vet examines queries\n\nFlags:\n  -f, --file string    specify an alternate config file (default: sqlc.yaml)\n  -h, --help           help for sqlc\n      --no-database    disable database connections (default: false)\n      --no-remote      disable remote execution (default: false)\n\nUse \"sqlc [command] --help\" for more information about a command.\n```\n\n----------------------------------------\n\nTITLE: Batch Query Multiple Records (:batchmany)\nDESCRIPTION: Shows :batchmany annotation for PostgreSQL that generates batch query functionality for multiple records using pgx drivers.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/reference/query-annotations.md#2025-04-21_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\n-- name: BooksByTitleYear :batchmany\nSELECT * FROM books\nWHERE title = $1 AND year = $2;\n```\n\nLANGUAGE: go\nCODE:\n```\ntype BooksByTitleYearBatchResults struct {\n\tbr  pgx.BatchResults\n\tind int\n}\ntype BooksByTitleYearParams struct {\n\tTitle string `json:\"title\"`\n\tYear  int32  `json:\"year\"`\n}\n\nfunc (q *Queries) BooksByTitleYear(ctx context.Context, arg []BooksByTitleYearParams) *BooksByTitleYearBatchResults {\n\t//...\n}\nfunc (b *BooksByTitleYearBatchResults) Query(f func(int, []Book, error)) {\n\t//...\n}\nfunc (b *BooksByTitleYearBatchResults) Close() error {\n\t//...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Initial Database Schema with User Tables in SQL\nDESCRIPTION: SQL schema defining two tables: 'users' with a UUID primary key and 'user_actions' with foreign key relationship to users table. This represents the initial production schema before changes.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/howto/verify.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE users (\n  id UUID PRIMARY KEY\n);\n\nCREATE TABLE user_actions (\n  id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  action TEXT,\n  created_at TIMESTAMP\n);\n```\n\n----------------------------------------\n\nTITLE: Defining SQLite Schema for Authors Table\nDESCRIPTION: Creates the SQL schema for the 'authors' table with id, name, and bio fields.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/tutorials/getting-started-sqlite.md#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE authors (\n  id   INTEGER PRIMARY KEY,\n  name text    NOT NULL,\n  bio  text\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Go Database Operations\nDESCRIPTION: Example Go program demonstrating how to use the generated sqlc code to perform database operations\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/tutorials/getting-started-mysql.md#2025-04-21_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"log\"\n\t\"reflect\"\n\n\t_ \"github.com/go-sql-driver/mysql\"\n\n\t\"tutorial.sqlc.dev/app/tutorial\"\n)\n\nfunc run() error {\n\tctx := context.Background()\n\n\tdb, err := sql.Open(\"mysql\", \"user:password@/dbname?parseTime=true\")\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tqueries := tutorial.New(db)\n\n\t// list all authors\n\tauthors, err := queries.ListAuthors(ctx)\n\tif err != nil {\n\t\treturn err\n\t}\n\tlog.Println(authors)\n\n\t// create an author\n\tresult, err := queries.CreateAuthor(ctx, tutorial.CreateAuthorParams{\n\t\tName: \"Brian Kernighan\",\n\t\tBio:  sql.NullString{String: \"Co-author of The C Programming Language and The Go Programming Language\", Valid: true},\n\t})\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tinsertedAuthorID, err := result.LastInsertId()\n\tif err != nil {\n\t\treturn err\n\t}\n\tlog.Println(insertedAuthorID)\n\n\t// get the author we just inserted\n\tfetchedAuthor, err := queries.GetAuthor(ctx, insertedAuthorID)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// prints true\n\tlog.Println(reflect.DeepEqual(insertedAuthorID, fetchedAuthor.ID))\n\treturn nil\n}\n\nfunc main() {\n\tif err := run(); err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring sqlc YAML Settings\nDESCRIPTION: Configuration file that specifies MySQL as the database engine, input files for queries and schema, and output settings for Go code generation\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/tutorials/getting-started-mysql.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nversion: \"2\"\nsql:\n  - engine: \"mysql\"\n    queries: \"query.sql\"\n    schema: \"schema.sql\"\n    gen:\n      go:\n        package: \"tutorial\"\n        out: \"tutorial\"\n```\n\n----------------------------------------\n\nTITLE: Basic SQLC Query Annotation Format\nDESCRIPTION: The basic format for SQLC query annotations that must precede each SQL query. The format consists of a name and command.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/reference/query-annotations.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n-- name: <name> <command>\n```\n\n----------------------------------------\n\nTITLE: Query Multiple Records (:many)\nDESCRIPTION: Shows :many annotation that generates a Go function returning a slice of records via QueryContext.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/reference/query-annotations.md#2025-04-21_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\n-- name: ListAuthors :many\nSELECT * FROM authors\nORDER BY name;\n```\n\nLANGUAGE: go\nCODE:\n```\nfunc (q *Queries) ListAuthors(ctx context.Context) ([]Author, error) {\n\trows, err := q.db.QueryContext(ctx, listAuthors)\n\t// ...\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping PostgreSQL Enums to Go String Aliases\nDESCRIPTION: Illustrates how sqlc maps PostgreSQL enum types to Go string aliases, using a 'stores' table with a status enum.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/reference/datatypes.md#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TYPE status AS ENUM (\n  'open',\n  'closed'\n);\n\nCREATE TABLE stores (\n  name   text    PRIMARY KEY,\n  status status  NOT NULL\n);\n```\n\nLANGUAGE: go\nCODE:\n```\npackage db\n\ntype Status string\n\nconst (\n\tStatusOpen   Status = \"open\"\n\tStatusClosed Status = \"closed\"\n)\n\ntype Store struct {\n\tName   string\n\tStatus Status\n}\n```\n\n----------------------------------------\n\nTITLE: Complex Type Override Configuration in sqlc YAML\nDESCRIPTION: This YAML configuration showcases a more complex type override scenario. It demonstrates how to use the 'go_type' map for detailed configuration, including specifying a custom import path, package name, type name, and using a pointer to the type.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/howto/overrides.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nversion: \"2\"\nsql:\n- schema: \"postgresql/schema.sql\"\n  queries: \"postgresql/query.sql\"\n  engine: \"postgresql\"\n  gen:\n    go: \n      package: \"authors\"\n      out: \"db\"\n      sql_package: \"pgx/v5\"\n      overrides:\n        - db_type: \"uuid\"\n          go_type:\n            import: \"a/b/v2\"\n            package: \"b\"\n            type: \"MyType\"\n            pointer: true\n```\n\n----------------------------------------\n\nTITLE: Installing SQLite Driver for Go\nDESCRIPTION: Fetches the SQLite driver for Go and builds the project to ensure all dependencies are resolved.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/tutorials/getting-started-sqlite.md#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ngo get modernc.org/sqlite\ngo build ./...\n```\n\n----------------------------------------\n\nTITLE: Handling Null Values with database/sql Types\nDESCRIPTION: Demonstrates how sqlc handles null values using types from the database/sql package, using an 'authors' table with a nullable text column.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/reference/datatypes.md#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE authors (\n  id   SERIAL PRIMARY KEY,\n  name text   NOT NULL,\n  bio  text\n);\n```\n\nLANGUAGE: go\nCODE:\n```\npackage db\n\nimport (\n\t\"database/sql\"\n)\n\ntype Author struct {\n\tID   int\n\tName string\n\tBio  sql.NullString\n}\n```\n\n----------------------------------------\n\nTITLE: Basic sqlc Configuration for Code Generation\nDESCRIPTION: Example configuration showing how to set up sqlc.yaml for basic code generation with PostgreSQL. The configuration specifies query and schema files, and output settings for Go code.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/howto/generate.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nversion: \"2\"\nsql:\n  - engine: \"postgresql\"\n    queries: \"query.sql\"\n    schema: \"schema.sql\"\n    gen:\n      go:\n        package: \"tutorial\"\n        out: \"tutorial\"\n        sql_package: \"pgx/v5\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Per-Column Type Overrides in SQLC\nDESCRIPTION: This YAML snippet demonstrates how to override the Go type for a specific column in SQLC. It uses the 'column' property to target a specific table and column.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/reference/config.md#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nversion: \"1\"\npackages: [...]\noverrides:\n  - column: \"authors.id\"\n    go_type: \"github.com/segmentio/ksuid.KSUID\"\n```\n\n----------------------------------------\n\nTITLE: Setting Up sqlc Cloud Authentication\nDESCRIPTION: Commands to set up authentication token and push queries to sqlc Cloud for verification.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/tutorials/getting-started-postgresql.md#2025-04-21_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nexport SQLC_AUTH_TOKEN=\"<your sqlc auth token>\"\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ sqlc push --tag tutorial\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ sqlc verify --against tutorial\n```\n\n----------------------------------------\n\nTITLE: Implementing Go Program with Generated sqlc Code\nDESCRIPTION: Creates a Go program that uses the generated sqlc code to interact with an in-memory SQLite database, demonstrating author creation and retrieval.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/tutorials/getting-started-sqlite.md#2025-04-21_snippet_5\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t_ \"embed\"\n\t\"log\"\n\t\"reflect\"\n\n\t_ \"modernc.org/sqlite\"\n\n\t\"tutorial.sqlc.dev/app/tutorial\"\n)\n\n//go:embed schema.sql\nvar ddl string\n\nfunc run() error {\n\tctx := context.Background()\n\n\tdb, err := sql.Open(\"sqlite\", \":memory:\")\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// create tables\n\tif _, err := db.ExecContext(ctx, ddl); err != nil {\n\t\treturn err\n\t}\n\n\tqueries := tutorial.New(db)\n\n\t// list all authors\n\tauthors, err := queries.ListAuthors(ctx)\n\tif err != nil {\n\t\treturn err\n\t}\n\tlog.Println(authors)\n\n\t// create an author\n\tinsertedAuthor, err := queries.CreateAuthor(ctx, tutorial.CreateAuthorParams{\n\t\tName: \"Brian Kernighan\",\n\t\tBio:  sql.NullString{String: \"Co-author of The C Programming Language and The Go Programming Language\", Valid: true},\n\t})\n\tif err != nil {\n\t\treturn err\n\t}\n\tlog.Println(insertedAuthor)\n\n\t// get the author we just inserted\n\tfetchedAuthor, err := queries.GetAuthor(ctx, insertedAuthor.ID)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// prints true\n\tlog.Println(reflect.DeepEqual(insertedAuthor, fetchedAuthor))\n\treturn nil\n}\n\nfunc main() {\n\tif err := run(); err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Built-in sqlc/db-prepare Rule\nDESCRIPTION: YAML configuration example for using the built-in sqlc/db-prepare rule, which prepares queries against a connected database.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/howto/vet.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nversion: 2\nsql:\n  - schema: \"schema.sql\"\n    queries: \"query.sql\"\n    engine: \"postgresql\"\n    gen:\n      go:\n        package: \"authors\"\n        out: \"db\"\n    database:\n      uri: \"postgresql://postgres:password@localhost:5432/postgres\"\n    rules:\n      - sqlc/db-prepare\n```\n\n----------------------------------------\n\nTITLE: Mapping JSON to Custom Struct with pgx/v5\nDESCRIPTION: Illustrates how to map a JSON column to a custom struct when using the pgx/v5 SQL package, using a 'books' table and a custom BookData struct.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/reference/datatypes.md#2025-04-21_snippet_6\n\nLANGUAGE: go\nCODE:\n```\npackage dto\n\ntype BookData struct {\n\tGenres    []string `json:\"genres\"`\n\tTitle     string   `json:\"title\"`\n\tPublished bool     `json:\"published\"`\n}\n```\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE books (\n  data jsonb\n);\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"overrides\": [\n    {\n      \"column\": \"books.data\",\n      \"go_type\": {\n        \"import\":\"example/db\",\n        \"package\": \"dto\",\n        \"type\":\"BookData\"\n      }\n    }\n  ]\n}\n```\n\nLANGUAGE: go\nCODE:\n```\npackage db\n\nimport (\n\t\"example.com/db/dto\"\n)\n\ntype Book struct {\n    Data *dto.BookData\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Type Overrides in SQLC YAML Configuration\nDESCRIPTION: This YAML snippet demonstrates how to override the default type mapping for UUID in SQLC. It replaces the default UUID type with a custom package.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/reference/config.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nversion: \"1\"\npackages: [...]\noverrides:\n  - go_type: \"github.com/gofrs/uuid.UUID\"\n    db_type: \"uuid\"\n```\n\n----------------------------------------\n\nTITLE: Generating Go Structs from SQL Tables with Singular Names\nDESCRIPTION: Demonstrates how sqlc converts a pluralized table name 'authors' into a singular struct name 'Author' when generating Go code. The example shows a simple table with id and name columns.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/howto/structs.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE authors (\n  id   SERIAL PRIMARY KEY,\n  name text   NOT NULL\n);\n```\n\nLANGUAGE: go\nCODE:\n```\npackage db\n\n// Struct names use the singular form of table names\ntype Author struct {\n\tID   int\n\tName string\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping Date and Time Types to Go time.Time\nDESCRIPTION: Shows how sqlc maps date and time types to Go's time.Time struct, using an 'authors' table with timestamp columns.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/reference/datatypes.md#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE authors (\n  id         SERIAL    PRIMARY KEY,\n  created_at timestamp NOT NULL DEFAULT NOW(),\n  updated_at timestamp\n);\n```\n\nLANGUAGE: go\nCODE:\n```\npackage db\n\nimport (\n\t\"database/sql\"\n\t\"time\"\n)\n\ntype Author struct {\n\tID        int\n\tCreatedAt time.Time\n\tUpdatedAt sql.NullTime\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring sqlc Cloud Integration\nDESCRIPTION: Extended sqlc configuration including cloud project settings for additional verification features.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/tutorials/getting-started-postgresql.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nversion: \"2\"\ncloud:\n  # Replace <PROJECT_ID> with your project ID from the sqlc Cloud dashboard\n  project: \"<PROJECT_ID>\"\nsql:\n  - engine: \"postgresql\"\n    queries: \"query.sql\"\n    schema: \"schema.sql\"\n    gen:\n      go:\n        package: \"tutorial\"\n        out: \"tutorial\"\n        sql_package: \"pgx/v5\"\n```\n\n----------------------------------------\n\nTITLE: Configuring sqlc YAML Configuration\nDESCRIPTION: Basic sqlc configuration file that specifies PostgreSQL as the engine, input files, and Go output settings.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/tutorials/getting-started-postgresql.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nversion: \"2\"\nsql:\n  - engine: \"postgresql\"\n    queries: \"query.sql\"\n    schema: \"schema.sql\"\n    gen:\n      go:\n        package: \"tutorial\"\n        out: \"tutorial\"\n        sql_package: \"pgx/v5\"\n```\n\n----------------------------------------\n\nTITLE: Generating GORM-Compatible Struct in Go\nDESCRIPTION: This code snippet demonstrates the desired output format for a GORM-compatible struct generated by sqlc. It includes GORM tags and custom types for database fields.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/internal/endtoend/testdata/column_alias/issue.md#2025-04-21_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\ntype User struct {\n\tID        int64     `gorm:\"primaryKey\"`\n\tName      string    `gorm:\"column:username\"`\n\tEmail     string    `gorm:\"column:email\"`\n\tCreatedAt time.Time `gorm:\"column:created_at\"`\n\tUpdatedAt time.Time `gorm:\"column:updated_at\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Using sqlc.slice Macro in SQL Query\nDESCRIPTION: Shows how to use the sqlc.slice macro for drivers that don't support passing slices to the IN operator. It generates a dynamic query at runtime with the correct number of parameters.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/reference/macros.md#2025-04-21_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\n/* name: SelectStudents :many */\nSELECT * FROM students \nWHERE age IN (sqlc.slice(\"ages\"))\n\n-- >>> EXPANDS TO >>>\n\n/* name: SelectStudents :many */\nSELECT id, name, age FROM authors \nWHERE age IN (/*SLICE:ages*/?)\n```\n\n----------------------------------------\n\nTITLE: Generating Go Structs with JSON Tags\nDESCRIPTION: Shows how sqlc generates JSON tags for struct fields when 'emit_json_tags' is enabled in the configuration. The JSON tags match the original column names from the database schema.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/howto/structs.md#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE authors (\n  id         SERIAL    PRIMARY KEY,\n  created_at timestamp NOT NULL\n);\n```\n\nLANGUAGE: go\nCODE:\n```\npackage db\n\nimport (\n\t\"time\"\n)\n\ntype Author struct {\n\tID        int       `json:\"id\"`\n\tCreatedAt time.Time `json:\"created_at\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Generated Go Code for Prepared Queries with Transaction Support\nDESCRIPTION: Go code generated by SQLC when emit_prepared_queries is set to true. Includes functionality for preparing statements, query execution with prepared statements, and transaction support.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/howto/prepared_query.md#2025-04-21_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage db\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"fmt\"\n)\n\ntype Record struct {\n\tID int32\n}\n\ntype DBTX interface {\n\tPrepareContext(context.Context, string) (*sql.Stmt, error)\n\tQueryRowContext(context.Context, string, ...interface{}) *sql.Row\n}\n\nfunc New(db DBTX) *Queries {\n\treturn &Queries{db: db}\n}\n\nfunc Prepare(ctx context.Context, db DBTX) (*Queries, error) {\n\tq := Queries{db: db}\n\tvar err error\n\tif q.getRecordStmt, err = db.PrepareContext(ctx, getRecord); err != nil {\n\t\treturn nil, fmt.Errorf(\"error preparing query GetRecord: %w\", err)\n\t}\n\treturn &q, nil\n}\n\nfunc (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {\n\tswitch {\n\tcase stmt != nil && q.tx != nil:\n\t\treturn q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)\n\tcase stmt != nil:\n\t\treturn stmt.QueryRowContext(ctx, args...)\n\tdefault:\n\t\treturn q.db.QueryRowContext(ctx, query, args...)\n\t}\n}\n\ntype Queries struct {\n\tdb            DBTX\n\ttx            *sql.Tx\n\tgetRecordStmt *sql.Stmt\n}\n\nfunc (q *Queries) WithTx(tx *sql.Tx) *Queries {\n\treturn &Queries{\n\t\tdb:            tx,\n\t\ttx:            tx,\n\t\tgetRecordStmt: q.getRecordStmt,\n\t}\n}\n\nconst getRecord = `-- name: GetRecord :one\nSELECT id FROM records\nWHERE id = $1\n`\n\nfunc (q *Queries) GetRecord(ctx context.Context, id int32) (int32, error) {\n\trow := q.queryRow(ctx, q.getRecordStmt, getRecord, id)\n\terr := row.Scan(&id)\n\treturn id, err\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Go Implementation for SQL Insertions\nDESCRIPTION: Go code implementing a database interface and the CreateAuthor query function. It defines a DBTX interface for database transactions and sets up the necessary structures for executing the insert query.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/howto/insert.md#2025-04-21_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage db\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n)\n\ntype DBTX interface {\n\tExecContext(context.Context, string, ...interface{}) (sql.Result, error)\n}\n\nfunc New(db DBTX) *Queries {\n\treturn &Queries{db: db}\n}\n\ntype Queries struct {\n\tdb DBTX\n}\n\nconst createAuthor = `-- name: CreateAuthor :exec\nINSERT INTO authors (bio) VALUES ($1)\n`\n\nfunc (q *Queries) CreateAuthor(ctx context.Context, bio string) error {\n\t_, err := q.db.ExecContext(ctx, createAuthor, bio)\n\treturn err\n}\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Based Database Configuration in YAML\nDESCRIPTION: Configuration example demonstrating how to use environment variables for database connection strings in sqlc managed database setup.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/howto/managed-databases.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '2'\nservers:\n- engine: postgresql\n  uri: ${DATABASE_URI}\nsql:\n- schema: schema.sql\n  queries: query.sql\n  engine: postgresql\n  database:\n    managed: true\n```\n\n----------------------------------------\n\nTITLE: Basic Managed Database Configuration in YAML\nDESCRIPTION: Basic configuration example showing how to set up managed databases in sqlc by specifying the PostgreSQL engine, connection URI, and enabling the managed database feature.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/howto/managed-databases.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '2'\nservers:\n- engine: postgresql\n  uri: \"postgres://localhost:5432/postgres?sslmode=disable\"\nsql:\n- schema: schema.sql\n  queries: query.sql\n  engine: postgresql\n  database:\n    managed: true\n```\n\n----------------------------------------\n\nTITLE: Comparing Current and Proposed Query Generation in Go\nDESCRIPTION: This snippet shows the current query generation output and a proposed simplified version when golang_convert_nulls_to_pointers=true. The simplified version removes redundant pointer conversions for nullable columns.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/internal/endtoend/testdata/select_sequence/issue.md#2025-04-21_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\n// Current:\nreturn &User{\n\tID: row.ID,\n\tName: row.Name,\n\tEmail: &row.Email, // row.Email is already a *string\n}\n\n// Proposed:\nreturn &User{\n\tID: row.ID,\n\tName: row.Name,\n\tEmail: row.Email,\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Actions workflow for sqlc diff\nDESCRIPTION: GitHub Workflow configuration that runs 'sqlc diff' on every push, ensuring generated code is up to date. Uses the setup-sqlc action to install sqlc.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/howto/ci-cd.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: sqlc\non: [push]\njobs:\n  diff:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n    - uses: sqlc-dev/setup-sqlc@v3\n      with:\n        sqlc-version: '1.29.0'\n    - run: sqlc diff\n```\n\n----------------------------------------\n\nTITLE: Mapping PostgreSQL Arrays to Go Slices\nDESCRIPTION: Demonstrates how sqlc maps PostgreSQL array types to Go slices, using a 'places' table with a text array column.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/reference/datatypes.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE places (\n  name text   not null,\n  tags text[]\n);\n```\n\nLANGUAGE: go\nCODE:\n```\npackage db\n\ntype Place struct {\n\tName string\n\tTags []string\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Actions workflow for sqlc verify and push\nDESCRIPTION: Complete GitHub Workflow configuration for running both 'sqlc verify' and 'sqlc push'. Verify checks database migrations against existing queries, while push is conditionally run only on the main branch.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/howto/ci-cd.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nname: sqlc\non: [push]\njobs:\n  verify:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n    - uses: sqlc-dev/setup-sqlc@v3\n      with:\n        sqlc-version: '1.29.0'\n    - uses: sqlc-dev/action-setup-postgres@master\n      with:\n        postgres-version: \"16\"\n      id: postgres\n    - run: sqlc verify\n      env:\n        POSTGRESQL_SERVER_URI: ${{ steps.postgres.outputs.connection-uri }}?sslmode=disable\n        SQLC_AUTH_TOKEN: ${{ secrets.SQLC_AUTH_TOKEN }}\n  push:\n    runs-on: ubuntu-latest\n    if: ${{ github.ref == 'refs/heads/main' }}\n    steps:\n    - uses: sqlc-dev/setup-sqlc@v3\n      with:\n        sqlc-version: '1.29.0'\n    - run: sqlc push\n      env:\n        SQLC_AUTH_TOKEN: ${{ secrets.SQLC_AUTH_TOKEN }}\n```\n\n----------------------------------------\n\nTITLE: MySQL Schema and Query for Bulk Insert\nDESCRIPTION: SQL schema and query using the :copyfrom directive for MySQL's LOAD DATA functionality, enabling bulk data loading.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/howto/insert.md#2025-04-21_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE foo (a text, b integer, c DATETIME, d DATE);\n\n-- name: InsertValues :copyfrom\nINSERT INTO foo (a, b, c, d) VALUES (?, ?, ?, ?);\n```\n\n----------------------------------------\n\nTITLE: Generated SQLC Database Interface in Go\nDESCRIPTION: Auto-generated Go code by SQLC that provides the database interface and transaction support through WithTx method.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/howto/transactions.md#2025-04-21_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage tutorial\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n)\n\ntype DBTX interface {\n\tExecContext(context.Context, string, ...interface{}) (sql.Result, error)\n\tPrepareContext(context.Context, string) (*sql.Stmt, error)\n\tQueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)\n\tQueryRowContext(context.Context, string, ...interface{}) *sql.Row\n}\n\nfunc New(db DBTX) *Queries {\n\treturn &Queries{db: db}\n}\n\ntype Queries struct {\n\tdb DBTX\n}\n\nfunc (q *Queries) WithTx(tx *sql.Tx) *Queries {\n\treturn &Queries{\n\t\tdb: tx,\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a SQL View\nDESCRIPTION: This SQL snippet demonstrates the creation of a view named 'user_view' that combines data from the 'users' and 'accounts' tables.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/internal/endtoend/testdata/ddl_create_table_like/issue.md#2025-04-21_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE VIEW user_view AS\nSELECT u.id, u.name, a.balance\nFROM users u\nJOIN accounts a ON u.id = a.user_id;\n```\n\n----------------------------------------\n\nTITLE: Configuring Process Plugin in SQLC\nDESCRIPTION: Example configuration for using a process-based JSON plugin in SQLC. Demonstrates how to specify the plugin command and configure output options.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/guides/plugins.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '2'\nplugins:\n- name: jsonb\n  process:\n    cmd: sqlc-gen-json\nsql:\n- schema: schema.sql\n  queries: query.sql\n  engine: postgresql\n  codegen:\n  - out: gen\n    plugin: jsonb\n    options:\n      indent: \"  \"\n      filename: codegen.json\n```\n\n----------------------------------------\n\nTITLE: Go Implementation of Author Count Queries\nDESCRIPTION: Implements the SQL queries in Go using database/sql package. Includes interface definition, query execution, and result handling for both single count and grouped count queries.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/howto/query_count.md#2025-04-21_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage db\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n)\n\ntype DBTX interface {\n\tQueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)\n\tQueryRowContext(context.Context, string, ...interface{}) *sql.Row\n}\n\nfunc New(db DBTX) *Queries {\n\treturn &Queries{db: db}\n}\n\ntype Queries struct {\n\tdb DBTX\n}\n\nconst countAuthors = `-- name: CountAuthors :one\nSELECT count(*) FROM authors\n`\n\nfunc (q *Queries) CountAuthors(ctx context.Context) (int, error) {\n\trow := q.db.QueryRowContext(ctx, countAuthors)\n\tvar i int\n\terr := row.Scan(&i)\n\treturn i, err\n}\n\nconst countAuthorsByTown = `-- name: CountAuthorsByTown :many\nSELECT hometown, count(*) FROM authors\nGROUP BY 1\nORDER BY 1\n`\n\ntype CountAuthorsByTownRow struct {\n\tHometown string\n\tCount    int\n}\n\nfunc (q *Queries) CountAuthorsByTown(ctx context.Context) ([]CountAuthorsByTownRow, error) {\n\trows, err := q.db.QueryContext(ctx, countAuthorsByTown)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer rows.Close()\n\titems := []CountAuthorsByTownRow{}\n\tfor rows.Next() {\n\t\tvar i CountAuthorsByTownRow\n\t\tif err := rows.Scan(&i.Hometown, &i.Count); err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\titems = append(items, i)\n\t}\n\tif err := rows.Close(); err != nil {\n\t\treturn nil, err\n\t}\n\tif err := rows.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\treturn items, nil\n}\n```\n\n----------------------------------------\n\nTITLE: sql-migrate Migration Example\nDESCRIPTION: This example shows a sql-migrate migration creating a 'people' table and the corresponding Go struct generated by sqlc. It includes both up and down migrations.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/howto/ddl.md#2025-04-21_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\n-- +migrate Up\n-- SQL in section 'Up' is executed when this migration is applied\nCREATE TABLE people (id int);\n\n\n-- +migrate Down\n-- SQL section 'Down' is executed when this migration is rolled back\nDROP TABLE people;\n```\n\nLANGUAGE: go\nCODE:\n```\npackage db\n\ntype People struct {\n\tID int32\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Schema and Queries for Author Counting\nDESCRIPTION: Defines an authors table with id and hometown columns, along with queries to count total authors and group counts by hometown. Uses SQL GROUP BY and ORDER BY for aggregation.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/howto/query_count.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE authors (\n  id       SERIAL PRIMARY KEY,\n  hometown text   NOT NULL\n);\n\n-- name: CountAuthors :one\nSELECT count(*) FROM authors;\n\n-- name: CountAuthorsByTown :many\nSELECT hometown, count(*) FROM authors\nGROUP BY 1\nORDER BY 1;\n```\n\n----------------------------------------\n\nTITLE: Go Implementation for PostgreSQL Bulk Insert\nDESCRIPTION: Go code snippet showing the CreateAuthorsParams struct and function signature for PostgreSQL bulk insert implementation using the COPY protocol.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/howto/insert.md#2025-04-21_snippet_5\n\nLANGUAGE: go\nCODE:\n```\ntype CreateAuthorsParams struct {\n\tName string\n\tBio  string\n}\n\nfunc (q *Queries) CreateAuthors(ctx context.Context, arg []CreateAuthorsParams) (int64, error) {\n\t...\n}\n```\n\n----------------------------------------\n\nTITLE: Querying a SQL View\nDESCRIPTION: This SQL snippet shows how to query the 'user_view' view, which would be used as input for sqlc to generate Go code.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/internal/endtoend/testdata/ddl_create_table_like/issue.md#2025-04-21_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\n-- name: GetUserView :many\nSELECT * FROM user_view\nWHERE balance > $1;\n```\n\n----------------------------------------\n\nTITLE: Configuring EXPLAIN-based Rules for PostgreSQL and MySQL\nDESCRIPTION: YAML configuration examples for sqlc vet rules that utilize EXPLAIN output from PostgreSQL and MySQL databases.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/howto/vet.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nrules:\n- name: postgresql-query-too-costly\n  message: \"Query cost estimate is too high\"\n  rule: \"postgresql.explain.plan.total_cost > 1.0\"\n- name: postgresql-no-seq-scan\n  message: \"Query plan results in a sequential scan\"\n  rule: \"postgresql.explain.plan.node_type == 'Seq Scan'\"\n- name: mysql-query-too-costly\n  message: \"Query cost estimate is too high\"\n  rule: \"has(mysql.explain.query_block.cost_info) && double(mysql.explain.query_block.cost_info.query_cost) > 2.0\"\n- name: mysql-must-use-primary-key\n  message: \"Query plan doesn't use primary key\"\n  rule: \"has(mysql.explain.query_block.table.key) && mysql.explain.query_block.table.key != 'PRIMARY'\"\n```\n\n----------------------------------------\n\nTITLE: Querying Student Records and Test Scores With Embedding\nDESCRIPTION: This SQL query uses the sqlc.embed function to select data from both tables while maintaining their structure. It demonstrates how to use embedding in sqlc queries.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/howto/embedding.md#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\n-- name: ScoreAndTests :many\nSELECT sqlc.embed(students), sqlc.embed(test_scores)\nFROM students\nJOIN test_scores ON test_scores.student_id = students.id\nWHERE students.id = $1;\n```\n\n----------------------------------------\n\nTITLE: Implementing Author Deletion in Go with sqlc\nDESCRIPTION: This Go code implements the DeleteAuthor function using sqlc. It defines a DBTX interface, creates a Queries struct, and executes the SQL delete query.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/howto/delete.md#2025-04-21_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage db\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n)\n\ntype DBTX interface {\n\tExecContext(context.Context, string, ...interface{}) (sql.Result, error)\n}\n\nfunc New(db DBTX) *Queries {\n\treturn &Queries{db: db}\n}\n\ntype Queries struct {\n\tdb DBTX\n}\n\nconst deleteAuthor = `-- name: DeleteAuthor :exec\nDELETE FROM authors WHERE id = $1\n`\n\nfunc (q *Queries) DeleteAuthor(ctx context.Context, id int) error {\n\t_, err := q.db.ExecContext(ctx, deleteAuthor, id)\n\treturn err\n}\n```\n\n----------------------------------------\n\nTITLE: Batch Execute Query (:batchexec)\nDESCRIPTION: Shows :batchexec annotation for PostgreSQL that generates batch execution functionality using pgx drivers.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/reference/query-annotations.md#2025-04-21_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\n-- name: DeleteBook :batchexec\nDELETE FROM books\nWHERE book_id = $1;\n```\n\nLANGUAGE: go\nCODE:\n```\ntype DeleteBookBatchResults struct {\n\tbr  pgx.BatchResults\n\tind int\n}\n\nfunc (q *Queries) DeleteBook(ctx context.Context, bookID []int32) *DeleteBookBatchResults {\n\t//...\n}\nfunc (b *DeleteBookBatchResults) Exec(f func(int, error)) {\n\t//...\n}\nfunc (b *DeleteBookBatchResults) Close() error {\n\t//...\n}\n```\n\n----------------------------------------\n\nTITLE: Execute Query with Last Insert ID (:execlastid)\nDESCRIPTION: Shows :execlastid annotation that generates a Go function returning the last inserted ID.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/reference/query-annotations.md#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\n-- name: InsertAuthor :execlastid\nINSERT INTO authors (name) VALUES (?);\n```\n\nLANGUAGE: go\nCODE:\n```\nfunc (q *Queries) InsertAuthor(ctx context.Context, name string) (int64, error) {\n\t_, err := q.db.ExecContext(ctx, insertAuthor, name)\n\t// ...\n}\n```\n\n----------------------------------------\n\nTITLE: Writing MySQL CRUD Queries\nDESCRIPTION: Set of SQL queries for basic CRUD operations on the authors table, including select, insert, and delete operations\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/tutorials/getting-started-mysql.md#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\n-- name: GetAuthor :one\nSELECT * FROM authors\nWHERE id = ? LIMIT 1;\n\n-- name: ListAuthors :many\nSELECT * FROM authors\nORDER BY name;\n\n-- name: CreateAuthor :execresult\nINSERT INTO authors (\n  name, bio\n) VALUES (\n  ?, ?\n);\n\n-- name: DeleteAuthor :exec\nDELETE FROM authors\nWHERE id = ?;\n```\n\n----------------------------------------\n\nTITLE: Querying SQL with Named Boolean Parameter\nDESCRIPTION: This SQL query demonstrates the use of a named boolean parameter in a SELECT statement. The parameter is named 'is_admin' and is used in the WHERE clause.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/internal/endtoend/testdata/json_param_type/issue.md#2025-04-21_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\n-- name: GetAdmins :many\nSELECT id, name FROM users WHERE is_admin = @is_admin;\n```\n\n----------------------------------------\n\nTITLE: Configuring Field Renaming in SQLC YAML Configuration\nDESCRIPTION: This YAML configuration shows how to rename generated struct fields in SQLC. It uses the 'rename' mapping to specify custom names for fields derived from database column names.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/reference/config.md#2025-04-21_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nversion: \"1\"\npackages: [...]\nrename:\n  spotify_url: \"SpotifyURL\"\n```\n\n----------------------------------------\n\nTITLE: SQL Query with Nullable Parameters\nDESCRIPTION: Example using sqlc.narg() to explicitly specify nullable parameters, allowing optional updates to author fields.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/howto/named_parameters.md#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\n-- name: UpdateAuthor :one\nUPDATE author\nSET\n name = coalesce(sqlc.narg('name'), name),\n bio = coalesce(sqlc.narg('bio'), bio)\nWHERE id = sqlc.arg('id')\nRETURNING *;\n```\n\nLANGUAGE: go\nCODE:\n```\ntype UpdateAuthorParams struct {\n\tName sql.NullString\n\tBio  sql.NullString\n\tID   int64\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Actions workflow for sqlc vet\nDESCRIPTION: GitHub Workflow configuration for running 'sqlc vet' to check SQL queries against lint rules. Includes setup for a PostgreSQL server for database connection, which is optional but required for some built-in lint rules.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/howto/ci-cd.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nname: sqlc\non: [push]\njobs:\n  vet:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n    - uses: sqlc-dev/setup-sqlc@v3\n      with:\n        sqlc-version: '1.29.0'\n    # Start a PostgreSQL server\n    - uses: sqlc-dev/action-setup-postgres@master\n      with:\n        postgres-version: \"16\"\n      id: postgres\n    - run: sqlc vet\n      env:\n        POSTGRESQL_SERVER_URI: ${{ steps.postgres.outputs.connection-uri }}?sslmode=disable\n\n```\n\n----------------------------------------\n\nTITLE: Writing SQL Query to Join User Tables\nDESCRIPTION: A SQL query named 'GetUserActions' that joins the users and user_actions tables, ordering results by created_at timestamp. This is the initial query running in production.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/howto/verify.md#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n-- name: GetUserActions :many\nSELECT * FROM users u\nJOIN user_actions ua ON u.id = ua.user_id\nORDER BY created_at;\n```\n\n----------------------------------------\n\nTITLE: Execute Query with Affected Rows (:execrows)\nDESCRIPTION: Demonstrates :execrows annotation that generates a Go function returning the number of affected rows.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/reference/query-annotations.md#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\n-- name: DeleteAllAuthors :execrows\nDELETE FROM authors;\n```\n\nLANGUAGE: go\nCODE:\n```\nfunc (q *Queries) DeleteAllAuthors(ctx context.Context) (int64, error) {\n\t_, err := q.db.ExecContext(ctx, deleteAllAuthors)\n\t// ...\n}\n```\n\n----------------------------------------\n\nTITLE: Writing SQL Queries for Author Operations\nDESCRIPTION: Defines SQL queries for getting, listing, creating, updating, and deleting authors, with sqlc annotations for code generation.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/tutorials/getting-started-sqlite.md#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\n-- name: GetAuthor :one\nSELECT * FROM authors\nWHERE id = ? LIMIT 1;\n\n-- name: ListAuthors :many\nSELECT * FROM authors\nORDER BY name;\n\n-- name: CreateAuthor :one\nINSERT INTO authors (\n  name, bio\n) VALUES (\n  ?, ?\n)\nRETURNING *;\n\n-- name: UpdateAuthor :exec\nUPDATE authors\nset name = ?,\nbio = ?\nWHERE id = ?;\n\n-- name: DeleteAuthor :exec\nDELETE FROM authors\nWHERE id = ?;\n```\n\n----------------------------------------\n\nTITLE: Defining Table Valued Function in SQL Server\nDESCRIPTION: This SQL snippet demonstrates the creation of a Table Valued Function named 'fn_GetEmployees' in SQL Server. The function takes a department ID as a parameter and returns a table of employee information for that department.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/internal/endtoend/testdata/func_return_table_columns/issue.md#2025-04-21_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE FUNCTION fn_GetEmployees (@DepartmentID INT)\nRETURNS TABLE\nAS\nRETURN\n(\n    SELECT EmployeeID, FirstName, LastName\n    FROM Employees\n    WHERE DepartmentID = @DepartmentID\n)\n```\n\n----------------------------------------\n\nTITLE: dbmate Migration Example\nDESCRIPTION: This example shows a dbmate migration creating a 'foo' table and the corresponding Go struct generated by sqlc. It includes both up and down migrations.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/howto/ddl.md#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\n-- migrate:up\nCREATE TABLE foo (bar INT NOT NULL);\n\n-- migrate:down\nDROP TABLE foo;\n```\n\nLANGUAGE: go\nCODE:\n```\npackage db\n\ntype Foo struct {\n\tBar int32\n}\n```\n\n----------------------------------------\n\nTITLE: Atlas Migration Example\nDESCRIPTION: This example shows an Atlas migration creating a 'post' table and the corresponding Go struct generated by sqlc. It demonstrates how sqlc interprets Atlas migrations.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/howto/ddl.md#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\n-- Create \"post\" table\nCREATE TABLE \"public\".\"post\" (\"id\" integer NOT NULL, \"title\" text NULL, \"body\" text NULL, PRIMARY KEY (\"id\"));\n```\n\nLANGUAGE: go\nCODE:\n```\npackage db\n\ntype Post struct {\n\tID    int\n\tTitle sql.NullString\n\tBody  sql.NullString\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring sqlc for Migration Parsing\nDESCRIPTION: This YAML configuration snippet shows how to set up sqlc to parse migrations from a directory instead of a schema file. It specifies the engine, queries, schema (migration directory), and output settings.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/howto/ddl.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nversion: \"2\"\nsql:\n  - engine: \"postgresql\"\n    queries: \"query.sql\"\n    schema: \"db/migrations\"\n    gen:\n      go:\n        package: \"tutorial\"\n        out: \"tutorial\"\n```\n\n----------------------------------------\n\nTITLE: Querying Student Records and Test Scores Without Embedding\nDESCRIPTION: This SQL query selects all columns from both the students and test_scores tables, joining them on the student_id. It demonstrates a typical approach without using embedding.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/howto/embedding.md#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n-- name: ScoreAndTests :many\nSELECT students.*, test_scores.*\nFROM students\nJOIN test_scores ON test_scores.student_id = students.id\nWHERE students.id = $1;\n```\n\n----------------------------------------\n\nTITLE: Configuring sqlc Cloud Project in YAML\nDESCRIPTION: Configuration setup for sqlc Cloud project identification in the sqlc configuration file.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/howto/push.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nversion: \"2\"\ncloud:\n  project: \"<PROJECT_ID>\"\n```\n\n----------------------------------------\n\nTITLE: Basic SQL Schema and Insert Query Definition\nDESCRIPTION: SQL schema creating an authors table with a SERIAL primary key and a text column, along with a named query for inserting an author.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/howto/insert.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE authors (\n  id         SERIAL PRIMARY KEY,\n  bio        text   NOT NULL\n);\n\n-- name: CreateAuthor :exec\nINSERT INTO authors (bio) VALUES ($1);\n```\n\n----------------------------------------\n\nTITLE: SQL Query with IN Clause Example\nDESCRIPTION: Example SQL query using an IN clause with a large number of parameters that causes issues with sqlc parameter expansion\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/internal/endtoend/testdata/nested_select/issue.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM foo WHERE id IN ($1, $2, $3, ..., $N)\n```\n\n----------------------------------------\n\nTITLE: Querying JSON Data with PostgreSQL\nDESCRIPTION: This SQL query retrieves data from a JSON column, filtering based on a specific key-value pair. It's noted to be causing performance issues due to the lack of an index on the JSON data.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/internal/endtoend/testdata/case_value_param/issue.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT id FROM items WHERE data->>'key' = 'value';\n```\n\n----------------------------------------\n\nTITLE: Running sqlc verify Command to Detect Schema Compatibility Issues\nDESCRIPTION: Shell command demonstrating how to run sqlc verify, with sample output showing a failure case where the schema change would cause ambiguity in existing queries.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/howto/verify.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ sqlc verify\nFAIL: app query.sql\n\n=== Failed\n=== FAIL: app query.sql GetUserActions\n    ERROR: column reference \"created_at\" is ambiguous (SQLSTATE 42702)\n```\n\n----------------------------------------\n\nTITLE: Configuration for Managed Database-backed Analysis\nDESCRIPTION: Example configuration for using managed databases with sqlc generate. This setup creates an ephemeral database with your schema to improve query analysis, with local caching for improved performance.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/howto/generate.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nversion: \"2\"\nservers:\n- engine: postgresql\n  uri: \"postgres://locahost:5432/postgres?sslmode=disable\"\nsql:\n  - engine: \"postgresql\"\n    queries: \"query.sql\"\n    schema: \"schema.sql\"\n    database:\n      managed: true\n    gen:\n      go:\n        out: \"db\"\n        sql_package: \"pgx/v5\"\n```\n\n----------------------------------------\n\nTITLE: Configuring sqlc with Python plugin\nDESCRIPTION: Example YAML configuration for sqlc using a Python plugin, demonstrating how to specify plugin options and database settings.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/reference/config.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '2'\nplugins:\n- name: py\n  wasm:\n    url: https://github.com/sqlc-dev/sqlc-gen-python/releases/download/v0.16.0-alpha/sqlc-gen-python.wasm\n    sha256: 428476c7408fd4c032da4ec74e8a7344f4fa75e0f98a5a3302f238283b9b95f2\nsql:\n- schema: \"schema.sql\"\n  queries: \"query.sql\"\n  engine: postgresql\n  codegen:\n  - out: src/authors\n    plugin: py\n    options:\n      package: authors\n      emit_sync_querier: true\n      emit_async_querier: true\n      query_parameter_limit: 5\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Server with Docker Compose\nDESCRIPTION: A Docker Compose configuration file for setting up a MySQL 8.0 server locally. It exposes port 3306, creates a database named 'dinotest', and sets up root credentials.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/guides/migrating-off-hosted-managed-databases.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nversion: \"3.8\"\nservices:\n  mysql:\n    image: \"mysql/mysql-server:8.0\"\n    ports:\n      - \"3306:3306\"\n    restart: always\n    environment:\n      MYSQL_DATABASE: dinotest\n      MYSQL_ROOT_PASSWORD: mysecretpassword\n      MYSQL_ROOT_HOST: '%'\n```\n\n----------------------------------------\n\nTITLE: Query Single Record (:one)\nDESCRIPTION: Shows :one annotation that generates a Go function returning a single record via QueryRowContext.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/reference/query-annotations.md#2025-04-21_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\n-- name: GetAuthor :one\nSELECT * FROM authors\nWHERE id = $1 LIMIT 1;\n```\n\nLANGUAGE: go\nCODE:\n```\nfunc (q *Queries) GetAuthor(ctx context.Context, id int64) (Author, error) {\n\trow := q.db.QueryRowContext(ctx, getAuthor, id)\n\t// ...\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Single Author by ID in SQL\nDESCRIPTION: This query fetches a single author record from the 'authors' table based on the provided ID. It returns the id, name, and bio fields, limiting the result to one row.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/internal/endtoend/testdata/process_plugin_format_json/gen/hello.txt#2025-04-21_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT id, name, bio FROM authors\nWHERE id = $1 LIMIT 1\n```\n\n----------------------------------------\n\nTITLE: Configuring sqlc Cloud Integration\nDESCRIPTION: Extended YAML configuration that includes sqlc Cloud project settings for additional query verification\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/tutorials/getting-started-mysql.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nversion: \"2\"\ncloud:\n  # Replace <PROJECT_ID> with your project ID from the sqlc Cloud dashboard\n  project: \"<PROJECT_ID>\"\nsql:\n  - engine: \"mysql\"\n    queries: \"query.sql\"\n    schema: \"schema.sql\"\n    gen:\n      go:\n        package: \"tutorial\"\n        out: \"tutorial\"\n```\n\n----------------------------------------\n\nTITLE: Creating PostgreSQL Schema Definition\nDESCRIPTION: SQL schema definition creating an authors table with id, name, and bio fields.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/tutorials/getting-started-postgresql.md#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE authors (\n  id   BIGSERIAL PRIMARY KEY,\n  name text      NOT NULL,\n  bio  text\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Protobuf Messages for sqlc Vet Configuration\nDESCRIPTION: Proto definitions for Config, Query, and Parameter messages used in sqlc vet's CEL expressions to access configuration and query information.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/howto/vet.md#2025-04-21_snippet_0\n\nLANGUAGE: proto\nCODE:\n```\nmessage Config\n{\n  string version = 1;\n  string engine = 2 ;\n  repeated string schema = 3;\n  repeated string queries = 4;\n}\n\nmessage Query\n{\n  // SQL body\n  string sql = 1;\n  // Name of the query\n  string name = 2; \n  // One of \"many\", \"one\", \"exec\", etc.\n  string cmd = 3;\n  // Query parameters, if any\n  repeated Parameter params = 4;\n}\n\nmessage Parameter\n{\n  int32 number = 1;\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Query Using sqlc.slice\nDESCRIPTION: MySQL query demonstrating the use of sqlc.slice for handling IN clauses with dynamic parameters.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/reference/changelog.md#2025-04-21_snippet_17\n\nLANGUAGE: sql\nCODE:\n```\n/* name: SelectStudents :many */\nSELECT * FROM students \nWHERE age IN (sqlc.slice(\"ages\"))\n```\n\n----------------------------------------\n\nTITLE: Installing sqlc on macOS using Homebrew\nDESCRIPTION: Command to install sqlc using the Homebrew package manager on macOS systems.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/overview/install.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbrew install sqlc\n```\n\n----------------------------------------\n\nTITLE: Execute Query with Result Return (:execresult)\nDESCRIPTION: Shows :execresult annotation that generates a Go function returning sql.Result from ExecContext.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/reference/query-annotations.md#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\n-- name: DeleteAllAuthors :execresult\nDELETE FROM authors;\n```\n\nLANGUAGE: go\nCODE:\n```\nfunc (q *Queries) DeleteAllAuthors(ctx context.Context) (sql.Result, error) {\n\treturn q.db.ExecContext(ctx, deleteAllAuthors)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Null Type in Go\nDESCRIPTION: This Go code snippet defines a custom 'NullMood' type to handle nullable 'Mood' values, implementing necessary interfaces for database operations.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/internal/endtoend/testdata/invalid_update_unknown_column/issue.md#2025-04-21_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\ntype NullMood struct {\n\tMood  Mood\n\tValid bool\n}\n\nfunc (m *NullMood) Scan(value interface{}) error {\n\t// ...\n}\n\nfunc (m NullMood) Value() (driver.Value, error) {\n\t// ...\n}\n```\n\n----------------------------------------\n\nTITLE: Building sqlc for Local Development\nDESCRIPTION: Compiles the sqlc project and creates an executable named 'sqlc-dev' in the user's Go bin directory. This allows for local development without conflicting with an existing sqlc installation.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/guides/development.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo build -o ~/go/bin/sqlc-dev ./cmd/sqlc\n```\n\n----------------------------------------\n\nTITLE: Creating Database Schema in SQL\nDESCRIPTION: SQL schema definition creating a records table with an auto-incrementing ID and counter field.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/howto/transactions.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE records (\n  id SERIAL PRIMARY KEY,\n  counter INT NOT NULL\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Type Overrides in sqlc YAML Configuration\nDESCRIPTION: This YAML configuration demonstrates how to override the default UUID type mapping in sqlc. It specifies using the UUID type from github.com/google/uuid instead of the default pgx/v5 UUID type for PostgreSQL UUID columns.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/howto/overrides.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nversion: \"2\"\nsql:\n- schema: \"postgresql/schema.sql\"\n  queries: \"postgresql/query.sql\"\n  engine: \"postgresql\"\n  gen:\n    go: \n      package: \"authors\"\n      out: \"db\"\n      sql_package: \"pgx/v5\"\n      overrides:\n        - db_type: \"uuid\"\n          go_type:\n            import: \"github.com/google/uuid\"\n            type: \"UUID\"\n```\n\n----------------------------------------\n\nTITLE: Single Parameter Update Query in SQL\nDESCRIPTION: SQL query to update all authors' bios with a single parameter.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/howto/update.md#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n-- name: UpdateAuthorBios :exec\nUPDATE authors SET bio = $1;\n```\n\n----------------------------------------\n\nTITLE: Inserting New Author with Returning Clause in SQL\nDESCRIPTION: This query inserts a new author record into the 'authors' table. It takes the name and bio as parameters and returns the newly inserted record's id, name, and bio fields.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/internal/endtoend/testdata/process_plugin_format_json/gen/hello.txt#2025-04-21_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nINSERT INTO authors (\n          name, bio\n) VALUES (\n  $1, $2\n)\nRETURNING id, name, bio\n```\n\n----------------------------------------\n\nTITLE: Configuring sqlc Vet Rules in YAML\nDESCRIPTION: Example YAML configuration for sqlc, demonstrating how to define and enable custom lint rules for SQL queries.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/howto/vet.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nversion: 2\nsql:\n  - schema: \"query.sql\"\n    queries: \"query.sql\"\n    engine: \"postgresql\"\n    gen:\n      go:\n        package: \"authors\"\n        out: \"db\"\n    rules:\n      - no-pg\n      - no-delete\n      - only-one-param\n      - no-exec\nrules:\n  - name: no-pg\n    message: \"invalid engine: postgresql\"\n    rule: |\n      config.engine == \"postgresql\"\n  - name: no-delete\n    message: \"don't use delete statements\"\n    rule: |\n      query.sql.contains(\"DELETE\")\n  - name: only-one-param\n    message: \"too many parameters\"\n    rule: |\n      query.params.size() > 1\n  - name: no-exec\n    message: \"don't use exec\"\n    rule: |\n      query.cmd == \"exec\"\n```\n\n----------------------------------------\n\nTITLE: Generated Go Struct with Nullable Custom Type\nDESCRIPTION: This Go code snippet shows the generated struct for the 'person' table, including a nullable custom type 'Mood'.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/internal/endtoend/testdata/invalid_update_unknown_column/issue.md#2025-04-21_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\ntype Person struct {\n\tID   int64\n\tName string\n\tMood *Mood\n}\n```\n\n----------------------------------------\n\nTITLE: Generated Go Code for Single Parameter Update\nDESCRIPTION: Generated Go code implementing the single parameter update query with database interface and execution logic.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/howto/update.md#2025-04-21_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage db\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n)\n\ntype DBTX interface {\n\tExecContext(context.Context, string, ...interface{}) (sql.Result, error)\n}\n\nfunc New(db DBTX) *Queries {\n\treturn &Queries{db: db}\n}\n\ntype Queries struct {\n\tdb DBTX\n}\n\nconst updateAuthorBios = `-- name: UpdateAuthorBios :exec\nUPDATE authors SET bio = $1\n`\n\nfunc (q *Queries) UpdateAuthorBios(ctx context.Context, bio string) error {\n\t_, err := q.db.ExecContext(ctx, updateAuthorBios, bio)\n\treturn err\n}\n```\n\n----------------------------------------\n\nTITLE: Execute Query with Error Return (:exec)\nDESCRIPTION: Demonstrates :exec annotation that generates a Go function returning only an error from ExecContext.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/reference/query-annotations.md#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n-- name: DeleteAuthor :exec\nDELETE FROM authors\nWHERE id = $1;\n```\n\nLANGUAGE: go\nCODE:\n```\nfunc (q *Queries) DeleteAuthor(ctx context.Context, id int64) error {\n\t_, err := q.db.ExecContext(ctx, deleteAuthor, id)\n\treturn err\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Query with Named Parameters using sqlc.arg()\nDESCRIPTION: Improved version using sqlc.arg() for named parameters, resulting in more meaningful parameter names in the generated Go struct.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/howto/named_parameters.md#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n-- name: UpsertAuthorName :one\nUPDATE author\nSET\n  name = CASE WHEN sqlc.arg(set_name)::bool\n    THEN sqlc.arg(name)::text\n    ELSE name\n    END\nRETURNING *;\n```\n\nLANGUAGE: go\nCODE:\n```\ntype UpdateAuthorNameParams struct {\n\tSetName bool   `json:\"set_name\"`\n\tName    string `json:\"name\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Tern Migration Example\nDESCRIPTION: This example shows a Tern migration creating a 'comment' table and the corresponding Go struct generated by sqlc. It includes both up and down migrations in a single file.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/howto/ddl.md#2025-04-21_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE comment (id int NOT NULL, text text NOT NULL);\n---- create above / drop below ----\nDROP TABLE comment;\n```\n\nLANGUAGE: go\nCODE:\n```\npackage db\n\ntype Comment struct {\n\tID   int32\n\tText string\n}\n```\n\n----------------------------------------\n\nTITLE: Listing All Authors Ordered by Name in SQL\nDESCRIPTION: This query retrieves all author records from the 'authors' table, returning the id, name, and bio fields. The results are ordered alphabetically by the author's name.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/internal/endtoend/testdata/process_plugin_format_json/gen/hello.txt#2025-04-21_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT id, name, bio FROM authors\nORDER BY name\n```\n\n----------------------------------------\n\nTITLE: Configuring sqlc database connection with environment variables\nDESCRIPTION: Example YAML configuration for sqlc demonstrating how to use environment variables in the database connection URI.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/reference/config.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '2'\nsql:\n- schema: schema.sql\n  queries: query.sql\n  engine: postgresql\n  database:\n    uri: postgresql://postgres:${PG_PASSWORD}@localhost:5432/authors\n  gen:\n    go:\n      package: authors\n      out: postgresql\n```\n\n----------------------------------------\n\nTITLE: Retrieving an Author by ID\nDESCRIPTION: Defines a SQL query and Go function to retrieve an author from the database by their ID. It returns the author's details including ID, name, and bio.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/internal/endtoend/testdata/diff_output/stderr.txt#2025-04-21_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\n-- name: GetAuthor :one\nSELECT id, name, bio FROM authors\nWHERE id = $1 LIMIT 1\n```\n\nLANGUAGE: Go\nCODE:\n```\nfunc (q *Queries) GetAuthor(ctx context.Context, id int64) (Author, error) {\n\trow := q.db.QueryRowContext(ctx, getAuthor, id)\n\tvar i Author\n\terr := row.Scan(&i.ID, &i.Name, &i.Bio)\n\treturn i, err\n}\n```\n\n----------------------------------------\n\nTITLE: Using Tern with a PostgreSQL Schema\nDESCRIPTION: Example SQL schema file that would be used with Tern for database migrations. It includes table definitions with primary keys, foreign keys, and timestamps for a basic user and post relationship.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/internal/endtoend/testdata/cte_recursive_subquery/issue.md#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE users (\n  id UUID PRIMARY KEY,\n  name TEXT NOT NULL,\n  created_at TIMESTAMP NOT NULL\n);\n\nCREATE TABLE posts (\n  id UUID PRIMARY KEY,\n  user_id UUID NOT NULL REFERENCES users(id),\n  title TEXT NOT NULL,\n  body TEXT NOT NULL,\n  created_at TIMESTAMP NOT NULL\n);\n```\n\n----------------------------------------\n\nTITLE: Batch Query Single Record (:batchone)\nDESCRIPTION: Shows :batchone annotation for PostgreSQL that generates batch query functionality for single records using pgx drivers.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/reference/query-annotations.md#2025-04-21_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\n-- name: CreateBook :batchone\nINSERT INTO books (\n    author_id,\n    isbn\n) VALUES (\n    $1,\n    $2\n)\nRETURNING book_id, author_id, isbn\n```\n\nLANGUAGE: go\nCODE:\n```\ntype CreateBookBatchResults struct {\n\tbr  pgx.BatchResults\n\tind int\n}\ntype CreateBookParams struct {\n\tAuthorID int32  `json:\"author_id\"`\n\tIsbn     string `json:\"isbn\"`\n}\n\nfunc (q *Queries) CreateBook(ctx context.Context, arg []CreateBookParams) *CreateBookBatchResults {\n\t//...\n}\nfunc (b *CreateBookBatchResults) QueryRow(f func(int, Book, error)) {\n\t//...\n}\nfunc (b *CreateBookBatchResults) Close() error {\n\t//...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PostGIS Geometry with go-geos\nDESCRIPTION: Demonstrates how to configure sqlc to use the go-geos package for working with PostGIS geometry types, including SQL schema, configuration, and Go setup.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/reference/datatypes.md#2025-04-21_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\n-- Multipolygons in British National Grid (epsg:27700)\ncreate table shapes(\n  id serial,\n  name varchar,\n  geom geometry(Multipolygon, 27700)\n);\n\n-- name: GetCentroids :many\nSELECT id, name, ST_Centroid(geom)::geometry FROM shapes;\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": 2,\n  \"gen\": {\n    \"go\": {\n      \"overrides\": [\n        {\n          \"db_type\": \"geometry\",\n          \"go_type\": {\n            \"import\": \"github.com/twpayne/go-geos\",\n            \"package\": \"geos\",\n            \"pointer\": true,\n            \"type\": \"Geom\"\n          },\n          \"nullable\": true\n        }\n      ]\n    }\n  }\n}\n```\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"github.com/twpayne/go-geos\"\n    pgxgeos \"github.com/twpayne/pgx-geos\"\n)\n\n// ...\n\nconfig.AfterConnect = func(ctx context.Context, conn *pgx.Conn) error {\n    if err := pgxgeos.Register(ctx, conn, geos.NewContext()); err != nil {\n        return err\n    }\n    return nil\n}\n```\n\n----------------------------------------\n\nTITLE: Installing PostgreSQL Driver Dependencies\nDESCRIPTION: Commands to install the required PostgreSQL driver (pgx) and build the project.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/tutorials/getting-started-postgresql.md#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ngo get github.com/jackc/pgx/v5\ngo build ./...\n```\n\n----------------------------------------\n\nTITLE: Multiple Parameter Update Query in SQL\nDESCRIPTION: SQL query to update a specific author's bio using id and bio parameters.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/howto/update.md#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\n-- name: UpdateAuthor :exec\nUPDATE authors SET bio = $2\nWHERE id = $1;\n```\n\n----------------------------------------\n\nTITLE: Generated Go Struct With Embedding\nDESCRIPTION: This Go struct represents the result of the SQL query with embedding. It shows how the Student and TestScore models are embedded within the result struct, maintaining the original table structure.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/howto/embedding.md#2025-04-21_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ntype ScoreAndTestsRow struct {\n\tStudent   Student\n\tTestScore TestScore\n}\n```\n\n----------------------------------------\n\nTITLE: Expected Go Code with Correct Boolean Parameter Type\nDESCRIPTION: This Go code snippet shows the expected correct generation of the struct and method, where the 'IsAdmin' field is properly typed as bool.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/internal/endtoend/testdata/json_param_type/issue.md#2025-04-21_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\ntype GetAdminsParams struct {\n\tIsAdmin bool\n}\n\nfunc (q *Queries) GetAdmins(ctx context.Context, arg GetAdminsParams) ([]User, error) {\n\trows, err := q.db.QueryContext(ctx, getAdmins, arg.IsAdmin)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer rows.Close()\n\t// ... rest of the function\n}\n```\n\n----------------------------------------\n\nTITLE: Migrated Package Configuration in YAML Format\nDESCRIPTION: Example of the migrated YAML package configuration using the sqlc-gen-python plugin, showing how to move settings into the plugin options.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/guides/migrating-to-sqlc-gen-python.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n  sql:\n  - schema: \"schema.sql\"\n    queries: \"query.sql\"\n    engine: \"postgresql\"\n    codegen:\n    - plugin: \"py\"\n      out: \"src\"\n      options:\n        package: \"foo\"\n        emit_sync_querier: true\n        emit_async_querier: true\n        query_parameter_limit: 5\n```\n\n----------------------------------------\n\nTITLE: Code Generation Configuration with Managed Database in YAML\nDESCRIPTION: Complete configuration example for code generation with managed databases, including output directory specification for Go code generation.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/howto/managed-databases.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '2'\nservers:\n- engine: postgresql\n  uri: \"postgres://localhost:5432/postgres?sslmode=disable\"\nsql:\n- schema: schema.sql\n  queries: query.sql\n  engine: postgresql\n  database:\n    managed: true\n  gen:\n    go:\n      out: \"db\"\n```\n\n----------------------------------------\n\nTITLE: golang-migrate Migration Example\nDESCRIPTION: This example shows a golang-migrate migration creating a 'post' table and the corresponding Go struct generated by sqlc. It includes separate up and down migration files.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/howto/ddl.md#2025-04-21_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE post (\n    id    int NOT NULL,\n    title text,\n    body  text,\n    PRIMARY KEY(id)\n);\n```\n\nLANGUAGE: sql\nCODE:\n```\nDROP TABLE post;\n```\n\nLANGUAGE: go\nCODE:\n```\npackage db\n\ntype Post struct {\n\tID    int\n\tTitle sql.NullString\n\tBody  sql.NullString\n}\n```\n\n----------------------------------------\n\nTITLE: Go Implementation for MySQL Bulk Insert\nDESCRIPTION: Go function signature for MySQL bulk insert implementation using LOAD DATA, showing how to handle multiple rows at once.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/howto/insert.md#2025-04-21_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nfunc (q *Queries) InsertValues(ctx context.Context, arg []InsertValuesParams) (int64, error) {\n\t...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Authors Table and Delete Query in SQL\nDESCRIPTION: This SQL snippet creates an 'authors' table with 'id' and 'bio' columns, and defines a named query for deleting an author by ID.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/howto/delete.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE authors (\n  id         SERIAL PRIMARY KEY,\n  bio        text   NOT NULL\n);\n\n-- name: DeleteAuthor :exec\nDELETE FROM authors WHERE id = $1;\n```\n\n----------------------------------------\n\nTITLE: Generated Go Struct Without Embedding\nDESCRIPTION: This Go struct represents the result of the SQL query without embedding. It shows a flattened list of columns from both tables combined into a single struct.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/howto/embedding.md#2025-04-21_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype ScoreAndTestsRow struct {\n\tID        int64\n\tName      string\n\tAge       int32\n\tStudentID int64\n\tScore     int32\n\tGrade     string\n}\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Multi-Row Insert Function in Go\nDESCRIPTION: This Go code snippet demonstrates how the proposed multi-row insert function would be used in practice. It shows calling the function with values for two rows.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/internal/endtoend/testdata/json_array_elements/issue.md#2025-04-21_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nerr := q.InsertFoo(ctx, 1, \"a\", 2, \"b\")\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Context Cancellation Issue with SQLC-Generated Code in Go\nDESCRIPTION: Code snippet showing how SQLC-generated code doesn't properly handle context cancellation in database queries. The issue demonstrates that when a context is cancelled, the connection is returned to the pool and the query continues to run on the server.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/internal/endtoend/testdata/cte_update/issue.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"os\"\n\t\"time\"\n\n\t_ \"github.com/jackc/pgx/v4/stdlib\"\n)\n\nfunc main() {\n\tctx := context.Background()\n\tdb, err := sql.Open(\"pgx\", \"postgres://user:password@localhost/database\")\n\tif err != nil {\n\t\tfmt.Fprintf(os.Stderr, \"failed to connect to database: %v\\n\", err)\n\t\tos.Exit(1)\n\t}\n\n\tctx, cancel := context.WithTimeout(ctx, 1*time.Second)\n\tdefer cancel()\n\n\trows, err := db.QueryContext(ctx, `SELECT pg_sleep(10), now()`)\n\tif err != nil {\n\t\tfmt.Fprintf(os.Stderr, \"failed to execute query: %v\\n\", err)\n\t\treturn\n\t}\n\tdefer rows.Close()\n\n\tvar sleep string\n\tvar now time.Time\n\n\tfor rows.Next() {\n\t\tif err := rows.Scan(&sleep, &now); err != nil {\n\t\t\tfmt.Fprintf(os.Stderr, \"failed to scan row: %v\\n\", err)\n\t\t\treturn\n\t\t}\n\t}\n\n\tif err := rows.Err(); err != nil {\n\t\tfmt.Fprintf(os.Stderr, \"failed to iterate over rows: %v\\n\", err)\n\t\treturn\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Renaming Tables in sqlc YAML Configuration (v2)\nDESCRIPTION: Shows how to rename the generated struct for a table using the 'rename' option in YAML v2 format.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/howto/rename.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nversion: \"2\"\nsql:\n  - engine: postgresql\n    queries: query.sql\n    schema: query.sql\noverrides:\n  go:\n    rename:\n      author: Writer\n```\n\n----------------------------------------\n\nTITLE: Goose Migration Example\nDESCRIPTION: This example shows a Goose migration creating a 'post' table and the corresponding Go struct generated by sqlc. It includes both up and down migrations in a single file.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/howto/ddl.md#2025-04-21_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\n-- +goose Up\nCREATE TABLE post (\n    id    int NOT NULL,\n    title text,\n    body  text,\n    PRIMARY KEY(id)\n);\n\n-- +goose Down\nDROP TABLE post;\n```\n\nLANGUAGE: go\nCODE:\n```\npackage db\n\ntype Post struct {\n\tID    int\n\tTitle sql.NullString\n\tBody  sql.NullString\n}\n```\n\n----------------------------------------\n\nTITLE: Global Overrides Configuration (YAML)\nDESCRIPTION: Example demonstrating how to set global type overrides and field renaming across multiple specifications.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/reference/config.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nversion: \"2\"\noverrides:\n  go:\n    rename:\n      id: \"Identifier\"\n    overrides:\n      - db_type: \"timestamptz\"\n        nullable: true\n        engine: \"postgresql\"\n        go_type:\n          import: \"gopkg.in/guregu/null.v4\"\n          package: \"null\"\n          type: \"Time\"\nsql:\n- schema: \"postgresql/schema.sql\"\n  queries: \"postgresql/query.sql\"\n  engine: \"postgresql\"\n  gen:\n    go: \n      package: \"authors\"\n      out: \"postgresql\"\n- schema: \"mysql/schema.sql\"\n  queries: \"mysql/query.sql\"\n  engine: \"mysql\"\n  gen:\n    go:\n      package: \"authors\"\n      out: \"mysql\"\n```\n\n----------------------------------------\n\nTITLE: Configuring PostGIS Geometry with go-geom\nDESCRIPTION: Shows how to configure sqlc to use the go-geom package for working with PostGIS geometry types, including SQL schema and configuration.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/reference/datatypes.md#2025-04-21_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\n-- Multipolygons in British National Grid (epsg:27700)\ncreate table shapes(\n  id serial,\n  name varchar,\n  geom geometry(Multipolygon, 27700)\n);\n\n-- name: GetShapes :many\nSELECT * FROM shapes;\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": \"1\",\n  \"packages\": [\n    {\n      \"path\": \"db\",\n      \"engine\": \"postgresql\",\n      \"schema\": \"query.sql\",\n      \"queries\": \"query.sql\"\n    }\n  ],\n  \"overrides\": [\n    {\n      \"db_type\": \"geometry\",\n      \"go_type\": \"github.com/twpayne/go-geom.MultiPolygon\"\n    },\n    {\n      \"db_type\": \"geometry\",\n      \"go_type\": \"github.com/twpayne/go-geom.MultiPolygon\",\n      \"nullable\": true\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Generated Go Struct for Modified Table\nDESCRIPTION: This Go code snippet shows the resulting struct generated by sqlc after the table modifications. It represents the 'writers' table (formerly 'authors') with its current structure.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/howto/ddl.md#2025-04-21_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage db\n\ntype Writer struct {\n\tID  int\n\tBio string\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Implementation of Dynamic Row Type in Go\nDESCRIPTION: A partial implementation of the proposed Row interface showing how a map-based row representation could be implemented to provide dynamic access to database row values.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/internal/endtoend/testdata/copyfrom_named_params/issue.md#2025-04-21_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype mapRow map[string]any\n\nfunc (r mapRow) Get(col string) any {\n\treturn r[col]\n}\n\nfunc (r mapRow) GetNullable(col string) (any, bool) {\n\tv, ok := r[col]\n\treturn v, ok\n}\n```\n\n----------------------------------------\n\nTITLE: Using sqlc.embed Macro in SQL Query\nDESCRIPTION: Shows how to use the sqlc.embed macro to reuse existing model structs in queries, reducing manual serialization work.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/reference/macros.md#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\n-- name: GetStudentAndScore :one\nSELECT sqlc.embed(students), sqlc.embed(test_scores)\nFROM students\nJOIN test_scores ON test_scores.student_id = students.id\nWHERE students.id = $1;\n\n-- >>> EXPANDS TO >>>\n\n-- name: GetStudentAndScore :one\nSELECT students.*, test_scores.*\nFROM students\nJOIN test_scores ON test_scores.student_id = students.id\nWHERE students.id = $1;\n```\n\n----------------------------------------\n\nTITLE: Pushing Schema and Queries with Tags in sqlc\nDESCRIPTION: Demonstrates how to use the new tag feature when pushing schema and queries to sqlc Cloud. Tags can be used to associate pushes with relevant environment information like git tags or branch names.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/reference/changelog.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ sqlc push --tag v1.0.0\n```\n\n----------------------------------------\n\nTITLE: Configuring sqlc.yaml for pgx Integration\nDESCRIPTION: YAML configuration for sqlc that specifies PostgreSQL as the engine and sets pgx/v5 as the SQL package.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/guides/using-go-and-pgx.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nversion: \"2\"\nsql:\n  - engine: \"postgresql\"\n    queries: \"query.sql\"\n    schema: \"query.sql\"\n    gen:\n      go:\n        package: \"db\"\n        sql_package: \"pgx/v5\"\n        out: \"db\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Table in SQL\nDESCRIPTION: Defines an 'authors' table in SQL, which sqlc will use to generate a corresponding struct.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/howto/rename.md#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE authors (\n  id   BIGSERIAL PRIMARY KEY,\n  name text      NOT NULL,\n  bio  text\n);\n```\n\n----------------------------------------\n\nTITLE: Overriding UUID Mapping for MySQL\nDESCRIPTION: Demonstrates how to override the default mapping for UUID fields in MySQL using a configuration file.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/reference/datatypes.md#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"overrides\": [\n    {\n      \"column\": \"*.uuid\",\n      \"go_type\": \"github.com/google/uuid.UUID\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Generated Go Code for Multiple Parameter Update\nDESCRIPTION: Generated Go code implementing the multiple parameter update query using a params struct for arguments.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/howto/update.md#2025-04-21_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage db\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n)\n\ntype DBTX interface {\n\tExecContext(context.Context, string, ...interface{}) (sql.Result, error)\n}\n\nfunc New(db DBTX) *Queries {\n\treturn &Queries{db: db}\n}\n\ntype Queries struct {\n\tdb DBTX\n}\n\nconst updateAuthor = `-- name: UpdateAuthor :exec\nUPDATE authors SET bio = $2\nWHERE id = $1\n`\n\ntype UpdateAuthorParams struct {\n\tID  int32\n\tBio string\n}\n\nfunc (q *Queries) UpdateAuthor(ctx context.Context, arg UpdateAuthorParams) error {\n\t_, err := q.db.ExecContext(ctx, updateAuthor, arg.ID, arg.Bio)\n\treturn err\n}\n```\n\n----------------------------------------\n\nTITLE: Altering Users Table in SQL\nDESCRIPTION: SQL statement to add a created_at column to the users table, used to demonstrate potential issues with schema changes.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/reference/changelog.md#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE users ADD COLUMN created_at TIMESTAMP;\n```\n\n----------------------------------------\n\nTITLE: Configuring WASM Plugin in SQLC\nDESCRIPTION: Example configuration for using a WASM-based greeter plugin in SQLC. Shows how to specify plugin source, validation hash, and plugin-specific options.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/guides/plugins.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '2'\nplugins:\n- name: greeter\n  wasm:\n    url: https://github.com/sqlc-dev/sqlc-gen-greeter/releases/download/v0.1.0/sqlc-gen-greeter.wasm\n    sha256: afc486dac2068d741d7a4110146559d12a013fd0286f42a2fc7dcd802424ad07\nsql:\n- schema: schema.sql\n  queries: query.sql\n  engine: postgresql\n  codegen:\n  - out: gen\n    plugin: greeter\n    options:\n      lang: en-US\n```\n\n----------------------------------------\n\nTITLE: Executing sqlc Push Command\nDESCRIPTION: Basic command to push project files to sqlc Cloud.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/howto/push.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ sqlc push\n```\n\n----------------------------------------\n\nTITLE: Mapping UUIDs to github.com/google/uuid Package\nDESCRIPTION: Shows how sqlc maps UUID types to the github.com/google/uuid package, using a 'records' table with a UUID primary key.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/reference/datatypes.md#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE records (\n  id   uuid PRIMARY KEY\n);\n```\n\nLANGUAGE: go\nCODE:\n```\npackage db\n\nimport (\n\t\"github.com/google/uuid\"\n)\n\ntype Author struct {\n\tID uuid.UUID\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Changes Against Tagged Versions in sqlc\nDESCRIPTION: Shows how to use tags when verifying changes, allowing comparison of existing schema against a known set of previous queries.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/reference/changelog.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ sqlc verify --against v1.0.0\n```\n\n----------------------------------------\n\nTITLE: Version 1 Configuration Example (YAML)\nDESCRIPTION: Complete example of a version 1 SQLC configuration file showing package configuration options.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/reference/config.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nversion: \"1\"\npackages:\n  - name: \"db\"\n    path: \"internal/db\"\n    queries: \"./sql/query/\"\n    schema: \"./sql/schema/\"\n    engine: \"postgresql\"\n    emit_db_tags: false\n    emit_prepared_queries: true\n    emit_interface: false\n    emit_exact_table_names: false\n    emit_empty_slices: false\n    emit_exported_queries: false\n    emit_json_tags: true\n    emit_result_struct_pointers: false\n    emit_params_struct_pointers: false\n    emit_methods_with_db_argument: false\n    emit_pointers_for_null_types: false\n    emit_enum_valid_method: false\n    emit_all_enum_values: false\n    build_tags: \"some_tag\"\n    json_tags_case_style: \"camel\"\n    omit_unused_structs: false\n    output_batch_file_name: \"batch.go\"\n    output_db_file_name: \"db.go\"\n    output_models_file_name: \"models.go\"\n    output_querier_file_name: \"querier.go\"\n    output_copyfrom_file_name: \"copyfrom.go\"\n    query_parameter_limit: 1\n```\n\n----------------------------------------\n\nTITLE: Starting Database Containers for Testing\nDESCRIPTION: Uses Docker Compose to start the required database containers for running tests. This command starts the containers in detached mode, allowing them to run in the background.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/guides/development.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Sample Trace Output Log in sqlc\nDESCRIPTION: Sample output from a trace execution showing the timing of each operation in sqlc, including package generation, parsing, code generation, and file writing phases with their respective durations.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/reference/environment-variables.md#2025-04-21_snippet_7\n\nLANGUAGE: go\nCODE:\n```\n0.000043897 \t .         \t1 \ttask sqlc (id 1, parent 0) created\n0.000144923 \t .   101026 \t1 \tregion generate started (duration: 47.619781ms)\n0.001048975 \t .   904052 \t1 \tregion package started (duration: 14.588456ms)\n0.001054616 \t .     5641 \t1 \tname=authors dir=/Users/kyle/projects/sqlc/examples/python language=python\n0.001071257 \t .    16641 \t1 \tregion parse started (duration: 7.966549ms)\n0.009043960 \t .  7972703 \t1 \tregion codegen started (duration: 6.587086ms)\n0.009171704 \t .   127744 \t1 \tnew goroutine 35: text/template/parse.lex·dwrap·1\n0.010361654 \t .  1189950 \t1 \tnew goroutine 36: text/template/parse.lex·dwrap·1\n0.015641815 \t .  5280161 \t1 \tregion package started (duration: 10.904938ms)\n0.015644943 \t .     3128 \t1 \tname=booktest dir=/Users/kyle/projects/sqlc/examples/python language=python\n0.015647431 \t .     2488 \t1 \tregion parse started (duration: 4.207749ms)\n0.019860308 \t .  4212877 \t1 \tregion codegen started (duration: 6.681624ms)\n0.020028488 \t .   168180 \t1 \tnew goroutine 37: text/template/parse.lex·dwrap·1\n0.021020310 \t .   991822 \t1 \tnew goroutine 8: text/template/parse.lex·dwrap·1\n0.026551163 \t .  5530853 \t1 \tregion package started (duration: 9.217294ms)\n0.026554368 \t .     3205 \t1 \tname=jets dir=/Users/kyle/projects/sqlc/examples/python language=python\n0.026556804 \t .     2436 \t1 \tregion parse started (duration: 3.491005ms)\n0.030051911 \t .  3495107 \t1 \tregion codegen started (duration: 5.711931ms)\n0.030213937 \t .   162026 \t1 \tnew goroutine 20: text/template/parse.lex·dwrap·1\n0.031099938 \t .   886001 \t1 \tnew goroutine 38: text/template/parse.lex·dwrap·1\n0.035772637 \t .  4672699 \t1 \tregion package started (duration: 10.267039ms)\n0.035775688 \t .     3051 \t1 \tname=ondeck dir=/Users/kyle/projects/sqlc/examples/python language=python\n0.035778150 \t .     2462 \t1 \tregion parse started (duration: 4.094518ms)\n0.039877181 \t .  4099031 \t1 \tregion codegen started (duration: 6.156341ms)\n0.040010771 \t .   133590 \t1 \tnew goroutine 39: text/template/parse.lex·dwrap·1\n0.040894567 \t .   883796 \t1 \tnew goroutine 40: text/template/parse.lex·dwrap·1\n0.046042779 \t .  5148212 \t1 \tregion writefiles started (duration: 1.718259ms)\n0.047767781 \t .  1725002 \t1 \ttask end\n```\n\n----------------------------------------\n\nTITLE: Adding sqlc-gen-kotlin Plugin in JSON Configuration\nDESCRIPTION: JSON configuration snippet showing how to add the sqlc-gen-kotlin plugin to the sqlc configuration file.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/guides/migrating-to-sqlc-gen-kotlin.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": \"2\",\n  \"plugins\": [\n    {\n      \"name\": \"kt\",\n      \"wasm\": {\n        \"url\": \"https://downloads.sqlc.dev/plugin/sqlc-gen-kotlin_1.0.0.wasm\",\n        \"sha256\": \"7620dc5d462de41fdc90e2011232c842117b416c98fd5c163d27c5738431a45c\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Structure Definition\nDESCRIPTION: Sphinx documentation root file that defines the documentation structure using toctree directives, organizing content into sections like Overview, Tutorials, Commands, How-to Guides, Cloud features, and Reference materials.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 2\n   :caption: Overview\n   :hidden:\n\n   overview/install.md\n\n.. toctree::\n   :maxdepth: 2\n   :caption: Tutorials\n   :hidden:\n\n   tutorials/getting-started-mysql.md\n   tutorials/getting-started-postgresql.md\n   tutorials/getting-started-sqlite.md\n```\n\n----------------------------------------\n\nTITLE: Creating SQL Schema for Students and Test Scores\nDESCRIPTION: This SQL snippet creates two tables: 'students' with id, name, and age columns, and 'test_scores' with student_id, score, and grade columns. It sets up the basic schema for the embedding example.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/howto/embedding.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE students (\n  id   bigserial PRIMARY KEY,\n  name text NOT NULL,\n  age  integer NOT NULL\n);\n\nCREATE TABLE test_scores (\n  student_id bigint NOT NULL,\n  score      integer NOT NULL,\n  grade      text NOT NULL\n);\n```\n\n----------------------------------------\n\nTITLE: Query with Lint Rule Disable Annotation\nDESCRIPTION: SQL query example showing how to disable lint rule evaluation using the @sqlc-vet-disable annotation.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/reference/changelog.md#2025-04-21_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\n/* name: GetAuthor :one */\n/* @sqlc-vet-disable */\nSELECT * FROM authors\nWHERE id = ? LIMIT 1;\n```\n\n----------------------------------------\n\nTITLE: Plugin Configuration Example (YAML)\nDESCRIPTION: Example configuration showing how to define SQLC plugins with WASM and process options.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/reference/config.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nversion: \"2\"\nplugins:\n- name: \"py\"\n  wasm: \n    url: \"https://github.com/sqlc-dev/sqlc-gen-python/releases/download/v0.16.0-alpha/sqlc-gen-python.wasm\"\n    sha256: \"428476c7408fd4c032da4ec74e8a7344f4fa75e0f98a5a3302f238283b9b95f2\"\n- name: \"js\"\n  env:\n  - PATH\n  process: \n    cmd: \"sqlc-gen-json\"\n```\n\n----------------------------------------\n\nTITLE: Default Struct Generation in Go\nDESCRIPTION: Shows the default Go struct that sqlc generates for the 'authors' table, named 'Author'.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/howto/rename.md#2025-04-21_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage db\n\nimport (\n\t\"database/sql\"\n)\n\ntype Author struct {\n\tID   int64\n\tName string\n\tBio  sql.NullString\n}\n```\n\n----------------------------------------\n\nTITLE: SQLite Query Selecting Text into Dynamic Variable\nDESCRIPTION: A query that selects text from a table into a dynamic variable. The issue is that sqlc doesn't properly optimize this for SQLite, treating the text column as if it has zero length.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/internal/endtoend/testdata/cte_with_in/issue.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n-- name: GetMachineName :one\nSELECT name FROM machine LIMIT 1;\n```\n\n----------------------------------------\n\nTITLE: Using Table Valued Function in SQL Server Query\nDESCRIPTION: This SQL snippet shows how to use the previously defined Table Valued Function 'fn_GetEmployees' in a SELECT statement. It demonstrates querying the function with a specific department ID.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/internal/endtoend/testdata/func_return_table_columns/issue.md#2025-04-21_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT *\nFROM fn_GetEmployees(1)\n```\n\n----------------------------------------\n\nTITLE: Defining Polymorphic Associations SQL Schema\nDESCRIPTION: SQL schema definition for a polymorphic association between comments and either posts or photos. It creates tables for comments, posts, and photos with appropriate foreign key relationships.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/internal/endtoend/testdata/select_system/issue.md#2025-04-21_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE comments (\n  id SERIAL PRIMARY KEY,\n  content TEXT NOT NULL,\n  commentable_id INTEGER NOT NULL,\n  commentable_type TEXT NOT NULL\n);\n\nCREATE TABLE posts (\n  id SERIAL PRIMARY KEY,\n  title TEXT NOT NULL\n);\n\nCREATE TABLE photos (\n  id SERIAL PRIMARY KEY,\n  caption TEXT NOT NULL\n);\n```\n\n----------------------------------------\n\nTITLE: Custom Rules Configuration (YAML)\nDESCRIPTION: Example showing how to define custom validation rules using Common Expression Language (CEL).\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/reference/config.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nversion: \"2\"\nsql:\n  - schema: \"query.sql\"\n    queries: \"query.sql\"\n    engine: \"postgresql\"\n    gen:\n      go:\n        package: \"authors\"\n        out: \"db\"\n    rules:\n      - no-pg\n      - no-delete\n      - only-one-param\n      - no-exec\nrules:\n  - name: no-pg\n    message: \"invalid engine: postgresql\"\n    rule: |\n      config.engine == \"postgresql\"\n  - name: no-delete\n    message: \"don't use delete statements\"\n    rule: |\n      query.sql.contains(\"DELETE\")\n  - name: only-one-param\n    message: \"too many parameters\"\n    rule: |\n      query.params.size() > 1\n  - name: no-exec\n    message: \"don't use exec\"\n    rule: |\n      query.cmd == \"exec\"\n```\n\n----------------------------------------\n\nTITLE: Deleting Author by ID in SQL\nDESCRIPTION: This query removes an author record from the 'authors' table based on the provided ID. It doesn't return any data after the deletion operation.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/internal/endtoend/testdata/process_plugin_format_json/gen/hello.txt#2025-04-21_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nDELETE FROM authors\nWHERE id = $1\n```\n\n----------------------------------------\n\nTITLE: Disabling Lint Rules for Specific SQL Queries\nDESCRIPTION: SQL comments demonstrating how to use the @sqlc-vet-disable annotation to opt-out of specific lint rules for individual queries.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/howto/vet.md#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\n/* name: GetAuthor :one */\n/* @sqlc-vet-disable sqlc/db-prepare no-pg */\nSELECT * FROM authors\nWHERE id = ? LIMIT 1;\n```\n\nLANGUAGE: sql\nCODE:\n```\n/* name: GetAuthor :one */\n/* @sqlc-vet-disable sqlc/db-prepare */\n/* @sqlc-vet-disable no-pg */\nSELECT * FROM authors\nWHERE id = ? LIMIT 1;\n```\n\nLANGUAGE: sql\nCODE:\n```\n/* name: GetAuthor :one */\n/* @sqlc-vet-disable */\nSELECT * FROM authors\nWHERE id = ? LIMIT 1;\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Interface for Database Operations in Go\nDESCRIPTION: This code snippet demonstrates a proposed SQL interface that could be generated by sqlc. It includes methods for common database operations like querying and executing statements.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/internal/endtoend/testdata/join_using/issue.md#2025-04-21_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\ntype SQLDB interface {\n\tExecContext(context.Context, string, ...interface{}) (sql.Result, error)\n\tPrepareContext(context.Context, string) (*sql.Stmt, error)\n\tQueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)\n\tQueryRowContext(context.Context, string, ...interface{}) *sql.Row\n}\n```\n\n----------------------------------------\n\nTITLE: Invalid Query Comment Format\nDESCRIPTION: Error showing incorrect format for query comment with multiple conflicting query types specified (:one and :many).\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/internal/endtoend/testdata/invalid_queries_foo/pgx/v5/stderr.txt#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n-- name: ListFoos :one :many\n```\n\n----------------------------------------\n\nTITLE: Viewing Trace Output with Go Tools\nDESCRIPTION: Command to view the execution trace output generated by sqlc using the Go trace tool, which provides various visualization options for analyzing performance.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/reference/environment-variables.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngo tool trace trace.out\n```\n\n----------------------------------------\n\nTITLE: Creating Many-to-Many Relationship Table for Videos and Tags in SQL\nDESCRIPTION: This SQL snippet creates a 'video_tags' table to establish a many-to-many relationship between videos and tags. It includes foreign key constraints referencing the 'videos' and 'tags' tables.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/examples/jets/README.md#2025-04-21_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE video_tags (\n  video_id int NOT NULL REFERENCES videos(id),\n  tag_id int NOT NULL REFERENCES tags(id),\n  PRIMARY KEY(video_id, tag_id)\n);\n```\n\n----------------------------------------\n\nTITLE: Query Linting Configuration with Managed Database in YAML\nDESCRIPTION: Configuration example for query linting with managed databases, including the built-in sqlc/db-prepare rule for query validation.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/howto/managed-databases.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '2'\nservers:\n- engine: postgresql\n  uri: \"postgres://localhost:5432/postgres?sslmode=disable\"\nsql:\n- schema: schema.sql\n  queries: query.sql\n  engine: postgresql\n  database:\n    managed: true\n  rules:\n  - sqlc/db-prepare\n```\n\n----------------------------------------\n\nTITLE: Defining PL/pgSQL Function for User Deletion in PostgreSQL\nDESCRIPTION: This PL/pgSQL function demonstrates deleting a user from a database based on their ID. It returns a boolean indicating whether the deletion was successful.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/internal/endtoend/testdata/join_validate_columns/issue.md#2025-04-21_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE OR REPLACE FUNCTION delete_user(user_id integer)\nRETURNS boolean AS $$\nDECLARE\n  rows_affected integer;\nBEGIN\n  DELETE FROM users WHERE id = user_id;\n  GET DIAGNOSTICS rows_affected = ROW_COUNT;\n  RETURN rows_affected > 0;\nEND;\n$$ LANGUAGE plpgsql;\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Actions workflow for sqlc push\nDESCRIPTION: GitHub Workflow configuration for running 'sqlc push' on every push to the main branch. Requires an authentication token from sqlc Cloud, which is stored as a GitHub secret.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/howto/ci-cd.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nname: sqlc\non: [push]\njobs:\n  push:\n    runs-on: ubuntu-latest\n    if: ${{ github.ref == 'refs/heads/main' }}\n    steps:\n    - uses: actions/checkout@v3\n    - uses: sqlc-dev/setup-sqlc@v3\n      with:\n        sqlc-version: '1.29.0'\n    - run: sqlc push\n      env:\n        SQLC_AUTH_TOKEN: ${{ secrets.SQLC_AUTH_TOKEN }}\n```\n\n----------------------------------------\n\nTITLE: Defining a Table Returning Function in PostgreSQL\nDESCRIPTION: A PostgreSQL function definition that returns a table with multiple columns (id, message, and created_at). This example demonstrates the syntax that sqlc needs to support for table returning functions.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/internal/endtoend/testdata/cte_left_join/issue.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE OR REPLACE FUNCTION get_errors()\n    RETURNS TABLE(id bigint, message text, created_at timestamp)\n    LANGUAGE SQL\nAS\n$$\nSELECT id, message, created_at from errors\n$$;\n```\n\n----------------------------------------\n\nTITLE: SQLC Query Test Error Messages\nDESCRIPTION: This snippet illustrates common error messages encountered when using the sqlc.arg function incorrectly in SQL queries. It covers issues such as non-existent functions, incorrect parameter counts, and invalid parameter types.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/internal/endtoend/testdata/sqlc_arg_invalid/postgresql/stderr.txt#2025-04-21_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nquery.sql:1:1: function \"sqlc.argh\" does not exist\nquery.sql:5:45: expected 1 parameter to sqlc.arg; got 2\nquery.sql:8:45: expected 1 parameter to sqlc.arg; got 0\nquery.sql:11:45: expected parameter to sqlc.arg to be string or reference; got *ast.FuncCall\nquery.sql:14:45: expected parameter to sqlc.arg to be string or reference; got *ast.ParamRef\n```\n\n----------------------------------------\n\nTITLE: MySQL Environment Variables for Testing\nDESCRIPTION: Defines the default environment variables used for connecting to the MySQL database during testing. These variables include host, port, user, root password, and database name.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/guides/development.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nVariable     Default Value\n-------------------------\nMYSQL_HOST      127.0.0.1\nMYSQL_PORT      3306\nMYSQL_USER      root\nMYSQL_ROOT_PASSWORD  mysecretpassword\nMYSQL_DATABASE  dinotest\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Schema and Table in PostgreSQL\nDESCRIPTION: This SQL snippet demonstrates creating a schema named 'myschema' and a table named 'mytable' within that schema in PostgreSQL. It illustrates the syntax for schema-qualified table names.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/internal/endtoend/testdata/null_if_type/issue.md#2025-04-21_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE SCHEMA myschema;\nCREATE TABLE myschema.mytable (id serial primary key, name text);\n```\n\n----------------------------------------\n\nTITLE: Updating SQL Query to Resolve Column Ambiguity\nDESCRIPTION: Revised SQL query that specifies which table's 'created_at' column to use in the ORDER BY clause, fixing the ambiguity introduced by the schema change.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/howto/verify.md#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\n-- name: GetUserActions :many\nSELECT * FROM users u\nJOIN user_actions ua ON u.id = ua.user_id\nORDER BY u.created_at;\n```\n\n----------------------------------------\n\nTITLE: Installing sqlc on Ubuntu using Snap\nDESCRIPTION: Command to install sqlc using the Snap package manager on Ubuntu Linux systems with sudo privileges.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/overview/install.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo snap install sqlc\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Queries\nDESCRIPTION: SQL query definitions for retrieving and updating records, using SQLC query annotations.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/howto/transactions.md#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n-- name: GetRecord :one\nSELECT * FROM records\nWHERE id = $1;\n\n-- name: UpdateRecord :exec\nUPDATE records SET counter = $2\nWHERE id = $1;\n```\n\n----------------------------------------\n\nTITLE: SQL Insert Column Count Mismatch Errors\nDESCRIPTION: Examples demonstrating two common INSERT statement errors in SQLc: having more target columns than expressions, and having more expressions than target columns. These represent validation errors that SQLc reports during query parsing.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/internal/endtoend/testdata/invalid_queries_bar/stdlib/stderr/base.txt#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nquery.sql:1:1: INSERT has more target columns than expressions\nquery.sql:5:1: INSERT has more expressions than target columns\n```\n\n----------------------------------------\n\nTITLE: Pulling sqlc Docker Image\nDESCRIPTION: Command to pull the official sqlc Docker image from Docker Hub.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/overview/install.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull sqlc/sqlc\n```\n\n----------------------------------------\n\nTITLE: Alternative SQL Query Using ANY\nDESCRIPTION: Alternative SQL query syntax using ANY operator with array to handle empty array cases in PostgreSQL.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/internal/endtoend/testdata/cte_join_self/issue.md#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM table_name WHERE field = ANY($1::bigint[])\n```\n\n----------------------------------------\n\nTITLE: Verifying Schema Changes Against Tagged Queries\nDESCRIPTION: Shell command for running verification against a specific tagged version of queries, allowing comparison of schema changes against previously deployed queries.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/howto/verify.md#2025-04-21_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n$ sqlc verify --against main\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Type Mapping for Columns in Go\nDESCRIPTION: This code snippet demonstrates a proposed syntax for defining custom type mappings for specific columns in sqlc. It shows how to map a 'jsonb' column to a custom Go type.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/internal/endtoend/testdata/select_union_subquery/issue.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nversion: 2\nsql:\n  - engine: postgresql\n    schema: schema.sql\n    queries: query.sql\n    gen:\n      go:\n        package: db\n        out: db\n        emit_json_tags: true\n    overrides:\n      - column: public.users.metadata\n        go_type:\n          type: MyJSONB\n```\n\n----------------------------------------\n\nTITLE: Configuration with Custom Database Connection\nDESCRIPTION: Example configuration for using your own database for enhanced analysis. This example shows how to specify a database URI with environment variable support for sensitive information like passwords.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/howto/generate.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nversion: \"2\"\nsql:\n  - engine: \"postgresql\"\n    queries: \"query.sql\"\n    schema: \"schema.sql\"\n    database:\n      uri: \"postgres://postgres:${PG_PASSWORD}@localhost:5432/postgres\"\n    gen:\n      go:\n        out: \"db\"\n        sql_package: \"pgx/v5\"\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Type and Table Schema in SQL\nDESCRIPTION: This SQL snippet defines a custom type 'mood' and creates a table 'person' with nullable columns using the custom type.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/internal/endtoend/testdata/invalid_update_unknown_column/issue.md#2025-04-21_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TYPE mood AS ENUM ('sad', 'ok', 'happy');\n\nCREATE TABLE person (\n    id   BIGSERIAL PRIMARY KEY,\n    name TEXT      NOT NULL,\n    mood mood\n);\n```\n\n----------------------------------------\n\nTITLE: Misuse of :batchone Parameter in SQL INSERT Query\nDESCRIPTION: This snippet shows an error where an INSERT query specifies the ':batchone' parameter without a RETURNING clause.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/internal/endtoend/testdata/invalid_queries_foo/pgx/v4/stderr.txt#2025-04-21_snippet_6\n\nLANGUAGE: SQL\nCODE:\n```\n-- name: InsertFoo :batchone\n```\n\n----------------------------------------\n\nTITLE: Implementing Schema Migration to Add Column in SQL\nDESCRIPTION: SQL statement to alter the 'users' table by adding a new 'created_at' timestamp column. This schema change introduces ambiguity with the existing query.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/howto/verify.md#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE users ADD COLUMN created_at TIMESTAMP;\n```\n\n----------------------------------------\n\nTITLE: Defining Author and Book Structs in Go\nDESCRIPTION: Defines Go structs for Author and Book models. The Author struct includes an ID, Name, and a nullable Bio field. The Book struct has an ID and Title.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/internal/endtoend/testdata/diff_output/stderr.txt#2025-04-21_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\ntype Author struct {\n\tID   int64\n\tName string\n\tBio  sql.NullString\n}\n\ntype Book struct {\n\tID    int64\n\tTitle string\n}\n```\n\n----------------------------------------\n\nTITLE: Using the against Argument with sqlc verify\nDESCRIPTION: Shell command showing the syntax for specifying which tagged version of queries to verify against when checking schema compatibility.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/howto/verify.md#2025-04-21_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n$ sqlc verify --against [tag]\n```\n\n----------------------------------------\n\nTITLE: Selecting a Constant Value\nDESCRIPTION: Defines a SQL query and Go function to select the constant value 1 from the database. This can be used as a simple database connectivity test.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/internal/endtoend/testdata/diff_output/stderr.txt#2025-04-21_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\n-- name: SelectOne :one\nSELECT 1\n```\n\nLANGUAGE: Go\nCODE:\n```\nfunc (q *Queries) SelectOne(ctx context.Context) (int32, error) {\n\trow := q.db.QueryRowContext(ctx, selectOne)\n\tvar column_1 int32\n\terr := row.Scan(&column_1)\n\treturn column_1, err\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Query with @ Shorthand Syntax\nDESCRIPTION: Alternative syntax using @ operator as a shorthand for sqlc.arg(), not supported in MySQL.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/howto/named_parameters.md#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\n-- name: UpsertAuthorName :one\nUPDATE author\nSET\n  name = CASE WHEN @set_name::bool\n    THEN @name::text\n    ELSE name\n    END\nRETURNING *;\n```\n\n----------------------------------------\n\nTITLE: Creating an Author in the Database\nDESCRIPTION: Defines a SQL query and Go function to create a new author in the database. It takes name and bio as parameters and returns the newly created author's ID.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/internal/endtoend/testdata/diff_output/stderr.txt#2025-04-21_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\n-- name: CreateAuthor :one\nINSERT INTO authors (\n  name, bio\n) VALUES (\n  $1, $2\n)\nRETURNING id\n```\n\nLANGUAGE: Go\nCODE:\n```\nfunc (q *Queries) CreateAuthor(ctx context.Context, arg CreateAuthorParams) (int64, error) {\n\trow := q.db.QueryRowContext(ctx, createAuthor, arg.Name, arg.Bio)\n\tvar i int64\n\terr := row.Scan(&i)\n\treturn i, err\n}\n```\n\n----------------------------------------\n\nTITLE: Missing Query Type Error in SQL\nDESCRIPTION: This snippet shows an error where a query is missing a required query type specifier.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/internal/endtoend/testdata/invalid_queries_foo/pgx/v4/stderr.txt#2025-04-21_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\n-- name: ListFoos\n```\n\n----------------------------------------\n\nTITLE: SQLc Installation Command\nDESCRIPTION: Command to install SQLc using the new import path after repository migration from kyleconroy/sqlc to sqlc-dev/sqlc.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/reference/changelog.md#2025-04-21_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\ngo install github.com/sqlc-dev/sqlc/cmd/sqlc@v1.20.0\n```\n\n----------------------------------------\n\nTITLE: Pushing Current Schema and Queries to sqlc Cloud\nDESCRIPTION: Shell command for pushing the current schema and queries to sqlc Cloud with a tag identifier. This step is necessary before verification can be performed.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/howto/verify.md#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ sqlc push --tag main\n```\n\n----------------------------------------\n\nTITLE: MySQL Bulk Insert Implementation\nDESCRIPTION: Demonstrates how to use the :copyfrom query annotation with MySQL's LOAD DATA command for efficient bulk data insertion. Includes table creation and insert statement with parameterized values.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/reference/changelog.md#2025-04-21_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE foo (a text, b integer, c DATETIME, d DATE);\n\n-- name: InsertValues :copyfrom\nINSERT INTO foo (a, b, c, d) VALUES (?, ?, ?, ?);\n```\n\nLANGUAGE: go\nCODE:\n```\nfunc (q *Queries) InsertValues(ctx context.Context, arg []InsertValuesParams) (int64, error) {\n\t...\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating UPDATE with multiple tables in SQL\nDESCRIPTION: This SQL snippet shows an example of an UPDATE statement involving multiple tables. It updates the 'name' column in the 'foo' table based on conditions involving both 'foo' and 'bar' tables.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/internal/endtoend/testdata/insert_values_only/issue.md#2025-04-21_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nUPDATE foo\nSET name = bar.name\nFROM bar\nWHERE foo.bar_id = bar.id\n  AND bar.name != foo.name;\n```\n\n----------------------------------------\n\nTITLE: Adding sqlc-gen-python Plugin in YAML Configuration\nDESCRIPTION: YAML configuration example showing how to add the sqlc-gen-python plugin to your sqlc configuration file.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/guides/migrating-to-sqlc-gen-python.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nversion: \"2\"\nplugins:\n  - name: \"py\"\n    wasm:\n      url: \"https://downloads.sqlc.dev/plugin/sqlc-gen-python_1.0.0.wasm\"\n      sha256: \"aca83e1f59f8ffdc604774c2f6f9eb321a2b23e07dc83fc12289d25305fa065b\"\n```\n\n----------------------------------------\n\nTITLE: Original Package Configuration in JSON\nDESCRIPTION: Example of the original JSON package configuration before migration that uses built-in Kotlin support.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/guides/migrating-to-sqlc-gen-kotlin.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n  \"sql\": [\n    {\n      \"schema\": \"schema.sql\",\n      \"queries\": \"query.sql\",\n      \"engine\": \"postgresql\",\n      \"gen\": {\n        \"kotlin\": {\n          \"out\": \"src/main/kotlin/com/example/foo\",\n          \"package\": \"com.example.foo\"\n        }\n      }\n    }\n  ]\n```\n\n----------------------------------------\n\nTITLE: Misuse of :one Parameter in SQL DELETE Query\nDESCRIPTION: This snippet highlights an error where a DELETE query specifies the ':one' parameter without a RETURNING clause.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/internal/endtoend/testdata/invalid_queries_foo/pgx/v4/stderr.txt#2025-04-21_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\n-- name: DeleteFoo :one\n```\n\n----------------------------------------\n\nTITLE: Generating sqlc Code\nDESCRIPTION: Executes the sqlc generate command to create Go code based on the defined schema and queries.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/tutorials/getting-started-sqlite.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nsqlc generate\n```\n\n----------------------------------------\n\nTITLE: Running sqlc in Docker on Windows CMD\nDESCRIPTION: Command to run sqlc in a Docker container on Windows Command Prompt, mounting the current directory as the source.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/overview/install.md#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ndocker run --rm -v \"%cd%:/src\" -w /src sqlc/sqlc generate\n```\n\n----------------------------------------\n\nTITLE: Querying User Actions in SQL\nDESCRIPTION: SQL query to join user actions against the users table, used to demonstrate potential issues with schema changes.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/reference/changelog.md#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\n-- name: GetUserActions :many\nSELECT * FROM users u\nJOIN user_actions ua ON u.id = ua.user_id\nORDER BY created_at;\n```\n\n----------------------------------------\n\nTITLE: Dumping Vet Environment Variables in sqlc\nDESCRIPTION: Sets the SQLCDEBUG environment variable to print the variables available to a sqlc vet rule during evaluation, which is useful for debugging vet rules.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/reference/environment-variables.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nSQLCDEBUG=dumpvetenv=1\n```\n\n----------------------------------------\n\nTITLE: Setting SQLCDEBUG for Catalog Dump in sqlc\nDESCRIPTION: Sets the SQLCDEBUG environment variable to output the entire catalog. This can be overwhelming for MySQL or PostgreSQL databases and the output format may change in future versions.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/reference/environment-variables.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nSQLCDEBUG=dumpcatalog=1\n```\n\n----------------------------------------\n\nTITLE: Adding sqlc-gen-kotlin Plugin in YAML Configuration\nDESCRIPTION: YAML configuration snippet showing how to add the sqlc-gen-kotlin plugin to the sqlc configuration file.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/guides/migrating-to-sqlc-gen-kotlin.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nversion: \"2\"\nplugins:\n- name: \"kt\"\n  wasm:\n    url: \"https://downloads.sqlc.dev/plugin/sqlc-gen-kotlin_1.0.0.wasm\"\n    sha256: \"7620dc5d462de41fdc90e2011232c842117b416c98fd5c163d27c5738431a45c\"\n```\n\n----------------------------------------\n\nTITLE: Missing RETURNING Clause Error in SQL (InsertFoo)\nDESCRIPTION: Error message for a SQL query 'InsertFoo' that specifies ':one' parameter without a RETURNING clause.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/internal/endtoend/testdata/invalid_queries_foo/stdlib/stderr.txt#2025-04-21_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\n-- name: InsertFoo :one\n```\n\n----------------------------------------\n\nTITLE: Initializing Go Module for sqlc Tutorial\nDESCRIPTION: Creates a new Go module named 'tutorial.sqlc.dev/app' for the sqlc tutorial project.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/tutorials/getting-started-sqlite.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo mod init tutorial.sqlc.dev/app\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration for MySQL Bulk Insert\nDESCRIPTION: YAML configuration for sqlc specifying MySQL as the engine and the required sql_package and sql_driver settings for the LOAD DATA functionality.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/howto/insert.md#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nversion: \"2\"\nsql:\n  - engine: \"mysql\"\n    queries: \"query.sql\"\n    schema: \"query.sql\"\n    gen:\n      go:\n        package: \"db\"\n        sql_package: \"database/sql\"\n        sql_driver: \"github.com/go-sql-driver/mysql\"\n        out: \"db\"\n```\n\n----------------------------------------\n\nTITLE: SQLc Linting Rule Configuration\nDESCRIPTION: Example configuration for SQLc query linting rules that utilize EXPLAIN output to enforce performance requirements.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/reference/changelog.md#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nversion: 2\nsql:\n  - schema: \"query.sql\"\n    queries: \"query.sql\"\n    engine: \"postgresql\"\n    database:\n      uri: \"postgresql://postgres:postgres@localhost:5432/postgres\"\n    gen:\n      go:\n        package: \"db\"\n        out: \"db\"\n    rules:\n      - has-index\nrules:\n- name: has-index\n  rule: >\n    query.sql.startsWith(\"SELECT\") &&\n    !(postgresql.explain.plan.plans.all(p, has(p.index_name) || p.plans.all(p, has(p.index_name))))\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Trace Output File in sqlc\nDESCRIPTION: Configures the SQLCDEBUG environment variable to enable execution tracing with a custom output file path instead of the default trace.out file.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/reference/environment-variables.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nSQLCDEBUG=trace=name.out\n```\n\n----------------------------------------\n\nTITLE: Configuring sqlc.yaml with schema and migration paths\nDESCRIPTION: A configuration example for sqlc.yaml that specifies schema paths and migration file locations. It shows how to set up SQL generation for a Go project with paths for migrations and schema definitions.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/internal/endtoend/testdata/cte_recursive_subquery/issue.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nversion: 2\nsql:\n  - schema: \"migrations/schema.sql\"\n    queries: \"queries/\"\n    engine: \"postgresql\"\n    gen:\n      go:\n        package: \"models\"\n        out: \"internal/models\"\n```\n\n----------------------------------------\n\nTITLE: Adding sqlc-gen-python Plugin in JSON Configuration\nDESCRIPTION: JSON configuration example showing how to add the sqlc-gen-python plugin to your sqlc configuration file.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/guides/migrating-to-sqlc-gen-python.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": \"2\",\n  \"plugins\": [\n    {\n      \"name\": \"py\",\n      \"wasm\": {\n        \"url\": \"https://downloads.sqlc.dev/plugin/sqlc-gen-python_1.0.0.wasm\",\n        \"sha256\": \"aca83e1f59f8ffdc604774c2f6f9eb321a2b23e07dc83fc12289d25305fa065b\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Error Message - SQLC Query Constant and Enum Name Conflict\nDESCRIPTION: Error message indicating a naming conflict between a query constant and an enum name 'Foo' during SQLC code generation process.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/internal/endtoend/testdata/duplicate_go_names/query_constant/stderr.txt#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nerror generating code: query constant name conflicts with enum name: Foo\n```\n\n----------------------------------------\n\nTITLE: Validating INSERT Statement Column-Expression Matches\nDESCRIPTION: Example error messages from SQL validation showing two common INSERT statement mistakes: having more target columns than provided expressions, and having more expressions than target columns.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/internal/endtoend/testdata/invalid_queries_bar/pgx/v5/stderr/managed-db.txt#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nquery.sql:2:23: INSERT has more target columns than expressions\nquery.sql:5:35: INSERT has more expressions than target columns\n```\n\n----------------------------------------\n\nTITLE: Setting SQLCDEBUG for AST Dump in sqlc\nDESCRIPTION: Sets the SQLCDEBUG environment variable to display the SQL Abstract Syntax Tree (AST) that was generated by the parser. This shows the generic SQL AST, not the engine-specific SQL AST.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/reference/environment-variables.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nSQLCDEBUG=dumpast=1\n```\n\n----------------------------------------\n\nTITLE: Using sqlc.narg Macro in SQL Query\nDESCRIPTION: Illustrates the usage of sqlc.narg macro, which is similar to sqlc.arg but always marks the parameter as nullable.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/reference/macros.md#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\n-- name: GetAuthorByName :one\nSELECT *\nFROM authors\nWHERE lower(name) = sqlc.narg(name);\n\n-- >>> EXPANDS TO >>>\n\n-- name: GetAuthorByName :one\nSELECT *\nFROM authors\nWHERE LOWER(name) = ?;\n```\n\n----------------------------------------\n\nTITLE: Proposed Go struct for multi-table UPDATE in sqlc\nDESCRIPTION: This Go code snippet proposes a struct definition for representing a multi-table UPDATE operation in sqlc. It includes fields for the tables involved and the conditions for the update.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/internal/endtoend/testdata/insert_values_only/issue.md#2025-04-21_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\ntype UpdateFooParams struct {\n\tBarID int64\n\tName  string\n}\n```\n\n----------------------------------------\n\nTITLE: Migrated Package Configuration in YAML\nDESCRIPTION: Example of the migrated YAML package configuration that uses the sqlc-gen-kotlin plugin.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/guides/migrating-to-sqlc-gen-kotlin.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n  sql:\n  - schema: \"schema.sql\"\n    queries: \"query.sql\"\n    engine: \"postgresql\"\n    codegen:\n    - plugin: \"kt\"\n      out: \"src/main/kotlin/com/example/foo\"\n      options:\n        package: \"com.example.foo\"\n```\n\n----------------------------------------\n\nTITLE: Setting SQLCDEBUG for Trace Output in sqlc\nDESCRIPTION: Configures the SQLCDEBUG environment variable to enable execution tracing for performance analysis. By default, trace output is written to trace.out in the current working directory, but can be configured to use a different path.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/reference/environment-variables.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nSQLCDEBUG=trace=1\n```\n\n----------------------------------------\n\nTITLE: Invalid Query Comment Error in SQL\nDESCRIPTION: Error message for a SQL query with an invalid comment structure containing multiple query types.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/internal/endtoend/testdata/invalid_queries_foo/stdlib/stderr.txt#2025-04-21_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\n-- name: ListFoos :one :many\n```\n\n----------------------------------------\n\nTITLE: Proposing SQL Syntax for Prepared Statements in sqlc\nDESCRIPTION: Suggests a syntax for defining prepared statements in SQL comments, to be used by sqlc for generating Go code with prepared statements.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/internal/endtoend/testdata/invalid_insert_unknown_column/issue.md#2025-04-21_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\n-- name: GetUserByID :one\n-- prepare: true\nSELECT * FROM users WHERE id = $1\n```\n\n----------------------------------------\n\nTITLE: Output Format of Catalog Dump in sqlc\nDESCRIPTION: Shows the structure of the catalog output when using the dumpcatalog debug flag. The output includes detailed information about the database catalog, including schemas and tables.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/reference/environment-variables.md#2025-04-21_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n([]interface {}) (len=1 cap=1) {\n (*catalog.Catalog)(0xc00050d1f0)({\n  Comment: (string) \"\",\n  DefaultSchema: (string) (len=6) \"public\",\n  Name: (string) \"\",\n  Schemas: ([]*catalog.Schema) (len=3 cap=4) {\n   (*catalog.Schema)(0xc00050d260)({\n    Name: (string) (len=6) \"public\",\n    Tables: ([]*catalog.Table) (len=1 cap=1) {\n     (*catalog.Table)(0xc0000c0840)({\n      Rel: (*ast.TableName)(0xc0000c06c0)({\n       Catalog: (string) \"\",\n       Schema: (string) \"\",\n       Name: (string) (len=7) \"authors\"\n      }),\n\n```\n\n----------------------------------------\n\nTITLE: Generated Go Struct for sqlc.embed Example\nDESCRIPTION: Demonstrates the resulting Go struct and method generated from the SQL query using sqlc.embed macro.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/reference/macros.md#2025-04-21_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ntype GetStudentAndScoreRow struct {\n\tStudent   Student\n\tTestScore TestScore\n}\n\nfunc (q *Queries) GetStudentAndScore(ctx context.Context, id int64) (GetStudentAndScoreRow, error) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Remote Code Generation in JSON\nDESCRIPTION: JSON configuration block for enabling remote code generation in sqlc.json, requiring organization and project IDs.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/reference/changelog.md#2025-04-21_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": \"2\",\n  \"cloud\": {\n    \"organization\": \"<org-id>\",\n    \"project\": \"<project-id>\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Query Using sqlc.embed\nDESCRIPTION: Enhanced SQL query using sqlc.embed to generate structured output with embedded student model.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/reference/changelog.md#2025-04-21_snippet_16\n\nLANGUAGE: sql\nCODE:\n```\n-- name: HighScoreEmbed :many\nWITH high_scores AS (\n  SELECT student_id, max(score) as high_score\n  FROM test_scores\n  GROUP BY 1\n)\nSELECT sqlc.embed(students), high_score::integer\nFROM students\nJOIN high_scores ON high_scores.student_id = students.id;\n```\n\n----------------------------------------\n\nTITLE: Running sqlc in Docker on Unix-like Systems\nDESCRIPTION: Command to run sqlc in a Docker container on Unix-like systems, mounting the current directory as the source.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/overview/install.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm -v $(pwd):/src -w /src sqlc/sqlc generate\n```\n\n----------------------------------------\n\nTITLE: SQL INSERT Column Mismatch Errors\nDESCRIPTION: Two SQL INSERT statement errors are documented: one where there are more target columns than provided expressions, and another where there are more expressions than target columns. These represent common SQL syntax validation errors.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/internal/endtoend/testdata/invalid_queries_bar/stdlib/stderr/managed-db.txt#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nquery.sql:2:23: INSERT has more target columns than expressions\nquery.sql:5:35: INSERT has more expressions than target columns\n```\n\n----------------------------------------\n\nTITLE: Desired Go Struct Generation for Polymorphic Associations\nDESCRIPTION: Example of the desired Go struct generation for handling polymorphic associations, including a union type for the commentable interface.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/internal/endtoend/testdata/select_system/issue.md#2025-04-21_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\ntype Comment struct {\n\tID              int64\n\tContent         string\n\tCommentableID   int64\n\tCommentableType string\n\tCommentable     interface{} // Union type\n}\n\ntype Post struct {\n\tID    int64\n\tTitle string\n}\n\ntype Photo struct {\n\tID      int64\n\tCaption string\n}\n```\n\n----------------------------------------\n\nTITLE: Migrated Package Configuration in JSON\nDESCRIPTION: Example of the migrated JSON package configuration that uses the sqlc-gen-kotlin plugin.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/guides/migrating-to-sqlc-gen-kotlin.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n  \"sql\": [\n    {\n      \"schema\": \"schema.sql\",\n      \"queries\": \"query.sql\",\n      \"engine\": \"postgresql\",\n      \"codegen\": [\n        {\n          \"out\": \"src/main/kotlin/com/example/foo\",\n          \"plugin\": \"kt\",\n          \"options\": {\n            \"package\": \"com.example.foo\"\n          }\n        }\n      ]\n    }\n  ]\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration for PostgreSQL COPY Protocol\nDESCRIPTION: YAML configuration for sqlc specifying PostgreSQL as the engine and pgx/v5 as the SQL package, which is required for using the COPY protocol.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/howto/insert.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nversion: \"2\"\nsql:\n  - engine: \"postgresql\"\n    queries: \"query.sql\"\n    schema: \"query.sql\"\n    gen:\n      go:\n        package: \"db\"\n        sql_package: \"pgx/v5\"\n        out: \"db\"\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Environment Variables for Testing\nDESCRIPTION: Defines the default environment variables used for connecting to the PostgreSQL database during testing. These variables include host, port, user, password, and database name.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/guides/development.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nVariable     Default Value\n-------------------------\nPG_HOST      127.0.0.1\nPG_PORT      5432\nPG_USER      postgres\nPG_PASSWORD  mysecretpassword\nPG_DATABASE  dinotest\n```\n\n----------------------------------------\n\nTITLE: Plugin Environment Variable Configuration in YAML\nDESCRIPTION: Configuration example showing how to allow SQLc plugins to access specific environment variables through the plugins.env setting.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/reference/changelog.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '2'\nsql:\n- schema: schema.sql\n  queries: query.sql\n  engine: postgresql\n  codegen:\n  - out: gen\n    plugin: test\nplugins:\n- name: test\n  env:\n  - PATH\n  wasm:\n    url: https://github.com/sqlc-dev/sqlc-gen-test/releases/download/v0.1.0/sqlc-gen-test.wasm\n    sha256: 138220eae508d4b65a5a8cea555edd155eb2290daf576b7a8b96949acfeb3790\n```\n\n----------------------------------------\n\nTITLE: Initializing Go Module for sqlc Project\nDESCRIPTION: Creates a new Go module for the sqlc tutorial project\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/tutorials/getting-started-mysql.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo mod init tutorial.sqlc.dev/app\n```\n\n----------------------------------------\n\nTITLE: Missing Query Type Error in SQL\nDESCRIPTION: Error message for a SQL query missing a required query type specification.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/internal/endtoend/testdata/invalid_queries_foo/stdlib/stderr.txt#2025-04-21_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\n-- name: ListFoos\n```\n\n----------------------------------------\n\nTITLE: SQL Query Errors in query.sql\nDESCRIPTION: This snippet shows SQL query errors encountered in the file 'query.sql'. The errors include references to a non-existent column 'foo' and an issue with determining the data type of a parameter.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/internal/endtoend/testdata/invalid_params/pgx/v4/stderr/managed-db.txt#2025-04-21_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nquery.sql:2:8: column \"foo\" does not exist\nquery.sql:5:8: column \"foo\" does not exist\nquery.sql:8:8: column \"foo\" does not exist\nquery.sql:8:20: could not determine data type of parameter $3\n```\n\n----------------------------------------\n\nTITLE: Original Package Configuration in YAML Format\nDESCRIPTION: Example of the original YAML package configuration with built-in Python support before migration.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/guides/migrating-to-sqlc-gen-python.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n  sql:\n  - schema: \"schema.sql\"\n    queries: \"query.sql\"\n    engine: \"postgresql\"\n    gen:\n      python:\n        out: \"src\"\n        package: \"foo\"\n        emit_sync_querier: true\n        emit_async_querier: true\n        query_parameter_limit: 5\n```\n\n----------------------------------------\n\nTITLE: Verifying Schema Changes with sqlc\nDESCRIPTION: Example of using sqlc verify to check for potential issues with schema changes, demonstrating how it catches ambiguous column references.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/reference/changelog.md#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ sqlc verify\nFAIL: app query.sql\n\n=== Failed\n=== FAIL: app query.sql GetUserActions\n    ERROR: column reference \"created_at\" is ambiguous (SQLSTATE 42702)\n```\n\n----------------------------------------\n\nTITLE: Output Format of SQL AST Dump in sqlc\nDESCRIPTION: Shows the structure of the SQL AST output when using the dumpast debug flag. The output includes catalog information, schema details, and table definitions in a hierarchical structure.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/reference/environment-variables.md#2025-04-21_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n([]interface {}) (len=1 cap=1) {\n (*catalog.Catalog)(0xc0004f48c0)({\n  Comment: (string) \"\",\n  DefaultSchema: (string) (len=6) \"public\",\n  Name: (string) \"\",\n  Schemas: ([]*catalog.Schema) (len=3 cap=4) {\n   (*catalog.Schema)(0xc0004f4930)({\n    Name: (string) (len=6) \"public\",\n    Tables: ([]*catalog.Table) (len=1 cap=1) {\n     (*catalog.Table)(0xc00052ff20)({\n      Rel: (*ast.TableName)(0xc00052fda0)({\n       Catalog: (string) \"\",\n       Schema: (string) \"\",\n       Name: (string) (len=7) \"authors\"\n      }),\n\n```\n\n----------------------------------------\n\nTITLE: Default Field Naming Convention in sqlc\nDESCRIPTION: Demonstrates how sqlc generates struct field names from column names by splitting on underscores and capitalizing each part.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/howto/rename.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\naccount     -> Account\nspotify_url -> SpotifyUrl\napp_id      -> AppID\n```\n\n----------------------------------------\n\nTITLE: Building sqlc-gen-json to Avoid Test Failures\nDESCRIPTION: Compiles the sqlc-gen-json tool and places it in the user's Go bin directory. This step is necessary to prevent test failures in the sqlc project.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/guides/development.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngo build -o ~/go/bin/sqlc-gen-json ./cmd/sqlc-gen-json\n```\n\n----------------------------------------\n\nTITLE: Missing RETURNING Clause Error in SQL (DeleteFoo)\nDESCRIPTION: Error message for a SQL query 'DeleteFoo' that specifies ':one' parameter without a RETURNING clause.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/internal/endtoend/testdata/invalid_queries_foo/stdlib/stderr.txt#2025-04-21_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\n-- name: DeleteFoo :one\n```\n\n----------------------------------------\n\nTITLE: SQL Query Error Collection\nDESCRIPTION: Collection of SQL query errors demonstrating parameter type inference failures and invalid column references. The errors include inability to determine parameter types for $1 and $2, as well as reference to a non-existent column 'foo'.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/internal/endtoend/testdata/invalid_params/stdlib/stderr/base.txt#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nquery.sql:1:1: could not determine data type of parameter $1\nquery.sql:5:1: could not determine data type of parameter $2\nquery.sql:8:8: column \"foo\" does not exist\nquery.sql:11:1: could not determine data type of parameter $2\n```\n\n----------------------------------------\n\nTITLE: Starting Docker Compose Containers\nDESCRIPTION: A shell command to start the database containers in detached mode. This launches the configured database server in the background.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/guides/migrating-off-hosted-managed-databases.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: SQL Schema Definition for Students Example\nDESCRIPTION: SQL schema creating tables for students and test scores to demonstrate sqlc.embed functionality.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/reference/changelog.md#2025-04-21_snippet_14\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE students (\n  id   bigserial PRIMARY KEY,\n  name text,\n  age  integer\n)\n\nCREATE TABLE test_scores (\n  student_id bigint,\n  score integer,\n  grade text\n)\n```\n\n----------------------------------------\n\nTITLE: Running Standard Tests for sqlc\nDESCRIPTION: Executes all tests in the sqlc project using Go's testing framework. This command runs the default set of tests, excluding those in the examples folder.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/guides/development.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngo test ./...\n```\n\n----------------------------------------\n\nTITLE: Defining a sample interface with a String() method in Go\nDESCRIPTION: Defines a simple interface 'Counter' with a String() method and a concrete implementation 'CounterImpl' that returns a string representation of its count value.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/internal/endtoend/testdata/copyfrom_singlecolumn_struct_only/issue.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype Counter interface {\n\tString() string\n}\n\ntype CounterImpl struct {\n\tCount int\n}\n\nfunc (c CounterImpl) String() string {\n\treturn fmt.Sprintf(\"%d\", c.Count)\n}\n```\n\n----------------------------------------\n\nTITLE: Updated User Actions Query in SQL\nDESCRIPTION: Updated SQL query to join user actions against the users table, addressing the ambiguous column reference issue.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/reference/changelog.md#2025-04-21_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\n-- name: GetUserActions :many\nSELECT * FROM users u\nJOIN user_actions ua ON u.id = ua.user_id\nORDER BY u.created_at;\n```\n\n----------------------------------------\n\nTITLE: SQL Query Error - Invalid Column Reference\nDESCRIPTION: Error encountered in query.sql file at line 4, position 22, indicating reference to a non-existent column 'invalid_reference'.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/internal/endtoend/testdata/invalid_group_by_reference/postgresql/stderr/managed-db.txt#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n# package querytest\\nquery.sql:4:22: column \"invalid_reference\" does not exist\n```\n\n----------------------------------------\n\nTITLE: Generated Go Code with Incorrect Boolean Parameter Type\nDESCRIPTION: This Go code snippet shows the incorrectly generated struct and method for the SQL query. The 'IsAdmin' field is typed as string instead of bool, which is the issue being reported.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/internal/endtoend/testdata/json_param_type/issue.md#2025-04-21_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\ntype GetAdminsParams struct {\n\tIsAdmin string\n}\n\nfunc (q *Queries) GetAdmins(ctx context.Context, arg GetAdminsParams) ([]User, error) {\n\trows, err := q.db.QueryContext(ctx, getAdmins, arg.IsAdmin)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer rows.Close()\n\t// ... rest of the function\n}\n```\n\n----------------------------------------\n\nTITLE: MySQL CAST Support Implementation\nDESCRIPTION: Shows how sqlc handles CAST operations in MySQL queries, including table creation and selecting with type casting. Demonstrates casting a boolean column to bigint.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/reference/changelog.md#2025-04-21_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE foo (bar BOOLEAN NOT NULL);\n\n-- name: SelectColumnCast :many\nSELECT CAST(bar AS BIGINT) FROM foo;\n```\n\nLANGUAGE: go\nCODE:\n```\npackage querytest\n\nimport (\n\t\"context\"\n)\n\nconst selectColumnCast = `-- name: SelectColumnCast :many\nSELECT CAST(bar AS BIGINT) FROM foo\n`\n\nfunc (q *Queries) SelectColumnCast(ctx context.Context) ([]int64, error) {\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Query Using Standard Join\nDESCRIPTION: Traditional SQL query for selecting student records with their highest test score.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/reference/changelog.md#2025-04-21_snippet_15\n\nLANGUAGE: sql\nCODE:\n```\n-- name: HighScore :many\nWITH high_scores AS (\n  SELECT student_id, max(score) as high_score\n  FROM test_scores\n  GROUP BY 1\n)\nSELECT students.*, high_score::integer\nFROM students\nJOIN high_scores ON high_scores.student_id = students.id;\n```\n\n----------------------------------------\n\nTITLE: Example Go Code for Prepared Statement Usage\nDESCRIPTION: Demonstrates how the generated Go code might look when using prepared statements, including a struct for holding the prepared statement and methods for executing it.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/internal/endtoend/testdata/invalid_insert_unknown_column/issue.md#2025-04-21_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\ntype Queries struct {\n\tdb *sql.DB\n\n\tgetUserByIDStmt *sql.Stmt\n}\n\nfunc (q *Queries) GetUserByID(ctx context.Context, id int64) (User, error) {\n\trow := q.getUserByIDStmt.QueryRowContext(ctx, id)\n\tvar i User\n\terr := row.Scan(\n\t\t&i.ID,\n\t\t&i.Name,\n\t\t&i.Email,\n\t)\n\treturn i, err\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Tables in SQL\nDESCRIPTION: Example SQL code for creating users and user_actions tables, used to demonstrate potential issues with schema changes.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/reference/changelog.md#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE users (\n  id UUID PRIMARY KEY\n);\n\nCREATE TABLE user_actions (\n  id UUID PRIMARY KEY,\n  user_id UUID NOT NULL,\n  action TEXT,\n  created_at TIMESTAMP\n);\n```\n\n----------------------------------------\n\nTITLE: Invalid Query Type Specification\nDESCRIPTION: Error showing use of an invalid query type ':two' which is not one of the supported query type parameters.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/internal/endtoend/testdata/invalid_queries_foo/pgx/v5/stderr.txt#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\n:two\n```\n\n----------------------------------------\n\nTITLE: Renamed Struct Generation in Go\nDESCRIPTION: Displays the Go struct generated by sqlc after renaming the 'Author' struct to 'Writer'.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/howto/rename.md#2025-04-21_snippet_6\n\nLANGUAGE: go\nCODE:\n```\npackage db\n\nimport (\n\t\"database/sql\"\n)\n\ntype Writer struct {\n\tID   int64\n\tName string\n\tBio  sql.NullString\n}\n```\n\n----------------------------------------\n\nTITLE: Renaming Tables in sqlc YAML Configuration (v1)\nDESCRIPTION: Demonstrates how to rename the generated struct for a table using the 'rename' option in YAML v1 format.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/howto/rename.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '1'\npackages:\n- path: db\n  engine: postgresql\n  schema: query.sql\n  queries: query.sql\nrename:\n  author: Writer\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Server with Docker Compose\nDESCRIPTION: A Docker Compose configuration file for setting up a PostgreSQL 16 server locally. It exposes port 5432, creates a default database, and sets up credentials for the postgres user.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/guides/migrating-off-hosted-managed-databases.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nversion: \"3.8\"\nservices:\n  postgresql:\n    image: \"postgres:16\"\n    ports:\n      - \"5432:5432\"\n    restart: always\n    environment:\n      POSTGRES_DB: postgres\n      POSTGRES_PASSWORD: mysecretpassword\n      POSTGRES_USER: postgres\n```\n\n----------------------------------------\n\nTITLE: Complex SELECT Query with Joins, Aggregation, and Filtering in SQL\nDESCRIPTION: This SQL query demonstrates a complex SELECT statement involving multiple joins, aggregation, filtering, and ordering. It retrieves user and video information along with associated tags, applying various SQL features like GROUP BY, HAVING, and ORDER BY clauses.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/examples/jets/README.md#2025-04-21_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT\n  users.id AS user_id,\n  users.name AS user_name,\n  videos.id AS video_id,\n  videos.name AS video_name,\n  videos.created_at AS video_created_at,\n  array_agg(tags.name) AS tag_names\nFROM users\n  INNER JOIN videos ON videos.user_id = users.id\n  INNER JOIN video_tags ON video_tags.video_id = videos.id\n  INNER JOIN tags ON tags.id = video_tags.tag_id\nWHERE\n  videos.created_at >= now() - interval '1 year'\nGROUP BY\n  users.id, users.name, videos.id, videos.name, videos.created_at\nHAVING\n  array_length(array_agg(tags.name), 1) > 2\nORDER BY\n  videos.created_at DESC\nLIMIT 10;\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Interface for Query Result in sqlc\nDESCRIPTION: This code snippet demonstrates how sqlc might generate a TypeScript interface for a query result. It includes type definitions for various SQL data types.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/internal/endtoend/testdata/delete_using/issue.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface AuthorResult {\n  id: number;\n  name: string;\n  bio: string | null;\n  created_at: Date;\n}\n```\n\n----------------------------------------\n\nTITLE: Invalid Query Comment Error in SQL\nDESCRIPTION: This snippet demonstrates an error where a query comment contains multiple conflicting query types.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/internal/endtoend/testdata/invalid_queries_foo/pgx/v4/stderr.txt#2025-04-21_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\n-- name: ListFoos :one :many\n```\n\n----------------------------------------\n\nTITLE: Configuring Complex Import Paths for Type Overrides in SQLC\nDESCRIPTION: This YAML configuration shows how to specify more complex import paths when overriding types in SQLC. It includes import path, package name, and type name.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/reference/config.md#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nversion: \"1\"\npackages: [...]\noverrides:\n  - db_type: \"uuid\"\n    go_type:\n      import: \"a/b/v2\"\n      package: \"b\"\n      type: \"MyType\"\n```\n\n----------------------------------------\n\nTITLE: Example SQL Query with Projected Dynamic Row Type\nDESCRIPTION: An example showing how a SQL query might be annotated to project a dynamic row type instead of a struct, demonstrating the proposed syntax for the feature.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/internal/endtoend/testdata/copyfrom_named_params/issue.md#2025-04-21_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n-- name: GetAuthors :many :row\nSELECT * FROM authors;\n```\n\n----------------------------------------\n\nTITLE: Updating sqlc Configuration to Add Database Servers\nDESCRIPTION: A diff showing the necessary changes to add server URIs to the sqlc configuration file. This modification enables sqlc to connect to local database servers for query analysis.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/guides/migrating-off-hosted-managed-databases.md#2025-04-21_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\nversion: '2'\ncloud:\n  project: '<PROJECT_ID>'\n+ servers:\n+ - name: mysql\n+   uri: mysql://localhost:3306\n+ - name: postgres\n+   uri: postgres://localhost:5432/postgres?sslmode=disable\n```\n\n----------------------------------------\n\nTITLE: Defining SQLite Insert Statement with Multiple Rows\nDESCRIPTION: This SQL snippet demonstrates the desired syntax for inserting multiple rows in a single SQLite statement. It shows how to insert two rows into a 'foo' table with columns 'a' and 'b'.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/internal/endtoend/testdata/json_array_elements/issue.md#2025-04-21_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nINSERT INTO foo (a, b) VALUES (?, ?), (?, ?)\n```\n\n----------------------------------------\n\nTITLE: Invalid FROM Clause Query\nDESCRIPTION: SQL query with syntax error in FROM clause where the WHERE condition is improperly formed.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/internal/endtoend/testdata/syntax_errors/mysql/stderr.txt#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nfrom where id = ?;\n```\n\n----------------------------------------\n\nTITLE: Author Query Validation Errors\nDESCRIPTION: Collection of validation error messages for SQL queries related to author management operations. Includes checks for PostgreSQL engine compatibility, parameter count validation, and restricted query type usage.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/internal/endtoend/testdata/vet_failures/stderr.txt#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nGetAuthor: no-pg: invalid engine: postgresql\nListAuthors: no-pg: invalid engine: postgresql\nCreateAuthor: no-pg: invalid engine: postgresql\nCreateAuthor: only-one-param: too many parameters\nDeleteAuthor: no-pg: invalid engine: postgresql\nDeleteAuthor: no-delete: don't use delete statements\nDeleteAuthor: no-exec: don't use exec\n```\n\n----------------------------------------\n\nTITLE: Proposed Dynamic Row Type Interface in Go\nDESCRIPTION: A Go interface definition for a proposed dynamic row type that would serve as an alternative to struct-based row representation in sqlc generated code.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/internal/endtoend/testdata/copyfrom_named_params/issue.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype Row interface {\n\tGet(string) any\n\tGetNullable(string) (any, bool)\n}\n```\n\n----------------------------------------\n\nTITLE: Renaming Fields in sqlc YAML Configuration (v2)\nDESCRIPTION: Shows how to use the 'rename' mapping in the YAML configuration to customize field names generated by sqlc.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/howto/rename.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nversion: \"2\"\nsql:\n- schema: \"postgresql/schema.sql\"\n  queries: \"postgresql/query.sql\"\n  engine: \"postgresql\"\n  gen:\n    go: \n      package: \"authors\"\n      out: \"postgresql\"\n      rename:\n        spotify_url: \"SpotifyURL\"\n```\n\n----------------------------------------\n\nTITLE: SQL Query with NULL Parameter Handling\nDESCRIPTION: SQL query demonstrating the handling of potentially NULL parameters in a WHERE clause with COALESCE\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/internal/endtoend/testdata/cte_recursive_star/issue.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM some_table WHERE some_column = COALESCE($1, some_column)\n```\n\n----------------------------------------\n\nTITLE: Testing Random Function in SQL Query\nDESCRIPTION: This SQL query attempts to use the 'random' function, which is causing an error. The function is being called with an unknown parameter type, indicating a potential issue with function definition or usage.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/internal/endtoend/testdata/invalid_func_args/stdlib/stderr/base.txt#2025-04-21_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nrandom(unknown)\n```\n\n----------------------------------------\n\nTITLE: Misspelled SELECT Keyword Query\nDESCRIPTION: SQL query containing a typo in the SELECT keyword ('selectt') demonstrating syntax error detection.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/internal/endtoend/testdata/syntax_errors/mysql/stderr.txt#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nselectt id, first_name from users;\n```\n\n----------------------------------------\n\nTITLE: Querying Polymorphic Associations in SQL\nDESCRIPTION: SQL query to retrieve comments associated with a specific post, demonstrating how to filter based on the polymorphic relationship.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/internal/endtoend/testdata/select_system/issue.md#2025-04-21_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\n-- name: GetPostComments :many\nSELECT * FROM comments\nWHERE commentable_id = $1 AND commentable_type = 'Post';\n```\n\n----------------------------------------\n\nTITLE: Basic SQL Query with Positional Parameters\nDESCRIPTION: Example showing SQL query using positional parameters ($1, $2) which results in less readable parameter names in the generated Go struct.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/howto/named_parameters.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n-- name: UpsertAuthorName :one\nUPDATE author\nSET\n  name = CASE WHEN $1::bool\n    THEN $2::text\n    ELSE name\n    END\nRETURNING *;\n```\n\nLANGUAGE: go\nCODE:\n```\ntype UpdateAuthorNameParams struct {\n\tColumn1   bool   `json:\"\"`\n\tColumn2_2 string `json:\"_2\"`\n}\n```\n\n----------------------------------------\n\nTITLE: SQL INSERT Statement Column Count Validation Errors\nDESCRIPTION: Example error messages from SQL query validation showing two common INSERT statement issues: having more target columns than expressions, and having more expressions than target columns. The errors include file location information.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/internal/endtoend/testdata/invalid_queries_bar/pgx/v4/stderr/managed-db.txt#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nquery.sql:2:23: INSERT has more target columns than expressions\nquery.sql:5:35: INSERT has more expressions than target columns\n```\n\n----------------------------------------\n\nTITLE: SQL Function Error - Invalid random() Function Call\nDESCRIPTION: Error message indicating an attempt to use a non-existent random() function with an integer parameter. The error occurs at line 2, character 8 of query.sql.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/internal/endtoend/testdata/invalid_func_args/stdlib/stderr/managed-db.txt#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nrandom(integer)\n```\n\n----------------------------------------\n\nTITLE: Defining PL/pgSQL Function for User Insertion in PostgreSQL\nDESCRIPTION: This PL/pgSQL function demonstrates inserting a user into a database and returning the inserted row. It showcases parameter handling and conditional logic within a PostgreSQL function.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/internal/endtoend/testdata/join_validate_columns/issue.md#2025-04-21_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE OR REPLACE FUNCTION insert_user(username text, email text)\nRETURNS TABLE (like users) AS $$\nDECLARE\n  new_user users%ROWTYPE;\nBEGIN\n  INSERT INTO users (username, email)\n  VALUES (username, email)\n  RETURNING * INTO new_user;\n\n  IF new_user.id IS NULL THEN\n    RAISE EXCEPTION 'Failed to insert user';\n  END IF;\n\n  RETURN QUERY SELECT * FROM users WHERE id = new_user.id;\nEND;\n$$ LANGUAGE plpgsql;\n```\n\n----------------------------------------\n\nTITLE: Initializing Go Module for sqlc Project\nDESCRIPTION: Creates a new Go module for the sqlc tutorial project.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/tutorials/getting-started-postgresql.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo mod init tutorial.sqlc.dev/app\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for SQLC Plugins\nDESCRIPTION: Example showing how to configure environment variable access for SQLC plugins. Demonstrates setting up PATH variable access for a WASM plugin.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/guides/plugins.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '2'\nsql:\n- schema: schema.sql\n  queries: query.sql\n  engine: postgresql\n  codegen:\n  - out: gen\n    plugin: test\nplugins:\n- name: test\n  env:\n  - PATH\n  wasm:\n    url: https://github.com/sqlc-dev/sqlc-gen-test/releases/download/v0.1.0/sqlc-gen-test.wasm\n    sha256: 138220eae508d4b65a5a8cea555edd155eb2290daf576b7a8b96949acfeb3790\n```\n\n----------------------------------------\n\nTITLE: Misuse of :one Parameter in SQL INSERT Query\nDESCRIPTION: This snippet demonstrates an error where an INSERT query specifies the ':one' parameter without a RETURNING clause.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/internal/endtoend/testdata/invalid_queries_foo/pgx/v4/stderr.txt#2025-04-21_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\n-- name: InsertFoo :one\n```\n\n----------------------------------------\n\nTITLE: SQL Insert Column Mismatch Error\nDESCRIPTION: Error message thrown when an INSERT statement contains more values/expressions than there are target columns in the table, indicating a syntax error at position 1:1 in query.sql\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/internal/endtoend/testdata/insert_select_invalid/mysql/stderr.txt#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nquery.sql:1:1: INSERT has more expressions than target columns\n```\n\n----------------------------------------\n\nTITLE: Creating Tables for sqlc.embed Example\nDESCRIPTION: Creates example tables for students and test scores to demonstrate the usage of sqlc.embed macro.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/reference/macros.md#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE students (\n  id   bigserial PRIMARY KEY,\n  name text,\n  age  integer\n);\n\nCREATE TABLE test_scores (\n  student_id bigint,\n  score integer,\n  grade text\n);\n```\n\n----------------------------------------\n\nTITLE: Example SQL Query with IN Clause\nDESCRIPTION: A SQL query demonstrating the usage of IN clause that becomes problematic when the input array is empty.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/internal/endtoend/testdata/cte_join_self/issue.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM table_name WHERE field IN ($1::bigint[])\n```\n\n----------------------------------------\n\nTITLE: Setting Up Authentication for sqlc Cloud Services\nDESCRIPTION: Shell command showing how to set the SQLC_AUTH_TOKEN environment variable, which is required for authenticating with sqlc Cloud for the verify feature.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/howto/verify.md#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nexport SQLC_AUTH_TOKEN=sqlc_xxxxxxxx\n```\n\n----------------------------------------\n\nTITLE: Invalid Query Type Error in SQL\nDESCRIPTION: This snippet shows an error where an unsupported query type ':two' is used.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/internal/endtoend/testdata/invalid_queries_foo/pgx/v4/stderr.txt#2025-04-21_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\n-- name: SomeFoo :two\n```\n\n----------------------------------------\n\nTITLE: SQLC Query Error: Incorrect Parameter Count\nDESCRIPTION: These errors occur when the wrong number of parameters are provided to the 'sqlc.arg' function. SQLC expects exactly one parameter for this function.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/internal/endtoend/testdata/sqlc_arg_invalid/mysql/stderr.txt#2025-04-21_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nquery.sql:5:45: expected 1 parameter to sqlc.arg; got 2\n```\n\nLANGUAGE: SQL\nCODE:\n```\nquery.sql:8:45: expected 1 parameter to sqlc.arg; got 0\n```\n\n----------------------------------------\n\nTITLE: Error Message - SQLC Plugin Validation\nDESCRIPTION: Error message showing that process-based plugins are disabled in SQLC through the SQLCDEBUG environment variable setting. The error occurs during sqlc.json validation when processplugins is set to 0.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/internal/endtoend/testdata/process_plugin_disabled/stderr.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nerror validating sqlc.json: plugin: process-based plugins disabled via SQLCDEBUG=processplugins=0\n```\n\n----------------------------------------\n\nTITLE: Executing Undefined SQL Function in Query\nDESCRIPTION: This SQL query attempts to use an undefined function 'random', which results in an error. The error message indicates that the function 'random' with an unknown parameter does not exist in the current SQL environment.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/internal/endtoend/testdata/invalid_func_args/pgx/v5/stderr/base.txt#2025-04-21_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT random()\n```\n\n----------------------------------------\n\nTITLE: Dumping EXPLAIN Query Results in sqlc\nDESCRIPTION: Sets the SQLCDEBUG environment variable to print the JSON-formatted result from running EXPLAIN on a query when a sqlc vet rule evaluation requires its output, useful for query performance analysis.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/reference/environment-variables.md#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nSQLCDEBUG=dumpexplain=1\n```\n\n----------------------------------------\n\nTITLE: SQL Query Column and Parameter Errors\nDESCRIPTION: Sample error messages from SQL query validation showing invalid column 'foo' references and parameter type inference failure for $3.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/internal/endtoend/testdata/invalid_params/pgx/v5/stderr/managed-db.txt#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nquery.sql:2:8: column \"foo\" does not exist\nquery.sql:5:8: column \"foo\" does not exist\nquery.sql:8:8: column \"foo\" does not exist\nquery.sql:8:20: could not determine data type of parameter $3\n```\n\n----------------------------------------\n\nTITLE: SQL Query Syntax Error Location\nDESCRIPTION: Error message indicating a missing semicolon at line 5, position 1 in query.sql file within the querytest package.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/internal/endtoend/testdata/missing_semicolon/pgx/v5/stderr.txt#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nquery.sql:5:1: missing semicolon at end of file\n```\n\n----------------------------------------\n\nTITLE: Proposed Go Struct with Nullable Custom Type\nDESCRIPTION: This Go code snippet presents a proposed structure for handling nullable custom types in the generated code.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/internal/endtoend/testdata/invalid_update_unknown_column/issue.md#2025-04-21_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\ntype Person struct {\n\tID   int64\n\tName string\n\tMood sql.NullMood // or Mood\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Query Error Message\nDESCRIPTION: Error message indicating a reference to a non-existent column 'invalid_reference' at position 4:10 in query.sql\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/internal/endtoend/testdata/invalid_group_by_reference/mysql/stderr.txt#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nquery.sql:4:10: column reference \"invalid_reference\" not found\n```\n\n----------------------------------------\n\nTITLE: Disabling Process-Based Plugins in sqlc\nDESCRIPTION: Sets the SQLCDEBUG environment variable to disable process-based plugins. When set to 0, any attempt to use a process-based plugin declared in the configuration file will result in an error.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/reference/environment-variables.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nSQLCDEBUG=processplugins=0\n```\n\n----------------------------------------\n\nTITLE: Invalid One Row Query Without RETURNING\nDESCRIPTION: Multiple errors showing queries specified with :one or :batchone parameter but missing required RETURNING clause. Affects DeleteFoo, UpdateFoo, and InsertFoo queries.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/internal/endtoend/testdata/invalid_queries_foo/pgx/v5/stderr.txt#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\n-- name: DeleteFoo :one\n-- name: UpdateFoo :one\n-- name: InsertFoo :one\n-- name: InsertFoo :batchone\n```\n\n----------------------------------------\n\nTITLE: SQL Function Error: Undefined random() Function\nDESCRIPTION: This error message indicates that the SQL query is attempting to use a 'random' function with an integer parameter, which does not exist in the current SQL environment. This could be due to a typo in the function name or a missing function definition.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/internal/endtoend/testdata/invalid_func_args/pgx/v5/stderr/managed-db.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nquery.sql:2:8: function random(integer) does not exist\n```\n\n----------------------------------------\n\nTITLE: SQL Query with Invalid Column Reference\nDESCRIPTION: This SQL query snippet contains an invalid column reference 'invalid_reference', which triggers an error message. The error indicates that the column reference is not found at line 4, column 10 of the query.sql file.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/internal/endtoend/testdata/invalid_group_by_reference/postgresql/stderr/base.txt#2025-04-21_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nquery.sql:4:10: column reference \"invalid_reference\" not found\n```\n\n----------------------------------------\n\nTITLE: Error Message for Unknown Engine in sqlc\nDESCRIPTION: This error message is displayed when sqlc encounters an engine configuration value that it doesn't recognize or support. It indicates that the user has specified an invalid engine named 'bad_engine' in their sqlc configuration.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/internal/endtoend/testdata/bad_config/engine/stderr.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nerror creating compiler: unknown engine: bad_engine\n```\n\n----------------------------------------\n\nTITLE: Running Example Tests for sqlc\nDESCRIPTION: Executes all tests in the sqlc project, including those in the examples folder. This command uses the 'examples' tag to include additional tests that may require specific setups or environments.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/guides/development.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngo test --tags=examples ./...\n```\n\n----------------------------------------\n\nTITLE: Querying Servers Table with Intentional Error in SQL\nDESCRIPTION: This SQL query attempts to select from the 'servers' table, but includes an intentional error using a non-existent column 'name_typo' to test error handling.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/internal/endtoend/testdata/update_set_on_conflict/postgresql/pgx/stderr.txt#2025-04-21_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT name_typo FROM servers;\n```\n\n----------------------------------------\n\nTITLE: Example of failed function with interface parameter in sqlc\nDESCRIPTION: Shows an attempted sqlc query definition for a function that takes a Counter interface as a parameter, which appears to be the source of the issue being reported.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/internal/endtoend/testdata/copyfrom_singlecolumn_struct_only/issue.md#2025-04-21_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n-- name: ExampleMethod :one\nSELECT *\nFROM some_table\nWHERE name = sqlc.arg(counter)::text;\n```\n\n----------------------------------------\n\nTITLE: Erroneous INSERT Query in SQL\nDESCRIPTION: This snippet represents an SQL INSERT statement that has more expressions than target columns, resulting in an error. The error message indicates a mismatch between the number of values being inserted and the number of columns specified.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/internal/endtoend/testdata/insert_select_invalid/postgresql/pgx/v5/stderr/base.txt#2025-04-21_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nINSERT has more expressions than target columns\n```\n\n----------------------------------------\n\nTITLE: Installing sqlc using Go Install\nDESCRIPTION: Command to install sqlc directly using Go's package manager. Requires Go 1.21 or later.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/overview/install.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngo install github.com/sqlc-dev/sqlc/cmd/sqlc@latest\n```\n\n----------------------------------------\n\nTITLE: SQL Table Alias Error\nDESCRIPTION: Error message showing an invalid reference to table alias 'p' at line 11, character 9 in query.sql file\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/internal/endtoend/testdata/invalid_table_alias/sqlite/stderr.txt#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nquery.sql:11:9: table alias \"p\" does not exist\n```\n\n----------------------------------------\n\nTITLE: SQL Star Expansion Error Message\nDESCRIPTION: Error message indicating a star (*) expansion failure at position 1:1 in query.sql file within a package querytest context.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/internal/endtoend/testdata/star_expansion_failed/postgresql/pgx/stderr.txt#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nquery.sql:1:1: star expansion failed for query\n```\n\n----------------------------------------\n\nTITLE: SQLC Function and Parameter Validation Errors\nDESCRIPTION: Collection of error messages showing various invalid uses of SQLC functions including undefined functions, incorrect parameter counts, and invalid parameter types.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/internal/endtoend/testdata/sqlc_arg_invalid/sqlite/stderr.txt#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n-- Error cases:\nquery.sql:7:1: function \"sqlc.argh\" does not exist\nquery.sql:10:45: expected 1 parameter to sqlc.arg; got 2\nquery.sql:13:45: expected 1 parameter to sqlc.arg; got 0\nquery.sql:16:45: expected parameter to sqlc.arg to be string or reference; got *ast.FuncCall\nquery.sql:19:45: expected parameter to sqlc.arg to be string or reference; got *ast.ParamRef\n```\n\n----------------------------------------\n\nTITLE: SQL Schema Column Type Conflict Error\nDESCRIPTION: Error message indicating a type conflict in SQL schema definition for column 'name' at position 1:1.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/internal/endtoend/testdata/ddl_create_table_invalid_inherits/postgresql/stdlib/stderr.txt#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nschema.sql:1:1: column \"name\" has a type conflict\n```\n\n----------------------------------------\n\nTITLE: Original Package Configuration in JSON Format\nDESCRIPTION: Example of the original JSON package configuration with built-in Python support before migration.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/guides/migrating-to-sqlc-gen-python.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n  \"sql\": [\n    {\n      \"schema\": \"schema.sql\",\n      \"queries\": \"query.sql\",\n      \"engine\": \"postgresql\",\n      \"gen\": {\n        \"python\": {\n          \"out\": \"src\",\n          \"package\": \"foo\",\n          \"emit_sync_querier\": true,\n          \"emit_async_querier\": true,\n          \"query_parameter_limit\": 5\n        }\n      }\n    }\n  ]\n```\n\n----------------------------------------\n\nTITLE: SQLC Query Error: Invalid Parameter Type\nDESCRIPTION: These errors occur when the parameter provided to 'sqlc.arg' is of an unexpected type. SQLC expects the parameter to be either a string or a reference.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/internal/endtoend/testdata/sqlc_arg_invalid/mysql/stderr.txt#2025-04-21_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nquery.sql:11:45: expected parameter to sqlc.arg to be string or reference; got *ast.FuncCall\n```\n\nLANGUAGE: SQL\nCODE:\n```\nquery.sql:14:45: expected parameter to sqlc.arg to be string or reference; got *ast.ParamRef\n```\n\n----------------------------------------\n\nTITLE: Implementing TypeScript Function for SQL Query in sqlc\nDESCRIPTION: This snippet shows a potential implementation of a TypeScript function generated by sqlc to execute a SQL query. It includes type annotations and async/await syntax.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/internal/endtoend/testdata/delete_using/issue.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nasync function getAuthor(db: DBConnection, id: number): Promise<AuthorResult | null> {\n  // Implementation details\n}\n```\n\n----------------------------------------\n\nTITLE: Invalid SQL Function Call Error\nDESCRIPTION: SQL error message showing attempt to use undefined random() function with unknown parameter type\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/internal/endtoend/testdata/invalid_func_args/pgx/v4/stderr/base.txt#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nquery.sql:2:8: function random(unknown) does not exist\n```\n\n----------------------------------------\n\nTITLE: Migrated Package Configuration in JSON Format\nDESCRIPTION: Example of the migrated JSON package configuration using the sqlc-gen-python plugin, showing how to move settings into the plugin options.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/guides/migrating-to-sqlc-gen-python.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n  \"sql\": [\n    {\n      \"schema\": \"schema.sql\",\n      \"queries\": \"query.sql\",\n      \"engine\": \"postgresql\",\n      \"codegen\": [\n        {\n          \"out\": \"src\",\n          \"plugin\": \"py\",\n          \"options\": {\n            \"package\": \"authors\",\n            \"emit_sync_querier\": true,\n            \"emit_async_querier\": true,\n            \"query_parameter_limit\": 5\n          }\n        }\n      ]\n    }\n  ]\n```\n\n----------------------------------------\n\nTITLE: SQL Query Error: Missing Column in Authors Table\nDESCRIPTION: This snippet shows an error message generated during SQL query execution. It indicates that the column 'missing_column' does not exist in the 'authors' table. This error likely occurs when trying to access or manipulate a non-existent column in an SQL statement.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/internal/endtoend/testdata/invalid_insert_unknown_column/postgresql/pgx/stderr.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nquery.sql:3:14: column \"missing_column\" of relation \"authors\" does not exist\n```\n\n----------------------------------------\n\nTITLE: SQL Function Call Error\nDESCRIPTION: Example of an error message from an SQL query execution where an undefined function 'frobnicate' is being called with an unknown parameter type.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/internal/endtoend/testdata/unknown_func/pganalyze/stderr.txt#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nquery.sql:2:31: function frobnicate(unknown) does not exist\n```\n\n----------------------------------------\n\nTITLE: Analyzing SQL Queries with Linting Rules\nDESCRIPTION: This snippet shows multiple SQL queries with associated linting rules and their outcomes. It includes examples of always-fail and no-exec rules, as well as cases where specific rules are skipped or invalid.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/internal/endtoend/testdata/vet_disable/stderr.txt#2025-04-21_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nquery.sql: RunVetAll: always-fail: Fail\nquery.sql: RunVetAll: no-exec: don't use exec\nquery.sql: SkipVet_always_fail: no-exec: don't use exec\nquery.sql: SkipVet_no_exec: always-fail: Fail\nquery.sql: SkipVetInvalidRule: rule-check error: rule \"block-delete\" does not exist in the config file\n```\n\n----------------------------------------\n\nTITLE: SQL Query Error - Invalid Table Alias\nDESCRIPTION: Error message indicating that a table alias 'p' is referenced but does not exist in the query at line 4, column 9 of query.sql.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/internal/endtoend/testdata/invalid_table_alias/postgresql/stderr/base.txt#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nquery.sql:4:9: table alias \"p\" does not exist\n```\n\n----------------------------------------\n\nTITLE: Original Package Configuration in YAML\nDESCRIPTION: Example of the original YAML package configuration before migration that uses built-in Kotlin support.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/guides/migrating-to-sqlc-gen-kotlin.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n  sql:\n  - schema: \"schema.sql\"\n    queries: \"query.sql\"\n    engine: \"postgresql\"\n    gen:\n      kotlin:\n        out: \"src/main/kotlin/com/example/foo\"\n        package: \"com.example.foo\"\n```\n\n----------------------------------------\n\nTITLE: Reporting SQL Syntax Error in sqlc\nDESCRIPTION: This snippet represents an error message from sqlc, a SQL compiler. It indicates a syntax error in a SQL query file named 'query.sql' at line 5, column 1, where a semicolon is missing at the end of the file.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/internal/endtoend/testdata/missing_semicolon/stdlib/stderr.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# package querytest\nquery.sql:5:1: missing semicolon at end of file\n```\n\n----------------------------------------\n\nTITLE: Misuse of :one Parameter in SQL UPDATE Query\nDESCRIPTION: This snippet shows an error where an UPDATE query specifies the ':one' parameter without a RETURNING clause.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/internal/endtoend/testdata/invalid_queries_foo/pgx/v4/stderr.txt#2025-04-21_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\n-- name: UpdateFoo :one\n```\n\n----------------------------------------\n\nTITLE: SQLC Query Error: Non-existent Function\nDESCRIPTION: This error occurs when trying to use a function that doesn't exist in SQLC. The specific function 'sqlc.argh' is not recognized.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/internal/endtoend/testdata/sqlc_arg_invalid/mysql/stderr.txt#2025-04-21_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nquery.sql:1:1: function \"sqlc.argh\" does not exist\n```\n\n----------------------------------------\n\nTITLE: Demonstrating sqlc diff command output with diff output\nDESCRIPTION: Example showing the output of running 'sqlc diff' to compare generated code with what's on disk. This helps catch when developers forget to run 'sqlc generate' or make manual edits to generated code.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/howto/ci-cd.md#2025-04-21_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n% sqlc diff\n--- a/postgresql/query.sql.go\n+++ b/postgresql/query.sql.go\n@@ -55,7 +55,7 @@\n\n const listAuthors = `-- name: ListAuthors :many\n SELECT id, name, bio FROM authors\n-ORDER BY name\n+ORDER BY bio\n `\n\n```\n\n----------------------------------------\n\nTITLE: Invalid SQL INSERT Statements with Column/Expression Mismatches\nDESCRIPTION: Two SQL error messages indicating incorrect INSERT statement syntax. The first error shows too many target columns compared to provided expressions, while the second shows too many expressions compared to target columns.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/internal/endtoend/testdata/invalid_queries_bar/pgx/v5/stderr/base.txt#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nquery.sql:1:1: INSERT has more target columns than expressions\nquery.sql:5:1: INSERT has more expressions than target columns\n```\n\n----------------------------------------\n\nTITLE: Error Message from sqlc Code Generation\nDESCRIPTION: Error output showing a naming conflict where a struct name 'NullFoo' matches an existing enum name, which is not allowed in the sqlc code generation process.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/internal/endtoend/testdata/duplicate_go_names/null_enum/stderr.txt#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nerror generating code: struct name conflicts with enum name: NullFoo\n```\n\n----------------------------------------\n\nTITLE: Listing All Authors\nDESCRIPTION: Defines a SQL query and Go function to retrieve all authors from the database. The authors are ordered by their bio field.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/internal/endtoend/testdata/diff_output/stderr.txt#2025-04-21_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\n-- name: ListAuthors :many\nSELECT id, name, bio FROM authors\nORDER BY bio\n```\n\nLANGUAGE: Go\nCODE:\n```\nfunc (q *Queries) ListAuthors(ctx context.Context) ([]Author, error) {\n\trows, err := q.db.QueryContext(ctx, listAuthors)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer rows.Close()\n\tvar items []Author\n\tfor rows.Next() {\n\t\tvar i Author\n\t\tif err := rows.Scan(&i.ID, &i.Name, &i.Bio); err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\titems = append(items, i)\n\t}\n\tif err := rows.Close(); err != nil {\n\t\treturn nil, err\n\t}\n\tif err := rows.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\treturn items, nil\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Query Errors for Nonexistent Relation\nDESCRIPTION: Error log showing four different SQL queries attempting to access a non-existent database relation 'nonexisting_relation'. The errors occur at lines 2, 5, 8, and 11 of query.sql.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/internal/endtoend/testdata/relation_does_not_exist/postgresql/stderr/managed-db.txt#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nquery.sql:2:15: relation \"nonexisting_relation\" does not exist\nquery.sql:5:15: relation \"nonexisting_relation\" does not exist\nquery.sql:8:8: relation \"nonexisting_relation\" does not exist\nquery.sql:11:13: relation \"nonexisting_relation\" does not exist\n```\n\n----------------------------------------\n\nTITLE: Setting sqlc Authentication Token\nDESCRIPTION: Shell command to set the authentication token as an environment variable for sqlc Cloud access.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/howto/push.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nexport SQLC_AUTH_TOKEN=sqlc_xxxxxxxx\n```\n\n----------------------------------------\n\nTITLE: Creating Table with Invalid Type in SQLite\nDESCRIPTION: Demonstrates an invalid table creation statement using the non-existent STRING type instead of the correct TEXT type, resulting in error code 42704.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/internal/endtoend/testdata/ddl_create_table_unknown_type/postgresql/pgx/stderr.txt#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE test_table (\n    id STRING\n);\n```\n\n----------------------------------------\n\nTITLE: Querying a Table in a Specific Schema in PostgreSQL\nDESCRIPTION: This SQL query selects all records from the 'mytable' in the 'myschema' schema. It demonstrates how to reference a table with its schema name in a SELECT statement.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/internal/endtoend/testdata/null_if_type/issue.md#2025-04-21_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT * FROM myschema.mytable;\n```\n\n----------------------------------------\n\nTITLE: Executing sqlc Push Dry Run\nDESCRIPTION: Example of running sqlc push command with dry-run flag to preview what files would be uploaded.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/howto/push.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ sqlc push --dry-run\n2023/11/21 10:39:51 INFO config file=sqlc.yaml bytes=912\n2023/11/21 10:39:51 INFO codegen_request queryset=app file=codegen_request.pb\n2023/11/21 10:39:51 INFO schema queryset=app file=migrations/00001_initial.sql bytes=3033\n2023/11/21 10:39:51 INFO query queryset=app file=queries/app.sql bytes=1150\n```\n\n----------------------------------------\n\nTITLE: SQL Function Error Message\nDESCRIPTION: Error message indicating an attempt to call a non-existent SQL function 'doesntexist()' at line 2, column 8 of query.sql file.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/internal/endtoend/testdata/strict_function_checks/postgresql/stderr/managed-db.txt#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nquery.sql:2:8: function doesntexist() does not exist\n```\n\n----------------------------------------\n\nTITLE: Alternative Update Query with Return\nDESCRIPTION: Modified version of the update query that returns the updated record.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/tutorials/getting-started-postgresql.md#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\n-- name: UpdateAuthor :one\nUPDATE authors\n  set name = $2,\n  bio = $3\nWHERE id = $1\nRETURNING *;\n```\n\n----------------------------------------\n\nTITLE: Pushing with Tags in sqlc\nDESCRIPTION: Example of using the push command with a tag parameter to create a reference point.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/howto/push.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ sqlc push --tag main\n```\n\n----------------------------------------\n\nTITLE: Proposed Go Function for Multi-Row Insert in sqlc\nDESCRIPTION: This Go code snippet illustrates the desired function signature and usage for inserting multiple rows using sqlc. It shows a function that takes multiple pairs of 'a' and 'b' values as arguments.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/internal/endtoend/testdata/json_array_elements/issue.md#2025-04-21_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nfunc (q *Queries) InsertFoo(ctx context.Context, arg1 int64, arg2 string, arg3 int64, arg4 string) error\n```\n\n----------------------------------------\n\nTITLE: Missing Query Type Error\nDESCRIPTION: SQL query validation error showing missing required query type annotation. Valid types include :one, :many, :exec, :execrows, :execlastid, :execresult, :copyfrom, batchexec, batchmany, and batchone.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/internal/endtoend/testdata/invalid_queries_foo/pgx/v5/stderr.txt#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n-- name: ListFoos\n```\n\n----------------------------------------\n\nTITLE: Creating Authors Table Schema in SQL\nDESCRIPTION: SQL schema definition for creating an authors table with id and bio fields.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/docs/howto/update.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE authors (\n  id         SERIAL PRIMARY KEY,\n  bio        text   NOT NULL\n);\n```\n\n----------------------------------------\n\nTITLE: SQLC Query Validation Errors\nDESCRIPTION: Collection of SQLC compiler error messages indicating invalid column references to 'foo' and inability to infer parameter type for $3. Shows multiple validation failures at different lines in query.sql file.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/internal/endtoend/testdata/invalid_params/stdlib/stderr/managed-db.txt#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nquery.sql:2:8: column \"foo\" does not exist\nquery.sql:5:8: column \"foo\" does not exist\nquery.sql:8:8: column \"foo\" does not exist\nquery.sql:8:20: could not determine data type of parameter $3\n```\n\n----------------------------------------\n\nTITLE: SQL Relation Not Found Errors\nDESCRIPTION: SQL error messages indicating attempts to reference a non-existing table or relation named 'nonexisting_relation' across multiple query lines.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/internal/endtoend/testdata/relation_does_not_exist/postgresql/stderr/base.txt#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nquery.sql:1:1: relation \"nonexisting_relation\" does not exist\nquery.sql:5:1: relation \"nonexisting_relation\" does not exist\nquery.sql:8:1: relation \"nonexisting_relation\" does not exist\nquery.sql:11:1: relation \"nonexisting_relation\" does not exist\n```\n\n----------------------------------------\n\nTITLE: Querying with Non-Existent Random Function in SQL\nDESCRIPTION: This SQL query attempts to use a 'random' function with an integer parameter. The function is not recognized by the SQL engine, resulting in an error. This snippet is likely part of a test case to check error handling or function validation.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/internal/endtoend/testdata/invalid_func_args/pgx/v4/stderr/managed-db.txt#2025-04-21_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT random(1);\n```\n\n----------------------------------------\n\nTITLE: Malformed SELECT Statement\nDESCRIPTION: SQL query with incorrect SELECT statement structure.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/internal/endtoend/testdata/syntax_errors/mysql/stderr.txt#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nselect id;\n```\n\n----------------------------------------\n\nTITLE: Invalid Query Type Error in SQL\nDESCRIPTION: Error message for a SQL query specifying an invalid query type (':two').\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/internal/endtoend/testdata/invalid_queries_foo/stdlib/stderr.txt#2025-04-21_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\n-- name: SomeFoo :two\n```\n\n----------------------------------------\n\nTITLE: Erroneous INSERT Statement in SQL\nDESCRIPTION: This code snippet represents an INSERT statement that contains more expressions than target columns, resulting in an error. The error message indicates that the issue occurs at line 3, column 11 of the query.sql file.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/internal/endtoend/testdata/insert_select_invalid/postgresql/stdlib/stderr/managed-db.txt#2025-04-21_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nINSERT has more expressions than target columns\n```\n\n----------------------------------------\n\nTITLE: Missing RETURNING Clause Error in SQL (UpdateFoo)\nDESCRIPTION: Error message for a SQL query 'UpdateFoo' that specifies ':one' parameter without a RETURNING clause.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/internal/endtoend/testdata/invalid_queries_foo/stdlib/stderr.txt#2025-04-21_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\n-- name: UpdateFoo :one\n```\n\n----------------------------------------\n\nTITLE: SQL Code Generation Error - Invalid File Path\nDESCRIPTION: Error message thrown when attempting to generate code with an invalid output file path. The error specifically relates to an unsafe file path 'D:/tmp/unsafe.txt'.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/internal/endtoend/testdata/wasm_plugin_sqlc_gen_unsafe_paths/stderr_windows.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nerror generating code: invalid file output path: D:/tmp/unsafe.txt\n```\n\n----------------------------------------\n\nTITLE: Demonstrating CTE Usage in PostgreSQL Query\nDESCRIPTION: This SQL snippet shows an example of using a Common Table Expression (CTE) in a PostgreSQL query. It defines a CTE named 'cte' and then uses it in a SELECT statement.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/internal/endtoend/testdata/exec_no_return_struct/issue.md#2025-04-21_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\n-- name: GetFoo :many\nWITH cte AS (\n    SELECT id, name\n    FROM foo\n    WHERE id = $1\n)\nSELECT id, name\nFROM cte\nWHERE name = $2;\n```\n\n----------------------------------------\n\nTITLE: Displaying Error for Unknown SQL Driver in Code Generation\nDESCRIPTION: This error message is displayed when an invalid or unknown SQL driver is specified during code generation. It indicates that the process failed due to the use of an unrecognized driver.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/internal/endtoend/testdata/golang_invalid_sql_driver/stderr.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nerror generating code: invalid options: unknown SQL driver: github.com/unknown/driver\n```\n\n----------------------------------------\n\nTITLE: Erroneous INSERT Query in SQL\nDESCRIPTION: This snippet represents an SQL INSERT statement that has more expressions than target columns, resulting in an error. The error occurs at line 3, column 11 of the query.sql file.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/internal/endtoend/testdata/insert_select_invalid/postgresql/pgx/v4/stderr/managed-db.txt#2025-04-21_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nINSERT has more expressions than target columns\n```\n\n----------------------------------------\n\nTITLE: SQL Query Error - Invalid Column Reference\nDESCRIPTION: Example of an error where a query attempts to reference a non-existent column 'is_deleted' in the 'articles' table.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/internal/endtoend/testdata/invalid_update_unknown_column/postgresql/pgx/stderr.txt#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ncolumn \"is_deleted\" of relation \"articles\" does not exist\n```\n\n----------------------------------------\n\nTITLE: Inserting Data with Mismatched Columns in SQL\nDESCRIPTION: This SQL query attempts to insert data into a table, but there is a mismatch between the number of columns specified and the number of values provided. This results in an error indicating that the INSERT statement has more expressions than target columns.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/internal/endtoend/testdata/insert_select_invalid/postgresql/pgx/v5/stderr/managed-db.txt#2025-04-21_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nINSERT has more expressions than target columns\n```\n\n----------------------------------------\n\nTITLE: SQL Query Error: Non-existent Table Alias\nDESCRIPTION: This snippet shows an error message from an SQL query execution. The error occurs on line 4, column 9 of the 'query.sql' file, indicating that the table alias 'p' does not exist in the query context.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/internal/endtoend/testdata/invalid_table_alias/mysql/stderr.txt#2025-04-21_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nquery.sql:4:9: table alias \"p\" does not exist\n```\n\n----------------------------------------\n\nTITLE: SQLc Query Error - Invalid Column Reference\nDESCRIPTION: SQL query error message indicating that a column named 'invalid_reference' was not found in the query at line 11, position 10.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/internal/endtoend/testdata/invalid_group_by_reference/sqlite/stderr.txt#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nquery.sql:11:10: column reference \"invalid_reference\" not found\n```\n\n----------------------------------------\n\nTITLE: Identifying SQL INSERT Error in Query File\nDESCRIPTION: This snippet shows an error message from an SQL query file. The error occurs on line 4, column 1 of the query.sql file, indicating that the INSERT statement has more expressions than the target columns can accommodate.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/internal/endtoend/testdata/insert_select_invalid/sqlite/stderr.txt#2025-04-21_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nquery.sql:4:1: INSERT has more expressions than target columns\n```\n\n----------------------------------------\n\nTITLE: SQL Query Missing Semicolon Error\nDESCRIPTION: Error output showing a syntax error in query.sql where a semicolon is missing at the end of the file on line 5.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/internal/endtoend/testdata/missing_semicolon/pgx/v4/stderr.txt#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nquery.sql:5:1: missing semicolon at end of file\n```\n\n----------------------------------------\n\nTITLE: SQL Query Syntax Error - FROM clause\nDESCRIPTION: Syntax error in SQL query related to incorrect FROM clause usage at line 2, column 35.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/internal/endtoend/testdata/syntax_errors/postgresql/stderr.txt#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nquery/from.sql:2:35: syntax error at or near \"from\"\n```\n\n----------------------------------------\n\nTITLE: SQL Query Syntax Error - SELECT clause\nDESCRIPTION: Syntax error in SQL query related to incorrect SELECT clause usage at line 2, column 29.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/internal/endtoend/testdata/syntax_errors/postgresql/stderr.txt#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nquery/select.sql:2:29: syntax error at or near \"select\"\n```\n\n----------------------------------------\n\nTITLE: SQL Query Syntax Error - Misspelled SELECT\nDESCRIPTION: Syntax error in SQL query due to misspelled SELECT keyword (written as 'selectt') at line 2, column 2.\nSOURCE: https://github.com/sqlc-dev/sqlc/blob/main/internal/endtoend/testdata/syntax_errors/postgresql/stderr.txt#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nquery/typo.sql:2:2: syntax error at or near \"selectt\"\n```"
  }
]