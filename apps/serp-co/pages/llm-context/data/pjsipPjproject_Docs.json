[
  {
    "owner": "pjsip",
    "repo": "pjproject_docs",
    "content": "TITLE: Implementing a Basic PJSIP Client in C++\nDESCRIPTION: A complete C++ application that initializes the PJSIP library, creates a SIP transport, registers with a SIP server, and handles registration events. The code creates a custom Account class that extends the base Account class to receive registration notifications.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/pjsua2/hello_world.rst#2025-04-23_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n#include <pjsua2.hpp>\n#include <iostream>\n\nusing namespace pj;\n\n// Subclass to extend the Account and get notifications etc.\nclass MyAccount : public Account {\npublic:\n    virtual void onRegState(OnRegStateParam &prm) {\n        AccountInfo ai = getInfo();\n        std::cout << (ai.regIsActive? \"*** Register:\" : \"*** Unregister:\")\n                  << \" code=\" << prm.code << std::endl;\n    }\n};\n\nint main()\n{\n    Endpoint ep;\n    \n    ep.libCreate();\n    \n    // Initialize endpoint\n    EpConfig ep_cfg;\n    ep.libInit( ep_cfg );\n    \n    // Create SIP transport. Error handling sample is shown\n    TransportConfig tcfg;\n    tcfg.port = 5060;\n    try {\n        ep.transportCreate(PJSIP_TRANSPORT_UDP, tcfg);\n    } catch (Error &err) {\n        std::cout << err.info() << std::endl;\n        return 1;\n    }\n    \n    // Start the library (worker threads etc)\n    ep.libStart();\n    std::cout << \"*** PJSUA2 STARTED ***\" << std::endl;\n    \n    // Configure an AccountConfig\n    AccountConfig acfg;\n    acfg.idUri = \"sip:test@sip.pjsip.org\";\n    acfg.regConfig.registrarUri = \"sip:sip.pjsip.org\";\n    AuthCredInfo cred(\"digest\", \"*\", \"test\", 0, \"secret\");\n    acfg.sipConfig.authCreds.push_back( cred );\n    \n    // Create the account\n    MyAccount *acc = new MyAccount;\n    acc->create(acfg);\n    \n    // Here we don't have anything else to do..\n    pj_thread_sleep(10000);\n    \n    // Delete the account. This will unregister from server\n    delete acc;\n    \n    // This will implicitly shutdown the library\n    return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a SIP Account with Registration in C++\nDESCRIPTION: This snippet demonstrates how to create a SIP account with registration capabilities. It configures the account with a registrar URI and authentication credentials.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/pjsua2/using/account.rst#2025-04-23_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\nAccountConfig acc_cfg;\nacc_cfg.idUri = \"sip:test1@pjsip.org\";\nacc_cfg.regConfig.registrarUri = \"sip:pjsip.org\";\nacc_cfg.sipConfig.authCreds.push_back( AuthCredInfo(\"digest\", \"*\", \"test1\", 0, \"secret1\") );\n\nMyAccount *acc = new MyAccount;\ntry {\n    acc->create(acc_cfg);\n} catch(Error& err) {\n    cout << \"Account creation error: \" << err.info() << endl;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic PJSIP Client in Python3\nDESCRIPTION: A Python3 implementation of the PJSIP client that initializes the library, configures a SIP transport, and registers an account. The code demonstrates subclassing the Account class to handle registration notifications in Python.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/pjsua2/hello_world.rst#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nimport pjsua2 as pj\n\n# Subclass to extend the Account and get notifications etc.\nclass Account(pj.Account):\n  def onRegState(self, prm):\n      print(\"***OnRegState: \" + prm.reason)\n\n# pjsua2 test function\ndef pjsua2_test():\n  # Create and initialize the library\n  ep_cfg = pj.EpConfig()\n  ep = pj.Endpoint()\n  ep.libCreate()\n  ep.libInit(ep_cfg)\n  \n  # Create SIP transport. Error handling sample is shown\n  sipTpConfig = pj.TransportConfig();\n  sipTpConfig.port = 5060;\n  ep.transportCreate(pj.PJSIP_TRANSPORT_UDP, sipTpConfig);\n  # Start the library\n  ep.libStart();\n  \n  acfg = pj.AccountConfig();\n  acfg.idUri = \"sip:test@sip.pjsip.org\";\n  acfg.regConfig.registrarUri = \"sip:sip.pjsip.org\";\n  cred = pj.AuthCredInfo(\"digest\", \"*\", \"test\", 0, \"pwtest\");\n  acfg.sipConfig.authCreds.append( cred );\n  # Create the account\n  acc = Account();\n  acc.create(acfg);\n  # Here we don't have anything else to do..\n  time.sleep(10);\n\n  # Destroy the library\n  ep.libDestroy()\n\n#\n# main()\n#\nif __name__ == \"__main__\":\n  pjsua2_test()\n```\n\n----------------------------------------\n\nTITLE: Subclassing the Call Class in PJSIP C++\nDESCRIPTION: Creates a custom call class by subclassing pj::Call to handle call state changes and media state changes. This pattern is required to properly use the Call class in PJSIP.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/pjsua2/using/call.rst#2025-04-23_snippet_0\n\nLANGUAGE: c++\nCODE:\n```\nclass MyCall : public Call\n{\npublic:\n    MyCall(Account &acc, int call_id = PJSUA_INVALID_ID)\n    : Call(acc, call_id)\n    { }\n\n    ~MyCall()\n    { }\n\n    // Notification when call's state has changed.\n    virtual void onCallState(OnCallStateParam &prm);\n\n    // Notification when call's media state has changed.\n    virtual void onCallMediaState(OnCallMediaStateParam &prm);\n};\n```\n\n----------------------------------------\n\nTITLE: PJSIP Main Thread and Worker Thread Implementation in C\nDESCRIPTION: Demonstrates the proper initialization and shutdown sequence for PJSIP using both main and worker threads. Shows how to initialize the library in the main thread and perform PJSUA operations in a separate worker thread for better responsiveness.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/develop/init_shutdown_thread.rst#2025-04-23_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nint main()\n{\n    pj_init();\n    // Continue with PJSUA initialization here or create a secondary thread\n    ....\n    // After pjsua_destroy() is called\n    pj_shutdown();\n}\n\nint worker_thread()\n{\n    // Register the thread, after pj_init() is called\n    pj_thread_register();\n\n    // Create pjsua and pool\n    pjsua_create();\n    pjsua_pool_create();\n\n    // Init pjsua\n    pjsua_init();\n\n    // Start pjsua\n    pjsua_start();\n\n    .........\n\n    // Destroy pjsua\n    pjsua_destroy();\n}\n```\n\n----------------------------------------\n\nTITLE: Handling IPv4 to IPv6 Network Transition in PJSIP\nDESCRIPTION: Implementation of IP address type change from IPv4 to IPv6. Creates new IPv6 transport if needed, modifies account configuration for IPv6 usage, and handles IP change through the PJSIP API. Includes configuration options for both PJSIP 2.14+ and earlier versions.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/network_nat/ip_change.rst#2025-04-23_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nstatic void ip_change_to_ip6()\n{\n    ...\n    // Create new IPv6 transport, if it's not yet available. e.g: TLS6\n    status = pjsua_transport_create(PJSIP_TRANSPORT_TLS6,\n                                    &tp_cfg, &transport_id);\n    ...\n\n    // For PJSIP earlier than 2.14\n    // Bind account to IPv6 transport\n    // pjsua_acc_set_transport(acc_id, transport_id);\n\n    // Modify account configuration\n    pjsua_acc_get_config(acc_id, app_config.pool, &acc_cfg);\n\n    // ******************************************************\n    // ** For PJSIP 2.14 and above:\n    // Set SIP use to PJSUA_IPV6_ENABLED_USE_IPV6_ONLY\n    // Important: if you use PREFER_IPV6, existing calls that\n    // use IPv4 will still use IPv4.\n    acc_cfg.ipv6_sip_use = PJSUA_IPV6_ENABLED_USE_IPV6_ONLY;\n    // Set media use to USE_IPV6_ONLY or PREFER_IPV6.\n    acc_cfg.ipv6_media_use = PJSUA_IPV6_ENABLED_USE_IPV6_ONLY;\n    // ** For PJSIP earlier than 2.14:\n    // acc_cfg.ipv6_media_use = PJSUA_IPV6_ENABLED;\n    // ******************************************************\n\n    // acc_cfg.ip_change_cfg.hangup_calls = PJ_TRUE;\n\n    // Available in #3910, to prevent pjsua_acc_modify()\n    // to prematurely send registration\n    acc_cfg.disable_reg_on_modify = PJ_TRUE;\n    pjsua_acc_modify(acc_id, &acc_cfg);\n\n    ...\n    // Handle ip change\n    pjsua_ip_change_param_default(&param);\n    pjsua_handle_ip_change(param);\n}\n```\n\n----------------------------------------\n\nTITLE: Making Outgoing Calls in PJSIP C++\nDESCRIPTION: Demonstrates how to make outgoing SIP calls by creating a call instance and invoking makeCall() with a destination URI. The call uses default call settings via CallOpParam.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/pjsua2/using/call.rst#2025-04-23_snippet_1\n\nLANGUAGE: c++\nCODE:\n```\nCall *call = new MyCall(*acc);\nCallOpParam prm(true); // Use default call settings\ntry {\n    call->makeCall(dest_uri, prm);\n} catch(Error& err) {\n    cout << err.info() << endl;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Call Audio Media in C++\nDESCRIPTION: Retrieves audio media from a call and establishes bidirectional audio between the call and local audio devices, enabling communication with the remote party.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/pjsua2/using/media_audio.rst#2025-04-23_snippet_7\n\nLANGUAGE: c++\nCODE:\n```\nCallInfo ci = call.getInfo();\nAudioMedia *aud_med = NULL;\n\nfor (unsigned i=0; i<ci.media.size(); ++i) {\n    if (ci.media[i].type == PJMEDIA_TYPE_AUDIO) {\n        aud_med = (AudioMedia *)call.getMedia(i);\n        break;\n    }\n}\n\nif (aud_med) {\n    mic_media.startTransmit(*aud_med);\n    aud_med->startTransmit(speaker_media);\n}\n```\n\n----------------------------------------\n\nTITLE: Subclassing Account for Custom Handling in C++\nDESCRIPTION: This snippet demonstrates how to create a custom Account subclass to handle account-related events such as registration status changes and incoming calls. It overrides onRegState and onIncomingCall methods.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/pjsua2/using/account.rst#2025-04-23_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nclass MyAccount : public Account\n{\npublic:\n    MyAccount() {}\n    ~MyAccount() {}\n\n    virtual void onRegState(OnRegStateParam &prm)\n    {\n        AccountInfo ai = getInfo();\n        cout << (ai.regIsActive? \"*** Register: code=\" : \"*** Unregister: code=\")\n             << prm.code << endl;\n    }\n\n    virtual void onIncomingCall(OnIncomingCallParam &iprm)\n    {\n        Call *call = new MyCall(*this, iprm.callId);\n\n        // Just hangup for now\n        CallOpParam op;\n        op.statusCode = PJSIP_SC_DECLINE;\n        call->hangup(op);\n        \n        // And delete the call\n        delete call;\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic PJSIP Client in Java\nDESCRIPTION: A Java implementation of the PJSIP client that loads the native library, initializes the PJSIP endpoint, creates a SIP transport, and registers an account. The code demonstrates explicit resource management and extends the Account class to handle registration events.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/pjsua2/hello_world.rst#2025-04-23_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\nimport org.pjsip.pjsua2.*;\n\n// Subclass to extend the Account and get notifications etc.\nclass MyAccount extends Account {\n  @Override\n  public void onRegState(OnRegStateParam prm) {\n      System.out.println(\"*** On registration state: \" + prm.getCode() + prm.getReason());\n  }\n}\n\npublic class test {\n  static {\n      System.loadLibrary(\"pjsua2\");\n      System.out.println(\"Library loaded\");\n  }\n  \n  public static void main(String argv[]) {\n      try {\n          // Create endpoint\n          Endpoint ep = new Endpoint();\n          ep.libCreate();\n          // Initialize endpoint\n          EpConfig epConfig = new EpConfig();\n          ep.libInit( epConfig );\n          // Create SIP transport. Error handling sample is shown\n          TransportConfig sipTpConfig = new TransportConfig();\n          sipTpConfig.setPort(5060);\n          ep.transportCreate(pjsip_transport_type_e.PJSIP_TRANSPORT_UDP, sipTpConfig);\n          // Start the library\n          ep.libStart();\n\n          AccountConfig acfg = new AccountConfig();\n          acfg.setIdUri(\"sip:test@sip.pjsip.org\");\n          acfg.getRegConfig().setRegistrarUri(\"sip:sip.pjsip.org\");\n          AuthCredInfo cred = new AuthCredInfo(\"digest\", \"*\", \"test\", 0, \"secret\");\n          acfg.getSipConfig().getAuthCreds().add( cred );\n          // Create the account\n          MyAccount acc = new MyAccount();\n          acc.create(acfg);\n          // Here we don't have anything else to do..\n          Thread.sleep(10000);\n          /* Explicitly delete the account.\n           * This is to avoid GC to delete the endpoint first before deleting\n           * the account.\n           */\n          acc.delete();\n          \n          // Explicitly destroy and delete endpoint\n          ep.libDestroy();\n          ep.delete();\n          \n      } catch (Exception e) {\n          System.out.println(e);\n          return;\n      }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Inband DTMF Tone Generation in C\nDESCRIPTION: Code snippet demonstrating how to create and manage a tone generator for sending inband DTMF tones in a PJSIP-based application. Includes functions for initialization, playing digits, and cleanup.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/sip/dtmf.rst#2025-04-23_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nstruct my_call_data\n{\n     pj_pool_t          *pool;\n     pjmedia_port       *tonegen;\n     pjsua_conf_port_id  toneslot;\n};\n\nstruct my_call_data *call_init_tonegen(pjsua_call_id call_id)\n{\n     pj_pool_t *pool;\n     struct my_call_data *cd;\n     pjsua_call_info ci;\n\n     pool = pjsua_pool_create(\"mycall\", 512, 512);\n     cd = PJ_POOL_ZALLOC_T(pool, struct my_call_data);\n     cd->pool = pool;\n\n     pjmedia_tonegen_create(cd->pool, 8000, 1, 160, 16, 0, &cd->tonegen);\n     pjsua_conf_add_port(cd->pool, cd->tonegen, &cd->toneslot);\n\n     pjsua_call_get_info(call_id, &ci);\n     pjsua_conf_connect(cd->toneslot, ci.conf_slot);\n\n     pjsua_call_set_user_data(call_id, (void*) cd);\n\n     return cd;\n}\n\nvoid call_play_digit(pjsua_call_id call_id, const char *digits)\n{\n     pjmedia_tone_digit d[16];\n     unsigned i, count = strlen(digits);\n     struct my_call_data *cd;\n\n     cd = (struct my_call_data*) pjsua_call_get_user_data(call_id);\n     if (!cd)\n         cd = call_init_tonegen(call_id);\n\n     if (count > PJ_ARRAY_SIZE(d))\n         count = PJ_ARRAY_SIZE(d);\n\n     pj_bzero(d, sizeof(d));\n     for (i=0; i<count; ++i) {\n        d[i].digit = digits[i];\n        d[i].on_msec = 100;\n        d[i].off_msec = 200;\n        d[i].volume = 0;\n     }\n\n     pjmedia_tonegen_play_digits(cd->tonegen, count, d, 0);\n}\n\nvoid call_deinit_tonegen(pjsua_call_id call_id)\n{\n     struct my_call_data *cd;\n\n     cd = (struct my_call_data*) pjsua_call_get_user_data(call_id);\n     if (!cd)\n        return;\n\n     pjsua_conf_remove_port(cd->toneslot);\n     pjmedia_port_destroy(cd->tonegen);\n     pj_pool_release(cd->pool);\n\n     pjsua_call_set_user_data(call_id, NULL);\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Call Audio Media in PJSIP C++\nDESCRIPTION: Handles call media state changes by connecting active audio media to sound devices. This implementation connects the call's audio media to the device's playback and capture media when audio becomes active.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/pjsua2/using/call.rst#2025-04-23_snippet_4\n\nLANGUAGE: c++\nCODE:\n```\nvoid MyCall::onCallMediaState(OnCallMediaStateParam &prm)\n{\n    CallInfo ci = getInfo();\n\n    for (unsigned i = 0; i < ci.media.size(); i++) {\n        if (ci.media[i].type==PJMEDIA_TYPE_AUDIO) {\n            try {\n                AudioMedia aud_med = getAudioMedia(i);\n\n                // Connect the call audio media to sound device\n                AudDevManager& mgr = Endpoint::instance().audDevManager();\n                aud_med.startTransmit(mgr.getPlaybackDevMedia());\n                mgr.getCaptureDevMedia().startTransmit(aud_med);\n            }\n            catch(const Error &e) {\n              // Handle invalid or not audio media error here\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic SIP Account in C++\nDESCRIPTION: This snippet shows how to create a basic SIP account using PJSIP. It sets up the account configuration with a SIP URI and creates the account instance.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/pjsua2/using/account.rst#2025-04-23_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nAccountConfig acc_cfg;\nacc_cfg.idUri = \"sip:test1@pjsip.org\";\n// This is also valid\n// acc_cfg.idUri = \"Test <sip:test1@pjsip.org>\";\n\nMyAccount *acc = new MyAccount;\ntry {\n    acc->create(acc_cfg);\n} catch(Error& err) {\n    cout << \"Account creation error: \" << err.info() << endl;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating the PJSUA2 Library in C++\nDESCRIPTION: Initializes the PJSUA2 library by calling the libCreate() method on the Endpoint instance. Includes error handling using try/catch.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/pjsua2/using/endpoint.rst#2025-04-23_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\ntry {\n    ep->libCreate();\n} catch(Error& err) {\n    cout << \"Startup error: \" << err.info() << endl;\n}\n```\n\n----------------------------------------\n\nTITLE: Instantiating the PJSUA2 Endpoint in C++\nDESCRIPTION: Creates an instance of the Endpoint class, which is a singleton and the core class of PJSUA2.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/pjsua2/using/endpoint.rst#2025-04-23_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nEndpoint *ep = new Endpoint;\n```\n\n----------------------------------------\n\nTITLE: Recording Audio to WAV File in C++\nDESCRIPTION: Creates an AudioMediaRecorder and connects the microphone to it to record audio to a WAV file. Shows the creation of a recorder and starting the transmission.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/pjsua2/using/media_audio.rst#2025-04-23_snippet_3\n\nLANGUAGE: c++\nCODE:\n```\nAudioMediaRecorder wav_writer;\nAudioMedia& mic_media = Endpoint::instance().audDevManager().getCaptureDevMedia();\ntry {\n    wav_writer.createRecorder(\"file.wav\");\n    mic_media.startTransmit(wav_writer);\n} catch(Error& err) {\n}\n```\n\n----------------------------------------\n\nTITLE: Creating PJSUA2 Transport in C++\nDESCRIPTION: Creates a UDP transport for SIP messages with a specified port. The transportCreate() method returns a Transport ID.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/pjsua2/using/endpoint.rst#2025-04-23_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\ntry {\n    TransportConfig tcfg;\n    tcfg.port = 5060;\n    TransportId tid = ep->transportCreate(PJSIP_TRANSPORT_UDP, tcfg);\n} catch(Error& err) {\n    cout << \"Transport creation error: \" << err.info() << endl;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing IPv6 SIP Transports in PJSUA-LIB (C)\nDESCRIPTION: Sample code for initializing IPv6 SIP transports including TCP, UDP, and TLS in a PJSUA-LIB application.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/network_nat/ipv6.rst#2025-04-23_snippet_1\n\nLANGUAGE: c\nCODE:\n```\npjsua_transport_config tp_cfg; \npjsip_transport_type_e tp_type;\npjsua_transport_id tp_id = -1;\n\npjsua_transport_config_default(&tp_cfg); \ntp_cfg.port = 5060;\n\n/* TCP */ \ntp_type = PJSIP_TRANSPORT_TCP6; \nstatus = pjsua_transport_create(tp_type, &tp_cfg, &tp_id); \nif (status != PJ_SUCCESS)\n    ...\n\n/* UDP */ \ntp_type = PJSIP_TRANSPORT_UDP6; \nstatus = pjsua_transport_create(tp_type, &tp_cfg, &tp_id); \nif (status != PJ_SUCCESS)\n    ...\n\n/* TLS */ \ntp_type = PJSIP_TRANSPORT_TLS6; \ntp_cfg.port = 5061;\ntp_cfg.tls_setting.ca_list_file = pj_str(\"<path to CA file>\");\ntp_cfg.tls_setting.cert_file = ...; \ntp_cfg.tls_setting.privkey_file = ...;\ntp_cfg.tls_setting.password = ... \nstatus = pjsua_transport_create(tp_type, &tp_cfg, &tp_id); \nif (status != PJ_SUCCESS)\n    ...\n```\n\n----------------------------------------\n\nTITLE: Configuring PJSIP for Reduced Executable Size\nDESCRIPTION: Demonstrates how to disable various features in PJSIP to reduce the executable size. This includes disabling codecs, AEC, resampling, and other components.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/perf_footprint/footprint.rst#2025-04-23_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n#define PJMEDIA_HAS_SPEEX_AEC 0\n#define PJMEDIA_HAS_LIBRESAMPLE 0\n#define PJMEDIA_HAS_SPEEX_CODEC 0\n#define PJMEDIA_HAS_ILBC_CODEC 0\n#define PJMEDIA_HAS_GSM_CODEC 0\n#define PJMEDIA_HAS_L16_CODEC 0\n#define PJMEDIA_HAS_ALAW_ULAW_TABLE 0\n#define PJ_HAS_ERROR_STRING 0\n#define PJ_ENABLE_EXTRA_CHECK 0\n#define PJ_OS_HAS_CHECK_STACK 0\n#define PJ_CRC32_HAS_TABLES 0\n#define PJMEDIA_SOUND_IMPLEMENTATION PJMEDIA_SOUND_NULL_SOUND\n#define PJ_LOG_MAX_LEVEL 3\n```\n\n----------------------------------------\n\nTITLE: Creating ICE Stream Transport in C\nDESCRIPTION: This snippet demonstrates how to create an ICE stream transport object. It involves initializing the configuration structure, creating the transport, and waiting for the initialization to complete.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/network_nat/standalone_ice.rst#2025-04-23_snippet_0\n\nLANGUAGE: C\nCODE:\n```\npj_ice_strans_cfg cfg;\npj_ice_strans_cfg_default(&cfg);\n\n// Set cfg members as needed\n\npj_ice_strans *ice_st;\npj_status_t status;\n\nstatus = pj_ice_strans_create(NULL, &cfg, &ice_st);\nif (status != PJ_SUCCESS) {\n    // Handle error\n}\n\n// Wait for on_ice_complete callback with PJ_ICE_STRANS_OP_INIT\n```\n\n----------------------------------------\n\nTITLE: Recording a Conference Call in C++\nDESCRIPTION: Sets up recording of a conference call by connecting the microphone and both call audio streams to a WAV recorder, capturing the entire conference conversation.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/pjsua2/using/media_audio.rst#2025-04-23_snippet_10\n\nLANGUAGE: c++\nCODE:\n```\nmic_media.startTransmit(wav_writer);\naud_med->startTransmit(wav_writer);\naud_med2->startTransmit(wav_writer);\n```\n\n----------------------------------------\n\nTITLE: Configuring Trickle ICE per account in PJSUA (C++)\nDESCRIPTION: Sets the Trickle ICE configuration for a specific SIP account in PJSUA. This snippet shows how to enable custom ICE configuration and set either half or full trickle mode.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/network_nat/trickle_ice.rst#2025-04-23_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\npjsua_acc_config::ice_cfg_use = PJSUA_ICE_CONFIG_USE_CUSTOM;\npjsua_acc_config::ice_cfg::ice_opt::trickle = PJ_ICE_SESS_TRICKLE_HALF; // or PJ_ICE_SESS_TRICKLE_FULL\n```\n\n----------------------------------------\n\nTITLE: Checking Conference Port Connections with Bidirectional Media Flow in PJSIP\nDESCRIPTION: This example shows how to use the 'cl' (conference list) command to check if bidirectional media flow is established between a call and the sound device. The output shows port #00 (sound device) transmitting to port #1 (SIP call) and vice versa.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/audio-troubleshooting/checks/conf_connections.rst#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n>>> cl\nConference ports:\nPort #00[16KHz/10ms]         Master/sound  transmitting to: #1\nPort #01[16KHz/20ms]   sip:user@localhost  transmitting to: #0\n```\n\n----------------------------------------\n\nTITLE: Setting Up Second Call Audio Media in C++\nDESCRIPTION: Sets up audio media for a second call, allowing simultaneous communication with two remote parties. This extends the previous call setup pattern.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/pjsua2/using/media_audio.rst#2025-04-23_snippet_8\n\nLANGUAGE: c++\nCODE:\n```\nCallInfo ci2 = call2.getInfo();\nAudioMedia *aud_med2 = NULL;\n\nfor (unsigned i=0; i<ci2.media.size(); ++i) {\n    if (ci2.media[i].type == PJMEDIA_TYPE_AUDIO) {\n        aud_med2 = (AudioMedia *)call2.getMedia(i);\n        break;\n    }\n}\n\nif (aud_med2) {\n    mic_media->startTransmit(*aud_med2);\n    aud_med2->startTransmit(speaker_media);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PJSIP for NAT64/IPv6 Support\nDESCRIPTION: Code snippet showing the configuration settings required to enable NAT64 and IPv6 support in PJSIP. Includes settings for STUN IPv6 resolution, UDP6 transport creation, and account configuration for IPv6 and NAT64 usage.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/network_nat/ipv6.rst#2025-04-23_snippet_3\n\nLANGUAGE: c\nCODE:\n```\ncfg->stun_try_ipv6 = PJ_TRUE;\n\ntp_type = PJSIP_TRANSPORT_UDP6; \nstatus = pjsua_transport_create(tp_type, &tp_cfg, &udp6_tp_id);\n\n// For PJSIP 2.14 and above\nacc_cfg.ipv6_sip_use = PJSUA_IPV6_ENABLED_USE_IPV6_ONLY;\nacc_cfg.ipv6_media_use = PJSUA_IPV6_ENABLED_USE_IPV6_ONLY;\n\n// For PJSIP earlier than 2.14\n// acc_cfg.transport_id = udp6_tp_id; // or tcp6_tp_id or tls6_tp_id\n// acc_cfg.ipv6_media_use = PJSUA_IPV6_ENABLED;\n\nacc_cfg.nat64_opt = PJSUA_NAT64_ENABLED;\n```\n\n----------------------------------------\n\nTITLE: Playing a WAV File to Audio Device in C++\nDESCRIPTION: Creates an AudioMediaPlayer and connects it to the system speaker to play a WAV file. Demonstrates how to create a player, start transmission, and handle possible errors.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/pjsua2/using/media_audio.rst#2025-04-23_snippet_0\n\nLANGUAGE: c++\nCODE:\n```\nAudioMediaPlayer player;\nAudioMedia& speaker_media = Endpoint::instance().audDevManager().getPlaybackDevMedia();\ntry {\n    player.createPlayer(\"file.wav\");\n    player.startTransmit(speaker_media);\n} catch(Error& err) {\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Camera2 API for Video Capture\nDESCRIPTION: Java code snippet showing how to configure the CameraManager instance in PjCameraInfo2 before using the camera, required since PJSIP 2.12.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/get-started/android/additional-guides.rst#2025-04-23_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n@Override protected void onCreate(Bundle savedInstanceState)\n{\n   //.. \n   CameraManager cm = (CameraManager)getSystemService(Context.CAMERA_SERVICE);\n   PjCameraInfo2.SetCameraManager(cm);\n   //.. \n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SIP Account and Servers in Kotlin\nDESCRIPTION: This snippet shows how to set up SIP account details, including domain, user, password, and server addresses. It defines constants for account ID, registrar, and proxy settings.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/get-started/android/kotlin-sip-client.rst#2025-04-23_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\n// Account ID\nconst val ACC_DOMAIN = \"pjsip.org\"\nconst val ACC_USER   = \"101\"\nconst val ACC_PASSWD = \"--secret--\"\nconst val ACC_ID_URI = \"Kotlin <sip:\" + ACC_USER + \"@\" + ACC_DOMAIN + \">\"\nconst val ACC_REGISTRAR = \"sip:sip.pjsip.org;transport=tls\"\nconst val ACC_PROXY  = \"sip:sip.pjsip.org;lr;transport=tls\"\n```\n\n----------------------------------------\n\nTITLE: Initializing PJSUA Recording\nDESCRIPTION: Command to start PJSUA with WAV file recording enabled using the --rec-file argument.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/audio-troubleshooting/problems/how_to_record.rst#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ ./pjsua --rec-file OUTPUT.WAV\n```\n\n----------------------------------------\n\nTITLE: Setting Audio Mode for Improved Recording Quality in Android\nDESCRIPTION: This Java code snippet demonstrates how to set the audio mode to MODE_IN_COMMUNICATION using AudioManager in an Android application. This can help improve audio recording quality on some devices that experience issues with microphone input.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/get-started/android/issues.rst#2025-04-23_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nAudioManager am = (AudioManager) getSystemService(Context.AUDIO_SERVICE);\nint original_mode = am.getMode();\n\n/* Set audio mode before using audio device, for example before making/answering a SIP call */\nam.setMode(AudioManager.MODE_IN_COMMUNICATION);\n...\n/* Restore back to the original mode after finished with audio device */\nam.setMode(original_mode);\n```\n\n----------------------------------------\n\nTITLE: Showing a Video Preview Window in C++\nDESCRIPTION: Demonstrates how to show a video window for a video preview, handling both native and non-native window types. The code checks if the window is a native window before attempting to show it using the library's API.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/pjsua2/using/media_video.rst#2025-04-23_snippet_2\n\nLANGUAGE: c++\nCODE:\n```\ntry {\n    VideoPreview preview(device_id);\n    VideoWindow window = preview.getVideoWindow();\n    VideoWindowInfo window_info = window.getInfo();\n    if (!window_info.isNative()) {\n        window.Show(true);  // show the window\n    }\n} catch(Error& err) {\n}\n```\n\n----------------------------------------\n\nTITLE: Shutting Down the PJSUA2 Library in C++\nDESCRIPTION: Properly shuts down the PJSUA2 library and releases resources by calling libDestroy() and deleting the Endpoint instance.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/pjsua2/using/endpoint.rst#2025-04-23_snippet_6\n\nLANGUAGE: C++\nCODE:\n```\nep->libDestroy();\ndelete ep;\n```\n\n----------------------------------------\n\nTITLE: Running Optimized PJSIP with Reduced Memory Usage\nDESCRIPTION: Demonstrates how to run the optimized PJSIP application with specific parameters to achieve reduced memory usage for two G.711 calls.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/perf_footprint/footprint.rst#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\npjsua_vc6 --clock-rate 8000 --ec-tail 0 --max-calls 2 --no-tcp\n\n>>> dd\n..\nTotal    120532 of    150344 (80 %) used!\n..\n```\n\n----------------------------------------\n\nTITLE: Codec Framework Demo (encdec.c)\nDESCRIPTION: Demonstrates usage of PJMEDIA codec framework by implementing WAV file encoding and decoding. Uses PJMEDIA core and codec modules.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/api/pjmedia/samples.rst#2025-04-23_snippet_5\n\n\n\n----------------------------------------\n\nTITLE: Subclassing the Buddy Class in C++\nDESCRIPTION: Creates a custom Buddy subclass with an overridden onBuddyState method to handle buddy state change notifications.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/pjsua2/using/presence.rst#2025-04-23_snippet_0\n\nLANGUAGE: c++\nCODE:\n```\nclass MyBuddy : public Buddy\n{\npublic:\n    MyBuddy() {}\n    ~MyBuddy() {}\n\n    virtual void onBuddyState();\n};\n```\n\n----------------------------------------\n\nTITLE: Handling Call State Changes for DTMF Cleanup in C\nDESCRIPTION: Implementation of the on_call_state callback to clean up DTMF resources when a call is disconnected.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/sip/dtmf.rst#2025-04-23_snippet_2\n\nLANGUAGE: C\nCODE:\n```\nstatic void on_call_state(pjsua_call_id call_id, pjsip_event *e)\n{\n     pjsua_call_info call_info;\n\n     pjsua_call_get_info(call_id, &call_info);\n\n     if (call_info.state == PJSIP_INV_STATE_DISCONNECTED) {\n        call_deinit_tonegen(call_id);\n     }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Incoming Calls in PJSIP C++\nDESCRIPTION: Shows implementation of the onIncomingCall callback to handle incoming SIP calls. The code creates a new call instance and answers the call with a 200 OK response.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/pjsua2/using/call.rst#2025-04-23_snippet_2\n\nLANGUAGE: c++\nCODE:\n```\nvoid MyAccount::onIncomingCall(OnIncomingCallParam &iprm)\n{\n    Call *call = new MyCall(*this, iprm.callId);\n    CallOpParam prm;\n    prm.statusCode = PJSIP_SC_OK;\n    call->answer(prm);\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Camera Preview with VideoPreview in C++\nDESCRIPTION: Shows how to start a camera preview by setting up video capture device format and initializing the preview on a specified window handle. The preview can be displayed on a provided panel or in a new floating window if no handle is provided.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/pjsua2/using/media_video.rst#2025-04-23_snippet_0\n\nLANGUAGE: c++\nCODE:\n```\nvoid StartPreview(int device_id, void* hwnd, int width, int height, int fps)\n{\n    try {\n        // Set the video capture device format.\n\tVidDevManager &mgr = Endpoint::instance().vidDevManager();\n        MediaFormatVideo format = mgr.getDevInfo(device_id).fmt[0];\n\tformat.width    = width;\n\tformat.height   = height;\n\tformat.fpsNum   = fps;\n\tformat.fpsDenum = 1;\n        mgr.setFormat(device_id, format, true);\n    \n\t// Start the preview on a panel with window handle 'hwnd'.\n\t// Note that if hwnd is set to NULL, library will automatically create\n\t// a new floating window for the rendering.\n\tVideoPreviewOpParam param;\n\tparam.window.handle.window = (void*) hwnd;\n\t\n\tVideoPreview preview(device_id);\n\tpreview.start(param);\n    } catch(Error& err) {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Stopping WAV Recording in C++\nDESCRIPTION: Stops the transmission from the microphone to the WAV recorder, which pauses the recording. The WAV file remains open and recording can be resumed later.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/pjsua2/using/media_audio.rst#2025-04-23_snippet_4\n\nLANGUAGE: c++\nCODE:\n```\ntry {\n   mic_media.stopTransmit(wav_writer);\n} catch(Error& err) {\n}\n```\n\n----------------------------------------\n\nTITLE: Stopping WAV File Playback in C++\nDESCRIPTION: Stops the transmission from a WAV player to the speaker, which pauses the playback. The playback position is preserved and can be resumed later.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/pjsua2/using/media_audio.rst#2025-04-23_snippet_2\n\nLANGUAGE: c++\nCODE:\n```\ntry {\n    player.stopTransmit(speaker_media);\n} catch(Error& err) {\n}\n```\n\n----------------------------------------\n\nTITLE: High-Volume Call Handling Configuration\nDESCRIPTION: Configuration settings for handling thousands of simultaneous calls, including transaction and dialog count limits and I/O queue settings.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/perf_footprint/performance.rst#2025-04-23_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nPJSIP_MAX_TSX_COUNT=640*1024-1\nPJSIP_MAX_DIALOG_COUNT=640*1024-1\nPJ_IOQUEUE_MAX_HANDLES=640*1024\nPJSUA_MAX_CALLS=1000\n```\n\n----------------------------------------\n\nTITLE: Implementing Opus codec in PJSIP (C)\nDESCRIPTION: Integration of the Opus audio codec in PJSIP. Opus is an open, royalty-free, and versatile audio codec. The implementation is located in pjmedia/src/pjmedia-codec/opus.c.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/overview/license_3rd_party.rst#2025-04-23_snippet_6\n\nLANGUAGE: c\nCODE:\n```\npjmedia/src/pjmedia-codec/opus.c\n```\n\n----------------------------------------\n\nTITLE: QoS Parameter Retrieval and Socket Configuration in C\nDESCRIPTION: Core QoS API functions for retrieving QoS parameters for specific traffic types and setting/getting QoS parameters on sockets.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/network_nat/qos.rst#2025-04-23_snippet_2\n\nLANGUAGE: c\nCODE:\n```\n// Retrieve QoS params for the specified traffic type\nPJ_DECL(pj_status_t) pj_qos_get_params(pj_qos_type type, \n                                           pj_qos_params *p);\n\n// Set QoS parameters to the socket\nPJ_DECL(pj_status_t) pj_sock_set_qos_params(pj_sock_t sock,\n                                                const pj_qos_params *p);\n\n// Get QoS parameters from the socket\nPJ_DECL(pj_status_t) pj_sock_get_qos_params(pj_sock_t sock,\n                                                pj_qos_params *p);\n```\n\n----------------------------------------\n\nTITLE: Creating Video Preview Panel in C#\nDESCRIPTION: This snippet demonstrates how to create a panel for video preview and set up a VideoPreview instance with a colorbar device. It also shows how to set the video window to the created panel.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/pjsua2/using/media_video.rst#2025-04-23_snippet_3\n\nLANGUAGE: c#\nCODE:\n```\n// Create a panel\nPanel panel = new Panel();\npanel.Size = new Size(350, 250);\npanel.Location = new Point(20, 20);\nControls.Add(panel);\n\ntry {\n    // Assuming a preview for colorbar has been started,\n    // we just instantiate a VideoPreview to refer to it.\n    const int DEV_ID_COLORBAR = 1;\n    VideoPreview vp = new VideoPreview(DEV_ID_COLORBAR);\n\n    // Set the window of the preview to the just created panel\n    VideoWindow window = vp.getVideoWindow();\n    window.setWindow(panel.Handle.ToInt64());\n} catch(Error& err) {\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic PJSIP Application in C\nDESCRIPTION: Minimal PJSIP application demonstrating library initialization and cleanup. Creates a PJSIP instance, logs a message, and properly destroys the instance.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/get-started/posix/using.rst#2025-04-23_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#include <pjsua-lib/pjsua.h>\n#include <pj/log.h>\n\nint main()\n{\n   pj_status_t status;\n\n   status = pjsua_create();\n   PJ_LOG(3,(\"myapp.c\", \"Hello PJSIP! Bye PJSIP.\"));\n   pjsua_destroy();\n   return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Enumerating ICE Candidates in C\nDESCRIPTION: This snippet demonstrates how to list the ICE candidates for a specific component. This information needs to be exchanged with the remote endpoint before starting ICE negotiation.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/network_nat/standalone_ice.rst#2025-04-23_snippet_2\n\nLANGUAGE: C\nCODE:\n```\nunsigned comp_id = 1; // Component ID\npj_ice_sess_cand candidates[PJ_ICE_ST_MAX_CAND];\nunsigned cand_cnt = PJ_ARRAY_SIZE(candidates);\n\npj_status_t status = pj_ice_strans_enum_cands(ice_st, comp_id, &cand_cnt, candidates);\nif (status != PJ_SUCCESS) {\n    // Handle error\n}\n\n// Process and send candidates to remote endpoint\n```\n\n----------------------------------------\n\nTITLE: Configuring Trickle ICE in PJSUA2 (C++)\nDESCRIPTION: Sets the Trickle ICE configuration for a specific account in PJSUA2. This snippet demonstrates how to enable either half or full trickle mode.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/network_nat/trickle_ice.rst#2025-04-23_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\npj::AccountConfig::natConfig::iceTrickle = PJ_ICE_SESS_TRICKLE_HALF; // or PJ_ICE_SESS_TRICKLE_FULL\n```\n\n----------------------------------------\n\nTITLE: Configuring Trickle ICE globally in PJSUA (C++)\nDESCRIPTION: Sets the global Trickle ICE configuration for all SIP accounts in PJSUA. This snippet demonstrates how to enable either half or full trickle mode.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/network_nat/trickle_ice.rst#2025-04-23_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\npjsua_media_config::ice_opt::trickle = PJ_ICE_SESS_TRICKLE_HALF; // or PJ_ICE_SESS_TRICKLE_FULL\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Lock Order with ICE and PJSUA Callback in C\nDESCRIPTION: This code snippet shows the lock ordering when an ICE event triggers a PJSUA callback. It demonstrates how the group lock maintains a consistent lock order to avoid deadlocks.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/develop/group_lock.rst#2025-04-23_snippet_1\n\nLANGUAGE: C\nCODE:\n```\n{ pjsua --> ice } --> pjsua\n```\n\n----------------------------------------\n\nTITLE: Customizing PJSUA2 Endpoint Configuration in C++\nDESCRIPTION: Demonstrates how to create an EpConfig instance and customize various settings such as log level, maximum calls, and sound clock rate.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/pjsua2/using/endpoint.rst#2025-04-23_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\nEpConfig ep_cfg;\nep_cfg.logConfig.level = 5;\nep_cfg.uaConfig.maxCalls = 4;\nep_cfg.mediaConfig.sndClockRate = 16000;\n```\n\n----------------------------------------\n\nTITLE: Setting Voice QoS for RTP/RTCP Traffic in PJSUA-LIB\nDESCRIPTION: Example of configuring QoS settings for RTP/RTCP media transport to use Voice traffic type in a PJSUA account configuration.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/network_nat/qos.rst#2025-04-23_snippet_3\n\nLANGUAGE: c\nCODE:\n```\n// Media transport setting is configurable on per account basis\npjsua_acc_config acc_cfg;\n\npjsua_acc_config_default(&acc_cfg);\n// Set account settings\n...\n// Set media transport settings (listening start port etc) according to app settings\n...\n// Set media transport traffic type to Voice\nacc_cfg.rtp_cfg.qos_type = PJ_QOS_TYPE_VOICE;\n\n// Create account with this config\npjsua_acc_add(&acc_cfg, ...);\n```\n\n----------------------------------------\n\nTITLE: Recording DTMF Tone with PJSUA Shell Command\nDESCRIPTION: Command to generate and record a DTMF tone using PJSUA with specific frequencies (697Hz and 1209Hz) for accuracy testing.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/media/tonegen.rst#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ pjsua -play-tone 697,1209,200,2000 -rec-file tone.wav\n```\n\n----------------------------------------\n\nTITLE: Constructing and Printing Escaped URI in PJSIP (C)\nDESCRIPTION: Shows how to construct a pjsip_sip_uri structure with unescaped values and then print it to get a properly escaped URI string. This is useful when the characters in the URI cannot be strictly controlled.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/sip/uri_escaping.rst#2025-04-23_snippet_1\n\nLANGUAGE: c\nCODE:\n```\npjsip_sip_uri sip_uri;\nchar buf[PJSIP_MAX_URL_SIZE];\n\npjsip_sip_uri_init(&sip_uri, PJ_FALSE);\nsip_uri.user = pj_str(\"good user\");\nsip_uri.host = pj_str(\"example.com\");\n\nlen = pjsip_uri_print(PJSIP_URI_IN_FROMTO_HDR, \n                     &sip_uri, buf, sizeof(buf));\nbuf[len] = '\\0';\n\n// buf now contains \"sip:good%20user@example.com\"\n```\n\n----------------------------------------\n\nTITLE: Enabling IPv6 Support in PJSIP Configuration (C)\nDESCRIPTION: Enables IPv6 support in PJSIP by defining PJ_HAS_IPV6 macro in the config_site.h file.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/network_nat/ipv6.rst#2025-04-23_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#define PJ_HAS_IPV6 1\n```\n\n----------------------------------------\n\nTITLE: Specifying iLBC Framing Mode in SDP\nDESCRIPTION: Shows how to specify the iLBC framing mode (20ms or 30ms) that a party wants to receive in the Session Description Protocol (SDP).\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/audio-troubleshooting/checks/codec_nego.rst#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\na=fmtp:117 mode=20\n```\n\n----------------------------------------\n\nTITLE: Building PJSIP for iOS using Command Line\nDESCRIPTION: Shell commands to configure and build PJSIP for iOS devices using the configure-iphone script and make utility.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/get-started/ios/build_instructions.rst#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ cd /path/to/your/pjsip/dir\n$ ./configure-iphone\n$ make dep && make clean && make\n```\n\n----------------------------------------\n\nTITLE: Configuring STUN Server in PJSUA\nDESCRIPTION: Command to enable STUN support in PJSUA application by specifying a STUN server address.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/network_nat/nat_guide.rst#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ ./pjsua --stun-srv stun.pjsip.org\n```\n\n----------------------------------------\n\nTITLE: Handling Video Format Change Events in C++\nDESCRIPTION: This snippet shows how to handle video format change events in a video call. It demonstrates resizing the video window based on the new format and scaling down if necessary.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/pjsua2/using/media_video.rst#2025-04-23_snippet_4\n\nLANGUAGE: c++\nCODE:\n```\nvoid MyCall::onCallMediaEvent(OnCallMediaEventParam &prm)\n{\n    if (prm.ev.type == PJMEDIA_EVENT_FMT_CHANGED) {\n        try {\n            MediaSize new_size;\n            new_size.x = prm.ev.data.fmtChanged.newWidth;\n            new_size.y = prm.ev.data.fmtChanged.newHeight;\n            \n            // Scale down the size if necessary\n            if (new_size.x > 500 || new_size.y > 500) {\n                new_size.x /= 2;\n                new_size.y /= 2;\n            }\n\n            // Show and adjust the size of the video window\n            CallInfo info = getInfo();\n            VideoWindow window = info.media[prm.medIdx].videoWindow;\n            window.show(true);\n            window.setSize(new_size);\n        } catch(Error& err) {\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating config_site.h for Android PJSIP Configuration\nDESCRIPTION: Creates a config_site.h file to activate Android-specific settings and enable video support in PJSIP.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/get-started/android/build_instructions.rst#2025-04-23_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n/* Activate Android specific settings in the 'config_site_sample.h' */\n#define PJ_CONFIG_ANDROID 1\n#include <pj/config_site_sample.h>\n\n#define PJMEDIA_HAS_VIDEO 1\n```\n\n----------------------------------------\n\nTITLE: Setting Up Video Conference Call in C++\nDESCRIPTION: This snippet demonstrates how to set up a video conference call between three parties by establishing bidirectional video media connections.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/pjsua2/using/media_video.rst#2025-04-23_snippet_5\n\nLANGUAGE: c++\nCODE:\n```\nVideoMedia vid_enc_med1 = call1.getEncodingVideoMedia(-1);\nVideoMedia vid_dec_med1 = call1.getDecodingVideoMedia(-1);\n\nVideoMedia vid_enc_med2 = call2.getEncodingVideoMedia(-1);\nVideoMedia vid_dec_med2 = call2.getDecodingVideoMedia(-1);\n\nvid_dec_med1.startTransmit(vid_enc_med2);\nvid_dec_med2.startTransmit(vid_enc_med1);\n```\n\n----------------------------------------\n\nTITLE: Handling Call Disconnection in PJSIP C++\nDESCRIPTION: Implements the onCallState callback to properly handle call disconnection. When the call state changes to DISCONNECTED, the call object is deleted to prevent memory leaks and invalid operations.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/pjsua2/using/call.rst#2025-04-23_snippet_3\n\nLANGUAGE: c++\nCODE:\n```\nvoid MyCall::onCallState(OnCallStateParam &prm)\n{\n    CallInfo ci = getInfo();\n    if (ci.state == PJSIP_INV_STATE_DISCONNECTED) {\n        /* Delete the call */\n        delete this;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Audio Echo Cancellation Test Implementation (aectest.c)\nDESCRIPTION: Tests AEC effectiveness by processing playback and captured WAV files through echo cancellation and outputting results. Demonstrates PJMEDIA's echo cancellation capabilities.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/api/pjmedia/samples.rst#2025-04-23_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Reducing Log Verbosity in C for PJNATH\nDESCRIPTION: This snippet shows how to reduce log verbosity in PJNATH to free up memory in STUN sessions by adjusting the maximum log level.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/perf_footprint/ice_memory.rst#2025-04-23_snippet_2\n\nLANGUAGE: c\nCODE:\n```\n#define PJ_LOG_MAX_LEVEL       4   /* 5 */\n```\n\n----------------------------------------\n\nTITLE: Changing Account's Presence Status in C++\nDESCRIPTION: Sets the online status of an account with extended presence information. This status will be published to all subscribers of the account's presence.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/pjsua2/using/presence.rst#2025-04-23_snippet_3\n\nLANGUAGE: c++\nCODE:\n```\ntry {\n    PresenceStatus ps;\n    ps.status = PJSUA_BUDDY_STATUS_ONLINE;\n    // Optional, set the activity and some note\n    ps.activity = PJRPID_ACTIVITY_BUSY;\n    ps.note = \"On the phone\";\n    acc->setOnlineStatus(ps);\n} catch(Error& err) {\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TURN and ICE in PJSUA\nDESCRIPTION: Command to enable TURN and ICE support in PJSUA application with server credentials.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/network_nat/nat_guide.rst#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ ./pjsua --use-ice --use-turn --turn-srv turn.pjsip.org --turn-user [username] --turn-passwd ***\n```\n\n----------------------------------------\n\nTITLE: Using pjsua dq Command Output Example\nDESCRIPTION: Example output from the pjsua 'dq' (dump quality) command showing RTP packet statistics for a call, including packet counts, jitter, and loss metrics.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/audio-troubleshooting/checks/no_rx_rtp.rst#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n>>> dq\n    14:54:37.008        pjsua.c\n     [CONFIRMED ] To: sip:user@localhost;tag=1857bde149264e2986c4aac1a26f5866\n       Call time: 00h:00m:53s, 1st res in 1071 ms, conn in 1191ms\n       #0 speex @16KHz, sendrecv, peer=192.168.0.66:4000\n          RX pt=103, stat last update: 00h:00m:01.753s ago\n             total 1.7Kpkt 72.2KB (127.2KB +IP hdr) @avg=10.6Kbps\n             pkt loss=0 (0.0%), dup=0 (0.0%), reorder=0 (0.0%)\n                   (msec)    min     avg     max     last\n             loss period:   0.000   0.000   0.000   0.000\n             jitter     :   0.000   5.506 227.000   9.812\n          TX pt=103, ptime=20ms, stat last update: 00h:00m:07.871s ago\n             total 0pkt 0B (0B +IP hdr) @avg 0bps\n             pkt loss=0 (-1.$%), dup=0 (-1.$%), reorder=0 (-1.$%)\n                   (msec)    min     avg     max     last\n             loss period:   0.000   0.000   0.000   0.000\n             jitter     :   0.000   0.000   0.000   0.000\n         RTT msec       :   0.274   0.616   1.233   1.233\n```\n\n----------------------------------------\n\nTITLE: Creating TCP Transport in PJSIP\nDESCRIPTION: Demonstrates how to initialize and create a TCP transport instance in PJSIP using the pjsua API. This sets up the basic TCP transport configuration needed for SIP communications.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/network_nat/sip_tcp.rst#2025-04-23_snippet_0\n\nLANGUAGE: c\nCODE:\n```\npjsua_transport_config tcfg;\n\npjsua_transport_config_default(&tcfg); \nstatus = pjsua_transport_create(PJSIP_TRANSPORT_TCP, &tcfg, &transport_id);\n```\n\n----------------------------------------\n\nTITLE: Configuration Macros for PJSIP Performance Optimization\nDESCRIPTION: Key configuration macros that can be set in config_site.h to optimize PJSIP performance, including floating point, safety checks, and resource limits.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/perf_footprint/performance.rst#2025-04-23_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nPJ_HAS_FLOATING_POINT=0\nPJMEDIA_HAS_ALAW_ULAW_TABLE=1\nPJMEDIA_CONF_USE_SWITCH_BOARD=1\nPJ_LOG_MAX_LEVEL=1\nPJ_ENABLE_EXTRA_CHECK=0\nPJ_OS_HAS_CHECK_STACK=0\nPJSIP_SAFE_MODULE=0\nPJSIP_UNESCAPE_IN_PLACE=1\nPJ_HASH_USE_OWN_TOLOWER=1\n```\n\n----------------------------------------\n\nTITLE: Transport Callback Integration\nDESCRIPTION: Implementation reference for the callback used to create and integrate custom media transport adapters with PJSUA-LIB.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/media/transport_adapter.rst#2025-04-23_snippet_1\n\nLANGUAGE: C\nCODE:\n```\npjsua_callback::on_create_media_transport\n```\n\n----------------------------------------\n\nTITLE: Failed ICE Negotiation Logging\nDESCRIPTION: This code snippet demonstrates the logging output for a failed ICE negotiation scenario. It shows the creation of the ICE session, addition of candidates, and the failure of connectivity checks.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/network_nat/troubleshooting_ice.rst#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n16:16:46.672  icstr015DB3D0 ICE session created, comp_cnt=1, role is Controlled agent\n16:16:46.672  icstr015DB3D0 Candidate 0 added: comp_id=1, type=Host, foundation=Hc0a80102, addr=192.168.1.2:14210, base=192.168.1.2:14210, prio=0x64ffffff (1694498815)\n16:16:46.672  icstr015DB3D0 Candidate 1 added: comp_id=1, type=Server Reflexive, foundation=Sc0a80102, addr=76.102.231.35:14210, base=192.168.1.2:14210, prio=0x7effffff (2130706431)\n16:16:46.679  icstr015DB3D0 Check 1: [1] 192.168.1.2:14210-->71.166.160.226:16902 pruned (duplicate found)\n16:16:46.679  icstr015DB3D0 Check 2: [1] 192.168.1.2:14210-->192.168.2.101:16052 pruned (duplicate found)\n16:16:46.679  icstr015DB3D0 Checklist created:\n16:16:46.679  icstr015DB3D0  0: [1] 192.168.1.2:14210-->71.166.160.226:16902 (not nominated, state=Frozen)\n16:16:46.679  icstr015DB3D0  1: [1] 192.168.1.2:14210-->192.168.2.101:16052 (not nominated, state=Frozen)\n16:16:46.679  icstr015DB3D0 Starting ICE check..\n16:16:46.679  icstr015DB3D0 Check 0: [1] 192.168.1.2:14210-->71.166.160.226:16902: state changed from Frozen to Waiting\n16:16:46.679  icstr015DB3D0 Checklist: state changed from Idle to Running\n16:16:46.679  icstr015DB3D0 Starting checklist periodic check\n16:16:46.679  icstr015DB3D0 Sending connectivity check for check 0: [1] 192.168.1.2:14210-->71.166.160.226:16902\n16:16:46.680  icstr015DB3D0 Check 0: [1] 192.168.1.2:14210-->71.166.160.226:16902: state changed from Waiting to In Progress\n16:16:46.701  icstr015DB3D0 Starting checklist periodic check\n16:16:46.701  icstr015DB3D0 Sending connectivity check for check 1: [1] 192.168.1.2:14210-->192.168.2.101:16052\n16:16:46.701  icstr015DB3D0 Check 1: [1] 192.168.1.2:14210-->192.168.2.101:16052: state changed from Frozen to In Progress\n16:16:46.722  icstr015DB3D0 Starting checklist periodic check\n16:16:54.634  icstr015DB3D0 Check 0: [1] 192.168.1.2:14210-->71.166.160.226:16902 (not nominated): connectivity check FAILED: STUN transaction has timed out (PJNATH_ESTUNTIMEDOUT)\n16:16:54.634  icstr015DB3D0 Check 0: [1] 192.168.1.2:14210-->71.166.160.226:16902: state changed from In Progress to Failed\n16:16:54.634  icstr015DB3D0 Check 1: [1] 192.168.1.2:14210-->192.168.2.101:16052 (not nominated): connectivity check FAILED: STUN transaction has timed out (PJNATH_ESTUNTIMEDOUT)\n16:16:54.634  icstr015DB3D0 Check 1: [1] 192.168.1.2:14210-->192.168.2.101:16052: state changed from In Progress to Failed\n16:16:54.634  icstr015DB3D0 ICE process complete, status=All ICE checklists failed (PJNATH_EICEFAILED)\n16:16:54.634  icstr015DB3D0 Valid list\n16:16:54.634  icstr015DB3D0 ICE negotiation failed after 7:955s: All ICE checklists failed (PJNATH_EICEFAILED)\n```\n\n----------------------------------------\n\nTITLE: Implementing VPX (VP8/VP9) codecs in PJSIP (C)\nDESCRIPTION: Integration of VP8 and VP9 video codecs from the libvpx library in PJSIP. The implementation is located in pjmedia/src/pjmedia-codec/vpx.c and provides support for these WebM video codecs.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/overview/license_3rd_party.rst#2025-04-23_snippet_8\n\nLANGUAGE: c\nCODE:\n```\npjmedia/src/pjmedia-codec/vpx.c\n```\n\n----------------------------------------\n\nTITLE: Defining QoS Parameter Structures in C\nDESCRIPTION: Data structures for fine-grained QoS control, including flags for different QoS parameters and WMM priority levels. These structures enable detailed control over QoS settings.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/network_nat/qos.rst#2025-04-23_snippet_1\n\nLANGUAGE: c\nCODE:\n```\ntypedef enum pj_qos_flag\n{\n    PJ_QOS_PARAM_HAS_DSCP = 1,\n    PJ_QOS_PARAM_HAS_802_1_P = 2,\n    PJ_QOS_PARAM_HAS_WMM = 4\n} pj_qos_flag;\n\ntypedef enum pj_qos_wmm_prio\n{\n    PJ_QOS_WMM_TYPE_BULK_EFFORT_PRIO,\n    PJ_QOS_WMM_TYPE_BULK_PRIO,\n    PJ_QOS_WMM_TYPE_VIDEO_PRIO,\n    PJ_QOS_WMM_TYPE_VOICE_PRIO\n} pj_qos_wmm_prio;\n\ntypedef struct pj_qos_params\n{\n    pj_uint8_t      flags;    // Determines which values to \n                              // set, bitmask of pj_qos_flag\n    pj_uint8_t      dscp_val; // DSCP value to set\n```\n\n----------------------------------------\n\nTITLE: Conference Bridge Status with Active Call\nDESCRIPTION: Display of conference ports showing established call connection.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/audio-troubleshooting/problems/how_to_record.rst#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n>>> cl\nConference ports:\nPort #00[16KHz/10ms] Primary Sound Capture Driver  transmitting to: #2\nPort #01[16KHz/10ms]           OUTPUT.WAV  transmitting to:\nPort #02[16KHz/20ms]   sip:user@localhost  transmitting to: #0\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Header to SIP Request in C using PJSIP\nDESCRIPTION: This code snippet demonstrates how to add a custom header to a SIP request using PJSIP. It initializes a pjsua_msg_data structure, creates a custom header, and adds it to the message data. The custom header can then be included in SIP requests such as IM messages.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/sip/custom_hdr.rst#2025-04-23_snippet_0\n\nLANGUAGE: c\nCODE:\n```\npjsua_msg_data msg_data;\npjsip_generic_string_hdr my_hdr;\npj_str_t hname = pj_str(\"My-Header\");\npj_str_t hvalue = pj_str(\"This is the content of My-Header\");\n\npjsua_msg_data_init(&msg_data);\npjsip_generic_string_hdr_init2(&my_hdr, &hname, &hvalue);\npj_list_push_back(&msg_data.hdr_list, &my_hdr);\n\n// Specify the msg_data in pjsua_im_send(), for example\npjsua_im_send(.., &msg_data, NULL);\n```\n\n----------------------------------------\n\nTITLE: Handling Redirection in PJSUA-LIB\nDESCRIPTION: Illustrates the use of the on_call_redirected callback and pjsua_call_process_redirect() API for handling redirection in PJSUA-LIB.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/sip/redirection.rst#2025-04-23_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\nvoid on_call_redirected(pjsua_call_id call_id, const pjsip_uri *target, const pjsip_event *e)\n{\n    // Implement redirection logic here\n}\n\n// Process redirection decision\npjsua_call_process_redirect(call_id, PJSUA_CALL_REDIRECT_ACCEPT, NULL);\n```\n\n----------------------------------------\n\nTITLE: Making TCP Call in PJSIP\nDESCRIPTION: Example of how to initiate a SIP call using TCP transport by specifying the transport parameter in the destination URI. This ensures the call is established over TCP.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/network_nat/sip_tcp.rst#2025-04-23_snippet_2\n\nLANGUAGE: c\nCODE:\n```\npj_str_t dst = pj_str(\"sip:alice@example.net;transport=tcp\");\n\nstatus = pjsua_call_make_call(acc_id, &dst, NULL, NULL, NULL, NULL);\n```\n\n----------------------------------------\n\nTITLE: Building PJSIP Libraries with OpenSSL Support\nDESCRIPTION: This shell command builds the PJSIP libraries with OpenSSL support. It first generates dependencies and then compiles the project.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/get-started/ios/build_instructions.rst#2025-04-23_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nmake dep && make\n```\n\n----------------------------------------\n\nTITLE: Configuring TCP Proxy for PJSIP Account\nDESCRIPTION: Shows how to configure a TCP proxy for a PJSIP account by setting up the proxy configuration in the account settings. This enables routing all initial requests through a TCP proxy.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/network_nat/sip_tcp.rst#2025-04-23_snippet_1\n\nLANGUAGE: c\nCODE:\n```\npjsua_acc_config acc_cfg;\n\n...\nacc_cfg.proxy[acc_cfg.proxy_cnt++] = pj_str(\"sip:proxy.example.com;transport=tcp\");\n```\n\n----------------------------------------\n\nTITLE: Playing WAV File with PJSUA\nDESCRIPTION: Command to play a WAV file using the pjsua application. The WAV file must be mono, 16-bit PCM format with any clock rate.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/audio-troubleshooting/checks/play_wav.rst#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ ./pjsua --play-file THEFILE.WAV\n```\n\n----------------------------------------\n\nTITLE: Building OpenSSL for Android\nDESCRIPTION: Commands to compile OpenSSL for Android, including setting up environment variables, configuring build parameters, and running the make process.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/get-started/android/requirements.rst#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n# in OpenSSL directory\n$ export ANDROID_NDK_ROOT=[your_android_ndk_path]\n$ PATH=$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin:$ANDROID_NDK_ROOT/toolchains/arm-linux-androideabi-4.9/prebuilt/linux-x86_64/bin:$PATH\n$ ./Configure android-arm64 -D__ANDROID_API__=29\n$ make\n```\n\n----------------------------------------\n\nTITLE: Implementing Redirection in PJSUA2\nDESCRIPTION: Demonstrates how to handle redirection using the onCallRedirected callback and processRedirect() method in PJSUA2.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/sip/redirection.rst#2025-04-23_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\nclass MyCall : public Call\n{\npublic:\n    virtual void onCallRedirected(OnCallRedirectedParam &prm)\n    {\n        // Implement redirection logic here\n    }\n};\n\n// Process redirection decision\ncall->processRedirect(pjsip_redirect_op::PJSIP_REDIRECT_ACCEPT);\n```\n\n----------------------------------------\n\nTITLE: Creating a Non-looping WAV Player in C++\nDESCRIPTION: Creates a WAV player that plays once without looping by specifying the PJMEDIA_FILE_NO_LOOP flag when creating the player.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/pjsua2/using/media_audio.rst#2025-04-23_snippet_1\n\nLANGUAGE: c++\nCODE:\n```\n    player.createPlayer(\"file.wav\", PJMEDIA_FILE_NO_LOOP);\n```\n\n----------------------------------------\n\nTITLE: Copying Third-Party Native Libraries for Android\nDESCRIPTION: Shell commands to copy OpenSSL and Oboe libraries to the Android application's jniLibs directory.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/get-started/android/build_instructions.rst#2025-04-23_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n# Replace ARCH with arm64-v8a, x86_64, or whatever arch\n$ export ARCH=arm64-v8a\n$ cd src/main/jniLibs/$ARCH\n\n$ cp -v $OPENSSL_DIR/lib/*.so .\n'/home/whoever/Android/openssl-3.4.0/lib/libcrypto.so' -> './libcrypto.so'\n'/home/whoever/Android/openssl-3.4.0/lib/libssl.so' -> './libssl.so'\n\n$ cp -v $OBOE_DIR/prefab/modules/oboe/libs/android.$ARCH/*.so .\n'/home/whoever/Android/oboe-1.9....oid.arm64-v8a/liboboe.so' -> './liboboe.so'\n\n$ ls\nlibcrypto.so  libc++_shared.so  liboboe.so  libpjsua2.so  libssl.so\n```\n\n----------------------------------------\n\nTITLE: Defining SSL Socket Support in PJSIP Config\nDESCRIPTION: Configuration macro to enable SSL socket support in PJSIP's config_site.h file.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/security/ssl.rst#2025-04-23_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#define PJ_HAS_SSL_SOCK 1\n```\n\n----------------------------------------\n\nTITLE: Configuring PJSIP for Reduced Heap Memory Usage\nDESCRIPTION: Shows configuration settings to reduce heap memory usage in PJSIP by limiting the number of concurrent transactions, dialogs, and calls, as well as optimizing memory pool sizes.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/perf_footprint/footprint.rst#2025-04-23_snippet_2\n\nLANGUAGE: c\nCODE:\n```\n#define PJSIP_MAX_TSX_COUNT      31\n#define PJSIP_MAX_DIALOG_COUNT   31\n#define PJSUA_MAX_CALLS          31\n\n#define PJSIP_POOL_LEN_ENDPT     1000\n#define PJSIP_POOL_INC_ENDPT     1000\n#define PJSIP_POOL_RDATA_LEN     2000\n#define PJSIP_POOL_RDATA_INC     2000\n#define PJSIP_POOL_LEN_TDATA     2000\n#define PJSIP_POOL_INC_TDATA     512\n#define PJSIP_POOL_LEN_UA        2000\n#define PJSIP_POOL_INC_UA        1000\n#define PJSIP_POOL_TSX_LAYER_LEN 256\n#define PJSIP_POOL_TSX_LAYER_INC 256\n#define PJSIP_POOL_TSX_LEN       512\n#define PJSIP_POOL_TSX_INC       128\n#define PJMEDIA_SESSION_SIZE     1000\n#define PJMEDIA_SESSION_INC      1000\n```\n\n----------------------------------------\n\nTITLE: Dumping Call Quality Information in PJSUA\nDESCRIPTION: Demonstrates the use of the 'dq' (dump quality) command in PJSUA to check which codec is being used for a call, including packet loss, jitter, and other statistics.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/audio-troubleshooting/checks/codec_nego.rst#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n>>> dq\n 19:01:38.878        pjsua.c\n  [CONFIRMED ] To: sip:localhost;tag=213e15bcf98b4c0394a402881e885431\n    Call time: 00h:01m:44s, 1st res in 1452 ms, conn in 1682ms\n    #0 iLBC @8KHz, sendrecv, peer=192.168.0.66:4000\n       RX pt=117, stat last update: 00h:00m:01.943s ago\n          total 4.3Kpkt 164.0KB (302.2KB +IP hdr) @avg=12.5Kbps\n          pkt loss=0 (0.0%), dup=0 (0.0%), reorder=0 (0.0%)\n                (msec)    min     avg     max     last\n          loss period:   0.000   0.000   0.000   0.000\n          jitter     :   0.125  15.779 1695.000   1.250\n       TX pt=117, ptime=20ms, stat last update: 00h:00m:09.304s ago\n          total 5.1Kpkt 197.2KB (363.4KB +IP hdr) @avg 15.0Kbps\n          pkt loss=0 (0.0%), dup=0 (0.0%), reorder=0 (0.0%)\n                (msec)    min     avg     max     last\n          loss period:   0.000   0.000   0.000   0.000\n          jitter     :  14.750  15.570  18.875  18.875\n      RTT msec       :   0.854  24.516 125.000  18.783\n```\n\n----------------------------------------\n\nTITLE: Custom Build Flags in user.mak\nDESCRIPTION: Example of setting custom CFLAGS and LDFLAGS in user.mak file for PJSIP build customization.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/get-started/posix/build_instructions.rst#2025-04-23_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nexport CFLAGS += -msoft-float -fno-builtin\nexport LDFLAGS +=\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Buddy's Presence Status in C++\nDESCRIPTION: Creates a buddy object with the specified URI and subscribes to its presence status. This allows monitoring the presence state of a remote contact.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/pjsua2/using/presence.rst#2025-04-23_snippet_1\n\nLANGUAGE: c++\nCODE:\n```\nBuddyConfig cfg;\ncfg.uri = \"sip:alice@example.com\";\nMyBuddy buddy;\ntry {\n    buddy.create(*acc, cfg);\n    buddy.subscribePresence(true);\n} catch(Error& err) {\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Video and FFMPEG Capture in config_site.h\nDESCRIPTION: C code to add video support and FFMPEG capture device support in the config_site.h file for PJMEDIA.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/build_int/ffmpeg.rst#2025-04-23_snippet_4\n\nLANGUAGE: c\nCODE:\n```\n#define PJMEDIA_HAS_VIDEO             1\n#define PJMEDIA_VIDEO_DEV_HAS_FFMPEG  1\n```\n\n----------------------------------------\n\nTITLE: Disabling RTCP in PJSIP Configuration\nDESCRIPTION: This code snippet shows how to disable RTCP by defining a macro in config_site.h. Disabling RTCP can potentially halve the heap usage by eliminating duplicate ICE objects for RTCP components.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/perf_footprint/ice_memory.rst#2025-04-23_snippet_4\n\nLANGUAGE: c\nCODE:\n```\n#define PJMEDIA_ADVERTISE_RTCP          0\n```\n\n----------------------------------------\n\nTITLE: RX Statistics Header in PJSIP 'dq' Output\nDESCRIPTION: This snippet displays the RX statistics header from the 'dq' command output, showing the RTP payload type and last update time.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/audio-troubleshooting/checks/rx_quality.rst#2025-04-23_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n          RX pt=103, stat last update: 00h:00m:01.753s ago\n```\n\n----------------------------------------\n\nTITLE: Demonstrating CLI Input Type for PJSUA Call Answer Command\nDESCRIPTION: This snippet illustrates the input type for the call answer command, where users need to specify an answer code after pressing tab.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/other/cli_cmd.rst#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n<code> Answer code\n```\n\n----------------------------------------\n\nTITLE: Scheduling Video Preview Start via Timer in C++\nDESCRIPTION: Demonstrates how to safely start a video preview from a non-GUI thread using PJSUA2's timer functionality. This approach helps avoid GUI freezing issues when working with video rendering operations, particularly on Windows with SDL.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/pjsua2/using/media_video.rst#2025-04-23_snippet_1\n\nLANGUAGE: c++\nCODE:\n```\n// Timer type ID\nenum {\n    TIMER_START_PREVIEW = 1,\n    ...\n};\n\n// Generic timer parameter\nstruct MyTimerParam {\n    int type;\n    union {\n        struct {\n            int   dev_id;\n        void *hwnd;\n        int   w, h, fps;\n        } start_preview;\n        ...\n    } data;\n};\n\n\n// PJSUA2 Endpoint::onTimer() implementation\nvoid Endpoint::onTimer(const OnTimerParam &prm)\n{\n    MyTimerParam *param = (MyTimerParam*) prm.userData;\n    if (param->type == TIMER_START_PREVIEW) {\n        int dev_id = param->data.start_preview.dev_id;\n        void *hwnd = param->data.start_preview.hwnd;\n        int w      = param->data.start_preview.w;\n        int h      = param->data.start_preview.h;\n        int fps    = param->data.start_preview.fps;\n        StartPreview(device_id, hwnd, w, h, fps);\n    }\n    ...\n    \n    // Finally delete the timer parameter.\n    delete param;\n}\n\n...\n\nMyTimerParam *tp = new MyTimerParam();\ntp->type = TIMER_START_PREVIEW;\ntp->data.start_preview.dev_id = 1; // colorbar virtual device\ntp->data.start_preview.hwnd   = (void*)some_hwnd;\ntp->data.start_preview.w      = 320;\ntp->data.start_preview.h      = 240;\ntp->data.start_preview.fps    = 15;\n\n// Schedule the preview start to be executed immediately (zero milisecond delay).\nEndpoint::instance().utilTimerSchedule(0, tp);\n```\n\n----------------------------------------\n\nTITLE: Getting Default ICE Candidate in C\nDESCRIPTION: This code shows how to retrieve the default candidate for a specific component. This can be used as a fallback address if the remote endpoint doesn't support ICE.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/network_nat/standalone_ice.rst#2025-04-23_snippet_3\n\nLANGUAGE: C\nCODE:\n```\nunsigned comp_id = 1; // Component ID\npj_ice_sess_cand *def_cand;\n\npj_status_t status = pj_ice_strans_get_def_cand(ice_st, comp_id, &def_cand);\nif (status != PJ_SUCCESS) {\n    // Handle error\n}\n\n// Use def_cand->addr as the default address\n```\n\n----------------------------------------\n\nTITLE: Conference Bridge Status Check\nDESCRIPTION: Command to check the status of conference ports and verify that the WAV file is properly registered in the bridge.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/audio-troubleshooting/checks/play_wav.rst#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n>>> cl\nConference ports:\nPort #00[16KHz/10ms] Primary Sound Capture Driver  transmitting to:\nPort #01[16KHz/10ms]          THEFILE.WAV  transmitting to:\n```\n\n----------------------------------------\n\nTITLE: Creating a Conference Call in C++\nDESCRIPTION: Establishes bidirectional media between two calls, enabling all three parties (local user and two remote parties) to communicate with each other in a conference call.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/pjsua2/using/media_audio.rst#2025-04-23_snippet_9\n\nLANGUAGE: c++\nCODE:\n```\naud_med->startTransmit(*aud_med2);\naud_med2->startTransmit(*aud_med);\n```\n\n----------------------------------------\n\nTITLE: Implementing Oboe audio device for Android in PJSIP (C++)\nDESCRIPTION: Integration of the Oboe audio library for capture and playback on Android devices. The implementation is located in pjmedia/src/pjmedia-audiodev/oboe_dev.cpp and provides low-latency audio support for Android.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/overview/license_3rd_party.rst#2025-04-23_snippet_9\n\nLANGUAGE: cpp\nCODE:\n```\npjmedia/src/pjmedia-audiodev/oboe_dev.cpp\n```\n\n----------------------------------------\n\nTITLE: RTP Reception Statistics Example\nDESCRIPTION: Key statistics showing RTP packet reception information including packet count and bandwidth usage.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/audio-troubleshooting/checks/no_rx_rtp.rst#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nRX pt=103, stat last update: 00h:00m:01.753s ago\n   total 1.7Kpkt 72.2KB (127.2KB +IP hdr) @avg=10.6Kbps\n```\n\n----------------------------------------\n\nTITLE: Enabling Video Support in config_site.h\nDESCRIPTION: Configuration options to enable video support in PJSIP, including OpenH264 codec, libyuv, SDL, and DirectShow.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/get-started/windows/build_instructions.rst#2025-04-23_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#define PJMEDIA_HAS_VIDEO             1\n#define PJMEDIA_HAS_OPENH264_CODEC    1\n#define PJMEDIA_HAS_LIBYUV            1\n#define PJMEDIA_VIDEO_DEV_HAS_SDL     1\n#define PJMEDIA_VIDEO_DEV_HAS_DSHOW   1\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Lock Order with PJSUA and ICE in C\nDESCRIPTION: This code snippet illustrates the lock ordering when using group locks with PJSUA and ICE. It shows how the locks are acquired in a specific order to prevent deadlocks.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/develop/group_lock.rst#2025-04-23_snippet_0\n\nLANGUAGE: C\nCODE:\n```\npjsua --> { pjsua --> ice }\n```\n\n----------------------------------------\n\nTITLE: Handling Incoming RTP Packets in PJSIP\nDESCRIPTION: This code snippet outlines the process of handling incoming RTP packets in PJSIP. It involves polling the ioqueue, calling the on_rx_rtp() callback, reporting to the media stream, unpacking the RTP packet, and storing frames in the jitter buffer.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/media/audio_flow.rst#2025-04-23_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\non_rx_rtp()\npjmedia_transport_attach()\npjmedia_port_get_frame()\n```\n\n----------------------------------------\n\nTITLE: Modifying Sample Debug Project for Debugging in Visual Studio\nDESCRIPTION: Instructions for modifying the sample_debug project to debug a specific sample application. This involves editing the debug.c file to include the desired sample application.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/get-started/windows/build_instructions.rst#2025-04-23_snippet_6\n\nLANGUAGE: C++\nCODE:\n```\n#include \"path/to/sample/application.c\"\n```\n\n----------------------------------------\n\nTITLE: Initializing ICE Session in C\nDESCRIPTION: This code shows how to create an ICE session within the ICE stream transport. It specifies the initial role of the endpoint and optionally sets the local username and password.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/network_nat/standalone_ice.rst#2025-04-23_snippet_1\n\nLANGUAGE: C\nCODE:\n```\npj_ice_sess_role role = PJ_ICE_SESS_ROLE_CONTROLLING;\npj_status_t status;\n\nstatus = pj_ice_strans_init_ice(ice_st, role, NULL, NULL);\nif (status != PJ_SUCCESS) {\n    // Handle error\n}\n```\n\n----------------------------------------\n\nTITLE: Limiting ICE Candidates and Checks in C for PJNATH\nDESCRIPTION: This code snippet demonstrates how to limit the number of ICE candidates, checks, and components to reduce the ICE struct size in PJNATH.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/perf_footprint/ice_memory.rst#2025-04-23_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n#define PJ_ICE_ST_MAX_CAND     4           /* 8 */\n#define PJ_ICE_COMP_BITS       0           /* 1 */\n#define PJ_ICE_MAX_CAND        (PJ_ICE_ST_MAX_CAND*2)  /* 16 */\n#define PJ_ICE_MAX_CHECKS      (PJ_ICE_ST_MAX_CAND*PJ_ICE_ST_MAX_CAND) /* 32 */\n```\n\n----------------------------------------\n\nTITLE: SIP Signaling Statistics in PJSIP 'dq' Output\nDESCRIPTION: This snippet displays the SIP signaling statistics from the 'dq' command output, showing call duration and connection timing information.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/audio-troubleshooting/checks/rx_quality.rst#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n       Call time: 00h:00m:53s, 1st res in 1071 ms, conn in 1191ms\n```\n\n----------------------------------------\n\nTITLE: Building PJSIP for Android\nDESCRIPTION: Shell commands to build PJSIP after configuration.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/get-started/android/build_instructions.rst#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ make dep && make clean && make\n```\n\n----------------------------------------\n\nTITLE: Including PJSIP Header Files in Windows Applications\nDESCRIPTION: Code snippet showing the necessary header files to include to access all APIs exported by the PJSIP framework. This includes headers for pjlib, pjlib-util, pjnath, pjsip, pjsip_ua, pjsip_simple, pjsua, pjmedia, and pjmedia-codec components.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/get-started/windows/using.rst#2025-04-23_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#include <pjlib.h>\n#include <pjlib-util.h>\n#include <pjnath.h>\n#include <pjsip.h>\n#include <pjsip_ua.h>\n#include <pjsip_simple.h>\n#include <pjsua-lib/pjsua.h>\n#include <pjmedia.h>\n#include <pjmedia-codec.h>\n```\n\n----------------------------------------\n\nTITLE: Configuring Audio Buffer Count in PJSIP\nDESCRIPTION: Configuration macro to adjust the sound buffer count in PJSIP. Increasing this value can help reduce audio stuttering but will increase latency. Should be set in config_site.h.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/audio-troubleshooting/problems/audio_dropouts.rst#2025-04-23_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nPJMEDIA_SOUND_BUFFER_COUNT\n```\n\n----------------------------------------\n\nTITLE: Copying PJSIP Java Interface Files\nDESCRIPTION: Commands to copy the PJSIP Java interface files to the Android project's Java source directory and clean up unnecessary sample application files.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/get-started/android/additional-guides.rst#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ cd $YOUR_PROJECT_DIR/app/src/main/java\n$ cp -r $PJSIP_DIR/pjsip-apps/src/swig/java/android/app/src/main/java/* .\n\n# check\n$ ls\norg\n\n# Cleanup excess pjsua2 application sources.\n$ rm -r org/pjsip/pjsua2/app\n```\n\n----------------------------------------\n\nTITLE: Implementing Redirection Callback in PJSIP\nDESCRIPTION: Demonstrates how to implement the on_redirected callback to handle SIP redirection in PJSIP. The callback must return a pjsip_redirect_op value to control the redirection process.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/sip/redirection.rst#2025-04-23_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\npjsip_redirect_op on_redirected(pjsip_inv_session *inv, const pjsip_uri *target, const pjsip_event *e)\n{\n    // Implement redirection logic here\n    // Return PJSIP_REDIRECT_ACCEPT, PJSIP_REDIRECT_REJECT, PJSIP_REDIRECT_STOP, or PJSIP_REDIRECT_PENDING\n}\n```\n\n----------------------------------------\n\nTITLE: Optimizing Packet Buffer Sizes in C for PJNATH\nDESCRIPTION: This snippet shows how to reduce the size of packet buffers for STUN and TURN sockets/sessions. It adjusts the default values to optimize memory usage.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/perf_footprint/ice_memory.rst#2025-04-23_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#define PJ_STUN_SOCK_PKT_LEN        (160+200)               /* 2000 */\n#define PJ_STUN_MAX_PKT_LEN         PJ_STUN_SOCK_PKT_LEN    /*  800 */\n#define PJ_TURN_MAX_PKT_LEN         PJ_STUN_MAX_PKT_LEN     /* 3000 */\n```\n\n----------------------------------------\n\nTITLE: PJSIP Peer Connection Information\nDESCRIPTION: Connection details showing codec, sampling rate, transmission mode, and remote peer address/port.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/audio-troubleshooting/checks/tx_addr.rst#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n#0 iLBC @8KHz, sendrecv, peer=192.168.0.66:4000\n```\n\n----------------------------------------\n\nTITLE: Building PJSUA2 Java Interface with SWIG\nDESCRIPTION: Shell commands to set JAVA_HOME and build the SWIG interface for PJSUA2.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/get-started/android/build_instructions.rst#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ export JAVA_HOME=/path/to/android-studio/jbr/bin\n\n# In pjproject dir\n$ cd pjsip-apps/src/swig\n$ make\n```\n\n----------------------------------------\n\nTITLE: Key Transport Methods Implementation\nDESCRIPTION: Core methods that need to be implemented for a custom transport adapter, including get_info, attach, detach, send_rtp, send_rtcp2, and destroy functions.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/media/transport_adapter.rst#2025-04-23_snippet_0\n\nLANGUAGE: C\nCODE:\n```\npjmedia_transport_op::get_info\npjmedia_transport_op::attach\npjmedia_transport_op::detach\npjmedia_transport_op::send_rtp\npjmedia_transport_op::send_rtcp2\npjmedia_transport_op::destroy\n```\n\n----------------------------------------\n\nTITLE: Running PJSUA as TLS Server\nDESCRIPTION: Shell command to run PJSUA with TLS server configuration, specifying certificate files for root CA, server certificate, and private key.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/security/ssl.rst#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ ./pjsua --use-tls --tls-ca-file root.pem --tls-cert-file server-cert.pem --tls-privkey-file privkey.pem\n```\n\n----------------------------------------\n\nTITLE: NAT Type Classification Table\nDESCRIPTION: Table showing the possible NAT types as classified by pjnath, including type numbers and corresponding names\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/network_nat/troubleshooting_ice.rst#2025-04-23_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\n Type    Name\n-----------------------\n  0    Unknown\n  1    ErrUnknown\n  2    Open\n  3    Blocked\n  4    Symmetric UDP\n  5    Full Cone\n  6    Symmetric\n  7    Restricted\n  8    Port Restricted\n```\n\n----------------------------------------\n\nTITLE: Configuring PJSIP for Android Build\nDESCRIPTION: Shell commands to configure PJSIP for Android build with OpenSSL and Oboe support. Requires setting ANDROID_NDK_ROOT, OPENSSL_DIR, and OBOE_DIR environment variables.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/get-started/android/build_instructions.rst#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ cd /path/to/pjproject\n$ export ANDROID_NDK_ROOT=/home/whoever/Android/android-sdk/ndk/28.0.12916984\n$ ./configure-android -with-ssl=$OPENSSL_DIR --with-oboe=$OBOE_DIR\n```\n\n----------------------------------------\n\nTITLE: Building PJSIP Application with Make\nDESCRIPTION: Makefile configuration for building a PJSIP application. Includes compiler flags, linker settings, and clean targets. Requires path to PJSIP project directory.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/get-started/posix/using.rst#2025-04-23_snippet_1\n\nLANGUAGE: makefile\nCODE:\n```\nPJDIR = /path/to/pjproject\ninclude $(PJDIR)/build.mak\n\nmyapp: myapp.o\n        $(PJ_CC) -o $@ $< $(PJ_LDFLAGS) $(PJ_LDLIBS)\n\nmyapp.o: myapp.c\n        $(PJ_CC) -c -o $@ $< $(PJ_CFLAGS)\n\nclean:\n        rm -f myapp.o myapp\n```\n\n----------------------------------------\n\nTITLE: PJMEDIA MIPS Test Results - ARM9 Platform\nDESCRIPTION: Performance test results showing timing, CPU usage, and MIPS scores for various PJMEDIA components running on ARM926EJ-S processor at 180MHz. Measurements include memory player, conference bridge, resampling, and WSOLA operations.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/perf_footprint/pjmedia_mips.rst#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n00:59:38.531 os_core_unix.c pjlib 0.9.0-trunk for POSIX initialized\nMIPS test, with CPU=180Mhz,  198.0 MIPS\nClock  Item                                      Time     CPU    MIPS\n Rate                                           (usec)    (%)\n----------------------------------------------------------------------\n 8KHz get from memplayer                          181    0.018    0.04\n 8KHz conference bridge with 1 call              6682    0.668    1.32\n 8KHz conference bridge with 2 calls            11943    1.194    2.36\n 8KHz conference bridge with 4 calls            22402    2.240    4.44\n 8KHz conference bridge with 8 calls            42969    4.297    8.51\n 8KHz conference bridge with 16 calls           83328    8.333   16.50\n 8KHz upsample+downsample - linear               5815    0.581    1.15\n 8KHz upsample+downsample - small filter        66786    6.679   13.22\n 8KHz upsample+downsample - large filter       870754   87.075  172.41\n 8KHz WSOLA PLC - 0% loss                         605    0.060    0.12\n 8KHz WSOLA PLC - 2% loss                        1004    0.100    0.20\n 8KHz WSOLA PLC - 5% loss                        1541    0.154    0.31\n 8KHz WSOLA PLC - 10% loss                       1803    0.180    0.36\n 8KHz WSOLA PLC - 20% loss                       3102    0.310    0.61\n 8KHz WSOLA PLC - 50% loss                       8431    0.843    1.67\n 8KHz WSOLA discard 2% excess                     214    0.021    0.04\n 8KHz WSOLA discard 5% excess                     488    0.049    0.10\n```\n\n----------------------------------------\n\nTITLE: Configuring PJSIP with OpenSSL for iOS\nDESCRIPTION: This command demonstrates how to run the configure-iphone script with the OpenSSL path specified. It's used to prepare PJSIP for compilation with OpenSSL support on iOS.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/get-started/ios/build_instructions.rst#2025-04-23_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n./configure-iphone --with-ssl=[your_openssl_path]\n```\n\n----------------------------------------\n\nTITLE: Saving PJSUA2 Configuration to JSON File\nDESCRIPTION: Demonstrates how to save a PJSUA2 EpConfig object to a JSON file using the PersistentObject functionality. This example sets some configuration values and then writes them to a file named 'jsontest.json'.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/pjsua2/general_concept.rst#2025-04-23_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nEpConfig epCfg;\nJsonDocument jDoc;\nepCfg.uaConfig.maxCalls = 61;\nepCfg.uaConfig.userAgent = \"Just JSON Test\";\njDoc.writeObject(epCfg);\njDoc.saveFile(\"jsontest.json\");\n```\n\n----------------------------------------\n\nTITLE: Audio Callback Function Signatures\nDESCRIPTION: Function signatures for audio playback and recording callbacks used by the audio device stream for sound processing.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/media/audio_flow.rst#2025-04-23_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\npjmedia_aud_play_cb     // Playback callback\npjmedia_aud_rec_cb      // Recording callback\n```\n\n----------------------------------------\n\nTITLE: Copying PJSIP Android Video Capture Device Files\nDESCRIPTION: Command to copy the Java components for PJSIP Android video capture device to the application's source directory.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/get-started/android/additional-guides.rst#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncp pjmedia/src/pjmedia-videodev/android/PjCamera*.java [your_app]/src/org/pjsip/\n```\n\n----------------------------------------\n\nTITLE: Starting the PJSUA2 Library in C++\nDESCRIPTION: Starts the PJSUA2 library to finalize the initialization phase using the libStart() method. Includes error handling.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/pjsua2/using/endpoint.rst#2025-04-23_snippet_5\n\nLANGUAGE: C++\nCODE:\n```\ntry {\n    ep->libStart();\n} catch(Error& err) {\n    cout << \"Startup error: \" << err.info() << endl;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining High Level QoS Socket API in C\nDESCRIPTION: Core API functions for setting and getting QoS parameters on sockets. These functions provide a portable interface for QoS configuration across different platforms.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/network_nat/qos.rst#2025-04-23_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n// Set QoS parameters\nPJ_DECL(pj_status_t) pj_sock_set_qos_type(pj_sock_t sock,\n                                            pj_qos_type val);\n\n// Get QoS parameters\nPJ_DECL(pj_status_t) pj_sock_get_qos_type(pj_sock_t sock,\n                                            pj_qos_type *p_val);\n```\n\n----------------------------------------\n\nTITLE: Windows Vista Performance Test Results for PJSIP 0.9.0\nDESCRIPTION: Comprehensive benchmark results showing PJSIP 0.9.0 performance metrics running on Windows Vista with AMD Phenom 9850 processor. The test covers various audio operations including codec performance, conferencing bridge scaling, echo cancellation with different tail lengths, and streaming operations.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/perf_footprint/pjmedia_mips.rst#2025-04-23_snippet_9\n\nLANGUAGE: plaintext\nCODE:\n```\n18:42:52.441 os_core_win32. pjlib 0.9.0-trunk for win32 initialized\nMIPS test, with CPU=2500Mhz, 8783.3 MIPS\nClock  Item                                      Time     CPU    MIPS\n Rate                                           (usec)    (%)\n----------------------------------------------------------------------\n 8KHz get from memplayer                            9    0.001    0.08\n 8KHz conference bridge with 1 call               452    0.045    3.97\n 8KHz conference bridge with 2 calls              780    0.078    6.85\n 8KHz conference bridge with 4 calls             1551    0.155   13.62\n 8KHz conference bridge with 8 calls             3117    0.312   27.38\n 8KHz conference bridge with 16 calls            6184    0.618   54.32\n 8KHz upsample+downsample - linear                348    0.035    3.06\n 8KHz upsample+downsample - small filter         7888    0.789   69.28\n 8KHz upsample+downsample - large filter        34632    3.463  304.18\n 8KHz WSOLA PLC - 0% loss                          46    0.005    0.40\n 8KHz WSOLA PLC - 2% loss                          79    0.008    0.69\n 8KHz WSOLA PLC - 5% loss                         179    0.018    1.57\n 8KHz WSOLA PLC - 10% loss                        316    0.032    2.78\n 8KHz WSOLA PLC - 20% loss                        416    0.042    3.65\n 8KHz WSOLA PLC - 50% loss                       1230    0.123   10.80\n 8KHz WSOLA discard 2% excess                      10    0.001    0.09\n 8KHz WSOLA discard 5% excess                      49    0.005    0.43\n 8KHz WSOLA discard 10% excess                    166    0.017    1.46\n 8KHz WSOLA discard 20% excess                    263    0.026    2.31\n 8KHz WSOLA discard 50% excess                    849    0.085    7.46\n 8KHz echo canceller 100ms tail len             15281    1.528  134.22\n 8KHz echo canceller 128ms tail len             16319    1.632  143.33\n 8KHz echo canceller 200ms tail len             17098    1.710  150.18\n 8KHz echo canceller 256ms tail len             18079    1.808  158.79\n 8KHz echo canceller 400ms tail len             20356    2.036  178.79\n 8KHz echo canceller 500ms tail len             21685    2.168  190.46\n 8KHz echo canceller 512ms tail len             21992    2.199  193.16\n 8KHz echo canceller 600ms tail len             23288    2.329  204.54\n 8KHz echo canceller 800ms tail len             26313    2.631  231.11\n 8KHz tone generator with single freq             675    0.068    5.93\n 8KHz tone generator with dual freq              1320    0.132   11.59\n 8KHz codec encode/decode - G.711                 161    0.016    1.41\n 8KHz codec encode/decode - GSM                  6462    0.646   56.76\n 8KHz codec encode/decode - iLBC                40037    4.004  351.65\n 8KHz codec encode/decode - Speex 8Khz          23053    2.305  202.48\n 8KHz codec encode/decode - L16/8000/1             87    0.009    0.76\n 8KHz stream TX/RX - G.711                        172    0.017    1.51\n 8KHz stream TX/RX - G.711 SRTP 32bit             461    0.046    4.05\n 8KHz stream TX/RX - G.711 SRTP 32bit +auth       701    0.070    6.16\n 8KHz stream TX/RX - G.711 SRTP 80bit             461    0.046    4.05\n 8KHz stream TX/RX - G.711 SRTP 80bit +auth      1342    0.134   11.79\n 8KHz stream TX/RX - GSM                         6729    0.673   59.10\n 8KHz stream TX/RX - GSM SRTP 32bit              6965    0.697   61.18\n 8KHz stream TX/RX - GSM SRTP 32bit + auth       7320    0.732   64.29\n 8KHz stream TX/RX - GSM SRTP 80bit              6966    0.697   61.18\n 8KHz stream TX/RX - GSM SRTP 80bit + auth       7323    0.732   64.32\n16KHz get from memplayer                            7    0.001    0.06\n16KHz conference bridge with 1 call               882    0.088    7.75\n16KHz conference bridge with 2 calls             1514    0.151   13.30\n16KHz conference bridge with 4 calls             2943    0.294   25.85\n16KHz conference bridge with 8 calls             5747    0.575   50.48\n16KHz conference bridge with 16 calls           11432    1.143  100.41\n16KHz upsample+downsample - linear                672    0.067    5.90\n16KHz upsample+downsample - small filter        15662    1.566  137.56\n16KHz upsample+downsample - large filter        34666    3.467  304.48\n16KHz WSOLA PLC - 0% loss                          26    0.003    0.23\n16KHz WSOLA PLC - 2% loss                         315    0.032    2.77\n16KHz WSOLA PLC - 5% loss                         183    0.018    1.61\n16KHz WSOLA PLC - 10% loss                        927    0.093    8.14\n16KHz WSOLA PLC - 20% loss                       1716    0.172   15.07\n16KHz WSOLA PLC - 50% loss                       4321    0.432   37.95\n16KHz WSOLA discard 2% excess                      11    0.001    0.10\n16KHz WSOLA discard 5% excess                     156    0.016    1.37\n16KHz WSOLA discard 10% excess                    518    0.052    4.55\n16KHz WSOLA discard 20% excess                    952    0.095    8.36\n16KHz WSOLA discard 50% excess                   3117    0.312   27.38\n16KHz echo canceller 100ms tail len             33300    3.330  292.48\n16KHz echo canceller 128ms tail len             17047    1.705  149.73\n16KHz echo canceller 200ms tail len             17643    1.764  154.96\n16KHz echo canceller 256ms tail len             37227    3.723  326.97\n16KHz echo canceller 400ms tail len             40963    4.096  359.79\n16KHz echo canceller 500ms tail len             43948    4.395  386.01\n16KHz echo canceller 512ms tail len             26078    2.608  229.05\n16KHz echo canceller 600ms tail len             23438    2.344  205.86\n16KHz echo canceller 800ms tail len             26229    2.623  230.38\n16KHz tone generator with single freq             669    0.067    5.88\n16KHz tone generator with dual freq              1323    0.132   11.62\n16KHz codec encode/decode - G.722               10382    1.038   91.19\n16KHz codec encode/decode - Speex 16Khz         55105    5.510  484.00\n16KHz codec encode/decode - L16/16000/1           161    0.016    1.41\n16KHz stream TX/RX - G.722                      10755    1.076   94.46\n```\n\n----------------------------------------\n\nTITLE: Creating OpenSSL Library Directory\nDESCRIPTION: Commands to create a library directory and copy the compiled OpenSSL libraries (libcrypto.a and libssl.a) for later use in the PJSIP build process.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/get-started/android/requirements.rst#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n# in OpenSSL directory\n$ mkdir lib\n$ cp lib*.a lib/\n$ ls lib\nlibcrypto.a  libssl.a\n```\n\n----------------------------------------\n\nTITLE: Including Default Configuration in config_site.h for PJSIP\nDESCRIPTION: This snippet demonstrates how to set up the config_site.h file by including the sample configuration file. This is recommended as a starting point before customizing the configuration for specific application needs.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/get-started/guidelines-development.rst#2025-04-23_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#include <pj/config_site_sample.h>\n```\n\n----------------------------------------\n\nTITLE: Enabling Video Support in PJSIP Configuration\nDESCRIPTION: This code snippet demonstrates how to enable video support in PJSIP by adding a definition to the config_site.h file.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/get-started/posix/build_instructions.rst#2025-04-23_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n#define PJMEDIA_HAS_VIDEO\t1\n```\n\n----------------------------------------\n\nTITLE: Configuring PJSUA Command Line Arguments for Performance Optimization\nDESCRIPTION: Various command line arguments for pjsua to optimize CPU usage, including disabling echo cancellation with '--ec-tail 0', adding PCMU codec with '--add-codec pcmu', and setting a lower internal clock rate with '--clock-rate 8000' to improve performance.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/audio-troubleshooting/checks/cpu.rst#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n--ec-tail 0\n```\n\nLANGUAGE: text\nCODE:\n```\n--add-codec pcmu\n```\n\nLANGUAGE: text\nCODE:\n```\n---clock-rate 8000\n```\n\n----------------------------------------\n\nTITLE: Configuring and Building FFMPEG on Windows\nDESCRIPTION: Shell commands to configure and build FFMPEG on Windows using MSYS/MinGW, with options for H.264 support.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/get-started/windows/build_instructions.rst#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ ./configure --enable-shared --disable-static\n$ make && make install\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ ./configure --enable-shared --disable-static --enable-gpl --enable-libx264\n$ make && make install\n```\n\n----------------------------------------\n\nTITLE: Deleting PJSUA2 Account Object in Java\nDESCRIPTION: Example of manually deleting a PJSUA2 Account object in Java to avoid garbage collection issues. This is necessary because relying on garbage collection can cause problems with object destruction order and thread safety.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/pjsua2/general_concept.rst#2025-04-23_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nacc.delete();\n```\n\n----------------------------------------\n\nTITLE: SDP ICE Candidate Configuration Example\nDESCRIPTION: Example SDP configuration showing codec mappings, ICE credentials (ufrag/pwd), and ICE candidates for both host and server reflexive types across RTP/RTCP components.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/network_nat/standalone_ice.rst#2025-04-23_snippet_4\n\nLANGUAGE: sdp\nCODE:\n```\na=rtpmap:102 speex/8000\na=rtpmap:104 speex/32000\na=rtpmap:117 iLBC/8000\na=fmtp:117 mode=30\na=sendrecv\na=rtpmap:101 telephone-event/8000\na=fmtp:101 0-15\na=ice-ufrag:2b2c6196\na=ice-pwd:06ea0fa8\na=candidate:Sc0a80e 1 UDP 1698815 81.178.x.y 4808 typ srflx raddr 10.0.0.1 rport 4808\na=candidate:Hc0a80e 1 UDP 2135151 192.168.0.14 4808 typ host\na=candidate:Sc0a80e 2 UDP 1698814 81.178.x.y 4809 typ srflx raddr 10.0.0.1 rport 4809\na=candidate:Hc0a80e 2 UDP 2135150 192.168.0.14 4809 typ host\n```\n\n----------------------------------------\n\nTITLE: Stream Identification in PJSIP 'dq' Output\nDESCRIPTION: This snippet shows the stream identification information from the 'dq' command output, including codec, direction, and peer address.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/audio-troubleshooting/checks/rx_quality.rst#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n       #0 speex @16KHz, sendrecv, peer=192.168.0.66:4000\n```\n\n----------------------------------------\n\nTITLE: Configuring Site Header for iOS in PJSIP\nDESCRIPTION: Essential configuration in config_site.h to enable iPhone-specific settings for PJSIP by including the sample configuration file.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/get-started/ios/build_instructions.rst#2025-04-23_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#define PJ_CONFIG_IPHONE 1\n#include <pj/config_site_sample.h>\n```\n\n----------------------------------------\n\nTITLE: Configuring and Building FFMPEG with Shared Libraries\nDESCRIPTION: Commands to configure and build FFMPEG with shared libraries enabled and static libraries disabled.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/build_int/ffmpeg.rst#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ ./configure --enable-shared --disable-static\n$ make && make install\n```\n\n----------------------------------------\n\nTITLE: Configure Tone Generator for Non-Floating Point Platforms\nDESCRIPTION: Configuration settings for PJMEDIA tone generator on platforms without floating point support, using CORDIC algorithm with 10 iterations.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/media/tonegen.rst#2025-04-23_snippet_2\n\nLANGUAGE: c\nCODE:\n```\n#define PJMEDIA_TONEGEN_ALG                     PJMEDIA_TONEGEN_FIXED_POINT_CORDIC\n#define PJMEDIA_TONEGEN_FIXED_POINT_CORDIC_LOOP 10\n```\n\n----------------------------------------\n\nTITLE: Building PJSIP for MacOS x86_64 on M1\nDESCRIPTION: Configure script command for building PJSIP targeting x86_64 architecture when running on MacOS M1 hardware.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/get-started/posix/build_instructions.rst#2025-04-23_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ CFLAGS=\"-arch x86_64\" LDFLAGS=\"-arch x86_64\" ./configure --host=x86_64-apple-darwin\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Memory Optimization Settings in C for PJNATH\nDESCRIPTION: This code block combines all the optimization techniques discussed, including reducing buffer sizes, limiting ICE candidates, reducing log verbosity, and optimizing pool sizes for PJNATH.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/perf_footprint/ice_memory.rst#2025-04-23_snippet_3\n\nLANGUAGE: c\nCODE:\n```\n/* To reduce socket buffers */\n#define PJ_STUN_SOCK_PKT_LEN        (160+200)               /* 2000 */\n#define PJ_STUN_MAX_PKT_LEN         PJ_STUN_SOCK_PKT_LEN    /*  800 */\n#define PJ_TURN_MAX_PKT_LEN         PJ_STUN_MAX_PKT_LEN     /* 3000 */\n\n/* Reduce the size of the respective sessions */\n#define PJ_ICE_ST_MAX_CAND          4                       /* 8 */\n#define PJ_ICE_COMP_BITS            0                       /* 1 */\n#define PJ_ICE_MAX_CAND             (PJ_ICE_ST_MAX_CAND*2)  /* 16 */\n#define PJ_ICE_MAX_CHECKS           (PJ_ICE_ST_MAX_CAND*PJ_ICE_ST_MAX_CAND) /* 32 */\n\n/* Log level < 5 frees up 1000 bytes of buffer in the STUN session! */\n#define PJ_LOG_MAX_LEVEL            4                       /* 5 */\n\n/* A lazy pool memory usage optimization.. */\n#   define PJNATH_POOL_LEN_ICE_SESS         128\n#   define PJNATH_POOL_INC_ICE_SESS         128\n#   define PJNATH_POOL_LEN_ICE_STRANS       128\n#   define PJNATH_POOL_INC_ICE_STRANS       128\n#   define PJNATH_POOL_LEN_NATCK            128\n#   define PJNATH_POOL_INC_NATCK            128\n#   define PJNATH_POOL_LEN_STUN_SESS        128\n#   define PJNATH_POOL_INC_STUN_SESS        128\n#   define PJNATH_POOL_LEN_STUN_TDATA       128\n#   define PJNATH_POOL_INC_STUN_TDATA       128\n\n#   define PJNATH_POOL_LEN_TURN_SESS        128\n#   define PJNATH_POOL_INC_TURN_SESS        128\n#   define PJNATH_POOL_LEN_TURN_SOCK        128\n#   define PJNATH_POOL_INC_TURN_SOCK        128\n```\n\n----------------------------------------\n\nTITLE: Processing Deferred Redirection in PJSIP\nDESCRIPTION: Shows how to process a deferred redirection decision using pjsip_inv_process_redirect() after initially returning PJSIP_REDIRECT_PENDING from the callback.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/sip/redirection.rst#2025-04-23_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\npjsip_inv_process_redirect(inv_session, PJSIP_REDIRECT_ACCEPT, NULL);\n```\n\n----------------------------------------\n\nTITLE: TX Statistics Header in PJSIP 'dq' Output\nDESCRIPTION: This snippet shows the TX statistics header from the 'dq' command output, including payload type, packet time, and last update time.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/audio-troubleshooting/checks/rx_quality.rst#2025-04-23_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\n          TX pt=103, ptime=20ms, stat last update: 00h:00m:07.871s ago\n```\n\n----------------------------------------\n\nTITLE: System Configuration\nDESCRIPTION: Hardware and software configuration details for the benchmark environment\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/perf_footprint/pjmedia_mips.rst#2025-04-23_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n============= ===========================================\nHardware:     HP PC\n============= ===========================================\nPlatform:     Windows XP SP2\nProcessor:    Pentium 4 (single core, no Hyper-Threading)\nSpeed:        2.6 GHz\nAssumed MIPS: 8102 MIPS\nBogoMIPS:     -\nCompilation:  Default Release settings (/O2)\nCompiler:     Visual Studio 2005\n============= ===========================================\n```\n\n----------------------------------------\n\nTITLE: Enabling Compact Form Headers in PJSIP\nDESCRIPTION: Configuration code to enable compact form of SIP headers, which reduces message size by approximately 50 bytes. Uses the global boolean variable pjsip_use_compact_form to control header formatting.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/sip/reducing_size.rst#2025-04-23_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nextern pj_bool_t pjsip_use_compact_form;\n\n// enable compact form\npjsip_use_compact_form = PJ_TRUE;\n```\n\n----------------------------------------\n\nTITLE: Enabling Video and FFMPEG Support for Visual Studio\nDESCRIPTION: C code to add video and FFMPEG support in the config_site.h file for building with Visual Studio.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/build_int/ffmpeg.rst#2025-04-23_snippet_5\n\nLANGUAGE: c\nCODE:\n```\n#define PJMEDIA_HAS_VIDEO   1\n#define PJMEDIA_HAS_FFMPEG  1\n```\n\n----------------------------------------\n\nTITLE: Sample Output of pjsystest Device Test for Audio Device Evaluation\nDESCRIPTION: This is an example output from the pjsystest Device Test (menu 01) that shows statistics about audio device performance including interval measurements, burst information, and detected problems like clock drift.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/audio-troubleshooting/checks/dev_quality.rst#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nAudio Device Test\nHere are the audio statistics:\nRec : interval (min/max/avg/dev)=\n        0/31/20/11 (ms)\n    max burst=2\nPlay: interval (min/max/avg/dev)=\n        10/26/20/1 (ms)\n    burst=2\nThere could be 1 problem(s) with the sound device:\n1: Clock drifts detected. Capture is 16 samples/sec faster than the playback device\n```\n\n----------------------------------------\n\nTITLE: Creating XCFramework for Multi-Platform Support\nDESCRIPTION: Steps to bundle the combined libraries into an XCFramework that supports iOS, iOS Simulator, and macOS platforms.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/get-started/ios/build_instructions.rst#2025-04-23_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n# Delete any existing framework\nrm -rf libPJSIP.xcframework\n# Put all PJSIP headers into one directory [path_to_PJSIP_headers]\n# Create binary framework for iOS, iOS Simulator, and MacOS\nxcodebuild -create-xcframework -library ios/libPJSIP.a -headers [path_to_PJSIP_headers] -library sim/libPJSIP.a -headers [path_to_PJSIP_headers] -library mac/libPJSIP.a -headers [path_to_PJSIP_headers] -output libPJSIP.xcframework\n```\n\n----------------------------------------\n\nTITLE: Configuring DSCP for SIP Transport in PJSUA-LIB\nDESCRIPTION: Example of setting specific DSCP value (CS3/24) for SIP transport traffic configuration.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/network_nat/qos.rst#2025-04-23_snippet_4\n\nLANGUAGE: c\nCODE:\n```\npjsua_transport_config sip_tcfg;\n\npjsua_transport_config_default(&sip_tcfg);\n// Set listening port etc according to app settings\n...\n// Set QoS to DSCP CS3 (DSCP value 24)\nsip_tcfg.qos_params.flags = PJ_QOS_PARAM_HAS_DSCP;\nsip_tcfg.qos_params.dscp_val = 24;\n\n// Create SIP transport with this config\npjsua_transport_create(..., &sip_tcfg, ...);\n```\n\n----------------------------------------\n\nTITLE: Successful ICE Negotiation Logging\nDESCRIPTION: This code snippet shows the logging output for a successful ICE negotiation scenario. It demonstrates the creation of the ICE session, addition of candidates, and successful connectivity checks for both RTP and RTCP components.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/network_nat/troubleshooting_ice.rst#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n16:01:46.168  icstr00DCB6D8 ICE session created, comp_cnt=2, role is Controlling agent\n16:01:46.168  icstr00DCB6D8 Candidate 0 added: comp_id=1, type=Host, foundation=Hc0a80001, addr=192.168.0.1:4000, base=192.168.0.1:4000, prio=0x64ffffff (1694498815)\n16:01:46.168  icstr00DCB6D8 Candidate 1 added: comp_id=1, type=Host, foundation=Hc0a80001, addr=192.168.131.1:4000, base=192.168.0.1:4000, prio=0x640000ff (1677721855)\n16:01:46.168  icstr00DCB6D8 Candidate 2 added: comp_id=1, type=Host, foundation=Hc0a80001, addr=172.26.2.79:4000, base=192.168.0.1:4000, prio=0x640000ff (1677721855)\n16:01:46.168  icstr00DCB6D8 Candidate 3 added: comp_id=1, type=Server Reflexive, foundation=Sc0a80001, addr=202.152.240.222:42972, base=192.168.0.1:4000, prio=0x7effffff (2130706431)\n16:01:46.168  icstr00DCB6D8 Candidate 4 added: comp_id=2, type=Host, foundation=Hc0a80001, addr=192.168.0.1:4001, base=192.168.0.1:4001, prio=0x64fffffe (1694498814)\n16:01:46.168  icstr00DCB6D8 Candidate 5 added: comp_id=2, type=Host, foundation=Hc0a80001, addr=192.168.131.1:4001, base=192.168.0.1:4001, prio=0x640000fe (1677721854)\n16:01:46.168  icstr00DCB6D8 Candidate 6 added: comp_id=2, type=Host, foundation=Hc0a80001, addr=172.26.2.79:4001, base=192.168.0.1:4001, prio=0x640000fe (1677721854)\n16:01:46.168  icstr00DCB6D8 Candidate 7 added: comp_id=2, type=Server Reflexive, foundation=Sc0a80001, addr=202.152.240.222:42973, base=192.168.0.1:4001, prio=0x7efffffe (2130706430)\n16:01:49.884  icstr00DCB6D8 Check 2: [1] 192.168.0.1:4000-->192.168.0.2:4000 pruned (duplicate found)\n16:01:49.884  icstr00DCB6D8 Check 3: [1] 172.26.2.79:4000-->192.168.0.2:4000 pruned (equal base)\n16:01:49.884  icstr00DCB6D8 Check 3: [1] 192.168.131.1:4000-->192.168.0.2:4000 pruned (equal base)\n16:01:49.884  icstr00DCB6D8 Check 2: [2] 192.168.0.1:4001-->192.168.0.2:4001 pruned (duplicate found)\n16:01:49.884  icstr00DCB6D8 Check 2: [2] 172.26.2.79:4001-->192.168.0.2:4001 pruned (equal base)\n16:01:49.884  icstr00DCB6D8 Check 2: [2] 192.168.131.1:4001-->192.168.0.2:4001 pruned (equal base)\n16:01:49.884  icstr00DCB6D8 Checklist created:\n16:01:49.884  icstr00DCB6D8  0: [1] 192.168.0.1:4000-->192.168.0.2:4000 (not nominated, state=Frozen)\n16:01:49.894  icstr00DCB6D8  1: [2] 192.168.0.1:4001-->192.168.0.2:4001 (not nominated, state=Frozen)\n16:01:49.894  icstr00DCB6D8 Starting ICE check..\n16:01:49.894  icstr00DCB6D8 Check 0: [1] 192.168.0.1:4000-->192.168.0.2:4000: state changed from Frozen to Waiting\n16:01:49.904  icstr00DCB6D8 Checklist: state changed from Idle to Running\n16:01:49.904  icstr00DCB6D8 Starting checklist periodic check\n16:01:49.904  icstr00DCB6D8 Sending connectivity check for check 0: [1] 192.168.0.1:4000-->192.168.0.2:4000\n16:01:49.904  icstr00DCB6D8 Check 0: [1] 192.168.0.1:4000-->192.168.0.2:4000: state changed from Waiting to In Progress\n16:01:49.924  icstr00DCB6D8 Starting checklist periodic check\n16:01:49.924  icstr00DCB6D8 Sending connectivity check for check 1: [2] 192.168.0.1:4001-->192.168.0.2:4001\n16:01:49.924  icstr00DCB6D8 Check 1: [2] 192.168.0.1:4001-->192.168.0.2:4001: state changed from Frozen to In Progress\n16:01:49.924  icstr00DCB6D8 Check 0: [1] 192.168.0.1:4000-->192.168.0.2:4000 (nominated): connectivity check SUCCESS\n16:01:49.924  icstr00DCB6D8 Check 0: [1] 192.168.0.1:4000-->192.168.0.2:4000: state changed from In Progress to Succeeded\n16:01:49.924  icstr00DCB6D8 Check 0 is successful and nominated\n16:01:49.934  icstr00DCB6D8 Triggered check for check 0 not performed because it's completed\n16:01:49.934  icstr00DCB6D8 Check 0 is successful and nominated\n16:01:49.944  icstr00DCB6D8 Starting checklist periodic check\n16:01:49.954  icstr00DCB6D8 Triggered check for check 1 not performed because it's in progress. Retransmitting\n16:01:49.954  icstr00DCB6D8 Check 1: [2] 192.168.0.1:4001-->192.168.0.2:4001 (nominated): connectivity check SUCCESS\n16:01:49.964  icstr00DCB6D8 Check 1: [2] 192.168.0.1:4001-->192.168.0.2:4001: state changed from In Progress to Succeeded\n```\n\n----------------------------------------\n\nTITLE: PJSIP Transmission Statistics\nDESCRIPTION: Specific section of dq output showing transmission statistics including packet count, data size, and bandwidth usage.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/audio-troubleshooting/checks/tx_addr.rst#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nTX pt=117, ptime=20ms, stat last update: 00h:00m:09.304s ago\n        total 5.1Kpkt 197.2KB (363.4KB +IP hdr) @avg 15.0Kbps\n```\n\n----------------------------------------\n\nTITLE: Enabling G.722.1 Codec in PJSIP Configuration\nDESCRIPTION: This code snippet shows how to enable the G.722.1 codec in PJSIP by defining a macro in the config_site.h file. This is necessary due to licensing restrictions on the G.722.1 codec.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/api/pjmedia/pjmedia-codec.rst#2025-04-23_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define PJMEDIA_HAS_G7221_CODEC  1\n```\n\n----------------------------------------\n\nTITLE: Setting UWP API Family Configuration\nDESCRIPTION: XML configuration in pjproject-vs14-api-def.props to set the API family for UWP builds.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/get-started/windows-phone/build_instructions.rst#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n...\n<API_Family>UWP</API_Family>\n...\n```\n\n----------------------------------------\n\nTITLE: Debug Assert Handler Implementation\nDESCRIPTION: Signal handler implementation to prevent process exit on assertions during native code debugging.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/get-started/windows-phone/build_instructions.rst#2025-04-23_snippet_3\n\nLANGUAGE: c\nCODE:\n```\n#ifndef NDEBUG   \nsignal(SIGABRT, [](int)\n{\n   __debugbreak();  \n}); \n#endif\n```\n\n----------------------------------------\n\nTITLE: Verifying Complete Bidirectional Media Flow in PJSIP Conference Bridge\nDESCRIPTION: This example shows the 'cl' command output after establishing bidirectional media flow. The sound device is now transmitting to the call and the call is transmitting to the sound device.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/audio-troubleshooting/checks/conf_connections.rst#2025-04-23_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n>>> cl\nConference ports:\nPort #00[16KHz/10ms]         Master/sound  transmitting to: #1\nPort #01[16KHz/20ms]   sip:user@localhost  transmitting to: #0\n\n>>>\n```\n\n----------------------------------------\n\nTITLE: Configuring IPv6 SIP Account in PJSUA-LIB (C)\nDESCRIPTION: Sample code for setting up a SIP account using an IPv6 server in a PJSUA-LIB application. This example is for PJSIP versions earlier than 2.14.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/network_nat/ipv6.rst#2025-04-23_snippet_2\n\nLANGUAGE: c\nCODE:\n```\n#define SIP_USER \"user\" \n#define SIP_SERVER \"example.com\" \n//#define SIP_SERVER_IPv6 \"[1234::5678]\" \n#define SIP_PASSWD \"pwd\"\n\npjsua_acc_config acc_cfg; pjsua_acc_config_default(&acc_cfg);\n\nacc_cfg.id = pj_str(\"sip:\" SIP_USER \"@\" SIP_SERVER); \nacc_cfg.reg_uri = pj_str(\"sip:\" SIP_SERVER); \nacc_cfg.cred_count = 1;\nacc_cfg.cred_info[0].realm = pj_str(\"*\"); \nacc_cfg.cred_info[0].scheme = pj_str(\"digest\"); \nacc_cfg.cred_info[0].username = pj_str(SIP_USER);\nacc_cfg.cred_info[0].data_type = PJSIP_CRED_DATA_PLAIN_PASSWD;\nacc_cfg.cred_info[0].data = pj_str(SIP_PASSWD);\n\n/* Bind the account to IPv6 transport */ \nacc_cfg.transport_id = udp6_tp_id; \n// udp6_tp_id is an UDP IPv6 transport ID, e.g: outputed by\n// pjsua_transport_create(PJSIP_TRANSPORT_UDP6, …, &udp6_tp_id)\n\n/* Enable IPv6 in media transport */ \nacc_cfg.ipv6_media_use = PJSUA_IPV6_ENABLED;\n\n/* Finally */ \nstatus = pjsua_acc_add(&acc_cfg, PJ_TRUE, NULL); \nif (status != PJ_SUCCESS)\n    ...\n```\n\n----------------------------------------\n\nTITLE: Audio Device Operations Demo (auddemo.c)\nDESCRIPTION: Interactive demonstration of sound device operations including device listing, recording, playback, latency management and timing tests. Uses PJMEDIA core and audiodev modules.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/api/pjmedia/samples.rst#2025-04-23_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Implementing OpenSSL for secure sockets in PJLIB (C)\nDESCRIPTION: Integration of OpenSSL as the backend for PJLIB's secure socket implementation. This is used for SIP TLS transport and other secure communications. The implementation is located in pjlib/src/pj/ssl_sock_ossl.c.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/overview/license_3rd_party.rst#2025-04-23_snippet_5\n\nLANGUAGE: c\nCODE:\n```\npjlib/src/pj/ssl_sock_ossl.c\n```\n\n----------------------------------------\n\nTITLE: Establishing Call-to-Sound Connection with Conference Connect in PJSIP\nDESCRIPTION: This example shows how to use the 'cc' command to establish unidirectional media flow from the call (port 1) to the sound device (port 0), completing the bidirectional connection.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/audio-troubleshooting/checks/conf_connections.rst#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n>>> cc 1 0\nSuccess\n```\n\n----------------------------------------\n\nTITLE: Doxygen Multiline Comment Formatting\nDESCRIPTION: Demonstrates the correct way to format multiline Doxygen comments in PJSIP. Comment lines should be properly aligned for readability.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/get-started/coding-style.rst#2025-04-23_snippet_5\n\nLANGUAGE: c\nCODE:\n```\n/**\n * First line describing the function.\n * Second line describing the function.\n */\n```\n\n----------------------------------------\n\nTITLE: Configuring and Building FFMPEG with H.264 Support\nDESCRIPTION: Commands to configure and build FFMPEG with H.264 support, enabling shared libraries and libx264.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/build_int/ffmpeg.rst#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ ./configure --enable-shared --disable-static --enable-gpl --enable-libx264\n$ make && make install\n```\n\n----------------------------------------\n\nTITLE: Executing 'dq' Command in PJSIP\nDESCRIPTION: This snippet shows the output of the 'dq' command in pjsua, which provides detailed information about the current call's quality and network statistics.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/audio-troubleshooting/checks/rx_quality.rst#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n>>> dq\n    14:54:37.008        pjsua.c\n     [CONFIRMED ] To: sip:user@localhost;tag=1857bde149264e2986c4aac1a26f5866\n       Call time: 00h:00m:53s, 1st res in 1071 ms, conn in 1191ms\n       #0 speex @16KHz, sendrecv, peer=192.168.0.66:4000\n          RX pt=103, stat last update: 00h:00m:01.753s ago\n             total 1.7Kpkt 72.2KB (127.2KB +IP hdr) @avg=10.6Kbps\n             pkt loss=0 (0.0%), dup=0 (0.0%), reorder=0 (0.0%)\n                   (msec)    min     avg     max     last\n             loss period:   0.000   0.000   0.000   0.000\n             jitter     :   0.000   5.506 227.000   9.812\n          TX pt=103, ptime=20ms, stat last update: 00h:00m:07.871s ago\n             total 0pkt 0B (0B +IP hdr) @avg 0bps\n             pkt loss=0 (-1.$%), dup=0 (-1.$%), reorder=0 (-1.$%)\n                   (msec)    min     avg     max     last\n             loss period:   0.000   0.000   0.000   0.000\n             jitter     :   0.000   0.000   0.000   0.000\n         RTT msec       :   0.274   0.616   1.233   1.233\n```\n\n----------------------------------------\n\nTITLE: Loading PJSUA2 Configuration from JSON File\nDESCRIPTION: Shows how to load a PJSUA2 EpConfig object from a JSON file using the PersistentObject functionality. This example reads the configuration from a file named 'jsontest.json' into an EpConfig object.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/pjsua2/general_concept.rst#2025-04-23_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\nEpConfig epCfg;\nJsonDocument jDoc;\njDoc.loadFile(\"jsontest.json\");\njDoc.readObject(epCfg);\n```\n\n----------------------------------------\n\nTITLE: Implementing OpenH264 codec in PJSIP (C++)\nDESCRIPTION: Integration of OpenH264 codec in PJSIP for video encoding/decoding. The implementation is located in pjmedia/src/pjmedia-codec/openh264.cpp and utilizes the OpenH264 library.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/overview/license_3rd_party.rst#2025-04-23_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\npjmedia/src/pjmedia-codec/openh264.cpp\n```\n\n----------------------------------------\n\nTITLE: Creating Local Audio Loopback in C++\nDESCRIPTION: Creates a local audio loopback by connecting the microphone directly to the speaker, useful for testing audio devices.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/pjsua2/using/media_audio.rst#2025-04-23_snippet_6\n\nLANGUAGE: c++\nCODE:\n```\nmic_media.startTransmit(speaker_media);\n```\n\n----------------------------------------\n\nTITLE: Configuring Video Support in PJSIP for iOS\nDESCRIPTION: Required definitions in config_site.h to enable video support and iPhone configuration for PJSIP.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/get-started/ios/build_instructions.rst#2025-04-23_snippet_7\n\nLANGUAGE: c\nCODE:\n```\n#define PJ_CONFIG_IPHONE \t\t\t1\n#define PJMEDIA_HAS_VIDEO\t\t\t1\n\n#include <pj/config_site_sample.h>\n```\n\n----------------------------------------\n\nTITLE: Standard Multiline Comment Formatting\nDESCRIPTION: Shows the proper formatting for regular multiline comments in PJSIP code. Asterisks should be properly aligned.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/get-started/coding-style.rst#2025-04-23_snippet_7\n\nLANGUAGE: c\nCODE:\n```\n/* First line describing something.\n * Second line describing the something.\n */\n```\n\n----------------------------------------\n\nTITLE: Calculating Progressive Discard Target Time in C\nDESCRIPTION: This code snippet calculates the target time for adjusting latency in the jitter buffer's progressive discard algorithm. It uses predefined macros to determine the discard rate based on the difference between actual and target latencies.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/audio/jitter_buffer.rst#2025-04-23_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nT = PJMEDIA_JBUF_PRO_DISC_T1 + (PJMEDIA_JBUF_PRO_DISC_T2 -\n    PJMEDIA_JBUF_PRO_DISC_T1) * (burst_level -\n    PJMEDIA_JBUF_PRO_DISC_MIN_BURST) /\n    (PJMEDIA_JBUF_PRO_DISC_MAX_BURST-PJMEDIA_JBUF_PRO_DISC_MIN_BURST);\n\n/*\n   Default settings:\n   PJMEDIA_JBUF_PRO_DISC_T1 = 2000ms\n   PJMEDIA_JBUF_PRO_DISC_T2 = 10000ms\n   PJMEDIA_JBUF_PRO_DISC_MIN_BURST = 1\n   PJMEDIA_JBUF_PRO_DISC_MIN_BURST = 100\n */\n```\n\n----------------------------------------\n\nTITLE: Sample SDP with ICE Candidates\nDESCRIPTION: This code snippet shows an example of Session Description Protocol (SDP) content containing ICE candidates. It includes both host and server reflexive candidates for an audio stream.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/network_nat/troubleshooting_ice.rst#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nv=0\no=- 3400859894 3400859894 IN IP4 1.1.1.1\ns=pjmedia\nc=IN IP4 1.1.1.1\nt=0 0\na=X-nat:6 Symmetric\na=ice-ufrag:349219da\na=ice-pwd:50644d54\nm=audio 16902 RTP/AVP 103 101\na=rtpmap:103 speex/16000\na=rtpmap:101 telephone-event/8000\na=fmtp:101 0-15\na=candidate:Hc0a80265 1 UDP 1694498815 192.168.2.101 16052 typ host\na=candidate:Sc0a80266 1 UDP 2130706431 1.1.1.1 16902 typ srflx raddr 192.168.2.101 rport 16052\n```\n\n----------------------------------------\n\nTITLE: Defining Audio Device Interface GUIDs for Windows XP Hardware Detection\nDESCRIPTION: Code snippet showing the GUID definitions for audio device interfaces in Windows XP. These can be used with hardware detection procedures to identify when audio devices are inserted or removed from the system.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/audio/handling_hw_change.rst#2025-04-23_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nGUID = { 0x65E8773D, 0x8F56, 0x11D0, {0xA3, 0xB9, 0x00, 0xA0, 0xC9, 0x22, 0x31, 0x96} };\n//{ 0x65E8773E, 0x8F56, 0x11D0, {0xA3, 0xB9, 0x00, 0xA0, 0xC9, 0x22, 0x31, 0x96} },\n//{ 0x6994AD04, 0x93EF, 0x11D0, {0xA3, 0xCC, 0x00, 0xA0, 0xC9, 0x22, 0x31, 0x96} }\n```\n\n----------------------------------------\n\nTITLE: Building and installing Java SWIG module\nDESCRIPTION: Builds and installs the Java SWIG module for PJSUA2.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/pjsua2/building.rst#2025-04-23_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ncd pjsip-apps/src/swig/java\nmake\nmake install\n```\n\n----------------------------------------\n\nTITLE: Configuring PJMEDIA Audio Device Settings\nDESCRIPTION: Configuration settings in config_site.h to enable WASAPI audio device and disable PortAudio and WMME for Windows builds.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/get-started/windows-phone/build_instructions.rst#2025-04-23_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#define PJMEDIA_AUDIO_DEV_HAS_PORTAUDIO   0\n#define PJMEDIA_AUDIO_DEV_HAS_WMME        0\n#define PJMEDIA_AUDIO_DEV_HAS_WASAPI      1\n```\n\n----------------------------------------\n\nTITLE: Checking AccountVideoConfig in PJSIP C++\nDESCRIPTION: This snippet highlights key fields in the pj::AccountVideoConfig class that should be checked when troubleshooting video issues. It focuses on autoShowIncoming and autoTransmitOutgoing settings.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/video/troubleshooting.rst#2025-04-23_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\npj::AccountVideoConfig::autoShowIncoming\npj::AccountVideoConfig::autoTransmitOutgoing\n```\n\n----------------------------------------\n\nTITLE: Incorrect Multiline Comment Formatting\nDESCRIPTION: Demonstrates the incorrect way to format regular multiline comments in PJSIP. This style should be avoided as the asterisks are not properly aligned.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/get-started/coding-style.rst#2025-04-23_snippet_8\n\nLANGUAGE: c\nCODE:\n```\n/* First line describing something.\n* Second line describing the something.\n* Alas, they don't align!\n*/\n```\n\n----------------------------------------\n\nTITLE: Configuring PJSIP for Android Emulator (x86_64)\nDESCRIPTION: Shell command to configure PJSIP for Android emulator build targeting x86_64 architecture.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/get-started/android/build_instructions.rst#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nTARGET_ABI=x86_64 ./configure-android --use-ndk-cflags ...\n```\n\n----------------------------------------\n\nTITLE: Implementing SILK codec in PJSIP (C)\nDESCRIPTION: Integration of the SILK audio codec in PJSIP. The implementation is located in pjmedia/src/pjmedia-codec/silk.c and uses the SILK codec library for audio encoding/decoding.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/overview/license_3rd_party.rst#2025-04-23_snippet_7\n\nLANGUAGE: c\nCODE:\n```\npjmedia/src/pjmedia-codec/silk.c\n```\n\n----------------------------------------\n\nTITLE: Implementing Background TCP Keepalive for iOS PJSIP App\nDESCRIPTION: Code showing how to implement background TCP keepalive functionality in iOS apps using PJSIP. Includes thread registration, keepalive timer handling, and application background state management.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/get-started/ios/issues.rst#2025-04-23_snippet_0\n\nLANGUAGE: objective-c\nCODE:\n```\n- (void)keepAlive {\n    /* Register this thread if not yet */\n    if (!pj_thread_is_registered()) {\n        static pj_thread_desc   thread_desc;\n        static pj_thread_t     *thread;\n        pj_thread_register(\"mainthread\", thread_desc, &thread);\n    }\n\n   /* Simply sleep for 5s, give the time for library to send transport\n    * keepalive packet, and wait for server response if any. Don't sleep\n    * too short, to avoid too many wakeups, because when there is any\n    * response from server, app will be woken up again (see also #1482).\n    */\n    pj_thread_sleep(5000);\n }\n\n - (void)applicationDidEnterBackground:(UIApplication *)application\n {\n    /* Send keep alive manually at the beginning of background */\n    pjsip_endpt_send_raw*(...);\n\n    /* iOS requires that the minimum keep alive interval is 600s */\n    [application setKeepAliveTimeout:600 handler: ^{\n      [self performSelectorOnMainThread:@selector(keepAlive)\n              withObject:nil waitUntilDone:YES];\n    }];\n }\n```\n\n----------------------------------------\n\nTITLE: Configuring PJSIP for 16 KB Page Size Support (Android 15+)\nDESCRIPTION: Shell command to configure PJSIP with flags for supporting 16 KB page sizes on Android 15 and later.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/get-started/android/build_instructions.rst#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nCFLAGS=\"-D__BIONIC_NO_PAGE_SIZE_MACRO\" LDFLAGS=\"-Wl,-z,max-page-size=16384\" ./configure-android\n```\n\n----------------------------------------\n\nTITLE: Installing Opus Codec on Debian/Ubuntu\nDESCRIPTION: This shell command shows how to install the Opus codec development package on Debian or Ubuntu systems using the apt package manager.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/api/pjmedia/pjmedia-codec.rst#2025-04-23_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\n$ sudo apt-get install libopus-dev\n```\n\n----------------------------------------\n\nTITLE: PJSIP Quality Statistics Command Output\nDESCRIPTION: Example output of the dq command showing detailed RTP statistics including packet transmission, jitter, and connection details. Shows transmitted packets, bandwidth usage, and remote peer address.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/audio-troubleshooting/checks/tx_addr.rst#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n>>> dq\n19:01:38.878        pjsua.c\n[CONFIRMED ] To: sip:localhost;tag=213e15bcf98b4c0394a402881e885431\nCall time: 00h:01m:44s, 1st res in 1452 ms, conn in 1682ms\n#0 iLBC @8KHz, sendrecv, peer=192.168.0.66:4000\nRX pt=117, stat last update: 00h:00m:01.943s ago\n        total 4.3Kpkt 164.0KB (302.2KB +IP hdr) @avg=12.5Kbps\n        pkt loss=0 (0.0%), dup=0 (0.0%), reorder=0 (0.0%)\n                (msec)    min     avg     max     last\n        loss period:   0.000   0.000   0.000   0.000\n        jitter     :   0.125  15.779 1695.000   1.250\nTX pt=117, ptime=20ms, stat last update: 00h:00m:09.304s ago\n        total 5.1Kpkt 197.2KB (363.4KB +IP hdr) @avg 15.0Kbps\n        pkt loss=0 (0.0%), dup=0 (0.0%), reorder=0 (0.0%)\n                (msec)    min     avg     max     last\n        loss period:   0.000   0.000   0.000   0.000\n        jitter     :  14.750  15.570  18.875  18.875\nRTT msec       :   0.854  24.516 125.000  18.783\n```\n\n----------------------------------------\n\nTITLE: Including Audio Device Documentation\nDESCRIPTION: reStructuredText include directive that imports common audio device documentation from a separate file.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/overview/features_media_devs.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. include:: ../common/common_audiodev.rst\n```\n\n----------------------------------------\n\nTITLE: Closing WAV Recorder in C++\nDESCRIPTION: Closes the WAV recorder by deleting the object. This finalizes the WAV file, making it available for playback.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/pjsua2/using/media_audio.rst#2025-04-23_snippet_5\n\nLANGUAGE: c++\nCODE:\n```\ndelete wav_writer;\n```\n\n----------------------------------------\n\nTITLE: Establishing Sound-to-Call Connection with Conference Connect in PJSIP\nDESCRIPTION: This example shows how to use the 'cc' (conference connect) command to establish unidirectional media flow from the sound device (port 0) to the call (port 1).\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/audio-troubleshooting/checks/conf_connections.rst#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n>>> cc 0 1\nSuccess\n```\n\n----------------------------------------\n\nTITLE: Configure Tone Generator for Floating Point Platforms\nDESCRIPTION: Configuration settings for PJMEDIA tone generator on platforms with floating point support, using floating point approximation algorithm.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/media/tonegen.rst#2025-04-23_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n#define PJMEDIA_TONEGEN_ALG                     PJMEDIA_TONEGEN_FLOATING_POINT\n```\n\n----------------------------------------\n\nTITLE: Building JNI Interface Library\nDESCRIPTION: Commands to build libpjsua.so JNI interface library for Android Java application\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/get-started/android/cli-sip-client.rst#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ cd ../src/pjsua/android/jni/\n$ make\n```\n\n----------------------------------------\n\nTITLE: Implementing Buddy State Callback in C++\nDESCRIPTION: Implements the onBuddyState callback method to handle and display presence status updates from a remote buddy.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/pjsua2/using/presence.rst#2025-04-23_snippet_2\n\nLANGUAGE: c++\nCODE:\n```\nvoid MyBuddy::onBuddyState()\n{\n    BuddyInfo bi = getInfo();\n    cout << \"Buddy \" << bi.uri << \" is \" << bi.presStatus.statusText << endl;\n}\n```\n\n----------------------------------------\n\nTITLE: Call Identification in PJSIP 'dq' Output\nDESCRIPTION: This snippet shows the call identification line from the 'dq' command output, which provides information about the call's SIP URI and tag.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/audio-troubleshooting/checks/rx_quality.rst#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n     [CONFIRMED ] To: sip:user@localhost;tag=1857bde149264e2986c4aac1a26f5866\n```\n\n----------------------------------------\n\nTITLE: Viewing Audio Device Log Output in PJSIP\nDESCRIPTION: Example log output showing audio device information when a sound device is opened in PJSIP. The log displays the device name, recording/playback status, sample rate, channels, bit depth, frame size, and latency values.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/audio-troubleshooting/checks/device.rst#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n15:05:37.978      pasound.c Opened device Primary Sound Capture Driver(Windows \nDirectSound)/Primary Sound Driver(Windows DirectSound) for recording and playback, \nsample rate=16000, ch=1, bits=16, 160 samples per frame, input latency=0 ms,\noutput latency=120 ms\n```\n\n----------------------------------------\n\nTITLE: Playing WAV File with Playfile Sample\nDESCRIPTION: Alternative command to play a WAV file using the playfile sample application, which doesn't use the conference bridge functionality.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/audio-troubleshooting/checks/play_wav.rst#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ ./playfile THEFILE.WAV\n```\n\n----------------------------------------\n\nTITLE: Configuring Software Dependencies\nDESCRIPTION: Code references found in documentation showing configuration macros and function calls for enabling/disabling various components like G.722 codec (pjmedia_codec_g722_init()), GSM codec (pjmedia_codec_gsm_init()), Speex codec (pjmedia_codec_speex_init()), and command line parsing (pj_getopt(), pj_getopt_long()).\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/overview/license_3rd_party.rst#2025-04-23_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nPJMEDIA_HAS_ALAW_ULAW_TABLE\nPJMEDIA_HAS_G722_CODEC\nPJMEDIA_RESAMPLE_IMP\nPJMEDIA_HAS_GSM_CODEC\nPJMEDIA_HAS_SPEEX_CODEC\nPJMEDIA_HAS_SPEEX_AEC\nPJMEDIA_HAS_SPEEX_RESAMPLE\n```\n\n----------------------------------------\n\nTITLE: Building PJSIP Libraries with Third-Party Media Support in C\nDESCRIPTION: This command is used to build the PJSIP libraries when integrating a third-party media stack. It only builds the libraries and unit tests, avoiding the compilation of samples that depend on PJMEDIA.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/media/3rd_party_media.rst#2025-04-23_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n$ make lib\n```\n\n----------------------------------------\n\nTITLE: Connecting Microphone to WAV Recording\nDESCRIPTION: Command to connect microphone audio to the WAV recording port for simultaneous recording.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/audio-troubleshooting/problems/how_to_record.rst#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n>>> cc 0 1\n 09:40:47.894   conference.c Port 0 (Primary Sound Capture Driver) transmitting\nto port 1 (OUTPUT.WAV)\nSuccess\n```\n\n----------------------------------------\n\nTITLE: Disabling PJMEDIA in config_site.h for C\nDESCRIPTION: This code snippet shows how to disable PJMEDIA-specific implementation in PJSUA-LIB by setting PJSUA_MEDIA_HAS_PJMEDIA to 0 in the config_site.h file.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/media/3rd_party_media.rst#2025-04-23_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#define PJSUA_MEDIA_HAS_PJMEDIA    0\n```\n\n----------------------------------------\n\nTITLE: Running PJSUA as TLS Client\nDESCRIPTION: Shell command to run PJSUA as a TLS client to connect to a server using TLS transport.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/security/ssl.rst#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ ./pjsua --use-tls <sip:SERVER;transport=tls>\n```\n\n----------------------------------------\n\nTITLE: Reading PortAudio Log Output for Underflow/Overflow Detection\nDESCRIPTION: Example log output showing how to identify audio underflows and overflows when closing a PortAudio sound device. The log displays the device path and counts of underflow and overflow occurrences at log level 5.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/audio-troubleshooting/checks/dev_under_overflow.rst#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n23:33:43.391 pasound.c Closing /dev/dsp: 0 underflow, 0 overflow\n```\n\n----------------------------------------\n\nTITLE: PJSIP Build Commands\nDESCRIPTION: Standard make commands for building PJSIP after configuration.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/get-started/posix/build_instructions.rst#2025-04-23_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n$ cd pjproject\n$ make dep\n$ make\n```\n\n----------------------------------------\n\nTITLE: Configuring Audio Device Parameters in PJSIP\nDESCRIPTION: Key configuration parameters in systest.h for setting audio device properties like device IDs, clock rates, buffer sizes, and latency values. These settings affect the audio testing behavior of pjsystest.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/audio-troubleshooting/checks/pjsystest.rst#2025-04-23_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\n// Configuration parameters in systest.h\nDEV_CLOCK_RATE               // Audio device clock rate\nOVERRIDE_AUDDEV_REC_LAT      // Recording latency in milliseconds\nOVERRIDE_AUDDEV_PLAY_LAT     // Playback latency in milliseconds\nREC_DEV_ID                   // Recording device ID\nPLAY_DEV_ID                  // Playback device ID\n```\n\n----------------------------------------\n\nTITLE: Connecting to Mobile PJSUA CLI\nDESCRIPTION: Command to establish telnet connection to PJSUA CLI running on a mobile device. Uses port 2323 and requires the device's IP address.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/audio-troubleshooting/checks/loopback.rst#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ telnet 192.168.1.101 2323\n```\n\n----------------------------------------\n\nTITLE: Enabling VPX Codec Support in config_site.h\nDESCRIPTION: Configuration options to enable VPX codec support in PJSIP, including VP8 and VP9.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/get-started/windows/build_instructions.rst#2025-04-23_snippet_2\n\nLANGUAGE: c\nCODE:\n```\n#define PJMEDIA_HAS_VPX_CODEC         1    //by default VP8 codec is enabled\n#define PJMEDIA_HAS_VPX_CODEC_VP9     1    //enable VP9 codec\n```\n\n----------------------------------------\n\nTITLE: Parsing Escaped URI in PJSIP (C)\nDESCRIPTION: Demonstrates how an escaped URI in an incoming message is parsed and stored in the pjsip_sip_uri structure. The parser unescapes the URI before storing it.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/sip/uri_escaping.rst#2025-04-23_snippet_0\n\nLANGUAGE: c\nCODE:\n```\npjsip_sip_uri.user = pj_str(\"good user\");\npjsip_sip_uri.host = pj_str(\"example.com\");\n```\n\n----------------------------------------\n\nTITLE: Running ./configure for PJSIP Build in Shell\nDESCRIPTION: This shell command shows how to run the ./configure script to set up the build environment for PJSIP using default settings.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/get-started/posix/build_instructions.rst#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ cd pjproject\n$ ./configure\n```\n\n----------------------------------------\n\nTITLE: Cross Compiling PJSIP for ARM Linux\nDESCRIPTION: Example of configuring PJSIP for cross-compilation targeting ARM Linux platform.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/get-started/posix/build_instructions.rst#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ ./configure --host=arm-elf-linux\n```\n\n----------------------------------------\n\nTITLE: SDP NAT Type Information Example\nDESCRIPTION: Example of how NAT type information is included in SDP content for troubleshooting purposes\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/network_nat/troubleshooting_ice.rst#2025-04-23_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\na=X-nat:6 Symmetric\n```\n\n----------------------------------------\n\nTITLE: Final Conference Bridge Status\nDESCRIPTION: Display of conference ports showing all active connections including mixed audio recording.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/audio-troubleshooting/problems/how_to_record.rst#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n>>> cl\nConference ports:\nPort #00[16KHz/10ms] Primary Sound Capture Driver  transmitting to: #2 #1\nPort #01[16KHz/10ms]           OUTPUT.WAV  transmitting to:\nPort #02[16KHz/20ms]   sip:user@localhost  transmitting to: #0 #1\n```\n\n----------------------------------------\n\nTITLE: Identifying Active Codec from PJSUA Output\nDESCRIPTION: Shows the specific line from the PJSUA 'dq' command output that indicates which codec is being used for the call.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/audio-troubleshooting/checks/codec_nego.rst#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n    #0 iLBC @8KHz, sendrecv, peer=192.168.0.66:4000\n```\n\n----------------------------------------\n\nTITLE: Building PJSIP for MacOS M1 on x86_64\nDESCRIPTION: Configure script command for building PJSIP targeting ARM64 architecture when running on MacOS x86_64 hardware.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/get-started/posix/build_instructions.rst#2025-04-23_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n$ CFLAGS=\"-arch arm64\" LDFLAGS=\"-arch arm64\" ./configure --host=arm-apple-darwin\n```\n\n----------------------------------------\n\nTITLE: Enabling VideoToolbox H264 Codec in PJSIP\nDESCRIPTION: Configuration setting to enable Apple's VideoToolbox H.264 codec implementation in PJSIP.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/get-started/ios/build_instructions.rst#2025-04-23_snippet_8\n\nLANGUAGE: c\nCODE:\n```\n#define PJMEDIA_HAS_VID_TOOLBOX_CODEC 1\n```\n\n----------------------------------------\n\nTITLE: Checking Conference Bridge Status\nDESCRIPTION: Command to display the current conference ports and their connections using the 'cl' command.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/audio-troubleshooting/problems/how_to_record.rst#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n>>> cl\nConference ports:\nPort #00[16KHz/10ms] Primary Sound Capture Driver  transmitting to:\nPort #01[16KHz/10ms]           OUTPUT.WAV  transmitting to:\n```\n\n----------------------------------------\n\nTITLE: Documentation of PJSIP Audio Flow Components\nDESCRIPTION: Lists the core components involved in PJSIP's audio processing pipeline including audio device streams, sound ports, conference bridges, media streams and transports.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/media/audio_flow.rst#2025-04-23_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\npjmedia_aud_stream      // Audio device stream\npjmedia_snd_port        // Sound device port\npjmedia_conf            // Conference bridge\npjmedia_stream          // Media stream\npjmedia_transport       // Media transport\n```\n\n----------------------------------------\n\nTITLE: Disabling SRTP Support in PJMEDIA Configuration\nDESCRIPTION: Code snippet showing how to disable SRTP feature in PJMEDIA and PJSUA-LIB by setting PJMEDIA_HAS_SRTP to 0 in config_site.h.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/security/srtp.rst#2025-04-23_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#define PJMEDIA_HAS_SRTP  0\n```\n\n----------------------------------------\n\nTITLE: Setting CFLAGS for PJPROJECT build in user.mak\nDESCRIPTION: Adds the -fPIC flag to CFLAGS in the user.mak file for building PJPROJECT on Linux/MacOS X/Unix systems.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/pjsua2/building.rst#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nexport CFLAGS += -fPIC\n```\n\n----------------------------------------\n\nTITLE: Enabling Optimized ILBC Codec Implementation for Mac OS X and iOS\nDESCRIPTION: This code snippet demonstrates how to enable the optimized ILBC codec implementation for Mac OS X and iOS platforms in PJSIP by defining a macro in the config_site.h file.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/api/pjmedia/pjmedia-codec.rst#2025-04-23_snippet_1\n\nLANGUAGE: C\nCODE:\n```\n#define PJMEDIA_ILBC_CODEC_USE_COREAUDIO 1\n```\n\n----------------------------------------\n\nTITLE: Enabling FFMPEG Support in config_site.h\nDESCRIPTION: Configuration option to enable FFMPEG support in PJSIP for video processing and codecs.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/get-started/windows/build_instructions.rst#2025-04-23_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n#define PJMEDIA_HAS_FFMPEG            1\n```\n\n----------------------------------------\n\nTITLE: Configuring PJSIP Build with Custom CFLAGS\nDESCRIPTION: Example showing how to configure PJSIP build with custom compiler flags for optimization and floating point handling.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/get-started/posix/build_instructions.rst#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ ./configure CFLAGS=\"-O3 -DNDEBUG -msoft-float -fno-builtin\"\n```\n\n----------------------------------------\n\nTITLE: iLBC License Declaration\nDESCRIPTION: License text for the iLBC codec implementation distributed with PJSIP.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/overview/license_3rd_party.rst#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nCopyright 2011 The WebRTC project authors\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions\nare met:\n\n- Redistributions of source code must retain the above copyright\n  notice, this list of conditions and the following disclaimer.\n\n- Redistributions in binary form must reproduce the above copyright\n  notice, this list of conditions and the following disclaimer in the\n  documentation and/or other materials provided with the distribution.\n\n- Neither the name of Google nor the names of its\n  contributors may be used to endorse or promote products derived from\n  this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR\nCONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\nEXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\nPROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\nPROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\nLIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\nNEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n```\n\n----------------------------------------\n\nTITLE: Checking Conference Ports with No Media Flow in PJSIP\nDESCRIPTION: This example shows the 'cl' command output when there is no media flow between the call and sound device. Both ports exist but neither is transmitting to the other, indicating no audio connection.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/audio-troubleshooting/checks/conf_connections.rst#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n>>> cl\nConference ports:\nPort #00[16KHz/10ms]         Master/sound  transmitting to:\nPort #01[16KHz/20ms]   sip:user@localhost  transmitting to:\n```\n\n----------------------------------------\n\nTITLE: Copying PJSIP Libraries to Project Directory\nDESCRIPTION: Commands to copy the required PJSIP native libraries (libpjsua2.so and libc++_shared.so) to the Android project's jniLibs directory and verify the files.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/get-started/android/additional-guides.rst#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ cd $YOUR_PROJECT_DIR/app/src/main/jniLibs\n$ cp -r $PJSIP_DIR/pjsip-apps/src/swig/java/android/pjsua2/src/main/jniLibs/* .\n$ ls -R\narm64-v8a\n\n./arm64-v8a:\nlibcrypto.so  libc++_shared.so  liboboe.so  libpjsua2.so  libssl.so\n```\n\n----------------------------------------\n\nTITLE: Building and installing Python SWIG module\nDESCRIPTION: Builds and installs the Python SWIG module for PJSUA2.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/pjsua2/building.rst#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncd pjsip-apps/src/swig/python\nmake\nmake install\n```\n\n----------------------------------------\n\nTITLE: Building OpenSSL for iOS ARM64 Architecture\nDESCRIPTION: This snippet shows the shell commands to build OpenSSL 1.1.x for iOS ARM64 architecture. It sets up the cross-compilation environment and executes the configure, make, and install commands.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/get-started/ios/build_instructions.rst#2025-04-23_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nexport CROSS_TOP=/Applications/XCode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/\nexport CROSS_SDK=iPhoneOS11.3.sdk\nexport CC=\"/Applications/XCode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang -arch arm64\"\n./Configure iphoneos-cross --prefix=/Users/teluu/openssl-1.1.0f-iphone64/arm64\nmake\nmake install\n```\n\n----------------------------------------\n\nTITLE: Copying FFMPEG Libraries for Android\nDESCRIPTION: Command to copy FFMPEG library .so files into an Android application project directory after building FFMPEG for Android.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/build_int/ffmpeg.rst#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncp /Users/me/src/ffmpeg-2.5/android/arm/lib/*.so /Users/me/pjproject-2.0/pjsip-apps/src/swig/java/android/libs/armeabi\n```\n\n----------------------------------------\n\nTITLE: Milenage Algorithm License\nDESCRIPTION: License terms for the Milenage authentication algorithm used in AKAv1-MD5 and AKAv2 SIP digest authentication.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/overview/license_3rd_party.rst#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nThe 3GPP authentication and key generation functions (MILENAGE) have been developed\nthrough the collaborative efforts of the 3GPP Organizational Partners.\n\nThey may be used only for the development and operation of 3G Mobile Communications and \nservices. There are no additional requirements or authorizations necessary for these \nalgorithms to be implemented.\n```\n\n----------------------------------------\n\nTITLE: Connecting Remote Call to WAV Recording\nDESCRIPTION: Command to connect remote call audio to the WAV recording port using the 'cc' command.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/audio-troubleshooting/problems/how_to_record.rst#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n>>> cc 2 1\n 09:40:08.969   conference.c Port 2 (sip:user@localhost) transmitting to port 1\n(OUTPUT.WAV)\nSuccess\n```\n\n----------------------------------------\n\nTITLE: Testing Python SWIG module installation\nDESCRIPTION: Tests the installation of the Python SWIG module by importing pjsua2 in a Python interpreter.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/pjsua2/building.rst#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport pjsua2\n```\n\n----------------------------------------\n\nTITLE: Setting Architecture for iOS Build\nDESCRIPTION: Setting environment variable to specify the target architecture (arm64) before running the configure script.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/get-started/ios/build_instructions.rst#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nexport ARCH=\"-arch arm64\"\n```\n\n----------------------------------------\n\nTITLE: Pulling and Running Docker Container for PJSIP Documentation\nDESCRIPTION: Commands to pull the pre-configured PJSIP documentation Docker image and run it with appropriate port mapping for local viewing of the documentation.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ docker pull pjsip/pjproject-docs\n$ docker run -dit -p 8000:8000 --name=pjproject-docs pjsip/pjproject-docs\n```\n\n----------------------------------------\n\nTITLE: Configuring PJSIP with OpenCore AMR Support\nDESCRIPTION: Configure command to build PJSIP with OpenCore AMR codec support.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/audio/opencore-amr.rst#2025-04-23_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ ./configure --with-opencore-amr=/home/foo\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenCore AMR Build\nDESCRIPTION: Configure command for building OpenCore AMR with custom installation prefix.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/audio/opencore-amr.rst#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ ./configure --prefix=/home/foo\n```\n\n----------------------------------------\n\nTITLE: Connect Conference Ports\nDESCRIPTION: Command to connect the WAV file port to the speaker output port in the conference bridge.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/audio-troubleshooting/checks/play_wav.rst#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n>>> cc 1 0\nSuccess\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum iOS Version Support\nDESCRIPTION: Environment variable configuration to specify the minimum iOS version that PJSIP will support.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/get-started/ios/build_instructions.rst#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nexport MIN_IOS=\"-miphoneos-version-min=8.0\"\n```\n\n----------------------------------------\n\nTITLE: Installing Python requirements for documentation generation\nDESCRIPTION: This command installs the necessary Python packages for generating the PJSIP documentation. It uses the requirements.txt file to ensure all dependencies are correctly installed.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/README.md#2025-04-23_snippet_16\n\nLANGUAGE: sh\nCODE:\n```\n$ pip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Installing SWIG and Python on Windows with MinGW/MinGW-w64 + MSYS2\nDESCRIPTION: Installs SWIG, Python, and Python setuptools using pacman on Windows with MinGW/MinGW-w64 and MSYS2.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/pjsua2/building.rst#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npacman -S swig python python-setuptools\n```\n\n----------------------------------------\n\nTITLE: Indicating RFC 2833 DTMF Capability in SDP\nDESCRIPTION: SDP line indicating capability to accept RFC 2833 DTMF events. This line is required for PJSIP to send RFC 2833 DTMF events.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/sip/dtmf.rst#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\na=rtpmap:101 telephone-event/8000\n```\n\n----------------------------------------\n\nTITLE: Building and Installing OpenCore AMR\nDESCRIPTION: Commands to build and install the OpenCore AMR libraries.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/audio/opencore-amr.rst#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nmake && make install\n```\n\n----------------------------------------\n\nTITLE: Creating Audio Loopback in PJSUA\nDESCRIPTION: Conference bridge command to connect microphone input to speaker output, creating an audio loopback for testing purposes.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/audio-troubleshooting/checks/loopback.rst#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n>>> cc 0 0\n```\n\n----------------------------------------\n\nTITLE: Setting OpenSSL Directory Environment Variable\nDESCRIPTION: Command to set the OPENSSL_DIR environment variable pointing to the OpenSSL installation directory for reference in later build steps.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/get-started/android/requirements.rst#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ export OPENSSL_DIR=/home/whoever/Android/openssl-3.4.0\n```\n\n----------------------------------------\n\nTITLE: Setting PJPROJECT Version in Configuration\nDESCRIPTION: Python configuration code snippet showing how to set the PJPROJECT tag version in the conf.py file to build documentation for a specific PJSIP version.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/README.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\npjproject_tag = '2.10'\n```\n\n----------------------------------------\n\nTITLE: Creating Table of Contents with Sphinx in reStructuredText\nDESCRIPTION: Sets up a table of contents directive in Sphinx documentation using reStructuredText. This directive defines a maxdepth of 1 and includes links to build instructions and WinRT documentation pages.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/get-started/windows-phone/index.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 1\n   :caption: Table of Contents\n\n   build_instructions\n   winrt\n```\n\n----------------------------------------\n\nTITLE: Verifying SWIG Installation\nDESCRIPTION: Command to check if SWIG is properly installed and accessible in the PATH, displaying the version and configuration information.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/get-started/android/requirements.rst#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ swig -version\n\nSWIG Version 4.0.2\n\nCompiled with g++ [x86_64-pc-linux-gnu]\n\nConfigured options: +pcre\n\nPlease see http://www.swig.org for reporting bugs and further information\n```\n\n----------------------------------------\n\nTITLE: Building libvpx on Windows\nDESCRIPTION: Shell commands to configure and build libvpx on Windows using MSYS console, with options for VP8 and VP9 support.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/get-started/windows/build_instructions.rst#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ ./configure --target=x86-win32-vs15 --disable-examples --disable-docs --disable-tools --disable-examples --enable-static --enable-vp8 --enable-vp9 --enable-static-msvcrt  # add options if needed, e.g: optimization, install dir, search path\n$ make    #Generate Visual Studio solution\n```\n\n----------------------------------------\n\nTITLE: Running PJSUA with SRTP and TLS\nDESCRIPTION: Command line example showing how to run pjsua with SRTP and TLS transport enabled for secure communication.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/security/srtp.rst#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ ./pjsua --use-tls --use-srtp=1 sip:alice@example.com;transport=tls\n```\n\n----------------------------------------\n\nTITLE: Setting Destination URI for SIP Calls in Kotlin\nDESCRIPTION: This code defines the destination URI for making SIP calls. It specifies the SIP address of the peer to be called.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/get-started/android/kotlin-sip-client.rst#2025-04-23_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\n// Peer to call\nconst val CALL_DST_URI  = \"MicroSIP <sip:103@pjsip.org>\"\n```\n\n----------------------------------------\n\nTITLE: Committing Documentation Changes\nDESCRIPTION: Git commands for committing changes to the documentation before creating a new documentation version tag.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/README.md#2025-04-23_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\n$ cd pjproject_docs\n$ git add -u\n$ git commit -m 'Setting pjproject version to 2.10'\n```\n\n----------------------------------------\n\nTITLE: Displaying PJSIP Executable Size and Memory Usage\nDESCRIPTION: Shows the initial size of the PJSIP executable and its memory usage with default settings. This serves as a baseline for optimization efforts.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/perf_footprint/footprint.rst#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\npjsua_vc6.exe: file size=749,672 bytes\n\n    241664 .data\n    102400 .rdata\n     24576 .reloc\n    536576 .text\n\n(all numbers in decimal, bytes)\n\n>>> dd\n..\n  Total    908508 of   1046304 (86 %) used!\n..\n```\n\n----------------------------------------\n\nTITLE: K&R Style Brace Placement for Other Blocks\nDESCRIPTION: Shows the proper brace placement for non-definition blocks like loops in PJSIP. Opening braces are on the same line except when the preceding statement spans multiple lines.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/get-started/coding-style.rst#2025-04-23_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nfor (i=0; i<count; ++i) {\n    ...\n}\n\n/* multiline example */\nwhile (imagine_long_expression_here > 0 &&\n       another_condition_is_true)\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Installing OpenCore AMR Libraries on Debian/Ubuntu\nDESCRIPTION: Command to install OpenCore AMR development libraries using apt package manager on Debian/Ubuntu systems.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/audio/opencore-amr.rst#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ sudo apt-get install libopencore-amrnb-dev libopencore-amrwb-dev libvo-amrwbenc-dev\n```\n\n----------------------------------------\n\nTITLE: Installing OpenSSL on Debian/Ubuntu\nDESCRIPTION: Shell command to install OpenSSL development package on Debian/Ubuntu systems.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/security/ssl.rst#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ sudo apt-get install libssl-dev\n```\n\n----------------------------------------\n\nTITLE: Building Native PJSUA Application\nDESCRIPTION: Commands to build the native pjsua application to generate object files needed for libpjsua.so\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/get-started/android/cli-sip-client.rst#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ cd pjsip-apps/build\n$ make pjsua\n```\n\n----------------------------------------\n\nTITLE: Pushing Tags and Changes to Repository\nDESCRIPTION: Git commands to push the new version tag and committed changes to the repository, which triggers a build process in Read the Docs.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/README.md#2025-04-23_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\n$ cd pjproject_docs\n$ git push --tags\n$ git push\n```\n\n----------------------------------------\n\nTITLE: Demonstrating C Style Comments in PJSIP\nDESCRIPTION: Shows the proper use of C-style comments and when to use C++ style comments in PJSIP. C++ style comments are only used for disabled code that needs attention.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/get-started/coding-style.rst#2025-04-23_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n/* Everything is fine, this is just a normal comment */\ni += 1;\n\n// This code is suspicious, I'm disabling it until further investigation\n// *(int*)0 = 0;\n```\n\n----------------------------------------\n\nTITLE: Installing FFMPEG Development Packages on Debian\nDESCRIPTION: Command to install FFMPEG development packages on Debian-based distributions using apt-get.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/build_int/ffmpeg.rst#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt-get install libavutil-dev libavformat-dev libavcodec-dev libavdevice-dev libswscale-dev\n```\n\n----------------------------------------\n\nTITLE: Building libx264 on Windows\nDESCRIPTION: Shell commands to configure and build libx264 on Windows using MSYS console.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/get-started/windows/build_instructions.rst#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ ./configure --enable-static      # add options if needed, e.g: optimization, install dir, search path\n$ make && make install-lib-static  # default install dir is /usr/local\n```\n\n----------------------------------------\n\nTITLE: Setting PJPROJECT version to master in Python configuration\nDESCRIPTION: This snippet shows how to set the PJPROJECT version to 'master' in the conf.py file. This is necessary when generating documentation for the latest master branch before a new version is released.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/README.md#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\npjproject_tag = 'master'\n```\n\n----------------------------------------\n\nTITLE: Cloning PJSIP documentation repository with submodules\nDESCRIPTION: This set of shell commands clones the pjproject_docs repository and initializes its submodules, which is necessary for a complete local setup of the documentation project.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/README.md#2025-04-23_snippet_15\n\nLANGUAGE: sh\nCODE:\n```\n$ git clone https://github.com/pjsip/pjproject_docs.git\n$ cd pjproject_docs\n$ git submodule update --init --recursive\n```\n\n----------------------------------------\n\nTITLE: Successful ICE Negotiation Log Example\nDESCRIPTION: Log output showing a successful ICE negotiation process including candidate validation and completion timing\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/network_nat/troubleshooting_ice.rst#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n16:01:49.964  icstr00DCB6D8 Check 1 is successful and nominated\n16:01:49.964  icstr00DCB6D8 ICE process complete, status=Success\n16:01:49.964  icstr00DCB6D8 Valid list\n16:01:49.964  icstr00DCB6D8  0: [1] 192.168.0.1:4000-->192.168.0.2:4000 (nominated, state=Succeeded)\n16:01:49.964  icstr00DCB6D8  1: [2] 192.168.0.1:4001-->192.168.0.2:4001 (nominated, state=Succeeded)\n16:01:49.974  icstr00DCB6D8 ICE negotiation completed in 0.090s. Sending from 192.168.0.1:4000 to 192.168.0.2:4000\n```\n\n----------------------------------------\n\nTITLE: Configuring PJSIP for iOS Simulator\nDESCRIPTION: Commands to set up the build environment for iPhone simulator targeting different architectures.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/get-started/ios/build_instructions.rst#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nexport DEVPATH=/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer\n# arm64 simulator\nARCH=\"-arch arm64\" CFLAGS=\"-O2 -m64\" LDFLAGS=\"-O2 -m64\" MIN_IOS=\"-mios-simulator-version-min=13.0\" ./configure-iphone\n# x86_64 simulator\nARCH=\"-arch x86_64\" CFLAGS=\"-O2 -m64\" LDFLAGS=\"-O2 -m64\" MIN_IOS=\"-mios-simulator-version-min=13.0\" ./configure-iphone\n# or 32-bit\nARCH=\"-arch i386\" CFLAGS=\"-O2 -m32\" LDFLAGS=\"-O2 -m32\" MIN_IOS=\"-mios-simulator-version-min=13.0\" ./configure-iphone \nmake dep && make clean && make\n```\n\n----------------------------------------\n\nTITLE: Verifying OpenCore AMR Installation\nDESCRIPTION: Command to verify the presence of required OpenCore AMR header files after installation.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/audio/opencore-amr.rst#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ ls /home/foo/include\nopencore-amrnb  opencore-amrwb  vo-amrwbenc\n```\n\n----------------------------------------\n\nTITLE: Setting Build Environment Variable in Shell\nDESCRIPTION: Sets the EXCLUDE_APP environment variable to enable building of applications that are not built by default\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/get-started/android/cli-sip-client.rst#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ export EXCLUDE_APP=0\n```\n\n----------------------------------------\n\nTITLE: Committing and pushing documentation changes using Git\nDESCRIPTION: This shell script demonstrates the process of committing and pushing changes to the pjproject_docs repository after updating the documentation configuration.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/README.md#2025-04-23_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\n$ cd pjproject_docs\n$ git add -u\n$ git commit -m ..\n$ git push\n```\n\n----------------------------------------\n\nTITLE: Installing Python Dependencies\nDESCRIPTION: Command to install required Python packages for building the documentation, ensuring all necessary dependencies are available.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/README.md#2025-04-23_snippet_4\n\nLANGUAGE: cmd\nCODE:\n```\n$ pip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Desktop PC PJSIP Benchmark Results\nDESCRIPTION: Performance benchmark results for PJSIP operations on a desktop PC with an AMD Athlon 64 3200+ processor. The results show CPU usage and MIPS for various audio processing tasks, codec operations, and streaming at 8KHz and 16KHz sampling rates.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/perf_footprint/pjmedia_mips.rst#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n    8KHz WSOLA discard 10% excess                   1178    0.118    0.23\n    8KHz WSOLA discard 20% excess                   2009    0.201    0.40\n    8KHz WSOLA discard 50% excess                   6432    0.643    1.27\n    8KHz echo canceller 100ms tail len            335870   33.587   66.50\n    8KHz echo canceller 128ms tail len            336225   33.623   66.57\n    8KHz echo canceller 200ms tail len            349240   34.924   69.15\n    8KHz echo canceller 256ms tail len            363206   36.321   71.91\n    8KHz echo canceller 400ms tail len            400026   40.003   79.21\n    8KHz echo canceller 500ms tail len            426646   42.665   84.48\n    8KHz echo canceller 512ms tail len            432291   43.229   85.59\n    8KHz echo canceller 600ms tail len            454965   45.496   90.08\n    8KHz echo canceller 800ms tail len            516487   51.649  102.26\n    8KHz tone generator with single freq             920    0.092    0.18\n    8KHz tone generator with dual freq              1428    0.143    0.28\n    8KHz codec encode/decode - G.711                2701    0.270    0.53\n    8KHz codec encode/decode - GSM                 75750    7.575   15.00\n    8KHz codec encode/decode - iLBC              2856203  285.620  565.53\n    8KHz codec encode/decode - Speex 8Khz         436162   43.616   86.36\n    8KHz codec encode/decode - L16/8000/1           1704    0.170    0.34\n    8KHz stream TX/RX - G.711                       6786    0.679    1.34\n    8KHz stream TX/RX - G.711 SRTP 32bit           21688    2.169    4.29\n    8KHz stream TX/RX - G.711 SRTP 32bit +auth     33501    3.350    6.63\n    8KHz stream TX/RX - G.711 SRTP 80bit           21725    2.172    4.30\n    8KHz stream TX/RX - G.711 SRTP 80bit +auth     33551    3.355    6.64\n    8KHz stream TX/RX - GSM                        82035    8.203   16.24\n    8KHz stream TX/RX - GSM SRTP 32bit             90890    9.089   18.00\n    8KHz stream TX/RX - GSM SRTP 32bit + auth      99334    9.933   19.67\n    8KHz stream TX/RX - GSM SRTP 80bit             90893    9.089   18.00\n    8KHz stream TX/RX - GSM SRTP 80bit + auth      99356    9.936   19.67\n   16KHz get from memplayer                          239    0.024    0.05\n   16KHz conference bridge with 1 call             12780    1.278    2.53\n   16KHz conference bridge with 2 calls            23052    2.305    4.56\n   16KHz conference bridge with 4 calls            43174    4.317    8.55\n   16KHz conference bridge with 8 calls            82096    8.210   16.26\n   16KHz conference bridge with 16 calls          158565   15.856   31.40\n   16KHz upsample+downsample - linear              11469    1.147    2.27\n   16KHz upsample+downsample - small filter       133088   13.309   26.35\n   16KHz upsample+downsample - large filter      1739742  173.974  344.47\n   16KHz WSOLA PLC - 0% loss                         980    0.098    0.19\n   16KHz WSOLA PLC - 2% loss                        1910    0.191    0.38\n   16KHz WSOLA PLC - 5% loss                        3734    0.373    0.74\n   16KHz WSOLA PLC - 10% loss                       7867    0.787    1.56\n   16KHz WSOLA PLC - 20% loss                      13007    1.301    2.58\n   16KHz WSOLA PLC - 50% loss                      29022    2.902    5.75\n   16KHz WSOLA discard 2% excess                     551    0.055    0.11\n   16KHz WSOLA discard 5% excess                    1027    0.103    0.20\n   16KHz WSOLA discard 10% excess                   1973    0.197    0.39\n   16KHz WSOLA discard 20% excess                  10454    1.045    2.07\n   16KHz WSOLA discard 50% excess                  22276    2.228    4.41\n   16KHz echo canceller 100ms tail len            664649   66.465  131.60\n   16KHz echo canceller 128ms tail len            682686   68.269  135.17\n   16KHz echo canceller 200ms tail len            720924   72.092  142.74\n   16KHz echo canceller 256ms tail len            752928   75.293  149.08\n   16KHz echo canceller 400ms tail len            877528   87.753  173.75\n   16KHz echo canceller 500ms tail len            970559   97.056  192.17\n   16KHz echo canceller 512ms tail len            989839   98.984  195.99\n   16KHz echo canceller 600ms tail len           1065465  106.547  210.96\n   16KHz echo canceller 800ms tail len           1285075  128.508  254.44\n   16KHz tone generator with single freq            1617    0.162    0.32\n   16KHz tone generator with dual freq              2632    0.263    0.52\n   16KHz codec encode/decode - G.722              148080   14.808   29.32\n   16KHz codec encode/decode - Speex 16Khz        979202   97.920  193.88\n   16KHz codec encode/decode - L16/16000/1          3244    0.324    0.64\n   16KHz stream TX/RX - G.722                     155685   15.568   30.83\n```\n\n----------------------------------------\n\nTITLE: Creating Multi-Architecture Libraries with Lipo\nDESCRIPTION: Commands to combine libraries built for different architectures into a single universal binary using libtool and lipo.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/get-started/ios/build_instructions.rst#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n# For each architecture, combine the PJSIP libraries into one\nlibtool -static -o [arch]/libPJSIP.a pjsip-apps/src/pjsua/ios/*.a\n\n# For each platform, combine all the architectures\n# Combine iOS armv7 and arm64 build\nlipo -arch armv7 ios-armv7/libPJSIP.a -arch arm64 ios-arm64/libPJSIP.a -create -output ios/libPJSIP.a\n# Combine iOS Simulator x86_64 and arm64 build\nlipo -arch x86_64 sim-x86_64/libPJSIP.a -arch arm64 sim-arm64/libPJSIP.a -create -output sim/libPJSIP.a\n# Combine MacOS x86_64 and arm64 build\nlipo -arch x86_64 mac-x86_64/libPJSIP.a -arch arm64 mac-arm64/libPJSIP.a -create -output mac/libPJSIP.a\n```\n\n----------------------------------------\n\nTITLE: Installing Video4Linux Development Libraries\nDESCRIPTION: Shell command to install Video4Linux development libraries on Debian-based Linux distributions\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/api/pjmedia/pjmedia-videodev.rst#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt-get install libv4l-dev\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenCore AMR for BlackBerry 10\nDESCRIPTION: Commands to configure OpenCore AMR build specifically for BlackBerry 10 platform.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/audio/opencore-amr.rst#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ chmod +x generic-configure-bb10\n$ ./generic-configure-bb10 --prefix=/home/foo\n```\n\n----------------------------------------\n\nTITLE: Deleting a Git tag locally and remotely\nDESCRIPTION: This shell command shows how to delete a Git tag both locally and from the remote repository. This is useful when fixing errors in tagged versions of the documentation.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/README.md#2025-04-23_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\n$ git tag -d <the tag>\n$ git push --delete origin <the tag>\n```\n\n----------------------------------------\n\nTITLE: Tagging Documentation Version\nDESCRIPTION: Git command for creating a version tag for the documentation, which will be recognized by Read the Docs as a new version to build.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/README.md#2025-04-23_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\n$ git tag 2.10\n```\n\n----------------------------------------\n\nTITLE: PocketPC PJSIP Benchmark Results\nDESCRIPTION: Performance benchmark results for PJSIP operations on a PocketPC 2003 device with an Intel XScale PXA270 processor. The results show CPU usage and MIPS for various audio processing tasks, codec operations, and streaming at 8KHz and 16KHz sampling rates.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/perf_footprint/pjmedia_mips.rst#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n   06:19:52.000 os_core_win32. pjlib 0.9.0-trunk for win32 initialized\n   MIPS test, with CPU=312Mhz,  400.0 MIPS\n   Clock  Item                                      Time     CPU    MIPS\n    Rate                                           (usec)    (%)\n   ----------------------------------------------------------------------\n    8KHz get from memplayer                          154    0.015    0.06\n    8KHz conference bridge with 1 call              7499    0.750    3.00\n    8KHz conference bridge with 2 calls            13244    1.324    5.30\n    8KHz conference bridge with 4 calls            23570    2.357    9.43\n    8KHz conference bridge with 8 calls            37377    3.738   14.95\n    8KHz conference bridge with 16 calls           60895    6.089   24.36\n    8KHz upsample+downsample - linear               3695    0.370    1.48\n    8KHz upsample+downsample - small filter        43537    4.354   17.41\n    8KHz upsample+downsample - large filter       393547   39.355  157.41\n    8KHz WSOLA PLC - 0% loss                         501    0.050    0.20\n    8KHz WSOLA PLC - 2% loss                         542    0.054    0.22\n    8KHz WSOLA PLC - 5% loss                         568    0.057    0.23\n    8KHz WSOLA PLC - 10% loss                        960    0.096    0.38\n    8KHz WSOLA PLC - 20% loss                       1656    0.166    0.66\n    8KHz WSOLA PLC - 50% loss                       4464    0.446    1.79\n    8KHz WSOLA discard 2% excess                     157    0.016    0.06\n    8KHz WSOLA discard 5% excess                     296    0.030    0.12\n    8KHz WSOLA discard 10% excess                    621    0.062    0.25\n    8KHz WSOLA discard 20% excess                    931    0.093    0.37\n    8KHz WSOLA discard 50% excess                   3237    0.324    1.29\n    8KHz echo canceller 100ms tail len            298351   29.835  119.34\n    8KHz echo canceller 128ms tail len            296880   29.688  118.75\n    8KHz echo canceller 200ms tail len            324207   32.421  129.68\n    8KHz echo canceller 256ms tail len            316040   31.604  126.41\n    8KHz echo canceller 400ms tail len            346520   34.652  138.60\n    8KHz echo canceller 500ms tail len            363378   36.338  145.35\n    8KHz echo canceller 512ms tail len            363101   36.310  145.23\n    8KHz echo canceller 600ms tail len            382216   38.222  152.88\n    8KHz echo canceller 800ms tail len            410368   41.037  164.14\n    8KHz tone generator with single freq            1400    0.140    0.56\n    8KHz tone generator with dual freq              2554    0.255    1.02\n    8KHz codec encode/decode - G.711                1536    0.154    0.61\n    8KHz codec encode/decode - GSM                 68559    6.856   27.42\n    8KHz codec encode/decode - iLBC              6337042  633.704 2534.72\n    8KHz codec encode/decode - Speex 8Khz         318969   31.897  127.58\n    8KHz codec encode/decode - L16/8000/1           2607    0.261    1.04\n    8KHz stream TX/RX - G.711                       5022    0.502    2.01\n    8KHz stream TX/RX - G.711 SRTP 32bit           12869    1.287    5.15\n    8KHz stream TX/RX - G.711 SRTP 32bit +auth     21636    2.164    8.65\n    8KHz stream TX/RX - G.711 SRTP 80bit           12905    1.291    5.16\n    8KHz stream TX/RX - G.711 SRTP 80bit +auth     21558    2.156    8.62\n    8KHz stream TX/RX - GSM                        86629    8.663   34.65\n    8KHz stream TX/RX - GSM SRTP 32bit             95385    9.538   38.15\n    8KHz stream TX/RX - GSM SRTP 32bit + auth     104510   10.451   41.80\n    8KHz stream TX/RX - GSM SRTP 80bit             96748    9.675   38.70\n    8KHz stream TX/RX - GSM SRTP 80bit + auth     109251   10.925   43.70\n   16KHz get from memplayer                          134    0.013    0.05\n   16KHz conference bridge with 1 call              9107    0.911    3.64\n   16KHz conference bridge with 2 calls            16020    1.602    6.41\n   16KHz conference bridge with 4 calls            30208    3.021   12.08\n   16KHz conference bridge with 8 calls            56875    5.688   22.75\n   16KHz conference bridge with 16 calls          124328   12.433   49.73\n   16KHz upsample+downsample - linear               6994    0.699    2.80\n```\n\n----------------------------------------\n\nTITLE: Extracting OpenCore AMR Source\nDESCRIPTION: Commands to extract the OpenCore AMR source tarball in preparation for building.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/audio/opencore-amr.rst#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ cd my_build_directory\n$ tar xzf opencore-amr-0.1.3.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Initializing Git Submodules\nDESCRIPTION: Command to initialize and update Git submodules if the pjproject directory is empty, which is necessary for building complete documentation.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/README.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n$ git submodule update --init --recursive\n```\n\n----------------------------------------\n\nTITLE: Simulating a Crash in C for Windows Application Testing\nDESCRIPTION: This code snippet demonstrates how to simulate a crash in a C program. It's used to test if error reporting works correctly in a Windows application. The code attempts to dereference a null pointer, which will cause a segmentation fault.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/get-started/windows/issues.rst#2025-04-23_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nint *p = (int *)0;\n*p = 0;\n```\n\n----------------------------------------\n\nTITLE: Cleaning up generated documentation files\nDESCRIPTION: This shell command cleans up the 'build' directory after generating documentation. It's useful for removing old files before regenerating the documentation.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/README.md#2025-04-23_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\n$ cd docs\n$ make clean\n```\n\n----------------------------------------\n\nTITLE: Displaying Hello World in C\nDESCRIPTION: A simple C code snippet that prints 'Hello world' to the console using the puts function.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/other/writing-guide.rst#2025-04-23_snippet_2\n\nLANGUAGE: c\nCODE:\n```\n/* Sample C code */\nputs(\"Hello world\");\n```\n\n----------------------------------------\n\nTITLE: Demonstrating CLI Command Completion in PJSUA\nDESCRIPTION: This snippet shows how the CLI command completion works for selecting the next account. Users can press tab to see available options and then select an account number.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/other/cli_cmd.rst#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n[0]   <sip:192.168.1.6:5060>\n[1]   *<sip:192.168.1.6:5060;transport=TCP>\n[2]   <sip:192.168.1.6:5061;transport=TLS>\n```\n\n----------------------------------------\n\nTITLE: Running PJSUA on Desktop\nDESCRIPTION: Command to launch PJSUA application from desktop console.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/audio-troubleshooting/checks/loopback.rst#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ ./pjsua\n```\n\n----------------------------------------\n\nTITLE: Updating Git Repository and Submodules\nDESCRIPTION: Commands to update the documentation repository and its submodules to ensure all content is current for building the documentation.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/README.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ cd pjproject_docs\n$ git pull --recurse-submodules\n$ git submodule update --remote\n```\n\n----------------------------------------\n\nTITLE: Telnet CLI Session Example\nDESCRIPTION: Example of telnet session showing command-line interface usage and available commands\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/get-started/android/cli-sip-client.rst#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ telnet 192.168.0.98 2323\nTrying 192.168.0.98...\nConnected to 192.168.0.98.\nEscape character is '^]'.\nlocalhost> ?\n                ^\nlog                   Change log level\nexit                  Exit session\ncall                  Call related commands\nim                    IM and Presence Commands\nacc                   Account commands\naudio                 Conference and Media commands\nstat                  Status and config commands\nvideo                 Video commands\nsleep                 Suspend keyboard input\nnetwork               Detect network type\nshutdown              Shutdown application\nrestart               Restart application\nip_change             Handle IP change\ntoggle_sdp_offer | o  Toggle SDP offer use on subsequent calls and UPDATEs\n\nlocalhost> acc ?\n                    ^\nadd | +a    Add new account\ndel | -a    Delete account\nmod | !a    Modify account\nreg | rr    Send (Refresh) Register request to register\nunreg | ru  Send Register request to unregister\nnext | <    Select the next account for sending outgoing requests\nprev | >    Select the previous account for sending outgoing requests\nshow | l    Show account list\nlocalhost>  acc\n```\n\n----------------------------------------\n\nTITLE: Serving generated documentation using Python's HTTP server\nDESCRIPTION: This shell script demonstrates how to serve the locally generated documentation using Python's built-in HTTP server, making it accessible through a web browser.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/README.md#2025-04-23_snippet_17\n\nLANGUAGE: sh\nCODE:\n```\n$ cd docs/build/html\n$ python -m http.server\n```\n\n----------------------------------------\n\nTITLE: Converting Trac Wiki to reStructuredText\nDESCRIPTION: A shell command that converts a Trac wiki file to reStructuredText format using trac2down and pandoc. This process requires manual editing afterwards for best results.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/other/writing-guide.rst#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ trac2down tracwikifile.trac | pandoc -f markdown -t rst > output.rst\n```\n\n----------------------------------------\n\nTITLE: Displaying PJSIP Benchmark Results for Windows 2000\nDESCRIPTION: This snippet shows the output of PJSIP performance tests on a Windows 2000 system. It includes various audio processing operations and codec performance benchmarks at 8KHz sample rate.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/perf_footprint/pjmedia_mips.rst#2025-04-23_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n   15:18:06.721 os_core_win32. pjlib 0.9.0-trunk for win32 initialized\n   MIPS test, with CPU=700Mhz, 1895.6 MIPS\n   Clock  Item                                      Time     CPU    MIPS\n    Rate                                           (usec)    (%)\n   ----------------------------------------------------------------------\n    8KHz get from memplayer                           32    0.003    0.06\n    8KHz conference bridge with 1 call              1358    0.136    2.57\n    8KHz conference bridge with 2 calls             2164    0.216    4.10\n    8KHz conference bridge with 4 calls             3887    0.389    7.37\n    8KHz conference bridge with 8 calls             7291    0.729   13.82\n    8KHz conference bridge with 16 calls           14098    1.410   26.72\n    8KHz upsample+downsample - linear               1194    0.119    2.26\n    8KHz upsample+downsample - small filter        22243    2.224   42.16\n    8KHz upsample+downsample - large filter       101072   10.107  191.59\n    8KHz WSOLA PLC - 0% loss                         187    0.019    0.35\n    8KHz WSOLA PLC - 2% loss                         304    0.030    0.58\n    8KHz WSOLA PLC - 5% loss                         647    0.065    1.23\n    8KHz WSOLA PLC - 10% loss                       1125    0.112    2.13\n    8KHz WSOLA PLC - 20% loss                       1452    0.145    2.75\n    8KHz WSOLA PLC - 50% loss                       4230    0.423    8.02\n    8KHz WSOLA discard 2% excess                      27    0.003    0.05\n    8KHz WSOLA discard 5% excess                     161    0.016    0.31\n    8KHz WSOLA discard 10% excess                    567    0.057    1.07\n    8KHz WSOLA discard 20% excess                    903    0.090    1.71\n    8KHz WSOLA discard 50% excess                   2931    0.293    5.56\n    8KHz echo canceller 100ms tail len             56454    5.645  107.01\n    8KHz echo canceller 128ms tail len             57805    5.780  109.58\n    8KHz echo canceller 200ms tail len             60698    6.070  115.06\n    8KHz echo canceller 256ms tail len             63832    6.383  121.00\n    8KHz echo canceller 400ms tail len             71578    7.158  135.68\n    8KHz echo canceller 500ms tail len             76887    7.689  145.75\n    8KHz echo canceller 512ms tail len             78265    7.826  148.36\n    8KHz echo canceller 600ms tail len             82767    8.277  156.89\n    8KHz echo canceller 800ms tail len             96976    9.698  183.83\n    8KHz tone generator with single freq            3151    0.315    5.97\n    8KHz tone generator with dual freq              5812    0.581   11.02\n    8KHz codec encode/decode - G.711                 497    0.050    0.94\n    8KHz codec encode/decode - GSM                 20364    2.036   38.60\n    8KHz codec encode/decode - iLBC                94382    9.438  178.91\n    8KHz codec encode/decode - Speex 8Khz         119001   11.900  225.58\n    8KHz codec encode/decode - L16/8000/1            944    0.094    1.79\n```\n\n----------------------------------------\n\nTITLE: Setting Oboe Directory Environment Variable\nDESCRIPTION: Command to set the OBOE_DIR environment variable to the location where the Oboe package has been extracted, making it available for later use in the build process.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/get-started/android/requirements.rst#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ export OBOE_DIR=/home/whoever/Android/oboe-1.9.3\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variable for Documentation Generation\nDESCRIPTION: Command to set the READTHEDOCS environment variable which controls whether Doxygen XML and breathe API docs need to be regenerated.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/README.md#2025-04-23_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n$ export READTHEDOCS=True\n```\n\n----------------------------------------\n\nTITLE: Displaying PJSIP Benchmark Results for POSIX System\nDESCRIPTION: This snippet shows the output of PJSIP performance tests on a POSIX system. It includes various audio processing operations, codec performance, and network streaming benchmarks at 8KHz and 16KHz sample rates.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/perf_footprint/pjmedia_mips.rst#2025-04-23_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n   02:01:45.561 os_core_unix.c pjlib 0.9.0-trunk for POSIX initialized\n   MIPS test, with CPU=700Mhz, 1895.6 MIPS\n   Clock  Item                                      Time     CPU    MIPS\n    Rate                                           (usec)    (%)       \n   ----------------------------------------------------------------------\n    8KHz get from memplayer                           23    0.002    0.04\n    8KHz conference bridge with 1 call               800    0.080    1.52\n    8KHz conference bridge with 2 calls             1395    0.140    2.64\n    8KHz conference bridge with 4 calls             2522    0.252    4.78\n    8KHz conference bridge with 8 calls             4704    0.470    8.92\n    8KHz conference bridge with 16 calls            9146    0.915   17.34\n    8KHz upsample+downsample - linear                589    0.059    1.12\n    8KHz upsample+downsample - small filter         9563    0.956   18.13\n    8KHz upsample+downsample - large filter        46644    4.664   88.42\n    8KHz WSOLA PLC - 0% loss                         107    0.011    0.20\n    8KHz WSOLA PLC - 2% loss                         240    0.024    0.45\n    8KHz WSOLA PLC - 5% loss                         466    0.047    0.88\n    8KHz WSOLA PLC - 10% loss                        524    0.052    0.99\n    8KHz WSOLA PLC - 20% loss                        958    0.096    1.82\n    8KHz WSOLA PLC - 50% loss                       2667    0.267    5.06\n    8KHz WSOLA discard 2% excess                      57    0.006    0.11\n    8KHz WSOLA discard 5% excess                     142    0.014    0.27\n    8KHz WSOLA discard 10% excess                    364    0.036    0.69\n    8KHz WSOLA discard 20% excess                    631    0.063    1.20\n    8KHz WSOLA discard 50% excess                   2081    0.208    3.94\n    8KHz echo canceller 100ms tail len             40050    4.005   75.92\n    8KHz echo canceller 128ms tail len             33179    3.318   62.89\n    8KHz echo canceller 200ms tail len             35161    3.516   66.65\n    8KHz echo canceller 256ms tail len             37470    3.747   71.03\n    8KHz echo canceller 400ms tail len             45104    4.510   85.50\n    8KHz echo canceller 500ms tail len             50504    5.050   95.74\n    8KHz echo canceller 512ms tail len             50940    5.094   96.56\n    8KHz echo canceller 600ms tail len             56113    5.611  106.37\n    8KHz echo canceller 800ms tail len             71677    7.168  135.87\n    8KHz tone generator with single freq            1758    0.176    3.33\n    8KHz tone generator with dual freq              3506    0.351    6.65\n    8KHz codec encode/decode - G.711                 357    0.036    0.68\n    8KHz codec encode/decode - GSM                 11382    1.138   21.58\n    8KHz codec encode/decode - iLBC                46894    4.689   88.89\n    8KHz codec encode/decode - Speex 8Khz          64428    6.443  122.13\n    8KHz codec encode/decode - L16/8000/1            248    0.025    0.47\n    8KHz stream TX/RX - G.711                        617    0.062    1.17\n    8KHz stream TX/RX - G.711 SRTP 32bit            1751    0.175    3.32\n    8KHz stream TX/RX - G.711 SRTP 32bit +auth      3161    0.316    5.99\n    8KHz stream TX/RX - G.711 SRTP 80bit            1773    0.177    3.36\n    8KHz stream TX/RX - G.711 SRTP 80bit +auth      3108    0.311    5.89\n    8KHz stream TX/RX - GSM                        11755    1.176   22.28\n    8KHz stream TX/RX - GSM SRTP 32bit             12439    1.244   23.58\n    8KHz stream TX/RX - GSM SRTP 32bit + auth      13285    1.329   25.18\n    8KHz stream TX/RX - GSM SRTP 80bit             12270    1.227   23.26\n    8KHz stream TX/RX - GSM SRTP 80bit + auth      13358    1.336   25.32\n   16KHz get from memplayer                           27    0.003    0.05\n   16KHz conference bridge with 1 call              1522    0.152    2.89\n   16KHz conference bridge with 2 calls             2711    0.271    5.14\n   16KHz conference bridge with 4 calls             4772    0.477    9.05\n   16KHz conference bridge with 8 calls             8913    0.891   16.90\n   16KHz conference bridge with 16 calls           18759    1.876   35.56\n   16KHz upsample+downsample - linear               1136    0.114    2.15\n   16KHz upsample+downsample - small filter        19231    1.923   36.45\n   16KHz upsample+downsample - large filter        93066    9.307  176.42\n   16KHz WSOLA PLC - 0% loss                         177    0.018    0.34\n   16KHz WSOLA PLC - 2% loss                         534    0.053    1.01\n   16KHz WSOLA PLC - 5% loss                        1165    0.116    2.21\n   16KHz WSOLA PLC - 10% loss                       2796    0.280    5.30\n   16KHz WSOLA PLC - 20% loss                       4515    0.451    8.56\n   16KHz WSOLA PLC - 50% loss                      10482    1.048   19.87\n   16KHz WSOLA discard 2% excess                     168    0.017    0.32\n   16KHz WSOLA discard 5% excess                     326    0.033    0.62\n   16KHz WSOLA discard 10% excess                    654    0.065    1.24\n   16KHz WSOLA discard 20% excess                   3526    0.353    6.68\n   16KHz WSOLA discard 50% excess                   7507    0.751   14.23\n   16KHz echo canceller 100ms tail len             68547    6.855  129.94\n   16KHz echo canceller 128ms tail len             72619    7.262  137.66\n   16KHz echo canceller 200ms tail len             78054    7.805  147.96\n   16KHz echo canceller 256ms tail len             84739    8.474  160.63\n   16KHz echo canceller 400ms tail len            107738   10.774  204.23\n   16KHz echo canceller 500ms tail len            129879   12.988  246.20\n   16KHz echo canceller 512ms tail len            133796   13.380  253.62\n   16KHz echo canceller 600ms tail len            152166   15.217  288.45\n   16KHz echo canceller 800ms tail len            205415   20.542  389.38\n   16KHz tone generator with single freq            3489    0.349    6.61\n   16KHz tone generator with dual freq              6996    0.700   13.26\n   16KHz codec encode/decode - G.722               32803    3.280   62.18\n   16KHz codec encode/decode - Speex 16Khz        156629   15.663  296.91\n   16KHz codec encode/decode - L16/16000/1           434    0.043    0.82\n   16KHz stream TX/RX - G.722                      20959    2.096   39.73\n```\n\n----------------------------------------\n\nTITLE: RST Reference List for PJSIP Video Codecs\nDESCRIPTION: Restructured Text (RST) formatted reference list that creates a navigation index for different video codec implementations in PJSIP. Uses the :ref: directive to link to detailed documentation pages for each codec.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/common/common_video_codec_list.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n- :ref:`amediacodec`\n- :ref:`ffmpeg`\n- :ref:`openh264`\n- :ref:`native H.264 for Mac and iOS <videotoolbox>`\n- :ref:`libvpx`\n```\n\n----------------------------------------\n\nTITLE: Defining Documentation Structure with Sphinx toctree in reStructuredText\nDESCRIPTION: This code defines the structure of the PJSIP Project documentation using Sphinx's toctree directive. It organizes documentation into logical sections including overview, getting started guides for different platforms, PJSUA2 documentation, specific guides, and API references.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/index.rst#2025-04-23_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n   :maxdepth: 1\n   :name: overview_toc\n   :caption: PJSIP Overview\n   \n   overview/intro\n   overview/features\n   overview/license\n   \n.. toctree::\n   :maxdepth: 1\n   :name: get_started_toc\n   :caption: Get Started\n\n   get-started/getting\n   get-started/general_guidelines\n   get-started/android/index\n   get-started/ios/index\n   get-started/posix/index\n   get-started/windows/index\n   get-started/windows-phone/index\n\n.. toctree::\n   :maxdepth: 1\n   :name: pjsua2_toc\n   :caption: PJSUA2 Guide\n\n   pjsua2/intro\n   pjsua2/building\n   pjsua2/general_concept\n   pjsua2/hello_world\n   pjsua2/using/index\n   pjsua2/samples\n   \n.. toctree::\n   :maxdepth: 1\n   :name: specific_guides_toc\n   :caption: Specific Guides\n\n   specific-guides/index\n\n.. toctree::\n   :maxdepth: 1\n   :name: api_ref_samples_toc\n   :caption: API Reference & Samples\n   \n   api/pjsua2/index\n   api/pjsua-lib/index\n   api/pjsip/index\n   api/pjmedia/index\n   api/pjnath/index\n   api/pjlib-util/index\n   api/pjlib/index\n   samples/index\n```\n\n----------------------------------------\n\nTITLE: Defining Video Toolbox Codec for Mac/iOS in C\nDESCRIPTION: This code snippet shows how to enable the VideoToolbox codec for H264 on Mac and iOS platforms by defining a macro in the config_site.h file.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/get-started/posix/build_instructions.rst#2025-04-23_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#define PJMEDIA_HAS_VID_TOOLBOX_CODEC 1\n```\n\n----------------------------------------\n\nTITLE: Installing SWIG and Python development package on Debian-based systems\nDESCRIPTION: Installs SWIG and Python development package using apt-get on Debian-based distributions like Ubuntu.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/pjsua2/building.rst#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt-get install swig python3-dev\n```\n\n----------------------------------------\n\nTITLE: Building Documentation\nDESCRIPTION: Commands to clean and build the HTML documentation using Sphinx. This generates the complete documentation set in the build/html directory.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/README.md#2025-04-23_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\n$ cd docs\n$ make clean html\n```\n\n----------------------------------------\n\nTITLE: Viewing PJSIP Configure Options in Shell\nDESCRIPTION: This shell command demonstrates how to view the list of customizable features and configuration options for PJSIP by running ./configure with the --help flag.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/get-started/posix/build_instructions.rst#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ cd pjproject\n$ ./configure --help\n```\n\n----------------------------------------\n\nTITLE: Including PJSIP Samples Index in RST\nDESCRIPTION: RST directive to include the samples index file from the root documentation directory\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/api/samples.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. include:: /samples/index.rst\n```\n\n----------------------------------------\n\nTITLE: Defining RST Table of Contents Structure for PJSUA2 Docs\nDESCRIPTION: reStructuredText directive defining the documentation structure with table of contents. Sets maximum depth to 1 level and includes links to core PJSUA2 component documentation.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/pjsua2/using/index.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 1\n   :caption: Table of Contents\n\n   endpoint\n   account\n   media_audio\n   media_video\n   call\n   presence\n```\n\n----------------------------------------\n\nTITLE: Configuring PJPROJECT build with -fPIC flag\nDESCRIPTION: Runs the configure script for PJPROJECT with the -fPIC flag added to CFLAGS.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/pjsua2/building.rst#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n./configure CFLAGS=\"-fPIC\"\n```\n\n----------------------------------------\n\nTITLE: Displaying PJSIP Benchmark Results for PocketPC 2003\nDESCRIPTION: Shows performance metrics for various PJSIP audio operations on a PocketPC 2003 device with Intel XScale PXA270 processor. Includes timing and CPU usage for operations like conference bridging, resampling, and codec processing.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/perf_footprint/pjmedia_mips.rst#2025-04-23_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n05:54:44.000 os_core_win32. pjlib 0.9.0-trunk for win32 initialized\nMIPS test, with CPU=312Mhz,  400.0 MIPS\nClock  Item                                      Time     CPU    MIPS\n Rate                                           (usec)    (%)\n----------------------------------------------------------------------\n 8KHz get from memplayer                          223    0.022    0.09\n 8KHz conference bridge with 1 call              7645    0.765    3.06\n 8KHz conference bridge with 2 calls            13513    1.351    5.40\n 8KHz conference bridge with 4 calls            23714    2.371    9.49\n 8KHz conference bridge with 8 calls            43852    4.385   17.54\n 8KHz conference bridge with 16 calls           62205    6.220   24.88\n 8KHz upsample+downsample - linear               3706    0.371    1.48\n 8KHz upsample+downsample - small filter        45347    4.535   18.14\n 8KHz upsample+downsample - large filter       295105   29.510  118.04\n 8KHz WSOLA PLC - 0% loss                         477    0.048    0.19\n 8KHz WSOLA PLC - 2% loss                         557    0.056    0.22\n 8KHz WSOLA PLC - 5% loss                         563    0.056    0.23\n 8KHz WSOLA PLC - 10% loss                        894    0.089    0.36\n 8KHz WSOLA PLC - 20% loss                       1653    0.165    0.66\n 8KHz WSOLA PLC - 50% loss                       4591    0.459    1.84\n 8KHz WSOLA discard 2% excess                     157    0.016    0.06\n 8KHz WSOLA discard 5% excess                     410    0.041    0.16\n 8KHz WSOLA discard 10% excess                    587    0.059    0.23\n 8KHz WSOLA discard 20% excess                    953    0.095    0.38\n 8KHz WSOLA discard 50% excess                   3309    0.331    1.32\n 8KHz echo canceller 100ms tail len            304226   30.423  121.69\n 8KHz echo canceller 128ms tail len            303622   30.362  121.44\n 8KHz echo canceller 200ms tail len            311213   31.121  124.48\n 8KHz echo canceller 256ms tail len            328946   32.895  131.57\n 8KHz echo canceller 400ms tail len            349967   34.997  139.98\n 8KHz echo canceller 500ms tail len            380970   38.097  152.38\n 8KHz echo canceller 512ms tail len            391733   39.173  156.69\n 8KHz echo canceller 600ms tail len            409381   40.938  163.75\n 8KHz echo canceller 800ms tail len            440756   44.076  176.30\n 8KHz tone generator with single freq            1420    0.142    0.57\n 8KHz tone generator with dual freq              2576    0.258    1.03\n 8KHz codec encode/decode - G.711                1549    0.155    0.62\n 8KHz codec encode/decode - GSM                 64635    6.464   25.85\n 8KHz codec encode/decode - iLBC              6389367  638.937 2555.64\n 8KHz codec encode/decode - Speex 8Khz         349407   34.941  139.76\n 8KHz codec encode/decode - L16/8000/1           2610    0.261    1.04\n 8KHz stream TX/RX - G.711                       5131    0.513    2.05\n 8KHz stream TX/RX - G.711 SRTP 32bit           12962    1.296    5.18\n 8KHz stream TX/RX - G.711 SRTP 32bit +auth     21958    2.196    8.78\n 8KHz stream TX/RX - G.711 SRTP 80bit           13017    1.302    5.21\n 8KHz stream TX/RX - G.711 SRTP 80bit +auth     22050    2.205    8.82\n 8KHz stream TX/RX - GSM                        91707    9.171   36.68\n 8KHz stream TX/RX - GSM SRTP 32bit             98428    9.843   39.37\n 8KHz stream TX/RX - GSM SRTP 32bit + auth     105968   10.597   42.39\n 8KHz stream TX/RX - GSM SRTP 80bit             98289    9.829   39.31\n 8KHz stream TX/RX - GSM SRTP 80bit + auth     106072   10.607   42.43\n16KHz get from memplayer                          128    0.013    0.05\n16KHz conference bridge with 1 call              8802    0.880    3.52\n16KHz conference bridge with 2 calls            15742    1.574    6.30\n16KHz conference bridge with 4 calls            29302    2.930   11.72\n16KHz conference bridge with 8 calls            59364    5.936   23.74\n16KHz conference bridge with 16 calls          127470   12.747   50.99\n16KHz upsample+downsample - linear               7160    0.716    2.86\n16KHz upsample+downsample - small filter        94963    9.496   37.98\n16KHz upsample+downsample - large filter       587947   58.795  235.17\n16KHz WSOLA PLC - 0% loss                         630    0.063    0.25\n16KHz WSOLA PLC - 2% loss                        1115    0.112    0.45\n16KHz WSOLA PLC - 5% loss                        1367    0.137    0.55\n16KHz WSOLA PLC - 10% loss                       5167    0.517    2.07\n16KHz WSOLA PLC - 20% loss                       7275    0.728    2.91\n16KHz WSOLA PLC - 50% loss                      12988    1.299    5.19\n16KHz WSOLA discard 2% excess                      71    0.007    0.03\n16KHz WSOLA discard 5% excess                     333    0.033    0.13\n16KHz WSOLA discard 10% excess                   2094    0.209    0.84\n16KHz WSOLA discard 20% excess                   4164    0.416    1.67\n16KHz WSOLA discard 50% excess                  11057    1.106    4.42\n16KHz echo canceller 100ms tail len            584349   58.435  233.73\n16KHz echo canceller 128ms tail len            613118   61.312  245.24\n16KHz echo canceller 200ms tail len            622998   62.300  249.19\n16KHz echo canceller 256ms tail len            677070   67.707  270.82\n16KHz echo canceller 400ms tail len            726984   72.698  290.78\n16KHz echo canceller 500ms tail len            743772   74.377  297.50\n16KHz echo canceller 512ms tail len            762680   76.268  305.06\n16KHz echo canceller 600ms tail len            767136   76.714  306.84\n16KHz echo canceller 800ms tail len           1244816  124.482  497.91\n16KHz tone generator with single freq            2416    0.242    0.97\n16KHz tone generator with dual freq              4819    0.482    1.93\n16KHz codec encode/decode - G.722               98258    9.826   39.30\n16KHz codec encode/decode - Speex 16Khz        680165   68.017  272.06\n16KHz codec encode/decode - L16/16000/1          4994    0.499    2.00\n16KHz stream TX/RX - G.722                     102490   10.249   40.99\n```\n\n----------------------------------------\n\nTITLE: Listing Available Cross-References using Shell Command\nDESCRIPTION: A shell command to find all available cross-references in the documentation by searching for reStructuredText link targets.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/other/writing-guide.rst#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ egrep -r '^.. _' * | grep rst\n```\n\n----------------------------------------\n\nTITLE: Installing PJSIP\nDESCRIPTION: Command for installing PJSIP header and library files to the target directory.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/get-started/posix/build_instructions.rst#2025-04-23_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n$ make install\n```\n\n----------------------------------------\n\nTITLE: Accessing Docker Container Terminal\nDESCRIPTION: Command to open an interactive terminal to the running PJSIP documentation Docker container for editing and building documentation.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/README.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ docker exec -it pjproject-docs bash\n```\n\n----------------------------------------\n\nTITLE: RST Table of Contents Structure\nDESCRIPTION: ReStructuredText markup defining the table of contents structure for Windows documentation section, including build instructions, usage guide, and issues pages.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/get-started/windows/index.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 1\n   :caption: Table of Contents\n\n   build_instructions\n   using\n   issues\n```\n\n----------------------------------------\n\nTITLE: Checking Library Dependencies for libpjsua.so on Linux\nDESCRIPTION: This command shows how to use the readelf utility to view the shared library dependencies of libpjsua.so on a Linux system. It's useful for troubleshooting library loading issues in Android applications.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/get-started/android/issues.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ readelf --dynamic libpjsua.so | grep NEEDED\n```\n\n----------------------------------------\n\nTITLE: PocketPC PJSIP Benchmark Configuration\nDESCRIPTION: Configuration details for PJSIP performance benchmarks on a PocketPC 2003 device with an Intel XScale PXA270 processor. Includes hardware specifications, compilation settings, and compiler information.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/perf_footprint/pjmedia_mips.rst#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n   ===================== ====================================\n   Hardware:             Dell Axim X30 PDA\n   ===================== ====================================\n   Platform:             PocketPC 2003\n   Processor:            Intel XScale PXA270\n   Speed:                312 MHz\n   Assumed MIPS:         400 MIPS\n   BogoMIPS:             -\n   Compilation switches: /Oxt /QRarch5T /QRdsp /QRxscale\n   Compiler:             Embedded Visual C++ 4 (v4.00.1610.0)\n   Settings:             PJ_HAS_FLOATING_POINT=0\n   ===================== ====================================\n```\n\n----------------------------------------\n\nTITLE: Including Common PJMEDIA Documentation in reStructuredText\nDESCRIPTION: This snippet uses a reStructuredText directive to include common PJMEDIA documentation from a separate file. This allows for centralized management of shared documentation content across multiple files.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/api/pjmedia/pjmedia.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. include:: ../../common/common_pjmedia.rst\n```\n\n----------------------------------------\n\nTITLE: Echoing Hello World in Shell\nDESCRIPTION: A shell command that prints 'Hello world' to the console using the echo command.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/other/writing-guide.rst#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ echo Hello world\n```\n\n----------------------------------------\n\nTITLE: Setting up Sphinx Documentation Structure for PJSIP Samples\nDESCRIPTION: This RST code creates a documentation structure that includes samples from all PJSIP components. It uses toctree directive for navigation and include directives to pull in sample documentation from different components of the project.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/samples/index.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\nAll Samples\n===================\n.. toctree::\n   :maxdepth: 1\n\n.. include:: /api/pjsua2/samples.rst\n   \n.. include:: /api/pjsua-lib/samples.rst\n\n.. include:: /api/pjsip/samples.rst\n\n.. include:: /api/pjmedia/samples.rst\n\n.. include:: /api/pjnath/samples.rst\n```\n\n----------------------------------------\n\nTITLE: Gradle Build Error Message Example\nDESCRIPTION: Example error message shown when there's an incompatibility between Java and Gradle versions in the build configuration.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/get-started/android/java-sip-client.rst#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nandroid: failed, Your build is currently configured to use incompatible \\nJava 21.0.4 and Gradle 7.5. Cannot sync the project..\\nWe recommend upgrading to Gradle version 8.9.\\nThe minimum compatible Gradle version is 8.5.\\n\\nPossible solutions:\\n* Upgrade to Gradle 8.9 and re-sync.\\n* Upgrade to Gradle 8.5 and re-sync.\n```\n\n----------------------------------------\n\nTITLE: Using C++ Functions for DNS SRV Failover\nDESCRIPTION: Outlines the key C++ functions used in DNS SRV failover implementation including connect(), gethostbyname(), and pjsua_acc_modify(). These functions are used for server connection, hostname resolution, and account proxy modification respectively.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/sip/dns_failover.rst#2025-04-23_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nconnect()\n```\n\nLANGUAGE: cpp\nCODE:\n```\ngethostbyname()\n```\n\nLANGUAGE: cpp\nCODE:\n```\npjsua_acc_modify()\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents in reStructuredText for PJNATH Documentation\nDESCRIPTION: This snippet defines the table of contents for the PJNATH documentation using reStructuredText directives. It includes sections for introduction, reference, and samples.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/api/pjnath/index.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n  :maxdepth: 1\n  :caption: Table of Contents\n\n  intro\n  ref\n  samples\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Heading Conventions in reStructuredText\nDESCRIPTION: Shows the recommended hierarchy and syntax for headings in PJSIP documentation, from document title (H1) to H4.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/other/writing-guide.rst#2025-04-23_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n====================\nH0 (for site title)\n====================\n\nH1 (prefer this for document title)\n===================================\n\n\nWe also use this for document title:\n\nAlso H1 and document title\n*********************************\n\n(Historically, *** is higher level than === in this site, but then the layer\nwith *** was deleted, so === becomes H1)\n\n\nH2\n------------------------\n\nH3\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\nAlso H3\n^^^^^^^^^^^^^^^^^^^^^^^^^\n\n(I prefer ~~~ for H3 since it's less conspicuous)\n\nH4\n``````````````\n```\n\n----------------------------------------\n\nTITLE: Defining License Documentation Structure in reStructuredText\nDESCRIPTION: Sets up the documentation structure using reStructuredText toctree directive to organize license-related documentation files into a hierarchical structure with a table of contents.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/overview/license.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 2\n   :caption: Table of Contents\n   \n   license_pjsip\n   license_3rd_party\n   license_faq\n```\n\n----------------------------------------\n\nTITLE: Benchmark Results Output\nDESCRIPTION: Raw benchmark results showing initialization and performance metrics for various audio processing operations\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/perf_footprint/pjmedia_mips.rst#2025-04-23_snippet_8\n\nLANGUAGE: text\nCODE:\n```\n09:46:14.571 os_core_win32. pjlib 0.9.0-trunk for win32 initialized\nMIPS test, with CPU=2666Mhz, 8102.0 MIPS\nClock  Item                                      Time     CPU    MIPS\n Rate                                           (usec)    (%)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating CLI Mixed Type Input for PJSUA New Call Command\nDESCRIPTION: This snippet shows the mixed type input for making a new call, where users can choose from predefined options or enter a custom URL.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/other/cli_cmd.rst#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n[-1]   All buddies\n[0]    Current dialog\n[URL]  An URL\n```\n\n----------------------------------------\n\nTITLE: Including Common Codecs Documentation in reStructuredText\nDESCRIPTION: This directive includes the content of the 'common_codecs.rst' file from the '../common/' directory, which contains information about supported audio codecs in PJSIP.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/overview/features_codec.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. include:: ../common/common_codecs.rst\n```\n\n----------------------------------------\n\nTITLE: Implementing OpenCore AMR codec in PJSIP (C)\nDESCRIPTION: Integration of OpenCore AMR NB/WB codec in PJSIP. The implementation is located in pjmedia/src/pjmedia-codec/opencore_amr.c and uses the OpenCore AMR library for audio encoding/decoding.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/overview/license_3rd_party.rst#2025-04-23_snippet_3\n\nLANGUAGE: c\nCODE:\n```\npjmedia/src/pjmedia-codec/opencore_amr.c\n```\n\n----------------------------------------\n\nTITLE: Multiline Function Arguments Formatting\nDESCRIPTION: Demonstrates the correct way to align function parameters when they span multiple lines in PJSIP code. Parameters should be aligned vertically.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/get-started/coding-style.rst#2025-04-23_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nPJ_DECL(void) pj_array_insert(void *array,\n                              unsigned elem_size,\n                              unsigned count,\n                              ...);\n```\n\n----------------------------------------\n\nTITLE: RST Markup for Audio and Video Codec Documentation\nDESCRIPTION: This RST (reStructuredText) markup defines documentation sections for audio and video codecs supported by PJSIP, with references to individual codec documentation pages.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/common/common_codecs.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. comment: \n\n   This file is shared by both the Features (Datasheet) page and PJMEDIA API\n   reference page.\n\n\nAudio Codecs\n^^^^^^^^^^^^^\n.. - :doc:`AMR NB/WB </api/generated/pjmedia/group/group__PJMED__AMR__CODEC__HELPER>`\n\n- :ref:`Android AMR-NB/WB <amediacodec>` (native)\n- :ref:`bcg729`\n- :ref:`g711`\n- :ref:`g722`\n- :ref:`g7221`\n- :ref:`gsm`\n- :ref:`ilbc`\n- :ref:`ipp` (G.722.1, G.723.1, G.726, G.728, G.729, AMR, and AMR-WB)\n- :ref:`l16`\n- :any:`/specific-guides/audio/opencore-amr`\n- :ref:`opus`\n- :ref:`l16`\n- :ref:`passthrough`\n- :ref:`silk`\n- :ref:`speex`\n\nVideo Codecs\n^^^^^^^^^^^^^\n.. include:: /common/common_video_codec_list.rst\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Table of Contents for Audio Troubleshooting Documentation\nDESCRIPTION: Sets up a Sphinx documentation toctree directive to include all files from the 'checks' subdirectory with a maximum depth of 1 level. This configuration creates a navigation structure for audio troubleshooting resources.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/audio-troubleshooting/checklist.rst#2025-04-23_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n   :maxdepth: 1\n   :glob:\n   \n   checks/*\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Package Dependencies for PJSIP Documentation\nDESCRIPTION: This code snippet defines the required Python packages and their minimum versions for building the PJSIP project documentation. It includes Sphinx for documentation generation, Breathe for Doxygen integration, Read the Docs theme for styling, and additional utilities like recommonmark and sphinx-copybutton.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nsphinx>=2.4.3\nbreathe>=4.14.1\nsphinx-rtd-theme>=1.0.0\nrecommonmark\nsphinx-copybutton\n```\n\n----------------------------------------\n\nTITLE: Creating Table of Contents in reStructuredText\nDESCRIPTION: A reStructuredText directive to create a table of contents at the start of a document, with a depth of 2 levels.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/other/writing-guide.rst#2025-04-23_snippet_4\n\nLANGUAGE: rst\nCODE:\n```\n.. contents:: Table of Contents\n    :depth: 2\n```\n\n----------------------------------------\n\nTITLE: Including Sample Applications Documentation in reStructuredText\nDESCRIPTION: A reStructuredText directive that includes sample applications documentation from another file. This is a common pattern in documentation systems to modularize content.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/pjsua2/samples.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. include:: /api/pjsua2/samples.rst\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents for PJSIP Features Documentation in reStructuredText\nDESCRIPTION: This snippet defines a structured table of contents for PJSIP project documentation using reStructuredText directives. It organizes documentation into categories including operating systems, SIP functionality, NAT traversal, media handling, video capabilities, codec support, and media devices.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/overview/features.rst#2025-04-23_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n   :maxdepth: 1\n   :caption: Table of Contents\n\n   features_os\n   features_sip\n   features_nat\n   features_media\n   features_video\n   features_codec\n   features_media_devs\n```\n\n----------------------------------------\n\nTITLE: K&R Style Brace Placement for Struct, Enum, and Function Definitions\nDESCRIPTION: Demonstrates the proper K&R style brace placement for struct, enum, and function definitions in PJSIP. Shows how Doxygen comments should be formatted for API documentation.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/get-started/coding-style.rst#2025-04-23_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n/** Doxygen comment */\ntypedef struct some_type\n{\n    /** Doxygen comment */\n    int   member_a;\n\n    /** Doxygen comment */\n    char  member_b;\n} some_type;\n\n/** Doxygen comment */\nenum some_constant_t\n{\n    /** Doxygen comment */\n    CONSTANT_1,\n\n    /** Doxygen comment */\n    CONSTANT_2;\n};\n\n/**\n * Doxygen comment describing the function.\n *\n * @param a     First parameter\n * @param b     Second parameter, same indentation as other params.\n *\n * @return      Zero on success or ..., indentation aligned with above too.\n */\nint my_func(int a, int b)\n{\n    return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Table of Contents in RST Documentation\nDESCRIPTION: This RST directive creates a table of contents with a specified depth of 2 levels, allowing readers to navigate the document more easily.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/overview/features_media.rst#2025-04-23_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. contents:: Table of Contents\n    :depth: 2\n```\n\n----------------------------------------\n\nTITLE: RST Document Structure Definition\nDESCRIPTION: Uses reStructuredText toctree directives to organize documentation into logical sections with references to subdirectories and specific files.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/index.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 1\n   :glob:\n   \n   audio/*\n   audio-troubleshooting/problems/how_to_record\n   audio-troubleshooting/problems/*\n   audio-troubleshooting/checklist\n   build_int/*\n   develop/*\n   ../api/pjsip/guide\n   /get-started/coding-style.rst\n   media/*\n   network_nat/*\n   perf_footprint/*\n   security/*\n   sip/*\n   video/*\n   other/*\n```\n\n----------------------------------------\n\nTITLE: Including Video Device Documentation\nDESCRIPTION: reStructuredText include directive that imports common video device documentation from a separate file.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/overview/features_media_devs.rst#2025-04-23_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. include:: ../common/common_videodev.rst\n```\n\n----------------------------------------\n\nTITLE: Creating Table of Contents in reStructuredText for PJSIP Documentation\nDESCRIPTION: A reStructuredText directive that creates a table of contents for the PJSIP documentation. The directive links to guide, reference, and samples pages with a specified caption and depth level.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/api/pjsip/index.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :caption: Table of Contents\n   :maxdepth: 1\n   \n   guide\n   ref\n   samples\n```\n\n----------------------------------------\n\nTITLE: Setting Windows Phone 8 API Family Configuration\nDESCRIPTION: XML configuration in pjproject-vs14-api-def.props to set the API family for Windows Phone 8 builds.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/get-started/windows-phone/build_instructions.rst#2025-04-23_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n...\n<API_Family>Winphone8</API_Family>\n...\n```\n\n----------------------------------------\n\nTITLE: Incorrect Multiline Function Arguments Formatting\nDESCRIPTION: Shows the incorrect way to format function parameters across multiple lines in PJSIP. This style should be avoided as it doesn't align parameters properly.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/get-started/coding-style.rst#2025-04-23_snippet_4\n\nLANGUAGE: c\nCODE:\n```\nPJ_DECL(void) pj_array_insert(void *array,\n    unsigned elem_size,\n    unsigned count,\n    ...);\n```\n\n----------------------------------------\n\nTITLE: Incorrect Doxygen Multiline Comment Formatting\nDESCRIPTION: Shows the incorrect way to format Doxygen comments in PJSIP. This style should be avoided as it creates misaligned asterisks.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/get-started/coding-style.rst#2025-04-23_snippet_6\n\nLANGUAGE: c\nCODE:\n```\n/** First line describing the function.\n * Second line describing the function.\n * Alas, they don't align!\n */\n```\n\n----------------------------------------\n\nTITLE: Including Common OS List in reStructuredText\nDESCRIPTION: A reStructuredText include directive that references a common file containing the list of supported operating systems for the PJSIP project.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/overview/features_os.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. include:: /common/common_os_list.rst\n```\n\n----------------------------------------\n\nTITLE: Including Common PJMEDIA Documentation with RST Include Directive\nDESCRIPTION: This RST directive includes common PJMEDIA documentation from a separate file, allowing for modular documentation structure and reuse of common content across multiple files.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/overview/features_media.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. include:: ../common/common_pjmedia.rst\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents for PJSIP Guidelines in reStructuredText\nDESCRIPTION: This snippet creates a table of contents using reStructuredText directives. It sets the maximum depth to 1 and uses a glob pattern to include all relevant guideline documents.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/get-started/general_guidelines.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n   :maxdepth: 1\n   :glob:\n\n   guidelines-development\n   coding-style\n   guidelines-platform\n   guidelines-api\n   guidelines-other\n```\n\n----------------------------------------\n\nTITLE: Configuring RST Table of Contents for PJSIP Unix Documentation\nDESCRIPTION: A reStructuredText (RST) directive that creates a table of contents for PJSIP documentation on Unix-based systems. It specifies a maximum depth of 1 and references two main documentation sections: build instructions and usage guide.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/get-started/posix/index.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 1\n   :caption: Table of Contents\n\n   build_instructions\n   using\n   \n```\n\n----------------------------------------\n\nTITLE: Enabling Linear/PCM Codecs in PJSIP Configuration\nDESCRIPTION: This code snippet shows how to enable various Linear/PCM codecs (L8/L16) with different sample rates and mono/stereo configurations in PJSIP by defining macros in the config_site.h file.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/api/pjmedia/pjmedia-codec.rst#2025-04-23_snippet_2\n\nLANGUAGE: C\nCODE:\n```\n#define PJMEDIA_CODEC_L16_HAS_8KHZ_MONO     1\n#define PJMEDIA_CODEC_L16_HAS_8KHZ_STEREO   1\n#define PJMEDIA_CODEC_L16_HAS_16KHZ_MONO    1\n#define PJMEDIA_CODEC_L16_HAS_16KHZ_STEREO  1\n#define PJMEDIA_CODEC_L16_HAS_48KHZ_MONO    1\n#define PJMEDIA_CODEC_L16_HAS_48KHZ_STEREO  1\n```\n\n----------------------------------------\n\nTITLE: Installing libvpx for VP8 and VP9 Codecs on Debian/Ubuntu\nDESCRIPTION: This shell command demonstrates how to install the libvpx development package, which provides VP8 and VP9 codec support, on Debian or Ubuntu systems using the apt package manager.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/api/pjmedia/pjmedia-codec.rst#2025-04-23_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\n$ sudo apt-get install libvpx-dev\n```\n\n----------------------------------------\n\nTITLE: Initializing PJSUA2 Library with Custom Configuration in C++\nDESCRIPTION: Initializes the PJSUA2 library with custom configuration settings using the libInit() method. Includes error handling.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/pjsua2/using/endpoint.rst#2025-04-23_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\ntry {\n    EpConfig ep_cfg;\n    // Specify customization of settings in ep_cfg\n    ep->libInit(ep_cfg);\n} catch(Error& err) {\n    cout << \"Initialization error: \" << err.info() << endl;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing OpenH264 on Debian/Ubuntu\nDESCRIPTION: This shell command demonstrates how to install the OpenH264 development package on Debian or Ubuntu systems using the apt package manager.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/api/pjmedia/pjmedia-codec.rst#2025-04-23_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\n$ sudo apt-get install libopenh264-dev\n```\n\n----------------------------------------\n\nTITLE: Conference Bridge Interactive Demo (confsample.c)\nDESCRIPTION: Interactive demonstration of conference bridge features including audio mixing, level control and metering. Shows practical usage of PJMEDIA conference bridge capabilities.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/api/pjmedia/samples.rst#2025-04-23_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: AVI Media Player Implementation (aviplay.c)\nDESCRIPTION: AVI media player implementation using PJMEDIA core, codec, audiodev and videodev modules. Handles audio/video playback from AVI files.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/api/pjmedia/samples.rst#2025-04-23_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: RST Documentation Links\nDESCRIPTION: ReStructuredText format links to other documentation sections covering video features and media device capabilities.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/video/features.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\nFeatures\n===================\nSee the following pages:\n\n- :any:`Video features (Overview section) </overview/features_video>`\n- :any:`Devices (Overview section) </overview/features_media_devs>`\n```\n\n----------------------------------------\n\nTITLE: Windows OpenCore AMR Configuration\nDESCRIPTION: C preprocessor definitions required to enable OpenCore AMR codec support in PJSIP on Windows.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/specific-guides/audio/opencore-amr.rst#2025-04-23_snippet_7\n\nLANGUAGE: c\nCODE:\n```\n#define PJMEDIA_HAS_OPENCORE_AMRNB_CODEC 1\n/* And if you want to have AMR-WB support: */\n#define PJMEDIA_HAS_OPENCORE_AMRWB_CODEC 1\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenGL Video Support\nDESCRIPTION: Configuration macros to enable OpenGL and OpenGL ES video device support in the build system via config_site.h\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/api/pjmedia/pjmedia-videodev.rst#2025-04-23_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n#define PJMEDIA_VIDEO_DEV_HAS_OPENGL     1\n#define PJMEDIA_VIDEO_DEV_HAS_OPENGL_ES  1\n#define PJMEDIA_VIDEO_DEV_HAS_IOS_OPENGL 1\n```\n\n----------------------------------------\n\nTITLE: Configuring WMME Audio Support in Windows\nDESCRIPTION: Code snippet to enable Windows Multimedia API (WMME) audio device support in PJMEDIA by setting a configuration macro in config_site.h\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/api/pjmedia/pjmedia-audiodev.rst#2025-04-23_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#define PJMEDIA_AUDIO_DEV_HAS_WMME  1\n```\n\n----------------------------------------\n\nTITLE: Configuring PortAudio Support\nDESCRIPTION: Code snippet to enable PortAudio support in PJMEDIA by setting a configuration macro in config_site.h for Windows platforms\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/api/pjmedia/pjmedia-audiodev.rst#2025-04-23_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n#define PJMEDIA_AUDIO_DEV_HAS_PORTAUDIO 1\n```\n\n----------------------------------------\n\nTITLE: Configuring PortAudio on Unix Systems\nDESCRIPTION: Shell command to configure and build PJMEDIA with external PortAudio support on Unix-like systems\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/api/pjmedia/pjmedia-audiodev.rst#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ ./configure --with-external-pa\n$ make\n```\n\n----------------------------------------\n\nTITLE: Enabling DirectShow Video Support in Windows\nDESCRIPTION: Configuration macro to enable DirectShow video device support in Visual Studio builds by adding to config_site.h\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/api/pjmedia/pjmedia-videodev.rst#2025-04-23_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#define PJMEDIA_VIDEO_DEV_HAS_DSHOW  1\n```\n\n----------------------------------------\n\nTITLE: Installing SDL Development Libraries\nDESCRIPTION: Shell command to install SDL development libraries on Debian-based Linux distributions\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/api/pjmedia/pjmedia-videodev.rst#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt-get install libsdl2-dev\n```\n\n----------------------------------------\n\nTITLE: Conference Bridge Benchmark (confbench.c)\nDESCRIPTION: Internal utility for performance benchmarking of the PJMEDIA conference bridge implementation.\nSOURCE: https://github.com/pjsip/pjproject_docs/blob/master/docs/source/api/pjmedia/samples.rst#2025-04-23_snippet_3\n\n"
  }
]