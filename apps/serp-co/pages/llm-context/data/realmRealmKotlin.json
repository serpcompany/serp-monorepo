[
  {
    "owner": "realm",
    "repo": "realm-kotlin",
    "content": "TITLE: Defining Realm Object Models in Kotlin\nDESCRIPTION: Shows how to define model classes that extend RealmObject, which is the basic structure for data persistence in Realm. It demonstrates creating a Person class with a relationship to a Dog class.\nSOURCE: https://github.com/realm/realm-kotlin/blob/main/README.md#2025-04-16_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nclass Person : RealmObject {\n    var name: String = \"Foo\"\n    var dog: Dog? = null\n}\n\nclass Dog : RealmObject {\n    var name: String = \"\"\n    var age: Int = 0\n}\n```\n\n----------------------------------------\n\nTITLE: Writing Data to Realm in Kotlin\nDESCRIPTION: Shows how to create objects and persist them to Realm using both blocking and asynchronous transactions with Kotlin coroutines.\nSOURCE: https://github.com/realm/realm-kotlin/blob/main/README.md#2025-04-16_snippet_2\n\nLANGUAGE: Kotlin\nCODE:\n```\n// plain old kotlin object\nval person = Person().apply {\n    name = \"Carlo\"\n    dog = Dog().apply { name = \"Fido\"; age = 16 }\n}\n\n// Persist it in a transaction\nrealm.writeBlocking { // this : MutableRealm\n    val managedPerson = copyToRealm(person)\n}\n\n// Asynchronous updates with Kotlin coroutines\nCoroutineScope(context).async {\n    realm.write { // this : MutableRealm\n        val managedPerson = copyToRealm(person)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Data in Realm with Kotlin\nDESCRIPTION: Shows how to find an object and update its properties within a transaction.\nSOURCE: https://github.com/realm/realm-kotlin/blob/main/README.md#2025-04-16_snippet_4\n\nLANGUAGE: Kotlin\nCODE:\n```\n// Find the first Person without a dog\nrealm.query<Person>(\"dog == NULL LIMIT(1)\")\n    .first()\n    .find()\n    ?.also { personWithoutDog ->\n        // Add a dog in a transaction\n        realm.writeBlocking {\n            findLatest(personWithoutDog)?.dog = Dog().apply { name = \"Laika\"; age = 3 }\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Querying Data from Realm in Kotlin\nDESCRIPTION: Demonstrates different ways to query data from Realm, including getting all objects, filtering by properties, and observing query results using Kotlin Flows.\nSOURCE: https://github.com/realm/realm-kotlin/blob/main/README.md#2025-04-16_snippet_3\n\nLANGUAGE: Kotlin\nCODE:\n```\n// All persons\nimport io.realm.kotlin.ext.query\n\nval all = realm.query<Person>().find()\n\n// Persons named 'Carlo'\nval personsByNameQuery: RealmQuery<Person> = realm.query<Person>(\"name = $0\", \"Carlo\")\nval filteredByName: RealmResults<Person> = personsByNameQuery.find()\n\n// Person having a dog aged more than 7 with a name starting with 'Fi'\nval filteredByDog = realm.query<Person>(\"dog.age > $0 AND dog.name BEGINSWITH $1\", 7, \"Fi\").find()\n\n// Observing changes with Coroutine Flows\nCoroutineScope(context).async {\n    personsByNameQuery.asFlow().collect { result: ResultsChange<Person> ->\n        println(\"Realm updated: Number of persons is ${result.list.size}\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Observing Realm Changes as Flow in Kotlin\nDESCRIPTION: Shows how to use Realm.asFlow() to observe changes to a Realm instance, yielding RealmChange objects representing InitialRealm or UpdatedRealm states.\nSOURCE: https://github.com/realm/realm-kotlin/blob/main/CHANGELOG.md#2025-04-16_snippet_19\n\nLANGUAGE: Kotlin\nCODE:\n```\nRealm.asFlow()\n```\n\n----------------------------------------\n\nTITLE: Opening a Realm Database in Kotlin\nDESCRIPTION: Demonstrates how to create a RealmConfiguration with a defined schema and open a Realm database instance.\nSOURCE: https://github.com/realm/realm-kotlin/blob/main/README.md#2025-04-16_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\n// use the RealmConfiguration.Builder() for more options\nval configuration = RealmConfiguration.create(schema = setOf(Person::class, Dog::class)) \nval realm = Realm.open(configuration)\n```\n\n----------------------------------------\n\nTITLE: Observing Realm Object Changes with Kotlin Flows\nDESCRIPTION: Demonstrates how to observe changes to individual RealmObjects, including information about which fields were changed.\nSOURCE: https://github.com/realm/realm-kotlin/blob/main/README.md#2025-04-16_snippet_7\n\nLANGUAGE: Kotlin\nCODE:\n```\nperson.asFlow().collect { objectChange: ObjectChange<Person> ->\n        when (objectChange) {\n            is InitialObject -> println(\"Initial object: ${objectChange.obj.name}\")\n            is UpdatedObject -> \n                println(\"Updated object: ${objectChange.obj.name}, changed fields: ${objectChange.changedFields.size}\")\n            is DeletedObject -> println(\"Deleted object\")\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Deleting Objects by Query in Kotlin Realm\nDESCRIPTION: Demonstrates how to delete objects specified by a RealmQuery or RealmResults using MutableRealm.delete() and DynamicMutableRealm.delete().\nSOURCE: https://github.com/realm/realm-kotlin/blob/main/CHANGELOG.md#2025-04-16_snippet_20\n\nLANGUAGE: Kotlin\nCODE:\n```\nMutableRealm.delete(...)\nDynamicMutableRealm.delete(...)\n```\n\n----------------------------------------\n\nTITLE: Observing RealmQuery Results with Kotlin Flows\nDESCRIPTION: Demonstrates how to observe changes to query results, including information about insertions, changes, and deletions.\nSOURCE: https://github.com/realm/realm-kotlin/blob/main/README.md#2025-04-16_snippet_9\n\nLANGUAGE: Kotlin\nCODE:\n```\nrealm.query<Person>().asFlow()\n    .collect { resultsChange: ResultsChange<Person> ->\n        when (resultsChange) {\n            is InitialResults -> println(\"Initial results size: ${resultsChange.list.size}\")\n            is UpdatedResults -> \n                println(\"Updated results size: ${resultsChange.list.size} insertions ${resultsChange.insertions.size}\")\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Observing RealmList Changes with Kotlin Flows\nDESCRIPTION: Shows how to observe changes to RealmLists, including information about insertions, changes, and deletions.\nSOURCE: https://github.com/realm/realm-kotlin/blob/main/README.md#2025-04-16_snippet_8\n\nLANGUAGE: Kotlin\nCODE:\n```\nperson.addresses.asFlow()\n        .collect { listChange: ListChange<String> ->\n            when (listChange) {\n                is InitialList -> println(\"Initial list size: ${listChange.list.size}\")\n                is UpdatedList -> \n                    println(\"Updated list size: ${listChange.list.size} insertions ${listChange.insertions.size}\")\n                is DeletedList -> println(\"Deleted list\")\n            }\n        }\n```\n\n----------------------------------------\n\nTITLE: Observing Realm Database Changes with Kotlin Flows\nDESCRIPTION: Shows how to observe changes to the entire Realm database using Kotlin Flows.\nSOURCE: https://github.com/realm/realm-kotlin/blob/main/README.md#2025-04-16_snippet_6\n\nLANGUAGE: Kotlin\nCODE:\n```\nrealm.asFlow()\n    .collect { realmChange: RealmChange<Realm> ->\n        when (realmChange) {\n            is InitialRealm<*> -> println(\"Initial Realm\")\n            is UpdatedRealm<*> -> println(\"Realm updated\")\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Inspecting Realm Schema in Kotlin\nDESCRIPTION: Shows how to use BaseRealm.schema() to inspect the schema of a Realm database.\nSOURCE: https://github.com/realm/realm-kotlin/blob/main/CHANGELOG.md#2025-04-16_snippet_23\n\nLANGUAGE: Kotlin\nCODE:\n```\nBaseRealm.schema()\n```\n\n----------------------------------------\n\nTITLE: Deleting Data from Realm in Kotlin\nDESCRIPTION: Demonstrates different approaches to delete data from Realm, including deleting by query, from query results, or individual objects.\nSOURCE: https://github.com/realm/realm-kotlin/blob/main/README.md#2025-04-16_snippet_5\n\nLANGUAGE: Kotlin\nCODE:\n```\n// delete all Dogs\nrealm.writeBlocking {\n    // Selected by a query\n    val query = this.query<Dog>()\n    delete(query)\n\n    // From a query result\n    val results = query.find()\n    delete(results)\n\n    // From individual objects\n    results.forEach { delete(it) }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Object Equality Changes in Realm Kotlin\nDESCRIPTION: Example showing new equality behavior between Realm objects where objects from the same Realm version are now considered equal when using == operator, while objects from different versions are not equal. This is a change from previous identity-based (===) comparison.\nSOURCE: https://github.com/realm/realm-kotlin/blob/main/CHANGELOG.md#2025-04-16_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nval childA: Child = realm.query<Child>().first().find()!!\nval childB: Child = realm.query<Child>().first().find()!!\n\n// This behavior is the same both before 1.11.0 and before\nchildA === childB // false\n\n// This will return true in 1.11.0 and onwards. Before it will return false\nchildA == childB\n\nrealm.writeBlocking { /* Do a write */ }\nval childC = realm.query<Child>().first().find()!!\n\n// This will return false because childA belong to version 1, while childC belong to version 2.\n// Override equals/hashCode if value semantics are wanted.\nchildA == childC\n```\n\n----------------------------------------\n\nTITLE: Realm Local Database Configuration - Kotlin\nDESCRIPTION: Code examples showing the updated configuration pattern for local Realm databases, including opening a Realm and creating configurations.\nSOURCE: https://github.com/realm/realm-kotlin/blob/main/CHANGELOG.md#2025-04-16_snippet_25\n\nLANGUAGE: kotlin\nCODE:\n```\n// Opening a realm\nRealm.open(configuration)\n\n// Configuration construction\nRealmConfiguration.with(schema = ...)\n\n// RealmList construction\nrealmListOf(...)\nIterable<T>.toRealmList()\n```\n\n----------------------------------------\n\nTITLE: MongoDB Realm Sync Configuration - Kotlin\nDESCRIPTION: Code examples showing how to configure and use MongoDB Realm sync in Kotlin. Includes setup of AppConfiguration, user authentication, and sync configuration.\nSOURCE: https://github.com/realm/realm-kotlin/blob/main/CHANGELOG.md#2025-04-16_snippet_24\n\nLANGUAGE: kotlin\nCODE:\n```\nio.realm.kotlin:library-sync:<VERSION>\n\nAppConfiguration.Builder(appId).build()\nApp.create(appConfiguration)\nApp.login(credentials)\nSyncConfiguration.Builder(user, partitionValue, schema).build()\nRealm.open(syncConfiguration)\n```\n\n----------------------------------------\n\nTITLE: Observing Single Query Results with Kotlin Flows\nDESCRIPTION: Shows how to observe a single query result, including handling pending, initial, updated, and deleted states.\nSOURCE: https://github.com/realm/realm-kotlin/blob/main/README.md#2025-04-16_snippet_10\n\nLANGUAGE: Kotlin\nCODE:\n```\nrealm.query<Person>(\"name = $0\", \"Carlo\").first().asFlow()\n    .collect { objectChange: SingleQueryChange<Person> ->\n        when (objectChange) {\n            is PendingObject -> println(\"Pending object\")\n            is InitialObject -> println(\"Initial object: ${objectChange.obj.name}\")\n            is UpdatedObject -> \n                println(\"Updated object: ${objectChange.obj.name}, changed fields: ${objectChange.changedFields.size}\")\n            is DeletedObject -> println(\"Deleted object\")\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Updating RealmAny Field Implementation in Kotlin\nDESCRIPTION: Support for RealmAny as a polymorphic Realm value or Realm Object that is indexable but cannot be used as a primary key. This allows representing different types of values within a single field.\nSOURCE: https://github.com/realm/realm-kotlin/blob/main/CHANGELOG.md#2025-04-16_snippet_4\n\nLANGUAGE: Kotlin\nCODE:\n```\nRealmAny.valueOf(myRealmObject) // Example conversion\nRealmAny.valueOf(10) // Integer value\nRealmAny.valueOf(\"string\") // String value\n```\n\n----------------------------------------\n\nTITLE: Querying Realm Objects in Kotlin\nDESCRIPTION: Demonstrates the new query API using Realm.query() instead of the deprecated Realm.objects() method.\nSOURCE: https://github.com/realm/realm-kotlin/blob/main/CHANGELOG.md#2025-04-16_snippet_22\n\nLANGUAGE: Kotlin\nCODE:\n```\nRealm.query(...)\n```\n\n----------------------------------------\n\nTITLE: Implementing RealmList Queries in Kotlin\nDESCRIPTION: Support for querying RealmLists containing objects using the query() method to filter list contents.\nSOURCE: https://github.com/realm/realm-kotlin/blob/main/CHANGELOG.md#2025-04-16_snippet_7\n\nLANGUAGE: Kotlin\nCODE:\n```\nrealmList.query(\"fieldName == $0\", value)\n```\n\n----------------------------------------\n\nTITLE: Using MutableRealmInt in Realm Kotlin Models\nDESCRIPTION: Example of using the new MutableRealmInt type in Realm Kotlin model classes, introduced in version 1.2.0.\nSOURCE: https://github.com/realm/realm-kotlin/blob/main/CHANGELOG.md#2025-04-16_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyModel : RealmObject {\n    var counter: MutableRealmInt? = null\n}\n```\n\n----------------------------------------\n\nTITLE: Querying RealmResults in Kotlin\nDESCRIPTION: Example of using the new RealmQuery return type from RealmResults.query() in version 1.2.0.\nSOURCE: https://github.com/realm/realm-kotlin/blob/main/CHANGELOG.md#2025-04-16_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nval query: RealmQuery = realmResults.query()\n```\n\n----------------------------------------\n\nTITLE: Accessing User Properties in Realm Kotlin Sync\nDESCRIPTION: Examples of using new User properties and methods introduced in versions 1.2.0 and 1.3.0.\nSOURCE: https://github.com/realm/realm-kotlin/blob/main/CHANGELOG.md#2025-04-16_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\nval user: User = ...\nval id = user.id // Replaces user.identity\nval identities = user.identities\nval providerType = user.getProviderType()\nval accessToken = user.getAccessToken()\nval refreshToken = user.getRefreshToken()\nval deviceId = user.getDeviceId()\n```\n\n----------------------------------------\n\nTITLE: Deleting Realm Files in Kotlin\nDESCRIPTION: Shows how to use the new Realm.deleteRealm() function to delete Realm files from the filesystem.\nSOURCE: https://github.com/realm/realm-kotlin/blob/main/CHANGELOG.md#2025-04-16_snippet_21\n\nLANGUAGE: Kotlin\nCODE:\n```\nRealm.deleteRealm(RealmConfiguration)\n```\n\n----------------------------------------\n\nTITLE: Using Backlinks in Realm Kotlin\nDESCRIPTION: Example of using the new backlinks delegate for reverse relationships, introduced in version 1.5.0.\nSOURCE: https://github.com/realm/realm-kotlin/blob/main/CHANGELOG.md#2025-04-16_snippet_14\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyModel : RealmObject {\n    var name: String = \"\"\n    val relatedObjects by backlinks(OtherModel::class, \"linkProperty\")\n}\n```\n\n----------------------------------------\n\nTITLE: Property Keypath Substitution in RQL\nDESCRIPTION: Shows how to use the new property keypath substitution feature in RQL queries using the $P<i> syntax.\nSOURCE: https://github.com/realm/realm-kotlin/blob/main/CHANGELOG.md#2025-04-16_snippet_2\n\nLANGUAGE: rql\nCODE:\n```\n$P<i>\n```\n\n----------------------------------------\n\nTITLE: Using SyncSession Progress Listeners in Kotlin\nDESCRIPTION: Implementation of progress listeners using Kotlin Flow to monitor sync progress in Realm Sync sessions.\nSOURCE: https://github.com/realm/realm-kotlin/blob/main/CHANGELOG.md#2025-04-16_snippet_6\n\nLANGUAGE: Kotlin\nCODE:\n```\nsyncSession.progressAsFlow(...).collect { progress ->\n    // Handle progress updates\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Realm with Compact on Launch in Kotlin\nDESCRIPTION: Demonstrates how to use the new RealmConfiguration.Builder.compactOnLaunch() method to control if a Realm file should be compacted when opened.\nSOURCE: https://github.com/realm/realm-kotlin/blob/main/CHANGELOG.md#2025-04-16_snippet_18\n\nLANGUAGE: Kotlin\nCODE:\n```\nRealmConfiguration.Builder.compactOnLaunch()\n```\n\n----------------------------------------\n\nTITLE: Deleting All Objects in Realm Kotlin\nDESCRIPTION: Examples of using new deletion methods introduced in version 1.3.0 for both MutableRealm and DynamicMutableRealm.\nSOURCE: https://github.com/realm/realm-kotlin/blob/main/CHANGELOG.md#2025-04-16_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\nmutableRealm.deleteAll()\nmutableRealm.delete(MyClass::class)\n\ndynamicMutableRealm.deleteAll()\ndynamicMutableRealm.delete(\"MyClass\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Realm Kotlin SDK Using Groovy DSL\nDESCRIPTION: Gradle configuration for setting up Realm Kotlin using Groovy DSL. Includes required repository configuration and plugin application for both global and module-level build.gradle files.\nSOURCE: https://github.com/realm/realm-kotlin/blob/main/README.md#2025-04-16_snippet_11\n\nLANGUAGE: Gradle\nCODE:\n```\n// Global build.gradle\nbuildscript {\n    repositories {\n        google()\n        mavenCentral()\n        maven {\n            url 'https://oss.sonatype.org/content/repositories/snapshots'\n        }\n    }\n    dependencies {\n        classpath 'io.realm.kotlin:gradle-plugin:<VERSION>'\n    }\n}\n\nallprojects {\n    repositories {\n        google()\n        mavenCentral()\n        maven {\n            url 'https://oss.sonatype.org/content/repositories/snapshots'\n        }\n    }\n}\n\n// Module build.gradle\n\n// Don't cache SNAPSHOT (changing) dependencies.\nconfigurations.all {\n    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'\n}\n\napply plugin: \"io.realm.kotlin\"\n```\n\n----------------------------------------\n\nTITLE: Implementing PersistedName Annotation in Kotlin\nDESCRIPTION: Support for @PersistedName annotations that allow mapping Kotlin field names to different underlying persisted names in the Realm database.\nSOURCE: https://github.com/realm/realm-kotlin/blob/main/CHANGELOG.md#2025-04-16_snippet_5\n\nLANGUAGE: Kotlin\nCODE:\n```\n@PersistedName(\"db_field_name\")\nvar kotlinFieldName: String = \"\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Realm Kotlin SDK Using Kotlin DSL\nDESCRIPTION: Gradle configuration for setting up Realm Kotlin using Kotlin DSL. Includes required repository configuration, plugin application, and dependencies for both global and module-level build.gradle.kts files.\nSOURCE: https://github.com/realm/realm-kotlin/blob/main/README.md#2025-04-16_snippet_12\n\nLANGUAGE: Kotlin\nCODE:\n```\n// Global build.gradle\n\nbuildscript {\n    dependencies {\n        classpath(\"io.realm.kotlin:gradle-plugin:<VERSION>-SNAPSHOT\")\n    }\n}\n\nrepositories {\n    google()\n    mavenCentral()\n    maven {\n        url = uri(\"https://oss.sonatype.org/content/repositories/snapshots\")\n    }\n}\n\n// Module build.gradle\n\nplugins {\n    id(\"io.realm.kotlin\")\n}\nkotlin {\n    sourceSets {\n        val commonMain  by getting {\n            dependencies {\n                implementation(\"io.realm.kotlin:library-base:<VERSION>-SNAPSHOT\")\n            }\n        }\n    }\n}     \n\n// Don't cache SNAPSHOT (changing) dependencies.\nconfigurations.all {\n    resolutionStrategy.cacheChangingModulesFor(0,TimeUnit.SECONDS)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Realm Kotlin SDK in Gradle (Kotlin)\nDESCRIPTION: This snippet demonstrates how to set up the Realm Kotlin SDK in a Gradle project. It includes configuring the buildscript, repositories, and applying the Realm Kotlin plugin.\nSOURCE: https://github.com/realm/realm-kotlin/blob/main/CHANGELOG.md#2025-04-16_snippet_26\n\nLANGUAGE: kotlin\nCODE:\n```\n// Top-level build.gradle file\nbuildscript {\n    repositories {\n        mavenCentral()\n    }\n    dependencies {\n        classpath(\"io.realm.kotlin:gradle-plugin:0.1.0\")\n    }\n}\n\nallprojects {\n    repositories {\n    \tmavenCentral()\n    }\n}\n\n// Project build.gradle file\n// Only include multiplatform if building a multiplatform project.\nplugins {\n\tkotlin(\"multiplatform\")\n\tid(\"com.android.library\")\n\tid(\"realm-kotlin\")\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Current Time as RealmInstant\nDESCRIPTION: Example of using the new RealmInstant.now() method introduced in version 1.3.0.\nSOURCE: https://github.com/realm/realm-kotlin/blob/main/CHANGELOG.md#2025-04-16_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\nval now: RealmInstant = RealmInstant.now()\n```\n\n----------------------------------------\n\nTITLE: Using BsonObjectId in Realm Kotlin\nDESCRIPTION: Example of using the new BsonObjectId type introduced in version 1.5.0 as a replacement for ObjectId.\nSOURCE: https://github.com/realm/realm-kotlin/blob/main/CHANGELOG.md#2025-04-16_snippet_13\n\nLANGUAGE: kotlin\nCODE:\n```\nimport org.mongodb.kbson.ObjectId\n\nclass MyModel : RealmObject {\n    var id: ObjectId = ObjectId()\n}\n```\n\n----------------------------------------\n\nTITLE: Updating RealmConfiguration Creation in Kotlin\nDESCRIPTION: The factory method for creating a RealmConfiguration was renamed from 'with' to 'create' for consistency.\nSOURCE: https://github.com/realm/realm-kotlin/blob/main/CHANGELOG.md#2025-04-16_snippet_15\n\nLANGUAGE: Kotlin\nCODE:\n```\n// Old\nRealmConfiguration.with(...)\n\n// New\nRealmConfiguration.create(...)\n```\n\n----------------------------------------\n\nTITLE: Updating SyncConfiguration Creation in Kotlin\nDESCRIPTION: The factory method for creating a SyncConfiguration was renamed from 'with' to 'create' for consistency.\nSOURCE: https://github.com/realm/realm-kotlin/blob/main/CHANGELOG.md#2025-04-16_snippet_16\n\nLANGUAGE: Kotlin\nCODE:\n```\n// Old\nSyncConfiguration.with(...)\n\n// New\nSyncConfiguration.create(...)\n```\n\n----------------------------------------\n\nTITLE: Querying Binary Data in RQL\nDESCRIPTION: Example showing the new syntax for querying binary data in RealmAny properties using RQL, demonstrating both bin() and binary() functions.\nSOURCE: https://github.com/realm/realm-kotlin/blob/main/CHANGELOG.md#2025-04-16_snippet_1\n\nLANGUAGE: rql\nCODE:\n```\nmixed = bin('xyz')\nmixed = binary('xyz')\n```\n\n----------------------------------------\n\nTITLE: Package Declaration for Realm Kotlin Types\nDESCRIPTION: Base package declaration for Realm Kotlin type definitions that are used to define Realm models and their properties.\nSOURCE: https://github.com/realm/realm-kotlin/blob/main/packages/library-base/src/commonMain/kotlin/io/realm/kotlin/types/info.md#2025-04-16_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\n# package io.realm.kotlin.types\n```\n\n----------------------------------------\n\nTITLE: Publishing Realm Kotlin Multiplatform Library Locally\nDESCRIPTION: Commands to navigate to the packages directory and publish the library to the local Maven repository. This step is necessary after building the CPP binaries.\nSOURCE: https://github.com/realm/realm-kotlin/blob/main/packages/library-base/README.md#2025-04-16_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\ncd packages\n./gradlew publishToMavenLocal\n```\n\n----------------------------------------\n\nTITLE: Updating RealmInstant Creation in Kotlin\nDESCRIPTION: The factory method for creating a RealmInstant from epoch seconds was renamed from 'fromEpochSeconds' to 'from' for consistency.\nSOURCE: https://github.com/realm/realm-kotlin/blob/main/CHANGELOG.md#2025-04-16_snippet_17\n\nLANGUAGE: Kotlin\nCODE:\n```\n// Old\nRealmInstant.fromEpochSeconds(...)\n\n// New\nRealmInstant.from(...)\n```\n\n----------------------------------------\n\nTITLE: Running Integration Tests for Realm Kotlin\nDESCRIPTION: Commands to publish SDK modules and run integration tests for the Realm Kotlin project.\nSOURCE: https://github.com/realm/realm-kotlin/blob/main/CONTRIBUTING.md#2025-04-16_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncd packages\n./gradlew publishAllPublicationsToTestRepository\n\ncd integration-tests/gradle-plugin-test\n./gradlew integrationTest\n```\n\n----------------------------------------\n\nTITLE: Running iOS Tests for Realm Kotlin Multiplatform Library\nDESCRIPTION: Command to execute iOS tests for the Realm Kotlin Multiplatform library. Requires an x86_64 simulator to be running.\nSOURCE: https://github.com/realm/realm-kotlin/blob/main/packages/library-base/README.md#2025-04-16_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\n/gradlew iosTest\n```\n\n----------------------------------------\n\nTITLE: Running Android Tests for Realm Kotlin Multiplatform Library\nDESCRIPTION: Command to run Android tests for the Realm Kotlin Multiplatform library. Requires an x86_64 emulator to be running.\nSOURCE: https://github.com/realm/realm-kotlin/blob/main/packages/library-base/README.md#2025-04-16_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\n/gradlew connectedAndroidTest\n```\n\n----------------------------------------\n\nTITLE: Cloning Realm Kotlin Repository\nDESCRIPTION: Command to clone the Realm Kotlin repository with submodules.\nSOURCE: https://github.com/realm/realm-kotlin/blob/main/CONTRIBUTING.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone --recursive  https://github.com/realm/realm-kotlin.git\n```\n\n----------------------------------------\n\nTITLE: Running All Gradle Tests for Realm Kotlin\nDESCRIPTION: Command to run all Gradle tests across all modules for various platforms in the Realm Kotlin project.\nSOURCE: https://github.com/realm/realm-kotlin/blob/main/CONTRIBUTING.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncd packages\n./gradlew jvmTest connectedAndroidTest macosTest iosTest\n```\n\n----------------------------------------\n\nTITLE: Running Code Style Checks for Realm Kotlin\nDESCRIPTION: Commands to run ktlint and detekt for code style checking and formatting in the Realm Kotlin project.\nSOURCE: https://github.com/realm/realm-kotlin/blob/main/CONTRIBUTING.md#2025-04-16_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n# Call from root folder to check if code is compliant.\n./gradlew ktlintCheck\n./gradlew detekt\n\n# Call from root folder to automatically format all Kotlin code according to the code style rules.\n./gradlew ktlintFormat\n```\n\n----------------------------------------\n\nTITLE: Running Specific JVM Benchmarks Using Gradle\nDESCRIPTION: Executes specific JVM benchmarks by providing a regex pattern. This command runs only the benchmarks that match the \"BulkWrite*\" pattern.\nSOURCE: https://github.com/realm/realm-kotlin/blob/main/benchmarks/README.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew jvmApp:clean jvmApp:jmh -Pjmh.include=\"BulkWrite*\"\n```\n\n----------------------------------------\n\nTITLE: Debugging Kotlin/Native Tests with LLDB\nDESCRIPTION: This snippet demonstrates how to use LLDB to debug Kotlin/Native tests. It includes commands for setting breakpoints, running specific tests, and stepping through code.\nSOURCE: https://github.com/realm/realm-kotlin/blob/main/CONTRIBUTING.md#2025-04-16_snippet_8\n\nLANGUAGE: lldb\nCODE:\n```\nlldb packages/test-base/build/bin/macos/debugTest/test.kexe\n```\n\nLANGUAGE: lldb\nCODE:\n```\nbreakpoint set --file realm_coordinator.cpp --line 288\n```\n\nLANGUAGE: lldb\nCODE:\n```\nr --gtest_filter=\"io.realm.MigrationTests.deleteOnMigration\"\n```\n\nLANGUAGE: lldb\nCODE:\n```\ns\n```\n\nLANGUAGE: lldb\nCODE:\n```\nn\n```\n\nLANGUAGE: lldb\nCODE:\n```\nfinish\n```\n\n----------------------------------------\n\nTITLE: Running Android Benchmarks Using Gradle\nDESCRIPTION: Executes Android benchmarks using Jetpack Microbenchmarks via Gradle command. This command runs the benchmarks on a connected Android device or emulator.\nSOURCE: https://github.com/realm/realm-kotlin/blob/main/benchmarks/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew androidApp:connectedCheck -e no-isolated-storage true\n```\n\n----------------------------------------\n\nTITLE: Configuring Kotlin K2 Compilation\nDESCRIPTION: Setting experimental K2 compilation flag in Kotlin project configuration\nSOURCE: https://github.com/realm/realm-kotlin/blob/main/CHANGELOG.md#2025-04-16_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin.experimental.tryK2=true\n```\n\n----------------------------------------\n\nTITLE: Pulling Android Benchmark Data Using ADB\nDESCRIPTION: Retrieves benchmark data from an Android device using ADB. This command pulls the benchmark results JSON file from the device to a local directory.\nSOURCE: https://github.com/realm/realm-kotlin/blob/main/benchmarks/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nadb pull /sdcard/Android/media/io.realm.kotlin.benchmarks.android.test ./benchmark-data/android/\n```\n\n----------------------------------------\n\nTITLE: Running JVM Benchmarks Using Gradle\nDESCRIPTION: Executes JVM benchmarks using Java Microbenchmarking Harness (JMH) via Gradle command. This command cleans the project and runs all JMH benchmarks.\nSOURCE: https://github.com/realm/realm-kotlin/blob/main/benchmarks/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew jvmApp:clean jvmApp:jmh\n```\n\n----------------------------------------\n\nTITLE: Deleting All Github Actions Caches Using Github CLI (Shell)\nDESCRIPTION: This alternative command uses the Github CLI (version 2.42.0 or later from Homebrew) to delete all caches for the Realm Kotlin repository in a single operation.\nSOURCE: https://github.com/realm/realm-kotlin/blob/main/GHA_README.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngh cache delete -a --repo realm/realm-kotlin\n```\n\n----------------------------------------\n\nTITLE: Setting Up Basic CMake Configuration for Realm Kotlin\nDESCRIPTION: Defines the minimum CMake version, project name, and basic settings for building Realm Kotlin. It sets paths for SWIG JNI generated code, JNI helpers, and C++ standard version.\nSOURCE: https://github.com/realm/realm-kotlin/blob/main/packages/cinterop/src/jvm/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.15.0)\nproject(RealmKotlin)\nfind_package(JNI)\nset(SWIG_JNI_GENERATED \"${CMAKE_SOURCE_DIR}/../../../jni-swig-stub/build/generated/sources/jni\")\nset(SWIG_JNI_HELPERS \"${CMAKE_SOURCE_DIR}/../../../jni-swig-stub/src/main/jni\")\nset(CINTEROP_JNI \"${CMAKE_SOURCE_DIR}/jni\")\nset(REALM_TARGET_LINK_LIBS RealmFFIStatic Realm::ObjectStore)\nset(CMAKE_CXX_STANDARD 17)\n```\n\n----------------------------------------\n\nTITLE: Defining Realm C Shared Library Target\nDESCRIPTION: Creates a shared library target named 'realmc' that includes the SWIG-generated and JNI source files. It links against the previously configured Realm target libraries.\nSOURCE: https://github.com/realm/realm-kotlin/blob/main/packages/cinterop/src/jvm/CMakeLists.txt#2025-04-16_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(realmc SHARED\n        ${swig_SRC}\n        ${jni_SRC}\n        )\n\ntarget_link_libraries(realmc ${REALM_TARGET_LINK_LIBS})\n```\n\n----------------------------------------\n\nTITLE: Configuring Platform-Specific Settings for Android\nDESCRIPTION: Sets up Android-specific build configuration for JNI. It defines paths for the C API build, include directories, and adds Android-specific libraries to the link list.\nSOURCE: https://github.com/realm/realm-kotlin/blob/main/packages/cinterop/src/jvm/CMakeLists.txt#2025-04-16_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nelseif (CMAKE_SYSTEM_NAME MATCHES \"^Android\")\n    MESSAGE(\"Building JNI for Android\")\n    set(CAPI_BUILD \"${CMAKE_SOURCE_DIR}/../../../external/core/build-android-${ANDROID_ABI}-${CMAKE_BUILD_TYPE}\")\n    set(REALM_INCLUDE_DIRS ${CAPI_BUILD}/src ${CINTEROP_JNI} ${SWIG_JNI_GENERATED} ${SWIG_JNI_HELPERS})\n    set(REALM_TARGET_LINK_LIBS log android RealmFFIStatic Realm::ObjectStore)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Realm Core Dependencies\nDESCRIPTION: Configures the include directories and builds Realm Core with sync enabled. It adds the Realm Core subdirectory to the build process with specific build options.\nSOURCE: https://github.com/realm/realm-kotlin/blob/main/packages/cinterop/src/jvm/CMakeLists.txt#2025-04-16_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\ninclude_directories(${REALM_INCLUDE_DIRS})\n# Build Realm Core\n# Set option flags for Core.\n# See https://github.com/realm/realm-core/blob/master/CMakeLists.txt#L174 for the full list.\nset(REALM_ENABLE_SYNC ON)\nset(REALM_BUILD_LIB_ONLY ON)\nadd_subdirectory(\"${CMAKE_SOURCE_DIR}/../../../external/core\" core EXCLUDE_FROM_ALL)\n```\n\n----------------------------------------\n\nTITLE: Configuring Platform-Specific Settings for macOS (Darwin)\nDESCRIPTION: Sets up macOS-specific build configuration for JNI. It defines include directories specific to the Darwin platform.\nSOURCE: https://github.com/realm/realm-kotlin/blob/main/packages/cinterop/src/jvm/CMakeLists.txt#2025-04-16_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nelseif (CMAKE_SYSTEM_NAME MATCHES \"^Darwin\")\n    MESSAGE(\"Building JNI for Darwin\")\n    set(REALM_INCLUDE_DIRS \"${CMAKE_BINARY_DIR}/src\" \"${JAVA_INCLUDE_PATH}\" \"${JAVA_INCLUDE_PATH}/darwin\" \"${CINTEROP_JNI}\" \"${SWIG_JNI_GENERATED}\" \"${SWIG_JNI_HELPERS}\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Platform-Specific Settings for Windows\nDESCRIPTION: Configures Windows-specific build settings for the JNI implementation. It sets C++ standard requirements, MSVC runtime library settings, and include directories specific to Windows.\nSOURCE: https://github.com/realm/realm-kotlin/blob/main/packages/cinterop/src/jvm/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif (CMAKE_SYSTEM_NAME MATCHES \"^Windows\")\n    MESSAGE(\"Building JNI for Windows\")\n    set(CMAKE_CXX_STANDARD_REQUIRED ON)\n    set(CMAKE_MSVC_RUNTIME_LIBRARY \"MultiThreaded$<$<CONFIG:Debug>:Debug>\")\n    set(REALM_INCLUDE_DIRS \"${CMAKE_BINARY_DIR}/src\" \"${JAVA_INCLUDE_PATH}\" \"${JAVA_INCLUDE_PATH}/win32\" \"${CINTEROP_JNI}\" \"${SWIG_JNI_GENERATED}\" \"${SWIG_JNI_HELPERS}\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Android-Specific Linker Flags\nDESCRIPTION: Sets Android-specific linker flags for optimizing the build. For release builds, it enables garbage collection of sections and excludes libraries, and sets a maximum page size for all Android builds.\nSOURCE: https://github.com/realm/realm-kotlin/blob/main/packages/cinterop/src/jvm/CMakeLists.txt#2025-04-16_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nif(ANDROID)\n    if (CMAKE_BUILD_TYPE STREQUAL \"Release\" OR CMAKE_BUILD_TYPE STREQUAL \"RelWithDebInfo\")\n        set(CMAKE_SHARED_LINKER_FLAGS \"${CMAKE_SHARED_LINKER_FLAGS} -Wl,-gc-sections -Wl,--exclude-libs,ALL\")\n    endif()\n    set(CMAKE_SHARED_LINKER_FLAGS \"${CMAKE_SHARED_LINKER_FLAGS} -Wl,-z,max-page-size=16384\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Collecting JNI Source Files\nDESCRIPTION: Gathers source files for JNI implementation using a glob pattern. It includes utility files for environment, Java class references, and methods.\nSOURCE: https://github.com/realm/realm-kotlin/blob/main/packages/cinterop/src/jvm/CMakeLists.txt#2025-04-16_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nfile(GLOB jni_SRC\n        \"${CINTEROP_JNI}/env_utils.cpp\"\n        \"${CINTEROP_JNI}/utils.cpp\"\n        \"${CINTEROP_JNI}/java_global_ref_by_move.cpp\"\n        \"${CINTEROP_JNI}/java_class_global_def.cpp\"\n        \"${CINTEROP_JNI}/java_class.cpp\"\n        \"${CINTEROP_JNI}/java_method.cpp\"\n        )\n```\n\n----------------------------------------\n\nTITLE: Collecting SWIG-Generated Source Files\nDESCRIPTION: Gathers SWIG-generated source files and helper files for the Realm C API bindings.\nSOURCE: https://github.com/realm/realm-kotlin/blob/main/packages/cinterop/src/jvm/CMakeLists.txt#2025-04-16_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nfile(GLOB swig_SRC\n        ${SWIG_JNI_GENERATED}/realmc.cpp\n        ${SWIG_JNI_HELPERS}/realm_api_helpers.cpp\n        )\n```\n\n----------------------------------------\n\nTITLE: Running Gradle Tests for Realm Kotlin\nDESCRIPTION: Commands to run Gradle tests for different platforms in the Realm Kotlin project.\nSOURCE: https://github.com/realm/realm-kotlin/blob/main/CONTRIBUTING.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncd packages\n./gradlew :test-base:jvmTest :test-base:connectedAndroidTest :test-base:macosTest :test-base:iosTest\n\n# Note that running the test-sync suite requires running a local server \n# (see `tools/sync_test_server/start_local_server.sh` and `tools/sync_test_server/stop_local_server.sh`)\n\n./gradlew :test-sync:jvmTest :test-sync:connectedAndroidTest :test-sync:macosTest :test-sync:iosTest\n```\n\n----------------------------------------\n\nTITLE: Publishing and Testing Realm Kotlin Maven Artifacts\nDESCRIPTION: Commands to publish Realm Kotlin SDK modules to a local Maven repository and run tests against these artifacts.\nSOURCE: https://github.com/realm/realm-kotlin/blob/main/CONTRIBUTING.md#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncd packages\n./gradlew publishAllPublicationsToTestRepository\n./gradlew -PincludeSdkModules=false jvmTest connectedAndroidTest macosTest iosTest\n```\n\n----------------------------------------\n\nTITLE: Deleting All Github Actions Caches for Realm Kotlin (Shell)\nDESCRIPTION: This shell command iterates through all Github Actions caches for the Realm Kotlin repository and deletes them individually. It requires the Github CLI to be installed and authenticated, as well as the jq tool.\nSOURCE: https://github.com/realm/realm-kotlin/blob/main/GHA_README.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngh api -H 'Accept: application/vnd.github+json' /repos/realm/realm-kotlin/actions/caches --paginate | jq -r '.actions_caches | .[].id' | xargs -I {} sh -c 'gh api --method DELETE -H \"Accept: application/vnd.github+json\" /repos/realm/realm-kotlin/actions/caches/{} --silent'\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Hooks for Realm Kotlin\nDESCRIPTION: Command to configure git hooks for automatic code style checks before pushing in the Realm Kotlin project.\nSOURCE: https://github.com/realm/realm-kotlin/blob/main/CONTRIBUTING.md#2025-04-16_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ngit config core.hooksPath .githooks\n```\n\n----------------------------------------\n\nTITLE: Configuring Platform-Specific Settings for Linux\nDESCRIPTION: Sets up Linux-specific build configuration for JNI. It defines include directories specific to the Linux platform.\nSOURCE: https://github.com/realm/realm-kotlin/blob/main/packages/cinterop/src/jvm/CMakeLists.txt#2025-04-16_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nelseif (CMAKE_SYSTEM_NAME MATCHES \"^Linux\")\n    MESSAGE(\"Building JNI for Linux\")\n    set(REALM_INCLUDE_DIRS \"${CMAKE_BINARY_DIR}/src\" \"${JAVA_INCLUDE_PATH}\" \"${JAVA_INCLUDE_PATH}/linux\" \"${CINTEROP_JNI}\" \"${SWIG_JNI_GENERATED}\" \"${SWIG_JNI_HELPERS}\")\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Enabling Root Access on Android Emulator\nDESCRIPTION: Commands to enable root access on an Android emulator for testing purposes.\nSOURCE: https://github.com/realm/realm-kotlin/blob/main/CONTRIBUTING.md#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n# Enable root acces\nadb root\n\n# Check if it works\n# Enter file system of emulator\nadb shell\n<your_emulator>:/ > cd data/\n<your_emulator>:/ > exit\n```\n\n----------------------------------------\n\nTITLE: Defining Realm Kotlin Package\nDESCRIPTION: Package declaration for Realm Kotlin migration interfaces. This defines the namespace where migration-related interfaces will be located.\nSOURCE: https://github.com/realm/realm-kotlin/blob/main/packages/library-base/src/commonMain/kotlin/io/realm/kotlin/migration/info.md#2025-04-16_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\n# package io.realm.kotlin\n```"
  }
]