[
  {
    "owner": "browserbase",
    "repo": "docs",
    "content": "TITLE: Connecting to Browserbase with Puppeteer\nDESCRIPTION: This code snippet demonstrates how to connect to Browserbase using Puppeteer. It establishes a connection using the Browserbase API key, creates a new page, navigates to the Browserbase website, and then properly closes both the page and browser.\nSOURCE: https://github.com/browserbase/docs/blob/main/quickstart/puppeteer.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport puppeteer from \"puppeteer-core\";\n\n(async () => {\n  const browser = await puppeteer.connect({\n    browserWSEndpoint:\n    `wss://connect.browserbase.com?apiKey=${process.env.BROWSERBASE_API_KEY}`\n  });\n\n  const page = await browser.newPage();\n\n  await page.goto(\"https://www.browserbase.com\");\n  await page.close();\n  await browser.close();\n})().catch((error) => console.error(error.message));\n```\n\n----------------------------------------\n\nTITLE: Connecting to Browserbase with Playwright in Python\nDESCRIPTION: This Python example shows how to integrate Browserbase with Playwright in Python. It connects to Browserbase using CDP over WebSocket with your API key, accesses the default browser context, and retrieves the first page to interact with it.\nSOURCE: https://github.com/browserbase/docs/blob/main/quickstart/playwright.mdx#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom playwright.sync_api import sync_playwright, Playwright\n\ndef run(playwright: Playwright):\n    chromium = playwright.chromium\n    browser = chromium.connect_over_cdp('wss://connect.browserbase.com?apiKey='+ os.environ[\"BROWSERBASE_API_KEY\"])\n    context = browser.contexts[0]\n    page = context.pages[0]\n\nwith sync_playwright() as playwright:\n    run(playwright)\n```\n\n----------------------------------------\n\nTITLE: Creating a Session with Puppeteer in TypeScript\nDESCRIPTION: Shows how to create and connect to a Browserbase session using Puppeteer with TypeScript. This snippet establishes a connection, creates a new page, navigates to a URL, and properly closes resources.\nSOURCE: https://github.com/browserbase/docs/blob/main/features/sessions.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport puppeteer from \"puppeteer-core\";\n\n(async () => {\n  const browser = await puppeteer.connect({\n    browserWSEndpoint: `wss://connect.browserbase.com?apiKey=${process.env.BROWSERBASE_API_KEY}`,\n  });\n  const page = await browser.newPage();\n\n  await page.goto(\"https://www.browserbase.com\");\n  await page.close();\n  await browser.close();\n})().catch((error) => console.error(error.message));\n```\n\n----------------------------------------\n\nTITLE: Implementing a Browser Pool Task Processor with Playwright and Browserbase\nDESCRIPTION: The processBrowserbaseTasks() utility creates 5 Browserbase Sessions and reuses the available pages between tasks. It manages a task queue that's processed in parallel across multiple browser instances.\nSOURCE: https://github.com/browserbase/docs/blob/main/guides/parallelization.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Page, chromium } from \"playwright-core\";\n\nexport async function processBrowserbaseTasks<R>(\n  tasks: ((page: Page) => Promise<R>)[]\n): Promise<R[]> {\n  const tasksQueue = tasks.slice();\n  const resultsQueue: R[] = [];\n\n  const createBrowserSession = async (browserWSEndpoint: string) => {\n    const browser = await chromium.connectOverCDP(browserWSEndpoint);\n    const page = await browser.newPage(); // Create a single page for this session\n\n    while (true) {\n      if (tasksQueue.length > 0) {\n        const task = tasksQueue.shift();\n        if (task) {\n          const result = await task(page);\n          resultsQueue.push(result);\n        }\n      } else {\n        break;\n      }\n    }\n\n    await page.close();\n    await browser.close();\n  };\n\n  const browserWSEndpoint = `wss://api.browserbase.com?apiKey=${process.env.BROWSERBASE_API_KEY}&enableProxy=true`;\n  const sessions = Array.from({ length: 5 }, () =>\n    createBrowserSession(browserWSEndpoint)\n  );\n\n  await Promise.all(sessions);\n\n  return resultsQueue;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Session with Playwright in Python\nDESCRIPTION: Demonstrates how to create and connect to a Browserbase session using Playwright with Python. The code establishes a connection over CDP and accesses the default context and page.\nSOURCE: https://github.com/browserbase/docs/blob/main/features/sessions.mdx#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom playwright.sync_api import sync_playwright, Playwright\n\ndef run(playwright: Playwright):\n    chromium = playwright.chromium\n    browser = chromium.connect_over_cdp('wss://connect.browserbase.com?apiKey=${process.env.BROWSERBASE_API_KEY}')\n    context = browser.contexts[0]\n    page = context.pages[0]\n\nwith sync_playwright() as playwright:\n    run(playwright)\n```\n\n----------------------------------------\n\nTITLE: Implementing a Haystack Pipeline with Browserbase Fetcher\nDESCRIPTION: Creates a complete Haystack pipeline that fetches web page content using Browserbase, builds a prompt with the fetched data, and processes it with OpenAI. The example retrieves content from example.com and asks the LLM to extract page titles.\nSOURCE: https://github.com/browserbase/docs/blob/main/integrations/haystack/python.mdx#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom haystack import Pipeline\nfrom haystack.components.generators import OpenAIGenerator\nfrom haystack.components.builders import PromptBuilder\nfrom browserbase_haystack import BrowserbaseFetcher\n\nprompt_template = (\n    \"Tell me the titles of the given pages. Pages: {{ documents }}\"\n)\nprompt_builder = PromptBuilder(template=prompt_template)\nllm = OpenAIGenerator()\n\nbrowserbase_fetcher = BrowserbaseFetcher()\n\npipe = Pipeline()\npipe.add_component(\"fetcher\", browserbase_fetcher)\npipe.add_component(\"prompt_builder\", prompt_builder)\npipe.add_component(\"llm\", llm)\n\npipe.connect(\"fetcher.documents\", \"prompt_builder.documents\")\npipe.connect(\"prompt_builder.prompt\", \"llm.prompt\")\nresult = pipe.run(data={\"fetcher\": {\"urls\": [\"https://example.com\"]}})\n```\n\n----------------------------------------\n\nTITLE: Creating a Session with Selenium in Python\nDESCRIPTION: Shows how to create a Browserbase session using the Sessions API and connect to it with Selenium in Python. The code includes a custom connection handler to manage session headers and performs a simple navigation.\nSOURCE: https://github.com/browserbase/docs/blob/main/features/sessions.mdx#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom selenium import webdriver\nfrom selenium.webdriver.remote.remote_connection import RemoteConnection\nfrom selenium.webdriver.common.desired_capabilities import DesiredCapabilities\nimport requests\nimport os\n\ndef create_session():\n    url = 'https://www.browserbase.com/v1/sessions'\n    headers = {'Content-Type': 'application/json', 'x-bb-api-key': os.environ[\"BROWSERBASE_API_KEY\"]}\n    json = {\n        \"projectId\": os.environ[\"BROWSERBASE_PROJECT_ID\"],\n        # Fingerprint options\n        \"fingerprint\": {\n            \"locales\": [\"en\", \"en-US\", \"de\"],\n            \"operatingSystems\": [\"android\"]\n        }\n    }\n    response = requests.post(url, json=json, headers=headers)\n    return response.json()['id']\n\n\nclass CustomRemoteConnection(RemoteConnection):\n    _session_id = None\n\n    def __init__(self, remote_server_addr: str, session_id: str):\n        super().__init__(remote_server_addr)\n        self._session_id = session_id\n\n    def get_remote_connection_headers(self, parsed_url, keep_alive=False):\n        headers = super().get_remote_connection_headers(parsed_url, keep_alive)\n        headers.update({'x-bb-api-key': os.environ[\"BROWSERBASE_API_KEY\"]})\n        headers.update({'session-id': self._session_id})\n        return headers\n\n\ndef run():\n    session_id = create_session()\n    custom_conn = CustomRemoteConnection('http://connect.browserbase.com/webdriver', session_id)\n    options = webdriver.ChromeOptions()\n    options.debugger_address = \"localhost:9223\"\n    driver = webdriver.Remote(custom_conn, options=options)\n    driver.get(\"https://www.browserbase.com\")\n    get_title = driver.title\n    print(get_title)\n    # Make sure to quit the driver so your session is ended!\n    driver.quit()\n\nrun()\n```\n\n----------------------------------------\n\nTITLE: Connecting to Browserbase with Proxies using Playwright in TypeScript\nDESCRIPTION: This code demonstrates how to connect a Playwright browser to Browserbase with proxy support enabled. It establishes a connection over CDP, gets the default browser context to ensure session recording, and navigates to a sign-in page.\nSOURCE: https://github.com/browserbase/docs/blob/main/guides/authentication.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { chromium } from \"playwright-core\";\n\n(async () => {\n  const browser = await chromium.connectOverCDP(\n    `wss://connect.browserbase.com?apiKey=${process.env.BROWSERBASE_API_KEY}&enableProxy=true`,\n  );\n\n  // Getting the default context to ensure the sessions are recorded.\n  const defaultContext = browser.contexts()[0];\n  const page = defaultContext.pages()[0];\n\n  await page.goto(\"https://browserbase.com/sign-in\");\n  await page.close();\n  await browser.close();\n})().catch((error) => console.error(error.message));\n```\n\n----------------------------------------\n\nTITLE: Retrieving Amazon Wishlist Items with User Authentication\nDESCRIPTION: This code demonstrates how to pause automation to allow a user to enter credentials on an Amazon login page. It retrieves a debug connection URL that can be sent to the user, then waits for the user to complete the authentication flow before continuing with wishlist item collection.\nSOURCE: https://github.com/browserbase/docs/blob/main/guides/session-debug-connection/browser-remote-control.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nasync function retrieveDebugConnectionURL(sessionId) {\n  const response = await fetch(\n    `https://www.browserbase.com/v1/sessions/${sessionId}/debug`,\n    {\n      method: \"GET\",\n      headers: {\n        'x-bb-api-key': `${process.env.BROWSERBASE_API_KEY}`,\n      },\n    }\n  );\n  const json = await response.json();\n  return json.debuggerFullscreenUrl;\n}\n\nasync function retrieveAmazonWishlistItems(sessionId, page) {\n  await page.goto(\n    `https://www.amazon.com/ap/signin?openid.pape.max_auth_age=0&openid.return_to=https%3A%2F%2Fwww.amazon.com%2F%3Fref_%3Dnav_signin&openid.identity=http%3A%2F%2Fspecs.openid.net%2Fauth%2F2.0%2Fidentifier_select&openid.assoc_handle=usflex&openid.mode=checkid_setup&openid.claimed_id=http%3A%2F%2Fspecs.openid.net%2Fauth%2F2.0%2Fidentifier_select&openid.ns=http%3A%2F%2Fspecs.openid.net%2Fauth%2F2.0`,\n    {\n      // let's make sure the page is fully loaded before asking for the live debug URL\n      waitUntil: \"domcontentloaded\",\n    }\n  );\n\n  const debugRemoteURL = await retrieveDebugConnectionURL(sessionId)\n\n  await sendCredentialsPageUrlToUser(debugRemoteURL)\n\n  // now, let's wait for the user to complete the credential flow\n\n  await page.waitForSelector('#nav-flyout-wl-items > div > a:nth-child(2) > span', {\n    timeout: 300000 // give 5 minutes,\n    visible: false\n  })\n\n  // Once we are here:\n  // 1. navigate to https://www.amazon.com/hz/wishlist/ls\n  // 2. collect items and navigates pagination\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to BrowserBase using Playwright with TypeScript\nDESCRIPTION: Example showing how to connect to BrowserBase using Playwright with TypeScript via the WebSocket API. Authentication is handled by providing an API key as a query parameter.\nSOURCE: https://github.com/browserbase/docs/blob/main/api-reference/connect.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { chromium } from \"playwright-core\";\n\n(async () => {\n  const browser = await chromium.connectOverCDP(\n    `wss://connect.browserbase.com?apiKey=${process.env.BROWSERBASE_API_KEY}`,\n  );\n\n  // ...\n})();\n```\n\n----------------------------------------\n\nTITLE: Connecting to Browserbase with Playwright in TypeScript\nDESCRIPTION: This TypeScript example demonstrates how to connect to Browserbase using Playwright. It creates a CDP connection to Browserbase's WebSocket endpoint using your API key, accesses the default browser context, navigates to a webpage, and properly closes the session.\nSOURCE: https://github.com/browserbase/docs/blob/main/quickstart/playwright.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { chromium } from \"playwright-core\";\n\n(async () => {\n  const browser = await chromium.connectOverCDP(\n    `wss://connect.browserbase.com?apiKey=${process.env.BROWSERBASE_API_KEY}`\n  );\n\n  //Getting the default context to ensure the sessions are recorded.\n  const defaultContext = browser.contexts()[0];\n  const page = defaultContext.pages()[0];\n\n  await page.goto(\"https://browserbase.com/\");\n  await page.close();\n  await browser.close();\n})().catch((error) => console.error(error.message));\n```\n\n----------------------------------------\n\nTITLE: Loading documents with BrowserbaseLoader in TypeScript\nDESCRIPTION: This code snippet demonstrates how to use the BrowserbaseLoader to load documents from a specified URL. It imports the necessary module, creates a loader instance, and loads the documents. The 'textContent' option determines whether to return HTML or text-only content.\nSOURCE: https://github.com/browserbase/docs/blob/main/integrations/langchain/javascript-typescript.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  BrowserbaseLoader\n} from \"langchain/document_loaders/web/browserbase.js\";\n\nconst loader = new BrowserbaseLoader(\n  [\"https://example.com\"],\n  { textContent: true }\n);\nconst docs = await loader.load();\n```\n\n----------------------------------------\n\nTITLE: Connecting to BrowserBase using Playwright with Python\nDESCRIPTION: Example showing how to connect to BrowserBase using Playwright with Python via the WebSocket API. Authentication is handled by providing an API key as a query parameter.\nSOURCE: https://github.com/browserbase/docs/blob/main/api-reference/connect.mdx#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom playwright.sync_api import sync_playwright, Playwright\n\ndef run(playwright: Playwright):\n    chromium = playwright.chromium\n    browser = chromium.connect_over_cdp('wss://connect.browserbase.com?apiKey='+ os.environ[\"BROWSERBASE_API_KEY\"])\n    context = browser.contexts[0]\n    page = context.pages[0]\n\nwith sync_playwright() as playwright:\n    run(playwright)\n```\n\n----------------------------------------\n\nTITLE: Taking Screenshots with Playwright (TypeScript)\nDESCRIPTION: This snippet demonstrates how to connect to a Browserbase session using Playwright, navigate to a website, take a full-page screenshot, and save it locally as a JPEG file. It includes proper error handling and session cleanup.\nSOURCE: https://github.com/browserbase/docs/blob/main/features/screenshots-and-downloads.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { writeFileSync } from \"fs\";\nimport { chromium } from \"playwright-core\";\n\n(async () => {\n  console.log(\"Starting remote browser...\")\n  const browser = await chromium.connectOverCDP(\n      // we connect to a Session created via the API\n      `wss://connect.browserbase.com?apiKey=${process.env.BROWSERBASE_API_KEY}&sessionId=${sessionId}`,\n  );\n  const defaultContext = browser.contexts()[0];\n  const page = defaultContext.pages()[0];\n\n  await page.goto(\"https://www.browserbase.com\", {\n      // let's make sure the page is fully loaded before taking the screenshot\n      waitUntil: \"domcontentloaded\",\n  });\n\n  console.log(\"Taking a screenshot!\")\n\n  const buf = await page.screenshot({ fullPage: true })\n  writeFileSync('screenshot.jpeg', buf)\n\n  console.log(\"Shutting down...\")\n  await page.close();\n  await browser.close();\n})().catch((error) => {\n    console.error(error)\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Selenium Session with Browserbase in TypeScript\nDESCRIPTION: This TypeScript code demonstrates how to initialize a Selenium WebDriver session using Browserbase. It creates a session via API call, configures a custom HTTP agent to include authentication headers, and sets up Chrome WebDriver with debugger address options to connect to Browserbase's remote WebDriver server.\nSOURCE: https://github.com/browserbase/docs/blob/main/quickstart/selenium.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport http from \"http\";\nimport webdriver from \"selenium-webdriver\";\nimport chrome from \"selenium-webdriver/chrome\";\n\nasync function createSession() {\n  const response = await fetch(`https://www.browserbase.com/v1/sessions`, {\n    method: 'POST',\n    headers: {\n      \"x-bb-api-key\": process.env.BROWSERBASE_API_KEY,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({ projectId: process.env.BROWSERBASE_PROJECT_ID })\n  });\n  return await response.json();\n}\n\n\n(async () => {\n  const session = await createSession();\n\n  const customHttpAgent = new http.Agent({});\n  (customHttpAgent as any).addRequest = (req: any, options: any) => {\n    // Session ID needs to be set here\n    req.setHeader(\"session-id\", session.id);\n    req.setHeader(\"x-bb-api-key\", process.env.BROWSERBASE_API_KEY);\n    (http.Agent.prototype as any).addRequest.call(customHttpAgent, req, options);\n  };\n\n  // We set a debuggerAddress so the server-side WebDriver can connect.\n  const options = new chrome.Options();\n  options.debuggerAddress(\"localhost:9223\");\n\n  const driver = new webdriver.Builder()\n    .forBrowser(\"chrome\")\n    .setChromeOptions(options)\n    .usingHttpAgent(customHttpAgent)\n    .usingServer(\n      `http://connect.browserbase.com/webdriver` // Selenium only supports HTTP\n    )\n    .build();\n\n  await driver.get(\"https://www.browserbase.com\");\n\n  // Make sure to quit the driver so your session is ended!\n  await driver.quit();\n})().catch((error) => console.error(error.message));\n```\n\n----------------------------------------\n\nTITLE: Taking Screenshots with Playwright (Python)\nDESCRIPTION: This Python snippet demonstrates using Playwright to connect to a Browserbase session, navigate to a website, and save a full-page screenshot to disk. It shows the proper setup, navigation, screenshot capture, and cleanup process in Python.\nSOURCE: https://github.com/browserbase/docs/blob/main/features/screenshots-and-downloads.mdx#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom playwright.sync_api import sync_playwright, Playwright\nimport os\n\ndef main(p: Playwright):\n    print(\"Starting remote browser...\")\n        browser = await p.chromium.connect_over_cdp(\n            f\"wss://connect.browserbase.com?apiKey={os.environ['BROWSERBASE_API_KEY']}&sessionId={sessionId}\"\n        )\n        context = await browser.new_context()\n        page = await context.new_page()\n\n        await page.goto(\"https://www.browserbase.com\", wait_until=\"domcontentloaded\")\n\n        print(\"Taking a screenshot!\")\n\n        await page.screenshot(path='screenshot.jpeg', full_page=True)\n\n        print(\"Shutting down...\")\n        await browser.close()\n\nwith sync_playwright() as playwright:\n    run(playwright)\n```\n\n----------------------------------------\n\nTITLE: Loading Web Pages with Browserbase\nDESCRIPTION: Demonstrates how to load single or multiple web pages and retrieve either raw HTML or text content. Supports various options including session ID and proxy settings.\nSOURCE: https://github.com/browserbase/docs/blob/main/api-reference/typescript-sdk.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Browserbase } from \"@browserbasehq/sdk\";\n\n// Init the SDK\nconst browserbase = new Browserbase();\n\n// Load a webpage\nconst rawHtml = await browserbase.load(\"https://www.browserbase.com\");\n\n// Load multiple webpages (returns iterator)\nconst rawHtmls = browserbase.load([\n  \"https://www.browserbase.com\",\n  \"https://docs.browserbase.com\",\n]);\n\nfor await (let rawHtml of rawHtmls) {\n  // ...\n}\n\n// Text-only mode\nconst text = await browserbase.load(\"https://www.browserbase.com\", {\n  textContent: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Connecting to Browserbase with Proxy using Playwright in TypeScript\nDESCRIPTION: This snippet demonstrates how to connect to Browserbase using Playwright in TypeScript, with proxy enabled. It establishes a connection, creates a new page, navigates to a URL, and then closes the browser.\nSOURCE: https://github.com/browserbase/docs/blob/main/features/stealth-mode.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { chromium } from \"playwright-core\";\n\n(async () => {\n  const browser = await chromium.connectOverCDP(\n    `wss://connect.browserbase.com?apiKey=${process.env.BROWSERBASE_API_KEY}&enableProxy=true`,\n  );\n\n  // Getting the default context to ensure the sessions are recorded.\n  const defaultContext = browser.contexts()[0];\n  const page = defaultContext.pages()[0];\n\n  await page.goto(\"https://browserbase.com/\");\n  await page.close();\n  await browser.close();\n})().catch((error) => console.error(error.message));\n```\n\n----------------------------------------\n\nTITLE: Loading Web Content with Browserbase in Python\nDESCRIPTION: Fetches content from one or multiple URLs, with options to return either raw HTML or text-only content. Returns a single result or an iterator for multiple URLs.\nSOURCE: https://github.com/browserbase/docs/blob/main/api-reference/python-sdk.mdx#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom browserbase import Browserbase\n\n# Init the SDK\nbrowserbase = Browserbase(os.environ[\"BROWSERBASE_API_KEY\"])\n\n# Load a webpage\nresult = browserbase.load(\"https://example.com\")\n\n# Load multiple webpages (returns iterator)\nresult = browserbase.load([\"https://example.com\"])\n\n# Text-only mode\nresult = browserbase.load(\"https://example.com\", text_content=True)\n```\n\n----------------------------------------\n\nTITLE: Connecting to Browserbase with Proxy using Puppeteer in TypeScript\nDESCRIPTION: This code snippet shows how to connect to Browserbase using Puppeteer in TypeScript, with proxy enabled. It connects to the browser, creates a new page, navigates to a URL, and then closes the browser.\nSOURCE: https://github.com/browserbase/docs/blob/main/features/stealth-mode.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport puppeteer from \"puppeteer-core\";\n\n(async () => {\n  const browser = await puppeteer.connect({\n    browserWSEndpoint: `wss://connect.browserbase.com?apiKey=${process.env.BROWSERBASE_API_KEY}&enableProxy=true`,\n  });\n\n  const page = await browser.newPage();\n\n  await page.goto(\"https://www.browserbase.com\");\n  await page.close();\n  await browser.close();\n})().catch((error) => console.error(error.message));\n```\n\n----------------------------------------\n\nTITLE: Creating a Browserbase Session with Fingerprinting in Selenium (Python)\nDESCRIPTION: This code demonstrates creating a Browserbase session with fingerprinting options using Selenium in Python. It includes a custom RemoteConnection class to handle session headers and enables proxy configuration.\nSOURCE: https://github.com/browserbase/docs/blob/main/features/stealth-mode.mdx#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom selenium import webdriver\nfrom selenium.webdriver.remote.remote_connection import RemoteConnection\nfrom selenium.webdriver.common.desired_capabilities import DesiredCapabilities\nimport requests\nimport os\n\ndef create_session():\n    url = 'https://www.browserbase.com/v1/sessions'\n    headers = {'Content-Type': 'application/json', 'x-bb-api-key': os.environ[\"BROWSERBASE_API_KEY\"]}\n    json = {\n        \"projectId\": os.environ[\"BROWSERBASE_PROJECT_ID\"],\n        # Fingerprint options\n        \"fingerprint\": {\n            \"locales\": [\"en\", \"en-US\", \"de\"],\n            \"operatingSystems\": [\"android\"]\n        }\n    }\n    response = requests.post(url, json=json, headers=headers)\n    return response.json()['id']\n\n\nclass CustomRemoteConnection(RemoteConnection):\n    _session_id = None\n\n    def __init__(self, remote_server_addr: str, session_id: str):\n        super().__init__(remote_server_addr)\n        self._session_id = session_id\n\n    def get_remote_connection_headers(self, parsed_url, keep_alive=False):\n        headers = super().get_remote_connection_headers(parsed_url, keep_alive)\n        headers.update({'x-bb-api-key': os.environ[\"BROWSERBASE_API_KEY\"]})\n        headers.update({'session-id': self._session_id})\n        # enable proxy here\n        headers.update({'enable-proxy': \"true\"})\n        return headers\n\n\ndef run():\n    session_id = create_session()\n    custom_conn = CustomRemoteConnection('http://connect.browserbase.com/webdriver', session_id)\n    options = webdriver.ChromeOptions()\n    options.debugger_address = \"localhost:9223\"\n    driver = webdriver.Remote(custom_conn, options=options)\n    driver.get(\"https://www.browserbase.com\")\n    get_title = driver.title\n    print(get_title)\n    # Make sure to quit the driver so your session is ended!\n    driver.quit()\n\nrun()\n```\n\n----------------------------------------\n\nTITLE: Creating a Session with Playwright in TypeScript\nDESCRIPTION: Demonstrates how to create and connect to a Browserbase session using Playwright with TypeScript. The code establishes a connection over CDP, performs a simple page navigation, and properly closes resources afterward.\nSOURCE: https://github.com/browserbase/docs/blob/main/features/sessions.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { chromium } from \"playwright-core\";\n(async () => {\n  const browser = await chromium.connectOverCDP(\n    `wss://connect.browserbase.com?apiKey=${process.env.BROWSERBASE_API_KEY}`,\n  );\n  const defaultContext = browser.contexts()[0];\n  const page = defaultContext.pages()[0];\n\n  await page.goto(\"https://www.browserbase.com\");\n\n  await page.close();\n  await browser.close();\n})().catch((error) => console.error(error.message));\n```\n\n----------------------------------------\n\nTITLE: Initializing Browser Session with Playwright TypeScript\nDESCRIPTION: Example showing how to connect to Browserbase using Playwright with TypeScript, demonstrating Browser, BrowserContext and Page object initialization and usage\nSOURCE: https://github.com/browserbase/docs/blob/main/guides/browser-contexts-and-pages.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { chromium } from \"playwright-core\";\n\n(async () => {\n  // 1. Get a Browser instance\n  const browser = await chromium.connectOverCDP(\n    `wss://connect.browserbase.com?apiKey=${process.env.BROWSERBASE_API_KEY}`\n  );\n\n  // 2. Get a BrowserContext\n  const defaultContext = browser.contexts()[0];\n  // 3. Get a Page\n  const page = defaultContext.pages()[0];\n\n  // 4. Act on Page\n  await page.goto(\"https://browserbase.com/\");\n  await page.close();\n  await browser.close();\n})().catch((error) => console.error(error.message));\n```\n\n----------------------------------------\n\nTITLE: Creating a Selenium Session with Browserbase in Python\nDESCRIPTION: This Python code shows how to set up a Selenium WebDriver session with Browserbase. It creates a custom RemoteConnection class to add authentication headers, creates a session using the Browserbase API, and configures the Chrome WebDriver with the necessary options to connect to Browserbase's remote server.\nSOURCE: https://github.com/browserbase/docs/blob/main/quickstart/selenium.mdx#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom selenium import webdriver\nfrom selenium.webdriver.remote.remote_connection import RemoteConnection\nfrom selenium.webdriver.common.desired_capabilities import DesiredCapabilities\nimport requests\nimport os\n\ndef create_session():\n    url = 'https://www.browserbase.com/v1/sessions'\n    headers = {'Content-Type': 'application/json', 'x-bb-api-key': os.environ[\"BROWSERBASE_API_KEY\"]}\n    response = requests.post(url, json={ \"projectId\": os.environ[\"BROWSERBASE_PROJECT_ID\"] }, headers=headers)\n    return response.json()['id']\n\n\nclass CustomRemoteConnection(RemoteConnection):\n    _session_id = None\n\n    def __init__(self, remote_server_addr: str, session_id: str):\n        super().__init__(remote_server_addr)\n        self._session_id = session_id\n\n    def get_remote_connection_headers(self, parsed_url, keep_alive=False):\n        headers = super().get_remote_connection_headers(parsed_url, keep_alive)\n        headers.update({'x-bb-api-key': os.environ[\"BROWSERBASE_API_KEY\"]})\n        headers.update({'session-id': self._session_id})\n        return headers\n\n\ndef run():\n    session_id = create_session()\n    custom_conn = CustomRemoteConnection('http://connect.browserbase.com/webdriver', session_id)\n    options = webdriver.ChromeOptions()\n    options.debugger_address = \"localhost:9223\"\n    driver = webdriver.Remote(custom_conn, options=options)\n    driver.get(\"https://www.browserbase.com\")\n    get_title = driver.title\n    print(get_title)\n    # Make sure to quit the driver so your session is ended!\n    driver.quit()\n\nrun()\n```\n\n----------------------------------------\n\nTITLE: Downloading Files with Playwright (TypeScript)\nDESCRIPTION: This code demonstrates how to download files using Playwright with Browserbase. It configures download behavior using CDP, initiates a download, and then fetches the downloaded files from Browserbase's storage using a polling mechanism that retries for a specified duration.\nSOURCE: https://github.com/browserbase/docs/blob/main/features/screenshots-and-downloads.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { chromium } from \"playwright-core\";\nimport { writeFileSync } from \"node:fs\";\n\nasync function saveDownloadsOnDisk(sessionId: string, retryForSeconds: number) {\n  return new Promise<void>((resolve, reject) => {\n    let pooler;\n    const timeout = setTimeout(() => {\n      if (pooler) {\n        clearInterval(pooler);\n      }\n    }, retryForSeconds);\n    async function fetchDownloads() {\n      try {\n        const response = await fetch(\n          `https://www.browserbase.com/v1/sessions/${sessionId}/downloads`,\n          {\n            method: \"GET\",\n            headers: {\n              \"x-bb-api-key\": process.env.BROWSERBASE_API_KEY!,\n            },\n          },\n        );\n        const arrayBuffer = await response.arrayBuffer();\n        if (arrayBuffer.byteLength > 0) {\n          const buffer = Buffer.from(arrayBuffer);\n          writeFileSync(\"downloads.zip\", buffer);\n          clearInterval(pooler);\n          clearTimeout(timeout);\n          resolve();\n        }\n      } catch (e) {\n        clearInterval(pooler);\n        clearTimeout(timeout);\n        reject(e);\n      }\n    }\n    pooler = setInterval(fetchDownloads, 2000);\n  });\n}\n\n(async () => {\n  // `createSession()` performs a call to the Browserbase Session API\n  const { id: sessionId } = await createSession();\n  const browser = await chromium.connectOverCDP(\n    // we connect to a Session created via the API\n    `wss://connect.browserbase.com?apiKey=${process.env.BROWSERBASE_API_KEY}&sessionId=${sessionId}`,\n  );\n  const defaultContext = browser.contexts()[0];\n  const page = defaultContext.pages()[0];\n\n  // Required to avoid playwright overriding location\n  const client = await defaultContext.newCDPSession(page);\n  await client.send(\"Page.setDownloadBehavior\", {\n    behavior: \"allow\",\n    downloadPath: \"downloads\",\n    //@ts-ignore\n    eventsEnabled: true,\n  });\n\n  await page.goto(\"https://browser-tests-alpha.vercel.app/api/download-test\");\n\n  const [download] = await Promise.all([\n    page.waitForEvent(\"download\"),\n    page.locator(\"#download\").click(),\n  ]);\n\n  let downloadError = await download.failure();\n  if (downloadError !== null) {\n    console.log(\"Error happened on download:\", downloadError);\n    throw new Error(downloadError);\n  }\n\n  await page.close();\n  await browser.close();\n\n  if (!downloadError) {\n    // wait up to 20s to save the downloaded files locally\n    await saveDownloadsOnDisk(sessionId, 20000);\n  }\n})().catch((error) => console.error(error.message));\n```\n\n----------------------------------------\n\nTITLE: Initializing Browser Session with Puppeteer TypeScript\nDESCRIPTION: Example showing how to connect to Browserbase using Puppeteer with TypeScript, demonstrating Browser and Page object initialization and usage\nSOURCE: https://github.com/browserbase/docs/blob/main/guides/browser-contexts-and-pages.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport puppeteer from \"puppeteer-core\";\n\n(async () => {\n  // 1. Get a Browser instance\n  const browser = await puppeteer.connect({\n    browserWSEndpoint:\n    `wss://connect.browserbase.com?apiKey=${process.env.BROWSERBASE_API_KEY}`\n  });\n\n  // 2. Get a Page\n  const page = await browser.newPage();\n\n  // 3. Act on Page\n  await page.goto(\"https://www.browserbase.com\");\n  await page.close();\n  await browser.close();\n})().catch((error) => console.error(error.message));\n```\n\n----------------------------------------\n\nTITLE: Creating a Browserbase Session with Fingerprinting in Puppeteer (TypeScript)\nDESCRIPTION: This example shows how to create a Browserbase session with custom fingerprint settings using Puppeteer in TypeScript. It sets locale preferences and operating system before connecting to the browser via WebSocket.\nSOURCE: https://github.com/browserbase/docs/blob/main/features/stealth-mode.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst puppeteer = require(\"puppeteer\");\n\nasync function createSession() {\n  const response = await fetch(`https://www.browserbase.com/v1/sessions`, {\n    method: \"POST\",\n    headers: {\n      \"x-bb-api-key\": `${process.env.BROWSERBASE_API_KEY}`,\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      projectId: process.env.BROWSERBASE_PROJECT_ID,\n      fingerprint: {\n        locales: [\"en\", \"en-US\", \"de\"],\n        operatingSystems: [\"android\"],\n      },\n    }),\n  });\n  const json = await response.json();\n  return json;\n}\n\n(async () => {\n  const { id } = await createSession();\n  const browser = await puppeteer.connect({\n    browserWSEndpoint: `wss://connect.browserbase.com?apiKey=${process.env.BROWSERBASE_API_KEY}&sessionId=${id}`,\n  });\n  const pages = await browser.pages();\n  const page = pages[0];\n\n  await page.goto(\"https://www.browserbase.com\");\n\n  await page.close();\n  await browser.close();\n})().catch(console.error);\n```\n\n----------------------------------------\n\nTITLE: Initializing Browser Session with Playwright Python\nDESCRIPTION: Example showing how to connect to Browserbase using Playwright with Python, demonstrating Browser, BrowserContext and Page object initialization\nSOURCE: https://github.com/browserbase/docs/blob/main/guides/browser-contexts-and-pages.mdx#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom playwright.sync_api import sync_playwright, Playwright\n\ndef run(playwright: Playwright):\n    chromium = playwright.chromium\n    # 1. Get a Browser instance\n    browser = chromium.connect_over_cdp('wss://connect.browserbase.com?apiKey=${process.env.BROWSERBASE_API_KEY}')\n    # 2. Get a BrowserContext\n    context = browser.contexts[0]\n    # 3. Get a Page\n    page = context.pages[0]\n\n    # 4. Act on Page\n\n    # ...\n\nwith sync_playwright() as playwright:\n    run(playwright)\n```\n\n----------------------------------------\n\nTITLE: Capturing and Processing Screenshots with Browserbase for GPT-4V\nDESCRIPTION: Python code demonstrating how to use Browserbase to capture screenshots of web pages and create image objects compatible with GPT-4V (Vision) models. It shows how to initialize the Browserbase client, take a screenshot, and prepare it for multi-modal GPT-4 use cases.\nSOURCE: https://github.com/browserbase/docs/blob/main/integrations/llama-index/python.mdx#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom browserbase import Browserbase, GPT4VImage\n\nbrowser = Browserbase()\nscreenshot = browser.screenshot(\"https://browserbase.com\")\n\n# Ready to use image object for Multi-Modal GPT4 use case\ngpt4_img = GPT4VImage(screenshot)\n```\n\n----------------------------------------\n\nTITLE: Taking Screenshots with Puppeteer (TypeScript)\nDESCRIPTION: This code shows how to use Puppeteer to connect to a Browserbase session, navigate to a website, take a full-page screenshot, and save it locally. It includes proper initialization, navigation, screenshot capture, and cleanup.\nSOURCE: https://github.com/browserbase/docs/blob/main/features/screenshots-and-downloads.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst puppeteer = require(\"puppeteer\");\nconst fs = require(\"fs\");\n\n(async () => {\n  console.log(\"Starting remote browser...\");\n  const browser = await puppeteer.connect({\n    browserWSEndpoint: `wss://connect.browserbase.com?apiKey=${process.env.BROWSERBASE_API_KEY}&sessionId=${sessionId}`,\n  });\n  const pages = await browser.pages();\n  const page = pages[0];\n\n  await page.goto(\"https://www.browserbase.com\", {\n    waitUntil: \"domcontentloaded\",\n  });\n\n  console.log(\"Taking a screenshot!\");\n\n  const screenshot = await page.screenshot({ fullPage: true });\n  fs.writeFileSync(\"screenshot.jpeg\", screenshot);\n\n  console.log(\"Shutting down...\");\n  await browser.close();\n})().catch((error) => {\n  console.error(error);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating and Storing a BrowserBase Session with Playwright\nDESCRIPTION: This snippet demonstrates how to create a BrowserBase Session using the Session API and connect to it using Playwright in TypeScript. The Session ID is created and should be stored for later reference.\nSOURCE: https://github.com/browserbase/docs/blob/main/guides/session-debug-connection/integrate-live-session.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { chromium } from \"playwright-core\";\n\nasync function createSession() {\n  const response = await fetch(`https://www.browserbase.com/v1/sessions`, {\n    method: \"POST\",\n    headers: {\n      'x-bb-api-key': `${process.env.BROWSERBASE_API_KEY}`,\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      projectId: process.env.BROWSERBASE_PROJECT_ID,\n    }),\n  });\n  const json = await response.json();\n  return json;\n}\n\n(async () => {\n  const { id } = await createSession();\n\n  // TODO:  store the Session `id` to database\n\n  const browser = await chromium.connectOverCDP(\n    // we connect to the Session created via the API\n    `wss://connect.browserbase.com?apiKey=${process.env.BROWSERBASE_API_KEY}&sessionId=${sessionId}`,\n  );\n\n  // ...\n})()\n```\n\n----------------------------------------\n\nTITLE: Creating and Storing a BrowserBase Session with Puppeteer\nDESCRIPTION: This snippet shows how to create a BrowserBase Session using the Session API and connect to it using Puppeteer in TypeScript. The Session ID is created and should be stored for later reference.\nSOURCE: https://github.com/browserbase/docs/blob/main/guides/session-debug-connection/integrate-live-session.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport puppeteer from 'puppeteer';\nconst fetch = require('node-fetch');\n\nasync function createSession() {\n  const response = await fetch(`https://www.browserbase.com/v1/sessions`, {\n    method: \"POST\",\n    headers: {\n      'x-bb-api-key': `${process.env.BROWSERBASE_API_KEY}`,\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      projectId: process.env.BROWSERBASE_PROJECT_ID,\n    }),\n  });\n  const json = await response.json();\n  return json;\n}\n\n(async () => {\n  const { id } = await createSession();\n\n  // TODO:  store the Session `id` to database\n\n  const browser = await puppeteer.connect({\n    browserWSEndpoint: `wss://connect.browserbase.com?apiKey=${process.env.BROWSERBASE_API_KEY}&sessionId=${id}`,\n  });\n\n  // ...\n})();\n```\n\n----------------------------------------\n\nTITLE: Taking Screenshots with Selenium (Python)\nDESCRIPTION: This snippet shows how to use Selenium in Python to connect to a Browserbase session, navigate to a website, and save a screenshot. It references a custom connection setup that needs to be defined separately as mentioned in the comments.\nSOURCE: https://github.com/browserbase/docs/blob/main/features/screenshots-and-downloads.mdx#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom selenium import webdriver\nfrom selenium.webdriver.remote.remote_connection import RemoteConnection\nfrom selenium.webdriver.common.desired_capabilities import DesiredCapabilities\nimport requests\nimport os\n\ndef run():\n    # see create_session and CustomRemoteConnection definition\n    #   at https://docs.browserbase.com/quickstart/selenium\n    session_id = create_session()\n    custom_conn = CustomRemoteConnection('http://connect.browserbase.com/webdriver', session_id)\n    options = webdriver.ChromeOptions()\n    options.debugger_address = \"localhost:9223\"\n    driver = webdriver.Remote(custom_conn, options=options)\n    driver.get(\"https://www.browserbase.com\")\n\n    driver.save_screenshot('screenshot.png')\n\n    # Make sure to quit the driver so your session is ended!\n    driver.quit()\n\nrun()\n```\n\n----------------------------------------\n\nTITLE: Connecting to BrowserBase using Selenium with TypeScript\nDESCRIPTION: Example showing how to connect to BrowserBase using Selenium with TypeScript via the HTTP API. This requires creating a custom HTTP agent to provide authentication headers and setting up a WebDriver with debugger address.\nSOURCE: https://github.com/browserbase/docs/blob/main/api-reference/connect.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport http from \"http\";\nimport webdriver from \"selenium-webdriver\";\nimport chrome from \"selenium-webdriver/chrome\";\n\nasync function createSession() {\n  const response = await fetch(`https://www.browserbase.com/v1/sessions`, {\n    method: \"POST\",\n    headers: {\n      \"x-bb-api-key\": process.env.BROWSERBASE_API_KEY,\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({ projectId: process.env.BROWSERBASE_PROJECT_ID }),\n  });\n  return await response.json();\n}\n\n(async () => {\n  const session = await createSession();\n\n  const customHttpAgent = new http.Agent({});\n  (customHttpAgent as any).addRequest = (req: any, options: any) => {\n    // Session ID needs to be set here\n    req.setHeader(\"session-id\", session.id);\n    req.setHeader(\"x-bb-api-key\", process.env.BROWSERBASE_API_KEY);\n    (http.Agent.prototype as any).addRequest.call(\n      customHttpAgent,\n      req,\n      options,\n    );\n  };\n\n  // We set a debuggerAddress so the server-side WebDriver can connect.\n  const options = new chrome.Options();\n  options.debuggerAddress(\"localhost:9223\");\n\n  const driver = new webdriver.Builder()\n    .forBrowser(\"chrome\")\n    .setChromeOptions(options)\n    .usingHttpAgent(customHttpAgent)\n    .usingServer(\n      `http://connect.browserbase.com/webdriver`, // Selenium only supports HTTP\n    )\n    .build();\n\n  await driver.get(\"https://www.browserbase.com\");\n\n  // Make sure to quit the driver so your session is ended!\n  await driver.quit();\n})().catch((error) => console.error(error.message));\n```\n\n----------------------------------------\n\nTITLE: Connecting to BrowserBase using Puppeteer with TypeScript\nDESCRIPTION: Example showing how to connect to BrowserBase using Puppeteer with TypeScript via the WebSocket API. Authentication is handled by providing an API key as a query parameter in the browserWSEndpoint.\nSOURCE: https://github.com/browserbase/docs/blob/main/api-reference/connect.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport puppeteer from \"puppeteer-core\";\n\n(async () => {\n  const browser = await puppeteer.connect({\n    browserWSEndpoint: `wss://connect.browserbase.com?apiKey=${process.env.BROWSERBASE_API_KEY}`,\n  });\n\n  // ...\n})();\n```\n\n----------------------------------------\n\nTITLE: Downloading Files with Puppeteer (TypeScript)\nDESCRIPTION: This snippet shows how to download files using Puppeteer with Browserbase. It demonstrates configuring download behavior via CDP, navigating to a website, and then retrieving downloaded files from Browserbase's storage using a polling mechanism with retry logic.\nSOURCE: https://github.com/browserbase/docs/blob/main/features/screenshots-and-downloads.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport puppeteer from \"puppeteer-core\";\nimport { writeFileSync } from \"node:fs\";\n\nasync function saveDownloadsOnDisk(sessionId: string, retryForSeconds: number) {\n  return new Promise<void>((resolve, reject) => {\n    let pooler;\n    const timeout = setTimeout(() => {\n      if (pooler) {\n        clearInterval(pooler);\n      }\n    }, retryForSeconds);\n    async function fetchDownloads() {\n      try {\n        const response = await fetch(\n          `https://www.browserbase.com/v1/sessions/${sessionId}/downloads`,\n          {\n            method: \"GET\",\n            headers: {\n              \"x-bb-api-key\": process.env.BROWSERBASE_API_KEY!,\n            },\n          },\n        );\n        const arrayBuffer = await response.arrayBuffer();\n        if (arrayBuffer.byteLength > 0) {\n          const buffer = Buffer.from(arrayBuffer);\n          writeFileSync(\"downloads.zip\", buffer);\n          clearInterval(pooler);\n          clearTimeout(timeout);\n          resolve();\n        }\n      } catch (e) {\n        clearInterval(pooler);\n        clearTimeout(timeout);\n        reject(e);\n      }\n    }\n    pooler = setInterval(fetchDownloads, 2000);\n  });\n}\n\n(async () => {\n  // `createSession()` performs a call to the Browserbase Session API\n  const { id: sessionId } = await createSession();\n  const browser = await puppeteer.connect({\n    // we connect to a Session created via the API\n    browserWSEndpoint: `wss://connect.browserbase.com?apiKey=${process.env.BROWSERBASE_API_KEY}&sessionId=${sessionId}`,\n  });\n  const page = await browser.newPage();\n\n  const client = await page.createCDPSession();\n  await client.send(\"Page.setDownloadBehavior\", {\n    behavior: \"allow\",\n    downloadPath: \"downloads\",\n    //@ts-ignore\n    eventsEnabled: true,\n  });\n\n  await page.goto(\"https://www.browserbase.com\");\n  await page.close();\n  await browser.close();\n\n  // wait up to 20s to save the downloaded files locally\n  await saveDownloadsOnDisk(sessionId, 20000);\n})().catch((error) => console.error(error.message));\n```\n\n----------------------------------------\n\nTITLE: Creating URL Processing Tasks for Wikipedia Pages with Playwright\nDESCRIPTION: This snippet creates task functions for each Wikipedia URL in a file. Each task navigates to a URL and retrieves its content using a Playwright page instance.\nSOURCE: https://github.com/browserbase/docs/blob/main/guides/parallelization.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst tasks = loadUrlsFromFile(\"wikipedia_urls.txt\").map(\n  (url) => async (page: Page) => {\n    console.log(`Processing ${url}...`);\n    await page.goto(url);\n    const content = await page.content();\n    return [url, content];\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Browserbase SDK Client\nDESCRIPTION: Creates a Browserbase client instance that can be configured with API keys, project IDs, and custom URLs for the Session and Connect APIs.\nSOURCE: https://github.com/browserbase/docs/blob/main/api-reference/typescript-sdk.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Browserbase } from \"@browserbasehq/sdk\";\n\n// Init the SDK\nconst browserbase = new Browserbase();\n```\n\n----------------------------------------\n\nTITLE: Creating a Browserbase Session with Fingerprinting in Playwright (TypeScript)\nDESCRIPTION: This code demonstrates how to create a Browserbase session with custom fingerprint settings using Playwright in TypeScript. It configures locale preferences and operating system, then connects to the created session via WebSocket.\nSOURCE: https://github.com/browserbase/docs/blob/main/features/stealth-mode.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { chromium } from \"playwright-core\";\n\nasync function createSession() {\n  const response = await fetch(`https://www.browserbase.com/v1/sessions`, {\n    method: \"POST\",\n    headers: {\n      \"x-bb-api-key\": `${process.env.BROWSERBASE_API_KEY}`,\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      projectId: process.env.BROWSERBASE_PROJECT_ID,\n      fingerprint: {\n        locales: [\"en\", \"en-US\", \"de\"],\n        operatingSystems: [\"android\"],\n      },\n    }),\n  });\n  const json = await response.json();\n  return json;\n}\n\n(async () => {\n  const { id } = await createSession();\n  const browser = await chromium.connectOverCDP(\n    // we connect to a Session created via the API\n    `wss://connect.browserbase.com?apiKey=${process.env.BROWSERBASE_API_KEY}&sessionId=${id}`,\n  );\n  const defaultContext = browser.contexts()[0];\n  const page = defaultContext.pages()[0];\n\n  await page.goto(\"https://www.browserbase.com\");\n\n  await page.close();\n  await browser.close();\n})().catch(console.error);\n```\n\n----------------------------------------\n\nTITLE: Connecting to Puppeteer or Playwright with Browserbase\nDESCRIPTION: Generates a Connect API URL for use with browser automation tools like Puppeteer or Playwright. Supports session ID and proxy configuration options.\nSOURCE: https://github.com/browserbase/docs/blob/main/api-reference/typescript-sdk.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Browserbase } from \"@browserbasehq/sdk\";\nimport { chromium } from \"playwright-core\";\n\n(async () => {\n  const browserbase = new Browserbase();\n  const browser = await chromium.connectOverCDP(browserbase.connectUrl());\n\n  // ...\n})();\n```\n\n----------------------------------------\n\nTITLE: Connecting to Browserbase with Proxy using Selenium in Python\nDESCRIPTION: This code snippet illustrates how to connect to Browserbase using Selenium in Python, with proxy enabled. It creates a custom remote connection, sets up a WebDriver, navigates to a URL, and prints the page title. It also includes a function to create a new session.\nSOURCE: https://github.com/browserbase/docs/blob/main/features/stealth-mode.mdx#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom selenium import webdriver\nfrom selenium.webdriver.remote.remote_connection import RemoteConnection\nfrom selenium.webdriver.common.desired_capabilities import DesiredCapabilities\nimport requests\nimport os\n\ndef create_session():\n    url = 'https://www.browserbase.com/v1/sessions'\n    headers = {'Content-Type': 'application/json', 'x-bb-api-key': os.environ[\"BROWSERBASE_API_KEY\"]}\n    response = requests.post(url, json={ \"projectId\": os.environ[\"BROWSERBASE_PROJECT_ID\"] }, headers=headers)\n    return response.json()['id']\n\n\nclass CustomRemoteConnection(RemoteConnection):\n    _session_id = None\n\n    def __init__(self, remote_server_addr: str, session_id: str):\n        super().__init__(remote_server_addr)\n        self._session_id = session_id\n\n    def get_remote_connection_headers(self, parsed_url, keep_alive=False):\n        headers = super().get_remote_connection_headers(parsed_url, keep_alive)\n        headers.update({'x-bb-api-key': os.environ[\"BROWSERBASE_API_KEY\"]})\n        headers.update({'session-id': self._session_id})\n        # enable proxy here\n        headers.update({'enable-proxy': \"true\"})\n        return headers\n\n\ndef run():\n    session_id = create_session()\n    custom_conn = CustomRemoteConnection('http://connect.browserbase.com/webdriver', session_id)\n    options = webdriver.ChromeOptions()\n    options.debugger_address = \"localhost:9223\"\n    driver = webdriver.Remote(custom_conn, options=options)\n    driver.get(\"https://www.browserbase.com\")\n    get_title = driver.title\n    print(get_title)\n    # Make sure to quit the driver so your session is ended!\n    driver.quit()\n\nrun()\n```\n\n----------------------------------------\n\nTITLE: Retrieving and Saving Downloads from a Browserbase Session\nDESCRIPTION: Fetches and saves downloaded files from a browsing session to the specified path. Includes retry mechanism to handle large downloads that may require time to sync.\nSOURCE: https://github.com/browserbase/docs/blob/main/api-reference/typescript-sdk.mdx#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Browserbase } from \"@browserbasehq/sdk\";\nimport { chromium } from \"playwright-core\";\n\n(async () => {\n  const browserbase = new Browserbase();\n  const { id: sessionId } = await browserbase.createSession();\n  const browser = await chromium.connectOverCDP(\n    browserbase.connectUrl({ sessionId }),\n  );\n\n  // ...navigate the page and take actions...\n\n  await browserbase.getSessionDownloads(sessionId, \"downloads.zip\");\n})();\n```\n\n----------------------------------------\n\nTITLE: Connecting to Browserbase with Proxy using Playwright in Python\nDESCRIPTION: This snippet demonstrates how to connect to Browserbase using Playwright in Python, with proxy enabled. It establishes a connection, gets the default context and page, and is set up to perform further actions.\nSOURCE: https://github.com/browserbase/docs/blob/main/features/stealth-mode.mdx#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom playwright.sync_api import sync_playwright, Playwright\n\ndef run(playwright: Playwright):\n    chromium = playwright.chromium\n    browser = chromium.connect_over_cdp('wss://connect.browserbase.com?apiKey=${process.env.BROWSERBASE_API_KEY}&enableProxy=true')\n    context = browser.contexts[0]\n    page = context.pages[0]\n\nwith sync_playwright() as playwright:\n    run(playwright)\n```\n\n----------------------------------------\n\nTITLE: Initializing Browserbase Client in Python\nDESCRIPTION: Creates a Browserbase client instance using an API key. The key can be passed directly or loaded from environment variables.\nSOURCE: https://github.com/browserbase/docs/blob/main/api-reference/python-sdk.mdx#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom browserbase import Browserbase\n\n# Init the SDK\nbrowserbase = Browserbase(os.environ[\"BROWSERBASE_API_KEY\"])\n```\n\n----------------------------------------\n\nTITLE: Loading Chrome Extensions with Selenium Python\nDESCRIPTION: Shows how to create a custom browser session and verify Chrome extension loading using Selenium in Python. Includes custom connection handling and session management.\nSOURCE: https://github.com/browserbase/docs/blob/main/features/browsers.mdx#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom selenium import webdriver\nfrom selenium.webdriver.remote.remote_connection import RemoteConnection\nfrom selenium.webdriver.common.desired_capabilities import DesiredCapabilities\nimport requests\nimport os\n\ndef create_session():\n    url = 'https://www.browserbase.com/v1/sessions'\n    headers = {'Content-Type': 'application/json', 'x-bb-api-key': os.environ[\"BROWSERBASE_API_KEY\"]}\n    json = {\n        \"projectId\": os.environ[\"BROWSERBASE_PROJECT_ID\"],\n        # Fingerprint options\n        \"fingerprint\": {\n            \"locales\": [\"en\", \"en-US\", \"de\"],\n            \"operatingSystems\": [\"android\"]\n        }\n    }\n    response = requests.post(url, json=json, headers=headers)\n    return response.json()['id']\n\n\nclass CustomRemoteConnection(RemoteConnection):\n    _session_id = None\n\n    def __init__(self, remote_server_addr: str, session_id: str):\n        super().__init__(remote_server_addr)\n        self._session_id = session_id\n\n    def get_remote_connection_headers(self, parsed_url, keep_alive=False):\n        headers = super().get_remote_connection_headers(parsed_url, keep_alive)\n        headers.update({'x-bb-api-key': os.environ[\"BROWSERBASE_API_KEY\"]})\n        headers.update({'session-id': self._session_id})\n        return headers\n\n\ndef run():\n    session_id = create_session()\n    custom_conn = CustomRemoteConnection('http://connect.browserbase.com/webdriver', session_id)\n    options = webdriver.ChromeOptions()\n    options.debugger_address = \"localhost:9223\"\n    driver = webdriver.Remote(custom_conn, options=options)\n    driver.get(url = \"chrome://extensions\")\n    get_title = driver.title\n    print(get_title)\n    # Make sure to quit the driver so your session is ended!\n    driver.quit()\n\nrun()\n```\n\n----------------------------------------\n\nTITLE: Taking Screenshots with Browserbase in Python\nDESCRIPTION: Captures a screenshot of a webpage and returns it as bytes. Supports full-page screenshots when the full_page parameter is set to True.\nSOURCE: https://github.com/browserbase/docs/blob/main/api-reference/python-sdk.mdx#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom browserbase import Browserbase\n\n# Init the SDK\nbrowserbase = Browserbase(os.environ[\"BROWSERBASE_API_KEY\"])\n\n# Screenshot (returns bytes)\nresult = browserbase.screenshot(\"https://example.com\", full_page=True)\n```\n\n----------------------------------------\n\nTITLE: Loading Chrome Extensions with Playwright Python\nDESCRIPTION: Demonstrates how to create a session and verify Chrome extension loading using Playwright in Python. Includes session creation and browser connection functionality.\nSOURCE: https://github.com/browserbase/docs/blob/main/features/browsers.mdx#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom playwright.sync_api import sync_playwright\nimport requests\nimport os\n\ndef create_session():\n    url = 'https://www.browserbase.com/v1/sessions'\n    headers = {'Content-Type': 'application/json', 'x-bb-api-key': os.environ[\"BROWSERBASE_API_KEY\"]}\n    json = {\n        \"projectId\": os.environ[\"BROWSERBASE_PROJECT_ID\"],\n        # Provide your extensionId\n        \"extensionId\": \"...\"\n    }\n    response = requests.post(url, json=json, headers=headers)\n    return response.json()['id']\n\ndef run():\n  with sync_playwright() as p:\n        session_id = create_session()\n        # Launch a browser instance\n        browser = p.chromium.connect_over_cdp(\n            f\"wss://connect.browserbase.com?apiKey={os.environ['BROWSERBASE_API_KEY']}&sessionId={session.id}\"\n        )\n\n        # Create a new page\n        page = browser.new_page()\n\n        # Specify the URL for the test\n        url = \"chrome://extensions\"\n\n        # Navigate to the URL\n        page.goto(url)\n\n        # Get the text content of the specified element\n        element = page.locator('h1').inner_text()\n\n        # Ensure the browser is closed after the test\n        browser.close()\n\n\nrun()\n```\n\n----------------------------------------\n\nTITLE: Connecting to Browserbase with Proxies using Puppeteer in TypeScript\nDESCRIPTION: This code shows how to connect a Puppeteer browser to Browserbase with proxy support enabled. It connects to the Browserbase WebSocket endpoint, retrieves existing pages, navigates to a sign-in page, and properly closes resources.\nSOURCE: https://github.com/browserbase/docs/blob/main/guides/authentication.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst puppeteer = require(\"puppeteer\");\n\n(async () => {\n  const browser = await puppeteer.connect({\n    browserWSEndpoint: `wss://connect.browserbase.com?apiKey=${process.env.BROWSERBASE_API_KEY}&enableProxy=true`,\n  });\n\n  const pages = await browser.pages();\n  const page = pages[0];\n\n  await page.goto(\"https://browserbase.com/sign-in\");\n  await page.close();\n  await browser.close();\n})().catch((error) => console.error(error.message));\n```\n\n----------------------------------------\n\nTITLE: Loading Web Documents into LlamaIndex using Browserbase\nDESCRIPTION: Python code to load web documents into LlamaIndex using the BrowserbaseWebReader. It demonstrates how to create a reader instance and load data from specified URLs, with an option to return text content or HTML.\nSOURCE: https://github.com/browserbase/docs/blob/main/integrations/llama-index/python.mdx#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom llama_index.readers.web import BrowserbaseWebReader\n\nreader = BrowserbaseWebReader()\ndocs = reader.load_data(\n    urls=[\n        \"https://example.com\",\n    ],\n    # Text mode\n    text_content=True,\n)\n```\n\n----------------------------------------\n\nTITLE: Connecting to Browserbase with Proxies using Playwright in Python\nDESCRIPTION: This Python code demonstrates connecting a Playwright browser to Browserbase with proxy support enabled. It establishes a connection over CDP, gets the default browser context to ensure session recording, and navigates to a sign-in page.\nSOURCE: https://github.com/browserbase/docs/blob/main/guides/authentication.mdx#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom playwright.sync_api import sync_playwright\n\ndef main():\n    with sync_playwright() as p:\n        browser = p.chromium.connect_over_cdp(\n            f'wss://connect.browserbase.com?apiKey={os.environ[\"BROWSERBASE_API_KEY\"]}&enableProxy=true'\n        )\n\n        # Getting the default context to ensure the sessions are recorded.\n        default_context = browser.contexts()[0]\n        page = default_context.pages()[0]\n\n        page.goto(\"https://browserbase.com/sign-in\")\n        page.close()\n        browser.close()\n\nif __name__ == \"__main__\":\n    main()\n```\n\n----------------------------------------\n\nTITLE: Creating Screenshots with Browserbase\nDESCRIPTION: Shows how to capture screenshots of web pages as Blob objects. Supports both viewport-sized and full-page screenshots through optional parameters.\nSOURCE: https://github.com/browserbase/docs/blob/main/api-reference/typescript-sdk.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Browserbase } from \"@browserbasehq/sdk\";\n\n// Init the SDK\nconst browserbase = new Browserbase();\n\nconst blob = await browserbase.screenshot(\"https://www.browserbase.com\");\n\n// Full page screenshot\nconst blob2 = await browserbase.screenshot(\"https://www.browserbase.com\", {\n  fullPage: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Connecting to Browserbase with Proxies using Selenium in Python\nDESCRIPTION: This Python Selenium code demonstrates integrating with Browserbase with proxy support enabled. It creates a custom remote connection class that adds necessary headers including API key and proxy enablement, creates a session via the Browserbase API, and navigates to a website.\nSOURCE: https://github.com/browserbase/docs/blob/main/guides/authentication.mdx#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom selenium import webdriver\nfrom selenium.webdriver.remote.remote_connection import RemoteConnection\nfrom selenium.webdriver.common.desired_capabilities import DesiredCapabilities\nimport requests\nimport os\n\ndef create_session():\n    url = 'https://www.browserbase.com/v1/sessions'\n    headers = {'Content-Type': 'application/json', 'x-bb-api-key': os.environ[\"BROWSERBASE_API_KEY\"]}\n    json = {\n        \"projectId\": os.environ[\"BROWSERBASE_PROJECT_ID\"],\n    }\n    response = requests.post(url, json=json, headers=headers)\n    return response.json()['id']\n\n\nclass CustomRemoteConnection(RemoteConnection):\n    _session_id = None\n\n    def __init__(self, remote_server_addr: str, session_id: str):\n        super().__init__(remote_server_addr)\n        self._session_id = session_id\n\n    def get_remote_connection_headers(self, parsed_url, keep_alive=False):\n        headers = super().get_remote_connection_headers(parsed_url, keep_alive)\n        headers.update({'x-bb-api-key': os.environ[\"BROWSERBASE_API_KEY\"]})\n        headers.update({'session-id': self._session_id})\n        # enable proxy here\n        headers.update({'enable-proxy': \"true\"})\n        return headers\n\n\ndef run():\n    session_id = create_session()\n    custom_conn = CustomRemoteConnection('http://connect.browserbase.com/webdriver', session_id)\n    options = webdriver.ChromeOptions()\n    options.debugger_address = \"localhost:9223\"\n    driver = webdriver.Remote(custom_conn, options=options)\n    driver.get(\"https://www.browserbase.com\")\n    get_title = driver.title\n    print(get_title)\n    # Make sure to quit the driver so your session is ended!\n    driver.quit()\n\nrun()\n```\n\n----------------------------------------\n\nTITLE: Creating a Browserbase Session\nDESCRIPTION: Creates a new browsing session with optional fingerprinting features. Can specify project ID, extension ID, and fingerprinting options for browser identification.\nSOURCE: https://github.com/browserbase/docs/blob/main/api-reference/typescript-sdk.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Browserbase } from \"@browserbasehq/sdk\";\n\nconst browserbase = new Browserbase();\nconst { id: sessionId } = await browserbase.createSession({\n  fingerprint: { devices: [\"mobile\"] },\n});\n```\n\n----------------------------------------\n\nTITLE: Connecting to BrowserBase using Selenium with Python\nDESCRIPTION: Example showing how to connect to BrowserBase using Selenium with Python via the HTTP API. This requires creating a custom RemoteConnection class to handle authentication headers and initializing a WebDriver with the custom connection.\nSOURCE: https://github.com/browserbase/docs/blob/main/api-reference/connect.mdx#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom selenium import webdriver\nfrom selenium.webdriver.remote.remote_connection import RemoteConnection\nfrom selenium.webdriver.common.desired_capabilities import DesiredCapabilities\nimport requests\nimport os\n\ndef create_session():\n    url = 'https://www.browserbase.com/v1/sessions'\n    headers = {'Content-Type': 'application/json', 'x-bb-api-key': os.environ[\"BROWSERBASE_API_KEY\"]}\n    response = requests.post(url, json={ \"projectId\": os.environ[\"BROWSERBASE_PROJECT_ID\"] }, headers=headers)\n    return response.json()['id']\n\n\nclass CustomRemoteConnection(RemoteConnection):\n    _session_id = None\n\n    def __init__(self, remote_server_addr: str, session_id: str):\n        super().__init__(remote_server_addr)\n        self._session_id = session_id\n\n    def get_remote_connection_headers(self, parsed_url, keep_alive=False):\n        headers = super().get_remote_connection_headers(parsed_url, keep_alive)\n        headers.update({'x-bb-api-key': os.environ[\"BROWSERBASE_API_KEY\"]})\n        headers.update({'session-id': self._session_id})\n        return headers\n\n\ndef run():\n    session_id = create_session()\n    custom_conn = CustomRemoteConnection('http://connect.browserbase.com/webdriver', session_id)\n    options = webdriver.ChromeOptions()\n    options.debugger_address = \"localhost:9223\"\n    driver = webdriver.Remote(custom_conn, options=options)\n    driver.get(\"https://www.browserbase.com\")\n    get_title = driver.title\n    print(get_title)\n    # Make sure to quit the driver so your session is ended!\n    driver.quit()\n\nrun()\n```\n\n----------------------------------------\n\nTITLE: Listing Browserbase Sessions\nDESCRIPTION: Retrieves a list of all sessions for the current project. Returns objects that match the Session API's GET /v1/sessions endpoint response type.\nSOURCE: https://github.com/browserbase/docs/blob/main/api-reference/typescript-sdk.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Browserbase } from \"@browserbasehq/sdk\";\n\nconst browserbase = new Browserbase();\nconst sessions = await browserbase.listSessions();\n```\n\n----------------------------------------\n\nTITLE: Complete Local Development Setup with Session Debugging\nDESCRIPTION: This code shows a complete implementation for local development with Browserbase Sessions. It creates a session, connects to it via Playwright, retrieves a debug URL for live inspection, and handles errors by providing a replay link to the Session Debugger.\nSOURCE: https://github.com/browserbase/docs/blob/main/guides/session-debug-connection/browser-remote-control.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { chromium } from \"playwright-core\";\n\nlet sessionId;\n\nasync function createSession() {\n  const response = await fetch(`https://www.browserbase.com/v1/sessions`, {\n    method: \"POST\",\n    headers: {\n      \"x-bb-api-key\": `${process.env.BROWSERBASE_API_KEY}`,\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      projectId: process.env.BROWSERBASE_PROJECT_ID,\n    }),\n  });\n  const json = await response.json();\n  return json;\n}\n\nasync function retrieveDebugConnectionURL(sessionId) {\n  const response = await fetch(\n    `https://www.browserbase.com/v1/sessions/${sessionId}/debug`,\n    {\n      method: \"GET\",\n      headers: {\n        \"x-bb-api-key\": `${process.env.BROWSERBASE_API_KEY}`,\n      },\n    },\n  );\n  const json = await response.json();\n  return json.debuggerFullscreenUrl;\n}\n\n(async () => {\n  const { id } = await createSession();\n  sessionId = id;\n  const browser = await chromium.connectOverCDP(\n    // we connect to a Session created via the API\n    `wss://connect.browserbase.com?apiKey=${process.env.BROWSERBASE_API_KEY}&sessionId=${sessionId}`,\n  );\n  const defaultContext = browser.contexts()[0];\n  const page = defaultContext.pages()[0];\n\n  await page.goto(\"https://www.browserbase.com\", {\n    // let's make sure the page is fully loaded before asking for the live debug URL\n    waitUntil: \"domcontentloaded\",\n  });\n\n  const debugUrl = await retrieveDebugConnectionURL(sessionId);\n  console.log(`Session started, live debug accessible here: ${debugUrl}.`);\n\n  await page.close();\n  await browser.close();\n})().catch((error) => {\n  console.log(\n    `Session failed, replay is accessible here: https://www.browserbase.com/sessions/${sessionId}.`,\n  );\n  console.error(error.message);\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Debug Connection URL in Python\nDESCRIPTION: This Python function fetches a debug connection URL for a BrowserBase Session using aiohttp. It requires the Session ID and the BrowserBase API key from environment variables.\nSOURCE: https://github.com/browserbase/docs/blob/main/guides/session-debug-connection/integrate-live-session.mdx#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport aiohttp\nimport os\n\nasync def retrieve_debug_connection_url(session_id):\n    url = f\"https://www.browserbase.com/v1/sessions/{session_id}/debug\"\n    headers = {\n        'x-bb-api-key': os.environ.get('BROWSERBASE_API_KEY', '')\n    }\n    async with aiohttp.ClientSession() as session:\n        async with session.get(url, headers=headers) as response:\n            json_data = await response.json()\n            return json_data.get('debuggerFullscreenUrl', None)\n```\n\n----------------------------------------\n\nTITLE: Creating and Connecting to a BrowserBase Session in Python\nDESCRIPTION: This Python code demonstrates how to create a BrowserBase Session using the Session API and connect to it using Playwright. It uses asyncio and aiohttp for asynchronous HTTP requests and browser automation.\nSOURCE: https://github.com/browserbase/docs/blob/main/guides/session-debug-connection/integrate-live-session.mdx#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom playwright.async_api import async_playwright\nimport asyncio\nimport aiohttp\n\nasync def create_session():\n    async with aiohttp.ClientSession() as session:\n        async with session.post(\n            'https://www.browserbase.com/v1/sessions',\n            headers={\n                'x-bb-api-key': f'{os.environ[\"BROWSERBASE_API_KEY\"]}',\n                'Content-Type': 'application/json'\n            },\n            json={'projectId': f'{os.environ[\"BROWSERBASE_PROJECT_ID\"]}'}\n        ) as response:\n            json_data = await response.json()\n            return json_data\n\nasync def main():\n    async with async_playwright() as p:\n        browser = await p.chromium.connect_over_cdp(\n            f'wss://connect.browserbase.com?apiKey={os.environ[\"BROWSERBASE_API_KEY\"]}&sessionId={session_id}'\n        )\n\n        # Your code using the browser goes here\n\nif __name__ == '__main__':\n    loop = asyncio.get_event_loop()\n    session_id = loop.run_until_complete(create_session())\n    loop.run_until_complete(main())\n```\n\n----------------------------------------\n\nTITLE: Retrieving Debug Connection URL in TypeScript\nDESCRIPTION: This TypeScript function retrieves a debug connection URL for a BrowserBase Session using the Session ID. The URL can be forwarded to the front-end to enable live viewing of the session.\nSOURCE: https://github.com/browserbase/docs/blob/main/guides/session-debug-connection/integrate-live-session.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nasync function retrieveDebugConnectionURL(sessionId: string) {\n  const response = await fetch(\n    `https://www.browserbase.com/v1/sessions/${sessionId}/debug`,\n    {\n      method: \"GET\",\n      headers: {\n        'x-bb-api-key': `${process.env.BROWSERBASE_API_KEY}`,\n      },\n    },\n  );\n  const json = await response.json();\n  return json.debuggerFullscreenUrl;\n}\n\nconst debugConnectionURL = await retrieveDebugConnectionURL()\n\n// forward `debugConnectionURL` to the front-end\n```\n\n----------------------------------------\n\nTITLE: Creating a Browserbase Session with Fingerprinting in Playwright (Python)\nDESCRIPTION: This code illustrates how to create a Browserbase session with fingerprinting configuration using Playwright in Python. It sets locale preferences and Android as the operating system before connecting with a WebSocket.\nSOURCE: https://github.com/browserbase/docs/blob/main/features/stealth-mode.mdx#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom playwright.sync_api import sync_playwright\nimport requests\nimport os\n\ndef create_session():\n    url = 'https://www.browserbase.com/v1/sessions'\n    headers = {'Content-Type': 'application/json', 'x-bb-api-key': os.environ[\"BROWSERBASE_API_KEY\"]}\n    json = {\n        \"projectId\": os.environ[\"BROWSERBASE_PROJECT_ID\"],\n        # Fingerprint options\n        \"fingerprint\": {\n            \"locales\": [\"en\", \"en-US\", \"de\"],\n            \"operatingSystems\": [\"android\"]\n        }\n    }\n    response = requests.post(url, json=json, headers=headers)\n    return response.json()['id']\n\ndef run():\n  with sync_playwright() as p:\n        session_id = create_session()\n        browser = await p.chromium.connect_over_cdp(\n            f\"wss://connect.browserbase.com?apiKey={os.environ['BROWSERBASE_API_KEY']}&sessionId={session_id}\"\n        )\n        context = await browser.new_context()\n        page = await context.new_page()\n\n        await page.goto(\"https://www.browserbase.com\")\n\n        await page.close()\n        await context.close()\n        await browser.close()\n\nrun()\n```\n\n----------------------------------------\n\nTITLE: Loading Chrome Extensions with Playwright TypeScript\nDESCRIPTION: Demonstrates how to connect to a browser session and verify a custom Chrome extension is loaded using Playwright with TypeScript. The code navigates to the extensions page and checks for extension presence.\nSOURCE: https://github.com/browserbase/docs/blob/main/features/browsers.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { chromium } from \"playwright-core\";\n(async () => {\n  const session = await createSession();\n  // Specify the URL and expected title for the test\n  const url = \"chrome://extensions\";\n\n  // Launch a browser instance\n  const browser = await chromium.connectOverCDP(\n    `wss://connect.browserbase.com?apiKey=${process.env.BROWSERBASE_API_KEY}&sessionId=${session.id}`,\n  );\n\n  // Create a new page\n  const page = await browser.newPage();\n  // Navigate to the URL\n  await page.goto(url);\n  const element = await page\n    .getByRole(\"heading\", { name: \"My custom chrome extension\" })\n    .textContent();\n\n  // Ensure the browser is closed after the test\n  await browser.close();\n})().catch((error) => console.error(error.message));\n```\n\n----------------------------------------\n\nTITLE: Loading Chrome Extensions with Puppeteer TypeScript\nDESCRIPTION: Shows how to connect to a browser session and verify a custom Chrome extension using Puppeteer with TypeScript. The code connects to a WebSocket endpoint and checks the extension's presence.\nSOURCE: https://github.com/browserbase/docs/blob/main/features/browsers.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst puppeteer = require(\"puppeteer\");\n\n(async () => {\n  // Launch a browser instance\n  const browser = await puppeteer.connect({\n    browserWSEndpoint: `wss://connect.browserbase.com?apiKey=${process.env.BROWSERBASE_API_KEY}&sessionId=${session.id}`,\n  });\n\n  // Create a new page\n  const page = await browser.newPage();\n\n  // Specify the URL for the test\n  const url = \"chrome://extensions\";\n\n  // Navigate to the URL\n  await page.goto(url);\n\n  // Get the text content of the specified element\n  const element = await page.$eval(\"h1\", (heading) => heading.textContent);\n\n  // Ensure the browser is closed after the test\n  await browser.close();\n})().catch((error) => console.error(error.message));\n```\n\n----------------------------------------\n\nTITLE: Loading documents using BrowserbaseLoader in Python\nDESCRIPTION: This snippet demonstrates how to use BrowserbaseLoader to load multiple web pages as documents. It requires a Browserbase API token and can return either HTML or text content.\nSOURCE: https://github.com/browserbase/docs/blob/main/integrations/langchain/python.mdx#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom langchain_community.document_loaders import BrowserbaseLoader\n\nBROWSERBASE_API_TOKEN = \"<Your Browserbase API Key goes here>\"\n\nloader = BrowserbaseLoader(\n    api_token=BROWSERBASE_API_TOKEN,\n    urls=[\n        # load multiple pages\n        \"https://www.espn.com\",\n        \"https://lilianweng.github.io/posts/2023-06-23-agent/\"\n    ],\n    text_content=True,\n)\n\ndocuments = loader.load()\n```\n\n----------------------------------------\n\nTITLE: Loading and analyzing images with Browserbase and GPT-4 Vision in Python\nDESCRIPTION: This code snippet shows how to take a screenshot of a webpage using Browserbase, and then analyze it using OpenAI's GPT-4 Vision model. It demonstrates integration between Browserbase, Langchain, and OpenAI's vision capabilities.\nSOURCE: https://github.com/browserbase/docs/blob/main/integrations/langchain/python.mdx#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom browserbase import Browserbase\nfrom browserbase.helpers.gpt4 import GPT4VImage, GPT4VImageDetail\nfrom langchain_core.messages import HumanMessage\nfrom langchain_openai import ChatOpenAI\n\nchat = ChatOpenAI(model=\"gpt-4-vision-preview\", max_tokens=256)\nbrowser = Browserbase()\n\nscreenshot = browser.screenshot(\"https://browserbase.com\")\n\nresult = chat.invoke(\n    [\n        HumanMessage(\n            content=[\n                {\"type\": \"text\", \"text\": \"What color is the logo?\"},\n                GPT4VImage(screenshot, GPT4VImageDetail.auto),\n            ]\n        )\n    ]\n)\n\nprint(result.content)\n```\n\n----------------------------------------\n\nTITLE: Implementing BrowserbaseLoadTool with CrewAI Agent\nDESCRIPTION: Sets up a CrewAI Agent with the BrowserbaseLoadTool to enable web browsing. The code demonstrates importing the necessary modules, creating an instance of BrowserbaseLoadTool, extracting text from web pages, and configuring an agent that can use both search tools and the Browserbase tool.\nSOURCE: https://github.com/browserbase/docs/blob/main/integrations/crew-ai/python.mdx#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom crewai_tools import BrowserbaseLoadTool\nfrom crewai import Agent\n\n# See https://github.com/joaomdmoura/crewAI-examples/blob/main/instagram_post/tools/search_tools.py\nfrom tools.search_tools import SearchTools\n\n\nbrowserbase_tool = BrowserbaseLoadTool()\n\n# Extract the text from the site\ntext = browserbase_tool.run()\nprint(text)\n\n\n# Use the BrowserbaseLoadTool for travel planning\nagent = Agent(\n    role='Local Expert at this city',\n    goal='Provide the BEST insights about the selected city',\n    backstory=\"\"\"A knowledgeable local guide with extensive information\n    about the city, it's attractions and customs\"\"\",\n    tools=[\n        SearchTools.search_internet,\n        browserbase_tool,\n    ],\n    verbose=True\n)\n```\n\n----------------------------------------\n\nTITLE: Authenticating Browserbase API Requests\nDESCRIPTION: Examples of how to authenticate with the Browserbase API using an API key in the request headers. The code demonstrates how to make authenticated GET requests to retrieve session information across multiple programming languages.\nSOURCE: https://github.com/browserbase/docs/blob/main/api-reference/apis.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst response = await fetch(\n  `https://www.browserbase.com/v1/sessions/${sessionId}`,\n  {\n    method: \"GET\",\n    headers: {\n      \"x-bb-api-key\": `${process.env.BROWSERBASE_API_KEY}`,\n    },\n  },\n);\n```\n\nLANGUAGE: python\nCODE:\n```\nimport requests\nimport os\n\nurl = \"https://www.browserbase.com/v1/sessions\"\n\nheaders = {\"x-bb-api-key\": os.environ[\"BROWSERBASE_API_KEY\"]}\n\nresponse = requests.request(\"GET\", url, headers=headers)\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET \"https://www.browserbase.com/v1/sessions/${SESSION_ID}\" \\\n     -H \"x-bb-api-key: ${BROWSERBASE_API_KEY}\" \\\n```\n\n----------------------------------------\n\nTITLE: Initializing Browser Session with Selenium Python\nDESCRIPTION: Example showing how to connect to Browserbase using Selenium with Python, demonstrating basic browser automation without BrowserContext and Page concepts\nSOURCE: https://github.com/browserbase/docs/blob/main/guides/browser-contexts-and-pages.mdx#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom selenium import webdriver\nfrom selenium.webdriver.remote.remote_connection import RemoteConnection\nfrom selenium.webdriver.common.desired_capabilities import DesiredCapabilities\nimport requests\nimport os\n\ndef run():\n    # see create_session and CustomRemoteConnection definition\n    #   at https://docs.browserbase.com/quickstart/selenium\n    session_id = create_session()\n    custom_conn = CustomRemoteConnection('http://connect.browserbase.com/webdriver', session_id)\n    options = webdriver.ChromeOptions()\n    options.debugger_address = \"localhost:9223\"\n    driver = webdriver.Remote(custom_conn, options=options)\n    driver.get(\"https://www.browserbase.com\")\n\n    # Selenium don't have the concept of BrowserContext and Pages\n\n    get_title = driver.title\n    print(get_title)\n    # Make sure to quit the driver so your session is ended!\n    driver.quit()\n\nrun()\n```\n\n----------------------------------------\n\nTITLE: Multiple BrowserContexts Usage in Playwright TypeScript\nDESCRIPTION: Demonstrates an anti-pattern of using multiple contexts or pages in Playwright with TypeScript that breaks session recording and debugging. Instead, users should rely on multiple browser instances for parallelization.\nSOURCE: https://github.com/browserbase/docs/blob/main/guides/browser-contexts-and-pages.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { chromium } from \"playwright-core\";\n\n(async () => {\n  const browser = await chromium.connectOverCDP(\n    `wss://connect.browserbase.com?apiKey=${process.env.BROWSERBASE_API_KEY}`,\n  );\n\n  const getContent = async (url: string) => {\n    const context = await browser.newContext();\n    const page = await context.newPage();\n\n    try {\n      await page.goto(url, {\n        waitUntil: \"domcontentloaded\",\n      });\n\n      return await page.content();\n    } finally {\n      await page.close();\n    }\n  };\n\n  await Promise.all(\n    [\"https://www.google.com\", \"https://www.bing.com\"].map(async (item) => {\n      const contents = [];\n\n      for (url in item.urls) {\n        contents.push(await getContent(url));\n      }\n\n      return contents;\n    }),\n  );\n  await browser.close();\n})().catch((error) => console.error(error.message));\n```\n\n----------------------------------------\n\nTITLE: Updating a Browserbase Session\nDESCRIPTION: Updates an existing session's state. Requires session ID, project ID and a valid status value that corresponds to points in the session lifecycle.\nSOURCE: https://github.com/browserbase/docs/blob/main/api-reference/typescript-sdk.mdx#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Browserbase } from \"@browserbasehq/sdk\";\n\nconst browserbase = new Browserbase();\nconst { status } = await browserbase.updateSession(\"1234\", {\n  projectId: \"1234\",\n  status: \"REQUEST_RELEASE\",\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Browserbase SDK with Package Managers\nDESCRIPTION: Commands to install the Browserbase SDK using different package managers including npm, pnpm, and yarn.\nSOURCE: https://github.com/browserbase/docs/blob/main/api-reference/typescript-sdk.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -S @browserbasehq/sdk\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm install -S @browserbasehq/sdk\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @browserbasehq/sdk\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Specification for POST /v1/sessions Endpoint\nDESCRIPTION: YAML definition for the POST /v1/sessions API endpoint. This endpoint is used to create new browser sessions in the system.\nSOURCE: https://github.com/browserbase/docs/blob/main/api-reference/post-v1sessions.mdx#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: post /v1/sessions\n```\n\n----------------------------------------\n\nTITLE: Multiple Pages Usage in Puppeteer TypeScript\nDESCRIPTION: Illustrates an anti-pattern of using multiple pages in Puppeteer with TypeScript that breaks session recording and debugging. The recommended approach is to use multiple browser instances instead.\nSOURCE: https://github.com/browserbase/docs/blob/main/guides/browser-contexts-and-pages.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport puppeteer from \"puppeteer\";\n\n(async () => {\n  const browser = await puppeteer.connect({\n    browserWSEndpoint: `wss://connect.browserbase.com?apiKey=${process.env.BROWSERBASE_API_KEY}`,\n  });\n\n  const getContent = async (url) => {\n    const page = await browser.newPage();\n\n    try {\n      await page.goto(url, {\n        waitUntil: \"domcontentloaded\",\n      });\n\n      return await page.content();\n    } finally {\n      await page.close();\n    }\n  };\n\n  await Promise.all(\n    [\"https://www.google.com\", \"https://www.bing.com\"].map(async (url) => {\n      const contents = await getContent(url);\n      return contents;\n    }),\n  );\n  await browser.disconnect();\n})().catch((error) => console.error(error.message));\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI Specification for GET /v1/sessions Endpoint in YAML\nDESCRIPTION: This YAML snippet defines the OpenAPI specification for the GET /v1/sessions endpoint. It sets the OpenAPI version and specifies the endpoint path.\nSOURCE: https://github.com/browserbase/docs/blob/main/api-reference/get-v1sessions.mdx#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /v1/sessions\n```\n\n----------------------------------------\n\nTITLE: Multiple Contexts Usage in Playwright Python\nDESCRIPTION: Shows an anti-pattern of using multiple contexts in Playwright with Python that disrupts session recording and debugging. Users should implement multiple browser instances for parallel operations instead.\nSOURCE: https://github.com/browserbase/docs/blob/main/guides/browser-contexts-and-pages.mdx#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom playwright.sync_api import sync_playwright\n\nasync def main():\n    async with sync_playwright() as p:\n        browser = await p.chromium.connect_over_cdp(\n            f'wss://connect.browserbase.com?apiKey={os.environ[\"BROWSERBASE_API_KEY\"]}'\n        )\n\n        async def get_content(url):\n            context = await browser.new_context()\n            page = await context.new_page()\n\n            try:\n                await page.goto(url, wait_until=\"domcontentloaded\")\n                return await page.content()\n            finally:\n                await page.close()\n\n        urls = [\"https://www.google.com\", \"https://www.bing.com\"]\n        contents = await asyncio.gather(*(get_content(url) for url in urls))\n        print(contents)\n\n        await browser.close()\n\nif __name__ == \"__main__\":\n    import os\n    import asyncio\n\n    asyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Integrating BrowserBase Session Live View in an HTML iframe\nDESCRIPTION: This HTML snippet shows how to embed a live BrowserBase Session view in an iframe. The iframe is set to read-only mode by default, but can be made interactive by removing the pointer-events style property.\nSOURCE: https://github.com/browserbase/docs/blob/main/guides/session-debug-connection/integrate-live-session.mdx#2025-04-21_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<iframe\n  src=\"{debugConnectionURL}\"\n  sandbox=\"allow-same-origin allow-scripts\"\n  style='pointer-events: none;'\n/> \n```\n\n----------------------------------------\n\nTITLE: Installing Browserbase SDK using npm\nDESCRIPTION: This command installs the Browserbase SDK package using npm. It's a prerequisite for using Browserbase in your TypeScript project.\nSOURCE: https://github.com/browserbase/docs/blob/main/integrations/langchain/javascript-typescript.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @browserbasehq/sdk\n```\n\n----------------------------------------\n\nTITLE: Installing Browserbase SDK and CrewAI with Tools\nDESCRIPTION: Installs the Browserbase SDK and CrewAI with tools support using pip. These packages are required to add web browsing capabilities to CrewAI agents.\nSOURCE: https://github.com/browserbase/docs/blob/main/integrations/crew-ai/python.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install browserbase 'crewai[tools]'\n```\n\n----------------------------------------\n\nTITLE: Installing Browserbase SDK using pip\nDESCRIPTION: Command to install the Browserbase SDK using pip package manager.\nSOURCE: https://github.com/browserbase/docs/blob/main/integrations/llama-index/python.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install browserbase\n```\n\n----------------------------------------\n\nTITLE: Visualizing LlamaIndex Application Flow with Mermaid\nDESCRIPTION: This Mermaid flowchart illustrates the components and data flow in a LlamaIndex application, including document loaders, indexers, stores, and LLM interaction. It shows how user queries are processed and how various document types are ingested and indexed.\nSOURCE: https://github.com/browserbase/docs/blob/main/integrations/llama-index/introduction.mdx#2025-04-21_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n  user[\"User\"]\n  user--\"How to start a Session on Browserbase?\"-->A\n  A--\"use the Session REST API\"-->user\n\n  subgraph A [\"LlamaIndex application\"]\n\n    docx[\"*.docx\"]-->dl\n    pdf[\"*.pdf\"]-->dl\n    webpages[\"https://docs.browserbase.com/*\"]-->dl\n\n    dl[\"Document Loaders\"]\n    index[\"Indexers\"]\n    stores[\"Stores\"]\n    llm[\"LLM\"]\n\n    dl-->index\n    index--embeddings-->stores\n    llm<--retrieves-->stores\n  end\n```\n\n----------------------------------------\n\nTITLE: Session Lifecycle State Diagram in Mermaid\nDESCRIPTION: A Mermaid diagram that illustrates the state transitions of a Browserbase Session throughout its lifecycle, from creation to completion, including error handling and billing points.\nSOURCE: https://github.com/browserbase/docs/blob/main/features/sessions.mdx#2025-04-21_snippet_4\n\nLANGUAGE: mermaid\nCODE:\n```\nstateDiagram-v2\n    [*] --> NEW\n    ERROR --> [*]\n\n    note left of ERROR\n      Any error during the process moves the Session in ERROR state.\n\n      (Billing ends here)\n    end note\n\n    note left of NEW\n      Session created via the API\n      or a Driver (connectOverCDP())\n    end note\n\n    NEW --> PENDING\n\n    note right of PENDING\n      The Session is waiting for a Browser instance.\n    end note\n\n    PENDING --> RUNNING\n\n    note left of RUNNING\n      The Session is ready to accept actions.\n      (Billing begins here)\n    end note\n\n    RUNNING --> REQUEST_RELEASE: Note that a Session is released without connection under 15min\n    REQUEST_RELEASE --> RELEASING\n\n    note left of REQUEST_RELEASE\n      The Session has been requested to stop.\n\n      (Billing stops at this state completion)\n    end note\n\n    RELEASING --> COMPLETED\n    COMPLETED --> [*]\n```\n\n----------------------------------------\n\nTITLE: Visualizing Haystack Pipeline Flow with Mermaid Diagram\nDESCRIPTION: A mermaid diagram illustrating the flow of data through a Haystack pipeline, showing how user queries are processed through various components including Document Store, Preprocessor, Retriever, Reader, and how Browserbase would fit into this workflow.\nSOURCE: https://github.com/browserbase/docs/blob/main/integrations/haystack/introduction.mdx#2025-04-21_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph RL\n    user[\"User\"]\n    user--\"How to start a Session on Browserbase in TypeScript?\"-->A\n    A--\"use createSession() method from the SDK\"-->user\n\n    subgraph A [\"Haystack Pipeline\"]\n        DS[Document Store] -->|Stores data| P[Preprocessor]\n        P -->|Cleans & segments documents| DR[Document Retriever]\n        DR -->|Finds relevant documents| R[Reader]\n        R -->|Extracts answers| O[Output]\n        DS -->|Update/Delete documents| DS\n        DS -->|Fetches documents| DR\n        DR -->|Optional Re-ranking| RR[Re-ranker]\n        RR --> R\n        U[User] -->|Inputs queries| DR\n        U -->|Provides feedback| F[Feedback Loop]\n        F -->|Improves model| R\n        O -->|Delivers final answers| U\n    end\n```\n\n----------------------------------------\n\nTITLE: Development Workflow Diagram for Session Debugging\nDESCRIPTION: A flowchart that illustrates the development workflow when using Browserbase Session debugging. It shows how to handle various scenarios during automation execution and how to leverage the debugging tools to iteratively improve your code.\nSOURCE: https://github.com/browserbase/docs/blob/main/guides/session-debug-connection/browser-remote-control.mdx#2025-04-21_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n\n   run[\"Run your automation\"]\n   error[\"An error is raised by the page\"]\n   stuck[\"A selector mismatches\"]\n   debug[\"Live inspect and debug the Session\"]\n   failed[\"An error occurred and the Session closed\"]\n   replay[\"Inspect on Session Debugger\"]\n   worksout[\"The automation works as intented\"]\n\n   run-->error\n   run-->stuck\n   run-->failed\n   run-->worksout\n\n   stuck--Request the debug connection URL-->debug\n   error--Request the debug connection URL-->debug\n   failed--Look at logs and events played-->replay\n   worksout--Analyze the Session steps-->replay\n\n   replay--fix your code-->run\n   debug--fix your code-->run\n```\n\n----------------------------------------\n\nTITLE: Visualizing Browserbase Platform Architecture with Mermaid Flowchart\nDESCRIPTION: A flowchart diagram showing the key components and relationships within the Browserbase platform, including the load balancer, k8s cluster, maintenance services, and monitoring systems.\nSOURCE: https://github.com/browserbase/docs/blob/main/under-the-hood.mdx#2025-04-21_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\n  flowchart\n    code[\"Your code\"]\n    code<-->lb\n\n    subgraph A [\"Browserbase\"]\n        style A padding-top:100px;\n\n        dash[\"Dashboard (Playground)\"]\n        dash-->lb\n        lb[Load Balancer + Auth]\n        webhooks[Webhooks Service]\n        %% hack to fix bad rendering of node label from mermaid\n        subgraph AA [\"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;k8s cluster\"]\n          chromium[Chromium]\n        end\n        lb<-->chromium\n\n        subgraph B [Maintenance pain]\n          style B stroke:#f66,stroke-width:2px,stroke-dasharray: 5 5\n\n          proxy[Proxy Service]\n          proxyV[Proxy Vendors]\n          proxy-->proxyV\n          captcha[Captcha Bypass]\n          captchaV[Captcha Vendors]\n          captcha-->captchaV\n        end\n\n        chromium-->captcha\n        chromium-->proxy\n        obs[Observability Monitor]-->events[(Events DB)]\n        chromium-->obs\n        obs-->webhooks\n    end\n```\n\n----------------------------------------\n\nTITLE: Running Parallel Browser Automation with Environment Variables\nDESCRIPTION: A bash command demonstrating how to run the parallel automation script with the required Browserbase API credentials. The console output shows multiple pages being processed simultaneously in groups of 5.\nSOURCE: https://github.com/browserbase/docs/blob/main/guides/parallelization.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ BROWSERBASE_PROJECT_ID=xxxxxxxxx BROWSERBASE_API_KEY=xxxxxxxxx node dist/index.js\nProcessing https://en.wikipedia.org/wiki/Patrick_Flynn_(hurler)...\nProcessing https://en.wikipedia.org/wiki/Environmental_radioactivity...\nProcessing https://en.wikipedia.org/wiki/Alexi_Ogando...\nProcessing https://en.wikipedia.org/wiki/Costantino_Maria_Attilio_Barneschi...\nProcessing https://en.wikipedia.org/wiki/Breaking_bulk...\nProcessing https://en.wikipedia.org/wiki/New_Hampshire_Route_122...\nProcessing https://en.wikipedia.org/wiki/David_Hoff...\nProcessing https://en.wikipedia.org/wiki/Neodesha,_Oklahoma...\nProcessing https://en.wikipedia.org/wiki/List_of_Bethel_Threshers_head_football_coaches...\nProcessing https://en.wikipedia.org/wiki/Thysanodonta_boucheti...\nProcessing https://en.wikipedia.org/wiki/Sturm_und_Drang_(play)...\nProcessing https://en.wikipedia.org/wiki/Maša_Kolanović...\nProcessing https://en.wikipedia.org/wiki/Hermitage_of_Sant'Onofrio,_Serramonacesca...\nProcessing https://en.wikipedia.org/wiki/Bill_Simpson_(racing_driver)...\nProcessing https://en.wikipedia.org/wiki/Dundee,_Oregon...\nProcessing https://en.wikipedia.org/wiki/Caragh_McMurtry...\nProcessing https://en.wikipedia.org/wiki/Palmar_metacarpal_veins...\nProcessing https://en.wikipedia.org/wiki/2000_Uzbek_presidential_election...\n```\n\n----------------------------------------\n\nTITLE: Visualizing Langchain Architecture with Mermaid\nDESCRIPTION: A flowchart diagram showing the architecture and interaction between different components of Langchain, including Chains, Retrieval, Model I/O, and various LLM providers.\nSOURCE: https://github.com/browserbase/docs/blob/main/integrations/langchain/introduction.mdx#2025-04-21_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\n  flowchart LR\n    a[\"Application\"]\n\n\n    subgraph A [\"Langchain.js\"]\n      c[\"Chain\"]--interacts with-->m\n      c[\"Chain\"]--interacts with-->at\n\n\n      r[\"Retrieval\"]\n      at[\"Agents & Tools\"]\n      m[\"Model I/O\"]\n\n      r<--supply and store data-->m\n\n      openai[\"OpenAI\"]\n      gemini[\"Gemini\"]\n      llama[\"Llama\"]\n\n      at<-->serp[\"Google Search API\"]\n\n      m<-->openai\n      m<-->gemini\n      m<-->llama\n    end\n\n    a--runs-->c\n```\n\n----------------------------------------\n\nTITLE: Visualizing CrewAI Workflow with Mermaid Diagram\nDESCRIPTION: This Mermaid flowchart illustrates the workflow of a CrewAI setup, showing how a user interacts with a Crew consisting of tasks and agents. It demonstrates the flow of information from user objectives to the crew's tasks and agents, and back to the user as a meeting brief.\nSOURCE: https://github.com/browserbase/docs/blob/main/integrations/crew-ai/introduction.mdx#2025-04-21_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart BT\n\n    u[\"User\"]\n\n    u--provides the objectives of the meeting-->c\n    c--send meeting brief-->u\n\n    subgraph c [\"Crew\"]\n        subgraph tasks [\"Tasks\"]\n            t1[\"Retrieve meeting information\"]\n            t2[\"Research on topic\"]\n            t3[\"Summarize meeting\"]\n        end\n\n        subgraph agents [\"Agents\"]\n            a1[\"Summary and briefing Agent\"]\n            a2[\"Industry Research Agent\"]\n        end\n    end\n```\n\n----------------------------------------\n\nTITLE: Installing Browserbase Haystack Integration Package\nDESCRIPTION: Installs the browserbase-haystack package which enables integration between Browserbase web scraping service and the Haystack framework.\nSOURCE: https://github.com/browserbase/docs/blob/main/integrations/haystack/python.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install browserbase-haystack\n```\n\n----------------------------------------\n\nTITLE: Installing Browserbase SDK using pip\nDESCRIPTION: This command installs the Browserbase SDK using pip package manager.\nSOURCE: https://github.com/browserbase/docs/blob/main/integrations/langchain/python.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install browserbase\n```\n\n----------------------------------------\n\nTITLE: Installing Browserbase Python SDK via pip\nDESCRIPTION: Install the Browserbase Python SDK using pip package manager.\nSOURCE: https://github.com/browserbase/docs/blob/main/api-reference/python-sdk.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install browserbase\n```\n\n----------------------------------------\n\nTITLE: Processing Tasks and Handling Results with processBrowserbaseTasks\nDESCRIPTION: This code executes the tasks using the processBrowserbaseTasks utility and processes the results by printing the URL and a portion of the content for each processed page.\nSOURCE: https://github.com/browserbase/docs/blob/main/guides/parallelization.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst result = await processBrowserbaseTasks(tasks);\nresult.map(([url, content]) => {\n  console.log(url, content.substring(0, 200) + \"...\");\n});\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI Specification for Get Session Endpoint\nDESCRIPTION: This YAML snippet specifies the OpenAPI definition for the GET /v1/sessions/{session-id} endpoint. It outlines the path, HTTP method, and any associated parameters for retrieving session information.\nSOURCE: https://github.com/browserbase/docs/blob/main/api-reference/get-v1sessions-1.mdx#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /v1/sessions/{session-id}\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI Endpoint for Session Logs in YAML\nDESCRIPTION: This YAML snippet specifies the OpenAPI path for retrieving session logs. It defines a GET endpoint that requires a session ID parameter.\nSOURCE: https://github.com/browserbase/docs/blob/main/api-reference/retrieve-a-session-logs.mdx#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /v1/sessions/{session-id}/logs\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI Specification for POST /v1/sessions Endpoint\nDESCRIPTION: This YAML snippet defines the OpenAPI specification for the POST /v1/sessions endpoint. It specifies the HTTP method and path for creating a new session in the API.\nSOURCE: https://github.com/browserbase/docs/blob/main/api-reference/create-a-session.mdx#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: post /v1/sessions\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI Specification for GET /v1/sessions Endpoint in YAML\nDESCRIPTION: This YAML snippet defines the OpenAPI specification for the GET /v1/sessions endpoint. It specifies the API version, endpoint path, and likely includes details about request parameters, response schemas, and authentication requirements.\nSOURCE: https://github.com/browserbase/docs/blob/main/api-reference/list-all-sessions.mdx#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /v1/sessions\n```\n\n----------------------------------------\n\nTITLE: OpenAPI GET Endpoint Definition for Session Recording\nDESCRIPTION: OpenAPI specification for retrieving session recording data. The endpoint path contains a session-id parameter. Warning notes that response contains large data volume that may cause browser performance issues.\nSOURCE: https://github.com/browserbase/docs/blob/main/api-reference/retrieve-a-session-recording.mdx#2025-04-21_snippet_0\n\nLANGUAGE: openapi\nCODE:\n```\nopenapi: get /v1/sessions/{session-id}/recording\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Session Endpoint Declaration\nDESCRIPTION: OpenAPI specification defining a POST endpoint for managing browser sessions with a session ID parameter.\nSOURCE: https://github.com/browserbase/docs/blob/main/api-reference/update-a-session.mdx#2025-04-21_snippet_0\n\nLANGUAGE: openapi\nCODE:\n```\nopenapi: post /v1/sessions/{session-id}\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Specification for POST /v1/sessions/{session-id} Endpoint\nDESCRIPTION: YAML OpenAPI specification defining the POST /v1/sessions/{session-id} endpoint. This endpoint likely manages session-related operations in the API.\nSOURCE: https://github.com/browserbase/docs/blob/main/api-reference/post-v1sessions-1.mdx#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: post /v1/sessions/{session-id}\n```"
  }
]