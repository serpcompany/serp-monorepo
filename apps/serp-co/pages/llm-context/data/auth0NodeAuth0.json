[
  {
    "owner": "auth0",
    "repo": "node-auth0",
    "content": "TITLE: Signing Up a User with Auth0 Authentication Client in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the Auth0 Authentication Client to sign up a new user with email and password. It requires the Auth0 domain, client ID, and client secret.\nSOURCE: https://github.com/auth0/node-auth0/blob/master/EXAMPLES.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { AuthenticationClient } from 'auth0';\n\nconst auth = new AuthenticationClient({\n  domain: '{YOUR_TENANT_AND REGION}.auth0.com',\n  clientId: '{YOUR_CLIENT_ID}',\n  clientSecret: '{YOUR_CLIENT_SECRET}',\n});\nconst { data: user } = await auth.database.signUp({\n  email: '{USER_EMAIL}',\n  password: '{USER_PASSWORD}',\n  connection: 'Username-Password-Authentication',\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Auth0 Authentication Client\nDESCRIPTION: Configuration example for setting up the Auth0 Authentication API client with domain and optional credentials.\nSOURCE: https://github.com/auth0/node-auth0/blob/master/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { AuthenticationClient } from 'auth0';\n\nconst auth0 = new AuthenticationClient({\n  domain: '{YOUR_TENANT_AND REGION}.auth0.com',\n  clientId: '{OPTIONAL_CLIENT_ID}',\n  clientSecret: '{OPTIONAL_CLIENT_SECRET}',\n});\n```\n\n----------------------------------------\n\nTITLE: Completing Authorization Code Flow with PKCE using Auth0 Authentication Client in JavaScript\nDESCRIPTION: This example shows how to complete the Authorization Code flow with PKCE using the Auth0 Authentication Client. It includes options for validating the ID token.\nSOURCE: https://github.com/auth0/node-auth0/blob/master/EXAMPLES.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { AuthenticationClient } from 'auth0';\n\nconst auth = new AuthenticationClient({\n  domain: '{YOUR_TENANT_AND REGION}.auth0.com',\n  clientId: '{YOUR_CLIENT_ID}',\n  clientSecret: '{YOUR_CLIENT_SECRET}',\n});\nconst { data: tokens } = await auth.oauth.authorizationCodeGrantWithPKCE(\n  {\n    code_verifier: '{key used to generate the code_challenge passed to /authorize}',\n    code: '{code from authorization response}',\n    redirect_uri: '{application redirect uri}',\n  },\n  {\n    idTokenValidateOptions: {\n      nonce: '{random string passed to /authorize to check against the nonce claim}',\n      maxAge: '{number of seconds to check against the auth_time claim}',\n      organization: '{organization name or ID to check against the org_id or org_name claim}',\n    },\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Using Refresh Tokens with Auth0 Authentication Client in JavaScript\nDESCRIPTION: This snippet demonstrates how to use refresh tokens to get a new access token and how to revoke a refresh token using the Auth0 Authentication Client.\nSOURCE: https://github.com/auth0/node-auth0/blob/master/EXAMPLES.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { AuthenticationClient } from 'auth0';\n\nconst auth = new AuthenticationClient({\n  domain: '{YOUR_TENANT_AND REGION}.auth0.com',\n  clientId: '{YOUR_CLIENT_ID}',\n  clientSecret: '{YOUR_CLIENT_SECRET}',\n});\n\n// Get a new access token\nconst {\n  data: { access_token },\n} = await auth.oauth.refreshTokenGrant({\n  refresh_token: refreshToken,\n});\n\n// Revoke a refresh token\nawait auth.oauth.revokeRefreshToken({\n  token: refreshToken,\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Auth0 Management Client with Credentials\nDESCRIPTION: Setup example for the Auth0 Management API client using client credentials authentication method.\nSOURCE: https://github.com/auth0/node-auth0/blob/master/README.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ManagementClient } from 'auth0';\n\nvar management = new ManagementClient({\n  domain: '{YOUR_TENANT_AND REGION}.auth0.com',\n  clientId: '{YOUR_CLIENT_ID}',\n  clientSecret: '{YOUR_CLIENT_SECRET}',\n});\n```\n\n----------------------------------------\n\nTITLE: Passwordless Login with Auth0 Authentication Client in JavaScript\nDESCRIPTION: This snippet demonstrates how to implement passwordless login using email with the Auth0 Authentication Client. It shows sending a code via email and then logging in with that code.\nSOURCE: https://github.com/auth0/node-auth0/blob/master/EXAMPLES.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { AuthenticationClient } from 'auth0';\n\nconst auth = new AuthenticationClient({\n  domain: '{YOUR_TENANT_AND REGION}.auth0.com',\n  clientId: '{YOUR_CLIENT_ID}',\n  clientSecret: '{YOUR_CLIENT_SECRET}',\n});\n\n// Or you can `sendSMS`\nawait auth.passwordless.sendEmail({\n  email: '{user email}',\n  send: 'code',\n});\n\nconst { data: tokens } = await auth.passwordless.loginWithEmail({\n  email: '{user email}',\n  code: '{code from email}',\n});\n```\n\n----------------------------------------\n\nTITLE: Updating User Metadata with Auth0 Management Client in JavaScript\nDESCRIPTION: This snippet shows how to update a user's user_metadata using the Auth0 Management Client. It demonstrates setting a custom field in the user's metadata.\nSOURCE: https://github.com/auth0/node-auth0/blob/master/EXAMPLES.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ManagementClient } from 'auth0';\n\nconst management = new ManagementClient({\n  domain: '{YOUR_TENANT_AND REGION}.auth0.com',\n  clientId: '{YOUR_CLIENT_ID}',\n  clientSecret: '{YOUR_CLIENT_SECRET}',\n});\n\nawait management.users.update({ id: '{user id}' }, { user_metadata: { foo: 'bar' } });\n```\n\n----------------------------------------\n\nTITLE: Initializing Auth0 Management Client with API Token\nDESCRIPTION: Setup example for the Auth0 Management API client using API v2 token authentication method.\nSOURCE: https://github.com/auth0/node-auth0/blob/master/README.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ManagementClient } from 'auth0';\n\nvar management = new ManagementClient({\n  domain: '{YOUR_TENANT_AND REGION}.auth0.com',\n  token: '{YOUR_API_V2_TOKEN}',\n});\n```\n\n----------------------------------------\n\nTITLE: Exchanging Refresh Token for Access Token for a Connection with Auth0 Authentication Client in JavaScript\nDESCRIPTION: This snippet demonstrates how to exchange a refresh token for an access token for a specific connection using the Auth0 Authentication Client. It's useful for obtaining tokens for social provider connections.\nSOURCE: https://github.com/auth0/node-auth0/blob/master/EXAMPLES.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { AuthenticationClient } from 'auth0';\n\nconst auth = new AuthenticationClient({\n  domain: '{YOUR_TENANT_AND REGION}.auth0.com',\n  clientId: '{YOUR_CLIENT_ID}',\n  clientSecret: '{YOUR_CLIENT_SECRET}',\n});\n\nconst { data: token } = await auth.oauth.tokenForConnection({\n  subject_token: '{refresh_token}',\n  connection: 'google-oauth2', // The target social provider connection\n  login_hint: 'user@example.com', // Optional: to target a specific account\n});\n\n// Access the token properties\nconsole.log(token.access_token);\nconsole.log(token.token_type);\nconsole.log(token.expires_in);\n```\n\n----------------------------------------\n\nTITLE: Using Client Assertion with Auth0 Authentication Client in JavaScript\nDESCRIPTION: This example shows how to use a client assertion for authentication with Auth0. It requires the Auth0 domain, client ID, and a client assertion signing key.\nSOURCE: https://github.com/auth0/node-auth0/blob/master/EXAMPLES.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { AuthenticationClient } from 'auth0';\n\nconst clientAssertionSigningKey = `-----BEGIN PRIVATE KEY-----\n...\n-----END PRIVATE KEY-----`;\n\nconst auth = new AuthenticationClient({\n  domain: '{YOUR_TENANT_AND REGION}.auth0.com',\n  clientId: '{YOUR_CLIENT_ID}',\n  clientAssertionSigningKey,\n});\n\nconst { data: tokens } = await auth.oauth.clientCredentialsGrant({\n  audience: 'you-api',\n});\n```\n\n----------------------------------------\n\nTITLE: Paginating Through Users with Auth0 Management Client in JavaScript\nDESCRIPTION: This example demonstrates how to paginate through a list of users using the Auth0 Management Client. It fetches all users in batches until the total number of users is reached.\nSOURCE: https://github.com/auth0/node-auth0/blob/master/EXAMPLES.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ManagementClient } from 'auth0';\n\nconst management = new ManagementClient({\n  domain: '{YOUR_TENANT_AND REGION}.auth0.com',\n  clientId: '{YOUR_CLIENT_ID}',\n  clientSecret: '{YOUR_CLIENT_SECRET}',\n});\n\nconst allUsers = [];\nlet page = 0;\nwhile (true) {\n  const {\n    data: { users, total },\n  } = await management.users.getAll({\n    include_totals: true,\n    page: page++,\n  });\n  allUsers.push(...users);\n  if (allUsers.length === total) {\n    break;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Users from JSON File with Auth0 Management Client in JavaScript\nDESCRIPTION: This example demonstrates how to import users from a JSON file using the Auth0 Management Client. It creates a job to import users and then polls for the job status until completion.\nSOURCE: https://github.com/auth0/node-auth0/blob/master/EXAMPLES.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ManagementClient } from 'auth0';\nimport { fileFrom } from 'fetch-blob/from.js';\n\nconst management = new ManagementClient({\n  domain: '{YOUR_TENANT_AND REGION}.auth0.com',\n  clientId: '{YOUR_CLIENT_ID}',\n  clientSecret: '{YOUR_CLIENT_SECRET}',\n});\n\nconst {\n  data: { job: id },\n} = await management.jobs.importUsers({\n  users: await fileFrom('./users.json', 'application/json'),\n  connection_id: 'con_{your connection id}',\n});\n\nlet done = false;\nwhile (!done) {\n  const {\n    data: {\n      job: { status },\n    },\n  } = await management.jobs.get({ id });\n  if (status === 'completed') {\n    done = true;\n  } else if (status === 'failed') {\n    const { data: errors } = await management.jobs.getErrors({ id });\n    throw new Error(errors);\n  } else {\n    await new Promise((resolve) => setTimeout(resolve, 2000));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: mTLS Request with Auth0 Authentication Client in JavaScript\nDESCRIPTION: This example shows how to make an mTLS request using the Auth0 Authentication Client. It requires setting up an agent with a certificate and key, and enabling mTLS in the client configuration.\nSOURCE: https://github.com/auth0/node-auth0/blob/master/EXAMPLES.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { AuthenticationClient } from 'auth0';\nconst { Agent } = require('undici');\n\nconst auth = new AuthenticationClient({\n  domain: '{YOUR_TENANT_AND REGION}.auth0.com',\n  clientId: '{YOUR_CLIENT_ID}',\n  agent: new Agent({\n    connect: { cert: 'your_cert', key: 'your_key' },\n  }),\n  useMTLS: true,\n});\n\nconst { data: tokens } = await auth.oauth.clientCredentialsGrant({\n  audience: 'you-api',\n});\n```\n\n----------------------------------------\n\nTITLE: Paginating Through Logs with Checkpoint Pagination using Auth0 Management Client in JavaScript\nDESCRIPTION: This snippet shows how to paginate through a list of logs using checkpoint pagination with the Auth0 Management Client. It continues fetching logs until no more are available.\nSOURCE: https://github.com/auth0/node-auth0/blob/master/EXAMPLES.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ManagementClient } from 'auth0';\n\nconst management = new ManagementClient({\n  domain: '{YOUR_TENANT_AND REGION}.auth0.com',\n  clientId: '{YOUR_CLIENT_ID}',\n  clientSecret: '{YOUR_CLIENT_SECRET}',\n});\n\nconst allLogs = [];\nlet from = '';\nwhile (true) {\n  const { data: logs } = await management.logs.getAll({ from });\n  if (!logs.length) {\n    break;\n  }\n  allLogs.push(...logs);\n  ({ log_id: from } = logs[logs.length - 1]);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Auth0 SDK with NPM\nDESCRIPTION: Command to install the Auth0 SDK package using NPM package manager.\nSOURCE: https://github.com/auth0/node-auth0/blob/master/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install auth0\n```\n\n----------------------------------------\n\nTITLE: Customizing Auth0 API Requests with Custom Fetch Options in JavaScript\nDESCRIPTION: This example demonstrates how to customize API requests by passing custom options to fetch when using the Auth0 Management Client. It shows setting custom headers, an HTTPS agent, and a timeout duration.\nSOURCE: https://github.com/auth0/node-auth0/blob/master/EXAMPLES.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport https from 'https';\nimport { ManagementClient } from 'auth0';\n\nconst management = new ManagementClient({\n  domain: '{YOUR_TENANT_AND REGION}.auth0.com',\n  clientId: '{YOUR_CLIENT_ID}',\n  clientSecret: '{YOUR_CLIENT_SECRET}',\n  headers: { 'foo': 'applied to all requests' },\n  agent: new https.Agent({ ... }),\n  timeoutDuration: 5000\n});\n\nawait management.users.get({ id: '{user id}' }, { headers: { 'bar': 'applied to this request' } });\n```\n\n----------------------------------------\n\nTITLE: Overriding Fetch for Auth0 API Requests in JavaScript\nDESCRIPTION: This snippet shows how to override the fetch function used for API requests in the Auth0 Management Client. It allows for custom logging or handling of requests and responses.\nSOURCE: https://github.com/auth0/node-auth0/blob/master/EXAMPLES.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ManagementClient } from 'auth0';\nimport { myFetch } from './fetch';\n\nconst management = new ManagementClient({\n  domain: '{YOUR_TENANT_AND REGION}.auth0.com',\n  clientId: '{YOUR_CLIENT_ID}',\n  clientSecret: '{YOUR_CLIENT_SECRET}',\n  async fetch(url, init) {\n    log('before', url, init.method);\n    const res = await myFetch(url, init);\n    log('after', url, init.method, res.status);\n    return res;\n  },\n});\n\nawait management.users.get({ id: '{user id}' });\n```\n\n----------------------------------------\n\nTITLE: Migrating from Callback Pattern to Promises in Auth0 Node.js SDK\nDESCRIPTION: Example of how to migrate from callback-based pattern to Promise-based pattern in Auth0 Node.js SDK v4. In v4, callbacks are no longer supported and all methods return Promises.\nSOURCE: https://github.com/auth0/node-auth0/blob/master/v4_MIGRATION_GUIDE.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmanagement.users.getAll({}, function (err, users) {\n  console.log(users.length);\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst users = await management.users.getAll();\nconsole.log(users.length);\n```\n\n----------------------------------------\n\nTITLE: Handling Response Format Changes in Auth0 Node.js SDK v4\nDESCRIPTION: Example showing how to handle the new response format in Auth0 Node.js SDK v4. The SDK now returns an object which includes the data and other information about the response.\nSOURCE: https://github.com/auth0/node-auth0/blob/master/v4_MIGRATION_GUIDE.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst user = await management.users.get({ id: 'user-id' });\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst { data: user } = await management.users.get({ id: 'user-id' });\n```\n\n----------------------------------------\n\nTITLE: Migrating from Top-level Methods to Namespaced Methods in Auth0 SDK\nDESCRIPTION: Example showing how to migrate from top-level methods to namespaced methods in Auth0 SDK v4. Previously available top-level methods must now be accessed through their respective namespaces.\nSOURCE: https://github.com/auth0/node-auth0/blob/master/v4_MIGRATION_GUIDE.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nawait auth.clientCredentialsGrant({ audience: 'my-api' });\n```\n\nLANGUAGE: javascript\nCODE:\n```\nawait auth.oauth.clientCredentialsGrant({ audience: 'my-api' });\n```\n\n----------------------------------------\n\nTITLE: Comparing Old and New Method Calls in Auth0 Node.js SDK\nDESCRIPTION: This snippet demonstrates the change in calling style from using top-level methods on the management client to using methods on specific namespaces. The example shows how to retrieve users with both the deprecated top-level approach and the new namespace approach.\nSOURCE: https://github.com/auth0/node-auth0/blob/master/v4_MIGRATION_GUIDE.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst users = await management.getUsers();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst usersAlso = await management.users.getAll();\n```\n\n----------------------------------------\n\nTITLE: Comparing User Role Removal Methods in Auth0 SDK\nDESCRIPTION: Shows the difference between the old and new method names for removing roles from a user. In the old version, the method was called 'removeRoles', while in the new version it's called 'deleteRoles'. Both methods take the same parameters.\nSOURCE: https://github.com/auth0/node-auth0/blob/master/v4_MIGRATION_GUIDE.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nawait users.removeRoles({ id: 'user' }, { roles: ['read:users'] });\n```\n\nLANGUAGE: javascript\nCODE:\n```\nawait users.deleteRoles({ id: 'user' }, { roles: ['read:users'] });\n```\n\n----------------------------------------\n\nTITLE: Importing Users with Blob in Auth0 SDK\nDESCRIPTION: Demonstrates the change in how to import users using the Auth0 SDK. The old method accepted a readable stream, while the new method requires a Blob object. This example shows both approaches and provides an alternative using the fetch-blob library.\nSOURCE: https://github.com/auth0/node-auth0/blob/master/v4_MIGRATION_GUIDE.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nawait management.jobs.importUsers({\n  users: fs.createReadStream('./myusers.json'),\n  connection_id: 'con_123',\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nawait management.jobs.importUsers({\n  users: new Blob([fs.readFileSync('./myusers.json')], { type: 'application/json' }),\n  connection_id: 'con_123',\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { fileFrom } from 'fetch-blob/from.js';\n\nawait management.jobs.importUsers({\n  users: await fileFrom('./myusers.json', 'application/json'),\n  connection_id: 'con_123',\n});\n```\n\n----------------------------------------\n\nTITLE: Passing Fields Parameter in Auth0 SDK\nDESCRIPTION: Shows the change in how to pass the fields parameter when retrieving connections. In the old version, fields was passed as an array of strings, while in the new version it's passed as a comma-separated string.\nSOURCE: https://github.com/auth0/node-auth0/blob/master/v4_MIGRATION_GUIDE.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nawait management.connections.getAll({\n  fields: ['name', 'strategy'],\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nawait management.connections.getAll({\n  fields: 'name,strategy',\n});\n```"
  }
]