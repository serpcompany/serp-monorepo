[
  {
    "owner": "yaoapp",
    "repo": "yao",
    "content": "TITLE: Complete Excel Workflow Example\nDESCRIPTION: Illustrates a complete workflow for interacting with an Excel file.  It covers opening the file, reading and writing data, adding formulas, formatting cells, saving changes, and closing the handle. Remember to always close the handle after use.\nSOURCE: https://github.com/yaoapp/yao/blob/main/excel/README.md#_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\n// Open Excel file in writable mode\nconst h: string = Process(\"excel.Open\", \"file.xlsx\", true);\n\n// Get available sheets\nconst sheets: string[] = Process(\"excel.Sheets\", h);\nconst sheetName: string = sheets[0];\n\n// Read some data\nconst value: string = Process(\"excel.read.Cell\", h, sheetName, \"A1\");\nconsole.log(\"Cell A1 contains:\", value);\n\n// Write data\nProcess(\"excel.write.Cell\", h, sheetName, \"B1\", \"New Value\");\nProcess(\"excel.write.Row\", h, sheetName, \"A2\", [\"Data1\", \"Data2\", \"Data3\"]);\n\n// Add a formula\nProcess(\"excel.set.Formula\", h, sheetName, \"D1\", \"SUM(A1:C1)\");\n\n// Format cells\nProcess(\"excel.set.RowHeight\", h, sheetName, 1, 30);\nProcess(\"excel.set.ColumnWidth\", h, sheetName, \"A\", \"D\", 15);\n\n// Save changes\nProcess(\"excel.Save\", h);\n\n// IMPORTANT: Always close the handle when done\nProcess(\"excel.Close\", h);\n```\n\n----------------------------------------\n\nTITLE: Complete Workflow Example - TypeScript\nDESCRIPTION: Demonstrates a complete workflow of common operations using the Yao Table module. This example shows how to get table settings, search records, create, update, find and delete a record and export data to excel. It combines several operations into a single workflow.\nSOURCE: https://github.com/yaoapp/yao/blob/main/widgets/table/README.md#_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\n// Get table settings\nconst settings = Process(\"yao.table.Setting\", \"pet\");\n\n// Search for records\nconst results = Process(\n  \"yao.table.Search\",\n  \"pet\",\n  {\n    wheres: [{ column: \"status\", value: \"checked\" }],\n  },\n  1,\n  10\n);\n\n// Create a new record\nconst id = Process(\"yao.table.Create\", \"pet\", {\n  name: \"New Pet\",\n  type: \"cat\",\n  status: \"checked\",\n  doctor_id: 1,\n});\n\n// Update the record\nProcess(\"yao.table.Update\", \"pet\", id, {\n  name: \"Updated Pet Name\",\n});\n\n// Find the record\nconst record = Process(\"yao.table.Find\", \"pet\", id);\n\n// Delete the record\nProcess(\"yao.table.Delete\", \"pet\", id);\n\n// Export data to Excel\nconst filePath = Process(\"yao.table.Export\", \"pet\", null, 100);\n```\n\n----------------------------------------\n\nTITLE: Sheet Operations Workflow Example in TypeScript\nDESCRIPTION: This example showcases a complete workflow of sheet operations within an Excel file, including creating, updating, copying, listing, reading, and deleting sheets. It demonstrates proper resource management by ensuring the Excel file handle is closed after all operations are completed.\nSOURCE: https://github.com/yaoapp/yao/blob/main/excel/README.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// Open Excel file in writable mode\nconst h: string = Process(\"excel.Open\", \"file.xlsx\", true);\n\n// Create a new sheet\nconst idx: number = Process(\"excel.sheet.create\", h, \"DataSheet\");\n\n// Write some data to the new sheet\nconst data = [\n  [\"Name\", \"Age\", \"Active\"],\n  [\"John\", 30, true],\n  [\"Jane\", 25, false],\n];\nProcess(\"excel.sheet.update\", h, \"DataSheet\", data);\n\n// Make a backup copy of the sheet\nProcess(\"excel.sheet.copy\", h, \"DataSheet\", \"DataSheet_Backup\");\n\n// List all sheets to verify\nconst sheets: string[] = Process(\"excel.sheet.list\", h);\nconsole.log(\"Available sheets:\", sheets);\n\n// Read data from the backup sheet\nconst backupData: any[][] = Process(\"excel.sheet.read\", h, \"DataSheet_Backup\");\nconsole.log(\"Backup data:\", backupData);\n\n// Delete the backup sheet when no longer needed\nProcess(\"excel.sheet.delete\", h, \"DataSheet_Backup\");\n\n// Save changes\nProcess(\"excel.Save\", h);\n\n// IMPORTANT: Always close the handle when done\nProcess(\"excel.Close\", h);\n```\n\n----------------------------------------\n\nTITLE: Writing a Row in TypeScript\nDESCRIPTION: This snippet demonstrates how to write an array of values to a row in an Excel sheet, starting from a specified cell, using the `excel.write.Row` function. It requires the Excel file handle, sheet name, starting cell reference (e.g., \"A1\"), and an array of values to be written.\nSOURCE: https://github.com/yaoapp/yao/blob/main/excel/README.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Writes values to a row starting at the specified cell\n * @param handle - Handle ID from excel.open\n * @param sheet - Sheet name\n * @param startCell - Starting cell reference (e.g. \"A1\")\n * @param values - Array of values to write\n * @returns null\n */\nProcess(\"excel.write.Row\", h, \"SheetName\", \"A1\", [\"Cell1\", \"Cell2\", \"Cell3\"]);\n```\n\n----------------------------------------\n\nTITLE: Opening an Excel File in TypeScript\nDESCRIPTION: This snippet demonstrates how to open an Excel file using the `excel.Open` function. It accepts the file path and a boolean indicating whether to open it in writable mode. Remember to always close the file handle using `excel.Close` when finished.\nSOURCE: https://github.com/yaoapp/yao/blob/main/excel/README.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Opens an Excel file\n * @param path - Path to the Excel file\n * @param writable - Whether to open in writable mode (true) or read-only mode (false)\n * @returns string - Handle ID used for subsequent operations\n */\nconst h: string = Process(\"excel.Open\", \"file.xlsx\", true);\n\n// Open in read-only mode (false parameter or not passed)\nconst hRead: string = Process(\"excel.Open\", \"file.xlsx\", false);\n// or simply\nconst h2: string = Process(\"excel.Open\", \"file.xlsx\");\n\n// IMPORTANT: Don't forget to close the handle when done\n// Process(\"excel.Close\", h);\n```\n\n----------------------------------------\n\nTITLE: Update Records with WHERE - TypeScript\nDESCRIPTION: Updates records in a table that match a specified WHERE clause. It uses the `yao.table.UpdateWhere` process. The function takes the table ID, query parameters with WHERE conditions, and the record data to update. Returns null.\nSOURCE: https://github.com/yaoapp/yao/blob/main/widgets/table/README.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Updates records that match a WHERE clause\n * @param tableID - ID of the table\n * @param query - Query parameters with WHERE conditions\n * @param record - Record data to update\n * @returns null\n */\nProcess(\n  \"yao.table.UpdateWhere\",\n  \"pet\",\n  { wheres: [{ column: \"status\", value: \"checked\" }] },\n  { status: \"unchecked\" }\n);\n```\n\n----------------------------------------\n\nTITLE: Get Multiple Records - TypeScript\nDESCRIPTION: Retrieves multiple records from a table based on the provided query parameters. It utilizes the `yao.table.Get` process to fetch the records. The function returns an array of records matching the query.\nSOURCE: https://github.com/yaoapp/yao/blob/main/widgets/table/README.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Gets multiple records from a table\n * @param tableID - ID of the table\n * @param params - Query parameters\n * @returns array - Array of records\n */\nconst records = Process(\"yao.table.Get\", \"pet\", {\n  limit: 10,\n  withs: { user: {} },\n});\n```\n\n----------------------------------------\n\nTITLE: Quick Example - Excel Resource Management\nDESCRIPTION: This snippet provides a concise example of opening an Excel file, performing basic read/write operations, saving changes, and, most importantly, closing the Excel file handle using `excel.Close`. This ensures proper resource management and prevents potential file locking or corruption issues.\nSOURCE: https://github.com/yaoapp/yao/blob/main/excel/README.md#_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\n// Open an Excel file\nconst h = Process(\"excel.Open\", \"data.xlsx\", true);\n\n// Perform operations\nconst sheets = Process(\"excel.Sheets\", h);\nProcess(\"excel.write.Cell\", h, sheets[0], \"A1\", \"Hello World\");\nProcess(\"excel.Save\", h);\n\n// IMPORTANT: Always close the handle when done\nProcess(\"excel.Close\", h);\n```\n\n----------------------------------------\n\nTITLE: Reading Sheet Data in TypeScript\nDESCRIPTION: This snippet shows how to read all data from a specific sheet in an Excel workbook using the `excel.sheet.read` function. It requires the handle ID from `excel.Open` and the sheet name, returning a two-dimensional array representing the cell values.\nSOURCE: https://github.com/yaoapp/yao/blob/main/excel/README.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Reads all data from a sheet\n * @param handle - Handle ID from excel.open\n * @param name - Sheet name\n * @returns any[][] - Two-dimensional array of cell values\n */\nconst data: any[][] = Process(\"excel.sheet.read\", h, \"Sheet1\");\n```\n\n----------------------------------------\n\nTITLE: Insert Multiple Records - TypeScript\nDESCRIPTION: Inserts multiple records into the table using column names and an array of record values. The function calls the `yao.table.Insert` process, passing the table ID, column names, and record values. Returns null.\nSOURCE: https://github.com/yaoapp/yao/blob/main/widgets/table/README.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Inserts multiple records\n * @param tableID - ID of the table\n * @param columns - Column names\n * @param values - Array of records (array of arrays)\n * @returns null\n */\nProcess(\n  \"yao.table.Insert\",\n  \"pet\",\n  [\"name\", \"type\", \"status\", \"doctor_id\"],\n  [\n    [\"Cookie\", \"cat\", \"checked\", 1],\n    [\"Baby\", \"dog\", \"checked\", 1],\n    [\"Poo\", \"others\", \"checked\", 1],\n  ]\n);\n```\n\n----------------------------------------\n\nTITLE: Save a Record - TypeScript\nDESCRIPTION: Saves a record to the table, either creating a new record or updating an existing one. The function calls the `yao.table.Save` process, passing the table ID and the record data. It returns the ID of the saved record.\nSOURCE: https://github.com/yaoapp/yao/blob/main/widgets/table/README.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Saves a record (creates new or updates existing)\n * @param tableID - ID of the table\n * @param record - Record data\n * @returns number - ID of the saved record\n */\nconst id = Process(\"yao.table.Save\", \"pet\", {\n  name: \"New Pet\",\n  type: \"cat\",\n  status: \"checked\",\n  doctor_id: 1,\n});\n```\n\n----------------------------------------\n\nTITLE: Delete Records by IDs - TypeScript\nDESCRIPTION: Deletes multiple records from a table based on a comma-separated list of IDs. It uses the `yao.table.DeleteIn` process. The function takes the table ID and a string of comma-separated IDs as parameters. Returns null.\nSOURCE: https://github.com/yaoapp/yao/blob/main/widgets/table/README.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Deletes records by IDs\n * @param tableID - ID of the table\n * @param ids - Comma-separated list of IDs\n * @returns null\n */\nProcess(\"yao.table.DeleteIn\", \"pet\", \"1,2,3\");\n```\n\n----------------------------------------\n\nTITLE: Find Record by ID - TypeScript\nDESCRIPTION: Finds a specific record in a table using its ID.  It invokes the `yao.table.Find` process to retrieve the record. The function returns an object containing the record data, or null if the record is not found.\nSOURCE: https://github.com/yaoapp/yao/blob/main/widgets/table/README.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Finds a record by ID\n * @param tableID - ID of the table\n * @param id - Record ID\n * @returns object - Record data\n */\nconst record = Process(\"yao.table.Find\", \"pet\", 1);\n```\n\n----------------------------------------\n\nTITLE: Create a New Record - TypeScript\nDESCRIPTION: Creates a new record in the specified table using the provided record data. The function calls the `yao.table.Create` process, passing the table ID and the record data.  It returns the ID of the newly created record.\nSOURCE: https://github.com/yaoapp/yao/blob/main/widgets/table/README.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Creates a new record\n * @param tableID - ID of the table\n * @param record - Record data\n * @returns number - ID of the created record\n */\nconst id = Process(\"yao.table.Create\", \"pet\", {\n  name: \"New Pet\",\n  type: \"cat\",\n  status: \"checked\",\n  doctor_id: 1,\n});\n```\n\n----------------------------------------\n\nTITLE: Writing to a Cell in TypeScript\nDESCRIPTION: This snippet shows how to write a value to a specific cell in an Excel sheet using the `excel.write.Cell` function. It takes the Excel file handle, sheet name, cell reference (e.g., \"A1\"), and the value to be written as parameters. The value can be a string, number, or boolean.\nSOURCE: https://github.com/yaoapp/yao/blob/main/excel/README.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Writes a value to a cell\n * @param handle - Handle ID from excel.open\n * @param sheet - Sheet name\n * @param cell - Cell reference (e.g. \"A1\")\n * @param value - Value to write (string, number, boolean, etc.)\n * @returns null\n */\nProcess(\"excel.write.Cell\", h, \"SheetName\", \"A1\", \"Hello World\");\n// Can write different types of values\nProcess(\"excel.write.Cell\", h, \"SheetName\", \"A2\", 123.45);\nProcess(\"excel.write.Cell\", h, \"SheetName\", \"A3\", true);\n```\n\n----------------------------------------\n\nTITLE: Update a Record - TypeScript\nDESCRIPTION: Updates a specific record in a table using its ID and the data to update.  The function invokes the `yao.table.Update` process with the table ID, record ID, and the update data. Returns null.\nSOURCE: https://github.com/yaoapp/yao/blob/main/widgets/table/README.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Updates a record by ID\n * @param tableID - ID of the table\n * @param id - Record ID\n * @param record - Record data to update\n * @returns null\n */\nProcess(\"yao.table.Update\", \"pet\", 1, {\n  name: \"Updated Pet Name\",\n  status: \"unchecked\",\n});\n```\n\n----------------------------------------\n\nTITLE: Search Table Records - TypeScript\nDESCRIPTION: Searches for records within a table based on provided query parameters, page number, and page size. It utilizes the `yao.table.Search` process to perform the search. The function returns an object containing the search results.\nSOURCE: https://github.com/yaoapp/yao/blob/main/widgets/table/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Searches for records in a table\n * @param tableID - ID of the table\n * @param params - Query parameters\n * @param page - Page number\n * @param pageSize - Number of records per page\n * @returns object - Search results\n */\nconst results = Process(\n  \"yao.table.Search\",\n  \"pet\",\n  {\n    wheres: [{ column: \"status\", value: \"checked\" }],\n    withs: { user: {} },\n  },\n  1,\n  5\n);\n```\n\n----------------------------------------\n\nTITLE: Upload a File - TypeScript\nDESCRIPTION: Uploads a file associated with a specific table field. The function calls the `yao.table.Upload` process. It takes the table ID, XPath to the field, the upload method, and the file data as parameters. Returns the URL to the uploaded file.\nSOURCE: https://github.com/yaoapp/yao/blob/main/widgets/table/README.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Uploads a file for a table field\n * @param tableID - ID of the table\n * @param xpath - XPath to the field\n * @param method - Upload method\n * @param file - File data\n * @returns string - URL to the uploaded file\n */\nconst fileURL = Process(\n  \"yao.table.Upload\",\n  \"pet\",\n  \"fields.table.image.edit.props\",\n  \"api\",\n  fileData\n);\n```\n\n----------------------------------------\n\nTITLE: Update Records by IDs - TypeScript\nDESCRIPTION: Updates multiple records in a table based on a comma-separated list of IDs. It uses the `yao.table.UpdateIn` process. The function takes the table ID, a string of comma-separated IDs, and the record data to update. Returns null.\nSOURCE: https://github.com/yaoapp/yao/blob/main/widgets/table/README.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Updates records by IDs\n * @param tableID - ID of the table\n * @param ids - Comma-separated list of IDs\n * @param record - Record data to update\n * @returns null\n */\nProcess(\"yao.table.UpdateIn\", \"pet\", \"1,2,3\", {\n  status: \"unchecked\",\n});\n```\n\n----------------------------------------\n\nTITLE: Reading All Rows in TypeScript\nDESCRIPTION: This snippet shows how to read all rows from a specified sheet in an Excel workbook using the `excel.read.Row` function.  It requires the Excel file handle and the sheet name, returning a two-dimensional array of cell values.\nSOURCE: https://github.com/yaoapp/yao/blob/main/excel/README.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Reads all rows in a sheet\n * @param handle - Handle ID from excel.open\n * @param sheet - Sheet name\n * @returns string[][] - Two-dimensional array of cell values\n */\nconst rows: string[][] = Process(\"excel.read.Row\", h, \"SheetName\");\n```\n\n----------------------------------------\n\nTITLE: Generating JWT Token Typescript\nDESCRIPTION: This snippet demonstrates how to generate a JWT token using the 'utils.jwt.Make' process. It takes a user ID or subject identifier, data to include in the token, and optional JWT options as input. It returns an object containing the generated JWT token and its expiration timestamp.\nSOURCE: https://github.com/yaoapp/yao/blob/main/utils/README.md#_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Generates a JWT token\n * @param id - User ID or subject identifier\n * @param data - Data to include in the token\n * @param options - JWT options (optional)\n * @returns object - JWT token and expiration\n */\nconst token = Process(\n  \"utils.jwt.Make\",\n  1,\n  { name: \"John\", role: \"admin\" },\n  {\n    timeout: 3600,\n    subject: \"Authentication\",\n    issuer: \"YaoApp\",\n  }\n);\n// Returns: {\n//   token: \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\",\n//   expires_at: 1625097600\n// }\n```\n\n----------------------------------------\n\nTITLE: Delete a Record - TypeScript\nDESCRIPTION: Deletes a specific record from a table using its ID. It uses the `yao.table.Delete` process. The function takes the table ID and the record ID as parameters. Returns null.\nSOURCE: https://github.com/yaoapp/yao/blob/main/widgets/table/README.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Deletes a record by ID\n * @param tableID - ID of the table\n * @param id - Record ID\n * @returns null\n */\nProcess(\"yao.table.Delete\", \"pet\", 1);\n```\n\n----------------------------------------\n\nTITLE: Reading All Columns in TypeScript\nDESCRIPTION: This snippet demonstrates how to read all columns from a specific sheet in an Excel workbook using the `excel.read.Column` function. It takes the Excel file handle and the sheet name as input, returning a two-dimensional array representing the cell values organized by column.\nSOURCE: https://github.com/yaoapp/yao/blob/main/excel/README.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Reads all columns in a sheet\n * @param handle - Handle ID from excel.open\n * @param sheet - Sheet name\n * @returns string[][] - Two-dimensional array of cell values\n */\nconst columns: string[][] = Process(\"excel.read.Column\", h, \"SheetName\");\n```\n\n----------------------------------------\n\nTITLE: Get Component Data - TypeScript\nDESCRIPTION: Retrieves data for a specific component within a table. The function uses the `yao.table.Component` process. It takes the table ID, XPath to the component, the component method, and optional query parameters. It returns component data.\nSOURCE: https://github.com/yaoapp/yao/blob/main/widgets/table/README.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Gets data for a component\n * @param tableID - ID of the table\n * @param xpath - XPath to the component\n * @param method - Component method\n * @param query - Optional query parameters\n * @returns any - Component data\n */\nconst options = Process(\n  \"yao.table.Component\",\n  \"pet\",\n  \"fields.filter.status.edit.props.xProps\",\n  \"remote\",\n  { select: [\"name\", \"status\"], limit: 10 }\n);\n```\n\n----------------------------------------\n\nTITLE: Delete Records with WHERE - TypeScript\nDESCRIPTION: Deletes records from a table based on a specified WHERE clause.  It uses the `yao.table.DeleteWhere` process. The function takes the table ID and query parameters containing the WHERE conditions. Returns null.\nSOURCE: https://github.com/yaoapp/yao/blob/main/widgets/table/README.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Deletes records that match a WHERE clause\n * @param tableID - ID of the table\n * @param query - Query parameters with WHERE conditions\n * @returns null\n */\nProcess(\"yao.table.DeleteWhere\", \"pet\", {\n  wheres: [{ column: \"status\", value: \"checked\" }],\n});\n```\n\n----------------------------------------\n\nTITLE: Writing Multiple Rows in TypeScript\nDESCRIPTION: This snippet shows how to write a two-dimensional array of values to an Excel sheet, starting from a specified cell, using the `excel.write.All` function.  The function takes the Excel file handle, sheet name, starting cell reference (e.g., \"A1\"), and a two-dimensional array as input.\nSOURCE: https://github.com/yaoapp/yao/blob/main/excel/README.md#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Writes a two-dimensional array of values starting at the specified cell\n * @param handle - Handle ID from excel.open\n * @param sheet - Sheet name\n * @param startCell - Starting cell reference (e.g. \"A1\")\n * @param values - Two-dimensional array of values to write\n * @returns null\n */\nProcess(\"excel.write.All\", h, \"SheetName\", \"A1\", [\n  [\"Row1Cell1\", \"Row1Cell2\", \"Row1Cell3\"],\n  [\"Row2Cell1\", \"Row2Cell2\", \"Row2Cell3\"],\n]);\n```\n\n----------------------------------------\n\nTITLE: Writing a Column in TypeScript\nDESCRIPTION: This snippet demonstrates how to write an array of values to a column in an Excel sheet, starting from a specified cell.  It uses the `excel.write.Column` function and requires the Excel file handle, sheet name, starting cell reference (e.g., \"A1\"), and an array of values.\nSOURCE: https://github.com/yaoapp/yao/blob/main/excel/README.md#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Writes values to a column starting at the specified cell\n * @param handle - Handle ID from excel.open\n * @param sheet - Sheet name\n * @param startCell - Starting cell reference (e.g. \"A1\")\n * @param values - Array of values to write\n * @returns null\n */\nProcess(\"excel.write.Column\", h, \"SheetName\", \"A1\", [\"Row1\", \"Row2\", \"Row3\"]);\n```\n\n----------------------------------------\n\nTITLE: Setting Cell Style in TypeScript\nDESCRIPTION: This snippet demonstrates how to set the style of a specific cell in an Excel sheet using the `excel.set.Style` function. It takes the Excel file handle, sheet name, cell reference (e.g., \"A1\"), and a style ID as inputs.\nSOURCE: https://github.com/yaoapp/yao/blob/main/excel/README.md#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Sets a cell's style\n * @param handle - Handle ID from excel.open\n * @param sheet - Sheet name\n * @param cell - Cell reference (e.g. \"A1\")\n * @param styleID - Style ID\n * @returns null\n */\nProcess(\"excel.set.Style\", h, \"SheetName\", \"A1\", 1);\n```\n\n----------------------------------------\n\nTITLE: Get Table Settings - TypeScript\nDESCRIPTION: Retrieves the settings for a specific table using its ID. It uses the `yao.table.Setting` process and returns an object containing the table settings. The `tableID` parameter specifies the ID of the table to retrieve settings for.\nSOURCE: https://github.com/yaoapp/yao/blob/main/widgets/table/README.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Gets the settings for a table\n * @param tableID - ID of the table\n * @returns object - Table settings\n */\nconst settings = Process(\"yao.table.Setting\", \"pet\");\n```\n\n----------------------------------------\n\nTITLE: Conditional Processing (utils.flow.IF)\nDESCRIPTION: This snippet details how to conditionally execute a process based on specified conditions using the `utils.flow.IF` function. The function takes an array of condition objects as input and executes the process associated with the first matching condition. The return is the result of the executed process and uses the Yao Process API.\nSOURCE: https://github.com/yaoapp/yao/blob/main/utils/README.md#_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Conditionally executes a process based on conditions\n * @param conditions - Array of condition objects\n * @returns any - Result of the executed process\n */\nconst result = Process(\n  \"utils.flow.IF\",\n  {\n    when: [{ operator: \"eq\", value: 1, field: \"status\" }],\n    process: \"scripts.test.active\",\n    args: [\"User is active\"],\n  },\n  {\n    when: [{ operator: \"eq\", value: 0, field: \"status\" }],\n    process: \"scripts.test.inactive\",\n    args: [\"User is inactive\"],\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Updating Sheet Data in TypeScript\nDESCRIPTION: This snippet demonstrates how to update data within a sheet of an Excel workbook, creating the sheet if it does not already exist. It utilizes the `excel.sheet.update` function, which takes the Excel file handle, sheet name, and a two-dimensional array of values as input.\nSOURCE: https://github.com/yaoapp/yao/blob/main/excel/README.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Updates data in a sheet. Creates the sheet if it doesn't exist.\n * @param handle - Handle ID from excel.open\n * @param name - Sheet name\n * @param data - Two-dimensional array of values to write\n * @returns null\n */\nconst data = [\n  [\"Header1\", \"Header2\", \"Header3\"],\n  [1, \"Data1\", true],\n  [2, \"Data2\", false],\n];\nProcess(\"excel.sheet.update\", h, \"Sheet1\", data);\n```\n\n----------------------------------------\n\nTITLE: Complete Workflow Example in Typescript\nDESCRIPTION: This snippet demonstrates a complete workflow using various utilities from the `utils` module.  It covers generating a UUID, getting a timestamp, creating a path, printing colored information, parsing URL parameters, handling errors conditionally, generating a JWT token, using flow control, and getting the current date and time. Dependencies include the `utils` module.\nSOURCE: https://github.com/yaoapp/yao/blob/main/utils/README.md#_snippet_55\n\nLANGUAGE: typescript\nCODE:\n```\n// Generate a UUID\nconst id = Process(\"utils.str.UUID\");\n\n// Get current timestamp\nconst timestamp = Process(\"utils.now.Timestamp\");\n\n// Create a path\nconst path = Process(\"utils.str.JoinPath\", \"data\", id, \"file.txt\");\n\n// Print colored info\nProcess(\"utils.fmt.ColorPrintf\", \"blue\", \"Processing request with ID: %s\", id);\n\n// Parse URL parameters\nconst url = \"https://example.com/api?token=123&id=\" + id;\nconst parsedUrl = Process(\"utils.url.ParseURL\", url);\n\n// Handle errors conditionally\nif (!parsedUrl.query.token) {\n  Process(\"utils.throw.Unauthorized\", \"Missing token\");\n}\n\n// Generate a JWT token\nconst token = Process(\n  \"utils.jwt.Make\",\n  1,\n  { id: id, timestamp: timestamp },\n  {\n    timeout: 3600,\n    subject: \"API Access\",\n  }\n);\n\n// Use flow control for conditional processing\nProcess(\n  \"utils.flow.Case\",\n  {\n    when: [{ operator: \"gt\", value: 0, field: \"status\" }],\n    process: \"utils.flow.Return\",\n    args: [{ token: token.token, path: path }],\n  },\n  {\n    when: [{ operator: \"eq\", value: 0, field: \"status\" }],\n    process: \"utils.throw.BadRequest\",\n    args: [\"Invalid status\"],\n  }\n);\n\n// Get current date and time\nconst now = Process(\"utils.now.DateTime\");\n\n// Print a success message\nProcess(\"utils.fmt.ColorPrintf\", \"green\", \"Operation completed at %s\", now);\n```\n\n----------------------------------------\n\nTITLE: Iterating over Array/Map Typescript\nDESCRIPTION: This snippet demonstrates how to iterate over an array or map using the 'utils.flow.Each' process. It takes the data structure and a process configuration as input, executing the specified process for each item in the data. The process configuration includes the name of the process to execute and its arguments, allowing you to access both the key and value of each element.\nSOURCE: https://github.com/yaoapp/yao/blob/main/utils/README.md#_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Iterates over an array or map and executes a process for each item\n * @param data - Array or map to iterate over\n * @param processConfig - Process configuration\n * @returns null\n */\nProcess(\"utils.flow.Each\", [\"apple\", \"banana\", \"orange\"], {\n  process: \"scripts.test.log\",\n  args: [\"Item: ::value at index ::key\"],\n});\n\n// Also works with objects\nProcess(\n  \"utils.flow.Each\",\n  { name: \"John\", age: 30 },\n  {\n    process: \"scripts.test.log\",\n    args: [\"::key = ::value\"],\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Reading a Cell Value in TypeScript\nDESCRIPTION: This snippet demonstrates how to read the value of a specific cell in an Excel sheet using the `excel.read.Cell` function. It takes the Excel file handle, sheet name, and cell reference (e.g., \"A1\") as inputs and returns the cell value as a string.\nSOURCE: https://github.com/yaoapp/yao/blob/main/excel/README.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Reads a cell's value\n * @param handle - Handle ID from excel.open\n * @param sheet - Sheet name\n * @param cell - Cell reference (e.g. \"A1\")\n * @returns string - Cell value\n */\nconst value: string = Process(\"excel.read.Cell\", h, \"SheetName\", \"A1\");\n```\n\n----------------------------------------\n\nTITLE: Creating a New Sheet in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a new sheet in an Excel workbook using the `excel.sheet.create` function. It requires the handle ID from `excel.Open` and a name for the new sheet, returning the index of the created sheet.\nSOURCE: https://github.com/yaoapp/yao/blob/main/excel/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Creates a new sheet in the workbook\n * @param handle - Handle ID from excel.open\n * @param name - Name for the new sheet\n * @returns number - Index of the new sheet\n */\nconst idx: number = Process(\"excel.sheet.create\", h, \"NewSheet\");\n```\n\n----------------------------------------\n\nTITLE: Keeping Specific Columns Typescript\nDESCRIPTION: This snippet demonstrates how to keep only specified columns in an array of records using the 'utils.arr.Keep' process. It accepts an array of records and an array of column names to keep as input.  The function returns an array containing only the specified columns.\nSOURCE: https://github.com/yaoapp/yao/blob/main/utils/README.md#_snippet_40\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Keeps only specified columns in an array of records\n * @param records - Array of records\n * @param columns - Columns to keep\n * @returns array - Records with only specified columns\n */\nconst simplified = Process(\n  \"utils.arr.Keep\",\n  [\n    { id: 1, name: \"John\", email: \"john@example.com\", role: \"admin\" },\n    { id: 2, name: \"Jane\", email: \"jane@example.com\", role: \"user\" },\n  ],\n  [\"id\", \"name\"]\n);\n// Returns: [\n//   { id: 1, name: \"John\" },\n//   { id: 2, name: \"Jane\" }\n// ]\n```\n\n----------------------------------------\n\nTITLE: Closing an Excel File in TypeScript\nDESCRIPTION: This snippet demonstrates how to close an Excel file using the `excel.Close` function. It is crucial to always close file handles after usage to prevent resource leaks and file locking issues. Provide the handle ID obtained from `excel.Open` to close the corresponding file.\nSOURCE: https://github.com/yaoapp/yao/blob/main/excel/README.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Closes an Excel file\n * @param handle - Handle ID from excel.open\n * @returns null\n */\nProcess(\"excel.Close\", h);\n```\n\n----------------------------------------\n\nTITLE: Checking if a Sheet Exists in TypeScript\nDESCRIPTION: This snippet demonstrates how to check the existence of a specific sheet within an Excel workbook using the `excel.sheet.exists` function. It requires the Excel file handle and the sheet name to be checked, returning a boolean value indicating the existence of the sheet.\nSOURCE: https://github.com/yaoapp/yao/blob/main/excel/README.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Checks if a sheet exists in the workbook\n * @param handle - Handle ID from excel.open\n * @param name - Sheet name to check\n * @returns boolean - true if sheet exists, false otherwise\n */\nconst exists: boolean = Process(\"excel.sheet.exists\", h, \"Sheet1\");\n```\n\n----------------------------------------\n\nTITLE: Convert to Query Parameters (utils.url.QueryParam)\nDESCRIPTION: This snippet demonstrates how to convert various data types (e.g., map, url.Values) to a query parameter string using the `utils.url.QueryParam` function. It takes data as input and returns the formatted query parameter string. It leverages the Yao Process API.\nSOURCE: https://github.com/yaoapp/yao/blob/main/utils/README.md#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Converts various data types to query parameters\n * @param data - Data to convert (map, url.Values, etc.)\n * @returns string - Query parameter string\n */\nconst params = Process(\"utils.url.QueryParam\", {\n  name: \"John\",\n  tags: [\"dev\", \"admin\"],\n});\n// Returns: \"name=John&tags=dev&tags=admin\"\n```\n\n----------------------------------------\n\nTITLE: Saving Changes to an Excel File in TypeScript\nDESCRIPTION: This snippet demonstrates how to save any changes made to an Excel file using the `excel.Save` function. It requires the Excel file handle obtained from the `excel.Open` function.\nSOURCE: https://github.com/yaoapp/yao/blob/main/excel/README.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Saves changes to the Excel file\n * @param handle - Handle ID from excel.open\n * @returns null\n */\nProcess(\"excel.Save\", h);\n```\n\n----------------------------------------\n\nTITLE: Verifying JWT Token Typescript\nDESCRIPTION: This snippet shows how to verify a JWT token using the 'utils.jwt.Verify' process. It takes the JWT token as input and returns an object containing the token claims if the token is valid. If the token is invalid, it throws an exception.\nSOURCE: https://github.com/yaoapp/yao/blob/main/utils/README.md#_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Verifies a JWT token\n * @param token - JWT token to verify\n * @returns object - Token claims\n * @throws Exception if token is invalid\n */\nconst claims = Process(\n  \"utils.jwt.Verify\",\n  \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\"\n);\n// Returns: { id: 1, sid: \"session_id\", data: { name: \"John\", role: \"admin\" }, ... }\n```\n\n----------------------------------------\n\nTITLE: Splitting Records into Columns/Values Typescript\nDESCRIPTION: This snippet shows how to split an array of records into column names and value arrays using the 'utils.arr.Split' process. It takes an array of records as input and returns an object containing the array of columns and the array of values.\nSOURCE: https://github.com/yaoapp/yao/blob/main/utils/README.md#_snippet_42\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Splits records into column names and value arrays\n * @param records - Array of records\n * @returns object - Contains columns array and values matrix\n */\nconst split = Process(\"utils.arr.Split\", [\n  { id: 1, name: \"John\", age: 30 },\n  { id: 2, name: \"Jane\", age: 25 },\n]);\n// Returns: {\n//   columns: [\"id\", \"name\", \"age\"],\n//   values: [\n//     [1, \"John\", 30],\n//     [2, \"Jane\", 25]\n//   ]\n// }\n```\n\n----------------------------------------\n\nTITLE: Download a File - TypeScript\nDESCRIPTION: Downloads a file associated with a table. The function uses the `yao.table.Download` process. It takes the table ID, the field name, the file path, a JWT token, and an optional flag indicating if it's an app root as parameters. Returns file content and type.\nSOURCE: https://github.com/yaoapp/yao/blob/main/widgets/table/README.md#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Downloads a file\n * @param tableID - ID of the table\n * @param field - Field name\n * @param file - File path\n * @param token - JWT token\n * @param isAppRoot - Is app root (optional, default: 0)\n * @returns object - File content and type\n */\nconst fileContent = Process(\n  \"yao.table.Download\",\n  \"pet\",\n  \"image\",\n  \"/path/to/file.jpg\",\n  \"JWT_TOKEN_STRING\",\n  0\n);\n```\n\n----------------------------------------\n\nTITLE: Iterating Excel Columns\nDESCRIPTION: Demonstrates iterating through columns in an Excel sheet.  It opens a column iterator using `excel.each.OpenColumn`, retrieves the next column using `excel.each.NextColumn` until no more columns are available, and then closes the iterator using `excel.each.CloseColumn`. Always close the iterator after use to prevent resource leaks.\nSOURCE: https://github.com/yaoapp/yao/blob/main/excel/README.md#_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Opens a column iterator\n * @param handle - Handle ID from excel.open\n * @param sheet - Sheet name\n * @returns string - Column iterator ID\n */\nconst cid: string = Process(\"excel.each.OpenColumn\", h, \"SheetName\");\n\n/**\n * Gets the next column from the iterator\n * @param colID - Column iterator ID from excel.each.opencolumn\n * @returns string[] | null - Array of cell values or null if no more columns\n */\nlet col: string[] | null;\nwhile ((col = Process(\"excel.each.NextColumn\", cid)) !== null) {\n  // Process the column\n  console.log(col);\n}\n\n/**\n * IMPORTANT: Always close the column iterator when done\n * @param colID - Column iterator ID from excel.each.opencolumn\n * @returns null\n */\nProcess(\"excel.each.CloseColumn\", cid);\n```\n\n----------------------------------------\n\nTITLE: Converting Excel Column Number to Name\nDESCRIPTION: Converts an Excel column number (1-based) to its corresponding column name (e.g., 'A', 'AB'). The function accepts a column number and returns its string representation.\nSOURCE: https://github.com/yaoapp/yao/blob/main/excel/README.md#_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Converts a column number to a column name\n * @param colNum - Column number (1-based)\n * @returns string - Column name\n */\nconst colName: string = Process(\"excel.convert.ColumnNumberToName\", 37); // Returns \"AK\"\n```\n\n----------------------------------------\n\nTITLE: Export Table Data to Excel - TypeScript\nDESCRIPTION: Exports data from a table to an Excel file. The function utilizes the `yao.table.Export` process. It takes the table ID, optional query parameters, and a chunk size as parameters. It returns the file path to the exported Excel file.\nSOURCE: https://github.com/yaoapp/yao/blob/main/widgets/table/README.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Exports table data to an Excel file\n * @param tableID - ID of the table\n * @param queryParam - Query parameters (optional)\n * @param chunkSize - Number of records per chunk (default: 50)\n * @returns string - Path to the exported Excel file\n */\nconst filePath = Process(\n  \"yao.table.Export\",\n  \"pet\",\n  { wheres: [{ column: \"status\", value: \"checked\" }] },\n  100\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Excel Cell Style\nDESCRIPTION: Applies a predefined style to a specific cell in an Excel sheet. It requires an Excel handle (h), sheet name, cell reference (e.g., 'A1'), and a style ID. Note: Custom style creation is not currently supported in the Yao Excel module.\nSOURCE: https://github.com/yaoapp/yao/blob/main/excel/README.md#_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\n// Create style with thick border and light gray fill\nconst styleID = 1; // This would typically be a custom style ID created via the NewStyle API\n\n// Apply the style to cell A1\nProcess(\"excel.set.Style\", h, \"SheetName\", \"A1\", styleID);\n```\n\n----------------------------------------\n\nTITLE: Getting All Values from Map Typescript\nDESCRIPTION: This snippet demonstrates how to get all values from a map using the 'utils.map.Values' process. It takes a map as input and returns an array containing all the values of the map.\nSOURCE: https://github.com/yaoapp/yao/blob/main/utils/README.md#_snippet_53\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Gets all values from a map\n * @param map - Input map\n * @returns array - Array of values\n */\nconst values = Process(\"utils.map.Values\", { id: 1, name: \"John\", age: 30 });\n// Returns: [1, \"John\", 30]\n```\n\n----------------------------------------\n\nTITLE: Iterating Excel Rows\nDESCRIPTION: Demonstrates iterating through rows in an Excel sheet. It opens a row iterator using `excel.each.OpenRow`, retrieves the next row using `excel.each.NextRow` until no more rows are available, and then closes the iterator using `excel.each.CloseRow`. Always close the iterator after use to prevent resource leaks.\nSOURCE: https://github.com/yaoapp/yao/blob/main/excel/README.md#_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Opens a row iterator\n * @param handle - Handle ID from excel.open\n * @param sheet - Sheet name\n * @returns string - Row iterator ID\n */\nconst rid: string = Process(\"excel.each.OpenRow\", h, \"SheetName\");\n\n/**\n * Gets the next row from the iterator\n * @param rowID - Row iterator ID from excel.each.openrow\n * @returns string[] | null - Array of cell values or null if no more rows\n */\nlet row: string[] | null;\nwhile ((row = Process(\"excel.each.NextRow\", rid)) !== null) {\n  // Process the row\n  console.log(row);\n}\n\n/**\n * IMPORTANT: Always close the row iterator when done\n * @param rowID - Row iterator ID from excel.each.openrow\n * @returns null\n */\nProcess(\"excel.each.CloseRow\", rid);\n```\n\n----------------------------------------\n\nTITLE: Setting Excel Formula\nDESCRIPTION: Sets a formula in a specific cell of an Excel sheet. It accepts the Excel handle (h), sheet name, cell reference (e.g., 'C1'), and the Excel formula (without the leading equals sign) as parameters. The formula will be evaluated and displayed in the specified cell.\nSOURCE: https://github.com/yaoapp/yao/blob/main/excel/README.md#_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nProcess(\"excel.set.Formula\", h, \"SheetName\", \"C1\", \"SUM(A1:B1)\");\n```\n\n----------------------------------------\n\nTITLE: Getting All Keys from Map Typescript\nDESCRIPTION: This snippet demonstrates how to get all keys from a map using the 'utils.map.Keys' process. It takes a map as input. It returns an array containing all the keys of the map.\nSOURCE: https://github.com/yaoapp/yao/blob/main/utils/README.md#_snippet_52\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Gets all keys from a map\n * @param map - Input map\n * @returns array - Array of keys\n */\nconst keys = Process(\"utils.map.Keys\", { id: 1, name: \"John\", age: 30 });\n// Returns: [\"id\", \"name\", \"age\"]\n```\n\n----------------------------------------\n\nTITLE: Generating Captcha Typescript\nDESCRIPTION: This snippet shows how to generate a captcha using the 'utils.captcha.Make' process. It takes captcha options such as width, height, length, type (image or audio), and language as input. It returns an object containing the captcha ID and the image/audio content (base64 encoded).\nSOURCE: https://github.com/yaoapp/yao/blob/main/utils/README.md#_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Generates a captcha\n * @param options - Captcha options\n * @returns object - Captcha ID and image/audio content\n */\nconst captcha = Process(\"utils.captcha.Make\", {\n  width: 240,\n  height: 80,\n  length: 6,\n  type: \"image\", // or \"audio\"\n  lang: \"en\",\n});\n// Returns: {\n//   id: \"captcha_id\",\n//   content: \"data:image/png;base64,...\" // base64 encoded image or audio\n// }\n```\n\n----------------------------------------\n\nTITLE: Getting Multiple Environment Variables Typescript\nDESCRIPTION: This snippet shows how to retrieve the values of multiple environment variables using the 'utils.env.GetMany' process. It accepts a variable number of environment variable names as input and returns an object containing the mapping of each environment variable name to its value.\nSOURCE: https://github.com/yaoapp/yao/blob/main/utils/README.md#_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Gets multiple environment variables\n * @param ...names - Environment variable names\n * @returns object - Map of environment variables\n */\nconst config = Process(\"utils.env.GetMany\", \"DB_HOST\", \"DB_PORT\", \"DB_USER\");\n// Returns: { \"DB_HOST\": \"localhost\", \"DB_PORT\": \"5432\", \"DB_USER\": \"postgres\" }\n```\n\n----------------------------------------\n\nTITLE: Flatten Tree to Array (utils.tree.Flatten)\nDESCRIPTION: This snippet shows how to flatten a hierarchical tree structure to a flat array using the `utils.tree.Flatten` function. The function takes the tree structure and optional configuration as input and returns a flattened array. It leverages the Yao Process API.\nSOURCE: https://github.com/yaoapp/yao/blob/main/utils/README.md#_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Flattens a hierarchical tree structure to a flat array\n * @param tree - Tree structure (array of nodes with children)\n * @param options - Optional configuration\n * @returns array - Flattened array\n */\nconst flat = Process(\"utils.tree.Flatten\", [\n  {\n    id: 1,\n    name: \"Parent\",\n    children: [\n      { id: 2, name: \"Child 1\" },\n      { id: 3, name: \"Child 2\" },\n    ],\n  },\n]);\n// Returns: [\n//   { id: 1, name: \"Parent\", parent: null },\n//   { id: 2, name: \"Child 1\", parent: 1 },\n//   { id: 3, name: \"Child 2\", parent: 1 }\n// ]\n\n// With custom options\nconst customFlat = Process(\n  \"utils.tree.Flatten\",\n  [{ uid: 1, title: \"Parent\", items: [{ uid: 2, title: \"Child\" }] }],\n  { primary: \"uid\", children: \"items\", parent: \"parentId\" }\n);\n// Returns: [\n//   { uid: 1, title: \"Parent\", parentId: null },\n//   { uid: 2, title: \"Child\", parentId: 1 }\n// ]\n```\n\n----------------------------------------\n\nTITLE: Verifying Password Typescript\nDESCRIPTION: This snippet demonstrates how to verify a password against a bcrypt hash using the 'utils.pwd.Verify' process. It takes the plain text password and the bcrypt hash as input. It returns true if the password matches the hash, and throws an exception if the password is invalid.\nSOURCE: https://github.com/yaoapp/yao/blob/main/utils/README.md#_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Verifies a password against a hash\n * @param password - Plain text password\n * @param hash - Bcrypt hash to compare against\n * @returns boolean - True if password matches\n * @throws Exception if password is invalid\n */\nconst isValid = Process(\"utils.pwd.Verify\", \"mypassword\", \"$2a$10$...\");\n// Returns: true\n// Throws exception if invalid\n```\n\n----------------------------------------\n\nTITLE: Getting Environment Variable Typescript\nDESCRIPTION: This snippet shows how to retrieve the value of an environment variable using the 'utils.env.Get' process.  It takes the environment variable name as input and returns its value.\nSOURCE: https://github.com/yaoapp/yao/blob/main/utils/README.md#_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Gets the value of an environment variable\n * @param name - Environment variable name\n * @returns string - Environment variable value\n */\nconst dbHost = Process(\"utils.env.Get\", \"DB_HOST\");\n```\n\n----------------------------------------\n\nTITLE: Throwing Errors Typescript\nDESCRIPTION: This snippet shows how to throw a custom error using the 'utils.flow.Throw' process. It takes an error message and an error code as input. When executed, it throws an exception with the specified code.\nSOURCE: https://github.com/yaoapp/yao/blob/main/utils/README.md#_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Throws a custom error with message and code\n * @param message - Error message\n * @param code - Error code\n * @throws Exception with the specified code\n */\nProcess(\"utils.flow.Throw\", \"Operation failed\", 500);\n```\n\n----------------------------------------\n\nTITLE: Verifying Captcha Typescript\nDESCRIPTION: This snippet illustrates how to verify a captcha code using the 'utils.captcha.Verify' process. It takes the captcha ID and the user input code as input. It returns true if the captcha is valid, and throws an exception if the captcha is invalid.\nSOURCE: https://github.com/yaoapp/yao/blob/main/utils/README.md#_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Verifies a captcha code\n * @param id - Captcha ID\n * @param code - User input code\n * @returns boolean - True if captcha is valid\n * @throws Exception if captcha is invalid\n */\nconst isValid = Process(\"utils.captcha.Verify\", \"captcha_id\", \"123456\");\n// Returns: true\n// Throws exception if invalid\n```\n\n----------------------------------------\n\nTITLE: Concatenate Strings (utils.str.Join)\nDESCRIPTION: This snippet demonstrates how to join an array of strings with a specified separator using the `utils.str.Join` function. It takes an array of strings and a separator as input and returns the concatenated string.  It leverages Yao's Process API to call the utility function.\nSOURCE: https://github.com/yaoapp/yao/blob/main/utils/README.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Joins an array of values with a separator\n * @param values - Array of values to join\n * @param separator - String separator\n * @returns string - Joined string\n */\nconst joined = Process(\"utils.str.Join\", [\"Hello\", \"World\"], \" \");\n// Returns: \"Hello World\"\n```\n\n----------------------------------------\n\nTITLE: Deleting Key from Map Typescript\nDESCRIPTION: This snippet demonstrates how to delete a key from a map using the 'utils.map.Del' process. It takes the map and the key to delete as input and returns the updated map.\nSOURCE: https://github.com/yaoapp/yao/blob/main/utils/README.md#_snippet_50\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Deletes a key from a map\n * @param map - Input map\n * @param key - Key to delete\n * @returns object - Updated map\n */\nconst smaller = Process(\n  \"utils.map.Del\",\n  { id: 1, name: \"John\", temp: \"xyz\" },\n  \"temp\"\n);\n// Returns: { id: 1, name: \"John\" }\n```\n\n----------------------------------------\n\nTITLE: Validate JSON Structure (utils.json.Validate)\nDESCRIPTION: This snippet demonstrates how to validate a JSON structure against specified rules using the `utils.json.Validate` function. The function takes JSON data and validation rules as input and returns a boolean indicating whether the JSON is valid. The Yao Process API is used.\nSOURCE: https://github.com/yaoapp/yao/blob/main/utils/README.md#_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Validates a JSON structure against rules\n * @param data - JSON data to validate\n * @param rules - Validation rules\n * @returns boolean - True if valid, false otherwise\n */\nconst isValid = Process(\"utils.json.Validate\", { name: \"John\", age: 30 }, [\n  { haskey: \"name\" },\n  { haskey: \"age\" },\n]);\n// Returns: true\n```\n\n----------------------------------------\n\nTITLE: Creating and Running Pipe with DSL and Context\nDESCRIPTION: Creates and runs a Pipe using a provided DSL text and an initial context. The DSL and context (as a JSON string) are passed as arguments to the `pipe.CreateWith` command.  Arguments can be passed to the process.\nSOURCE: https://github.com/yaoapp/yao/blob/main/pipe/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyao run pipe.CreateWith <DSL> '::{\"foo\":\"bar\"}' [args...]\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variable Typescript\nDESCRIPTION: This snippet illustrates how to set the value of an environment variable using the 'utils.env.Set' process. It requires the environment variable name and the value to be set. This process doesn't return any value.\nSOURCE: https://github.com/yaoapp/yao/blob/main/utils/README.md#_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Sets the value of an environment variable\n * @param name - Environment variable name\n * @param value - Environment variable value\n * @returns null\n */\nProcess(\"utils.env.Set\", \"APP_MODE\", \"production\");\n```\n\n----------------------------------------\n\nTITLE: Case Statement (utils.flow.Case)\nDESCRIPTION: This snippet shows how to execute the first matching case based on specified conditions using the `utils.flow.Case` function. The function takes a variable number of case objects as input and executes the process associated with the first matching case. Returns the result of the executed process. It invokes the Yao Process API.\nSOURCE: https://github.com/yaoapp/yao/blob/main/utils/README.md#_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Executes the first matching case based on conditions\n * @param ...cases - Case objects with conditions\n * @returns any - Result of the executed process\n */\nconst result = Process(\n  \"utils.flow.Case\",\n  {\n    when: [{ operator: \"eq\", value: \"admin\", field: \"role\" }],\n    process: \"scripts.user.adminPanel\",\n    args: [],\n  },\n  {\n    when: [{ operator: \"eq\", value: \"user\", field: \"role\" }],\n    process: \"scripts.user.userDashboard\",\n    args: [],\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Get Current Date (utils.now.Date)\nDESCRIPTION: This snippet explains how to get the current date in YYYY-MM-DD format using the `utils.now.Date` function. The function returns a string representing the current date.  It invokes the utility function via the Yao Process API.\nSOURCE: https://github.com/yaoapp/yao/blob/main/utils/README.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Gets the current date in YYYY-MM-DD format\n * @returns string - Current date\n */\nconst date = Process(\"utils.now.Date\");\n// Returns: \"2023-07-01\"\n```\n\n----------------------------------------\n\nTITLE: Removing Duplicate Values Typescript\nDESCRIPTION: This snippet demonstrates how to remove duplicate values from an array using the 'utils.arr.Unique' process.  It takes an array as input and returns an array with only unique values.\nSOURCE: https://github.com/yaoapp/yao/blob/main/utils/README.md#_snippet_45\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Removes duplicate values from an array\n * @param array - Input array\n * @returns array - Array with unique values\n */\nconst unique = Process(\"utils.arr.Unique\", [1, 2, 2, 3, 3, 3, 4]);\n// Returns: [1, 2, 3, 4]\n```\n\n----------------------------------------\n\nTITLE: Get Current Timestamp in Milliseconds (utils.now.Timestampms)\nDESCRIPTION: This snippet demonstrates how to get the current Unix timestamp in milliseconds using the `utils.now.Timestampms` function. It returns a number representing the Unix timestamp in milliseconds. It relies on the Yao Process API.\nSOURCE: https://github.com/yaoapp/yao/blob/main/utils/README.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Gets the current Unix timestamp in milliseconds\n * @returns number - Unix timestamp in milliseconds\n */\nconst timestampMs = Process(\"utils.now.Timestampms\");\n// Returns: 1625097600000 (example)\n```\n\n----------------------------------------\n\nTITLE: Get Current Time (utils.now.Time)\nDESCRIPTION: This snippet demonstrates how to get the current time in HH:MM:SS format using the `utils.now.Time` function. The function returns a string representing the current time. It leverages the Yao Process API.\nSOURCE: https://github.com/yaoapp/yao/blob/main/utils/README.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Gets the current time in HH:MM:SS format\n * @returns string - Current time\n */\nconst time = Process(\"utils.now.Time\");\n// Returns: \"12:34:56\"\n```\n\n----------------------------------------\n\nTITLE: Join File Paths (utils.str.JoinPath)\nDESCRIPTION: This snippet showcases how to join path segments into a single file path using the `utils.str.JoinPath` function. The function takes a variable number of path segments as input and returns the combined path string. It uses the Yao Process API.\nSOURCE: https://github.com/yaoapp/yao/blob/main/utils/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Joins path segments into a single path\n * @param ...paths - Path segments to join\n * @returns string - Joined path\n */\nconst path = Process(\"utils.str.JoinPath\", \"path\", \"to\", \"file.txt\");\n// Returns: \"path/to/file.txt\"\n```\n\n----------------------------------------\n\nTITLE: Setting Excel Row Height\nDESCRIPTION: Sets the height of a specific row in an Excel sheet. It takes the Excel handle (h), sheet name, row number, and desired height in points as parameters. The function modifies the row height in the specified sheet.\nSOURCE: https://github.com/yaoapp/yao/blob/main/excel/README.md#_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nProcess(\"excel.set.RowHeight\", h, \"SheetName\", 1, 30); // Set row 1 to 30 pts height\n```\n\n----------------------------------------\n\nTITLE: Print Colored String (utils.fmt.ColorPrintf)\nDESCRIPTION: This snippet explains how to print a colored formatted string to stdout using the `utils.fmt.ColorPrintf` function. The function takes a color name, a format string, and a variable number of arguments as input. It returns null and uses the Yao Process API.\nSOURCE: https://github.com/yaoapp/yao/blob/main/utils/README.md#_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Prints a colored formatted string to stdout\n * @param color - Color name (red, green, blue, etc.)\n * @param format - Format string\n * @param ...args - Arguments for format\n * @returns null\n */\nProcess(\"utils.fmt.ColorPrintf\", \"green\", \"Success: %s\", \"Operation completed\");\n// Prints: Success: Operation completed (in green)\n\n// Available colors:\n// red, green, yellow, blue, magenta, cyan, white, black\n// hired, higreen, hiyellow, hiblue, himagenta, hicyan, hiwhite, hiblack\n```\n\n----------------------------------------\n\nTITLE: Generate UUID (utils.str.UUID)\nDESCRIPTION: This snippet explains how to generate a UUID (Universally Unique Identifier) string using the `utils.str.UUID` function. The function takes no input parameters and returns a randomly generated UUID string. It calls the utility function via the Yao Process API.\nSOURCE: https://github.com/yaoapp/yao/blob/main/utils/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Generates a UUID string\n * @returns string - UUID string\n */\nconst uuid = Process(\"utils.str.UUID\");\n// Returns: \"550e8400-e29b-41d4-a716-446655440000\" (example)\n```\n\n----------------------------------------\n\nTITLE: Merging Excel Cells\nDESCRIPTION: Merges a range of cells in an Excel sheet. It takes the Excel handle (h), sheet name, starting cell reference (e.g., 'A1'), and ending cell reference (e.g., 'B2') as input. This function combines the specified cells into a single merged cell.\nSOURCE: https://github.com/yaoapp/yao/blob/main/excel/README.md#_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nProcess(\"excel.set.MergeCell\", h, \"SheetName\", \"A1\", \"B2\");\n```\n\n----------------------------------------\n\nTITLE: Getting Array Indexes Typescript\nDESCRIPTION: This snippet shows how to get the indexes of an array using the 'utils.arr.Indexes' process. It takes an array as input and returns an array containing the indexes of the input array.\nSOURCE: https://github.com/yaoapp/yao/blob/main/utils/README.md#_snippet_43\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Gets the indexes of an array\n * @param array - Input array\n * @returns array - Array indexes\n */\nconst indexes = Process(\"utils.arr.Indexes\", [\"apple\", \"banana\", \"orange\"]);\n// Returns: [0, 1, 2]\n```\n\n----------------------------------------\n\nTITLE: Parse Query String (utils.url.ParseQuery)\nDESCRIPTION: This snippet explains how to parse a URL query string into a map (object) using the `utils.url.ParseQuery` function. It takes the query string as input and returns a map of query parameters.  The Yao Process API is used to invoke the function.\nSOURCE: https://github.com/yaoapp/yao/blob/main/utils/README.md#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Parses a URL query string into a map\n * @param queryString - URL query string\n * @returns object - Map of query parameters\n */\nconst query = Process(\"utils.url.ParseQuery\", \"name=John&age=30\");\n// Returns: { name: [\"John\"], age: [\"30\"] }\n```\n\n----------------------------------------\n\nTITLE: Get Current Date and Time (utils.now.DateTime)\nDESCRIPTION: This snippet shows how to get the current date and time in YYYY-MM-DD HH:MM:SS format using the `utils.now.DateTime` function.  It returns a string representing the combined date and time. It uses the Yao Process API.\nSOURCE: https://github.com/yaoapp/yao/blob/main/utils/README.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Gets the current date and time in YYYY-MM-DD HH:MM:SS format\n * @returns string - Current date and time\n */\nconst dateTime = Process(\"utils.now.DateTime\");\n// Returns: \"2023-07-01 12:34:56\"\n```\n\n----------------------------------------\n\nTITLE: Convert Chinese to Pinyin (utils.str.Pinyin)\nDESCRIPTION: This snippet demonstrates how to convert Chinese characters to Pinyin using the `utils.str.Pinyin` function. The function takes Chinese text as input and returns the corresponding Pinyin representation.  It supports various options for tone marks, tone numbers, and heteronym mode. It leverages the Yao Process API to invoke the utility function.\nSOURCE: https://github.com/yaoapp/yao/blob/main/utils/README.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Converts Chinese characters to Pinyin\n * @param text - Chinese text to convert\n * @param options - Optional configuration\n * @returns string - Pinyin text\n */\nconst pinyin = Process(\"utils.str.Pinyin\", \"你好\");\n// Returns: \"ni hao\"\n\n// With tone marks\nconst pinyinWithTone = Process(\"utils.str.Pinyin\", \"你好\", {\n  tone: true,\n  separator: \"-\",\n});\n// Returns: \"nǐ-hǎo\"\n\n// With tone numbers\nconst pinyinWithToneNumbers = Process(\"utils.str.Pinyin\", \"你好\", {\n  tone: \"number\",\n  separator: \"-\",\n});\n// Returns: \"ni3-hao3\"\n\n// With multiple pronunciations for characters (heteronym mode)\nconst pinyinWithHeteronym = Process(\"utils.str.Pinyin\", \"中国\", {\n  heteronym: true,\n  tone: true,\n});\n// Returns: \"zhōng|zhòng guó\"\n```\n\n----------------------------------------\n\nTITLE: Unmerging Excel Cells\nDESCRIPTION: Unmerges previously merged cells in an Excel sheet. It requires the Excel handle (h), sheet name, starting cell reference, and ending cell reference. The function separates the specified merged cell back into individual cells.\nSOURCE: https://github.com/yaoapp/yao/blob/main/excel/README.md#_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nProcess(\"excel.set.UnmergeCell\", h, \"SheetName\", \"A1\", \"B2\");\n```\n\n----------------------------------------\n\nTITLE: Get XGen Configuration - TypeScript\nDESCRIPTION: Retrieves the XGen configuration for a specified table. The function takes the table ID and optional data as parameters. It uses the `yao.table.Xgen` process and returns an object containing the XGen configuration for the table.\nSOURCE: https://github.com/yaoapp/yao/blob/main/widgets/table/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Gets the XGen configuration for a table\n * @param tableID - ID of the table\n * @param data - Optional additional data\n * @returns object - XGen configuration\n */\nconst xgen = Process(\"yao.table.Xgen\", \"pet\", {\n  /* optional data */\n});\n```\n\n----------------------------------------\n\nTITLE: Getting All Sheets in TypeScript\nDESCRIPTION: This snippet demonstrates how to retrieve all sheet names from an Excel workbook. It uses the `excel.Sheets` function with the Excel file handle to return an array of strings, each representing a sheet name.\nSOURCE: https://github.com/yaoapp/yao/blob/main/excel/README.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Gets all sheet names in the workbook\n * @param handle - Handle ID from excel.open\n * @returns string[] - Array of sheet names\n */\nconst sheets: string[] = Process(\"excel.Sheets\", h);\n// Example output: [\"Sheet1\", \"Sheet2\"]\n```\n\n----------------------------------------\n\nTITLE: Get Current Timestamp (utils.now.Timestamp)\nDESCRIPTION: This snippet describes how to get the current Unix timestamp (in seconds) using the `utils.now.Timestamp` function. It returns a number representing the Unix timestamp. It uses the Yao Process API.\nSOURCE: https://github.com/yaoapp/yao/blob/main/utils/README.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Gets the current Unix timestamp (seconds)\n * @returns number - Unix timestamp\n */\nconst timestamp = Process(\"utils.now.Timestamp\");\n// Returns: 1625097600 (example)\n```\n\n----------------------------------------\n\nTITLE: Listing All Sheets in TypeScript\nDESCRIPTION: This snippet shows how to retrieve a list of all sheet names in an Excel workbook using the `excel.sheet.list` function. It takes the handle ID from `excel.Open` as input and returns an array of strings representing the sheet names.\nSOURCE: https://github.com/yaoapp/yao/blob/main/excel/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Lists all sheets in the workbook\n * @param handle - Handle ID from excel.open\n * @returns string[] - Array of sheet names\n */\nconst sheets: string[] = Process(\"excel.sheet.list\", h);\n// Example output: [\"Sheet1\", \"Sheet2\", \"NewSheet\"]\n```\n\n----------------------------------------\n\nTITLE: Plucking Values from Records Typescript\nDESCRIPTION: This snippet demonstrates how to transform an array of records based on specified columns using the 'utils.arr.Pluck' process. It takes an array of columns to include and the input data as input. It returns an array with transformed data.\nSOURCE: https://github.com/yaoapp/yao/blob/main/utils/README.md#_snippet_41\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Transforms an array of records based on specified columns\n * @param columns - Columns to include\n * @param data - Input data\n * @returns array - Transformed data\n */\nconst users = Process(\n  \"utils.arr.Pluck\",\n  [\"id\", \"full_name\"],\n  [\n    { id: 1, first_name: \"John\", last_name: \"Doe\" },\n    { id: 2, first_name: \"Jane\", last_name: \"Smith\" },\n  ]\n);\n// Can transform data based on column mapping\n```\n\n----------------------------------------\n\nTITLE: Copying a Sheet in TypeScript\nDESCRIPTION: This snippet demonstrates how to copy a sheet within an Excel workbook using the `excel.sheet.copy` function. It requires the Excel file handle, source sheet name, and target sheet name, ensuring the target sheet does not already exist.\nSOURCE: https://github.com/yaoapp/yao/blob/main/excel/README.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Copies a sheet with all its content and formatting\n * @param handle - Handle ID from excel.open\n * @param source - Source sheet name\n * @param target - Target sheet name (must not exist)\n * @returns null\n */\nProcess(\"excel.sheet.copy\", h, \"Sheet1\", \"Sheet1Copy\");\n```\n\n----------------------------------------\n\nTITLE: Returning Values Typescript\nDESCRIPTION: This snippet illustrates how to return values as-is using the 'utils.flow.Return' process. It's useful for terminating process chains and passing data. The function takes a variable number of values as input and returns them as an array.\nSOURCE: https://github.com/yaoapp/yao/blob/main/utils/README.md#_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Returns values as-is, useful for terminating process chains\n * @param ...values - Values to return\n * @returns any - The provided values\n */\nconst result = Process(\"utils.flow.Return\", \"Done\", { status: \"success\" });\n// Returns: [\"Done\", { status: \"success\" }]\n```\n\n----------------------------------------\n\nTITLE: Converting Excel Coordinates to Cell Name\nDESCRIPTION: Converts Excel coordinates (column and row numbers, both 1-based) to a cell reference (e.g., 'A1').  The function accepts the column and row numbers as input and returns the cell reference string.\nSOURCE: https://github.com/yaoapp/yao/blob/main/excel/README.md#_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Converts coordinates to a cell reference\n * @param col - Column number (1-based)\n * @param row - Row number (1-based)\n * @returns string - Cell reference\n */\nconst cellName: string = Process(\"excel.convert.CoordinatesToCellName\", 1, 1); // Returns \"A1\"\n```\n\n----------------------------------------\n\nTITLE: Resuming Pipe Execution\nDESCRIPTION: Resumes a previously interrupted Pipe execution using the provided Context ID.  The Context ID is passed as an argument to the `pipe.Resume` command. Arguments can be passed to the process.\nSOURCE: https://github.com/yaoapp/yao/blob/main/pipe/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nyao run pipe.Resume <Context.ID> [args...]\n```\n\n----------------------------------------\n\nTITLE: Print Formatted String (utils.fmt.Printf)\nDESCRIPTION: This snippet describes how to print a formatted string to stdout using the `utils.fmt.Printf` function. It takes a format string and a variable number of arguments as input, similar to the standard printf function.  It returns null. The call uses the Yao Process API.\nSOURCE: https://github.com/yaoapp/yao/blob/main/utils/README.md#_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Prints a formatted string to stdout\n * @param format - Format string\n * @param ...args - Arguments for format\n * @returns null\n */\nProcess(\"utils.fmt.Printf\", \"Hello, %s!\", \"World\");\n// Prints: Hello, World!\n```\n\n----------------------------------------\n\nTITLE: Converting Excel Cell Name to Coordinates\nDESCRIPTION: Converts an Excel cell reference (e.g., 'A1') to its coordinates (column and row numbers, both 1-based). The function takes a cell reference string as input and returns an array containing the column and row numbers.\nSOURCE: https://github.com/yaoapp/yao/blob/main/excel/README.md#_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Converts a cell reference to coordinates\n * @param cell - Cell reference (e.g. \"A1\")\n * @returns number[] - Array with [columnNumber, rowNumber] (1-based)\n */\nconst coords: number[] = Process(\"excel.convert.CellNameToCoordinates\", \"A1\"); // Returns [1, 1]\n```\n\n----------------------------------------\n\nTITLE: Running Pipe with pipe.Run\nDESCRIPTION: Executes a Pipe Widget process using the `pipe.Run` command, which is equivalent to `pipes.<Widget.ID>`. The Widget ID is specified in the command, and arguments can be passed to the process.\nSOURCE: https://github.com/yaoapp/yao/blob/main/pipe/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyao run pipe.Run <Widget.ID> [args...]\n```\n\n----------------------------------------\n\nTITLE: Deleting a Sheet in TypeScript\nDESCRIPTION: This snippet demonstrates how to delete a sheet from an Excel workbook using the `excel.sheet.delete` function. It requires the Excel file handle and the name of the sheet to be deleted.\nSOURCE: https://github.com/yaoapp/yao/blob/main/excel/README.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Deletes a sheet from the workbook\n * @param handle - Handle ID from excel.open\n * @param name - Sheet name to delete\n * @returns null\n */\nProcess(\"excel.sheet.delete\", h, \"Sheet1Copy\");\n```\n\n----------------------------------------\n\nTITLE: For Loop (utils.flow.For)\nDESCRIPTION: This snippet demonstrates how to execute a process multiple times in a loop using the `utils.flow.For` function. The function takes the starting index, ending index (exclusive), and process configuration as input and calls the specified process for each iteration. It returns null and utilizes the Yao Process API.\nSOURCE: https://github.com/yaoapp/yao/blob/main/utils/README.md#_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Executes a process multiple times in a loop\n * @param from - Starting index (inclusive)\n * @param to - Ending index (exclusive)\n * @param processConfig - Process configuration\n * @returns null\n */\nProcess(\"utils.flow.For\", 0, 5, {\n  process: \"scripts.test.log\",\n  args: [\"Loop index: ::value\"],\n});\n// Calls scripts.test.log 5 times with indexes 0-4\n```\n\n----------------------------------------\n\nTITLE: Creating and Starting a New Yao Application\nDESCRIPTION: This snippet demonstrates how to create a new application directory, navigate into it, and start the Yao application installation process using the `yao start` command. It also lists the default user credentials for the application.\nSOURCE: https://github.com/yaoapp/yao/blob/main/README.zh-CN.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p /data/app  # 创建应用目录\ncd /data/app  # 进入应用目录\nyao start # 启动安装界面\n```\n\n----------------------------------------\n\nTITLE: Throw Forbidden Error (utils.throw.Forbidden)\nDESCRIPTION: This snippet details how to throw a 403 Forbidden error using the `utils.throw.Forbidden` function. It can optionally take an error message as input.  It throws an exception with code 403. The Yao Process API is used.\nSOURCE: https://github.com/yaoapp/yao/blob/main/utils/README.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Throws a 403 Forbidden error\n * @param message - Optional error message\n * @throws Exception with code 403\n */\nProcess(\"utils.throw.Forbidden\", \"Access denied\");\n```\n\n----------------------------------------\n\nTITLE: Parse URL (utils.url.ParseURL)\nDESCRIPTION: This snippet shows how to parse a URL into its components using the `utils.url.ParseURL` function. The function takes a URL as input and returns an object containing the different parts of the URL. The Yao Process API facilitates the function call.\nSOURCE: https://github.com/yaoapp/yao/blob/main/utils/README.md#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Parses a URL into its components\n * @param url - URL to parse\n * @returns object - URL components\n */\nconst urlParts = Process(\n  \"utils.url.ParseURL\",\n  \"https://example.com:8080/path?q=search\"\n);\n// Returns: {\n//   scheme: \"https\",\n//   host: \"example.com:8080\",\n//   domain: \"example.com\",\n//   path: \"/path\",\n//   port: \"8080\",\n//   query: { q: [\"search\"] },\n//   url: \"https://example.com:8080/path?q=search\"\n// }\n```\n\n----------------------------------------\n\nTITLE: Creating and Running Pipe with DSL\nDESCRIPTION: Creates and runs a Pipe using a provided DSL text. The DSL is passed as an argument to the `pipe.Create` command.  Arguments can be passed to the process.\nSOURCE: https://github.com/yaoapp/yao/blob/main/pipe/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyao run pipe.Create <DSL> [args...]\n```\n\n----------------------------------------\n\nTITLE: Setting Excel Column Width\nDESCRIPTION: Sets the width of a range of columns in an Excel sheet. It requires the Excel handle (h), sheet name, starting column letter, ending column letter, and desired width in points. The function adjusts the width of columns between the specified range.\nSOURCE: https://github.com/yaoapp/yao/blob/main/excel/README.md#_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nProcess(\"excel.set.ColumnWidth\", h, \"SheetName\", \"A\", \"B\", 20);\n```\n\n----------------------------------------\n\nTITLE: Setting Multiple Environment Variables Typescript\nDESCRIPTION: This snippet demonstrates how to set the values of multiple environment variables using the 'utils.env.SetMany' process. It takes an object as input, where the keys are environment variable names and the values are the corresponding values to be set. This process does not return any value.\nSOURCE: https://github.com/yaoapp/yao/blob/main/utils/README.md#_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Sets multiple environment variables\n * @param variables - Map of environment variables\n * @returns null\n */\nProcess(\"utils.env.SetMany\", {\n  API_KEY: \"abc123\",\n  API_SECRET: \"xyz789\",\n  API_URL: \"https://api.example.com\",\n});\n```\n\n----------------------------------------\n\nTITLE: Reload a Table - TypeScript\nDESCRIPTION: Reloads a table's definition. This is useful for updating a table definition without restarting the application.  The function utilizes the `yao.table.Reload` process. It takes the table ID as a parameter. Returns null.\nSOURCE: https://github.com/yaoapp/yao/blob/main/widgets/table/README.md#_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Reloads a table\n * @param tableID - ID of the table\n * @returns null\n */\nProcess(\"yao.table.Reload\", \"pet\");\n```\n\n----------------------------------------\n\nTITLE: Adding Excel Hyperlink\nDESCRIPTION: Adds a hyperlink to a specific cell in an Excel sheet. It requires the Excel handle (h), sheet name, cell reference (e.g., 'A1'), URL for the hyperlink, and the display text for the hyperlink. The function inserts a clickable link in the given cell.\nSOURCE: https://github.com/yaoapp/yao/blob/main/excel/README.md#_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nProcess(\n  \"excel.set.Link\",\n  h,\n  \"SheetName\",\n  \"A1\",\n  \"https://example.com\",\n  \"Visit Example\"\n);\n```\n\n----------------------------------------\n\nTITLE: Load a Table - TypeScript\nDESCRIPTION: Loads a table definition either from a file or from a source JSON/YAML string.  The function utilizes the `yao.table.Load` process. It can load from a file path or from a source (JSON/YAML).  When loading from source, it requires the table ID.\nSOURCE: https://github.com/yaoapp/yao/blob/main/widgets/table/README.md#_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Loads a table from a file or source\n * @param tableID - ID of the table (when loading from source)\n * @param file - File path (when loading from file)\n * @param source - Source JSON/YAML (optional, when loading from source)\n * @returns any - Result of the load operation\n */\n// Load from file\nconst result = Process(\"yao.table.Load\", \"tables/pet.tab.yao\");\n\n// Load from source\nProcess(\n  \"yao.table.Load\",\n  \"dynamic.pet\",\n  \"/tables/dynamic/pet.tab.yao\",\n  `{\n  \"name\": \"Pet Admin\",\n  \"action\": {\n    \"bind\": { \"model\": \"pet\" }\n  }\n}`\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Values in Array of Maps Typescript\nDESCRIPTION: This snippet demonstrates how to set a value for a specific key in all maps within an array using the 'utils.arr.MapSet' process. It takes an array of maps, a key to set, and a value to set as input. It returns an updated array of maps.\nSOURCE: https://github.com/yaoapp/yao/blob/main/utils/README.md#_snippet_47\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Sets a value for a specific key in all maps in an array\n * @param array - Array of maps\n * @param key - Key to set\n * @param value - Value to set\n * @returns array - Updated array\n */\nconst updated = Process(\n  \"utils.arr.MapSet\",\n  [\n    { id: 1, name: \"John\" },\n    { id: 2, name: \"Jane\" },\n  ],\n  \"active\",\n  true\n);\n// Returns: [\n//   { id: 1, name: \"John\", active: true },\n//   { id: 2, name: \"Jane\", active: true }\n// ]\n```\n\n----------------------------------------\n\nTITLE: Convert Hex to String (utils.str.Hex)\nDESCRIPTION: This snippet explains how to convert a hexadecimal string to a regular string using the `utils.str.Hex` function. It takes a hexadecimal string as input and returns the decoded string.  It utilizes the Yao Process API.\nSOURCE: https://github.com/yaoapp/yao/blob/main/utils/README.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Converts a hexadecimal string to a regular string\n * @param hex - Hexadecimal string\n * @returns string - Decoded string\n */\nconst text = Process(\"utils.str.Hex\", \"48656c6c6f20576f726c64\");\n// Returns: \"Hello World\"\n```\n\n----------------------------------------\n\nTITLE: Setting Value in Map Typescript\nDESCRIPTION: This snippet demonstrates how to set a value in a map using the 'utils.map.Set' process. It accepts the map, key, and value as input. It returns the updated map.\nSOURCE: https://github.com/yaoapp/yao/blob/main/utils/README.md#_snippet_49\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Sets a value in a map\n * @param map - Input map\n * @param key - Key to set\n * @param value - Value to set\n * @returns object - Updated map\n */\nconst updated = Process(\"utils.map.Set\", { name: \"John\" }, \"age\", 30);\n// Returns: { name: \"John\", age: 30 }\n```\n\n----------------------------------------\n\nTITLE: Throw Custom Exception (utils.throw.Exception)\nDESCRIPTION: This snippet demonstrates how to throw a custom exception with a specified message and code using the `utils.throw.Exception` function. The function takes the error message and error code as input parameters.  It throws an exception with the specified code. The function call uses the Yao Process API.\nSOURCE: https://github.com/yaoapp/yao/blob/main/utils/README.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Throws a custom exception with specified message and code\n * @param message - Error message\n * @param code - Error code\n * @throws Exception with specified code\n */\nProcess(\"utils.throw.Exception\", \"Payment required\", 402);\n```\n\n----------------------------------------\n\nTITLE: Check if Table Exists - TypeScript\nDESCRIPTION: Checks if a table exists using the `yao.table.Exists` process.  It takes the table ID as a parameter and returns a boolean indicating whether the table exists.\nSOURCE: https://github.com/yaoapp/yao/blob/main/widgets/table/README.md#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Checks if a table exists\n * @param tableID - ID of the table\n * @returns boolean - true if the table exists, false otherwise\n */\nconst exists = Process(\"yao.table.Exists\", \"pet\");\n```\n\n----------------------------------------\n\nTITLE: Converting Excel Column Name to Number\nDESCRIPTION: Converts an Excel column name (e.g., 'A', 'AB') to its corresponding column number (1-based). The function accepts a column name string and returns its numerical representation.\nSOURCE: https://github.com/yaoapp/yao/blob/main/excel/README.md#_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Converts a column name to a column number\n * @param colName - Column name (e.g. \"A\", \"AB\")\n * @returns number - Column number (1-based)\n */\nconst colNum: number = Process(\"excel.convert.ColumnNameToNumber\", \"AK\"); // Returns 37\n```\n\n----------------------------------------\n\nTITLE: Read Table DSL - TypeScript\nDESCRIPTION: Reads a table's DSL (Domain Specific Language) definition as a string. The function utilizes the `yao.table.Read` process.  It takes the table ID as a parameter and returns the table DSL as a string.\nSOURCE: https://github.com/yaoapp/yao/blob/main/widgets/table/README.md#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Reads a table's DSL\n * @param tableID - ID of the table\n * @returns string - Table DSL as a string\n */\nconst dsl = Process(\"yao.table.Read\", \"pet\");\n```\n\n----------------------------------------\n\nTITLE: Deleting Multiple Keys Typescript\nDESCRIPTION: This snippet demonstrates how to delete multiple keys from a map using the 'utils.map.DelMany' process. It accepts the map and a variable number of keys to delete as input. It returns the updated map.\nSOURCE: https://github.com/yaoapp/yao/blob/main/utils/README.md#_snippet_51\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Deletes multiple keys from a map\n * @param map - Input map\n * @param ...keys - Keys to delete\n * @returns object - Updated map\n */\nconst filtered = Process(\n  \"utils.map.DelMany\",\n  { id: 1, name: \"John\", password: \"secret\", token: \"xyz\" },\n  \"password\",\n  \"token\"\n);\n// Returns: { id: 1, name: \"John\" }\n```\n\n----------------------------------------\n\nTITLE: List All Tables - TypeScript\nDESCRIPTION: Retrieves a list of all loaded tables, returning a map of table IDs to their corresponding DSL definitions. The function utilizes the `yao.table.List` process and returns an object containing this mapping.\nSOURCE: https://github.com/yaoapp/yao/blob/main/widgets/table/README.md#_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Lists all loaded tables\n * @returns object - Map of table ID to table DSL\n */\nconst tables = Process(\"yao.table.List\");\n```\n\n----------------------------------------\n\nTITLE: Get Table DSL - TypeScript\nDESCRIPTION: Retrieves a table's DSL (Domain Specific Language) definition as an object. The function utilizes the `yao.table.DSL` process. It takes the table ID as a parameter and returns the table DSL object.\nSOURCE: https://github.com/yaoapp/yao/blob/main/widgets/table/README.md#_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Gets a table's DSL object\n * @param tableID - ID of the table\n * @returns object - Table DSL object\n */\nconst tableDSL = Process(\"yao.table.DSL\", \"pet\");\n```\n\n----------------------------------------\n\nTITLE: Running Pipe Widget Process\nDESCRIPTION: Executes a Pipe Widget process using the `yao run` command.  The Widget ID is specified in the command. Arguments can be passed to the process.  If interrupted by user input, a context ID is returned for resuming execution.\nSOURCE: https://github.com/yaoapp/yao/blob/main/pipe/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyao run pipes.<Widget.ID> [args...]\n```\n\n----------------------------------------\n\nTITLE: Throw Not Found Error (utils.throw.NotFound)\nDESCRIPTION: This snippet explains how to throw a 404 Not Found error using the `utils.throw.NotFound` function.  It can optionally take an error message. It throws an exception with code 404. The function is invoked via the Yao Process API.\nSOURCE: https://github.com/yaoapp/yao/blob/main/utils/README.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Throws a 404 Not Found error\n * @param message - Optional error message\n * @throws Exception with code 404\n */\nProcess(\"utils.throw.NotFound\", \"Resource not found\");\n```\n\n----------------------------------------\n\nTITLE: Resuming Pipe Execution with Context\nDESCRIPTION: Resumes a previously interrupted Pipe execution using the provided Context ID and updates the context with the provided JSON.  The Context ID and context (as a JSON string) are passed as arguments to the `pipe.ResumeWith` command. Arguments can be passed to the process.\nSOURCE: https://github.com/yaoapp/yao/blob/main/pipe/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nyao run pipe.ResumeWith <Context.ID> '::{\"foo\":\"bar\"}' [args...]\n```\n\n----------------------------------------\n\nTITLE: Throw Bad Request Error (utils.throw.BadRequest)\nDESCRIPTION: This snippet outlines how to throw a 400 Bad Request error using the `utils.throw.BadRequest` function.  It accepts an optional error message.  It throws an exception with code 400. It leverages the Yao Process API.\nSOURCE: https://github.com/yaoapp/yao/blob/main/utils/README.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Throws a 400 Bad Request error\n * @param message - Optional error message\n * @throws Exception with code 400\n */\nProcess(\"utils.throw.BadRequest\", \"Invalid parameters\");\n```\n\n----------------------------------------\n\nTITLE: Getting Array Values by Column Typescript\nDESCRIPTION: This snippet shows how to extract values from a specific column in an array of records using the 'utils.arr.Column' process. It takes an array of records and the column name to extract as input. It returns an array containing the extracted values.\nSOURCE: https://github.com/yaoapp/yao/blob/main/utils/README.md#_snippet_39\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Extracts values from a specific column in an array of records\n * @param records - Array of records\n * @param column - Column name to extract\n * @returns array - Extracted values\n */\nconst ids = Process(\n  \"utils.arr.Column\",\n  [\n    { id: 1, name: \"John\" },\n    { id: 2, name: \"Jane\" },\n    { id: 3, name: \"Bob\" },\n  ],\n  \"id\"\n);\n// Returns: [1, 2, 3]\n```\n\n----------------------------------------\n\nTITLE: Throw Unauthorized Error (utils.throw.Unauthorized)\nDESCRIPTION: This snippet demonstrates how to throw a 401 Unauthorized error using the `utils.throw.Unauthorized` function. It can optionally take an error message as input. It throws an exception with code 401. The Yao Process API is utilized.\nSOURCE: https://github.com/yaoapp/yao/blob/main/utils/README.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Throws a 401 Unauthorized error\n * @param message - Optional error message\n * @throws Exception with code 401\n */\nProcess(\"utils.throw.Unauthorized\", \"Authentication required\");\n```\n\n----------------------------------------\n\nTITLE: Convert Map to Array in Typescript\nDESCRIPTION: This snippet demonstrates how to convert a map to an array of key-value pairs using the `utils.map.Array` process.  The input is a map-like object, and the output is an array of objects, each containing a key-value pair from the original map.\nSOURCE: https://github.com/yaoapp/yao/blob/main/utils/README.md#_snippet_54\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Converts a map to an array of key-value pairs\n * @param map - Input map\n * @returns array - Array of key-value objects\n */\nconst array = Process(\"utils.map.Array\", { id: 1, name: \"John\" });\n// Returns: [\n//   { key: \"id\", value: 1 },\n//   { key: \"name\", value: \"John\" }\n// ]\n```\n\n----------------------------------------\n\nTITLE: Throw Internal Error (utils.throw.InternalError)\nDESCRIPTION: This snippet showcases how to throw a 500 Internal Error using the `utils.throw.InternalError` function. It can optionally accept an error message.  It throws an exception with code 500. The Yao Process API is used to call the function.\nSOURCE: https://github.com/yaoapp/yao/blob/main/utils/README.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Throws a 500 Internal Error\n * @param message - Optional error message\n * @throws Exception with code 500\n */\nProcess(\"utils.throw.InternalError\", \"Something went wrong\");\n```\n\n----------------------------------------\n\nTITLE: Getting Item by Index Typescript\nDESCRIPTION: This snippet demonstrates how to get an item from an array by its index using the 'utils.arr.Get' process. It takes an array and an index as input. It returns the item at the specified index.\nSOURCE: https://github.com/yaoapp/yao/blob/main/utils/README.md#_snippet_46\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Gets an item from an array by index\n * @param array - Input array\n * @param index - Array index\n * @returns any - Item at the specified index\n */\nconst item = Process(\"utils.arr.Get\", [\"apple\", \"banana\", \"orange\"], 1);\n// Returns: \"banana\"\n```\n\n----------------------------------------\n\nTITLE: Sleep for a Duration (utils.time.Sleep)\nDESCRIPTION: This snippet explains how to pause execution for a specified number of milliseconds using the `utils.time.Sleep` function. It takes the duration in milliseconds as input.  The function returns null. The Process API is used to call the function.\nSOURCE: https://github.com/yaoapp/yao/blob/main/utils/README.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Pauses execution for a specified time\n * @param milliseconds - Time to sleep in milliseconds\n * @returns null\n */\nProcess(\"utils.time.Sleep\", 1000);\n// Sleeps for 1 second\n```\n\n----------------------------------------\n\nTITLE: Converting Array to Tree Typescript\nDESCRIPTION: This snippet shows how to convert a flat array to a tree structure using the 'utils.arr.Tree' process. It takes an array of records and tree configuration options as input. It returns an array representing the tree structure.\nSOURCE: https://github.com/yaoapp/yao/blob/main/utils/README.md#_snippet_44\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Converts a flat array to a tree structure\n * @param records - Array of records\n * @param options - Tree configuration\n * @returns array - Tree structure\n */\nconst tree = Process(\n  \"utils.arr.Tree\",\n  [\n    { id: 1, parent_id: null, name: \"Parent\" },\n    { id: 2, parent_id: 1, name: \"Child 1\" },\n    { id: 3, parent_id: 1, name: \"Child 2\" },\n  ],\n  {\n    parent: \"parent_id\",\n    empty: null,\n    children: \"children\",\n    id: \"id\",\n  }\n);\n// Returns hierarchical tree structure\n```\n\n----------------------------------------\n\nTITLE: Getting Value from Map Typescript\nDESCRIPTION: This snippet demonstrates how to retrieve a value from a map by key using the 'utils.map.Get' process. It accepts the map and the key as input.  It returns the value associated with the given key.\nSOURCE: https://github.com/yaoapp/yao/blob/main/utils/README.md#_snippet_48\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Gets a value from a map by key\n * @param map - Input map\n * @param key - Key to retrieve\n * @returns any - Value associated with the key\n */\nconst name = Process(\"utils.map.Get\", { id: 1, name: \"John\", age: 30 }, \"name\");\n// Returns: \"John\"\n```\n\n----------------------------------------\n\nTITLE: Unload a Table - TypeScript\nDESCRIPTION: Unloads a table, removing it from memory.  The function utilizes the `yao.table.Unload` process. It takes the table ID as a parameter. Returns null.\nSOURCE: https://github.com/yaoapp/yao/blob/main/widgets/table/README.md#_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Unloads a table\n * @param tableID - ID of the table\n * @returns null\n */\nProcess(\"yao.table.Unload\", \"pet\");\n```\n\n----------------------------------------\n\nTITLE: Defining Excel Style ID Constants\nDESCRIPTION: Defines constants for border styles and fill patterns used when setting cell styles. These constants are used with `excel.set.Style` to apply predefined styles to Excel cells.\nSOURCE: https://github.com/yaoapp/yao/blob/main/excel/README.md#_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\n// Border styles\nconst BORDER_NONE = 0; // No border\nconst BORDER_CONTINUOUS = 1; // Continuous border (thin)\nconst BORDER_CONTINUOUS_2 = 2; // Continuous border (medium)\nconst BORDER_DASH = 3; // Dashed border\nconst BORDER_DOT = 4; // Dotted border\nconst BORDER_CONTINUOUS_3 = 5; // Continuous border (thick)\nconst BORDER_DOUBLE = 6; // Double line border\nconst BORDER_CONTINUOUS_0 = 7; // Continuous border (hair)\nconst BORDER_DASH_2 = 8; // Dashed border (medium)\nconst BORDER_DASH_DOT = 9; // Dash-dot border\nconst BORDER_DASH_DOT_2 = 10; // Dash-dot border (medium)\nconst BORDER_DASH_DOT_DOT = 11; // Dash-dot-dot border\nconst BORDER_DASH_DOT_DOT_2 = 12; // Dash-dot-dot border (medium)\nconst BORDER_SLANT_DASH_DOT = 13; // Slanted dash-dot border\n\n// Fill patterns\nconst FILL_NONE = 0; // No fill\nconst FILL_SOLID = 1; // Solid fill\nconst FILL_MEDIUM_GRAY = 2; // Medium gray fill\nconst FILL_DARK_GRAY = 3; // Dark gray fill\nconst FILL_LIGHT_GRAY = 4; // Light gray fill\nconst FILL_DARK_HORIZONTAL = 5; // Dark horizontal line pattern\nconst FILL_DARK_VERTICAL = 6; // Dark vertical line pattern\nconst FILL_DARK_DOWN = 7; // Dark diagonal down pattern\nconst FILL_DARK_UP = 8; // Dark diagonal up pattern\nconst FILL_DARK_GRID = 9; // Dark grid pattern\nconst FILL_DARK_TRELLIS = 10; // Dark trellis pattern\nconst FILL_LIGHT_HORIZONTAL = 11; // Light horizontal line pattern\nconst FILL_LIGHT_VERTICAL = 12; // Light vertical line pattern\nconst FILL_LIGHT_DOWN = 13; // Light diagonal down pattern\nconst FILL_LIGHT_UP = 14; // Light diagonal up pattern\nconst FILL_LIGHT_GRID = 15; // Light grid pattern\nconst FILL_LIGHT_TRELLIS = 16; // Light trellis pattern\nconst FILL_GRAY_125 = 17; // 12.5% gray fill\nconst FILL_GRAY_0625 = 18; // 6.25% gray fill\n```\n\n----------------------------------------\n\nTITLE: Closing Pipe\nDESCRIPTION: Closes a Pipe execution using the provided Context ID. The Context ID is passed as an argument to the `pipe.Close` command.\nSOURCE: https://github.com/yaoapp/yao/blob/main/pipe/README.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nyao run pipe.Close <Context.ID>\n```"
  }
]