[
  {
    "owner": "vega",
    "repo": "vega-lite",
    "content": "TITLE: Complete HTML Example for Embedding Vega-Lite Visualization\nDESCRIPTION: This snippet provides a complete HTML file example that demonstrates how to embed a Vega-Lite visualization using CDN-hosted libraries and Vega-Embed. It includes a simple bar chart specification.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/usage/embed.md#2025-04-16_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<html>\n  <head>\n    <title>Embedding Vega-Lite</title>\n    <script src=\"https://cdn.jsdelivr.net/npm/vega@{{ site.data.versions.vega }}\"></script>\n    <script src=\"https://cdn.jsdelivr.net/npm/vega-lite@{{ site.data.versions.vega-lite }}\"></script>\n    <script src=\"https://cdn.jsdelivr.net/npm/vega-embed@{{ site.data.versions.vega-embed }}\"></script>\n  </head>\n  <body>\n    <div id=\"vis\"></div>\n\n    <script type=\"text/javascript\">\n      var yourVlSpec = {\n        $schema: 'https://vega.github.io/schema/vega-lite/v6.json',\n        description: 'A simple bar chart with embedded data.',\n        data: {\n          values: [\n            {a: 'A', b: 28},\n            {a: 'B', b: 55},\n            {a: 'C', b: 43},\n            {a: 'D', b: 91},\n            {a: 'E', b: 81},\n            {a: 'F', b: 53},\n            {a: 'G', b: 19},\n            {a: 'H', b: 87},\n            {a: 'I', b: 52},\n          ],\n        },\n        mark: 'bar',\n        encoding: {\n          x: {field: 'a', type: 'ordinal'},\n          y: {field: 'b', type: 'quantitative'},\n        },\n      };\n      vegaEmbed('#vis', yourVlSpec);\n    </script>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Basic Vega-Lite Encoding Structure\nDESCRIPTION: Shows the complete structure of encoding channels available in a Vega-Lite specification, including position, polar, geographic, mark properties, text, tooltip, and other channels.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/encoding.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"data\": ... ,\n  \"mark\": ... ,\n  \"encoding\": {     // Encoding\n    // Position Channels\n    \"x\": ...,\n    \"y\": ...,\n    \"x2\": ...,\n    \"y2\": ...,\n    \"xError\": ...,\n    \"yError\": ...,\n    \"xError2\": ...,\n    \"yError2\": ...,\n\n    // Polar Position Channels\n    \"theta\": ...,\n    \"radius\": ...,\n    \"theta2\": ...,\n    \"radius2\": ...,\n\n    // Geographic Position Channels\n    \"longitude\": ...,\n    \"latitude\": ...,\n    \"longitude2\": ...,\n    \"latitude2\": ...,\n\n    // Mark Properties Channels\n    \"color\": ...,\n    \"opacity\": ...,\n    \"fillOpacity\": ...,\n    \"strokeOpacity\": ...,\n    \"strokeWidth\": ...,\n    \"strokeDash\": ...,\n    \"size\": ...,\n    \"angle\": ...,\n    \"shape\": ...,\n\n    // Text and Tooltip Channels\n    \"text\": ...,\n    \"tooltip\": ...,\n\n    // Hyperlink Channel\n    \"href\": ...,\n\n    // Description Channel\n    \"description\": ...,\n\n    // Level of Detail Channel\n    \"detail\": ...,\n\n    // Key Channel\n    \"key\": ...,\n\n    // Order Channel\n    \"order\": ...,\n\n    // Facet Channels\n    \"facet\": ...,\n    \"row\": ...,\n    \"column\": ...\n  },\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding Vega-Lite Specification using Vega-Embed in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the Vega-Embed function to render a Vega-Lite specification in the specified DOM element.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/usage/embed.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// More argument info at https://github.com/vega/vega-embed\nvegaEmbed('#vis', yourVlSpec);\n```\n\n----------------------------------------\n\nTITLE: HTML Template for Embedding Vega-Lite Visualization\nDESCRIPTION: Complete HTML template showing how to embed a Vega-Lite visualization in a web page using Vega-Embed, including necessary dependencies and styling.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/tutorials/getting_started.md#2025-04-16_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<html>\n  <head>\n    <title>Vega-Lite Bar Chart</title>\n    <meta charset=\"utf-8\" />\n\n    <script src=\"https://cdn.jsdelivr.net/npm/vega@{{ site.data.versions.vega }}\"></script>\n    <script src=\"https://cdn.jsdelivr.net/npm/vega-lite@{{ site.data.versions.vega-lite }}\"></script>\n    <script src=\"https://cdn.jsdelivr.net/npm/vega-embed@{{ site.data.versions.vega-embed }}\"></script>\n\n    <style media=\"screen\">\n      /* Add space between Vega-Embed links  */\n      .vega-actions a {\n        margin-right: 5px;\n      }\n    </style>\n  </head>\n  <body>\n    <h1>Template for Embedding Vega-Lite Visualization</h1>\n    <!-- Container for the visualization -->\n    <div id=\"vis\"></div>\n\n    <script>\n      // Assign the specification to a local variable vlSpec.\n      var vlSpec = {\n        $schema: 'https://vega.github.io/schema/vega-lite/v6.json',\n        data: {\n          values: [\n            {a: 'C', b: 2},\n            {a: 'C', b: 7},\n            {a: 'C', b: 4},\n            {a: 'D', b: 1},\n            {a: 'D', b: 2},\n            {a: 'D', b: 6},\n            {a: 'E', b: 8},\n            {a: 'E', b: 4},\n            {a: 'E', b: 7},\n          ],\n        },\n        mark: 'bar',\n        encoding: {\n          y: {field: 'a', type: 'nominal'},\n          x: {\n            aggregate: 'average',\n            field: 'b',\n            type: 'quantitative',\n            axis: {\n              title: 'Average of b',\n            },\n          },\n        },\n      };\n\n      // Embed the visualization in the container with id `vis`\n      vegaEmbed('#vis', vlSpec);\n    </script>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Loading Latest Major Versions of Vega Libraries via CDN in HTML\nDESCRIPTION: This snippet demonstrates how to include the latest major versions of Vega, Vega-Lite, and Vega-Embed libraries using CDN links in an HTML file.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/usage/embed.md#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://cdn.jsdelivr.net/npm/vega@{{ site.data.versions.vega | slice: 0 }}\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/vega-lite@{{ site.data.versions.vega-lite | slice: 0 }}\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/vega-embed@{{ site.data.versions.vega-embed | slice: 0 }}\"></script>\n```\n\n----------------------------------------\n\nTITLE: Basic Conditional Encoding Structure\nDESCRIPTION: Basic structure for conditional encoding in Vega-Lite specifications. Shows how to define conditional rules based on parameters or test predicates within encoding channels.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/encoding/condition.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  ...,\n  \"mark/layer\": ...,\n  \"encoding\": {\n    ...: {\n      \"condition\": {\n        \"param/test\": ...,\n        \"field/value\": ...,\n        ...\n      },\n      \"field/value\": ...,\n      ...\n    },\n    ...\n  },\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: View Configuration Structure in Vega-Lite\nDESCRIPTION: Shows how to configure view properties in Vega-Lite, including size settings for continuous and discrete scales, and background styling properties that can be applied globally through the config object.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/spec.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Top-level View Specification\n{\n  ...,\n  \"config\": { // Configuration Object\n\n    \"view\": { // - View Configuration\n\n      // View Size\n      \"continuousWidth\": ...,\n      \"continuousHeight\": ...,\n      \"discreteWidth\": ...,\n      \"discreteHeight\": ...,\n      // View Background Properties\n      \"fill\": ...,\n      \"stroke\": ...,\n      ...\n    },\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Aggregate Transform in Vega-Lite\nDESCRIPTION: This code snippet shows how to use the 'aggregate' transform within the 'transform' array of a Vega-Lite specification. It demonstrates the structure for defining aggregation operations and grouping fields.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/transform/aggregate.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Any View Specification\n{\n  ...\n  \"transform\": [\n    {\n      // Aggregate Transform\n      \"aggregate\": [{\"op\": ..., \"field\": ..., \"as\": ...}],\n      \"groupby\": [...]\n    }\n     ...\n  ],\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Bar Chart Specification\nDESCRIPTION: Basic structure for creating a bar chart visualization in Vega-Lite, showing the minimal required properties.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/mark/bar.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"data\": ... ,\n  \"mark\": \"bar\",\n  \"encoding\": ... ,\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Compiling Vega-Lite to Vega Specification\nDESCRIPTION: Basic usage of the vegaLite.compile function to convert a Vega-Lite specification to Vega format. Takes a Vega-Lite spec and optional configuration object as parameters.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/usage/compile.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar vgSpec = vegaLite.compile(vlSpec, options).spec;\n```\n\n----------------------------------------\n\nTITLE: Vega-Lite Configuration Object Structure in JavaScript\nDESCRIPTION: This code snippet shows the overall structure of the Vega-Lite configuration object, including top-level configuration and various sub-configurations for different components of the visualization.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/config.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  ...,\n  \"config\": {                // Configuration Object\n    ...                      // - Top-level Configuration\n    \"axis\"      : { ... },   // - Axis Configuration\n    \"header\"    : { ... },   // - Header Configuration\n    \"legend\"    : { ... },   // - Legend Configuration\n    \"mark\"      : { ... },   // - Mark Configuration\n    \"style\"     : { ... },   // - Style Configuration\n    \"range\"     : { ... },   // - Scale Range Configuration\n    \"scale\"     : { ... },   // - Scale Configuration\n    \"projection\": { ... },   // - Projection Configuration\n    \"selection\" : { ... },   // - Selection Configuration\n    \"title\"     : { ... },   // - title Configuration\n    \"view\"      : { ... }    // - View Configuration\n    \"concat\"    : { ... }    // - Concat Configuration\n    \"facet\"     : { ... }    // - Facet Configuration\n    \"repeat\"    : { ... }    // - Repeat Configuration\n    \"locale\"    : { ... }    // - Locale Configuration\n    \"aria\"      : ...        // - Aria Configuration\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Array of Primitive Values in Vega-Lite\nDESCRIPTION: Demonstrates how Vega-Lite processes an array of primitive values by automatically mapping each value to the 'data' property of a new object.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/data.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[{\"data\": 5}, {\"data\": 3}, {\"data\": 8}, {\"data\": 1}]\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Bar Chart in Vega-Lite\nDESCRIPTION: This example shows how to create a simple bar chart in Vega-Lite. It uses the default band scale for the x-axis, which is typical for bar charts with ordinal or categorical dimensions.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/encoding/scale.md#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n<div class=\"vl-example\" data-name=\"bar\"></div>\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Area Chart in Vega-Lite\nDESCRIPTION: This snippet shows the basic structure for defining an area chart in Vega-Lite. It includes placeholders for data and encoding specifications.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/mark/area.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Single View Specification\n{\n  \"data\": ... ,\n  \"mark\": \"area\",\n  \"encoding\": ... ,\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Scatter Plot with Diverging Color Scale in Vega-Lite\nDESCRIPTION: This example shows how to create a scatter plot with a diverging color scale in Vega-Lite. It uses the 'point_diverging_color' data and applies a custom domain and range for the color scale.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/encoding/scale.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n<div class=\"vl-example\" data-name=\"point_diverging_color\"></div>\n```\n\n----------------------------------------\n\nTITLE: Binning in Encoding Field Definition for Vega-Lite (JavaScript)\nDESCRIPTION: This snippet demonstrates how to define binning in a Vega-Lite specification using the 'bin' property in an encoding field definition. It's typically used for creating histograms or other visualizations that require binned data.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/transform/bin.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// A Single View or a Layer Specification\n{\n  ...,\n  \"mark/layer\": ...,\n  \"encoding\": {\n    \"x\": {\n      \"bin\": ..., // bin\n      \"field\": ...,\n      \"type\": \"quantitative\",\n      ...\n    },\n    \"y\": ...,\n    ...\n  },\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Scatter Plot with Logarithmic Y-Scale in Vega-Lite\nDESCRIPTION: This example demonstrates how to create a scatter plot using Vega-Lite with a logarithmic scale on the y-axis. It uses the 'point_log' data and applies a log scale to the y-axis.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/encoding/scale.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n<div class=\"vl-example\" data-name=\"point_log\"></div>\n```\n\n----------------------------------------\n\nTITLE: Basic Line Mark Structure in Vega-Lite\nDESCRIPTION: Basic structure for creating a line mark visualization in Vega-Lite. Shows the fundamental components needed including data, mark type, and encoding specifications.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/mark/line.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"data\": ... ,\n  \"mark\": \"line\",\n  \"encoding\": ... ,\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Point Mark Properties in Vega-Lite Specification\nDESCRIPTION: Shows how to specify point mark properties within a Vega-Lite single view specification. This includes setting the mark type to 'point' and allows for additional properties to be defined.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/mark/point.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Single View Specification\n{\n  ...\n  \"mark\": {\n    \"type\": \"point\",\n    ...\n  },\n  \"encoding\": ... ,\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Vega-Lite Scale Configuration\nDESCRIPTION: Example showing how to configure a scale property within a Vega-Lite visualization specification. The scale is defined as part of a field definition in the encoding object.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/encoding/scale.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// A Single View or a Layer Specification\n{\n  ...,\n  \"mark/layer\": ...,\n  \"encoding\": {\n    \"x\": {\n      \"field\": ...,\n      \"type\": ...,\n      \"scale\": {                // scale\n        \"type\": ...,\n        ...\n      },\n      ...\n    },\n    \"y\": ...,\n    ...\n  },\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Field Definition Example\nDESCRIPTION: Demonstrates how to define a field encoding with properties like field name and data type. Used for mapping data fields to visual channels.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/encoding.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  ...,\n  \"encoding\": {     // Encoding\n    ...: {\n      \"field\": ...,\n      \"type\": ...,\n      ...\n    },\n    ...\n  },\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Vega-Lite Chart with Streaming Data\nDESCRIPTION: Demonstrates how to use vega.changeset() to insert new data and remove old data from a Vega-Lite chart. This code is used within a setInterval function to simulate real-time updates.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/tutorials/streaming.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar changeSet = vega\n  .changeset()\n  .insert(valueGenerator())\n  .remove(function (t) {\n    return t.x < minimumX;\n  });\nview.change('table', changeSet).run();\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Selection Parameter in Vega-Lite\nDESCRIPTION: Base structure for defining a selection parameter in a single view specification. The selection parameter uses the params array to define named parameters with select properties that determine selection behavior.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/parameter/select.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  ...,\n  \"params\": [  // An array of named parameters.\n    {\n      \"name\": ...,\n      \"select\": { // Selection\n        \"type\": ...,\n        ...\n      }\n    }\n  ],\n  \"mark\": ...,\n  \"encoding\": ...,\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Grid Facet Using Row and Column Encoding in Vega-Lite\nDESCRIPTION: Example of creating a grid of small multiples using both row and column encoding channels.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/composition/facet.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n<span class=\"vl-example\" data-name=\"facet_grid_bar\"></span>\n```\n\n----------------------------------------\n\nTITLE: Loading CSV Data in Vega-Lite\nDESCRIPTION: Shows how to load CSV data from a URL in a Vega-Lite specification\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/tutorials/explore.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n\"data\": {\"url\": \"data/seattle-weather.csv\"}\n```\n\n----------------------------------------\n\nTITLE: Single View Specification Structure in Vega-Lite\nDESCRIPTION: Demonstrates the basic structure of a single view specification in Vega-Lite, including top-level properties, data specification, and encoding mappings that define how data values map to visual mark properties.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/spec.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  // Properties for top-level specification (e.g., standalone single view specifications)\n  \"$schema\": \"https://vega.github.io/schema/vega-lite/v6.json\",\n  \"background\": ...,\n  \"padding\": ...,\n  \"autosize\": ...,\n  \"config\": ...,\n  \"usermeta\": ...,\n\n  // Properties for any specifications\n  \"title\": ...,\n  \"name\": ...,\n  \"description\": ...,\n  \"data\": ...,\n  \"transform\": ...,\n\n  // Properties for any single view specifications\n  \"width\": ...,\n  \"height\": ...,\n  \"mark\": ...,\n  \"encoding\": {\n    \"x\": {\n      \"field\": ...,\n      \"type\": ...,\n      ...\n    },\n    \"y\": ...,\n    \"color\": ...,\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Scatter Plot with Binned Size Encoding in Vega-Lite\nDESCRIPTION: This example demonstrates how to create a scatter plot with a binned field on the size channel in Vega-Lite. It uses a binned linear scale to correctly create legend labels for the binned quantitative field.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/encoding/scale.md#2025-04-16_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n<span class=\"vl-example\" data-name=\"point_binned_size\"></span>\n```\n\n----------------------------------------\n\nTITLE: Basic Box Plot Specification in Vega-Lite\nDESCRIPTION: Basic structure for creating a box plot visualization using Vega-Lite mark specification. Requires data and encoding properties to be defined.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/mark/boxplot.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"data\": ... ,\n  \"mark\": \"boxplot\",\n  \"encoding\": ... ,\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Axis Properties in Vega-Lite\nDESCRIPTION: Shows how to define global axis configuration in the Vega-Lite config object. This allows setting default axis properties by orientation, scale type, or data type.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/encoding/axis.md#2025-04-16_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n// Top-level View Specification\n{\n  ...\n  \"config\": {\n    \"axis\": : ...,\n    \"axisX\": : ...,\n    \"axisY\": : ...,\n    \"axisLeft\": : ...,\n    \"axisRight\": : ...,\n    \"axisTop\": : ...,\n    \"axisBottom\": : ...,\n    \"axisBand\": : ...,\n    \"axisQuantitative\": : ...,\n    \"axisTemporal\": : ...,\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Named Data Source in Vega-Lite\nDESCRIPTION: Shows how to create a named data source called 'myData' that can be populated at runtime using the Vega View API.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/data.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"myData\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Impute Transform in Vega-Lite\nDESCRIPTION: This snippet shows how to use the impute transform as part of the transform array in a Vega-Lite view specification. It includes all possible properties for the impute transform.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/transform/impute.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// A View Specification\n{\n  ...\n  \"transform\": [\n    ...\n    {\n      // Impute Transform\n      \"impute\": ...,\n      \"key\": ...,\n      \"keyvals\": ...,\n      \"groupby\": [...],\n      \"frame\": [...],\n      \"method\": ...,\n      \"value\": ...\n    }\n    ...\n  ],\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Detailed Text Mark Properties Configuration\nDESCRIPTION: Extended configuration for text marks in Vega-Lite, showing how to specify additional properties within the mark object. Allows for customization of text appearance and positioning.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/mark/text.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  ...\n  \"mark\": {\n    \"type\": \"text\",\n    ...\n  },\n  \"encoding\": ... ,\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Axis, Legend, and Header Labels in Vega-Lite\nDESCRIPTION: This snippet shows how to format axis, legend, and header labels in a Vega-Lite specification. It demonstrates the structure for setting the format and formatType properties within the axis, legend, or header object.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/encoding/format.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// A Single View or a Layer Specification\n{\n  ...,\n  \"mark/layer\": ...,\n  \"encoding\": {\n    ...: {\n      \"field\": ...,\n      \"type\": ...,\n      \"axis/legend/header\": {                // Axis / Legend / Header\n        \"format\": ...,\n        \"formatType\": ...,\n        ...\n      },\n      ...\n    },\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Layer Specification Structure in Vega-Lite\nDESCRIPTION: Demonstrates the basic structure for creating a layered chart specification in Vega-Lite. The layer property accepts an array of view specifications that will be superimposed on top of each other.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/composition/layer.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"layer\": [\n    ...  // Single or layered view specifications\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Temporal Bar Chart in Vega-Lite\nDESCRIPTION: This snippet demonstrates how to create a bar chart showing mean precipitation for different months using temporal data in Vega-Lite.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/encoding/type.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<span class=\"vl-example\" data-name=\"bar_month_temporal\"></span>\n```\n\n----------------------------------------\n\nTITLE: Formatting Text Marks and Tooltips in Vega-Lite\nDESCRIPTION: This snippet demonstrates how to set the format property for text or tooltip channel definitions in a Vega-Lite specification. It shows the structure for formatting text marks and tooltips.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/encoding/format.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// A Single View or a Layer Specification\n{\n  ...,\n  \"mark/layer\": ...\n  \"encoding\": {\n    ...,\n    \"text\": {\n      \"field\": ...,\n      \"type\": ...,\n      \"format\": ...,   // Format\n      \"formatType\": ...,\n      ...\n    },\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Legend in Vega-Lite Field Definition\nDESCRIPTION: A code example showing how to specify a legend object in an encoding channel's field definition within a single view or layer specification. This demonstrates the basic structure for customizing legend properties for a specific channel.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/encoding/legend.md#2025-04-16_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n// A Single View or a Layer Specification\n{\n  ...,\n  \"mark/layer\": ...,\n  \"encoding\": {\n    \"x\": ...,\n    \"y\": ...,\n    \"color\": {\n      \"field\": ...,\n      \"type\": ...,\n      \"legend\": {                // legend\n        ...\n      },\n      ...\n    },\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Facet Structure in Vega-Lite\nDESCRIPTION: Basic structure for creating a faceted view using the facet operator in Vega-Lite. Defines the facet and spec properties.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/composition/facet.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"facet\": {\n    ... // Facet definition\n  },\n  \"spec\": ...  // Specification\n}\n```\n\n----------------------------------------\n\nTITLE: Join Aggregate Transform Basic Structure\nDESCRIPTION: Demonstrates the basic structure of a join aggregate transform in a Vega-Lite specification. Shows how to define aggregate operations, fields, and grouping criteria.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/transform/joinaggregate.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Any View Specification\n{\n  ...\n  \"transform\": [\n    {\n      // Join Aggregate Transform\n      \"joinaggregate\": [{\n          \"op\": ...,\n          \"field\": ...,\n          \"as\": ...\n      }],\n      \"groupby\": [\n        \"...\"\n      ]\n    }\n     ...\n  ],\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Bar Chart with Temporal Data as Ordinal in Vega-Lite\nDESCRIPTION: This snippet shows how to create a bar chart by casting a temporal field (month) as an ordinal field in Vega-Lite.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/encoding/type.md#2025-04-16_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<span class=\"vl-example\" data-name=\"bar_month\"></span>\n```\n\n----------------------------------------\n\nTITLE: Fitting Bar Chart to Exact Dimensions in Vega-Lite\nDESCRIPTION: This example demonstrates how to create a bar chart that fits exactly into specified dimensions (300px width and 200px height) using the autosize property in Vega-Lite.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/view/size.md#2025-04-16_snippet_7\n\nLANGUAGE: vega-lite\nCODE:\n```\n<span class=\"vl-example\" data-name=\"bar_fit\"></span>\n```\n\n----------------------------------------\n\nTITLE: Complete Vega-Lite Streaming Data Example\nDESCRIPTION: Full JavaScript code for creating a Vega-Lite line chart with streaming data. It includes the chart specification, data generation function, and interval-based updates using vega.changeset().\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/tutorials/streaming.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar vlSpec = {\n  $schema: 'https://vega.github.io/schema/vega-lite/v6.json',\n  data: {name: 'table'},\n  width: 400,\n  mark: 'line',\n  encoding: {\n    x: {field: 'x', type: 'quantitative', scale: {zero: false}},\n    y: {field: 'y', type: 'quantitative'},\n    color: {field: 'category', type: 'nominal'},\n  },\n};\nvegaEmbed('#chart', vlSpec).then(function (res) {\n  /**\n   * Generates a new tuple with random walk.\n   */\n  function newGenerator() {\n    var counter = -1;\n    var previousY = [5, 5, 5, 5];\n    return function () {\n      counter++;\n      var newVals = previousY.map(function (v, c) {\n        return {\n          x: counter,\n          y: v + Math.round(Math.random() * 10 - c * 3),\n          category: c,\n        };\n      });\n      previousY = newVals.map(function (v) {\n        return v.y;\n      });\n      return newVals;\n    };\n  }\n\n  var valueGenerator = newGenerator();\n  var minimumX = -100;\n  window.setInterval(function () {\n    minimumX++;\n    var changeSet = vega\n      .changeset()\n      .insert(valueGenerator())\n      .remove(function (t) {\n        return t.x < minimumX;\n      });\n    res.view.change('table', changeSet).run();\n  }, 1000);\n});\n```\n\n----------------------------------------\n\nTITLE: Defining View-level Transforms in Vega-Lite JSON Specification\nDESCRIPTION: This snippet demonstrates the structure of a Vega-Lite specification that includes view-level transforms. The 'transform' property is an array of transformation objects that are applied to the data before visualization.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/transform/transform.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"data\": ... ,\n  \"transform\": [\n     ...\n  ],\n  \"mark\": ... ,\n  \"encoding\": ... ,\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using Argmax in Vega-Lite Encoding\nDESCRIPTION: This example demonstrates how to use the 'argmax' aggregate operation in a Vega-Lite encoding field definition. It shows how to find the value from one field that corresponds to the maximum value in another field.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/transform/aggregate.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"mark\": \"bar\",\n  \"encoding\": {\n    \"x\": {\"field\": \"genre\", \"type\": \"nominal\"},\n    \"y\": {\n      \"aggregate\": {\"argmax\": \"US_Gross\"},\n      \"field\": \"Production_Budget\",\n      \"type\": \"quantitative\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Row-Facet Using Row Encoding in Vega-Lite\nDESCRIPTION: Example of creating a row-faceted histogram using the row encoding channel instead of the facet operator.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/composition/facet.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n<span class=\"vl-example\" data-name=\"trellis_bar_histogram\"></span>\n```\n\n----------------------------------------\n\nTITLE: Line Configuration Object\nDESCRIPTION: Top-level configuration object for setting default properties for all line marks in a visualization. These defaults can be overridden by specific mark property encodings.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/mark/line.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Top-level View Specification\n{\n  ...\n  \"config\": {\n    \"line\": ...,\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Parameters in Vega-Lite Specification\nDESCRIPTION: Shows the basic structure for defining parameters in a Vega-Lite single view specification. Parameters are defined in the 'params' array and can be used throughout the chart specification.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/parameter/parameter.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  ...,\n  \"params\": [  // An array of named parameters.\n    {\"name\": ..., ...}\n  ],\n  \"mark\": ...,\n  \"encoding\": ...,\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Value Definition Example\nDESCRIPTION: Shows how to specify a constant visual value for an encoding channel using the value property.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/encoding.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  ...,\n  \"encoding\": {     // Encoding\n    ...: {\n      \"value\": ...\n    },\n    ...\n  },\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Point Mark Structure in Vega-Lite\nDESCRIPTION: Demonstrates the basic structure of a Vega-Lite specification using a point mark. The snippet shows where the mark type is specified within the overall JSON structure.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/mark/point.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"data\": ... ,\n  \"mark\": \"point\",\n  \"encoding\": ... ,\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Horizontal Concatenation in Vega-Lite\nDESCRIPTION: Demonstrates the structure for horizontally concatenating multiple views using the hconcat operator. Views are arranged side by side in a row.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/composition/concat.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"hconcat\": [\n    ...  // Specifications\n  ],\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Data Transformation in Vega-Lite\nDESCRIPTION: Demonstrates how to create a new field by calculating the temperature range from maximum and minimum temperatures\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/tutorials/explore.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n\"transform\": [\n  {\n    \"calculate\": \"datum.temp_max - datum.temp_min\",\n    \"as\": \"temp_range\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Binding Interval Selection to Scales\nDESCRIPTION: Example showing how to bind an interval selection to scales for pan and zoom functionality in a scatterplot.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/parameter/bind.md#2025-04-16_snippet_5\n\nLANGUAGE: vega-lite\nCODE:\n```\n<div class=\"vl-example\" data-name=\"selection_translate_scatterplot_drag\"></div>\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Formatter in JavaScript for Vega-Lite\nDESCRIPTION: This code snippet demonstrates how to register a custom formatter function for use in Vega-Lite visualizations. It shows the process of defining an expression function and enabling custom format types in the configuration.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/config.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvega.expressionFunction('customFormatA', function(datum, params) {\n  ...\n  return \"<formatted string>\";\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  ...,\n  \"config\": {\"customFormatTypes\": true}\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"format\": <params>,\n  \"formatType\": \"customFormatA\"\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Arc Mark Specification in Vega-Lite\nDESCRIPTION: Basic structure for creating an arc mark visualization in Vega-Lite, showing the minimal required properties.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/mark/arc.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"data\": ... ,\n  \"mark\": \"arc\",\n  \"encoding\": ... ,\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Field Definition\nDESCRIPTION: Demonstrates how to create a conditional field definition that applies data-driven encoding rules when marks satisfy a parameter or logical predicate.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/encoding/condition.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  ...,\n  \"mark/layer\": ...,\n  \"encoding\": {\n    ...: {\n      \"condition\": {\n        \"param/test\": ...,\n        \"field\": ...,\n        \"type\": ...,\n        ...\n      },\n      \"value/datum\": ...\n    },\n    ...\n  },\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Bar Chart with Custom Step Size in Vega-Lite\nDESCRIPTION: This example shows how to create a bar chart with a custom step size for the x-axis in Vega-Lite. It sets the width per discrete step, allowing for more control over the spacing of the bars.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/encoding/scale.md#2025-04-16_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n<span class=\"vl-example\" data-name=\"bar_size_step_small\"></span>\n```\n\n----------------------------------------\n\nTITLE: Implementing Filter Transform in Vega-Lite View Specification\nDESCRIPTION: This snippet demonstrates how to include a filter transform within a Vega-Lite view specification. The filter transform is added to the 'transform' array and uses the 'filter' property to define the filtering condition.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/transform/filter.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Any View Specification\n{\n  ...\n  \"transform\": [\n    {\"filter\": ...} // Filter Transform\n     ...\n  ],\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Selection Parameters in Vega-Lite\nDESCRIPTION: Demonstrates how to configure selection parameters in the 'config' object of a Vega-Lite specification. This allows setting default properties for point and interval selections.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/parameter/parameter.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  ...,\n  \"config\": {          // Configuration Object\n    \"selection\": { ... },   // - Selection Configuration\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Value in Vega-Lite Encoding (JavaScript)\nDESCRIPTION: This snippet shows the structure for defining a constant value in a Vega-Lite encoding channel. It demonstrates where the 'value' property fits within a single view or layer specification.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/encoding/value.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// A Single View or a Layer Specification\n{\n  ...,\n  \"mark/layer\": ...,\n  \"encoding\": {     // Encoding\n    ...: {\n      \"value\": ..., // Value\n    },\n    ...\n  },\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Calculate Transform in Vega-Lite View Specification\nDESCRIPTION: Demonstrates the basic structure for adding a Calculate Transform to a Vega-Lite specification. The transform allows creating new data fields based on expressions, which can then be used in visualizations or subsequent transforms.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/transform/calculate.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Any View Specification\n{\n  ...\n  \"transform\": [\n    {\"calculate\": ..., \"as\" ...} // Calculate Transform\n     ...\n  ],\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Vega-Lite Projection Properties\nDESCRIPTION: Example showing how to configure projection properties in a Vega-Lite specification. The projection configuration is defined within the config object and can contain any supported projection properties.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/projection.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Top-level View Specification\n{\n  ...,\n  \"config\": {          // Configuration Object\n    \"projection\": { ... },   // - Projection Configuration\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Bin Transform in Vega-Lite Specification (JavaScript)\nDESCRIPTION: This code snippet shows how to use the bin transform in a Vega-Lite specification. The bin transform allows for more flexibility, such as performing additional calculations before encoding the data. It creates a new field with binned values.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/transform/bin.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Any View Specification\n{\n  ...\n  \"transform\": [\n    {\"bin\": ..., \"field\": ..., \"as\" ...} // Bin Transform\n     ...\n  ],\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Axis Properties in Vega-Lite\nDESCRIPTION: Demonstrates how to define custom axis properties in a Vega-Lite specification using the 'axis' object within a channel's encoding definition.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/encoding/axis.md#2025-04-16_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n// A Single View or a Layer Specification\n{\n  ...,\n  \"mark/layer\": ...,\n  \"encoding\": {\n    \"x\": {\n      \"field\": ...,\n      \"type\": ...,\n      \"axis\": {                // Axis\n        ...\n      },\n      ...\n    },\n    \"y\": ...,\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Vega-Lite Transform Structure\nDESCRIPTION: Shows the basic structure for including a regression transform within a Vega-Lite view specification.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/transform/regression.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Any View Specification\n{\n  ...\n  \"transform\": [\n    {\"regression\": ...} // Regression Transform\n     ...\n  ],\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Density Transform Usage in Vega-Lite\nDESCRIPTION: Demonstrates basic usage of density transform with a measure field and optional grouping by a key field. Shows the structure of the resulting output data.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/transform/density.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"density\": \"measure\", \"groupby\": [\"key\"]}\n```\n\nLANGUAGE: js\nCODE:\n```\n[\n  {\"key\": \"a\", \"value\": 1, \"density\": 0.02},\n  ...\n]\n```\n\n----------------------------------------\n\nTITLE: Point Mark Configuration in Vega-Lite\nDESCRIPTION: Demonstrates how to set default properties for all point marks using the config object in a top-level Vega-Lite specification. This allows for global styling of point marks.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/mark/point.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Top-level View Specification\n{\n  ...\n  \"config\": {\n    \"point\": ...,\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Lookup Transform in Vega-Lite JSON Specification\nDESCRIPTION: This snippet shows the basic structure of a lookup transform within a Vega-Lite view specification. It demonstrates where the lookup transform should be placed and its key properties.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/transform/lookup.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"transform\": [\n    {\"lookup\": ..., \"from\" ..., \"as\": ..., \"default\": ...} // Lookup Transform\n     ...\n  ],\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Top-Level Dataset in Vega-Lite\nDESCRIPTION: Shows how to use the top-level 'datasets' property to define reusable inline data that can be referenced by name elsewhere in the specification.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/data.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n    \"datasets\": {\n      \"somedata\": [1,2,3]\n    },\n    \"data\": {\n      \"name\": \"somedata\"\n    }\n```\n\n----------------------------------------\n\nTITLE: Integrating Quantile Transform in Vega-Lite View Specification\nDESCRIPTION: Shows how to include a quantile transform within a Vega-Lite view specification. The transform is added to the 'transform' array of the specification.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/transform/quantile.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Any View Specification\n{\n  ...\n  \"transform\": [\n    {\"quantile\": ...} // Quantile Transform\n     ...\n  ],\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Circle Mark Properties in Vega-Lite\nDESCRIPTION: Demonstrates how to set specific properties for a circle mark in a Vega-Lite specification. The 'mark' property is an object that can include various configuration options.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/mark/circle.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Single View Specification\n{\n  ...\n  \"mark\": {\n    \"type\": \"circle\",\n    ...\n  },\n  \"encoding\": ... ,\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Text Configuration in Top-level Specification\nDESCRIPTION: Global configuration for text marks that applies to all text elements in the visualization. These defaults can be overridden by specific mark property encodings.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/mark/text.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  ...\n  \"config\": {\n    \"text\": ...,\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Repeat Operator Structure in Vega-Lite\nDESCRIPTION: Demonstrates the basic structure of a repeat operator specification, consisting of a repeat definition and the view specification.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/composition/repeat.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"repeat\": {\n    ... // Repeat definition\n  },\n  \"spec\": ... // Specification\n}\n```\n\n----------------------------------------\n\nTITLE: Aggregating Data in Vega-Lite Encoding Field Definition\nDESCRIPTION: This snippet demonstrates how to use the 'aggregate' property in a field definition to compute aggregate summary statistics over groups of data. It shows the structure for a single view or layer specification.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/transform/aggregate.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// A Single View or a Layer Specification\n{\n  ...,\n  \"mark/layer\": ...,\n  \"encoding\": {\n    \"x\": {\n      \"aggregate\": ..., // aggregate\n      \"field\": ...,\n      \"type\": \"quantitative\",\n      ...\n    },\n    \"y\": ...,\n    ...\n  },\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Vertical Concatenation in Vega-Lite\nDESCRIPTION: Shows how to vertically concatenate multiple views using the vconcat operator. Views are stacked one above another in a column.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/composition/concat.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"vconcat\": [\n    ...  // Specifications\n  ],\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Trail Mark in Vega-Lite\nDESCRIPTION: This snippet shows the basic structure for defining a trail mark in a Vega-Lite specification. The trail mark is used to represent data points connected by a line with variable width.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/mark/trail.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"data\": ... ,\n  \"mark\": \"trail\",\n  \"encoding\": ... ,\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Ordinal Histogram from Binned Data in Vega-Lite\nDESCRIPTION: This example demonstrates how to create a histogram with an ordinal scale by setting a binned field's type to 'ordinal' in Vega-Lite.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/encoding/type.md#2025-04-16_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"vl-example\" data-name=\"histogram_ordinal\"></div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Legend Defaults in Vega-Lite\nDESCRIPTION: A code example showing how to set default legend properties for all legends using the legend configuration object. This allows for theme-like customization applied to all legends in a visualization.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/encoding/legend.md#2025-04-16_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n// Top-level View Specification\n{\n  ...\n  \"config\": {\n    \"legend\": {\n      ...\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Vega-Lite Sort Configuration Structure\nDESCRIPTION: Demonstrates the basic structure for configuring sorting in a Vega-Lite specification within the encoding block. Shows how to apply sorting to encoded fields like x and y axes.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/encoding/sort.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// A Single View or a Layer Specification\n{\n  ...,\n  \"mark/layer\": ...,\n  \"encoding\": {\n    \"x\": {\n      \"field\": ...,\n      \"type\": ...,\n      \"sort\": ...,         // sort\n      ...\n    },\n    \"y\": ...,\n    ...\n  },\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Sample Transform in Vega-Lite View Specification\nDESCRIPTION: This snippet shows how to include a sample transform in a Vega-Lite view specification. The sample transform is added to the 'transform' array within the specification.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/transform/sample.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Any View Specification\n{\n  ...\n  \"transform\": [\n    {\"sample\": ...} // Sample Transform\n     ...\n  ],\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Simple Regression Transform Example\nDESCRIPTION: Demonstrates a basic regression transform configuration that models y as a function of x.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/transform/regression.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"regression\": \"y\", \"on\": \"x\"}\n```\n\n----------------------------------------\n\nTITLE: Defining Time Unit in Encoding Field (JavaScript)\nDESCRIPTION: Shows how to specify a time unit in the encoding field definition of a Vega-Lite visualization. This is used to discretize temporal data for visualization.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/transform/timeunit.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// A Single View or a Layer Specification\n{\n  ...,\n  \"mark/layer\": ...,\n  \"encoding\": {\n    \"x\": {\n      \"timeUnit\": ...,               // time unit\n      \"field\": ...,\n      \"type\": \"temporal\",\n      ...\n    },\n    \"y\": ...,\n    ...\n  },\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Row-Facet Example in Vega-Lite\nDESCRIPTION: Example of a row-faceted histogram using the facet operator. Shows horsepower distribution faceted by car origin.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/composition/facet.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<span class=\"vl-example\" data-dir=\"normalized\" data-name=\"trellis_bar_histogram_normalized\"></span>\n```\n\n----------------------------------------\n\nTITLE: Window Transform Structure in Vega-Lite JSON Specification\nDESCRIPTION: Demonstrates the structure of a window transform within a Vega-Lite view specification. It includes the main components of the transform such as window operations, sorting, grouping, and framing.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/transform/window.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Any View Specification\n{\n  ...\n  \"transform\": [\n    {\n      // Window Transform\n      \"window\": [{\n          \"op\": ...,\n          \"field\": ...,\n          \"param\": ...,\n          \"as\": ...\n      }],\n      \"sort\": [\n        {\"field\": ..., \"order\": ...}\n      ],\n      \"ignorePeers\": ...,\n      \"groupby\": [\n        \"...\"\n      ],\n      \"frame\": [...,...]\n    }\n     ...\n  ],\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Trail Mark Properties in Vega-Lite\nDESCRIPTION: This snippet demonstrates how to set properties for a trail mark in a single view specification. It can include any standard mark properties and specific properties like 'orient'.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/mark/trail.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Single View Specification\n{\n  ...\n  \"mark\": {\n    \"type\": \"trail\",\n    ...\n  },\n  \"encoding\": ... ,\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Mark Style Configuration Example\nDESCRIPTION: Shows how to configure custom styles for marks using the style property in the config object.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/mark/mark.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"style\": {\n    \"triangle\": {\n      \"shape\": \"triangle-up\",\n      \"strokeWidth\": 2\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Header in Single View or Layer Specification (JavaScript)\nDESCRIPTION: This snippet demonstrates how to set header properties for a row channel in a single view or layer specification. It shows the structure for including header customization within the encoding object.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/encoding/header.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// A Single View or a Layer Specification\n{\n  ...,\n  \"mark/layer\": ...,\n  \"encoding\": {\n    \"row\": {\n      \"field\": ...,\n      \"type\": ...,\n      \"header\": {...}, // Header\n      ...\n    },\n    \"x\": ...,\n    \"y\": ...,\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Binding Point Selection to Dropdown Menu\nDESCRIPTION: Example demonstrating binding a point selection named 'org' to a dropdown menu for selecting Origin values.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/parameter/bind.md#2025-04-16_snippet_1\n\nLANGUAGE: vega-lite\nCODE:\n```\n<div class=\"vl-example\" data-name=\"selection_bind_origin\"></div>\n```\n\n----------------------------------------\n\nTITLE: Using Fold Transform in Vega-Lite\nDESCRIPTION: Demonstrates how to use the fold transform to collapse 'gold' and 'silver' properties into key-value pairs. Includes example input and output data to illustrate the transformation.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/transform/fold.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"fold\": [\"gold\", \"silver\"]}\n```\n\n----------------------------------------\n\nTITLE: Configuring Header in Facet Specification (JavaScript)\nDESCRIPTION: This snippet shows how to set header properties in a facet specification. It demonstrates the structure for including header customization within the facet object for row or column facets.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/encoding/header.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// A Facet Specification\n{\n  ...,\n  \"facet\": {\n    \"row/column\": {\n      \"field\": ...,\n      \"type\": ...,\n      \"header\": {...}, // Header\n      ...\n    },\n    ...\n  },\n  \"spec\": ...\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Flatten Transform Usage\nDESCRIPTION: Simple example showing how to specify multiple fields to flatten in the transform.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/transform/flatten.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"flatten\": [\"foo\", \"bar\"]}\n```\n\n----------------------------------------\n\nTITLE: Configuring Geoshape Properties in Vega-Lite\nDESCRIPTION: This snippet shows how to set default properties for all geoshape marks using the config object in a top-level Vega-Lite specification. These properties can be overridden by mark property encoding channels.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/mark/geoshape.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  ...\n  \"config\": {\n    \"geoshape\": ...,\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Field in Vega-Lite Encoding (JavaScript)\nDESCRIPTION: This snippet demonstrates the structure of a Vega-Lite specification, focusing on the 'field' property within the encoding object. It shows how to define a field for a single view or layer specification.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/encoding/field.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// A Single View or a Layer Specification\n{\n  ...,\n  \"mark/layer\": ...,\n  \"encoding\": {     // Encoding\n    ...: {\n      \"field\": ..., // Field\n      \"type\": \"quantitative\",\n      ...\n    },\n    ...\n  },\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Line Mark Properties Configuration\nDESCRIPTION: Detailed specification for configuring line mark properties in a single view specification. Shows how to set the mark type and additional properties.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/mark/line.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Single View Specification\n{\n  ...\n  \"mark\": {\n    \"type\": \"line\",\n    ...\n  },\n  \"encoding\": ... ,\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Rule Mark Properties Configuration in Vega-Lite\nDESCRIPTION: Demonstrates how to specify additional properties for a rule mark using an object notation instead of just the mark type string.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/mark/rule.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  ...\n  \"mark\": {\n    \"type\": \"rule\",\n    ...\n  },\n  \"encoding\": ... ,\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Density Transform Structure in Vega-Lite\nDESCRIPTION: Shows the basic structure for adding a density transform to any Vega-Lite view specification.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/transform/density.md#2025-04-16_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n// Any View Specification\n{\n  ...\n  \"transform\": [\n    {\"density\": ...} // Density Transform\n     ...\n  ],\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Scale and Guide Resolution in Vega-Lite JSON\nDESCRIPTION: This snippet demonstrates the structure of the 'resolve' object in Vega-Lite, used to specify resolution for scales, axes, and legends. It shows how to define resolution for different channels, with options for 'shared' or 'independent' resolution.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/composition/resolve.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"resolve\": {\n    // Scale resolution\n    \"scale\": {\n      CHANNEL: ...\n    },\n    // Axis resolution for position channels\n    \"axis\": {\n      POSITION_CHANNEL: ...\n    },\n    // Legend resolution for non-position channels\n    \"legend\": {\n      NON_POSITION_CHANNEL: ...\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Datum in Vega-Lite Specification (JavaScript)\nDESCRIPTION: This snippet shows the structure of a Vega-Lite specification where the 'datum' property can be used within the encoding section. It demonstrates how to incorporate a constant data value into a single view or layer specification.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/encoding/datum.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// A Single View or a Layer Specification\n{\n  ...,\n  \"mark/layer\": ...,\n  \"encoding\": {     // Encoding\n    ...: {\n      \"datum\": ..., // Value\n    },\n    ...\n  },\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Area Mark Properties in Vega-Lite\nDESCRIPTION: This snippet demonstrates how to set specific properties for an area mark in Vega-Lite. It allows for customization of the area's appearance and behavior.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/mark/area.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Single View Specification\n{\n  ...\n  \"mark\": {\n    \"type\": \"area\",\n    ...\n  },\n  \"encoding\": ... ,\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Expression Reference in Vega-Lite\nDESCRIPTION: This code snippet shows an example of using an Expression Reference (ExprRef) in Vega-Lite to set a mark's color property using a custom expression.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/types.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{expr: \"lab(50,10,30)\"}\n```\n\n----------------------------------------\n\nTITLE: Wrappable Concatenation in Vega-Lite\nDESCRIPTION: Illustrates the flexible concatenation layout using the concat operator with columns property for controlling the number of items per row.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/composition/concat.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"concat\": [\n    ...  // Specifications\n  ],\n  \"columns\": ...,\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Concat Configuration in Vega-Lite\nDESCRIPTION: Shows the configuration options for concatenated views, including spacing between views and default number of columns for wrappable concatenation.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/composition/concat.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  ...,\n  \"config\": { // Configuration Object\n    \"concat\": { // - Concat Configuration\n      \"spacing\": ...,\n      \"columns\": ...,\n    },\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Mark Definition Object Structure\nDESCRIPTION: Demonstrates how to define a mark using an object with customizable properties instead of a simple string.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/mark/mark.md#2025-04-16_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n// Single View Specification\n{\n  ...\n  \"mark\": {\n    \"type\": ...,       // mark\n    ...\n  },\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Bar Configuration Settings\nDESCRIPTION: Top-level configuration for setting default properties for all bar marks in the visualization.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/mark/bar.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  ...\n  \"config\": {\n    \"bar\": ...,\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Datum Definition Example\nDESCRIPTION: Illustrates how to map a constant data value through a scale to an encoding channel using the datum property.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/encoding.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  ...,\n  \"encoding\": {     // Encoding\n    ...: {\n      \"datum\": ...\n    },\n    ...\n  },\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Synchronized Views with Shared Scale Binding\nDESCRIPTION: Example showing how binding shared scales keeps multiple views synchronized when panning/zooming.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/parameter/bind.md#2025-04-16_snippet_6\n\nLANGUAGE: vega-lite\nCODE:\n```\n<div class=\"vl-example\" data-name=\"interactive_panzoom_vconcat_shared\"></div>\n```\n\n----------------------------------------\n\nTITLE: Computing Quantiles with Equal-Sized Probability Steps in Vega-Lite\nDESCRIPTION: Shows how to compute quantiles for a 'measure' field using equal-sized probability steps. The 'step' parameter defines the size of each probability step.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/transform/quantile.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\"quantile\": \"measure\", \"step\": 0.05}\n```\n\n----------------------------------------\n\nTITLE: Binding Variable Parameters to Input Elements\nDESCRIPTION: Example showing how to bind variable parameters to interactive input elements to manipulate a rect mark visualization.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/parameter/bind.md#2025-04-16_snippet_0\n\nLANGUAGE: vega-lite\nCODE:\n```\n<div class=\"vl-example\" data-name=\"rect_params\"></div>\n```\n\n----------------------------------------\n\nTITLE: Basic Text Mark Specification in Vega-Lite\nDESCRIPTION: Basic structure for defining a text mark visualization in Vega-Lite. Shows the minimal required configuration with data, mark type, and encoding properties.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/mark/text.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"data\": ... ,\n  \"mark\": \"text\",\n  \"encoding\": ... ,\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Extent Transform to Find Min and Max Values\nDESCRIPTION: This transform calculates the minimum and maximum values of the 'b' field and stores them in a parameter named 'b_extent'. The result will be an array with two values: [19, 91].\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/transform/extent.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"transform\": [\n  {\"extent\": \"b\", \"param\": \"b_extent\"}\n]\n```\n\n----------------------------------------\n\nTITLE: Setting Global Circle Mark Config in Vega-Lite\nDESCRIPTION: Shows how to set default properties for all circle marks in a Vega-Lite visualization using the top-level config object. These defaults can be overridden by specific mark property encodings.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/mark/circle.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Top-level View Specification\n{\n  ...\n  \"config\": {\n    \"circle\": ...,\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Output Format for Quartile Boundaries in Vega-Lite\nDESCRIPTION: Illustrates the output format of the quantile transform when computing quartile boundaries. Each object in the array represents a probability point and its corresponding value.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/transform/quantile.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n[\n  {prob: 0.25, value: 1.34},\n  {prob: 0.5, value: 5.82},\n  {prob: 0.75, value: 9.31},\n]\n```\n\n----------------------------------------\n\nTITLE: Defining Loess Transform Parameters in Vega-Lite\nDESCRIPTION: This snippet demonstrates how to define parameters for a loess transform in Vega-Lite. It specifies the 'y' field to model, 'x' field to use as the independent variable, and a bandwidth of 0.5.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/transform/loess.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"loess\": \"y\", \"on\": \"x\", \"bandwidth\": 0.5}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Error Bar Visualization in Vega-Lite\nDESCRIPTION: Basic structure for defining an error bar visualization in Vega-Lite. The specification includes data, mark type set to 'errorbar', and encoding properties.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/mark/errorbar.md#2025-04-16_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n// Single View Specification\n{\n  \"data\": ... ,\n  \"mark\": \"errorbar\",\n  \"encoding\": ... ,\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Area Mark Properties in Vega-Lite\nDESCRIPTION: This snippet shows how to set default properties for all area marks in a Vega-Lite visualization using the top-level config object.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/mark/area.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Top-level View Specification\n{\n  ...\n  \"config\": {\n    \"area\": ...,\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Title Settings in Vega-Lite\nDESCRIPTION: Example of how to configure global title settings in a Vega-Lite visualization using the config property\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/view/title.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  ...\n  \"config\": {\n    \"title\": : {\n      ...\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Data Schema for Vega-Lite Streaming\nDESCRIPTION: Defines the data schema for streaming data points in a Vega-Lite visualization. Each data point contains x and y coordinates and a category.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/tutorials/streaming.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"x\": number,\n  \"y\": number,\n  \"category\": number\n}\n```\n\n----------------------------------------\n\nTITLE: Bar Mark Properties Configuration\nDESCRIPTION: Extended specification showing how to configure bar mark properties including type and additional customization options.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/mark/bar.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  ...\n  \"mark\": {\n    \"type\": \"bar\",\n    ...\n  },\n  \"encoding\": ... ,\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Error Band Visualization in Vega-Lite\nDESCRIPTION: Basic structure for creating an error band visualization in Vega-Lite. Specifies the mark type as 'errorband' within a single view specification.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/mark/errorband.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Single View Specification\n{\n  \"data\": ... ,\n  \"mark\": \"errorband\",\n  \"encoding\": ... ,\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Adjusting Size of Faceted Plot in Vega-Lite\nDESCRIPTION: This example shows how to adjust the width and height of the inner single view specification to control the size of a faceted plot in Vega-Lite.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/view/size.md#2025-04-16_snippet_8\n\nLANGUAGE: vega-lite\nCODE:\n```\n<span class=\"vl-example\" data-name=\"normalized/trellis_scatter_small_normalized\"></span>\n```\n\n----------------------------------------\n\nTITLE: Basic Single View Specification with Mark\nDESCRIPTION: Shows the basic structure of a Vega-Lite specification with a mark property.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/mark/mark.md#2025-04-16_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n// Single View Specification\n{\n  \"data\": ... ,\n  \"mark\": ... ,       // mark\n  \"encoding\": ... ,\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Fold Transform in Vega-Lite View Specification\nDESCRIPTION: Shows how to include a fold transform within a Vega-Lite view specification. The fold transform is defined as part of the 'transform' array.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/transform/fold.md#2025-04-16_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n// Any View Specification\n{\n  ...\n  \"transform\": [\n    {\"fold\": ...} // Fold Transform\n     ...\n  ],\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Image Mark Properties\nDESCRIPTION: Extended image mark configuration using the object notation. This allows setting additional properties for the image mark beyond the basic type specification.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/mark/image.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Single View Specification\n{\n  ...\n  \"mark\": {\n    \"type\": \"image\",\n    ...\n  },\n  \"encoding\": ... ,\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Zoom Selection Handler in JavaScript\nDESCRIPTION: JavaScript function that handles zoom selection changes. It updates the visualization based on the selected type (brush/scatterplot) and zoom event type (wheel/shift-wheel).\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/parameter/select.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction buildTranslate() {\n  const type = document.getElementById('type_zoom').value;\n  const event = document.getElementById('event_zoom').value;\n  changeSpec('zoom', 'selection_zoom_' + type + '_' + event);\n}\n```\n\n----------------------------------------\n\nTITLE: Binding Point Selection to Legend\nDESCRIPTION: Example showing how to bind a point selection to legend interaction for single field/encoding channel projections.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/parameter/bind.md#2025-04-16_snippet_3\n\nLANGUAGE: vega-lite\nCODE:\n```\n<div class=\"vl-example\" data-name=\"interactive_legend\"></div>\n```\n\n----------------------------------------\n\nTITLE: Disabling All Tooltips in Config\nDESCRIPTION: Code example showing how to disable all tooltips globally by setting the tooltip property to null in the mark configuration.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/tooltip.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n\"config\": {\n  \"mark\": {\"tooltip\": null}\n}\n```\n\n----------------------------------------\n\nTITLE: Input Data Example for Flatten Transform\nDESCRIPTION: Sample input data structure showing array-valued fields that will be flattened.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/transform/flatten.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\"key\": \"alpha\", \"foo\": [1, 2], \"bar\": [\"A\", \"B\"]},\n  {\"key\": \"beta\", \"foo\": [3, 4, 5], \"bar\": [\"C\", \"D\"]}\n]\n```\n\n----------------------------------------\n\nTITLE: Compiling Vega-Lite Spec with TypeScript Types\nDESCRIPTION: Demonstrates how to use Vega-Lite's TypeScript types to create and compile a visualization specification. Shows usage of TopLevelSpec for the main visualization spec and Config type for styling configuration. The example creates a bar chart with custom styling.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/usage/typescript.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Config, TopLevelSpec, compile} from 'vega-lite';\n\nconst vegaLiteSpec: TopLevelSpec = {\n  $schema: 'https://vega.github.io/schema/vega-lite/v6.json',\n  data: {\n    values: [\n      {a: 'A', b: 28},\n      {a: 'B', b: 55},\n      {a: 'C', b: 43},\n      {a: 'D', b: 91},\n      {a: 'E', b: 81},\n      {a: 'F', b: 53},\n      {a: 'G', b: 19},\n      {a: 'H', b: 87},\n      {a: 'I', b: 52},\n    ],\n  },\n  mark: 'bar',\n  encoding: {\n    x: {field: 'a', type: 'nominal', axis: {labelAngle: 0}},\n    y: {field: 'b', type: 'quantitative'},\n  },\n};\n\nconst config: Config = {\n  bar: {\n    color: 'firebrick',\n  },\n};\n\nconst vegaSpec = compile(vegaLiteSpec, {config}).spec;\n```\n\n----------------------------------------\n\nTITLE: Translate Selection Handler in JavaScript\nDESCRIPTION: JavaScript function that handles translation (panning) selection changes. It updates the visualization based on the selected type (brush/scatterplot) and event trigger (drag/shift-drag).\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/parameter/select.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction buildTranslate() {\n  const type = document.getElementById('type_translate').value;\n  const event = document.getElementById('event_translate').value;\n  changeSpec('translate', 'selection_translate_' + type + '_' + event);\n}\n```\n\n----------------------------------------\n\nTITLE: Tick Mark Configuration in Vega-Lite\nDESCRIPTION: Top-level configuration for customizing default properties of tick marks. These settings can be overridden by mark property encoding channels.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/mark/tick.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  ...\n  \"config\": {\n    \"tick\": ...,\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Wrapped Facet Example in Vega-Lite\nDESCRIPTION: Example of a wrapped facet plot using the facet operator. Demonstrates a more complex faceting scenario.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/composition/facet.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<span class=\"vl-example\" data-name=\"trellis_barley\"></span>\n```\n\n----------------------------------------\n\nTITLE: Conditional Value Definition\nDESCRIPTION: Shows how to specify conditional value definitions that apply constant values when data satisfies certain conditions, with support for else cases using field mappings.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/encoding/condition.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  ...,\n  \"mark/layer\": ...,\n  \"encoding\": {\n    ...: {\n      \"condition\": {\n        \"param/test\": ...,\n        \"value/datum\": ...\n      },\n      \"field\": ... ,\n      \"type\": ...,\n      ...\n    },\n    ...\n  },\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Error Band Mark Properties in Vega-Lite\nDESCRIPTION: Example of configuring error band mark properties in Vega-Lite. Shows the structure for setting default properties for errorband marks.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/mark/errorband.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"errorband\": {\n    \"extent\": ...,\n    \"band\": ...,\n    \"borders\": ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Legend Binding Events\nDESCRIPTION: Example demonstrating how to customize the events that trigger legend interaction using Vega event streams.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/parameter/bind.md#2025-04-16_snippet_4\n\nLANGUAGE: vega-lite\nCODE:\n```\n<div class=\"vl-example\" data-name=\"interactive_legend_dblclick\"></div>\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Sorted Bar Chart in Vega-Lite\nDESCRIPTION: This example illustrates how to create a bar chart with a custom sort order for an ordinal field in Vega-Lite.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/encoding/type.md#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"vl-example\" data-name=\"bar_custom_sort_full\"></div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Stack Transform in Vega-Lite (JavaScript)\nDESCRIPTION: This snippet demonstrates how to use the 'stack' transform within the transform array of a Vega-Lite specification. It allows for more flexible stacking configurations and can be used in any view specification.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/transform/stack.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Any View Specification\n{\n  ...\n  \"transform\": [\n    // Stack Transform\n    {\n      \"stack\": ...,\n      \"groupby\": ...,\n      \"offset\": ...,\n      \"sort\": ...,\n      \"as\": ...\n    }\n    ...\n  ],\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Logger Interface Definition\nDESCRIPTION: TypeScript interface definition for implementing a custom logger. Defines methods for different logging levels including warn, info, and debug.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/usage/compile.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface LoggerInterface {\n  level: (_: number) => number | LoggerInterface;\n  warn(...args: any[]): LoggerInterface;\n  info(...args: any[]): LoggerInterface;\n  debug(...args: any[]): LoggerInterface;\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Width per Discrete Step in Vega-Lite Bar Chart\nDESCRIPTION: This example shows how to set the width as an object indicating the width per discrete step for a bar chart with a discrete x-field in Vega-Lite.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/view/size.md#2025-04-16_snippet_4\n\nLANGUAGE: vega-lite\nCODE:\n```\n<span class=\"vl-example\" data-name=\"bar_size_step_small\"></span>\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Header Properties (JavaScript)\nDESCRIPTION: This snippet demonstrates how to set global header configuration properties in the top-level config object. It allows setting default properties for all headers and specific header types based on facet channels.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/encoding/header.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Top-level View Specification\n{\n  ...\n  \"config\": {\n    \"header\": {...},               // Header\n    \"headerRow\": {...},\n    \"headerColumn\": {...},\n    \"headerFacet\": {...},\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Step for Position in Grouped Bar Chart\nDESCRIPTION: This snippet shows how to specify the step for the x/y scale instead of the offset in a grouped bar chart by including \"for\": \"position\" in the width or height configuration.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/view/size.md#2025-04-16_snippet_6\n\nLANGUAGE: vega-lite\nCODE:\n```\n<span class=\"vl-example\" data-name=\"bar_grouped_step_for_position\"></span>\n```\n\n----------------------------------------\n\nTITLE: Rect Mark Global Configuration\nDESCRIPTION: Demonstrates how to set default properties for all rect marks using the top-level config object.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/mark/rect.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  ...\n  \"config\": {\n    \"rect\": ...,\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running NPM Build Commands\nDESCRIPTION: Common NPM commands for building, testing, and developing Vega-Lite\nSOURCE: https://github.com/vega/vega-lite/blob/main/CONTRIBUTING.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\\nnpm test\\nnpm run test:cover\\nnpm run watch\\nnpm run site\\nnpm run release\n```\n\n----------------------------------------\n\nTITLE: Basic Rule Mark Specification in Vega-Lite\nDESCRIPTION: Basic structure for defining a rule mark visualization in Vega-Lite. Shows the minimal required properties including data, mark type, and encoding.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/mark/rule.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"data\": ... ,\n  \"mark\": \"rule\",\n  \"encoding\": ... ,\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Tick Mark Specification in Vega-Lite\nDESCRIPTION: Basic structure for creating a tick mark visualization in Vega-Lite. The tick mark represents each data point as a short line, useful for displaying value distributions.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/mark/tick.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"data\": ... ,\n  \"mark\": \"tick\",\n  \"encoding\": ... ,\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Pan and Zoom in Scatterplot Matrix\nDESCRIPTION: Example demonstrating scale binding to enable pan and zoom functionality in a scatterplot matrix.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/parameter/bind.md#2025-04-16_snippet_7\n\nLANGUAGE: vega-lite\nCODE:\n```\n<div class=\"vl-example\" data-name=\"interactive_panzoom_splom\"></div>\n```\n\n----------------------------------------\n\nTITLE: Defining Field Range Predicate in Vega-Lite JSON\nDESCRIPTION: Provides examples of field range predicates in Vega-Lite, including numeric range, year range, and date range checks.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/types/predicate.md#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\"field\": \"x\", \"range\": [0, 5]}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\"timeUnit\": \"year\", \"field\": \"date\", \"range\": [2006, 2008] }\n```\n\nLANGUAGE: json\nCODE:\n```\n{\"field\": \"date\", \"range\": [{\"year\": 2006, \"month\": \"jan\", \"date\": 1}, {\"year\": 2008, \"month\": \"feb\", \"date\": 20}] }\n```\n\n----------------------------------------\n\nTITLE: Basic Rect Mark Specification in Vega-Lite\nDESCRIPTION: Demonstrates the basic structure for defining a rect mark in a single view specification.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/mark/rect.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"data\": ... ,\n  \"mark\": \"rect\",\n  \"encoding\": ... ,\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default Trail Mark Config in Vega-Lite\nDESCRIPTION: This snippet shows how to set default properties for all trail marks using the config object in a top-level view specification. These defaults can be overridden by mark property encoding channels.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/mark/trail.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Top-level View Specification\n{\n  ...\n  \"config\": {\n    \"trail\": ...,\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rule Mark Global Configuration in Vega-Lite\nDESCRIPTION: Shows how to set default properties for all rule marks using the top-level config object. These defaults can be overridden by individual mark specifications.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/mark/rule.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  ...\n  \"config\": {\n    \"rule\": ...,\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fitting Bar Chart to Fixed Width in Vega-Lite\nDESCRIPTION: This snippet shows how to create a bar chart that automatically scales the discrete step to fit a specified fixed width. It demonstrates the flexibility of Vega-Lite in adjusting chart dimensions.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/view/size.md#2025-04-16_snippet_1\n\nLANGUAGE: vega-lite\nCODE:\n```\n<span class=\"vl-example\" data-name=\"bar_size_fit\"></span>\n```\n\n----------------------------------------\n\nTITLE: Defining Square Mark in Vega-Lite Single View Specification\nDESCRIPTION: This snippet shows how to specify a square mark in a Vega-Lite single view specification. The 'mark' property is set to 'square', and it includes placeholders for data and encoding.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/mark/square.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"data\": ... ,\n  \"mark\": \"square\",\n  \"encoding\": ... ,\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Square Mark Properties in Vega-Lite\nDESCRIPTION: This snippet demonstrates how to configure default properties for all square marks using the 'config' object in a top-level Vega-Lite specification. The 'square' property can contain any point mark properties except 'type', 'style', and 'clip'.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/mark/square.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  ...\n  \"config\": {\n    \"square\": ...,\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Faceted Plot with Row/Column Channels in Vega-Lite\nDESCRIPTION: This snippet demonstrates an alternative way to create a faceted plot using the row or column channel, where width and height are applied to the inner single-view plot.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/view/size.md#2025-04-16_snippet_9\n\nLANGUAGE: vega-lite\nCODE:\n```\n<span class=\"vl-example\" data-name=\"trellis_scatter_small\"></span>\n```\n\n----------------------------------------\n\nTITLE: Detailed Rect Mark Properties Configuration\nDESCRIPTION: Shows how to specify detailed properties for a rect mark using the expanded mark object syntax.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/mark/rect.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  ...\n  \"mark\": {\n    \"type\": \"rect\",\n    ...\n  },\n  \"encoding\": ... ,\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Circle Mark in Vega-Lite Specification\nDESCRIPTION: Shows how to specify a circle mark in a Vega-Lite single view specification. The circle mark is defined in the 'mark' property of the specification object.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/mark/circle.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Single View Specification\n{\n  \"data\": ... ,\n  \"mark\": \"circle\",\n  \"encoding\": ... ,\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Global Image Defaults in Config\nDESCRIPTION: Configuration for setting default properties for all image marks in a Vega-Lite specification. These defaults can be overridden by mark property encoding channels.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/mark/image.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Top-level View Specification\n{\n  ...\n  \"config\": {\n    \"image\": ...,\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Overcrowded Bar Chart in Vega-Lite\nDESCRIPTION: This example illustrates a potential issue when specifying a fixed size for a chart with high cardinality in the discrete field. The resulting plot becomes too packed and difficult to read.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/view/size.md#2025-04-16_snippet_2\n\nLANGUAGE: vega-lite\nCODE:\n```\n<span class=\"vl-example\" data-name=\"bar_size_explicit_bad\"></span>\n```\n\n----------------------------------------\n\nTITLE: Configuring Stack in Encoding Field Definition (JavaScript)\nDESCRIPTION: This snippet shows how to configure stacking using the 'stack' property within the encoding field definition of a Vega-Lite specification. It's typically used for single view or layer specifications.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/transform/stack.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// A Single View or a Layer Specification\n{\n  ...,\n  \"mark/layer\": ...,\n  \"encoding\": {     // Encoding\n    \"x\" or \"y\": {\n      \"field\": ...,\n      \"type\": \"quantitative\",\n      \"stack\": ..., // Stack\n      ...\n    },\n    ...\n  },\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Detailed Arc Mark Configuration in Vega-Lite\nDESCRIPTION: Extended configuration for arc marks showing how to specify additional properties within the mark object.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/mark/arc.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  ...\n  \"mark\": {\n    \"type\": \"arc\",\n    ...\n  },\n  \"encoding\": ... ,\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Example Output of Loess Transform in Vega-Lite\nDESCRIPTION: This snippet shows an example of the output data stream generated by a loess transform. Each record contains 'x' and 'y' values representing points on the trend line.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/transform/loess.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n[\n  {\"x\": 1, \"y\": 2.3},\n  {\"x\": 2, \"y\": 2.9},\n  {\"x\": 3, \"y\": 2.7},\n  ...\n]\n```\n\n----------------------------------------\n\nTITLE: Defining Predicate Composition in Vega-Lite JSON\nDESCRIPTION: Demonstrates how to compose multiple predicates using logical operators (and, or, not) in Vega-Lite.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/types/predicate.md#2025-04-16_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\"and\": [{\"field\": \"height\", \"gt\": 0}, {\"field\": \"height\", \"lt\": 180}]}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\"not\": {\"field\": \"x\", \"range\": [0, 5]}}\n```\n\n----------------------------------------\n\nTITLE: Defining a Single View Specification with Geoshape Mark in Vega-Lite\nDESCRIPTION: This snippet demonstrates the basic structure of a single view specification using a geoshape mark in Vega-Lite. It includes placeholders for data and encoding properties.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/mark/geoshape.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"data\": ... ,\n  \"mark\": \"geoshape\",\n  \"encoding\": ... ,\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Field Less Than Predicate in Vega-Lite JSON\nDESCRIPTION: Shows how to create a field less than predicate to check if the 'height' field's value is less than 180 in Vega-Lite.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/types/predicate.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"field\": \"height\", \"lt\": 180}\n```\n\n----------------------------------------\n\nTITLE: Regression Output Format\nDESCRIPTION: Shows the structure of the output data stream generated by the regression transform.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/transform/regression.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n[\n  {\"x\": 1, \"y\": 2.3},\n  {\"x\": 2, \"y\": 2.7},\n  {\"x\": 3, \"y\": 3.0},\n  ...\n]\n```\n\n----------------------------------------\n\nTITLE: Defining Field Greater Than or Equals Predicate in Vega-Lite JSON\nDESCRIPTION: Shows how to create a field greater than or equals predicate to check if the 'height' field's value is greater than or equal to 0 in Vega-Lite.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/types/predicate.md#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\"field\": \"height\", \"gte\": 0}\n```\n\n----------------------------------------\n\nTITLE: Defining Image Mark in Single View Specification\nDESCRIPTION: Basic structure for including an image mark in a Vega-Lite single view specification. This shows the minimal required properties where 'mark' is set to 'image'.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/mark/image.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Single View Specification\n{\n  \"data\": ... ,\n  \"mark\": \"image\",\n  \"encoding\": ... ,\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Field Valid Predicate in Vega-Lite JSON\nDESCRIPTION: Shows how to create a field valid predicate to check if the 'car_color' field's value is valid (not null and not NaN) in Vega-Lite.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/types/predicate.md#2025-04-16_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\"field\": \"car_color\", \"valid\": true}\n```\n\n----------------------------------------\n\nTITLE: Sample Data for Extent Transform Example\nDESCRIPTION: A sample dataset used to demonstrate the extent transform. It contains 9 data points with 'a' and 'b' fields where 'b' contains numeric values.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/transform/extent.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"data\": {\n  \"values\": [\n    {\"a\": \"A\", \"b\": 28}, {\"a\": \"B\", \"b\": 55}, {\"a\": \"C\", \"b\": 43},\n    {\"a\": \"D\", \"b\": 91}, {\"a\": \"E\", \"b\": 81}, {\"a\": \"F\", \"b\": 53},\n    {\"a\": \"G\", \"b\": 19}, {\"a\": \"H\", \"b\": 87}, {\"a\": \"I\", \"b\": 52}\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Field One-Of Predicate in Vega-Lite JSON\nDESCRIPTION: Demonstrates how to create a field one-of predicate to check if the 'car_color' field's value is either 'red' or 'yellow' in Vega-Lite.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/types/predicate.md#2025-04-16_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\"field\": \"car_color\", \"oneOf\": [\"red\", \"yellow\"]}\n```\n\n----------------------------------------\n\nTITLE: Basic Extent Transform Syntax in Vega-Lite\nDESCRIPTION: The basic structure for adding an extent transform to a Vega-Lite specification. This transform finds the minimum and maximum values of a field and stores the result in a parameter.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/transform/extent.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Any View Specification\n{\n  ...\n  \"transform\": [\n    {\"extent\": ..., \"param\": ...} // Extent Transform\n     ...\n  ],\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Parameter Predicate in Vega-Lite JSON\nDESCRIPTION: Illustrates how to create a parameter predicate to filter data based on a selection named 'brush' in Vega-Lite.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/types/predicate.md#2025-04-16_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\"param\": \"brush\"}\n```\n\n----------------------------------------\n\nTITLE: Applying Time Unit Transform (JavaScript)\nDESCRIPTION: Demonstrates how to use a time unit transform in the transform array of a Vega-Lite specification. This allows for preprocessing temporal data before visualization.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/transform/timeunit.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Any View Specification\n{\n  ...,\n  \"transform\": [\n    {\"timeUnit\": ..., \"field\": ..., \"as\": ...} // TimeUnit Transform\n     ...\n  ],\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Field Less Than or Equals Predicate with TimeUnit in Vega-Lite JSON\nDESCRIPTION: Illustrates how to create a field less than or equals predicate with a time unit to check if the 'Year' field's value is less than or equal to '2000' in Vega-Lite.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/types/predicate.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\"timeUnit\": \"year\", \"field\": \"Year\", \"lte\": \"2000\"}\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Linear Gradient in Vega-Lite\nDESCRIPTION: Demonstrates how to create a basic linear gradient with three color stops in Vega-Lite. The gradient transitions from red to white to blue using normalized offset values between 0 and 1.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/types/gradient.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"gradient\": \"linear\",\n  \"stops\": [\n    {\"offset\": 0.0, \"color\": \"red\"},\n    {\"offset\": 0.5, \"color\": \"white\"},\n    {\"offset\": 1.0, \"color\": \"blue\"}\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Loess Transform in Vega-Lite View Specification\nDESCRIPTION: This snippet shows how to include a loess transform in a Vega-Lite view specification. The loess transform is added to the 'transform' array within the specification.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/transform/loess.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Any View Specification\n{\n  ...\n  \"transform\": [\n    {\"loess\": ...} // Loess Transform\n     ...\n  ],\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using Sample Transform in Vega-Lite\nDESCRIPTION: This example demonstrates how to use the sample transform to filter a data stream to a random sample of at most 500 data objects. The 'sample' property is set to 500 in the transform definition.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/transform/sample.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"sample\": 500}\n```\n\n----------------------------------------\n\nTITLE: Output Format for Equal-Sized Probability Steps in Vega-Lite\nDESCRIPTION: Demonstrates the output format of the quantile transform when using equal-sized probability steps. The array contains objects with probability and value pairs.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/transform/quantile.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n[{prob: 0.025, value: 0.01}, {prob: 0.075, value: 0.02}, ...{prob: 0.975, value: 0.2}]\n```\n\n----------------------------------------\n\nTITLE: Implementing Impute in Encoding Field Definition in Vega-Lite\nDESCRIPTION: This snippet demonstrates how to use the impute feature within an encoding field definition in Vega-Lite. It shows the structure for including impute in a single view or layer specification.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/transform/impute.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// A Single View or a Layer Specification\n{\n  ...,\n  \"mark/layer\": ...,\n  \"encoding\": {\n    \"x\": {\n      \"field\": ...,\n      \"type\": \"quantitative\",\n      \"impute\": {...},               // Impute\n      ...\n    },\n    \"y\": ...,\n    ...\n  },\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Pivot Transform Configuration\nDESCRIPTION: Configuration object for the pivot transform, specifying the pivot field, grouping field, and value field to aggregate.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/transform/pivot.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"pivot\": \"type\",\n  \"groupby\": [\"country\"],\n  \"value\": \"count\"\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Flatten Transform Structure in Vega-Lite\nDESCRIPTION: Basic structure showing where the flatten transform fits within a Vega-Lite specification. The transform array can contain multiple transforms including the flatten operation.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/transform/flatten.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Any View Specification\n{\n  ...\n  \"transform\": [\n    {\"flatten\": ...} // Flatten Transform\n     ...\n  ],\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a DOM Element for Vega-Lite Visualization in HTML\nDESCRIPTION: This snippet shows how to create a div element in HTML that will be used to attach the Vega-Lite visualization.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/usage/embed.md#2025-04-16_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"vis\"></div>\n```\n\n----------------------------------------\n\nTITLE: Arc Configuration in Vega-Lite Config Object\nDESCRIPTION: Top-level configuration for setting default properties for all arc marks in a visualization.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/mark/arc.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  ...\n  \"config\": {\n    \"arc\": ...,\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Computing Quartile Boundaries with Quantile Transform in Vega-Lite\nDESCRIPTION: Demonstrates how to compute quartile boundaries for a 'measure' field using the quantile transform. The 'probs' parameter specifies the probability points for quartiles.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/transform/quantile.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"quantile\": \"measure\", \"probs\": [0.25, 0.5, 0.75]}\n```\n\n----------------------------------------\n\nTITLE: Input Data Structure for Pivot Transform\nDESCRIPTION: Sample input data showing medal counts by country and type before pivot transformation.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/transform/pivot.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\"country\": \"Norway\", \"type\": \"gold\", \"count\": 14},\n  {\"country\": \"Norway\", \"type\": \"silver\", \"count\": 14},\n  {\"country\": \"Norway\", \"type\": \"bronze\", \"count\": 11},\n  {\"country\": \"Germany\", \"type\": \"gold\", \"count\": 14},\n  {\"country\": \"Germany\", \"type\": \"silver\", \"count\": 10},\n  {\"country\": \"Germany\", \"type\": \"bronze\", \"count\": 7},\n  {\"country\": \"Canada\", \"type\": \"gold\", \"count\": 11},\n  {\"country\": \"Canada\", \"type\": \"silver\", \"count\": 8},\n  {\"country\": \"Canada\", \"type\": \"bronze\", \"count\": 10}\n]\n```\n\n----------------------------------------\n\nTITLE: Using Vega-Embed to Load Data at Runtime\nDESCRIPTION: JavaScript example using Vega-Embed to insert data into a named data source and update the visualization.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/data.md#2025-04-16_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nvegaEmbed('#vis', spec).then((res) =>\n  res.view\n    .insert('myData', [\n      /* some data array */\n    ])\n    .run(),\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Scales in Vega-Lite (JavaScript)\nDESCRIPTION: This snippet shows the structure for configuring scales and ranges in a Vega-Lite specification. It includes placeholders for scale and range configuration options.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/encoding/scale.md#2025-04-16_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// Top-level View Specification\n{\n  ...\n  \"config\": {\n    \"scale\": {\n      ...                       // Scale Config\n    },\n    \"range\": {\n      ...                       // Scale Range Config\n    },\n    ...\n  }\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Binding Multiple Field Projections to Range Sliders\nDESCRIPTION: Example showing how to bind multiple field projections (Cylinders and Year) to customized range slider inputs.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/parameter/bind.md#2025-04-16_snippet_2\n\nLANGUAGE: vega-lite\nCODE:\n```\n<div class=\"vl-example\" data-name=\"selection_bind_cylyr\"></div>\n```\n\n----------------------------------------\n\nTITLE: Pivot Transform Output\nDESCRIPTION: Resulting data structure after applying the pivot transform, showing medal counts as columns.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/transform/pivot.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\"country\": \"Norway\", \"gold\": 14, \"silver\": 14, \"bronze\": 11},\n  {\"country\": \"Germany\", \"gold\": 14, \"silver\": 10, \"bronze\": 7},\n  {\"country\": \"Canada\", \"gold\": 11, \"silver\": 8, \"bronze\": 10}\n]\n```\n\n----------------------------------------\n\nTITLE: Output Data After Flatten Transform\nDESCRIPTION: Resulting data structure after applying the flatten transform, showing how arrays are converted to individual records with corresponding values.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/transform/flatten.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\"key\": \"alpha\", \"foo\": 1, \"bar\": \"A\"},\n  {\"key\": \"alpha\", \"foo\": 2, \"bar\": \"B\"},\n  {\"key\": \"beta\", \"foo\": 3, \"bar\": \"C\"},\n  {\"key\": \"beta\", \"foo\": 4, \"bar\": \"D\"},\n  {\"key\": \"beta\", \"foo\": 5, \"bar\": null}\n]\n```\n\n----------------------------------------\n\nTITLE: Markdown Table of Contents Structure\nDESCRIPTION: Auto-generated table of contents for Vega-Lite documentation using markdown syntax with nested list structure and site.baseurl links\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/_includes/docs_toc.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[//]: # (Auto-generated by scripts/generate-toc)\n- [Overview]({{site.baseurl}}/docs/index.html)\n    - [Table of Contents]({{site.baseurl}}/docs/index.html#toc)\n- [View Specification]({{site.baseurl}}/docs/spec.html)\n    - [Documentation Overview]({{site.baseurl}}/docs/spec.html#documentation-overview)\n    - [Common Properties of Specifications]({{site.baseurl}}/docs/spec.html#common)\n```\n\n----------------------------------------\n\nTITLE: Disabling Tooltips in Mark Definition\nDESCRIPTION: Code example showing how to disable tooltips for a specific single view by setting the tooltip property to null in the mark definition block.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/tooltip.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"mark\": {\"type\": ..., \"tooltip\": null, ...},\n  \"encoding\": ...,\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Date Time Object in Vega-Lite\nDESCRIPTION: This snippet demonstrates how to create a date time definition object in Vega-Lite. It shows an example of specifying a date (Jan 1, 2006) using year, month, and date properties.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/types/datetime.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\"year\": 2006, \"month\": \"jan\", \"date\": 1}\n```\n\n----------------------------------------\n\nTITLE: Installing Vega Libraries via NPM\nDESCRIPTION: This snippet shows the NPM commands to install Vega, Vega-Lite, and Vega-Embed libraries. It's useful for developers who prefer to host the dependencies themselves.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/usage/embed.md#2025-04-16_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm install vega\nnpm install vega-lite\nnpm install vega-embed\n```\n\n----------------------------------------\n\nTITLE: Y-Axis Field Reference in Repeated Charts\nDESCRIPTION: Shows how to reference a repeated field in the y-channel specification of a visualization.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/composition/repeat.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n\"y\": {\n  \"field\": {\"repeat\": \"repeat\"}\n  ...\n},\n```\n\n----------------------------------------\n\nTITLE: Applying Step to Offset Channel in Grouped Bar Chart\nDESCRIPTION: This Vega-Lite example demonstrates how the step is applied to the offset step by default for a discrete x-field with nested offset in a grouped bar chart.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/view/size.md#2025-04-16_snippet_5\n\nLANGUAGE: vega-lite\nCODE:\n```\n<span class=\"vl-example\" data-name=\"bar_grouped_step_for_offset\"></span>\n```\n\n----------------------------------------\n\nTITLE: Defining Field Equal Predicate in Vega-Lite JSON\nDESCRIPTION: Demonstrates how to create a field equal predicate to check if the 'car_color' field's value is equal to 'red' in Vega-Lite.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/types/predicate.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\"field\": \"car_color\", \"equal\": \"red\"}\n```\n\n----------------------------------------\n\nTITLE: Sample Data JSON Array\nDESCRIPTION: Example of how to structure tabular data as a JSON array for use with Vega-Lite, where each row is represented as an object with properties.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/tutorials/getting_started.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\"a\": \"C\", \"b\": 2},\n  {\"a\": \"C\", \"b\": 7},\n  {\"a\": \"C\", \"b\": 4},\n  {\"a\": \"D\", \"b\": 1},\n  {\"a\": \"D\", \"b\": 2},\n  {\"a\": \"D\", \"b\": 6},\n  {\"a\": \"E\", \"b\": 8},\n  {\"a\": \"E\", \"b\": 4},\n  {\"a\": \"E\", \"b\": 7}\n]\n```\n\n----------------------------------------\n\nTITLE: Citing Vega-Lite in BibTeX Format\nDESCRIPTION: This BibTeX entry provides the correct citation format for referencing the Vega-Lite project in academic papers. It includes details about the authors, title, journal, and DOI.\nSOURCE: https://github.com/vega/vega-lite/blob/main/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bibtex\nCODE:\n```\n@article{2017-vega-lite,\n  doi = {10.1109/tvcg.2016.2599030},\n  year = {2017},\n  author = {Arvind Satyanarayan and Dominik Moritz and Kanit Wongsuphasawat and Jeffrey Heer},\n  title = {Vega-Lite: A Grammar of Interactive Graphics},\n  journal = {{IEEE} Transactions on Visualization \\& Computer Graphics (Proc. InfoVis)},\n  url = {http://idl.cs.washington.edu/papers/vega-lite},\n}\n```\n\n----------------------------------------\n\nTITLE: Wrapped Facet Using Facet Encoding in Vega-Lite\nDESCRIPTION: Example of creating a wrapped facet plot using the facet encoding channel.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/composition/facet.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n<span class=\"vl-example\" data-name=\"trellis_barley\"></span>\n```\n\n----------------------------------------\n\nTITLE: Defining Field Greater Than Predicate for String Comparison in Vega-Lite JSON\nDESCRIPTION: Demonstrates how to create a field greater than predicate for string comparison to check if the 'state' field's value is greater than 'Arizona' in Vega-Lite.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/types/predicate.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\"field\": \"state\", \"gt\": \"Arizona\"}\n```\n\n----------------------------------------\n\nTITLE: Repository Setup Commands\nDESCRIPTION: Commands to clone the Vega-Lite repository and install npm dependencies.\nSOURCE: https://github.com/vega/vega-lite/blob/main/CONTRIBUTING.md#2025-04-16_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/vega/vega-lite.git\ncd vega-lite\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Actions Workflow in YAML\nDESCRIPTION: YAML configuration for a GitHub Actions workflow to handle the first interaction with new contributors. It sets up the workflow triggers and steps.\nSOURCE: https://github.com/vega/vega-lite/blob/main/CHANGELOG.md#2025-04-16_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nfix: first interaction workflow yml\n```\n\n----------------------------------------\n\nTITLE: Basic Vega-Lite Data Specification\nDESCRIPTION: Shows how to include inline data in a Vega-Lite specification using the data.values property.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/tutorials/getting_started.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"values\": [\n      {\"a\": \"C\", \"b\": 2},\n      {\"a\": \"C\", \"b\": 7},\n      {\"a\": \"C\", \"b\": 4},\n      {\"a\": \"D\", \"b\": 1},\n      {\"a\": \"D\", \"b\": 2},\n      {\"a\": \"D\", \"b\": 6},\n      {\"a\": \"E\", \"b\": 8},\n      {\"a\": \"E\", \"b\": 4},\n      {\"a\": \"E\", \"b\": 7}\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Scatter Plot with Color and Shape Encoding in Vega-Lite\nDESCRIPTION: This example demonstrates how to create a scatter plot in Vega-Lite with both color and shape encodings. It uses the 'point_color_with_shape' data and automatically applies ordinal scales for color and shape based on the 'Origin' field.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/encoding/scale.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n<div class=\"vl-example\" data-name=\"point_color_with_shape\"></div>\n```\n\n----------------------------------------\n\nTITLE: Ruby Installation Command\nDESCRIPTION: Command to install Ruby using Homebrew on macOS for website development.\nSOURCE: https://github.com/vega/vega-lite/blob/main/CONTRIBUTING.md#2025-04-16_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nbrew install ruby\n```\n\n----------------------------------------\n\nTITLE: Jekyll Page Front Matter Configuration\nDESCRIPTION: YAML front matter configuration for the Jekyll page, setting the layout, menu item, title and permalink.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/examples/index.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: page\nmenu: examples\ntitle: Example Gallery\npermalink: /examples/\n---\n```\n\n----------------------------------------\n\nTITLE: Sample Dataset for Invalid Data Visualization in JSON\nDESCRIPTION: This JSON snippet provides a sample dataset used to demonstrate various invalid data handling modes in Vega-Lite. It includes null values and a range of numeric values for two fields 'a' and 'b'.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/invaliddata.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\"a\": null, \"b\": 100},\n  {\"a\": -10, \"b\": null},\n  {\"a\": -5, \"b\": -25},\n  {\"a\": -1, \"b\": -20},\n  {\"a\": 0, \"b\": null},\n  {\"a\": 1, \"b\": 30},\n  {\"a\": 5, \"b\": 40},\n  {\"a\": 10, \"b\": null}\n]\n```\n\n----------------------------------------\n\nTITLE: Creating a Bar Chart with Fixed Width in Vega-Lite\nDESCRIPTION: This example demonstrates how to create a bar chart with a fixed width in Vega-Lite. It customizes the step size of the band scale for the x-axis by setting the 'width' property of the view.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/encoding/scale.md#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n<span class=\"vl-example\" data-name=\"bar_size_fit\"></span>\n```\n\n----------------------------------------\n\nTITLE: Jekyll Liquid Template for Example Gallery\nDESCRIPTION: Liquid template code that generates the example gallery by iterating through site data and rendering previews for each visualization example.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/examples/index.md#2025-04-16_snippet_1\n\nLANGUAGE: liquid\nCODE:\n```\n{% for group in site.data.examples %}\n\n## {{ group[0] }}\n\n{% for subgroup in group[1] %}\n\n{% if subgroup[0] != \"\" %}\n\n### {{ subgroup[0] }}\n\n{% endif %}\n\n<span class=\"gallery\">{% for spec in subgroup[1] %}{% include preview.html spec=spec.name title=spec.title style=spec.style png=spec.png %}{% endfor %}</span>\n\n{% endfor %}\n\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Loading Vega Libraries via CDN in HTML\nDESCRIPTION: This snippet shows how to include Vega, Vega-Lite, and Vega-Embed libraries using CDN links in an HTML file. It demonstrates loading specific versions of the libraries.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/usage/embed.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://cdn.jsdelivr.net/npm/vega@{{ site.data.versions.vega }}\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/vega-lite@{{ site.data.versions.vega-lite }}\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/vega-embed@{{ site.data.versions.vega-embed }}\"></script>\n```\n\n----------------------------------------\n\nTITLE: Specifying Fixed Width and Height in Vega-Lite Bar Chart\nDESCRIPTION: This example demonstrates how to set a fixed height and width per discrete step for a bar chart in Vega-Lite. The chart has a 200px height and 20px width per x-field's discrete step.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/view/size.md#2025-04-16_snippet_0\n\nLANGUAGE: vega-lite\nCODE:\n```\n<span class=\"vl-example\" data-name=\"bar_size_default\"></span>\n```\n\n----------------------------------------\n\nTITLE: Custom Logger Implementation Example\nDESCRIPTION: Example of using a custom logger with the compile function to redirect log messages from the default console output.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/usage/compile.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar vgSpec = vegaLite.compile(vlSpec, {logger: logger}).spec;\n```\n\n----------------------------------------\n\nTITLE: Creating Responsive Width Bar Chart in Vega-Lite\nDESCRIPTION: This snippet demonstrates how to create a bar chart with responsive width in Vega-Lite. The width is set to \"container\" to match the surrounding container's width, while the height remains fixed.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/view/size.md#2025-04-16_snippet_3\n\nLANGUAGE: vega-lite\nCODE:\n```\n<span class=\"vl-example vl-example-responsive\" data-name=\"bar_size_responsive\"></span>\n```\n\n----------------------------------------\n\nTITLE: Loading Non-Minified Vega, Vega-Lite, and Vega-Embed Scripts in HTML\nDESCRIPTION: This HTML snippet demonstrates how to load non-minified versions of Vega, Vega-Lite, and Vega-Embed scripts from the jsDelivr CDN. This is useful for debugging purposes as it allows easier inspection of the source code.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/usage/debugging.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://cdn.jsdelivr.net/npm/vega@{{ site.data.versions.vega }}/build/vega.js\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/vega-lite@{{ site.data.versions.vega-lite }}/build/vega-lite.js\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/vega-embed@{{ site.data.versions.vega-embed }}/build/vega-embed.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Independent Scales in Faceted Plot in Vega-Lite\nDESCRIPTION: Example of overriding default shared scales to use independent scales in a faceted plot.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/composition/facet.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n<span class=\"vl-example\" data-name=\"trellis_barley_independent\"></span>\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration for Vega-Lite Documentation\nDESCRIPTION: YAML configuration block defining the page layout, permalink, title and a list of visualization specification examples that are referenced throughout the documentation.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/index.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: home\npermalink: /\ntitle: A High-Level Grammar of Interactive Graphics\n\nimages:\n  - spec: stacked_area_stream\n  - spec: selection_translate_scatterplot_drag\n  - spec: layer_point_errorbar_stdev\n  - spec: tick_strip\n  - spec: line_overlay_stroked\n  - spec: trellis_barley\n  - spec: geo_choropleth\n  - spec: circle_github_punchcard\n  - spec: geo_layer_line_london\n  - spec: stacked_bar_weather\n  - spec: layer_line_co2_concentration\n  - spec: circle_natural_disasters\n  - spec: trellis_area\n  - spec: layer_line_errorband_ci\n  - spec: line_slope\n  - spec: layer_ranged_dot\n  - spec: layer_bar_annotations\n  - spec: rect_binned_heatmap\n  - spec: interactive_splom\n  - spec: interactive_layered_crossfilter\n  - spec: interactive_overview_detail\n---\n```\n\n----------------------------------------\n\nTITLE: Facet Configuration in Vega-Lite\nDESCRIPTION: Structure for specifying facet configuration options in the top-level view specification.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/composition/facet.md#2025-04-16_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  ...,\n  \"config\": { // Configuration Object\n\n    \"facet\": { // - Facet Configuration\n      \"spacing\": ...,\n      \"columns\": ...,\n    },\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents in Markdown\nDESCRIPTION: This snippet demonstrates how to create a table of contents in Markdown using the 'TOC' directive. It's wrapped in HTML comments to be ignored by the Prettier formatter.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/types.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<!--prettier-ignore-start-->\n\n## Documentation Overview\n{:.no_toc}\n\n- TOC\n{:toc}\n\n<!--prettier-ignore-end-->\n```\n\n----------------------------------------\n\nTITLE: Box Plot Configuration Object in Vega-Lite\nDESCRIPTION: Configuration object for customizing default properties of box plot marks, including size, extent, box, median, whisker, and outlier styles.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/mark/boxplot.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"boxplot\": {\n    \"size\": ...,\n    \"extent\": ...,\n    \"box\": ...,\n    \"median\": ...,\n    \"whisker\": ...,\n    \"outliers\": ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Error Bar Mark Properties in Vega-Lite\nDESCRIPTION: Configuration object for error bar mark properties in Vega-Lite. Sets default properties for all errorbar marks including extent type, rule style, and tick appearance.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/mark/errorbar.md#2025-04-16_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n{\n  \"errorbar\": {\n    \"extent\": ...,\n    \"rule\": ...,\n    \"ticks\": ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Tooltips in Encoding\nDESCRIPTION: Code example showing how to disable tooltips by setting the tooltip encoding to null.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/tooltip.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"mark\": ...,\n  \"encoding\": {\n    \"tooltip\": null\n  },\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Search Form Implementation\nDESCRIPTION: A simple HTML form that enables documentation search functionality, posting to Google search with a site-specific query parameter.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/docs/overview.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<form action=\"https://google.com/search\" method=\"get\" class=\"search\">\n  <input type=\"hidden\" name=\"q\" value=\"site:https://vega.github.io/vega-lite/docs/\">\n  <input class=\"search\" type=\"text\" name=\"q\" results=\"0\" placeholder=\"Search Docs\">\n  <button type=\"submit\">\n    Search\n  </button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Custom Field Title Formatter\nDESCRIPTION: Example of implementing a custom field title formatter to control how axis and legend titles are generated for field definitions.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/usage/compile.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst vgSpec = vegaLite.compile(vlSpec, {\n  fieldTitle: function (fieldDef, config) {\n    const fn = fieldDef.aggregate || fieldDef.timeUnit || (fieldDef.bin && 'bin');\n    if (fn) {\n      return `${fn.toUpperCase()}(${fieldDef.field})`;\n    } else {\n      return fieldDef.field;\n    }\n  },\n}).spec;\n```\n\n----------------------------------------\n\nTITLE: Bundler Installation Commands\nDESCRIPTION: Commands to install Bundler for Ruby dependency management, with options for specific version installation.\nSOURCE: https://github.com/vega/vega-lite/blob/main/CONTRIBUTING.md#2025-04-16_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ngem install bundler\n\n# Or to install specific version:\ngem install bundler -v \"$(grep -A 1 \"BUNDLED WITH\" Gemfile.lock | tail -n 1)\"\n```\n\n----------------------------------------\n\nTITLE: Embedding PDF Figure in LaTeX Document\nDESCRIPTION: LaTeX code to include a cropped PDF figure in a document, centered within a figure environment with a caption and label for referencing.\nSOURCE: https://github.com/vega/vega-lite/blob/main/site/tutorials/figures.md#2025-04-16_snippet_0\n\nLANGUAGE: latex\nCODE:\n```\n\\begin{figure}\n  \\centering\n  \\includegraphics[width=\\columnwidth]{benchmark}\n  \\caption{\\label{fig:benchmark} A title that describes the figure.}\n\\end{figure}\n```\n\n----------------------------------------\n\nTITLE: Basic Directory Structure\nDESCRIPTION: Main project directory organization showing key folders and their purposes\nSOURCE: https://github.com/vega/vega-lite/blob/main/CONTRIBUTING.md#2025-04-16_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\nbin/ - Scripts for command line usage\\nsite/ - Website and documentation\\nexamples/ - Example specifications\\nscripts/ - NPM command scripts\\nsrc/ - Main source code\\ntest/ - Unit testing code\\ntest-runtime/ - Runtime tests\\ntypings/ - TypeScript declarations\n```\n\n----------------------------------------\n\nTITLE: Installing Node.js via Homebrew\nDESCRIPTION: Command to install Node.js using Homebrew package manager on macOS.\nSOURCE: https://github.com/vega/vega-lite/blob/main/CONTRIBUTING.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nbrew install node\n```\n\n----------------------------------------\n\nTITLE: Jekyll Dependencies Installation\nDESCRIPTION: Command to install Jekyll and its dependencies using Bundler.\nSOURCE: https://github.com/vega/vega-lite/blob/main/CONTRIBUTING.md#2025-04-16_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\npushd site && bundle install && popd\n```"
  }
]