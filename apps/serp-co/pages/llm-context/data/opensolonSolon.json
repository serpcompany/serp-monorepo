[
  {
    "owner": "opensolon",
    "repo": "solon",
    "content": "TITLE: Configuring Solon Cloud Gateway\nDESCRIPTION: This YAML configuration demonstrates how to configure a Solon Cloud Gateway. It includes settings for the HTTP client, service discovery (with exclusions), route definitions (target, predicates, and filters), and timeout configurations.\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/solon-cloud/solon-cloud-gateway/README.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsolon.cloud.gateway:\n  httpClient: #?可选\n    connectTimeout: 10 #?可选\n    requestTimeout: 10 #?可选\n    responseTimeout: 1800 #?可选\n  discover:\n    enabled: true\n    excludedServices:\n      - \"user-service\"\n  routes: #!必选\n    - target: \"http://localhost:8080\" # 或 \"lb://user-service\"\n      predicates: #?可选\n        - \"Path=/demo/**\"\n      filters: #?可选\n        - \"StripPrefix=1\"\n      timeout: #?可选\n        connectTimeout: 10 #?可选\n        requestTimeout: 10 #?可选\n        responseTimeout: 1800 #?可选\n```\n\n----------------------------------------\n\nTITLE: Fetching Related Objects with Includes (Java)\nDESCRIPTION: This snippet demonstrates how to fetch related `Salary` objects for an `Employee` using the `includes` method in Solon SqLink. It shows how to fetch all salaries, limit the number of salaries fetched, and filter salaries based on a condition. This retrieves the employee object and the associated salaries in one query.\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/solon-data/solon-data-sqlink/README.md#_snippet_18\n\nLANGUAGE: java\nCODE:\n```\nEmployee first = sqLink.query(Employee.class)\n        .includes(e -> e.getSalaries())\n        .first();\n\n```\n\nLANGUAGE: java\nCODE:\n```\nEmployee first = sqLink.query(Employee.class)\n        .includes(e -> e.getSalaries(), then -> then.limit(5))\n        .first();\n```\n\nLANGUAGE: java\nCODE:\n```\nEmployee first = sqLink.query(Employee.class)\n                .includes(e -> e.getSalaries(), then -> then.where(e -> e.getSalary() > 80000))\n                .first();\n```\n\n----------------------------------------\n\nTITLE: Querying Data with Solon SqLink (Java)\nDESCRIPTION: This snippet showcases how to query data from the database using Solon SqLink. It includes examples of fetching single records, multiple records based on various criteria (exact match, partial match), and projecting the results into different data structures (anonymous objects, VO). The `SqLink.query()` method starts the query construction, `where()` adds conditions, `first()` retrieves a single result, and `toList()` returns a list of results. `select()` allows for projecting data to different result types.\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/solon-data/solon-data-sqlink/README.md#_snippet_15\n\nLANGUAGE: java\nCODE:\n```\nimport demo.sqlink.model.User;\nimport demo.sqlink.vo.UserVo;\nimport org.noear.solon.annotation.Component;\nimport org.noear.solon.annotation.Inject;\nimport org.noear.solon.data.sqlink.SqLink;\nimport org.noear.solon.data.sqlink.api.Result;\nimport org.noear.solon.data.sqlink.core.sqlExt.SqlFunctions;\n\nimport java.util.List;\n\n@Component\npublic class SelectDemoService {\n    @Inject\n    SqLink sqLink;\n\n    // 根据id查询一位用户\n    public User findById(long id) {\n        return sqLink.query(User.class)\n                .where(user -> user.getId() == id)\n                .first();\n    }\n\n    // 根据名称和email查询一位用户\n    public User findByNameAndEmail(String name, String email) {\n        return sqLink.query(User.class)\n                .where(u -> u.getUsername() == name && u.getEmail() == email)\n                .first();\n    }\n\n    // 根据名称查询模糊匹配用户\n    public List<User> findByName(String name) {\n        return sqLink.query(User.class)\n                // username LIKE '{name}%'\n                .where(u -> u.getUsername().startsWith(name))\n                .toList();\n    }\n\n    // 根据名称查询模糊匹配用户, 并且以匿名对象形式返回我们感兴趣的数据\n    public List<? extends Result> findResultByName(String name) {\n        return sqLink.query(User.class)\n                // username LIKE '{name}%'\n                .where(u -> u.getUsername().startsWith(name))\n                .select(u -> new Result() {\n                    long id = u.getId();\n                    String email = u.getEmail();\n                }).toList();\n    }\n\n    // 或者使用Vo返回\n    public List<UserVo> findUserVoByName(String name) {\n        return sqLink.query(User.class)\n                .where(u -> u.getUsername().startsWith(name))\n                .select(UserVo.class).toList();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting Ciphertext Configuration with @VaultInject\nDESCRIPTION: This Java code demonstrates using the `@VaultInject` annotation to inject ciphertext configurations into a Solon bean. It allows the framework to automatically decrypt the value of `test.db1` and inject it into the `HikariDataSource`.  This assumes HikariCP is available in the classpath.\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/solon-security/solon-security-vault/README.md#_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n@Configuration\npublic class TestConfig {\n    @Bean(\"db2\")\n    private DataSource db2(@VaultInject(\"${test.db1}\") HikariDataSource ds){\n        return ds;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Web Service Client (Container)\nDESCRIPTION: This Java snippet demonstrates creating a web service client using container injection with `@WebServiceReference`. It defines a `DemoController` class with a `HelloService` field annotated with `@WebServiceReference`. The Solon container injects the web service client instance. It also defines the `HelloService` interface.\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/solon-web/solon-web-webservices/README.md#_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n//定义测试控制器\n@Controller\npublic static class DemoController {\n    @WebServiceReference(\"http://localhost:8080/ws/HelloService\")\n    private HelloService helloService;\n\n    @Mapping(\"/test\")\n    public String test() {\n        return helloService.hello(\"noear\");\n    }\n}\n\n//配置 WebService 接口\n@WebService(serviceName = \"HelloService\", targetNamespace = \"http://demo.solon.io\")\npublic interface HelloService {\n    @WebMethod\n    String hello(String name);\n}\n\n//启动 Solon\npublic class ClientTest {\n    public static void main(String[] args) {\n        Solon.start(ClientTest2.class, args);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SSL Certificate in app.yml (YAML)\nDESCRIPTION: This snippet demonstrates how to configure the SSL certificate using the application configuration file (app.yml). The `keyStore` property specifies the path to the keystore file (either a file system path or a classpath resource), and the `keyPassword` property specifies the password for the keystore.\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/solon-boot/solon-boot-undertow/README.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nserver.ssl:\n  keyStore: \"/demo.jks\" #或者应用内资源文件 \"classpath:demo.jks\"\n  keyPassword: \"demo\"\n```\n\n----------------------------------------\n\nTITLE: Defining a User Entity with Solon SqLink Annotations (Java)\nDESCRIPTION: This snippet defines a `User` entity class using Solon SqLink annotations. It specifies the table name, primary key, and other column mappings.  The `InsertDefaultValue` annotation configures the 'id' field to be auto-generated by the database on insertion.\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/solon-data/solon-data-sqlink/README.md#_snippet_11\n\nLANGUAGE: java\nCODE:\n```\nimport org.noear.solon.data.sqlink.annotation.*;\n\n@Table(\"user\")\npublic class User {\n    // 主键\n    @Column(primaryKey = true, notNull = true)\n    // 数据库提供，这里是自增\n    @InsertDefaultValue(strategy = GenerateStrategy.DataBase)\n    private long id;\n    private String username;\n    private String password;\n    private String email;\n}\n```\n\n----------------------------------------\n\nTITLE: UserService DynamicDataSource Usage in Java\nDESCRIPTION: This Java snippet demonstrates how to use the DynamicDataSource in a UserService class.  It uses @Db(\"db_user\") to inject the data source. The @DynamicDs annotation is used to specify which data source to use for different methods: the default data source ('db_user'), a specific data source ('db_user_1'), or a data source set programmatically using DynamicDsHolder ('db_user_2').\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/solon-data/solon-data-dynamicds/README.md#_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n@ProxyComponent\npublic class UserService{\n    @Db(\"db_user\")\n    UserMapper userMapper;\n    \n    @DynamicDs //使用 db_user 动态源内的 默认源\n    public void addUser(){\n        userMapper.inserUser();\n    }\n    \n    @DynamicDs(\"db_user_1\") //使用 db_user 动态源内的 db_user_1 源\n    public void getUserList(){\n        userMapper.selectUserList();\n    }\n    \n    public void getUserList2(){\n        DynamicDsHolder.set(\"db_user_2\"); //使用 db_user 动态源内的 db_user_2 源\n        userMapper.selectUserList();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Caffeine Cache Configuration\nDESCRIPTION: This YAML snippet shows how to configure a Caffeine cache named 'solon.cache1'. It defines the driver type, key header, and default expiration time in seconds.  The keyHeader defaults to '${solon.app.name}' if not specified, and defSeconds defaults to 30 if not provided.\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/solon-data/solon-cache-caffeine/README.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n#完整配置示例\nsolon.cache1:\n  driverType: \"caffeine\"\n  keyHeader: \"demo\" #默认为 ${solon.app.name} ，可不配置\n  defSeconds: 30 #默认为 30，可不配置\n```\n\n----------------------------------------\n\nTITLE: Configuring Solon Session with Redis\nDESCRIPTION: This YAML snippet configures Solon's session management, utilizing Redis for state storage.  It sets the session timeout to 7200 seconds, defines a shared domain for cross-system session sharing, and configures the Redis connection details, including server address, password, database, idle connection timeout, and connection timeout. Note that `db` setting is not valid in cluster mode.\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/solon-web/solon-sessionstate-redisson/README.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nserver.session:\n  timeout: 7200  #超时配置。单位秒（可不配，默认：7200）\n  state.domain: \"solon.noear.org\" #可共享域配置（可不配，默认当前服务域名；多系统共享时要配置）\n  state.redis:\n    server: \"redis.io:6379\" #redis 连接地址\n    password: 1234 #redis 连接密码\n    db: 31 #如果是集群模式，db 无效\n    idleConnectionTimeout: 10000\n    connectTimeout: 10000\n```\n\n----------------------------------------\n\nTITLE: Generating JWT Secret Key with Java\nDESCRIPTION: This Java code snippet demonstrates how to generate a secret key using the `JwtUtils.createKey()` method for use in JWT-based session management. It uses JUnit's `@Test` annotation to mark the `test()` method as a test case.\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/solon-web/solon-sessionstate-jwt/README.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class JwtTest {\n    @Test\n    public void test(){\n        System.out.println(JwtUtils.createKey());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Solon Cloud with Consul in YAML\nDESCRIPTION: This YAML snippet demonstrates a basic configuration for Solon Cloud using Consul as the service discovery and configuration management backend.  It sets the application name and group, along with the Consul server address.\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/solon-cloud/solon-cloud/README.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsolon:\n  app:\n    name: \"solon-consul-test\"\n    group: \"test\"\n\nsolon.cloud.consul:\n  server: \"localhost\"\n```\n\n----------------------------------------\n\nTITLE: Solon Configuration for SDL\nDESCRIPTION: This Java configuration class sets up the beans required for Single Device Login (SDL). It defines beans for `SdlStorage` (using Redis or local storage) and `LoginedChecker` to integrate with Solon's validation.\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/solon-web/solon-web-sdl/README.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@Configuration\npublic class Config {\n    @Bean\n    public SdlStorage ssoStorage(@Inject(\"${demo.redis}\") RedisClient redisClient) {\n        //或者使用 SdlStorageOfLocal 作临时测试\n        return new SdlStorageOfRedis(redisClient);\n    }\n\n    @Bean\n    public LoginedChecker ssoLoginedChecker() {\n        return new SdlLoginedChecker();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Caching to Controller Method\nDESCRIPTION: This Java code demonstrates how to apply caching to a controller method using the @Cache annotation. The hello method in the DemoController will be cached.  Subsequent calls with the same name parameter will retrieve the result from the cache instead of executing the method. Requires Solon framework and associated caching libraries.\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/solon-data/solon-cache-caffeine/README.md#_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n//应用\n@Controller\npublic class DemoController {\n    @Cache\n    public String hello(String name) {\n        return String.format(\"Hello {0}!\", name);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Default Logging Configuration with Solon\nDESCRIPTION: This snippet demonstrates the default logging configuration for a Solon application using YAML. It sets the application name and configures console and file appenders with default levels and patterns. It also shows an example of logger-level configurations.\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/solon-logging/solon-logging-logback/README.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsolon.app:\n  name: demoapp\n\n# 以下为默认值，可以都不加，或者想改哪行加哪行(支持\"云端配置服务\"进行配置，支持写到\"云端日志服务\")\nsolon.logging.appender:\n  console:\n    level: TRACE\n    pattern: \"%highlight(%-5level %d{yyyy-MM-dd HH:mm:ss.SSS} [-%t][*%X{traceId}]%tags[%logger{20}]:) %n%msg%n\"\n  file:\n    name: \"logs/${solon.app.name}\"\n    extension: \".log\"\n    level: INFO\n    pattern: \"%-5level %d{yyyy-MM-dd HH:mm:ss.SSS} [-%t][*%X{traceId}]%tags[%logger{20}]: %n%msg%n\"\n  cloud:\n    level: INFO\n\n# 记录器级别的配置示例\nsolon.logging.logger:\n  \"root\": #默认记录器配置\n    level: INFO\n  \"features\":\n    level: DEBUG\n  \"org.jetty.demo\":\n    level: WARN\n```\n\n----------------------------------------\n\nTITLE: Generating Ciphertext with GuardUtils\nDESCRIPTION: This Java code demonstrates using `GuardUtils.encrypt()` to generate ciphertexts from plain text passwords. It uses Solon's `GuardUtils` utility which depends on Solon's core library to encrypt sensitive information before storing it in configuration files. The generated ciphertext is then printed to the console.\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/solon-security/solon-security-vault/README.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class TestApp {\n    public static void main(String[] args) throws Exception{\n        Solon.start(TestApp.class, args);\n\n        //打印生成的密文\n        System.out.println(GuardUtils.encrypt(\"root\"));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Solon Session with YAML\nDESCRIPTION: This YAML snippet configures the Solon session, setting the timeout, JWT state management properties such as variable name, secret key, token prefix, and allowance for expiration and auto-issuance. It also dictates whether to use the header for token transmission.\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/solon-web/solon-sessionstate-jwt/README.md#_snippet_0\n\nLANGUAGE: yml\nCODE:\n```\nserver.session:\n  timeout: 7200 #单位秒；（可不配，默认：7200）\n  state:\n    jwt:\n      name: TOKEN #变量名；（可不配，默认：TOKEN）\n      secret: \"E3F9N2kRDQf55pnJPnFoo5+ylKmZQ7AXmWeOVPKbEd8=\" #密钥（使用 JwtUtils.createKey() 生成）；（可不配，默认：xxx）\n      prefix: Bearer #令牌前缀（可不配，默认：空）\n      allowExpire: true #充许超时；（可不配，默认：true）；false，则token一直有效\n      allowAutoIssue: true #充许自动输出；（可不配，默认：true）；flase，则不向header 或 cookie 设置值（由用户手动控制）\n      allowUseHeader: false #充许使用Header传递；（可不配，默认：使用 Cookie 传递）；true，则使用 header 传递\n```\n\n----------------------------------------\n\nTITLE: Configuring Jackson JSON Serialization in Solon\nDESCRIPTION: This YAML snippet configures Jackson JSON serialization within the Solon framework. It sets the date format to 'yyyy-MM-dd HH:mm:ss', configures the timezone to 'GMT+8', disables date-to-milliseconds conversion, converts long types to strings, bool types to strings, and manages null value outputs by setting flags for string, boolean, number, and array handling. nullAsWriteable controls whether null values are included in the output.\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/solon-serialization/solon-serialization-jackson-xml/README.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsolon.serialization.json:\n  dateAsFormat: 'yyyy-MM-dd HH:mm:ss' #配置日期格式（默认输出为时间戳）\n  dateAsTimeZone: 'GMT+8' #配置时区\n  dateAsTicks: false #将date转为毫秒数（和 dateAsFormat 二选一）\n  longAsString: true #将long型转为字符串输出 （默认为false）\n  boolAsInt: false   #将bool型转为字符串输出 （默认为false）\n  nullStringAsEmpty: false\n  nullBoolAsFalse: false\n  nullNumberAsZero: false\n  nullArrayAsEmpty: false\n  nullAsWriteable: false #输出所有null值\n```\n\n----------------------------------------\n\nTITLE: Defining Individual Metrics Meter Endpoint\nDESCRIPTION: Defines the structure for the `/metrics/meter/{meterName}` endpoint, which returns details for a specific meter.  The response includes the meter's name, description, base unit, measurements, and tags, providing comprehensive information about the meter's configuration and current state.\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/solon-cloud/solon-cloud-metrics/API.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"name\": \"name1\",\n  \"description\": \"\",\n  \"baseUnit\": \"\",\n  \"measurements\": {},\n  \"tags\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Solon Logging Configuration\nDESCRIPTION: This YAML snippet configures the Solon logging system. It defines three appenders: console, cloud, and file, each with its own level and enable status. It also configures log levels for specific loggers (org.apache.zookeeper.* and org.eclipse.jetty.*) to WARN.\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/solon-logging/solon-logging/README.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsolon.logging.appender:\n  console:\n    level: TRACE\n    enable: true\n  cloud:\n    level: INFO\n    enable: true\n  file:\n    class: org.xxx.xxx.LogFileAppender\n    level: INFO\n\nsolon.logging.logger:\n  \"org.apache.zookeeper.*\":\n    level: \"WARN\"\n  \"org.eclipse.jetty.*\":\n    level: \"WARN\"\n```\n\n----------------------------------------\n\nTITLE: Login Controller Example in Solon\nDESCRIPTION: This Java code demonstrates a login controller that uses the `SdlUtil` to establish a single device login session upon successful authentication.  It calls `SdlUtil.login` with a user ID to create the SDL token.\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/solon-web/solon-web-sdl/README.md#_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n//登录示意代码\n@Controller\npublic class LoginController {\n    @Mapping(\"/login\")\n    public void login(){\n        if (loginDo()) {\n            SdlUtil.login(1001);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Data Sources in Solon (YAML)\nDESCRIPTION: This YAML snippet shows how to configure multiple data sources (db1 and db2) in a Solon application using HikariCP. It specifies the driver class name, JDBC URL, username, and password for each data source.\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/solon-data/solon-data-sqlink/README.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsolon.dataSources:\n  db1!:\n    class: \"com.zaxxer.hikari.HikariDataSource\"\n    jdbcUrl: jdbc:mysql://localhost:3306/rock?useUnicode=true&characterEncoding=utf8&autoReconnect=true&rewriteBatchedStatements=true\n    driverClassName: com.mysql.cj.jdbc.Driver\n    username: root\n    password: 123456\n  db2:\n    class: \"com.zaxxer.hikari.HikariDataSource\"\n    jdbcUrl: jdbc:mysql://localhost:3306/rock?useUnicode=true&characterEncoding=utf8&autoReconnect=true&rewriteBatchedStatements=true\n    driverClassName: com.mysql.cj.jdbc.Driver\n    username: root\n    password: 123456\n```\n\n----------------------------------------\n\nTITLE: Configuring Solon Gradle Plugin in Groovy\nDESCRIPTION: This snippet demonstrates how to configure the Solon Gradle plugin in a `build.gradle` file using Groovy DSL. It includes setting up the classpath dependency, applying the plugin, configuring Java compilation options, and specifying the main class for the application. The plugin automatically adds UTF-8 encoding and the '-parameters' compiler argument, but they can be explicitly set.\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/solon-tool/solon-gradle-plugin/README.md#_snippet_0\n\nLANGUAGE: Groovy\nCODE:\n```\nbuildscript {\n    repositories {\n        mavenLocal()\n        mavenCentral()\n    }\n\n    dependencies {\n        classpath 'org.noear:solon-gradle-plugin:x.y.z'\n    }\n}\n\n\n// 使用\napply plugin: 'org.noear.solon'\n\n\ncompileJava {\n    // 这两个配置可以不添加了，插件中会默认自动添加\n    options.encoding = \"UTF-8\"\n    options.compilerArgs << \"-parameters\"\n}\n\n// 配置启动文件名\nsolon {\n    mainClass = \"com.example.demo.App\"\n}\n\n// 也可以针对 jar包和 war包指定不同的 mainClass\n\nsolonJar{\n    mainClass = \"com.example.demo.App\"\n}\n\n// 使用 solonWar 需要添加 war 插件\nsolonWar{\n    mainClass = \"com.example.demo.App\"\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining an Employee Entity with Navigation Properties (Java)\nDESCRIPTION: This snippet defines an `Employee` entity with a navigation property to `Salary` using Solon SqLink. The `@Navigate` annotation specifies a one-to-many relationship between `Employee` and `Salary`, enabling object graph retrieval. It maps the employee's 'number' to the salary's 'empNumber'.\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/solon-data/solon-data-sqlink/README.md#_snippet_16\n\nLANGUAGE: java\nCODE:\n```\n@Data\n@Table(\"employees\")\npublic class Employee {\n    // 员工编号\n    @Column(value = \"emp_no\", primaryKey = true)\n    private int number;\n    // 出生日期\n    @Column(\"birth_date\")\n    private LocalDate birthDay;\n    @Column(\"first_name\")\n    private String firstName;\n    @Column(\"last_name\")\n    private String lastName;\n    // 性别\n    private Gender gender;\n    // 入职日期\n    @Column(\"hire_date\")\n    private LocalDate hireDay;\n    // 与工资的关系的配置（一对多，员工一，工资多）（员工的number字段对应到工资的empNumber字段）\n    @Navigate(value = RelationType.OneToMany, self = \"number\", target = \"empNumber\")\n    private List<Salary> salaries;\n}\n```\n\n----------------------------------------\n\nTITLE: Solon Cache Configuration using YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure a Solon cache instance, specifying the driver type (Redis), key header, default expiration time, server address, database, password, idle connection timeout, and connect timeout.  The example showcases both a complete and a simplified configuration.\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/solon-data/solon-cache-redisson/README.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n#完整配置示例\nsolon.cache1:\n  driverType: \"redis\"\n  keyHeader: \"demo\" #默认为 ${solon.app.name} ，可不配置\n  defSeconds: 30 #默认为 30，可不配置\n  server: \"localhost:6379\"\n  db: 0 #默认为 0，可不配置\n  password: \"\"\n  idleConnectionTimeout: 10000\n  connectTimeout: 10000\n  \n  # http://www.voidcc.com/redisson/redisson-common-configuration\n\n\n#简配示例\nsolon.cache2:\n  server: \"localhost:6379\"\n```\n\n----------------------------------------\n\nTITLE: Solon Cache Bean Definition (Java)\nDESCRIPTION: This Java code defines a configuration class `Config` with two cache service beans, `cache1` and `cache2`. `cache1` is explicitly typed as `RedisCacheService` and injected with properties from `solon.cache1`. `cache2` uses `CacheServiceSupplier` to automatically determine the cache type based on the `solon.cache2` configuration.\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/solon-data/solon-cache-jedis/README.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n//构建 bean\n@Configuration\npublic class Config {\n    @Bean(value = \"cache1\", typed = true) //默认\n    public CacheService cache1(@Inject(\"${solon.cache1}\") RedisCacheService cache){\n        return cache;\n    }\n\n    @Bean(\"cache2\")\n    public CacheService cache2(@Inject(\"${solon.cache2}\") CacheServiceSupplier supplier){\n        //CacheServiceSupplier 可自动识别类型\n        return supplier.get();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending ControllerBase for I18n in Solon\nDESCRIPTION: This Java snippet demonstrates how to create a base controller class with the @I18n annotation.  Subsequent controllers extending this base class will automatically inherit the specified I18n context. This approach is used to ensure all controllers use a uniform internationalization package (i18n.messages).\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/solon-base/solon-i18n/README.md#_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n//此处使用默认的国际化内容包（即：\"i18n.messages\"）。也可换成其它，如：@I18n(\"i18n.strings\")\n@I18n\npublic class ControllerBase{\n    \n}\n```\n\n----------------------------------------\n\nTITLE: Inserting Data with Solon SqLink (Java)\nDESCRIPTION: This snippet demonstrates how to insert data into the database using Solon SqLink. It shows both single and batch insert operations. The `SqLink.insert()` method is used to create an insert operation, and `executeRows()` executes it returning the number of rows affected.\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/solon-data/solon-data-sqlink/README.md#_snippet_12\n\nLANGUAGE: java\nCODE:\n```\nimport demo.sqlink.model.User;\nimport org.noear.solon.annotation.Component;\nimport org.noear.solon.annotation.Inject;\nimport org.noear.solon.data.sqlink.SqLink;\n\nimport java.util.Arrays;\n\n@Component\npublic class InsertDemoService {\n    @Inject\n    SqLink sqLink;\n\n    // 插入一条\n    public long insert(String username, String password) {\n        User user = new User();\n        user.setUsername(username);\n        user.setPassword(password);\n        return sqLink.insert(user).executeRows();\n    }\n\n    // 插入多条，自动启用批量\n    public long batchInsert() {\n        User user1 = new User();\n        user1.setUsername(\"solon\");\n        user1.setPassword(\"aaa\");\n        User user2 = new User();\n        user2.setUsername(\"noear\");\n        user2.setPassword(\"bbb\");\n        User user3 = new User();\n        user3.setUsername(\"没有耳朵\");\n        user3.setPassword(\"ccc\");\n        return sqLink.insert(Arrays.asList(user1, user2, user3)).executeRows();\n        // or sqLink.insert(user1).insert(user2).insert(user3).executeRows();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Nami Client Usage with Dependency Injection\nDESCRIPTION: This code snippet demonstrates how to use the Nami client with dependency injection. It injects an `IComplexModelService` instance using the `@NamiClient` annotation.  A `LoadBalance` component named 'test' is needed to resolve the service's address. It also shows how to change the default configuration proxy to use `SnackTypeEncoder`.\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/nami/README.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@Component\npublic class Demo1{\n    @NamiClient(name=\"test\", path=\"/ComplexModelService/\")\n    IComplexModelService service;\n    \n    public void test(){\n        ComplexModel tmp = service.read(1);\n        service.save(tmp);\n    }\n}\n\n//构建一个test负载均衡组件\n@Component(\"test\")\npublic class TestUpstream implements LoadBalance {\n    @Override\n    public String getServer() {\n        return \"http://localhost:8080\";\n    }\n}\n\n//更改默认配置器的代理，将编码器换掉\nNamiConfigurationDefault.proxy = (c,b)->b.encoder(SnackTypeEncoder.instance);\n```\n\n----------------------------------------\n\nTITLE: Solon Scheduling Job Configuration\nDESCRIPTION: This YAML snippet configures a Solon scheduling job named 'job1'. It defines the cron expression, time zone, fixed rate, fixed delay, initial delay, and enable status. The 'cron' property specifies the schedule for the job's execution. The 'enable' property allows for starting and stopping the task.\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/solon-scheduling/solon-scheduling/README.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# solon.scheduling.job.{job name} #要控制的job需要设置name属性\n#\nsolon.scheduling.job.job1:\n  cron: \"* * * * * ?\"  #重新定义调度表达式\n  zone: \"+08\"\n  fixedRate: 0\n  fixedDelay: 0\n  initialDelay: 0\n  enable: true #用任务进行启停控制\n```\n\n----------------------------------------\n\nTITLE: Using the SolonMain Annotation in Java\nDESCRIPTION: This snippet demonstrates how to use the `@SolonMain` annotation to mark the main application class in Java. The annotation is placed above the class definition. This annotation assists the Solon Gradle plugin in automatically detecting the application's entry point.\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/solon-tool/solon-gradle-plugin/README.md#_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\n// 启动类上添加\n\n@SolonMain\npublic class App {\n    public static void main(String[] args) {\n        Solon.start(App.class, args);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating DocDocket Bean with Code\nDESCRIPTION: This Java snippet shows how to create DocDocket beans programmatically. It defines two beans, 'appApi' and 'adminApi', with different configurations, including group names, API base packages, global result handling, and security definitions.  It uses the OpenApiExtensionResolver and ApiInfo classes to further customize the Swagger documentation.  Dependencies include Result, Scheme, ApiInfo, and Contact classes, and OpenApiExtensionResolver.\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/solon-docs/solon-openapi2-knife4j/README.md#_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n@Configuration\npublic class DocConfig {\n\n    @Inject\n    OpenApiExtensionResolver openApiExtensionResolver;\n\n    /**\n     * 基于代码构建\n     */\n    @Bean(\"appApi\")\n    public DocDocket appApi() {\n        //根据情况增加 \"knife4j.setting\" （可选）\n        return new DocDocket()\n                .vendorExtensions(openApiExtensionResolver.getExtension())\n                .groupName(\"app端接口\")\n                .schemes(Scheme.HTTP)\n                .globalResult(Result.class)\n                .globalResponseInData(true)\n                .apis(\"com.swagger.demo.controller.app\")\n                .securityDefinitionInHeader(\"token\");\n\n    }\n\n    @Bean(\"adminApi\")\n    public DocDocket adminApi() {\n        return new DocDocket()\n                .groupName(\"admin端接口\")\n                .info(new ApiInfo().title(\"在线文档\")\n                        .description(\"在线API文档\")\n                        .termsOfService(\"https://gitee.com/noear/solon\")\n                        .contact(new Contact().name(\"demo\")\n                                .url(\"https://gitee.com/noear/solon\")\n                                .email(\"demo@foxmail.com\"))\n                        .version(\"1.0\"))\n                .schemes(Scheme.HTTP, Scheme.HTTPS)\n                .globalResponseInData(true)\n                .globalResult(Result.class)\n                .apis(\"com.swagger.demo.controller.admin\")\n                .securityDefinitionInHeader(\"token\");\n\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring DataSource Bean in Java\nDESCRIPTION: This Java snippet shows how to configure a DataSource bean using Solon's DynamicDataSource. It uses the @Configuration and @Bean annotations to define a bean named 'db_user' that is an instance of DynamicDataSource, injected via @Inject(\"$demo.ds.db_user}\").\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/solon-data/solon-data-dynamicds/README.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n//配置数据源 bean\n@Configuration\npublic class Config {\n    @Bean(\"db_user\")\n    public DataSource dsUser(@Inject(\"$demo.ds.db_user}\") DynamicDataSource dataSource) {\n        return dataSource;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JSON Serialization with YAML in Solon\nDESCRIPTION: This YAML snippet demonstrates how to configure JSON serialization settings within a Solon application. It allows customization of date formats, timezones, long and boolean output formats, and null value handling. The configuration affects how data is serialized into JSON responses.\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/solon-serialization/solon-serialization-snack3/README.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsolon.serialization.json:\n  dateAsFormat: 'yyyy-MM-dd HH:mm:ss' #配置日期格式（默认输出为时间戳）\n  dateAsTimeZone: 'GMT+8' #配置时区\n  dateAsTicks: false #将date转为毫秒数（和 dateAsFormat 二选一）\n  longAsString: true #将long型转为字符串输出 （默认为false）\n  boolAsInt: false   #将bool型转为字符串输出 （默认为false）\n  nullStringAsEmpty: false\n  nullBoolAsFalse: false\n  nullNumberAsZero: false\n  nullArrayAsEmpty: false\n  nullAsWriteable: false #输出所有null值\n```\n\n----------------------------------------\n\nTITLE: Defining a Salary Entity with Navigation Properties (Java)\nDESCRIPTION: This snippet defines a `Salary` entity with a navigation property to `Employee` using Solon SqLink. The `@Navigate` annotation specifies a many-to-one relationship between `Salary` and `Employee`, mapping the salary's 'empNumber' to the employee's 'number'. This allows for object-oriented queries and retrieving related employee data from a salary record.\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/solon-data/solon-data-sqlink/README.md#_snippet_17\n\nLANGUAGE: java\nCODE:\n```\n@Data\n@Table(value = \"salaries\")\npublic class Salary {\n    // 员工编号\n    @Column(value = \"emp_no\", primaryKey = true)\n    private int empNumber;\n    // 工资\n    private int salary;\n    // 什么日期开始\n    @Column(\"from_date\")\n    private LocalDate from;\n    // 什么日期结束\n    @Column(\"to_date\")\n    private LocalDate to;\n    // 与员工的关系的配置（多对一，工资多，员工一）（工资的empNumber字段对应到员工的number字段）\n    @Navigate(value = RelationType.ManyToOne, self = \"empNumber\", target = \"number\")\n    private Employee employee;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring LocaleResolver Bean in Solon\nDESCRIPTION: This Java snippet configures a LocaleResolver bean within a Solon application.  It returns a LocaleResolverHeader instance, or a custom implementation. This resolver determines the locale based on the request headers.\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/solon-base/solon-i18n/README.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@Configuration\npublic class Config {\n    @Bean\n    public LocaleResolver localeResolver() {\n        //或者自己定义一个\n        return new LocaleResolverHeader();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Data with Solon SqLink (Java)\nDESCRIPTION: This snippet demonstrates how to update data in the database using Solon SqLink. It uses lambda expressions to specify the fields to update and the conditions for the update. The `SqLink.update()` method builds the update query, `set()` defines the updated values, `where()` sets conditions, and `executeRows()` executes the update.\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/solon-data/solon-data-sqlink/README.md#_snippet_13\n\nLANGUAGE: java\nCODE:\n```\nimport demo.sqlink.model.User;\nimport org.noear.solon.annotation.Component;\nimport org.noear.solon.annotation.Inject;\nimport org.noear.solon.data.sqlink.SqLink;\n\n@Component\npublic class UpdateDemoService {\n    @Inject\n    SqLink sqLink;\n\n    // 根据id更新email\n    public void updateEmailById(int id, String newEmail) {\n        // UPDATE user SET email = {newEmail} WHERE id = {id}\n        sqLink.update(User.class)\n                .set(u -> u.getEmail(), newEmail)\n                .where(u -> u.getId() == id)\n                .executeRows();\n    }\n\n    // 根据id更新name和email\n    public void updateNameAndEmailById(int id, String newName, String newEmail) {\n        // UPDATE user SET email = {newEmail}, username = {newName} WHERE id = {id}\n        sqLink.update(User.class)\n                .set(u -> u.getEmail(), newEmail)\n                .set(u -> u.getUsername(), newName)\n                .where(u -> u.getId() == id)\n                .executeRows();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating DocDocket Bean with Code\nDESCRIPTION: This code snippet shows how to create `DocDocket` beans programmatically within a configuration class. It demonstrates creating two `DocDocket` beans, 'appApi' and 'adminApi', configuring different aspects like group name, schemes, global result type, API base packages, security definitions, and API information.  It showcases the programmatic configuration of Swagger documentation.\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/solon-docs/solon-swagger2-knife4j/README.md#_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n@Configuration\npublic class DocConfig {\n\n    @Inject\n    OpenApiExtensionResolver openApiExtensionResolver;\n\n    /**\n     * 基于代码构建\n     */\n    @Bean(\"appApi\")\n    public DocDocket appApi() {\n        //根据情况增加 \"knife4j.setting\" （可选）\n        return new DocDocket()\n                .vendorExtensions(openApiExtensionResolver.getExtension())\n                .groupName(\"app端接口\")\n                .schemes(Scheme.HTTP)\n                .globalResult(Result.class)\n                .globalResponseInData(true)\n                .apis(\"com.swagger.demo.controller.app\")\n                .securityDefinitionInHeader(\"token\");\n\n    }\n\n    @Bean(\"adminApi\")\n    public DocDocket adminApi() {\n        return new DocDocket()\n                .groupName(\"admin端接口\")\n                .info(new ApiInfo().title(\"在线文档\")\n                        .description(\"在线API文档\")\n                        .termsOfService(\"https://gitee.com/noear/solon\")\n                        .contact(new Contact().name(\"demo\")\n                                .url(\"https://gitee.com/noear/solon\")\n                                .email(\"demo@foxmail.com\"))\n                        .version(\"1.0\"))\n                .schemes(Scheme.HTTP, Scheme.HTTPS)\n                .globalResponseInData(true)\n                .globalResult(Result.class)\n                .apis(\"com.swagger.demo.controller.admin\")\n                .securityDefinitionInHeader(\"token\");\n\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing JSON Serialization in Solon with Java\nDESCRIPTION: This Java code demonstrates advanced JSON serialization customization in Solon using convertors and encoders. It adds a convertor for `Date` to convert it to milliseconds and another for `LocalDate` to format it as \"yyyy-MM-dd\". Additionally, it adds an encoder for `Date` to serialize it as a long value using the `SerializeWriter`. Dependencies include `Solon`, `Date`, `LocalDate`, `DateTimeFormatter`, `FastjsonRenderFactory`, `JsonLongConverter`, `JsonStringConverter`, and `SerializeWriter`.\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/solon-serialization/solon-serialization-fastjson/README.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class DemoApp {\n    public static void main(String[] args){\n        Solon.start(DemoApp.class, args, app->{\n            initMvcJsonCustom();\n        });\n    }\n\n    /**\n     * 初始化json定制（需要在插件运行前定制）\n     * */\n    private static void initMvcJsonCustom(){\n        //通过转换器，做简单类型的定制\n        FastjsonRenderFactory.global.addConvertor(Date.class,\n                (JsonLongConverter<Date>) source -> source.getTime());\n\n        FastjsonRenderFactory.global.addConvertor(LocalDate.class,\n                (JsonStringConverter<LocalDate>) source -> source.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd\")));\n\n        //通过编码器，做复杂类型的原生定制（基于框架原生接口）\n        FastjsonRenderFactory.global.addEncoder(Date.class, (ser, obj, o1, type, i) -> {\n            SerializeWriter out = ser.getWriter();\n            out.writeLong(((Date)obj).getTime());\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Service Invocation Example in Solon (Java)\nDESCRIPTION: This snippet demonstrates how to start a Solon application and make an HTTP request to a service using `HttpUtils`. It requires the Solon framework and `HttpUtils` class. The example sends a GET request to the `/hello` endpoint of the `HelloService` service.\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/solon-net/solon-net-httputils/README.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class App {\n    public static void maing(String[] args) {\n        Solon.start(App.class, args);\n\n        //通过服务名进行http请求\n        HttpUtils.http(\"HelloService\",\"/hello\").get();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Data with Solon SqLink (Java)\nDESCRIPTION: This snippet demonstrates how to delete data from the database using Solon SqLink. It shows examples of deleting records based on different conditions, including ID, name, and email. The `SqLink.delete()` method is used to construct the delete query, `where()` specifies the deletion criteria, and `executeRows()` executes the query.\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/solon-data/solon-data-sqlink/README.md#_snippet_14\n\nLANGUAGE: java\nCODE:\n```\nimport demo.sqlink.model.User;\nimport org.noear.solon.annotation.Component;\nimport org.noear.solon.annotation.Inject;\nimport org.noear.solon.data.sqlink.SqLink;\n\n@Component\npublic class DeleteDemoService {\n    @Inject\n    SqLink sqLink;\n\n    // 根据id删除\n    public long deleteById(int id) {\n        return sqLink.delete(User.class)\n                .where(u -> u.getId() == id)\n                .executeRows();\n    }\n\n    // 根据id和name删除\n    public long deleteByName(int id, String name) {\n        return sqLink.delete(User.class)\n                .where(u -> u.getId() == id && u.getUsername() == name)\n                .executeRows();\n    }\n\n    // 删除所有错误的邮箱:(\n    public long deleteByBadEmail() {\n        return sqLink.delete(User.class)\n                // NOT (email LIKE CONCAT('%','@','%'))\n                .where(u -> !u.getEmail().contains(\"@\"))\n                .executeRows();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Solon Cache Usage in Controller (Java)\nDESCRIPTION: This Java code demonstrates how to use the `@Cache` annotation in a Solon controller. The `hello` method is annotated with `@Cache`, which means that the result of the method will be cached.  The cache key is generated based on method parameters and the configured `keyHeader`.\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/solon-data/solon-cache-jedis/README.md#_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n//应用\n@Controller\npublic class DemoController {\n    @Cache\n    public String hello(String name) {\n        return String.format(\"Hello {0}!\", name);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAPI with YAML in Solon\nDESCRIPTION: This YAML snippet configures OpenAPI documentation generation in a Solon application. It defines discovery settings, upstream routes, basic authentication, included/excluded services, and API metadata. It requires the solon cloud discovery service plugin and provides an example of how to define routes to both local and remote API documentation.\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/solon-docs/solon-docs/README.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsolon.docs:\n  discover:  #(发现配置，需要引入 solon cloud 发现服务插件)，可选\n    enabled: true\n    syncStatus: true                          #同步上下线状态\n    uriPattern: \"swagger/v2?group={service}\" #上游路径模式（要么带变量 {service}，要么用统一固定值）\n    contextPathPattern: \"/{service}\"\n    basicAuth:\n      admin: \"123456\"\n      user: \"654321\"\n    excludedServices:                                 #排除服务名\n      - \"user-api\"\n    includedServices:                                 #包函服务名\n      - \"order-api\"\n  routes:\n    - id: appApi   #(远程接口文档，即分布式服务或微服务)，配置风格\n      groupName: \"app端接口\"\n      upstream:\n        target: \"lb://app-api\"\n        contextPath: \"/app\"\n        uri: \"/xxx\"\n    - id: adminApi  #(本地接口文档)，配置风格\n      groupName: \"admin端接口\"\n      globalResponseInData: true\n      basicAuth:\n        admin: \"123456\"\n        user: \"654321\"\n      apis:\n        - basePackage: \"com.swagger.demo.controller.admin\"\n      info: #可选\n        title: \"在线文档\"\n        description: \"在线API文档\"\n        termsOfService: \"https://gitee.com/noear/solon\"\n        version: 1.0\n        contact: #可选\n          name: \"demo\"\n          email: \"demo@qq.com\"\n        license: #可选\n          name: \"demo\"\n          url: \"https://gitee.com/noear/solon/blob/master/LICENSE\"\n```\n\n----------------------------------------\n\nTITLE: Adding Health Indicators (Java)\nDESCRIPTION: This Java code snippet demonstrates how to add health indicators to the Solon health check system. It uses the `HealthChecker.addIndicator` method to register different health checks, including a successful check, a failing check, and one that throws an exception. These indicators will then be reflected in the `/healthz` endpoint response.\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/solon-detector/solon-health/README.md#_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n@Configuration\npublic class Config {\n    @Bean\n    public void initHealthCheckPoint() {\n        //test...\n        HealthChecker.addIndicator(\"preflight\", Result::succeed);\n        HealthChecker.addIndicator(\"test\", Result::failure);\n        HealthChecker.addIndicator(\"boom\", () -> {\n            throw new IllegalStateException();\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Solon Vault Configuration\nDESCRIPTION: This YAML snippet demonstrates adding the `solon.vault.password` configuration, which is necessary for Solon Vault to function. The password is used for encryption and decryption. It can be configured directly in a YAML file or passed as a runtime argument.\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/solon-security/solon-security-vault/README.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsolon.vault:\n  password: \"liylU9PhDq63tk1C\"\n```\n\n----------------------------------------\n\nTITLE: Configure Solon Banner (YAML)\nDESCRIPTION: This YAML snippet configures the `solon-banner` plugin within a Solon application. It defines settings for enabling the banner, selecting the output mode (console, log, or both), and specifying the path to the banner resource file (e.g., `banner.txt`). The default banner display is enabled.\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/solon-config/solon-config-banner/README.md#_snippet_1\n\nLANGUAGE: yml\nCODE:\n```\n#By default the banner is true\nsolon.banner.enable: true\n#Where to print the banner , values console/log/both\nsolon.banner.mode: \"console\"\n#Path to banner resource file\nsolon.banner.path: \"banner.txt\"\n\n```\n\n----------------------------------------\n\nTITLE: Configuring DocDocket Bean for OpenAPI Documentation in Java\nDESCRIPTION: This code snippet configures a DocDocket bean, which is responsible for defining the structure and metadata of the OpenAPI documentation.  It sets properties like group name, schemes, and the base package for API controllers.  It requires the 'solon-docs-openapi2-javadoc' dependency and uses the `@Configuration` and `@Bean` annotations.\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/solon-docs/solon-docs-openapi2-javadoc/README.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\n@Configuration\npublic class DocConfig {\n    /**\n     * 简单点的\n     */\n    @Bean(\"appApi\")\n    public DocDocket appApi() {\n        //根据情况增加 \"knife4j.setting\" （可选）\n        return new DocDocket()\n                .groupName(\"app端接口\")\n                .schemes(Scheme.HTTP)\n                .apis(\"com.swagger.demo.controller.app\");\n\n    }\n\n    /**\n     * 丰富点的\n     */\n    @Bean(\"adminApi\")\n    public DocDocket adminApi() {\n        //根据情况增加 \"knife4j.setting\" （可选）\n        return new DocDocket()\n                .groupName(\"admin端接口\")\n                .info(new ApiInfo().title(\"在线文档\")\n                        .description(\"在线API文档\")\n                        .termsOfService(\"https://gitee.com/noear/solon\")\n                        .contact(new ApiContact().name(\"demo\")\n                                .url(\"https://gitee.com/noear/solon\")\n                                .email(\"demo@foxmail.com\"))\n                        .version(\"1.0\"))\n                .schemes(Scheme.HTTP, Scheme.HTTPS)\n                .globalResponseInData(true)\n                .globalResult(Result.class)\n                .apis(\"com.swagger.demo.controller.admin\"); //可以加多条，以包名为单位\n\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Sensitive Data with Ciphertext\nDESCRIPTION: This YAML snippet demonstrates configuring sensitive data, such as database usernames and passwords, using the generated ciphertexts.  The `ENC()` function indicates that the value is encrypted using Solon Vault. This requires the `solon.vault.password` to be configured.\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/solon-security/solon-security-vault/README.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nsolon.vault:\n  password: \"liylU9PhDq63tk1C\"\n\ntest.db1:\n  url: \"\"\n  username: \"ENC(xo1zJjGXUouQ/CZac55HZA==)\"\n  password: \"ENC(XgRqh3C00JmkjsPi4mPySA==)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAPI with Java in Solon\nDESCRIPTION: This Java code snippet configures OpenAPI documentation using the DocDocket class in a Solon application. It defines two DocDocket beans, 'appApi' and 'adminApi', to configure API documentation for different groups. It specifies API packages, global response data, security definitions, and API information using the ApiInfo class. This relies on the OpenApiExtensionResolver for vendor extensions and requires the Result class to be defined.\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/solon-docs/solon-docs/README.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@Configuration\npublic class DocConfig {\n\n    @Inject\n    OpenApiExtensionResolver openApiExtensionResolver;\n\n    /**\n     * 基于代码构建\n     */\n    @Bean(\"appApi\")\n    public DocDocket appApi() {\n        //根据情况增加 \"knife4j.setting\" （可选）\n        return new DocDocket()\n                .vendorExtensions(openApiExtensionResolver.getExtension())\n                .groupName(\"app端接口\")\n                .schemes(Scheme.HTTP)\n                .globalResult(Result.class)\n                .globalResponseInData(true)\n                .apis(\"com.swagger.demo.controller.app\")\n                .securityDefinitionInHeader(\"token\");\n\n    }\n\n    @Bean(\"adminApi\")\n    public DocDocket adminApi() {\n        return new DocDocket()\n                .groupName(\"admin端接口\")\n                .info(new ApiInfo().title(\"在线文档\")\n                        .description(\"在线API文档\")\n                        .termsOfService(\"https://gitee.com/noear/solon\")\n                        .contact(new Contact().name(\"demo\")\n                                .url(\"https://gitee.com/noear/solon\")\n                                .email(\"demo@foxmail.com\"))\n                        .version(\"1.0\"))\n                .schemes(Scheme.HTTP, Scheme.HTTPS)\n                .globalResponseInData(true)\n                .globalResult(Result.class)\n                .apis(\"com.swagger.demo.controller.admin\")\n                .securityDefinitionInHeader(\"token\");\n\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Prometheus to Scrape Micrometer Metrics\nDESCRIPTION: This YAML snippet configures Prometheus to scrape metrics from a Solon application exposing Micrometer metrics. It defines a scrape job named 'micrometer-example' with a 5-second interval. The `metrics_path` specifies the endpoint where Micrometer exposes metrics.\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/solon-cloud/solon-cloud-metrics/README.md#_snippet_1\n\nLANGUAGE: yml\nCODE:\n```\nscrape_configs:\n  - job_name: 'micrometer-example'\n    scrape_interval: 5s\n    metrics_path: '/metrics/prometheus'\n    static_configs:\n      - targets: ['127.0.0.1:8080']\n        labels:\n           instance: 'example1'\n```\n\n----------------------------------------\n\nTITLE: Custom XML Configuration with Logback in Solon\nDESCRIPTION: This snippet explains how to use custom XML configurations for Logback in Solon. It mentions the default configuration file `logback-solon.xml` and environment-specific configurations `logback-solon-{env}.xml`. It also notes the option to use `logback.xml`, which disables other Solon configurations and environment switching.\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/solon-logging/solon-logging-logback/README.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n#默认配置，可以从插件里复制 logback-def.xml 进行修改（-solon 可以支持 solon 特性）\nlogback-solon.xml\n\n#环镜配置\nlogback-solon-{env}.xml\n```\n\n----------------------------------------\n\nTITLE: Add Micrometer Prometheus Dependency (Maven)\nDESCRIPTION: This XML snippet adds the Micrometer Prometheus registry dependency to a Maven project. It enables the application to expose metrics in a format that Prometheus can scrape. Ensure the `micrometer.version` property is defined in your Maven project.\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/solon-cloud/solon-cloud-metrics/README.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>io.micrometer</groupId>\n    <artifactId>micrometer-registry-prometheus</artifactId>\n    <version>${micrometer.version}</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Encryption Interceptor (Java)\nDESCRIPTION: This Java snippet defines an encryption interceptor that extends the `Interceptor<String>` class. It overrides the `doIntercept` method to encrypt a given string value before it's stored in the database.\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/solon-data/solon-data-sqlink/README.md#_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nimport org.noear.solon.data.sqlink.base.SqLinkConfig;\nimport org.noear.solon.data.sqlink.base.intercept.Interceptor;\n\npublic class Encryption extends Interceptor<String> {\n    @Override\n    public String doIntercept(String value, SqLinkConfig config) {\n        return encrypt(value);\n    }\n\n    private String encrypt(String password) {\n        // 加密逻辑\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Redis Configuration in YAML\nDESCRIPTION: This YAML snippet configures the Redis server connection details for the demo application.  It defines the 'demo.redis' property with the server address.\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/solon-web/solon-web-sdl/README.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndemo.redis:\n  server: \"localhost:6379\"\n```\n\n----------------------------------------\n\nTITLE: Solon Cache Bean Configuration and Usage (Java)\nDESCRIPTION: This Java code demonstrates how to configure cache beans in Solon using the @Configuration and @Bean annotations. It showcases injecting cache configurations from YAML into CacheService implementations and utilizing the @Cache annotation for method-level caching. The code demonstrates both direct injection and using a CacheServiceSupplier.\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/solon-data/solon-cache-spymemcached/README.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n//构建 bean\n@Configuration\npublic class Config {\n    @Bean(value = \"cache1\", typed = true) //默认\n    public CacheService cache1(@Inject(\"${solon.cache1}\") MemCacheService cache){\n        return cache;\n    }\n\n    @Bean(\"cache2\")\n    public CacheService cache2(@Inject(\"${solon.cache2}\") CacheServiceSupplier supplier){\n        //CacheServiceSupplier 可自动识别类型\n        return supplier.get();\n    }\n}\n\n//应用\n@Controller\npublic class DemoController {\n    @Cache\n    public String hello(String name) {\n        return String.format(\"Hello {0}!\", name);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Encryption and Decryption Interceptors (Java)\nDESCRIPTION: This Java snippet demonstrates how to apply the Encryption and Decryption interceptors to a specific field (password) in a User entity using the `@OnPut` and `@OnGet` annotations. This ensures that the password is encrypted before storage and decrypted upon retrieval.\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/solon-data/solon-data-sqlink/README.md#_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nimport demo.sqlink.interceptor.Encryption;\nimport demo.sqlink.interceptor.Decryption;\n\n@Table(\"user\")\npublic class User {\n    private long id;\n    private String username;\n    @OnPut(Encryption.class)\n    @OnGet(Decryption.class)\n    private String password;\n}\n```\n\n----------------------------------------\n\nTITLE: Solon Configuration Metadata Example\nDESCRIPTION: This JSON snippet provides a complete example of the solon-configuration-metadata.json file.  It showcases how to define configuration properties (e.g., server.port, cache.driverType, beetlsql.inters) with their respective types, default values, and descriptions. It also demonstrates how to define configuration hints with suggested values and their descriptions.  This file is used by Solon to provide a richer configuration experience.\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/__doc/solon-configuration-metadata.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"properties\": [\n    {\n      \"name\": \"server.port\",\n      \"type\": \"java.lang.Integer\",\n      \"defaultValue\": \"8080\",\n      \"description\": \"服务端口\"\n    },\n    {\n      \"name\": \"cache.driverType\",\n      \"type\": \"java.lang.String\",\n      \"defaultValue\": \"local\",\n      \"description\": \"缓存驱动类型\"\n    },\n    {\n      \"name\": \"beetlsql.inters\",\n      \"type\": \"java.lang.String[]\",\n      \"description\": \"数据管理插件列表\"\n    }\n  ],\n  \"hints\": [\n    {\n      \"name\": \"cache.driverType\",\n      \"values\": [\n        {\n          \"value\": \"local\",\n          \"description\": \"本地缓存\"\n        },\n        {\n          \"value\": \"redis\",\n          \"description\": \"Redis缓存\"\n        },\n        {\n          \"value\": \"memcached\",\n          \"description\": \"Memcached缓存\"\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Data Sources with YAML in Solon\nDESCRIPTION: This YAML snippet configures three different types of data sources in a Solon application: a typed data source (db_order!), a dynamic data source (db_user), and a sharding data source (db_log). The typed data source uses HikariCP directly. The dynamic data source switches between db_user_1 and db_user_2, which also use HikariCP. The sharding data source refers to an external sharding configuration file (sharding.yml).\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/solon-data/solon-data/README.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsolon.dataSources:\n  db_order!: #数据源（!结尾表示 typed=true）\n    class: \"com.zaxxer.hikari.HikariDataSource\"\n    driverClassName: \"xx\"\n    url: \"xxx\"\n    username: \"xxx\"\n    paasword: \"xxx\"\n  db_user: #动态数据源\n    class: \"org.noear.solon.data.dynamicds.DynamicDataSource\"\n    strict: true #是否严格的\n    default: db_user_1 #默认子数据源\n    db_user_1: #内部数据源1\n      dataSourceClassName: \"com.zaxxer.hikari.HikariDataSource\"\n      driverClassName: \"xx\"\n      jdbcUrl: \"xxx\" #属性名要与 type 类的属性对上\n      username: \"xxx\"\n      paasword: \"xxx\"\n    db_user_2: #内部数据源2\n      dataSourceClassName: \"com.zaxxer.hikari.HikariDataSource\"\n      driverClassName: \"xx\"\n      jdbcUrl: \"xxx\" #属性名要与 type 类的属性对上\n      username: \"xxx\"\n      paasword: \"xxx\"\n  db_log: #分片数据源\n    class: \"org.noear.solon.data.shardingds.ShardingDataSource\"\n    file: \"classpath:sharding.yml\"\n```\n\n----------------------------------------\n\nTITLE: DynamicDataSource YAML Configuration Example\nDESCRIPTION: This YAML snippet demonstrates how to configure a DynamicDataSource in Solon. It specifies the data source type, strict mode, and defines multiple data source configurations under the 'db_user' key.  Each data source configuration includes JDBC URL, username, password, and driver class name.  The 'default' key specifies the default data source within the group. 'strict' determines if an exception is thrown if a requested data source is not found.\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/solon-data/solon-data-dynamicds/README.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndemo.ds.db_user:\n  type: \"com.zaxxer.hikari.HikariDataSource\" \n  strict: true\n  default: \n    jdbcUrl: \"xxx\" #属性名要与 type 类的属性对上\n    username: \"xxx\"\n    paasword: \"xxx\"\n    driverClassName: \"xx\"\n  db_user_2:\n    jdbcUrl: \"xxx\" #属性名要与 type 类的属性对上\n    username: \"xxx\"\n    paasword: \"xxx\"\n    driverClassName: \"xx\"\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTPS with app.yml in Solon\nDESCRIPTION: This snippet demonstrates how to configure HTTPS certificate settings in a Solon application using the `app.yml` configuration file. It specifies the path to the keystore file (either a file system path or a classpath resource) and the keystore password. The keystore can be a .jks or .pfx file.\nSOURCE: https://github.com/opensolon/solon/blob/main/__hatch/solon-boot-nettyhttp/README.md#_snippet_0\n\nLANGUAGE: yml\nCODE:\n```\nserver.ssl:\n  keyStore: \"/demo.jks\" #或者应用内资源文件 \"classpath:demo.jks\"\n  keyPassword: \"demo\"\n```\n\n----------------------------------------\n\nTITLE: Using NamiClient for Dependency Injection\nDESCRIPTION: This example demonstrates how to use the `@NamiClient` annotation for dependency injection, allowing the service interface to be automatically injected into a component. It requires a `LoadBalance` component to be defined with the same name as specified in the `@NamiClient` annotation. The `NamiConfigurationDefault` is modified to use `SnackTypeEncoder`.\nSOURCE: https://github.com/opensolon/solon/blob/main/__release/nami-bundle/README.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@Component\npublic class Demo1{\n    @NamiClient(name=\"test\", path=\"/ComplexModelService/\")\n    IComplexModelService service;\n    \n    public void test(){\n        ComplexModel tmp = service.read(1);\n        service.save(tmp);\n    }\n}\n\n//构建一个test负载均衡组件\n@Component(\"test\")\npublic class TestUpstream implements LoadBalance {\n    @Override\n    public String getServer() {\n        return \"http://localhost:8080\";\n    }\n}\n\n//更改默认配置器的代理，将编码器换掉\nNamiConfigurationDefault.proxy = (c,b)->b.encoder(SnackTypeEncoder.instance);\n```\n\n----------------------------------------\n\nTITLE: Adding Solon Data Sqlink Dependency (Maven)\nDESCRIPTION: This XML snippet demonstrates how to add the Solon Data Sqlink dependency to your Maven project. This dependency enables the use of Lambda expression-based ORM framework in Solon applications.\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/solon-data/solon-data-sqlink/README.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>org.noear</groupId>\n    <artifactId>solon-data-sqlink</artifactId>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Configuring JSON Serialization in Solon with YAML\nDESCRIPTION: This YAML snippet configures JSON serialization options in Solon. It demonstrates setting the date format, timezone, and handling of null values for strings, booleans, numbers, and arrays.  `dateAsFormat` specifies the format, `dateAsTimeZone` sets the timezone, and `longAsString` converts long values to strings. Other options control how null values are handled.\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/solon-serialization/solon-serialization-fastjson/README.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsolon.serialization.json:\n  dateAsFormat: 'yyyy-MM-dd HH:mm:ss' #配置日期格式（默认输出为时间戳）\n  dateAsTimeZone: 'GMT+8' #配置时区\n  dateAsTicks: false #将date转为毫秒数（和 dateAsFormat 二选一）\n  longAsString: true #将long型转为字符串输出 （默认为false）\n  boolAsInt: false   #将bool型转为字符串输出 （默认为false）\n  nullStringAsEmpty: false\n  nullBoolAsFalse: false\n  nullNumberAsZero: false\n  nullArrayAsEmpty: false\n  nullAsWriteable: false #输出所有null值\n```\n\n----------------------------------------\n\nTITLE: Managing Solon Plugins with PluginManager (Java)\nDESCRIPTION: This Java code snippet illustrates how to use the PluginManager API to dynamically manage Solon plugins.  It demonstrates methods for adding, removing, loading, starting, stopping, and unloading plugins by their names or package. The code shows direct file manipulation using loadJar and unloadJar methods.\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/solon-base/solon-hotplug/README.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class DemoApp {\n    public static void main(String[] args) {\n        //管理插件\n        PluginManager.add(\"add2\", \"/x/x/x2.jar\");\n        PluginManager.remove(\"add2\");\n\n        PluginManager.load(\"add2\");\n        PluginManager.start(\"add2\");\n        PluginManager.stop(\"add2\");\n        PluginManager.unload(\"add2\");\n\n        //直接操控文件\n        PluginManager.loadJar(file);\n        PluginManager.unloadJar(packge);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Local Service Discovery Configuration\nDESCRIPTION: This snippet configures local service discovery within Solon Cloud. It defines service endpoints for `helloapi` and `userapi`, pointing to specific URLs. This configuration takes precedence over cloud-based discovery and is primarily used for local testing or in scenarios with fixed service names like Kubernetes. Dependencies: solon.cloud.\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/solon-cloud/solon-cloud/README2.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsolon.cloud.local:\n  discovery:\n    service:\n      helloapi: \n        - \"http://localhost:8081\"\n      userapi:\n        - \"http://userapi\"\n```\n\n----------------------------------------\n\nTITLE: Solon Cache YAML Configuration\nDESCRIPTION: This YAML configuration defines two cache instances, `solon.cache1` and `solon.cache2`, with different levels of detail. `solon.cache1` demonstrates a complete configuration with driver type, key header, default seconds, server address, database, password, and max total connections. `solon.cache2` shows a simplified configuration with only the server address specified.\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/solon-data/solon-cache-jedis/README.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n#完整配置示例\nsolon.cache1:\n  driverType: \"redis\"\n  keyHeader: \"demo\" #默认为 ${solon.app.name} ，可不配置\n  defSeconds: 30 #默认为 30，可不配置\n  server: \"localhost:6379\"\n  db: 0 #默认为 0，可不配置\n  password: \"\"\n  maxTotal: 200 #默认为 200，可不配\n\n\n#简配示例\nsolon.cache2:\n  server: \"localhost:6379\"\n```\n\n----------------------------------------\n\nTITLE: Querying Based on Relationships with Subqueries (Java)\nDESCRIPTION: This snippet demonstrates how to query `Employee` records based on conditions on their related `Salary` records using subqueries. It shows how to find employees who have had a salary greater than 100000, and employees who currently have a salary greater than 100000.  The `subQuery` method is used to create a subquery on the salaries of an employee, and `any` is used to check if any salary satisfies the condition.\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/solon-data/solon-data-sqlink/README.md#_snippet_19\n\nLANGUAGE: java\nCODE:\n```\nList<Employee> employees = sqLink.query(Employee.class)\n                .where(e -> subQuery(e.getSalaries()).any(s -> s.getSalary() > 100000))\n                // 或者\n                //.where(e -> subQuery(e.getSalaries()).where(s->s.getSalary()>100000).any())\n                .toList();\n\n// SELECT \n//    `e`.`birth_date`,\n//    `e`.`first_name`,\n//    `e`.`gender`,\n//    `e`.`hire_date`,\n//    `e`.`last_name`,\n//    `e`.`emp_no` FROM \n//    `employees` AS `e` \n// WHERE \n//    EXISTS (\n//    SELECT 1 FROM `salaries` AS `s` WHERE `s`.`emp_no` = `e`.`emp_no` AND `s`.`salary` > ?\n// )\n```\n\nLANGUAGE: java\nCODE:\n```\nList<Employee> employees = sqLink.query(Employee.class)\n                .where(e -> subQuery(e.getSalaries()).any(s -> s.getSalary() > 100000 && s.getTo().isEqual(LocalDate.of(9999, 1, 1))))\n                // 或者\n                //.where(e -> subQuery(e.getSalaries()).where(s -> s.getSalary() > 100000 && s.getTo().isEqual(LocalDate.of(9999, 1, 1))).any())\n                .toList();\n\n// SELECT \n//    `e`.`birth_date`,\n//    `e`.`first_name`,\n//    `e`.`gender`,\n//    `e`.`hire_date`,\n//    `e`.`last_name`,\n//    `e`.`emp_no` FROM \n//    `employees` AS `e` \n// WHERE \n//    EXISTS (\n//    SELECT 1 FROM `salaries` AS `s` WHERE `s`.`emp_no` = `e`.`emp_no` AND `s`.`salary` > ? AND `s`.`to_date` = ?\n// )\n```\n\n----------------------------------------\n\nTITLE: Configuring Solon Session Properties in YAML\nDESCRIPTION: This YAML snippet configures Solon's server session. It sets the session timeout to 7200 seconds, defines a shared domain for session state, and configures Redis for session storage, including the server address, password, database (for non-cluster mode), and maximum total connections.\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/solon-web/solon-sessionstate-jedis/README.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nserver.session:\n  timeout: 7200  #超时配置。单位秒（可不配，默认：7200）\n  state.domain: \"solon.noear.org\" #可共享域配置（可不配，默认当前服务域名；多系统共享时要配置）\n  state.redis:\n    server: \"redis.io:6379\" #redis 连接地址\n    password: 1234 #redis 连接密码\n    db: 31 #如果是集群模式，db 无效\n    maxTotal: 200\n```\n\n----------------------------------------\n\nTITLE: Global CORS Configuration in Solon (Java)\nDESCRIPTION: This code snippet demonstrates how to configure CORS globally for a Solon application using the `app.filter` method. It creates a `CrossFilter` instance and configures it to allow requests from any origin using `allowOrigin(\"*\")`. The filter is then added to the application using `app.filter`, either for all paths (priority -1) or for a specific path pattern (`/user/**`).\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/solon-web/solon-web-cors/README.md#_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic class App {\n    public static void main(String[] args) {\n        SolonApp app = Solon.start(App.class, args);\n\n        //增加全局处理\n        app.filter(-1, new CrossFilter().allowOrigin(\"*\"));\n        \n        //或者增某段路径的处理\n        app.filter(new CrossFilter().allowOrigin(\"*\").pathPatterns(\"/user/**\"));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Solon JSON Serialization with YAML\nDESCRIPTION: This YAML configuration snippet defines how Solon serializes JSON output. It allows customizing date formatting, time zone, converting dates to milliseconds, converting long to string, converting boolean to int, handling null values for strings, booleans, numbers, and arrays, and controlling the output of null values.\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/solon-serialization/solon-serialization/README.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nsolon.serialization.json:\n  dateAsFormat: 'yyyy-MM-dd HH:mm:ss' #配置日期格式（默认输出为时间戳）\n  dateAsTimeZone: 'GMT+8' #配置时区\n  dateAsTicks: false #将date转为毫秒数（和 dateAsFormat 二选一）\n  longAsString: true #将long型转为字符串输出 （默认为false）\n  boolAsInt: false   #将bool型转为字符串输出 （默认为false）\n  nullStringAsEmpty: false\n  nullBoolAsFalse: false\n  nullNumberAsZero: false\n  nullArrayAsEmpty: false\n  nullAsWriteable: false #输出所有null值\n```\n\n----------------------------------------\n\nTITLE: Defining Cache Service Beans in Java\nDESCRIPTION: This Java code defines two CacheService beans, 'cache1' and 'cache2', using Solon's dependency injection and configuration features.  It uses the @Configuration and @Bean annotations to create the beans and injects cache configurations from the application properties via the @Inject annotation.  The 'cache2' bean demonstrates using a CacheServiceSupplier which can automatically identify the cache type.\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/solon-data/solon-cache-caffeine/README.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n//构建 bean\n@Configuration\npublic class Config {\n    @Bean(value = \"cache1\", typed = true) //默认\n    public CacheService cache1(@Inject(\"${solon.cache1}\") CaffeineCacheService cache){\n        return cache;\n    }\n\n    @Bean(\"cache2\")\n    public CacheService cache2(@Inject(\"${solon.cache2}\") CacheServiceSupplier supplier){\n        //CacheServiceSupplier 可自动识别类型\n        return supplier.get();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the SolonMain Annotation in Java\nDESCRIPTION: This snippet defines the `@SolonMain` annotation in Java, used to mark the main class of a Solon application.  The annotation is retained at runtime and documented, making it accessible for reflection. This annotation allows the plugin to automatically detect the main class, simplifying the build configuration.  Requires solon 2.2 or newer.\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/solon-tool/solon-gradle-plugin/README.md#_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\npackage org.noear.solon.annotation;\n\nimport java.lang.annotation.*;\n\n/**\n * Solon 主类（入口类）\n *\n * <pre>{@code\n * @SolonMain\n * public class App{\n *     public static void main(String[] args){\n *         Solon.start(App.class, args);\n *     }\n * }\n * }</pre>\n *\n * @author noear\n * @since 2.2\n * */\n@Target({ElementType.TYPE})\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\npublic @interface SolonMain {\n\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Solon JSON Serialization\nDESCRIPTION: This YAML configuration snippet demonstrates how to customize Solon's JSON serialization behavior. It includes settings for date formatting (dateAsFormat, dateAsTimeZone, dateAsTicks), long and boolean type conversions (longAsString, boolAsInt), and null value handling (nullStringAsEmpty, nullBoolAsFalse, nullNumberAsZero, nullArrayAsEmpty, nullAsWriteable).\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/solon-serialization/solon-serialization-fastjson2/README.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsolon.serialization.json:\n  dateAsFormat: 'yyyy-MM-dd HH:mm:ss' #配置日期格式（默认输出为时间戳）\n  dateAsTimeZone: 'GMT+8' #配置时区\n  dateAsTicks: false #将date转为毫秒数（和 dateAsFormat 二选一）\n  longAsString: true #将long型转为字符串输出 （默认为false）\n  boolAsInt: false   #将bool型转为字符串输出 （默认为false）\n  nullStringAsEmpty: false\n  nullBoolAsFalse: false\n  nullNumberAsZero: false\n  nullArrayAsEmpty: false\n  nullAsWriteable: false #输出所有null值\n```\n\n----------------------------------------\n\nTITLE: Defining CacheService Beans in Solon using Java\nDESCRIPTION: This Java code snippet shows how to define `CacheService` beans within a Solon configuration class.  It utilizes `@Configuration` and `@Bean` annotations to create cache instances. It demonstrates injecting cache configurations and using a `CacheServiceSupplier` to automatically detect the cache type.\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/solon-data/solon-cache-redisson/README.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n//构建 bean\n@Configuration\npublic class Config {\n    @Bean(value = \"cache1\", typed = true) //默认\n    public CacheService cache1(@Inject(\"${solon.cache1}\") RedissonCacheService cache){\n        return cache;\n    }\n\n    @Bean(\"cache2\")\n    public CacheService cache2(@Inject(\"${solon.cache2}\") CacheServiceSupplier supplier){\n        //CacheServiceSupplier 可自动识别类型\n        return supplier.get();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Nami Client Usage with Builder API\nDESCRIPTION: This code snippet demonstrates how to use the Nami client with the builder API. It creates an `IComplexModelService` instance by specifying the encoder, URL, and interface class. The `SnackTypeEncoder` is used for encoding and decoding the data.\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/nami/README.md#_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic class Demo2{\n    IComplexModelService service = Nami.builder()\n                                        .encoder(SnackTypeEncoder.instance)\n                                        .url(\"http://localhost:8080/ComplexModelService/\")\n                                        .create(IComplexModelService.class);\n    \n    public void test(){\n        ComplexModel tmp = service.read(1);\n        service.save(tmp);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Web Service Client (Manual)\nDESCRIPTION: This Java snippet demonstrates creating a web service client manually using `WebServiceHelper`. It defines a `HelloService` interface annotated with `@WebService` and `@WebMethod`. It then uses `WebServiceHelper` to create a client instance and calls the `hello` method. Requires solon and solon-web-webservices dependencies.\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/solon-web/solon-web-webservices/README.md#_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic class ClientTest {\n    public static void main(String[] args) {\n        String wsAddress = \"http://localhost:8080/ws/HelloService\";\n        HelloService helloService = WebServiceHelper.createWebClient(wsAddress, HelloService.class);\n\n        System.out.println(\"rst::\" + helloService.hello(\"noear\"));\n    }\n\n    @WebService(serviceName = \"HelloService\", targetNamespace = \"http://demo.solon.io\")\n    public interface HelloService {\n        @WebMethod\n        String hello(String name);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Solon JSON Serialization with YAML\nDESCRIPTION: This YAML snippet configures Solon's JSON serialization settings. It allows customization of date formatting, time zones, conversion of long values to strings, boolean values to integers, and handling of null values in the output. The 'nullXxxAs' options automatically enable 'nullAsWriteable'.\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/solon-serialization/solon-serialization-jackson/README.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nsolon.serialization.json:\n  dateAsFormat: 'yyyy-MM-dd HH:mm:ss' #配置日期格式（默认输出为时间戳）\n  dateAsTimeZone: 'GMT+8' #配置时区\n  dateAsTicks: false #将date转为毫秒数（和 dateAsFormat 二选一）\n  longAsString: true #将long型转为字符串输出 （默认为false）\n  boolAsInt: false   #将bool型转为字符串输出 （默认为false）\n  nullStringAsEmpty: false\n  nullBoolAsFalse: false\n  nullNumberAsZero: false\n  nullArrayAsEmpty: false\n  nullAsWriteable: false #输出所有null值\n```\n\n----------------------------------------\n\nTITLE: Controller-Level CORS Configuration in Solon (Java)\nDESCRIPTION: This code snippet demonstrates how to enable CORS for specific controllers in a Solon application by using the `@CrossOrigin` annotation.  It configures the `origins` attribute to allow requests from any origin (`*`).  The controllers `Demo1Controller` and `Demo2Controller` are annotated to enable CORS for their `/hello` mapping.\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/solon-web/solon-web-cors/README.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n@CrossOrigin(origins = \"*\")\n@Controller\npublic class Demo1Controller {\n    @Mapping(\"/hello\")\n    public String hello() {\n        return \"hello\";\n    }\n}\n\n@Controller\npublic class Demo2Controller {\n    @CrossOrigin(origins = \"*\")\n    @Mapping(\"/hello\")\n    public String hello() {\n        return \"hello\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using I18n in Enjoy Template\nDESCRIPTION: This snippet shows how to access internationalized messages within an Enjoy template using the `i18n` object and the `get` and `getAndFormat` methods.\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/solon-base/solon-i18n/README.md#_snippet_7\n\nLANGUAGE: html\nCODE:\n```\ni18n::#(i18n.get(\"login.title\"))\ni18n::#(i18n.getAndFormat(\"login.title\",12,\"a\"))\n```\n\n----------------------------------------\n\nTITLE: Custom Type Handler (Java)\nDESCRIPTION: This Java snippet demonstrates how to create a custom type handler for handling List<String> data types with Sqlink. It implements the ITypeHandler interface, defining how to retrieve and set values in the ResultSet and PreparedStatement.\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/solon-data/solon-data-sqlink/README.md#_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nimport org.noear.solon.annotation.Component;\nimport org.noear.solon.data.sqlink.base.toBean.handler.ITypeHandler;\n\nimport java.lang.reflect.Type;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\n// 加上@Component注解可以注册到容器里，这意味着全局的同类型字段都会调用这个类型处理器\n// 如果是用来给UseTypeHandler的话就不需要注册\n@Component\npublic class ListStringTypeHandler implements ITypeHandler<List<String>> {\n\n    // 实现从ResultSet取出数据的逻辑\n    @Override\n    public List<String> getValue(ResultSet resultSet, int asName, Type type) throws SQLException {\n        String string = resultSet.getString(asName);\n        return Arrays.stream(string.split(\",\")).collect(Collectors.toList());\n    }\n\n    // 实现将数据填充到PreparedStatement的逻辑\n    @Override\n    public void setValue(PreparedStatement preparedStatement, int asName, List<String> strings) throws SQLException {\n        preparedStatement.setString(asName, String.join(\",\", strings));\n    }\n\n    // 实现将@InsertDefaultValue注解下的字符串值转换到实际的值的逻辑\n    @Override\n    public List<String> castStringToTarget(String value) {\n        return Arrays.stream(value.split(\",\")).collect(Collectors.toList());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Static Resource Mappings in Solon (Java)\nDESCRIPTION: This Java code snippet adds static resource mappings to a Solon application. It uses `StaticMappings.add` to map URL paths to different static resource repositories: an extended static repository (`ExtendStaticRepository`), a file static repository (`FileStaticRepository`), and a classpath static repository (`ClassPathStaticRepository`).\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/solon-web/solon-web-staticfiles/README.md#_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic class App {\n    public static void main(String[] args) {\n        Solon.start(App.class, args, app -> {\n            //添加静态目录映射\n\n            //1.添加扩展目录：${solon.extend}/static/\n            StaticMappings.add(\"/\", new ExtendStaticRepository());\n            //2.添加本地绝对目录\n            StaticMappings.add(\"/\", new FileStaticRepository(\"/data/sss/water/water_ext/\"));\n            //3.添加资源路径\n            StaticMappings.add(\"/\", new ClassPathStaticRepository(\"user\"));\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Solon Web Stop Configuration\nDESCRIPTION: This YAML snippet shows the configuration options for the `solon-web-stop` extension in a Solon application.  It allows configuring whether the stop functionality is enabled, the path for the stop command, and a whitelist of allowed hosts.  These configurations control how the service can be remotely stopped.\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/solon-web/solon-web-stop/README.md#_snippet_1\n\nLANGUAGE: yml\nCODE:\n```\nsolon.stop:\n  enable: false           #是否启用。默认为关闭\n  path: \"/_run/stop/\"     #命令路径。默认为'/_run/stop/'\n  whitelist: \"127.0.0.1\"  #白名单，`*` 表示不限主机。默认为`127.0.0.1`\n```\n\n----------------------------------------\n\nTITLE: Using InsertDefaultValue Annotation (Java)\nDESCRIPTION: This Java snippet demonstrates how to use the `@InsertDefaultValue` annotation with different strategies (DataBase, Static, Dynamic) to provide default values for fields during insertion.  The UUIDGenerator is used as the Dynamic value.\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/solon-data/solon-data-sqlink/README.md#_snippet_10\n\nLANGUAGE: java\nCODE:\n```\nimport org.noear.solon.data.sqlink.annotation.GenerateStrategy;\nimport org.noear.solon.data.sqlink.annotation.InsertDefaultValue;\nimport org.noear.solon.data.sqlink.base.generate.UUIDGenerator;\n\n@Table(\"user\")\npublic class User {\n    // 数据库,假设这里是自增\n    @InsertDefaultValue(strategy = GenerateStrategy.DataBase)\n    private long id;\n    // 静态值\n    @InsertDefaultValue(strategy = GenerateStrategy.Static, value = \"新用户\")\n    private String username;\n    // 动态值\n    @InsertDefaultValue(strategy = GenerateStrategy.Dynamic, dynamic = UUIDGenerator.class)\n    private String uuid;\n}\n```\n\n----------------------------------------\n\nTITLE: Base Controller CORS Configuration in Solon (Java)\nDESCRIPTION: This code snippet demonstrates how to enable CORS for all controllers that inherit from a base controller.  The `BaseController` class is annotated with `@CrossOrigin(origins = \"*\")`, which enables CORS for all its subclasses. The `Demo3Controller` extends `BaseController` and therefore inherits the CORS configuration.\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/solon-web/solon-web-cors/README.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@CrossOrigin(origins = \"*\")\npublic class BaseController {\n    \n}\n\n@Controller\npublic class Demo3Controller extends BaseController{\n    @Mapping(\"/hello\")\n    public String hello() {\n        return \"hello\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Static File Handling in Solon (YAML)\nDESCRIPTION: This YAML snippet configures static file handling in a Solon application.  It enables static files, sets the cache maximum age to 6000 seconds, and defines mappings between URL paths and resource repositories (disk directory, resource directory, and extended static directory).\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/solon-web/solon-web-staticfiles/README.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsolon.staticfiles:\n  enabled: true\n  cacheMaxAge: 6000\n  mappings:\n    - path: \"/img/\"\n      repository: \"/data/sss/app/\" #表示磁盘目录地址\n    - path: \"/\"\n      repository: \"classpath:user\" #表示资源目录\n    - path: \"/\"\n      repository: \":extend\" #表示扩展静态静态\n```\n\n----------------------------------------\n\nTITLE: Remote Service Shutdown Command\nDESCRIPTION: This shell command demonstrates how to remotely shut down a Solon service using `curl`.  It sends an HTTP request to the configured stop path, triggering the shutdown process if the request originates from a whitelisted host and the extension is enabled.  The command assumes `curl` is installed and available in the system's PATH.\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/solon-web/solon-web-stop/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n#通过命令关掉服务，主要是运维提供帮助\ncurl http://127.0.0.1/_run/stop/\n```\n\n----------------------------------------\n\nTITLE: Creating DocDocket Bean from Configuration\nDESCRIPTION: This Java snippet demonstrates how to create a DocDocket bean using configuration properties injected via @Inject. It configures global result handling and security definition in the header. It depends on the Result class and DocDocket configuration provided in the YAML file.\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/solon-docs/solon-openapi2-knife4j/README.md#_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n@Configuration\npublic class DocConfig {\n    /**\n     * 基于配置构建\n     */\n    @Bean(\"adminApi\")\n    public DocDocket adminApi(@Inject(\"${swagger.adminApi}\") DocDocket docket) {\n        docket.globalResult(Result.class);\n        docket.securityDefinitionInHeader(\"token\");\n        return docket;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating DocDocket Bean from YAML Configuration\nDESCRIPTION: This Java code creates a `DocDocket` bean named \"adminApi\" using the Swagger configuration loaded from the YAML file.  It injects the configuration using `@Inject(\"${swagger.adminApi}\")` and adds global configurations like `Result.class` and security definition in the header.\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/solon-docs/solon-swagger2-knife4j/README.md#_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n@Configuration\npublic class DocConfig {\n    /**\n     * 基于配置构建\n     */\n    @Bean(\"adminApi\")\n    public DocDocket adminApi(@Inject(\"${swagger.adminApi}\") DocDocket docket) {\n        docket.globalResult(Result.class);\n        docket.securityDefinitionInHeader(\"token\");\n        return docket;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Solon Logging: Custom XML Configuration\nDESCRIPTION: This snippet describes using custom XML configuration files for Solon logging, offering greater flexibility.  It supports environment-specific configurations (e.g., `log4j2-solon-{env}.xml`) for managing different logging setups. Using `log4j2.xml` disables other Solon configurations and environment switching.\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/solon-logging/solon-logging-log4j2/README.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n#默认配置，可以从插件里复制 log4j2-def.xml 进行修改（-solon 可以支持 solon 特性）\nlog4j2-solon.xml\n\n#环镜配置\nlog4j2-solon-{env}.xml \n```\n\n----------------------------------------\n\nTITLE: UUID Generator (Java)\nDESCRIPTION: This Java snippet defines a UUID generator that extends the `DynamicGenerator<String>` class. It overrides the `generate` method to create a UUID and return it as a String.  This will be used for generating default values for fields.\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/solon-data/solon-data-sqlink/README.md#_snippet_9\n\nLANGUAGE: java\nCODE:\n```\npackage org.noear.solon.data.sqlink.base.generate;\n\nimport org.noear.solon.data.sqlink.base.SqLinkConfig;\nimport org.noear.solon.data.sqlink.base.metaData.FieldMetaData;\n\nimport java.util.UUID;\n\npublic class UUIDGenerator extends DynamicGenerator<String> {\n    @Override\n    public String generate(SqLinkConfig config, FieldMetaData fieldMetaData) {\n        return UUID.randomUUID().toString();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Swagger Configuration with YAML\nDESCRIPTION: This YAML configuration defines the Swagger settings for the admin API. It specifies the group name, global response data setting, basic authentication credentials, the base package for the API endpoints, and information details like title, description, contact, and license.  It can be used to create a `DocDocket` via dependency injection.\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/solon-docs/solon-swagger2-knife4j/README.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nswagger.adminApi:\n  groupName: \"admin端接口\"\n  globalResponseInData: true\n  basicAuth:\n    admin: \"123456\"\n    user: \"654321\"\n  apis:\n    - basePackage: \"com.swagger.demo.controller.admin\"\n  info: #可选\n    title: \"在线文档\"\n    description: \"在线API文档\"\n    termsOfService: \"https://gitee.com/noear/solon\"\n    version: 1.0\n    contact: #可选\n      name: \"demo\"\n      email: \"demo@qq.com\"\n    license: #可选\n      name: \"demo\"\n      url: \"https://gitee.com/noear/solon/blob/master/LICENSE\"\n```\n\n----------------------------------------\n\nTITLE: Using Nami Builder with Path and Upstream\nDESCRIPTION: This example demonstrates creating a service instance using `Nami.builder()` with a path and an upstream provider.  It dynamically resolves the base URL using a lambda expression. This example also avoids dependency injection, programmatically creating the Nami client.\nSOURCE: https://github.com/opensolon/solon/blob/main/__release/nami-bundle/README.md#_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic class Demo3{\n    IComplexModelService service = Nami.builder()\n                                        .encoder(SnackTypeEncoder.instance)\n                                        .path(\"/ComplexModelService/\")\n                                        .upstream(()->\"http://localhost:8080\")\n                                        .create(IComplexModelService.class);\n    \n    public void test(){\n        ComplexModel tmp = service.read(1);\n        service.save(tmp);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Solon Maven Plugin\nDESCRIPTION: This XML snippet demonstrates the basic configuration for the solon-maven-plugin within a Maven project. It specifies the plugin's groupId and artifactId. This configuration is intended to be simpler and more efficient compared to older configurations, as it handles dependency inclusion without overwriting existing files.\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/solon-tool/solon-maven-plugin/README.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<build>\n    <plugins>\n        <plugin>\n            <groupId>org.noear</groupId>\n            <artifactId>solon-maven-plugin</artifactId>\n        </plugin>\n    </plugins>\n</build>\n```\n\n----------------------------------------\n\nTITLE: Creating a Web Service Server\nDESCRIPTION: This Java snippet demonstrates creating a simple web service endpoint using Solon. It defines a `HelloServiceImpl` class annotated with `@WebService` and a `hello` method. This class will be exposed as a web service. Requires Solon framework.\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/solon-web/solon-web-webservices/README.md#_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic class ServerTest {\n    public static void main(String[] args) {\n        Solon.start(ServerTest.class, args);\n    }\n\n    @WebService(serviceName = \"HelloService\", targetNamespace = \"http://demo.solon.io\")\n    public static class HelloServiceImpl {\n        public String hello(String name) {\n            return \"hello \" + name;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Health Check Detectors with YAML\nDESCRIPTION: This example shows how to configure health check detectors using a YAML file. The `solon.health.detector` property is set with a string containing a comma-separated list of detectors. Available options include cpu, disk, jvm, memory, os, and qps.\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/solon-detector/solon-health-detector/README.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# 可选: cpu,disk,jvm,memory,os,qps\nsolon.health.detector: \"cpu,jvm\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Memcached in Solon via YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure a Memcached cache provider within a Solon application. It includes settings for the driver type, key header, default expiration seconds, server address, username, and password. A simplified configuration example is also provided for brevity.\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/solon-data/solon-cache-spymemcached/README.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n#完整配置示例\nsolon.cache1:\n  driverType: \"memcached\"\n  keyHeader: \"demo\" #默认为 ${solon.app.name} ，可不配置\n  defSeconds: 30 #默认为 30，可不配置\n  server: \"localhost:11211\"\n  user: \"\" #默认为空，可不配置\n  password: \"\" #默认为空，可不配置\n\n\n#简配示例\nsolon.cache2:\n  server: \"localhost:11211\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Health Check Detectors with Properties\nDESCRIPTION: This example shows how to configure health check detectors using a properties file. The `solon.health.detector` property specifies a comma-separated list of detectors to enable. Available options include cpu, disk, jvm, memory, os, and qps.\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/solon-detector/solon-health-detector/README.md#_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nsolon.health.detector=cpu,disk,jvm,memory,os,qps\n```\n\n----------------------------------------\n\nTITLE: Using @Logined Annotation in Solon\nDESCRIPTION: This Java code shows how to use the `@Logined` annotation from Solon's validation framework to protect a controller. It requires the single device login to be active for accessing the `test` method.\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/solon-web/solon-web-sdl/README.md#_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n//使用示意代码\n@Logined //可以使用验证注解了，并且是基于sso的\n@Controller\npublic class AdminController extends BaseController{\n    @Mapping(\"test\")\n    public String test(){\n        return \"OK\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: JVM Parameter for JDK 17+ Serialization\nDESCRIPTION: This shell command demonstrates how to add a JVM parameter to resolve serialization permission issues in JDK 17 and later. The `--add-opens java.base/java.lang=ALL-UNNAMED` parameter grants access to the `java.lang` module, allowing for proper serialization.\nSOURCE: https://github.com/opensolon/solon/blob/main/__test/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n#示例：\njava --add-opens java.base/java.lang=ALL-UNNAMED -jar xxx.jar\n```\n\n----------------------------------------\n\nTITLE: Starting Solon Application\nDESCRIPTION: This Java snippet shows how to start a Solon application using the Solon.start() method. It's a basic entry point for the application and requires the Solon framework as a dependency. It takes the main application class and command line arguments as input.\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/solon-docs/solon-openapi2-knife4j/README.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class App {\n    public static void main(String[] args) {\n        Solon.start(App.class, args);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Metrics Registry List Endpoint\nDESCRIPTION: Defines the structure for the `/metrics/registrys` endpoint, which returns a JSON array containing the names of registered metrics registries. The `_registrys` key holds a list of strings, where each string represents the name of a registry.\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/solon-cloud/solon-cloud-metrics/API.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"_registrys\": [\"name1\", \"name2\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting SqLink Data Sources (Java)\nDESCRIPTION: This Java snippet demonstrates how to inject SqLink data sources into a Solon component using the @Inject annotation. It showcases injecting the default data source and a specific data source (db2).\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/solon-data/solon-data-sqlink/README.md#_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nimport org.noear.solon.data.sqlink.SqLink;\n\n@Component\npublic class DemoService {\n    @Inject //默认数据源\n    SqLink sqLink1;\n\n    @Inject(\"db2\") //db2 数据源\n    SqLink sqLink2;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Swagger with YAML\nDESCRIPTION: This YAML snippet configures Swagger documentation using the solon.docs configuration section. It defines discovery settings for remote services, including service discovery, URI patterns, and authentication. It also configures route-specific settings, such as group names, upstream targets, and API base packages.  It supports basic authentication and allows for customization of the API info section (title, description, etc.).\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/solon-docs/solon-openapi2-knife4j/README.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsolon.docs:\n  discover:  #(发现配置，需要引入 solon cloud 发现服务插件)，可选\n    enabled: true\n    syncStatus: true                          #同步上下线状态\n    uriPattern: \"swagger/v2?group={service}\" #上游路径模式（要么带变量 {service}，要么用统一固定值）\n    basicAuth:\n      admin: \"123456\"\n      user: \"654321\"\n    excludedServices:                                 #排除服务名\n      - \"user-api\"\n    includedServices:                                 #包函服务名\n      - \"order-api\"\n  routes:\n    - id: appApi   #(远程接口文档，即分布式服务或微服务)，配置风格\n      groupName: \"app端接口\"\n      upstream:\n        target: \"lb://app-api\"\n        contextPath: \"/app\"\n        uri: \"/xxx\"\n    - id: adminApi  #(本地接口文档)，配置风格\n      groupName: \"admin端接口\"\n      globalResponseInData: true\n      basicAuth:\n        admin: \"123456\"\n        user: \"654321\"\n      apis:\n        - basePackage: \"com.swagger.demo.controller.admin\"\n      info: #可选\n        title: \"在线文档\"\n        description: \"在线API文档\"\n        termsOfService: \"https://gitee.com/noear/solon\"\n        version: 1.0\n        contact: #可选\n          name: \"demo\"\n          email: \"demo@qq.com\"\n        license: #可选\n          name: \"demo\"\n          url: \"https://gitee.com/noear/solon/blob/master/LICENSE\"\n```\n\n----------------------------------------\n\nTITLE: Declaring a Service Interface\nDESCRIPTION: This interface defines the contract for a complex model service, including methods for saving and reading complex model data. It showcases the basic structure of a service interface that Nami can use to generate client proxies.\nSOURCE: https://github.com/opensolon/solon/blob/main/__release/nami-bundle/README.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic interface IComplexModelService {\n    //持久化\n    void save(ComplexModel model);\n\n    //读取\n    ComplexModel read(Integer modelId);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Extend Directory in Solon (YAML)\nDESCRIPTION: This YAML snippet configures the extend directory, the `!jt_ext` indicates that if the directory doesn't exist, it will be automatically created. This is used to support ExtendStaticRepository.\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/solon-web/solon-web-staticfiles/README.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nsolon.extend: \"!jt_ext\" #!开头，表示如果没有扩展目录则自动创建 //用于支持 ExtendStaticRepository\n```\n\n----------------------------------------\n\nTITLE: Using I18nUtil in a Solon Controller\nDESCRIPTION: This Java snippet shows how to use the I18nUtil.getMessage method within a Solon controller to retrieve internationalized messages. It takes a Context and a message key as input and returns the corresponding localized string.\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/solon-base/solon-i18n/README.md#_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n@Controller\npublic class DemoController {\n    @Mapping(\"/demo/\")\n    public String demo(Context ctx) {\n        return I18nUtil.getMessage(ctx, \"login.title\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Service Path\nDESCRIPTION: This YAML snippet configures the base path for web service endpoints. It sets the `server.webservices.path` property to \"/ws/\".  Requests to web services will then be routed under this path.  The default path is \"/ws\".\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/solon-web/solon-web-webservices/README.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nserver.webservices.path: \"/ws/\" #默认为 ws\n```\n\n----------------------------------------\n\nTITLE: Configuring MIME Type for JSON in Solon\nDESCRIPTION: This YAML snippet configures the MIME type for JSON responses in a Solon application. It sets the 'solon.mime.json' property to 'application/json', ensuring that JSON responses are correctly identified by clients.\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/solon-web/solon-web-staticfiles/README.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsolon.mime.json: \"application/json\"\n```\n\n----------------------------------------\n\nTITLE: Adding Solon Web Services Dependency\nDESCRIPTION: This XML snippet adds the `solon-web-webservices` dependency to your project. It is required for enabling web service functionality within your Solon application. Add this dependency to your pom.xml or build.gradle file.\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/solon-web/solon-web-webservices/README.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>org.noear</groupId>\n    <artifactId>solon-web-webservices</artifactId>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Configuring Sqlink settings (YAML)\nDESCRIPTION: This YAML snippet shows how to configure Solon Data Sqlink specific settings, such as printing SQL statements, batch SQL statements, and ignoring updates/deletes without a WHERE clause. These settings can be configured per data source (db1, db2).\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/solon-data/solon-data-sqlink/README.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nsolon.data.sqlink:\n  db1:\n  # 打印sql\n  printSql: true\n  # 打印批量sql\n  printBatch: false\n  # 是否允许无where更新\n  ignoreUpdateNoWhere: false\n  # 是否允许无where删除\n  ignoreDeleteNoWhere: false\n  db2:\n  # 无配置时以上为默认选项\n```\n\n----------------------------------------\n\nTITLE: Using @I18n Annotation in Solon Controller\nDESCRIPTION: This Java snippet shows how to use the @I18n annotation to associate a controller with a specific internationalization content package. It injects the I18n object into the controller, allowing access to localized messages within the controller's scope. It specifies \"i18n.login\" as the base name.\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/solon-base/solon-i18n/README.md#_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n@I18n(\"i18n.login\")\n@Controller\npublic class LoginController {\n    @Mapping(\"/login/\")\n    public ModelAndView login() {\n        return new ModelAndView(\"login.ftl\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Health Check Dependency (Maven)\nDESCRIPTION: This XML snippet adds the `solon-health` dependency to a Maven project. This allows the use of Solon's health check features in the application. No specific configuration is required.\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/solon-detector/solon-health/README.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>org.noear</groupId>\n    <artifactId>solon-health</artifactId>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Configuring Solon Logging Appenders in YAML\nDESCRIPTION: This YAML snippet configures the console and file appenders for Solon's logging system. It specifies the logging pattern used to format log messages written to the console and to a file. The pattern includes placeholders for timestamp, log level, process ID, thread, logger name, and message content.\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/solon-logging/solon-logging-logback/FORMAT.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsolon.logging.appender:\n  console:\n    pattern: \"%d{yyyy-MM-dd HH:mm:SSS} %highlight(%-5level) %magenta(${PID:-}) --- %-20(%yellow([%20.20thread])) %-56(%cyan(%-40.40logger{39}%L)) : %msg%n\"\n  file:\n    pattern: \"%d{yyyy-MM-dd HH:mm:ss} %-5level ${PID:-} --- %-20([%20.20thread]) %-56(%-40.40logger{39}%L) : %msg%n\"\n```\n\n----------------------------------------\n\nTITLE: Extending ControllerBase in Solon Controllers\nDESCRIPTION: This Java snippet demonstrates how to extend the ControllerBase, using the I18n configurations defined in the base class.  It shows how to create LoginController and UserController that inherits the default I18n configuration from the ControllerBase.\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/solon-base/solon-i18n/README.md#_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n@Controller\npublic class LoginController extends ControllerBase{\n    @Mapping(\"/login/\")\n    public ModelAndView login() {\n        return new ModelAndView(\"login.ftl\");\n    }\n}\n\n@Controller\npublic class UserController extends ControllerBase{\n    @Mapping(\"/user/\")\n    public ModelAndView user() {\n        return new ModelAndView(\"user.ftl\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Spring Boot-style Logging Configuration with Solon\nDESCRIPTION: This snippet demonstrates how to configure Solon logging with a Spring Boot-style pattern using YAML. It configures console and file appenders with patterns similar to those used in Spring Boot.\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/solon-logging/solon-logging-logback/README.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsolon.app:\n  name: demoapp\n\nsolon.logging.appender:\n  console:\n    pattern: \"%d{yyyy-MM-dd HH:mm:ss} %-5level %magenta(${PID:-}) %white(---) %-20(%yellow([%20.20thread])) %-55(%cyan(%.32logger{30}:%L)) %msg%n\"\n  file:\n    pattern: \"%d{yyyy-MM-dd HH:mm:ss} %-5level ${PID:-} --- %-20([%20.20thread]) %-55(%.32logger{30}:%L) %msg%n\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Solon Hotplug with YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure Solon's hotplug feature to add plugins.  It defines two plugins, 'add1' and 'add2', specifying their respective JAR file paths. The paths are used by Solon to locate and manage the plugin JAR files.\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/solon-base/solon-hotplug/README.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsolon.hotplug:\n  add1: \"/x/x/x.jar\"\n  add2: \"/x/x/x2.jar\"\n```\n\n----------------------------------------\n\nTITLE: Add Solon Banner Dependency (Maven)\nDESCRIPTION: This XML snippet adds the `solon-banner` dependency to your Maven project. This plugin is used to display a banner when the Solon application starts.  It requires a Maven project setup.\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/solon-config/solon-config-banner/README.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>org.noear</groupId>\n    <artifactId>solon-banner</artifactId>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Defining Metrics Meter List Endpoint\nDESCRIPTION: Defines the structure for the `/metrics/meters` endpoint, which returns a JSON array containing the names of registered meters. The `_meters` key holds a list of strings, where each string represents the name of a meter.\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/solon-cloud/solon-cloud-metrics/API.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"_meters\": [\"name1\", \"name2\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Interface Declaration for Nami Service\nDESCRIPTION: This code snippet demonstrates a simple interface declaration for a Nami service. It defines two methods, `save` and `read`, for interacting with a `ComplexModel`. This interface will be used by the Nami client to generate the client-side proxy.\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/nami/README.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic interface IComplexModelService {\n    //持久化\n    void save(ComplexModel model);\n\n    //读取\n    ComplexModel read(Integer modelId);\n}\n```\n\n----------------------------------------\n\nTITLE: Disable All Solon Validation\nDESCRIPTION: This YAML snippet configures the `solon.validation.validateAll` property to `false`. This setting disables the default validation behavior in Solon, requiring explicit validation rules to be defined for each field that needs validation. When set to `true`, all fields are validated by default.\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/solon-security/solon-security-validation/README.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsolon.validation.validateAll: false #true\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven Compiler Plugin for ExpressionTree\nDESCRIPTION: This XML snippet configures the Maven compiler plugin to enable the ExpressionTree plugin and annotation processing for Solon Data Sqlink. This configuration is necessary for Solon Data Sqlink to function correctly during compilation.\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/solon-data/solon-data-sqlink/README.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<build>\n    <plugins>\n        <plugin>\n            <groupId>org.apache.maven.plugins</groupId>\n            <artifactId>maven-compiler-plugin</artifactId>\n            <version>${maven-compiler.version}</version>\n            <configuration>\n                <!--必须要配置，否则不生效-->\n                <compilerArgs>\n                    <arg>-Xplugin:ExpressionTree</arg>\n                </compilerArgs>\n                <annotationProcessorPaths>\n                    <!--必须要配置，否则会有意外情况-->\n                    <path>\n                        <groupId>org.noear</groupId>\n                        <artifactId>solon-data-sqlink</artifactId>\n                    </path>\n                    <!-- lombok -->\n                    <!--<path>-->\n                    <!--    <groupId>org.projectlombok</groupId>-->\n                    <!--    <artifactId>lombok</artifactId>-->\n                    <!--    <version>${lombok.version}</version>-->\n                    <!--</path>-->\n                </annotationProcessorPaths>\n            </configuration>\n        </plugin>\n    </plugins>\n</build>\n```\n\n----------------------------------------\n\nTITLE: Using I18n in Beetl Template\nDESCRIPTION: This snippet shows how to access internationalized messages within a Beetl template using the `i18n` object. It demonstrates accessing messages directly and using the `get` and `getAndFormat` methods.\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/solon-base/solon-i18n/README.md#_snippet_6\n\nLANGUAGE: html\nCODE:\n```\ni18n::${i18n[\"login.title\"]}\ni18n::${@i18n.get(\"login.title\")}\ni18n::${@i18n.getAndFormat(\"login.title\",12,\"a\")}\n```\n\n----------------------------------------\n\nTITLE: Local Circuit Breaker Configuration\nDESCRIPTION: This snippet configures a local circuit breaker named `test` within Solon Cloud. The value `1` likely represents a threshold or configuration parameter for the circuit breaker. This configuration is part of the `solon.cloud.local` settings, allowing for local control of circuit breaking behavior, primarily used for local testing. Dependencies: solon.cloud.\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/solon-cloud/solon-cloud/README2.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsolon.cloud.local:\n  breaker:\n    test: 1\n```\n\n----------------------------------------\n\nTITLE: Registering Stomp Broker with Solon\nDESCRIPTION: This snippet shows how to register a StompBroker with Solon. It extends the `StompBroker` class and adds a server listener to forward messages to Solon Handlers (methods annotated with `@Mapping`). This allows WebSocket messages to be processed by standard Solon controller methods. The `/chat` endpoint is used for WebSocket connections.\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/solon-net/solon-net-stomp/README.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n@ServerEndpoint(\"/chat\")\npublic class ChatStompBroker extends StompBroker {\n    public ChatStompBroker(){\n        //转发到 Solon Handler 体系（即 @Mapping 函数）\n        this.addServerListener(new ToHandlerStompListener(this));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Nami Builder with URL\nDESCRIPTION: This example shows how to use the `Nami.builder()` to create a service instance programmatically by specifying the URL, encoder, and interface class. It constructs a Nami client without relying on dependency injection.\nSOURCE: https://github.com/opensolon/solon/blob/main/__release/nami-bundle/README.md#_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic class Demo2{\n    IComplexModelService service = Nami.builder()\n                                        .encoder(SnackTypeEncoder.instance)\n                                        .url(\"http://localhost:8080/ComplexModelService/\")\n                                        .create(IComplexModelService.class);\n    \n    public void test(){\n        ComplexModel tmp = service.read(1);\n        service.save(tmp);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using I18n in Freemarker Template\nDESCRIPTION: This snippet shows how to access internationalized messages within a Freemarker template using the `i18n` object. It demonstrates accessing messages directly and using the `get` and `getAndFormat` methods.\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/solon-base/solon-i18n/README.md#_snippet_8\n\nLANGUAGE: html\nCODE:\n```\ni18n::${i18n[\"login.title\"]}\ni18n::${i18n.get(\"login.title\")}\ni18n::${i18n.getAndFormat(\"login.title\",12,\"a\")}\n```\n\n----------------------------------------\n\nTITLE: Solon Logging: Default YAML Configuration\nDESCRIPTION: This YAML snippet shows the default logging configuration for Solon applications. It includes settings for console and file appenders, as well as example logger level configurations. The configuration supports properties like app name, logging levels, and patterns, with options for cloud logging integration.\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/solon-logging/solon-logging-log4j2/README.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsolon.app:\n  name: demoapp\n\n# 以下为默认值，可以都不加，或者想改哪行加哪行(支持\"云端配置服务\"进行配置，支持写到\"云端日志服务\")\nsolon.logging.appender:\n  console:\n    level: TRACE\n    pattern: \"%highlight{%-5level %d{yyyy-MM-dd HH:mm:ss.SSS} [-%t][*%X{traceId}]%tags[%logger{20}]:} %n%msg%n\"\n  file:\n    name: \"logs/${solon.app.name}\"\n    extension: \".log\"\n    level: INFO\n    pattern: \"%-5level %d{yyyy-MM-dd HH:mm:ss.SSS} [-%t][*%X{traceId}]%tags[%logger{20}]: %n%msg%n\"\n  cloud:\n    level: INFO\n\n# 记录器级别的配置示例\nsolon.logging.logger:\n  \"root\": #默认记录器配置\n    level: INFO\n  \"features\":\n    level: DEBUG\n  \"org.jetty.demo\":\n    level: WARN\n```\n\n----------------------------------------\n\nTITLE: Nami Client Usage with Upstream Provider\nDESCRIPTION: This code snippet demonstrates how to use the Nami client with an upstream provider. It creates an `IComplexModelService` instance using the builder API and an upstream lambda expression to retrieve the service URL dynamically. The path is set to '/ComplexModelService/' and the `SnackTypeEncoder` is used for encoding and decoding the data.\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/nami/README.md#_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic class Demo3{\n    IComplexModelService service = Nami.builder()\n                                        .encoder(SnackTypeEncoder.instance)\n                                        .path(\"/ComplexModelService/\")\n                                        .upstream(()->\"http://localhost:8080\")\n                                        .create(IComplexModelService.class);\n    \n    public void test(){\n        ComplexModel tmp = service.read(1);\n        service.save(tmp);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using I18n in Velocity Template\nDESCRIPTION: This snippet shows how to access internationalized messages within a Velocity template using the `i18n` object. It demonstrates accessing messages directly and using the `get` and `getAndFormat` methods.\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/solon-base/solon-i18n/README.md#_snippet_10\n\nLANGUAGE: html\nCODE:\n```\ni18n::${i18n[\"login.title\"]}\ni18n::${i18n.get(\"login.title\")}\ni18n::${i18n.getAndFormat(\"login.title\",12,\"a\")}\n```\n\n----------------------------------------\n\nTITLE: Enabling HTTP/2 with Undertow in Solon (Java)\nDESCRIPTION: This Java snippet shows how to enable HTTP/2 support in a Solon application using the Undertow web server.  It accesses the Undertow builder during application startup, sets the `UndertowOptions.ENABLE_HTTP2` option to `true`, and adds an additional HTTP listener on port 8081.  Requires Solon and Undertow dependencies.\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/solon-boot/solon-boot-undertow/README.md#_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\npublic class Http2 {\n    public static void main(String[] args) {\n        Solon.start(Http2.class, args, app -> {\n            app.onEvent(Undertow.Builder.class, e -> {\n                //启用 http2\n                e.setServerOption(UndertowOptions.ENABLE_HTTP2, true);\n                //再加个 http 监听（server.port 被 https 占了）//如果不需要，则不加\n                e.addHttpListener(8081, \"0.0.0.0\");\n            });\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTPS with YAML in Solon\nDESCRIPTION: This YAML snippet configures HTTPS settings within Solon's `app.yml` file. It specifies the path to the keystore file (`keyStore`) and the keystore password (`keyPassword`). The `keyStore` path can point to a file system location or a classpath resource.\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/solon-boot/solon-boot-jetty/README.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nserver.ssl:\n  keyStore: \"/demo.jks\" #或者应用内资源文件 \"classpath:demo.jks\"\n  keyPassword: \"demo\"\n```\n\n----------------------------------------\n\nTITLE: Configuring SSL Certificate via Startup Command (Shell)\nDESCRIPTION: This snippet shows how to configure the SSL certificate using startup commands. The `-Dserver.ssl.keyStore` option specifies the path to the keystore file, and the `-Dserver.ssl.keyPassword` option specifies the password for the keystore. These are JVM system properties.\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/solon-boot/solon-boot-undertow/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\njava -Dserver.ssl.keyStore=/demo.jks \n     -Dserver.ssl.keyPassword=demo \n     -jar  demo.jar\n```\n\n----------------------------------------\n\nTITLE: Health Check Configuration (YAML)\nDESCRIPTION: This YAML snippet indicates that no explicit configuration is required for the Solon health check feature. The feature is designed to work out-of-the-box without needing any specific settings.\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/solon-detector/solon-health/README.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# No configuration.\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTPS with Shell arguments in Solon\nDESCRIPTION: This shell command demonstrates how to configure HTTPS settings via command-line arguments when starting a Solon application. It utilizes the `-D` flag to set system properties for the keystore path (`server.ssl.keyStore`) and keystore password (`server.ssl.keyPassword`).\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/solon-boot/solon-boot-jetty/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\njava -Dserver.ssl.keyStore=/demo.jks \n     -Dserver.ssl.keyPassword=demo \n     -jar  demo.jar\n```\n\n----------------------------------------\n\nTITLE: JVM Parameter for JDK 9-16 Serialization\nDESCRIPTION: This shell command shows how to add a JVM parameter to resolve serialization permission issues in JDK 9 through JDK 16. The `--illegal-access=permit` parameter allows access to restricted parts of the JDK, thus resolving serialization issues.\nSOURCE: https://github.com/opensolon/solon/blob/main/__test/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n#示例：\njava --illegal-access=permit -jar xxx.jar\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTPS via Command Line in Solon\nDESCRIPTION: This snippet shows how to configure HTTPS certificate settings for a Solon application using command-line arguments when starting the Java application. It uses the `-D` flag to set the `server.ssl.keyStore` and `server.ssl.keyPassword` system properties. These properties define the path to the keystore file and the keystore password respectively.\nSOURCE: https://github.com/opensolon/solon/blob/main/__hatch/solon-boot-nettyhttp/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\njava -Dserver.ssl.keyStore=/demo.jks \n     -Dserver.ssl.keyPassword=demo \n     -jar  demo.jar\n```\n\n----------------------------------------\n\nTITLE: Adding Maven Dependency for Solon I18n\nDESCRIPTION: This XML snippet adds the Solon I18n plugin as a dependency to your Maven project. This is a required step for using the plugin.\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/solon-base/solon-i18n/README.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependencies>\n    <dependency>\n        <groupId>org.noear</groupId>\n        <artifactId>solon-i18n</artifactId>\n    </dependency>\n</dependencies>\n```\n\n----------------------------------------\n\nTITLE: Application Preheat Example in Solon (Java)\nDESCRIPTION: This snippet showcases how to preheat a Solon application using `PreheatUtils` and bean invocation. It requires the Solon framework, `PreheatUtils`, and a `HelloService` bean.  The example preheats via an HTTP request to `/healthz` and by calling the `hello()` method of the `HelloService` bean.\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/solon-net/solon-net-httputils/README.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class App {\n    public static void maing(String[] args) {\n        Solon.start(App.class, args);\n\n        //用http请求自己进行预热\n        PreheatUtils.preheat(\"/healthz\");\n\n        //用bean预热\n        HelloService service = Aop.get(HelloService.class);\n        service.hello();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Decryption Interceptor (Java)\nDESCRIPTION: This Java snippet defines a decryption interceptor that extends the `Interceptor<String>` class. It overrides the `doIntercept` method to decrypt a given string value after it's retrieved from the database.\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/solon-data/solon-data-sqlink/README.md#_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nimport org.noear.solon.data.sqlink.base.SqLinkConfig;\nimport org.noear.solon.data.sqlink.base.intercept.Interceptor;\n\npublic class Decryption extends Interceptor<String> {\n    @Override\n    public String doIntercept(String value, SqLinkConfig config) {\n        return decrypt(value);\n    }\n\n    private String decrypt(String value) {\n        // 解密逻辑\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Solon Gradle Plugin in Kotlin\nDESCRIPTION: This snippet demonstrates how to configure the Solon Gradle plugin in a `build.gradle.kts` file using Kotlin DSL. It includes setting up the classpath dependency, applying the plugin, and configuring the main class for the application using extension configuration and task type configuration for JAR and WAR packaging.  Repositories include mavenLocal, aliyun and mavenCentral.\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/solon-tool/solon-gradle-plugin/README.md#_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nbuildscript {\n    repositories {\n        mavenLocal()\n        maven { setUrl(\"https://maven.aliyun.com/repository/public\") }\n        mavenCentral()\n    }\n\n    dependencies {\n        classpath(\"org.noear:solon-gradle-plugin:x.y.z\")\n    }\n}\n\n// 引用插件\napply(plugin = \"org.noear.solon\")\n\n// 统一配置\nextensions.configure(org.noear.solon.gradle.dsl.SolonExtension::class.java) {\n    mainClass.set(\"com.example.demo.App\")\n}\n\n// 单独配置\ntasks.withType<org.noear.solon.gradle.tasks.bundling.SolonJar> {\n    mainClass.set(\"com.example.demo.App\")\n}\n\ntasks.withType<org.noear.solon.gradle.tasks.bundling.SolonWar> {\n    mainClass.set(\"com.example.demo.App\")\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using I18n in Thymeleaf Template\nDESCRIPTION: This snippet shows how to access internationalized messages within a Thymeleaf template using the `i18n` object and the `th:text` attribute.  It demonstrates using the `get` and `getAndFormat` methods.\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/solon-base/solon-i18n/README.md#_snippet_9\n\nLANGUAGE: html\nCODE:\n```\ni18n::<span th:text='${i18n.get(\"login.title\")}'></span>\ni18n::<span th:text='${i18n.getAndFormat(\"login.title\",12,\"a\")}'></span>\n```\n\n----------------------------------------\n\nTITLE: Solon Configuration Metadata Structure\nDESCRIPTION: This JSON snippet demonstrates the high-level structure of the solon-configuration-metadata.json file. It contains two main properties: 'properties' (an array for defining configuration properties) and 'hints' (an array for defining configuration hints).  This structure is used to provide metadata about application configuration options to Solon.\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/__doc/solon-configuration-metadata.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"properties\": [],\n  \"hints\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Using Stomp Emitter in Solon Controller\nDESCRIPTION: This code snippet demonstrates how to use the `StompEmitter` to send messages from a Solon controller. It showcases the use of `@To` annotation for directing messages to specific destinations.  It includes methods for handling messages, mapping them to URLs, and sending them to all subscribers or the current user. `HtmlUtils.htmlEscape` is used to prevent XSS vulnerabilities. The `StompEmitter` is injected using `@Inject`.\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/solon-net/solon-net-stomp/README.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@Controller\npublic class TestController {\n    @Inject //@Inject(\"/chat\") 多经纪人时，指定名字\n    StompEmitter stompEmitter;\n\n    @Message\n    @Mapping(\"/app/hello\")\n    @To(\"*: /topic/greetings\") //发给所有订阅者\n    public Greeting greeting(HelloMessage message) throws Exception {\n        Thread.sleep(1000); // simulated delay\n        return new Greeting(\"Hello, \" + HtmlUtils.htmlEscape(message.getName()) + \"!\");\n    }\n    \n    @Message\n    @Mapping(\"/topic/hello\")\n    @To(\".: /topic/greetings\") //发给当前用户\n    public Greeting greeting2(HelloMessage message) throws Exception {\n        Thread.sleep(1000); // simulated delay\n        //log.info (\"Hello, \" + HtmlUtils.htmlEscape(message.getName()) + \"!\");\n        return new Greeting(\"Hello, \" + HtmlUtils.htmlEscape(message.getName()) + \"!\");\n    }\n\n    @Http\n    @Mapping(\"/hello2\")\n    public void greeting3(Context ctx, HelloMessage message) throws Exception {\n        Thread.sleep(1000); // simulated delay\n\n        String payload = ctx.renderAndReturn(new Greeting(\"Hello, \" + HtmlUtils.htmlEscape(message.getName()) + \"!\"));\n        stompEmitter.sendTo(\"/topic/greetings\", payload);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven Assembly Plugin\nDESCRIPTION: This XML snippet shows a more complex configuration using the maven-assembly-plugin for creating a jar with dependencies. It configures the compiler plugin, specifies the assembly descriptor, and defines an execution to create the assembled jar during the package phase.  It sets compiler arguments, java source and target versions and encoding.\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/solon-tool/solon-maven-plugin/README.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<build>\n    <plugins>\n        <plugin>\n            <groupId>org.apache.maven.plugins</groupId>\n            <artifactId>maven-compiler-plugin</artifactId>\n            <version>${maven-compiler.version}</version>\n            <configuration>\n                <compilerArgument>-parameters</compilerArgument> \n                <source>${java.version}</source>\n                <target>${java.version}</target>\n                <encoding>UTF-8</encoding>\n            </configuration>\n        </plugin>\n        \n        <plugin>\n            <groupId>org.apache.maven.plugins</groupId>\n            <artifactId>maven-assembly-plugin</artifactId>\n            <version>${maven-assembly.version}</version>\n            <configuration>\n                <finalName>${project.artifactId}</finalName>\n                <appendAssemblyId>false</appendAssemblyId>\n                <descriptorRefs>\n                    <descriptorRef>jar-with-dependencies</descriptorRef>\n                </descriptorRefs>\n                <archive>\n                    <manifest>\n                        <mainClass>webapp.DemoApp</mainClass>\n                    </manifest>\n                </archive>\n            </configuration>\n            <executions>\n                <execution>\n                    <id>make-assembly</id>\n                    <phase>package</phase>\n                    <goals>\n                        <goal>single</goal>\n                    </goals>\n                </execution>\n            </executions>\n        </plugin>\n    </plugins>\n</build>\n```\n\n----------------------------------------\n\nTITLE: Adding Solon Web Stop Dependency\nDESCRIPTION: This XML snippet adds the `solon-web-stop` dependency to a Maven project.  It allows the project to utilize the remote service shutdown functionality provided by the extension. No further dependencies are needed.\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/solon-web/solon-web-stop/README.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>org.noear</groupId>\n    <artifactId>solon-web-stop</artifactId>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Rendering Properties Output\nDESCRIPTION: This snippet demonstrates how parameters are rendered in the properties format, including handling of array-valued parameters. It shows key-value pairs where keys can be simple names or array indices, and values are strings or numbers.\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/solon-serialization/solon-serialization-properties/README.md#_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\naaa[0]=1\naaa[1]=2\ndate=Sat Apr 27 08:46:52 CST 2024\nid=1\nname=noear\nsex=0\n```\n\n----------------------------------------\n\nTITLE: Solon Bean Extension Example (Java)\nDESCRIPTION: This Java code snippet demonstrates how to extend Solon using the getBeanAsync method to manually retrieve a bean before other injections occur, and also shows how to use the @Bean annotation for automatic injection during scanning. This is an example for replacing deprecated event mechanisms.\nSOURCE: https://github.com/opensolon/solon/blob/main/V3.0.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n@Configuration\npublic class App {\n    public static void main(String[] args) {\n        Solon.start(App.class, args, app -> {\n            //1.第一时间手动获取（在其它注入前执行）\n            app.context().getBeanAsync(Xxx.class, e -> {\n\n            });\n        });\n    }\n\n    //2.由扫描时自动注入\n    @Bean\n    public void cfg(Xxx xxx) {\n\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing JSON Serialization in Solon with Java\nDESCRIPTION: This Java code snippet demonstrates how to customize JSON serialization within a Solon application using converters. It shows how to add converters for Date, LocalDate, and LocalDateTime to format them according to specific patterns. The customization is applied globally through the SnackRenderFactory.\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/solon-serialization/solon-serialization-snack3/README.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class DemoApp {\n    public static void main(String[] args){\n        Solon.start(DemoApp.class, args, app->{\n            initMvcJsonCustom();\n        });\n    }\n\n    /**\n     * 初始化json定制（需要在插件运行前定制）\n     */\n    private static void initMvcJsonCustom() {\n        //通过转换器，做简单类型的定制\n        SnackRenderFactory.global\n                .addConvertor(Date.class, s -> s.getTime());\n\n        SnackRenderFactory.global\n                .addConvertor(LocalDate.class, s -> s.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd\")));\n\n        SnackRenderFactory.global\n                .addConvertor(LocalDateTime.class, s -> s.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\")));\n\n\n        SnackRenderFactory.global.add\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Solon Doc Generation\nDESCRIPTION: This code snippet shows how to enable the Solon Doc generation feature within the main application class.  It checks if the application is in debug or files mode to enable the documentation endpoint, which will be available at `/doc.html` after the application starts. It uses `Solon.start` to bootstrap the application.\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/solon-docs/solon-swagger2-knife4j/README.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class App {\n    public static void main(String[] args) {\n        Solon.start(App.class, args, app -> {\n            //开发模式，或调试模式下才开启文档（或者自己定义配置控制）//或者一直开着（默认是开着的）\n            app.enableDoc(app.cfg().isDebugMode() || app.cfg().isFilesMode());\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Cache Annotation in Solon Controller (Java)\nDESCRIPTION: This Java code snippet shows how to apply the `@Cache` annotation to a method within a Solon controller.  This enables automatic caching of the method's return value.  The method takes a string `name` as input and returns a formatted string.\nSOURCE: https://github.com/opensolon/solon/blob/main/solon-projects/solon-data/solon-cache-redisson/README.md#_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n//应用\n@Controller\npublic class DemoController {\n    @Cache\n    public String hello(String name) {\n        return String.format(\"Hello {0}!\", name);\n    }\n}\n```"
  }
]