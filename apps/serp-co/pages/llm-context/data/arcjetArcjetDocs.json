[
  {
    "owner": "arcjet",
    "repo": "arcjet-docs",
    "content": "TITLE: Configuring Arcjet Rules for Feedback Form Protection in TypeScript\nDESCRIPTION: This snippet demonstrates how to configure Arcjet rules to protect a feedback form. It includes rules for blocking bots, validating email addresses, and rate limiting submissions from the same IP address.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/blueprints/feedback-form.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// ... imports, etc\n// See https://docs.arcjet.com/get-started\nconst aj = arcjet({\n  key: process.env.ARCJET_KEY!, // Get your site key from https://app.arcjet.com\n  characteristics: [\"ip.src\"], // Track requests by IP\n  rules: [\n    // Shield protects your app from common attacks e.g. SQL injection:\n    shield({ mode: \"LIVE\" }),\n    // Block all bots. See https://arcjet.com/bot-list\n    detectBot({\n      mode: \"LIVE\",\n      allow: [],\n    }),\n    // Strict email validation to block disposable, invalid, and domains\n    // with no valid MX records:\n    validateEmail({\n      mode: \"LIVE\",\n      block: [\"DISPOSABLE\", \"INVALID\", \"NO_MX_RECORDS\"],\n    }),\n    // Rate limit forms being submitted from the same IP address:\n    slidingWindow({\n      mode: \"LIVE\",\n      interval: \"10m\", // counts requests over a 10-minute sliding window\n      max: 5, // allows 5 submissions within the window\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Selective Cookie Banner Display with Arcjet IP Geolocation\nDESCRIPTION: TypeScript implementation for determining whether to show cookie banners based on user location. The code checks against lists of countries and US states that require cookie consent notices, using Arcjet's IP geolocation data to make the determination. Includes comprehensive lists of EU/EEA countries and US states with privacy regulations.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/blueprints/cookie-banner.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst countriesRequiringCookieBanner = [\n  \"AT\",\n  \"BE\",\n  \"BG\",\n  \"HR\",\n  \"CY\",\n  \"CZ\",\n  \"DK\",\n  \"EE\",\n  \"FI\",\n  \"FR\",\n  \"DE\",\n  \"GR\",\n  \"HU\",\n  \"IE\",\n  \"IT\",\n  \"LV\",\n  \"LT\",\n  \"LU\",\n  \"MT\",\n  \"NL\",\n  \"PL\",\n  \"PT\",\n  \"RO\",\n  \"SK\",\n  \"SI\",\n  \"ES\",\n  \"SE\",\n  \"UK\",\n  \"NO\",\n  \"IS\",\n  \"LI\",\n  \"CA\",\n  \"BR\",\n  \"MX\",\n  \"NG\",\n  \"AR\",\n];\n\nconst statesRequiringCookieBanner = [\n  \"California\",\n  \"Virginia\",\n  \"Colorado\",\n  \"Connecticut\",\n  \"Utah\",\n  \"Texas\",\n  \"Oregon\",\n  \"Montana\",\n];\n\n// ... imports, client configuration, etc\n// See https://docs.arcjet.com/get-started\nconst decision = await aj.protect(req);\n\nif (\n  decision.ip.hasCountry() &&\n  countriesRequiringCookieBanner.contains(decision.ip.country)\n) {\n  // Show the cookie banner\n}\n\nif (\n  decision.ip.hasRegion() &&\n  statesRequiringCookieBanner.contains(decision.ip.region)\n) {\n  // Show the cookie banner\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Additional IP-Based Security Checks with Arcjet\nDESCRIPTION: This snippet extends the base Arcjet protection by adding IP geolocation and VPN/proxy detection. It restricts access to users from specific countries (US and UK) and blocks traffic from hosting providers, VPNs, and proxies, with an exception for Apple Private Relay.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/blueprints/payment-form.mdx#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Follows on from the rules set above.\n// This would go inside your request handler\nconst decision = await aj.protect(request, { email });\n\n// Evaluate the various Arcjet checks\nif (decision.isDenied()) {\n  if (decision.reason.isBot()) {\n    console.error(\"Bot detected\", decision);\n    // Return 403\n  } else if (decision.reason.isRateLimit()) {\n    console.error(\"Rate limit exceeded\", decision);\n    // Return 429 or 403\n  } else if (decision.reason.isEmail()) {\n    console.error(\"Invalid email\", decision);\n    // Return 400\n  } else {\n    console.error(\"Request denied\", decision);\n    // Return 403\n  }\n}\n\n// Arcjet Pro plan verifies the authenticity of common bots using IP data.\n// Verification isn't always possible, so we recommend checking the decision\n// separately.\n// https://docs.arcjet.com/bot-protection/reference#bot-verification\nif (decision.results.some(isSpoofedBot)) {\n  console.error(\"Spoofed bot detected\", decision);\n  // Return 403\n}\n\n// Base Arcjet rules all passed, but we can do further inspection based on\n// our knowledge of our customers\n\n// Check if the IP address is from a hosting provider\nif (decision.ip.hasASN() && decision.ip.asnType === \"hosting\") {\n  // The network this IP belongs to is a hosting provider, which makes it\n  // more likely to be a VPN, proxy, or other suspicious network.\n  console.error(\"Hosting provider detected\", decision);\n  // Return 403\n}\n\nif (\n  decision.ip.isHosting() ||\n  decision.ip.isVpn() ||\n  decision.ip.isProxy() ||\n  decision.ip.isRelay()\n) {\n  // The IP is from a hosting provider, VPN, or proxy. We can check the name\n  // of the service and customize the response\n  if (decision.ip.hasService()) {\n    if (decision.ip.service !== \"Apple Private Relay\") {\n      // We trust Apple Private Relay because it requires an active iCloud\n      // subscription, so deny all other VPNs\n      console.error(\"VPN detected\", decision);\n      // Return 403\n    } else {\n      // Apple Private Relay is allowed\n      console.info(\"Apple Private Relay detected\", decision);\n    }\n  } else {\n    // The service name is not available, but we still think it's a VPN\n    console.error(\"VPN detected\", decision);\n    // Return 403\n  }\n}\n\n// Only allow users from the US and UK\nif (decision.ip.hasCountry() && ![\"US\", \"UK\"].includes(decision.ip.country)) {\n  console.error(\"Country not allowed\", decision);\n  // Return 403\n}\n\nconsole.info(\"Arcjet checks passed\", decision.id);\n```\n\n----------------------------------------\n\nTITLE: Configuring Arcjet SDK in TypeScript\nDESCRIPTION: Creates an Arcjet object with API key and rules. Demonstrates setting up shield and rate limiting rules with characteristics and proxies.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/reference/remix.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Arcjet } from \"@arcjet/remix\";\nimport { shield } from \"@arcjet/shield\";\nimport { rateLimit } from \"@arcjet/ip-rate-limit\";\n\nconst aj = new Arcjet({\n  key: process.env.ARCJET_KEY,\n  rules: [\n    shield(),\n    rateLimit({\n      requests: 100,\n      period: \"1m\",\n    }),\n  ],\n  characteristics: [\"ip\", \"userAgent\"],\n  proxies: [\"100.100.100.100\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Using Protect Function in TypeScript\nDESCRIPTION: Demonstrates how to use the protect function to execute protection rules on incoming requests. Shows handling of the decision object and different response scenarios.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/reference/remix.mdx#2025-04-12_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { json, LoaderFunction } from \"@remix-run/node\";\nimport { aj } from \"~/utils/arcjet\";\n\nexport const loader: LoaderFunction = async ({ request }) => {\n  const decision = await aj.protect({ request });\n\n  if (decision.isDenied()) {\n    return json({ error: \"Access denied\" }, { status: 403 });\n  }\n\n  // Your protected route logic here\n  return json({ message: \"Welcome to the protected route!\" });\n};\n```\n\n----------------------------------------\n\nTITLE: Chaining Arcjet and Auth.js in Next.js Middleware\nDESCRIPTION: This code demonstrates how to chain Arcjet Shield with Auth.js middleware in Next.js to add both protection and authentication to your pages. Arcjet runs first to protect against abuse, then Auth.js handles authentication.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/integrations/authjs.mdx#2025-04-12_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextResponse } from \"next/server\";\nimport type { NextRequest } from \"next/server\";\n\nimport { Arcjet } from \"@arcjet/next\";\nimport { createMiddlewareClient } from \"@supabase/auth-helpers-nextjs\";\nimport { authMiddleware } from \"@arcjet/auth.js\";\n\n// Create an Arcjet instance\nconst aj = new Arcjet({\n  key: process.env.ARCJET_KEY,\n  shield: {},\n});\n\nexport async function middleware(req: NextRequest) {\n  // Step 1: Run Arcjet to protect all routes\n  const ajResponse = await aj.protect(req);\n  if (ajResponse) {\n    return ajResponse;\n  }\n\n  // Step 2: Run Auth.js middleware (configured separately)\n  const authJsResponse = await authMiddleware(req);\n  return authJsResponse;\n}\n\nexport const config = {\n  matcher: [\n    /*\n     * Match all request paths except for the ones starting with:\n     * - api/auth (Auth.js API routes)\n     * - _next/static (static files)\n     * - _next/image (image optimization files)\n     * - favicon.ico (favicon file)\n     * - public folder\n     */\n    \"/((?!api/auth|_next/static|_next/image|favicon.ico|public).*)\",\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Arcjet SDK in TypeScript\nDESCRIPTION: Example of creating an Arcjet instance with configuration options including API key, rules, and characteristics in TypeScript.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/reference/sveltekit.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport arcjet, { fixedWindow } from \"@arcjet/sveltekit\";\n\nconst aj = arcjet({\n  key: process.env.ARCJET_KEY!,\n  characteristics: [\"ip.src\"],\n  rules: [\n    fixedWindow({\n      window: \"1h\",\n      max: 60,\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Arcjet Rules for Payment Form Protection\nDESCRIPTION: This snippet demonstrates how to set up recommended Arcjet rules to protect checkout links. The configuration blocks bots, validates email addresses (including blocking free and disposable emails), and limits requests from the same IP address.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/blueprints/payment-form.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// ... imports, etc\n// See https://docs.arcjet.com/get-started\nconst aj = arcjet({\n  key: process.env.ARCJET_KEY!, // Get your site key from https://app.arcjet.com\n  characteristics: [\"ip.src\"], // Track requests by IP\n  rules: [\n    // Shield protects your app from common attacks e.g. SQL injection\n    shield({ mode: \"LIVE\" }),\n    // Create a bot detection rule\n    detectBot({\n      mode: \"LIVE\", // Blocks requests. Use \"DRY_RUN\" to log only\n      // Block all bots. See https://arcjet.com/bot-list\n      allow: [],\n    }),\n    validateEmail({\n      mode: \"LIVE\",\n      // Strict email validation to block disposable, invalid, free, and domains\n      // with no valid MX records. Free emails include Gmail, Hotmail, Yahoo,\n      // etc, so you may wish to remove this rule\n      block: [\"DISPOSABLE\", \"INVALID\", \"NO_MX_RECORDS\", \"FREE\"],\n    }),\n    // It would be unusual for a form to be submitted more than 5 times in 10\n    // minutes from the same IP address\n    slidingWindow({\n      mode: \"LIVE\",\n      interval: \"10m\", // counts requests over a 10 minute sliding window\n      max: 5, // allows 5 submissions within the window\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Analyzing IP for VPN and Proxy Detection using Arcjet SDK in TypeScript\nDESCRIPTION: This code snippet demonstrates how to use Arcjet's IP analysis to detect VPNs, proxies, and other suspicious networks. It checks the ASN type, IP type, and service name to make decisions based on the IP analysis results.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/blueprints/vpn-proxy-detection.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// ... imports, client configuration, etc\n// See https://docs.arcjet.com/get-started\nconst decision = await aj.protect(req);\n\nif (decision.ip.hasASN() && decision.ip.asnType === \"hosting\") {\n  // The network this IP belongs to is a hosting provider, which makes it more\n  // likely to be a VPN, proxy, or other suspicious network.\n}\n\nif (\n  decision.ip.isHosting() ||\n  decision.ip.isVpn() ||\n  decision.ip.isProxy() ||\n  decision.ip.isRelay()\n) {\n  // The IP is from a hosting provider, VPN, or proxy. We can check the name\n  // of the service and customize the response\n  if (decision.ip.hasService()) {\n    if (decision.ip.service === \"Apple Private Relay\") {\n      // We trust Apple Private Relay because it requires an active iCloud\n      // subscription, so we can allow it\n    } else {\n      // Do something else\n    }\n  } else {\n    // The service name is not available, but we can still do something here\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Rules in Arcjet Node.js SDK\nDESCRIPTION: Shows how to combine multiple rules (rate limiting and bot protection) to create a more complex protection strategy.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/reference/nodejs.mdx#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Arcjet } from \"@arcjet/node\";\nimport { rateLimit, botProtection } from \"@arcjet/protect\";\n\nconst aj = new Arcjet({\n  key: process.env.ARCJET_KEY,\n  rules: [\n    rateLimit({\n      mode: \"LIVE\",\n      rpm: 60\n    }),\n    botProtection({\n      mode: \"LIVE\",\n      action: \"BLOCK\"\n    })\n  ]\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Arcjet } = require(\"@arcjet/node\");\nconst { rateLimit, botProtection } = require(\"@arcjet/protect\");\n\nconst aj = new Arcjet({\n  key: process.env.ARCJET_KEY,\n  rules: [\n    rateLimit({\n      mode: \"LIVE\",\n      rpm: 60\n    }),\n    botProtection({\n      mode: \"LIVE\",\n      action: \"BLOCK\"\n    })\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Arcjet Traffic Sampling in Next.js Middleware\nDESCRIPTION: This code demonstrates how to create a Next.js middleware that applies Arcjet Shield WAF and bot detection rules to only a subset of your traffic (10% in this example). It uses a random sampling function to determine which requests should be processed with Arcjet rules.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/blueprints/sampling.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextResponse } from \"next/server\";\nimport type { NextRequest } from \"next/server\";\nimport { ArcjetNextMiddleware, Shield } from \"@arcjet/next\";\nimport { withRule } from \"@arcjet/protocol\";\n\n// Sample 10% of traffic for Arcjet processing\nconst SAMPLE_RATE = 0.1;\n\n// Simple random sampling function that returns true for SAMPLE_RATE percentage of requests\nfunction shouldSample(): boolean {\n  return Math.random() < SAMPLE_RATE;\n}\n\nexport const middleware = ArcjetNextMiddleware({\n  rules: (request) => {\n    // If this request is selected for sampling, apply Shield rules\n    if (shouldSample()) {\n      return [\n        // Apply Shield WAF and bot detection\n        withRule(Shield(), {\n          mode: \"LIVE\",\n        }),\n      ];\n    }\n\n    // For non-sampled traffic, return empty rules array (no rules applied)\n    return [];\n  },\n});\n\nexport const config = {\n  matcher: [\n    /*\n     * Match all request paths except for the ones starting with:\n     * - api (API routes)\n     * - _next/static (static files)\n     * - _next/image (image optimization files)\n     * - favicon.ico (favicon file)\n     */\n    \"/((?!api|_next/static|_next/image|favicon.ico).*)\",,\n  ],\n};\n\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ArcjetNextMiddleware, Shield } from \"@arcjet/next\";\nimport { withRule } from \"@arcjet/protocol\";\n\n// Sample 10% of traffic for Arcjet processing\nconst SAMPLE_RATE = 0.1;\n\n// Simple random sampling function that returns true for SAMPLE_RATE percentage of requests\nfunction shouldSample() {\n  return Math.random() < SAMPLE_RATE;\n}\n\nexport const middleware = ArcjetNextMiddleware({\n  rules: (request) => {\n    // If this request is selected for sampling, apply Shield rules\n    if (shouldSample()) {\n      return [\n        // Apply Shield WAF and bot detection\n        withRule(Shield(), {\n          mode: \"LIVE\",\n        }),\n      ];\n    }\n\n    // For non-sampled traffic, return empty rules array (no rules applied)\n    return [];\n  },\n});\n\nexport const config = {\n  matcher: [\n    /*\n     * Match all request paths except for the ones starting with:\n     * - api (API routes)\n     * - _next/static (static files)\n     * - _next/image (image optimization files)\n     * - favicon.ico (favicon file)\n     */\n    \"/((?!api|_next/static|_next/image|favicon.ico).*)\",,\n  ],\n};\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Trusted Proxies for Load Balancers\nDESCRIPTION: Example of configuring trusted proxies in Arcjet SDK to handle load balancers and correctly identify client IP addresses from X-Forwarded-For headers.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/reference/sveltekit.mdx#2025-04-12_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport arcjet, { fixedWindow } from \"@arcjet/sveltekit\";\n\nconst aj = arcjet({\n  key: process.env.ARCJET_KEY!,\n  characteristics: [\"ip.src\"],\n  rules: [\n    fixedWindow({\n      window: \"1h\",\n      max: 60,\n    }),\n  ],\n  proxies: [\"100.100.100.100\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Fixed Window Rate Limit with Custom Characteristic in Next.js\nDESCRIPTION: This snippet demonstrates how to set up a fixed window rate limit rule with a custom characteristic 'userId' in a Next.js application using Arcjet. It limits requests to 100 per minute for each unique user ID.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/rate-limiting/configuration.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Arcjet } from \"@arcjet/next\";\n\nconst aj = new Arcjet({\n  // Your Arcjet API key\n  key: process.env.ARCJET_KEY,\n});\n\naj.rateLimit({\n  name: \"user-limits\",\n  algorithm: \"fixedWindow\",\n  characteristics: [\"userId\"],\n  max: 100,\n  window: \"1m\",\n});\n```\n\n----------------------------------------\n\nTITLE: Protecting Auth.js Route Handler in Next.js App Router\nDESCRIPTION: This code demonstrates how to extend Auth.js route handler in Next.js App Router by adding Arcjet rate limiting and bot protection. It configures Arcjet to allow up to 10 requests in a 60-second window and blocks bot traffic.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/integrations/authjs.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from \"next-auth\";\nimport GitHub from \"next-auth/providers/github\";\nimport { Arcjet } from \"@arcjet/next\";\n\nconst handler = NextAuth({\n  providers: [GitHub],\n});\n\n// Add Arcjet's rate limiting protection to the request handler\nexport const { GET, POST } = new Arcjet({\n  key: process.env.ARCJET_KEY,\n  rules: [\n    {\n      // Rate limit login attempts\n      name: \"Rate limit login attempts\",\n      // Only rate limit POST requests (login/logout attempts)\n      when: (request) => request.method === \"POST\",\n      // Allow 10 login attempts per minute\n      rateLimit: {\n        window: \"60s\",\n        max: 10,\n        characteristics: [\"ip\"],\n      },\n      // Prevent bots from logging in\n      bot: {\n        block: true,\n      },\n    },\n  ],\n}).protect(handler);\n```\n\n----------------------------------------\n\nTITLE: Implementing Arcjet Protection in Next.js API Route\nDESCRIPTION: Complete implementation of Arcjet protection in a Next.js API route, including bot detection, shield WAF, and rate limiting rules with appropriate response handling.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/public/llms.txt#2025-04-12_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport arcjet, {\n  type ArcjetRuleResult,\n  detectBot,\n  shield,\n  tokenBucket,\n} from \"@arcjet/next\";\nimport { NextResponse } from \"next/server\";\n\nconst aj = arcjet({\n  key: process.env.ARCJET_KEY!,\n  rules: [\n    // Shield protects your app from common attacks e.g. SQL injection\n    shield({ mode: \"LIVE\" }),\n    // Create a bot detection rule\n    detectBot({\n      mode: \"LIVE\", // Blocks requests. Use \"DRY_RUN\" to log only\n      // Block all bots except the following\n      allow: [\n        \"CATEGORY:SEARCH_ENGINE\", // Google, Bing, etc\n        // Uncomment to allow these other common bot categories\n        // See the full list at https://arcjet.com/bot-list\n        //\"CATEGORY:MONITOR\", // Uptime monitoring services\n        //\"CATEGORY:PREVIEW\", // Link previews e.g. Slack, Discord\n      ],\n    }),\n    // Create a token bucket rate limit. Other algorithms are supported.\n    tokenBucket({\n      mode: \"LIVE\",\n      refillRate: 5, // Refill 5 tokens per interval\n      interval: 10, // Refill every 10 seconds\n      capacity: 10, // Bucket capacity of 10 tokens\n    }),\n  ],\n});\n\nexport async function GET(req: Request) {\n  // Deduct 5 tokens from the bucket for this request\n  const decision = await aj.protect(req, { requested: 5 });\n  console.log(\"Arcjet decision\", decision);\n\n  if (decision.isDenied()) {\n    if (decision.reason.isRateLimit()) {\n      return NextResponse.json(\n        { error: \"Too Many Requests\", reason: decision.reason },\n        { status: 429 },\n      );\n    } else if (decision.reason.isBot()) {\n      return NextResponse.json(\n        { error: \"No bots allowed\", reason: decision.reason },\n        { status: 403 },\n      );\n    } else {\n      return NextResponse.json(\n        { error: \"Forbidden\", reason: decision.reason },\n        { status: 403 },\n      );\n    }\n  }\n\n  return NextResponse.json({ message: \"Hello world\" });\n}\n```\n\n----------------------------------------\n\nTITLE: Protecting NextAuth Route Handler with Arcjet (Next.js App Router)\nDESCRIPTION: This code snippet demonstrates how to extend the NextAuth route handler in Next.js App Router to protect it from abuse using Arcjet. It configures a rate limit on the POST handler for authentication and logout attempts, allowing up to 10 requests within a 60-second window and preventing bot requests.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/integrations/nextauth.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ArcjetNextResponse } from \"@arcjet/next\";\nimport NextAuth from \"next-auth\";\nimport { AuthOptions } from \"next-auth\";\nimport { Arcjet } from \"@arcjet/next\";\n\nconst authOptions: AuthOptions = {\n  // ...\n};\n\nconst handler = NextAuth(authOptions);\n\nconst aj = new Arcjet({ token: process.env.ARCJET_KEY });\n\nexport { handler as GET, handler as HEAD };\n\nexport const POST = aj.protect(\n  {\n    shield: {\n      requestsPerWindow: 10,\n      windowSeconds: 60,\n      blockBot: true,\n    },\n  },\n  async function POST(request: Request) {\n    const response = await handler(request);\n    return ArcjetNextResponse.fromResponse(response);\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing User-Specific Rate Limits with NextAuth and Arcjet (Next.js Pages Router)\nDESCRIPTION: This code snippet shows how to implement user-specific rate limits using NextAuth's getServerSession() helper and Arcjet in a Next.js Pages Router. It applies different rate limits for authenticated and unauthenticated users on a private API route.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/integrations/nextauth.mdx#2025-04-12_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getServerSession } from \"next-auth\";\nimport { NextApiRequest, NextApiResponse } from \"next\";\nimport { Arcjet } from \"@arcjet/next\";\n\nconst aj = new Arcjet({ token: process.env.ARCJET_KEY });\n\nexport default aj.protect(\n  {\n    rateLimit: {\n      requestsPerWindow: 1000,\n      windowSeconds: 3600,\n      identityCharacteristics: [\"ip\", \"user_id\"],\n    },\n  },\n  async function handler(req: NextApiRequest, res: NextApiResponse) {\n    const session = await getServerSession(req, res);\n    const userId = session?.user?.email ?? \"anonymous\";\n\n    await aj.run(\n      {\n        ip: req.socket.remoteAddress,\n        user_id: userId,\n      },\n      async () => {\n        // Your API logic here\n        res.status(200).json({ message: \"Hello from protected API route\" });\n      }\n    );\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Rules in TypeScript\nDESCRIPTION: Shows how to combine multiple protection rules in TypeScript, including rate limiting and bot protection. Rule execution is automatically optimized regardless of order.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/reference/bun.mdx#2025-04-12_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport arcjet, { fixedWindow, shield, botProtection } from \"@arcjet/bun\";\nimport { env } from \"bun\";\n\nconst aj = arcjet({\n  key: env.ARCJET_KEY!,\n  rules: [\n    fixedWindow({ window: \"1h\", max: 60 }),\n    shield(),\n    botProtection(),\n  ],\n});\n\nconst server = Bun.serve({\n  fetch: aj.handler(async (request) => {\n    const decision = await aj.protect({ request });\n\n    if (decision.isDenied()) {\n      return new Response(\n        JSON.stringify({ message: \"You have been rate limited\" }),\n        { status: 429 }\n      );\n    }\n\n    // Your API logic here\n    return new Response(\"Hello, world!\");\n  }),\n  port: 3000,\n});\n```\n\n----------------------------------------\n\nTITLE: Using Arcjet Protect Function in Node.js\nDESCRIPTION: Demonstrates how to use the protect function to execute protection rules on incoming requests, including handling the decision and potential errors.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/reference/nodejs.mdx#2025-04-12_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Arcjet } from \"@arcjet/node\";\nimport { rateLimit } from \"@arcjet/protect\";\nimport express from \"express\";\n\nconst aj = new Arcjet({\n  key: process.env.ARCJET_KEY,\n  rules: [rateLimit({ mode: \"LIVE\", rpm: 60 })]\n});\n\nconst app = express();\n\napp.use(async (req, res, next) => {\n  try {\n    const decision = await aj.protect({\n      request: {\n        url: req.url,\n        method: req.method,\n        headers: req.headers,\n        ip: req.ip\n      }\n    });\n\n    if (decision.isDenied()) {\n      return res.status(429).json({ error: \"Too Many Requests\" });\n    }\n\n    next();\n  } catch (error) {\n    console.error(\"Arcjet error:\", error);\n    next();\n  }\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Arcjet } = require(\"@arcjet/node\");\nconst { rateLimit } = require(\"@arcjet/protect\");\nconst express = require(\"express\");\n\nconst aj = new Arcjet({\n  key: process.env.ARCJET_KEY,\n  rules: [rateLimit({ mode: \"LIVE\", rpm: 60 })]\n});\n\nconst app = express();\n\napp.use(async (req, res, next) => {\n  try {\n    const decision = await aj.protect({\n      request: {\n        url: req.url,\n        method: req.method,\n        headers: req.headers,\n        ip: req.ip\n      }\n    });\n\n    if (decision.isDenied()) {\n      return res.status(429).json({ error: \"Too Many Requests\" });\n    }\n\n    next();\n  } catch (error) {\n    console.error(\"Arcjet error:\", error);\n    next();\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Protecting Pages with Arcjet Middleware (TypeScript)\nDESCRIPTION: Implementation of Arcjet protection using Next.js middleware in TypeScript for the App Router. Sets up route matching and protection for specific paths.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/reference/nextjs/Examples.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{ProtectPageMiddlewareTS}\n```\n\n----------------------------------------\n\nTITLE: Implementing Fixed Window Rate Limiting with Arcjet in Next.js\nDESCRIPTION: This snippet demonstrates how to configure a fixed window rate limit rule that allows 100 requests in a 60-second window. The rate limit is applied to all requests to /api/hello and tracked by the client's IP address.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/rate-limiting/algorithms.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Arcjet } from \"@arcjet/next\";\nimport { ArcjetResponse } from \"@/libs/ArcjetResponse\";\n\nconst aj = new Arcjet({\n  key: process.env.ARCJET_KEY!,\n  rules: [\n    {\n      // type of rule: rate limit\n      name: \"rate_limit\",\n      // type of algorithm\n      type: \"fixed_window\",\n      // maximum number of requests\n      max: 100,\n      // window size in seconds\n      window: 60,\n      // what to key the rate limit by\n      key: \"ip\",\n      // what to match on\n      match: {\n        url: \"/api/hello\",\n      },\n    },\n  ],\n});\n\nexport async function GET(req: Request) {\n  const decision = await aj.protect(req);\n\n  if (decision.isDenied()) {\n    return ArcjetResponse.rateLimit(decision);\n  }\n\n  return new Response(\"Hello, World!\");\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Arcjet Within NestJS Route Controller\nDESCRIPTION: This code demonstrates how to implement Arcjet directly within a NestJS route controller. It provides maximum flexibility for customizing rules and responses.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/sensitive-info/reference/nestjs/DecoratorRoutes.mdx#2025-04-12_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller, Get, Req, Res, HttpStatus } from \"@nestjs/common\";\nimport { Request, Response } from \"express\";\nimport { ArcjetClient } from \"@arcjet/node\";\n\n@Controller()\nexport class AppController {\n  constructor(private readonly arcjet: ArcjetClient) {}\n\n  @Get()\n  async getHello(@Req() req: Request, @Res() res: Response) {\n    const result = await this.arcjet.protect({\n      request: req,\n      rules: {\n        rateLimit: { tokensPerInterval: 10, interval: \"1 minute\" },\n      },\n    });\n\n    if (result.decision === \"DENY\") {\n      return res\n        .status(HttpStatus.TOO_MANY_REQUESTS)\n        .json({ error: \"Too many requests\" });\n    }\n\n    return res.json({ message: \"Hello World!\" });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Arcjet SDK in Next.js (TypeScript)\nDESCRIPTION: Demonstrates how to create and configure an Arcjet object with API key and rules in a Next.js application using TypeScript. It shows setting up required fields like 'key' and 'rules', as well as optional fields like 'characteristics' and 'proxies'.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/reference/nextjs.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport arcjet, { fixedWindow } from \"@arcjet/next\";\n\nconst aj = arcjet({\n  key: process.env.ARCJET_KEY,\n  characteristics: [\"ip.src\"],\n  rules: [\n    fixedWindow({\n      window: \"1h\",\n      max: 60,\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Arcjet Protection in TypeScript Server Route\nDESCRIPTION: TypeScript server-side code for handling form submissions with Arcjet protection. The code validates the submission and uses the ARCJET_KEY for authentication.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/signup-protection/quick-start/sveltekit/Step3.mdx#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n<Code\n  code={Step3TS}\n  lang=\"ts\"\n  title=\"/src/routes/form/+server.ts\"\n  mark={[\"ARCJET_KEY\"]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Basic IP Detection Usage in TypeScript\nDESCRIPTION: Demonstrates how to use the ip() function to detect IP addresses from different request objects including standard Request, Node.js IncomingMessage, and Next.js NextRequest.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/ip.mdx#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ip } from \"@arcjet/ip\";\n\n// Standard Request\nconst request = new Request(\"https://example.com\");\nconst address = ip(request); // \"203.0.113.195\"\n\n// Node.js IncomingMessage\nimport { IncomingMessage } from \"node:http\";\nconst message = new IncomingMessage();\nconst nodeAddress = ip(message); // \"203.0.113.195\"\n\n// Next.js NextRequest\nimport { NextRequest } from \"next/server\";\nconst nextRequest = new NextRequest(\"https://example.com\");\nconst nextAddress = ip(nextRequest); // \"203.0.113.195\"\n```\n\n----------------------------------------\n\nTITLE: Implementing AI Token Quota Checking with Arcjet\nDESCRIPTION: Demonstrates how to check and enforce token quotas for AI requests. Includes token estimation, quota verification, and handling of quota exceeded scenarios.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/blueprints/ai-quota-control.mdx#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function POST(req: Request) {\n  // This is where you would do a session lookup and get the user ID.\n  const userId = \"totoro\"\n\n  // The user generated prompt fed to the language model.\n  const { prompt } = await req.json();\n\n  // Estimate the number of tokens required to process the prompt\n  // You can use estimators for the different services:\n  // OpenAI: https://github.com/hmarr/openai-chat-tokens\n  // Replicate: https://github.com/belladoreai/llama-tokenizer-js\n  // Or add your estimate\n  // const estimate = (): number => yourEstimate;\n  const estimate =  promptTokensEstimate({\n    prompt,\n  });\n\n  // Withdraw tokens from the token bucket\n  const decision = await aj.protect(req, { requested: estimate, userId });\n\n  console.log(\"Arcjet decision\", decision.conclusion);\n\n  if (decision.reason.isRateLimit()) {\n    console.log(\"Requests remaining\", decision.reason.remaining);\n  }\n\n  // If the request is denied, return\n  if (decision.isDenied()) {\n    if (decision.reason.isRateLimit()) {\n      // Quota exceeded\n    } else {\n      // 403\n    }\n  }\n\n  // If the request is allowed, continue to use your language model\n  const response = ...\n\n  return ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Feedback Submission API Route with Arcjet Protection in Next.js\nDESCRIPTION: This Next.js API route handles feedback form submissions with Arcjet protection. It includes bot detection, email validation, rate limiting, and additional checks based on IP information.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/blueprints/feedback-form.mdx#2025-04-12_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport arcjet, {\n  detectBot,\n  shield,\n  slidingWindow,\n  validateEmail,\n} from \"@arcjet/next\";\nimport { NextResponse } from \"next/server\";\n\nconst aj = arcjet({\n  key: process.env.ARCJET_KEY!, // Get your site key from https://app.arcjet.com\n  characteristics: [\"ip.src\"], // Track requests by IP\n  rules: [\n    // Shield protects your app from common attacks e.g. SQL injection\n    shield({ mode: \"LIVE\" }),\n    // Create a bot detection rule\n    detectBot({\n      mode: \"LIVE\", // Blocks requests. Use \"DRY_RUN\" to log only\n      // Block all bots. See https://arcjet.com/bot-list\n      allow: [],\n    }),\n    validateEmail({\n      mode: \"LIVE\",\n      // Strict email validation to block disposable, invalid, free, and domains\n      // with no valid MX records. Free emails include Gmail, Hotmail, Yahoo,\n      // etc, so you may wish to remove this rule\n      block: [\"DISPOSABLE\", \"INVALID\", \"NO_MX_RECORDS\", \"FREE\"],\n    }),\n    // It would be unusual for a form to be submitted more than 5 times in 10\n    // minutes from the same IP address\n    slidingWindow({\n      mode: \"LIVE\",\n      interval: \"10m\", // counts requests over a 10 minute sliding window\n      max: 5, // allows 5 submissions within the window\n    }),\n  ],\n});\n\nexport async function POST(request: Request) {\n  try {\n    const body = await request.json();\n    const { email, amount } = body;\n\n    const decision = await aj.protect(request, { email });\n\n    // Evaluate the various Arcjet checks\n    if (decision.isDenied()) {\n      if (decision.reason.isBot()) {\n        console.error(\"Bot detected\", decision);\n        return NextResponse.json(\n          { success: false, message: \"Forbidden\" },\n          { status: 403 },\n        );\n      } else if (decision.reason.isRateLimit()) {\n        console.error(\"Rate limit exceeded\", decision);\n        return NextResponse.json(\n          { success: false, message: \"Please try again in a few minutes\" },\n          { status: 429 },\n        );\n      } else if (decision.reason.isEmail()) {\n        console.error(\"Invalid email\", decision);\n        return NextResponse.json(\n          { success: false, message: \"Invalid email address\" },\n          { status: 400 },\n        );\n      } else {\n        console.error(\"Request denied\", decision);\n        return NextResponse.json(\n          { success: false, message: \"Forbidden\" },\n          { status: 403 },\n        );\n      }\n    }\n\n    // Base Arcjet rules all passed, but we can do further inspection based on\n    // our knowledge of our customers\n\n    // Check if the IP address is from a hosting provider\n    if (decision.ip.hasASN() && decision.ip.asnType === \"hosting\") {\n      // The network this IP belongs to is a hosting provider, which makes it\n      // more likely to be a VPN, proxy, or other suspicious network.\n      console.error(\"Hosting provider detected\", decision);\n      return NextResponse.json(\n        { success: false, message: \"Forbidden\" },\n        { status: 403 },\n      );\n    }\n\n    if (\n      decision.ip.isHosting() ||\n      decision.ip.isVpn() ||\n      decision.ip.isProxy() ||\n      decision.ip.isRelay()\n    ) {\n      // The IP is from a hosting provider, VPN, or proxy. We can check the name\n      // of the service and customize the response\n      if (decision.ip.hasService()) {\n        if (decision.ip.service !== \"Apple Private Relay\") {\n          // We trust Apple Private Relay because it requires an active iCloud\n          // subscription, so deny all other VPNs\n          console.error(\"VPN detected\", decision);\n          return NextResponse.json(\n            { success: false, message: \"Forbidden\" },\n            { status: 403 },\n          );\n        } else {\n          // Apple Private Relay is allowed\n          console.info(\"Apple Private Relay detected\", decision);\n        }\n      } else {\n        // The service name is not available, but we still think it's a VPN\n        console.error(\"VPN detected\", decision);\n        return NextResponse.json(\n          { success: false, message: \"Forbidden\" },\n          { status: 403 },\n        );\n      }\n    }\n\n    // Only allow users from the US and UK\n    if (\n      decision.ip.hasCountry() &&\n      ![\"US\", \"UK\"].includes(decision.ip.country)\n    ) {\n      console.error(\"Country not allowed\", decision);\n      return NextResponse.json(\n        { success: false, message: \"Forbidden\" },\n        { status: 403 },\n      );\n    }\n\n    console.info(\"Arcjet checks passed\", decision.id);\n\n    return NextResponse.json({\n      success: true,\n    });\n  } catch (error) {\n    console.error(\"Feedback processing error:\", error);\n    return NextResponse.json(\n      { success: false, message: \"Internal server error\" },\n      { status: 500 },\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Rules in JavaScript\nDESCRIPTION: Shows how to combine multiple protection rules in JavaScript, including rate limiting and bot protection. Rule execution is automatically optimized regardless of order.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/reference/bun.mdx#2025-04-12_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport arcjet, { fixedWindow, shield, botProtection } from \"@arcjet/bun\";\nimport { env } from \"bun\";\n\nconst aj = arcjet({\n  key: env.ARCJET_KEY,\n  rules: [\n    fixedWindow({ window: \"1h\", max: 60 }),\n    shield(),\n    botProtection(),\n  ],\n});\n\nconst server = Bun.serve({\n  fetch: aj.handler(async (request) => {\n    const decision = await aj.protect({ request });\n\n    if (decision.isDenied()) {\n      return new Response(\n        JSON.stringify({ message: \"You have been rate limited\" }),\n        { status: 429 }\n      );\n    }\n\n    // Your API logic here\n    return new Response(\"Hello, world!\");\n  }),\n  port: 3000,\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Arcjet Middleware in Next.js (TypeScript)\nDESCRIPTION: This snippet demonstrates how to set up basic Arcjet middleware in a Next.js application using TypeScript. It runs on every request except for static assets and uses the ARCJET_KEY for configuration.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/reference/nextjs/Middleware.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextResponse } from \"next/server\";\nimport type { NextRequest } from \"next/server\";\nimport { Arcjet } from \"@arcjet/next\";\n\nconst arcjet = new Arcjet({\n  key: process.env.ARCJET_KEY,\n});\n\nexport default arcjet.middleware(() => {\n  return NextResponse.next();\n});\n\nexport const config = {\n  matcher: [\"/((?!_next/static|_next/image|favicon.ico).*)\"],\n};\n\n```\n\n----------------------------------------\n\nTITLE: Content Security Policy Default Configuration\nDESCRIPTION: Default configuration object for Content-Security-Policy header directives, defining secure defaults for various content sources.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/nosecone/reference.mdx#2025-04-12_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  directives: {\n    baseUri: [\"'none'\"],\n    childSrc: [\"'none'\"],\n    connectSrc: [\"'self'\"],\n    defaultSrc: [\"'self'\"],\n    fontSrc: [\"'self'\"],\n    formAction: [\"'self'\"],\n    frameAncestors: [\"'none'\"],\n    frameSrc: [\"'none'\"],\n    imgSrc: [\"'self'\", \"blob:\", \"data:\"],\n    manifestSrc: [\"'self'\"],\n    mediaSrc: [\"'self'\"],\n    objectSrc: [\"'none'\"],\n    scriptSrc: [\"'self'\"],\n    styleSrc: [\"'self'\"],\n    workerSrc: [\"'self'\"],\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Next.js Middleware Configuration for Arcjet (JavaScript)\nDESCRIPTION: Sets up basic Arcjet Bot Protection middleware in Next.js using JavaScript. Creates middleware.js file that applies Arcjet protection to all routes.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/quick-start/nextjs/Step3.mdx#2025-04-12_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { NextResponse } from \"next/server\";\nimport { arcjet } from \"@arcjet/next\";\n\nexport default arcjet();\n\nexport const config = {\n  matcher: [\"/((?!api|_next/static|_next/image|favicon.ico).+)\"],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Arcjet Module in NestJS\nDESCRIPTION: Sets up the ArcjetModule.forRoot() in a NestJS application with API key and rule configuration, typically placed in app.module.ts.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/reference/nestjs.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Module } from \"@nestjs/common\";\nimport { AppController } from \"./app.controller\";\nimport { AppService } from \"./app.service\";\nimport { ArcjetModule } from \"@arcjet/nest\";\nimport { shield, rateLimit, validateEmail } from \"@arcjet/protocol\";\n\n@Module({\n  imports: [\n    ArcjetModule.forRoot({\n      key: \"aj_12345abcdef\",\n      rules: [\n        shield(),\n        rateLimit({\n          mode: \"DRY_RUN\", // Set to LIVE to enable\n          rpm: 100,\n        }),\n        validateEmail(),\n      ],\n    }),\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Payment Form Component in Next.js\nDESCRIPTION: This React component creates a payment form using shadcn UI components. It handles form submission, displays loading states, and shows toast notifications for payment processing results. The form collects email and payment amount from the user.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/blueprints/payment-form.mdx#2025-04-12_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\";\n\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useRouter } from \"next/navigation\";\nimport { useState } from \"react\";\n\nexport default function PaymentForm() {\n  const [amount, setAmount] = useState(\"10.00\");\n  const [email, setEmail] = useState(\"user@example.com\");\n  const [isLoading, setIsLoading] = useState(false);\n  const router = useRouter();\n  const { toast } = useToast();\n\n  async function onSubmit(event: React.FormEvent) {\n    event.preventDefault();\n    setIsLoading(true);\n\n    const response = await fetch(\"/api/process-payment\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ email, amount }),\n    });\n\n    setIsLoading(false);\n\n    const responseData = await response.json();\n\n    if (response.ok) {\n      // Redirect to an external URL\n      window.location.href = responseData.paymentLink;\n      // Or if you are self-hosting the payment form, redirect to path\n      //router.push(responseData.paymentLink);\n    } else {\n      toast({\n        title: \"Payment Failed\",\n        description:\n          \"There was an error processing your payment: \" + responseData.message,\n        variant: \"destructive\",\n      });\n    }\n  }\n\n  return (\n    <>\n      <Card className=\"w-full max-w-md mx-auto\">\n        <CardHeader>\n          <CardTitle>Purchase Form</CardTitle>\n          <CardDescription>Enter your details below</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={onSubmit} className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"email\">Email</Label>\n              <Input\n                id=\"email\"\n                type=\"email\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                required\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"amount\">Amount</Label>\n              <Input\n                id=\"amount\"\n                value={amount}\n                onChange={(e) => setAmount(e.target.value)}\n                required\n              />\n            </div>\n            <Button type=\"submit\" className=\"w-full\" disabled={isLoading}>\n              {isLoading ? \"Processing...\" : \"Pay Now\"}\n            </Button>\n          </form>\n        </CardContent>\n      </Card>\n      <Toaster />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Arcjet in TypeScript\nDESCRIPTION: Demonstrates how to configure an Arcjet instance with API key and rate limiting rules in TypeScript. Shows the basic setup with required fields and optional characteristics.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/reference/bun.mdx#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport arcjet, { fixedWindow } from \"@arcjet/bun\";\nimport { env } from \"bun\";\n\nconst aj = arcjet({\n  key: env.ARCJET_KEY!,\n  characteristics: [\"ip.src\"],\n  rules: [fixedWindow({ window: \"1h\", max: 60 })],\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing OpenAI Chat Protection in Next.js with Arcjet\nDESCRIPTION: A Next.js API route implementation that shows how to protect an OpenAI chat interface using Arcjet. The code demonstrates rate limiting based on token usage and bot protection for a gpt-3.5-turbo chatbot.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/integrations/openai.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { OpenAIStream, StreamingTextResponse } from \"ai\";\nimport { Configuration, OpenAIApi } from \"openai-edge\";\nimport { Ratelimit } from \"@upstash/ratelimit\";\nimport { Redis } from \"@upstash/redis\";\nimport { useArcjet } from \"@arcjet/next\";\nimport { getTokenEstimate } from \"openai-chat-tokens\";\n\n// Configure OpenAI\nconst config = new Configuration({\n  apiKey: process.env.OPENAI_API_KEY,\n});\nconst openai = new OpenAIApi(config);\n\n// Create an Arcjet rule that uses userId as the rate limit key\nconst aj = useArcjet({\n  rules: [\n    {\n      characteristics: [{ name: \"userId\", value: \"$.session.userId\" }],\n      budget: 2000,\n      window: \"1h\",\n      bucketSize: 5000,\n    },\n    { mode: \"block_bot\" },\n  ],\n});\n\n// POST request handler for the chat API route\nexport async function POST(req: Request) {\n  const json = await req.json();\n  const { messages } = json;\n  const userId = \"user_123\"; // Get this from your auth system\n\n  // Estimate the number of tokens that will be used\n  const tokenEstimate = getTokenEstimate(messages);\n\n  // Check rate limit and bot rules with Arcjet\n  try {\n    await aj.protect(req, {\n      characteristics: { userId },\n      tokens: tokenEstimate,\n    });\n  } catch (err) {\n    return new Response(\"Rate limit exceeded\", { status: 429 });\n  }\n\n  // Call OpenAI chat API\n  const response = await openai.createChatCompletion({\n    model: \"gpt-3.5-turbo\",\n    stream: true,\n    messages,\n  });\n\n  // Create a streaming response\n  const stream = OpenAIStream(response);\n  return new StreamingTextResponse(stream);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Fixed Window Rate Limit with Custom Fingerprint in Next.js\nDESCRIPTION: This example shows how to create a fixed window rate limit rule with a custom fingerprint characteristic in Next.js using Arcjet. It allows for flexible rate limiting based on either user ID or IP address, depending on whether the user is logged in.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/rate-limiting/configuration.mdx#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Arcjet } from \"@arcjet/next\";\n\nconst aj = new Arcjet({\n  // Your Arcjet API key\n  key: process.env.ARCJET_KEY,\n});\n\naj.rateLimit({\n  name: \"flexible-user-limits\",\n  algorithm: \"fixedWindow\",\n  characteristics: [\"fingerprint\"],\n  max: 100,\n  window: \"1m\",\n});\n```\n\n----------------------------------------\n\nTITLE: Protecting Auth.js Route Handler in Next.js Pages Router\nDESCRIPTION: This code shows how to extend Auth.js route handler in Next.js Pages Router with Arcjet protection. It implements rate limiting on POST requests for login/logout attempts and blocks bot traffic.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/integrations/authjs.mdx#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from \"next-auth\";\nimport GitHub from \"next-auth/providers/github\";\nimport { Arcjet } from \"@arcjet/next\";\n\nconst handler = NextAuth({\n  providers: [GitHub],\n});\n\n// Add Arcjet's rate limiting protection to the request handler\nexport default new Arcjet({\n  key: process.env.ARCJET_KEY,\n  rules: [\n    {\n      // Rate limit login attempts\n      name: \"Rate limit login attempts\",\n      // Only rate limit POST requests (login/logout attempts)\n      when: (request) => request.method === \"POST\",\n      // Allow 10 login attempts per minute\n      rateLimit: {\n        window: \"60s\",\n        max: 10,\n        characteristics: [\"ip\"],\n      },\n      // Prevent bots from logging in\n      bot: {\n        block: true,\n      },\n    },\n  ],\n}).protect(handler);\n```\n\n----------------------------------------\n\nTITLE: Checking IP Location Examples in TypeScript\nDESCRIPTION: Examples demonstrating how to check different location attributes like city, region, country, and continent using Arcjet's IP analysis.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/blueprints/ip-geolocation.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// ... imports, client configuration, etc\n// See https://docs.arcjet.com/get-started\nconst decision = await aj.protect(req);\n\nif (decision.ip.hasCity() && decision.ip.city === \"San Francisco\") {\n  // Return a custom response for San Francisco\n}\n\nif (decision.ip.hasRegion() && decision.ip.region === \"California\") {\n  // Return a custom response for California\n}\n\nif (decision.ip.hasCountry() && decision.ip.country === \"US\") {\n  // Return a custom response for the United States\n}\n\nif (decision.ip.hasContinent() && decision.ip.continent === \"NA\") {\n  // Return a custom response for North America\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Request Protection with Arcjet in TypeScript\nDESCRIPTION: Demonstrates how to use the protect function to evaluate a request against configured rules in TypeScript. Shows how to handle denied requests and implement custom response behavior.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/reference/bun.mdx#2025-04-12_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport arcjet, { fixedWindow } from \"@arcjet/bun\";\nimport { env } from \"bun\";\n\nconst aj = arcjet({\n  key: env.ARCJET_KEY!,\n  rules: [fixedWindow({ window: \"1h\", max: 60 })],\n});\n\nconst server = Bun.serve({\n  fetch: aj.handler(async (request) => {\n    const decision = await aj.protect({ request });\n\n    if (decision.isDenied()) {\n      return new Response(\n        JSON.stringify({ message: \"You have been rate limited\" }),\n        { status: 429 }\n      );\n    }\n\n    // Your API logic here\n    return new Response(\"Hello, world!\");\n  }),\n  port: 3000,\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Zod Body Validation Rule with Arcjet\nDESCRIPTION: Example of how to integrate a custom validation rule using Zod schema validation with the Arcjet SDK. This shows how to initialize the Arcjet instance with a custom rule for validating request bodies.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/blueprints/defining-custom-rules.mdx#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst aj = arcjet({\n  key: process.env.ARCJET_KEY!,\n  rules: [\n    validateBody({\n      mode: \"LIVE\",\n      schema: z.object({\n        email: z.string(),\n      }),\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Handling IP Location Analysis in TypeScript and JavaScript\nDESCRIPTION: Shows how to use the Arcjet SDK to analyze IP location information and return a customized response based on the country of origin.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/reference/nodejs.mdx#2025-04-12_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// TypeScript code for IP location analysis\n// Code not provided in the original text\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// JavaScript code for IP location analysis\n// Code not provided in the original text\n```\n\n----------------------------------------\n\nTITLE: Next.js App Router API Route with Arcjet and Clerk Integration\nDESCRIPTION: Implementation of a protected API route using Arcjet rate limiting with Clerk authentication in Next.js App Router. Uses custom characteristics to apply different rate limits based on user authentication status.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/integrations/clerk.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { arcjet } from \"@arcjet/next\";\nimport { currentUser } from \"@clerk/nextjs\";\nimport { NextResponse } from \"next/server\";\n\nconst aj = arcjet(process.env.ARCJET_KEY!);\n\nexport const POST = aj.rateLimit(\n  { rpm: 10 },\n  async function POST() {\n    const user = await currentUser();\n\n    return NextResponse.json(\n      { message: \"Hello from a protected API route\" },\n      {\n        status: 200,\n        headers: { \"Content-Type\": \"application/json\" },\n      }\n    );\n  },\n  {\n    characteristics: async () => {\n      const user = await currentUser();\n      return { userId: user?.id };\n    },\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Guard for Arcjet in NestJS\nDESCRIPTION: This snippet demonstrates how to set up a global guard for Arcjet in the app.module.ts file of a NestJS application. It initializes the Arcjet client and provides it to the guard.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/sensitive-info/reference/nestjs/DecoratorRoutes.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Module } from \"@nestjs/common\";\nimport { APP_GUARD } from \"@nestjs/core\";\nimport { ArcjetClient } from \"@arcjet/node\";\nimport { ArcjetGuard } from \"./arcjet.guard\";\n\n@Module({\n  imports: [],\n  controllers: [],\n  providers: [\n    {\n      provide: ArcjetClient,\n      useValue: new ArcjetClient({ key: process.env.ARCJET_KEY }),\n    },\n    {\n      provide: APP_GUARD,\n      useClass: ArcjetGuard,\n    },\n  ],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Implementing Token Bucket Rate Limiting in Next.js App Router (TypeScript)\nDESCRIPTION: This code snippet shows how to set up token bucket rate limiting middleware using Arcjet in a Next.js application with App Router. It imports necessary Arcjet components, configures the middleware, and applies it to the API route.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/rate-limiting/reference/nextjs/TokenBucketRequest.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport TokenBucketAppTS from \"./TokenBucketApp.js?raw\";\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Rules in Arcjet (TypeScript)\nDESCRIPTION: Illustrates how to combine multiple rules in Arcjet configuration for a more complex protection strategy. This example combines rate limiting and bot protection rules in a Next.js application using TypeScript.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/reference/nextjs.mdx#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport arcjet, { fixedWindow, shield } from \"@arcjet/next\";\n\nconst aj = arcjet({\n  key: process.env.ARCJET_KEY,\n  characteristics: [\"ip.src\"],\n  rules: [\n    fixedWindow({\n      window: \"1h\",\n      max: 60,\n    }),\n    shield(),\n  ],\n});\n\nexport const config = {\n  matcher: [\"/api/:path*\"],\n};\n\nexport default aj.protect(async function middleware(request) {\n  // Your middleware logic here\n});\n```\n\n----------------------------------------\n\nTITLE: Error Logging in Arcjet SDK for TypeScript and JavaScript\nDESCRIPTION: Illustrates how to handle and log errors when using the Arcjet SDK, including checking for specific error conditions and logging appropriate messages.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/reference/nodejs.mdx#2025-04-12_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// TypeScript code for error logging\n// Code not provided in the original text\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// JavaScript code for error logging\n// Code not provided in the original text\n```\n\n----------------------------------------\n\nTITLE: Configuring Bot Categories with Arcjet\nDESCRIPTION: This code shows how to use bot categories to allow or deny groups of bots. In this example, it allows all search engine bots and curl while blocking all other bot types.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/bot-protection/identifying-bots.mdx#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ndetectBot({\n   mode: \"LIVE\", // will block requests. Use \"DRY_RUN\" to log only\n   // Block all bots except search engines and curl\n   allow: [\n      \"CATEGORY:SEARCH_ENGINE\", // Google, Bing, etc\n      \"CURL\", // You can allow specific bots in addition to categories\n   ],\n}),\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Logging in TypeScript\nDESCRIPTION: Example of setting up custom logging for the Arcjet SDK using Pino logger in TypeScript, with different configurations for production and development environments.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/reference/sveltekit.mdx#2025-04-12_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport pino from \"pino\";\nimport arcjet, { fixedWindow } from \"@arcjet/sveltekit\";\n\nconst logger =\n  process.env.NODE_ENV === \"production\"\n    ? pino()\n    : pino({\n        transport: {\n          target: \"pino-pretty\",\n          options: {\n            colorize: true,\n          },\n        },\n      });\n\nconst aj = arcjet({\n  key: process.env.ARCJET_KEY!,\n  characteristics: [\"ip.src\"],\n  rules: [\n    fixedWindow({\n      window: \"1h\",\n      max: 60,\n    }),\n  ],\n  logger,\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Individual Bot Detection with Arcjet\nDESCRIPTION: This code demonstrates how to configure the detectBot rule to allow specific bots while blocking all others. It specifies Google crawlers, Bing crawler, and curl as allowed bots.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/bot-protection/identifying-bots.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndetectBot({\n   mode: \"LIVE\", // will block requests. Use \"DRY_RUN\" to log only\n   // Block all bots except specific Google and Bing crawlers, and curl\n   allow: [\n      \"GOOGLE_CRAWLER\",\n      \"GOOGLE_CRAWLER_NEWS\",\n      \"BING_CRAWLER\",\n      \"CURL\",\n   ],\n}),\n```\n\n----------------------------------------\n\nTITLE: Configuring Arcjet Protection for Next.js API Route (TypeScript, App Router)\nDESCRIPTION: This snippet demonstrates how to set up Arcjet protection for a Next.js API route using TypeScript and the App Router. It imports necessary Arcjet modules, creates a shield, and applies it to the API route handler.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/shield/reference/nextjs/PerRoute.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextResponse } from \"next/server\";\nimport { Arcjet, Shield } from \"@arcjet/next\";\n\nconst arcjet = new Arcjet({\n  // Configure your Arcjet client here\n});\n\nconst shield = new Shield({\n  // Configure your shield here\n});\n\nexport const POST = shield.protect(async (request) => {\n  // Your API logic here\n  return NextResponse.json({ message: \"Hello from Arcjet!\" });\n});\n\n```\n\n----------------------------------------\n\nTITLE: Rate Limiting by IP Address in Next.js\nDESCRIPTION: Implements a basic rate limit of 60 requests per hour per IP address with a 10-minute block period when exceeded. Shows implementation for both App and Pages router patterns.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/rate-limiting/reference/nextjs/Examples.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{ByIPAppTS}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n{ByIPPagesTS}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{ByIPAppJS}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{ByIPPagesJS}\n```\n\n----------------------------------------\n\nTITLE: Iterating Through Rule Results in TypeScript\nDESCRIPTION: Demonstrates how to iterate through the results of each rule in the Arcjet decision object and log the results.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/reference/remix.mdx#2025-04-12_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nfor (const result of decision.results) {\n  console.log(\"Rule Result\", result);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Sliding Window Rate Limiting with Arcjet in Next.js\nDESCRIPTION: This snippet shows how to set up a sliding window rate limit rule that allows 100 requests in a 60-second window. The rule applies to all requests to /api/hello and is tracked by the client's IP address, providing a smoother rate limiting experience.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/rate-limiting/algorithms.mdx#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Arcjet } from \"@arcjet/next\";\nimport { ArcjetResponse } from \"@/libs/ArcjetResponse\";\n\nconst aj = new Arcjet({\n  key: process.env.ARCJET_KEY!,\n  rules: [\n    {\n      // type of rule: rate limit\n      name: \"rate_limit\",\n      // type of algorithm\n      type: \"sliding_window\",\n      // maximum number of requests\n      max: 100,\n      // window size in seconds\n      window: 60,\n      // what to key the rate limit by\n      key: \"ip\",\n      // what to match on\n      match: {\n        url: \"/api/hello\",\n      },\n    },\n  ],\n});\n\nexport async function GET(req: Request) {\n  const decision = await aj.protect(req);\n\n  if (decision.isDenied()) {\n    return ArcjetResponse.rateLimit(decision);\n  }\n\n  return new Response(\"Hello, World!\");\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Trusted Proxies in Arcjet Node.js SDK\nDESCRIPTION: Shows how to configure Arcjet to trust IP addresses in the X-Forwarded-For header by setting the proxies field in the configuration.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/reference/nodejs.mdx#2025-04-12_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Arcjet } from \"@arcjet/node\";\nimport { rateLimit } from \"@arcjet/protect\";\n\nconst aj = new Arcjet({\n  key: process.env.ARCJET_KEY,\n  rules: [\n    rateLimit({\n      mode: \"LIVE\",\n      rpm: 60\n    })\n  ],\n  proxies: [\"100.100.100.100\"]\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Payment Processing API with Arcjet Protection in Next.js\nDESCRIPTION: This Next.js API route handles payment processing with Arcjet protection. It implements various security rules including bot detection, email validation, rate limiting, and IP-based checks. The route also handles different types of Arcjet denials and performs additional custom checks based on IP information.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/blueprints/payment-form.mdx#2025-04-12_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport arcjet, {\n  type ArcjetRuleResult,\n  detectBot,\n  shield,\n  slidingWindow,\n  validateEmail,\n} from \"@arcjet/next\";\nimport { isSpoofedBot } from \"@arcjet/inspect\";\nimport { NextResponse } from \"next/server\";\n\nconst aj = arcjet({\n  key: process.env.ARCJET_KEY!, // Get your site key from https://app.arcjet.com\n  characteristics: [\"ip.src\"], // Track requests by IP\n  rules: [\n    // Shield protects your app from common attacks e.g. SQL injection\n    shield({ mode: \"LIVE\" }),\n    // Create a bot detection rule\n    detectBot({\n      mode: \"LIVE\", // Blocks requests. Use \"DRY_RUN\" to log only\n      // Block all bots. See https://arcjet.com/bot-list\n      allow: [],\n    }),\n    validateEmail({\n      mode: \"LIVE\",\n      // Strict email validation to block disposable, invalid, free, and domains\n      // with no valid MX records. Free emails include GMail, Hotmail, Yahoo,\n      // etc, so you may wish to remove this rule\n      block: [\"DISPOSABLE\", \"INVALID\", \"NO_MX_RECORDS\", \"FREE\"],\n    }),\n    // It would be unusual for a form to be submitted more than 5 times in 10\n    // minutes from the same IP address\n    slidingWindow({\n      mode: \"LIVE\",\n      interval: \"10m\", // counts requests over a 10 minute sliding window\n      max: 5, // allows 5 submissions within the window\n    }),\n  ],\n});\n\nexport async function POST(request: Request) {\n  try {\n    const body = await request.json();\n    const { email, amount } = body;\n\n    const decision = await aj.protect(request, { email });\n\n    // Evaluate the various Arcjet checks\n    if (decision.isDenied()) {\n      if (decision.reason.isBot()) {\n        console.error(\"Bot detected\", decision);\n        return NextResponse.json(\n          { success: false, message: \"Forbidden\" },\n          { status: 403 },\n        );\n      } else if (decision.reason.isRateLimit()) {\n        console.error(\"Rate limit exceeded\", decision);\n        return NextResponse.json(\n          { success: false, message: \"Please try again in a few minutes\" },\n          { status: 429 },\n        );\n      } else if (decision.reason.isEmail()) {\n        console.error(\"Invalid email\", decision);\n        return NextResponse.json(\n          { success: false, message: \"Invalid email address\" },\n          { status: 400 },\n        );\n      } else {\n        console.error(\"Request denied\", decision);\n        return NextResponse.json(\n          { success: false, message: \"Forbidden\" },\n          { status: 403 },\n        );\n      }\n    }\n\n    // Arcjet Pro plan verifies the authenticity of common bots using IP data.\n    // Verification isn't always possible, so we recommend checking the decision\n    // separately.\n    // https://docs.arcjet.com/bot-protection/reference#bot-verification\n    if (decision.results.some(isSpoofedBot)) {\n      console.error(\"Spoofed bot detected\", decision);\n      return NextResponse.json(\n        { success: false, message: \"Forbidden\" },\n        { status: 403 },\n      );\n    }\n\n    // Base Arcjet rules all passed, but we can do further inspection based on\n    // our knowledge of our customers\n\n    // Check if the IP address is from a hosting provider\n    if (decision.ip.hasASN() && decision.ip.asnType === \"hosting\") {\n      // The network this IP belongs to is a hosting provider, which makes it\n      // more likely to be a VPN, proxy, or other suspicious network.\n      console.error(\"Hosting provider detected\", decision);\n      return NextResponse.json(\n        { success: false, message: \"Forbidden\" },\n        { status: 403 },\n      );\n    }\n\n    if (\n      decision.ip.isHosting() ||\n      decision.ip.isVpn() ||\n      decision.ip.isProxy() ||\n      decision.ip.isRelay()\n    ) {\n      // The IP is from a hosting provider, VPN, or proxy. We can check the name\n      // of the service and customize the response\n      if (decision.ip.hasService()) {\n        if (decision.ip.service !== \"Apple Private Relay\") {\n          // We trust Apple Private Relay because it requires an active iCloud\n          // subscription, so deny all other VPNs\n          console.error(\"VPN detected\", decision);\n          return NextResponse.json(\n            { success: false, message: \"Forbidden\" },\n            { status: 403 },\n          );\n        } else {\n          // Apple Private Relay is allowed\n          console.info(\"Apple Private Relay detected\", decision);\n        }\n      } else {\n        // The service name is not available, but we still think it's a VPN\n        console.error(\"VPN detected\", decision);\n        return NextResponse.json(\n          { success: false, message: \"Forbidden\" },\n          { status: 403 },\n        );\n      }\n    }\n\n    // Only allow users from the US and UK\n    if (\n      decision.ip.hasCountry() &&\n      ![\"US\", \"UK\"].includes(decision.ip.country)\n    ) {\n      console.error(\"Country not allowed\", decision);\n      return NextResponse.json(\n        { success: false, message: \"Forbidden\" },\n        { status: 403 },\n      );\n    }\n\n    console.info(\"Arcjet checks passed\", decision.id);\n\n    // This is where you would generate the checkout link. Return it to the form\n    // component to redirect the user to the payment page. See\n    // https://docs.stripe.com/checkout/quickstart?lang=node&client=next for an\n    // example with Stripe Checkout\n\n    return NextResponse.json({\n      success: true,\n      paymentLink: \"https://www.example.com\",\n    });\n  } catch (error) {\n    console.error(\"Payment processing error:\", error);\n    return NextResponse.json(\n      { success: false, message: \"Internal server error\" },\n      { status: 500 },\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing User-Specific Rate Limits with Auth.js in Next.js App Router\nDESCRIPTION: This code demonstrates how to use Auth.js user ID with Arcjet to implement user-specific rate limits in a protected API route using Next.js App Router. It shows how to extract the authenticated user ID and pass it to Arcjet.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/integrations/authjs.mdx#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { auth } from \"auth\";\nimport { NextResponse } from \"next/server\";\nimport { Arcjet } from \"@arcjet/next\";\n\n// Create a new Arcjet instance\nconst aj = new Arcjet({\n  key: process.env.ARCJET_KEY,\n  rules: [\n    {\n      name: \"Authenticated user rate limit\",\n      rateLimit: {\n        // Use the authenticated user ID as a characteristic\n        // This provides a higher rate limit for authenticated users\n        characteristics: [\"aj:userId\"],\n        window: \"60s\",\n        max: 20,\n      },\n    },\n  ],\n});\n\nexport async function GET(request) {\n  // Get the user session\n  const session = await auth();\n\n  // If there's no session, return 401\n  if (!session) {\n    return new NextResponse(null, { status: 401 });\n  }\n\n  // Add the user ID as a custom characteristic to Arcjet's rules\n  const characteristics = {\n    \"aj:userId\": session.user.id,\n  };\n\n  // Arcjet will now use the user ID as a characteristic for rate limiting\n  const ajResponse = await aj.protect(request, { characteristics });\n\n  // If Arcjet decides to block, return its response\n  if (ajResponse) {\n    return ajResponse;\n  }\n\n  // Otherwise, return your API response\n  return NextResponse.json({ message: \"Hello, authenticated user!\" });\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Ad Hoc Rules in Arcjet SDK for TypeScript and JavaScript\nDESCRIPTION: Shows how to use the withRule function to add additional protection rules based on custom logic while inheriting existing configuration from the primary SDK.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/reference/nodejs.mdx#2025-04-12_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// TypeScript code for creating ad hoc rules\n// Code not provided in the original text\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// JavaScript code for creating ad hoc rules\n// Code not provided in the original text\n```\n\n----------------------------------------\n\nTITLE: Implementing User-Specific Rate Limits with NextAuth and Arcjet (Next.js App Router)\nDESCRIPTION: This code snippet demonstrates how to implement user-specific rate limits using NextAuth's getServerSession() helper and Arcjet in a Next.js App Router. It applies different rate limits for authenticated and unauthenticated users on a private API route.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/integrations/nextauth.mdx#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getServerSession } from \"next-auth\";\nimport { NextRequest } from \"next/server\";\nimport { Arcjet } from \"@arcjet/next\";\n\nconst aj = new Arcjet({ token: process.env.ARCJET_KEY });\n\nexport const POST = aj.protect(\n  {\n    rateLimit: {\n      requestsPerWindow: 1000,\n      windowSeconds: 3600,\n      identityCharacteristics: [\"ip\", \"user_id\"],\n    },\n  },\n  async function POST(request: NextRequest) {\n    const session = await getServerSession();\n    const userId = session?.user?.email ?? \"anonymous\";\n\n    const response = await aj.run(\n      {\n        ip: request.ip,\n        user_id: userId,\n      },\n      async () => {\n        // Your API logic here\n        return new Response(\"Hello from protected API route\");\n      }\n    );\n\n    return response;\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Redacting Sensitive Information with Arcjet\nDESCRIPTION: Example showing how to use the redact function to protect sensitive data. Supports email, phone number, IP address, and credit card redaction by default, with option for custom detection.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/redact/quick-start.mdx#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n${QuickStartRedact}\n```\n\n----------------------------------------\n\nTITLE: Protecting Pages with Arcjet (JavaScript Pages Router)\nDESCRIPTION: Direct page protection implementation in Next.js Pages Router using JavaScript. Shows how to protect individual pages using Arcjet SDK.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/reference/nextjs/Examples.mdx#2025-04-12_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{ProtectPagePagesJS}\n```\n\n----------------------------------------\n\nTITLE: Using @arcjet/inspect Functions in TypeScript\nDESCRIPTION: Demonstrates how to import and use functions from the @arcjet/inspect package to analyze Arcjet decision results. It shows examples of checking for spoofed bots, verified bots, and missing User-Agent headers.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/inspect.mdx#2025-04-12_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport { isSpoofedBot, isVerifiedBot, isMissingUserAgent } from \"@arcjet/inspect\";\n\nconst result = await aj.protect(req);\n\nconst spoofed = isSpoofedBot(result);\nif (spoofed === true) {\n  // Block the request\n} else if (spoofed === false) {\n  // Allow the request\n} else {\n  // Handle undefined case (e.g., dry run or non-bot rule)\n}\n\nconst verified = isVerifiedBot(result);\nif (verified === true) {\n  // Allow the request and ignore other signals\n} else if (verified === false) {\n  // Continue processing\n} else {\n  // Handle undefined case (e.g., dry run or non-bot rule)\n}\n\nconst missingUserAgent = isMissingUserAgent(result);\nif (missingUserAgent === true) {\n  // Block the request\n} else if (missingUserAgent === false) {\n  // Allow the request\n} else {\n  // Handle undefined case (e.g., dry run or non-bot rule)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Arcjet in Next.js Middleware (JavaScript)\nDESCRIPTION: Implementation of Arcjet in a Next.js middleware.js file to run on all requests except static assets. This shows the JavaScript version of the middleware integration.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/shield/reference/nextjs/Middleware.mdx#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { NextResponse } from \"next/server\";\nimport { arcjet } from \"@arcjet/next\";\n\nconst aj = arcjet({\n  key: process.env.ARCJET_KEY,\n  rules: {\n    // Configure rules here\n  },\n});\n\nexport async function middleware(request) {\n  const response = NextResponse.next();\n\n  await aj.protect(request, response, {\n    // Override rules or provide contextual data here\n  });\n\n  return response;\n}\n\nexport const config = {\n  matcher: [\"/((?!_next/static|_next/image|favicon.ico).+)\"],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Rules in TypeScript\nDESCRIPTION: Demonstrates combining multiple rules including rate limiting, bot protection, and email validation to create a complex protection strategy.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/reference/remix.mdx#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Arcjet } from \"@arcjet/remix\";\nimport { rateLimit } from \"@arcjet/ip-rate-limit\";\nimport { botProtection } from \"@arcjet/bot-protection\";\nimport { validateEmail } from \"@arcjet/email-validation\";\n\nconst aj = new Arcjet({\n  key: process.env.ARCJET_KEY,\n  rules: [\n    rateLimit({\n      requests: 100,\n      period: \"1m\",\n    }),\n    botProtection(),\n    validateEmail(),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Error Logging with Arcjet in TypeScript\nDESCRIPTION: This code snippet shows how to handle and log errors from Arcjet decisions, including checking for specific error conditions.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/reference/bun.mdx#2025-04-12_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nif (decision.isErrored()) {\n  for (const result of decision.results) {\n    if (result.conclusion === \"ERROR\") {\n      console.error(\n        \"Arcjet rule error:\",\n        result.reason.message\n      );\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing User-Specific Rate Limits with Auth.js in Next.js Pages Router\nDESCRIPTION: This code shows how to use Auth.js user ID with Arcjet in Next.js Pages Router to implement user-specific rate limits. It retrieves the authenticated user and passes the user ID to Arcjet as a custom characteristic.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/integrations/authjs.mdx#2025-04-12_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getServerSession } from \"next-auth\";\nimport { authOptions } from \"./auth/[...nextauth]\";\nimport { Arcjet } from \"@arcjet/next\";\n\n// Create a new Arcjet instance\nconst aj = new Arcjet({\n  key: process.env.ARCJET_KEY,\n  rules: [\n    {\n      name: \"Authenticated user rate limit\",\n      rateLimit: {\n        // Use the authenticated user ID as a characteristic\n        // This provides a higher rate limit for authenticated users\n        characteristics: [\"aj:userId\"],\n        window: \"60s\",\n        max: 20,\n      },\n    },\n  ],\n});\n\nexport default async function handler(req, res) {\n  // Get the user session\n  const session = await getServerSession(req, res, authOptions);\n\n  // If there's no session, return 401\n  if (!session) {\n    return res.status(401).end();\n  }\n\n  // Add the user ID as a custom characteristic to Arcjet's rules\n  const characteristics = {\n    \"aj:userId\": session.user.id,\n  };\n\n  // Arcjet will now use the user ID as a characteristic for rate limiting\n  // Check if Arcjet decides to block the request\n  const block = await aj.protect(req, { characteristics });\n\n  // If Arcjet decides to block, return its response\n  if (block) {\n    block(res);\n    return;\n  }\n\n  // Otherwise, return your API response\n  res.status(200).json({ message: \"Hello, authenticated user!\" });\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Logging in Arcjet (TypeScript)\nDESCRIPTION: Demonstrates how to implement custom logging in Arcjet using Pino logger. It shows setting up a custom logger that logs to JSON in production and pretty prints in development, integrated with the Arcjet SDK in a Next.js application.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/reference/nextjs.mdx#2025-04-12_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport arcjet, { fixedWindow } from \"@arcjet/next\";\nimport pino from \"pino\";\n\nconst logger =\n  process.env.NODE_ENV === \"production\"\n    ? pino()\n    : pino({\n        transport: {\n          target: \"pino-pretty\",\n          options: {\n            colorize: true,\n          },\n        },\n      });\n\nconst aj = arcjet({\n  key: process.env.ARCJET_KEY,\n  characteristics: [\"ip.src\"],\n  rules: [\n    fixedWindow({\n      window: \"1h\",\n      max: 60,\n    }),\n  ],\n  logger,\n});\n\nexport { aj };\n```\n\n----------------------------------------\n\nTITLE: Configuring Sliding Window Rate Limiting in TypeScript\nDESCRIPTION: Type definition for sliding window rate limiting options including mode selection, client characteristics, time interval, and maximum request settings.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/rate-limiting/reference.mdx#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype SlidingWindowRateLimitOptions = {\n  mode?: \"LIVE\" | \"DRY_RUN\";\n  characteristics?: string[];\n  interval: number;\n  max: number;\n};\n```\n\n----------------------------------------\n\nTITLE: Restricting Access to Specific Countries in TypeScript\nDESCRIPTION: Example demonstrating how to restrict access to only US, UK, and Japan using Arcjet's IP geolocation checks.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/blueprints/ip-geolocation.mdx#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// ... imports, client configuration, etc\n// See https://docs.arcjet.com/get-started\nconst decision = await aj.protect(req);\n\nif (\n  decision.ip.hasCountry() &&\n  ![\"US\", \"UK\", \"JP\"].includes(decision.ip.country)\n) {\n  // Return 403 Forbidden\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Rule Modes in Arcjet\nDESCRIPTION: Shows how to configure rules in either LIVE or DRY_RUN mode, with an example of checking rule results. DRY_RUN allows testing rules without blocking legitimate requests.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/reference/bun.mdx#2025-04-12_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport arcjet, { fixedWindow } from \"@arcjet/bun\";\nimport { env } from \"bun\";\n\nconst aj = arcjet({\n  key: env.ARCJET_KEY!,\n  characteristics: [\"ip.src\"],\n  rules: [\n    fixedWindow(\n      // This rule is live\n      {\n        mode: \"LIVE\",\n        window: \"1h\",\n        max: 60,\n      },\n      // This rule is in dry run mode, so will log but not block\n      {\n        mode: \"DRY_RUN\",\n        characteristics: ['http.request.headers[\"x-api-key\"]'],\n        window: \"1h\",\n        // max could also be a dynamic value applied after looking up a limit\n        // elsewhere e.g. in a database for the authenticated user\n        max: 600,\n      },\n    ),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Response Rate Limiting in Next.js\nDESCRIPTION: Demonstrates IP-based rate limiting with customized response handling when limits are exceeded. Implements the same 60 requests per hour limit but with custom error messaging.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/rate-limiting/reference/nextjs/Examples.mdx#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{ByIPCustomResponseAppTS}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n{ByIPCustomResponsePagesTS}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{ByIPCustomResponseAppJS}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{ByIPCustomResponsePagesJS}\n```\n\n----------------------------------------\n\nTITLE: Configuring Arcjet Redaction for LangChain LLM\nDESCRIPTION: TypeScript type definition for configuring Arcjet redaction options with a LangChain LLM. Similar to the Chat Model configuration, but uses 'llm' instead of 'chatModel' as the primary parameter.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/integrations/langchain.mdx#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype RedactOptions = {\n  llm: LLM,\n  entities?: Array<SensitiveInfoType>;\n  contextWindowSize?: number;\n  detect?: (tokens: string[]) -> Array<SensitiveInfoType | undefined>;\n  replace?: (detectedEntity: SensitiveInfoType) -> string | undefined;\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing Logging in Arcjet Node.js SDK\nDESCRIPTION: Demonstrates how to create a custom logger for the Arcjet SDK using Pino, with different output formats for production and development environments.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/reference/nodejs.mdx#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Arcjet } from \"@arcjet/node\";\nimport { rateLimit } from \"@arcjet/protect\";\nimport pino from \"pino\";\n\nconst logger =\n  process.env.NODE_ENV === \"production\"\n    ? pino()\n    : pino({\n        transport: {\n          target: \"pino-pretty\",\n          options: {\n            colorize: true\n          }\n        }\n      });\n\nconst aj = new Arcjet({\n  key: process.env.ARCJET_KEY,\n  rules: [\n    rateLimit({\n      mode: \"LIVE\",\n      rpm: 60\n    })\n  ],\n  logger\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Arcjet } = require(\"@arcjet/node\");\nconst { rateLimit } = require(\"@arcjet/protect\");\nconst pino = require(\"pino\");\n\nconst logger =\n  process.env.NODE_ENV === \"production\"\n    ? pino()\n    : pino({\n        transport: {\n          target: \"pino-pretty\",\n          options: {\n            colorize: true\n          }\n        }\n      });\n\nconst aj = new Arcjet({\n  key: process.env.ARCJET_KEY,\n  rules: [\n    rateLimit({\n      mode: \"LIVE\",\n      rpm: 60\n    })\n  ],\n  logger\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Token Bucket Rate Limiting with Arcjet in Next.js\nDESCRIPTION: This snippet demonstrates configuring a token bucket rate limit with a capacity of 100 tokens and a refill rate of 10 tokens per minute. The rule is applied to all requests to /api/hello and tracked by the client's IP address, allowing for request bursts followed by a controlled rate.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/rate-limiting/algorithms.mdx#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Arcjet } from \"@arcjet/next\";\nimport { ArcjetResponse } from \"@/libs/ArcjetResponse\";\n\nconst aj = new Arcjet({\n  key: process.env.ARCJET_KEY!,\n  rules: [\n    {\n      // type of rule: rate limit\n      name: \"rate_limit\",\n      // type of algorithm\n      type: \"token_bucket\",\n      // bucket capacity\n      capacity: 100,\n      // refill rate in tokens per interval\n      refill_rate: 10,\n      // refill interval in seconds\n      refill_interval: 60,\n      // what to key the rate limit by\n      key: \"ip\",\n      // what to match on\n      match: {\n        url: \"/api/hello\",\n      },\n    },\n  ],\n});\n\nexport async function GET(req: Request) {\n  const decision = await aj.protect(req, { requested: 1 });\n\n  if (decision.isDenied()) {\n    return ArcjetResponse.rateLimit(decision);\n  }\n\n  return new Response(\"Hello, World!\");\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ProtectSignupOptions Type in TypeScript\nDESCRIPTION: TypeScript type definition for signup protection options, which combines rate limiting, bot protection, and email validation settings. This defines the configuration structure used when setting up signup protection rules.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/signup-protection/reference.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype ProtectSignupOptions = {\n  rateLimit?: SlidingWindowRateLimitOptions | SlidingWindowRateLimitOptions[];\n  bots?:\n    | BotOptionsAllow\n    | BotOptionsDeny\n    | BotOptionsAllow[]\n    | BotOptionsDeny[];\n  email?: EmailOptions | EmailOptions[];\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Ad Hoc Rules in TypeScript\nDESCRIPTION: Demonstrates how to add ad hoc rules to the Arcjet client using the withRule function in TypeScript.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/reference/remix.mdx#2025-04-12_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ArcjetContext, ArcjetDecision } from \"@arcjet/next\";\n\nconst arcjetWithCustomRule = arcjet.withRule(\n  async (ctx: ArcjetContext): Promise<ArcjetDecision> => {\n    if (ctx.email === \"banned@example.com\") {\n      return {\n        conclusion: \"DENY\",\n        reason: { message: \"Banned email\" },\n      };\n    }\n    return { conclusion: \"ALLOW\" };\n  }\n);\n\nexport async function POST(request: Request) {\n  const decision = await arcjetWithCustomRule.protect(request, {\n    email: \"user@example.com\",\n  });\n\n  // ... rest of the handler\n}\n```\n\n----------------------------------------\n\nTITLE: Wrapping Handlers with Arcjet (TypeScript Pages Router)\nDESCRIPTION: Examples of wrapping Next.js API handlers with Arcjet in TypeScript for the Pages Router, with separate implementations for Node and Edge runtimes.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/reference/nextjs/Examples.mdx#2025-04-12_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n{WrapPagesNodeTS}\n{WrapPagesEdgeTS}\n```\n\n----------------------------------------\n\nTITLE: Configuring Redact Options in TypeScript\nDESCRIPTION: Definition of the RedactOptions type that specifies how the redaction should be configured, including which entities to redact, context window size, and custom detection and replacement functions.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/redact/reference.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype RedactOptions = {\n  entities?: Array<SensitiveInfoType>;\n  contextWindowSize?: number;\n  detect?: (tokens: string[]) -> Array<SensitiveInfoType | undefined>;\n  replace?: (detectedEntity: SensitiveInfoType) -> string | undefined;\n};\n```\n\n----------------------------------------\n\nTITLE: AI Token-Based Rate Limiting\nDESCRIPTION: Implements token bucket algorithm for AI applications, limiting to 2,000 tokens per hour with a 5,000 token bucket maximum. Specifically designed for OpenAI's GPT-3.5-turbo API.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/rate-limiting/reference/nextjs/Examples.mdx#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n{AIChatBotAppTS}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{AIChatBotAppJS}\n```\n\n----------------------------------------\n\nTITLE: Configuring Token Bucket Rate Limiting in TypeScript\nDESCRIPTION: Type definition for token bucket rate limiting options including mode selection, client characteristics, refill rate, interval, and bucket capacity settings.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/rate-limiting/reference.mdx#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype TokenBucketRateLimitOptions = {\n  mode?: \"LIVE\" | \"DRY_RUN\";\n  characteristics?: string[];\n  refillRate: number;\n  interval: number;\n  capacity: number;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Arcjet in Remix Action Handler - TypeScript\nDESCRIPTION: Example showing how to integrate Arcjet validation within a Remix action function for handling form submissions and non-GET requests. The code demonstrates using Shield and email validation for POST requests.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/shield/reference/remix/LoaderVsAction.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport SlotByFramework from \"@/components/SlotByFramework\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport ActionTS from \"./Action.ts?raw\";\nimport ActionJS from \"./Action.js?raw\";\n```\n\n----------------------------------------\n\nTITLE: Checking for Spoofed Bots in TypeScript\nDESCRIPTION: This snippet demonstrates how to check if a bot is spoofed using the Arcjet decision object. It iterates through the results and checks for spoofed bots, which is useful for blocking malicious requests.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/bot-protection/reference.mdx#2025-04-12_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nfor (const { reason } of decision.results) {\n  if (reason.isBot() && reason.isSpoofed()) {\n    console.log(\"Detected spoofed bot\", reason.spoofed);\n    // Return a 403 or similar response\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Redacting and Unredacting Text with Arcjet\nDESCRIPTION: Example showing how to use the redact() function to protect sensitive information and later unredact it to restore the original text. The function returns both the redacted text and an unredact function as a tuple.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/redact/reference.mdx#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { redact } from \"@arcjet/redact\";\n\n// This text contains sensitive information that we want to redact\nconst text = \"My email is example@example.com and my credit card is 4111-1111-1111-1111\";\n\n// Redact the text\nconst [redactedText, unredact] = redact(text);\n\nconsole.log(redactedText);\n// Outputs: \"My email is EMAIL@REDACTED and my credit card is CREDIT-CARD@REDACTED\"\n\n// Later on we can unredact the text\nconst unredactedText = unredact(redactedText);\n\nconsole.log(unredactedText);\n// Outputs: \"My email is example@example.com and my credit card is 4111-1111-1111-1111\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Per-Route Guard with Arcjet in NestJS\nDESCRIPTION: Shows how to implement route-specific Arcjet guards that allow for customized security rules per endpoint. The guard automatically receives the ArcjetClient from the app module.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/reference/nestjs/DecoratorRoutes.mdx#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n${PerRouteGuard}\n```\n\n----------------------------------------\n\nTITLE: Creating a Form Component in Svelte\nDESCRIPTION: A Svelte component that creates a user registration form. The form captures user input and submits it to the server for processing with Arcjet protection.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/signup-protection/quick-start/sveltekit/Step3.mdx#2025-04-12_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<Code code={Step3Svelte} lang=\"js\" title=\"/src/routes/form/+page.svelte\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Global Guard with Arcjet in NestJS (TypeScript)\nDESCRIPTION: This code snippet shows how to create a global guard in NestJS using Arcjet. It sets up the ArcjetModule, configures it with an API key, and applies it as a global guard to all routes in the application.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/get-started/nest-js/Step3.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Module } from '@nestjs/common';\nimport { APP_GUARD } from '@nestjs/core';\nimport { ArcjetGuard, ArcjetModule } from '@arcjet/nestjs';\n\n@Module({\n  imports: [\n    ArcjetModule.register({\n      apiKey: process.env.ARCJET_API_KEY,\n    }),\n  ],\n  providers: [\n    {\n      provide: APP_GUARD,\n      useClass: ArcjetGuard,\n    },\n  ],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Trusted Proxies for Accurate Client IP Detection\nDESCRIPTION: Sets up Arcjet to properly handle X-Forwarded-For headers by specifying trusted proxy IP addresses, allowing accurate client IP identification.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/reference/nestjs.mdx#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Module } from \"@nestjs/common\";\nimport { ArcjetModule } from \"@arcjet/nest\";\nimport { shield } from \"@arcjet/protocol\";\n\n@Module({\n  imports: [\n    ArcjetModule.forRoot({\n      key: \"aj_12345abcdef\",\n      rules: [shield()],\n      // Add the IPs of your trusted proxies\n      proxies: [\"100.100.100.100\", \"10.0.0.1\"],\n    }),\n  ],\n})\nexport class AppModule {}\n\n```\n\n----------------------------------------\n\nTITLE: Protecting Pages with Arcjet (TypeScript Pages Router)\nDESCRIPTION: Direct page protection implementation in Next.js Pages Router using TypeScript. Shows how to protect individual pages using Arcjet SDK.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/reference/nextjs/Examples.mdx#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{ProtectPagePagesTS}\n```\n\n----------------------------------------\n\nTITLE: Handling Identified Bots in TypeScript\nDESCRIPTION: This code snippet shows how to access and log the allowed and denied bots identified in an Arcjet decision. It's useful for understanding which bots were detected and their status.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/bot-protection/reference.mdx#2025-04-12_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { isVerifiedBot } from \"@arcjet/inspect\";\n\n// ...\nconst aj = arcjet({\n  // ...\n  rules: [\n    detectBot({\n      mode: \"LIVE\",\n      allow: [\"CATEGORY:SEARCH_ENGINE\"],\n    }),\n  ],\n});\n\n// ...\nconst decision = await aj.protect(req);\n// ...\n\n// Ignore other signals for verified search engine bots\nif (decision.results.some(isVerifiedBot)) {\n  return new Response(\"Hello Bot!\");\n}\n\n// Leverage all Arcjet signals\nif (decision.isDenied()) {\n  return new Response(null, { status: 403 });\n}\n```\n\n----------------------------------------\n\nTITLE: Wrapping Handlers with Arcjet (TypeScript App Router)\nDESCRIPTION: Example of wrapping Next.js API handlers with Arcjet in TypeScript for the App Router, supporting both Node and Edge runtimes.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/reference/nextjs/Examples.mdx#2025-04-12_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n{WrapAppTS}\n```\n\n----------------------------------------\n\nTITLE: Iterating Through Rule Results in TypeScript\nDESCRIPTION: This snippet demonstrates how to iterate through the results of Arcjet rule evaluations and log each result. It uses the 'results' property of the ArcjetDecision object.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/reference/nestjs.mdx#2025-04-12_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nfor (const result of decision.results) {\n  this.logger.log(\"Rule Result\", result);\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Suspicious Request with Arcjet Shield\nDESCRIPTION: Shows how to make a cURL request with a suspicious header flag to test Arcjet Shield's blocking functionality.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/shield/quick-start/sveltekit/Step5.mdx#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncurl -v -H \"x-arcjet-suspicious: true\" http://localhost:5173\n```\n\n----------------------------------------\n\nTITLE: Implementing Token Bucket Rate Limiting in Next.js App Router (JavaScript)\nDESCRIPTION: This code snippet illustrates how to set up token bucket rate limiting middleware using Arcjet in a Next.js application with App Router, using JavaScript. It imports Arcjet components, configures the middleware, and applies it to the API route.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/rate-limiting/reference/nextjs/TokenBucketRequest.mdx#2025-04-12_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport TokenBucketAppJS from \"./TokenBucketApp.js?raw\";\n```\n\n----------------------------------------\n\nTITLE: Advanced Next.js Middleware Configuration for Arcjet (JavaScript)\nDESCRIPTION: Implements advanced Arcjet Bot Protection middleware in Next.js with JavaScript, allowing custom response handling based on Arcjet decisions.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/quick-start/nextjs/Step3.mdx#2025-04-12_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { NextResponse } from \"next/server\";\nimport { createArcjet } from \"@arcjet/next\";\n\nexport default createArcjet({\n  async onSuccess(request) {\n    return NextResponse.next();\n  },\n  async onBlock(request, decision) {\n    return NextResponse.json(\n      { error: \"Blocked by Arcjet Bot Protection\" },\n      { status: 403 }\n    );\n  },\n});\n\nexport const config = {\n  matcher: [\"/((?!api|_next/static|_next/image|favicon.ico).+)\"],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Arcjet Redaction for LangChain Chat Model\nDESCRIPTION: TypeScript type definition for configuring Arcjet redaction options with a LangChain Chat Model. Includes parameters for specifying the chat model, entities to redact, context window size, and custom detection and replacement functions.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/integrations/langchain.mdx#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype RedactOptions = {\n  chatModel: ChatModel,\n  entities?: Array<SensitiveInfoType>;\n  contextWindowSize?: number;\n  detect?: (tokens: string[]) -> Array<SensitiveInfoType | undefined>;\n  replace?: (detectedEntity: SensitiveInfoType) -> string | undefined;\n};\n```\n\n----------------------------------------\n\nTITLE: Iterating Through Arcjet Rule Results\nDESCRIPTION: Simple example demonstrating how to iterate through the results of each applied Arcjet rule. This can be useful for logging purposes or adding metadata to user records in a database.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/signup-protection/reference.mdx#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfor (const result of decision.results) {\n  console.log(\"Rule Result\", result);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Logging in Arcjet (JavaScript)\nDESCRIPTION: Shows the JavaScript equivalent of implementing custom logging in Arcjet using Pino logger. It sets up the same custom logging configuration as the TypeScript version for a Next.js application.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/reference/nextjs.mdx#2025-04-12_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport arcjet, { fixedWindow } from \"@arcjet/next\";\nimport pino from \"pino\";\n\nconst logger =\n  process.env.NODE_ENV === \"production\"\n    ? pino()\n    : pino({\n        transport: {\n          target: \"pino-pretty\",\n          options: {\n            colorize: true,\n          },\n        },\n      });\n\nconst aj = arcjet({\n  key: process.env.ARCJET_KEY,\n  characteristics: [\"ip.src\"],\n  rules: [\n    fixedWindow({\n      window: \"1h\",\n      max: 60,\n    }),\n  ],\n  logger,\n});\n\nexport { aj };\n```\n\n----------------------------------------\n\nTITLE: Implementing Token Bucket Rate Limiting in Next.js Pages Router (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to implement token bucket rate limiting middleware using Arcjet in a Next.js application with Pages Router. It imports Arcjet components, sets up the middleware configuration, and applies it to the API route.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/rate-limiting/reference/nextjs/TokenBucketRequest.mdx#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport TokenBucketPagesTS from \"./TokenBucketPages.ts?raw\";\n```\n\n----------------------------------------\n\nTITLE: Next.js Implementation Command\nDESCRIPTION: A shell command that appears to be related to the implementation of the described payment form protection in a Next.js application using shadcn/ui components.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/blueprints/payment-form.mdx#2025-04-12_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Arcjet SDK in Node.js\nDESCRIPTION: Demonstrates how to create and configure an Arcjet object with API key and rules. It shows the required and optional fields for configuration.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/reference/nodejs.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Arcjet } from \"@arcjet/node\";\nimport { rateLimit } from \"@arcjet/protect\";\n\nconst aj = new Arcjet({\n  key: process.env.ARCJET_KEY,\n  rules: [\n    rateLimit({\n      mode: \"LIVE\",\n      rpm: 60\n    })\n  ],\n  characteristics: [\"ip\", \"user-agent\"]\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Arcjet } = require(\"@arcjet/node\");\nconst { rateLimit } = require(\"@arcjet/protect\");\n\nconst aj = new Arcjet({\n  key: process.env.ARCJET_KEY,\n  rules: [\n    rateLimit({\n      mode: \"LIVE\",\n      rpm: 60\n    })\n  ],\n  characteristics: [\"ip\", \"user-agent\"]\n});\n```\n\n----------------------------------------\n\nTITLE: Protecting Pages with Arcjet Middleware (JavaScript)\nDESCRIPTION: Implementation of Arcjet protection using Next.js middleware in JavaScript for the App Router. Sets up route matching and protection for specific paths.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/reference/nextjs/Examples.mdx#2025-04-12_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{ProtectPageMiddlewareJS}\n```\n\n----------------------------------------\n\nTITLE: Custom Logging with Pino in TypeScript\nDESCRIPTION: Demonstrates how to set up custom logging for Arcjet using Pino. Creates a logger that outputs JSON in production and pretty-prints in development.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/reference/bun.mdx#2025-04-12_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport arcjet, { fixedWindow } from \"@arcjet/bun\";\nimport { env } from \"bun\";\nimport pino from \"pino\";\n\nconst loggerOptions =\n  process.env.NODE_ENV === \"production\"\n    ? {}\n    : {\n        transport: {\n          target: \"pino-pretty\",\n          options: {\n            colorize: true,\n          },\n        },\n      };\n\nconst logger = pino(loggerOptions);\n\nconst aj = arcjet({\n  key: env.ARCJET_KEY!,\n  characteristics: [\"ip.src\"],\n  rules: [fixedWindow({ window: \"1h\", max: 60 })],\n  logger,\n});\n\nconst server = Bun.serve({\n  fetch: aj.handler(async (request) => {\n    const decision = await aj.protect({ request });\n\n    if (decision.isDenied()) {\n      return new Response(\n        JSON.stringify({ message: \"You have been rate limited\" }),\n        { status: 429 }\n      );\n    }\n\n    // Your API logic here\n    return new Response(\"Hello, world!\");\n  }),\n  port: 3000,\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Token Bucket Rate Limiting in Next.js Pages Router (JavaScript)\nDESCRIPTION: This code snippet shows how to implement token bucket rate limiting middleware using Arcjet in a Next.js application with Pages Router, using JavaScript. It imports Arcjet components, sets up the middleware configuration, and applies it to the API route.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/rate-limiting/reference/nextjs/TokenBucketRequest.mdx#2025-04-12_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport TokenBucketPagesJS from \"./TokenBucketPages.ts?raw\";\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Entity Detection in Arcjet Redact\nDESCRIPTION: Example demonstrating how to create a custom entity detection function that can identify sensitive information not supported by default. It uses a regex pattern to identify UK postal codes in text.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/redact/reference.mdx#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { redact } from \"@arcjet/redact\";\n\n// Create some text that has a UK post code in it\nconst text = \"Please deliver the package to SW1A 1AA.\";\n\n// Create a regex pattern for UK post codes\nconst ukPostCodeRegex = /^[A-Z]{1,2}[0-9][A-Z0-9]? ?[0-9][A-Z]{2}$/;\n\n// Create a redacted version of the text with a custom entity detector\nconst [redactedText, unredact] = redact(text, {\n  // Detect function takes a list of tokens and returns a list of entity types or undefined\n  detect: (tokens) => {\n    return tokens.map((token) => {\n      if (ukPostCodeRegex.test(token)) {\n        return \"uk-post-code\";\n      }\n      return undefined;\n    });\n  },\n});\n\nconsole.log(redactedText);\n// Outputs: \"Please deliver the package to UK-POST-CODE@REDACTED.\"\n\nconst unredactedText = unredact(redactedText);\n\nconsole.log(unredactedText);\n// Outputs: \"Please deliver the package to SW1A 1AA.\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Global Guard in NestJS with Arcjet\nDESCRIPTION: Shows how to set up a global Arcjet guard in src/app.module.ts that will be applied to all protected routes. Demonstrates the creation and configuration of the guard using the ArcjetClient.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/reference/nestjs/DecoratorRoutes.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n${GlobalGuardTS}\n```\n\n----------------------------------------\n\nTITLE: Testing Response for Detected Sensitive Information\nDESCRIPTION: Example log output showing Arcjet's detection and denial of a request containing sensitive information. Includes the decision object with rule results and reason for denial.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/sensitive-info/quick-start.mdx#2025-04-12_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nArcjet decision ArcjetDenyDecision {\n  id: '', // This will contain the Arcjet request ID\n  ttl: 0,\n  results: [\n    ArcjetRuleResult {\n      ruleId: '',\n      ttl: 0,\n      state: 'RUN',\n      conclusion: 'DENY',\n      reason: [ArcjetSensitiveInfoReason]\n    }\n  ],\n...\n```\n\n----------------------------------------\n\nTITLE: Processing Rate Limit Results in TypeScript\nDESCRIPTION: Example code showing how to iterate through and log rate limit decision results.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/rate-limiting/reference.mdx#2025-04-12_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nfor (const result of decision.results) {\n  console.log(\"Rule Result\", result);\n}\n```\n\n----------------------------------------\n\nTITLE: Blocking Non-US Traffic in TypeScript\nDESCRIPTION: Example showing how to implement US-only access by blocking all other countries using Arcjet's IP geolocation.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/blueprints/ip-geolocation.mdx#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// ... imports, client configuration, etc\n// See https://docs.arcjet.com/get-started\nconst decision = await aj.protect(req);\n\nif (decision.ip.hasCountry() && decision.ip.country !== \"US\") {\n  // Return 403 Forbidden\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Arcjet Protection in JavaScript Server Route\nDESCRIPTION: JavaScript server-side code for handling form submissions with Arcjet protection. This is the JavaScript equivalent of the TypeScript implementation, using the ARCJET_KEY for authentication.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/signup-protection/quick-start/sveltekit/Step3.mdx#2025-04-12_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<Code\n  code={Step3JS}\n  lang=\"js\"\n  title=\"/src/routes/form/+server.js\"\n  mark={[\"ARCJET_KEY\"]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Bot Protection Guard in NestJS (TypeScript)\nDESCRIPTION: TypeScript code showing how to import and configure an Arcjet guard for NestJS applications. The guard will be applied globally to all routes, returning a 403 Forbidden response for automated clients.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/quick-start/nestjs/Step3.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport Step3TS from \"./Step3.ts?raw\";\n```\n\n----------------------------------------\n\nTITLE: Next.js Combined Arcjet Shield and Clerk Middleware\nDESCRIPTION: Advanced middleware implementation that chains Arcjet Shield protection with Clerk authentication, providing comprehensive security for Next.js applications.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/integrations/clerk.mdx#2025-04-12_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { authMiddleware } from \"@clerk/nextjs\";\nimport { arcjet } from \"@arcjet/next\";\nimport { NextResponse } from \"next/server\";\n\nconst aj = arcjet(process.env.ARCJET_KEY!);\n\nconst middleware = aj.shield(\n  authMiddleware({\n    publicRoutes: [\"/\"],\n    async afterAuth(auth, req) {\n      if (!auth.userId) {\n        return;\n      }\n\n      const existingHeaders = new Headers(req.headers);\n      existingHeaders.set(\"arcjet-user-id\", auth.userId);\n\n      return NextResponse.next({\n        request: {\n          headers: existingHeaders,\n        },\n      });\n    },\n  })\n);\n\nexport default middleware;\n\nexport const config = {\n  matcher: [\"/((?!.+\\\\.[\\\\w]+$|_next).*)\", \"/\", \"/(api|trpc)(.*)\"],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Sensitive Info Detection with Deny Options\nDESCRIPTION: TypeScript type definition for configuring sensitive information detection with denied information types. Includes options for mode, denied types, context window size, and custom detection function.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/sensitive-info/reference.mdx#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype SensitiveInfoOptionsDeny = {\n  mode?: \"LIVE\" | \"DRY_RUN\";\n  deny?: Array<ArcjetSensitiveInfoType>;\n  contextWindowSize?: number;\n  detect?: (tokens: string[]) -> Array<SensitiveInfoType | undefined>;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing a Feedback Form Component in Next.js with TypeScript\nDESCRIPTION: This React component implements a feedback form using Next.js and shadcn UI components. It includes form submission handling, error toasts, and redaction of sensitive information.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/blueprints/feedback-form.mdx#2025-04-12_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\";\n\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useRouter } from \"next/navigation\";\nimport { useState } from \"react\";\nimport {redact} from \"@arcjet/redact\";\n\nexport default function FeedbackForm() {\n  const [feedback, setFeedback] = useState(\"\");\n  const [email, setEmail] = useState(\"user@example.com\");\n  const [isLoading, setIsLoading] = useState(false);\n  const router = useRouter();\n  const { toast } = useToast();\n\n  async function onSubmit(event: React.FormEvent) {\n    event.preventDefault();\n    setIsLoading(true);\n\n    const [redacted: redactedFeedback] = await redact(feedback, {\n          entities: [\"credit-card-number\"],\n    });\n\n    const response = await fetch(\"/api/send-feedback\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ email, redactedFeedback }),\n    });\n\n    setIsLoading(false);\n\n    const responseData = await response.json();\n\n    if (response.ok) {\n      router.push(\"/success\");\n    } else {\n      toast({\n        title: \"Submission Failed\",\n        description:\n          \"There was an error submitting your feedback: \" + responseData.message,\n        variant: \"destructive\",\n      });\n    }\n  }\n\n  return (\n    <>\n      <Card className=\"w-full max-w-md mx-auto\">\n        <CardHeader>\n          <CardTitle>Feedback Form</CardTitle>\n          <CardDescription>Enter your details below</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={onSubmit} className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"email\">Email</Label>\n              <Input\n                id=\"email\"\n                type=\"email\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                required\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"amount\">How was your experience?</Label>\n              <Input\n                id=\"feedback\"\n                value={feedback}\n                onChange={(e) => setFeedback(e.target.value)}\n                required\n              />\n            </div>\n            <Button type=\"submit\" className=\"w-full\" disabled={isLoading}>\n              {isLoading ? \"Submitting...\" : \"Submit Feedback\"}\n            </Button>\n          </form>\n        </CardContent>\n      </Card>\n      <Toaster />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Request Protection with Arcjet in JavaScript\nDESCRIPTION: Demonstrates how to use the protect function to evaluate a request against configured rules in JavaScript. Shows how to handle denied requests and implement custom response behavior.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/reference/bun.mdx#2025-04-12_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport arcjet, { fixedWindow } from \"@arcjet/bun\";\nimport { env } from \"bun\";\n\nconst aj = arcjet({\n  key: env.ARCJET_KEY,\n  rules: [fixedWindow({ window: \"1h\", max: 60 })],\n});\n\nconst server = Bun.serve({\n  fetch: aj.handler(async (request) => {\n    const decision = await aj.protect({ request });\n\n    if (decision.isDenied()) {\n      return new Response(\n        JSON.stringify({ message: \"You have been rate limited\" }),\n        { status: 429 }\n      );\n    }\n\n    // Your API logic here\n    return new Response(\"Hello, world!\");\n  }),\n  port: 3000,\n});\n```\n\n----------------------------------------\n\nTITLE: Excluding Routes from Arcjet Hook in SvelteKit\nDESCRIPTION: This snippet demonstrates how to configure an Arcjet hook in SvelteKit while excluding specific routes that already have Arcjet protection. It uses a matcher function to determine which routes should be processed by the hook.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/reference/sveltekit/PerRouteVsHooks.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Handle } from '@sveltejs/kit';\nimport { sequence } from '@sveltejs/kit/hooks';\nimport { Arcjet } from '@arcjet/next';\n\n// Create an Arcjet instance\nconst aj = new Arcjet({\n  site: 'example',\n  token: process.env.ARCJET_TOKEN,\n});\n\n// Matcher function to exclude specific routes\nconst matcher = (path: string) => {\n  // Exclude the /api/arcjet route\n  return !path.startsWith('/api/arcjet');\n};\n\n// Create an Arcjet middleware\nconst arcjetMiddleware: Handle = async ({ event, resolve }) => {\n  if (!matcher(event.url.pathname)) {\n    return resolve(event);\n  }\n\n  const result = await aj.protect(event.request);\n\n  if (!result.success) {\n    return new Response('Access denied', { status: 403 });\n  }\n\n  return resolve(event);\n};\n\n// Add the Arcjet middleware to the handle function\nexport const handle: Handle = sequence(arcjetMiddleware);\n```\n\n----------------------------------------\n\nTITLE: Global Middleware Rate Limiting\nDESCRIPTION: Implements rate limiting at the middleware level to apply across all routes in a Next.js application.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/rate-limiting/reference/nextjs/Examples.mdx#2025-04-12_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n{MiddlewareGlobal}\n```\n\n----------------------------------------\n\nTITLE: Implementing Nosecone Middleware in Next.js (TypeScript)\nDESCRIPTION: This code snippet shows how to set up Nosecone middleware in a Next.js application using TypeScript. It applies security headers to all routes.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/nosecone/quick-start/next-js/Step2.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextResponse } from \"next/server\";\nimport { withMiddleware } from \"@nosecone/next\";\n\nconst handler = withMiddleware();\n\nexport default handler;\n```\n\n----------------------------------------\n\nTITLE: Implementing Arcjet Within Route Controller in NestJS\nDESCRIPTION: Demonstrates direct integration of Arcjet within a route handler for maximum flexibility. This approach allows custom rules and response handling but requires more code per route.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/shield/reference/nestjs/DecoratorRoutes.mdx#2025-04-12_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller, Get, HttpException, HttpStatus, Req } from \"@nestjs/common\";\nimport { ArcjetClient } from \"@arcjet/node\";\nimport { RateLimit } from \"@arcjet/protocol\";\n\n@Controller(\"example\")\nexport class ExampleController {\n  constructor(private arcjet: ArcjetClient) {}\n\n  @Get()\n  async findAll(@Req() request: any) {\n    const decision = await this.arcjet.protect({\n      source: { ip: request.ip, email: request.user?.email },\n      characteristics: { host: request.headers.host },\n      rules: [new RateLimit({ characteristics: [\"host\"] })],\n    });\n\n    if (decision.decision === \"DENY\") {\n      // Custom error handling\n      throw new HttpException(\n        \"Rate limit exceeded. Try again later.\",\n        HttpStatus.TOO_MANY_REQUESTS\n      );\n    }\n\n    return { message: \"This route is protected by Arcjet rate limiting\" };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Logging with Pino in JavaScript\nDESCRIPTION: Demonstrates how to set up custom logging for Arcjet using Pino. Creates a logger that outputs JSON in production and pretty-prints in development.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/reference/bun.mdx#2025-04-12_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport arcjet, { fixedWindow } from \"@arcjet/bun\";\nimport { env } from \"bun\";\nimport pino from \"pino\";\n\nconst loggerOptions =\n  process.env.NODE_ENV === \"production\"\n    ? {}\n    : {\n        transport: {\n          target: \"pino-pretty\",\n          options: {\n            colorize: true,\n          },\n        },\n      };\n\nconst logger = pino(loggerOptions);\n\nconst aj = arcjet({\n  key: env.ARCJET_KEY,\n  characteristics: [\"ip.src\"],\n  rules: [fixedWindow({ window: \"1h\", max: 60 })],\n  logger,\n});\n\nconst server = Bun.serve({\n  fetch: aj.handler(async (request) => {\n    const decision = await aj.protect({ request });\n\n    if (decision.isDenied()) {\n      return new Response(\n        JSON.stringify({ message: \"You have been rate limited\" }),\n        { status: 429 }\n      );\n    }\n\n    // Your API logic here\n    return new Response(\"Hello, world!\");\n  }),\n  port: 3000,\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing Arcjet Middleware Response in Next.js (JavaScript)\nDESCRIPTION: This snippet shows how to customize the Arcjet middleware response in a Next.js application using JavaScript. It returns a 403 Forbidden response if a hosting provider IP address is detected for the bot detection rule.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/reference/nextjs/Middleware.mdx#2025-04-12_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { NextResponse } from \"next/server\";\nimport { Arcjet } from \"@arcjet/next\";\n\nconst arcjet = new Arcjet({\n  key: process.env.ARCJET_KEY,\n});\n\nexport default arcjet.middleware((request) => {\n  const { decision } = request.arcjet;\n\n  if (decision.rules[\"bot-detection\"]?.result === \"HOSTING_PROVIDER\") {\n    return NextResponse.json(\n      { error: \"Forbidden\" },\n      { status: 403 }\n    );\n  }\n\n  return NextResponse.next();\n});\n\nexport const config = {\n  matcher: [\"/((?!_next/static|_next/image|favicon.ico).*)\"],\n};\n\n```\n\n----------------------------------------\n\nTITLE: Edge Function Implementation (TypeScript)\nDESCRIPTION: Implementation of Arcjet in Edge Functions using TypeScript, showing integration with Next.js Edge Runtime.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/reference/nextjs/Examples.mdx#2025-04-12_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n{EdgeAppTS}\n{EdgePagesTS}\n```\n\n----------------------------------------\n\nTITLE: Request Body Clone Example\nDESCRIPTION: Example showing how to properly clone a request before accessing its body to prevent 'Body already read' errors.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/troubleshooting.mdx#2025-04-12_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// Clone the request and extract the email\nconst { email } = await req.clone().json();\n\n// Call Arcjet with the cloned request\nconst decision = await aj.protect(req, { email });\n\n// ...\n// You can now access the body again later\n```\n\n----------------------------------------\n\nTITLE: Checking Rule-Specific Decision Results in Arcjet\nDESCRIPTION: Example code showing how to inspect Arcjet decision results to determine the specific reason for request denial, such as rate limit exceeded or bot detection.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/public/llms.txt#2025-04-12_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nconst decision = await aj.protect(req);\n\nif (decision.isDenied()) {\n  if (decision.reason.isRateLimit()) {\n    console.error(\"Rate limit exceeded\", decision.reason);\n  } else if (decision.reason.isBot()) {\n    console.error(\"Bot detected\", decision.reason);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Arcjet Protection for Next.js API Route (JavaScript, Pages Router)\nDESCRIPTION: This snippet demonstrates how to implement Arcjet protection for a Next.js API route using JavaScript and the Pages Router. It sets up the Arcjet client, creates a shield, and wraps the API handler function with Arcjet protection.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/shield/reference/nextjs/PerRoute.mdx#2025-04-12_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Arcjet, Shield } from \"@arcjet/next\";\n\nconst arcjet = new Arcjet({\n  // Configure your Arcjet client here\n});\n\nconst shield = new Shield({\n  // Configure your shield here\n});\n\nasync function handler(req, res) {\n  // Your API logic here\n  res.status(200).json({ message: \"Hello from Arcjet!\" });\n}\n\nexport default shield.protect(handler);\n\n```\n\n----------------------------------------\n\nTITLE: Iterating Through Decision Results in TypeScript\nDESCRIPTION: This snippet demonstrates how to iterate through the results of an Arcjet decision and log each rule result. It's useful for debugging and understanding which bot protection rules were applied.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/bot-protection/reference.mdx#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfor (const result of decision.results) {\n  console.log(\"Rule Result\", result);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Trusted Proxies in Arcjet\nDESCRIPTION: Shows how to configure Arcjet to work with load balancers by specifying trusted proxies. This allows the SDK to correctly identify client IP addresses from X-Forwarded-For headers.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/reference/bun.mdx#2025-04-12_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport arcjet, { fixedWindow } from \"@arcjet/bun\";\nimport { env } from \"bun\";\n\nconst aj = arcjet({\n  key: env.ARCJET_KEY!,\n  // Tell Arcjet to trust the X-Forwarded-For header from these proxies\n  // This is the IP address of your load balancer\n  proxies: [\"100.100.100.100\"],\n  characteristics: [\"ip.src\"],\n  rules: [fixedWindow({ window: \"1h\", max: 60 })],\n});\n```\n\n----------------------------------------\n\nTITLE: Interpreting Arcjet Shield Dry Run Mode Logs\nDESCRIPTION: Shows the log output after sending suspicious requests to an Arcjet-protected endpoint in dry run mode. The logs indicate that while the rule would deny the request (DENY conclusion), the actual result is ALLOW because the rule is in dry run mode rather than live mode.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/shield/quick-start/nextjs/Step5.mdx#2025-04-12_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nRule Result ArcjetRuleResult {\n   ttl: 0,\n   state: 'DRY_RUN',\n   conclusion: 'DENY',\n   reason: ArcjetShieldReason { type: 'SHIELD', shieldTriggered: true }\n}\nConclusion ALLOW\n```\n\n----------------------------------------\n\nTITLE: Bot Protection Allow Configuration Type Definition\nDESCRIPTION: TypeScript type definition for bot protection allow configuration. Specifies the mode (LIVE or DRY_RUN) and an array of allowed bots or bot categories.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/bot-protection/reference.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype BotOptionsAllow = {\n  mode?: \"LIVE\" | \"DRY_RUN\";\n  allow: Array<ArcjetWellKnownBot | ArcjetBotCategory>;\n};\n```\n\n----------------------------------------\n\nTITLE: Creating API Route with Arcjet in TypeScript\nDESCRIPTION: Demonstrates setting up an Arcjet-enabled API route in SvelteKit using TypeScript. Shows the file structure and import pattern for TypeScript implementation.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/rate-limiting/quick-start/sveltekit/Step3.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport Step3TS from \"./Step3.ts?raw\";\n```\n\n----------------------------------------\n\nTITLE: Unredacting Protected Information with Arcjet\nDESCRIPTION: Example demonstrating how to unredact previously redacted text using the unredact function.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/redact/quick-start.mdx#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n${QuickStartUnredact}\n```\n\n----------------------------------------\n\nTITLE: Defining Arcjet Local Rule Interface in TypeScript\nDESCRIPTION: Shows the interface structure required for creating custom local rules in Arcjet SDK. The interface defines the rule type, mode, priority, validation, and protection methods.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/blueprints/defining-custom-rules.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ArcjetLocalRule<Props extends { [key: string]: unknown } = {}> {\n  type: string;\n  mode: \"LIVE\" | \"DRY_RUN\";\n  priority: number;\n  validate(\n    context: ArcjetContext,\n    details: Partial<ArcjetRequestDetails & Props>,\n  ): asserts details is ArcjetRequestDetails & Props;\n  protect(\n    context: ArcjetContext,\n    details: ArcjetRequestDetails & Props,\n  ): Promise<ArcjetRuleResult>;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Middleware Matcher to Avoid Double Protection in Next.js\nDESCRIPTION: This snippet demonstrates how to configure the middleware matcher in Next.js to avoid double protection when using Arcjet in both middleware and individual routes. It excludes the '/api/hello' route from the middleware.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/reference/nextjs/Middleware.mdx#2025-04-12_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextResponse } from \"next/server\";\nimport type { NextRequest } from \"next/server\";\nimport { Arcjet } from \"@arcjet/next\";\n\nconst arcjet = new Arcjet({\n  key: process.env.ARCJET_KEY,\n});\n\nexport default arcjet.middleware(() => {\n  return NextResponse.next();\n});\n\nexport const config = {\n  matcher: [\"/((?!api/hello|_next/static|_next/image|favicon.ico).*)\"],\n};\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Arcjet SDK in Next.js (JavaScript)\nDESCRIPTION: Shows the JavaScript equivalent of creating and configuring an Arcjet object in a Next.js application. It includes the same setup for required and optional fields as the TypeScript version.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/reference/nextjs.mdx#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport arcjet, { fixedWindow } from \"@arcjet/next\";\n\nconst aj = arcjet({\n  key: process.env.ARCJET_KEY,\n  characteristics: [\"ip.src\"],\n  rules: [\n    fixedWindow({\n      window: \"1h\",\n      max: 60,\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Chaining Nosecone Middleware with Auth.js in Next.js\nDESCRIPTION: Example of chaining Nosecone middleware with Auth.js middleware in Next.js.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/nosecone/reference.mdx#2025-04-12_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextResponse } from \"next/server\";\nimport type { NextRequest } from \"next/server\";\nimport * as nosecone from \"@nosecone/next\";\nimport { withAuth } from \"next-auth/middleware\";\n\nconst noseconeMiddleware = nosecone.createMiddleware();\n\nexport default function middleware(request: NextRequest) {\n  const response = NextResponse.next();\n\n  // Add Nosecone headers\n  const headers = noseconeMiddleware(request, response);\n  headers.forEach((value, key) => {\n    response.headers.set(key, value);\n  });\n\n  // Run Auth.js middleware\n  return withAuth(request, response);\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Bot Authenticity in TypeScript\nDESCRIPTION: This code snippet shows how to check if a bot is verified using the Arcjet decision object. It iterates through the results and checks for verified bots, which is useful for allowing legitimate bot traffic.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/bot-protection/reference.mdx#2025-04-12_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nfor (const { reason } of decision.results) {\n  if (reason.isBot() && reason.isVerified()) {\n    console.log(\"Verified bot\", reason.verified);\n    // Allow the request\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining NoseconeOptions Interface in TypeScript\nDESCRIPTION: TypeScript interface defining configuration options for various security headers. Each option can be enabled with defaults using boolean or configured with specific options through configuration objects.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/nosecone/reference.mdx#2025-04-12_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ninterface NoseconeOptions {\n  contentSecurityPolicy?: ContentSecurityPolicyConfig | boolean;\n  crossOriginEmbedderPolicy?: CrossOriginEmbedderPolicyConfig | boolean;\n  crossOriginOpenerPolicy?: CrossOriginOpenerPolicyConfig | boolean;\n  crossOriginResourcePolicy?: CrossOriginResourcePolicyConfig | boolean;\n  originAgentCluster?: boolean;\n  referrerPolicy?: ReferrerPolicyConfig | boolean;\n  strictTransportSecurity?: StrictTransportSecurityConfig | boolean;\n  xContentTypeOptions?: boolean;\n  xDnsPrefetchControl?: DnsPrefetchControlConfig | boolean;\n  xDownloadOptions?: boolean;\n  xFrameOptions?: FrameOptionsConfig | boolean;\n  xPermittedCrossDomainPolicies?: PermittedCrossDomainPoliciesConfig | boolean;\n  xXssProtection?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ShieldOptions for Arcjet Client\nDESCRIPTION: This code snippet shows the structure of ShieldOptions used to configure the Arcjet client with Shield rules. It includes options for mode and managed settings.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/shield/reference.mdx#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype ShieldOptions = {\n  mode: ArcjetMode;\n  managed?: boolean;\n};\n\ntype ArcjetMode = \"LIVE\" | \"DRY_RUN\" | \"TEST\";\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Logging in TypeScript\nDESCRIPTION: Sets up custom logging using Pino logger, with JSON output in production and pretty-print in development. Demonstrates how to override the default logger.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/reference/remix.mdx#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Arcjet } from \"@arcjet/remix\";\nimport pino from \"pino\";\n\nconst logger =\n  process.env.NODE_ENV === \"production\"\n    ? pino()\n    : pino({\n        transport: {\n          target: \"pino-pretty\",\n          options: {\n            colorize: true,\n          },\n        },\n      });\n\nconst aj = new Arcjet({\n  key: process.env.ARCJET_KEY,\n  rules: [],\n  logger,\n});\n```\n\n----------------------------------------\n\nTITLE: Error Logging in TypeScript\nDESCRIPTION: Shows how to handle and log errors when using Arcjet's protect function in TypeScript.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/reference/remix.mdx#2025-04-12_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst decision = await arcjet.protect(request, {\n  email: \"user@example.com\",\n});\n\nif (decision.isErrored()) {\n  console.error(\"Arcjet error:\", decision.reason);\n  return NextResponse.json({ error: \"An error occurred\" }, { status: 500 });\n}\n\nif (decision.isDenied()) {\n  return NextResponse.json({ error: \"Request denied\" }, { status: 403 });\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Shield Rule Application in Decision Results\nDESCRIPTION: This code snippet demonstrates how to iterate through decision results and log the full result along with the shield rule. It's a common pattern used across different frameworks to inspect the outcome of Arcjet Shield WAF rules.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/shield/reference.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfor (const result of decision.results) {\n  console.log(\"Rule Result\", result);\n}\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple Rules in JavaScript\nDESCRIPTION: Demonstration of combining multiple protection rules (rate limiting and bot protection) in JavaScript for a more comprehensive security strategy.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/reference/sveltekit.mdx#2025-04-12_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport arcjet, { fixedWindow, botProtection } from \"@arcjet/sveltekit\";\n\nconst aj = arcjet({\n  key: process.env.ARCJET_KEY,\n  characteristics: [\"ip.src\"],\n  rules: [\n    fixedWindow({\n      window: \"1h\",\n      max: 60,\n    }),\n    botProtection(),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Modifying Next.js 15 Layout for Nosecone (TypeScript)\nDESCRIPTION: This code snippet shows how to modify the layout file in Next.js 15 using TypeScript to opt-out of static generation for Nosecone compatibility.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/nosecone/quick-start/next-js/Step2.mdx#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { unstable_noStore as noStore } from \"next/cache\";\n\nexport default function RootLayout({ children }: { children: React.ReactNode }) {\n  return (\n    <html lang=\"en\">\n      <body>{children}</body>\n    </html>\n  );\n}\n\nexport const dynamic = \"force-dynamic\";\nexport const fetchCache = \"force-no-store\";\n```\n\n----------------------------------------\n\nTITLE: Implementing Language-Switchable Code Display\nDESCRIPTION: React/JSX component that renders code samples in either TypeScript or JavaScript format. Uses SelectableContent for toggling between languages and Astro's Code component for syntax highlighting.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/email-validation/reference/bun/DecisionLogAllow.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport DecisionLogAllowJS from \"./DecisionLogAllow.js?raw\";\nimport DecisionLogAllowTS from \"./DecisionLogAllow.ts?raw\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={DecisionLogAllowTS} lang=\"ts\" />\n  </div>\n  <div slot=\"JS\" slotIdx=\"2\">\n    <Code code={DecisionLogAllowJS} lang=\"js\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Checking Email Type with Arcjet Email Validation\nDESCRIPTION: This snippet demonstrates how to check the email type returned by Arcjet's validation and provide specific user feedback based on the detected email type.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/email-validation/reference.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nlet message = \"\";\n// You could return specific messages based on the email type, but this would\n// also reveal the validation to a spammer\nif (decision.reason.emailTypes.includes(\"DISPOSABLE\")) {\n  message = \"We do not allow disposable email addresses.\";\n} else if (decision.reason.emailTypes.includes(\"FREE\")) {\n  message =\n    \"We do not allow free email addresses, please use a business address.\";\n} else if (decision.reason.emailTypes.includes(\"NO_MX_RECORDS\")) {\n  message = \"Your email domain does not have an MX record. Is there a typo?\";\n} else if (decision.reason.emailTypes.includes(\"NO_GRAVATAR\")) {\n  message = \"We require a Gravatar profile to sign up.\";\n} else {\n  // This is a catch all\n  message = \"Invalid email.\";\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Rules in Arcjet (JavaScript)\nDESCRIPTION: Shows the JavaScript version of combining multiple rules in Arcjet configuration for a Next.js application. It demonstrates the same combination of rate limiting and bot protection rules as the TypeScript version.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/reference/nextjs.mdx#2025-04-12_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport arcjet, { fixedWindow, shield } from \"@arcjet/next\";\n\nconst aj = arcjet({\n  key: process.env.ARCJET_KEY,\n  characteristics: [\"ip.src\"],\n  rules: [\n    fixedWindow({\n      window: \"1h\",\n      max: 60,\n    }),\n    shield(),\n  ],\n});\n\nexport const config = {\n  matcher: [\"/api/:path*\"],\n};\n\nexport default aj.protect(async function middleware(request) {\n  // Your middleware logic here\n});\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Arcjet Client in TypeScript\nDESCRIPTION: This example demonstrates how to override the default Arcjet client with a custom implementation, which is typically not necessary but can be useful in specific scenarios.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/reference/bun.mdx#2025-04-12_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ArcjetClient } from \"@arcjet/client\";\n\nconst client = new ArcjetClient({\n  token: process.env.ARCJET_TOKEN,\n});\n\nconst arcjet = createArcjet({\n  token: process.env.ARCJET_TOKEN,\n  client,\n});\n```\n\n----------------------------------------\n\nTITLE: TypeScript Decision Result Logging\nDESCRIPTION: Example code showing how to iterate through and log Arcjet decision results\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/reference/nextjs.mdx#2025-04-12_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nfor (const result of decision.results) {\n  console.log(\"Rule Result\", result);\n}\n```\n\n----------------------------------------\n\nTITLE: Iterating Rule Results in TypeScript\nDESCRIPTION: Example showing how to iterate through and log rule results from an Arcjet decision object.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/reference/sveltekit.mdx#2025-04-12_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nfor (const result of decision.results) {\n  console.log(\"Rule Result\", result);\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Framework-Specific Content in Next.js Documentation\nDESCRIPTION: These snippets use the SlotByFramework component to conditionally render content specific to Next.js, including examples for middleware configuration and route matching.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/rate-limiting/reference/nextjs/PerRouteVsMiddleware.mdx#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<SlotByFramework client:load>\n  <MiddlewareMatchingPaths slot=\"next-js\" />\n</SlotByFramework>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<SlotByFramework client:load>\n  <MiddlewareAllRoutes slot=\"next-js\" />\n</SlotByFramework>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<SlotByFramework client:load>\n  <MiddlewareMatcher slot=\"next-js\" />\n</SlotByFramework>\n```\n\n----------------------------------------\n\nTITLE: Error Logging in JavaScript\nDESCRIPTION: Demonstrates error handling and logging when using Arcjet's protect function in JavaScript.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/reference/remix.mdx#2025-04-12_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst decision = await arcjet.protect(request, {\n  email: \"user@example.com\",\n});\n\nif (decision.isErrored()) {\n  console.error(\"Arcjet error:\", decision.reason);\n  return NextResponse.json({ error: \"An error occurred\" }, { status: 500 });\n}\n\nif (decision.isDenied()) {\n  return NextResponse.json({ error: \"Request denied\" }, { status: 403 });\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Trusted Proxies in TypeScript\nDESCRIPTION: Sets up Arcjet to trust specific IP addresses in the X-Forwarded-For header, allowing correct client IP identification behind load balancers or proxies.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/reference/remix.mdx#2025-04-12_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Arcjet } from \"@arcjet/remix\";\n\nconst aj = new Arcjet({\n  key: process.env.ARCJET_KEY,\n  rules: [],\n  proxies: [\"100.100.100.100\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Visualizing Arcjet Rate Limiting Flow with Mermaid Flowchart\nDESCRIPTION: This Mermaid flowchart diagram illustrates the request flow between a client, Arcjet SDK, and Arcjet API during rate limit evaluation. It demonstrates how requests are evaluated against Arcjet rules, how rate limit decisions are made and cached, and how 429 responses are returned to clients when limits are exceeded.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/mermaid/architecture-rl-cached.txt#2025-04-12_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    A[Client] -->|Request| B(Arcjet SDK)\n    B --> C{Evaluate Arcjet Rules}\n    C -->|Rate Limit Rule| D[✦ Arcjet API]\n    D -->|Limit exceeded| E[Application constructs response]\n    E -. Decision Cached Locally .-> B\n    E -->|\"429 Too Many Requests Response\"| A[Client]\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Arcjet Middleware in Next.js (JavaScript)\nDESCRIPTION: This snippet demonstrates how to set up basic Arcjet middleware in a Next.js application using JavaScript. It runs on every request except for static assets and uses the ARCJET_KEY for configuration.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/reference/nextjs/Middleware.mdx#2025-04-12_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { NextResponse } from \"next/server\";\nimport { Arcjet } from \"@arcjet/next\";\n\nconst arcjet = new Arcjet({\n  key: process.env.ARCJET_KEY,\n});\n\nexport default arcjet.middleware(() => {\n  return NextResponse.next();\n});\n\nexport const config = {\n  matcher: [\"/((?!_next/static|_next/image|favicon.ico).*)\"],\n};\n\n```\n\n----------------------------------------\n\nTITLE: Accessing Request Body with Arcjet Sensitive Info Rule in Express\nDESCRIPTION: This snippet demonstrates how to access the request body when using the Arcjet Sensitive Info rule with Express. It shows the implementation for both TypeScript and JavaScript, emphasizing the need to parse the body before calling the 'protect' function.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/sensitive-info/reference/nodejs/CustomDetect.mdx#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={AccessBodyTS} lang=\"ts\" />\n  </div>\n  <div slot=\"JS\" slotIdx=\"2\">\n    <Code code={AccessBodyJS} lang=\"js\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Configuring Sensitive Info Detection with Allow Options\nDESCRIPTION: TypeScript type definition for configuring sensitive information detection with allowed information types. Includes options for mode, allowed types, context window size, and custom detection function.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/sensitive-info/reference.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype SensitiveInfoOptionsAllow = {\n  mode?: \"LIVE\" | \"DRY_RUN\";\n  allow?: Array<ArcjetSensitiveInfoType>;\n  contextWindowSize?: number;\n  detect?: (tokens: string[]) -> Array<SensitiveInfoType | undefined>;\n};\n```\n\n----------------------------------------\n\nTITLE: Modifying Next.js Middleware Matcher for Health Checks\nDESCRIPTION: A diff showing how to adjust the Next.js middleware configuration to exclude health check routes from Arcjet protection. This prevents Arcjet from rejecting platform liveness probes.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/troubleshooting.mdx#2025-04-12_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n export const config = {\n   // matcher tells Next.js which routes to run the middleware on.\n   // This runs the middleware on all routes except for static assets.\n-  matcher: [\"/((?!_next/static|_next/image|favicon.ico).*)\"]\n+  matcher: [\"/((?!_next/static|_next/image|favicon.ico|healthz).*)\"]\n };\n```\n\n----------------------------------------\n\nTITLE: Setting Arcjet API Key in .env.local File\nDESCRIPTION: This snippet demonstrates how to add the Arcjet API key to a .env.local file in the project root. The ARCJET_KEY environment variable is set with the user's specific API key.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/quick-start/nextjs/Step2.mdx#2025-04-12_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nARCJET_KEY=ajkey_yourkey\n```\n\n----------------------------------------\n\nTITLE: Next.js Page Component with Server Action Button\nDESCRIPTION: Root page component that renders a button with server action functionality\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/reference/nextjs.mdx#2025-04-12_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button } from \"./ui/button\";\n\nexport default function Home() {\n  return (\n    <div>\n      <Button />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Arcjet Protection for Next.js API Route (TypeScript, Pages Router)\nDESCRIPTION: This snippet shows how to implement Arcjet protection for a Next.js API route using TypeScript and the Pages Router. It sets up the Arcjet client, creates a shield, and wraps the API handler with Arcjet protection.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/shield/reference/nextjs/PerRoute.mdx#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextApiRequest, NextApiResponse } from \"next\";\nimport { Arcjet, Shield } from \"@arcjet/next\";\n\nconst arcjet = new Arcjet({\n  // Configure your Arcjet client here\n});\n\nconst shield = new Shield({\n  // Configure your shield here\n});\n\nasync function handler(req: NextApiRequest, res: NextApiResponse) {\n  // Your API logic here\n  res.status(200).json({ message: \"Hello from Arcjet!\" });\n}\n\nexport default shield.protect(handler);\n\n```\n\n----------------------------------------\n\nTITLE: Advanced Next.js Middleware Configuration for Arcjet (TypeScript)\nDESCRIPTION: Implements advanced Arcjet Bot Protection middleware in Next.js with TypeScript, allowing custom response handling based on Arcjet decisions.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/quick-start/nextjs/Step3.mdx#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextResponse } from \"next/server\";\nimport { createArcjet } from \"@arcjet/next\";\n\nexport default createArcjet({\n  async onSuccess(request) {\n    return NextResponse.next();\n  },\n  async onBlock(request, decision) {\n    return NextResponse.json(\n      { error: \"Blocked by Arcjet Bot Protection\" },\n      { status: 403 }\n    );\n  },\n});\n\nexport const config = {\n  matcher: [\"/((?!api|_next/static|_next/image|favicon.ico).+)\"],\n};\n```\n\n----------------------------------------\n\nTITLE: Handling Arcjet Error Conditions\nDESCRIPTION: Example code showing how to properly handle error conditions from Arcjet to ensure the system fails open, logging errors without blocking legitimate requests.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/public/llms.txt#2025-04-12_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nconst decision = await aj.protect(req);\n\nif (decision.isErrored()) {\n  // Fail open: log the error and allow the request\n  console.error(\"Arcjet error\", decision.reason.message);\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Selectable TypeScript Code Content for Arcjet NestJS Integration\nDESCRIPTION: This JSX snippet renders a SelectableContent component that displays the TypeScript code for Arcjet integration with NestJS. It uses the imported DecisionLogTS raw code and the Code component for syntax highlighting.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/reference/nestjs/DecisionLog.mdx#2025-04-12_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={DecisionLogTS} lang=\"ts\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Implementing Global Guard Configuration in NestJS with Arcjet\nDESCRIPTION: Shows how to set up a global Arcjet guard in the app.module.ts file. This approach applies Arcjet rules uniformly across all routes but doesn't support route-specific configurations.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/rate-limiting/reference/nestjs/DecoratorRoutes.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{GlobalGuardTS}\n```\n\n----------------------------------------\n\nTITLE: Rendering Selectable Code Snippets with JSX\nDESCRIPTION: This snippet uses the SelectableContent component to render code snippets in TypeScript and JavaScript, allowing users to switch between languages.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/rate-limiting/reference/nodejs/ByUserId.mdx#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={ByUserIdTS} lang=\"ts\" />\n  </div>\n  <div slot=\"JS\" slotIdx=\"3\">\n    <Code code={ByUserIdJS} lang=\"js\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Error Logging in TypeScript with Arcjet\nDESCRIPTION: This TypeScript snippet demonstrates error logging in Arcjet. It references a variable 'ErrorLoggingTS' which likely contains the implementation details for handling and logging errors.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/reference/nestjs.mdx#2025-04-12_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n<Code code={ErrorLoggingTS} lang=\"ts\" mark={[{ range: \"47-54\" }]} />\n```\n\n----------------------------------------\n\nTITLE: Configuring Arcjet Token Bucket Rate Limiting for AI Quotas\nDESCRIPTION: Sets up Arcjet configuration with token bucket rate limiting to control AI token usage per user. Configures refill rate, interval, and capacity limits.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/blueprints/ai-quota-control.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst aj = arcjet({\n  key: process.env.ARCJET_KEY!, // Get your site key from https://app.arcjet.com\n  characteristics: [\"userId\"], // track requests by user ID\n  rules: [\n    shield({\n      mode: \"LIVE\", // will block requests. Use \"DRY_RUN\" to log only\n    }),\n    tokenBucket({\n      mode: \"LIVE\", // will block requests. Use \"DRY_RUN\" to log only\n      refillRate: 2_000, // fill the bucket up by 2,000 tokens\n      interval: \"1h\", // every hour\n      capacity: 5_000, // up to 5,000 tokens\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Raw Code Files in JSX\nDESCRIPTION: This snippet imports necessary components and raw code files for use in the SelectableContent component. It includes imports for both TypeScript and JavaScript versions of bot denial implementations in Next.js App and Pages routers.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/reference/nextjs/DenyingBots.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Code } from \"@astrojs/starlight/components\";\nimport SelectableContent from \"@/components/SelectableContent\";\nimport DenyingBotsAppTS from \"./DenyingBotsApp.ts?raw\";\nimport DenyingBotsPagesTS from \"./DenyingBotsPages.ts?raw\";\nimport DenyingBotsAppJS from \"./DenyingBotsApp.js?raw\";\nimport DenyingBotsPagesJS from \"./DenyingBotsPages.js?raw\";\n```\n\n----------------------------------------\n\nTITLE: Initializing Arcjet in JavaScript\nDESCRIPTION: This snippet demonstrates the setup of Arcjet in a JavaScript environment. It imports required modules, creates an Arcjet client, and defines a server configuration using the default export object syntax.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/get-started/bun/Step3.mdx#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport Step3JS from \"./Step3.js?raw\";\n```\n\n----------------------------------------\n\nTITLE: Implementing Per-Route Guard for Arcjet in NestJS\nDESCRIPTION: This snippet illustrates how to implement a per-route guard for Arcjet in a NestJS controller. It allows for specific Arcjet rules to be applied to individual routes.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/sensitive-info/reference/nestjs/DecoratorRoutes.mdx#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller, Get, UseGuards } from \"@nestjs/common\";\nimport { ArcjetGuard } from \"./arcjet.guard\";\nimport { ArcjetRules } from \"@arcjet/guard\";\n\n@Controller()\nexport class AppController {\n  @Get()\n  @UseGuards(ArcjetGuard)\n  @ArcjetRules({\n    rateLimit: { tokensPerInterval: 10, interval: \"1 minute\" },\n  })\n  getHello(): string {\n    return \"Hello World!\";\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Logging Arcjet Decision Results in TypeScript\nDESCRIPTION: This snippet demonstrates how to iterate through Arcjet decision results and log them, including specific checks for rate limit rules.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/reference/bun.mdx#2025-04-12_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nfor (const result of decision.results) {\n  console.log(\"Rule Result\", result);\n  if (result.reason.isRateLimit()) {\n    console.log(\n      \"Rate limit result\",\n      result.reason.max,\n      result.reason.remaining,\n      result.reason.window,\n      result.reason.reset\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Arcjet API Key in .env File (INI)\nDESCRIPTION: This snippet shows how to add the Arcjet API key to a .env file in the project root. The key is assigned to the ARCJET_KEY environment variable.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/quick-start/sveltekit/Step2.mdx#2025-04-12_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nARCJET_KEY=ajkey_yourkey\n```\n\n----------------------------------------\n\nTITLE: Setting Arcjet Environment Variables\nDESCRIPTION: Configuration of environment variables in .env.local file for Arcjet setup. Includes setting the development environment and API key configuration. This is necessary because the framework doesn't automatically set NODE_ENV.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/signup-protection/quick-start/shared/Step2SetEnv.mdx#2025-04-12_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n# NODE_ENV is not set automatically, so tell Arcjet we're in dev\n# You can leave this unset in prod\nARCJET_ENV=development\n# Get your site key from https://app.arcjet.com\nARCJET_KEY=ajkey_yourkey\n```\n\n----------------------------------------\n\nTITLE: Implementing Arcjet Within Route Controller in NestJS\nDESCRIPTION: Demonstrates how to implement Arcjet directly within a route controller for maximum flexibility. Shows how to handle Arcjet responses and customize error handling.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/reference/nestjs/DecoratorRoutes.mdx#2025-04-12_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n${WithinRoute}\n```\n\n----------------------------------------\n\nTITLE: API Key Header Rate Limiting\nDESCRIPTION: Implements rate limiting based on API keys provided in request headers, limiting to 60 requests per hour per unique API key.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/rate-limiting/reference/nextjs/Examples.mdx#2025-04-12_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n{ByAPIKeyHeader}\n```\n\n----------------------------------------\n\nTITLE: Processing Arcjet Decision Results\nDESCRIPTION: This snippet shows how to iterate through decision results from Arcjet's protection rules to examine email validation outcomes.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/email-validation/reference.mdx#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfor (const result of decision.results) {\n  console.log(\"Rule Result\", result);\n}\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple Rules in TypeScript\nDESCRIPTION: Demonstration of combining multiple protection rules (rate limiting and bot protection) in TypeScript for a more comprehensive security strategy.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/reference/sveltekit.mdx#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport arcjet, { fixedWindow, botProtection } from \"@arcjet/sveltekit\";\n\nconst aj = arcjet({\n  key: process.env.ARCJET_KEY!,\n  characteristics: [\"ip.src\"],\n  rules: [\n    fixedWindow({\n      window: \"1h\",\n      max: 60,\n    }),\n    botProtection(),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Modifying Next.js 15 Layout for Nosecone (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to modify the layout file in Next.js 15 using JavaScript to opt-out of static generation for Nosecone compatibility.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/nosecone/quick-start/next-js/Step2.mdx#2025-04-12_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { unstable_noStore as noStore } from \"next/cache\";\n\nexport default function RootLayout({ children }) {\n  return (\n    <html lang=\"en\">\n      <body>{children}</body>\n    </html>\n  );\n}\n\nexport const dynamic = \"force-dynamic\";\nexport const fetchCache = \"force-no-store\";\n```\n\n----------------------------------------\n\nTITLE: Setting up Arcjet API Route with JavaScript (App Router)\nDESCRIPTION: Creates an API route for Arcjet using JavaScript in Next.js App Router pattern at /app/api/arcjet/route.js\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/rate-limiting/quick-start/nextjs/Step3.mdx#2025-04-12_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Step3AppJS } from \"./Step3App.js\"\n```\n\n----------------------------------------\n\nTITLE: Next.js Clerk Authentication Middleware\nDESCRIPTION: Basic middleware configuration for Clerk authentication in Next.js, defining public routes and authentication requirements.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/integrations/clerk.mdx#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { authMiddleware } from \"@clerk/nextjs\";\n\nexport default authMiddleware({\n  publicRoutes: [\"/\"],\n});\n\nexport const config = {\n  matcher: [\"/((?!.+\\\\.[\\\\w]+$|_next).*)\", \"/\", \"/(api|trpc)(.*)\"],\n};\n```\n\n----------------------------------------\n\nTITLE: Rate Limiting Properties Type Definition\nDESCRIPTION: Type definition showing the properties available in rate limiting rule responses.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/reference/sveltekit.mdx#2025-04-12_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nmax: number;\nremaining: number;\nwindow: number;\nreset: number;\n```\n\n----------------------------------------\n\nTITLE: Implementing Within-Route Arcjet Protection in NestJS\nDESCRIPTION: Demonstrates how to implement Arcjet security checks directly within route controllers. This approach offers maximum flexibility for customizing rules and responses, though it requires more code implementation.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/rate-limiting/reference/nestjs/DecoratorRoutes.mdx#2025-04-12_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n{WithinRoute}\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Arcjet Client in SvelteKit\nDESCRIPTION: Shows how to override the default Arcjet client configuration in SvelteKit applications. Includes implementation for both TypeScript and JavaScript versions.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/reference/sveltekit.mdx#2025-04-12_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nClientOverrideTS\n```\n\nLANGUAGE: javascript\nCODE:\n```\nClientOverrideJS\n```\n\n----------------------------------------\n\nTITLE: Bot Detection Rule Configuration in TypeScript\nDESCRIPTION: Shows the new approach to configuring bot detection rules using allow/deny lists instead of add/remove patterns.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/upgrading/sdk-migration.mdx#2025-04-12_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ndetectBot({\n  mode: \"LIVE\",\n  allow: [],\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\ndetectBot({\n  mode: \"LIVE\",\n  // Block all bots except the following\n  allow: [\n    \"CATEGORY:SEARCH_ENGINE\", // Google, Bing, etc\n    // Uncomment to allow these other common bot categories\n    // See the full list at https://arcjet.com/bot-list\n    //\"CATEGORY:MONITOR\", // Uptime monitoring services\n    //\"CATEGORY:PREVIEW\", // Link previews e.g. Slack, Discord\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Next.js Pages Router API Route with Arcjet and Clerk Integration\nDESCRIPTION: Implementation of a protected API route using Arcjet rate limiting with Clerk authentication in Next.js Pages Router. Demonstrates error handling and response formatting.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/integrations/clerk.mdx#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { arcjet } from \"@arcjet/next\";\nimport { getAuth } from \"@clerk/nextjs/server\";\nimport { NextApiRequest, NextApiResponse } from \"next\";\n\nconst aj = arcjet(process.env.ARCJET_KEY!);\n\nexport default aj.rateLimit(\n  { rpm: 10 },\n  async function handler(req: NextApiRequest, res: NextApiResponse) {\n    const { userId } = getAuth(req);\n\n    if (!userId) {\n      return res.status(401).json({ error: \"Unauthorized\" });\n    }\n\n    return res.json({ message: \"Hello from a protected API route\" });\n  },\n  {\n    characteristics: async (req) => {\n      const { userId } = getAuth(req);\n      return { userId };\n    },\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Entity Redaction in Arcjet\nDESCRIPTION: Example showing how to implement a custom replacement function for redacted entities, which can be useful for generating realistic-looking but fake data using libraries like faker.js.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/redact/reference.mdx#2025-04-12_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { redact } from \"@arcjet/redact\";\n\n// Create some text that has sensitive information\nconst text = \"My email is example@example.com and my phone number is 555-123-4567.\";\n\n// Create a counter to ensure each replacement is unique\nlet counter = 0;\n\n// Create a redacted version of the text with a custom replacement function\nconst [redactedText, unredact] = redact(text, {\n  // Replace function takes an entity type and returns a replacement string\n  replace: (entityType) => {\n    counter += 1;\n\n    if (entityType === \"email\") {\n      // In a real application you might use faker.js to generate a realistic email\n      return `fake-${counter}@example.com`;\n    }\n\n    if (entityType === \"phone-number\") {\n      // Generate a fake phone number\n      return `555-${counter.toString().padStart(3, \"0\")}-${(counter * 7)\n        .toString()\n        .padStart(4, \"0\")}`;\n    }\n\n    // For other entity types, use the default redaction\n    return undefined;\n  },\n});\n\nconsole.log(redactedText);\n// Outputs: \"My email is fake-1@example.com and my phone number is 555-001-0007.\"\n\nconst unredactedText = unredact(redactedText);\n\nconsole.log(unredactedText);\n// Outputs: \"My email is example@example.com and my phone number is 555-123-4567.\"\n```\n\n----------------------------------------\n\nTITLE: Platform-Specific IP Detection in TypeScript\nDESCRIPTION: Shows how to use platform-specific protections when detecting IP addresses, with examples for Fly.io, Cloudflare, and Vercel platforms.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/ip.mdx#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ip } from \"@arcjet/ip\";\n\n// Fly.io\nconst request = new Request(\"https://example.com\");\nconst address = ip(request, { platform: \"fly-io\" }); // \"203.0.113.195\"\n\n// Cloudflare\nconst cfAddress = ip(request, { platform: \"cloudflare\" }); // \"203.0.113.195\"\n\n// Vercel\nconst vercelAddress = ip(request, { platform: \"vercel\" }); // \"203.0.113.195\"\n```\n\n----------------------------------------\n\nTITLE: Iterating Through Rule Results in TypeScript\nDESCRIPTION: Demonstrates how to iterate through the results of each rule in the Arcjet Decision object and log them to the console.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/reference/nodejs.mdx#2025-04-12_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nfor (const result of decision.results) {\n  console.log(\"Rule Result\", result);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Content-Security-Policy in SvelteKit\nDESCRIPTION: Updates the svelte.config.js file to configure Content-Security-Policy headers through Nosecone integration.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/nosecone/quick-start/sveltekit/Step2.mdx#2025-04-12_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport Step2Config from \"./Step2Config.js?raw\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Selectable Code Examples Component\nDESCRIPTION: React/Astro component that implements a tabbed interface for showing code examples in different languages and frameworks. Uses Astro's Starlight Code component and a custom SelectableContent component with client-side interactivity.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/rate-limiting/reference/nextjs/ByUserId.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Code } from \"@astrojs/starlight/components\";\nimport SelectableContent from \"@/components/SelectableContent\";\nimport ByUserIdAppTS from \"./ByUserIdApp.ts?raw\";\nimport ByUserIdPagesTS from \"./ByUserIdPages.ts?raw\";\nimport ByUserIdAppJS from \"./ByUserIdApp.js?raw\";\nimport ByUserIdPagesJS from \"./ByUserIdPages.js?raw\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS (App)\" slotIdx=\"1\">\n    <Code code={ByUserIdAppTS} lang=\"ts\" title=\"/app/api/arcjet/route.ts\" />\n  </div>\n  <div slot=\"TS (Pages)\" slotIdx=\"2\">\n    <Code code={ByUserIdPagesTS} lang=\"ts\" title=\"/pages/api/hello.ts\" />\n  </div>\n  <div slot=\"JS (App)\" slotIdx=\"3\">\n    <Code code={ByUserIdAppJS} lang=\"js\" title=\"/app/api/arcjet/route.js\" />\n  </div>\n  <div slot=\"JS (Pages)\" slotIdx=\"4\">\n    <Code code={ByUserIdPagesJS} lang=\"js\" title=\"/pages/api/hello.ts\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Configuring Shield Rule in Next.js\nDESCRIPTION: Example showing how to properly configure the Shield rule in Next.js with Arcjet to protect against common attacks.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/troubleshooting.mdx#2025-04-12_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport arcjet, { shield } from \"@arcjet/next\";\n\nconst aj = arcjet({\n  // Get your site key from https://app.arcjet.com\n  // and set it as an environment variable rather than hard coding.\n  // See: https://nextjs.org/docs/pages/building-your-application/configuring/environment-variables\n  key: process.env.ARCJET_KEY,\n  rules: [\n    // Protect against common attacks with Arcjet Shield\n    shield({\n      mode: \"LIVE\", // will block requests. Use \"DRY_RUN\" to log only\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Nosecone for Next.js with Clerk Authentication\nDESCRIPTION: Example configuration for Nosecone in Next.js, allowing Clerk authentication scripts and connections.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/nosecone/reference.mdx#2025-04-12_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as nosecone from \"@nosecone/next\";\n\nconst noseconeConfig: nosecone.NoseconeOptions = {\n  ...nosecone.defaults,\n  contentSecurityPolicy: {\n    ...nosecone.defaults.contentSecurityPolicy,\n    directives: {\n      ...nosecone.defaults.contentSecurityPolicy.directives,\n      scriptSrc: [\n        ...nosecone.defaults.contentSecurityPolicy.directives.scriptSrc,\n        \"https://*.clerk.accounts.dev\",\n      ],\n      connectSrc: [\n        ...nosecone.defaults.contentSecurityPolicy.directives.connectSrc,\n        \"https://*.clerk.accounts.dev\",\n        \"https://clerk-telemetry.com\",\n      ],\n      workerSrc: [\n        ...nosecone.defaults.contentSecurityPolicy.directives.workerSrc,\n        \"blob:\",\n        \"https://*.clerk.accounts.dev\",\n      ],\n      imgSrc: [\n        ...nosecone.defaults.contentSecurityPolicy.directives.imgSrc,\n        \"https://img.clerk.com\",\n      ],\n      objectSrc: [\n        ...nosecone.defaults.contentSecurityPolicy.directives.objectSrc,\n      ],\n      // We only set this in production because the server may be started\n      // without HTTPS\n      upgradeInsecureRequests: process.env.NODE_ENV === \"production\",\n    },\n  },\n} as const;\n\nexport default nosecone.createMiddleware(noseconeConfig);\n```\n\n----------------------------------------\n\nTITLE: Configuring Arcjet in a Server Handler\nDESCRIPTION: Code example demonstrating how to set up a simple server with Arcjet configured in the handler. The example is imported from external files (Step3.ts and Step3.js).\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/shield/quick-start/nodejs/Step3.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Step3TS from \"./Step3.ts?raw\";\nimport Step3JS from \"./Step3.js?raw\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport SelectableContent from \"@/components/SelectableContent\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n\n    <Code code={Step3TS} lang=\"ts\" title=\"index.ts\" />\n\n  </div>\n  <div slot=\"JS\" slotIdx=\"2\">\n\n    <Code code={Step3JS} lang=\"js\" title=\"index.js\" />\n\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Creating Request Flow Diagram with Mermaid\nDESCRIPTION: This Mermaid flowchart diagram visualizes the flow of a request through the Arcjet rate limiting system. It shows how a client request passes through the Arcjet SDK, gets evaluated against rules, interacts with the Arcjet API for rate limiting, executes application code upon approval, and returns a response to the client.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/mermaid/architecture-rl-allow.txt#2025-04-12_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    A[Client] -->|Request| B(Arcjet SDK)\n    B --> C{Evaluate Arcjet Rules}\n    C -->|Rate Limit Rule| D[✦ Arcjet API]\n    D -->|Allow| E[Execute application code]\n    E -->|200 Response| A[Client]\n```\n\n----------------------------------------\n\nTITLE: Handling User Agent Errors in Arcjet SDK for TypeScript and JavaScript\nDESCRIPTION: Demonstrates how to use the @arcjet/inspect package to handle common errors, specifically focusing on user agent related issues.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/reference/nodejs.mdx#2025-04-12_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// TypeScript code for handling user agent errors\n// Code not provided in the original text\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// JavaScript code for handling user agent errors\n// Code not provided in the original text\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Rendering Selectable TypeScript Content\nDESCRIPTION: Sets up imports for SelectableContent and Code components, along with raw TypeScript content. Renders a selectable interface that displays TypeScript code with syntax highlighting.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/get-started/node-js-hono/Step3.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport Step3 from \"./Step3.ts?raw\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    Update your `index.ts` file with the contents:\n\n    <Code code={Step3} lang=\"ts\" title=\"src/index.ts\" />\n\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Creating an Arcjet Route Component in Remix\nDESCRIPTION: Instructions for creating a new route file for Arcjet integration in a Remix application. The code shows how to set up a component with TypeScript or JavaScript that integrates with Arcjet by referencing external code imports.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/sensitive-info/quick-start/remix/Step3.mdx#2025-04-12_snippet_0\n\nLANGUAGE: astro\nCODE:\n```\nimport Step3TS from \"./Step3.tsx?raw\";\nimport Step3JS from \"./Step3.jsx?raw\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport SelectableContent from \"@/components/SelectableContent\";\n\nCreate a new route at `app/routes/arcjet.tsx` with the contents:\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code\n      code={Step3TS}\n      lang=\"ts\"\n      title=\"app/routes/arcjet.tsx\"\n      mark={[\"ARCJET_KEY\"]}\n    />\n  </div>\n  <div slot=\"JS\" slotIdx=\"2\">\n    <Code\n      code={Step3JS}\n      lang=\"js\"\n      title=\"app/routes/arcjet.jsx\"\n      mark={[\"ARCJET_KEY\"]}\n    />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Rendering Selectable Express.js Configuration\nDESCRIPTION: This JSX snippet uses the SelectableContent component to display Express.js configuration code. It allows for framework-specific content selection and uses the Code component to render the actual Express.js setup code.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/get-started/node-js-express/Step3.mdx#2025-04-12_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"JS\" slotIdx=\"1\">\n    Update your `index.js` file with the contents:\n\n    <Code code={Express} lang=\"js\" title=\"index.js\" />\n\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: User Agent Error Handling in JavaScript\nDESCRIPTION: Shows how to handle user agent errors using the @arcjet/inspect package in JavaScript.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/reference/remix.mdx#2025-04-12_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { isUserAgentError } from \"@arcjet/inspect\";\n\nconst decision = await arcjet.protect(request, {\n  email: \"user@example.com\",\n});\n\nif (decision.isErrored()) {\n  const error = decision.reason;\n  if (isUserAgentError(error)) {\n    console.error(\"Invalid user agent:\", error.message);\n    return NextResponse.json({ error: \"Invalid user agent\" }, { status: 400 });\n  }\n  console.error(\"Arcjet error:\", error);\n  return NextResponse.json({ error: \"An error occurred\" }, { status: 500 });\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Arcjet Client with Environment Variable\nDESCRIPTION: Example of instantiating the Arcjet client with a key from an environment variable. This shows the basic setup for Arcjet with the Shield rule configured to protect against common attacks.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/troubleshooting.mdx#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport arcjet from \"arcjet\";\n\nconst aj = arcjet({\n  // Get your site key from https://app.arcjet.com\n  // and set it as an environment variable rather than hard coding.\n  // See: https://www.npmjs.com/package/dotenv\n  key: process.env.ARCJET_KEY,\n  rules: [\n    // Protect against common attacks with Arcjet Shield\n    shield({\n      mode: \"LIVE\", // will block requests. Use \"DRY_RUN\" to log only\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: IP Detection with Proxy Filtering in TypeScript\nDESCRIPTION: Demonstrates how to filter trusted proxies when detecting IP addresses using the proxies option in the ip() function.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/ip.mdx#2025-04-12_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ip } from \"@arcjet/ip\";\n\nconst request = new Request(\"https://example.com\");\nconst address = ip(request, {\n  proxies: [\"203.0.113.0/24\", \"192.0.2.1\"],\n}); // \"198.51.100.2\"\n```\n\n----------------------------------------\n\nTITLE: Rendering Selectable Code Snippets with React\nDESCRIPTION: This code snippet imports required components and raw code files, then uses a SelectableContent component to display switchable TypeScript and JavaScript code snippets. It allows users to toggle between different language implementations.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/signup-protection/reference/nodejs/Errors.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport ErrorsJS from \"./Errors.js?raw\";\nimport ErrorsTS from \"./Errors.ts?raw\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={ErrorsTS} lang=\"ts\" />\n  </div>\n  <div slot=\"JS\" slotIdx=\"2\">\n    <Code code={ErrorsJS} lang=\"js\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Adding Ad Hoc Rules in JavaScript\nDESCRIPTION: Shows how to add ad hoc rules to the Arcjet client using the withRule function in JavaScript.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/reference/remix.mdx#2025-04-12_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst arcjetWithCustomRule = arcjet.withRule(async (ctx) => {\n  if (ctx.email === \"banned@example.com\") {\n    return {\n      conclusion: \"DENY\",\n      reason: { message: \"Banned email\" },\n    };\n  }\n  return { conclusion: \"ALLOW\" };\n});\n\nexport async function POST(request) {\n  const decision = await arcjetWithCustomRule.protect(request, {\n    email: \"user@example.com\",\n  });\n\n  // ... rest of the handler\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Nosecone for Next.js with Analytics and YouTube Embed\nDESCRIPTION: Example configuration for Nosecone in Next.js, allowing Plausible Analytics and YouTube embeds.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/nosecone/reference.mdx#2025-04-12_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as nosecone from \"@nosecone/next\";\n\nconst noseconeConfig: nosecone.NoseconeOptions = {\n  ...nosecone.defaults,\n  contentSecurityPolicy: {\n    ...nosecone.defaults.contentSecurityPolicy,\n    directives: {\n      ...nosecone.defaults.contentSecurityPolicy.directives,\n      scriptSrc: [\n        ...nosecone.defaults.contentSecurityPolicy.directives.scriptSrc,\n        \"https://plausible.io\", // Analytics\n      ],\n      connectSrc: [\n        ...nosecone.defaults.contentSecurityPolicy.directives.connectSrc,\n        \"https://plausible.io\", // Analytics\n      ],\n      // Set some URLs as `frameSrc` so don't include the default of `'none'`\n      frameSrc: [\"https://www.youtube-nocookie.com\"],\n      // We only set this in production because the server may be started\n      // without HTTPS\n      upgradeInsecureRequests: process.env.NODE_ENV === \"production\",\n    },\n  },\n  crossOriginEmbedderPolicy: {\n    // YouTube embeds are not served with the correct headers to support being\n    // loaded with any COEP other than `unsafe-none`.\n    // See:\n    // * https://issuetracker.google.com/issues/240387105\n    // * https://issuetracker.google.com/issues/351843802\n    policy: \"unsafe-none\",\n  },\n} as const;\n\nconst noseconeMiddleware = nosecone.createMiddleware(\n  process.env.VERCEL_ENV === \"preview\"\n    ? nosecone.withVercelToolbar(noseconeConfig)\n    : noseconeConfig,\n);\n\nexport default noseconeMiddleware;\n```\n\n----------------------------------------\n\nTITLE: Setting Arcjet Environment Variables in .env File\nDESCRIPTION: Configuration for Arcjet environment variables including the development environment flag and API key. The ARCJET_ENV setting is specifically required for development to handle local IP addresses correctly.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/get-started/nest-js/Step2.mdx#2025-04-12_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n# NODE_ENV is not set automatically, so tell Arcjet we're in dev\n# You can leave this unset in prod\nARCJET_ENV=development\n# Get your site key from https://app.arcjet.com\nARCJET_KEY=ajkey_yourkey\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js Middleware with Nosecone\nDESCRIPTION: Example of creating a Next.js middleware using Nosecone to set security headers.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/nosecone/reference.mdx#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextResponse } from \"next/server\";\nimport type { NextRequest } from \"next/server\";\nimport * as nosecone from \"@nosecone/next\";\n\nexport function middleware(request: NextRequest) {\n  const response = NextResponse.next();\n\n  const headers = nosecone.headers();\n  headers.forEach((value, key) => {\n    response.headers.set(key, value);\n  });\n\n  return response;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Language Selection Component for Code Examples\nDESCRIPTION: Creates a selectable content interface that toggles between TypeScript and JavaScript code examples for error handling. The component imports raw code files and uses the Code component from Starlight for syntax highlighting.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/sensitive-info/reference/nodejs/Errors.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport ErrorsJS from \"./Errors.js?raw\";\nimport ErrorsTS from \"./Errors.ts?raw\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={ErrorsTS} lang=\"ts\" />\n  </div>\n  <div slot=\"JS\" slotIdx=\"2\">\n    <Code code={ErrorsJS} lang=\"js\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Setting Arcjet Environment Variables in .env.local\nDESCRIPTION: Configures the Arcjet environment variables for development, including setting the environment and API key. This setup is crucial for local development and IP address handling.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/get-started/node-js-hono/Step2.mdx#2025-04-12_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n# NODE_ENV is not set automatically, so tell Arcjet we're in dev\n# You can leave this unset in prod\nARCJET_ENV=development\n# Get your site key from https://app.arcjet.com\nARCJET_KEY=ajkey_yourkey\n```\n\n----------------------------------------\n\nTITLE: Creating Route File with Selectable Language Options\nDESCRIPTION: Creates a new route file at app/routes/arcjet.tsx that uses SelectableContent component to toggle between TypeScript and JavaScript implementations. The code leverages Astro's Starlight components for syntax highlighting.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/email-validation/quick-start/remix/Step3.mdx#2025-04-12_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport Step3TS from \"./Step3.ts?raw\";\nimport Step3JS from \"./Step3.js?raw\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport SelectableContent from \"@/components/SelectableContent\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={Step3TS} lang=\"ts\" />\n  </div>\n  <div slot=\"JS\" slotIdx=\"2\">\n    <Code code={Step3JS} lang=\"js\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Next.js SelectableContent Component Implementation\nDESCRIPTION: JSX structure for a selectable content component that allows switching between TypeScript and JavaScript implementations of middleware configurations.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/sensitive-info/reference/nextjs/Middleware.mdx#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    Create a file called `middleware.ts` in your project root (at the same level as\n`pages` or `app` or inside `src`):\n\n<Code\n  code={MiddlewareTS}\n  lang=\"ts\"\n  title=\"/middleware.ts\"\n/>\n  </div>\n  <div slot=\"JS\" slotIdx=\"2\">\n    Create a file called `middleware.js` in your project root (at the same level as\n`pages` or `app` or inside `src`):\n\n<Code\n  code={MiddlewareJS}\n  lang=\"js\"\n  title=\"/middleware.js\"\n/>\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Rendering Selectable Code Snippets with SelectableContent in Next.js\nDESCRIPTION: This snippet uses the SelectableContent component to render code snippets for TypeScript and JavaScript in both App Router and Pages Router formats. It uses the Code component to display the code with syntax highlighting.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/email-validation/reference/nextjs/DecisionLogAllow.mdx#2025-04-12_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS (App)\" slotIdx=\"1\">\n    <Code code={DecisionLogAppAllowTS} lang=\"ts\" title=\"/app/api/arcjet/route.ts\" />\n  </div>\n  <div slot=\"TS (Pages)\" slotIdx=\"2\">\n    <Code code={DecisionLogPagesAllowTS} lang=\"ts\" title=\"/pages/api/hello.ts\" />\n  </div>\n  <div slot=\"JS (App)\" slotIdx=\"3\">\n    <Code code={DecisionLogAppAllowJS} lang=\"js\" title=\"/app/api/arcjet/route.js\" />\n  </div>\n  <div slot=\"JS (Pages)\" slotIdx=\"4\">\n    <Code code={DecisionLogPagesAllowJS} lang=\"js\" title=\"/pages/api/hello.ts\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Checking Rule Results in Arcjet\nDESCRIPTION: Example of how to loop through decision results to check which rules would have denied a request, useful when using DRY_RUN mode.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/reference/bun.mdx#2025-04-12_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nfor (const result of decision.results) {\n  if (result.isDenied()) {\n    console.log(\"Rule returned deny conclusion\", result);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Arcjet API Key in .env File\nDESCRIPTION: This snippet shows how to add the Arcjet API key to a .env file in the project's root directory. The .env file is commonly used to store environment variables and sensitive configuration data that should not be committed to version control.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/rate-limiting/quick-start/sveltekit/Step2.mdx#2025-04-12_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nARCJET_KEY=ajkey_yourkey\n```\n\n----------------------------------------\n\nTITLE: Creating SvelteKit Hooks with Nosecone\nDESCRIPTION: Example of creating SvelteKit hooks using Nosecone to set security headers.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/nosecone/reference.mdx#2025-04-12_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as nosecone from \"@nosecone/sveltekit\";\nimport type { Handle } from \"@sveltejs/kit\";\n\nconst noseconeHook = nosecone.createHook();\n\nexport const handle: Handle = async ({ event, resolve }) => {\n  const response = await noseconeHook({ event, resolve });\n  return response;\n};\n```\n\n----------------------------------------\n\nTITLE: Overriding IP Address for Development Environment\nDESCRIPTION: Code snippet demonstrating how to override the IP address in development to test IP geolocation and VPN detection features. This allows for testing with a real public IP instead of the default localhost address.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/troubleshooting.mdx#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Override the IP address in the request object if `ip` is provided. You could\n// set this using an environment variable or some other method to ensure it is\n// only set in development.\n//const ip = \"8.8.8.8\"; // Google's public DNS server\nconst decision = await aj.protect(ip ? { ...req, ip } : req);\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Logging with NestJS and Arcjet\nDESCRIPTION: Integrates Arcjet SDK with NestJS logger by creating a custom logger interface and using it within the application module.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/reference/nestjs.mdx#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Logger } from \"@nestjs/common\";\nimport { ArcjetLogger } from \"@arcjet/nest\";\n\nclass ClientLogger implements ArcjetLogger {\n  private readonly logger = new Logger(\"Arcjet\");\n\n  debug(message: string): void {\n    this.logger.debug(message);\n  }\n\n  info(message: string): void {\n    this.logger.log(message);\n  }\n\n  warn(message: string): void {\n    this.logger.warn(message);\n  }\n\n  error(message: string): void {\n    this.logger.error(message);\n  }\n}\n\n// In your module\n@Module({\n  imports: [\n    ArcjetModule.forRoot({\n      key: \"aj_12345abcdef\",\n      rules: [shield()],\n      logger: new ClientLogger(),\n    }),\n  ],\n})\nexport class AppModule {}\n\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Selectable Code Snippet in Astro\nDESCRIPTION: This snippet imports required components and raw code content, then uses a SelectableContent component to render a selectable TypeScript code snippet. It utilizes Astro's Code component for syntax highlighting.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/rate-limiting/reference/nestjs/ByUserId.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Code } from \"@astrojs/starlight/components\";\nimport SelectableContent from \"@/components/SelectableContent\";\nimport ByUserIdTS from \"./ByUserId.ts?raw\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={ByUserIdTS} lang=\"ts\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Bot Protection Deny Configuration Type Definition\nDESCRIPTION: TypeScript type definition for bot protection deny configuration. Specifies the mode (LIVE or DRY_RUN) and an array of denied bots or bot categories.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/bot-protection/reference.mdx#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype BotOptionsDeny = {\n  mode?: \"LIVE\" | \"DRY_RUN\";\n  deny: Array<ArcjetWellKnownBot | ArcjetBotCategory>;\n};\n```\n\n----------------------------------------\n\nTITLE: Applying Global Guard to Controller Routes in NestJS\nDESCRIPTION: Demonstrates how to implement the global Arcjet guard in a controller to protect specific routes. This shows the controller-level implementation of the global guard configuration.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/rate-limiting/reference/nestjs/DecoratorRoutes.mdx#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{GlobalGuardRouteTS}\n```\n\n----------------------------------------\n\nTITLE: Rendering Selectable Code Snippets in JSX\nDESCRIPTION: This code snippet demonstrates how to use the SelectableContent component to display code snippets with language selection options. It imports raw code files and renders them using the Code component from Starlight.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/nosecone/reference/WithVercelToolbar.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Code } from \"@astrojs/starlight/components\";\nimport SelectableContent from \"@/components/SelectableContent\";\n\nimport WithVercelToolbarTS from \"./WithVercelToolbar.ts?raw\";\nimport WithVercelToolbarJS from \"./WithVercelToolbar.js?raw\";\n\n<SelectableContent client:load syncKey=\"language\">\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={WithVercelToolbarTS} lang=\"ts\" title=\"index.ts\" />\n  </div>\n  <div slot=\"JS\" slotIdx=\"2\">\n    <Code code={WithVercelToolbarJS} lang=\"js\" title=\"index.js\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Rate Limit with Rewrite/Redirect\nDESCRIPTION: Implements rate limiting with custom handling for different route types, including rewrites and redirects based on route type.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/rate-limiting/reference/nextjs/Examples.mdx#2025-04-12_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n{MiddlewareRewriteRedirect}\n```\n\n----------------------------------------\n\nTITLE: Loading and Testing Arcjet-protected Form Application\nDESCRIPTION: Instructions for starting the application, accessing the form page, and testing email address submissions. The snippet also mentions checking the Arcjet dashboard for request logs.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/signup-protection/quick-start/sveltekit/Step4.mdx#2025-04-12_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### 4. Start app\n\nStart your app and load `http://localhost:5173/form`. Submit the form with a\nvariety of email addresses and you can see how the check behaves. The requests\nwill also show up in the [Arcjet dashboard](https://app.arcjet.com).\n```\n\n----------------------------------------\n\nTITLE: Protecting NextAuth Route Handler with Arcjet (Next.js Pages Router)\nDESCRIPTION: This code snippet shows how to extend the NextAuth route handler in Next.js Pages Router to protect it from abuse using Arcjet. It configures a rate limit on the POST handler for authentication and logout attempts, allowing up to 10 requests within a 60-second window and preventing bot requests.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/integrations/nextauth.mdx#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Arcjet } from \"@arcjet/next\";\nimport NextAuth, { AuthOptions } from \"next-auth\";\nimport { NextApiRequest, NextApiResponse } from \"next\";\n\nconst authOptions: AuthOptions = {\n  // ...\n};\n\nconst handler = NextAuth(authOptions);\n\nconst aj = new Arcjet({ token: process.env.ARCJET_KEY });\n\nexport default aj.protect(\n  {\n    shield: {\n      requestsPerWindow: 10,\n      windowSeconds: 60,\n      blockBot: true,\n    },\n  },\n  async function auth(req: NextApiRequest, res: NextApiResponse) {\n    if (req.method === \"POST\") {\n      return handler(req, res);\n    }\n    return handler(req, res);\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: URL-encoded Data Processing Example\nDESCRIPTION: Demonstrates how the system processes URL-encoded data for sensitive information detection, showing dual processing of plus signs.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/upgrading/sdk-migration.mdx#2025-04-12_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n# Input: \"phone+number+123\"\n# Processed as both:\n# - \"phone+number+123\"\n# - \"phone number 123\"\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Filtered TypeScript Content\nDESCRIPTION: Component that imports and displays TypeScript code content using Starlight's Code component within a selectable interface. Uses the SelectableContent component for framework-specific content filtering.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/reference/deno/Filtering.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport FilteringTS from \"./Filtering.ts?raw\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={FilteringTS} lang=\"ts\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Configuring Arcjet SDK in JavaScript\nDESCRIPTION: Example of creating an Arcjet instance with configuration options including API key, rules, and characteristics in JavaScript.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/reference/sveltekit.mdx#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport arcjet, { fixedWindow } from \"@arcjet/sveltekit\";\n\nconst aj = arcjet({\n  key: process.env.ARCJET_KEY,\n  characteristics: [\"ip.src\"],\n  rules: [\n    fixedWindow({\n      window: \"1h\",\n      max: 60,\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Handling User Agent Errors with Arcjet Inspect in TypeScript\nDESCRIPTION: This example demonstrates how to use the @arcjet/inspect package to handle common errors, specifically focusing on user agent parsing errors.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/reference/bun.mdx#2025-04-12_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { isUserAgentParseError } from \"@arcjet/inspect\";\n\nif (decision.isErrored()) {\n  for (const result of decision.results) {\n    if (result.conclusion === \"ERROR\") {\n      if (isUserAgentParseError(result.reason)) {\n        console.error(\"User agent parse error\");\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Code Files and Components\nDESCRIPTION: Imports raw code files and components needed for displaying selectable TypeScript/JavaScript content examples.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/get-started/sveltekit/Step3.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Step3TS from \"./Step3.ts?raw\";\nimport Step3JS from \"./Step3.js?raw\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport SelectableContent from \"@/components/SelectableContent\";\n```\n\n----------------------------------------\n\nTITLE: Modifying Next.js 14 Layout for Nosecone (JavaScript)\nDESCRIPTION: This code snippet shows how to modify the layout file in Next.js 14 using JavaScript to opt-out of static generation for Nosecone compatibility.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/nosecone/quick-start/next-js/Step2.mdx#2025-04-12_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { unstable_noStore as noStore } from \"next/cache\";\n\nexport default function RootLayout({ children }) {\n  return (\n    <html lang=\"en\">\n      <body>{children}</body>\n    </html>\n  );\n}\n\nexport const dynamic = \"force-dynamic\";\nexport const revalidate = 0;\n```\n\n----------------------------------------\n\nTITLE: Rendering Selectable Code Examples with JSX\nDESCRIPTION: This JSX snippet uses the SelectableContent component to render four different code examples. Each example is wrapped in a Code component and represents a different combination of language (TypeScript/JavaScript) and routing style (App/Pages).\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/signup-protection/reference/nextjs/Errors.mdx#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS (App)\" slotIdx=\"1\">\n    <Code\n      code={ErrorHandlingAppTS}\n      lang=\"ts\"\n      title=\"/app/api/submit/route.ts\"\n    />\n  </div>\n  <div slot=\"TS (Pages)\" slotIdx=\"2\">\n    <Code code={ErrorHandlingPagesTS} lang=\"ts\" title=\"/pages/api/submit.ts\" />\n  </div>\n  <div slot=\"JS (App)\" slotIdx=\"3\">\n    <Code\n      code={ErrorHandlingAppJS}\n      lang=\"js\"\n      title=\"/app/api/submit/route.js\"\n    />\n  </div>\n  <div slot=\"JS (Pages)\" slotIdx=\"4\">\n    <Code code={ErrorHandlingPagesJS} lang=\"js\" title=\"/pages/api/submit.js\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Testing Rate Limit with Curl Request\nDESCRIPTION: Command to test the rate limiting functionality using curl. This request should return a 403 response as curl is identified as a bot by default.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/get-started/bun-hono/Step4.mdx#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncurl -v http://localhost:3000\n```\n\n----------------------------------------\n\nTITLE: Updating validateEmail Rule Configuration in TypeScript\nDESCRIPTION: Shows how to migrate from using 'block' to 'deny' option in validateEmail rule configuration. The new API follows consistent design patterns with other rules.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/upgrading/sdk-migration.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nvalidateEmail({\n  mode: \"LIVE\",\n  // replace block with deny as shown\n  // block: [\"DISPOSABLE\"],\n  deny: [\"DISPOSABLE\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Fixed Window Rate Limiting in TypeScript\nDESCRIPTION: Type definition for fixed window rate limiting options including mode selection, client characteristics, time window, and maximum request settings.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/rate-limiting/reference.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype FixedWindowRateLimitOptions = {\n  mode?: \"LIVE\" | \"DRY_RUN\";\n  characteristics?: string[];\n  window: string;\n  max: number;\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering Selectable Code Snippets with React\nDESCRIPTION: This snippet uses the SelectableContent component to render selectable code snippets for TypeScript and JavaScript. It utilizes the Code component from @astrojs/starlight to display the code with proper syntax highlighting.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/signup-protection/reference/sveltekit/Errors.mdx#2025-04-12_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={ErrorsTS} lang=\"ts\" />\n  </div>\n  <div slot=\"JS\" slotIdx=\"2\">\n    <Code code={ErrorsJS} lang=\"js\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Blocking Requests Missing User-Agent Headers\nDESCRIPTION: Example code that checks if a request has a User-Agent header and returns a 400 Bad Request if it doesn't. This is recommended before calling Arcjet since most legitimate clients send this header.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/bot-protection/concepts.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nif (!request.headers.get(\"User-Agent\")) {\n  log.warn(\"request missing required user-agent header\");\n  // Return a 400 Bad request error here\n  // Next.js example:\n  // return NextResponse.json({ error: \"Bad request\" }, { status: 400 });\n  // Node.js example:\n  // res.writeHead(400, { \"Content-Type\": \"application/json\" });\n  // res.end(JSON.stringify({ error: \"Bad request\" }));\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Arcjet API Route with TypeScript (App Router)\nDESCRIPTION: Creates an API route for Arcjet using TypeScript in Next.js App Router pattern at /app/api/arcjet/route.ts\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/rate-limiting/quick-start/nextjs/Step3.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Step3AppTS } from \"./Step3App.ts\"\n```\n\n----------------------------------------\n\nTITLE: Avoiding Double Protection with Middleware Matcher Configuration\nDESCRIPTION: Example showing how to configure the middleware matcher to exclude API routes that already have Arcjet protection applied, preventing Arcjet from running multiple times on the same request.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/shield/reference/nextjs/Middleware.mdx#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextResponse } from \"next/server\";\nimport type { NextRequest } from \"next/server\";\nimport { arcjet } from \"@arcjet/next\";\n\nconst aj = arcjet({\n  key: process.env.ARCJET_KEY,\n  rules: {\n    // Configure rules here\n  },\n});\n\nexport async function middleware(request: NextRequest) {\n  const response = NextResponse.next();\n\n  await aj.protect(request, response, {\n    // Override rules or provide contextual data here\n  });\n\n  return response;\n}\n\nexport const config = {\n  matcher: [\"/((?!_next/static|_next/image|favicon.ico|api/hello).+)\"],\n};\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Selectable Code Component\nDESCRIPTION: Component implementation that imports necessary dependencies and renders a selectable content block with TypeScript code. Uses SelectableContent for framework switching and Code component from Starlight for syntax highlighting.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/sensitive-info/reference/nestjs/DecisionLog.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport DecisionLogTS from \"./DecisionLog.ts?raw\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={DecisionLogTS} lang=\"ts\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Path-Based Response Rate Limiting\nDESCRIPTION: Customizes rate limit responses based on request path, providing different responses for API routes versus page routes.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/rate-limiting/reference/nextjs/Examples.mdx#2025-04-12_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n{MiddlewareResponsePath}\n```\n\n----------------------------------------\n\nTITLE: Setting up Arcjet API Route with TypeScript (Pages Router)\nDESCRIPTION: Creates an API route for Arcjet using TypeScript in Next.js Pages Router pattern at /pages/api/arcjet.ts\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/rate-limiting/quick-start/nextjs/Step3.mdx#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Step3PagesTS } from \"./Step3Pages.ts\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Language-Switchable Code Display with Astro and React\nDESCRIPTION: This code imports and displays user identification code examples in both TypeScript and JavaScript formats using Astro's Starlight components. It leverages a SelectableContent component with client-side interactivity to allow users to switch between language implementations.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/rate-limiting/reference/sveltekit/ByUserId.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Code } from \"@astrojs/starlight/components\";\nimport SelectableContent from \"@/components/SelectableContent\";\nimport ByUserIdTS from \"./ByUserId.ts?raw\";\nimport ByUserIdJS from \"./ByUserId.js?raw\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={ByUserIdTS} lang=\"ts\" />\n  </div>\n  <div slot=\"JS\" slotIdx=\"3\">\n    <Code code={ByUserIdJS} lang=\"js\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Initializing Arcjet in TypeScript\nDESCRIPTION: This snippet shows how to set up Arcjet in a TypeScript environment. It imports necessary modules, creates an Arcjet client, and defines a server configuration using the default export object syntax.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/get-started/bun/Step3.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport Step3TS from \"./Step3.ts?raw\";\n```\n\n----------------------------------------\n\nTITLE: Displaying TokenBucket Implementation with SelectableContent in React\nDESCRIPTION: This code imports a SelectableContent component and a raw TokenBucket TypeScript file to display it in a code block with language selection capability. The component allows switching between different framework implementations, though only TypeScript is shown in this example.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/rate-limiting/reference/sveltekit/TokenBucket.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport TokenBucket from \"./TokenBucket.ts?raw\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={TokenBucket} lang=\"ts\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Selectable Code Content in React/Astro\nDESCRIPTION: Component setup that imports raw code files and renders them in a language-switchable interface using SelectableContent and Astro's Code component. Supports toggling between TypeScript and JavaScript implementations.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/shield/reference/nestjs/Errors.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport ErrorsJS from \"./Errors.js?raw\";\nimport ErrorsTS from \"./Errors.ts?raw\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={ErrorsTS} lang=\"ts\" />\n  </div>\n  <div slot=\"JS\" slotIdx=\"2\">\n    <Code code={ErrorsJS} lang=\"js\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Configuring Arcjet Environment Variables in .env.local\nDESCRIPTION: This snippet shows how to set up the required environment variables for Arcjet in a .env.local file. It includes setting the development environment and the Arcjet site key.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/quick-start/nodejs/Step2.mdx#2025-04-12_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n# NODE_ENV is not set automatically, so tell Arcjet we're in dev\n# You can leave this unset in prod\nARCJET_ENV=development\n# Get your site key from https://app.arcjet.com\nARCJET_KEY=ajkey_yourkey\n```\n\n----------------------------------------\n\nTITLE: Implementing Language-Switchable Code Display with React Components\nDESCRIPTION: This snippet creates a selectable content component that enables users to switch between TypeScript and JavaScript code examples. It imports raw code files and displays them using the Code component from Astrojs Starlight.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/signup-protection/reference/sveltekit/CustomVerification.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport CustomVerificationTS from \"./CustomVerification.js?raw\";\nimport CustomVerificationJS from \"./CustomVerification.ts?raw\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={CustomVerificationTS} lang=\"ts\" />\n  </div>\n  <div slot=\"JS\" slotIdx=\"2\">\n    <Code code={CustomVerificationJS} lang=\"js\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Starting JavaScript Server with Environment File\nDESCRIPTION: Command to start a JavaScript server using Node.js with environment variables loaded from .env.local file. Requires Node.js 20+ for built-in env-file support.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/rate-limiting/quick-start/nodejs/Step4.mdx#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnode --env-file .env.local index.js\n```\n\n----------------------------------------\n\nTITLE: Setting up Arcjet API Key in Environment File\nDESCRIPTION: Example of adding the Arcjet API key to a .env.local file for secure storage in a Next.js project.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/public/llms.txt#2025-04-12_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\nARCJET_KEY=ajkey_yourkey\n```\n\n----------------------------------------\n\nTITLE: Cross-Origin-Embedder-Policy Default Configuration\nDESCRIPTION: Default configuration for Cross-Origin-Embedder-Policy header setting require-corp policy.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/nosecone/reference.mdx#2025-04-12_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  policy: \"require-corp\",\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Dynamic Code Content in React\nDESCRIPTION: This snippet imports required components and raw code content, then uses SelectableContent to render a TypeScript code snippet dynamically. It allows for client-side language selection and framework switching.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/reference/deno/IdentifiedBots.mdx#2025-04-12_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport IdentifiedBotsTS from \"./IdentifiedBots.ts?raw\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={IdentifiedBotsTS} lang=\"ts\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Setting Arcjet Environment Variables in .env.local for Development\nDESCRIPTION: This snippet shows how to configure Arcjet environment variables in a .env.local file. It sets the development environment and includes the Arcjet site key. The ARCJET_ENV variable is specifically needed for Bun projects to handle local IP addresses correctly.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/get-started/bun/Step2.mdx#2025-04-12_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n# NODE_ENV is not set automatically, so tell Arcjet we're in dev\n# You can leave this unset in prod\nARCJET_ENV=development\n# Get your site key from https://app.arcjet.com\nARCJET_KEY=ajkey_yourkey\n```\n\n----------------------------------------\n\nTITLE: User Agent Error Handling in TypeScript\nDESCRIPTION: Illustrates how to handle user agent errors using the @arcjet/inspect package in TypeScript.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/reference/remix.mdx#2025-04-12_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { isUserAgentError } from \"@arcjet/inspect\";\n\nconst decision = await arcjet.protect(request, {\n  email: \"user@example.com\",\n});\n\nif (decision.isErrored()) {\n  const error = decision.reason;\n  if (isUserAgentError(error)) {\n    console.error(\"Invalid user agent:\", error.message);\n    return NextResponse.json({ error: \"Invalid user agent\" }, { status: 400 });\n  }\n  console.error(\"Arcjet error:\", error);\n  return NextResponse.json({ error: \"An error occurred\" }, { status: 500 });\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Arcjet Protection for Next.js API Route (JavaScript, App Router)\nDESCRIPTION: This code snippet illustrates how to set up Arcjet protection for a Next.js API route using JavaScript and the App Router. It imports Arcjet modules, initializes the client and shield, and applies protection to the route handler.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/shield/reference/nextjs/PerRoute.mdx#2025-04-12_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { NextResponse } from \"next/server\";\nimport { Arcjet, Shield } from \"@arcjet/next\";\n\nconst arcjet = new Arcjet({\n  // Configure your Arcjet client here\n});\n\nconst shield = new Shield({\n  // Configure your shield here\n});\n\nexport const POST = shield.protect(async (request) => {\n  // Your API logic here\n  return NextResponse.json({ message: \"Hello from Arcjet!\" });\n});\n\n```\n\n----------------------------------------\n\nTITLE: Edge Function Implementation (JavaScript)\nDESCRIPTION: Implementation of Arcjet in Edge Functions using JavaScript, showing integration with Next.js Edge Runtime.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/reference/nextjs/Examples.mdx#2025-04-12_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n{EdgeAppJS}\n{EdgePagesJS}\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Documentation for Arcjet Rate Limiting\nDESCRIPTION: Imports necessary components and documentation modules for displaying rate limiting configuration examples.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/rate-limiting/reference/sveltekit/PerRouteVsHooks.mdx#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport SlotByFramework from \"@/components/SlotByFramework\";\nimport HookMatchingPaths from \"./HookMatchingPaths.mdx\";\nimport HookAllRoutes from \"./HookAllRoutes.mdx\";\nimport HookMatcher from \"./HookMatcher.mdx\";\n```\n\n----------------------------------------\n\nTITLE: IP Location Analysis Example in TypeScript\nDESCRIPTION: This code snippet shows how to perform IP location analysis using Arcjet. It references a variable 'IPLocationTS' which likely contains the implementation details.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/reference/nestjs.mdx#2025-04-12_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n<Code code={IPLocationTS} lang=\"ts\" />\n```\n\n----------------------------------------\n\nTITLE: Interpreting Arcjet Shield Dry Run Response Logs\nDESCRIPTION: This log output shows how Arcjet processes a suspicious request in dry run mode. Despite the rule conclusion being 'DENY', the final conclusion is 'ALLOW' because the rule is not in live mode yet.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/shield/quick-start/remix/Step5.mdx#2025-04-12_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nRule Result ArcjetRuleResult {\n   ttl: 0,\n   state: 'DRY_RUN',\n   conclusion: 'DENY',\n   reason: ArcjetShieldReason { type: 'SHIELD', shieldTriggered: true }\n}\nConclusion ALLOW\n```\n\n----------------------------------------\n\nTITLE: Configuring X-Content-Type-Options Type Definition\nDESCRIPTION: TypeScript type definition for X-Content-Type-Options header configuration that helps prevent MIME type sniffing attacks.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/nosecone/reference.mdx#2025-04-12_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\ntype ContentTypeOptionsConfig = boolean;\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Astro Starlight Components with React\nDESCRIPTION: Component implementation that imports Astro's Starlight Code component and a custom SelectableContent component. Sets up a language-selective code display system with TypeScript support.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/reference/nestjs/AllowingBots.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Code } from \"@astrojs/starlight/components\";\nimport SelectableContent from \"@/components/SelectableContent\";\nimport AllowingBotsTS from \"./AllowingBots.ts?raw\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={AllowingBotsTS} lang=\"ts\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Code Selection Component\nDESCRIPTION: Imports code content and components, then renders a selectable interface to switch between TypeScript and JavaScript code examples using the SelectableContent component with Astro's Code component.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/email-validation/quick-start/nodejs/Step3.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Step3TS from \"./Step3.ts?raw\";\nimport Step3JS from \"./Step3.js?raw\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport SelectableContent from \"@/components/SelectableContent\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={Step3TS} lang=\"ts\" title=\"index.ts\" />\n  </div>\n  <div slot=\"JS\" slotIdx=\"2\">\n    <Code code={Step3JS} lang=\"js\" title=\"index.js\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Configuring Bot Protection Guard in NestJS (JavaScript)\nDESCRIPTION: JavaScript code showing how to import and configure an Arcjet guard for NestJS applications. The guard will be applied globally to all routes, returning a 403 Forbidden response for automated clients.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/quick-start/nestjs/Step3.mdx#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport Step3JS from \"./Step3.js?raw\";\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Token Bucket Code Component\nDESCRIPTION: JSX component that imports the SelectableContent component and Code component from Astro Starlight to display token bucket request code with language selection functionality. The code allows switching between different language implementations.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/rate-limiting/reference/nestjs/TokenBucketRequest.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport TokenBucketRequestTS from \"./TokenBucketRequest.ts?raw\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={TokenBucketRequestTS} lang=\"ts\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Selectable Code Content\nDESCRIPTION: Component implementation that imports raw code files and renders them in a selectable interface allowing users to switch between TypeScript and JavaScript versions using the SelectableContent component\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/reference/remix/Errors.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport ErrorsTS from \"./Errors.ts?raw\";\nimport ErrorsJS from \"./Errors.js?raw\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={ErrorsTS} lang=\"ts\" />\n  </div>\n  <div slot=\"JS\" slotIdx=\"2\">\n    <Code code={ErrorsJS} lang=\"js\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Setting Arcjet Environment Variables in .env File\nDESCRIPTION: Configuration of environment variables for Arcjet in a development environment. Includes setting ARCJET_ENV for development mode and ARCJET_KEY for authentication. Special note for Deno projects requiring explicit environment setting due to NODE_ENV behavior.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/get-started/deno/Step2.mdx#2025-04-12_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n# NODE_ENV is not set automatically, so tell Arcjet we're in dev\n# You can leave this unset in prod\nARCJET_ENV=development\n# Get your site key from https://app.arcjet.com\nARCJET_KEY=ajkey_yourkey\n```\n\n----------------------------------------\n\nTITLE: Implementing Language Switcher for Documentation with SelectableContent\nDESCRIPTION: This code creates a selectable interface that allows users to toggle between TypeScript and JavaScript code examples. It imports raw code files and uses the SelectableContent component with Astro's Starlight Code component to render the appropriate syntax-highlighted code based on user selection.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/signup-protection/reference/nodejs/CustomVerification.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport CustomVerificationTS from \"./CustomVerification.js?raw\";\nimport CustomVerificationJS from \"./CustomVerification.ts?raw\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={CustomVerificationTS} lang=\"ts\" />\n  </div>\n  <div slot=\"JS\" slotIdx=\"2\">\n    <Code code={CustomVerificationJS} lang=\"js\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Starting Node.js Server with TypeScript\nDESCRIPTION: Command to start a TypeScript Node.js server using tsx with environment variables loaded from .env.local file. Requires Node.js and tsx package.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/email-validation/quick-start/nodejs/Step4.mdx#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx tsx --env-file .env.local index.ts\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js for External Pino Package\nDESCRIPTION: Shows how to configure Next.js to mark Pino as an external package in the Next.js configuration file. This is required for using Pino with Next.js for custom logging in Arcjet.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/reference/nextjs.mdx#2025-04-12_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  reactStrictMode: true,\n  experimental: {\n    // https://github.com/vercel/next.js/discussions/46987#discussioncomment-8464812\n    serverComponentsExternalPackages: [\"pino\", \"pino-pretty\"],\n  },\n};\n\nmodule.exports = nextConfig;\n```\n\n----------------------------------------\n\nTITLE: Rendering Selectable Code Examples with Language Switch in React\nDESCRIPTION: This component imports raw TypeScript and JavaScript code files and renders them in a selectable component that allows users to switch between language implementations. It uses Astrojs Starlight components for syntax highlighting and marks the 'ARCJET_KEY' text in both examples.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/signup-protection/quick-start/nodejs/Step3.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Step3TS from \"./Step3.ts?raw\";\nimport Step3JS from \"./Step3.js?raw\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport SelectableContent from \"@/components/SelectableContent\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <Fragment slot=\"TS\">\n    <Code code={Step3TS} lang=\"ts\" mark={[\"ARCJET_KEY\"]} />\n  </Fragment>\n  <Fragment slot=\"JS\">\n    <Code code={Step3JS} lang=\"js\" mark={[\"ARCJET_KEY\"]} />\n  </Fragment>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Defining ArcjetReason Object for Shield Rules in TypeScript\nDESCRIPTION: Defines the structure of the ArcjetReason object for shield rules, containing a single boolean property 'shieldTriggered'.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/reference/nextjs.mdx#2025-04-12_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nshieldTriggered: boolean;\n```\n\n----------------------------------------\n\nTITLE: Creating Arcjet Route in Remix (TypeScript)\nDESCRIPTION: This snippet shows how to create a new route file for Arcjet integration using TypeScript in a Remix application. It imports necessary components and uses SelectableContent for language switching.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/shield/quick-start/remix/Step3.mdx#2025-04-12_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport Step3TS from \"./Step3.tsx?raw\";\nimport Step3JS from \"./Step3.jsx?raw\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport SelectableContent from \"@/components/SelectableContent\";\n\nCreate a new route at `app/routes/arcjet.tsx` with the contents:\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code\n      code={Step3TS}\n      lang=\"ts\"\n      title=\"app/routes/arcjet.tsx\"\n      mark={[\"ARCJET_KEY\"]}\n    />\n  </div>\n  <div slot=\"JS\" slotIdx=\"2\">\n    <Code\n      code={Step3JS}\n      lang=\"js\"\n      title=\"app/routes/arcjet.jsx\"\n      mark={[\"ARCJET_KEY\"]}\n    />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Adding Ad Hoc Rules to Arcjet Client in TypeScript\nDESCRIPTION: This snippet shows how to add custom ad hoc rules to the Arcjet client using the withRule function, allowing for additional protection based on specific logic.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/reference/bun.mdx#2025-04-12_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nconst specialClient = arcjet.withRule({\n  name: \"special-rule\",\n  run: async (request) => {\n    if (request.headers.get(\"x-special\") === \"true\") {\n      return { conclusion: \"DENY\" };\n    }\n    return { conclusion: \"ALLOW\" };\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining ArcjetEmailType Enum in TypeScript\nDESCRIPTION: Specifies the possible values for the ArcjetEmailType enum used in email validation rules.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/reference/nextjs.mdx#2025-04-12_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n\"DISPOSABLE\" | \"FREE\" | \"NO_MX_RECORDS\" | \"NO_GRAVATAR\" | \"INVALID\";\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Code Examples with Astro Starlight\nDESCRIPTION: Configuration for displaying code examples with language selection between TypeScript and JavaScript, including syntax highlighting and marked lines for ARCJET_KEY\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/quick-start/nodejs/Step3.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Step3TS from \"./Step3.ts?raw\";\nimport Step3JS from \"./Step3.js?raw\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport SelectableContent from \"@/components/SelectableContent\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={Step3TS} lang=\"ts\" title=\"index.ts\" mark={[\"ARCJET_KEY\"]} />\n  </div>\n  <div slot=\"JS\" slotIdx=\"2\">\n    <Code code={Step3JS} lang=\"js\" title=\"index.js\" mark={[\"ARCJET_KEY\"]} />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Defining ArcjetReason Object for Rate Limiting Rules in TypeScript\nDESCRIPTION: Outlines the properties of the ArcjetReason object for rate limiting rules, including max, remaining, window, and reset values.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/reference/nextjs.mdx#2025-04-12_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nmax: number;\nremaining: number;\nwindow: number;\nreset: number;\n```\n\n----------------------------------------\n\nTITLE: Testing Rate Limiting with cURL\nDESCRIPTION: Command to send a request to the Arcjet application to test rate limiting functionality. This curl command performs a HEAD request to the specified endpoint.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/rate-limiting/quick-start/remix/Step4.mdx#2025-04-12_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncurl -I http://localhost:5173/arcjet\n```\n\n----------------------------------------\n\nTITLE: Importing Arcjet Components and Code Files\nDESCRIPTION: Import statements for Arcjet code examples and Starlight/SelectableContent components used for documentation rendering.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/get-started/next-js/Step3.mdx#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Step3AppJS from \"./Step3App.js?raw\";\nimport Step3AppTS from \"./Step3App.ts?raw\";\nimport Step3PagesJS from \"./Step3Pages.js?raw\";\nimport Step3PagesTS from \"./Step3Pages.ts?raw\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport SelectableContent from \"@/components/SelectableContent\";\n```\n\n----------------------------------------\n\nTITLE: Testing Rate Limit with Curl\nDESCRIPTION: Command to test the rate limiting functionality using curl, which will receive a 403 response due to being identified as a bot by default.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/get-started/node-js-hono/Step4.mdx#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncurl -v http://localhost:3000\n```\n\n----------------------------------------\n\nTITLE: Implementing Selectable Code Content with TypeScript and JavaScript Options\nDESCRIPTION: Creates a UI component that allows users to switch between TypeScript and JavaScript implementations of header code. The component imports raw code files and renders them inside Code components with proper syntax highlighting.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/rate-limiting/reference/remix/Headers.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Code } from \"@astrojs/starlight/components\";\nimport SelectableContent from \"@/components/SelectableContent\";\nimport HeadersTS from \"./Headers.ts?raw\";\nimport HeadersJS from \"./Headers.js?raw\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={HeadersTS} lang=\"ts\" />\n  </div>\n  <div slot=\"JS\" slotIdx=\"3\">\n    <Code code={HeadersJS} lang=\"js\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Sending Suspicious Request to Arcjet Shield\nDESCRIPTION: A curl command for testing Arcjet Shield by sending a request with a suspicious header to a local server running on port 8000.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/shield/quick-start/nodejs/Step5.mdx#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncurl -v -H \"x-arcjet-suspicious: true\" http://localhost:8000\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Raw Code for Selectable Content Display\nDESCRIPTION: This snippet imports the required components and raw code files for displaying selectable content. It uses dynamic imports to load TypeScript and JavaScript code files.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/reference/nodejs/Filtering.mdx#2025-04-12_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport FilteringTS from \"./Filtering.ts?raw\";\nimport FilteringJS from \"./Filtering.js?raw\";\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Selectable Code Component in Astro/JSX\nDESCRIPTION: Component implementation that uses SelectableContent for framework-specific code display with TypeScript integration. Utilizes Astro's Code component and raw TypeScript imports for syntax highlighting.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/email-validation/reference/nestjs/DecisionLogAllow.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport DecisionLogAllowTS from \"./DecisionLogAllow.ts?raw\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={DecisionLogAllowTS} lang=\"ts\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Installing Arcjet Node packages with npm\nDESCRIPTION: Installs the required Arcjet Node packages (@arcjet/node and @arcjet/inspect) using npm package manager.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/rate-limiting/quick-start/nodejs/Step1.mdx#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i @arcjet/node @arcjet/inspect\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Selectable TypeScript Code in Astro\nDESCRIPTION: This snippet imports required components and raw TypeScript code, then uses a SelectableContent component to render the code with syntax highlighting. It demonstrates how to create a selectable code display in an Astro-based documentation project.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/signup-protection/reference/nextjs/Recommended.mdx#2025-04-12_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport RecommendedTS from \"./Recommended.ts?raw\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={RecommendedTS} lang=\"ts\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Starting Arcjet Application with pnpm\nDESCRIPTION: This command starts the Arcjet application using pnpm as the package manager.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/email-validation/quick-start/nestjs/Step4.mdx#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npnpm run start\n```\n\n----------------------------------------\n\nTITLE: Implementing Per-Route Guard with Arcjet in NestJS\nDESCRIPTION: Shows how to configure Arcjet guards on a per-route basis in NestJS controllers. This approach allows for route-specific rule configuration while utilizing the client created in app.module.ts.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/rate-limiting/reference/nestjs/DecoratorRoutes.mdx#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n{PerRouteGuard}\n```\n\n----------------------------------------\n\nTITLE: Configuring Arcjet Route with Language Selection\nDESCRIPTION: JSX component setup for rendering language-specific Arcjet route configurations with syntax highlighting and marked ARCJET_KEY parameter\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/signup-protection/quick-start/remix/Step3.mdx#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <Fragment slot=\"TS\">\n    <Code code={Step3TS} lang=\"ts\" mark={[\"ARCJET_KEY\"]} />\n  </Fragment>\n  <Fragment slot=\"JS\">\n    <Code code={Step3JS} lang=\"js\" mark={[\"ARCJET_KEY\"]} />\n  </Fragment>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Email Types Enumeration\nDESCRIPTION: Definition of possible email types returned by email validation rules.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/reference/sveltekit.mdx#2025-04-12_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n\"DISPOSABLE\" | \"FREE\" | \"NO_MX_RECORDS\" | \"NO_GRAVATAR\" | \"INVALID\";\n```\n\n----------------------------------------\n\nTITLE: Configuring Email Allow List in TypeScript\nDESCRIPTION: Demonstrates new functionality to explicitly allow specific email types using the validateEmail rule.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/upgrading/sdk-migration.mdx#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nvalidateEmail({\n  mode: \"LIVE\",\n  allow: [\"FREE\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Arcjet Packages with npm\nDESCRIPTION: This snippet shows how to install @arcjet/next and @arcjet/inspect packages using npm. It uses the npm install command.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/quick-start/nextjs/Step1.mdx#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i @arcjet/next @arcjet/inspect\n```\n\n----------------------------------------\n\nTITLE: HTTP X-Forwarded-For Header Example\nDESCRIPTION: Example showing the format of X-Forwarded-For header when request passes through a load balancer\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/reference/nextjs.mdx#2025-04-12_snippet_7\n\nLANGUAGE: http\nCODE:\n```\nX-Forwarded-For: 192.168.1.1, 100.100.100.100\n```\n\n----------------------------------------\n\nTITLE: Example IP Analysis Response in JSON\nDESCRIPTION: Demonstrates a sample JSON response for IP analysis, including country, continent, and ASN information.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/reference/nextjs.mdx#2025-04-12_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"Hello United States!\",\n  \"ip\": {\n    \"country\": \"US\",\n    \"countryName\": \"United States\",\n    \"continent\": \"NA\",\n    \"continentName\": \"North America\",\n    \"asn\": \"AS15169\",\n    \"asnName\": \"Google LLC\",\n    \"asnDomain\": \"google.com\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Nosecone Middleware in Next.js (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to set up Nosecone middleware in a Next.js application using JavaScript. It applies security headers to all routes.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/nosecone/quick-start/next-js/Step2.mdx#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { NextResponse } from \"next/server\";\nimport { withMiddleware } from \"@nosecone/next\";\n\nconst handler = withMiddleware();\n\nexport default handler;\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Selectable Content Component with TypeScript Code\nDESCRIPTION: React/JSX code that imports and uses a SelectableContent component to display TypeScript route code. The component includes a framework switcher and synchronizes content based on language selection.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/get-started/remix/Step3.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport Step3 from \"./Step3.tsx?raw\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    Create a new route at `app/routes/arcjet.tsx` with the contents:\n\n    <Code code={Step3} lang=\"ts\" title=\"app/routes/arcjet.tsx\" />\n\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Configuring Arcjet Environment Variables in .env File\nDESCRIPTION: Creates a .env file that sets the Arcjet environment to development mode and configures the API key. The ARCJET_ENV variable is required specifically for Deno since it doesn't set NODE_ENV automatically, which helps Arcjet accept local IP addresses for development.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/quick-start/deno/Step2.mdx#2025-04-12_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n# NODE_ENV is not set automatically, so tell Arcjet we're in dev\n# You can leave this unset in prod\nARCJET_ENV=development\n# Get your site key from https://app.arcjet.com\nARCJET_KEY=ajkey_yourkey\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Selectable Code Content\nDESCRIPTION: Component that implements a language selector between TypeScript and JavaScript code samples using SelectableContent for toggling and Code component for syntax highlighting. Uses raw imports for code content and client-side rendering.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/shield/reference/bun/DecisionLog.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport DecisionLogJS from \"./DecisionLog.js?raw\";\nimport DecisionLogTS from \"./DecisionLog.ts?raw\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={DecisionLogTS} lang=\"ts\" />\n  </div>\n  <div slot=\"JS\" slotIdx=\"2\">\n    <Code code={DecisionLogJS} lang=\"js\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Visualizing Arcjet Request Flow with Mermaid Flowchart\nDESCRIPTION: This Mermaid flowchart diagram illustrates the flow of a request through an Arcjet-integrated application. It shows the client making a request, the Arcjet SDK evaluating rules, reporting to the Arcjet API, and potentially returning a rate-limiting response based on cached decisions.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/mermaid/architecture-rl-deny.txt#2025-04-12_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    A[Client] -->|Request| B(Arcjet SDK)\n    B --> C{Evaluate Arcjet Rules}\n    C -->|Report| F[✦ Arcjet API]\n    C -->|Previous decision\n    read from cache| E[Application constructs response]\n    E -->|\"429 Too Many Requests Response\"| A[Client]\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Selectable Code Content in AstroJS\nDESCRIPTION: Imports necessary components and raw code files, then renders them in a selectable interface that allows toggling between TypeScript and JavaScript versions. Uses the SelectableContent component with client-side hydration and framework switching capability.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/sensitive-info/reference/bun/CustomDetect.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport CustomDetectTS from \"./CustomDetect.ts?raw\";\nimport CustomDetectJS from \"./CustomDetect.js?raw\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={CustomDetectTS} lang=\"ts\" />\n  </div>\n  <div slot=\"JS\" slotIdx=\"2\">\n    <Code code={CustomDetectJS} lang=\"js\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Rendering Selectable Code Snippets with Starlight Components\nDESCRIPTION: This JSX snippet uses the SelectableContent component to display multiple versions of code examples. It includes TypeScript and JavaScript versions for both App and Pages formats, using the Code component from Starlight to render each snippet.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/shield/reference/nextjs/DecisionLog.mdx#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS (App)\" slotIdx=\"1\">\n    <Code code={DecisionLogAppTS} lang=\"ts\" title=\"/app/api/arcjet/route.ts\" />\n  </div>\n  <div slot=\"TS (Pages)\" slotIdx=\"2\">\n    <Code code={DecisionLogPagesTS} lang=\"ts\" title=\"/pages/api/hello.ts\" />\n  </div>\n  <div slot=\"JS (App)\" slotIdx=\"3\">\n    <Code code={DecisionLogAppJS} lang=\"js\" title=\"/app/api/arcjet/route.js\" />\n  </div>\n  <div slot=\"JS (Pages)\" slotIdx=\"4\">\n    <Code code={DecisionLogPagesJS} lang=\"js\" title=\"/pages/api/hello.ts\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Installing Arcjet Node Packages with pnpm\nDESCRIPTION: This command installs the @arcjet/node and @arcjet/inspect packages using pnpm (Performant npm). It's displayed when the user selects pnpm as their package manager.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/get-started/node-js-hono/Step1.mdx#2025-04-12_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npnpm add @arcjet/node @arcjet/inspect\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Selectable Code Content\nDESCRIPTION: Imports necessary components and renders code content with language selection functionality using SelectableContent component. Uses raw imports for TypeScript code examples.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/rate-limiting/reference/nextjs/MiddlewareAllRoutes.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport MiddlewareAllRoutes from \"./MiddlewareAllRoutes.ts?raw\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={MiddlewareAllRoutes} lang=\"ts\" title=\"/src/hooks.server.ts\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server with Package Managers\nDESCRIPTION: Commands to start the development server using different package managers (npm, pnpm, yarn)\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/get-started/remix/Step4.mdx#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm run dev\n```\n\nLANGUAGE: sh\nCODE:\n```\npnpm run dev\n```\n\nLANGUAGE: sh\nCODE:\n```\nyarn run dev\n```\n\n----------------------------------------\n\nTITLE: User Agent Error Handling in TypeScript with Arcjet\nDESCRIPTION: This TypeScript snippet shows how to handle user agent-related errors using the @arcjet/inspect package. It references a variable 'ErrorUserAgentTS' which likely contains the implementation details.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/reference/nestjs.mdx#2025-04-12_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n<Code code={ErrorUserAgentTS} lang=\"ts\" mark={[{ range: \"65-74\" }]} />\n```\n\n----------------------------------------\n\nTITLE: Configuring Arcjet in JavaScript\nDESCRIPTION: Demonstrates how to configure an Arcjet instance with API key and rate limiting rules in JavaScript. Shows the basic setup with required fields and optional characteristics.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/reference/bun.mdx#2025-04-12_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport arcjet, { fixedWindow } from \"@arcjet/bun\";\nimport { env } from \"bun\";\n\nconst aj = arcjet({\n  key: env.ARCJET_KEY,\n  characteristics: [\"ip.src\"],\n  rules: [fixedWindow({ window: \"1h\", max: 60 })],\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving HTTP Headers with curl\nDESCRIPTION: This command uses curl to fetch only the headers from a GET request to localhost:3000. The -I flag instructs curl to fetch headers only, and -X GET specifies the HTTP method.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/nosecone/quick-start/deno/Step4.mdx#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncurl -I -X GET localhost:3000\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Selectable Code Components\nDESCRIPTION: Sets up a component that allows switching between TypeScript and JavaScript code examples using Starlight's Code component and a custom SelectableContent component. The code imports raw content from external files and provides a synchronized framework switcher interface.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/reference/bun/DenyingBots.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Code } from \"@astrojs/starlight/components\";\nimport SelectableContent from \"@/components/SelectableContent\";\nimport DenyingBotsTS from \"./DenyingBots.ts?raw\";\nimport DenyingBotsJS from \"./DenyingBots.js?raw\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={DenyingBotsTS} lang=\"ts\" />\n  </div>\n  <div slot=\"JS\" slotIdx=\"2\">\n    <Code code={DenyingBotsJS} lang=\"js\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Setting up Arcjet API Route with JavaScript (Pages Router)\nDESCRIPTION: Creates an API route for Arcjet using JavaScript in Next.js Pages Router pattern at /pages/api/arcjet.js\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/rate-limiting/quick-start/nextjs/Step3.mdx#2025-04-12_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Step3PagesJS } from \"./Step3Pages.js\"\n```\n\n----------------------------------------\n\nTITLE: Installing Arcjet SvelteKit and Inspect with npm\nDESCRIPTION: This shell command installs the @arcjet/sveltekit and @arcjet/inspect packages using npm (Node Package Manager).\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/quick-start/sveltekit/Step1.mdx#2025-04-12_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm i @arcjet/sveltekit @arcjet/inspect\n```\n\n----------------------------------------\n\nTITLE: IP Location Analysis Response Example in JSON\nDESCRIPTION: This JSON snippet illustrates a sample response from IP location analysis for the IP address 8.8.8.8. It includes geographical and network information.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/reference/nestjs.mdx#2025-04-12_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"Hello United States!\",\n  \"ip\": {\n    \"country\": \"US\",\n    \"countryName\": \"United States\",\n    \"continent\": \"NA\",\n    \"continentName\": \"North America\",\n    \"asn\": \"AS15169\",\n    \"asnName\": \"Google LLC\",\n    \"asnDomain\": \"google.com\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Next.js 14 Layout for Nosecone (TypeScript)\nDESCRIPTION: This code snippet illustrates how to modify the layout file in Next.js 14 using TypeScript to opt-out of static generation for Nosecone compatibility.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/nosecone/quick-start/next-js/Step2.mdx#2025-04-12_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { unstable_noStore as noStore } from \"next/cache\";\n\nexport default function RootLayout({ children }: { children: React.ReactNode }) {\n  return (\n    <html lang=\"en\">\n      <body>{children}</body>\n    </html>\n  );\n}\n\nexport const dynamic = \"force-dynamic\";\nexport const revalidate = 0;\n```\n\n----------------------------------------\n\nTITLE: Creating Selectable Content Component for Next.js API Routes\nDESCRIPTION: This component renders selectable code examples for Arcjet integration in Next.js, allowing users to switch between TypeScript and JavaScript implementations for both App Router and Pages Router patterns. It imports raw code files and displays them with proper syntax highlighting.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/sensitive-info/reference/nextjs/PerRoute.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport PerRouteAppJS from \"./PerRouteApp.js?raw\";\nimport PerRouteAppTS from \"./PerRouteApp.ts?raw\";\nimport PerRoutePagesJS from \"./PerRoutePages.js?raw\";\nimport PerRoutePagesTS from \"./PerRoutePages.ts?raw\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS (App)\" slotIdx=\"1\">\n    <Code code={PerRouteAppTS} lang=\"ts\" title=\"/app/api/arcjet/route.ts\" />\n  </div>\n  <div slot=\"TS (Pages)\" slotIdx=\"2\">\n    <Code code={PerRoutePagesTS} lang=\"ts\" title=\"/pages/api/hello.ts\" />\n  </div>\n  <div slot=\"JS (App)\" slotIdx=\"3\">\n    <Code code={PerRouteAppJS} lang=\"js\" title=\"/app/api/arcjet/route.js\" />\n  </div>\n  <div slot=\"JS (Pages)\" slotIdx=\"4\">\n    <Code code={PerRoutePagesJS} lang=\"js\" title=\"/pages/api/hello.ts\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Next.js Client Component with Server Action\nDESCRIPTION: Example of a client-side button component that triggers a server action\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/reference/nextjs.mdx#2025-04-12_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\";\n\nimport { create } from \"@/app/actions\";\n\nexport function Button() {\n  return <button onClick={() => create()}>Create</button>;\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Selectable TypeScript and JavaScript Code Snippets\nDESCRIPTION: This snippet uses the SelectableContent component to render code snippets in both TypeScript and JavaScript. It allows for language selection and uses the Starlight Code component for syntax highlighting.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/rate-limiting/reference/sveltekit/DecisionLog.mdx#2025-04-12_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code\n      code={DecisionLogTS}\n      lang=\"ts\"\n      title=\"/src/routes/api/arcjet/+server.ts\"\n    />\n  </div>\n  <div slot=\"JS\" slotIdx=\"2\">\n    <Code\n      code={DecisionLogJS}\n      lang=\"js\"\n      title=\"/src/routes/api/arcjet/+server.js\"\n    />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Configuring X-XSS-Protection Type Definition\nDESCRIPTION: TypeScript type definition for legacy X-XSS-Protection header configuration that was intended to prevent XSS attacks.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/nosecone/reference.mdx#2025-04-12_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\ntype XssProtectionConfig = boolean;\n```\n\n----------------------------------------\n\nTITLE: Implementing Code Selection Component with JSX\nDESCRIPTION: React/JSX component setup that imports and displays switchable TypeScript and JavaScript code examples using SelectableContent component with synchronized language selection.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/rate-limiting/reference/sveltekit/Errors.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport ErrorsJS from \"./Errors.js?raw\";\nimport ErrorsTS from \"./Errors.ts?raw\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={ErrorsTS} lang=\"ts\" title=\"/src/routes/api/arcjet/+server.ts\" />\n  </div>\n  <div slot=\"JS\" slotIdx=\"2\">\n    <Code code={ErrorsJS} lang=\"js\" title=\"/src/routes/api/arcjet/+server.js\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Rendering Selectable TypeScript Code Snippet in React\nDESCRIPTION: This snippet imports required components and raw code content, then renders a selectable TypeScript code snippet using the SelectableContent component. It utilizes the Code component from Starlight for syntax highlighting.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/signup-protection/reference/remix/Recommended.mdx#2025-04-12_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport RecommendedTS from \"./Recommended.ts?raw\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={RecommendedTS} lang=\"ts\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Installing Arcjet packages for Remix with pnpm\nDESCRIPTION: Command to install the @arcjet/remix and @arcjet/inspect packages using pnpm package manager.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/sensitive-info/quick-start/remix/Step1.mdx#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npnpm add @arcjet/remix @arcjet/inspect\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Raw Code Files for Selectable Content Display\nDESCRIPTION: This snippet imports the required components and raw code files for rendering selectable code content. It uses dynamic imports to load TypeScript and JavaScript versions of a DecisionLog file.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/shield/reference/nodejs/DecisionLog.mdx#2025-04-12_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport DecisionLogJS from \"./DecisionLog.js?raw\";\nimport DecisionLogTS from \"./DecisionLog.ts?raw\";\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Selectable Code Snippet in React\nDESCRIPTION: This code snippet imports required components and a raw TypeScript file, then uses the SelectableContent component to render a selectable code snippet. It allows for language selection and uses the Code component to display the TypeScript code.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/rate-limiting/reference/nextjs/SlidingWindow.mdx#2025-04-12_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport SlidingWindow from \"./SlidingWindow.ts?raw\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={SlidingWindow} lang=\"ts\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Applying Global Guard to Controller in NestJS with Arcjet\nDESCRIPTION: Demonstrates how to implement the Arcjet guard in a controller to protect specific routes with the global guard configuration.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/shield/reference/nestjs/DecoratorRoutes.mdx#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller, Get, UseGuards } from \"@nestjs/common\";\nimport { ArcjetGuard } from \"./arcjet.guard\";\n\n@Controller(\"example\")\nexport class ExampleController {\n  @Get()\n  findAll() {\n    return { message: \"This route is protected by Arcjet\" };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SvelteKit Server Hooks for Nosecone Headers (TypeScript)\nDESCRIPTION: Sets up server-side hooks in SvelteKit to apply Nosecone headers to all routes using TypeScript. Creates the hooks.server.ts file to handle header application.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/nosecone/quick-start/sveltekit/Step2.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport Step2HooksTS from \"./Step2Hooks.ts?raw\"\n```\n\n----------------------------------------\n\nTITLE: Sending POST Request with curl to Arcjet API\nDESCRIPTION: Makes a POST request to a local Arcjet API endpoint running on port 8000 with verbose output. The request includes form data containing an email address for testing purposes.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/sensitive-info/quick-start/nodejs/Step4.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -v http://localhost:8000/api/arcjet --data \"My email address is test@example.com\"\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Arcjet SDK\nDESCRIPTION: Configuration for storing the Arcjet API key in the .env.local file to authenticate with the Arcjet service.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/signup-protection/quick-start.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nARCJET_KEY=aj_xxxxxxxxxxxx\n```\n\n----------------------------------------\n\nTITLE: Testing Rate Limit with CURL\nDESCRIPTION: Command to test the rate limit implementation by making a HEAD request to the local development server. Should return a 403 response due to curl being identified as a bot.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/get-started/remix/Step4.mdx#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncurl -I http://localhost:5173/arcjet\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Arcjet Documentation\nDESCRIPTION: This snippet imports necessary components and raw code files for displaying Arcjet server hook configurations. It uses Astro's Starlight components and a custom SelectableContent component.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/nosecone/reference/sveltekit/Hooks.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Code } from \"@astrojs/starlight/components\";\nimport SelectableContent from \"@/components/SelectableContent\";\n\nimport HooksTS from \"./Hooks.ts?raw\";\nimport HooksJS from \"./Hooks.js?raw\";\n```\n\n----------------------------------------\n\nTITLE: Iterating Through Decision Results\nDESCRIPTION: Example code showing how to iterate through decision results to check sensitive information rule application.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/sensitive-info/reference.mdx#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfor (const result of decision.results) {\n  console.log(\"Rule Result\", result);\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Global Guard to NestJS Controller\nDESCRIPTION: This code shows how to apply the global Arcjet guard to a controller in NestJS. It uses the UseGuards decorator to protect all routes within the controller.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/sensitive-info/reference/nestjs/DecoratorRoutes.mdx#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller, Get, UseGuards } from \"@nestjs/common\";\nimport { ArcjetGuard } from \"./arcjet.guard\";\n\n@Controller()\n@UseGuards(ArcjetGuard)\nexport class AppController {\n  @Get()\n  getHello(): string {\n    return \"Hello World!\";\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Arcjet Node Packages - Multi Package Manager Guide\nDESCRIPTION: Installation commands for @arcjet/node and @arcjet/inspect packages using different Node.js package managers. Shows equivalent commands for npm, pnpm, and yarn.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/email-validation/quick-start/nodejs/Step1.mdx#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i @arcjet/node @arcjet/inspect\n```\n\nLANGUAGE: sh\nCODE:\n```\npnpm add @arcjet/node @arcjet/inspect\n```\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @arcjet/node @arcjet/inspect\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\n\n<SelectableContent client:load syncKey=\"packageManager\" frameworkSwitcher>\n<div slot=\"npm\" slotIdx=\"1\">\n```sh\nnpm i @arcjet/node @arcjet/inspect\n```\n</div>\n<div slot=\"pnpm\" slotIdx=\"2\">\n```sh\npnpm add @arcjet/node @arcjet/inspect\n```\n</div>\n<div slot=\"yarn\" slotIdx=\"3\">\n```sh\nyarn add @arcjet/node @arcjet/inspect\n```\n</div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Email Validation Properties Type Definition\nDESCRIPTION: Type definition for email validation rule response properties.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/reference/sveltekit.mdx#2025-04-12_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nemailTypes: ArcjetEmailType[];\n```\n\n----------------------------------------\n\nTITLE: Implementing Selectable Code Content in Next.js Component\nDESCRIPTION: Creates a selectable content interface that allows switching between TypeScript and JavaScript code examples. Uses raw code imports and Astro Starlight's Code component for syntax highlighting. Implements both App Router and Pages Router examples with synchronized language selection.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/reference/nextjs/Errors.mdx#2025-04-12_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport ErrorsAppJS from \"./ErrorsApp.js?raw\";\nimport ErrorsAppTS from \"./ErrorsApp.ts?raw\";\nimport ErrorsPagesJS from \"./ErrorsPages.js?raw\";\nimport ErrorsPagesTS from \"./ErrorsPages.ts?raw\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS (App)\" slotIdx=\"1\">\n    <Code code={ErrorsAppTS} lang=\"ts\" title=\"/app/api/arcjet/route.ts\" />\n  </div>\n  <div slot=\"TS (Pages)\" slotIdx=\"2\">\n    <Code code={ErrorsPagesTS} lang=\"ts\" title=\"/pages/api/hello.ts\" />\n  </div>\n  <div slot=\"JS (App)\" slotIdx=\"3\">\n    <Code code={ErrorsAppJS} lang=\"js\" title=\"/app/api/arcjet/route.js\" />\n  </div>\n  <div slot=\"JS (Pages)\" slotIdx=\"4\">\n    <Code code={ErrorsPagesJS} lang=\"js\" title=\"/pages/api/hello.ts\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Shield Rule Reason Type Definition\nDESCRIPTION: Type definition for the Shield rule reason object in Arcjet responses.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/reference/sveltekit.mdx#2025-04-12_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nshieldTriggered: boolean;\n```\n\n----------------------------------------\n\nTITLE: Rendering Selectable Code Snippets with React-like JSX\nDESCRIPTION: This snippet uses a custom SelectableContent component to render code snippets with language selection options. It includes slots for TypeScript and JavaScript code, using the imported raw code files.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/reference/nodejs/DenyingBots.mdx#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={DenyingBotsTS} lang=\"ts\" />\n  </div>\n  <div slot=\"JS\" slotIdx=\"2\">\n    <Code code={DenyingBotsJS} lang=\"js\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Default X-Permitted-Cross-Domain-Policies Configuration\nDESCRIPTION: Default configuration object for X-Permitted-Cross-Domain-Policies header that defines cross-domain content loading policies.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/nosecone/reference.mdx#2025-04-12_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  permittedPolicies: \"none\",\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Selectable Content with JS and TS Code Blocks\nDESCRIPTION: This JSX snippet uses the SelectableContent component to create switchable views for JavaScript and TypeScript code blocks. It uses the Code component to render the imported raw code.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/rate-limiting/reference/bun/Errors.mdx#2025-04-12_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={ErrorsTS} lang=\"ts\" />\n  </div>\n  <div slot=\"JS\" slotIdx=\"2\">\n    <Code code={ErrorsJS} lang=\"js\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Implementing Selectable Code Display with TypeScript and JavaScript Options\nDESCRIPTION: This snippet sets up a React component that allows users to toggle between TypeScript and JavaScript code examples for a DecisionLog component. It imports raw code files and renders them in a selectable content component with language options.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/sensitive-info/reference/sveltekit/DecisionLog.mdx#2025-04-12_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport DecisionLogJS from \"./DecisionLog.js?raw\";\nimport DecisionLogTS from \"./DecisionLog.ts?raw\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={DecisionLogTS} lang=\"ts\" />\n  </div>\n  <div slot=\"JS\" slotIdx=\"2\">\n    <Code code={DecisionLogJS} lang=\"js\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Installing Arcjet packages for Remix with npm\nDESCRIPTION: Command to install the @arcjet/remix and @arcjet/inspect packages using npm package manager.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/sensitive-info/quick-start/remix/Step1.mdx#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i @arcjet/remix @arcjet/inspect\n```\n\n----------------------------------------\n\nTITLE: Rendering Selectable TypeScript and JavaScript Code Examples\nDESCRIPTION: This JSX snippet uses the SelectableContent component to render switchable code examples in TypeScript and JavaScript. It provides slots for each language option and uses the Code component to display the code with syntax highlighting.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/reference/sveltekit/Errors.mdx#2025-04-12_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={ErrorsTS} lang=\"ts\" title=\"/src/routes/api/arcjet/+server.ts\" />\n  </div>\n  <div slot=\"JS\" slotIdx=\"2\">\n    <Code code={ErrorsJS} lang=\"js\" title=\"/src/routes/api/arcjet/+server.js\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Installing Arcjet Packages with NPM\nDESCRIPTION: Installs @arcjet/remix and @arcjet/inspect packages using NPM package manager.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/rate-limiting/quick-start/remix/Step1.mdx#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i @arcjet/remix @arcjet/inspect\n```\n\n----------------------------------------\n\nTITLE: Configuring Arcjet in Next.js Middleware (TypeScript)\nDESCRIPTION: Implementation of Arcjet in a Next.js middleware.ts file to run on all requests except static assets. This shows the TypeScript version of the middleware integration.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/shield/reference/nextjs/Middleware.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextResponse } from \"next/server\";\nimport type { NextRequest } from \"next/server\";\nimport { arcjet } from \"@arcjet/next\";\n\nconst aj = arcjet({\n  key: process.env.ARCJET_KEY,\n  rules: {\n    // Configure rules here\n  },\n});\n\nexport async function middleware(request: NextRequest) {\n  const response = NextResponse.next();\n\n  await aj.protect(request, response, {\n    // Override rules or provide contextual data here\n  });\n\n  return response;\n}\n\nexport const config = {\n  matcher: [\"/((?!_next/static|_next/image|favicon.ico).+)\"],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Arcjet Environment Variables in .env.local\nDESCRIPTION: This code block sets up the necessary environment variables for Arcjet in a development environment. It includes setting ARCJET_ENV to 'development' and providing an ARCJET_KEY obtained from the Arcjet dashboard.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/sensitive-info/quick-start/shared/Step2SetEnv.mdx#2025-04-12_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n# NODE_ENV is not set automatically, so tell Arcjet we're in dev\n# You can leave this unset in prod\nARCJET_ENV=development\n# Get your site key from https://app.arcjet.com\nARCJET_KEY=ajkey_yourkey\n```\n\n----------------------------------------\n\nTITLE: Configuring Arcjet Environment Variables in .env.local\nDESCRIPTION: This code block sets up the necessary environment variables for Arcjet in a development context. It includes setting ARCJET_ENV to 'development' and providing an ARCJET_KEY for authentication.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/email-validation/quick-start/shared/Step2SetEnv.mdx#2025-04-12_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n# NODE_ENV is not set automatically, so tell Arcjet we're in dev\n# You can leave this unset in prod\nARCJET_ENV=development\n# Get your site key from https://app.arcjet.com\nARCJET_KEY=ajkey_yourkey\n```\n\n----------------------------------------\n\nTITLE: Setting Arcjet API Key in Environment Variables (INI)\nDESCRIPTION: This snippet defines the ARCJET_KEY environment variable with a placeholder value. It is used to configure the API key for Arcjet integration in a local development environment.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/shield/quick-start/shared/Step2.mdx#2025-04-12_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nARCJET_KEY=ajkey_yourkey\n```\n\n----------------------------------------\n\nTITLE: Importing Code Files and Rendering Selectable Content\nDESCRIPTION: Sets up a component that allows switching between TypeScript and JavaScript code examples. Uses the SelectableContent component with language synchronization and the Code component from Starlight for syntax highlighting.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/email-validation/reference/nodejs/DecisionLogDeny.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport DecisionLogDenyJS from \"./DecisionLogDeny.js?raw\";\nimport DecisionLogDenyTS from \"./DecisionLogDeny.ts?raw\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={DecisionLogDenyTS} lang=\"ts\" />\n  </div>\n  <div slot=\"JS\" slotIdx=\"2\">\n    <Code code={DecisionLogDenyJS} lang=\"js\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Testing Rate Limit with Curl\nDESCRIPTION: Sends a request to the local server using curl after waiting for 10 seconds. This command is used to test the rate limiting functionality and should result in a 403 response due to curl being considered a bot by default.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/get-started/deno/Step4.mdx#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncurl -v http://localhost:3000\n```\n\n----------------------------------------\n\nTITLE: Installing Arcjet packages with pnpm\nDESCRIPTION: Installs the @arcjet/node and @arcjet/inspect packages using pnpm package manager.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/quick-start/nodejs/Step1.mdx#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npnpm add @arcjet/node @arcjet/inspect\n```\n\n----------------------------------------\n\nTITLE: Updating package.json for Arcjet Development\nDESCRIPTION: Modifies the dev script in package.json to use the .env.local file when running the development server. This ensures that the correct environment variables are loaded during development.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/get-started/node-js-hono/Step2.mdx#2025-04-12_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"dev\": \"tsx watch --env-file .env.local src/index.ts\"\n  }\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Global Guard to Controller Routes in NestJS\nDESCRIPTION: Demonstrates how to apply the global Arcjet guard to a controller to protect all its routes. Shows the controller setup with guard implementation.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/reference/nestjs/DecoratorRoutes.mdx#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n${GlobalGuardRouteTS}\n```\n\n----------------------------------------\n\nTITLE: Example HTTP Response Headers\nDESCRIPTION: Sample HTTP response headers showing various security policies, Next.js specific headers, and standard HTTP headers from a local server response.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/nosecone/quick-start/next-js/Step4.mdx#2025-04-12_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nHTTP/1.1 200 OK\ncontent-security-policy: base-uri 'none'; child-src 'none'; connect-src 'self'; default-src 'self'; font-src 'self'; form-action 'self'; frame-ancestors 'none'; frame-src 'none'; img-src 'self' blob: data:; manifest-src 'self'; media-src 'self'; object-src 'none'; script-src 'nonce-YWUwNGIwMTMtOTgwYi00MWNiLWI3M2QtMjBkYWQwODMxZTNi' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; worker-src 'self'; upgrade-insecure-requests;\ncross-origin-embedder-policy: require-corp\ncross-origin-opener-policy: same-origin\ncross-origin-resource-policy: same-origin\norigin-agent-cluster: ?1\nreferrer-policy: no-referrer\nstrict-transport-security: max-age=31536000; includeSubDomains\nx-content-type-options: nosniff\nx-dns-prefetch-control: off\nx-download-options: noopen\nx-frame-options: SAMEORIGIN\nx-permitted-cross-domain-policies: none\nx-xss-protection: 0\nVary: RSC, Next-Router-State-Tree, Next-Router-Prefetch, Next-Router-Segment-Prefetch, Accept-Encoding\nlink: </_next/static/media/a34f9d1faa5f3315-s.p.woff2>; rel=preload; as=\"font\"; crossorigin=\"\"; nonce=\"YWUwNGIwMTMtOTgwYi00MWNiLWI3M2QtMjBkYWQwODMxZTNi\"; type=\"font/woff2\", </vercel.svg>; rel=preload; as=\"image\", </next.svg>; rel=preload; as=\"image\", </_next/static/css/app/layout.css?v=1732741292630>; rel=preload; as=\"style\"; nonce=\"YWUwNGIwMTMtOTgwYi00MWNiLWI3M2QtMjBkYWQwODMxZTNi\"\nCache-Control: no-store, must-revalidate\nX-Powered-By: Next.js\nContent-Type: text/html; charset=utf-8\nDate: Wed, 27 Nov 2024 21:01:32 GMT\nConnection: keep-alive\nKeep-Alive: timeout=5\nTransfer-Encoding: chunked\n```\n\n----------------------------------------\n\nTITLE: Configuring Selectable Code Components in React\nDESCRIPTION: React component setup that imports and configures code examples for different Next.js versions and language variants using Astrojs Starlight components. Uses a SelectableContent component for switching between different code implementations.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/nosecone/reference/next-js/StaticOptOut.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Code } from \"@astrojs/starlight/components\";\nimport SelectableContent from \"@/components/SelectableContent\";\n\nimport LayoutConnectionTS from \"./LayoutConnection.ts?raw\";\nimport LayoutConnectionJS from \"./LayoutConnection.js?raw\";\nimport LayoutNoCacheTS from \"./LayoutNoCache.ts?raw\";\nimport LayoutNoCacheJS from \"./LayoutNoCache.js?raw\";\n\n<SelectableContent client:load syncKey=\"language\">\n  <div slot=\"TS (Next.js 15)\" slotIdx=\"1\">\n    <Code\n      code={LayoutConnectionTS}\n      lang=\"ts\"\n      title=\"app/layout.tsx\"\n      ins={[1, 5, 6]}\n    />\n  </div>\n  <div slot=\"JS (Next.js 15)\" slotIdx=\"2\">\n    <Code\n      code={LayoutConnectionJS}\n      lang=\"js\"\n      title=\"app/layout.jsx\"\n      ins={[1, 4, 5]}\n    />\n  </div>\n  <div slot=\"TS (Next.js 14)\" slotIdx=\"3\">\n    <Code\n      code={LayoutNoCacheTS}\n      lang=\"ts\"\n      title=\"app/layout.tsx\"\n      ins={[1, 5, 6]}\n    />\n  </div>\n  <div slot=\"JS (Next.js 14)\" slotIdx=\"4\">\n    <Code\n      code={LayoutNoCacheJS}\n      lang=\"js\"\n      title=\"app/layout.jsx\"\n      ins={[1, 4, 5]}\n    />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Importing and Using SelectableContent with Astro Code Component\nDESCRIPTION: JSX component that imports necessary dependencies and sets up a selectable content area for displaying TypeScript code using Astro's Code component. Uses client-side loading and synchronization.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/sensitive-info/reference/nestjs/Errors.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport ErrorsTS from \"./Errors.ts?raw\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={ErrorsTS} lang=\"ts\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering SelectableContent Component with TypeScript\nDESCRIPTION: Component setup that imports necessary dependencies and renders a SelectableContent component with synchronized language selection and framework switching functionality. Uses raw TypeScript code import and Astro's Code component for syntax highlighting.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/rate-limiting/reference/remix/FixedWindow.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport FixedWindow from \"./FixedWindow.ts?raw\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={FixedWindow} lang=\"ts\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Client in Arcjet SDK for TypeScript and JavaScript\nDESCRIPTION: Demonstrates how to override the default Arcjet client, although this is generally not necessary as the SDK handles client creation automatically.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/reference/nodejs.mdx#2025-04-12_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// TypeScript code for overriding default client\n// Code not provided in the original text\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// JavaScript code for overriding default client\n// Code not provided in the original text\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Selectable TypeScript Code Display\nDESCRIPTION: React component that imports necessary dependencies and renders a selectable content area displaying TypeScript code. Uses SelectableContent for framework switching and Code component from Starlight for syntax highlighting.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/rate-limiting/reference/sveltekit/SlidingWindow.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport SlidingWindow from \"./SlidingWindow.ts?raw\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={SlidingWindow} lang=\"ts\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Selectable Code Content in React\nDESCRIPTION: This code snippet sets up a SelectableContent component that allows switching between TypeScript and JavaScript code examples. It uses raw imports for the code files and the Code component from Astro's Starlight for rendering.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/sensitive-info/reference/sveltekit/Filtering.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport FilteringTS from \"./Filtering.ts?raw\";\nimport FilteringJS from \"./Filtering.js?raw\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={FilteringTS} lang=\"ts\" title=\"/src/hooks.server.ts\" />\n  </div>\n  <div slot=\"JS\" slotIdx=\"2\">\n    <Code code={FilteringJS} lang=\"js\" title=\"/src/hooks.server.js\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Using SelectableContent Component with Bun Installation Command\nDESCRIPTION: This snippet demonstrates the usage of the SelectableContent component to display a Bun command for installing Arcjet dependencies. The component is configured with client-side rendering and a framework switcher.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/quick-start/bun/Step1.mdx#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<SelectableContent client:load frameworkSwitcher>\n<div>\n```bash\nbun add @arcjet/bun @arcjet/inspect\n```\n</div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Rendering Selectable Code Snippets with Starlight Components\nDESCRIPTION: This code snippet imports the Code component from Starlight and a custom SelectableContent component. It then uses these components to render selectable TypeScript and JavaScript code snippets, allowing users to switch between languages.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/rate-limiting/reference/bun/Headers.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Code } from \"@astrojs/starlight/components\";\nimport SelectableContent from \"@/components/SelectableContent\";\nimport HeadersTS from \"./Headers.ts?raw\";\nimport HeadersJS from \"./Headers.js?raw\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={HeadersTS} lang=\"ts\" />\n  </div>\n  <div slot=\"JS\" slotIdx=\"3\">\n    <Code code={HeadersJS} lang=\"js\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Importing and Configuring SelectableContent Component\nDESCRIPTION: Sets up a SelectableContent component with TypeScript and JavaScript code examples using Astro's Code component. The component enables switching between language versions while maintaining synchronized state.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/sensitive-info/reference/nodejs/DecisionLog.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport DecisionLogJS from \"./DecisionLog.js?raw\";\nimport DecisionLogTS from \"./DecisionLog.ts?raw\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={DecisionLogTS} lang=\"ts\" />\n  </div>\n  <div slot=\"JS\" slotIdx=\"2\">\n    <Code code={DecisionLogJS} lang=\"js\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Basic Next.js Middleware Configuration for Arcjet (TypeScript)\nDESCRIPTION: Sets up basic Arcjet Bot Protection middleware in Next.js using TypeScript. Creates middleware.ts file that applies Arcjet protection to all routes.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/quick-start/nextjs/Step3.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextResponse } from \"next/server\";\nimport { arcjet } from \"@arcjet/next\";\n\nexport default arcjet();\n\nexport const config = {\n  matcher: [\"/((?!api|_next/static|_next/image|favicon.ico).+)\"],\n};\n```\n\n----------------------------------------\n\nTITLE: Testing Arcjet API with cURL in Bash\nDESCRIPTION: This command sends a POST request to the Arcjet API running on localhost:3000. It includes sample data with an email address in the request body and uses verbose output for detailed information.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/sensitive-info/quick-start/nextjs/Step4.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -v http://localhost:3000/api/arcjet --data \"My email address is test@example.com\"\n```\n\n----------------------------------------\n\nTITLE: Defining ArcjetReason Object for Bot Protection Rules in TypeScript\nDESCRIPTION: Specifies the structure of the ArcjetReason object for bot protection rules, including 'allowed' and 'denied' arrays of string identifiers.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/reference/nextjs.mdx#2025-04-12_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nallowed: string[];\ndenied: string[];\n```\n\n----------------------------------------\n\nTITLE: Import and Render Selectable Code Component\nDESCRIPTION: Component setup that imports necessary dependencies and renders a SelectableContent component with TypeScript and JavaScript code examples using Astro's Code component\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/email-validation/reference/remix/DecisionLogAllow.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport DecisionLogAllowJS from \"./DecisionLogAllow.js?raw\";\nimport DecisionLogAllowTS from \"./DecisionLogAllow.ts?raw\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={DecisionLogAllowTS} lang=\"ts\" />\n  </div>\n  <div slot=\"JS\" slotIdx=\"2\">\n    <Code code={DecisionLogAllowJS} lang=\"js\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Testing Server with Curl Request\nDESCRIPTION: Command to test the server using curl, which should return a 403 Forbidden response as curl is treated as an automated client by default.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/quick-start/deno/Step4.mdx#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncurl http://localhost:3000\n```\n\n----------------------------------------\n\nTITLE: Opting Out of Static Generation in Next.js Layout\nDESCRIPTION: Code snippet to opt out of static generation in Next.js Layout for CSP nonce support.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/nosecone/reference.mdx#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport const dynamic = \"force-dynamic\";\n\nexport default function Layout({ children }: { children: React.ReactNode }) {\n  return <>{children}</>;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Arcjet packages for SvelteKit using pnpm\nDESCRIPTION: Command to install @arcjet/sveltekit and @arcjet/inspect packages using pnpm package manager.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/sensitive-info/quick-start/sveltekit/Step1.mdx#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npnpm add @arcjet/sveltekit @arcjet/inspect\n```\n\n----------------------------------------\n\nTITLE: Installing Arcjet IP Detection Library\nDESCRIPTION: Command to install the @arcjet/ip package using npm package manager.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/ip.mdx#2025-04-12_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install -S @arcjet/ip\n```\n\n----------------------------------------\n\nTITLE: Implementing Global Guard in NestJS with Arcjet\nDESCRIPTION: Sets up an Arcjet global guard in app.module.ts to apply security rules to all requests. This approach provides application-wide protection but doesn't allow for route-specific configuration.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/shield/reference/nestjs/DecoratorRoutes.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Module } from \"@nestjs/common\";\nimport { APP_GUARD } from \"@nestjs/core\";\nimport { ConfigModule } from \"@nestjs/config\";\nimport { ArcjetClient } from \"@arcjet/node\";\nimport { ArcjetGuard } from \"./arcjet.guard\";\n\n@Module({\n  imports: [ConfigModule.forRoot()],\n  controllers: [],\n  providers: [\n    {\n      provide: ArcjetClient,\n      useFactory: () => {\n        return new ArcjetClient({\n          key: process.env.ARCJET_KEY,\n          rules: [\n            // Configure rules as needed\n          ],\n        });\n      },\n    },\n    {\n      provide: APP_GUARD,\n      useClass: ArcjetGuard,\n    },\n  ],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Rendering Framework-Specific Error Components in Markdown\nDESCRIPTION: This snippet demonstrates the use of a custom component 'SlotByFramework' to conditionally render error handling components based on different frameworks. It includes slots for Bun, NestJS, NextJS, NodeJS, Remix, and SvelteKit.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/sensitive-info/reference.mdx#2025-04-12_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n<SlotByFramework client:load>\n  <ErrorsBun slot=\"bun\" />\n  <ErrorsNestJs slot=\"nest-js\" />\n  <ErrorsNextJs slot=\"next-js\" />\n  <ErrorsNodeJs slot=\"node-js\" />\n  <ErrorsRemix slot=\"remix\" />\n  <ErrorsSvelteKit slot=\"sveltekit\" />\n</SlotByFramework>\n```\n\n----------------------------------------\n\nTITLE: Implementing Language Switcher Component in Astro\nDESCRIPTION: A React/Astro component that provides a selectable interface between TypeScript and JavaScript code examples. Uses raw code imports and Astro's Code component for syntax highlighting.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/sensitive-info/reference/bun/DecisionLog.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport DecisionLogJS from \"./DecisionLog.js?raw\";\nimport DecisionLogTS from \"./DecisionLog.ts?raw\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={DecisionLogTS} lang=\"ts\" />\n  </div>\n  <div slot=\"JS\" slotIdx=\"2\">\n    <Code code={DecisionLogJS} lang=\"js\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Testing Arcjet Application with Curl POST Request\nDESCRIPTION: This curl command sends a POST request to the local Arcjet application, testing it with a sample email. It demonstrates how to interact with the application's API endpoint for data indexing.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/signup-protection/quick-start/remix/Step4.mdx#2025-04-12_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST -d 'email=test@arcjet.io' http://localhost:5173/arcjet.data?index\n```\n\n----------------------------------------\n\nTITLE: Configuring Selectable Code Display with Astro Starlight\nDESCRIPTION: Component setup that imports and configures a selectable code display interface using Astro's Starlight Code component and a custom SelectableContent component. Allows switching between TypeScript and JavaScript implementations of middleware code.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/nosecone/reference/next-js/ChainedMiddleware.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Code } from \"@astrojs/starlight/components\";\nimport SelectableContent from \"@/components/SelectableContent\";\n\nimport ChainedMiddlewareTS from \"./ChainedMiddleware.ts?raw\";\nimport ChainedMiddlewareJS from \"./ChainedMiddleware.js?raw\";\n\n<SelectableContent client:load syncKey=\"language\">\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={ChainedMiddlewareTS} lang=\"ts\" title=\"middleware.ts\" />\n  </div>\n  <div slot=\"JS\" slotIdx=\"2\">\n    <Code code={ChainedMiddlewareJS} lang=\"js\" title=\"middleware.js\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Middleware Matcher Code Example\nDESCRIPTION: Example showing how to exclude specific API routes from middleware processing using the Next.js middleware matcher configuration.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/sensitive-info/reference/nextjs/Middleware.mdx#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n<Code code={MiddlewareMatcher} lang=\"ts\" title=\"/middleware.ts\" />\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Selectable Code Blocks\nDESCRIPTION: Imports code blocks from separate TS and JS files and renders them in a selectable interface using Astro's Starlight components. Allows users to switch between TypeScript and JavaScript implementations.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/rate-limiting/reference/bun/ByUserId.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Code } from \"@astrojs/starlight/components\";\nimport SelectableContent from \"@/components/SelectableContent\";\nimport ByUserIdTS from \"./ByUserId.ts?raw\";\nimport ByUserIdJS from \"./ByUserId.js?raw\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={ByUserIdTS} lang=\"ts\" />\n  </div>\n  <div slot=\"JS\" slotIdx=\"3\">\n    <Code code={ByUserIdJS} lang=\"js\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Rendering Selectable Content with Astro Components in JSX\nDESCRIPTION: React/JSX component that implements selectable content display using Astro's Starlight components. The component uses client-side hydration and supports TypeScript code rendering with language synchronization.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/reference/nestjs/Filtering.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport FilteringTS from \"./Filtering.ts?raw\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={FilteringTS} lang=\"ts\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Installing Arcjet SvelteKit and Inspect with yarn\nDESCRIPTION: This command installs the @arcjet/sveltekit and @arcjet/inspect packages using yarn package manager.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/email-validation/quick-start/sveltekit/Step1.mdx#2025-04-12_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @arcjet/sveltekit @arcjet/inspect\n```\n\n----------------------------------------\n\nTITLE: Implementing a Framework Switcher for TypeScript Code Examples in JSX/TSX\nDESCRIPTION: This code imports a SelectableContent component and Starlight code components to create a framework switcher UI. It renders TypeScript content from an imported raw file, allowing users to switch between different language or framework options.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/signup-protection/reference/bun/Recommended.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport RecommendedTS from \"./Recommended.ts?raw\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={RecommendedTS} lang=\"ts\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Installing Arcjet Remix Dependencies with PNPM\nDESCRIPTION: Command to install @arcjet/remix and @arcjet/inspect packages using PNPM package manager.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/quick-start/remix/Step1.mdx#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npnpm add @arcjet/remix @arcjet/inspect\n```\n\n----------------------------------------\n\nTITLE: Configuring SvelteKit Server Hooks for Nosecone Headers (JavaScript)\nDESCRIPTION: Sets up server-side hooks in SvelteKit to apply Nosecone headers to all routes using JavaScript. Creates the hooks.server.js file to handle header application.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/nosecone/quick-start/sveltekit/Step2.mdx#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport Step2HooksJS from \"./Step2Hooks.js?raw\"\n```\n\n----------------------------------------\n\nTITLE: Creating API Route with Arcjet in JavaScript\nDESCRIPTION: Demonstrates setting up an Arcjet-enabled API route in SvelteKit using JavaScript. Shows the file structure and import pattern for JavaScript implementation.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/rate-limiting/quick-start/sveltekit/Step3.mdx#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport Step3JS from \"./Step3.js?raw\";\n```\n\n----------------------------------------\n\nTITLE: Defining ArcjetReason Object for Email Rules in TypeScript\nDESCRIPTION: Defines the structure of the ArcjetReason object for email rules, containing an array of ArcjetEmailType strings.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/reference/nextjs.mdx#2025-04-12_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nemailTypes: ArcjetEmailType[];\n```\n\n----------------------------------------\n\nTITLE: Starting a Server with TypeScript and Environment Variables\nDESCRIPTION: Command to start a TypeScript server using npx tsx with environment variables loaded from a .env.local file. This approach works for Node 20+ that supports the --env-file flag.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/shield/quick-start/nodejs/Step4.mdx#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx tsx --env-file .env.local index.ts\n```\n\n----------------------------------------\n\nTITLE: Configuring SelectableContent for Code Display\nDESCRIPTION: Sets up a component that enables users to switch between TypeScript and JavaScript code views using SelectableContent with Astro's Code component. The implementation imports raw code files and renders them in selectable slots.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/shield/reference/remix/DecisionLog.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport DecisionLogJS from \"./DecisionLog.js?raw\";\nimport DecisionLogTS from \"./DecisionLog.ts?raw\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={DecisionLogTS} lang=\"ts\" />\n  </div>\n  <div slot=\"JS\" slotIdx=\"2\">\n    <Code code={DecisionLogJS} lang=\"js\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Testing Arcjet Shield with Suspicious Request Headers\nDESCRIPTION: Shows how to send a test request with a suspicious header to trigger Arcjet Shield rules. The curl command includes the x-arcjet-suspicious header to simulate a potentially malicious request.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/shield/quick-start/nextjs/Step5.mdx#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncurl -v -H \"x-arcjet-suspicious: true\" http://localhost:3000\n```\n\n----------------------------------------\n\nTITLE: Running Bun with TypeScript\nDESCRIPTION: Command to start a Bun development server with hot reloading for a TypeScript entry file.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/nosecone/quick-start/bun/Step3.mdx#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbun run --hot index.ts\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Code Snippets with Framework Selection in JSX\nDESCRIPTION: This code imports TypeScript and JavaScript code snippets, and renders them using a SelectableContent component. It allows users to switch between TS and JS versions of the code, with syntax highlighting and marked sections.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/rate-limiting/quick-start/nestjs/Step3.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Step3TS from \"./Step3.ts?raw\";\nimport Step3JS from \"./Step3.js?raw\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport SelectableContent from \"@/components/SelectableContent\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={Step3TS} lang=\"ts\" title=\"src/main.ts\" mark={[\"ARCJET_KEY\"]} />\n  </div>\n  <div slot=\"JS\" slotIdx=\"2\">\n    <Code code={Step3JS} lang=\"js\" title=\"src/main.ts\" mark={[\"ARCJET_KEY\"]} />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Selectable Code Content in JSX\nDESCRIPTION: Component implementation that imports TypeScript and JavaScript code files and renders them in a selectable interface using the SelectableContent component. Uses Astro's Code component for syntax highlighting.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/reference/nodejs/IdentifiedBots.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport IdentifiedBotsTS from \"./IdentifiedBots.ts?raw\";\nimport IdentifiedBotsJS from \"./IdentifiedBots.js?raw\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={IdentifiedBotsTS} lang=\"ts\" />\n  </div>\n  <div slot=\"JS\" slotIdx=\"2\">\n    <Code code={IdentifiedBotsJS} lang=\"js\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Installing @arcjet/inspect Package\nDESCRIPTION: Command to install the @arcjet/inspect package using npm. This package provides utilities for inspecting Arcjet decisions.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/inspect.mdx#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install -S @arcjet/inspect\n```\n\n----------------------------------------\n\nTITLE: Implementing Selectable Content Component for Code Display in React/JSX\nDESCRIPTION: This code snippet defines a component that enables switching between different language implementations. It uses SelectableContent with client-side loading and a synchronization key to maintain state, specifically for displaying TypeScript code.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/signup-protection/reference/nestjs/Recommended.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport RecommendedTS from \"./Recommended.ts?raw\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={RecommendedTS} lang=\"ts\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Testing Arcjet Bot Detection with curl\nDESCRIPTION: Command to test the Arcjet bot detection functionality by using curl which is typically identified as a bot by default.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/public/llms.txt#2025-04-12_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncurl -v http://localhost:3000/api/arcjet\n```\n\n----------------------------------------\n\nTITLE: Implementing Selectable Code Content in Next.js\nDESCRIPTION: A React component that enables switching between different code implementations using slots. The component handles both TypeScript and JavaScript versions of API routes for Next.js App Router and Pages Router.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/shield/reference/nextjs/Errors.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport ErrorsAppJS from \"./ErrorsApp.js?raw\";\nimport ErrorsAppTS from \"./ErrorsApp.ts?raw\";\nimport ErrorsPagesJS from \"./ErrorsPages.js?raw\";\nimport ErrorsPagesTS from \"./ErrorsPages.ts?raw\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS (App)\" slotIdx=\"1\">\n    <Code code={ErrorsAppTS} lang=\"ts\" title=\"/app/api/arcjet/route.ts\" />\n  </div>\n  <div slot=\"TS (Pages)\" slotIdx=\"2\">\n    <Code code={ErrorsPagesTS} lang=\"ts\" title=\"/pages/api/hello.ts\" />\n  </div>\n  <div slot=\"JS (App)\" slotIdx=\"3\">\n    <Code code={ErrorsAppJS} lang=\"js\" title=\"/app/api/arcjet/route.js\" />\n  </div>\n  <div slot=\"JS (Pages)\" slotIdx=\"4\">\n    <Code code={ErrorsPagesJS} lang=\"js\" title=\"/pages/api/hello.ts\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Selectable Content for Decision Log in React\nDESCRIPTION: This code imports necessary components and raw TypeScript content to create a selectable content display. It uses the SelectableContent component with client-side loading to allow users to switch between programming language examples, specifically showing TypeScript code for a decision log.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/shield/reference/nestjs/DecisionLog.mdx#2025-04-12_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport DecisionLogTS from \"./DecisionLog.ts?raw\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={DecisionLogTS} lang=\"ts\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Running Documentation Commands with npm in Arcjet Docs\nDESCRIPTION: A list of npm commands used to install dependencies, run the local development server, build the production site, preview the build, and access Astro CLI functionality for the Arcjet documentation site.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/README.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm run preview\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm run astro ...\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm run astro -- --help\n```\n\n----------------------------------------\n\nTITLE: Selectable Content Component Implementation\nDESCRIPTION: JSX component implementation that provides switchable views between TypeScript and JavaScript code examples using slots.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/get-started/sveltekit/Step3.mdx#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\nCreate a new route at `/src/routes/api/arcjet/+server.ts` with the contents:\n\n<Code code={Step3TS} lang=\"ts\" title=\"/src/routes/api/arcjet/+server.ts\" />\n\n  </div>\n  <div slot=\"JS\" slotIdx=\"2\">\nCreate a new route at `/src/routes/api/arcjet/+server.js` with the contents:\n\n<Code code={Step3JS} lang=\"js\" title=\"/src/routes/api/arcjet/+server.js\" />\n\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Token Bucket Code in React\nDESCRIPTION: This snippet imports required components and raw code, then uses a SelectableContent component to render a TypeScript implementation of a Token Bucket algorithm. It demonstrates how to dynamically display code snippets in a React-based documentation system.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/rate-limiting/reference/nestjs/TokenBucket.mdx#2025-04-12_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport TokenBucket from \"./TokenBucket.ts?raw\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={TokenBucket} lang=\"ts\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Setting Arcjet Environment Variables in .env.local for Node.js\nDESCRIPTION: This snippet demonstrates how to configure Arcjet environment variables in a .env.local file for a Node.js project. It includes setting the development environment and the Arcjet API key.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/get-started/node-js/Step2.mdx#2025-04-12_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n# NODE_ENV is not set automatically, so tell Arcjet we're in dev\n# You can leave this unset in prod\nARCJET_ENV=development\n# Get your site key from https://app.arcjet.com\nARCJET_KEY=ajkey_yourkey\n```\n\n----------------------------------------\n\nTITLE: Rendering Selectable Arcjet Decision Logging Code Examples\nDESCRIPTION: This snippet uses the SelectableContent component to render different versions of Arcjet decision logging code examples, allowing users to switch between TypeScript and JavaScript implementations for both App Router and Pages Router.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/reference/nextjs/DecisionLog.mdx#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS (App)\" slotIdx=\"1\">\n    <Code code={DecisionLogAppTS} lang=\"ts\" title=\"/app/api/arcjet/route.ts\" />\n  </div>\n  <div slot=\"TS (Pages)\" slotIdx=\"2\">\n    <Code code={DecisionLogPagesTS} lang=\"ts\" title=\"/pages/api/hello.ts\" />\n  </div>\n  <div slot=\"JS (App)\" slotIdx=\"3\">\n    <Code code={DecisionLogAppJS} lang=\"js\" title=\"/app/api/arcjet/route.js\" />\n  </div>\n  <div slot=\"JS (Pages)\" slotIdx=\"4\">\n    <Code code={DecisionLogPagesJS} lang=\"js\" title=\"/pages/api/hello.ts\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Starting Bun Server with JavaScript\nDESCRIPTION: Command to start a Bun server with hot reloading enabled for JavaScript files. The server runs on localhost:3000 and includes an API endpoint for Arcjet integration.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/email-validation/quick-start/bun/Step4.mdx#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nbun run --hot index.js\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Raw Code Files for Language-Specific Hooks Display\nDESCRIPTION: This snippet imports necessary components and raw code files for displaying selectable TypeScript and JavaScript hook implementations. It uses dynamic imports for the raw code files and components from custom and Astro libraries.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/reference/sveltekit/Hooks.mdx#2025-04-12_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport HooksTS from \"./Hooks.ts?raw\";\nimport HooksJS from \"./Hooks.js?raw\";\n```\n\n----------------------------------------\n\nTITLE: Testing Arcjet Application with curl\nDESCRIPTION: This curl command is used to test the Arcjet application by making a request to the local server. It's expected to receive a 403 Forbidden response due to Arcjet's default bot protection settings.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/quick-start/nestjs/Step4.mdx#2025-04-12_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncurl -I http://localhost:3000\n```\n\n----------------------------------------\n\nTITLE: Customizing Arcjet Middleware Response in Next.js (TypeScript)\nDESCRIPTION: This snippet shows how to customize the Arcjet middleware response in a Next.js application using TypeScript. It returns a 403 Forbidden response if a hosting provider IP address is detected for the bot detection rule.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/reference/nextjs/Middleware.mdx#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextResponse } from \"next/server\";\nimport type { NextRequest } from \"next/server\";\nimport { Arcjet } from \"@arcjet/next\";\n\nconst arcjet = new Arcjet({\n  key: process.env.ARCJET_KEY,\n});\n\nexport default arcjet.middleware((request: NextRequest) => {\n  const { decision } = request.arcjet;\n\n  if (decision.rules[\"bot-detection\"]?.result === \"HOSTING_PROVIDER\") {\n    return NextResponse.json(\n      { error: \"Forbidden\" },\n      { status: 403 }\n    );\n  }\n\n  return NextResponse.next();\n});\n\nexport const config = {\n  matcher: [\"/((?!_next/static|_next/image|favicon.ico).*)\"],\n};\n\n```\n\n----------------------------------------\n\nTITLE: Handler Wrapping with Arcjet\nDESCRIPTION: Shows how to wrap existing handlers with Arcjet for simplified rate limiting implementation with default 429 responses.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/rate-limiting/reference/nextjs/Examples.mdx#2025-04-12_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n{WrapAppTS}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n{WrapPagesNodeTS}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n{WrapPagesEdgeTS}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{WrapAppJS}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{WrapPagesNodeJS}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{WrapPagesEdgeJS}\n```\n\n----------------------------------------\n\nTITLE: Executing JavaScript Node.js Script\nDESCRIPTION: This command runs a JavaScript file named index.js using the standard Node.js runtime without any additional tools.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/nosecone/quick-start/node-js/Step3.mdx#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnode index.js\n```\n\n----------------------------------------\n\nTITLE: Rendering Selectable Code Snippets with Next.js and Astro\nDESCRIPTION: This JSX code uses a custom SelectableContent component to render multiple code snippets that can be switched between. It utilizes the Astro Starlight Code component for syntax highlighting.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/reference/nextjs/PerRoute.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS (App)\" slotIdx=\"1\">\n    <Code code={PerRouteAppTS} lang=\"ts\" title=\"/app/api/arcjet/route.ts\" />\n  </div>\n  <div slot=\"TS (Pages)\" slotIdx=\"2\">\n    <Code code={PerRoutePagesTS} lang=\"ts\" title=\"/pages/api/hello.ts\" />\n  </div>\n  <div slot=\"JS (App)\" slotIdx=\"3\">\n    <Code code={PerRouteAppJS} lang=\"js\" title=\"/app/api/arcjet/route.js\" />\n  </div>\n  <div slot=\"JS (Pages)\" slotIdx=\"4\">\n    <Code code={PerRoutePagesJS} lang=\"js\" title=\"/pages/api/hello.ts\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Arcjet Shield Log Output in Dry Run Mode\nDESCRIPTION: The log output from Arcjet Shield showing a rule result with a DENY conclusion but an ALLOW final decision due to the rule being in dry run mode.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/shield/quick-start/nodejs/Step5.mdx#2025-04-12_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nRule Result ArcjetRuleResult {\n   ttl: 0,\n   state: 'DRY_RUN',\n   conclusion: 'DENY',\n   reason: ArcjetShieldReason { type: 'SHIELD', shieldTriggered: true }\n}\nConclusion ALLOW\n```\n\n----------------------------------------\n\nTITLE: Rendering Selectable Code Content in Astro\nDESCRIPTION: This snippet uses a custom SelectableContent component to render code blocks for both TypeScript and JavaScript versions of the implementation. It allows switching between languages and uses the Astro Code component for syntax highlighting.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/sensitive-info/quick-start/nestjs/Step3.mdx#2025-04-12_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n\n    <Code code={Step3TS} lang=\"ts\" title=\"index.ts\" />\n\n  </div>\n  <div slot=\"JS\" slotIdx=\"2\">\n\n    <Code code={Step3JS} lang=\"js\" title=\"index.js\" />\n\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies for Bot Protection Documentation\nDESCRIPTION: Import statements for components and raw code files needed to demonstrate bot protection configurations.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/shield/reference/sveltekit/PerRouteVsHooks.mdx#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport SlotByFramework from \"@/components/SlotByFramework\";\nimport Hooks from \"./Hooks.mdx\";\nimport PerRoute from \"./PerRoute.mdx\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport FilterRoutesJS from \"./FilterRoutes.js?raw\";\nimport FilterRoutesTS from \"./FilterRoutes.ts?raw\";\n```\n\n----------------------------------------\n\nTITLE: Rendering Selectable Code Content with Language Options\nDESCRIPTION: This JSX snippet creates a SelectableContent component with TypeScript and JavaScript options. It uses the Code component to display the imported raw code files with syntax highlighting.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/reference/sveltekit/IdentifiedBots.mdx#2025-04-12_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={IdentifiedBotsTS} lang=\"ts\" title=\"/src/hooks.server.ts\" />\n  </div>\n  <div slot=\"JS\" slotIdx=\"2\">\n    <Code code={IdentifiedBotsJS} lang=\"js\" title=\"/src/hooks.server.js\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Code Component in JSX\nDESCRIPTION: Imports and renders a selectable code display component that shows TypeScript code content. Uses Astro's Starlight Code component and a custom SelectableContent wrapper with client-side functionality.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/reference/deno/Errors.mdx#2025-04-12_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport ErrorsTS from \"./Errors.ts?raw\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={ErrorsTS} lang=\"ts\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Importing and Configuring SelectableContent Component\nDESCRIPTION: Sets up a component that renders code snippets with language selection functionality between TypeScript and JavaScript. Uses Astro's Code component for syntax highlighting and imports raw code files.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/email-validation/reference/bun/Errors.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport ErrorsJS from \"./Errors.js?raw\";\nimport ErrorsTS from \"./Errors.ts?raw\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={ErrorsTS} lang=\"ts\" />\n  </div>\n  <div slot=\"JS\" slotIdx=\"2\">\n    <Code code={ErrorsJS} lang=\"js\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Starting Application with Yarn\nDESCRIPTION: Command to start the application using Yarn package manager\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/signup-protection/quick-start/nestjs/Step4.mdx#2025-04-12_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nyarn run start\n```\n\n----------------------------------------\n\nTITLE: Importing and Displaying Code Snippets in a Selectable Content Component\nDESCRIPTION: This code imports a SelectableContent component and raw TypeScript files to display code examples in a selectable interface that allows switching between different frameworks or languages.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/signup-protection/quick-start/nestjs/Step3.mdx#2025-04-12_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport Step3AppModuleTS from \"./Step3AppModule.ts?raw\";\nimport Step3ControllerTS from \"./Step3Controller.ts?raw\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={Step3AppModuleTS} lang=\"ts\" title=\"src/signup/app.module.ts\" />\n  </div>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code\n      code={Step3ControllerTS}\n      lang=\"ts\"\n      title=\"src/signup/signup.controller.ts\"\n    />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Implementing SelectableContent component for package manager selection\nDESCRIPTION: JSX code that implements a SelectableContent component to display different installation commands based on the selected package manager. The component syncs user preferences with the key 'packageManager'.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/sensitive-info/quick-start/remix/Step1.mdx#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\n\n{/* prettier-ignore */}\n<SelectableContent client:load syncKey=\"packageManager\" frameworkSwitcher>\n<div slot=\"npm\" slotIdx=\"1\">\n\n```sh\nnpm i @arcjet/remix @arcjet/inspect\n```\n\n</div>\n<div slot=\"pnpm\" slotIdx=\"2\">\n\n```sh\npnpm add @arcjet/remix @arcjet/inspect\n```\n\n</div>\n<div slot=\"yarn\" slotIdx=\"3\">\n\n```sh\nyarn add @arcjet/remix @arcjet/inspect\n```\n\n</div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Raw Code Files for Arcjet Setup in Next.js\nDESCRIPTION: This snippet imports necessary components and raw code files for configuring Arcjet in different Next.js setups. It includes imports for both TypeScript and JavaScript versions of App and Pages router configurations.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/email-validation/quick-start/nextjs/Step3.mdx#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport Step3AppJS from \"./Step3App.js?raw\";\nimport Step3AppTS from \"./Step3App.ts?raw\";\nimport Step3PagesJS from \"./Step3Pages.js?raw\";\nimport Step3PagesTS from \"./Step3Pages.ts?raw\";\n```\n\n----------------------------------------\n\nTITLE: Importing and Configuring Selectable Content Component\nDESCRIPTION: Imports necessary components and raw code files, then sets up a SelectableContent component with language switching functionality for displaying decision log implementations.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/sensitive-info/reference/nextjs/DecisionLog.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport DecisionLogAppJS from \"./DecisionLogApp.js?raw\";\nimport DecisionLogAppTS from \"./DecisionLogApp.ts?raw\";\nimport DecisionLogPagesJS from \"./DecisionLogPages.js?raw\";\nimport DecisionLogPagesTS from \"./DecisionLogPages.ts?raw\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS (App)\" slotIdx=\"1\">\n    <Code code={DecisionLogAppTS} lang=\"ts\" title=\"/app/api/arcjet/route.ts\" />\n  </div>\n  <div slot=\"TS (Pages)\" slotIdx=\"2\">\n    <Code code={DecisionLogPagesTS} lang=\"ts\" title=\"/pages/api/hello.ts\" />\n  </div>\n  <div slot=\"JS (App)\" slotIdx=\"3\">\n    <Code code={DecisionLogAppJS} lang=\"js\" title=\"/app/api/arcjet/route.js\" />\n  </div>\n  <div slot=\"JS (Pages)\" slotIdx=\"4\">\n    <Code code={DecisionLogPagesJS} lang=\"js\" title=\"/pages/api/hello.ts\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Installing Arcjet Bun Packages\nDESCRIPTION: Command to install @arcjet/bun and @arcjet/inspect packages using the Bun package manager. These packages provide Arcjet functionality and inspection tools for Bun applications.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/get-started/bun/Step1.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbun add @arcjet/bun @arcjet/inspect\n```\n\n----------------------------------------\n\nTITLE: Rendering Selectable TypeScript and JavaScript Code Blocks\nDESCRIPTION: This snippet demonstrates the use of a custom SelectableContent component to display switchable TypeScript and JavaScript code blocks. It uses the imported raw code files and the Code component for syntax highlighting.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/nosecone/quick-start/bun/Step2.mdx#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={Step2TS} lang=\"ts\" title=\"index.ts\" ins={7} />\n  </div>\n  <div slot=\"JS\" slotIdx=\"2\">\n    <Code code={Step2JS} lang=\"js\" title=\"index.js\" ins={7} />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Receiving Arcjet Shield 403 Forbidden response in curl\nDESCRIPTION: This example shows the complete curl command and the resulting 403 Forbidden response when Arcjet Shield blocks a client after multiple suspicious requests. The response includes headers and a simple JSON error message.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/shield/quick-start/bun/Step5.mdx#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n# ...5 requests made previously\ncurl -v -H \"x-arcjet-suspicious: true\" http://localhost:3000\n...\n> GET / HTTP/2\n> Host: localhost:3000\n> User-Agent: curl/8.4.0\n> Accept: */*\n> x-arcjet-suspicious: true\n>\n< HTTP/2 403\n< content-type: application/json; charset=utf-8\n< date: Tue, 09 Jan 2024 13:43:04 GMT\n< etag: \"7a3v9j8es220\"\n< vary: Accept-Encoding\n< content-length: 72\n<\n* Connection #0 to host localhost left intact\n{\"message\":\"Forbidden\"}%\n```\n\n----------------------------------------\n\nTITLE: Using Deno.serve API Reference\nDESCRIPTION: Code reference showing the minimum required version (1.46+) for using the Deno.serve API\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/get-started/deno/Requirements.mdx#2025-04-12_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nDeno.serve\n```\n\n----------------------------------------\n\nTITLE: Using SelectableContent Component for Package Manager Commands\nDESCRIPTION: This JSX snippet uses the SelectableContent component to create selectable content for different package manager installation commands. It includes slots for npm, pnpm, and yarn.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/quick-start/sveltekit/Step1.mdx#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<SelectableContent client:load syncKey=\"packageManager\" frameworkSwitcher>\n<div slot=\"npm\" slotIdx=\"1\">\n```sh\nnpm i @arcjet/sveltekit @arcjet/inspect\n```\n</div>\n<div slot=\"pnpm\" slotIdx=\"2\">\n```sh\npnpm add @arcjet/sveltekit @arcjet/inspect\n```\n</div>\n<div slot=\"yarn\" slotIdx=\"3\">\n```sh\nyarn add @arcjet/sveltekit @arcjet/inspect\n```\n</div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Starting Arcjet Server in TypeScript\nDESCRIPTION: Command to start a TypeScript server using tsx with environment variables loaded from a .env.local file. This requires Node 20+ or a package like dotenv for older Node versions.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/signup-protection/quick-start/nodejs/Step4.mdx#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx tsx --env-file .env.local index.ts\n```\n\n----------------------------------------\n\nTITLE: Implementing Language Toggle Component with Astro\nDESCRIPTION: Creates a language selection interface using Astro's Starlight Code component and a custom SelectableContent component. The component imports raw TypeScript and JavaScript files and allows switching between them using client-side functionality.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/reference/nodejs/AllowingBots.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Code } from \"@astrojs/starlight/components\";\nimport SelectableContent from \"@/components/SelectableContent\";\nimport AllowingBotsTS from \"./AllowingBots.ts?raw\";\nimport AllowingBotsJS from \"./AllowingBots.js?raw\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={AllowingBotsTS} lang=\"ts\" />\n  </div>\n  <div slot=\"JS\" slotIdx=\"2\">\n    <Code code={AllowingBotsJS} lang=\"js\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Default X-Frame-Options Configuration\nDESCRIPTION: Default configuration object for legacy X-Frame-Options header that helps prevent clickjacking attacks.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/nosecone/reference.mdx#2025-04-12_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  action: \"sameorigin\",\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Raw Code for Starlight Documentation\nDESCRIPTION: This snippet imports the SelectableContent component, Code component from Starlight, and raw code snippets for different versions of DecisionLog examples.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/shield/reference/nextjs/DecisionLog.mdx#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport DecisionLogAppJS from \"./DecisionLogApp.js?raw\";\nimport DecisionLogAppTS from \"./DecisionLogApp.ts?raw\";\nimport DecisionLogPagesJS from \"./DecisionLogPages.js?raw\";\nimport DecisionLogPagesTS from \"./DecisionLogPages.ts?raw\";\n```\n\n----------------------------------------\n\nTITLE: Implementing Language Selection for Error Documentation in React/JSX\nDESCRIPTION: This code creates a selectable content component that allows users to toggle between TypeScript and JavaScript versions of error-handling code. It imports raw code files and renders them as syntax-highlighted code blocks based on user preference.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/signup-protection/reference/remix/Errors.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport ErrorsJS from \"./Errors.js?raw\";\nimport ErrorsTS from \"./Errors.ts?raw\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={ErrorsTS} lang=\"ts\" />\n  </div>\n  <div slot=\"JS\" slotIdx=\"2\">\n    <Code code={ErrorsJS} lang=\"js\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Rendering Framework-Specific Content for Middleware Shield Configuration in Next.js\nDESCRIPTION: This code snippet uses the SlotByFramework component to render Next.js-specific content for middleware Shield configuration. It allows for dynamic content selection based on the framework being used.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/shield/reference/nextjs/PerRouteVsMiddleware.mdx#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<SlotByFramework client:load>\n  <MiddlewareNextJs slot=\"next-js\" />\n</SlotByFramework>\n```\n\n----------------------------------------\n\nTITLE: Importing Arcjet Code Samples in SvelteKit Documentation\nDESCRIPTION: This code imports TypeScript and JavaScript code samples for Arcjet integration, along with UI components for displaying selectable content with language options.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/sensitive-info/quick-start/sveltekit/Step3.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Step3TS from \"./Step3.ts?raw\";\nimport Step3JS from \"./Step3.js?raw\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport SelectableContent from \"@/components/SelectableContent\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n\nCreate a new API route at `/src/routes/api/arcjet/+server.ts`:\n\n<Code code={Step3TS} lang=\"ts\" title=\"/src/routes/api/arcjet/+server.ts\" />\n\n  </div>\n  <div slot=\"JS\" slotIdx=\"2\">\n\nCreate a new API route at `/src/routes/api/arcjet/+server.js`:\n\n<Code code={Step3JS} lang=\"js\" title=\"/src/routes/api/arcjet/+server.js\" />\n\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Selectable Code Content in JSX\nDESCRIPTION: This snippet imports required components and raw code, then renders a SelectableContent component with a TypeScript code snippet. It allows for client-side interactivity and language selection.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/reference/deno/DenyingBots.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Code } from \"@astrojs/starlight/components\";\nimport SelectableContent from \"@/components/SelectableContent\";\nimport DenyingBotsTS from \"./DenyingBots.ts?raw\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={DenyingBotsTS} lang=\"ts\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Starting Arcjet App with NPM\nDESCRIPTION: Command to start the Arcjet application development server using NPM.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/rate-limiting/quick-start/remix/Step4.mdx#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Import Configuration for Arcjet Documentation\nDESCRIPTION: Import statements for handling raw code files and components used in the documentation setup. Includes imports for TypeScript and JavaScript examples along with documentation components.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/quick-start/remix/Step3.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport Step3TS from \"./Step3.tsx?raw\";\nimport Step3JS from \"./Step3.jsx?raw\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport SelectableContent from \"@/components/SelectableContent\";\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Selectable Code Display\nDESCRIPTION: Sets up a component to display code content with language selection functionality. Uses Astro's Starlight Code component and a custom SelectableContent component with TypeScript support.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/rate-limiting/reference/nestjs/FixedWindow.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport FixedWindow from \"./FixedWindow.ts?raw\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={FixedWindow} lang=\"ts\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Configuring Arcjet API Key in .env File\nDESCRIPTION: This snippet demonstrates how to add an Arcjet API key to a .env file in the project root. The .env file is used to store environment variables, keeping sensitive information like API keys separate from the codebase.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/get-started/sveltekit/Step2.mdx#2025-04-12_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nARCJET_KEY=ajkey_yourkey\n```\n\n----------------------------------------\n\nTITLE: Rendering Selectable TypeScript and JavaScript Code Blocks\nDESCRIPTION: This snippet uses a SelectableContent component to render code blocks for both TypeScript and JavaScript implementations. It allows users to switch between language versions.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/sensitive-info/reference/nodejs/CustomDetect.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={CustomDetectTS} lang=\"ts\" />\n  </div>\n  <div slot=\"JS\" slotIdx=\"2\">\n    <Code code={CustomDetectJS} lang=\"js\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Arcjet Server Route Configuration\nDESCRIPTION: Server-side route configuration for Arcjet that includes imports and selectable content implementation. Shows integration with Astro's Starlight components and custom SelectableContent component.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/reference/sveltekit/DecisionLog.mdx#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport DecisionLogJS from \"./DecisionLog.js?raw\";\nimport DecisionLogTS from \"./DecisionLog.ts?raw\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code\n      code={DecisionLogTS}\n      lang=\"ts\"\n      title=\"/src/routes/api/arcjet/+server.ts\"\n    />\n  </div>\n  <div slot=\"JS\" slotIdx=\"2\">\n    <Code\n      code={DecisionLogJS}\n      lang=\"js\"\n      title=\"/src/routes/api/arcjet/+server.js\"\n    />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Code Display Component\nDESCRIPTION: Component implementation that uses SelectableContent to toggle between TypeScript and JavaScript code displays using Astro's Code component.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/rate-limiting/reference/bun/TokenBucketRequest.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport TokenBucketRequestTS from \"./TokenBucketRequest.js?raw\";\nimport TokenBucketRequestJS from \"./TokenBucketRequest.ts?raw\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={TokenBucketRequestTS} lang=\"ts\" />\n  </div>\n  <div slot=\"JS\" slotIdx=\"2\">\n    <Code code={TokenBucketRequestJS} lang=\"js\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Language-Switchable Code Component\nDESCRIPTION: Implementation of a component that enables switching between TypeScript and JavaScript code examples using SelectableContent and Astro's Code component. Uses raw imports for code content and client-side interactivity.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/reference/nodejs/Errors.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport ErrorsJS from \"./Errors.js?raw\";\nimport ErrorsTS from \"./Errors.ts?raw\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={ErrorsTS} lang=\"ts\" />\n  </div>\n  <div slot=\"JS\" slotIdx=\"2\">\n    <Code code={ErrorsJS} lang=\"js\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Testing Rate Limit with curl\nDESCRIPTION: Command to test the rate limiting functionality of the Arcjet app using curl. This should be run after waiting for 10 seconds to allow the cache to expire.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/get-started/sveltekit/Step4.mdx#2025-04-12_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncurl -v http://localhost:5173/api/arcjet\n```\n\n----------------------------------------\n\nTITLE: Installing Bun Runtime\nDESCRIPTION: Command to install Bun JavaScript runtime globally using npm\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/get-started/bun-hono/Step0.mdx#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install -g bun\n```\n\n----------------------------------------\n\nTITLE: Starting TypeScript Application with Environment File\nDESCRIPTION: Command to start a TypeScript application using tsx with environment variables loaded from .env.local file. Requires Node.js and tsx package.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/get-started/node-js/Step4.mdx#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx tsx --env-file .env.local index.ts\n```\n\n----------------------------------------\n\nTITLE: Rendering SelectableContent Component with Code Examples\nDESCRIPTION: JSX markup for rendering selectable code examples with TypeScript and JavaScript variants using the SelectableContent component.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/rate-limiting/reference/nextjs/Errors.mdx#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS (App)\" slotIdx=\"1\">\n    <Code code={ErrorsAppTS} lang=\"ts\" title=\"/app/api/arcjet/route.ts\" />\n  </div>\n  <div slot=\"TS (Pages)\" slotIdx=\"2\">\n    <Code code={ErrorsPagesTS} lang=\"ts\" title=\"/pages/api/hello.ts\" />\n  </div>\n  <div slot=\"JS (App)\" slotIdx=\"3\">\n    <Code code={ErrorsAppJS} lang=\"js\" title=\"/app/api/arcjet/route.js\" />\n  </div>\n  <div slot=\"JS (Pages)\" slotIdx=\"4\">\n    <Code code={ErrorsPagesJS} lang=\"js\" title=\"/pages/api/hello.ts\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering TokenBucket Component with SelectableContent in React\nDESCRIPTION: This snippet imports required components and raw code, then uses SelectableContent to render the TokenBucket code. It utilizes client-side loading and language synchronization.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/rate-limiting/reference/bun/TokenBucket.mdx#2025-04-12_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport TokenBucket from \"./TokenBucket.ts?raw\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={TokenBucket} lang=\"ts\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Starting a Server with JavaScript and Environment Variables\nDESCRIPTION: Command to start a JavaScript server using Node.js with environment variables loaded from a .env.local file. This approach is for Node 20+ which natively supports the --env-file flag.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/shield/quick-start/nodejs/Step4.mdx#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnode --env-file .env.local index.js\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Selectable Code Content with Astro\nDESCRIPTION: Component implementation that uses SelectableContent to display code examples with language selection. It imports raw TypeScript code and renders it using Astro's Starlight Code component with language-specific slots.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/email-validation/reference/nestjs/Errors.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport ErrorsTS from \"./Errors.ts?raw\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={ErrorsTS} lang=\"ts\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Raw Code Files in React\nDESCRIPTION: This snippet imports necessary components and raw code files for displaying selectable content. It uses dynamic imports for the code files and imports components from specific paths.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/email-validation/reference/nodejs/Errors.mdx#2025-04-12_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport ErrorsJS from \"./Errors.js?raw\";\nimport ErrorsTS from \"./Errors.ts?raw\";\n```\n\n----------------------------------------\n\nTITLE: Rendering Selectable Code Snippets using SelectableContent in JSX\nDESCRIPTION: This code snippet shows how to use the SelectableContent component to display switchable code blocks for TypeScript and JavaScript. It imports raw code files and uses the Code component from Starlight to render the code.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/reference/remix/Filtering.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport FilteringTS from \"./Filtering.ts?raw\";\nimport FilteringJS from \"./Filtering.js?raw\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={FilteringTS} lang=\"ts\" />\n  </div>\n  <div slot=\"JS\" slotIdx=\"2\">\n    <Code code={FilteringJS} lang=\"js\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Language-Switchable Code Display Component in React\nDESCRIPTION: This React component creates a tabbed interface that lets users toggle between TypeScript and JavaScript versions of Arcjet decision logs. It imports raw code files and renders them using a Code component from Starlight, with a synchronized language selector.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/shield/reference/sveltekit/DecisionLog.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport DecisionLogJS from \"./DecisionLog.js?raw\";\nimport DecisionLogTS from \"./DecisionLog.ts?raw\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code\n      code={DecisionLogTS}\n      lang=\"ts\"\n      title=\"/src/routes/api/arcjet/+server.ts\"\n    />\n  </div>\n  <div slot=\"JS\" slotIdx=\"2\">\n    <Code\n      code={DecisionLogJS}\n      lang=\"js\"\n      title=\"/src/routes/api/arcjet/+server.js\"\n    />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Starting Arcjet Application with Package Managers\nDESCRIPTION: These commands start the Arcjet application in development mode using different package managers. The specific command depends on the package manager being used (npm, pnpm, or yarn).\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/signup-protection/quick-start/remix/Step4.mdx#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm run dev\n```\n\nLANGUAGE: sh\nCODE:\n```\npnpm run dev\n```\n\nLANGUAGE: sh\nCODE:\n```\nyarn run dev\n```\n\n----------------------------------------\n\nTITLE: Configuring SvelteKit with Nosecone\nDESCRIPTION: Example of configuring SvelteKit's svelte.config.js file with Nosecone for Content Security Policy.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/nosecone/reference.mdx#2025-04-12_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport adapter from \"@sveltejs/adapter-auto\";\nimport { vitePreprocess } from \"@sveltejs/kit/vite\";\nimport * as nosecone from \"@nosecone/sveltekit\";\n\n/** @type {import('@sveltejs/kit').Config} */\nconst config = {\n  preprocess: vitePreprocess(),\n\n  kit: {\n    adapter: adapter(),\n    csp: nosecone.csp(),\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Installing Arcjet Packages with Yarn\nDESCRIPTION: This command installs the @arcjet/node and @arcjet/inspect packages using Yarn package manager. It's displayed when the user selects Yarn as their package manager.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/get-started/node-js-express/Step1.mdx#2025-04-12_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @arcjet/node @arcjet/inspect\n```\n\n----------------------------------------\n\nTITLE: Setting Arcjet API Key in .env.local File\nDESCRIPTION: This snippet shows how to add the Arcjet API key to a .env.local file in the project root. The key is obtained from the Arcjet dashboard and is used to authenticate API requests.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/rate-limiting/quick-start/remix/Step2.mdx#2025-04-12_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n# Get your site key from https://app.arcjet.com\nARCJET_KEY=ajkey_yourkey\n```\n\n----------------------------------------\n\nTITLE: Implementing Language Selection Component with Astro Starlight\nDESCRIPTION: Sets up a selectable content interface that synchronizes language selection between TypeScript and JavaScript code examples. Uses Astro's Starlight components and raw code imports for rendering.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/rate-limiting/quick-start/nodejs/Step3.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Step3TS from \"./Step3.ts?raw\";\nimport Step3JS from \"./Step3.js?raw\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport SelectableContent from \"@/components/SelectableContent\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n\n    <Code code={Step3TS} lang=\"ts\" title=\"index.ts\" />\n\n  </div>\n  <div slot=\"JS\" slotIdx=\"2\">\n\n    <Code code={Step3JS} lang=\"js\" title=\"index.js\" />\n\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Starting Next.js Dev Server with PNPM\nDESCRIPTION: Command to start Next.js development server using pnpm package manager.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/rate-limiting/quick-start/nextjs/Step4.mdx#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Raw Code for Selectable Content in JSX\nDESCRIPTION: This snippet imports the required components and raw code files for creating selectable content. It uses dynamic imports to load the raw content of ErrorsJS and ErrorsTS files.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/email-validation/reference/sveltekit/Errors.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport ErrorsJS from \"./Errors.js?raw\";\nimport ErrorsTS from \"./Errors.ts?raw\";\n```\n\n----------------------------------------\n\nTITLE: Setting up Arcjet Environment Variables in .env.local\nDESCRIPTION: Configuration snippet for setting up Arcjet environment variables in development. Includes settings for development environment flag and API key authentication. Required for proper IP address handling in development mode.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/get-started/node-js-express/Step2.mdx#2025-04-12_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n# NODE_ENV is not set automatically, so tell Arcjet we're in dev\n# You can leave this unset in prod\nARCJET_ENV=development\n# Get your site key from https://app.arcjet.com\nARCJET_KEY=ajkey_yourkey\n```\n\n----------------------------------------\n\nTITLE: Configuring Arcjet with Bun.serve() in TypeScript\nDESCRIPTION: This code snippet shows an alternative way to set up Arcjet using Bun.serve() instead of the default export object syntax. It imports necessary modules, creates an Arcjet client, and defines a server configuration using Bun.serve().\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/get-started/bun/Step3.mdx#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport Step3ServeTS from \"./BunServe.ts?raw\";\n```\n\n----------------------------------------\n\nTITLE: Testing Arcjet API with Curl\nDESCRIPTION: Example curl command to test the Arcjet application by making a POST request with an email parameter to the local development server.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/email-validation/quick-start/remix/Step4.mdx#2025-04-12_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST -d 'email=test@arcjet.io' http://localhost:5173/arcjet.data?index\n```\n\n----------------------------------------\n\nTITLE: Configuring Arcjet Environment Variables in INI Format\nDESCRIPTION: Sets up the required environment variables for Arcjet in a .env.local file. This includes specifying the development environment and providing the Arcjet key obtained from the Arcjet dashboard.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/quick-start/bun/Step2.mdx#2025-04-12_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n# NODE_ENV is not set automatically, so tell Arcjet we're in dev\n# You can leave this unset in prod\nARCJET_ENV=development\n# Get your site key from https://app.arcjet.com\nARCJET_KEY=ajkey_yourkey\n```\n\n----------------------------------------\n\nTITLE: Rendering Selectable Code Content with Language Toggle using JSX\nDESCRIPTION: This JSX snippet sets up a SelectableContent component with slots for TypeScript and JavaScript code. It uses the Code component to display the imported raw code files, allowing users to switch between languages.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/shield/reference/nodejs/DecisionLog.mdx#2025-04-12_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={DecisionLogTS} lang=\"ts\" />\n  </div>\n  <div slot=\"JS\" slotIdx=\"2\">\n    <Code code={DecisionLogJS} lang=\"js\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Rendering Selectable Arcjet Guard Code for TypeScript and JavaScript\nDESCRIPTION: This snippet uses a SelectableContent component to display the Arcjet guard implementation code for both TypeScript and JavaScript. It highlights the ARCJET_KEY in the code.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/shield/quick-start/nestjs/Step3.mdx#2025-04-12_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={Step3TS} lang=\"ts\" title=\"src/main.ts\" mark={[\"ARCJET_KEY\"]} />\n  </div>\n  <div slot=\"JS\" slotIdx=\"2\">\n    <Code code={Step3JS} lang=\"js\" title=\"src/main.ts\" mark={[\"ARCJET_KEY\"]} />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Raw Code Files for Selectable Content in Astro\nDESCRIPTION: This snippet imports the required components and raw code files for rendering selectable content. It uses Astro's import syntax to load the SelectableContent component, Code component from Starlight, and raw content of ErrorsJS and ErrorsTS files.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/signup-protection/reference/bun/Errors.mdx#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport ErrorsJS from \"./Errors.js?raw\";\nimport ErrorsTS from \"./Errors.ts?raw\";\n```\n\n----------------------------------------\n\nTITLE: Importing and Configuring Selectable Content for Middleware Display\nDESCRIPTION: This snippet imports required components and sets up a SelectableContent component to display middleware configuration. It uses a raw import of a MiddlewareMatcher file and configures the component for TypeScript display.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/rate-limiting/reference/nextjs/MiddlewareMatcher.mdx#2025-04-12_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport MiddlewareMatcher from \"./MiddlewareMatcher.js?raw\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={MiddlewareMatcher} lang=\"ts\" title=\"/middleware.ts\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Raw Code Files in React\nDESCRIPTION: This snippet imports necessary components and raw code files for rendering selectable code content. It uses dynamic imports for TypeScript and JavaScript versions of the code.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/reference/sveltekit/IdentifiedBots.mdx#2025-04-12_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport IdentifiedBotsTS from \"./IdentifiedBots.ts?raw\";\nimport IdentifiedBotsJS from \"./IdentifiedBots.js?raw\";\n```\n\n----------------------------------------\n\nTITLE: Importing Next.js Components for Bot Protection Documentation\nDESCRIPTION: Import statements for React components used to display selectable content and framework-specific documentation for Arcjet bot protection configuration.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/sensitive-info/reference/nextjs/PerRouteVsMiddleware.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport SlotByFramework from \"@/components/SlotByFramework\";\nimport MiddlewareNextJs from \"./Middleware.mdx\";\nimport PerRouteNextJs from \"./PerRoute.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Rendering Selectable TypeScript and JavaScript Code Blocks\nDESCRIPTION: This snippet renders a SelectableContent component with Code blocks for TypeScript and JavaScript implementations of Decision Log Allow. It allows users to switch between language versions.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/email-validation/reference/nodejs/DecisionLogAllow.mdx#2025-04-12_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={DecisionLogAllowTS} lang=\"ts\" />\n  </div>\n  <div slot=\"JS\" slotIdx=\"2\">\n    <Code code={DecisionLogAllowJS} lang=\"js\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Testing Rate Limit with cURL\nDESCRIPTION: Command to test the rate limiting functionality by making HTTP requests to the local server.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/rate-limiting/quick-start/nestjs/Step4.mdx#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncurl http://localhost:3000\n```\n\n----------------------------------------\n\nTITLE: Cross-Origin-Opener-Policy Default Configuration\nDESCRIPTION: Default configuration for Cross-Origin-Opener-Policy header setting same-origin policy.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/nosecone/reference.mdx#2025-04-12_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  policy: \"same-origin\",\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Code Component with TypeScript Support\nDESCRIPTION: Component setup that imports SelectableContent and Code components from Astro/Starlight, then renders TypeScript code with language selection functionality. Uses raw TypeScript file import and client-side hydration.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/rate-limiting/reference/bun/FixedWindow.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport FixedWindow from \"./FixedWindow.ts?raw\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={FixedWindow} lang=\"ts\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Importing Arcjet Guard Code Snippets in TypeScript and JavaScript\nDESCRIPTION: This snippet imports raw code content for Step3 in both TypeScript and JavaScript formats, along with necessary components for rendering selectable content.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/shield/quick-start/nestjs/Step3.mdx#2025-04-12_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport Step3TS from \"./Step3.ts?raw\";\nimport Step3JS from \"./Step3.js?raw\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport SelectableContent from \"@/components/SelectableContent\";\n```\n\n----------------------------------------\n\nTITLE: Implementing Language Selection with SelectableContent in React/JSX\nDESCRIPTION: This snippet creates a selectable content component that allows users to toggle between TypeScript and JavaScript code examples. It imports raw code files and uses the Starlight Code component to display syntax-highlighted code.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/sensitive-info/reference/sveltekit/Errors.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport ErrorsJS from \"./Errors.js?raw\";\nimport ErrorsTS from \"./Errors.ts?raw\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={ErrorsTS} lang=\"ts\" />\n  </div>\n  <div slot=\"JS\" slotIdx=\"2\">\n    <Code code={ErrorsJS} lang=\"js\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Starting an Application with yarn\nDESCRIPTION: Command to start an application using yarn package manager. This runs the start script defined in the project's package.json file.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/shield/quick-start/nestjs/Step4.mdx#2025-04-12_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nyarn run start\n```\n\n----------------------------------------\n\nTITLE: Starting Dev Server with PNPM\nDESCRIPTION: Command to start the development server using PNPM package manager.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/shield/quick-start/remix/Step4.mdx#2025-04-12_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Implementing Selectable Code Display with AstroJS\nDESCRIPTION: Creates a selectable content component that toggles between TypeScript and JavaScript code examples using AstroJS's Starlight components. The component imports raw code files and displays them with proper syntax highlighting based on user selection.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/email-validation/reference/sveltekit/DecisionLogAllow.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport DecisionLogAllowJS from \"./DecisionLogAllow.js?raw\";\nimport DecisionLogAllowTS from \"./DecisionLogAllow.ts?raw\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code\n      code={DecisionLogAllowTS}\n      lang=\"ts\"\n      title=\"/src/routes/api/arcjet/+server.ts\"\n    />\n  </div>\n  <div slot=\"JS\" slotIdx=\"2\">\n    <Code\n      code={DecisionLogAllowJS}\n      lang=\"js\"\n      title=\"/src/routes/api/arcjet/+server.js\"\n    />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Setting Up Arcjet Environment Variables in .env.local\nDESCRIPTION: Configuration for Arcjet environment variables including development environment setting and API key. The ARCJET_ENV setting is specifically required for development to handle local IP addresses, while ARCJET_KEY is used for authentication.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/rate-limiting/quick-start/nestjs/Step2.mdx#2025-04-12_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n# NODE_ENV is not set automatically, so tell Arcjet we're in dev\n# You can leave this unset in prod\nARCJET_ENV=development\n# Get your site key from https://app.arcjet.com\nARCJET_KEY=ajkey_yourkey\n```\n\n----------------------------------------\n\nTITLE: Adding Ad Hoc Rules in SvelteKit with Arcjet\nDESCRIPTION: Demonstrates how to add custom protection rules to Arcjet client using withRule function in a SvelteKit server route. Shows implementation for both TypeScript and JavaScript.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/reference/sveltekit.mdx#2025-04-12_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nWithRuleTS\n```\n\nLANGUAGE: javascript\nCODE:\n```\nWithRuleJS\n```\n\n----------------------------------------\n\nTITLE: Starting Bun Server with TypeScript\nDESCRIPTION: Command to start a Bun server with hot reloading enabled for TypeScript files. The server runs on localhost:3000 and includes an API endpoint for Arcjet integration.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/email-validation/quick-start/bun/Step4.mdx#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nbun run --hot index.ts\n```\n\n----------------------------------------\n\nTITLE: Installing @nosecone/sveltekit with npm\nDESCRIPTION: Command to install the @nosecone/sveltekit package using npm package manager.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/nosecone/quick-start/sveltekit/Step1.mdx#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i @nosecone/sveltekit\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Raw Code Files for Arcjet Documentation\nDESCRIPTION: This snippet imports the required components and raw code files for rendering selectable code snippets in the Arcjet documentation. It uses dynamic imports to load different versions of the code examples.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/rate-limiting/reference/nextjs/DecisionLog.mdx#2025-04-12_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport DecisionLogAppJS from \"./DecisionLogApp.js?raw\";\nimport DecisionLogAppTS from \"./DecisionLogApp.ts?raw\";\nimport DecisionLogPagesJS from \"./DecisionLogPages.js?raw\";\nimport DecisionLogPagesTS from \"./DecisionLogPages.ts?raw\";\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering TypeScript Code with SelectableContent Component\nDESCRIPTION: This code imports a raw TypeScript file and displays it within a SelectableContent component, which allows for framework switching. The code uses Astro's Starlight Code component for syntax highlighting.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/sensitive-info/reference/nestjs/CustomDetect.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport CustomDetectTS from \"./CustomDetect.ts?raw\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={CustomDetectTS} lang=\"ts\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Rendering Framework-Specific Error Components in JSX\nDESCRIPTION: Component structure for displaying framework-specific error handling documentation using a SlotByFramework component system. Includes slots for Bun, NestJS, NextJS, NodeJS, Remix, and SvelteKit implementations.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/rate-limiting/reference.mdx#2025-04-12_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<SlotByFramework client:load>\n  <ErrorsBun slot=\"bun\" />\n  <ErrorsNestJs slot=\"nest-js\" />\n  <ErrorsNextJs slot=\"next-js\" />\n  <ErrorsNodeJs slot=\"node-js\" />\n  <ErrorsRemix slot=\"remix\" />\n  <ErrorsSvelteKit slot=\"sveltekit\" />\n</SlotByFramework>\n```\n\n----------------------------------------\n\nTITLE: Installing Arcjet Packages with npm\nDESCRIPTION: This command installs the @arcjet/node and @arcjet/inspect packages using npm (Node Package Manager). It's part of a selectable content block for npm users.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/get-started/node-js/Step1.mdx#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm i @arcjet/node @arcjet/inspect\n```\n\n----------------------------------------\n\nTITLE: Importing Required Components in TypeScript\nDESCRIPTION: Import statements for various components and modules needed for Arcjet documentation, including SelectableContent, SlotByFramework, and raw file imports.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/sensitive-info/reference/sveltekit/PerRouteVsHooks.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport SlotByFramework from \"@/components/SlotByFramework\";\nimport Hooks from \"./Hooks.mdx\";\nimport PerRoute from \"./PerRoute.mdx\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport HookMatcher from \"./HookMatcher.ts?raw\";\n```\n\n----------------------------------------\n\nTITLE: Importing Configuration Components\nDESCRIPTION: Import statements for code display components and raw configuration file\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/nosecone/reference/sveltekit/Config.mdx#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Code } from \"@astrojs/starlight/components\";\n\nimport Config from \"./Config.js?raw\";\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server with Package Managers\nDESCRIPTION: Commands to start the development server using different Node.js package managers (npm, pnpm, yarn).\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/get-started/node-js-hono/Step4.mdx#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm run dev\n```\n\nLANGUAGE: sh\nCODE:\n```\npnpm run dev\n```\n\nLANGUAGE: sh\nCODE:\n```\nyarn run dev\n```\n\n----------------------------------------\n\nTITLE: Installing Nosecone Next.js Adapter\nDESCRIPTION: Commands to install the @nosecone/next package using different package managers.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/nosecone/reference.mdx#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i @nosecone/next\n```\n\nLANGUAGE: sh\nCODE:\n```\npnpm add @nosecone/next\n```\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @nosecone/next\n```\n\n----------------------------------------\n\nTITLE: Importing and Configuring Selectable Content Components\nDESCRIPTION: Component setup that imports and configures a selectable content interface with support for both TypeScript and JavaScript implementations. Uses raw imports for code examples and Astro Starlight's Code component for syntax highlighting.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/reference/nextjs/Filtering.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport FilteringAppJS from \"./FilteringApp.js?raw\";\nimport FilteringAppTS from \"./FilteringApp.ts?raw\";\nimport FilteringPagesJS from \"./FilteringPages.js?raw\";\nimport FilteringPagesTS from \"./FilteringPages.ts?raw\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS (App)\" slotIdx=\"1\">\n    <Code code={FilteringAppTS} lang=\"ts\" title=\"/app/api/arcjet/route.ts\" />\n  </div>\n  <div slot=\"TS (Pages)\" slotIdx=\"2\">\n    <Code code={FilteringPagesTS} lang=\"ts\" title=\"/pages/api/hello.ts\" />\n  </div>\n  <div slot=\"JS (App)\" slotIdx=\"3\">\n    <Code code={FilteringAppJS} lang=\"js\" title=\"/app/api/arcjet/route.js\" />\n  </div>\n  <div slot=\"JS (Pages)\" slotIdx=\"4\">\n    <Code code={FilteringPagesJS} lang=\"js\" title=\"/pages/api/hello.ts\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Starlight Code Components with TypeScript\nDESCRIPTION: Imports necessary components from Starlight and sets up a selectable content area for displaying TypeScript code. Uses a custom SelectableContent component with client-side interactivity.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/reference/nestjs/DenyingBots.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Code } from \"@astrojs/starlight/components\";\nimport SelectableContent from \"@/components/SelectableContent\";\nimport DenyingBotsTS from \"./DenyingBots.ts?raw\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={DenyingBotsTS} lang=\"ts\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Import Declarations for Arcjet Documentation Components\nDESCRIPTION: Import statements for documentation components and raw code files used in the documentation interface.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/sensitive-info/reference/nextjs/Middleware.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport MiddlewareTS from \"./Middleware.ts?raw\";\nimport MiddlewareJS from \"./Middleware.js?raw\";\nimport MiddlewareMatcher from \"./MiddlewareMatcher.ts?raw\";\n```\n\n----------------------------------------\n\nTITLE: Testing Rate Limit with cURL\nDESCRIPTION: This curl command is used to test the rate limiting functionality of the application. It sends a verbose request to localhost:3000 and is expected to receive a 403 response due to being identified as a bot.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/get-started/node-js-express/Step4.mdx#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncurl -v http://localhost:3000\n```\n\n----------------------------------------\n\nTITLE: Installing @arcjet/nest with pnpm\nDESCRIPTION: This command installs the @arcjet/nest package using pnpm (Performant NPM).\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/rate-limiting/quick-start/nestjs/Step1.mdx#2025-04-12_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npnpm add @arcjet/nest\n```\n\n----------------------------------------\n\nTITLE: Rendering Selectable Code Snippets with SelectableContent in JSX\nDESCRIPTION: This snippet uses the SelectableContent component to render multiple code snippets for bot denial implementations. It provides options for TypeScript and JavaScript in both App Router and Pages Router configurations of Next.js.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/reference/nextjs/DenyingBots.mdx#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS (App)\" slotIdx=\"1\">\n    <Code code={DenyingBotsAppTS} lang=\"ts\" title=\"/app/api/arcjet/route.ts\" />\n  </div>\n  <div slot=\"TS (Pages)\" slotIdx=\"2\">\n    <Code code={DenyingBotsPagesTS} lang=\"ts\" title=\"/pages/api/hello.ts\" />\n  </div>\n  <div slot=\"JS (App)\" slotIdx=\"3\">\n    <Code code={DenyingBotsAppJS} lang=\"js\" title=\"/app/api/arcjet/route.js\" />\n  </div>\n  <div slot=\"JS (Pages)\" slotIdx=\"4\">\n    <Code code={DenyingBotsPagesJS} lang=\"js\" title=\"/pages/api/hello.ts\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Starting Arcjet Application with yarn\nDESCRIPTION: This command starts the Arcjet application using yarn as the package manager.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/email-validation/quick-start/nestjs/Step4.mdx#2025-04-12_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nyarn run start\n```\n\n----------------------------------------\n\nTITLE: Installing Arcjet with npm\nDESCRIPTION: Installs @arcjet/sveltekit and @arcjet/inspect packages using npm package manager\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/shield/quick-start/sveltekit/Step1.mdx#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i @arcjet/sveltekit @arcjet/inspect\n```\n\n----------------------------------------\n\nTITLE: React Component for Selectable Code Content\nDESCRIPTION: A React component implementation that provides switchable code examples between TypeScript and JavaScript versions for both App and Pages router patterns in Next.js.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/email-validation/reference/nextjs/DecisionLogDeny.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport DecisionLogDenyAppJS from \"./DecisionLogAppDeny.js?raw\";\nimport DecisionLogDenyAppTS from \"./DecisionLogAppDeny.ts?raw\";\nimport DecisionLogDenyPagesJS from \"./DecisionLogPagesDeny.js?raw\";\nimport DecisionLogDenyPagesTS from \"./DecisionLogPagesDeny.ts?raw\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS (App)\" slotIdx=\"1\">\n    <Code code={DecisionLogDenyAppTS} lang=\"ts\" title=\"/app/api/arcjet/route.ts\" />\n  </div>\n  <div slot=\"TS (Pages)\" slotIdx=\"2\">\n    <Code code={DecisionLogDenyPagesTS} lang=\"ts\" title=\"/pages/api/hello.ts\" />\n  </div>\n  <div slot=\"JS (App)\" slotIdx=\"3\">\n    <Code code={DecisionLogDenyAppJS} lang=\"js\" title=\"/app/api/arcjet/route.js\" />\n  </div>\n  <div slot=\"JS (Pages)\" slotIdx=\"4\">\n    <Code code={DecisionLogDenyPagesJS} lang=\"js\" title=\"/pages/api/hello.ts\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Rendering Selectable TypeScript Code Example using JSX\nDESCRIPTION: This JSX snippet sets up a selectable content area to display the TypeScript code example. It uses the SelectableContent component with client-side rendering and a synchronization key for language selection.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/reference/deno/DecisionLog.mdx#2025-04-12_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={DecisionLogTS} lang=\"ts\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Importing Selectable Content Component\nDESCRIPTION: Imports required components and raw code files for displaying selectable TypeScript/JavaScript content with code highlighting\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/email-validation/reference/sveltekit/DecisionLogDeny.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport DecisionLogDenyJS from \"./DecisionLogDeny.js?raw\";\nimport DecisionLogDenyTS from \"./DecisionLogDeny.ts?raw\";\n```\n\n----------------------------------------\n\nTITLE: Rendering Framework-Specific Error Handling Components in Markdown\nDESCRIPTION: This snippet demonstrates the use of a custom component 'SlotByFramework' to render framework-specific error handling documentation. It includes slots for various frameworks such as Bun, NestJS, NextJS, Node.js, Remix, and SvelteKit.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/email-validation/reference.mdx#2025-04-12_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n<SlotByFramework client:load>\n  <ErrorsBun slot=\"bun\" />\n  <ErrorsNestJs slot=\"nest-js\" />\n  <ErrorsNextJs slot=\"next-js\" />\n  <ErrorsNodeJs slot=\"node-js\" />\n  <ErrorsRemix slot=\"remix\" />\n  <ErrorsSvelteKit slot=\"sveltekit\" />\n</SlotByFramework>\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Raw Code for Decision Log Example in TypeScript\nDESCRIPTION: This snippet imports required components and raw TypeScript code for displaying a selectable code example. It uses a custom SelectableContent component and Astro's Starlight Code component to render the TypeScript code.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/reference/deno/DecisionLog.mdx#2025-04-12_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport DecisionLogTS from \"./DecisionLog.ts?raw\";\n```\n\n----------------------------------------\n\nTITLE: JavaScript SelectableContent Component Import\nDESCRIPTION: Imports the SelectableContent component used to create a switchable package manager installation interface.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/nosecone/quick-start/next-js/Step1.mdx#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Raw Code for Nosecone Header Usage in React\nDESCRIPTION: This snippet imports necessary components and raw code for displaying selectable content. It includes imports from Starlight components and a custom SelectableContent component, as well as importing raw TypeScript code.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/nosecone/quick-start/deno/Step2.mdx#2025-04-12_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Code } from \"@astrojs/starlight/components\";\nimport SelectableContent from \"@/components/SelectableContent\";\n\nimport Step2TS from \"./Step2.ts?raw\";\n```\n\n----------------------------------------\n\nTITLE: POST Request to Arcjet API with cURL\nDESCRIPTION: Makes a verbose (-v) POST request to a local Arcjet API endpoint running on port 3000. Sends text data containing an email address as the request body.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/sensitive-info/quick-start/bun/Step4.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -v http://localhost:3000/api/arcjet --data \"My email address is test@example.com\"\n```\n\n----------------------------------------\n\nTITLE: Installing Arcjet SvelteKit Dependencies with PNPM\nDESCRIPTION: Command to install @arcjet/sveltekit and @arcjet/inspect packages using PNPM package manager.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/rate-limiting/quick-start/sveltekit/Step1.mdx#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npnpm add @arcjet/sveltekit @arcjet/inspect\n```\n\n----------------------------------------\n\nTITLE: Code Display Component Usage\nDESCRIPTION: JSX component usage for displaying code with syntax highlighting and line insertions\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/nosecone/reference/sveltekit/Config.mdx#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Code code={Config} lang=\"js\" title=\"svelte.config.js\" ins={[3, 10, 11]} />\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Code Snippets in Next.js\nDESCRIPTION: This snippet imports the SelectableContent component, Code component from Starlight, and raw code snippets for different language and framework combinations.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/email-validation/reference/nextjs/DecisionLogAllow.mdx#2025-04-12_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport DecisionLogAppAllowJS from \"./DecisionLogAppAllow.js?raw\";\nimport DecisionLogAppAllowTS from \"./DecisionLogAppAllow.ts?raw\";\nimport DecisionLogPagesAllowJS from \"./DecisionLogPagesAllow.js?raw\";\nimport DecisionLogPagesAllowTS from \"./DecisionLogPagesAllow.ts?raw\";\n```\n\n----------------------------------------\n\nTITLE: Installing @arcjet/nest with yarn\nDESCRIPTION: This command installs the @arcjet/nest package using yarn package manager. It adds the package to the project's dependencies.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/signup-protection/quick-start/nestjs/Step1.mdx#2025-04-12_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @arcjet/nest\n```\n\n----------------------------------------\n\nTITLE: Importing and Applying Nosecone Headers in TypeScript\nDESCRIPTION: This snippet demonstrates how to import Nosecone and apply its generated headers to a Node.js server response in TypeScript. It uses res.setHeaders() to set the headers directly.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/nosecone/quick-start/node-js/Step2.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Code } from \"@astrojs/starlight/components\";\nimport SelectableContent from \"@/components/SelectableContent\";\n\nimport Step2TS from \"./Step2.ts?raw\";\nimport Step2JS from \"./Step2.js?raw\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={Step2TS} lang=\"ts\" title=\"index.ts\" ins={[1, 8]} />\n  </div>\n  <div slot=\"JS\" slotIdx=\"2\">\n    <Code code={Step2JS} lang=\"js\" title=\"index.js\" ins={[1, 5]} />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Next.js Documentation\nDESCRIPTION: This snippet imports various custom components and MDX files used in the documentation page for rendering framework-specific content.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/rate-limiting/reference/nextjs/PerRouteVsMiddleware.mdx#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport SlotByFramework from \"@/components/SlotByFramework\";\nimport MiddlewareMatchingPaths from \"./MiddlewareMatchingPaths.mdx\";\nimport MiddlewareAllRoutes from \"./MiddlewareAllRoutes.mdx\";\nimport MiddlewareMatcher from \"./MiddlewareMatcher.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Starting Deno Application with Watch Mode\nDESCRIPTION: Runs the Deno application using the index.ts file in watch mode. This command will prompt for permissions unless appropriate flags are provided.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/get-started/deno/Step4.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndeno run --watch index.ts\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Logging in JavaScript\nDESCRIPTION: Example of setting up custom logging for the Arcjet SDK using Pino logger in JavaScript, with different configurations for production and development environments.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/reference/sveltekit.mdx#2025-04-12_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport pino from \"pino\";\nimport arcjet, { fixedWindow } from \"@arcjet/sveltekit\";\n\nconst logger =\n  process.env.NODE_ENV === \"production\"\n    ? pino()\n    : pino({\n        transport: {\n          target: \"pino-pretty\",\n          options: {\n            colorize: true,\n          },\n        },\n      });\n\nconst aj = arcjet({\n  key: process.env.ARCJET_KEY,\n  characteristics: [\"ip.src\"],\n  rules: [\n    fixedWindow({\n      window: \"1h\",\n      max: 60,\n    }),\n  ],\n  logger,\n});\n```\n\n----------------------------------------\n\nTITLE: Starting Next.js App with Yarn\nDESCRIPTION: Command to start a Next.js development server using Yarn package manager. After running, the application will be accessible at http://localhost:3000.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/email-validation/quick-start/nextjs/Step4.mdx#2025-04-12_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nyarn run dev\n```\n\n----------------------------------------\n\nTITLE: Starting Arcjet Application with npm\nDESCRIPTION: This command starts the Arcjet application using npm as the package manager.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/email-validation/quick-start/nestjs/Step4.mdx#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Raw Code Files for Selectable Content Display\nDESCRIPTION: This snippet imports required components and raw code files for displaying selectable content. It uses dynamic imports for the code files and imports components from Astro and a custom SelectableContent component.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/rate-limiting/reference/nodejs/Errors.mdx#2025-04-12_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport ErrorsJS from \"./Errors.js?raw\";\nimport ErrorsTS from \"./Errors.ts?raw\";\n```\n\n----------------------------------------\n\nTITLE: Rendering Selectable Code Content with JSX\nDESCRIPTION: This JSX snippet sets up a SelectableContent component that allows switching between TypeScript and JavaScript code examples. It uses slots to define the content for each language option.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/rate-limiting/quick-start/bun/Step3.mdx#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n\n    <Code code={Step3TS} lang=\"ts\" title=\"index.ts\" />\n\n  </div>\n  <div slot=\"JS\" slotIdx=\"2\">\n\n    <Code code={Step3JS} lang=\"js\" title=\"index.js\" />\n\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Setting up Arcjet API Key in .env.local\nDESCRIPTION: Configuration snippet showing how to add the Arcjet site key to a .env.local file. The key should be obtained from the Arcjet dashboard at app.arcjet.com.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/quick-start/remix/Step2.mdx#2025-04-12_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n# Get your site key from https://app.arcjet.com\nARCJET_KEY=ajkey_yourkey\n```\n\n----------------------------------------\n\nTITLE: Importing Code Snippets and Components in JavaScript\nDESCRIPTION: This snippet imports raw code files for TypeScript and JavaScript examples, along with necessary components for code display and language selection.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/rate-limiting/quick-start/bun/Step3.mdx#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Step3TS from \"./Step3.ts?raw\";\nimport Step3JS from \"./Step3.js?raw\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport SelectableContent from \"@/components/SelectableContent\";\n```\n\n----------------------------------------\n\nTITLE: Rendering Selectable TypeScript and JavaScript Code Snippets\nDESCRIPTION: This JSX snippet creates a selectable content area with TypeScript and JavaScript code examples. It uses the SelectableContent component to create a framework switcher and the Code component to display the code snippets.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/email-validation/reference/sveltekit/Errors.mdx#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={ErrorsTS} lang=\"ts\" title=\"/src/routes/api/arcjet/+server.ts\" />\n  </div>\n  <div slot=\"JS\" slotIdx=\"2\">\n    <Code code={ErrorsJS} lang=\"js\" title=\"/src/routes/api/arcjet/+server.js\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Setting up Arcjet Environment Variables in .env.local\nDESCRIPTION: Configuration for Arcjet environment variables including development mode and API key settings. Required for local development to handle IP address validation and authentication.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/rate-limiting/quick-start/nodejs/Step2.mdx#2025-04-12_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n# NODE_ENV is not set automatically, so tell Arcjet we're in dev\n# You can leave this unset in prod\nARCJET_ENV=development\n# Get your site key from https://app.arcjet.com\nARCJET_KEY=ajkey_yourkey\n```\n\n----------------------------------------\n\nTITLE: Rendering NextJS Testing Examples in JSX\nDESCRIPTION: Component structure for displaying NextJS-specific testing examples using the SlotByFramework component system.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/rate-limiting/reference.mdx#2025-04-12_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<SlotByFramework client:load>\n  <ExamplesNextJs slot=\"next-js\" />\n</SlotByFramework>\n```\n\n----------------------------------------\n\nTITLE: Running Development Command with pnpm\nDESCRIPTION: This command runs the 'dev' script using pnpm. It's an alternative to npm for running development tasks.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/nosecone/quick-start/next-js/Step3.mdx#2025-04-12_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Sending Suspicious Request with cURL\nDESCRIPTION: A cURL command that sends a request with a suspicious header to a localhost endpoint. This is used to test Arcjet Shield rules.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/shield/quick-start/nestjs/Step5.mdx#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncurl -v -H \"x-arcjet-suspicious: true\" http://localhost:3000\n```\n\n----------------------------------------\n\nTITLE: Installing Arcjet Packages with pnpm\nDESCRIPTION: This command installs the @arcjet/node and @arcjet/inspect packages using pnpm (Performant NPM). It's displayed when the user selects pnpm as their package manager.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/get-started/node-js-express/Step1.mdx#2025-04-12_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npnpm add @arcjet/node @arcjet/inspect\n```\n\n----------------------------------------\n\nTITLE: Rendering Framework-Specific Content for Per-Route Shield Configuration in Next.js\nDESCRIPTION: This code snippet uses the SlotByFramework component to render Next.js-specific content for per-route Shield configuration. It allows for dynamic content selection based on the framework being used.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/shield/reference/nextjs/PerRouteVsMiddleware.mdx#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<SlotByFramework client:load>\n  <PerRouteNextJs slot=\"next-js\" />\n</SlotByFramework>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Code Selection Component for Next.js Error Handling Examples\nDESCRIPTION: A component that imports Arcjet error handling examples and displays them in a selectable interface. Users can switch between TypeScript and JavaScript implementations for both App Router and Pages Router in Next.js.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/sensitive-info/reference/nextjs/Errors.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport ErrorsAppJS from \"./ErrorsApp.js?raw\";\nimport ErrorsAppTS from \"./ErrorsApp.ts?raw\";\nimport ErrorsPagesJS from \"./ErrorsPages.js?raw\";\nimport ErrorsPagesTS from \"./ErrorsPages.ts?raw\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS (App)\" slotIdx=\"1\">\n    <Code code={ErrorsAppTS} lang=\"ts\" title=\"/app/api/arcjet/route.ts\" />\n  </div>\n  <div slot=\"TS (Pages)\" slotIdx=\"2\">\n    <Code code={ErrorsPagesTS} lang=\"ts\" title=\"/pages/api/hello.ts\" />\n  </div>\n  <div slot=\"JS (App)\" slotIdx=\"3\">\n    <Code code={ErrorsAppJS} lang=\"js\" title=\"/app/api/arcjet/route.js\" />\n  </div>\n  <div slot=\"JS (Pages)\" slotIdx=\"4\">\n    <Code code={ErrorsPagesJS} lang=\"js\" title=\"/pages/api/hello.ts\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Installing Arcjet SvelteKit Packages with yarn\nDESCRIPTION: Command to install @arcjet/sveltekit and @arcjet/inspect packages using yarn package manager.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/signup-protection/quick-start/sveltekit/Step1.mdx#2025-04-12_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @arcjet/sveltekit @arcjet/inspect\n```\n\n----------------------------------------\n\nTITLE: Installing Arcjet Packages with PNPM\nDESCRIPTION: Installs @arcjet/next and @arcjet/inspect packages using PNPM package manager\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/rate-limiting/quick-start/nextjs/Step1.mdx#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npnpm add @arcjet/next @arcjet/inspect\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Raw Code Files for Code Snippet Display\nDESCRIPTION: This snippet imports the required components and raw code files for displaying selectable code snippets. It includes a custom SelectableContent component and the Code component from Starlight, as well as raw TypeScript and JavaScript code files.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/signup-protection/reference/remix/CustomVerification.mdx#2025-04-12_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport CustomVerificationTS from \"./CustomVerification.js?raw\";\nimport CustomVerificationJS from \"./CustomVerification.ts?raw\";\n```\n\n----------------------------------------\n\nTITLE: Starting Deno Server with Watch Mode\nDESCRIPTION: Command to start a Deno server in watch mode, which automatically restarts on file changes. May require additional permission flags for functionality.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/quick-start/deno/Step4.mdx#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ndeno run --watch index.ts\n```\n\n----------------------------------------\n\nTITLE: Deno Watch Command\nDESCRIPTION: Command to run a TypeScript file using Deno with file watching enabled for development.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/nosecone/quick-start/deno/Step3.mdx#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndeno run --watch index.ts\n```\n\n----------------------------------------\n\nTITLE: Installing Nest.js CLI Globally\nDESCRIPTION: Command to install the Nest.js CLI tool globally using npm. The -g flag ensures the CLI is available system-wide.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/get-started/nest-js/Step0.mdx#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i -g @nestjs/cli\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Raw Code Files for Selectable Content\nDESCRIPTION: This snippet imports the necessary components and raw code files for rendering selectable code snippets. It uses dynamic imports for TypeScript and JavaScript versions of a DecisionLog file.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/rate-limiting/reference/sveltekit/DecisionLog.mdx#2025-04-12_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport DecisionLogJS from \"./DecisionLog.js?raw\";\nimport DecisionLogTS from \"./DecisionLog.ts?raw\";\n```\n\n----------------------------------------\n\nTITLE: Rendering Selectable Content for Nosecone Header Usage in React JSX\nDESCRIPTION: This JSX snippet renders a SelectableContent component with a Code component inside. It displays TypeScript code for using Nosecone-generated headers in a Deno server, with syntax highlighting and line insertion indication.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/nosecone/quick-start/deno/Step2.mdx#2025-04-12_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={Step2TS} lang=\"ts\" title=\"index.ts\" ins={5} />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Installing Arcjet Packages with pnpm\nDESCRIPTION: This snippet demonstrates the installation of @arcjet/next and @arcjet/inspect packages using pnpm. It uses the pnpm add command.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/quick-start/nextjs/Step1.mdx#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npnpm add @arcjet/next @arcjet/inspect\n```\n\n----------------------------------------\n\nTITLE: Installing @arcjet/nest with npm\nDESCRIPTION: This command installs the @arcjet/nest package using npm (Node Package Manager).\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/email-validation/quick-start/nestjs/Step1.mdx#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm i @arcjet/nest\n```\n\n----------------------------------------\n\nTITLE: Installing Arcjet Node Packages with Yarn\nDESCRIPTION: This command installs the @arcjet/node and @arcjet/inspect packages using Yarn package manager. It's displayed when the user selects Yarn as their package manager.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/get-started/node-js-hono/Step1.mdx#2025-04-12_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @arcjet/node @arcjet/inspect\n```\n\n----------------------------------------\n\nTITLE: Setting Arcjet API Key in Environment File\nDESCRIPTION: Shows how to add the Arcjet API key to a .env.local file for authentication. The key should be placed in the project root directory.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/rate-limiting/quick-start/nextjs/Step2.mdx#2025-04-12_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nARCJET_KEY=ajkey_yourkey\n```\n\n----------------------------------------\n\nTITLE: Starting Arcjet Application with Package Managers\nDESCRIPTION: This code snippet shows how to start an Arcjet application using different package managers (npm, pnpm, and yarn). The commands are wrapped in a SelectableContent component, allowing users to choose their preferred package manager.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/quick-start/nestjs/Step4.mdx#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm run start\n```\n\nLANGUAGE: sh\nCODE:\n```\npnpm run start\n```\n\nLANGUAGE: sh\nCODE:\n```\nyarn run start\n```\n\n----------------------------------------\n\nTITLE: Testing Bot Protection with curl\nDESCRIPTION: Command to test the Arcjet bot protection by making a curl request to the local Next.js application. This should result in a 403 Forbidden response as curl is considered an automated client by default.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/quick-start/nextjs/Step4.mdx#2025-04-12_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncurl -I http://localhost:3000\n```\n\n----------------------------------------\n\nTITLE: Installing Arcjet SvelteKit Dependencies with Yarn\nDESCRIPTION: Command to install @arcjet/sveltekit and @arcjet/inspect packages using Yarn package manager.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/rate-limiting/quick-start/sveltekit/Step1.mdx#2025-04-12_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @arcjet/sveltekit @arcjet/inspect\n```\n\n----------------------------------------\n\nTITLE: Rendering Framework-Specific Middleware Documentation\nDESCRIPTION: JSX component usage for displaying middleware-based bot protection configuration specific to Next.js framework.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/reference/nextjs/PerRouteVsMiddleware.mdx#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<SlotByFramework client:load>\n  <MiddlewareNextJs slot=\"next-js\" />\n</SlotByFramework>\n```\n\n----------------------------------------\n\nTITLE: Importing Raw Code Files in TypeScript\nDESCRIPTION: This snippet shows how to import raw code files for both TypeScript and JavaScript versions of the API route. It also imports necessary components for displaying code and creating selectable content.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/quick-start/sveltekit/Step3.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport Step3TS from \"./Step3.ts?raw\";\nimport Step3JS from \"./Step3.js?raw\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport SelectableContent from \"@/components/SelectableContent\";\n```\n\n----------------------------------------\n\nTITLE: Importing Raw TypeScript Example for Arcjet Client Blocking\nDESCRIPTION: Imports a TypeScript example file that demonstrates how to configure Arcjet to block automated clients with a 403 Forbidden response.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/quick-start/deno/Step3.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport Step3TS from \"./Step3.ts?raw\";\n```\n\n----------------------------------------\n\nTITLE: Installing Arcjet Packages with PNPM\nDESCRIPTION: Installs @arcjet/remix and @arcjet/inspect packages using PNPM package manager.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/rate-limiting/quick-start/remix/Step1.mdx#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npnpm add @arcjet/remix @arcjet/inspect\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Code Files in JSX\nDESCRIPTION: This snippet imports necessary components and raw code files for rendering selectable content with code snippets.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/rate-limiting/reference/nodejs/ByUserId.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Code } from \"@astrojs/starlight/components\";\nimport SelectableContent from \"@/components/SelectableContent\";\nimport ByUserIdTS from \"./ByUserId.ts?raw\";\nimport ByUserIdJS from \"./ByUserId.js?raw\";\n```\n\n----------------------------------------\n\nTITLE: Implementing Selectable Code Content with Framework Switcher in React\nDESCRIPTION: This component uses SelectableContent to toggle between JavaScript and TypeScript code examples. It imports raw code files and renders them using the Code component from Starlight.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/sensitive-info/reference/remix/CustomDetect.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport CustomDetectJS from \"./CustomDetect.js?raw\";\nimport CustomDetectTS from \"./CustomDetect.ts?raw\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={CustomDetectTS} lang=\"ts\" />\n  </div>\n  <div slot=\"JS\" slotIdx=\"2\">\n    <Code code={CustomDetectJS} lang=\"js\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Rendering Language-Switchable Code Blocks with Astro Components\nDESCRIPTION: Implementation of a component that enables users to switch between TypeScript and JavaScript code examples. Uses Astro's Starlight components and raw code imports for displaying formatted code blocks.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/shield/reference/sveltekit/PerRoute.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport PerRouteTS from \"./PerRoute.ts?raw\";\nimport PerRouteJS from \"./PerRoute.js?raw\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={PerRouteTS} lang=\"ts\" title=\"/src/routes/+page.server.ts\" />\n  </div>\n  <div slot=\"JS\" slotIdx=\"2\">\n    <Code code={PerRouteJS} lang=\"js\" title=\"/src/routes/+page.server.js\" />\n    />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Starting an Application with npm\nDESCRIPTION: Command to start an application using npm package manager. This runs the start script defined in the project's package.json file.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/shield/quick-start/nestjs/Step4.mdx#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Installing Arcjet Packages with npm\nDESCRIPTION: Command to install Arcjet Next.js integration and inspect packages using npm package manager.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/sensitive-info/quick-start/nextjs/Step1.mdx#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm i @arcjet/next @arcjet/inspect\n```\n\n----------------------------------------\n\nTITLE: Installing Nosecone Package with yarn\nDESCRIPTION: Command to install the nosecone package using yarn package manager\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/nosecone/quick-start/node-js/Step1.mdx#2025-04-12_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn add nosecone\n```\n\n----------------------------------------\n\nTITLE: React Component with Selectable Content Implementation\nDESCRIPTION: A React component that implements selectable content using slots, with TypeScript specific content.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/nosecone/quick-start/deno/Step3.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\n\n{/* prettier-ignore */}\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n<div slot=\"TS\" slotIdx=\"1\">\n```bash\ndeno run --watch index.ts\n```\n</div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Importing Raw Code Files and Components for Arcjet API Route\nDESCRIPTION: This snippet imports raw code files for TypeScript and JavaScript implementations of the Arcjet API route, along with necessary components for rendering and selection.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/email-validation/quick-start/sveltekit/Step3.mdx#2025-04-12_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Step3TS from \"./Step3.ts?raw\";\nimport Step3JS from \"./Step3.js?raw\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport SelectableContent from \"@/components/SelectableContent\";\n```\n\n----------------------------------------\n\nTITLE: Installing Nosecone SvelteKit Adapter\nDESCRIPTION: Commands to install the @nosecone/sveltekit package using different package managers.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/nosecone/reference.mdx#2025-04-12_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nnpm i @nosecone/sveltekit\n```\n\nLANGUAGE: sh\nCODE:\n```\npnpm add @nosecone/sveltekit\n```\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @nosecone/sveltekit\n```\n\n----------------------------------------\n\nTITLE: Sending POST Request to Arcjet API with cURL\nDESCRIPTION: This command sends a POST request to a locally hosted Arcjet API endpoint running on port 5173. It includes verbose output (-v flag) and sends text data containing an email address in the request body. This example would typically be used for testing API functionality or demonstrating how to interact with Arcjet's API.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/sensitive-info/quick-start/sveltekit/Step4.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -v http://localhost:5173/api/arcjet --data \"My email address is test@example.com\"\n```\n\n----------------------------------------\n\nTITLE: Installing @arcjet/nest with npm\nDESCRIPTION: This command installs the @arcjet/nest package using npm (Node Package Manager).\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/rate-limiting/quick-start/nestjs/Step1.mdx#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm i @arcjet/nest\n```\n\n----------------------------------------\n\nTITLE: Setting Arcjet API Key in Environment File\nDESCRIPTION: Shows how to add the Arcjet API key to a .env.local file in the project root directory for local development and authentication purposes.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/get-started/next-js/Step2.mdx#2025-04-12_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nARCJET_KEY=ajkey_yourkey\n```\n\n----------------------------------------\n\nTITLE: Default X-Download-Options Configuration\nDESCRIPTION: Default value for X-Download-Options header configuration.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/nosecone/reference.mdx#2025-04-12_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\ntrue;\n```\n\n----------------------------------------\n\nTITLE: Testing Bot Protection with Curl\nDESCRIPTION: Command to test the bot protection feature by making a curl request to the local development server. This should return a 403 Forbidden response as curl is considered an automated client by default.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/quick-start/sveltekit/Step4.mdx#2025-04-12_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n# Will show the response status, which should be 403 forbidden\ncurl -I http://localhost:5173\n```\n\n----------------------------------------\n\nTITLE: Rendering Selectable Content with Code Snippets in React JSX\nDESCRIPTION: This JSX code renders a SelectableContent component with TypeScript and JavaScript code snippets. It uses the Code component to display the imported raw code with syntax highlighting.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/email-validation/reference/nodejs/Errors.mdx#2025-04-12_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={ErrorsTS} lang=\"ts\" />\n  </div>\n  <div slot=\"JS\" slotIdx=\"2\">\n    <Code code={ErrorsJS} lang=\"js\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies and Raw Code Files\nDESCRIPTION: Import statements for the SelectableContent component, Code component from Starlight, and raw code files for different implementations.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/rate-limiting/reference/nextjs/Errors.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport ErrorsAppJS from \"./ErrorsApp.js?raw\";\nimport ErrorsAppTS from \"./ErrorsApp.ts?raw\";\nimport ErrorsPagesJS from \"./ErrorsPages.js?raw\";\nimport ErrorsPagesTS from \"./ErrorsPages.ts?raw\";\n```\n\n----------------------------------------\n\nTITLE: Setting Arcjet Environment Variables in .env.local\nDESCRIPTION: Configuration of environment variables for Arcjet integration, including development environment flag and API key setup. Specifically addresses the need to set ARCJET_ENV for Bun compatibility and local IP address handling.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/get-started/bun-hono/Step2.mdx#2025-04-12_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n# NODE_ENV is not set automatically, so tell Arcjet we're in dev\n# You can leave this unset in prod\nARCJET_ENV=development\n# Get your site key from https://app.arcjet.com\nARCJET_KEY=ajkey_yourkey\n```\n\n----------------------------------------\n\nTITLE: Installing Arcjet Packages with yarn\nDESCRIPTION: Command to install @arcjet/next and @arcjet/inspect packages using yarn package manager.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/signup-protection/quick-start/nextjs/Step1.mdx#2025-04-12_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @arcjet/next @arcjet/inspect\n```\n\n----------------------------------------\n\nTITLE: Implementing Language-Switchable Code Display with Astro Components\nDESCRIPTION: Creates a UI component that allows users to switch between TypeScript and JavaScript code examples. Uses SelectableContent for toggle functionality and Code component from Starlight for syntax highlighting. Raw code content is imported from external TS and JS files.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/reference/remix/IdentifiedBots.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport IdentifiedBotsTS from \"./IdentifiedBots.ts?raw\";\nimport IdentifiedBotsJS from \"./IdentifiedBots.js?raw\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={IdentifiedBotsTS} lang=\"ts\" />\n  </div>\n  <div slot=\"JS\" slotIdx=\"2\">\n    <Code code={IdentifiedBotsJS} lang=\"js\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Rendering Launch Components for Additional Resources in JSX\nDESCRIPTION: This code renders two Launch components, one for examples and blueprints, and another for architecture information. Each component includes a text description and an action with a link.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/index.mdx#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Launch\n  client:load\n  text=\"Use cases and example apps.\"\n  actions={[\n    {\n      text: \"Examples & blueprints\",\n      link: \"/examples/\",\n      decoratorRight: \"arrow-right\",\n    },\n  ]}\n/>\n<br />\n<Launch\n  client:load\n  text=\"Learn about how Arcjet works.\"\n  actions={[\n    {\n      text: \"Arcjet's architecture\",\n      link: \"/architecture/\",\n      decoratorRight: \"arrow-right\",\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Visualizing Arcjet Request Flow with Mermaid Flowchart\nDESCRIPTION: This Mermaid flowchart diagram illustrates the request flow in Arcjet. It shows how a client request is processed through the Arcjet SDK, evaluated against rules, sent to the Arcjet API for rate limiting, and then either allowed to execute application code or analyzed post-request.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/mermaid/architecture-post-request.txt#2025-04-12_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    A[Client] -->|Request| B(Arcjet SDK)\n    B --> C{Evaluate Arcjet Rules}\n    C -->|Rate Limit Rule| D[✦ Arcjet API]\n    D -->|Request Context| F{Post-Request\n    Analysis}\n    F -->|Results|D\n    D -->|Allow| E[Execute application code]\n    E -->|200 Response| A[Client]\n```\n\n----------------------------------------\n\nTITLE: Importing Raw Code Files in Astro\nDESCRIPTION: This snippet imports raw code files for both TypeScript and JavaScript versions of Step3, as well as components from Astro and a custom SelectableContent component.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/sensitive-info/quick-start/nestjs/Step3.mdx#2025-04-12_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Step3TS from \"./Step3.ts?raw\";\nimport Step3JS from \"./Step3.js?raw\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport SelectableContent from \"@/components/SelectableContent\";\n```\n\n----------------------------------------\n\nTITLE: SelectableContent Component Implementation\nDESCRIPTION: JSX implementation of the SelectableContent component that provides a tabbed interface for different package manager instructions. It uses client-side rendering and synchronizes selection state across instances.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/shield/quick-start/nodejs/Step1.mdx#2025-04-12_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<SelectableContent client:load syncKey=\"packageManager\" frameworkSwitcher>\n  <div slot=\"npm\" slotIdx=\"1\">\n\n```sh\n    npm i @arcjet/node @arcjet/inspect\n```\n\n    </div>\n\n  <div slot=\"pnpm\" slotIdx=\"2\">\n\n```sh\npnpm add @arcjet/node @arcjet/inspect\n```\n\n  </div>\n  <div slot=\"yarn\" slotIdx=\"3\">\n\n```sh\nyarn add @arcjet/node @arcjet/inspect\n```\n\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Importing and Configuring Documentation Components\nDESCRIPTION: Code showing the setup of a documentation page component using Astro/Starlight components and custom selectable content functionality\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/get-started/deno/Step3.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Step3TS from \"./Step3.ts?raw\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport SelectableContent from \"@/components/SelectableContent\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    Create a new file at `index.ts` with the contents:\n\n    <Code code={Step3TS} lang=\"ts\" title=\"index.ts\" />\n\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Client Override in JavaScript\nDESCRIPTION: Shows how to override the default Arcjet client with a custom implementation in JavaScript.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/reference/remix.mdx#2025-04-12_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst customClient = {\n  async protect() {\n    // Custom implementation\n    return {\n      conclusion: \"ALLOW\",\n      reason: { message: \"Custom client always allows\" },\n    };\n  },\n};\n\nconst arcjet = createArcjet({\n  // other options\n  client: customClient,\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Selectable Code Content for Arcjet Documentation\nDESCRIPTION: This JSX snippet sets up a SelectableContent component to display different code examples based on user selection. It includes TypeScript and JavaScript versions for both App Router and Pages Router implementations, using the Code component for syntax highlighting.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/rate-limiting/reference/nextjs/DecisionLog.mdx#2025-04-12_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS (App)\" slotIdx=\"1\">\n    <Code code={DecisionLogAppTS} lang=\"ts\" title=\"/app/api/arcjet/route.ts\" />\n  </div>\n  <div slot=\"TS (Pages)\" slotIdx=\"2\">\n    <Code code={DecisionLogPagesTS} lang=\"ts\" title=\"/pages/api/hello.ts\" />\n  </div>\n  <div slot=\"JS (App)\" slotIdx=\"3\">\n    <Code code={DecisionLogAppJS} lang=\"js\" title=\"/app/api/arcjet/route.js\" />\n  </div>\n  <div slot=\"JS (Pages)\" slotIdx=\"4\">\n    <Code code={DecisionLogPagesJS} lang=\"js\" title=\"/pages/api/hello.ts\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Installing Arcjet Packages with pnpm\nDESCRIPTION: This command installs the @arcjet/remix and @arcjet/inspect packages using pnpm.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/email-validation/quick-start/remix/Step1.mdx#2025-04-12_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npnpm add @arcjet/remix @arcjet/inspect\n```\n\n----------------------------------------\n\nTITLE: Rendering SelectableContent Component for Package Installation in JSX\nDESCRIPTION: This snippet renders a SelectableContent component with multiple slots for different package manager installation commands. It uses the client:load attribute and a syncKey for synchronization.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/rate-limiting/quick-start/nestjs/Step1.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<SelectableContent client:load syncKey=\"packageManager\" frameworkSwitcher>\n<div slot=\"npm\" slotIdx=\"1\">\n\n```sh\nnpm i @arcjet/nest\n```\n\n</div>\n<div slot=\"pnpm\" slotIdx=\"2\">\n\n```sh\npnpm add @arcjet/nest\n```\n\n</div>\n<div slot=\"yarn\" slotIdx=\"3\">\n\n```sh\nyarn add @arcjet/nest\n```\n\n</div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Rendering Selectable Content for Arcjet API Route Implementation\nDESCRIPTION: This snippet uses a SelectableContent component to provide toggleable views of TypeScript and JavaScript implementations for the Arcjet API route. It includes placeholders for the actual code snippets.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/email-validation/quick-start/sveltekit/Step3.mdx#2025-04-12_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n\nCreate a new API route at `/src/routes/api/arcjet/+server.ts`:\n\n<Code code={Step3TS} lang=\"ts\" title=\"/src/routes/api/arcjet/+server.ts\" />\n\n  </div>\n  <div slot=\"JS\" slotIdx=\"2\">\n\nCreate a new API route at `/src/routes/api/arcjet/+server.js`:\n\n<Code code={Step3JS} lang=\"js\" title=\"/src/routes/api/arcjet/+server.js\" />\n\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Testing Server with HTTP Request\nDESCRIPTION: Command to test the running server by sending an HTTP request to localhost on port 8000 using curl.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/rate-limiting/quick-start/nodejs/Step4.mdx#2025-04-12_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncurl http://localhost:8000\n```\n\n----------------------------------------\n\nTITLE: Using SelectableContent Component in JSX\nDESCRIPTION: Implementation of a SelectableContent component that allows switching between different package managers for installing Arcjet packages. The component supports npm, pnpm, and yarn options with synchronized state.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/sensitive-info/quick-start/nextjs/Step1.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\n\n{/* prettier-ignore */}\n<SelectableContent client:load syncKey=\"packageManager\" frameworkSwitcher>\n<div slot=\"npm\" slotIdx=\"1\">\n\n```sh\nnpm i @arcjet/next @arcjet/inspect\n```\n\n</div>\n<div slot=\"pnpm\" slotIdx=\"2\">\n\n```sh\npnpm add @arcjet/next @arcjet/inspect\n```\n\n</div>\n<div slot=\"yarn\" slotIdx=\"3\">\n\n```sh\nyarn add @arcjet/next @arcjet/inspect\n```\n\n</div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Rendering Selectable TypeScript Error Code with React Components\nDESCRIPTION: Imports the necessary components and raw TypeScript code to create a selectable content display for documentation. Uses the SelectableContent component to create a framework switcher that shows TypeScript error code.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/signup-protection/reference/nestjs/Errors.mdx#2025-04-12_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport ErrorsTS from \"./Errors.ts?raw\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={ErrorsTS} lang=\"ts\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Selectable Code Examples in ArcJet Documentation\nDESCRIPTION: This code imports raw TypeScript and JavaScript files along with UI components to create a language-switchable code example display. It uses SelectableContent to allow users to toggle between TS and JS implementations of the same code.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/sensitive-info/quick-start/bun/Step3.mdx#2025-04-12_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport Step3TS from \"./Step3.ts?raw\";\nimport Step3JS from \"./Step3.js?raw\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport SelectableContent from \"@/components/SelectableContent\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n\n    <Code code={Step3TS} lang=\"ts\" title=\"index.ts\" />\n\n  </div>\n  <div slot=\"JS\" slotIdx=\"2\">\n\n    <Code code={Step3JS} lang=\"js\" title=\"index.js\" />\n\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Installing Arcjet Remix Dependencies with Yarn\nDESCRIPTION: Command to install @arcjet/remix and @arcjet/inspect packages using Yarn package manager.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/quick-start/remix/Step1.mdx#2025-04-12_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @arcjet/remix @arcjet/inspect\n```\n\n----------------------------------------\n\nTITLE: Selectable Content Component Structure\nDESCRIPTION: JSX structure for a component that enables switching between TypeScript and JavaScript code examples using slots and framework switcher\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/email-validation/reference/sveltekit/DecisionLogDeny.mdx#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code\n      code={DecisionLogDenyTS}\n      lang=\"ts\"\n      title=\"/src/routes/api/arcjet/+server.ts\"\n    />\n  </div>\n  <div slot=\"JS\" slotIdx=\"2\">\n    <Code\n      code={DecisionLogDenyJS}\n      lang=\"js\"\n      title=\"/src/routes/api/arcjet/+server.js\"\n    />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Implementing Code Selection Component with Astro/Starlight\nDESCRIPTION: Component implementation that provides a toggle between TypeScript and JavaScript code examples. Uses SelectableContent for framework switching and Code component from Starlight for syntax highlighting. Imports raw code files and displays them in corresponding language slots.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/reference/sveltekit/PerRoute.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport PerRouteTS from \"./PerRoute.ts?raw\";\nimport PerRouteJS from \"./PerRoute.js?raw\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code\n      code={PerRouteTS}\n      lang=\"ts\"\n      title=\"/src/routes/api/arcjet/+server.ts\"\n    />\n  </div>\n  <div slot=\"JS\" slotIdx=\"2\">\n    <Code\n      code={PerRouteJS}\n      lang=\"js\"\n      title=\"/src/routes/api/arcjet/+server.js\"\n    />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Rendering Link Cards in JSX for Arcjet Documentation\nDESCRIPTION: This code snippet renders a set of link cards using JSX components. It includes links to example apps, architecture documentation, and an SDK reference link specific to the user's framework.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/get-started.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<CardGrid>\n  <LinkCard\n    title=\"Example apps\"\n    href=\"https://github.com/arcjet/arcjet-js/tree/main/examples\"\n    description=\"Check out the examples.\"\n  />\n  <LinkCard\n    title=\"Learn how Arcjet works\"\n    href=\"/architecture\"\n    description=\"Arcjet's architecture.\"\n  />\n  <SdkReferenceLinkByFramework />\n</CardGrid>\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Raw Code Files in Next.js\nDESCRIPTION: This snippet imports necessary components and raw code files for custom detection configuration examples. It uses dynamic imports with the ?raw suffix to include the content of TypeScript and JavaScript files.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/sensitive-info/reference/nextjs/CustomDetect.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport CustomDetectAppTS from \"./CustomDetectApp.ts?raw\";\nimport CustomDetectAppJS from \"./CustomDetectApp.js?raw\";\nimport CustomDetectPagesTS from \"./CustomDetectPages.ts?raw\";\nimport CustomDetectPagesJS from \"./CustomDetectPages.js?raw\";\n```\n\n----------------------------------------\n\nTITLE: Selectable Content Component Structure\nDESCRIPTION: JSX structure for a selectable content component that allows switching between different code implementations based on framework and language preference.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/get-started/next-js/Step3.mdx#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n<div slot=\"TS (App)\" slotIdx=\"1\">\nCreate a new API route at `/app/api/arcjet/route.ts`:\n\n<Code\n  code={Step3AppTS}\n  lang=\"ts\"\n  title=\"/app/api/arcjet/route.ts\"\n/>\n</div>\n<div slot=\"TS (Pages)\" slotIdx=\"2\">\nCreate a new API route at `/pages/api/arcjet.ts`:\n\n<Code\n  code={Step3PagesTS}\n  lang=\"ts\"\n  title=\"/pages/api/arcjet.ts\"\n/>\n</div>\n<div slot=\"JS (App)\" slotIdx=\"3\">\nCreate a new API route at `/app/api/arcjet/route.js`:\n\n<Code\n  code={Step3AppJS}\n  lang=\"js\"\n  title=\"/app/api/arcjet/route.js\"\n/>\n</div>\n<div slot=\"JS (Pages)\" slotIdx=\"4\">\nCreate a new API route at `/pages/api/arcjet.js`:\n\n<Code\n  code={Step3PagesJS}\n  lang=\"js\"\n  title=\"/pages/api/arcjet.js\"\n/>\n</div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Importing and Displaying TypeScript Code in Astro\nDESCRIPTION: Component that imports and renders TypeScript code using Astro's Starlight Code component within a selectable content wrapper. Uses raw loader for TypeScript file import and implements client-side framework switching.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/rate-limiting/reference/nodejs/TokenBucket.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport TokenBucket from \"./TokenBucket.ts?raw\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={TokenBucket} lang=\"ts\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Starting Arcjet App with Hot Reloading (JavaScript)\nDESCRIPTION: This command starts the Arcjet application using Bun with hot reloading enabled for JavaScript files. Note that changes to .env.local file require manual restart.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/get-started/bun/Step4.mdx#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbun run --hot index.js\n```\n\n----------------------------------------\n\nTITLE: Strict-Transport-Security Default Configuration\nDESCRIPTION: Default configuration for Strict-Transport-Security header with one year max age and includeSubDomains enabled.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/nosecone/reference.mdx#2025-04-12_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  maxAge: 31536000, // 1 year\n  includeSubDomains: true,\n  preload: false,\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Arcjet Documentation\nDESCRIPTION: This snippet imports necessary components for rendering selectable content and code blocks in the Arcjet documentation.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/get-started/node-js-express/Step3.mdx#2025-04-12_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport Express from \"./Express.js?raw\";\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Raw TypeScript Code for Arcjet NestJS Integration\nDESCRIPTION: This snippet imports required components for displaying selectable content and raw TypeScript code. It includes a custom SelectableContent component, a Code component from Astro's Starlight, and raw TypeScript code for the DecisionLog example.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/reference/nestjs/DecisionLog.mdx#2025-04-12_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport DecisionLogTS from \"./DecisionLog.ts?raw\";\n```\n\n----------------------------------------\n\nTITLE: Rendering Selectable Code Snippets with SelectableContent Component\nDESCRIPTION: This snippet uses the SelectableContent component to render code snippets for both TypeScript and JavaScript versions of the 'Denying Bots' functionality.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/reference/sveltekit/DenyingBots.mdx#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={DenyingBotsTS} lang=\"ts\" title=\"/src/hooks.server.ts\" />\n  </div>\n  <div slot=\"JS\" slotIdx=\"2\">\n    <Code code={DenyingBotsJS} lang=\"js\" title=\"/src/hooks.server.js\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Installing Arcjet Packages with PNPM\nDESCRIPTION: Command to install @arcjet/next and @arcjet/inspect packages using PNPM package manager.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/shield/quick-start/nextjs/Step1.mdx#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npnpm add @arcjet/next @arcjet/inspect\n```\n\n----------------------------------------\n\nTITLE: Installing Arcjet Remix Dependencies with pnpm\nDESCRIPTION: Command to install @arcjet/remix and @arcjet/inspect packages using pnpm package manager\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/signup-protection/quick-start/remix/Step1.mdx#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npnpm add @arcjet/remix @arcjet/inspect\n```\n\n----------------------------------------\n\nTITLE: Implementing Selectable Code Content Component\nDESCRIPTION: React/JSX component that provides a framework switcher interface to display code examples in different languages and frameworks. Uses Astro Starlight's Code component and imports raw code files for TypeScript and JavaScript examples.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/reference/nextjs/IdentifiedBots.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport IdentifiedBotsAppJS from \"./IdentifiedBotsApp.js?raw\";\nimport IdentifiedBotsAppTS from \"./IdentifiedBotsApp.ts?raw\";\nimport IdentifiedBotsPagesJS from \"./IdentifiedBotsPages.js?raw\";\nimport IdentifiedBotsPagesTS from \"./IdentifiedBotsPages.ts?raw\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS (App)\" slotIdx=\"1\">\n    <Code\n      code={IdentifiedBotsAppTS}\n      lang=\"ts\"\n      title=\"/app/api/arcjet/route.ts\"\n    />\n  </div>\n  <div slot=\"TS (Pages)\" slotIdx=\"2\">\n    <Code code={IdentifiedBotsPagesTS} lang=\"ts\" title=\"/pages/api/hello.ts\" />\n  </div>\n  <div slot=\"JS (App)\" slotIdx=\"3\">\n    <Code\n      code={IdentifiedBotsAppJS}\n      lang=\"js\"\n      title=\"/app/api/arcjet/route.js\"\n    />\n  </div>\n  <div slot=\"JS (Pages)\" slotIdx=\"4\">\n    <Code code={IdentifiedBotsPagesJS} lang=\"js\" title=\"/pages/api/hello.ts\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Testing Rate Limit with Curl\nDESCRIPTION: Command to test the rate limiting functionality using curl, which will receive a 403 response due to being identified as a bot\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/get-started/next-js/Step4.mdx#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncurl -v http://localhost:3000/api/arcjet\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Selectable Code Content in TypeScript/JSX\nDESCRIPTION: This snippet imports required components and raw code content, then renders a SelectableContent component with a TypeScript code block. It allows for selectable content display with language-specific tabs.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/reference/nestjs/IdentifiedBots.mdx#2025-04-12_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport IdentifiedBotsTS from \"./IdentifiedBots.ts?raw\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={IdentifiedBotsTS} lang=\"ts\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Framework Switcher for Code Examples in React\nDESCRIPTION: This code creates a selectable interface that allows users to switch between TypeScript and JavaScript code examples. It imports raw code files and renders them with syntax highlighting using the Code component from Starlight.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/sensitive-info/reference/sveltekit/Hooks.mdx#2025-04-12_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport HooksTS from \"./Hooks.ts?raw\";\nimport HooksJS from \"./Hooks.js?raw\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={HooksTS} lang=\"ts\" title=\"/src/hooks.server.ts\" />\n  </div>\n  <div slot=\"JS\" slotIdx=\"2\">\n    <Code code={HooksJS} lang=\"js\" title=\"/src/hooks.server.js\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Raw TypeScript Files in React\nDESCRIPTION: This snippet shows the import statements for React components and raw TypeScript files. It demonstrates how to import custom components, Astro components, and raw TypeScript content for use in the React application.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/email-validation/quick-start/nestjs/Step3.mdx#2025-04-12_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport Step3AppModuleTS from \"./Step3AppModule.ts?raw\";\nimport Step3ControllerTS from \"./Step3Controller.ts?raw\";\n```\n\n----------------------------------------\n\nTITLE: Importing SelectableContent Component in JavaScript\nDESCRIPTION: This snippet imports the SelectableContent component from a local file. The component is likely used to display selectable content based on the user's chosen package manager.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/get-started/node-js-hono/Step1.mdx#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Selectable Code Snippets in React\nDESCRIPTION: This code imports required components and raw code files, then renders a SelectableContent component with TypeScript and JavaScript code snippets. It allows users to switch between language versions of the code.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/reference/bun/Filtering.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport FilteringTS from \"./Filtering.ts?raw\";\nimport FilteringJS from \"./Filtering.js?raw\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={FilteringTS} lang=\"ts\" />\n  </div>\n  <div slot=\"JS\" slotIdx=\"2\">\n    <Code code={FilteringJS} lang=\"js\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Creating Selectable Code Components in React/JSX\nDESCRIPTION: This code creates a selectable content component that displays different code snippets based on user selection. It imports raw code files and renders them within Code components, organizing them with slots for TypeScript and JavaScript implementations in both App Router and Pages Router patterns.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/signup-protection/reference/nextjs/CustomVerification.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport CustomVerificationAppJS from \"./CustomVerificationApp.js?raw\";\nimport CustomVerificationAppTS from \"./CustomVerificationApp.ts?raw\";\nimport CustomVerificationPagesJS from \"./CustomVerificationPages.js?raw\";\nimport CustomVerificationPagesTS from \"./CustomVerificationPages.ts?raw\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS (App)\" slotIdx=\"1\">\n    <Code\n      code={CustomVerificationAppTS}\n      lang=\"ts\"\n      title=\"/app/api/submit/route.ts\"\n    />\n  </div>\n  <div slot=\"TS (Pages)\" slotIdx=\"2\">\n    <Code\n      code={CustomVerificationPagesTS}\n      lang=\"ts\"\n      title=\"/pages/api/submit.ts\"\n    />\n  </div>\n  <div slot=\"JS (App)\" slotIdx=\"3\">\n    <Code\n      code={CustomVerificationAppJS}\n      lang=\"js\"\n      title=\"/app/api/submit/route.js\"\n    />\n  </div>\n  <div slot=\"JS (Pages)\" slotIdx=\"4\">\n    <Code\n      code={CustomVerificationPagesJS}\n      lang=\"js\"\n      title=\"/pages/api/submit.js\"\n    />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Code Snippet Display in JSX\nDESCRIPTION: This code snippet sets up a SelectableContent component to display switchable code snippets for TypeScript and JavaScript. It imports raw code files and uses the Astro Starlight Code component for syntax highlighting.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/rate-limiting/reference/nodejs/Headers.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Code } from \"@astrojs/starlight/components\";\nimport SelectableContent from \"@/components/SelectableContent\";\nimport HeadersTS from \"./Headers.ts?raw\";\nimport HeadersJS from \"./Headers.js?raw\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={HeadersTS} lang=\"ts\" />\n  </div>\n  <div slot=\"JS\" slotIdx=\"3\">\n    <Code code={HeadersJS} lang=\"js\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: HTTP Response for Blocked Sensitive Information\nDESCRIPTION: Example HTTP response headers when Arcjet blocks a request containing sensitive information. Shows the default 400 status code and response format.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/sensitive-info/quick-start.mdx#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n< HTTP/2 400\n< content-type: application/json; charset=utf-8\n< date: Tue, 09 Jan 2024 13:43:04 GMT\n< vary: Accept-Encoding\n< content-length: 72\n```\n\n----------------------------------------\n\nTITLE: Installing Arcjet Node Packages with npm\nDESCRIPTION: This command installs the @arcjet/node and @arcjet/inspect packages using npm (Node Package Manager). It's displayed when the user selects npm as their package manager.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/get-started/node-js-hono/Step1.mdx#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm i @arcjet/node @arcjet/inspect\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Raw Code Files in JavaScript\nDESCRIPTION: This snippet imports the required components and raw code files for displaying selectable code snippets. It uses dynamic imports for the TypeScript and JavaScript versions of the code.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/reference/bun/IdentifiedBots.mdx#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport IdentifiedBotsTS from \"./IdentifiedBots.ts?raw\";\nimport IdentifiedBotsJS from \"./IdentifiedBots.js?raw\";\n```\n\n----------------------------------------\n\nTITLE: Selectable Content Component Implementation\nDESCRIPTION: Implements a selectable content component that allows toggling between TypeScript and JavaScript code examples using slots, with client-side interactivity enabled.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/reference/bun/DecisionLog.mdx#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={DecisionLogTS} lang=\"ts\" />\n  </div>\n  <div slot=\"JS\" slotIdx=\"2\">\n    <Code code={DecisionLogJS} lang=\"js\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Installing Arcjet Modules with Bun Package Manager\nDESCRIPTION: Command to install @arcjet/bun and @arcjet/inspect packages using Bun's package manager. This installs core Arcjet functionality and inspection tools.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/rate-limiting/quick-start/bun/Step1.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbun add @arcjet/bun @arcjet/inspect\n```\n\n----------------------------------------\n\nTITLE: Installing Arcjet Nest.js Package with yarn\nDESCRIPTION: Command to install the @arcjet/nest package using yarn package manager.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/shield/quick-start/nestjs/Step1.mdx#2025-04-12_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @arcjet/nest\n```\n\n----------------------------------------\n\nTITLE: Configuring Selectable Code Content Display\nDESCRIPTION: Sets up a SelectableContent component with slots for different code variations (TS/JS, App/Pages), each displaying code with proper syntax highlighting and file titles.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/rate-limiting/reference/nextjs/Headers.mdx#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS (App)\" slotIdx=\"1\">\n    <Code code={HeadersAppTS} lang=\"ts\" title=\"/app/api/arcjet/route.ts\" />\n  </div>\n  <div slot=\"TS (Pages)\" slotIdx=\"2\">\n    <Code code={HeadersPagesTS} lang=\"ts\" title=\"/pages/api/hello.ts\" />\n  </div>\n  <div slot=\"JS (App)\" slotIdx=\"3\">\n    <Code code={HeadersAppJS} lang=\"js\" title=\"/app/api/arcjet/route.js\" />\n  </div>\n  <div slot=\"JS (Pages)\" slotIdx=\"4\">\n    <Code code={HeadersPagesJS} lang=\"js\" title=\"/pages/api/hello.ts\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Code Snippets in JavaScript\nDESCRIPTION: This snippet imports necessary components and raw code files for a selectable content component. It uses the Starlight Code component and custom SelectableContent component to display code snippets.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/rate-limiting/reference/remix/ByUserId.mdx#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Code } from \"@astrojs/starlight/components\";\nimport SelectableContent from \"@/components/SelectableContent\";\nimport ByUserIdTS from \"./ByUserId.ts?raw\";\nimport ByUserIdJS from \"./ByUserId.js?raw\";\n```\n\n----------------------------------------\n\nTITLE: Rendering Selectable TypeScript and JavaScript Hook Implementations\nDESCRIPTION: This JSX snippet renders a SelectableContent component with TypeScript and JavaScript versions of hook implementations. It uses the Code component to display syntax-highlighted code for each language option.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/reference/sveltekit/Hooks.mdx#2025-04-12_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={HooksTS} lang=\"ts\" title=\"/src/hooks.server.ts\" />\n  </div>\n  <div slot=\"JS\" slotIdx=\"2\">\n    <Code code={HooksJS} lang=\"js\" title=\"/src/hooks.server.js\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Framework-Specific Step Imports\nDESCRIPTION: Import statements for framework-specific implementation steps including Bun, Deno, Next.js, Node.js, and SvelteKit configurations.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/nosecone/quick-start.mdx#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport BunStep1 from \"@/snippets/nosecone/quick-start/bun/Step1.mdx\";\nimport BunStep2 from \"@/snippets/nosecone/quick-start/bun/Step2.mdx\";\nimport BunStep3 from \"@/snippets/nosecone/quick-start/bun/Step3.mdx\";\nimport BunStep4 from \"@/snippets/nosecone/quick-start/bun/Step4.mdx\";\n\nimport DenoStep1 from \"@/snippets/nosecone/quick-start/deno/Step1.mdx\";\nimport DenoStep2 from \"@/snippets/nosecone/quick-start/deno/Step2.mdx\";\nimport DenoStep3 from \"@/snippets/nosecone/quick-start/deno/Step3.mdx\";\nimport DenoStep4 from \"@/snippets/nosecone/quick-start/deno/Step4.mdx\";\n\nimport NextJsStep1 from \"@/snippets/nosecone/quick-start/next-js/Step1.mdx\";\nimport NextJsStep2 from \"@/snippets/nosecone/quick-start/next-js/Step2.mdx\";\nimport NextJsStep3 from \"@/snippets/nosecone/quick-start/next-js/Step3.mdx\";\nimport NextJsStep4 from \"@/snippets/nosecone/quick-start/next-js/Step4.mdx\";\n\nimport NodeJsStep1 from \"@/snippets/nosecone/quick-start/node-js/Step1.mdx\";\nimport NodeJsStep2 from \"@/snippets/nosecone/quick-start/node-js/Step2.mdx\";\nimport NodeJsStep3 from \"@/snippets/nosecone/quick-start/node-js/Step3.mdx\";\nimport NodeJsStep4 from \"@/snippets/nosecone/quick-start/node-js/Step4.mdx\";\n\nimport SvelteKitStep1 from \"@/snippets/nosecone/quick-start/sveltekit/Step1.mdx\";\nimport SvelteKitStep2 from \"@/snippets/nosecone/quick-start/sveltekit/Step2.mdx\";\nimport SvelteKitStep3 from \"@/snippets/nosecone/quick-start/sveltekit/Step3.mdx\";\nimport SvelteKitStep4 from \"@/snippets/nosecone/quick-start/sveltekit/Step4.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Setting Up Arcjet Environment Variables in .env.local\nDESCRIPTION: Configuration for Arcjet environment variables including development mode setting and API key. Required for local development to handle IP address validation properly. The ARCJET_ENV setting is specifically needed for development environments where NODE_ENV isn't automatically set.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/quick-start/nestjs/Step2.mdx#2025-04-12_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n# NODE_ENV is not set automatically, so tell Arcjet we're in dev\n# You can leave this unset in prod\nARCJET_ENV=development\n# Get your site key from https://app.arcjet.com\nARCJET_KEY=ajkey_yourkey\n```\n\n----------------------------------------\n\nTITLE: Selectable Language Code Display Component\nDESCRIPTION: An Astro/JSX component that imports code content and renders it with language selection tabs. Uses SelectableContent for toggle functionality and Code component from Astro Starlight for syntax highlighting.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/reference/nodejs/DecisionLog.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport DecisionLogJS from \"./DecisionLog.js?raw\";\nimport DecisionLogTS from \"./DecisionLog.ts?raw\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={DecisionLogTS} lang=\"ts\" />\n  </div>\n  <div slot=\"JS\" slotIdx=\"2\">\n    <Code code={DecisionLogJS} lang=\"js\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Initializing a Next.js Project with create-next-app\nDESCRIPTION: This command uses npx to run the latest version of create-next-app, which sets up a new Next.js project with default configurations. It initializes the project structure, installs necessary dependencies, and creates basic files to get started with Next.js development.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/get-started/next-js/Step0.mdx#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx create-next-app@latest\n```\n\n----------------------------------------\n\nTITLE: Importing SelectableContent Component in JSX\nDESCRIPTION: Imports the SelectableContent component from a local file path. This component is likely used to render selectable installation commands.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/signup-protection/quick-start/nextjs/Step1.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering SelectableContent with TypeScript Code Block\nDESCRIPTION: This code snippet imports required components and raw code content, then uses SelectableContent to render a TypeScript code block. It demonstrates how to create a selectable content area with language switching functionality.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/rate-limiting/reference/nestjs/Errors.mdx#2025-04-12_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport ErrorsTS from \"./Errors.ts?raw\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={ErrorsTS} lang=\"ts\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Installing Arcjet Dependencies with Bun\nDESCRIPTION: This bash command installs the @arcjet/bun and @arcjet/inspect packages using the Bun package manager. These are likely core dependencies for using Arcjet in a Bun-based project.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/quick-start/bun/Step1.mdx#2025-04-12_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbun add @arcjet/bun @arcjet/inspect\n```\n\n----------------------------------------\n\nTITLE: Testing Suspicious Request with Curl in Arcjet\nDESCRIPTION: This curl command sends a request with a suspicious header to test Arcjet's shield protection. The header 'x-arcjet-suspicious: true' is used to simulate a suspicious request to a localhost endpoint.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/shield/quick-start/remix/Step5.mdx#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncurl -v -H \"x-arcjet-suspicious: true\" http://localhost:5173/arcjet\n```\n\n----------------------------------------\n\nTITLE: Installing shadcn UI Components with npm\nDESCRIPTION: This shell command installs the necessary shadcn UI components for the feedback form example.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/blueprints/feedback-form.mdx#2025-04-12_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# Install shadcn components from https://ui.shadcn.com/docs/installation/next\nnpx shadcn@latest add button card input label toast use-toast\n```\n\n----------------------------------------\n\nTITLE: Starting Arcjet App with Hot Reloading (TypeScript)\nDESCRIPTION: This command starts the Arcjet application using Bun with hot reloading enabled for TypeScript files. Note that changes to .env.local file require manual restart.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/get-started/bun/Step4.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbun run --hot index.ts\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Arcjet Route Components in Remix\nDESCRIPTION: This snippet demonstrates how to import necessary components and render a selectable content block for Arcjet route implementation in both TypeScript and JavaScript.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/rate-limiting/quick-start/remix/Step3.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Step3TS from \"./Step3.tsx?raw\";\nimport Step3JS from \"./Step3.jsx?raw\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport SelectableContent from \"@/components/SelectableContent\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code\n      code={Step3TS}\n      lang=\"ts\"\n      title=\"app/routes/arcjet.tsx\"\n      mark={[\"ARCJET_KEY\"]}\n    />\n  </div>\n  <div slot=\"JS\" slotIdx=\"2\">\n    <Code\n      code={Step3JS}\n      lang=\"js\"\n      title=\"app/routes/arcjet.jsx\"\n      mark={[\"ARCJET_KEY\"]}\n    />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Installing Arcjet and LangChain Dependencies\nDESCRIPTION: Command to install the required packages @arcjet/redact and @langchain/community for using Arcjet with LangChain.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/integrations/langchain.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @arcjet/redact @langchain/community\n```\n\n----------------------------------------\n\nTITLE: PNPM Installation Command\nDESCRIPTION: Command to install @nosecone/next package using PNPM package manager.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/nosecone/quick-start/next-js/Step1.mdx#2025-04-12_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npnpm add @nosecone/next\n```\n\n----------------------------------------\n\nTITLE: Rendering Selectable TypeScript and JavaScript Code Snippets\nDESCRIPTION: This snippet uses the SelectableContent component to render switchable code snippets. It provides options for TypeScript and JavaScript versions of the code, using the imported raw code files.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/sensitive-info/reference/sveltekit/CustomDetect.mdx#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={CustomDetectTS} lang=\"ts\" />\n  </div>\n  <div slot=\"JS\" slotIdx=\"2\">\n    <Code code={CustomDetectJS} lang=\"js\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Installing @arcjet/nest with yarn\nDESCRIPTION: This command installs the @arcjet/nest package using yarn package manager.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/rate-limiting/quick-start/nestjs/Step1.mdx#2025-04-12_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @arcjet/nest\n```\n\n----------------------------------------\n\nTITLE: Installing Arcjet SvelteKit and Inspect with npm\nDESCRIPTION: This command installs the @arcjet/sveltekit and @arcjet/inspect packages using npm (Node Package Manager).\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/email-validation/quick-start/sveltekit/Step1.mdx#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm i @arcjet/sveltekit @arcjet/inspect\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Raw Code Files for Arcjet Decision Logging\nDESCRIPTION: This snippet imports necessary components and raw code files for displaying Arcjet decision logging examples in different configurations.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/reference/nextjs/DecisionLog.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport DecisionLogAppJS from \"./DecisionLogApp.js?raw\";\nimport DecisionLogAppTS from \"./DecisionLogApp.ts?raw\";\nimport DecisionLogPagesJS from \"./DecisionLogPages.js?raw\";\nimport DecisionLogPagesTS from \"./DecisionLogPages.ts?raw\";\n```\n\n----------------------------------------\n\nTITLE: Setting Arcjet API Key in Environment File\nDESCRIPTION: Demonstrates how to add the Arcjet API key to a .env file for authentication. The key should be placed in the project root directory as an environment variable.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/get-started/remix/Step2.mdx#2025-04-12_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nARCJET_KEY=ajkey_yourkey\n```\n\n----------------------------------------\n\nTITLE: Required Dependencies Error Messages\nDESCRIPTION: Error messages shown when required dependencies are missing in the Arcjet setup.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/troubleshooting.mdx#2025-04-12_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nError: Log is required\n    at arcjet (/node_modules/arcjet/index.js:520:15)\n...\nError: Client is required\n    at arcjet (/node_modules/arcjet/index.js:526:15)\n```\n\n----------------------------------------\n\nTITLE: Defining Selectable Content Component with Framework Switcher\nDESCRIPTION: JSX component that implements a selectable content interface with language switching between TypeScript and JavaScript implementations.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/nosecone/quick-start/bun/Step3.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\n\n{/* prettier-ignore */}\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n<div slot=\"TS\" slotIdx=\"1\">\n```bash\nbun run --hot index.ts\n```\n</div>\n<div slot=\"JS\" slotIdx=\"2\">\n```bash\nbun run --hot index.js\n```\n</div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Implementing Selectable Content Display in React for Documentation\nDESCRIPTION: This code renders the SelectableContent component that allows users to switch between different programming languages or frameworks. It currently displays a TypeScript code example from HookMatcher.ts.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/rate-limiting/reference/sveltekit/HookMatcher.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport HookMatcher from \"./HookMatcher.ts?raw\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={HookMatcher} lang=\"ts\" title=\"/src/hooks.server.ts\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Selectable TypeScript Code with Framework Switcher\nDESCRIPTION: This snippet imports required components and raw code, then uses the SelectableContent component to render a TypeScript code snippet. The component allows for framework switching and synchronization across instances.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/rate-limiting/reference/nodejs/SlidingWindow.mdx#2025-04-12_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport SlidingWindow from \"./SlidingWindow.ts?raw\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={SlidingWindow} lang=\"ts\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Installing Arcjet Dependencies for Bun\nDESCRIPTION: This code snippet shows how to add the @arcjet/bun and @arcjet/inspect packages to a Bun project using the Bun package manager. It demonstrates the command-line instruction for installing these dependencies.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/email-validation/quick-start/bun/Step1.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbun add @arcjet/bun @arcjet/inspect\n```\n\n----------------------------------------\n\nTITLE: Triggering Arcjet Shield with suspicious header in curl\nDESCRIPTION: This command sends an HTTP request with a custom header 'x-arcjet-suspicious: true' to trigger Arcjet Shield's blocking behavior on a localhost server.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/shield/quick-start/bun/Step5.mdx#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncurl -v -H \"x-arcjet-suspicious: true\" http://localhost:3000\n```\n\n----------------------------------------\n\nTITLE: Installing @arcjet/nest with Yarn\nDESCRIPTION: This command installs the @arcjet/nest package using Yarn package manager. It adds the package to the project's dependencies.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/sensitive-info/quick-start/nestjs/Step1.mdx#2025-04-12_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @arcjet/nest\n```\n\n----------------------------------------\n\nTITLE: Rendering Selectable Package Manager Installation Commands in JSX\nDESCRIPTION: This JSX snippet uses a SelectableContent component to render installation commands for different package managers. It allows users to choose between npm, pnpm, and yarn for installing Arcjet packages.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/signup-protection/quick-start/nodejs/Step1.mdx#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\n\n{/* prettier-ignore */}\n<SelectableContent client:load syncKey=\"packageManager\">\n  <Fragment slot=\"npm\">\n    ```sh\n    npm i @arcjet/node @arcjet/inspect\n    ```\n    </Fragment>\n  <Fragment slot=\"pnpm\">\n  ```sh\n  pnpm add @arcjet/node @arcjet/inspect\n  ```\n  </Fragment>\n  <Fragment slot=\"yarn\">\n  ```sh\n  yarn add @arcjet/node @arcjet/inspect\n  ```\n  </Fragment>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Starting Next.js App with pnpm\nDESCRIPTION: Command to start a Next.js application using pnpm package manager.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/quick-start/nextjs/Step4.mdx#2025-04-12_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Initializing a New Remix Project using NPX\nDESCRIPTION: This command uses npx to run the create-remix tool, which sets up a new Remix project with the latest version. It creates the necessary file structure and installs required dependencies for a Remix application.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/get-started/remix/Step0.mdx#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx create-remix@latest\n```\n\n----------------------------------------\n\nTITLE: Yarn Installation Command\nDESCRIPTION: Command to install @nosecone/next package using Yarn package manager.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/nosecone/quick-start/next-js/Step1.mdx#2025-04-12_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @nosecone/next\n```\n\n----------------------------------------\n\nTITLE: Importing SelectableContent Component in JSX\nDESCRIPTION: Imports the SelectableContent component from a local file, which is likely used to display different package manager commands.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/quick-start/nextjs/Step4.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Raw Code Files for Selectable Content\nDESCRIPTION: This snippet imports the required components and raw code files for rendering selectable code snippets. It uses dynamic imports for the code files and imports from Astro's Starlight components.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/email-validation/reference/remix/DecisionLogDeny.mdx#2025-04-12_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport DecisionLogDenyJS from \"./DecisionLogDeny.js?raw\";\nimport DecisionLogDenyTS from \"./DecisionLogDeny.ts?raw\";\n```\n\n----------------------------------------\n\nTITLE: Configuring Dynamic Code Display with Language Selection\nDESCRIPTION: Implementation of a code display component that allows users to switch between TypeScript and JavaScript versions of code examples. Uses SelectableContent for toggle functionality and Astro's Code component for syntax highlighting.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/sensitive-info/reference/remix/DecisionLog.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport DecisionLogJS from \"./DecisionLog.js?raw\";\nimport DecisionLogTS from \"./DecisionLog.ts?raw\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={DecisionLogTS} lang=\"ts\" />\n  </div>\n  <div slot=\"JS\" slotIdx=\"2\">\n    <Code code={DecisionLogJS} lang=\"js\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Selectable Content with Code Snippet in JSX\nDESCRIPTION: This snippet imports a TypeScript code example and custom components to create a selectable content block. It uses the SelectableContent component to allow framework switching and displays a TypeScript code snippet using the Code component from Starlight.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/get-started/bun-hono/Step3.mdx#2025-04-12_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport Step3TS from \"./Step3.ts?raw\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport SelectableContent from \"@/components/SelectableContent\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    Update your `index.ts` file with the contents:\n\n    <Code code={Step3TS} lang=\"ts\" title=\"index.ts\" />\n\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Installing Hono with Package Managers\nDESCRIPTION: Commands to create a new Hono project using different Node.js package managers (npm, pnpm, and yarn). These commands will initialize a new Hono project with the latest version.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/get-started/node-js-hono/Step0.mdx#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm create hono@latest\n```\n\nLANGUAGE: sh\nCODE:\n```\npnpm create hono@latest\n```\n\nLANGUAGE: sh\nCODE:\n```\nyarn create hono\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Shield Configuration in Next.js\nDESCRIPTION: This snippet imports necessary components and content for displaying Shield configuration options in a Next.js application. It includes imports for selectable content, framework-specific slots, and MDX files for different configuration methods.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/shield/reference/nextjs/PerRouteVsMiddleware.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport SlotByFramework from \"@/components/SlotByFramework\";\nimport MiddlewareNextJs from \"./Middleware.mdx\";\nimport PerRouteNextJs from \"./PerRoute.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Rendering Selectable Code Content with JSX\nDESCRIPTION: This JSX snippet uses the SelectableContent component to render code snippets in both TypeScript and JavaScript. It provides slots for each language option and uses the Code component to display the imported raw code.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/rate-limiting/reference/remix/DecisionLog.mdx#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={DecisionLogTS} lang=\"ts\" />\n  </div>\n  <div slot=\"JS\" slotIdx=\"2\">\n    <Code code={DecisionLogJS} lang=\"js\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Installing Arcjet Packages with Bun\nDESCRIPTION: This command installs the @arcjet/bun and @arcjet/inspect packages using the Bun package manager. These packages are required for integrating Arcjet functionality in Bun-based projects.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/sensitive-info/quick-start/bun/Step1.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbun add @arcjet/bun @arcjet/inspect\n```\n\n----------------------------------------\n\nTITLE: Making POST Request to Arcjet Local Server with curl\nDESCRIPTION: This snippet demonstrates how to make a POST request to an Arcjet local development server running on port 5173 with a query parameter 'index'. It sends form data containing a message parameter with a test email address.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/sensitive-info/quick-start/remix/Step4.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://localhost:5173/arcjet.data?index --data-raw 'message=test@example.com'\n```\n\n----------------------------------------\n\nTITLE: Installing @arcjet/nest with Yarn\nDESCRIPTION: This command installs the @arcjet/nest package using Yarn package manager.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/email-validation/quick-start/nestjs/Step1.mdx#2025-04-12_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @arcjet/nest\n```\n\n----------------------------------------\n\nTITLE: POST Request with cURL to Local Server\nDESCRIPTION: Makes a verbose POST request to http://localhost:3000 with data containing an email address. The -v flag enables verbose output to show the full request and response details.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/sensitive-info/quick-start/nestjs/Step4.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -v http://localhost:3000 --data \"My email address is test@example.com\"\n```\n\n----------------------------------------\n\nTITLE: Installing Bun globally using npm\nDESCRIPTION: This command installs Bun globally on your system using npm. Bun is a fast all-in-one JavaScript runtime that can be used as an alternative to Node.js.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/get-started/bun/Step0.mdx#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install -g bun\n```\n\n----------------------------------------\n\nTITLE: Component Import for SelectableContent\nDESCRIPTION: Imports the SelectableContent component which enables switching between different package manager installation instructions.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/shield/quick-start/nodejs/Step1.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Selectable TypeScript Errors Component\nDESCRIPTION: This code snippet imports required components and raw TypeScript code, then renders a SelectableContent component with TypeScript errors. It uses client-side rendering and a synchronization key for framework switching.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/reference/nestjs/Errors.mdx#2025-04-12_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport ErrorsTS from \"./Errors.ts?raw\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={ErrorsTS} lang=\"ts\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Installing @nosecone/sveltekit with pnpm\nDESCRIPTION: Command to install the @nosecone/sveltekit package using pnpm package manager.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/nosecone/quick-start/sveltekit/Step1.mdx#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npnpm add @nosecone/sveltekit\n```\n\n----------------------------------------\n\nTITLE: Importing Server Hook Files in Astro Component\nDESCRIPTION: Code showing the import statements and setup for a selectable content component that allows switching between TypeScript and JavaScript implementations of server hooks.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/shield/quick-start/sveltekit/Step3.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport Step3TS from \"./Step3.ts?raw\";\nimport Step3JS from \"./Step3.js?raw\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport SelectableContent from \"@/components/SelectableContent\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n\nCreate a file called `hooks.server.ts` in your project (inside `src`):\n\n<Code code={Step3TS} lang=\"ts\" title=\"/src/hooks.server.ts\" />\n\n  </div>\n  <div slot=\"JS\" slotIdx=\"2\">\n\nCreate a file called `hooks.server.js` in your project (inside `src`):\n\n<Code code={Step3JS} lang=\"js\" title=\"/src/hooks.server.js\" />\n\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Selectable TypeScript Code Content\nDESCRIPTION: This snippet imports required components and raw TypeScript code, then renders a SelectableContent component with TypeScript code embedded. It uses client-side rendering and synchronizes language selection.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/signup-protection/reference/nestjs/CustomVerification.mdx#2025-04-12_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport CustomVerificationTS from \"./CustomVerification.ts?raw\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={CustomVerificationTS} lang=\"ts\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Installing Arcjet SvelteKit and Inspect with pnpm\nDESCRIPTION: This command installs the @arcjet/sveltekit and @arcjet/inspect packages using pnpm (Performant npm).\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/email-validation/quick-start/sveltekit/Step1.mdx#2025-04-12_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npnpm add @arcjet/sveltekit @arcjet/inspect\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering SelectableContent with Decision Log Deny Code\nDESCRIPTION: This snippet imports required components and a raw TypeScript file, then renders a SelectableContent component with a Code block containing the Decision Log Deny TypeScript code. It uses client-side rendering and synchronizes the selected language.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/email-validation/reference/nestjs/DecisionLogDeny.mdx#2025-04-12_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport DecisionLogDenyTS from \"./DecisionLogDeny.ts?raw\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={DecisionLogDenyTS} lang=\"ts\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Importing and Configuring Selectable Code Component for Token Bucket Request\nDESCRIPTION: Sets up a component with language selection functionality to display Token Bucket Request implementation in either TypeScript or JavaScript. Uses Astrojs Starlight's Code component for syntax highlighting and a custom SelectableContent component for toggling between language options.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/rate-limiting/reference/sveltekit/TokenBucketRequest.mdx#2025-04-12_snippet_0\n\nLANGUAGE: astro\nCODE:\n```\nimport { Code } from \"@astrojs/starlight/components\";\nimport SelectableContent from \"@/components/SelectableContent\";\nimport TokenBucketRequestTS from \"./TokenBucketRequest.ts?raw\";\nimport TokenBucketRequestJS from \"./TokenBucketRequest.js?raw\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={TokenBucketRequestTS} lang=\"ts\" />\n  </div>\n  <div slot=\"JS\" slotIdx=\"3\">\n    <Code code={TokenBucketRequestJS} lang=\"js\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Importing and Using SelectableContent with Code Display\nDESCRIPTION: Sets up a selectable content interface that displays TypeScript code using Astro/Starlight's Code component. The implementation includes client-side loading and framework switching capabilities.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/rate-limiting/reference/nestjs/SlidingWindow.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport SlidingWindow from \"./SlidingWindow.ts?raw\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={SlidingWindow} lang=\"ts\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Installing Arcjet Dependencies with Bun\nDESCRIPTION: Command to install @arcjet/bun and @arcjet/inspect packages using the Bun package manager. These packages are required for integrating Arcjet functionality in a Bun environment.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/signup-protection/quick-start/bun/Step1.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbun add @arcjet/bun @arcjet/inspect\n```\n\n----------------------------------------\n\nTITLE: Starting Bun Server with Hot Reloading (TypeScript)\nDESCRIPTION: Command to start a Bun server with hot reloading enabled for a TypeScript file. This allows for immediate updates to the server as changes are made to the code.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/rate-limiting/quick-start/bun/Step4.mdx#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nbun run --hot index.ts\n```\n\n----------------------------------------\n\nTITLE: Importing Shield Components\nDESCRIPTION: Imports for Shield implementation example files and UI components, including raw code imports and Astro components for documentation.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/shield/quick-start/bun/Step3.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport Step3TS from \"./Step3.ts?raw\";\nimport Step3JS from \"./Step3.js?raw\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport SelectableContent from \"@/components/SelectableContent\";\n```\n\n----------------------------------------\n\nTITLE: Starting Bun Application with Hot Reloading\nDESCRIPTION: Command to start a Bun application with hot reload functionality. The --hot flag enables automatic reloading when .ts files change, but requires manual restart for .env.local file changes.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/get-started/bun-hono/Step4.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbun run --hot index.ts\n```\n\n----------------------------------------\n\nTITLE: Installing Arcjet Packages with NPM\nDESCRIPTION: Installs @arcjet/next and @arcjet/inspect packages using NPM package manager\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/rate-limiting/quick-start/nextjs/Step1.mdx#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i @arcjet/next @arcjet/inspect\n```\n\n----------------------------------------\n\nTITLE: Starting Node.js Application with Environment Variables\nDESCRIPTION: This command starts a Node.js application using environment variables from a .env.local file. It requires Node.js version 20 or higher for built-in .env file support.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/get-started/node-js-express/Step4.mdx#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnode --env-file .env.local index.js\n```\n\n----------------------------------------\n\nTITLE: Importing SelectableContent Component in JavaScript\nDESCRIPTION: This snippet imports the SelectableContent component from a local file. The component is likely used to create selectable content blocks for different package managers.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/get-started/node-js/Step1.mdx#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Raw Code Files in JavaScript\nDESCRIPTION: This snippet imports necessary components and raw code files for rendering selectable code snippets. It uses the Code component from Starlight and a custom SelectableContent component.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/reference/nodejs/DenyingBots.mdx#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Code } from \"@astrojs/starlight/components\";\nimport SelectableContent from \"@/components/SelectableContent\";\nimport DenyingBotsTS from \"./DenyingBots.ts?raw\";\nimport DenyingBotsJS from \"./DenyingBots.js?raw\";\n```\n\n----------------------------------------\n\nTITLE: Installing Arcjet packages with yarn\nDESCRIPTION: Command to install @arcjet/node and @arcjet/inspect packages using yarn package manager.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/sensitive-info/quick-start/nodejs/Step1.mdx#2025-04-12_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @arcjet/node @arcjet/inspect\n```\n\n----------------------------------------\n\nTITLE: Rendering Framework-Specific Per-Route Documentation\nDESCRIPTION: JSX component usage for displaying per-route bot protection configuration specific to Next.js framework.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/reference/nextjs/PerRouteVsMiddleware.mdx#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<SlotByFramework client:load>\n  <PerRouteNextJs slot=\"next-js\" />\n</SlotByFramework>\n```\n\n----------------------------------------\n\nTITLE: Rendering Switchable Code Samples with SelectableContent\nDESCRIPTION: React/JSX component that imports and renders code samples with language selection functionality. Uses SelectableContent component to switch between TypeScript and JavaScript versions while maintaining synchronized state.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/reference/bun/Errors.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport ErrorsJS from \"./Errors.js?raw\";\nimport ErrorsTS from \"./Errors.ts?raw\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={ErrorsTS} lang=\"ts\" />\n  </div>\n  <div slot=\"JS\" slotIdx=\"2\">\n    <Code code={ErrorsJS} lang=\"js\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Installing Arcjet Remix SDK using yarn\nDESCRIPTION: Command to install Arcjet Remix SDK and the inspect utility using yarn package manager.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/shield/quick-start/remix/Step1.mdx#2025-04-12_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @arcjet/remix @arcjet/inspect\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Raw Code for Decision Log Allow\nDESCRIPTION: This snippet imports the required components and raw code files for rendering selectable TypeScript and JavaScript code blocks.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/email-validation/reference/nodejs/DecisionLogAllow.mdx#2025-04-12_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport DecisionLogAllowJS from \"./DecisionLogAllow.js?raw\";\nimport DecisionLogAllowTS from \"./DecisionLogAllow.ts?raw\";\n```\n\n----------------------------------------\n\nTITLE: Executing cURL Command for HTTP Header Inspection\nDESCRIPTION: This command uses curl to make a HEAD request to localhost:3000, displaying only the headers of the response. The -I flag instructs curl to fetch the headers only, while -X GET specifies the HTTP method.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/nosecone/quick-start/node-js/Step4.mdx#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncurl -I -X GET localhost:3000\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Selectable Code Content in Astro\nDESCRIPTION: This snippet imports required components and raw code content, then uses the SelectableContent component to render a TypeScript code snippet with language selection options. The code is loaded from an external file and displayed using the Code component from Astro's Starlight.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/rate-limiting/reference/sveltekit/HookMatchingPaths.mdx#2025-04-12_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport HookMatchingPaths from \"./HookMatchingPaths.ts?raw\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={HookMatchingPaths} lang=\"ts\" title=\"/src/hooks.server.ts\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Rendering Selectable Arcjet Server Hook Configurations\nDESCRIPTION: This snippet uses the SelectableContent component to render server hook configurations in both TypeScript and JavaScript. Users can switch between languages, and the appropriate file creation instructions and code are displayed.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/nosecone/reference/sveltekit/Hooks.mdx#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<SelectableContent client:load syncKey=\"language\">\n  <div slot=\"TS\" slotIdx=\"1\">\n    Create the `src/hooks.server.ts` file in your project with the contents:\n    <Code code={HooksTS} lang=\"ts\" title=\"src/hooks.server.ts\" />\n  </div>\n  <div slot=\"JS\" slotIdx=\"2\">\n    Create the `src/hooks.server.js` file in your project with the contents:\n    <Code code={HooksJS} lang=\"js\" title=\"src/hooks.server.js\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Installing Arcjet Packages with Bun\nDESCRIPTION: Command to install the @arcjet/bun and @arcjet/inspect packages using the Bun package manager. This adds both packages as dependencies to your Bun project.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/get-started/bun-hono/Step1.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbun add @arcjet/bun @arcjet/inspect\n```\n\n----------------------------------------\n\nTITLE: Starting TypeScript Node Server\nDESCRIPTION: Command to start a Node.js server using TypeScript with environment variables loaded from .env.local file.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/quick-start/nodejs/Step4.mdx#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx tsx --env-file .env.local index.ts\n```\n\n----------------------------------------\n\nTITLE: Importing SelectableContent Component in React\nDESCRIPTION: This snippet imports the SelectableContent component from a local file. The component is likely used to display selectable content blocks.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/nosecone/quick-start/bun/Step1.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\n```\n\n----------------------------------------\n\nTITLE: Starting JavaScript Node Server\nDESCRIPTION: Command to start a Node.js server using JavaScript with environment variables loaded from .env.local file.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/quick-start/nodejs/Step4.mdx#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnode --env-file .env.local index.js\n```\n\n----------------------------------------\n\nTITLE: Implementing Selectable Content Component for TS/JS Error Documentation\nDESCRIPTION: Imports and renders a SelectableContent component with TypeScript and JavaScript error documentation. The component allows users to switch between language implementations using the frameworkSwitcher feature.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/rate-limiting/reference/remix/Errors.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport ErrorsJS from \"./Errors.js?raw\";\nimport ErrorsTS from \"./Errors.ts?raw\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={ErrorsTS} lang=\"ts\" />\n  </div>\n  <div slot=\"JS\" slotIdx=\"2\">\n    <Code code={ErrorsJS} lang=\"js\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Visualizing Arcjet Request Flow with Mermaid Flowchart\nDESCRIPTION: This Mermaid.js flowchart diagram shows the request flow from client to Arcjet SDK, where rules are evaluated and then either allowed to execute application code or reported to the Arcjet API. The diagram demonstrates the decision path for request handling in the Arcjet system.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/mermaid/architecture-local-analysis.txt#2025-04-12_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD;\n    A[Client] -->|Request| B(Arcjet SDK)\n    B --> C{Evaluate Arcjet Rules}\n    C -->|Report| F[✦ Arcjet API]\n    C -->|Allow| E[Execute application code]\n    E -->|200 Response| A[Client]\n```\n\n----------------------------------------\n\nTITLE: React Comment Directive for Prettier\nDESCRIPTION: A JSX comment that disables Prettier formatting for the following code block\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/get-started/node-js/Step0.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n{/* prettier-ignore */}\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Selectable Code Content with Language Switching\nDESCRIPTION: Imports necessary components and raw code files, then renders a SelectableContent component that allows users to toggle between TypeScript and JavaScript implementations of CustomVerification. The component synchronizes selection state using the 'language' key.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/signup-protection/reference/bun/CustomVerification.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport CustomVerificationTS from \"./CustomVerification.js?raw\";\nimport CustomVerificationJS from \"./CustomVerification.ts?raw\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={CustomVerificationTS} lang=\"ts\" />\n  </div>\n  <div slot=\"JS\" slotIdx=\"2\">\n    <Code code={CustomVerificationJS} lang=\"js\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Installing Nosecone Package with pnpm\nDESCRIPTION: Command to install the nosecone package using pnpm package manager\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/nosecone/quick-start/node-js/Step1.mdx#2025-04-12_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm add nosecone\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Language-Switchable Code Example\nDESCRIPTION: Imports required components and raw code files, then renders them in a selectable interface that allows switching between TypeScript and JavaScript versions. Uses Astro's Code component for syntax highlighting.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/email-validation/reference/bun/DecisionLogDeny.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport DecisionLogDenyJS from \"./DecisionLogDeny.js?raw\";\nimport DecisionLogDenyTS from \"./DecisionLogDeny.ts?raw\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={DecisionLogDenyTS} lang=\"ts\" />\n  </div>\n  <div slot=\"JS\" slotIdx=\"2\">\n    <Code code={DecisionLogDenyJS} lang=\"js\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Raw Code Files in React\nDESCRIPTION: This snippet imports necessary components and raw code files for rendering selectable content. It uses dynamic imports for TypeScript and JavaScript code files.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/shield/reference/bun/Errors.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport ErrorsJS from \"./Errors.js?raw\";\nimport ErrorsTS from \"./Errors.ts?raw\";\n```\n\n----------------------------------------\n\nTITLE: Installing Arcjet Dependencies for Deno\nDESCRIPTION: This bash command adds Arcjet dependencies to a Deno project using the npm registry. It installs both the @arcjet/deno and @arcjet/inspect packages.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/get-started/deno/Step1.mdx#2025-04-12_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndeno add npm:@arcjet/deno npm:@arcjet/inspect\n```\n\n----------------------------------------\n\nTITLE: Installing @arcjet/nest with pnpm\nDESCRIPTION: This command installs the @arcjet/nest package using pnpm (Performant NPM). It adds the package to the project's dependencies.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/signup-protection/quick-start/nestjs/Step1.mdx#2025-04-12_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npnpm add @arcjet/nest\n```\n\n----------------------------------------\n\nTITLE: Importing Components for NestJS Rate Limit Headers Documentation\nDESCRIPTION: This snippet imports necessary components for displaying code and selectable content in the documentation. It includes the Code component from Starlight, a custom SelectableContent component, and raw TypeScript code for headers.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/rate-limiting/reference/nestjs/Headers.mdx#2025-04-12_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Code } from \"@astrojs/starlight/components\";\nimport SelectableContent from \"@/components/SelectableContent\";\nimport HeadersTS from \"./Headers.ts?raw\";\n```\n\n----------------------------------------\n\nTITLE: Selectable Content Component Implementation\nDESCRIPTION: React component implementation for displaying selectable code examples with language/framework switching functionality. Uses custom SelectableContent component with client-side loading and synchronized language selection.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/email-validation/reference/nextjs/Errors.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS (App)\" slotIdx=\"1\">\n    <Code code={ErrorsAppTS} lang=\"ts\" title=\"/app/api/arcjet/route.ts\" />\n  </div>\n  <div slot=\"TS (Pages)\" slotIdx=\"2\">\n    <Code code={ErrorsPagesTS} lang=\"ts\" title=\"/pages/api/hello.ts\" />\n  </div>\n  <div slot=\"JS (App)\" slotIdx=\"3\">\n    <Code code={ErrorsAppJS} lang=\"js\" title=\"/app/api/arcjet/route.js\" />\n  </div>\n  <div slot=\"JS (Pages)\" slotIdx=\"4\">\n    <Code code={ErrorsPagesJS} lang=\"js\" title=\"/pages/api/hello.ts\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Installing Arcjet Packages with pnpm\nDESCRIPTION: Command to install Arcjet Next.js integration and inspect packages using pnpm package manager.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/sensitive-info/quick-start/nextjs/Step1.mdx#2025-04-12_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npnpm add @arcjet/next @arcjet/inspect\n```\n\n----------------------------------------\n\nTITLE: Starting Arcjet Application with pnpm\nDESCRIPTION: Runs the development server for an Arcjet application using pnpm.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/quick-start/remix/Step4.mdx#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Installing Arcjet packages for SvelteKit using npm\nDESCRIPTION: Command to install @arcjet/sveltekit and @arcjet/inspect packages using npm package manager.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/sensitive-info/quick-start/sveltekit/Step1.mdx#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i @arcjet/sveltekit @arcjet/inspect\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server with Package Managers\nDESCRIPTION: Commands to start the development server using different package managers (npm, pnpm, and yarn).\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/email-validation/quick-start/remix/Step4.mdx#2025-04-12_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm run dev\n```\n\nLANGUAGE: shell\nCODE:\n```\npnpm run dev\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn run dev\n```\n\n----------------------------------------\n\nTITLE: Testing Arcjet Bot Protection with curl\nDESCRIPTION: Makes a curl request to the Arcjet application to test the bot protection feature. This command should result in a 403 Forbidden response as curl is considered an automated client by default.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/quick-start/remix/Step4.mdx#2025-04-12_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncurl -I http://localhost:5173/arcjet\n```\n\n----------------------------------------\n\nTITLE: Starting Next.js App with npm\nDESCRIPTION: Command to start a Next.js application using npm package manager.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/quick-start/nextjs/Step4.mdx#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Testing Arcjet Server with curl POST Request\nDESCRIPTION: Example curl command to test the Arcjet server by making a POST request with an email parameter to the local server endpoint.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/signup-protection/quick-start/nodejs/Step4.mdx#2025-04-12_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST -d 'email=test@arcjet.io' http://localhost:3000/\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Selectable Code Component\nDESCRIPTION: Imports necessary components and renders a code block within a selectable content container. Uses raw content loading for TypeScript file and allows framework-specific content switching.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/rate-limiting/reference/bun/SlidingWindow.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport SlidingWindow from \"./SlidingWindow.ts?raw\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={SlidingWindow} lang=\"ts\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Starting SvelteKit App with NPM\nDESCRIPTION: Command to start a SvelteKit application in development mode using npm package manager.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/quick-start/sveltekit/Step4.mdx#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Rendering Selectable Code Snippets in JSX\nDESCRIPTION: This code snippet demonstrates the use of a SelectableContent component to display code in both TypeScript and JavaScript. It imports raw code files and uses the Code component from Starlight to render the snippets.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/reference/remix/AllowingBots.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Code } from \"@astrojs/starlight/components\";\nimport SelectableContent from \"@/components/SelectableContent\";\nimport AllowingBotsTS from \"./AllowingBots.ts?raw\";\nimport AllowingBotsJS from \"./AllowingBots.js?raw\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={AllowingBotsTS} lang=\"ts\" />\n  </div>\n  <div slot=\"JS\" slotIdx=\"2\">\n    <Code code={AllowingBotsJS} lang=\"js\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Installing Arcjet Packages with pnpm for Remix\nDESCRIPTION: This command installs the @arcjet/remix and @arcjet/inspect packages using pnpm. It's an alternative to npm for setting up Arcjet in a Remix project.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/get-started/remix/Step1.mdx#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npnpm add @arcjet/remix @arcjet/inspect\n```\n\n----------------------------------------\n\nTITLE: Installing Arcjet Packages with npm for Remix\nDESCRIPTION: This command installs the @arcjet/remix and @arcjet/inspect packages using npm. It's typically used to set up Arcjet in a Remix project.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/get-started/remix/Step1.mdx#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i @arcjet/remix @arcjet/inspect\n```\n\n----------------------------------------\n\nTITLE: Installing Arcjet Packages with npm\nDESCRIPTION: This command installs the @arcjet/remix and @arcjet/inspect packages using npm.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/email-validation/quick-start/remix/Step1.mdx#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm i @arcjet/remix @arcjet/inspect\n```\n\n----------------------------------------\n\nTITLE: Starting Bun Server with Hot Reloading (TypeScript)\nDESCRIPTION: Command to start a Bun server using TypeScript with hot reloading enabled. This allows for automatic updates when changes are made to the code.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/quick-start/bun/Step4.mdx#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nbun run --hot index.ts\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Documentation for Next.js Bot Protection\nDESCRIPTION: Import statements for React components and documentation files needed to render bot protection configuration examples.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/reference/nextjs/PerRouteVsMiddleware.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport SlotByFramework from \"@/components/SlotByFramework\";\nimport MiddlewareNextJs from \"./Middleware.mdx\";\nimport PerRouteNextJs from \"./PerRoute.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Sample HTTP Response Headers\nDESCRIPTION: This is an example of the HTTP headers returned from the local server. It includes various security headers, content type information, and other standard HTTP response headers.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/nosecone/quick-start/deno/Step4.mdx#2025-04-12_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nHTTP/1.1 200 OK\ncontent-security-policy: base-uri 'none'; child-src 'none'; connect-src 'self'; default-src 'self'; font-src 'self'; form-action 'self'; frame-ancestors 'none'; frame-src 'none'; img-src 'self' blob: data:; manifest-src 'self'; media-src 'self'; object-src 'none'; script-src 'self'; style-src 'self'; worker-src 'self'; upgrade-insecure-requests;\ncross-origin-embedder-policy: require-corp\ncross-origin-opener-policy: same-origin\ncross-origin-resource-policy: same-origin\norigin-agent-cluster: ?1\nreferrer-policy: no-referrer\nstrict-transport-security: max-age=31536000; includeSubDomains\nx-content-type-options: nosniff\nx-dns-prefetch-control: off\nx-download-options: noopen\nx-frame-options: SAMEORIGIN\nx-permitted-cross-domain-policies: none\nx-xss-protection: 0\ncontent-type: text/plain;charset=UTF-8\nvary: Accept-Encoding\ncontent-length: 13\ndate: Wed, 27 Nov 2024 20:21:41 GMT\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Raw Code Files\nDESCRIPTION: This snippet imports the necessary components and raw code files for displaying selectable code snippets. It uses dynamic imports to load the code content.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/reference/nextjs/AllowingBots.mdx#2025-04-12_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport { Code } from \"@astrojs/starlight/components\";\nimport SelectableContent from \"@/components/SelectableContent\";\nimport AllowingBotsAppTS from \"./AllowingBotsApp.ts?raw\";\nimport AllowingBotsPagesTS from \"./AllowingBotsPages.ts?raw\";\nimport AllowingBotsAppJS from \"./AllowingBotsPages.js?raw\";\nimport AllowingBotsPagesJS from \"./AllowingBotsPages.js?raw\";\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Selectable Code Content in React\nDESCRIPTION: This snippet imports necessary components and raw code content, then renders a SelectableContent component with TypeScript and JavaScript code examples. It uses the Astro Starlight Code component for syntax highlighting.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/email-validation/reference/remix/Errors.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport ErrorsJS from \"./Errors.js?raw\";\nimport ErrorsTS from \"./Errors.ts?raw\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={ErrorsTS} lang=\"ts\" />\n  </div>\n  <div slot=\"JS\" slotIdx=\"2\">\n    <Code code={ErrorsJS} lang=\"js\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Installing Arcjet Packages with yarn\nDESCRIPTION: This snippet shows how to install @arcjet/next and @arcjet/inspect packages using yarn. It uses the yarn add command.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/quick-start/nextjs/Step1.mdx#2025-04-12_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @arcjet/next @arcjet/inspect\n```\n\n----------------------------------------\n\nTITLE: Installing Arcjet Bun SDK\nDESCRIPTION: Command to install the Arcjet Bun SDK package in a Bun project.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/reference/bun.mdx#2025-04-12_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nbun add @arcjet/bun\n```\n\n----------------------------------------\n\nTITLE: Installing Arcjet Packages with yarn\nDESCRIPTION: This command installs the @arcjet/remix and @arcjet/inspect packages using yarn.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/email-validation/quick-start/remix/Step1.mdx#2025-04-12_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @arcjet/remix @arcjet/inspect\n```\n\n----------------------------------------\n\nTITLE: Executing TypeScript Node.js Script\nDESCRIPTION: This command uses npx to run a TypeScript file named index.ts using the tsx package, which allows for direct execution of TypeScript files in Node.js.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/nosecone/quick-start/node-js/Step3.mdx#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx tsx index.ts\n```\n\n----------------------------------------\n\nTITLE: Configuring Language-Specific Code Display Component\nDESCRIPTION: Imports and sets up a selectable content component that allows switching between TypeScript and JavaScript code examples using slots and raw code imports.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/reference/sveltekit/AllowingBots.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Code } from \"@astrojs/starlight/components\";\nimport SelectableContent from \"@/components/SelectableContent\";\nimport AllowingBotsTS from \"./AllowingBots.ts?raw\";\nimport AllowingBotsJS from \"./AllowingBots.js?raw\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={AllowingBotsTS} lang=\"ts\" title=\"/src/hooks.server.ts\" />\n  </div>\n  <div slot=\"JS\" slotIdx=\"2\">\n    <Code code={AllowingBotsJS} lang=\"js\" title=\"/src/hooks.server.js\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Testing Server API Endpoint with cURL\nDESCRIPTION: cURL command to test the server's POST endpoint by sending an email parameter. Makes a POST request to localhost:3000 with form data.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/email-validation/quick-start/nodejs/Step4.mdx#2025-04-12_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST -d 'email=test@arcjet.io' http://localhost:3000/\n```\n\n----------------------------------------\n\nTITLE: Testing Server with CURL\nDESCRIPTION: Command to test the server using curl, which will return a 403 Forbidden response due to being considered an automated client.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/quick-start/nodejs/Step4.mdx#2025-04-12_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncurl -I http://localhost:8000\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Raw Code Files in React/Astro\nDESCRIPTION: Import statements for React/Astro components and raw code files used in the documentation, including framework-specific components and code examples.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/reference/remix/LoaderVsAction.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport SlotByFramework from \"@/components/SlotByFramework\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport ActionTS from \"./Action.ts?raw\";\nimport ActionJS from \"./Action.js?raw\";\n```\n\n----------------------------------------\n\nTITLE: Starting SvelteKit App with Yarn\nDESCRIPTION: Command to start a SvelteKit application in development mode using yarn package manager.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/quick-start/sveltekit/Step4.mdx#2025-04-12_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nyarn run dev\n```\n\n----------------------------------------\n\nTITLE: Implementing Code Selection Component for Arcjet Documentation\nDESCRIPTION: A React/JSX component that provides a switchable interface between TypeScript and JavaScript code examples. The component imports raw code files and displays them using Astrojs Starlight's Code component with appropriate language syntax highlighting.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/sensitive-info/reference/sveltekit/PerRoute.mdx#2025-04-12_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport PerRouteTS from \"./PerRoute.ts?raw\";\nimport PerRouteJS from \"./PerRoute.js?raw\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code\n      code={PerRouteTS}\n      lang=\"ts\"\n      title=\"/src/routes/api/arcjet/+server.ts\"\n    />\n  </div>\n  <div slot=\"JS\" slotIdx=\"2\">\n    <Code\n      code={PerRouteJS}\n      lang=\"js\"\n      title=\"/src/routes/api/arcjet/+server.js\"\n    />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Installing Arcjet Packages with npm\nDESCRIPTION: This command installs the @arcjet/node and @arcjet/inspect packages using npm (Node Package Manager). It's displayed when the user selects npm as their package manager.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/get-started/node-js-express/Step1.mdx#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm i @arcjet/node @arcjet/inspect\n```\n\n----------------------------------------\n\nTITLE: Testing Rate Limit with cURL\nDESCRIPTION: Command to test the application's rate limiting functionality using cURL. This request will return a 403 response as cURL is identified as a bot by default.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/get-started/node-js/Step4.mdx#2025-04-12_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncurl -v http://localhost:8000\n```\n\n----------------------------------------\n\nTITLE: Using SelectableContent Component with Deno Installation Command\nDESCRIPTION: This snippet demonstrates the usage of the SelectableContent component to wrap a bash command for installing Arcjet dependencies in a Deno project. The component is configured with client-side loading and a framework switcher.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/get-started/deno/Step1.mdx#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<SelectableContent client:load frameworkSwitcher>\n<div>\n\n```bash\ndeno add npm:@arcjet/deno npm:@arcjet/inspect\n```\n\n</div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Implementing Selectable Code Display Component\nDESCRIPTION: React/JSX component setup that implements a selectable content viewer with synchronized language switching between TypeScript and JavaScript code samples. Uses Astro's Starlight Code component for syntax highlighting.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/rate-limiting/reference/nodejs/DecisionLog.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport DecisionLogJS from \"./DecisionLog.js?raw\";\nimport DecisionLogTS from \"./DecisionLog.ts?raw\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={DecisionLogTS} lang=\"ts\" />\n  </div>\n  <div slot=\"JS\" slotIdx=\"2\">\n    <Code code={DecisionLogJS} lang=\"js\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Raw Code for Selectable Content in JavaScript/TypeScript\nDESCRIPTION: This snippet imports required components and raw code content for rendering a selectable code snippet. It uses Astro's Starlight components and a custom SelectableContent component for language selection.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/reference/deno/AllowingBots.mdx#2025-04-12_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Code } from \"@astrojs/starlight/components\";\nimport SelectableContent from \"@/components/SelectableContent\";\nimport AllowingBotsTS from \"./AllowingBots.ts?raw\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={AllowingBotsTS} lang=\"ts\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Rendering Selectable Code Snippets with Next.js and Astro\nDESCRIPTION: This JSX snippet uses a SelectableContent component to render multiple code snippets for custom detection configuration. It provides options for TypeScript and JavaScript implementations in both App Router and Pages Router formats.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/sensitive-info/reference/nextjs/CustomDetect.mdx#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS (App)\" slotIdx=\"1\">\n    <Code code={CustomDetectAppTS} lang=\"ts\" title=\"/app/api/arcjet/route.ts\" />\n  </div>\n  <div slot=\"TS (Pages)\" slotIdx=\"2\">\n    <Code code={CustomDetectPagesTS} lang=\"ts\" title=\"/pages/api/hello.ts\" />\n  </div>\n  <div slot=\"JS (App)\" slotIdx=\"3\">\n    <Code code={CustomDetectAppJS} lang=\"js\" title=\"/app/api/arcjet/route.js\" />\n  </div>\n  <div slot=\"JS (Pages)\" slotIdx=\"4\">\n    <Code code={CustomDetectPagesJS} lang=\"js\" title=\"/pages/api/hello.ts\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Installing Arcjet packages for Remix with yarn\nDESCRIPTION: Command to install the @arcjet/remix and @arcjet/inspect packages using yarn package manager.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/sensitive-info/quick-start/remix/Step1.mdx#2025-04-12_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @arcjet/remix @arcjet/inspect\n```\n\n----------------------------------------\n\nTITLE: Installing Arcjet Redact with NPM\nDESCRIPTION: Command to install the Arcjet redact library via NPM package manager.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/redact/quick-start.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @arcjet/redact\n```\n\n----------------------------------------\n\nTITLE: Installing Deno on macOS/Linux using Shell\nDESCRIPTION: Command to download and install Deno runtime on Unix-based systems using curl and shell script.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/get-started/deno/Step0.mdx#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncurl -fsSL https://deno.land/install.sh | sh\n```\n\n----------------------------------------\n\nTITLE: Running Bun with JavaScript\nDESCRIPTION: Command to start a Bun development server with hot reloading for a JavaScript entry file.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/nosecone/quick-start/bun/Step3.mdx#2025-04-12_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbun run --hot index.js\n```\n\n----------------------------------------\n\nTITLE: Importing and Configuring Selectable Code Component with TypeScript\nDESCRIPTION: Component setup that imports required dependencies and configures a selectable content display with TypeScript code examples. Uses SelectableContent for framework switching and Code component from Astro Starlight for syntax highlighting.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/rate-limiting/reference/sveltekit/HookAllRoutes.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport HookAllRoutes from \"./HookAllRoutes.ts?raw\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={HookAllRoutes} lang=\"ts\" title=\"/src/hooks.server.ts\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Executing cURL Command for Header Inspection\nDESCRIPTION: This command uses curl to make a HEAD request to localhost:5173, displaying only the headers of the response. The -I flag instructs curl to fetch the headers only, while -X GET specifies the HTTP method.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/nosecone/quick-start/sveltekit/Step4.mdx#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncurl -I -X GET localhost:5173\n```\n\n----------------------------------------\n\nTITLE: Starting Bun Server with Hot Reloading (JavaScript)\nDESCRIPTION: Command to start a Bun server with hot reloading enabled for a JavaScript file. This allows for immediate updates to the server as changes are made to the code.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/rate-limiting/quick-start/bun/Step4.mdx#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nbun run --hot index.js\n```\n\n----------------------------------------\n\nTITLE: Importing SelectableContent Component in JavaScript\nDESCRIPTION: This snippet imports the SelectableContent component from a local file. The component is likely used to render selectable content based on the user's package manager preference.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/get-started/node-js-express/Step1.mdx#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\n```\n\n----------------------------------------\n\nTITLE: Starting Application with NPM\nDESCRIPTION: Command to start the application using NPM package manager\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/signup-protection/quick-start/nestjs/Step4.mdx#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Installing Arcjet Packages with Yarn\nDESCRIPTION: Command to install @arcjet/next and @arcjet/inspect packages using Yarn package manager.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/shield/quick-start/nextjs/Step1.mdx#2025-04-12_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @arcjet/next @arcjet/inspect\n```\n\n----------------------------------------\n\nTITLE: Installing Arcjet SvelteKit Packages with pnpm\nDESCRIPTION: Command to install @arcjet/sveltekit and @arcjet/inspect packages using pnpm package manager.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/signup-protection/quick-start/sveltekit/Step1.mdx#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npnpm add @arcjet/sveltekit @arcjet/inspect\n```\n\n----------------------------------------\n\nTITLE: Installing Arcjet packages with yarn\nDESCRIPTION: Installs the @arcjet/node and @arcjet/inspect packages using yarn package manager.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/quick-start/nodejs/Step1.mdx#2025-04-12_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @arcjet/node @arcjet/inspect\n```\n\n----------------------------------------\n\nTITLE: SelectableContent Component Implementation\nDESCRIPTION: React/JSX implementation using SelectableContent component to create a tabbed interface for different package manager installation methods. The component uses slots for npm, pnpm, and yarn content.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/nosecone/quick-start/node-js/Step1.mdx#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\n\n{/* prettier-ignore */}\n<SelectableContent client:load syncKey=\"packageManager\" frameworkSwitcher>\n<div slot=\"npm\" slotIdx=\"1\">\n</div>\n<div slot=\"pnpm\" slotIdx=\"2\">\n</div>\n<div slot=\"yarn\" slotIdx=\"3\">\n</div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Sample HTTP Response Headers\nDESCRIPTION: Example output showing HTTP response headers including various security policies like Content-Security-Policy, CORS settings, and other security-related headers.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/nosecone/quick-start/bun/Step4.mdx#2025-04-12_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Security-Policy: base-uri 'none'; child-src 'none'; connect-src 'self'; default-src 'self'; font-src 'self'; form-action 'self'; frame-ancestors 'none'; frame-src 'none'; img-src 'self' blob: data:; manifest-src 'self'; media-src 'self'; object-src 'none'; script-src 'self'; style-src 'self'; worker-src 'self'; upgrade-insecure-requests;\nCross-Origin-Embedder-Policy: require-corp\nCross-Origin-Opener-Policy: same-origin\nCross-Origin-Resource-Policy: same-origin\nReferrer-Policy: no-referrer\nX-Content-Type-Options: nosniff\nX-DNS-Prefetch-Control: off\nX-Frame-Options: SAMEORIGIN\nX-XSS-Protection: 0\norigin-agent-cluster: ?1\nx-download-options: noopen\nx-permitted-cross-domain-policies: none\ncontent-type: text/plain;charset=utf-8\nDate: Wed, 27 Nov 2024 20:13:30 GMT\nContent-Length: 11\n```\n\n----------------------------------------\n\nTITLE: Setting Arcjet Environment Variables\nDESCRIPTION: Configuration of environment variables for Arcjet, including development environment flag and API key settings. These settings are necessary for local development and API authentication.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/shield/quick-start/shared/Step2SetEnv.mdx#2025-04-12_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n# NODE_ENV is not set automatically, so tell Arcjet we're in dev\n# You can leave this unset in prod\nARCJET_ENV=development\n# Get your site key from https://app.arcjet.com\nARCJET_KEY=ajkey_yourkey\n```\n\n----------------------------------------\n\nTITLE: Rendering Selectable Code Snippets with JSX\nDESCRIPTION: This JSX snippet uses the SelectableContent component to render selectable TypeScript and JavaScript code snippets. It uses the Code component from Starlight to display the code with proper syntax highlighting.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/reference/bun/IdentifiedBots.mdx#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={IdentifiedBotsTS} lang=\"ts\" />\n  </div>\n  <div slot=\"JS\" slotIdx=\"2\">\n    <Code code={IdentifiedBotsJS} lang=\"js\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Raw Code Files in JSX\nDESCRIPTION: This snippet imports necessary components and raw code files for displaying selectable code examples. It uses dynamic imports with the ?raw suffix to import the code as strings.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/signup-protection/reference/nextjs/Errors.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport ErrorHandlingAppJS from \"./ErrorHandlingApp.js?raw\";\nimport ErrorHandlingAppTS from \"./ErrorHandlingApp.ts?raw\";\nimport ErrorHandlingPagesJS from \"./ErrorHandlingPages.js?raw\";\nimport ErrorHandlingPagesTS from \"./ErrorHandlingPages.ts?raw\";\n```\n\n----------------------------------------\n\nTITLE: Installing Arcjet Remix SDK using npm\nDESCRIPTION: Command to install Arcjet Remix SDK and the inspect utility using npm package manager.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/shield/quick-start/remix/Step1.mdx#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i @arcjet/remix @arcjet/inspect\n```\n\n----------------------------------------\n\nTITLE: Installing @arcjet/nest with pnpm\nDESCRIPTION: Command to install the @arcjet/nest package using pnpm package manager.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/quick-start/nestjs/Step1.mdx#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npnpm add @arcjet/nest\n```\n\n----------------------------------------\n\nTITLE: Starting Arcjet App with Yarn\nDESCRIPTION: Command to start the Arcjet application development server using Yarn.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/rate-limiting/quick-start/remix/Step4.mdx#2025-04-12_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nyarn run dev\n```\n\n----------------------------------------\n\nTITLE: Starting Dev Server with Yarn\nDESCRIPTION: Command to start the development server using Yarn package manager.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/shield/quick-start/remix/Step4.mdx#2025-04-12_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nyarn run dev\n```\n\n----------------------------------------\n\nTITLE: Implementing Selectable Token Bucket Display in AstroJS\nDESCRIPTION: Component implementation that allows displaying TokenBucket code with language selection functionality. Uses SelectableContent for framework switching and Code component from Starlight for syntax highlighting.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/rate-limiting/reference/remix/TokenBucket.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport TokenBucket from \"./TokenBucket.ts?raw\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={TokenBucket} lang=\"ts\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Rendering Version Support Components in JSX/HTML\nDESCRIPTION: Basic JSX/HTML markup that renders two components: NodeVersions for displaying version compatibility information and Comments for user feedback.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/reference/remix.mdx#2025-04-12_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\n<NodeVersions />\n\n<Comments />\n```\n\n----------------------------------------\n\nTITLE: Starting Next.js App with NPM\nDESCRIPTION: Command to start a Next.js development server using NPM package manager. After running, the application will be accessible at http://localhost:3000.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/email-validation/quick-start/nextjs/Step4.mdx#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Implementing SelectableContent Component with TypeScript Code Display\nDESCRIPTION: This code snippet uses a SelectableContent component with client-side loading to display TypeScript code. The component uses a sync key for language selection and includes a framework switcher, showing the SlidingWindow.ts content within a Code component.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/rate-limiting/reference/remix/SlidingWindow.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport SlidingWindow from \"./SlidingWindow.ts?raw\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={SlidingWindow} lang=\"ts\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Rendering Selectable TypeScript and JavaScript Code Snippets\nDESCRIPTION: This snippet uses the SelectableContent component to render code snippets in both TypeScript and JavaScript. It allows users to switch between the two languages and displays the code using Astro's Code component.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/shield/reference/sveltekit/Errors.mdx#2025-04-12_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={ErrorsTS} lang=\"ts\" title=\"/src/routes/api/arcjet/+server.ts\" />\n  </div>\n  <div slot=\"JS\" slotIdx=\"2\">\n    <Code code={ErrorsJS} lang=\"js\" title=\"/src/routes/api/arcjet/+server.js\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Installing Arcjet Nest.js Package with npm\nDESCRIPTION: Command to install the @arcjet/nest package using npm package manager.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/shield/quick-start/nestjs/Step1.mdx#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i @arcjet/nest\n```\n\n----------------------------------------\n\nTITLE: Starting Arcjet App with pnpm\nDESCRIPTION: Command to start the Arcjet application using pnpm package manager.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/get-started/sveltekit/Step4.mdx#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Installing @arcjet/nest with npm\nDESCRIPTION: Command to install the @arcjet/nest package using npm package manager\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/get-started/nest-js/Step1.mdx#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i @arcjet/nest\n```\n\n----------------------------------------\n\nTITLE: Testing Signup Endpoint with Curl\nDESCRIPTION: Example curl command to test the signup endpoint by sending a POST request with an email parameter to the local server\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/signup-protection/quick-start/nestjs/Step4.mdx#2025-04-12_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST -d 'email=test@arcjet.io' http://localhost:3000/signup\n```\n\n----------------------------------------\n\nTITLE: Sample HTTP Response Headers\nDESCRIPTION: This snippet shows an example of the HTTP headers returned from the local server. It includes various security headers, content type, and other standard HTTP response headers.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/nosecone/quick-start/sveltekit/Step4.mdx#2025-04-12_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\ncontent-length: 1475\ncontent-security-policy: child-src 'none'; default-src 'self'; frame-src 'none'; worker-src 'self'; connect-src 'self'; font-src 'self'; img-src 'self' blob: data:; manifest-src 'self'; media-src 'self'; object-src 'none'; script-src 'self' 'nonce-RsMu23BBsCD1PV101d7Prg=='; style-src 'self' 'unsafe-inline'; base-uri 'none'; form-action 'self'; frame-ancestors 'none'; upgrade-insecure-requests\ncontent-type: text/html\ncross-origin-embedder-policy: require-corp\ncross-origin-opener-policy: same-origin\ncross-origin-resource-policy: same-origin\netag: \"bz71zn\"\norigin-agent-cluster: ?1\nreferrer-policy: no-referrer\nstrict-transport-security: max-age=31536000; includeSubDomains\nx-content-type-options: nosniff\nx-dns-prefetch-control: off\nx-download-options: noopen\nx-frame-options: SAMEORIGIN\nx-permitted-cross-domain-policies: none\nx-sveltekit-page: true\nx-xss-protection: 0\nDate: Wed, 27 Nov 2024 15:23:13 GMT\nConnection: keep-alive\nKeep-Alive: timeout=5\n```\n\n----------------------------------------\n\nTITLE: Implementing Language Selection for Code Examples with React\nDESCRIPTION: This code uses a SelectableContent component to allow users to switch between TypeScript and JavaScript error examples. The component imports raw code files and renders them using the Code component from Starlight, with slots for each language option.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/sensitive-info/reference/bun/Errors.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport ErrorsJS from \"./Errors.js?raw\";\nimport ErrorsTS from \"./Errors.ts?raw\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={ErrorsTS} lang=\"ts\" />\n  </div>\n  <div slot=\"JS\" slotIdx=\"2\">\n    <Code code={ErrorsJS} lang=\"js\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Implementing Language-Switchable Code Display with Astro Components\nDESCRIPTION: Renders a selectable code display component that toggles between TypeScript and JavaScript implementations. Uses Astro's Starlight Code component with syntax highlighting and marked lines for ARCJET_KEY.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/signup-protection/quick-start/bun/Step3.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Step3TS from \"./Step3.ts?raw\";\nimport Step3JS from \"./Step3.js?raw\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport SelectableContent from \"@/components/SelectableContent\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n\n  <Fragment slot=\"TS\">\n    <Code code={Step3TS} lang=\"ts\" mark={[\"ARCJET_KEY\"]} />\n  </Fragment>\n  <Fragment slot=\"JS\">\n    <Code code={Step3JS} lang=\"js\" mark={[\"ARCJET_KEY\"]} />\n  </Fragment>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Installing Arcjet Node packages with yarn\nDESCRIPTION: Installs the required Arcjet Node packages (@arcjet/node and @arcjet/inspect) using yarn package manager.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/rate-limiting/quick-start/nodejs/Step1.mdx#2025-04-12_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @arcjet/node @arcjet/inspect\n```\n\n----------------------------------------\n\nTITLE: Installing Arcjet Packages with yarn\nDESCRIPTION: Command to install Arcjet Next.js integration and inspect packages using yarn package manager.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/sensitive-info/quick-start/nextjs/Step1.mdx#2025-04-12_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @arcjet/next @arcjet/inspect\n```\n\n----------------------------------------\n\nTITLE: Implementing a Selectable Content Component with TypeScript Code Display in React\nDESCRIPTION: This code snippet demonstrates how to implement a selectable content component in React that displays TypeScript code. It imports a raw TypeScript file and uses the Starlight Code component to render it within a selectable interface.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/rate-limiting/reference/sveltekit/FixedWindow.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport FixedWindow from \"./FixedWindow.ts?raw\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={FixedWindow} lang=\"ts\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Using Deno serve Command Reference\nDESCRIPTION: Code reference showing the minimum required version (2.0+) for using Deno's serve command\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/get-started/deno/Requirements.mdx#2025-04-12_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nserve\n```\n\n----------------------------------------\n\nTITLE: Testing Arcjet Rate Limiting with cURL\nDESCRIPTION: This command uses cURL to send a request to the local Arcjet-protected server. It's used to test the rate limiting functionality after waiting for the cache interval.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/get-started/bun/Step4.mdx#2025-04-12_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncurl -v http://localhost:3000\n```\n\n----------------------------------------\n\nTITLE: Default X-Content-Type-Options Configuration\nDESCRIPTION: Default value for X-Content-Type-Options header configuration.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/nosecone/reference.mdx#2025-04-12_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\ntrue;\n```\n\n----------------------------------------\n\nTITLE: Starting Arcjet App with yarn\nDESCRIPTION: Command to start the Arcjet application using yarn package manager.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/get-started/sveltekit/Step4.mdx#2025-04-12_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nyarn run dev\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Raw Code Files in JavaScript\nDESCRIPTION: This snippet imports the required components and raw code files for rendering selectable content. It uses dynamic imports for the DecisionLog files in both TypeScript and JavaScript formats.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/rate-limiting/reference/remix/DecisionLog.mdx#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport DecisionLogJS from \"./DecisionLog.js?raw\";\nimport DecisionLogTS from \"./DecisionLog.ts?raw\";\n```\n\n----------------------------------------\n\nTITLE: Setting up Arcjet API key in .env.local file\nDESCRIPTION: This snippet demonstrates how to configure the Arcjet API key in a .env.local file. The ARCJET_KEY environment variable is set with the API key that begins with 'ajkey_' prefix.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/sensitive-info/quick-start/shared/Step2.mdx#2025-04-12_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nARCJET_KEY=ajkey_yourkey\n```\n\n----------------------------------------\n\nTITLE: Implementing Language Selection for Code Examples using SelectableContent in React\nDESCRIPTION: This code sets up a component that enables users to switch between TypeScript and JavaScript code examples. It imports raw code files and displays them using the Code component from Starlight, wrapped in a SelectableContent component that synchronizes the selected language across instances.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/shield/reference/sveltekit/Hooks.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport HooksTS from \"./Hooks.ts?raw\";\nimport HooksJS from \"./Hooks.js?raw\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={HooksTS} lang=\"ts\" title=\"/src/hooks.server.ts\" />\n  </div>\n  <div slot=\"JS\" slotIdx=\"2\">\n    <Code code={HooksJS} lang=\"js\" title=\"/src/hooks.server.js\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Installing @arcjet/nest with npm\nDESCRIPTION: This command installs the @arcjet/nest package using npm (Node Package Manager). It adds the package to the project's dependencies.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/sensitive-info/quick-start/nestjs/Step1.mdx#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i @arcjet/nest\n```\n\n----------------------------------------\n\nTITLE: Installing Arcjet Node Modules with yarn\nDESCRIPTION: Command to install @arcjet/node and @arcjet/inspect packages using yarn package manager.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/shield/quick-start/nodejs/Step1.mdx#2025-04-12_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @arcjet/node @arcjet/inspect\n```\n\n----------------------------------------\n\nTITLE: Installing Arcjet Node Modules with pnpm\nDESCRIPTION: Command to install @arcjet/node and @arcjet/inspect packages using pnpm package manager.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/shield/quick-start/nodejs/Step1.mdx#2025-04-12_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npnpm add @arcjet/node @arcjet/inspect\n```\n\n----------------------------------------\n\nTITLE: Installing Arcjet Remix SDK using pnpm\nDESCRIPTION: Command to install Arcjet Remix SDK and the inspect utility using pnpm package manager.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/shield/quick-start/remix/Step1.mdx#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npnpm add @arcjet/remix @arcjet/inspect\n```\n\n----------------------------------------\n\nTITLE: Installing Arcjet Nest.js Package with pnpm\nDESCRIPTION: Command to install the @arcjet/nest package using pnpm package manager.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/shield/quick-start/nestjs/Step1.mdx#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npnpm add @arcjet/nest\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Selectable Code Snippets in Astro\nDESCRIPTION: This code imports raw code content and Astro components to create a selectable interface for displaying code snippets. It uses the SelectableContent component to allow switching between TypeScript and JavaScript versions of the code.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/email-validation/quick-start/bun/Step3.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Step3TS from \"./Step3.ts?raw\";\nimport Step3JS from \"./Step3.js?raw\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport SelectableContent from \"@/components/SelectableContent\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={Step3TS} lang=\"ts\" title=\"index.ts\" />\n  </div>\n  <div slot=\"JS\" slotIdx=\"2\">\n    <Code code={Step3JS} lang=\"js\" title=\"index.js\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Deprecated protect() Warning Message\nDESCRIPTION: Example of the warning message shown when calling protect() without explicit rules configuration.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/troubleshooting.mdx#2025-04-12_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nCalling `protect()` with no rules is deprecated. Did you mean to configure the Shield rule?\n```\n\n----------------------------------------\n\nTITLE: Setting Arcjet Environment Variables in .env.local\nDESCRIPTION: This code snippet demonstrates how to configure Arcjet environment variables in a .env.local file. It sets the ARCJET_ENV to development and includes a placeholder for the ARCJET_KEY.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/rate-limiting/quick-start/bun/Step2.mdx#2025-04-12_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n# NODE_ENV is not set automatically, so tell Arcjet we're in dev\n# You can leave this unset in prod\nARCJET_ENV=development\n# Get your site key from https://app.arcjet.com\nARCJET_KEY=ajkey_yourkey\n```\n\n----------------------------------------\n\nTITLE: Rendering Selectable Code Snippets with SelectableContent Component\nDESCRIPTION: This snippet uses the SelectableContent component to render code snippets in TypeScript and JavaScript. It sets up client-side interactivity and synchronization, allowing users to switch between language versions of the code.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/signup-protection/reference/remix/CustomVerification.mdx#2025-04-12_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={CustomVerificationTS} lang=\"ts\" />\n  </div>\n  <div slot=\"JS\" slotIdx=\"2\">\n    <Code code={CustomVerificationJS} lang=\"js\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Using SelectableContent component with package manager options\nDESCRIPTION: JSX component implementation that provides switchable content based on the selected package manager. This component uses slots to define content for different package managers and allows for client-side rendering with synchronization.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/sensitive-info/quick-start/sveltekit/Step1.mdx#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\n\n{/* prettier-ignore */}\n<SelectableContent client:load syncKey=\"packageManager\" frameworkSwitcher>\n<div slot=\"npm\" slotIdx=\"1\">\n\n```sh\nnpm i @arcjet/sveltekit @arcjet/inspect\n```\n\n</div>\n<div slot=\"pnpm\" slotIdx=\"2\">\n\n```sh\npnpm add @arcjet/sveltekit @arcjet/inspect\n```\n\n</div>\n<div slot=\"yarn\" slotIdx=\"3\">\n\n```sh\nyarn add @arcjet/sveltekit @arcjet/inspect\n```\n\n</div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Installing Arcjet with PNPM\nDESCRIPTION: Installs Arcjet SvelteKit integration and inspection packages using PNPM package manager\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/get-started/sveltekit/Step1.mdx#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npnpm add @arcjet/sveltekit @arcjet/inspect\n```\n\n----------------------------------------\n\nTITLE: Installing Arcjet packages with pnpm\nDESCRIPTION: Command to install Arcjet Next.js and Inspect packages using pnpm package manager\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/get-started/next-js/Step1.mdx#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npnpm add @arcjet/next @arcjet/inspect\n```\n\n----------------------------------------\n\nTITLE: Starting Application with PNPM\nDESCRIPTION: Command to start the application using PNPM package manager\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/signup-protection/quick-start/nestjs/Step4.mdx#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npnpm run start\n```\n\n----------------------------------------\n\nTITLE: Installing Arcjet Node Packages with npm\nDESCRIPTION: This snippet shows how to install @arcjet/node and @arcjet/inspect packages using npm. It uses the npm install command.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/signup-protection/quick-start/nodejs/Step1.mdx#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i @arcjet/node @arcjet/inspect\n```\n\n----------------------------------------\n\nTITLE: Installing Arcjet Dependencies for Bun\nDESCRIPTION: This command installs the @arcjet/bun and @arcjet/inspect packages using the Bun package manager. These packages are likely essential for integrating Arcjet functionality into a Bun project.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/shield/quick-start/bun/Step1.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbun add @arcjet/bun @arcjet/inspect\n```\n\n----------------------------------------\n\nTITLE: Configuring X-Download-Options Type Definition\nDESCRIPTION: TypeScript type definition for legacy X-Download-Options header configuration that prevents direct file opening in Internet Explorer.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/nosecone/reference.mdx#2025-04-12_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\ntype DownloadOptionsCofig = boolean;\n```\n\n----------------------------------------\n\nTITLE: Importing and Using YouTube Component from astro-embed\nDESCRIPTION: Demonstrates how to import the YouTube component from astro-embed package and use it to embed a video with specific ID and title parameters\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/rate-limiting/quick-start/nextjs/VideoQuickStart.mdx#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { YouTube } from \"astro-embed\";\n\n<YouTube\n  id=\"umEz1JrmiOc\"\n  title=\"Rate limiting & bot detection for Next.js in 10 mins\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Selectable Code Blocks in JSX\nDESCRIPTION: Imports code components and raw code files, then renders them in a selectable interface that allows switching between TypeScript and JavaScript versions using SelectableContent component.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/rate-limiting/reference/sveltekit/Headers.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Code } from \"@astrojs/starlight/components\";\nimport SelectableContent from \"@/components/SelectableContent\";\nimport HeadersTS from \"./Headers.ts?raw\";\nimport HeadersJS from \"./Headers.js?raw\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={HeadersTS} lang=\"ts\" />\n  </div>\n  <div slot=\"JS\" slotIdx=\"3\">\n    <Code code={HeadersJS} lang=\"js\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Setting Arcjet API Key in INI Configuration\nDESCRIPTION: This snippet sets the ARCJET_KEY environment variable to a placeholder value. The actual API key should be replaced with a valid key obtained from Arcjet for authentication purposes.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/email-validation/quick-start/shared/Step2.mdx#2025-04-12_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nARCJET_KEY=ajkey_yourkey\n```\n\n----------------------------------------\n\nTITLE: Importing SelectableContent Component in JSX\nDESCRIPTION: This snippet imports the SelectableContent component from a local file. The component is likely used to create selectable or switchable content blocks in the UI.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/get-started/deno/Step1.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\n```\n\n----------------------------------------\n\nTITLE: Installing @arcjet/nest with npm\nDESCRIPTION: This command installs the @arcjet/nest package using npm (Node Package Manager). It adds the package to the project's dependencies.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/signup-protection/quick-start/nestjs/Step1.mdx#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm i @arcjet/nest\n```\n\n----------------------------------------\n\nTITLE: Installing Arcjet Node packages with pnpm\nDESCRIPTION: Installs the required Arcjet Node packages (@arcjet/node and @arcjet/inspect) using pnpm package manager.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/rate-limiting/quick-start/nodejs/Step1.mdx#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npnpm add @arcjet/node @arcjet/inspect\n```\n\n----------------------------------------\n\nTITLE: Making a POST Request to Test Arcjet Application\nDESCRIPTION: This curl command sends a POST request to the local Arcjet application's signup endpoint with a test email. It's used to test the application's response to various email inputs.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/email-validation/quick-start/nestjs/Step4.mdx#2025-04-12_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST -d 'email=test@arcjet.io' http://localhost:3000/signup/\n```\n\n----------------------------------------\n\nTITLE: Installing Nosecone Package in Deno from npm Registry\nDESCRIPTION: This command adds the Nosecone package to a Deno project using the npm registry. It utilizes Deno's built-in package management system to install the package directly from npm.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/nosecone/quick-start/deno/Step1.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndeno add npm:nosecone\n```\n\n----------------------------------------\n\nTITLE: Initializing SvelteKit Project using CLI\nDESCRIPTION: This command uses npx to create a new SvelteKit project named 'my-app'. It initializes the project structure and installs necessary dependencies.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/get-started/sveltekit/Step0.mdx#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx sv create my-app\n```\n\n----------------------------------------\n\nTITLE: Rendering Selectable TypeScript and JavaScript Code Snippets\nDESCRIPTION: This snippet demonstrates the usage of the SelectableContent component to display switchable TypeScript and JavaScript code examples. It uses slots to define the content for each language option.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/rate-limiting/reference/remix/ByUserId.mdx#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={ByUserIdTS} lang=\"ts\" />\n  </div>\n  <div slot=\"JS\" slotIdx=\"2\">\n    <Code code={ByUserIdJS} lang=\"js\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Installing Arcjet Node Packages with Yarn\nDESCRIPTION: This snippet shows how to install @arcjet/node and @arcjet/inspect packages using Yarn. It uses the yarn add command.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/signup-protection/quick-start/nodejs/Step1.mdx#2025-04-12_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @arcjet/node @arcjet/inspect\n```\n\n----------------------------------------\n\nTITLE: CommonJS Module Warning Message\nDESCRIPTION: Warning message displayed when there's a module system mismatch between CommonJS and ECMAScript modules.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/troubleshooting.mdx#2025-04-12_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nThe current file is a CommonJS module whose imports will produce 'require'\ncalls; however, the referenced file is an ECMAScript module and cannot be\nimported with 'require'.\n```\n\n----------------------------------------\n\nTITLE: Starting Bun Server with Hot Reload\nDESCRIPTION: Commands to start a Node.js server using Bun runtime with hot reload enabled for both TypeScript and JavaScript versions.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/signup-protection/quick-start/bun/Step4.mdx#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nbun run --hot index.ts\n```\n\nLANGUAGE: sh\nCODE:\n```\nbun run --hot index.js\n```\n\n----------------------------------------\n\nTITLE: Installing Arcjet packages with pnpm\nDESCRIPTION: Command to install @arcjet/node and @arcjet/inspect packages using pnpm package manager.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/sensitive-info/quick-start/nodejs/Step1.mdx#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npnpm add @arcjet/node @arcjet/inspect\n```\n\n----------------------------------------\n\nTITLE: Installing @arcjet/nest with yarn\nDESCRIPTION: Command to install the @arcjet/nest package using yarn package manager.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/quick-start/nestjs/Step1.mdx#2025-04-12_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @arcjet/nest\n```\n\n----------------------------------------\n\nTITLE: Arcjet Shield Rule Result Log\nDESCRIPTION: The log output from Arcjet after sending multiple suspicious requests. It shows a rule result with DENY conclusion but a final ALLOW decision because the rule is in DRY_RUN state.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/shield/quick-start/nestjs/Step5.mdx#2025-04-12_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nRule Result ArcjetRuleResult {\n   ttl: 0,\n   state: 'DRY_RUN',\n   conclusion: 'DENY',\n   reason: ArcjetShieldReason { type: 'SHIELD', shieldTriggered: true }\n}\nConclusion ALLOW\n```\n\n----------------------------------------\n\nTITLE: Importing Images in JavaScript for Arcjet Documentation\nDESCRIPTION: This code snippet imports various image assets for use in the Arcjet architecture documentation. It includes images for different themes (dark and light) and various example scenarios.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/architecture.mdx#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ImageExampleLocalAnalysisDark from \"src/assets/architecture/example-local-analysis-dark.png\";\nimport ImageExampleLocalAnalysisLight from \"src/assets/architecture/example-local-analysis-light.png\";\nimport ImageExampleRateLimitRuleAllowDark from \"/src/assets/architecture/example-rate-limit-rule-allow-dark.png\";\nimport ImageExampleRateLimitRuleAllowLight from \"/src/assets/architecture/example-rate-limit-rule-allow-light.png\";\nimport ImageExampleRateLimitRuleDenyDark from \"/src/assets/architecture/example-rate-limit-rule-deny-dark.png\";\nimport ImageExampleRateLimitRuleDenyLight from \"/src/assets/architecture/example-rate-limit-rule-deny-light.png\";\nimport ImageExampleRateLimitRuleDenyCachedDark from \"/src/assets/architecture/example-rate-limit-rule-deny-cached-dark.png\";\nimport ImageExampleRateLimitRuleDenyCachedLight from \"/src/assets/architecture/example-rate-limit-rule-deny-cached-light.png\";\nimport ImageRequestAnalysisDark from \"/src/assets/architecture/request-analysis-dark.png\";\nimport ImageRequestAnalysisLight from \"/src/assets/architecture/request-analysis-light.png\";\nimport ImageCDNDark from \"/src/assets/architecture/security-cdn-architecture-dark.png\";\nimport ImageCDNLight from \"/src/assets/architecture/security-cdn-architecture-light.png\";\nimport Comments from \"/src/components/Comments.astro\";\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Selectable Code Examples in Astro\nDESCRIPTION: Implements a selectable content component that allows users to switch between TypeScript and JavaScript code examples. Uses Astro's Starlight Code component and imports raw code files for display.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/rate-limiting/reference/bun/DecisionLog.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport DecisionLogJS from \"./DecisionLog.js?raw\";\nimport DecisionLogTS from \"./DecisionLog.ts?raw\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={DecisionLogTS} lang=\"ts\" />\n  </div>\n  <div slot=\"JS\" slotIdx=\"2\">\n    <Code code={DecisionLogJS} lang=\"js\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Importing SelectableContent Component in JSX\nDESCRIPTION: This snippet imports the SelectableContent component from a local file path. The component is likely used to create selectable content blocks for different package managers.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/quick-start/sveltekit/Step1.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\n```\n\n----------------------------------------\n\nTITLE: Installing Arcjet Packages with pnpm\nDESCRIPTION: Command to install @arcjet/next and @arcjet/inspect packages using pnpm package manager.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/signup-protection/quick-start/nextjs/Step1.mdx#2025-04-12_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\npnpm add @arcjet/next @arcjet/inspect\n```\n\n----------------------------------------\n\nTITLE: Installing Arcjet packages for SvelteKit using yarn\nDESCRIPTION: Command to install @arcjet/sveltekit and @arcjet/inspect packages using yarn package manager.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/sensitive-info/quick-start/sveltekit/Step1.mdx#2025-04-12_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @arcjet/sveltekit @arcjet/inspect\n```\n\n----------------------------------------\n\nTITLE: Installing Arcjet with NPM\nDESCRIPTION: Installs Arcjet SvelteKit integration and inspection packages using NPM package manager\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/get-started/sveltekit/Step1.mdx#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i @arcjet/sveltekit @arcjet/inspect\n```\n\n----------------------------------------\n\nTITLE: Installing Arcjet Packages with NPM\nDESCRIPTION: Installs @arcjet/next and @arcjet/inspect packages using NPM package manager.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/email-validation/quick-start/nextjs/Step1.mdx#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i @arcjet/next @arcjet/inspect\n```\n\n----------------------------------------\n\nTITLE: Starting Arcjet App with npm\nDESCRIPTION: Command to start the Arcjet application using npm package manager.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/get-started/sveltekit/Step4.mdx#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Starting Arcjet App with Package Managers\nDESCRIPTION: Commands to start an Arcjet application using different package managers (npm, pnpm, or yarn).\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/rate-limiting/quick-start/nestjs/Step4.mdx#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm run start\n```\n\nLANGUAGE: sh\nCODE:\n```\npnpm run start\n```\n\nLANGUAGE: sh\nCODE:\n```\nyarn run start\n```\n\n----------------------------------------\n\nTITLE: Starting TypeScript Server with Environment File\nDESCRIPTION: Command to start a TypeScript server using tsx with environment variables loaded from .env.local file. Requires Node.js and tsx package.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/rate-limiting/quick-start/nodejs/Step4.mdx#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx tsx --env-file .env.local index.ts\n```\n\n----------------------------------------\n\nTITLE: Implementing Selectable Code Snippets with Next.js\nDESCRIPTION: This snippet uses the SelectableContent component to display code snippets for different TypeScript and JavaScript implementations in Next.js App Router and Pages Router. It allows users to switch between different versions of the code.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/reference/nextjs/AllowingBots.mdx#2025-04-12_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS (App)\" slotIdx=\"1\">\n    <Code code={AllowingBotsAppTS} lang=\"ts\" title=\"/app/api/arcjet/route.ts\" />\n  </div>\n  <div slot=\"TS (Pages)\" slotIdx=\"2\">\n    <Code code={AllowingBotsPagesTS} lang=\"ts\" title=\"/pages/api/hello.ts\" />\n  </div>\n  <div slot=\"JS (App)\" slotIdx=\"3\">\n    <Code code={AllowingBotsAppJS} lang=\"js\" title=\"/app/api/arcjet/route.js\" />\n  </div>\n  <div slot=\"JS (Pages)\" slotIdx=\"4\">\n    <Code code={AllowingBotsPagesJS} lang=\"js\" title=\"/pages/api/hello.ts\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Raw Code Files for Selectable Content\nDESCRIPTION: This snippet imports the required components and raw code files for rendering selectable content. It uses dynamic imports to load TypeScript and JavaScript code examples.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/reference/sveltekit/Errors.mdx#2025-04-12_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport ErrorsJS from \"./Errors.js?raw\";\nimport ErrorsTS from \"./Errors.ts?raw\";\n```\n\n----------------------------------------\n\nTITLE: Installing Arcjet packages with npm\nDESCRIPTION: Installs the @arcjet/node and @arcjet/inspect packages using npm package manager.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/quick-start/nodejs/Step1.mdx#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i @arcjet/node @arcjet/inspect\n```\n\n----------------------------------------\n\nTITLE: Installing Arcjet SDK for Next.js with NPM\nDESCRIPTION: Command to install the Arcjet SDK package for Next.js applications using NPM.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/public/llms.txt#2025-04-12_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm i @arcjet/next\n```\n\n----------------------------------------\n\nTITLE: Installing Arcjet Packages with Yarn\nDESCRIPTION: Installs @arcjet/next and @arcjet/inspect packages using Yarn package manager.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/email-validation/quick-start/nextjs/Step1.mdx#2025-04-12_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @arcjet/next @arcjet/inspect\n```\n\n----------------------------------------\n\nTITLE: Installing Arcjet Packages with Yarn\nDESCRIPTION: This command installs the @arcjet/node and @arcjet/inspect packages using Yarn package manager. It's part of a selectable content block for Yarn users.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/get-started/node-js/Step1.mdx#2025-04-12_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @arcjet/node @arcjet/inspect\n```\n\n----------------------------------------\n\nTITLE: Importing Arcjet Configuration Components\nDESCRIPTION: Import statements for loading TypeScript and JavaScript route configurations along with necessary Starlight and custom components\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/signup-protection/quick-start/remix/Step3.mdx#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Step3TS from \"./Step3.tsx?raw\";\nimport Step3JS from \"./Step3.jsx?raw\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport SelectableContent from \"@/components/SelectableContent\";\n```\n\n----------------------------------------\n\nTITLE: Rendering Selectable Package Manager Installation Commands in JSX\nDESCRIPTION: This snippet uses a SelectableContent component to display installation commands for the @arcjet/nest package using different package managers. The component allows users to switch between npm, pnpm, and yarn commands.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/signup-protection/quick-start/nestjs/Step1.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<SelectableContent client:load syncKey=\"packageManager\" frameworkSwitcher>\n<div slot=\"npm\" slotIdx=\"1\">\n\n```sh\nnpm i @arcjet/nest\n```\n\n</div>\n<div slot=\"pnpm\" slotIdx=\"2\">\n\n```sh\npnpm add @arcjet/nest\n```\n\n</div>\n<div slot=\"yarn\" slotIdx=\"3\">\n\n```sh\nyarn add @arcjet/nest\n```\n\n</div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Rendering Selectable TypeScript and JavaScript Code Content in Astro\nDESCRIPTION: This JSX snippet uses the SelectableContent component to create a switchable view between TypeScript and JavaScript code snippets. It utilizes the Code component from Starlight to render the code with proper syntax highlighting.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/signup-protection/reference/bun/Errors.mdx#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={ErrorsTS} lang=\"ts\" />\n  </div>\n  <div slot=\"JS\" slotIdx=\"2\">\n    <Code code={ErrorsJS} lang=\"js\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Installing Arcjet packages with npm\nDESCRIPTION: Command to install Arcjet Next.js and Inspect packages using npm package manager\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/get-started/next-js/Step1.mdx#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i @arcjet/next @arcjet/inspect\n```\n\n----------------------------------------\n\nTITLE: Starting SvelteKit App with PNPM\nDESCRIPTION: Command to start a SvelteKit application in development mode using pnpm package manager.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/quick-start/sveltekit/Step4.mdx#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Starting Arcjet Application with yarn\nDESCRIPTION: Runs the development server for an Arcjet application using yarn.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/quick-start/remix/Step4.mdx#2025-04-12_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nyarn run dev\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Selectable Code Content in Astro\nDESCRIPTION: Implementation of a SelectableContent component that allows switching between TypeScript and JavaScript code examples using Astro/Starlight's Code component. The code imports raw content files and renders them in selectable tabs.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/shield/reference/remix/Errors.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport ErrorsJS from \"./Errors.js?raw\";\nimport ErrorsTS from \"./Errors.ts?raw\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={ErrorsTS} lang=\"ts\" />\n  </div>\n  <div slot=\"JS\" slotIdx=\"2\">\n    <Code code={ErrorsJS} lang=\"js\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Importing SelectableContent Component in JavaScript\nDESCRIPTION: This snippet imports the SelectableContent component from a local file path. The component is likely used to create selectable content blocks for different package managers.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/email-validation/quick-start/sveltekit/Step1.mdx#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\n```\n\n----------------------------------------\n\nTITLE: Implementing Selectable Language Code Blocks with Astro/Starlight\nDESCRIPTION: Component setup that enables toggling between TypeScript and JavaScript code examples using the SelectableContent component. Imports raw code files and displays them using Starlight's Code component with appropriate language syntax highlighting.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/reference/remix/DenyingBots.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Code } from \"@astrojs/starlight/components\";\nimport SelectableContent from \"@/components/SelectableContent\";\nimport DenyingBotsTS from \"./DenyingBots.ts?raw\";\nimport DenyingBotsJS from \"./DenyingBots.js?raw\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={DenyingBotsTS} lang=\"ts\" />\n  </div>\n  <div slot=\"JS\" slotIdx=\"2\">\n    <Code code={DenyingBotsJS} lang=\"js\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Installing Arcjet Node Modules with npm\nDESCRIPTION: Command to install @arcjet/node and @arcjet/inspect packages using npm package manager.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/shield/quick-start/nodejs/Step1.mdx#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n    npm i @arcjet/node @arcjet/inspect\n```\n\n----------------------------------------\n\nTITLE: Starting Arcjet Application with npm\nDESCRIPTION: Runs the development server for an Arcjet application using npm.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/quick-start/remix/Step4.mdx#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Installing Arcjet Packages with yarn for Remix\nDESCRIPTION: This command installs the @arcjet/remix and @arcjet/inspect packages using yarn. It's another package manager option for setting up Arcjet in a Remix project.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/get-started/remix/Step1.mdx#2025-04-12_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @arcjet/remix @arcjet/inspect\n```\n\n----------------------------------------\n\nTITLE: Rendering Selectable Package Manager Installation Commands in React\nDESCRIPTION: This snippet shows a React component that renders selectable content for installing the @arcjet/nest package using different package managers. It uses the SelectableContent component with client-side rendering and synchronization.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/email-validation/quick-start/nestjs/Step1.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\n\n{/* prettier-ignore */}\n<SelectableContent client:load syncKey=\"packageManager\" frameworkSwitcher>\n<div slot=\"npm\" slotIdx=\"1\">\n```sh\nnpm i @arcjet/nest\n```\n</div>\n<div slot=\"pnpm\" slotIdx=\"2\">\n```sh\npnpm add @arcjet/nest\n```\n</div>\n<div slot=\"yarn\" slotIdx=\"3\">\n```sh\nyarn add @arcjet/nest\n```\n</div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Importing Components in Astro/JSX\nDESCRIPTION: Import statements for React/Astro components used in the documentation page including Badge, WhatIsArcjet, and Comments components.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/shield/concepts.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Badge } from \"@astrojs/starlight/components\";\nimport WhatIsArcjet from \"/src/components/WhatIsArcjet.astro\";\nimport Comments from \"/src/components/Comments.astro\";\n```\n\n----------------------------------------\n\nTITLE: Inserting Comments Component in Markdown\nDESCRIPTION: This code snippet inserts the Comments component at the end of the documentation. It allows readers to leave comments or feedback on the Arcjet limitations documentation.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/limitations.mdx#2025-04-12_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<Comments />\n```\n\n----------------------------------------\n\nTITLE: Markdown Frontmatter Configuration\nDESCRIPTION: YAML frontmatter configuration for the documentation page, defining the title and description of the Arcjet examples page.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/examples.mdx#2025-04-12_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: \"Arcjet examples\"\ndescription: \"Real world examples of how to use Arcjet.\"\n---\n```\n\n----------------------------------------\n\nTITLE: Installing Arcjet Remix Dependencies with NPM\nDESCRIPTION: Command to install @arcjet/remix and @arcjet/inspect packages using NPM package manager.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/quick-start/remix/Step1.mdx#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i @arcjet/remix @arcjet/inspect\n```\n\n----------------------------------------\n\nTITLE: NPM Installation Command\nDESCRIPTION: Command to install @nosecone/next package using NPM package manager.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/nosecone/quick-start/next-js/Step1.mdx#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm i @nosecone/next\n```\n\n----------------------------------------\n\nTITLE: Starting an Application with pnpm\nDESCRIPTION: Command to start an application using pnpm package manager. This runs the start script defined in the project's package.json file.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/shield/quick-start/nestjs/Step4.mdx#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npnpm run start\n```\n\n----------------------------------------\n\nTITLE: Starting Arcjet Server in JavaScript\nDESCRIPTION: Command to start a JavaScript server using node with environment variables loaded from a .env.local file. This requires Node 20+ or a package like dotenv for older Node versions.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/signup-protection/quick-start/nodejs/Step4.mdx#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnode --env-file .env.local index.js\n```\n\n----------------------------------------\n\nTITLE: Rendering Selectable Code Snippets with React JSX\nDESCRIPTION: This JSX code renders a SelectableContent component with TypeScript and JavaScript code blocks. It uses the Code component from Astro Starlight to display the code with proper syntax highlighting.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/reference/nodejs/Filtering.mdx#2025-04-12_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={FilteringTS} lang=\"ts\" />\n  </div>\n  <div slot=\"JS\" slotIdx=\"2\">\n    <Code code={FilteringJS} lang=\"js\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Installing @arcjet/nest with npm\nDESCRIPTION: Command to install the @arcjet/nest package using npm package manager.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/quick-start/nestjs/Step1.mdx#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i @arcjet/nest\n```\n\n----------------------------------------\n\nTITLE: Installing @arcjet/nest with yarn\nDESCRIPTION: Command to install the @arcjet/nest package using yarn package manager\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/get-started/nest-js/Step1.mdx#2025-04-12_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @arcjet/nest\n```\n\n----------------------------------------\n\nTITLE: Importing Badge Component in Markdown\nDESCRIPTION: This snippet imports the Badge component from the Starlight Astro.js component library. It's used for adding visual indicators or labels in the documentation.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/support.mdx#2025-04-12_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nimport { Badge } from \"@astrojs/starlight/components\";\n```\n\n----------------------------------------\n\nTITLE: Installing Arcjet Packages with npm\nDESCRIPTION: Command to install @arcjet/next and @arcjet/inspect packages using npm package manager.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/signup-protection/quick-start/nextjs/Step1.mdx#2025-04-12_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm i @arcjet/next @arcjet/inspect\n```\n\n----------------------------------------\n\nTITLE: Implementing a Selectable Code Content Component in JSX/TSX\nDESCRIPTION: This code creates a component that renders selectable code content with TypeScript and JavaScript options. It imports raw code files for errors implementation and uses a Code component for syntax highlighting. The SelectableContent component handles the switching between language options with client-side functionality.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/shield/reference/nodejs/Errors.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport ErrorsJS from \"./Errors.js?raw\";\nimport ErrorsTS from \"./Errors.ts?raw\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={ErrorsTS} lang=\"ts\" />\n  </div>\n  <div slot=\"JS\" slotIdx=\"2\">\n    <Code code={ErrorsJS} lang=\"js\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Installing Arcjet SvelteKit Packages with npm\nDESCRIPTION: Command to install @arcjet/sveltekit and @arcjet/inspect packages using npm package manager.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/signup-protection/quick-start/sveltekit/Step1.mdx#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i @arcjet/sveltekit @arcjet/inspect\n```\n\n----------------------------------------\n\nTITLE: Running Development Server with pnpm\nDESCRIPTION: This shell command runs the development server using pnpm.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/nosecone/quick-start/sveltekit/Step3.mdx#2025-04-12_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Rendering Selectable Package Manager Commands in JSX\nDESCRIPTION: This snippet shows how to use the SelectableContent component to display package manager-specific 'dev' commands. It allows users to switch between npm, pnpm, and yarn commands.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/nosecone/quick-start/next-js/Step3.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<SelectableContent client:load syncKey=\"packageManager\" frameworkSwitcher>\n<div slot=\"npm\" slotIdx=\"1\">\n```sh\nnpm run dev\n```\n</div>\n<div slot=\"pnpm\" slotIdx=\"2\">\n```sh\npnpm run dev\n```\n</div>\n<div slot=\"yarn\" slotIdx=\"3\">\n```sh\nyarn run dev\n```\n</div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Starting Arcjet App with PNPM\nDESCRIPTION: Command to start the Arcjet application development server using PNPM.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/rate-limiting/quick-start/remix/Step4.mdx#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Installing @arcjet/nest with pnpm\nDESCRIPTION: This command installs the @arcjet/nest package using pnpm (Performant NPM).\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/email-validation/quick-start/nestjs/Step1.mdx#2025-04-12_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npnpm add @arcjet/nest\n```\n\n----------------------------------------\n\nTITLE: Installing Arcjet Packages with Yarn\nDESCRIPTION: Installs @arcjet/remix and @arcjet/inspect packages using Yarn package manager.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/rate-limiting/quick-start/remix/Step1.mdx#2025-04-12_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @arcjet/remix @arcjet/inspect\n```\n\n----------------------------------------\n\nTITLE: HTTP Header Inspection with cURL\nDESCRIPTION: Uses cURL command with -I flag to fetch only the headers from localhost port 3000. The -X GET explicitly specifies the GET method.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/nosecone/quick-start/next-js/Step4.mdx#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncurl -I -X GET localhost:3000\n```\n\n----------------------------------------\n\nTITLE: Installing Arcjet Packages with pnpm\nDESCRIPTION: This command installs the @arcjet/node and @arcjet/inspect packages using pnpm (Performant npm). It's part of a selectable content block for pnpm users.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/get-started/node-js/Step1.mdx#2025-04-12_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npnpm add @arcjet/node @arcjet/inspect\n```\n\n----------------------------------------\n\nTITLE: Starting JavaScript Application with Environment File\nDESCRIPTION: Command to start a JavaScript application using Node.js with environment variables loaded from .env.local file. Requires Node.js 20+ for native env-file support.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/get-started/node-js/Step4.mdx#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnode --env-file .env.local index.js\n```\n\n----------------------------------------\n\nTITLE: Importing Badge Component from Starlight\nDESCRIPTION: Imports the Badge component from Astrojs Starlight components for use in documentation to indicate feature availability across different pricing plans.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/reference/shared/IPAnalysis.mdx#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Badge } from \"@astrojs/starlight/components\";\n```\n\n----------------------------------------\n\nTITLE: Installing Nosecone Package with Bun\nDESCRIPTION: This bash command installs the Nosecone package using the Bun package manager. It adds Nosecone as a dependency to the project.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/nosecone/quick-start/bun/Step1.mdx#2025-04-12_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbun add nosecone\n```\n\n----------------------------------------\n\nTITLE: Running Development Server with npm\nDESCRIPTION: This shell command runs the development server using npm.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/nosecone/quick-start/sveltekit/Step3.mdx#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Rendering SelectableContent Component with Bun Installation Command\nDESCRIPTION: This snippet renders the SelectableContent component with a client-side loading attribute and framework switcher. It contains a bash command to install Nosecone using Bun package manager.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/nosecone/quick-start/bun/Step1.mdx#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<SelectableContent client:load frameworkSwitcher>\n<div>\n\n```bash\nbun add nosecone\n```\n\n</div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Language Selection Component Import and Implementation\nDESCRIPTION: Imports required components and raw code files, then implements a selectable interface for displaying either TypeScript or JavaScript code examples.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/get-started/node-js/Step3.mdx#2025-04-12_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport Step3JS from \"./Step3.js?raw\";\nimport Step3TS from \"./Step3.ts?raw\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    Create a new file at `index.ts` with the contents:\n\n    <Code code={Step3TS} lang=\"ts\" title=\"index.ts\" />\n\n  </div>\n  <div slot=\"JS\" slotIdx=\"2\">\n    Create a new file at `index.js` with the contents:\n\n    <Code code={Step3JS} lang=\"js\" title=\"index.js\" />\n\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Installing Hono with PNPM\nDESCRIPTION: Command to create a new Hono project using pnpm package manager\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/get-started/bun-hono/Step0.mdx#2025-04-12_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npnpm create hono@latest\n```\n\n----------------------------------------\n\nTITLE: Installing Nosecone Package with npm\nDESCRIPTION: Command to install the nosecone package using npm package manager\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/nosecone/quick-start/node-js/Step1.mdx#2025-04-12_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm i nosecone\n```\n\n----------------------------------------\n\nTITLE: Setting Arcjet Environment Variable for Development\nDESCRIPTION: Environment variable configuration to force Arcjet SDK into development mode. This allows for local testing by preventing IP validation errors that would occur in production.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/troubleshooting.mdx#2025-04-12_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\nARCJET_ENV=development\n```\n\n----------------------------------------\n\nTITLE: Execute cURL Command for Header Inspection\nDESCRIPTION: Uses cURL with the -I flag to perform a HEAD request and display only the response headers from localhost:3000.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/nosecone/quick-start/bun/Step4.mdx#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncurl -I -X GET localhost:3000\n```\n\n----------------------------------------\n\nTITLE: Installing Arcjet SvelteKit and Inspect with Yarn\nDESCRIPTION: This shell command installs the @arcjet/sveltekit and @arcjet/inspect packages using Yarn package manager.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/quick-start/sveltekit/Step1.mdx#2025-04-12_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @arcjet/sveltekit @arcjet/inspect\n```\n\n----------------------------------------\n\nTITLE: Configuring Selectable Language Content\nDESCRIPTION: Component structure for displaying language-specific Shield implementation code with a framework switcher for TypeScript and JavaScript versions.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/shield/quick-start/bun/Step3.mdx#2025-04-12_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={Step3TS} lang=\"ts\" title=\"index.ts\" />\n  </div>\n  <div slot=\"JS\" slotIdx=\"2\">\n    <Code code={Step3JS} lang=\"js\" title=\"index.js\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Rendering Selectable Code Snippets in React\nDESCRIPTION: This code snippet demonstrates how to use the SelectableContent component to display code snippets with language selection options. It imports raw code files for TypeScript and JavaScript versions and renders them using the Code component from Starlight.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/reference/bun/AllowingBots.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Code } from \"@astrojs/starlight/components\";\nimport SelectableContent from \"@/components/SelectableContent\";\nimport AllowingBotsTS from \"./AllowingBots.ts?raw\";\nimport AllowingBotsJS from \"./AllowingBots.js?raw\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={AllowingBotsTS} lang=\"ts\" />\n  </div>\n  <div slot=\"JS\" slotIdx=\"2\">\n    <Code code={AllowingBotsJS} lang=\"js\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Sample HTTP Response Headers\nDESCRIPTION: This snippet shows a typical set of HTTP response headers from the local server. It includes various security headers such as Content-Security-Policy, CORS policies, and other protective measures like Strict-Transport-Security and X-Frame-Options.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/nosecone/quick-start/node-js/Step4.mdx#2025-04-12_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nHTTP/1.1 200 OK\ncontent-security-policy: base-uri 'none'; child-src 'none'; connect-src 'self'; default-src 'self'; font-src 'self'; form-action 'self'; frame-ancestors 'none'; frame-src 'none'; img-src 'self' blob: data:; manifest-src 'self'; media-src 'self'; object-src 'none'; script-src 'self'; style-src 'self'; worker-src 'self'; upgrade-insecure-requests;\ncross-origin-embedder-policy: require-corp\ncross-origin-opener-policy: same-origin\ncross-origin-resource-policy: same-origin\norigin-agent-cluster: ?1\nreferrer-policy: no-referrer\nstrict-transport-security: max-age=31536000; includeSubDomains\nx-content-type-options: nosniff\nx-dns-prefetch-control: off\nx-download-options: noopen\nx-frame-options: SAMEORIGIN\nx-permitted-cross-domain-policies: none\nx-xss-protection: 0\nContent-Type: text/plain\nDate: Wed, 27 Nov 2024 21:05:50 GMT\nConnection: keep-alive\nKeep-Alive: timeout=5\nTransfer-Encoding: chunked\n```\n\n----------------------------------------\n\nTITLE: Installing Arcjet packages with yarn\nDESCRIPTION: Command to install Arcjet Next.js and Inspect packages using yarn package manager\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/get-started/next-js/Step1.mdx#2025-04-12_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @arcjet/next @arcjet/inspect\n```\n\n----------------------------------------\n\nTITLE: Installing Deno on Windows using PowerShell\nDESCRIPTION: PowerShell command to download and install Deno runtime on Windows systems using the installation script.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/get-started/deno/Step0.mdx#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nirm https://deno.land/install.ps1 | iex\n```\n\n----------------------------------------\n\nTITLE: Component Imports for Documentation\nDESCRIPTION: Import statements for documentation components including Starlight's Code component and a custom SelectableContent component for language switching.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/quick-start/nestjs/Step3.mdx#2025-04-12_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Code } from \"@astrojs/starlight/components\";\nimport SelectableContent from \"@/components/SelectableContent\";\n```\n\n----------------------------------------\n\nTITLE: Installing Arcjet Remix Dependencies with yarn\nDESCRIPTION: Command to install @arcjet/remix and @arcjet/inspect packages using yarn package manager\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/signup-protection/quick-start/remix/Step1.mdx#2025-04-12_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @arcjet/remix @arcjet/inspect\n```\n\n----------------------------------------\n\nTITLE: Testing Rate Limit with cURL\nDESCRIPTION: Command to test the rate limiting functionality using cURL, which will return a 403 response due to bot detection\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/get-started/nest-js/Step4.mdx#2025-04-12_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncurl -v http://localhost:3000\n```\n\n----------------------------------------\n\nTITLE: Framework Import Configuration\nDESCRIPTION: Import statements for various framework-specific components and utilities used in the documentation.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/nosecone/quick-start.mdx#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport WhatAreArcjetUtilities from \"@/components/WhatAreArcjetUtilities.astro\";\nimport FrameworkName from \"@/components/FrameworkName\";\nimport SDKVersionNosecone from \"@/components/SDKVersionNosecone.astro\";\nimport FrameworkLinks from \"@/components/FrameworkLinks\";\nimport SlotByFramework from \"@/components/SlotByFramework\";\nimport { LinkCard, CardGrid } from \"@astrojs/starlight/components\";\nimport Comments from \"/src/components/Comments.astro\";\nimport SdkReferenceLinkByFramework from \"/src/components/SdkReferenceLinkByFramework.astro\";\n```\n\n----------------------------------------\n\nTITLE: Importing LinkCard Component in JSX\nDESCRIPTION: Import statement for the LinkCard component from Astrojs Starlight components library, used for creating linked cards in the documentation.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/examples.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { LinkCard } from \"@astrojs/starlight/components\";\n```\n\n----------------------------------------\n\nTITLE: Running Development Command with npm\nDESCRIPTION: This command runs the 'dev' script using npm. It's typically used to start a development server or build process.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/nosecone/quick-start/next-js/Step3.mdx#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Rendering Selectable Package Manager Commands in JSX\nDESCRIPTION: This snippet uses the SelectableContent component to render selectable shell commands for running the development server with different package managers. It includes options for npm, pnpm, and yarn.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/nosecone/quick-start/sveltekit/Step3.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\n\n{/* prettier-ignore */}\n<SelectableContent client:load syncKey=\"packageManager\" frameworkSwitcher>\n<div slot=\"npm\" slotIdx=\"1\">\n```sh\nnpm run dev\n```\n</div>\n<div slot=\"pnpm\" slotIdx=\"2\">\n```sh\npnpm run dev\n```\n</div>\n<div slot=\"yarn\" slotIdx=\"3\">\n```sh\nyarn run dev\n```\n</div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Installing Arcjet SvelteKit and Inspect with pnpm\nDESCRIPTION: This shell command installs the @arcjet/sveltekit and @arcjet/inspect packages using pnpm (Performant NPM).\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/quick-start/sveltekit/Step1.mdx#2025-04-12_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\npnpm add @arcjet/sveltekit @arcjet/inspect\n```\n\n----------------------------------------\n\nTITLE: Importing and Displaying Code Snippets with Selectable Language Options\nDESCRIPTION: This code imports TypeScript and JavaScript code snippets from external files and renders them using a SelectableContent component that allows users to switch between language implementations. The component synchronizes language selection state across the application using the 'syncKey' property.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/sensitive-info/quick-start/nodejs/Step3.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Step3TS from \"./Step3.ts?raw\";\nimport Step3JS from \"./Step3.js?raw\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport SelectableContent from \"@/components/SelectableContent\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n\n    <Code code={Step3TS} lang=\"ts\" title=\"index.ts\" />\n\n  </div>\n  <div slot=\"JS\" slotIdx=\"2\">\n\n    <Code code={Step3JS} lang=\"js\" title=\"index.js\" />\n\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Testing Server Endpoint with Curl\nDESCRIPTION: Example curl command to test the server by making a POST request with email data to the local endpoint.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/signup-protection/quick-start/bun/Step4.mdx#2025-04-12_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST -d 'email=test@arcjet.io' http://localhost:3000/\n```\n\n----------------------------------------\n\nTITLE: Rendering Selectable TypeScript and JavaScript Code Blocks\nDESCRIPTION: This JSX component uses SelectableContent to render language-specific code blocks. It provides options for TypeScript and JavaScript, using the imported raw code files.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/shield/reference/bun/Errors.mdx#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={ErrorsTS} lang=\"ts\" />\n  </div>\n  <div slot=\"JS\" slotIdx=\"2\">\n    <Code code={ErrorsJS} lang=\"js\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Running Development Server with yarn\nDESCRIPTION: This shell command runs the development server using yarn.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/nosecone/quick-start/sveltekit/Step3.mdx#2025-04-12_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nyarn run dev\n```\n\n----------------------------------------\n\nTITLE: Installing @nosecone/sveltekit with yarn\nDESCRIPTION: Command to install the @nosecone/sveltekit package using yarn package manager.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/nosecone/quick-start/sveltekit/Step1.mdx#2025-04-12_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @nosecone/sveltekit\n```\n\n----------------------------------------\n\nTITLE: Import FrameworkName Component\nDESCRIPTION: Imports the FrameworkName component from the components directory\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/shield/quick-start/shared/Step2SetEnv.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FrameworkName from \"@/components/FrameworkName\";\n```\n\n----------------------------------------\n\nTITLE: Testing Server Response with curl\nDESCRIPTION: Command to test the server's response using curl. This request is expected to return a 403 Forbidden status, as curl is considered an automated client by default.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/quick-start/bun/Step4.mdx#2025-04-12_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncurl -I http://localhost:3000\n```\n\n----------------------------------------\n\nTITLE: Inserting Comments Component in Markdown\nDESCRIPTION: This snippet shows the inclusion of a 'Comments' component, likely used to render a comments section or discussion area within the documentation.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/email-validation/reference.mdx#2025-04-12_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n<Comments />\n```\n\n----------------------------------------\n\nTITLE: Importing Code Components and Raw Content\nDESCRIPTION: Imports necessary components and raw code content files for displaying code examples in both TypeScript and JavaScript formats.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/rate-limiting/reference/nextjs/Headers.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Code } from \"@astrojs/starlight/components\";\nimport SelectableContent from \"@/components/SelectableContent\";\nimport HeadersAppTS from \"./HeadersApp.ts?raw\";\nimport HeadersPagesTS from \"./HeadersPages.ts?raw\";\nimport HeadersAppJS from \"./HeadersApp.js?raw\";\nimport HeadersPagesJS from \"./HeadersPages.js?raw\";\n```\n\n----------------------------------------\n\nTITLE: Implementing Per-Route Guard in NestJS with Arcjet\nDESCRIPTION: Shows how to create route-specific Arcjet protection by applying guards at the controller method level. This allows for customized rules per endpoint but requires adding the guard to each route.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/shield/reference/nestjs/DecoratorRoutes.mdx#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller, Get, Injectable, UseGuards } from \"@nestjs/common\";\nimport { CanActivate, ExecutionContext } from \"@nestjs/common\";\nimport { ArcjetClient } from \"@arcjet/node\";\nimport { RateLimit } from \"@arcjet/protocol\";\n\n@Injectable()\nexport class RateLimitGuard implements CanActivate {\n  constructor(private arcjet: ArcjetClient) {}\n\n  async canActivate(context: ExecutionContext): Promise<boolean> {\n    const request = context.switchToHttp().getRequest();\n\n    const decision = await this.arcjet.protect({\n      source: { ip: request.ip, email: request.user?.email },\n      characteristics: { host: request.headers.host },\n      rules: [new RateLimit({ characteristics: [\"host\"] })],\n    });\n\n    return decision.decision === \"ALLOW\";\n  }\n}\n\n@Controller(\"example\")\nexport class ExampleController {\n  @Get()\n  @UseGuards(RateLimitGuard)\n  findAll() {\n    return { message: \"This route is protected by Arcjet rate limiting\" };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing FrameworkName Component in JavaScript\nDESCRIPTION: This snippet imports a FrameworkName component from a local components directory. It's likely used to dynamically render the framework name in the documentation.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/email-validation/quick-start/shared/Step2SetEnv.mdx#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport FrameworkName from \"@/components/FrameworkName\";\n```\n\n----------------------------------------\n\nTITLE: Rendering Selectable TypeScript Content with React\nDESCRIPTION: This snippet demonstrates the use of a custom SelectableContent component to render TypeScript code snippets. It uses the Code component from Astro's Starlight to display the imported raw TypeScript content with syntax highlighting.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/email-validation/quick-start/nestjs/Step3.mdx#2025-04-12_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={Step3AppModuleTS} lang=\"ts\" title=\"src/signup/app.module.ts\" />\n  </div>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code\n      code={Step3ControllerTS}\n      lang=\"ts\"\n      title=\"src/signup/signup.controller.ts\"\n    />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Starting Next.js Dev Server with NPM\nDESCRIPTION: Command to start Next.js development server using npm package manager.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/rate-limiting/quick-start/nextjs/Step4.mdx#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Starting Application with Yarn\nDESCRIPTION: Command to start the application using Yarn package manager\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/get-started/nest-js/Step4.mdx#2025-04-12_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nyarn run start\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Selectable Content with Astro Components\nDESCRIPTION: This snippet imports required components and raw code, then uses SelectableContent to render a TypeScript code snippet. It utilizes Astro's client-side rendering and a framework switcher for language selection.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/rate-limiting/reference/nextjs/FixedWindow.mdx#2025-04-12_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport FixedWindow from \"./FixedWindow.ts?raw\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={FixedWindow} lang=\"ts\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Starting Dev Server with NPM\nDESCRIPTION: Command to start the development server using NPM package manager.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/shield/quick-start/remix/Step4.mdx#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Starting a Next.js App with Arcjet\nDESCRIPTION: Command to start a Next.js application in development mode after implementing Arcjet protection.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/public/llms.txt#2025-04-12_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Implementing SelectableContent Component with TypeScript Code Display in JSX\nDESCRIPTION: This code snippet demonstrates how to use the SelectableContent component to display TypeScript code with a framework switcher. It imports necessary components and a raw TypeScript file, then renders the content in a selectable interface.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/signup-protection/reference/nodejs/Recommended.mdx#2025-04-12_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport RecommendedTS from \"./Recommended.ts?raw\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={RecommendedTS} lang=\"ts\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Selectable Code Content in Astro\nDESCRIPTION: This snippet imports required components and raw code, then uses the SelectableContent component to render TypeScript code in a selectable format. It utilizes Astro's client-side rendering capabilities and a framework switcher.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/rate-limiting/reference/nodejs/FixedWindow.mdx#2025-04-12_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport FixedWindow from \"./FixedWindow.ts?raw\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={FixedWindow} lang=\"ts\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Importing SelectableContent Component in JSX\nDESCRIPTION: This snippet imports a custom SelectableContent component, likely used for displaying selectable or switchable content in a React-based documentation site.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/quick-start/bun/Step1.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\n```\n\n----------------------------------------\n\nTITLE: Starting Next.js Dev Server with Yarn\nDESCRIPTION: Command to start Next.js development server using yarn package manager.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/rate-limiting/quick-start/nextjs/Step4.mdx#2025-04-12_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nyarn run dev\n```\n\n----------------------------------------\n\nTITLE: Implementing Selectable Code Content Display in React\nDESCRIPTION: This component uses SelectableContent to allow users to toggle between TypeScript and JavaScript versions of the TokenBucketRequest code. It imports raw code files and displays them using the Starlight Code component with proper language highlighting.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/rate-limiting/reference/remix/TokenBucketRequest.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport TokenBucketRequestJS from \"./TokenBucketRequest.js?raw\";\nimport TokenBucketRequestTS from \"./TokenBucketRequest.ts?raw\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={TokenBucketRequestTS} lang=\"ts\" />\n  </div>\n  <div slot=\"JS\" slotIdx=\"2\">\n    <Code code={TokenBucketRequestJS} lang=\"js\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Markdown Frontmatter Configuration\nDESCRIPTION: YAML frontmatter configuration for the documentation page defining title, description and navigation settings.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/shield/concepts.mdx#2025-04-12_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: \"Arcjet Shield WAF\"\ndescription: \"Arcjet Shield WAF protects your application against common attacks, including the OWASP Top 10.\"\nprev: false\n---\n```\n\n----------------------------------------\n\nTITLE: Running Development Command with Yarn\nDESCRIPTION: This command runs the 'dev' script using Yarn. It's another package manager option for executing development scripts.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/nosecone/quick-start/next-js/Step3.mdx#2025-04-12_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nyarn run dev\n```\n\n----------------------------------------\n\nTITLE: Starting Application with NPM\nDESCRIPTION: Command to start the application using NPM package manager\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/get-started/nest-js/Step4.mdx#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Raw Code Files in JavaScript\nDESCRIPTION: This snippet imports the SelectableContent component, the Code component from Starlight, and raw content of JavaScript and TypeScript error files.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/rate-limiting/reference/bun/Errors.mdx#2025-04-12_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport ErrorsJS from \"./Errors.js?raw\";\nimport ErrorsTS from \"./Errors.ts?raw\";\n```\n\n----------------------------------------\n\nTITLE: Rendering Framework Links Component in JSX\nDESCRIPTION: This snippet renders a FrameworkLinks component with specific props to guide users to the 'Get started' section. It uses client-side rendering.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/index.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<FrameworkLinks\n  title=\"Get started\"\n  path=\"/get-started\"\n  alwaysShow\n  client:load\n/>\n```\n\n----------------------------------------\n\nTITLE: Starting Next.js App with Yarn\nDESCRIPTION: Command to start a Next.js application using Yarn package manager.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/quick-start/nextjs/Step4.mdx#2025-04-12_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nyarn run dev\n```\n\n----------------------------------------\n\nTITLE: Implementing Language Toggle Component with Code Display\nDESCRIPTION: React/JSX component that imports code files and renders them in a selectable interface allowing users to switch between TypeScript and JavaScript versions. Uses the Code component from Starlight for syntax highlighting.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/rate-limiting/reference/nodejs/TokenBucketRequest.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport TokenBucketRequestJS from \"./TokenBucketRequest.js?raw\";\nimport TokenBucketRequestTS from \"./TokenBucketRequest.ts?raw\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={TokenBucketRequestTS} lang=\"ts\" />\n  </div>\n  <div slot=\"JS\" slotIdx=\"2\">\n    <Code code={TokenBucketRequestJS} lang=\"js\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Starting Application with PNPM\nDESCRIPTION: Command to start the application using PNPM package manager\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/get-started/nest-js/Step4.mdx#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npnpm run start\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Code Files for Selectable Content\nDESCRIPTION: This snippet imports required components and raw code files for rendering selectable code snippets. It uses dynamic imports for the custom detect files in both TypeScript and JavaScript.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/sensitive-info/reference/sveltekit/CustomDetect.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport CustomDetectJS from \"./CustomDetect.js?raw\";\nimport CustomDetectTS from \"./CustomDetect.ts?raw\";\n```\n\n----------------------------------------\n\nTITLE: Initializing Selectable Code Examples with Astro Components\nDESCRIPTION: React/Astro component implementation that allows switching between TypeScript and JavaScript code examples for decision logging. Uses SelectableContent component for language selection and Code component from Starlight for syntax highlighting.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/reference/remix/DecisionLog.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport DecisionLogTS from \"./DecisionLog.ts?raw\";\nimport DecisionLogJS from \"./DecisionLog.js?raw\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={DecisionLogTS} lang=\"ts\" />\n  </div>\n  <div slot=\"JS\" slotIdx=\"2\">\n    <Code code={DecisionLogJS} lang=\"js\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Starting Next.js App with PNPM\nDESCRIPTION: Command to start a Next.js development server using PNPM package manager. After running, the application will be accessible at http://localhost:3000.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/email-validation/quick-start/nextjs/Step4.mdx#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Implementing Language Selection for Error Documentation in React\nDESCRIPTION: This code sets up a SelectableContent component that allows users to toggle between TypeScript and JavaScript error code examples. It imports raw error code files and displays them in syntax-highlighted code blocks.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/sensitive-info/reference/remix/Errors.mdx#2025-04-12_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport ErrorsJS from \"./Errors.js?raw\";\nimport ErrorsTS from \"./Errors.ts?raw\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={ErrorsTS} lang=\"ts\" />\n  </div>\n  <div slot=\"JS\" slotIdx=\"2\">\n    <Code code={ErrorsJS} lang=\"js\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Importing Code Examples in Documentation Component\nDESCRIPTION: Imports raw TypeScript and JavaScript code files and sets up a selectable content component to display them as code examples.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/quick-start/bun/Step3.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Step3TS from \"./Step3.ts?raw\";\nimport Step3JS from \"./Step3.js?raw\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport SelectableContent from \"@/components/SelectableContent\";\n\nThe example below will return a 403 Forbidden response for all requests from\nclients we are sure are automated.\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={Step3TS} lang=\"ts\" title=\"index.ts\" />\n  </div>\n  <div slot=\"JS\" slotIdx=\"2\">\n    <Code code={Step3JS} lang=\"js\" title=\"index.js\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Code with SelectableContent\nDESCRIPTION: Sets up a selectable code display component using Astro's Starlight framework. The implementation includes a client-side component for language selection and raw code import.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/rate-limiting/reference/nextjs/TokenBucket.mdx#2025-04-12_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport TokenBucket from \"./TokenBucket.ts?raw\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={TokenBucket} lang=\"ts\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Raw Code Files in React\nDESCRIPTION: This snippet imports the required components and raw code files for rendering selectable code snippets. It uses dynamic imports for the code files and imports from specific packages.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/signup-protection/reference/sveltekit/Errors.mdx#2025-04-12_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport ErrorsJS from \"./Errors.js?raw\";\nimport ErrorsTS from \"./Errors.ts?raw\";\n```\n\n----------------------------------------\n\nTITLE: Blocked Request Response from Arcjet Shield\nDESCRIPTION: Demonstrates the complete cURL response when a request is blocked by Arcjet Shield after multiple suspicious attempts, showing the 403 Forbidden response with headers and body.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/shield/quick-start/sveltekit/Step5.mdx#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n# ...5 requests made previously\ncurl -v -H \"x-arcjet-suspicious: true\" http://localhost:5173\n...\n> GET / HTTP/2\n> Host: localhost:5173\n> User-Agent: curl/8.4.0\n> Accept: */*\n> x-arcjet-suspicious: true\n>\n< HTTP/2 403\n< content-type: application/json; charset=utf-8\n< date: Tue, 09 Jan 2024 13:43:04 GMT\n< etag: \"7a3v9j8es220\"\n< vary: Accept-Encoding\n< content-length: 72\n<\n* Connection #0 to host localhost left intact\n{\"message\":\"Forbidden\"}%\n```\n\n----------------------------------------\n\nTITLE: Checking Rule Results for Missing User-Agent with @arcjet/inspect\nDESCRIPTION: Alternative approach that uses the isMissingUserAgent function from @arcjet/inspect to check if a request is missing the User-Agent header after the Arcjet decision is made.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/bot-protection/concepts.mdx#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { isMissingUserAgent } from \"@arcjet/inspect\";\n\nif (decision.results.some(isMissingUserAgent)) {\n  log.warn(\n    { error: decision.reason.message },\n    \"request missing required user-agent header\",\n  );\n  // You could return a 400 Bad request error here\n  // Next.js example:\n  // return NextResponse.json({ error: \"Bad request\" }, { status: 400 });\n  // Node.js example:\n  // res.writeHead(400, { \"Content-Type\": \"application/json\" });\n  // res.end(JSON.stringify({ error: \"Bad request\" }));\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Selectable TypeScript Code in React\nDESCRIPTION: This snippet imports required components and raw TypeScript code, then uses a SelectableContent component to render a Code block containing TypeScript content. It demonstrates how to create a selectable, language-specific code display in a React application.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/signup-protection/reference/sveltekit/Recommended.mdx#2025-04-12_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport RecommendedTS from \"./Recommended.ts?raw\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={RecommendedTS} lang=\"ts\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Rendering Selectable TypeScript and JavaScript Code Snippets\nDESCRIPTION: This JSX snippet uses the SelectableContent component to render TypeScript and JavaScript code snippets. It allows switching between the two languages and uses the Code component from Starlight for syntax highlighting.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/rate-limiting/reference/nodejs/Errors.mdx#2025-04-12_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={ErrorsTS} lang=\"ts\" title=\"/src/routes/api/arcjet/+server.ts\" />\n  </div>\n  <div slot=\"JS\" slotIdx=\"2\">\n    <Code code={ErrorsJS} lang=\"js\" title=\"/src/routes/api/arcjet/+server.js\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Importing Comments Component in Markdown\nDESCRIPTION: This code snippet imports a Comments component, likely used to add a comment section to the documentation page. It demonstrates how interactive elements can be incorporated into static documentation.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/limitations.mdx#2025-04-12_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nimport Comments from \"/src/components/Comments.astro\";\n```\n\n----------------------------------------\n\nTITLE: Installing Arcjet packages with npm\nDESCRIPTION: Command to install @arcjet/node and @arcjet/inspect packages using npm package manager.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/sensitive-info/quick-start/nodejs/Step1.mdx#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i @arcjet/node @arcjet/inspect\n```\n\n----------------------------------------\n\nTITLE: Installing Express using npm\nDESCRIPTION: This command installs the Express.js framework using npm (Node Package Manager). It adds Express as a dependency to your project.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/get-started/node-js-express/Step0.mdx#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install express\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Raw Code Files in TypeScript\nDESCRIPTION: This snippet imports the required components and raw code files for displaying selectable TypeScript and JavaScript code snippets.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/reference/sveltekit/DenyingBots.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Code } from \"@astrojs/starlight/components\";\nimport SelectableContent from \"@/components/SelectableContent\";\nimport DenyingBotsTS from \"./DenyingBots.ts?raw\";\nimport DenyingBotsJS from \"./DenyingBots.js?raw\";\n```\n\n----------------------------------------\n\nTITLE: Rendering Selectable Code Snippets with TypeScript and JavaScript Options\nDESCRIPTION: This snippet uses the SelectableContent component to render code snippets in both TypeScript and JavaScript. It utilizes the Code component from Astro's Starlight to display the code with proper syntax highlighting.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/email-validation/reference/remix/DecisionLogDeny.mdx#2025-04-12_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={DecisionLogDenyTS} lang=\"ts\" />\n  </div>\n  <div slot=\"JS\" slotIdx=\"2\">\n    <Code code={DecisionLogDenyJS} lang=\"js\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Selectable Code Content in React\nDESCRIPTION: This snippet imports required components and raw code content, then renders a SelectableContent component with a TypeScript code block. The component allows for language selection and synchronization across the application.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/rate-limiting/reference/nestjs/DecisionLog.mdx#2025-04-12_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport DecisionLogTS from \"./DecisionLog.ts?raw\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={DecisionLogTS} lang=\"ts\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Implementing Language-Switchable Code Display Component\nDESCRIPTION: A JSX component that uses SelectableContent to render switchable TypeScript and JavaScript code examples. It imports raw code files and displays them using the Astro Starlight Code component with proper language highlighting.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/reference/sveltekit/Filtering.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport FilteringTS from \"./Filtering.ts?raw\";\nimport FilteringJS from \"./Filtering.js?raw\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={FilteringTS} lang=\"ts\" title=\"/src/hooks.server.ts\" />\n  </div>\n  <div slot=\"JS\" slotIdx=\"2\">\n    <Code code={FilteringJS} lang=\"js\" title=\"/src/hooks.server.ts\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Installing @arcjet/nest with pnpm\nDESCRIPTION: Command to install the @arcjet/nest package using pnpm package manager\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/get-started/nest-js/Step1.mdx#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npnpm add @arcjet/nest\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Raw Code Files in TypeScript\nDESCRIPTION: This snippet shows the import statements for components and raw code files used in the document. It imports the Code component from Starlight, a custom SelectableContent component, and raw TypeScript and JavaScript code files.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/nosecone/quick-start/bun/Step2.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Code } from \"@astrojs/starlight/components\";\nimport SelectableContent from \"@/components/SelectableContent\";\n\nimport Step2TS from \"./Step2.ts?raw\";\nimport Step2JS from \"./Step2.js?raw\";\n```\n\n----------------------------------------\n\nTITLE: Starting Bun Server with Hot Reloading (JavaScript)\nDESCRIPTION: Command to start a Bun server using JavaScript with hot reloading enabled. This allows for automatic updates when changes are made to the code.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/quick-start/bun/Step4.mdx#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nbun run --hot index.js\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Code Files for Selectable Content Display\nDESCRIPTION: This snippet imports the required components and raw code files for displaying selectable content. It uses Astro's Starlight components and custom files for error handling in TypeScript and JavaScript.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/shield/reference/sveltekit/Errors.mdx#2025-04-12_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport ErrorsJS from \"./Errors.js?raw\";\nimport ErrorsTS from \"./Errors.ts?raw\";\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Middleware Documentation Component\nDESCRIPTION: Component setup that imports SelectableContent and Code components to display middleware documentation with language selection support. Uses raw loader for TypeScript middleware file content.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/rate-limiting/reference/nextjs/MiddlewareMatchingPaths.mdx#2025-04-12_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport MiddlewareMatchingPaths from \"./MiddlewareMatchingPaths.ts?raw\";\n\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={MiddlewareMatchingPaths} lang=\"ts\" title=\"/middleware.ts\" />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Creating Selectable Content for Language Versions\nDESCRIPTION: This snippet demonstrates the use of a SelectableContent component to create switchable views for TypeScript and JavaScript implementations of the API route. It includes placeholders for the actual code content.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/quick-start/sveltekit/Step3.mdx#2025-04-12_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\nCreate a new API route at `/src/routes/api/arcjet/+server.ts`:\n\n<Code code={Step3TS} lang=\"ts\" title=\"/src/routes/api/arcjet/+server.ts\" />\n\n  </div>\n  <div slot=\"JS\" slotIdx=\"2\">\nCreate a new API route at `/src/routes/api/arcjet/+server.js`:\n\n<Code code={Step3JS} lang=\"js\" title=\"/src/routes/api/arcjet/+server.js\" />\n\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Installing Arcjet Remix Dependencies with npm\nDESCRIPTION: Command to install @arcjet/remix and @arcjet/inspect packages using npm package manager\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/signup-protection/quick-start/remix/Step1.mdx#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i @arcjet/remix @arcjet/inspect\n```\n\n----------------------------------------\n\nTITLE: Installing Arcjet Node Packages with pnpm\nDESCRIPTION: This snippet demonstrates the installation of @arcjet/node and @arcjet/inspect packages using pnpm. It uses the pnpm add command.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/signup-protection/quick-start/nodejs/Step1.mdx#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npnpm add @arcjet/node @arcjet/inspect\n```\n\n----------------------------------------\n\nTITLE: Installing shadcn UI Components for Next.js\nDESCRIPTION: This command installs various UI components from the shadcn library for use in a Next.js project. It adds buttons, cards, inputs, labels, toasts, and related hooks.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/blueprints/payment-form.mdx#2025-04-12_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpx shadcn@latest add button card input label toast use-toast\n```\n\n----------------------------------------\n\nTITLE: Installing Arcjet Modules in Deno Projects\nDESCRIPTION: Demonstrates how to add the Arcjet SDK and inspect module as npm dependencies in a Deno project. Uses the 'deno add' command with npm specifiers to install the required packages.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/quick-start/deno/Step1.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndeno add npm:@arcjet/deno npm:@arcjet/inspect\n```\n\n----------------------------------------\n\nTITLE: Rendering Package Manager-specific Installation Commands with SelectableContent\nDESCRIPTION: This snippet uses a SelectableContent component to display installation commands for Arcjet packages. It provides separate slots for npm, pnpm, and yarn, allowing users to switch between different package managers.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/email-validation/quick-start/remix/Step1.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<SelectableContent client:load syncKey=\"packageManager\" frameworkSwitcher>\n<div slot=\"npm\" slotIdx=\"1\">\n```sh\nnpm i @arcjet/remix @arcjet/inspect\n```\n</div>\n<div slot=\"pnpm\" slotIdx=\"2\">\n```sh\npnpm add @arcjet/remix @arcjet/inspect\n```\n</div>\n<div slot=\"yarn\" slotIdx=\"3\">\n```sh\nyarn add @arcjet/remix @arcjet/inspect\n```\n</div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Rendering SelectableContent with Package Installation Commands\nDESCRIPTION: Renders the SelectableContent component with different package installation commands for npm, pnpm, and yarn. The component allows users to switch between different package managers.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/signup-protection/quick-start/nextjs/Step1.mdx#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<SelectableContent client:load syncKey=\"packageManager\">\n<Fragment slot=\"npm\">\n```sh\nnpm i @arcjet/next @arcjet/inspect\n```\n</Fragment>\n<Fragment slot=\"pnpm\">\n```sh\npnpm add @arcjet/next @arcjet/inspect\n```\n</Fragment>\n<Fragment slot=\"yarn\">\n```sh\nyarn add @arcjet/next @arcjet/inspect\n```\n</Fragment>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Starting Node.js Server with JavaScript\nDESCRIPTION: Command to start a JavaScript Node.js server with environment variables loaded from .env.local file. Requires Node.js 20+ for native env-file support.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/email-validation/quick-start/nodejs/Step4.mdx#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnode --env-file .env.local index.js\n```\n\n----------------------------------------\n\nTITLE: Client Override in TypeScript\nDESCRIPTION: Illustrates how to override the default Arcjet client with a custom implementation in TypeScript.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/reference/remix.mdx#2025-04-12_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ArcjetClient } from \"@arcjet/next\";\n\nconst customClient: ArcjetClient = {\n  async protect() {\n    // Custom implementation\n    return {\n      conclusion: \"ALLOW\",\n      reason: { message: \"Custom client always allows\" },\n    };\n  },\n};\n\nconst arcjet = createArcjet({\n  // other options\n  client: customClient,\n});\n```\n\n----------------------------------------\n\nTITLE: Importing FrameworkName Component in JavaScript\nDESCRIPTION: This snippet imports the FrameworkName component from a local components directory. It's likely used to render a framework-specific element in the application.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/sensitive-info/quick-start/shared/Step2SetEnv.mdx#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport FrameworkName from \"@/components/FrameworkName\";\n```\n\n----------------------------------------\n\nTITLE: Importing Astro Components\nDESCRIPTION: Import statements for Astro components including Aside from Starlight and a custom SelectableContent component.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/shield/quick-start/remix/Step4.mdx#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Aside } from \"@astrojs/starlight/components\";\nimport SelectableContent from \"@/components/SelectableContent\";\n```\n\n----------------------------------------\n\nTITLE: Installing Arcjet Packages with Yarn\nDESCRIPTION: Installs @arcjet/next and @arcjet/inspect packages using Yarn package manager\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/rate-limiting/quick-start/nextjs/Step1.mdx#2025-04-12_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @arcjet/next @arcjet/inspect\n```\n\n----------------------------------------\n\nTITLE: Installing @arcjet/nest with pnpm\nDESCRIPTION: This command installs the @arcjet/nest package using pnpm (Performant NPM). It adds the package to the project's dependencies.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/sensitive-info/quick-start/nestjs/Step1.mdx#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npnpm add @arcjet/nest\n```\n\n----------------------------------------\n\nTITLE: Setting Arcjet API Key in Environment Variables\nDESCRIPTION: Configuration of the Arcjet API key in a local environment file. The ARCJET_KEY environment variable is used for authenticating with Arcjet services.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/signup-protection/quick-start/shared/Step2.mdx#2025-04-12_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nARCJET_KEY=ajkey_yourkey\n```\n\n----------------------------------------\n\nTITLE: Installing Arcjet with Yarn\nDESCRIPTION: Installs Arcjet SvelteKit integration and inspection packages using Yarn package manager\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/get-started/sveltekit/Step1.mdx#2025-04-12_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @arcjet/sveltekit @arcjet/inspect\n```\n\n----------------------------------------\n\nTITLE: Installing Arcjet SvelteKit Dependencies with NPM\nDESCRIPTION: Command to install @arcjet/sveltekit and @arcjet/inspect packages using NPM package manager.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/rate-limiting/quick-start/sveltekit/Step1.mdx#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i @arcjet/sveltekit @arcjet/inspect\n```\n\n----------------------------------------\n\nTITLE: Installing Arcjet Packages with PNPM\nDESCRIPTION: Installs @arcjet/next and @arcjet/inspect packages using PNPM package manager.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/email-validation/quick-start/nextjs/Step1.mdx#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npnpm add @arcjet/next @arcjet/inspect\n```\n\n----------------------------------------\n\nTITLE: Installing Arcjet Packages with NPM\nDESCRIPTION: Command to install @arcjet/next and @arcjet/inspect packages using NPM package manager.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/shield/quick-start/nextjs/Step1.mdx#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i @arcjet/next @arcjet/inspect\n```\n\n----------------------------------------\n\nTITLE: Installing Arcjet with pnpm\nDESCRIPTION: Installs @arcjet/sveltekit and @arcjet/inspect packages using pnpm package manager\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/shield/quick-start/sveltekit/Step1.mdx#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npnpm add @arcjet/sveltekit @arcjet/inspect\n```\n\n----------------------------------------\n\nTITLE: Installing Arcjet with yarn\nDESCRIPTION: Installs @arcjet/sveltekit and @arcjet/inspect packages using yarn package manager\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/shield/quick-start/sveltekit/Step1.mdx#2025-04-12_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @arcjet/sveltekit @arcjet/inspect\n```\n\n----------------------------------------\n\nTITLE: Installing Hono with NPM\nDESCRIPTION: Command to create a new Hono project using npm package manager\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/get-started/bun-hono/Step0.mdx#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm create hono@latest\n```\n\n----------------------------------------\n\nTITLE: Installing Hono with Yarn\nDESCRIPTION: Command to create a new Hono project using yarn package manager\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/get-started/bun-hono/Step0.mdx#2025-04-12_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nyarn create hono\n```\n\n----------------------------------------\n\nTITLE: Starting Dev Server with Package Managers\nDESCRIPTION: Commands to start the development server using different package managers (npm, pnpm, or yarn)\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/get-started/next-js/Step4.mdx#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm run dev\n```\n\nLANGUAGE: sh\nCODE:\n```\npnpm run dev\n```\n\nLANGUAGE: sh\nCODE:\n```\nyarn run dev\n```\n\n----------------------------------------\n\nTITLE: Testing Rate Limit with cURL\nDESCRIPTION: Command to send a GET request to the local server using cURL. This can be used to test the rate limiting functionality of the server by repeatedly sending requests.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/rate-limiting/quick-start/bun/Step4.mdx#2025-04-12_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncurl http://localhost:3000\n```\n\n----------------------------------------\n\nTITLE: Default X-DNS-Prefetch-Control Configuration\nDESCRIPTION: Default configuration object for X-DNS-Prefetch-Control header that controls DNS prefetching behavior.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/nosecone/reference.mdx#2025-04-12_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  allow: false,\n}\n```\n\n----------------------------------------\n\nTITLE: Selectable Content Component Implementation\nDESCRIPTION: Component structure for displaying language-specific code examples with TypeScript and JavaScript options. Uses SelectableContent component for framework switching functionality.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/quick-start/remix/Step3.mdx#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<SelectableContent client:load syncKey=\"language\" frameworkSwitcher>\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code\n      code={Step3TS}\n      lang=\"ts\"\n      title=\"app/routes/arcjet.tsx\"\n      mark={[\"ARCJET_KEY\"]}\n    />\n  </div>\n  <div slot=\"JS\" slotIdx=\"2\">\n    <Code\n      code={Step3JS}\n      lang=\"js\"\n      title=\"app/routes/arcjet.jsx\"\n      mark={[\"ARCJET_KEY\"]}\n    />\n  </div>\n</SelectableContent>\n```\n\n----------------------------------------\n\nTITLE: Rendering Selectable TS/JS Code Snippets with Astro Components\nDESCRIPTION: This code imports components and raw code content, then uses SelectableContent to display either TypeScript or JavaScript code snippets. It allows users to switch between language versions and includes a note about middleware configuration.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/nosecone/reference/next-js/Middleware.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Code } from \"@astrojs/starlight/components\";\nimport SelectableContent from \"@/components/SelectableContent\";\n\nimport MiddlewareTS from \"./Middleware.ts?raw\";\nimport MiddlewareJS from \"./Middleware.js?raw\";\n\n<SelectableContent client:load syncKey=\"language\">\n  <div slot=\"TS\" slotIdx=\"1\">\n    <Code code={MiddlewareTS} lang=\"ts\" title=\"middleware.ts\" />\n  </div>\n  <div slot=\"JS\" slotIdx=\"2\">\n    <Code code={MiddlewareJS} lang=\"js\" title=\"middleware.js\" />\n  </div>\n</SelectableContent>\n\n:::note\nWe recommend you remove any `export const config = ...` from your middleware so\nNosecone will run on every route.\n:::\n```\n\n----------------------------------------\n\nTITLE: Importing Decision Log Display Components\nDESCRIPTION: Sets up the necessary imports for a React component that displays selectable code content, including raw code imports for both TypeScript and JavaScript implementations.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/snippets/bot-protection/reference/bun/DecisionLog.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport SelectableContent from \"@/components/SelectableContent\";\nimport { Code } from \"@astrojs/starlight/components\";\nimport DecisionLogJS from \"./DecisionLog.js?raw\";\nimport DecisionLogTS from \"./DecisionLog.ts?raw\";\n```\n\n----------------------------------------\n\nTITLE: Default X-XSS-Protection Configuration\nDESCRIPTION: Default value for X-XSS-Protection header configuration.\nSOURCE: https://github.com/arcjet/arcjet-docs/blob/main/src/content/docs/nosecone/reference.mdx#2025-04-12_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\ntrue;\n```"
  }
]