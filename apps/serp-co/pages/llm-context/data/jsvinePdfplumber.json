[
  {
    "owner": "jsvine",
    "repo": "pdfplumber",
    "content": "TITLE: Extracting Tables with pdfplumber in Python\nDESCRIPTION: Example of how to open a PDF file with pdfplumber, access the first page, and extract a table from it. This demonstrates the basic workflow for table extraction.\nSOURCE: https://github.com/jsvine/pdfplumber/blob/stable/README.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\npdf = pdfplumber.open(\"path/to/my.pdf\")\npage = pdf.pages[0]\npage.extract_table()\n```\n\n----------------------------------------\n\nTITLE: Basic pdfplumber Python usage example\nDESCRIPTION: Simple Python code demonstrating how to open a PDF file with pdfplumber, access the first page, and print information about the first character on the page.\nSOURCE: https://github.com/jsvine/pdfplumber/blob/stable/README.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport pdfplumber\n\nwith pdfplumber.open(\"path/to/file.pdf\") as pdf:\n    first_page = pdf.pages[0]\n    print(first_page.chars[0])\n```\n\n----------------------------------------\n\nTITLE: Installing pdfplumber via pip\nDESCRIPTION: Command to install the pdfplumber library using pip package manager.\nSOURCE: https://github.com/jsvine/pdfplumber/blob/stable/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npip install pdfplumber\n```\n\n----------------------------------------\n\nTITLE: Configuring Table Extraction Settings in PDFPlumber\nDESCRIPTION: Default configuration dictionary for PDFPlumber's extract_tables method. These settings control how the table extraction algorithm identifies and processes tables in PDF documents.\nSOURCE: https://github.com/jsvine/pdfplumber/blob/stable/README.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n{\n    \"vertical_strategy\": \"lines\", \n    \"horizontal_strategy\": \"lines\",\n    \"explicit_vertical_lines\": [],\n    \"explicit_horizontal_lines\": [],\n    \"snap_tolerance\": 3,\n    \"snap_x_tolerance\": 3,\n    \"snap_y_tolerance\": 3,\n    \"join_tolerance\": 3,\n    \"join_x_tolerance\": 3,\n    \"join_y_tolerance\": 3,\n    \"edge_min_length\": 3,\n    \"min_words_vertical\": 3,\n    \"min_words_horizontal\": 1,\n    \"intersection_tolerance\": 3,\n    \"intersection_x_tolerance\": 3,\n    \"intersection_y_tolerance\": 3,\n    \"text_tolerance\": 3,\n    \"text_x_tolerance\": 3,\n    \"text_y_tolerance\": 3,\n    \"text_*\": â€¦, # See below\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting Table Data from PDF Page\nDESCRIPTION: Uses the extract_table method to automatically identify and extract the largest table from the PDF page.\nSOURCE: https://github.com/jsvine/pdfplumber/blob/stable/examples/notebooks/extract-table-ca-warn-report.ipynb#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ntable = p0.extract_table()\n```\n\n----------------------------------------\n\nTITLE: Configuring Table Extraction Settings\nDESCRIPTION: Define custom settings for table extraction including vertical and horizontal strategies, tolerances for alignment\nSOURCE: https://github.com/jsvine/pdfplumber/blob/stable/examples/notebooks/extract-table-nics.ipynb#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ntable_settings = {\n    \"vertical_strategy\": \"lines\",\n    \"horizontal_strategy\": \"text\",\n    \"snap_y_tolerance\": 5,\n    \"intersection_x_tolerance\": 15,\n}\n```\n\n----------------------------------------\n\nTITLE: Opening and Repairing PDFs with pdfplumber\nDESCRIPTION: Examples of different methods to repair malformed PDFs using pdfplumber. Includes options for on-the-fly repair, getting repaired bytes, and saving repaired files to disk.\nSOURCE: https://github.com/jsvine/pdfplumber/blob/stable/docs/repairing.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npdfplumber.open(..., repair=True)\n```\n\nLANGUAGE: python\nCODE:\n```\npdfplumber.repair(path_to_pdf)\n```\n\nLANGUAGE: python\nCODE:\n```\npdfplumber.repair(path_to_pdf, outfile=\"path/to/repaired.pdf\")\n```\n\nLANGUAGE: python\nCODE:\n```\ngs_path=...\n```\n\n----------------------------------------\n\nTITLE: Extracting Form Values from PDF Documents Using PDFPlumber\nDESCRIPTION: This script uses PDFPlumber's wrappers around PDFMiner to access form field data in PDF documents. It recursively traverses the form structure to extract field names, alternate field names, and values, storing them in a list.\nSOURCE: https://github.com/jsvine/pdfplumber/blob/stable/README.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport pdfplumber\nfrom pdfplumber.utils.pdfinternals import resolve_and_decode, resolve\n\npdf = pdfplumber.open(\"document_with_form.pdf\")\n\ndef parse_field_helper(form_data, field, prefix=None):\n    \"\"\" appends any PDF AcroForm field/value pairs in `field` to provided `form_data` list\n\n        if `field` has child fields, those will be parsed recursively.\n    \"\"\"\n    resolved_field = field.resolve()\n    field_name = '.'.join(filter(lambda x: x, [prefix, resolve_and_decode(resolved_field.get(\"T\"))]))\n    if \"Kids\" in resolved_field:\n        for kid_field in resolved_field[\"Kids\"]:\n            parse_field_helper(form_data, kid_field, prefix=field_name)\n    if \"T\" in resolved_field or \"TU\" in resolved_field:\n        # \"T\" is a field-name, but it's sometimes absent.\n        # \"TU\" is the \"alternate field name\" and is often more human-readable\n        # your PDF may have one, the other, or both.\n        alternate_field_name  = resolve_and_decode(resolved_field.get(\"TU\")) if resolved_field.get(\"TU\") else None\n        field_value = resolve_and_decode(resolved_field[\"V\"]) if 'V' in resolved_field else None\n        form_data.append([field_name, alternate_field_name, field_value])\n\n\nform_data = []\nfields = resolve(resolve(pdf.doc.catalog[\"AcroForm\"])[\"Fields\"])\nfor field in fields:\n    parse_field_helper(form_data, field)\n```\n\n----------------------------------------\n\nTITLE: Converting Extracted Table to DataFrame and Cleaning Data\nDESCRIPTION: Creates a pandas DataFrame from the extracted table data, using the first row as column headers, and cleans up extra spaces in date columns.\nSOURCE: https://github.com/jsvine/pdfplumber/blob/stable/examples/notebooks/extract-table-ca-warn-report.ipynb#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndf = pd.DataFrame(table[1:], columns=table[0])\nfor column in [\"Effective\", \"Received\"]:\n    df[column] = df[column].str.replace(\" \", \"\")\n```\n\n----------------------------------------\n\nTITLE: Creating Pandas DataFrame for Data Visualization\nDESCRIPTION: Converts the parsed data into a pandas DataFrame for easier viewing and analysis of the complete dataset.\nSOURCE: https://github.com/jsvine/pdfplumber/blob/stable/examples/notebooks/san-jose-pd-firearm-report.ipynb#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\ncolumns = list(parsed[0].keys())\npd.DataFrame(parsed)[columns]\n```\n\n----------------------------------------\n\nTITLE: Visualizing Table Extraction Process\nDESCRIPTION: Uses pdfplumber's visual debugging feature to display how the table was detected and extracted, showing the lines and cell boundaries identified.\nSOURCE: https://github.com/jsvine/pdfplumber/blob/stable/examples/notebooks/extract-table-ca-warn-report.ipynb#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nim.debug_tablefinder()\n```\n\n----------------------------------------\n\nTITLE: Defining Row Parsing Function\nDESCRIPTION: Creates a function to parse each two-line group into a structured dictionary with named fields based on character positions in the fixed-width format.\nSOURCE: https://github.com/jsvine/pdfplumber/blob/stable/examples/notebooks/san-jose-pd-firearm-report.ipynb#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ndef parse_row(first_line, second_line):\n    return {\n        \"type\": first_line[:20].strip(),\n        \"item\": first_line[21:41].strip(),\n        \"make\": first_line[44:89].strip(),\n        \"model\": first_line[90:105].strip(),\n        \"calibre\": first_line[106:111].strip(),\n        \"status\": first_line[112:120].strip(),\n        \"flags\": first_line[124:129].strip(),\n        \"serial_number\": second_line[0:13].strip(),\n        \"report_tag_number\": second_line[21:41].strip(),\n        \"case_file_number\": second_line[44:64].strip(),\n        \"storage_location\": second_line[68:91].strip(),\n    }\n```\n\n----------------------------------------\n\nTITLE: Extracting Text with Preserved Spacing\nDESCRIPTION: Extracts all text from the page while preserving whitespace characters to maintain the fixed-width table structure.\nSOURCE: https://github.com/jsvine/pdfplumber/blob/stable/examples/notebooks/san-jose-pd-firearm-report.ipynb#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ntext = p0.extract_text(keep_blank_chars=True)\nprint(text)\n```\n\n----------------------------------------\n\nTITLE: Visualizing Table Cell Bounding Boxes in PDF Using pdfplumber and PDFStructTree\nDESCRIPTION: This snippet demonstrates how to use the PDFStructTree object to visualize the bounding boxes of table cells (TD elements) on the first page of a PDF document. It uses the to_image() method to create an image and draws rectangles for each TD element.\nSOURCE: https://github.com/jsvine/pdfplumber/blob/stable/docs/structure.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\npage = pdf.pages[0]\nstree = PDFStructTree(pdf, page)\nimg = page.to_image()\nimg.draw_rects(stree.element_bbox(td) for td in table.find_all(\"TD\"))\n```\n\n----------------------------------------\n\nTITLE: Identifying and Visualizing Horizontal Gridlines\nDESCRIPTION: Filters line objects to identify horizontal gridlines in the charts based on their width and position.\nSOURCE: https://github.com/jsvine/pdfplumber/blob/stable/examples/notebooks/ag-energy-roundup-curves.ipynb#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ngridlines =  [ x for x in report.lines\n    if x[\"width\"] > 10 and x[\"x0\"] > report.width / 2 ]\n\nim.reset().draw_lines(gridlines)\n```\n\n----------------------------------------\n\nTITLE: Parsing All Rows in the Table\nDESCRIPTION: Applies the parsing function to all row groups to create a list of structured data dictionaries.\nSOURCE: https://github.com/jsvine/pdfplumber/blob/stable/examples/notebooks/san-jose-pd-firearm-report.ipynb#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nparsed = [ parse_row(first_line, second_line) \n    for first_line, second_line in line_groups ]\n```\n\n----------------------------------------\n\nTITLE: Data Parsing Functions\nDESCRIPTION: Helper functions to parse and clean extracted table data, converting string numbers to integers\nSOURCE: https://github.com/jsvine/pdfplumber/blob/stable/examples/notebooks/extract-table-nics.ipynb#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndef parse_value(i, x):\n    if i == 0: return x\n    if x == \"\": return None\n    return int(x.replace(\",\", \"\"))\n\nfrom collections import OrderedDict\ndef parse_row(row):\n    return {COLUMNS[i]:parse_value(i, cell)\n        for i, cell in enumerate(row)}\n```\n\n----------------------------------------\n\nTITLE: Creating PageImage from PDF Page in Python\nDESCRIPTION: Demonstrates how to create a PageImage object from a PDF page using the to_image() method with custom resolution.\nSOURCE: https://github.com/jsvine/pdfplumber/blob/stable/README.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nim = my_pdf.pages[0].to_image(resolution=150)\n```\n\n----------------------------------------\n\nTITLE: Defining Table Column Structure\nDESCRIPTION: Define column names for the extracted table data\nSOURCE: https://github.com/jsvine/pdfplumber/blob/stable/examples/notebooks/extract-table-nics.ipynb#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nCOLUMNS = [\n    \"state\",\n    \"permit\",\n    \"handgun\",\n    \"long_gun\",\n    \"other\",\n    \"multiple\",\n    \"admin\",\n    \"prepawn_handgun\",\n    \"prepawn_long_gun\",\n    \"prepawn_other\",\n    \"redemption_handgun\",\n    \"redemption_long_gun\",\n    \"redemption_other\",\n    \"returned_handgun\",\n    \"returned_long_gun\",\n    \"returned_other\",\n    \"rentals_handgun\",\n    \"rentals_long_gun\",\n    \"private_sale_handgun\",\n    \"private_sale_long_gun\",\n    \"private_sale_other\",\n    \"return_to_seller_handgun\",\n    \"return_to_seller_long_gun\",\n    \"return_to_seller_other\",\n    \"totals\"\n]\n```\n\n----------------------------------------\n\nTITLE: Using pdfplumber CLI to extract PDF data\nDESCRIPTION: Command-line example showing how to download a PDF file using curl and pipe it to pdfplumber to generate a CSV output of PDF objects.\nSOURCE: https://github.com/jsvine/pdfplumber/blob/stable/README.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncurl \"https://raw.githubusercontent.com/jsvine/pdfplumber/stable/examples/pdfs/background-checks.pdf\" > background-checks.pdf\npdfplumber < background-checks.pdf > background-checks.csv\n```\n\n----------------------------------------\n\nTITLE: Extracting Core Table Content\nDESCRIPTION: Uses the regex pattern to extract only the main table content from the text.\nSOURCE: https://github.com/jsvine/pdfplumber/blob/stable/examples/notebooks/san-jose-pd-firearm-report.ipynb#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ncore = re.search(core_pat, text).group(1)\n```\n\n----------------------------------------\n\nTITLE: Examining Curve Object Structure\nDESCRIPTION: Displays the structure of the first curve object to understand its properties and format.\nSOURCE: https://github.com/jsvine/pdfplumber/blob/stable/examples/notebooks/ag-energy-roundup-curves.ipynb#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nreport.curves[0]\n```\n\n----------------------------------------\n\nTITLE: Converting PDF Bounding Box Coordinates to pdfplumber Space in Python\nDESCRIPTION: This code snippet shows how to convert bounding box coordinates from PDF coordinate space (origin at bottom-left) to pdfplumber's coordinate space (origin at top-left). It extracts the BBox attribute from a structure element and calculates the corresponding coordinates.\nSOURCE: https://github.com/jsvine/pdfplumber/blob/stable/docs/structure.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nx0, y0, x1, y1 = element['attributes']['BBox']\ntop = page.height - y1\nbottom = page.height - y0\ndoctop = page.initial_doctop + top\nbbox = (x0, top, x1, bottom)\n```\n\n----------------------------------------\n\nTITLE: Accessing Character Rotation Information with CTM in Python\nDESCRIPTION: This snippet demonstrates how to use the CTM (Current Transformation Matrix) class from pdfplumber to calculate a character's rotation. The CTM controls scale, skew, and position translation, with rotation typically equal to the x-axis skew.\nSOURCE: https://github.com/jsvine/pdfplumber/blob/stable/README.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom pdfplumber.ctm import CTM\nmy_char = pdf.pages[0].chars[3]\nmy_char_ctm = CTM(*my_char[\"matrix\"])\nmy_char_rotation = my_char_ctm.skew_x\n```\n\n----------------------------------------\n\nTITLE: Viewing Extracted Table Data\nDESCRIPTION: Displays the first three rows of the extracted table data to verify the extraction process.\nSOURCE: https://github.com/jsvine/pdfplumber/blob/stable/examples/notebooks/extract-table-ca-warn-report.ipynb#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ntable[:3]\n```\n\n----------------------------------------\n\nTITLE: Counting Curve Objects in a PDF\nDESCRIPTION: Accesses the curves property of a Page object and counts the number of curve objects found on the page.\nSOURCE: https://github.com/jsvine/pdfplumber/blob/stable/examples/notebooks/ag-energy-roundup-curves.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nlen(report.curves)\n```\n\n----------------------------------------\n\nTITLE: Visualizing Curves with Simple Drawing\nDESCRIPTION: Draws all curve objects on the page image using a single color to visualize their positions.\nSOURCE: https://github.com/jsvine/pdfplumber/blob/stable/examples/notebooks/ag-energy-roundup-curves.ipynb#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nim.draw_lines(report.curves, stroke=\"green\", stroke_width=2)\n```\n\n----------------------------------------\n\nTITLE: Creating Regex Pattern for Main Content\nDESCRIPTION: Defines a regular expression pattern to extract only the core table content from the page, excluding headers and footers.\nSOURCE: https://github.com/jsvine/pdfplumber/blob/stable/examples/notebooks/san-jose-pd-firearm-report.ipynb#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ncore_pat = re.compile(r\"LOCATION[\\-\\s]+(.*)\n\\s+Flags = e\", re.DOTALL)\n```\n\n----------------------------------------\n\nTITLE: Displaying the Cleaned DataFrame\nDESCRIPTION: Outputs the pandas DataFrame to display the cleaned and formatted table data from the PDF.\nSOURCE: https://github.com/jsvine/pdfplumber/blob/stable/examples/notebooks/extract-table-ca-warn-report.ipynb#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndf\n```\n\n----------------------------------------\n\nTITLE: Grouping Table Rows\nDESCRIPTION: Splits the content into lines and groups them into pairs as each firearm entry spans two lines in the report.\nSOURCE: https://github.com/jsvine/pdfplumber/blob/stable/examples/notebooks/san-jose-pd-firearm-report.ipynb#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nlines = core.split(\"\\n\")\nline_groups = list(zip(lines[::2], lines[1::2]))\nprint(line_groups[0])\n```\n\n----------------------------------------\n\nTITLE: Iterating Through Page Structure Tree Elements in Python with pdfplumber\nDESCRIPTION: This snippet demonstrates how to open a PDF file using pdfplumber and iterate through the structure tree elements of the first page. It prints the type and marked content IDs (mcids) of each element and its children.\nSOURCE: https://github.com/jsvine/pdfplumber/blob/stable/docs/structure.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nwith pdfplumber.open(pdffile) as pdf:\n    for element in pdf.pages[0].structure_tree:\n         print(element[\"type\"], element[\"mcids\"])\n         for child in element.children:\n             print(child[\"type\"], child[\"mcids\"])\n```\n\n----------------------------------------\n\nTITLE: Converting PDF Page to Image\nDESCRIPTION: Converts the first page of the PDF to an image object for visualization and debugging purposes.\nSOURCE: https://github.com/jsvine/pdfplumber/blob/stable/examples/notebooks/extract-table-ca-warn-report.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nim = p0.to_image()\nim\n```\n\n----------------------------------------\n\nTITLE: Converting Page to Image\nDESCRIPTION: Convert the PDF page to an image for visualization\nSOURCE: https://github.com/jsvine/pdfplumber/blob/stable/examples/notebooks/extract-table-nics.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nim = p0.to_image()\nim\n```\n\n----------------------------------------\n\nTITLE: Converting Page to Image\nDESCRIPTION: Converts the first page to an image for visualization purposes.\nSOURCE: https://github.com/jsvine/pdfplumber/blob/stable/examples/notebooks/san-jose-pd-firearm-report.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nim = p0.to_image()\nim\n```\n\n----------------------------------------\n\nTITLE: Loading the PDF Document\nDESCRIPTION: Opens the sample PDF document containing San Jose PD firearm search reports using pdfplumber.\nSOURCE: https://github.com/jsvine/pdfplumber/blob/stable/examples/notebooks/san-jose-pd-firearm-report.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\npdf = pdfplumber.open(\"../pdfs/san-jose-pd-firearm-sample.pdf\")\n```\n\n----------------------------------------\n\nTITLE: Converting a PDF Page to Image\nDESCRIPTION: Converts the PDF page to an image object for visualization purposes.\nSOURCE: https://github.com/jsvine/pdfplumber/blob/stable/examples/notebooks/ag-energy-roundup-curves.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nim = report.to_image()\nim\n```\n\n----------------------------------------\n\nTITLE: Accessing a Specific Page from PDF\nDESCRIPTION: Retrieves the first page from the loaded PDF document for analysis.\nSOURCE: https://github.com/jsvine/pdfplumber/blob/stable/examples/notebooks/extract-table-ca-warn-report.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\np0 = pdf.pages[0]\n```\n\n----------------------------------------\n\nTITLE: Accessing PDF Page\nDESCRIPTION: Get the first page of the PDF document\nSOURCE: https://github.com/jsvine/pdfplumber/blob/stable/examples/notebooks/extract-table-nics.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\np0 = pdf.pages[0]\n```\n\n----------------------------------------\n\nTITLE: Accessing the First Page\nDESCRIPTION: Gets the first page of the PDF for analysis.\nSOURCE: https://github.com/jsvine/pdfplumber/blob/stable/examples/notebooks/san-jose-pd-firearm-report.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\np0 = pdf.pages[0]\n```\n\n----------------------------------------\n\nTITLE: Loading a PDF Page with pdfplumber\nDESCRIPTION: Opens a PDF file containing USDA's National Weekly Ag Energy Round-Up report and accesses its first page.\nSOURCE: https://github.com/jsvine/pdfplumber/blob/stable/examples/notebooks/ag-energy-roundup-curves.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nreport = pdfplumber.open(\"../pdfs/ag-energy-round-up-2017-02-24.pdf\").pages[0]\n```\n\n----------------------------------------\n\nTITLE: Loading a PDF with pdfplumber\nDESCRIPTION: Opens a PDF file located at a relative path and assigns it to a variable for further processing.\nSOURCE: https://github.com/jsvine/pdfplumber/blob/stable/examples/notebooks/extract-table-ca-warn-report.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\npdf = pdfplumber.open(\"../pdfs/ca-warn-report.pdf\")\n```\n\n----------------------------------------\n\nTITLE: Loading PDF Document\nDESCRIPTION: Open a PDF file using pdfplumber\nSOURCE: https://github.com/jsvine/pdfplumber/blob/stable/examples/notebooks/extract-table-nics.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\npdf = pdfplumber.open(\"../pdfs/background-checks.pdf\")\n```\n\n----------------------------------------\n\nTITLE: Displaying Parsed Results Sample\nDESCRIPTION: Shows the first two parsed entries to verify the data extraction.\nSOURCE: https://github.com/jsvine/pdfplumber/blob/stable/examples/notebooks/san-jose-pd-firearm-report.ipynb#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nparsed[:2]\n```\n\n----------------------------------------\n\nTITLE: Printing Core Content\nDESCRIPTION: Prints the extracted core content to verify the extraction.\nSOURCE: https://github.com/jsvine/pdfplumber/blob/stable/examples/notebooks/san-jose-pd-firearm-report.ipynb#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nprint(core)\n```\n\n----------------------------------------\n\nTITLE: Visualizing Curves with Color Cycling\nDESCRIPTION: Draws curves with different colors in a cyclic pattern and adds circle markers at data points for better visualization.\nSOURCE: https://github.com/jsvine/pdfplumber/blob/stable/examples/notebooks/ag-energy-roundup-curves.ipynb#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nim.reset()\ncolors = [ \"red\", \"blue\", \"green\" ]\nfor i, curve in enumerate(report.curves):\n    stroke = colors[i%len(colors)]\n    im.draw_circles(curve[\"pts\"], radius=3, stroke=stroke, fill=\"white\")\n    im.draw_line(curve[\"pts\"], stroke=stroke, stroke_width=2)\nim\n```\n\n----------------------------------------\n\nTITLE: Importing pdfplumber and Checking Version\nDESCRIPTION: Imports the pdfplumber library and prints its version number to verify the installation.\nSOURCE: https://github.com/jsvine/pdfplumber/blob/stable/examples/notebooks/ag-energy-roundup-curves.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport pdfplumber\nprint(pdfplumber.__version__)\n```\n\n----------------------------------------\n\nTITLE: Importing pdfplumber and Checking Version\nDESCRIPTION: Imports the pdfplumber library and prints its version number to verify installation.\nSOURCE: https://github.com/jsvine/pdfplumber/blob/stable/examples/notebooks/extract-table-ca-warn-report.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport pdfplumber\nprint(pdfplumber.__version__)\n```\n\n----------------------------------------\n\nTITLE: Importing and Initializing pdfplumber\nDESCRIPTION: Import the pdfplumber library and print its version number\nSOURCE: https://github.com/jsvine/pdfplumber/blob/stable/examples/notebooks/extract-table-nics.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport pdfplumber\nprint(pdfplumber.__version__)\n```\n\n----------------------------------------\n\nTITLE: Visualizing Character Locations with Rectangles\nDESCRIPTION: Draws rectangles around each character detected on the page to understand the structure of the fixed-width table.\nSOURCE: https://github.com/jsvine/pdfplumber/blob/stable/examples/notebooks/san-jose-pd-firearm-report.ipynb#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nim.reset().draw_rects(p0.chars)\n```\n\n----------------------------------------\n\nTITLE: Importing pdfplumber and Checking Version\nDESCRIPTION: Imports the pdfplumber library along with the re module for regular expressions and prints the version of pdfplumber being used.\nSOURCE: https://github.com/jsvine/pdfplumber/blob/stable/examples/notebooks/san-jose-pd-firearm-report.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport pdfplumber\nimport re\nprint(pdfplumber.__version__)\n```\n\n----------------------------------------\n\nTITLE: Importing pandas for Data Processing\nDESCRIPTION: Imports the pandas library to assist with data cleaning and presentation of the extracted table.\nSOURCE: https://github.com/jsvine/pdfplumber/blob/stable/examples/notebooks/extract-table-ca-warn-report.ipynb#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\n```\n\n----------------------------------------\n\nTITLE: Formatting pdfplumber code\nDESCRIPTION: Commands to ensure code conforms to the project's formatting standards using black, isort, and flake8 tools.\nSOURCE: https://github.com/jsvine/pdfplumber/blob/stable/CONTRIBUTING.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmake format\n```\n\nLANGUAGE: shell\nCODE:\n```\nmake lint\n```\n\n----------------------------------------\n\nTITLE: Running pdfplumber tests\nDESCRIPTION: Commands to execute the test suite for pdfplumber to verify changes work as expected. The tests should pass with new code but fail on previous commits.\nSOURCE: https://github.com/jsvine/pdfplumber/blob/stable/CONTRIBUTING.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake tests\n```\n\nLANGUAGE: shell\nCODE:\n```\npython -m pytest\n```\n\n----------------------------------------\n\nTITLE: Repairing PDFs using Ghostscript\nDESCRIPTION: Command to repair malformed PDFs using Ghostscript's PDF writer device. This approach can fix many PDF issues before reporting bugs to pdfplumber.\nSOURCE: https://github.com/jsvine/pdfplumber/blob/stable/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngs -o repaired.pdf -sDEVICE=pdfwrite original.pdf\n```\n\n----------------------------------------\n\nTITLE: Defining Python Package Dependencies for pdfplumber\nDESCRIPTION: Lists the required dependencies for the pdfplumber library with their version constraints. The file specifies pdfminer.six with an exact version, Pillow with a minimum version, and pypdfium2 with a minimum version.\nSOURCE: https://github.com/jsvine/pdfplumber/blob/stable/requirements.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\npdfminer.six==20250327\nPillow>=9.1\npypdfium2>=4.18.0\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Package Dependencies with Versions\nDESCRIPTION: This snippet lists Python packages and their exact versions required for the pdfplumber project. It includes libraries for development, testing, code quality, and data analysis. The file format is typically used with pip for installing dependencies.\nSOURCE: https://github.com/jsvine/pdfplumber/blob/stable/requirements-dev.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nblack==24.8.0\nflake8==7.1.1\nisort==5.13.2\njupyterlab==3.6.7\nmypy==1.11.1\nnbexec==0.2.0\npandas-stubs==2.2.2.240805\npandas==2.2.2\npy==1.11.0\npytest-cov==5.0.0\npytest-parallel==0.1.1\npytest==8.3.2\nsetuptools==68.2.2\ntypes-Pillow==10.2.0.20240520\n```"
  }
]