[
  {
    "owner": "charmbracelet",
    "repo": "bubbletea",
    "content": "TITLE: Implementing Update Method for Bubble Tea Model\nDESCRIPTION: Implements the Update method that handles incoming events and updates the model state. Handles keyboard inputs for navigation, selection, and quitting the application.\nSOURCE: https://github.com/charmbracelet/bubbletea/blob/main/tutorials/basics/README.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc (m model) Update(msg tea.Msg) (tea.Model, tea.Cmd) {\n    switch msg := msg.(type) {\n\n    // Is it a key press?\n    case tea.KeyMsg:\n\n        // Cool, what was the actual key pressed?\n        switch msg.String() {\n\n        // These keys should exit the program.\n        case \"ctrl+c\", \"q\":\n            return m, tea.Quit\n\n        // The \"up\" and \"k\" keys move the cursor up\n        case \"up\", \"k\":\n            if m.cursor > 0 {\n                m.cursor--\n            }\n\n        // The \"down\" and \"j\" keys move the cursor down\n        case \"down\", \"j\":\n            if m.cursor < len(m.choices)-1 {\n                m.cursor++\n            }\n\n        // The \"enter\" key and the spacebar (a literal space) toggle\n        // the selected state for the item that the cursor is pointing at.\n        case \"enter\", \" \":\n            _, ok := m.selected[m.cursor]\n            if ok {\n                delete(m.selected, m.cursor)\n            } else {\n                m.selected[m.cursor] = struct{}{}\n            }\n        }\n    }\n\n    // Return the updated model to the Bubble Tea runtime for processing.\n    // Note that we're not returning a command.\n    return m, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Update Method for Bubble Tea Model in Go\nDESCRIPTION: Defines the Update method for the model, which handles incoming messages and updates the application state accordingly. It processes key presses to move the cursor, toggle selections, and quit the application.\nSOURCE: https://github.com/charmbracelet/bubbletea/blob/main/README.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc (m model) Update(msg tea.Msg) (tea.Model, tea.Cmd) {\n    switch msg := msg.(type) {\n\n    // Is it a key press?\n    case tea.KeyMsg:\n\n        // Cool, what was the actual key pressed?\n        switch msg.String() {\n\n        // These keys should exit the program.\n        case \"ctrl+c\", \"q\":\n            return m, tea.Quit\n\n        // The \"up\" and \"k\" keys move the cursor up\n        case \"up\", \"k\":\n            if m.cursor > 0 {\n                m.cursor--\n            }\n\n        // The \"down\" and \"j\" keys move the cursor down\n        case \"down\", \"j\":\n            if m.cursor < len(m.choices)-1 {\n                m.cursor++\n            }\n\n        // The \"enter\" key and the spacebar (a literal space) toggle\n        // the selected state for the item that the cursor is pointing at.\n        case \"enter\", \" \":\n            _, ok := m.selected[m.cursor]\n            if ok {\n                delete(m.selected, m.cursor)\n            } else {\n                m.selected[m.cursor] = struct{}{}\n            }\n        }\n    }\n\n    // Return the updated model to the Bubble Tea runtime for processing.\n    // Note that we're not returning a command.\n    return m, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing View Method for Bubble Tea Model\nDESCRIPTION: Defines the View method that renders the UI based on the current model state. Generates a string representation of the shopping list with cursor and selected item indicators.\nSOURCE: https://github.com/charmbracelet/bubbletea/blob/main/tutorials/basics/README.md#2025-04-23_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nfunc (m model) View() string {\n    // The header\n    s := \"What should we buy at the market?\\n\\n\"\n\n    // Iterate over our choices\n    for i, choice := range m.choices {\n\n        // Is the cursor pointing at this choice?\n        cursor := \" \" // no cursor\n        if m.cursor == i {\n            cursor = \">\" // cursor!\n        }\n\n        // Is this choice selected?\n        checked := \" \" // not selected\n        if _, ok := m.selected[i]; ok {\n            checked = \"x\" // selected!\n        }\n\n        // Render the row\n        s += fmt.Sprintf(\"%s [%s] %s\\n\", cursor, checked, choice)\n    }\n\n    // The footer\n    s += \"\\nPress q to quit.\\n\"\n\n    // Send the UI for rendering\n    return s\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing View Method for Bubble Tea Model in Go\nDESCRIPTION: Defines the View method for the model, which renders the current application state as a string. It creates a formatted list of choices with cursor and selection indicators.\nSOURCE: https://github.com/charmbracelet/bubbletea/blob/main/README.md#2025-04-23_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nfunc (m model) View() string {\n    // The header\n    s := \"What should we buy at the market?\\n\\n\"\n\n    // Iterate over our choices\n    for i, choice := range m.choices {\n\n        // Is the cursor pointing at this choice?\n        cursor := \" \" // no cursor\n        if m.cursor == i {\n            cursor = \">\" // cursor!\n        }\n\n        // Is this choice selected?\n        checked := \" \" // not selected\n        if _, ok := m.selected[i]; ok {\n            checked = \"x\" // selected!\n        }\n\n        // Render the row\n        s += fmt.Sprintf(\"%s [%s] %s\\n\", cursor, checked, choice)\n    }\n\n    // The footer\n    s += \"\\nPress q to quit.\\n\"\n\n    // Send the UI for rendering\n    return s\n}\n```\n\n----------------------------------------\n\nTITLE: Running Bubble Tea Application in Go\nDESCRIPTION: Main function that creates a new Bubble Tea program with the initial model and runs it. Includes error handling in case the program encounters issues.\nSOURCE: https://github.com/charmbracelet/bubbletea/blob/main/tutorials/basics/README.md#2025-04-23_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n    p := tea.NewProgram(initialModel())\n    if _, err := p.Run(); err != nil {\n        fmt.Printf(\"Alas, there's been an error: %v\", err)\n        os.Exit(1)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Bubble Tea Application in Go\nDESCRIPTION: Implements the main function to create and run the Bubble Tea program with the initial model. It also includes basic error handling.\nSOURCE: https://github.com/charmbracelet/bubbletea/blob/main/README.md#2025-04-23_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n    p := tea.NewProgram(initialModel())\n    if _, err := p.Run(); err != nil {\n        fmt.Printf(\"Alas, there's been an error: %v\", err)\n        os.Exit(1)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Model Structure for Bubble Tea Application\nDESCRIPTION: Defines the model struct that stores the application state for a shopping list app. Includes arrays for choices, cursor position, and a map to track selected items.\nSOURCE: https://github.com/charmbracelet/bubbletea/blob/main/tutorials/basics/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype model struct {\n    choices  []string           // items on the to-do list\n    cursor   int                // which to-do list item our cursor is pointing at\n    selected map[int]struct{}   // which to-do items are selected\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Model Structure for Bubble Tea Application in Go\nDESCRIPTION: Defines the model struct that represents the application state. It includes fields for the list of choices, cursor position, and selected items.\nSOURCE: https://github.com/charmbracelet/bubbletea/blob/main/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype model struct {\n    choices  []string           // items on the to-do list\n    cursor   int                // which to-do list item our cursor is pointing at\n    selected map[int]struct{}   // which to-do items are selected\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Initial Model for Bubble Tea Application\nDESCRIPTION: Function that returns the initial model state for the shopping list application. Sets up default choices and initializes an empty selected items map.\nSOURCE: https://github.com/charmbracelet/bubbletea/blob/main/tutorials/basics/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc initialModel() model {\n\treturn model{\n\t\t// Our to-do list is a grocery list\n\t\tchoices:  []string{\"Buy carrots\", \"Buy celery\", \"Buy kohlrabi\"},\n\n\t\t// A map which indicates which choices are selected. We're using\n\t\t// the map like a mathematical set. The keys refer to the indexes\n\t\t// of the `choices` slice, above.\n\t\tselected: make(map[int]struct{}),\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Model for Bubble Tea Application in Go\nDESCRIPTION: Creates and returns the initial model for the application. It sets up the initial choices and an empty map for selected items.\nSOURCE: https://github.com/charmbracelet/bubbletea/blob/main/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc initialModel() model {\n\treturn model{\n\t\t// Our to-do list is a grocery list\n\t\tchoices:  []string{\"Buy carrots\", \"Buy celery\", \"Buy kohlrabi\"},\n\n\t\t// A map which indicates which choices are selected. We're using\n\t\t// the  map like a mathematical set. The keys refer to the indexes\n\t\t// of the `choices` slice, above.\n\t\tselected: make(map[int]struct{}),\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Init Method for Bubble Tea Model\nDESCRIPTION: Defines the Init method for the model, which returns initial commands to run. In this simple case, no commands are needed so it returns nil.\nSOURCE: https://github.com/charmbracelet/bubbletea/blob/main/tutorials/basics/README.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc (m model) Init() tea.Cmd {\n    // Just return `nil`, which means \"no I/O right now, please.\"\n    return nil\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Init Method for Bubble Tea Model in Go\nDESCRIPTION: Defines the Init method for the model, which is called when the application starts. In this case, it returns nil as no initial command is needed.\nSOURCE: https://github.com/charmbracelet/bubbletea/blob/main/README.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc (m model) Init() tea.Cmd {\n    // Just return `nil`, which means \"no I/O right now, please.\"\n    return nil\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Bubble Tea Application in Go\nDESCRIPTION: Basic import statements for a Bubble Tea application. Imports the essential packages including the Bubble Tea library (aliased as 'tea').\nSOURCE: https://github.com/charmbracelet/bubbletea/blob/main/tutorials/basics/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"fmt\"\n    \"os\"\n\n    tea \"github.com/charmbracelet/bubbletea\"\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Bubble Tea Application Structure in Go\nDESCRIPTION: Sets up the basic structure for a Bubble Tea application, including package declaration and imports. The tea package is imported as an alias for the Bubble Tea framework.\nSOURCE: https://github.com/charmbracelet/bubbletea/blob/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\n// These imports will be used later on the tutorial. If you save the file\n// now, Go might complain they are unused, but that's fine.\n// You may also need to run `go mod tidy` to download bubbletea and its\n// dependencies.\nimport (\n    \"fmt\"\n    \"os\"\n\n    tea \"github.com/charmbracelet/bubbletea\"\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing a Simple Bubble Tea Program in Go\nDESCRIPTION: This code snippet demonstrates how to create a basic Bubble Tea program. It includes a model with a counter, update logic to handle keyboard input, and a view function to render the UI.\nSOURCE: https://github.com/charmbracelet/bubbletea/blob/main/examples/simple/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"os\"\n\n\ttea \"github.com/charmbracelet/bubbletea\"\n)\n\ntype model struct {\n\tcount int\n}\n\nfunc initialModel() model {\n\treturn model{\n\t\tcount: 0,\n\t}\n}\n\nfunc (m model) Init() tea.Cmd {\n\treturn nil\n}\n\nfunc (m model) Update(msg tea.Msg) (tea.Model, tea.Cmd) {\n\tswitch msg := msg.(type) {\n\tcase tea.KeyMsg:\n\t\tswitch msg.String() {\n\t\tcase \"q\", \"ctrl+c\":\n\t\t\treturn m, tea.Quit\n\t\tcase \"+\", \"up\":\n\t\t\tm.count++\n\t\tcase \"-\", \"down\":\n\t\t\tm.count--\n\t\t}\n\t}\n\treturn m, nil\n}\n\nfunc (m model) View() string {\n\treturn fmt.Sprintf(\n\t\t\"What's your favorite number?\\n\\n%d\\n\\n%s\\n%s\",\n\t\tm.count,\n\t\t\"(up/down to change, q to quit)\",\n\t\t\"\\n\",\n\t)\n}\n\nfunc main() {\n\tp := tea.NewProgram(initialModel())\n\tif _, err := p.Run(); err != nil {\n\t\tfmt.Printf(\"Alas, there's been an error: %v\", err)\n\t\tos.Exit(1)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Server Check Command in Go\nDESCRIPTION: Creates a command function that performs an HTTP request and returns appropriate messages based on the response or error.\nSOURCE: https://github.com/charmbracelet/bubbletea/blob/main/tutorials/commands/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc checkServer() tea.Msg {\n\n    // Create an HTTP client and make a GET request.\n    c := &http.Client{Timeout: 10 * time.Second}\n    res, err := c.Get(url)\n\n    if err != nil {\n        // There was an error making our request. Wrap the error we received\n        // in a message and return it.\n        return errMsg{err}\n    }\n    // We received a response from the server. Return the HTTP status code\n    // as a message.\n    return statusMsg(res.StatusCode)\n}\n\ntype statusMsg int\n\ntype errMsg struct{ err error }\n\n// For messages that contain errors it's often handy to also implement the\n// error interface on the message.\nfunc (e errMsg) Error() string { return e.err.Error() }\n```\n\n----------------------------------------\n\nTITLE: Implementing Init Method in Go\nDESCRIPTION: Defines the initialization method that returns the checkServer command.\nSOURCE: https://github.com/charmbracelet/bubbletea/blob/main/tutorials/commands/README.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc (m model) Init() (tea.Cmd) {\n    return checkServer\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Update Method in Go\nDESCRIPTION: Handles different types of messages and updates the model state accordingly.\nSOURCE: https://github.com/charmbracelet/bubbletea/blob/main/tutorials/commands/README.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc (m model) Update(msg tea.Msg) (tea.Model, tea.Cmd) {\n    switch msg := msg.(type) {\n\n    case statusMsg:\n        // The server returned a status message. Save it to our model. Also\n        // tell the Bubble Tea runtime we want to exit because we have nothing\n        // else to do. We'll still be able to render a final view with our\n        // status message.\n        m.status = int(msg)\n        return m, tea.Quit\n\n    case errMsg:\n        // There was an error. Note it in the model. And tell the runtime\n        // we're done and want to quit.\n        m.err = msg\n        return m, tea.Quit\n\n    case tea.KeyMsg:\n        // Ctrl+c exits. Even with short running programs it's good to have\n        // a quit key, just in case your logic is off. Users will be very\n        // annoyed if they can't exit.\n        if msg.Type == tea.KeyCtrlC {\n            return m, tea.Quit\n        }\n    }\n\n    // If we happen to get any other messages, don't do anything.\n    return m, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing View Function in Go\nDESCRIPTION: Renders the current state of the model as a string for display.\nSOURCE: https://github.com/charmbracelet/bubbletea/blob/main/tutorials/commands/README.md#2025-04-23_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nfunc (m model) View() string {\n    // If there's an error, print it out and don't do anything else.\n    if m.err != nil {\n        return fmt.Sprintf(\"\\nWe had some trouble: %v\\n\\n\", m.err)\n    }\n\n    // Tell the user we're doing something.\n    s := fmt.Sprintf(\"Checking %s ... \", url)\n\n    // When the server responds with a status, add it to the current line.\n    if m.status > 0 {\n        s += fmt.Sprintf(\"%d %s!\", m.status, http.StatusText(m.status))\n    }\n\n    // Send off whatever we came up with above for rendering.\n    return \"\\n\" + s + \"\\n\\n\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Main Function in Go\nDESCRIPTION: Initializes and runs the Bubble Tea program with error handling.\nSOURCE: https://github.com/charmbracelet/bubbletea/blob/main/tutorials/commands/README.md#2025-04-23_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n    if _, err := tea.NewProgram(model{}).Run(); err != nil {\n        fmt.Printf(\"Uh oh, there was an error: %v\\n\", err)\n        os.Exit(1)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Model Structure in Go\nDESCRIPTION: Defines the model structure to store HTTP response status code and potential errors.\nSOURCE: https://github.com/charmbracelet/bubbletea/blob/main/tutorials/commands/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype model struct {\n    status int\n    err    error\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic HTTP Client Program in Go\nDESCRIPTION: Sets up the basic imports and constants needed for a Bubble Tea program that makes HTTP requests.\nSOURCE: https://github.com/charmbracelet/bubbletea/blob/main/tutorials/commands/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"fmt\"\n    \"net/http\"\n    \"os\"\n    \"time\"\n\n    tea \"github.com/charmbracelet/bubbletea\"\n)\n\nconst url = \"https://charm.sh/\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Static Progress Bar with Bubbletea in Go\nDESCRIPTION: This code snippet demonstrates how to create a static progress bar using the Bubbletea framework. It defines a custom model with a progress value and implements the necessary methods for initialization, updating, and view rendering.\nSOURCE: https://github.com/charmbracelet/bubbletea/blob/main/examples/progress-static/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"os\"\n\t\"time\"\n\n\ttea \"github.com/charmbracelet/bubbletea\"\n\t\"github.com/charmbracelet/lipgloss\"\n)\n\ntype model struct {\n\tpercent float64\n}\n\nfunc (m model) Init() tea.Cmd {\n\treturn nil\n}\n\nfunc (m model) Update(msg tea.Msg) (tea.Model, tea.Cmd) {\n\tswitch msg := msg.(type) {\n\tcase tea.KeyMsg:\n\t\tif msg.Type == tea.KeyCtrlC {\n\t\t\treturn m, tea.Quit\n\t\t}\n\tdefault:\n\t\treturn m, nil\n\t}\n}\n\nfunc (m model) View() string {\n\tpad := strings.Repeat(\" \", 2)\n\treturn fmt.Sprintf(\"%s%s%s\\n\", pad, renderProgress(m.percent), pad)\n}\n\nfunc renderProgress(percent float64) string {\n\tw := 50\n\n\tfullSize := int(percent * float64(w))\n\temptySize := w - fullSize\n\n\tfull := strings.Repeat(\"█\", fullSize)\n\tempty := strings.Repeat(\" \", emptySize)\n\n\treturn lipgloss.NewStyle().\n\t\tForeground(lipgloss.Color(\"#EF476F\")).\n\t\tRender(fmt.Sprintf(\"[%s%s] %.2f%%\", full, empty, percent*100))\n}\n\nfunc main() {\n\tp := tea.NewProgram(model{percent: 0.3})\n\tif err := p.Start(); err != nil {\n\t\tfmt.Println(\"Error running program:\", err)\n\t\tos.Exit(1)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing File Logging in Bubble Tea Applications\nDESCRIPTION: Code snippet demonstrating how to set up file-based logging in a Bubble Tea application when stdout is occupied by the TUI. This implementation checks for a DEBUG environment variable and logs to a file when present.\nSOURCE: https://github.com/charmbracelet/bubbletea/blob/main/README.md#2025-04-23_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nif len(os.Getenv(\"DEBUG\")) > 0 {\n\tf, err := tea.LogToFile(\"debug.log\", \"debug\")\n\tif err != nil {\n\t\tfmt.Println(\"fatal:\", err)\n\t\tos.Exit(1)\n\t}\n\tdefer f.Close()\n}\n```\n\n----------------------------------------\n\nTITLE: Debugging Bubble Tea Application with Delve in Go\nDESCRIPTION: Provides a command for starting the Delve debugger in headless mode for debugging Bubble Tea applications, which take control of stdin and stdout.\nSOURCE: https://github.com/charmbracelet/bubbletea/blob/main/README.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# Start the debugger\n$ dlv debug --headless --api-version=2 --listen=127.0.0.1:43000 .\nAPI server listening at: 127.0.0.1:43000\n```\n\n----------------------------------------\n\nTITLE: Connecting to Delve Debugger in Terminal\nDESCRIPTION: Command for connecting to a running Delve debugger instance on port 43000 from another terminal. This is used for debugging Bubble Tea applications.\nSOURCE: https://github.com/charmbracelet/bubbletea/blob/main/README.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ dlv connect 127.0.0.1:43000\n```\n\n----------------------------------------\n\nTITLE: Implementing Command with Arguments in Go\nDESCRIPTION: Demonstrates how to create commands that accept arguments by returning a command function.\nSOURCE: https://github.com/charmbracelet/bubbletea/blob/main/tutorials/commands/README.md#2025-04-23_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nfunc cmdWithArg(id int) tea.Cmd {\n    return func() tea.Msg {\n        return someMsg{id: id}\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing URL Check Command in Go\nDESCRIPTION: Shows a real-world example of a command that makes an HTTP request to a specified URL.\nSOURCE: https://github.com/charmbracelet/bubbletea/blob/main/tutorials/commands/README.md#2025-04-23_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nfunc checkSomeUrl(url string) tea.Cmd {\n    return func() tea.Msg {\n        c := &http.Client{Timeout: 10 * time.Second}\n        res, err := c.Get(url)\n        if err != nil {\n            return errMsg{err}\n        }\n        return statusMsg(res.StatusCode)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running the Download Progress Application in Shell\nDESCRIPTION: Command to build and run the application with a URL argument to download a file. The example shows downloading a Blender demo file.\nSOURCE: https://github.com/charmbracelet/bubbletea/blob/main/examples/progress-download/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./progress-download --url=\"https://download.blender.org/demo/color_vortex.blend\"\n```\n\n----------------------------------------\n\nTITLE: Greeting Artichokes in Haskell\nDESCRIPTION: A Haskell program that defines a 'hello' function and uses it to greet 'artichoke' and 'alcachofa' (Spanish for artichoke). It demonstrates string manipulation, list operations, and function composition in Haskell.\nSOURCE: https://github.com/charmbracelet/bubbletea/blob/main/examples/pager/artichoke.md#2025-04-23_snippet_0\n\nLANGUAGE: haskell\nCODE:\n```\nmodule Main where\n\nimport Data.Function ( (&) )\nimport Data.List ( intercalculate )\n\nhello :: String -> String\nhello s =\n    \"Hello, \" ++ s ++ \".\"\n\nmain :: IO ()\nmain =\n    map hello [ \"artichoke\", \"alcachofa\" ] & intercalculate \"\\n\" & putStrLn\n```"
  }
]