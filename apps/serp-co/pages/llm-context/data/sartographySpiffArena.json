[
  {
    "owner": "sartography",
    "repo": "spiff-arena",
    "content": "TITLE: Setting Up SpiffArena Backend Locally (Bash)\nDESCRIPTION: Commands to set up and run the SpiffArena backend locally. Requires Python, uv, and a database (MySQL, Postgres, or SQLite) to be installed. It navigates to the backend directory, synchronizes dependencies using 'uv', recreates the database, and starts the server. An optional command starts the server with Keycloak integration.\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/README.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\n    cd spiffworkflow-backend\n    uv sync\n    ./bin/recreate_db clean\n    ./bin/run_server_locally\n    ./bin/run_server_locally keycloak # if you want to use keycloak instead of the built-in openid server\n```\n\n----------------------------------------\n\nTITLE: Defining BPMN Unit Test JSON\nDESCRIPTION: This JSON snippet demonstrates the structure for defining a BPMN unit test. It includes a test case with mocked task data for a service task and the expected output JSON.\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/docs/how_to_guides/building_diagrams/bpmn_unit_tests.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"test_case_1\": {\n    \"tasks\": {\n      \"ServiceTaskProcess:service_task_one\": {\n        \"data\": [{ \"the_result\": \"result_from_service\" }]\n      }\n    },\n    \"expected_output_json\": { \"the_result\": \"result_from_service\" }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up SpiffArena Frontend Locally (Bash)\nDESCRIPTION: Commands to set up and run the SpiffArena frontend locally. Requires Node.js to be installed. It navigates to the frontend directory, installs Node.js dependencies using npm, and starts the frontend development server.\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/README.md#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\n    cd spiffworkflow-frontend\n    npm install\n    npm start\n```\n\n----------------------------------------\n\nTITLE: Setup Spiff Arena with Make (Docker)\nDESCRIPTION: Clones the Spiff Arena repository and uses the default `make` task to build and start the development environment using Docker containers. This setup is intended for development with source code access.\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/docs/explanation/dev/developer_setup.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/sartography/spiff-arena.git\ncd spiff-arena\nmake\n```\n\n----------------------------------------\n\nTITLE: Defining a JSON Schema for User Input Form (JSON)\nDESCRIPTION: This snippet defines a JSON schema used to capture user input, specifically the 'firstName' field, which impacts process flow decisions. The schema requires the first name to be provided and sets a default value. It is essential for collecting process variables to evaluate conditions within the BPMN process.\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/docs/reference/bpmn/exclusive_gateways_example.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"title\": \"First Name Required\",\n  \"type\": \"object\",\n  \"required\": [\"firstName\"],\n  \"properties\": {\n    \"firstName\": {\n      \"type\": \"string\",\n      \"title\": \"First name\",\n      \"default\": \"Chuck\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring a Form with Dynamic Enumeration via Task Data in SpiffArena (JSON)\nDESCRIPTION: This JSON snippet defines a form schema in which the dropdown options for the 'favoriteFruit' field are pulled dynamically from a process task data variable named 'fruits'. Requires a BPMN process instance with 'fruits' already populated in task data, typically via a preceding Python script task. The schema expects the user to select one fruit from the available options; outputs are handled by the form engine. Limitation: The referenced task data variable must exist or the dropdown will not populate.\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/docs/how_to_guides/building_diagrams/use_user_tasks_and_forms.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"title\": \"Dropdown list\",\n    \"description\": \"A dropdown list with options pulled from existing Task Data. IMPORTANT - Add 'fruits' to Task Data before using this component!!!\",\n    \"type\": \"object\",\n    \"properties\": {\n        \"favoriteFruit\": {\n            \"title\": \"Select your favorite fruit\",\n            \"type\": \"string\",\n            \"anyOf\": [\n                \"options_from_task_data_var:fruits\"\n            ]\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Numeric Range Field in a JSON Schema (JSON)\nDESCRIPTION: This snippet defines a numeric range using JSON schema, setting up an object property with minimum and maximum sub-properties for a form field. It requires both the minimum and maximum to be numbers, each with descriptive titles, ensuring form data validation for numeric input range. Dependencies include JSON schema-compatible form rendering libraries; inputs are objects containing 'minimum' and 'maximum' as numbers, and outputs are validated objects within the defined range.\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/docs/how_to_guides/building_diagrams/use_user_tasks_and_forms.md#_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"title\": \"Example Schema\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"numericRange\": {\n      \"type\": \"object\",\n      \"title\": \"Numeric Range\",\n      \"minimum\": {\n        \"type\": \"number\",\n        \"title\": \"Minimum Value\"\n      },\n      \"maximum\": {\n        \"type\": \"number\",\n        \"title\": \"Maximum Value\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Dropdown List from JSON Data Store Using Python in BPMN\nDESCRIPTION: This Python script extracts data from a JSON data store containing Gatorade flavors and formats it into an array suitable for use as options in a dropdown list within a BPMN Script Task. It iterates over the JSON array named `gatorade_flavors` and appends objects with `label` and `value` keys set to the flavor name. This snippet requires the `gatorade_flavors` JSON array to be accessible in task data. The output is an array variable `gator_select` that can be used as a selection source in user tasks.\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/docs/reference/bpmn/data_stores.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\ngator_select = []\nfor flavor in gatorade_flavors:\n    gator_select.append({\n        \"label\": flavor[\"name\"],\n        \"value\": flavor[\"name\"]\n    })\n```\n\n----------------------------------------\n\nTITLE: Updating SpiffArena with Docker Compose\nDESCRIPTION: This code snippet demonstrates how to update SpiffArena using Docker Compose. It pulls the latest images, shuts down the existing containers, and then starts them up again. This helps ensure that the frontend loads correctly and communicates effectively with the backend after updates.\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/docs/reference/frequently_asked_questions.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose pull\ndocker compose down\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Populating KKV Data Store Using Python in BPMN\nDESCRIPTION: This Python snippet demonstrates how to populate a Key-Key-Value (KKV) data store named \"Movies\" within a BPMN Script Task. The code initializes a nested dictionary representing a director, movie titles, and character attributes, enabling structured hierarchical data insertion into the data store. Dependencies include the task being configured to write to a KKV data store named \"Movies\". The input is the nested dictionary assignment, and the output updates the data store with the new hierarchical movie data.\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/docs/reference/bpmn/data_stores.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nmovies = {\n\"Wes Craven\": {\n    \"Swamp Thing\": \n    [ {\"name\": \"Dr. Alec Holland\", \"actor\": \"Ray Wise\", \"description\": \"whatever\"}]\n} }\n```\n\n----------------------------------------\n\nTITLE: User Task Dropdown List Configuration Using JSON Schema\nDESCRIPTION: This JSON configuration defines a User Task form schema for BPMN, allowing users to select a Gatorade flavor from a dropdown list. The dropdown options are dynamically populated from the `gator_select` variable created in previous Python scripting. The schema has a property `selected` of type string, whose options source the dropdown items from task data. Prerequisites include having a corresponding Python task that populates `gator_select`. The form input is the user's selected flavor string, which can be used in subsequent tasks.\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/docs/reference/bpmn/data_stores.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"title\": \"\",\n  \"description\": \"The dropdown list below is built from data read in from a JSON file.\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"selected\": {\n      \"title\": \"Select your flavor of Gatorade\",\n      \"type\": \"string\",\n      \"anyOf\": [\n        \"options_from_task_data_var:gator_select\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Expressing Multi-Value Matches in DMN Table Conditions Using Python Syntax - Python\nDESCRIPTION: Demonstrates the recommended method for specifying that an input value can match any item in a list of options within a DMN table used in SpiffWorkflow. This snippet requires the DMN editor to accept Python syntax and expects the input variable (e.g., 'meat') to be compared against a list using the 'in' expression. Ensure there is a leading space before 'in', as omitting it will result in a syntax error. Inputs must be among the specified list; otherwise, the rule does not match. Outputs are determined by table configuration (e.g., 'cost_components' sum). Editor limitations prevent the use of comma-separated or pipe-delimited logic in this context.\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/docs/reference/bpmn/decision_tables.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n in [\"chicken\", \"turkey\"]\n```\n\n----------------------------------------\n\nTITLE: Python Script for Generating Markdown Download Link from Uploaded File\nDESCRIPTION: Converts the uploaded file into a markdown-compatible download link using the function 'markdown_file_download_link'. The input 'file' is obtained from the previous user task, and the output is stored in 'link'.\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/docs/how_to_guides/building_diagrams/file_upload.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nlink = markdown_file_download_link(file)\n```\n\n----------------------------------------\n\nTITLE: Scoring Variables from User Input in Script Task - Python\nDESCRIPTION: This script handles user input verification and scoring logic for a Script Task within a workflow, relying on previously defined variables such as 'flag_stars', 'longest', 'woman_nobel', and 'num_correct'. It normalizes and compares input values, increments a correctness count, and calculates a percentage score stored in the 'score' variable. Inputs include three quiz answer variables and an integer 'num_correct'; output is an integer score representing the percent of correct answers. All variables must be JSON serializable, complying with SpiffArena's execution restrictions.\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/docs/reference/bpmn/script_tasks.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nif flag_stars.lower().strip() == \"twelve\":\n    num_correct += 1\nelif int(flag_stars) == 12:\n    num_correct += 1\n\nif \"nile\" in longest.lower():\n    num_correct += 1\n\nif \"curie\" in woman_nobel.lower():\n    num_correct += 1\n\nscore = int(num_correct / 3 * 100)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Group Members for a Lane using Python in SpiffWorkflow\nDESCRIPTION: This Python snippet demonstrates how to retrieve the group members assigned to a specific lane in a SpiffWorkflow process. The get_group_members() function is called with the lane_name, returning a list of group members for dynamic assignment or notifications. It is dependent on the SpiffWorkflow scripting context and assumes lane_name is a defined variable. Output is a group_members object or list. Used in script tasks during execution for process customization.\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/docs/reference/frequently_asked_questions.md#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ngroup_members = get_group_members(lane_name)\n```\n\n----------------------------------------\n\nTITLE: Configuring Admin Groups and Permissions in SpiffWorkflow (YAML)\nDESCRIPTION: Defines user groups and their corresponding permissions in YAML configuration for SpiffWorkflow. The 'groups' section assigns users (via email) to groups such as 'admin', while the 'permissions' section specifies which groups can perform actions (create, read, update, delete) on URIs. Required dependency: the terraform_deployed_environment.yml file or similar configuration must be present in the spiffworkflow-backend setup. Each entry under 'permissions' must declare the applicable group(s), allowed actions (optionally prefixed with 'DENY:' to explicitly disallow), and the applicable resource URI. Inputs: group definitions and permission rules. Output: permission enforcement at runtime for specified users/groups. Limitations: Only supported keys and action names are recognized by the workflow backend.\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/docs/how_to_guides/deployment/manage_permissions.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ngroups:\n  admin:\n    users: [admin@spiffworkflow.org]\n\npermissions:\n  admin-type-user:\n    groups: [admin]\n    actions: [create, read, update, delete]\n    uri: /*\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Date Constraints in JSON Schema\nDESCRIPTION: Provides a complete JSON schema example demonstrating how to apply `minimumDate` and `maximumDate` constraints on multiple date fields (`delivery_date`, `delivery_date_range`) referencing another field (`end_date`) or \"today\". This enforces that selected dates fall within a defined range relative to other dates or the current date.\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/docs/how_to_guides/building_diagrams/use_user_tasks_and_forms.md#_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"title\": \"Date\",\n  \"description\": \"Test Maximum Date\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"end_date\": {\n      \"type\": \"string\",\n      \"format\": \"date\",\n      \"title\": \"End Date\"\n    },\n    \"delivery_date\": {\n      \"type\": \"string\",\n      \"title\": \"Preferred Delivery Date\",\n      \"minimumDate\": \"today\",\n      \"maximumDate\": \"field:end_date\"\n    },\n    \"delivery_date_range\": {\n      \"type\": \"string\",\n      \"title\": \"Preferred Delivery Date Range\",\n      \"minimumDate\": \"today\",\n      \"maximumDate\": \"field:end_date\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Date Range Selector Field in a JSON Schema for SpiffArena Forms\nDESCRIPTION: This JSON code defines a schema property ('travel_date_range') for a string field that expects a start and end date formatted as 'YYYY-MM-DD:::YYYY-MM-DD', including a validation error message if missing. This is to be used in tandem with a UI schema specifying the date-range widget. Prerequisites: Usage inside a RJSF-compatible schema in SpiffArena. The input must match the regular expression or form submission will fail; output is a single string with both dates. Limitation: No built-in formatting or parsing beyond pattern validation.\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/docs/how_to_guides/building_diagrams/use_user_tasks_and_forms.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n\"travel_date_range\": {\n    \"type\": \"string\",\n    \"title\": \"Travel Dates\",\n    \"pattern\": \"\\\\d{4}-\\\\d{2}-\\\\d{2}:::\\\\d{4}-\\\\d{2}-\\\\d{2}\",\n    \"validationErrorMessage\": \"You must select Travel dates\"\n},\n```\n\n----------------------------------------\n\nTITLE: Applying UI Configuration Properties (Help, Readonly, Autofocus) in JSON\nDESCRIPTION: Provides a JSON example showing how to configure multiple UI properties for form fields, including setting initial focus (`ui:autofocus`), adding contextual help text (`ui:help`), and making a field non-editable (`ui:readonly`). These properties enhance user experience and form control.\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/docs/how_to_guides/building_diagrams/use_user_tasks_and_forms.md#_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"form_num_1\": {\n    \"ui:autofocus\": true,\n    \"ui:help\": \"Pick whatever # you want!\"\n  },\n  \"system_generated_number\": {\n    \"ui:readonly\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a User Task Form for Travel Preferences (JSON)\nDESCRIPTION: This JSON schema defines a form titled 'Travel Information' used in the 'Get Travel Information' user task. It contains boolean properties (air_travel, rail_travel, road_travel) allowing users to select their required modes of transport. The user's selections determine which subsequent paths are activated in the inclusive gateway split.\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/docs/reference/bpmn/inclusive_gateway_example.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"title\": \"Travel Information\",\n  \"description\": \"Tell us about your travel information. Journey includes:\",\n  \"properties\": {\n    \"air_travel\": {\n      \"type\": \"boolean\",\n      \"title\": \"Air Travel\",\n      \"default\": false\n    },\n    \"rail_travel\": {\n      \"type\": \"boolean\",\n      \"title\": \"Rail Travel\",\n      \"default\": false\n    },\n    \"road_travel\": {\n      \"type\": \"boolean\",\n      \"title\": \"Road Travel\",\n      \"default\": false\n    }\n  },\n  \"required\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Character Counter in the UI Schema (JSON)\nDESCRIPTION: This UI schema snippet augments a string field to activate a visual character counter by specifying 'ui:options' with 'counter: true'. It depends on the form renderer supporting the 'ui:options' API. There are no required parameters beyond the property key; input is the UI configuration object, affecting the rendered field's UI by displaying a live character count.\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/docs/how_to_guides/building_diagrams/use_user_tasks_and_forms.md#_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"my_hot_string\": {\n    \"ui:options\": {\n      \"counter\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Form Fields in JSON Schema\nDESCRIPTION: Shows a simple JSON schema defining several string properties (`firstName`, `lastName`, `notes`) for a form. This schema structure is the base upon which `ui:layout` and other UI-specific configurations are applied.\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/docs/how_to_guides/building_diagrams/use_user_tasks_and_forms.md#_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"title\": \"Side by Side Layout\",\n  \"description\": \"Demonstrating side-by-side layout\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"firstName\": { \"type\": \"string\" },\n    \"lastName\": { \"type\": \"string\" },\n    \"notes\": { \"type\": \"string\" }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running a Specific CI Session (Unit Tests) - Console\nDESCRIPTION: This command runs a targeted CI session, specifically executing the unit tests via the './bin/run_ci_session' script with 'tests' as the argument. Prerequisites include having project dependencies installed and access to the CI scripts. Used for verifying a subset of tests, focusing on the tests directory. Useful for validating changes before integration.\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/CONTRIBUTING.rst#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ ./bin/run_ci_session tests\n```\n\n----------------------------------------\n\nTITLE: Defining a Nested Repeating Section for Tasks (JSON)\nDESCRIPTION: This JSON schema enables dynamic collection of a list of objects (tasks) with specified properties including title and completion status. It is designed for forms capturing multiple structured inputs, where each item in the array is validated independently. Dependencies include a form library that can interpret array schemas and support dynamic item addition/deletion. Parameters: the 'tasks' property (array), with each object requiring a title (string) and an optional 'done' (boolean, default false). Inputs are user-provided task objects; output is an array of validated task entries.\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/docs/how_to_guides/building_diagrams/use_user_tasks_and_forms.md#_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"title\": \"Nested Form / Repeating Section\",\n  \"description\": \"Allow the form submitter to add multiple entries for a set of fields.\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"tasks\": {\n      \"type\": \"array\",\n      \"title\": \"Tasks\",\n      \"items\": {\n        \"type\": \"object\",\n        \"required\": [\"title\"],\n        \"properties\": {\n          \"title\": {\n            \"type\": \"string\",\n            \"title\": \"Title\",\n            \"description\": \"Please describe the task to complete\"\n          },\n          \"done\": {\n            \"type\": \"boolean\",\n            \"title\": \"Done?\",\n            \"default\": false\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Responsive Side-by-Side Layout with ui:layout in JSON\nDESCRIPTION: Demonstrates how to use the `ui:layout` property in a JSON schema's `uiSchema` to arrange form fields side-by-side in rows and control their relative widths using responsive grid column definitions (`sm`, `md`, `lg`). This allows fields like first and last name to share a row, adapting to different screen sizes.\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/docs/how_to_guides/building_diagrams/use_user_tasks_and_forms.md#_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ui:layout\": [\n    {\n      \"firstName\": { \"sm\": 2, \"md\": 2, \"lg\": 4 },\n      \"lastName\": { \"sm\": 2, \"md\": 2, \"lg\": 4 }\n    },\n    { \"notes\": {} }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Git Configuration Environment Variables (Shell)\nDESCRIPTION: This code configures Git integration for SpiffWorkflow, enabling bidirectional syncing. It sets environment variables to manage Git operations like committing changes on save, specifying the username, user email, source branch to push commits to, the path to the private key for SSH authentication, or the private key content.  These variables are used to configure how SpiffWorkflow interacts with the Git repository.\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/docs/how_to_guides/deployment/manage_process_models.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nSPIFFWORKFLOW_BACKEND_GIT_COMMIT_ON_SAVE=true\nSPIFFWORKFLOW_BACKEND_GIT_USERNAME=automation-user\nSPIFFWORKFLOW_BACKEND_GIT_USER_EMAIL=automation-user@example.com\nSPIFFWORKFLOW_BACKEND_GIT_SOURCE_BRANCH=sandbox # this branch will get pushed with your commits\nSPIFFWORKFLOW_BACKEND_GIT_SSH_PRIVATE_KEY_PATH=/path/to/your/private/key\nSPIFFWORKFLOW_BACKEND_GIT_SSH_PRIVATE_KEY=\"alternate way of providing the key as a multiline string\"\n```\n\n----------------------------------------\n\nTITLE: Configuring a Custom UI Field for Numeric Range (JSON)\nDESCRIPTION: This snippet assigns a custom UI field ('numeric-range') to the 'numericRange' property, instructing the form renderer to display it using a specialized widget or component. Dependencies include UI schema support in the target form library. The only parameter is the property key ('numericRange'), and it enhances UI behavior but does not impact data validation directly. The input is a UI schema object, and the output affects form field presentation.\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/docs/how_to_guides/building_diagrams/use_user_tasks_and_forms.md#_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"numericRange\": {\n    \"ui:field\": \"numeric-range\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Dictionary Array for Multi-instance Processing in Python\nDESCRIPTION: Script that initializes an array of dictionaries, each representing a composer with their name and associated genre. This data structure will be manipulated in subsequent steps of a multi-instance process.\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/docs/reference/bpmn/multiinstance_tasks.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ncomposers = [\n   {\"composer\": \"Johann Sebastian Bach\", \"genre\": \"Baroque\"},\n   {\"composer\": \"Ludwig van Beethoven\", \"genre\": \"Classical/Romantic\"},\n   {\"composer\": \"Wolfgang Amadeus Mozart\", \"genre\": \"Classical\"}\n ]\n```\n\n----------------------------------------\n\nTITLE: Running SpiffArena Cypress Tests Locally (Bash)\nDESCRIPTION: Command to execute the Cypress end-to-end browser tests locally. This requires the SpiffArena frontend and backend servers to be running and accessible (typically at http://localhost:7001).\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/README.md#_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\n    ./bin/run_cypress_tests_locally\n```\n\n----------------------------------------\n\nTITLE: Defining Unit Test Inputs and Expected Outputs for Script Task - JSON\nDESCRIPTION: These JSON objects serve as example unit test inputs and outputs for a Script Task, enabling users to validate their Python logic in SpiffArena workflows. The 'Test Inputs' object defines the sample initial data (such as quiz answers) to feed into the task, while the 'Test Outputs' object represents the expected state of context variables after script execution. No dependencies are required beyond the ability to provide or consume JSON objects. All keys and values must be JSON serializable, as per SpiffArena requirements.\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/docs/reference/bpmn/script_tasks.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"flag_stars\": \"12\",\n  \"longest_river\": \"nile\",\n  \"woman_nobel\": \"curie\"\n}\n```\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"flag_stars\": \"12\",\n  \"longest\": \"nile\",\n  \"num_correct\": 3,\n  \"score\": 100,\n  \"woman_nobel\": \"curie\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring User Groups for Lane Owner Assignment in YAML\nDESCRIPTION: YAML configuration example defining user groups within the system, specifying users assigned to each group such as 'admin' and 'reviewers'. This configuration supports lane owner assignment by grouping users for role-based task routing in BPMN workflows. Requires proper integration with system permissions and workflow management to enforce group membership.\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/docs/reference/bpmn/pools_and_lanes.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ngroups:\n  admin:\n    users:\n      - user1@spiffworkflow.org\n      - user2@spiffworkflow.org\n  reviewers:\n    users:\n      - user3@spiffworkflow.org\n      - user4@spiffworkflow.org\n```\n\n----------------------------------------\n\nTITLE: Configuring Backend URLs - SpiffWorkflow - sh\nDESCRIPTION: Sets various environment variables in the SpiffWorkflow backend application to define its external and internal URLs when operating in a path-based routing configuration. This includes specifying the root URL of the frontend application, the base URL where the backend API is accessed externally, and optionally URLs for the OpenID server and the connector proxy. These settings are crucial for the backend to generate correct absolute URLs in responses and communicate with other services within the defined routing scheme.\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/docs/how_to_guides/deployment/use_pathbased_routing.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nSPIFFWORKFLOW_BACKEND_URL_FOR_FRONTEND=https://spiff.example.com\nSPIFFWORKFLOW_BACKEND_URL=https://spiff.example.com/api\n# if you happen to be using the internal openid server. do not do this in production.\nSPIFFWORKFLOW_BACKEND_OPEN_ID_SERVER_URL=https://spiff.example.com/api/openid\n# if you can manage, use in-cluster DNS for connector. you may need a different host or port.\nSPIFFWORKFLOW_BACKEND_CONNECTOR_PROXY_URL=http://spiffworkflow-connector:8004\n```\n\n----------------------------------------\n\nTITLE: Setting Backend WSGI Path Prefix - SpiffWorkflow - sh\nDESCRIPTION: Informs the SpiffWorkflow backend, typically via its WSGI server, about an expected URL path prefix. This variable is used when a reverse proxy forwards requests to the backend without removing a leading path segment (e.g., `/api`). The WSGI server uses this `SCRIPT_NAME` value to effectively ignore the prefix for internal routing purposes but includes it when generating response URLs, ensuring links generated by the application are correct relative to the external access point.\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/docs/how_to_guides/deployment/use_pathbased_routing.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nSPIFFWORKFLOW_BACKEND_WSGI_PATH_PREFIX=/api\n```\n\n----------------------------------------\n\nTITLE: UI Schema for File Acceptance Restriction in Spiffworkflow Form\nDESCRIPTION: Specifies UI options for the file upload form, restricting accepted file types to PDF files via the 'accept' attribute.\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/docs/how_to_guides/building_diagrams/file_upload.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"filesAccept\": {\n    \"ui:options\": {\n      \"accept\": \".pdf\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Dynamic Enumeration Data for Forms in SpiffArena using Python\nDESCRIPTION: This Python snippet demonstrates the creation of a list of option dictionaries representing fruit choices, intended to be assigned to a task data variable in a SpiffArena process instance. Dependencies include an active workflow instance with the ability to attach script tasks and set process variables. The expected input is the context of a script task; the output is a variable called 'fruits' containing the list, which can then be referenced by forms for dynamic dropdown options. Limitations: Direct interaction with external data sources is not included, but could be added in advanced scenarios.\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/docs/how_to_guides/building_diagrams/use_user_tasks_and_forms.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n#python\n    fruits = [\n        {\n            \"value\": \"apples\",\n            \"label\": \"Apples\"\n        },\n        {\n            \"value\": \"oranges\",\n            \"label\": \"Oranges\"\n        },\n        {\n            \"value\": \"bananas\",\n            \"label\": \"Bananas\"\n        }\n    ]\n```\n\n----------------------------------------\n\nTITLE: Referencing a SpiffArena Secret in BPMN Service Task Parameter (XML)\nDESCRIPTION: Demonstrates how to reference a configured SpiffArena secret within a BPMN service task's `spiffworkflow:parameter` element using the `SPIFF_SECRET:` prefix. In this example, the secret named `github_oauth` is used within a JSON structure to set an Authorization header. SpiffArena replaces `SPIFF_SECRET:github_oauth` with the actual, decrypted secret value fetched from the database when the service task executes.\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/docs/how_to_guides/deployment/configure_secrets.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\nspiffworkflow:parameter id=\"headers\" type=\"any\" value=\"{ \\\"Authorization\\\": \\\"Bearer SPIFF_SECRET:github_oauth\\\" }\"\n```\n\n----------------------------------------\n\nTITLE: Running Tests in Interactive Mode\nDESCRIPTION: This command launches the test runner in interactive watch mode. It allows developers to run tests and see the results in real-time, enabling iterative testing and debugging.\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/spiffworkflow-frontend/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n### `npm test`\n\nLaunches the test runner in the interactive watch mode.\\\nSee the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.\n```\n\n----------------------------------------\n\nTITLE: Setting Frontend Routing Strategy - SpiffWorkflow - sh\nDESCRIPTION: Configures the SpiffWorkflow frontend application to use a path-based routing strategy. This is essential when the frontend and backend are hosted on the same domain but differentiated by URL paths. Setting this environment variable modifies the frontend's behavior to work correctly within a path-based routing setup, ensuring proper handling of internal links and asset paths.\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/docs/how_to_guides/deployment/use_pathbased_routing.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nSPIFFWORKFLOW_FRONTEND_RUNTIME_CONFIG_APP_ROUTING_STRATEGY=path_based\n```\n\n----------------------------------------\n\nTITLE: Configuring a String Property with Character Counter (JSON)\nDESCRIPTION: This schema describes a string property ('my_hot_string') with an enforced 'maxLength', facilitating real-time character counter feedback in compatible form UIs. It requires a supporting form renderer that can interpret both JSON schema and UI schema, specifically the 'maxLength' constraint. Key parameter: 'maxLength' (integer); input is a user-provided string, and output is validation against string length.\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/docs/how_to_guides/building_diagrams/use_user_tasks_and_forms.md#_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"title\": \"String with character counter\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"my_hot_string\": {\n      \"type\": \"string\",\n      \"maxLength\": 100\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running SpiffWorkflow with Custom Hostname in Docker Compose (Shell Command)\nDESCRIPTION: This shell command starts a SpiffWorkflow instance in Docker Compose using a custom hostname, protocol, and port. Required environment variables are set (SPIFFWORKFLOW_PROTOCOL, SPIFFWORKFLOW_HOST, SPIFFWORKFLOW_PORT) before executing 'docker compose up'. Dependencies are Docker Compose and proper repository files. Input values are the chosen protocol, hostname, and port. This setup allows the service to be accessed from other machines on the network, not just localhost.\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/docs/reference/frequently_asked_questions.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nSPIFFWORKFLOW_PROTOCOL=http SPIFFWORKFLOW_HOST=mycomputer1 SPIFFWORKFLOW_PORT=3006 docker compose up\n```\n\n----------------------------------------\n\nTITLE: Defining String Property with Minimum Length in JSON Schema\nDESCRIPTION: Defines a JSON schema property named user_generated_number_1 as a string with a minimum length of 3 characters, including a default value and a title. This snippet illustrates the default validation error message generated when the minimum length requirement is not met. It requires a JSON schema validator that supports minLength constraints. The input is any string value, and if shorter than 3 characters, the validator produces a default error message specifying the title and length restriction.\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/spiffworkflow-frontend/src/rjsf/carbon_theme/README.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n    \"user_generated_number_1\": {\"type\": \"string\", \"title\": \"User Generated Number\", \"default\": \"0\", \"minLength\": 3}\n```\n\n----------------------------------------\n\nTITLE: Configuring REST Service Task in SpiffWorkflow using BPMN XML\nDESCRIPTION: This XML snippet defines a service task in a BPMN process that retrieves employee data from a REST endpoint. The service task uses the 'http/GetRequest' operator with parameters for URL, headers, authentication, and more. Dependencies include a properly configured connector proxy, quoted URLs in parameter values, and valid SpiffWorkflow engine/version. Inputs are endpoint URL, headers, params, and credentials; output is stored in the 'data' variable. Failing to quote URLs or supply all parameters can lead to syntax errors or failed execution.\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/docs/reference/frequently_asked_questions.md#_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<bpmn:serviceTask id=\"Activity_0wu4fqk\" name=\"get employee\">\n  <bpmn:extensionElements>\n    <spiffworkflow:serviceTaskOperator id=\"http/GetRequest\" resultVariable=\"data\">\n      <spiffworkflow:parameters>\n        <spiffworkflow:parameter id=\"url\" type=\"url\" value=\"'https://example.com/api/employee'\" />\n        <spiffworkflow:parameter id=\"headers\" type=\"any\" />\n        <spiffworkflow:parameter id=\"params\" type=\"any\" />\n        <spiffworkflow:parameter id=\"basic_auth_username\" type=\"str\" />\n        <spiffworkflow:parameter id=\"basic_auth_password\" type=\"str\" />\n      </spiffworkflow:parameters>\n    </spiffworkflow:serviceTaskOperator>\n  </bpmn:extensionElements>\n</bpmn:serviceTask>\n```\n\n----------------------------------------\n\nTITLE: Calculating and Storing Output Using Context in SpiffArena Script Task - Python\nDESCRIPTION: This script demonstrates the retrieval of an input variable from the workflow context, calculation of a result, and assignment of this result back to the context for downstream consumption. Dependencies include the SpiffArena execution environment and the Python standard library as allowed by SpiffArena's scripting sandbox, with access to a dictionary-like 'context' object. The script expects an 'input_variable' as input and produces an 'output_variable' containing double its value. Limitations arise from the SpiffArena's implementation of RestrictedPython, which requires that all stored context variables be JSON serializable.\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/docs/reference/bpmn/script_tasks.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nresult = context.get('input_variable', 0) * 2\ncontext['output_variable'] = result\n```\n\n----------------------------------------\n\nTITLE: Google OAuth Redirect URI\nDESCRIPTION: This code snippet specifies the redirect URI to configure for Google OAuth clients within the Keycloak setup.  The URI format is `https://[KEYCLOAK-FOR-CLIENT]/realms/[REALM]/broker/google/endpoint`. This is essential for enabling Google authentication in the realm.\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/docs/how_to_guides/deployment/keycloak_setup.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nhttps://[KEYCLOAK-FOR-CLIENT]/realms/[REALM]/broker/google/endpoint\n```\n\n----------------------------------------\n\nTITLE: Dynamic Assignment of Approval Lane Owners in BPMN Workflow Using Python\nDESCRIPTION: Python script designed to dynamically assign lane owners for approval tasks in a BPMN workflow. It excludes the process initiator from the group of approvers to prevent self-approval. The script retrieves the approvers group members, identifies the initiator, removes them if present, and assigns the resulting list as lane owners. Dependencies include functions `get_group_members` and `get_process_initiator_user` which access process context data.\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/docs/reference/bpmn/pools_and_lanes.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Define the group identifier dynamically based on process data\ngroup_identifier = \"approvers\"\ngroup_members = get_group_members(group_identifier)\n\n# Retrieve the process initiator's username\ninitiator = get_process_initiator_user()\ninitiator_username = initiator[\"username\"]\n\n# Exclude the initiator from the approvers' list if they are part of it\nif initiator_username in group_members:\n    group_members.remove(initiator_username)\n\n# Assign the modified group list to the lane for task assignment\nlane_owners = {\"Approval\": group_members}\n```\n\n----------------------------------------\n\nTITLE: Explaining Gateway Configuration and Outgoing Sequence Flows\nDESCRIPTION: Provides an overview of setting code conditions on outgoing sequence flows for gateways, highlighting that conditions are optional for incoming flows. Mentions the use of Python expressions for conditions and describes the appropriate form fields with illustrative images.\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/docs/reference/bpmn/gateways.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n## Gateway Configuration\n\nUnlike most tasks in BPMN, the configuration for Gateways is primarily set on the outgoing sequence flows, not in the Side Panel.\nEvery Gateway, with the exception of the Parallel Gateway, requires conditions to be established on these outgoing sequence flows.\nThese conditions dictate the direction of the process flow.\nIt's also crucial to understand that conditions aren't required for incoming sequence flows to Gateways.\n\n**Gateway:**\n\n| 💻 Form                                                | ⌨ Field Input                                       | 📮 Description                                                                                         |\n| ------------------------------------------------------ | ---------------------------------------------------- | ------------------------------------------------------------------------------------------------------ |\n| ![name_field](/images/name_field.png)                   | **Name:** Update Customer Information                | A descriptive name given to the element, providing a human-readable label or title.                    |\n| ![id_field](/images/id_field.png)                       | **ID:** Example - updateCustomerInformation          | An identifier used to uniquely identify the element within the BPMN model.                             |\n| ![documentation_field](/images/documentation_field.png) | **Element Documentation:** URL, Raw Data, Plain Text | Additional information or documentation related to the element, such as URLs, plain text, or raw data. |\n\n**Outgoing Sequence:**\n\n```{admonition} Note\n⚠ All expressions, including expressions written on the outgoing sequence, are written in Python.\n```\n\n| 💻 Form                              | ⌨ Field Input                                 | 📮 Description                                                                        |\n| ------------------------------------ | ---------------------------------------------- | ------------------------------------------------------------------------------------- |\n| ![conditions](/images/conditions.png) | **Condition:** payment_method == \"credit_card\" | Python expression. Note that multiple conditions can be strung together using AND/OR. |\n```\n\n----------------------------------------\n\nTITLE: Configuring SpiffWorkflow Backend Environment Variables for Okta (Bash)\nDESCRIPTION: These environment variables configure the SpiffWorkflow backend to connect to Okta as an OpenID provider. They specify the Okta issuer URL, the Client ID and Secret obtained from the Okta OIDC application, the required OAuth scopes (including 'groups'), and indicate that the OpenID provider is the authority for managing user groups.\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/docs/how_to_guides/deployment/configure_okta_as_an_openid_provider.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# OpenID Server URL\nSPIFFWORKFLOW_BACKEND_OPEN_ID_SERVER_URL=<YOUR_OKTA_ISSUER_URL>\n\n# Client ID and Secret Key from Okta\nSPIFFWORKFLOW_BACKEND_OPEN_ID_CLIENT_ID=<YOUR_CLIENT_ID>\nSPIFFWORKFLOW_BACKEND_OPEN_ID_CLIENT_SECRET_KEY=<YOUR_CLIENT_SECRET_KEY>\n\n# OpenID Scopes (includes groups)\nSPIFFWORKFLOW_BACKEND_OPENID_SCOPE=\"openid profile email groups\"\n\n# Allow OpenID Provider to manage user groups\nSPIFFWORKFLOW_BACKEND_OPEN_ID_IS_AUTHORITY_FOR_USER_GROUPS: true\n```\n\n----------------------------------------\n\nTITLE: Starting Keycloak Server (Bash)\nDESCRIPTION: Command to start the Keycloak OpenID Connect server, used for authentication as an alternative to the built-in server. It runs on port 7002, and the default admin console credentials are admin/admin.\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/README.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\n    ./keycloak/bin/start_keycloak\n```\n\n----------------------------------------\n\nTITLE: Building a Docker Image with Process Models\nDESCRIPTION: This Dockerfile snippet demonstrates how to include process models directly in a Docker image.  It starts from a spiffworkflow-backend base image, adds process models from a local directory (`my-process-models`) to the image's `/app/process_models` directory. This technique avoids needing to mount a volume or clone a repository to make the process models available. It is suitable for read-only environments.\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/docs/how_to_guides/deployment/manage_process_models.md#_snippet_2\n\nLANGUAGE: Dockerfile\nCODE:\n```\nFROM spiffworkflow-backend:some-tag\nADD my-process-models /app/process_models\n```\n\n----------------------------------------\n\nTITLE: Manual Task Instructions for Displaying Uploaded File Link\nDESCRIPTION: Provides the user with a final message containing a clickable markdown link to the uploaded file. The variable '{{link}}' is dynamically replaced with the markdown link generated earlier.\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/docs/how_to_guides/building_diagrams/file_upload.md#_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nThanks for uploading a file!  \nHere is a link: {{link}}\n```\n\n----------------------------------------\n\nTITLE: Defining Maximum Date Validation in JSON Schema\nDESCRIPTION: Configures a JSON schema field to require its date value to be on or before another specified field's date using the `maximumDate` property with the \"field:field_name\" format. Ensures dates do not exceed a reference point like a deadline.\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/docs/how_to_guides/building_diagrams/use_user_tasks_and_forms.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n\"delivery_date\": {\n  \"type\": \"string\",\n  \"title\": \"Delivery Date\",\n  \"format\": \"date\",\n  \"maximumDate\": \"field:end_date\"\n}\n```\n\n----------------------------------------\n\nTITLE: Clone Spiff Arena Repo for Windows Setup\nDESCRIPTION: Clones the Spiff Arena GitHub repository into the current directory, preparing it for subsequent configuration steps specific to a Windows environment using Docker Desktop.\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/docs/explanation/dev/developer_setup.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n git clone  https://github.com/sartography/spiff-arena.git  \n cd spiff-arena \n```\n\n----------------------------------------\n\nTITLE: Setting BambooHR GET Request Query Parameters (Python)\nDESCRIPTION: Defines the query parameters for the BambooHR API request. Specified as a Python dictionary to retrieve specific fields (firstName, lastName).\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/docs/reference/bpmn/service_tasks.md#_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\n{\"fields\": \"firstName,lastName\"}\n```\n\n----------------------------------------\n\nTITLE: Message Event Configuration\nDESCRIPTION: This table describes the fields for configuring message events. It shows the forms, fields and descriptions related to Collaboration, Throw and Catch Events. Collaboration defines how the event relates to other BPMN diagrams, while Throw and Catch Events include the message, payload and correlation that make these events functional in the diagram.\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/docs/reference/bpmn/message_events.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n```\n| 💻 Form | ⌨ Field Input | 📝 Description |\n| ------------------------------------------------------------- | --- | --- |\n| ![name_field](/images/name_field.png) | **Name:** Place Order | A descriptive name given to the element, providing a human-readable label or title. |\n| ![id_field](/images/id_field.png) | **ID:** Example - send_invoice | An identifier used to uniquely identify the element within the BPMN model. |\n| ![documentation_field](/images/documentation_field.png) | **Element Documentation:** URL, Raw Data, Plain Text | Additional information or documentation related to the element, such as URLs, plain text, or raw data. |\n```\n```\n\nLANGUAGE: text\nCODE:\n```\n```\n| 💻 Form | ⌨ Field Input | 📝 Description |\n| --- | --- | --- |\n| ![correlation_keys](/images/correlation_keys_1.png) | **Correlation Keys:** order | A correlation key is a unique identifier or attribute used to establish a connection or relationship between message events (it can be likened to the shared subject between them). It is possible to have multiple correlation keys for a process. |\n| ![correlation_properties](/images/correlation_properties_1.png) | **Correlation Properties:** invoice_number | The correlation property is what differentiates each key instance from another, and it's the defining attribute that sets them apart. For instance, if \"order\" is selected as the correlation key, a property like \"invoice_number\" could be used to distinguish each order instance from another. Keep in mind that this variable should be incorporated within the context of the process instance. |\n| ![collaboration_messages](/images/collaboration_messages_1.png) | **Messages:** order_approval, order_dispatch, etc. | Messages are established for each message pair (Throw and Catch Message Events). This setup will be utilized to configure the events, linking the associated occurrences together. |\n```\n```\n\nLANGUAGE: text\nCODE:\n```\n```\n| 💻 Form | ⌨ Field Input | 📝 Description |\n| --- | --- | --- |\n| ![conditions](/images/message_1.png) | **Message:** order_approval | This input isn't an open-text field; instead, it provides a dropdown list populated by the Messages configured in the preceding Collaboration section. |\n| ![conditions](/images/payload_msg.png) | **Payload:** order_amount | The Payload can include a variable, holding unique information specific to the instance, or in this scenario, the order. |\n| ![conditions](/images/event_correlation_msg.png) | **Correlation:** invoice_number | Select the correlation that can identify the distinct property distinguishing one process instance from another. |\n```\n```\n\nLANGUAGE: text\nCODE:\n```\n```\n| 💻 Form | ⌨ Field Input | 📝 Description |\n| --- | --- | --- |\n| ![conditions](/images/message_1.png) | **Message:** order_approval | This input isn't an open-text field; instead, it consists of a dropdown list populated by the Messages configured in the preceding Collaboration section. |\n| ![conditions](/images/payload_msg.png) | **Variable Name:** order_amount | The Variable Name can include a variable, holding unique information specific to the instance, or in this scenario, the order. |\n| ![conditions](/images/event_correlation_msg.png) | **Correlation:** invoice_number | Select the correlation that can identify the distinct property distinguishing one process instance from another. |\n```\n```\n\n----------------------------------------\n\nTITLE: Google OAuth Redirect URI Example\nDESCRIPTION: This example shows a typical redirect URI for Google OAuth clients in a Keycloak instance. It shows how the placeholders in the general format are replaced with real values for a given client and realm. This specific redirect URI is necessary to configure Google as an identity provider for the Keycloak instance and enable authentication for the users.\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/docs/how_to_guides/deployment/keycloak_setup.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nhttps://keycloak-jons-chess-boards.spiff.works/realms/spiffworkflow/broker/google/endpoint\n```\n\n----------------------------------------\n\nTITLE: UI Schema Configuration for Date Range Selector Widget in SpiffArena (JSON)\nDESCRIPTION: This JSON snippet configures the UI schema for the 'travel_date_range' field, specifying the use of the 'date-range' widget and additional help text. Must be used alongside a matching JSON schema model with the same property name. Inputs are managed by the RJSF UI; output is a date range string stored in the workflow. Constraints: Widget must be supported in the SpiffArena/RJSF version in use.\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/docs/how_to_guides/building_diagrams/use_user_tasks_and_forms.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n\"travel_date_range\":{\n    \"ui:widget\": \"date-range\",\n    \"ui:help\": \"Indicate the travel start and end dates\"\n},\n```\n\n----------------------------------------\n\nTITLE: Loading and executing BPMN diagrams with SpiffWorkflow in Python\nDESCRIPTION: This code snippet demonstrates how to load and execute BPMN diagrams using the SpiffWorkflow Python library, enabling automation of business processes via diagram-based workflows. Dependencies include SpiffWorkflow and related libraries to parse and run BPMN files, taking diagram files as input and providing process execution results as output.\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/docs/explanation/articles.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport spiffworkflow.bpmn.parser as parser\nfrom spiffworkflow.bpmn.workflow import BpmnWorkflow\n\n# Load BPMN diagram from file\ndiagram_path = 'path/to/diagram.bpmn'\ndef load_bpmn(diagram_path):\n    return parser.BpmnParser().parse(diagram_path)\n\n# Initialize workflow with parsed diagram\ndef run_bpmn_workflow(bpmn_diagram):\n    workflow = BpmnWorkflow(bpmn_diagram)\n    # Execute the workflow steps\n    while not workflow.is_completed():\n        workflow.do_engine_steps()\n    return workflow\n\n# Main execution\nbpmn_diagram = load_bpmn(diagram_path)\nprocessed_workflow = run_bpmn_workflow(bpmn_diagram)\n# Output the status or results as needed\nprint('Workflow execution completed:', processed_workflow.is_completed())\n```\n\n----------------------------------------\n\nTITLE: Setting BambooHR GET Request Headers (Python)\nDESCRIPTION: Specifies the headers for the BambooHR API GET request. The headers are defined as a Python dictionary, requesting a JSON response.\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/docs/reference/bpmn/service_tasks.md#_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\n{\"Accept\": \"application/json\"}\n```\n\n----------------------------------------\n\nTITLE: Updating SPIFFWORKFLOW_BACKEND_CONNECTOR_PROXY_URL in Docker Compose file\nDESCRIPTION: Example diff showing how to update the SPIFFWORKFLOW_BACKEND_CONNECTOR_PROXY_URL environment variable in the docker-compose.yml file to point to an AWS Lambda function URL.\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/docs/how_to_guides/deployment/configure_a_connector_proxy.md#_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\ndiff --git a/docker-compose.yml b/docker-compose.yml\nindex 95b87b39..7d55c492 100644\n--- a/docker-compose.yml\n+++ b/docker-compose.yml\n@@ -26,7 +26,7 @@ services:\n       SPIFFWORKFLOW_BACKEND_URL: \"http://localhost:${SPIFF_BACKEND_PORT:-8000}\"\n \n       SPIFFWORKFLOW_BACKEND_BPMN_SPEC_ABSOLUTE_DIR: \"/app/process_models\"\n-      SPIFFWORKFLOW_BACKEND_CONNECTOR_PROXY_URL: \"http://spiffworkflow-connector:8004\"\n+      SPIFFWORKFLOW_BACKEND_CONNECTOR_PROXY_URL: \"https://crbxgaopinfxqscntkqixjbl4e0gigpm.lambda-url.us-east-1.on.aws\"\n       SPIFFWORKFLOW_BACKEND_DATABASE_URI: \"mysql+mysqlconnector://root:${SPIFF_MYSQL_PASS:-my-secret-pw}@spiffworkflow-db:${SPIFF_MYSQL_PORT:-8003}/spiffworkflow_backend_development\"\n       SPIFFWORKFLOW_BACKEND_LOAD_FIXTURE_DATA: \"false\"\n       SPIFFWORKFLOW_BACKEND_OPEN_ID_CLIENT_ID: \"spiffworkflow-backend\"\n\n```\n\n----------------------------------------\n\nTITLE: Setting JSONPlaceholder GET Request Headers (Python)\nDESCRIPTION: Specifies the headers for an HTTP GET request. The headers are defined as a Python dictionary, requesting a JSON response.\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/docs/reference/bpmn/service_tasks.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n{\"Accept\": \"application/json\"}\n```\n\n----------------------------------------\n\nTITLE: Approximating PI Using Leibniz’s Formula in Pre-script - Python\nDESCRIPTION: This pre-script estimates the value of PI via the Leibniz series within a SpiffArena Manual Task. It initializes and iteratively updates an accumulator for 1,000,000 steps using alternating series, storing the result in 'pi'. The only necessary dependency is Python's arithmetic and looping support, which is allowed by SpiffArena's scripting environment. No input parameters are expected; the output is the floating-point approximation 'pi'. Ensure high looping counts do not impact performance, and all variables manipulated must be JSON serializable.\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/docs/reference/bpmn/script_tasks.md#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n# Initialize denominator\nk = 1\n\n# Initialize sum\ns = 0\n\nfor i in range(1000000):\n\n    # even index elements are positive\n    if i % 2 == 0:\n        s += 4/k\n    else:\n\n        # odd index elements are negative\n        s -= 4/k\n\n    # denominator is odd\n    k += 2\n\npi = s\ndel(k)\n```\n\n----------------------------------------\n\nTITLE: Resetting a Workflow Using SpiffWorkflow in Python\nDESCRIPTION: This snippet shows how to reset a workflow instance in SpiffWorkflow without reloading BPMN and DMN files. It first retrieves the 'Start' task from the workflow spec by its name, then calls reset_from_task_id() using the start task's ID. This approach enables restarting a workflow from its beginning programmatically. It requires the workflow instance object to be accessible and assumes the workflow spec includes a task named 'Start'.\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/docs/reference/frequently_asked_questions.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nstart = workflow.get_tasks_from_spec_name('Start')[0]\nworkflow.reset_from_task_id(start.id)\n```\n\n----------------------------------------\n\nTITLE: Setting JSONPlaceholder GET Request URL (Python)\nDESCRIPTION: Configures the URL parameter for an HTTP GET request in a SpiffWorkflow Service Task. The URL is provided as a Python string literal.\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/docs/reference/bpmn/service_tasks.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n'https://jsonplaceholder.typicode.com/users/1'\n```\n\n----------------------------------------\n\nTITLE: Assigning Static Lane Owners in BPMN Workflow Using Python Script Task\nDESCRIPTION: A Python script snippet demonstrating static assignment of lane owners in BPMN workflows through a script task. It explicitly maps the lane named 'Reviewer' to a list of user emails responsible for that lane, facilitating task routing. This example requires the workflow environment to recognize `lane_owners` for routing decisions.\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/docs/reference/bpmn/pools_and_lanes.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Script task to assign lane owners\nlane_owners = {\n    \"Reviewer\": [\"user1@example.com\", \"user2@example.com\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Connector Proxy URL in Docker Compose (Windows/Bonus)\nDESCRIPTION: This snippet shows the line in `docker-compose.yml` that needs to be modified to point the backend connector to a specific IP address and port, typically used when running a custom connector proxy locally.\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/docs/explanation/dev/developer_setup.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nSPIFFWORKFLOW_BACKEND_CONNECTOR_PROXY_URL: \"${SPIFFWORKFLOW_BACKEND_CONNECTOR_PROXY_URL:-http://[YOUR_IP_ADDRESS]:8004}\" \n```\n\n----------------------------------------\n\nTITLE: Correctly Formatting Deserialized Datetime Object in Python\nDESCRIPTION: Shows the correct method for formatting a deserialized `datetime` object in a Python script using the built-in `strftime()` method. This approach directly operates on the `datetime` object itself, avoiding errors.\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/docs/how_to_guides/building_diagrams/use_user_tasks_and_forms.md#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ncdt_datetime = current_time.strftime('%Y-%m-%dT%H:%M:%S%z')\n```\n\n----------------------------------------\n\nTITLE: Configuring Simplified Side-by-Side Layout with ui:layout in JSON\nDESCRIPTION: Shows a simplified use of the `ui:layout` property in JSON to arrange form fields side-by-side without specifying explicit responsive column widths. When column widths are omitted, the layout automatically distributes space within the row, providing flexibility for basic horizontal alignment.\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/docs/how_to_guides/building_diagrams/use_user_tasks_and_forms.md#_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n    {\n      \"ui:layout\": [\n        {\n          \"firstName\": {},\n          \"lastName\": {}\n        }\n      ]\n    }\n```\n\n----------------------------------------\n\nTITLE: Enabling Extensions via Environment Variable in SpiffArena\nDESCRIPTION: Environment variable setting required to activate the extensions feature in the SpiffWorkflow backend. This is a prerequisite for using any extensions in the system.\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/docs/explanation/dev/extensions.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nSPIFFWORKFLOW_BACKEND_EXTENSIONS_API_ENABLED=true\n```\n\n----------------------------------------\n\nTITLE: Retrieving Specific Task Result from Redis\nDESCRIPTION: Fetches the result of a completed Celery task by querying Redis with the task ID appended to the key. This command requires Redis CLI and the task ID, returning the task's output or status.\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/docs/how_to_guides/deployment/work_with_redis_celery_broker.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nredis-cli get celery-task-meta-9622ff55-9f23-4a94-b4a0-4e0a615a8d14\n```\n\n----------------------------------------\n\nTITLE: Matching User Selection to JSON Data Store Record Using Python in BPMN\nDESCRIPTION: This Python pre-script in a BPMN Manual Task matches the user-selected Gatorade flavor (`selected`) against the JSON data store array `gatorade_flavors`. It loops through the list and assigns the matching JSON object to `selected_flavor`. This allows downstream tasks or displays to access full details of the selected flavor. The snippet expects `selected` as input from the user task and `gatorade_flavors` from the JSON data store, producing a detailed flavor object output.\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/docs/reference/bpmn/data_stores.md#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nfor flavor in gatorade_flavors:\n    if flavor[\"name\"] == selected:\n        selected_flavor = flavor\n```\n\n----------------------------------------\n\nTITLE: Setting BambooHR GET Request URL (Python)\nDESCRIPTION: Configures the URL parameter for the BambooHR API GET request. The URL is provided as a Python string literal, requiring replacement of the subdomain placeholder.\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/docs/reference/bpmn/service_tasks.md#_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\n'https://api.bamboohr.com/api/gateway.php/{your_company_subdomain}/v1/employees/directory'\n```\n\n----------------------------------------\n\nTITLE: Building the Connector Proxy Lambda Zip\nDESCRIPTION: This command uses Make to build a zip file named 'connector_proxy_lambda_demo.zip' in the root of the repository. The zip file contains the Python Lambda entry point function and its dependencies, specifically 'spiffworkflow-proxy' for connector discovery and 'connector-http' for HTTP requests, preparing the code for deployment to AWS Lambda.\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/docs/how_to_guides/deployment/deploy_a_connector_proxy_as_an_aws_lambda_function.md#_snippet_0\n\nLANGUAGE: makefile\nCODE:\n```\nmake zip\n```\n\n----------------------------------------\n\nTITLE: Providing Keycloak Admin Console URL\nDESCRIPTION: This snippet provides the URL for accessing the Keycloak Admin Console after assigning roles. The URL format is: `https://keycloak-[CLIENT'S DOMAIN].spiff.works/admin/[REALM_NAME]/console`.  This allows a user with the correct roles to access the admin console and manage the realm.\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/docs/how_to_guides/deployment/keycloak_setup.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nhttps://keycloak-[CLIENT'S DOMAIN].spiff.works/admin/[REALM_NAME]/console\n```\n\n----------------------------------------\n\nTITLE: Inspecting Flask App Configuration for Backend Environment Variables in Python\nDESCRIPTION: This snippet demonstrates how to print the value of the 'SPIFFWORKFLOW_BACKEND_URL_FOR_FRONTEND' environment variable in a running Flask application. It uses the Flask 'current_app' proxy to access the application's configuration from within a Python REPL or a shell in the backend container. Prerequisites include an active Flask application context and access to the Flask runtime. The output will display the current value configured for the frontend-backend connection, which is essential for diagnosing misconfigurations related to backend URLs in SpiffArena deployments.\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/docs/reference/frequently_asked_questions.md#_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nfrom flask import current_app\nprint(current_app.config['SPIFFWORKFLOW_BACKEND_URL_FOR_FRONTEND'])\n```\n\n----------------------------------------\n\nTITLE: Display Template for Edited Composers using Jinja Syntax\nDESCRIPTION: Templating syntax that iterates over the composers array to display each composer's name and genre in a formatted list. Used in a manual task to present the edited collection of composers after multi-instance processing.\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/docs/reference/bpmn/multiinstance_tasks.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n{% for c in composers %}\n* **{{c.composer}}**:   {{c.genre}}\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Running Development Server\nDESCRIPTION: This command starts the React app in development mode. It opens the application in the browser at http://localhost:3000 and automatically reloads the page upon changes. It also displays any lint errors in the console.\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/spiffworkflow-frontend/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n### `npm start`\n\nRuns the app in the development mode.\\\nOpen [http://localhost:3000](http://localhost:3000) to view it in your browser.\n\nThe page will reload when you make changes.\\\nYou may also see any lint errors in the console.\n```\n\n----------------------------------------\n\nTITLE: Running SpiffWorkflow Locally (Shell)\nDESCRIPTION: This snippet demonstrates how to run the SpiffWorkflow server locally, specifying the directory for process models.  It sets the absolute directory for BPMN specifications using the `SPIFFWORKFLOW_BACKEND_BPMN_SPEC_ABSOLUTE_DIR` environment variable, which should be a directory on the local filesystem. The command launches the SpiffWorkflow server using the `run_server_locally` script.\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/docs/how_to_guides/deployment/manage_process_models.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nSPIFFWORKFLOW_BACKEND_BPMN_SPEC_ABSOLUTE_DIR=/var/tmp/my-process-models ./bin/run_server_locally\n```\n\n----------------------------------------\n\nTITLE: Defining SpiffArena Component Diagram - Mermaid\nDESCRIPTION: This snippet defines a visual diagram representing the architecture and components of the SpiffArena system using Mermaid syntax. It shows the interaction between the Frontend, Backend, Connector Proxy, and the database, including the libraries used within the Frontend and Backend.\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/docs/explanation/dev/technical_overview.md#_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\nsubgraph spiff-arena\n    Backend\n    Frontend\nend\nsubgraph Backend\n    subgraph SpiffWorkflow lib\n    end\nend\nsubgraph Frontend\n    subgraph bpmn-js-spiffworkflow lib\n    end\nend\nFrontend -- uses REST API --> Backend\nBackend -- delegates to --> C\nBackend -- persists to --> DB\nDB[(mysql/postgres)]\nC[Connector Proxy]\n```\n\n----------------------------------------\n\nTITLE: Dependencies Declaration for Python Project with Flask and SpiffWorkflow-Proxy\nDESCRIPTION: Specifies the dependencies required for the Flask application integrating SpiffWorkflow-Proxy and connector-aws, including specific versions and repository locations. These dependencies enable the application to interact with external services and manage workflows effectively.\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/connector-proxy-demo/README.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\npython = \"^3.11\"\nFlask = \"^2.2.2\"\nspiffworkflow-proxy = {git = \"https://github.com/sartography/spiffworkflow-proxy\"}\nconnector-aws = { git = \"https://github.com/sartography/connector-aws.git\"}\n```\n\n----------------------------------------\n\nTITLE: Purging All Entries from the Celery Queue\nDESCRIPTION: Uses a Poetry-managed Celery command to purge all entries from the 'celery' queue, effectively clearing all pending tasks. Requires the relevant Python environment and Celery setup.\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/docs/how_to_guides/deployment/work_with_redis_celery_broker.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npoetry run celery -A src.spiffworkflow_backend.background_processing.celery_worker purge\n```\n\n----------------------------------------\n\nTITLE: Script Task for Delay and Playful Colors in Python\nDESCRIPTION: A Python script task that introduces a 1-second delay using time.sleep() and focuses on making colors more playful.\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/docs/how_to_guides/building_diagrams/display_content.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ntime.sleep(1)\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Flask Application with SpiffWorkflow Proxy Blueprint in Python\nDESCRIPTION: Initializes a Flask app and registers the SpiffWorkflow Proxy's Flask blueprint, enabling workflow service interactions via registered routes. The app loads configuration from an optional file and runs locally on port 5000, serving as a scaffold for connector development.\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/connector-proxy-demo/README.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nimport os\nfrom spiffworkflow_proxy.blueprint import proxy_blueprint\nfrom flask import Flask\n\napp = Flask(__name__)\napp.config.from_pyfile(\"config.py\", silent=True)\napp.register_blueprint(proxy_blueprint)\nif __name__ == \"__main__\":\n    app.run(host=\"localhost\", port=5000)\n```\n\n----------------------------------------\n\nTITLE: Keycloak Admin Console URL Example\nDESCRIPTION: This example provides a concrete example of an Admin Console URL for a client named \"Civitos\" and a realm named \"spiffworkflow\". This helps illustrate the structure and format of the Admin Console URL with specific parameters for the client and realm.\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/docs/how_to_guides/deployment/keycloak_setup.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nhttps://keycloak-civitos.spiff.works/admin/spiffworkflow/console/#/spiffworkflow/users\n```\n\n----------------------------------------\n\nTITLE: Restarting Docker services after configuration update\nDESCRIPTION: Commands to restart the Docker Compose services after updating the configuration. This ensures the new environment variable is applied.\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/docs/how_to_guides/deployment/configure_a_connector_proxy.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose down\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Specifying UI Help Text Format in JSON Schema\nDESCRIPTION: Illustrates the basic JSON structure for adding help text to a specific form field using the `ui:help` property within the field's `uiSchema` configuration. The string value provided becomes the help message displayed alongside the field in the form.\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/docs/how_to_guides/building_diagrams/use_user_tasks_and_forms.md#_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n\"field_name\": {\n  \"ui:help\": \"Your help text here\"\n}\n```\n\n----------------------------------------\n\nTITLE: Run Custom Connector Proxy Flask App\nDESCRIPTION: Executes the Flask application for the custom connector proxy demo, binding it to port 8004 and making it accessible from all network interfaces (0.0.0.0). This allows the Spiff Arena backend to connect to it.\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/docs/explanation/dev/developer_setup.md#_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nflask run -p 8004 --host=0.0.0.0\n```\n\n----------------------------------------\n\nTITLE: Visualizing CI Workflow with Mermaid Flowchart\nDESCRIPTION: This Mermaid flowchart illustrates the Continuous Integration (CI) process managed by GitHub Actions. It shows the sequence starting with backend tests (Pytest, MyPy, Safety, Black, TypeGuard), followed by frontend tests (Vitest, ESLint, Prettier, Cypress), ultimately leading to the creation of Docker images.\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/docs/explanation/dev/process.md#_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    subgraph \"backend_tests\"[Backend Tests]\n        pytest[Pytest]\n        mypy[MyPy]\n        safety[Safety]\n        black[Black]\n        typeguard[TypeGuard]\n    end\n        \n    subgraph \"frontend_tests\"[Frontend Tests]\n        vitest[Vitest]\n        eslint[ESLint]\n        prettier[Prettier]\n        cypress[Cypress]\n    end\n    backend_tests --> frontend_tests\n    frontend_tests --> docker_images\n```\n\n----------------------------------------\n\nTITLE: Setting Default User Group with Environment Variable in SpiffWorkflow Backend (Shell)\nDESCRIPTION: Sets the default user group for new users in SpiffWorkflow by exporting an environment variable. This configuration ensures that all new users are assigned to a custom or specified group instead of the default 'everyone' group. Dependency: The SpiffWorkflow backend must be running and configured to read the SPIFFWORKFLOW_BACKEND_DEFAULT_USER_GROUP variable from its environment. Parameter: The GROUP_NAME string assigned to the environment variable. Input: Custom group name. Output: Changes the default group assignment behavior for incoming users. Limitation: Must restart the backend service or ensure environment variables are reloaded after changes.\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/docs/how_to_guides/deployment/manage_permissions.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nexport SPIFFWORKFLOW_BACKEND_DEFAULT_USER_GROUP=\"custom-default-group\"\n\n```\n\n----------------------------------------\n\nTITLE: Calculating Variable Sum in Parallel Gateway - BPMN\nDESCRIPTION: This script task calculates the sum of two variables, `y` and `z`, and assigns the result to variable `x`. The variables `y` and `z` are assigned values in parallel tasks before this script executes.  It's a crucial step after the parallel tasks merge, combining results from the independent branches.\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/docs/reference/bpmn/parallel_gateways_example.md#_snippet_0\n\nLANGUAGE: BPMN\nCODE:\n```\nx = y + z\n```\n\n----------------------------------------\n\nTITLE: JSON Schema Definition for File Upload Form in Spiffworkflow\nDESCRIPTION: Defines the form schema allowing users to upload a single file using a data URL format, stored in the process variable 'file'. It specifies the UI acceptance of PDF files.\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/docs/how_to_guides/building_diagrams/file_upload.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"title\": \"Files\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"file\": {\n      \"type\": \"string\",\n      \"format\": \"data-url\",\n      \"title\": \"Single file\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting BambooHR Basic Auth Password (Python)\nDESCRIPTION: Configures the Basic Authentication password for the BambooHR API request. The value 'x' is used as a placeholder, enclosed in quotes as a Python string expression.\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/docs/reference/bpmn/service_tasks.md#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n\"x\"\n```\n\n----------------------------------------\n\nTITLE: Cloning Arena Compose Repository using Git in Shell\nDESCRIPTION: This shell command clones the 'arena-compose-postgres' repository from GitHub. It is the first step in customizing the SpiffWorkflow Docker Compose deployment. Users must have git installed; the command creates a local copy of the repository for editing docker-compose.yml and running custom configuration. The expected output is a new 'arena-compose-postgres' directory.\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/docs/reference/frequently_asked_questions.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/sartography/arena-compose-postgres\n```\n\n----------------------------------------\n\nTITLE: Diagramming Connector Proxy Architecture Using Mermaid\nDESCRIPTION: This Mermaid graph code visually represents the organizational structure of a connector proxy application. It demonstrates the concept of a Connector Proxy containing multiple connectors (Connector A, Connector B), each with their own commands. This snippet is used to provide architectural context to developers and stakeholders, illustrating the hierarchical relationships within the connector proxy system. No runtime dependencies exist for this static diagram code.\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/docs/explanation/dev/connector_proxy.md#_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\n    subgraph ConnectorProxy[Connector Proxy Application]\n        direction TB\n        ConnectorA\n        ConnectorB\n    end\n\n    subgraph ConnectorA[Connector A]\n        direction TB\n        CommandA1[Command C]\n        CommandA2[Command D]\n    end\n\n    subgraph ConnectorB[Connector B]\n        direction TB\n        CommandB1[Command E]\n        CommandB2[Command F]\n    end\n\n```\n\n----------------------------------------\n\nTITLE: Launching Flask Application for SpiffWorkflow Proxy\nDESCRIPTION: Command line instruction to start the Flask server hosting the SpiffWorkflow Proxy. This command activates the Flask development server, making the connector services accessible for workflow interactions and integrations.\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/connector-proxy-demo/README.md#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\n#> flask run\n```\n\n----------------------------------------\n\nTITLE: Visualizing Spiff Arena Architecture with Mermaid Diagram\nDESCRIPTION: This diagram illustrates the architecture of the Spiff Arena deployment, showing the relationships between Backend components (API, Background, Celery Worker), Frontend, Connector Proxy, and Database. It visualizes how the components communicate with each other.\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/docs/how_to_guides/deployment/deploy.md#_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD;\n    subgraph Backend\n        A[API]\n        B[Background]\n        Ce[Celery Worker]\n    end\n    F[Frontend]\n    Co[Connector Proxy]\n    D[Database]\n    A --> D\n    B --> D\n    Ce --> D\n    F -- Communicates with --> Backend\n    Backend -- delegates to --> Co\n```\n\n----------------------------------------\n\nTITLE: Defining a Table of Contents in Sphinx (toctree)\nDESCRIPTION: This snippet uses the Sphinx `toctree` directive to generate a table of contents. The `:maxdepth: 1` option limits the depth of the generated TOC to one level, and the `:caption:` option sets the title displayed above the TOC. It lists the files and directories to include in the documentation structure.\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/docs/how_to_guides/index.md#_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n```{toctree}\n:maxdepth: 1\n:caption: How-to Guides\nbuilding_diagrams/index\nmanage_processes\nmanage_welcome_messages\nuse_custom_process_metadata\ntroubleshoot_locally\ndeployment/index\n```\n```\n\n----------------------------------------\n\nTITLE: Building and Serving Documentation Locally with Sphinx (Shell)\nDESCRIPTION: Runs the sphinx-autobuild command to continuously build the documentation from the current directory (`.`) into the `_build/html` directory. It watches for file changes (`-a`), suppresses warnings (`-W`), uses automatic parallel jobs (`-j auto`), ignores nitpicky warnings (`-n`), and serves the built site locally (typically at http://127.0.0.1:8000). This requires Sphinx and sphinx-autobuild to be installed in the active Python environment.\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/docs/reference/how_to_contribute_to_the_documentation.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nsphinx-autobuild . \\_build/html -W -a -j auto -n\n```\n\n----------------------------------------\n\nTITLE: Run Spiff Arena with Docker Compose (Release)\nDESCRIPTION: Creates a directory, downloads the `docker-compose.yml` file from the main branch, pulls the required Docker images, and starts the services using `docker-compose up`. This method runs the latest release version without direct source editing.\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/docs/explanation/dev/developer_setup.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nmkdir spiffworkflow\ncd spiffworkflow\nwget https://raw.githubusercontent.com/sartography/spiff-arena/main/docker-compose.yml\ndocker-compose pull\ndocker-compose up\n```\n\n----------------------------------------\n\nTITLE: Assigning Markdown Widget to a Field in JSON uiSchema\nDESCRIPTION: Demonstrates how to assign the Markdown widget to a text field in an rjsf form by setting the `ui:widget` property to \"markdown\" within the field's `uiSchema` configuration. This enables specialized markdown input and preview functionality for that field.\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/docs/how_to_guides/building_diagrams/use_user_tasks_and_forms.md#_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n\"ui:widget\": \"markdown\"\n```\n\n----------------------------------------\n\nTITLE: Fetching All Celery Task Results from Redis\nDESCRIPTION: Uses a combination of shell commands to list all task result keys and retrieve their values from Redis. It lists all matching keys with 'keys', then uses 'sed' and 'redis-cli' to fetch each result. Suitable for batch result retrieval.\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/docs/how_to_guides/deployment/work_with_redis_celery_broker.md#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\necho 'keys celery-task-meta-*' | redis-cli | sed 's/^/get /' | redis-cli\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents for BPMN Elements in Markdown\nDESCRIPTION: A toctree directive that organizes documentation pages for various BPMN elements supported in SpiffWorkflow. The directive creates a structured table of contents with links to individual documentation files, each covering specific BPMN elements.\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/docs/reference/bpmn/index.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{toctree}\n:maxdepth: 1\ngateways.md\nevents.md\nmessage_events\nsignal_events\ntimer_events\nescalation_events\nconditional_events\nerror_events.md\nscript_tasks.md\nservice_tasks.md\nsubprocesses_and_call_activities\ndata.md\nmultiinstance_tasks\ndecision_tables\npools_and_lanes.md\n```\n\n----------------------------------------\n\nTITLE: Setting BambooHR Basic Auth Username (Python)\nDESCRIPTION: Configures the Basic Authentication username for the BambooHR API request. Uses the 'secret:' prefix notation for secure handling of the API key.\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/docs/reference/bpmn/service_tasks.md#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n\"secret:BAMBOOHR_API_KEY\"\n```\n\n----------------------------------------\n\nTITLE: Using Environment Variable with Local Server Command\nDESCRIPTION: A bash command that uses an environment variable to specify an alternative BPMN specification directory when running the local server script.\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/docs/how_to_guides/troubleshoot_locally.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nSPIFFWORKFLOW_BACKEND_BPMN_SPEC_ABSOLUTE_DIR=/path/to/any/git/repo ./bin/run_server_locally\n```\n\n----------------------------------------\n\nTITLE: Visualizing Process Flow with Mermaid Diagrams\nDESCRIPTION: These snippets use Mermaid syntax to visually represent the process flow and task structure of a process model before and after an update. They illustrate how a process instance moves through manual tasks and the impact of adding new tasks in later versions of the process.\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/docs/how_to_guides/manage_processes.md#_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph LR\n    A(( )) --> B[Manual Task A]\n    B --> C(( ))\n```\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph LR\n    A(( )) --> B[Manual Task A]\n    B --> D[Manual Task B]\n    D --> C(( ))\n```\n\n----------------------------------------\n\nTITLE: Inspecting Redis Queue Length and Entries for Celery\nDESCRIPTION: Commands to check the number of entries and retrieve all items from the 'celery' queue in Redis. Use 'LLEN' to get the queue length and 'LRANGE' to list queued tasks, cautioning about large queues.\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/docs/how_to_guides/deployment/work_with_redis_celery_broker.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nredis-cli LLEN celery # how many queued entries\nredis-cli LRANGE celery 0 -1 # get all queued entries. Be careful if you have a lot.\n```\n\n----------------------------------------\n\nTITLE: Configuring Flask Settings in config.py - Python\nDESCRIPTION: This code snippet demonstrates how to create a `config.py` file in the `src/instance` directory to configure Flask settings for the Spiffworkflow backend. It includes settings for the session secret key, backend application root, BPMN specification directory, authentication configurations (using a built-in login), and permissions file name. This configuration allows the application to run with specific settings and authentication mechanisms.\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/spiffworkflow-backend/docs/pycharm.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nFLASK_SESSION_SECRET_KEY=\"[PUT SOME RANDOM STUFF HERE]\"\nSPIFFWORKFLOW_BACKEND_APPLICATION_ROOT=\"/\"\nSPIFFWORKFLOW_BACKEND_BPMN_SPEC_ABSOLUTE_DIR=\"[FULL PATH TO SAMPLE PROCESS MODEL GIT CLONE]\"\n\n# This will configure your application to use a built in login rather than\n# relying on keycloak etc...\nSPIFFWORKFLOW_BACKEND_AUTH_CONFIGS = [\n    {\n    \"identifier\":\"default\",\n    \"label\":\"internal openid\",\n    \"uri\":\"http://localhost:7000/openid\",\n    \"client_id\":\"spiffworkflow-backend\",\n    \"client_secret\":\"JXeQExm0JhQPLumgHtIIqf52bDalHz0q\"\n    }\n]\n\n# You can modify the permissions by creating your owm permissions file and setting it here.  See [example.yml](../src/spiffworkflow_backend/config/permissions/example.yml)\nSPIFFWORKFLOW_BACKEND_PERMISSIONS_FILE_NAME=\"example.yml\"\n```\n\n----------------------------------------\n\nTITLE: Installing All Local Python Wheels via Poetry Pip - bash\nDESCRIPTION: This command installs all local Python wheel files found in the 'local_wheels' folder by running pip through Poetry. It enables sideloading multiple wheels at once into the current Poetry environment. The command assumes wheel files are named with the '.whl' extension and located inside the 'local_wheels' directory. The output is pip installing all wheels locally.\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/spiffworkflow-backend/local_wheels/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npoetry run pip install local_wheels/*.whl\n```\n\n----------------------------------------\n\nTITLE: Defining Minimum Date Validation in JSON Schema\nDESCRIPTION: Configures a JSON schema field to require its date value to be on or after another specified field's date using the `minimumDate` property with the \"field:field_name\" format. Useful for enforcing chronological order like end date after start date.\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/docs/how_to_guides/building_diagrams/use_user_tasks_and_forms.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n    \"end_date\": {\n      \"type\": \"string\",\n      \"title\": \"End date\",\n      \"format\": \"date\",\n      \"minimumDate\": \"field:start_date\"\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining a BPMN Workflow with Waku SendMessage Service Task in XML\nDESCRIPTION: A complete BPMN workflow definition that implements a process with a Waku message sending capability. The workflow includes a service task that uses the SpiffWorkflow extension to send a one-to-one message to a specific recipient using the Waku protocol.\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/spiffworkflow-frontend/cypress/fixtures/sampletext.txt#_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<bpmn:definitions xmlns:bpmn=\"http://www.omg.org/spec/BPMN/20100524/MODEL\" xmlns:bpmndi=\"http://www.omg.org/spec/BPMN/20100524/DI\" xmlns:dc=\"http://www.omg.org/spec/DD/20100524/DC\" xmlns:spiffworkflow=\"http://spiffworkflow.org/bpmn/schema/1.0/core\" xmlns:di=\"http://www.omg.org/spec/DD/20100524/DI\" id=\"Definitions_96f6665\" targetNamespace=\"http://bpmn.io/schema/bpmn\" exporter=\"Camunda Modeler\" exporterVersion=\"3.0.0-dev\">\n  <bpmn:process id=\"Process_o8prjc6\" isExecutable=\"true\">\n    <bpmn:startEvent id=\"StartEvent_1\">\n      <bpmn:outgoing>Flow_1wvr4fo</bpmn:outgoing>\n    </bpmn:startEvent>\n    <bpmn:sequenceFlow id=\"Flow_1wvr4fo\" sourceRef=\"StartEvent_1\" targetRef=\"Activity_021jb39\" />\n    <bpmn:endEvent id=\"Event_1hpucme\">\n      <bpmn:incoming>Flow_14wkay5</bpmn:incoming>\n    </bpmn:endEvent>\n    <bpmn:sequenceFlow id=\"Flow_03aokn9\" sourceRef=\"Activity_021jb39\" targetRef=\"Activity_06y4ypg\" />\n    <bpmn:serviceTask id=\"Activity_021jb39\">\n      <bpmn:extensionElements>\n        <spiffworkflow:serviceTaskOperator id=\"waku/SendMessage\" resultVariable=\"the_var\">\n          <spiffworkflow:parameters>\n            <spiffworkflow:parameter id=\"message\" type=\"str\" value=\"&#34;TETING FROM TEST&#34;\" />\n            <spiffworkflow:parameter id=\"message_type\" type=\"str\" value=\"&#34;wakuext_sendOneToOneMessage&#34;\" />\n            <spiffworkflow:parameter id=\"recipient\" type=\"str\" value=\"[&#34;0x04a4209153d1df6e531102f2e98e16ec85fbcb8c563c2f8fcd2737626d1963ced9d17581a8dad7c90c1ab60b0bf56279e5b19ea3147b6b1a147e002cd96e42b294&#34;]\" />\n          </spiffworkflow:parameters>\n        </spiffworkflow:serviceTaskOperator>\n      </bpmn:extensionElements>\n      <bpmn:incoming>Flow_1wvr4fo</bpmn:incoming>\n      <bpmn:outgoing>Flow_03aokn9</bpmn:outgoing>\n    </bpmn:serviceTask>\n    <bpmn:sequenceFlow id=\"Flow_14wkay5\" sourceRef=\"Activity_06y4ypg\" targetRef=\"Event_1hpucme\" />\n    <bpmn:manualTask id=\"Activity_06y4ypg\">\n      <bpmn:incoming>Flow_03aokn9</bpmn:incoming>\n      <bpmn:outgoing>Flow_14wkay5</bpmn:outgoing>\n    </bpmn:manualTask>\n  </bpmn:process>\n  <bpmndi:BPMNDiagram id=\"BPMNDiagram_1\">\n    <bpmndi:BPMNPlane id=\"BPMNPlane_1\" bpmnElement=\"Process_o8prjc6\">\n      <bpmndi:BPMNShape id=\"_BPMNShape_StartEvent_2\" bpmnElement=\"StartEvent_1\">\n        <dc:Bounds x=\"179\" y=\"159\" width=\"36\" height=\"36\" />\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape id=\"Event_1hpucme_di\" bpmnElement=\"Event_1hpucme\">\n        <dc:Bounds x=\"812\" y=\"159\" width=\"36\" height=\"36\" />\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape id=\"Activity_12tj4p6_di\" bpmnElement=\"Activity_021jb39\">\n        <dc:Bounds x=\"270\" y=\"137\" width=\"100\" height=\"80\" />\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape id=\"Activity_0rbl68g_di\" bpmnElement=\"Activity_06y4ypg\">\n        <dc:Bounds x=\"530\" y=\"137\" width=\"100\" height=\"80\" />\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNEdge id=\"Flow_1wvr4fo_di\" bpmnElement=\"Flow_1wvr4fo\">\n        <di:waypoint x=\"215\" y=\"177\" />\n        <di:waypoint x=\"270\" y=\"177\" />\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge id=\"Flow_03aokn9_di\" bpmnElement=\"Flow_03aokn9\">\n        <di:waypoint x=\"370\" y=\"177\" />\n        <di:waypoint x=\"530\" y=\"177\" />\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge id=\"Flow_14wkay5_di\" bpmnElement=\"Flow_14wkay5\">\n        <di:waypoint x=\"630\" y=\"177\" />\n        <di:waypoint x=\"812\" y=\"177\" />\n      </bpmndi:BPMNEdge>\n    </bpmndi:BPMNPlane>\n  </bpmndi:BPMNDiagram>\n</bpmn:definitions>\n```\n\n----------------------------------------\n\nTITLE: List of ALL Accessible URLs - Bash\nDESCRIPTION: This bash script lists all URLs accessible with the 'ALL' permission in the spiff-arena project. It's used to define the scope of access granted to a user with administrator-level permissions, allowing them to perform any action or operation available within the system.\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/docs/reference/permission_url.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n  /active-users/unregister/{last_visited_identifier}:\n  /active-users/updates/{last_visited_identifier}:\n  /authentication_callback/{service}/{auth_method}:\n  /authentications:\n  /connector-proxy/typeahead/{category}:\n  /debug/test-raise-error:\n  /debug/version-info:\n  /event-error-details/{modified_process_model_identifier}/{process_instance_id}/{process_instance_event_id}:\n  /github-webhook-receive:\n  /login:\n  /login_api:\n  /login_api_return:\n  /login_return:\n  /login_with_access_token:\n  /logout:\n  /logout_return:\n  /logs/typeahead-filter-values/{modified_process_model_identifier}/{process_instance_id}:\n  /logs/{modified_process_model_identifier}/{process_instance_id}:\n  /messages/{message_name}:\n  /messages:\n  /permissions-check:\n  /process-data-file-download/{modified_process_model_identifier}/{process_instance_id}/{process_data_identifier}:\n  /process-data/{modified_process_model_identifier}/{process_instance_id}/{process_data_identifier}:\n  /process-groups/{modified_process_group_identifier}/move:\n  /process-groups/{modified_process_group_id}:\n  /process-groups:\n  /process-instance-reset/{modified_process_model_identifier}/{process_instance_id}/{to_task_guid}:\n  /process-instance-resume/{modified_process_model_identifier}/{process_instance_id}:\n  /process-instance-suspend/{modified_process_model_identifier}/{process_instance_id}:\n  /process-instance-terminate/{modified_process_model_identifier}/{process_instance_id}:\n  /process-instances/find-by-id/{process_instance_id}:\n  /process-instances/for-me/{modified_process_model_identifier}/{process_instance_id}/task-info:\n  /process-instances/for-me/{modified_process_model_identifier}/{process_instance_id}:\n  /process-instances/for-me:\n  /process-instances/report-metadata:\n  /process-instances/reports/columns:\n  /process-instances/reports/{report_id}:\n  /process-instances/reports:\n  /process-instances/{modified_process_model_identifier}/{process_instance_id}/run:\n  /process-instances/{modified_process_model_identifier}/{process_instance_id}/task-info:\n  /process-instances/{modified_process_model_identifier}/{process_instance_id}:\n  /process-instances/{modified_process_model_identifier}:\n  /process-instances:\n  /process-model-natural-language/{modified_process_group_id}:\n  /process-model-publish/{modified_process_model_identifier}:\n  /process-model-tests/{modified_process_model_identifier}:\n  /process-models/{modified_process_group_id}:\n  /process-models/{modified_process_model_identifier}/files/{file_name}:\n  /process-models/{modified_process_model_identifier}/files:\n  /process-models/{modified_process_model_identifier}/move:\n  /process-models/{modified_process_model_identifier}/script-unit-tests/run:\n  /process-models/{modified_process_model_identifier}/script-unit-tests:\n  /process-models/{modified_process_model_identifier}:\n  /process-models:\n  /processes/callers/{bpmn_process_identifiers}:\n  /processes:\n  /secrets/{key}:\n  /secrets:\n  /send-event/{modified_process_model_identifier}/{process_instance_id}:\n  /service-tasks:\n  /status:\n  /task-complete/{modified_process_model_identifier}/{process_instance_id}/{task_guid}:\n  /task-data/{modified_process_model_identifier}/{process_instance_id}/{task_guid}:\n  /tasks/for-me:\n  /tasks/for-my-groups:\n  /tasks/for-my-open-processes:\n  /tasks/{process_instance_id}/send-user-signal-event:\n  /tasks/{process_instance_id}/{task_guid}/save-draft:\n  /tasks/{process_instance_id}/{task_guid}:\n  /tasks/{process_instance_id}:\n  /tasks:\n  /user-groups/for-current-user:\n  /users/exists/by-username:\n  /users/search:\n```\n\n----------------------------------------\n\nTITLE: Run Docker Compose Build/Up on Windows\nDESCRIPTION: Navigates to the cloned repository directory on Windows (example path provided) and starts the Docker services defined in `docker-compose.yml`. The `(build)` suffix suggests it might rebuild images if necessary.\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/docs/explanation/dev/developer_setup.md#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ncd C:\\Users\\[YOUR_USER]\\Documents\\GitHub\\spiff-arena \ndocker compose up (build)\n```\n\n----------------------------------------\n\nTITLE: Installing Development Requirements Using UV - Console\nDESCRIPTION: This command syncs and installs the project's dependencies, including development requirements, using the UV tool. Run this after installing UV and ensuring Python 3.10+ is available. No arguments are needed; it reads from the project configuration. This command prepares the environment for further development and testing.\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/CONTRIBUTING.rst#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ uv sync\n```\n\n----------------------------------------\n\nTITLE: Script Task for Delay and Increasing Silliness in Python\nDESCRIPTION: A Python script task that introduces a 2-second delay using time.sleep() and aims to increase the silliness level.\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/docs/how_to_guides/building_diagrams/display_content.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ntime.sleep(2)\n```\n\n----------------------------------------\n\nTITLE: Displaying Approval Message in BPMN Manual Task - Markdown\nDESCRIPTION: A Markdown snippet for displaying a confirmation message after a petty cash approval process completes. It uses placeholder variables to dynamically inject the approved amount and approver's name, informing the requester about the successful approval status.\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/docs/reference/bpmn/pools_and_lanes.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nYour petty cash request for {{amount}} has been approved by {{approved_by}}\n```\n\n----------------------------------------\n\nTITLE: Adding a Local Python Wheel Using Poetry - bash\nDESCRIPTION: This command adds a specific local Python wheel file to the project's dependencies using Poetry. It requires the wheel file to be available in the 'local_wheels' directory relative to the project root. The input is the path to a single '.whl' file and the output is the addition of this wheel as a dependency in the Poetry-managed environment.\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/spiffworkflow-backend/local_wheels/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npoetry add local_wheels/my.whl\n```\n\n----------------------------------------\n\nTITLE: Checking Code Linting\nDESCRIPTION: This command checks the code for linting errors, ensuring code quality and consistency by adhering to predefined linting rules.\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/spiffworkflow-frontend/README.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n### `npm run lint`\n\nCheck for lint in code.\n```\n\n----------------------------------------\n\nTITLE: Inspecting Active Celery Jobs\nDESCRIPTION: Executes a command to inspect actively processing tasks in Celery, displaying details of current jobs. It requires the Celery application specified by '-A' and proper configuration.\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/docs/how_to_guides/deployment/work_with_redis_celery_broker.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npoetry run celery -A src.spiffworkflow_backend.background_processing.celery_worker inspect active\n```\n\n----------------------------------------\n\nTITLE: Starting an Interactive Python Session - Console\nDESCRIPTION: This command launches an interactive Python shell after relevant environments and dependencies are set up. It requires Python 3.10+ and assumes dependencies are installed. No extra parameters are required. It is useful for quick experimentation and running Python code interactively.\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/CONTRIBUTING.rst#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ python\n```\n\n----------------------------------------\n\nTITLE: Representing Contribution Flow with Mermaid Graph\nDESCRIPTION: A simple Mermaid graph illustrating the basic contribution workflow for the project. It depicts the process starting from writing code ('Hammer code'), leading to submitting a Pull Request ('PR'), and culminating in a successful contribution ('Profit').\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/docs/explanation/dev/process.md#_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph LR\ncode[Hammer code] --> PR\nPR --> Profit\n```\n\n----------------------------------------\n\nTITLE: Running SpiffArena Python Linters and Tests (Bash)\nDESCRIPTION: Command to execute the Python linters and unit tests for the SpiffArena backend using the 'run_pyl' script located in the 'bin' directory.\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/README.md#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\n    ./bin/run_pyl\n```\n\n----------------------------------------\n\nTITLE: Adding User to Docker Group (Linux)\nDESCRIPTION: This code snippet shows how to add a user to the Docker group on Linux to resolve permission issues when installing SpiffArena. It first checks if the docker group exists and creates it if it doesn't, then adds the current user to the docker group. A logout and login is required for the group membership change to take effect. Requires sudo privileges.\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/docs/reference/frequently_asked_questions.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo groupadd docker  # Only if Docker group doesn't exist\nsudo usermod -aG docker $USER\n```\n\n----------------------------------------\n\nTITLE: Running the Full Test Suite - Console\nDESCRIPTION: This command executes the project's entire test suite from the root directory by invoking an executable script. Ensure all dependencies are installed and that you have access to './bin/run_pyl'. The command validates code quality by running all prescribed tests and linter checks. Successful execution is required before submitting changes.\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/CONTRIBUTING.rst#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ ./bin/run_pyl\n```\n\n----------------------------------------\n\nTITLE: Fixing Code Linting\nDESCRIPTION: This command automatically fixes linting errors in the code, helping to enforce coding standards and formatting rules. It likely uses Prettier for code formatting.\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/spiffworkflow-frontend/README.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n### `npm run lint:fix`\n\nFix lint in code.\n```\n\n----------------------------------------\n\nTITLE: Applying GNU LGPL 2.1 to Source Files (Example)\nDESCRIPTION: This snippet provides the recommended text and placeholders to include at the beginning of source files for a library licensed under the GNU LGPL v2.1. It declares the library's name, copyright information, licensing terms, warranty disclaimer, and instructions on obtaining the full license text.\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/spiffworkflow-frontend/LICENSE.rst#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n    <one line to give the library's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This library is free software; you can redistribute it and/or\n    modify it under the terms of the GNU Lesser General Public\n    License as published by the Free Software Foundation; either\n    version 2.1 of the License, or (at your option) any later version.\n\n    This library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n    Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public\n    License along with this library; if not, write to the Free Software\n    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301\n    USA\n```\n\n----------------------------------------\n\nTITLE: Starting Keycloak OpenID Provider\nDESCRIPTION: This script starts a Keycloak container which serves as an example OpenID provider. It assumes that the script is located within the `keycloak/bin/` directory of the spiffworkflow-backend project. It requires a configured Keycloak environment.\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/docs/reference/frequently_asked_questions.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./keycloak/bin/start_keycloak\n```\n\n----------------------------------------\n\nTITLE: Representing Deserialized Datetime in JSON Task Data\nDESCRIPTION: Shows how a deserialized `datetime` object appears when stored in JSON Task Data, including the value string and type name. This is data structure context, not executable code, explaining why direct dictionary access fails in Python scripts.\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/docs/how_to_guides/building_diagrams/use_user_tasks_and_forms.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n  {\n    \"current_time\": {\n      \"value\": \"2025-02-13T18:54:08.261744-06:00\",\n      \"typename\": \"datetime\"\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Sample Copyright Disclaimer for GNU LGPL (Example)\nDESCRIPTION: This snippet illustrates a sample format for a copyright disclaimer that might be required for a library being licensed under the GNU LGPL, particularly if an employer or school holds copyright interest. It shows how an entity can disclaim copyright interest in the work.\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/spiffworkflow-frontend/LICENSE.rst#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n  Yoyodyne, Inc., hereby disclaims all copyright interest in the\n  library `Frob' (a library for tweaking knobs) written by James Random\n  Hacker.\n\n  <signature of Ty Coon>, 1 April 1990\n  Ty Coon, President of Vice\n```\n\n----------------------------------------\n\nTITLE: Installing MySQL Workaround with PyMySQL in Python\nDESCRIPTION: Python code to use PyMySQL as a drop-in replacement for MySQLdb when encountering installation issues on Mac systems. This should be added to the __init__.py file in the backend project.\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/docs/how_to_guides/troubleshoot_locally.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport pymysql\npymysql.install_as_MySQLdb()\n```\n\n----------------------------------------\n\nTITLE: Building Production App\nDESCRIPTION: This command builds the React app for production, bundling React in production mode and optimizing the build for the best performance. The output is minified, and filenames include hashes. The built app is ready to be deployed.\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/spiffworkflow-frontend/README.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n### `npm run build`\n\nBuilds the app for production to the `build` folder.\\\nIt correctly bundles React in production mode and optimizes the build for the best performance.\n\nThe build is minified and the filenames include the hashes.\\\nYour app is ready to be deployed!\n\nSee the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.\n```\n\n----------------------------------------\n\nTITLE: Importing and Using SVG Icons in React Components\nDESCRIPTION: Demonstrates how to import an SVG icon file as a React component and use it within a TSX file. This pattern allows for the flexible reuse of designer-created icons throughout the application.\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/spiffworkflow-frontend/src/assets/icons/README.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport AnyNameYouLike from \"../the/icon/file.svg\"\n// In your TSX.\n<AnyNameYouLike />\n```\n\n----------------------------------------\n\nTITLE: Formatting Code\nDESCRIPTION: This command is likely used to format the code, using Prettier to maintain consistent code style. It is suggested to stick with the lint:fix command.\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/spiffworkflow-frontend/README.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\n### `npm run format`\n\nProbably just stick with lint:fix which also runs prettier.\n```\n\n----------------------------------------\n\nTITLE: Illustrating Backend Architectural Layers\nDESCRIPTION: Provides a visual representation of the dependency structure in the spiffworkflow-backend application, showing how Controllers delegate to Services, Services use Models, and Models access the Database. Useful for understanding the application's data and control flow. Requires a Mermaid renderer.\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/docs/explanation/dev/backend_api.md#_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph LR\nControllers -- delegate work to --> Services\nServices -- use --> Models\nModels -- access --> DB[(DB)]\n```\n\n----------------------------------------\n\nTITLE: Mermaid Diagram for Routes and Services\nDESCRIPTION: This Mermaid diagram visualizes the relationship between Routes and Services in the frontend application. Routes delegate work to services.  No dependencies are explicitly specified, but the diagram implies the presence of Routes and Services components within the application.\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/docs/explanation/dev/frontend.md#_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph LR\nRoutes -- delegate work to --> Services\n```\n\n----------------------------------------\n\nTITLE: Script Task for Delay and Color Dictionary in Python\nDESCRIPTION: A Python script task that introduces a 3-second delay using time.sleep() and generates a dictionary of colors.\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/docs/how_to_guides/building_diagrams/display_content.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ntime.sleep(3)\n```\n\n----------------------------------------\n\nTITLE: Configuring Crawler Access - robots.txt\nDESCRIPTION: This snippet configures the access rules for web robots using the standard robots.txt format. The 'User-agent: *' directive indicates that the following rules apply to all types of robots. The empty 'Disallow:' directive signifies that there are no restrictions on accessing any paths, effectively allowing all robots to crawl the entire website.\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/spiffworkflow-frontend/public/robots.txt#_snippet_0\n\nLANGUAGE: robots.txt\nCODE:\n```\n# https://www.robotstxt.org/robotstxt.html\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: Incorrectly Accessing Deserialized Datetime Value in Python\nDESCRIPTION: Demonstrates the incorrect way to access the value of a deserialized `datetime` object in a Python script by attempting to treat it as a dictionary. This will result in a runtime error because the object is a `datetime` type, not a dictionary.\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/docs/how_to_guides/building_diagrams/use_user_tasks_and_forms.md#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ncdt_datetime = current_time[\"value\"].strftime('%Y-%m-%dT%H:%M:%S%z')\n\n```\n\n----------------------------------------\n\nTITLE: Listing Subtree Scripts (Bash)\nDESCRIPTION: Command useful for monorepo management. It lists files within the 'bin' directory whose names contain 'subtree', likely indicating scripts used for managing Git subtrees within the SpiffArena project.\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/README.md#_snippet_5\n\nLANGUAGE: Bash\nCODE:\n```\n    ls bin | grep subtree\n```\n\n----------------------------------------\n\nTITLE: Ejecting Configuration\nDESCRIPTION: This command ejects from Create React App, allowing for full control over the build tool and configuration. It copies configuration files and dependencies into the project. This action is irreversible.\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/spiffworkflow-frontend/README.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n### `npm run eject`\n\n**Note: this is a one-way operation. Once you `eject`, you can't go back!**\n\nIf you aren't satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.\n\nInstead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you're on your own.\n\nYou don't have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn't feel obligated to use this feature. However we understand that this tool wouldn't be useful if you couldn't customize it when you are ready for it.\n```\n\n----------------------------------------\n\nTITLE: Timer Event Configuration Admonition\nDESCRIPTION: An admonition note highlighting potential delays in timer events and ongoing efforts to improve performance.\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/docs/reference/bpmn/timer_events.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```{admonition} Timer Delay\n💡 Note: Timer events, especially those set for short durations, may face delays of 20-30 seconds, varying with the number of active instances.\nDespite significant improvements, our ongoing efforts aim to further reduce these delays.\n```\n```\n\n----------------------------------------\n\nTITLE: Page Tags for Documentation Organization\nDESCRIPTION: Tags used to categorize this documentation page for reference and building diagrams purposes.\nSOURCE: https://github.com/sartography/spiff-arena/blob/main/docs/reference/bpmn/timer_events.md#_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n```{tags} reference, building_diagrams\n```\n```"
  }
]