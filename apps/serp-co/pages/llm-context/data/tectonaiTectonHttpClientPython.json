[
  {
    "owner": "tecton-ai",
    "repo": "tecton-http-client-python",
    "content": "TITLE: Basic Tecton Client Usage in Python\nDESCRIPTION: Example showing how to initialize a TectonClient connection with a Tecton workspace and retrieve features from a feature service. The example includes setting the API endpoint, workspace name, and authentication.\nSOURCE: https://github.com/tecton-ai/tecton-http-client-python/blob/main/README.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom tecton_client import TectonClient\n\nurl = \"https://explore.tecton.ai/\"\nworkspace = \"prod\"\napi_key = \"my-secret-key\"\n\nclient = TectonClient(url=url, default_workspace_name=workspace, api_key=api_key)\n\nresp = client.get_features(\n    feature_service_name=\"fraud_detection_feature_service:v2\",\n    join_key_map={\"user_id\": \"user_4407104885\"},\n    request_context_map={\"amount\": 500.00},\n)\n\nprint(resp.get_features_dict())\n```\n\n----------------------------------------\n\nTITLE: Synchronous TectonClient Usage Example\nDESCRIPTION: Demonstrates how to initialize and use the synchronous TectonClient to fetch features from Tecton's online feature store. Shows configuration setup and feature retrieval using join keys and request context.\nSOURCE: https://github.com/tecton-ai/tecton-http-client-python/blob/main/docs/quickstart.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom tecton_client import TectonClient\n\nclient = TectonClient(\n    url=\"https://explore.tecton.ai/\",\n    api_key=\"my-api-key\",\n    default_workspace_name=\"prod\",\n)\n\nresp = client.get_features(\n    feature_service_name=\"fraud_detection_feature_service:v2\",\n    join_key_map={\"user_id\": \"user_4407104885\"},\n    request_context_map={\"amount\": 500.00},\n)\n\nprint(resp.result.features)\n```\n\n----------------------------------------\n\nTITLE: AsyncTectonClient Implementation with asyncio\nDESCRIPTION: Shows how to use the asynchronous version of TectonClient with Python's async/await syntax for non-blocking operations. Includes setup and feature retrieval within an async function using asyncio.run().\nSOURCE: https://github.com/tecton-ai/tecton-http-client-python/blob/main/docs/quickstart.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nfrom tecton_client import AsyncTectonClient\n\nasync_client = AsyncTectonClient(\n    url=\"https://explore.tecton.ai/\",\n    api_key=\"my-api-key\",\n    default_workspace_name=\"prod\",\n)\n\n\nasync def fetch_data():\n    resp = client.get_features(\n        feature_service_name=\"fraud_detection_feature_service:v2\",\n        join_key_map={\"user_id\": \"user_4407104885\"},\n        request_context_map={\"amount\": 500.00},\n    )\n    print(resp.result.features)\n\n\nasyncio.run(fetch_data())\n```\n\n----------------------------------------\n\nTITLE: AsyncTectonClient Usage in Jupyter Notebook\nDESCRIPTION: Demonstrates direct usage of AsyncTectonClient in Jupyter notebooks without asyncio.run(). Shows how to make asynchronous feature requests using await syntax.\nSOURCE: https://github.com/tecton-ai/tecton-http-client-python/blob/main/docs/quickstart.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nfrom tecton_client import AsyncTectonClient\n\nasync_client = AsyncTectonClient(\n    url=\"https://explore.tecton.ai/\",\n    api_key=\"my-api-key\",\n    default_workspace_name=\"prod\",\n)\n\nprint(\n    await async_client.get_features(\n        feature_service_name=\"fraud_detection_feature_service:v2\",\n        join_key_map={\"user_id\": \"user_4407104885\"},\n        request_context_map={\"amount\": 500.00},\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Tecton Client with pip in Bash\nDESCRIPTION: Command to install the Tecton Python client library using pip package manager.\nSOURCE: https://github.com/tecton-ai/tecton-http-client-python/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install tecton-client\n```\n\n----------------------------------------\n\nTITLE: Installing Tecton Client Library via pip\nDESCRIPTION: Command to install the Tecton client library using pip package manager.\nSOURCE: https://github.com/tecton-ai/tecton-http-client-python/blob/main/docs/quickstart.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install tecton-client\n```\n\n----------------------------------------\n\nTITLE: Installing Pre-commit Hooks for Tecton HTTP Client Python\nDESCRIPTION: Commands to install pre-commit hooks for the project. This ensures code style and formatting consistency before commits.\nSOURCE: https://github.com/tecton-ai/tecton-http-client-python/blob/main/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install pre-commit\npre-commit install\n```\n\n----------------------------------------\n\nTITLE: Building Documentation for Tecton HTTP Client Python\nDESCRIPTION: Commands to install documentation requirements and build the Sphinx documentation for the project. The output can be viewed in a browser.\nSOURCE: https://github.com/tecton-ai/tecton-http-client-python/blob/main/CONTRIBUTING.md#2025-04-21_snippet_1\n\nLANGUAGE: commandline\nCODE:\n```\npip install docs/requirements.txt\nsphinx-build -M html docs/ docs/_build\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Structure\nDESCRIPTION: Core RST directives defining the documentation structure including toctree and index references\nSOURCE: https://github.com/tecton-ai/tecton-http-client-python/blob/main/docs/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 2\n   :caption: Table of Contents\n\n   quickstart\n   tecton_client\n\nIndex\n=====\n\n* :ref:`genindex`\n```"
  }
]