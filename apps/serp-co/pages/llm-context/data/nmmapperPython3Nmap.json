[
  {
    "owner": "nmmapper",
    "repo": "python3-nmap",
    "content": "TITLE: Importing and Using Python3-Nmap\nDESCRIPTION: Demonstrates how to import the Python3-Nmap library and create an instance of the PortScanner class. This is the basic setup required to start using the library's functionality.\nSOURCE: https://github.com/nmmapper/python3-nmap/blob/main/docs/howto.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport nmap3\nnmap = nmap3.Nmap()\n```\n\n----------------------------------------\n\nTITLE: Installing Python3-Nmap Library\nDESCRIPTION: Shows how to install the Python3-Nmap library using pip. This step is necessary before using the library in your Python projects.\nSOURCE: https://github.com/nmmapper/python3-nmap/blob/main/docs/howto.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install python3-nmap\n```\n\n----------------------------------------\n\nTITLE: Installing Python3-Nmap\nDESCRIPTION: Instructions for installing Python3-nmap from GitHub and setting up its requirements. Nmap must be installed separately as it is the primary dependency.\nSOURCE: https://github.com/nmmapper/python3-nmap/blob/main/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone https://github.com/wangoloj/python3-nmap.git\n\n$ pip3 install -r requirements.txt\n\n# Install nmap online\n\n$ apt-get install nmap\n\n# That's all is needed to get started\n```\n\n----------------------------------------\n\nTITLE: Basic Port Scanning with Python3-Nmap\nDESCRIPTION: Example showing how to perform a top ports scan with Python3-nmap. This is equivalent to the Nmap command 'nmap your-host.com --top-ports 10' but returns results in JSON format.\nSOURCE: https://github.com/nmmapper/python3-nmap/blob/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ nmap your-host.com --top-ports 10\n```\n\nLANGUAGE: python\nCODE:\n```\nimport nmap3\nnmap = nmap3.Nmap()\nresults = nmap.scan_top_ports(\"your-host.com\")\n# And you would get your results in json\n```\n\n----------------------------------------\n\nTITLE: Vulnerability Scanning with Python3-Nmap\nDESCRIPTION: Example showing how to use the Nmap vulners script to identify vulnerabilities (CVEs) with Python3-nmap. This example filters for CVEs with a score of 5.0 or higher.\nSOURCE: https://github.com/nmmapper/python3-nmap/blob/main/README.md#2025-04-23_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nimport nmap3\nnmap = nmap3.Nmap()\nresults = nmap.nmap_version_detection(\"host\", args=\"--script vulners --script-args mincvss+5.0\")\n```\n\n----------------------------------------\n\nTITLE: Service Version Detection with Python3-Nmap\nDESCRIPTION: Example showing how to use service version detection in Python3-nmap. This is equivalent to running 'nmap 192.168.178.1 -sV' in the command line and returns detailed version information in JSON format.\nSOURCE: https://github.com/nmmapper/python3-nmap/blob/main/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ nmap 192.168.178.1  -sV\n```\n\nLANGUAGE: python\nCODE:\n```\nimport nmap3\nnmap = nmap3.Nmap()\nversion_result = nmap.nmap_version_detection(\"your-host.com\")\n```\n\nLANGUAGE: json\nCODE:\n```\n[\n    {\n        \"cpe\": [\n            {\n                \"cpe\": \"cpe:/o:linux:linux_kernel\"\n            }\n        ],\n        \"port\": \"80\",\n        \"protocol\": \"tcp\",\n        \"service\": {\n            \"conf\": \"10\",\n            \"extrainfo\": \"Ubuntu\",\n            \"method\": \"probed\",\n            \"name\": \"http\",\n            \"ostype\": \"Linux\",\n            \"product\": \"nginx\",\n            \"version\": \"1.14.0\"\n        }\n    },\n    {\n        \"cpe\": [\n            {\n                \"cpe\": \"cpe:/o:linux:linux_kernel\"\n            }\n        ],\n        \"port\": \"443\",\n        \"protocol\": \"tcp\",\n        \"service\": {\n            \"conf\": \"10\",\n            \"extrainfo\": \"Ubuntu\",\n            \"method\": \"probed\",\n            \"name\": \"http\",\n            \"ostype\": \"Linux\",\n            \"product\": \"nginx\",\n            \"tunnel\": \"ssl\",\n            \"version\": \"1.14.0\"\n        }\n    },\n    {\n        \"cpe\": [\n            {\n                \"cpe\": \"cpe:/o:linux:linux_kernel\"\n            }\n        ],\n        \"port\": \"2000\",\n        \"protocol\": \"tcp\",\n        \"service\": {\n            \"conf\": \"10\",\n            \"extrainfo\": \"Ubuntu Linux; protocol 2.0\",\n            \"method\": \"probed\",\n            \"name\": \"ssh\",\n            \"ostype\": \"Linux\",\n            \"product\": \"OpenSSH\",\n            \"version\": \"7.6p1 Ubuntu 4ubuntu0.3\"\n        }\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Performing TCP SYN Scan with Python3-nmap\nDESCRIPTION: Shows how to perform a TCP SYN scan using the NmapScanTechniques class. This is equivalent to the 'nmap -sS' command and returns information about open ports with protocol and service details.\nSOURCE: https://github.com/nmmapper/python3-nmap/blob/main/docs/index.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport nmap3\nnmap = nmap3.NmapScanTechniques()\n\nresults = nmap.nmap_syn_scan()\n```\n\n----------------------------------------\n\nTITLE: OS Detection with Python3-Nmap\nDESCRIPTION: Example showing how to use OS detection functionality in Python3-nmap. This requires root privileges, equivalent to running 'sudo nmap -O your-host.com' in the command line.\nSOURCE: https://github.com/nmmapper/python3-nmap/blob/main/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ nmap -O your-host.com\n\nTCP/IP fingerprinting (for OS scan) requires root privileges.\nQUITTING!\n# Until you sudo\n\n$ sudo nmap -O your-host.com\n```\n\nLANGUAGE: python\nCODE:\n```\nimport nmap3\nnmap = nmap3.Nmap()\nos_results = nmap.nmap_os_detection(\"192.168.178.2\") # MOST BE ROOT\n```\n\nLANGUAGE: json\nCODE:\n```\n[\n    {\n        \"accuracy\": \"100\",\n        \"cpe\": \"cpe:/o:linux:linux_kernel:2.6\",\n        \"line\": \"45249\",\n        \"name\": \"Linux 2.6.14 - 2.6.34\",\n        \"osclass\": {\n            \"accuracy\": \"100\",\n            \"osfamily\": \"Linux\",\n            \"osgen\": \"2.6.X\",\n            \"type\": \"general purpose\",\n            \"vendor\": \"Linux\"\n        }\n    },\n    {\n        \"accuracy\": \"100\",\n        \"cpe\": \"cpe:/o:linux:linux_kernel:2.6.17\",\n        \"line\": \"45775\",\n        \"name\": \"Linux 2.6.17\",\n        \"osclass\": {\n            \"accuracy\": \"100\",\n            \"osfamily\": \"Linux\",\n            \"osgen\": \"2.6.X\",\n            \"type\": \"general purpose\",\n            \"vendor\": \"Linux\"\n        }\n    },\n    {\n        \"accuracy\": \"100\",\n        \"cpe\": \"cpe:/o:linux:linux_kernel:2.6.17\",\n        \"line\": \"45811\",\n        \"name\": \"Linux 2.6.17 (Mandriva)\",\n        \"osclass\": {\n            \"accuracy\": \"100\",\n            \"osfamily\": \"Linux\",\n            \"osgen\": \"2.6.X\",\n            \"type\": \"general purpose\",\n            \"vendor\": \"Linux\"\n        }\n    },\n    {\n        \"accuracy\": \"100\",\n        \"cpe\": \"cpe:/o:linux:linux_kernel:3.13\",\n        \"line\": \"60884\",\n        \"name\": \"Linux 3.13\",\n        \"osclass\": {\n            \"accuracy\": \"100\",\n            \"osfamily\": \"Linux\",\n            \"osgen\": \"3.X\",\n            \"type\": \"general purpose\",\n            \"vendor\": \"Linux\"\n        }\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Custom Arguments with Python3-Nmap\nDESCRIPTION: Example showing how to use custom Nmap command line arguments with Python3-nmap. This example performs a top ports scan with version detection by passing the -sV argument.\nSOURCE: https://github.com/nmmapper/python3-nmap/blob/main/README.md#2025-04-23_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nimport nmap3\nnmap = nmap3.Nmap()\nresults = nmap.scan_top_ports(\"host\", args=\"-sV\")\n```\n\n----------------------------------------\n\nTITLE: Using Custom Nmap Arguments with Python3-nmap\nDESCRIPTION: Demonstrates how to extend scanning capabilities by passing custom arguments to Nmap methods. This example shows scanning top ports with version detection by adding the -sV flag.\nSOURCE: https://github.com/nmmapper/python3-nmap/blob/main/docs/index.rst#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport nmap3\nnmap = nmap3.Namp()\nresults = nmap3.scan_top_ports(\"host\", args=\"-sV\")\n```\n\n----------------------------------------\n\nTITLE: Using Version Detection with Python3-nmap\nDESCRIPTION: Demonstrates how to use the nmap_version_detection method to detect service versions on a target host. This is equivalent to running 'nmap -sV' on the command line, and returns detailed information about services running on open ports.\nSOURCE: https://github.com/nmmapper/python3-nmap/blob/main/docs/index.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport nmap3\nnmap = nmap3.Nmap()\n\nresult = nmap.nmap_version_detection(\"nmmapper.com\")\n\n# This is equivalent to nmap's\n# nmap  nmmapper.com  -sV\n# Except we add 'oX' to be /usr/bin/nmap  -oX  -  nmmapper.com  -sV\n# \n# result Output \n```\n\n----------------------------------------\n\nTITLE: UDP Scan with Python3-Nmap\nDESCRIPTION: Example showing how to perform a UDP scan using the NmapScanTechniques class in Python3-nmap.\nSOURCE: https://github.com/nmmapper/python3-nmap/blob/main/README.md#2025-04-23_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nimport nmap3\nnmap = nmap3.NmapScanTechniques()\nresult = nmap.nmap_udp_scan(\"192.168.178.1\")\n```\n\n----------------------------------------\n\nTITLE: TCP Scan with Python3-Nmap\nDESCRIPTION: Example showing how to perform a TCP scan using the NmapScanTechniques class in Python3-nmap.\nSOURCE: https://github.com/nmmapper/python3-nmap/blob/main/README.md#2025-04-23_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nimport nmap3\nnmap = nmap3.NmapScanTechniques()\nresult = nmap.nmap_tcp_scan(\"192.168.178.1\")\n```\n\n----------------------------------------\n\nTITLE: SYN Scan with Python3-Nmap\nDESCRIPTION: Example showing how to perform a SYN scan using the NmapScanTechniques class in Python3-nmap.\nSOURCE: https://github.com/nmmapper/python3-nmap/blob/main/README.md#2025-04-23_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nimport nmap3\nnmap = nmap3.NmapScanTechniques()\nresult = nmap.nmap_syn_scan(\"192.168.178.1\")\n```\n\n----------------------------------------\n\nTITLE: Executing TCP Connect Scan with Python3-nmap\nDESCRIPTION: Demonstrates how to perform a TCP connect scan using the NmapScanTechniques class. This is equivalent to 'nmap -sT' and establishes a full TCP connection with each target port.\nSOURCE: https://github.com/nmmapper/python3-nmap/blob/main/docs/index.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport nmap3\nnmap = nmap3.NmapScanTechniques()\nresults = nmap.nmap_tcp_scan()\n```\n\n----------------------------------------\n\nTITLE: DNS Brute Force Scanning with Python3-Nmap\nDESCRIPTION: Example of using the DNS brute script through Python3-nmap to discover subdomains. This is equivalent to the Nmap command 'nmap your-host.com --script dns-brute.nse' but returns the results in a structured JSON format.\nSOURCE: https://github.com/nmmapper/python3-nmap/blob/main/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ nmap your-host.com  --script dns-brute.nse\n```\n\nLANGUAGE: python\nCODE:\n```\nimport nmap3\nnmap = nmap3.Nmap()\nresults = nmap.nmap_dns_brute_script(\"your-host.com\")\n\n# And you would get your results in json\n[\n    {\n        \"address\": \"mail.your-host.com\",\n        \"hostname\": \"68.65.122.10\"\n    },\n    {\n        \"address\": \"www.your-host.com\",\n        \"hostname\": \"5.189.129.43\"\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Port Scanning Only with NmapHostDiscovery\nDESCRIPTION: Demonstrates how to perform a port scan without host discovery using the NmapHostDiscovery class. This is useful when you already know the host is online and want to focus only on port scanning.\nSOURCE: https://github.com/nmmapper/python3-nmap/blob/main/docs/index.rst#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport nmap3\nnmap = nmapp.NmapHostDiscovery()\nresults = nmap.nmap_portscan_only(\"your-host\")\n```\n\n----------------------------------------\n\nTITLE: ARP Discovery with Python3-Nmap\nDESCRIPTION: Example showing how to perform ARP discovery on a local network using the NmapHostDiscovery class in Python3-nmap. This is equivalent to using the -PR option in Nmap.\nSOURCE: https://github.com/nmmapper/python3-nmap/blob/main/README.md#2025-04-23_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nimport nmap3\nnmap = nmap3.NmapHostDiscovery()\nresults = nmap.nmap_arp_discovery(\"your-host\")\n```\n\n----------------------------------------\n\nTITLE: ARP Discovery with NmapHostDiscovery\nDESCRIPTION: Demonstrates how to use ARP requests for host discovery on a local network. This method is faster and more reliable than ping scanning on local networks.\nSOURCE: https://github.com/nmmapper/python3-nmap/blob/main/docs/index.rst#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport nmap3\nnmap = nmapp.NmapHostDiscovery()\nresults = nmap.nmap_arp_discovery(\"your-host\")\n```\n\n----------------------------------------\n\nTITLE: Ping Scan with Python3-Nmap\nDESCRIPTION: Example showing how to perform a ping scan using the NmapScanTechniques class in Python3-nmap.\nSOURCE: https://github.com/nmmapper/python3-nmap/blob/main/README.md#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nimport nmap3\nnmap = nmap3.NmapScanTechniques()\nresult = nmap.nmap_ping_scan(\"192.168.178.1\")\n```\n\n----------------------------------------\n\nTITLE: Executing Ping Scan with Python3-nmap\nDESCRIPTION: Demonstrates how to perform a ping scan to determine which hosts are online. This is equivalent to 'nmap -sP' and is useful for host discovery on a network.\nSOURCE: https://github.com/nmmapper/python3-nmap/blob/main/docs/index.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport nmap3\nnmap = nmap3.NmapScanTechniques()\nresults = nmap.nmap_ping_scan()\n```\n\n----------------------------------------\n\nTITLE: No Port Scan with Python3-Nmap\nDESCRIPTION: Example showing how to perform only host discovery (no port scanning) using the NmapHostDiscovery class in Python3-nmap. This is equivalent to using the -sn option in Nmap.\nSOURCE: https://github.com/nmmapper/python3-nmap/blob/main/README.md#2025-04-23_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nimport nmap3\nnmap = nmap3.NmapHostDiscovery()\nresults = nmap.nmap_no_portscan(\"your-host\")\n```\n\n----------------------------------------\n\nTITLE: No Port Scanning with NmapHostDiscovery\nDESCRIPTION: Shows how to perform host discovery without port scanning. This is useful when you want to identify which hosts are online without checking for open ports.\nSOURCE: https://github.com/nmmapper/python3-nmap/blob/main/docs/index.rst#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport nmap3\nnmap = nmapp.NmapHostDiscovery()\nresults = nmap.nmap_no_portscan(\"your-host\")\n```\n\n----------------------------------------\n\nTITLE: Port Scan Only with Python3-Nmap\nDESCRIPTION: Example showing how to perform only a port scan (no host discovery) using the NmapHostDiscovery class in Python3-nmap. This is equivalent to using the -Pn option in Nmap.\nSOURCE: https://github.com/nmmapper/python3-nmap/blob/main/README.md#2025-04-23_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nimport nmap3\nnmap = nmap3.NmapHostDiscovery()\nresults = nmap.nmap_portscan_only(\"your-host\")\n```\n\n----------------------------------------\n\nTITLE: Idle Scan with Python3-Nmap\nDESCRIPTION: Example showing how to perform an idle scan using the NmapScanTechniques class in Python3-nmap.\nSOURCE: https://github.com/nmmapper/python3-nmap/blob/main/README.md#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nimport nmap3\nnmap = nmap3.NmapScanTechniques()\nresult = nmap.nmap_idle_scan(\"192.168.178.1\")\n```\n\n----------------------------------------\n\nTITLE: Performing Idle Scan with Python3-nmap\nDESCRIPTION: Shows how to execute an idle scan, which is a stealth scanning technique that uses a zombie host to perform the scan. This is equivalent to 'nmap -sI' and helps hide the true source of the scan.\nSOURCE: https://github.com/nmmapper/python3-nmap/blob/main/docs/index.rst#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport nmap3\nnmap = nmap3.NmapScanTechniques()\nresults = nmap.nmap_idle_scan()\n```\n\n----------------------------------------\n\nTITLE: FIN Scan with Python3-Nmap\nDESCRIPTION: Example showing how to perform a FIN scan using the NmapScanTechniques class in Python3-nmap.\nSOURCE: https://github.com/nmmapper/python3-nmap/blob/main/README.md#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nimport nmap3\nnmap = nmap3.NmapScanTechniques()\nresult = nmap.nmap_fin_scan(\"192.168.178.1\")\n```\n\n----------------------------------------\n\nTITLE: Running FIN Scan with Python3-nmap\nDESCRIPTION: Shows how to perform a FIN scan which sends a packet with the FIN flag set. This technique is often used to bypass stateless firewalls and is equivalent to 'nmap -sF'.\nSOURCE: https://github.com/nmmapper/python3-nmap/blob/main/docs/index.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport nmap3\nnmap = nmap3.NmapScanTechniques()\nresults = nmap.nmap_fin_scan()\n```\n\n----------------------------------------\n\nTITLE: Version Detection with Python3-Nmap\nDESCRIPTION: Example showing how to perform version detection using Python3-nmap. This requires root privileges.\nSOURCE: https://github.com/nmmapper/python3-nmap/blob/main/README.md#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport nmap3\nnmap = nmap3.Nmap()\nresults = nmap.nmap_version_detection(\"your-host\") # Must be root\n```\n\n----------------------------------------\n\nTITLE: Subnet Scan with Python3-Nmap\nDESCRIPTION: Example showing how to perform a subnet scan using Python3-nmap. This requires root privileges.\nSOURCE: https://github.com/nmmapper/python3-nmap/blob/main/README.md#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport nmap3\nnmap = nmap3.Nmap()\nresults = nmap.nmap_subnet_scan(\"your-host\") #Must be root\n```\n\n----------------------------------------\n\nTITLE: OS Detection with Python3-Nmap\nDESCRIPTION: Example showing how to perform OS detection using Python3-nmap.\nSOURCE: https://github.com/nmmapper/python3-nmap/blob/main/README.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport nmap3\nnmap = nmap3.Nmap()\nresults = nmap.nmap_os_detection(\"your-host\");\n```\n\n----------------------------------------\n\nTITLE: List Scan with Python3-Nmap\nDESCRIPTION: Example showing how to perform a list scan using Python3-nmap.\nSOURCE: https://github.com/nmmapper/python3-nmap/blob/main/README.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport nmap3\nnmap = nmap3.Nmap()\nresults = nmap.nmap_list_scan(\"your-host\")\n```\n\n----------------------------------------\n\nTITLE: DNS Brute Force Script with Python3-Nmap\nDESCRIPTION: Example showing how to use the DNS brute force script to discover subdomains using Python3-nmap.\nSOURCE: https://github.com/nmmapper/python3-nmap/blob/main/README.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport nmap3\nnmap = nmap3.Nmap()\nresults = nmap.nmap_dns_brute_script(\"domain\")\n```\n\n----------------------------------------\n\nTITLE: Top Port Scanning with Python3-Nmap\nDESCRIPTION: Example showing how to scan top ports of a host using Python3-nmap.\nSOURCE: https://github.com/nmmapper/python3-nmap/blob/main/README.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport nmap3\nnmap = nmap3.Nmap()\nresults = nmap.scan_top_ports(\"your-host\")\n```\n\n----------------------------------------\n\nTITLE: Getting Nmap Version with Python3-Nmap\nDESCRIPTION: Example showing how to get the Nmap version details using Python3-nmap.\nSOURCE: https://github.com/nmmapper/python3-nmap/blob/main/README.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport nmap3\nnmap = nmap3.Nmap()\nresults = nmap.nmap_version()\n```\n\n----------------------------------------\n\nTITLE: Disabling DNS Resolution with NmapHostDiscovery\nDESCRIPTION: Shows how to disable DNS resolution during scanning. This can speed up the scanning process by avoiding DNS lookups for each IP address.\nSOURCE: https://github.com/nmmapper/python3-nmap/blob/main/docs/index.rst#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport nmap3\nnmap = nmapp.NmapHostDiscovery()\nresults = nmap.nmap_disable_dns(\"your-host\")\n```\n\n----------------------------------------\n\nTITLE: Disable DNS Resolution with Python3-Nmap\nDESCRIPTION: Example showing how to disable DNS resolution during a scan using the NmapHostDiscovery class in Python3-nmap. This is equivalent to using the -n option in Nmap.\nSOURCE: https://github.com/nmmapper/python3-nmap/blob/main/README.md#2025-04-23_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nimport nmap3\nnmap = nmap3.NmapHostDiscovery()\nresults = nmap.nmap_disable_dns(\"your-host\")\n```\n\n----------------------------------------\n\nTITLE: Nmap Port Scan Output Example\nDESCRIPTION: Sample output of a Nmap port scan showing different port states including open, closed, and filtered ports.\nSOURCE: https://github.com/nmmapper/python3-nmap/blob/main/docs/nmap.rst#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nNot shown: 995 filtered ports\nPORT     STATE  SERVICE\n80/tcp   open   http\n113/tcp  closed ident\n443/tcp  open   https\n8080/tcp open   http-proxy\n8443/tcp open   https-alt\n\nNmap done: 1 IP address (1 host up) scanned in 18.57 seconds\n# Notice the STATE\n```\n\n----------------------------------------\n\nTITLE: Nmap Host Discovery Commands\nDESCRIPTION: Collection of Nmap commands for host discovery including list scan, ping scan, and various probe techniques.\nSOURCE: https://github.com/nmmapper/python3-nmap/blob/main/docs/nmap.rst#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ nmap  -sL # (List Scan) \n\n$ nmap  -sn # (No port scan) \n\n$ nmap  -Pn # (No ping) \n\n$ nmap  -PS <port list> # (TCP SYN Ping) \n\n$ nmap -PA <port list> # (TCP ACK Ping) \n\n$ nmap  -PU <port list> # (UDP Ping) \n\n$ nmap  -PY <port list> # (SCTP INIT Ping) \n\n$ nmap  -PE; -PP; -PM # (ICMP Ping Types) \n\n$ nmap  -PO <protocol list> # (IP Protocol Ping) \n\n$ nmap  --disable-arp-ping # (No ARP or ND Ping) \n\n$ nmap  --traceroute # (Trace path to host) \n\n$ nmap  -n # (No DNS resolution) \n\n$ nmap  -R # (DNS resolution for all targets) \n\n$ nmap  --resolve-all # (Scan each resolved address) \n\n$ nmap  --system-dns # (Use system DNS resolver) \n\n$ nmap  --dns-servers <server1>[,<server2>[,...]] # (Servers to use for reverse DNS queries)\n```\n\n----------------------------------------\n\nTITLE: Basic Nmap Scan with OS Detection\nDESCRIPTION: Example of running Nmap with aggressive detection (-A) and faster timing (-T4) against a target host.\nSOURCE: https://github.com/nmmapper/python3-nmap/blob/main/docs/nmap.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ nmap -A -T4 scanme.nmap.org\n```\n\n----------------------------------------\n\nTITLE: Python Package Dependencies\nDESCRIPTION: Lists the required Python packages needed to run and build the python3-nmap project. Includes requests for HTTP functionality and Sphinx with its theme for documentation generation.\nSOURCE: https://github.com/nmmapper/python3-nmap/blob/main/requirements-dev.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nrequests\nsphinx\nsphinx_rtd_theme\n```\n\n----------------------------------------\n\nTITLE: Performing a Version Scan with Python3-Nmap\nDESCRIPTION: Shows how to perform a version scan on a specific IP address using the Python3-Nmap library. This example demonstrates the basic usage of the library for network scanning.\nSOURCE: https://github.com/nmmapper/python3-nmap/blob/main/docs/howto.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nresults = nmap.nmap_version_detection(\"192.168.178.1\")\nprint(results)\n```"
  }
]