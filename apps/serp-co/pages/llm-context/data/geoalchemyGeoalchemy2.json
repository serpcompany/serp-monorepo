[
  {
    "owner": "geoalchemy",
    "repo": "geoalchemy2",
    "content": "TITLE: Connecting to a PostGIS Database with SQLAlchemy in Python\nDESCRIPTION: Establishes a connection to a PostGIS database using SQLAlchemy's create_engine function with GeoAlchemy2 plugin. The echo parameter enables SQL logging and the plugins parameter adds event listeners for GeoAlchemy2.\nSOURCE: https://github.com/geoalchemy/geoalchemy2/blob/master/doc/orm_tutorial.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> from sqlalchemy import create_engine\n>>> engine = create_engine(\n...     'postgresql://gis:gis@localhost/gis',\n...     echo=True,\n...     plugins=[\"geoalchemy2\"]\n... )\n```\n\n----------------------------------------\n\nTITLE: Declaring a Spatial Mapping Class with GeoAlchemy2 in Python\nDESCRIPTION: Defines a SQLAlchemy declarative class for a spatial table named 'lake'. The class includes an integer ID primary key, a string name column, and a geometry column of type POLYGON using GeoAlchemy2's Geometry type.\nSOURCE: https://github.com/geoalchemy/geoalchemy2/blob/master/doc/orm_tutorial.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> from sqlalchemy.ext.declarative import declarative_base\n>>> from sqlalchemy import Column, Integer, String\n>>> from geoalchemy2 import Geometry\n>>>\n>>> Base = declarative_base()\n>>>\n>>> class Lake(Base):\n...     __tablename__ = 'lake'\n...     id = Column(Integer, primary_key=True)\n...     name = Column(String)\n...     geom = Column(Geometry('POLYGON'))\n```\n\n----------------------------------------\n\nTITLE: Connecting to PostGIS Database with SQLAlchemy in Python\nDESCRIPTION: Creates a SQLAlchemy engine to connect to a PostGIS database. Enables SQL echo and loads the GeoAlchemy2 plugin.\nSOURCE: https://github.com/geoalchemy/geoalchemy2/blob/master/doc/core_tutorial.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import create_engine\nengine = create_engine(\n    'postgresql://gis:gis@localhost/gis',\n    echo=True,\n    plugins=[\"geoalchemy2\"],\n)\n```\n\n----------------------------------------\n\nTITLE: Making Spatial Queries with GeoAlchemy2 in Python\nDESCRIPTION: Demonstrates spatial filtering queries using PostGIS functions like ST_Contains. Shows two equivalent ways to construct spatial queries: using SQLAlchemy's func approach and using GeoAlchemy2's column-bound function approach.\nSOURCE: https://github.com/geoalchemy/geoalchemy2/blob/master/doc/orm_tutorial.rst#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n>>> from sqlalchemy import func\n>>> query = session.query(Lake).filter(\n...             func.ST_Contains(Lake.geom, 'POINT(4 1)'))\n...\n>>> for lake in query:\n...     print lake.name\n...\nOrta\n```\n\n----------------------------------------\n\nTITLE: Setting Up Spatial Relationships Between Model Classes in GeoAlchemy2\nDESCRIPTION: Extends the Lake class to include a relationship to the Treasure class. This demonstrates how to set up ORM relationships between spatial objects to model real-world relationships like 'contains'.\nSOURCE: https://github.com/geoalchemy/geoalchemy2/blob/master/doc/orm_tutorial.rst#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n>>> from sqlalchemy.orm import relationship, backref\n>>> class Lake(Base):\n...     __tablename__ = 'lake'\n...     id = Column(Integer, primary_key=True)\n...     name = Column(String)\n...     geom = Column(Geometry('POLYGON'))\n...     treasures = relationship(\n...         'Treasure',\n```\n\n----------------------------------------\n\nTITLE: Configuring Spatial Relationship in SQLAlchemy ORM\nDESCRIPTION: Demonstrates setting up a spatial relationship between Lake and Treasure models using ST_Contains. Uses as_comparison for SQL function compatibility with SQLAlchemy 1.3+.\nSOURCE: https://github.com/geoalchemy/geoalchemy2/blob/master/doc/orm_tutorial.rst#2025-04-23_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nprimaryjoin='func.ST_Contains(foreign(Lake.geom), Treasure.geom).as_comparison(1, 2)',\nbackref=backref('lake', uselist=False),\nviewonly=True,\nuselist=True,\n```\n\n----------------------------------------\n\nTITLE: Defining a Point Geometry Model Class in GeoAlchemy2\nDESCRIPTION: Creates a Treasure class with a POINT geometry type to demonstrate spatial relationships between different geometry types. This class will be used to establish spatial relationships with the Lake class.\nSOURCE: https://github.com/geoalchemy/geoalchemy2/blob/master/doc/orm_tutorial.rst#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n>>> class Treasure(Base):\n...      __tablename__ = 'treasure'\n...      id = Column(Integer, primary_key=True)\n...      geom = Column(Geometry('POINT'))\n```\n\n----------------------------------------\n\nTITLE: Using Spatial Intersection Functions in GeoAlchemy2\nDESCRIPTION: Demonstrates the ST_Intersects spatial function to find lakes that intersect with a linestring geometry. Shows how to use this function in a filter condition for selecting specific records.\nSOURCE: https://github.com/geoalchemy/geoalchemy2/blob/master/doc/orm_tutorial.rst#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n>>> query = session.query(Lake).filter(\n...             Lake.geom.ST_Intersects('LINESTRING(2 1,4 1)'))\n...\n>>> for lake in query:\n...     print lake.name\n...\nGarde\nOrta\n```\n\n----------------------------------------\n\nTITLE: Adding and Committing Spatial Objects to the Database in Python\nDESCRIPTION: Demonstrates adding a Lake object to the SQLAlchemy session and committing it to persist changes to the database. Shows both single object addition and adding multiple objects at once with add_all().\nSOURCE: https://github.com/geoalchemy/geoalchemy2/blob/master/doc/orm_tutorial.rst#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> lake = Lake(name=\"Majeur\", geom=\"POLYGON((0 0,1 0,1 1,0 1,0 0))\")\n>>> session.add(lake)\n>>> session.commit()\n```\n\n----------------------------------------\n\nTITLE: Using Spatial Functions in WHERE Clauses\nDESCRIPTION: Example showing how to use spatial functions in WHERE clauses to filter query results. This query selects lake names where the area of the buffered geometry is greater than 33 units.\nSOURCE: https://github.com/geoalchemy/geoalchemy2/blob/master/doc/core_tutorial.rst#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n>>> s = select([lake_table.c.name],\n               lake_table.c.geom.ST_Buffer(2).ST_Area() > 33)\n>>> str(s)\nSELECT lake.name FROM lake WHERE ST_Area(ST_Buffer(lake.geom, :param_1)) > :ST_Area_1\n>>> result = conn.execute(s)\n>>> for row in result:\n...     print row['name']\nOrta\n```\n\n----------------------------------------\n\nTITLE: Using Spatial Operators for Bounding Box Tests in GeoAlchemy2\nDESCRIPTION: Demonstrates using the 'intersects' function, which corresponds to PostgreSQL's '&&' operator for testing whether bounding boxes of geometries intersect. This provides a faster preliminary spatial filter.\nSOURCE: https://github.com/geoalchemy/geoalchemy2/blob/master/doc/orm_tutorial.rst#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n>>> query = session.query\n>>> query = session.query(Lake).filter(\n...             Lake.geom.intersects('LINESTRING(2 1,4 1)'))\n...\n>>> for lake in query:\n...     print lake.name\n...\nGarde\nOrta\n```\n\n----------------------------------------\n\nTITLE: Spatial Queries using GeoAlchemy2 Functions in SQLAlchemy\nDESCRIPTION: Demonstrates spatial queries using GeoAlchemy2 functions like ST_Contains and ST_Intersects. Shows both function and method chaining syntax.\nSOURCE: https://github.com/geoalchemy/geoalchemy2/blob/master/doc/core_tutorial.rst#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import func\n# Using ST_Contains\ns = select([lake_table],\n           func.ST_Contains(lake_table.c.geom, 'POINT(4 1)'))\n\n# Alternative syntax\ns = select([lake_table], lake_table.c.geom.ST_Contains('POINT(4 1)'))\n\n# Using ST_Intersects\ns = select([lake_table],\n           lake_table.c.geom.ST_Intersects('LINESTRING(2 1,4 1)'))\n\n# Using bounding box intersection\ns = select([lake_table],\n           lake_table.c.geom.intersects('LINESTRING(2 1,4 1)'))\n```\n\n----------------------------------------\n\nTITLE: Using Column-Bound Spatial Functions in GeoAlchemy2\nDESCRIPTION: Shows the more concise syntax for spatial queries where spatial functions are bound to geometry columns. This approach makes spatial queries more readable and pythonic.\nSOURCE: https://github.com/geoalchemy/geoalchemy2/blob/master/doc/orm_tutorial.rst#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n>>> query = session.query(Lake).filter(Lake.geom.ST_Contains('POINT(4 1)'))\n>>> for lake in query:\n...     print lake.name\n...\nOrta\n```\n\n----------------------------------------\n\nTITLE: Processing Geometry with ST_Buffer and ST_Area in SQL Queries\nDESCRIPTION: Example showing how to use spatial functions to buffer lake geometries and calculate their areas in a SQL SELECT statement. The query retrieves lake names and the area of each lake after applying a 2-unit buffer.\nSOURCE: https://github.com/geoalchemy/geoalchemy2/blob/master/doc/core_tutorial.rst#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n>>> s = select([lake_table.c.name,\n                    func.ST_Area(\n                        lake_table.c.geom.ST_Buffer(2)).label('bufferarea')])\n>>> str(s)\nSELECT lake.name, ST_Area(ST_Buffer(lake.geom, %(param_1)s)) AS bufferarea FROM lake\n>>> result = conn.execute(s)\n>>> for row in result:\n...     print '%s: %f' % (row['name'], row['bufferarea'])\nMajeur: 21.485781\nGarde: 32.485781\nOrta: 45.485781\n```\n\n----------------------------------------\n\nTITLE: Querying Spatial Objects with SQLAlchemy in Python\nDESCRIPTION: Shows basic SQLAlchemy querying operations for retrieving Lake objects from the database. Demonstrates ordering results and iterating through query results.\nSOURCE: https://github.com/geoalchemy/geoalchemy2/blob/master/doc/orm_tutorial.rst#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n>>> query = session.query(Lake).order_by(Lake.name)\n>>> for lake in query:\n...     print lake.name\n...\nGarde\nMajeur\nOrta\n```\n\n----------------------------------------\n\nTITLE: Creating a SQLAlchemy Session for Database Interaction\nDESCRIPTION: Sets up a session maker bound to the database engine, then instantiates a session object. The session is used for making database queries and persisting changes to the database.\nSOURCE: https://github.com/geoalchemy/geoalchemy2/blob/master/doc/orm_tutorial.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> from sqlalchemy.orm import sessionmaker\n>>> Session = sessionmaker(bind=engine)\n>>> session = Session()\n```\n\n----------------------------------------\n\nTITLE: Declaring a Spatial Model with GeoAlchemy2\nDESCRIPTION: Defines a SQLAlchemy ORM model for a 'Lake' table that includes a geometry column of type POLYGON. This demonstrates how to create a mapping between a Python class and a spatial database table in SpatiaLite.\nSOURCE: https://github.com/geoalchemy/geoalchemy2/blob/master/doc/spatialite_dialect.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy.orm import declarative_base\nfrom sqlalchemy import Column, Integer, String\nfrom geoalchemy2 import Geometry\n\nBase = declarative_base()\n\nclass Lake(Base):\n    __tablename__ = \"lake\"\n    id = Column(Integer, primary_key=True)\n    name = Column(String)\n    geom = Column(Geometry(geometry_type=\"POLYGON\"))\n```\n\n----------------------------------------\n\nTITLE: Defining a Spatial Table with GeoAlchemy 2 in Python\nDESCRIPTION: Example of defining a table with a spatial column using GeoAlchemy 2. This snippet demonstrates how to create a 'Lake' table with a geometry column of type LINESTRING and spatial indexing enabled.\nSOURCE: https://github.com/geoalchemy/geoalchemy2/blob/master/doc/alembic.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass Lake(Base):\n    __tablename__ = 'lake'\n    id = Column(Integer, primary_key=True)\n    geom = Column(\n        Geometry(\n            geometry_type='LINESTRING',\n            srid=4326,\n            spatial_index=True,\n        )\n    )\n```\n\n----------------------------------------\n\nTITLE: Querying Data with Geometry Columns using SQLAlchemy\nDESCRIPTION: Creates a SELECT statement to query the 'lake' table, including the geometry column. Demonstrates how geometry columns are handled in result sets.\nSOURCE: https://github.com/geoalchemy/geoalchemy2/blob/master/doc/core_tutorial.rst#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy.sql import select\ns = select([lake_table])\nresult = conn.execute(s)\nfor row in result:\n    print 'name:', row['name'], '; geom:', row['geom'].desc\n```\n\n----------------------------------------\n\nTITLE: Defining a Table with Geometry Column in SQLAlchemy\nDESCRIPTION: Creates a SQLAlchemy Table object representing a 'lake' table with id, name, and geometry columns. Uses GeoAlchemy2's Geometry type for the spatial column.\nSOURCE: https://github.com/geoalchemy/geoalchemy2/blob/master/doc/core_tutorial.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import Table, Column, Integer, String, MetaData\nfrom geoalchemy2 import Geometry\n\nmetadata = MetaData()\nlake_table = Table('lake', metadata,\n    Column('id', Integer, primary_key=True),\n    Column('name', String),\n    Column('geom', Geometry('POLYGON'))\n)\n```\n\n----------------------------------------\n\nTITLE: Calculating Buffer Areas with PostGIS Functions\nDESCRIPTION: Shows how to query lake geometries with PostGIS ST_Buffer and ST_Area functions using both verbose and concise syntax.\nSOURCE: https://github.com/geoalchemy/geoalchemy2/blob/master/doc/orm_tutorial.rst#2025-04-23_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import func\nquery = session.query(Lake.name,\n                   func.ST_Area(func.ST_Buffer(Lake.geom, 2)) \\\n                       .label('bufferarea'))\nfor row in query:\n    print '%s: %f' % (row.name, row.bufferarea)\n```\n\n----------------------------------------\n\nTITLE: Testing Spatial Relationships on Individual Objects in GeoAlchemy2\nDESCRIPTION: Shows how to test spatial relationships on an individual geometry object rather than in a query filter. Uses session.scalar to execute a spatial function and return its boolean result.\nSOURCE: https://github.com/geoalchemy/geoalchemy2/blob/master/doc/orm_tutorial.rst#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n>>> lake = session.query(Lake).filter_by(name='Garde').one()\n>>> print session.scalar(lake.geom.ST_Intersects('LINESTRING(2 1,4 1)'))\nTrue\n```\n\n----------------------------------------\n\nTITLE: Configuring Alembic with GeoAlchemy 2 Helpers in Python\nDESCRIPTION: Example of configuring Alembic's env.py file to use GeoAlchemy 2 helpers. This setup includes functions for handling spatial objects, operations, and automatic import generation in migration scripts.\nSOURCE: https://github.com/geoalchemy/geoalchemy2/blob/master/doc/alembic.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# ...\nfrom geoalchemy2 import alembic_helpers\n# ...\n\ndef run_migrations_offline():\n    # ...\n    context.configure(\n        # ...\n        include_object=alembic_helpers.include_object,\n        process_revision_directives=alembic_helpers.writer,\n        render_item=alembic_helpers.render_item,\n    )\n    # ...\n\n\ndef run_migrations_online():\n    # ...\n    context.configure(\n        # ...\n        include_object=alembic_helpers.include_object,\n        process_revision_directives=alembic_helpers.writer,\n        render_item=alembic_helpers.render_item,\n    )\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Filtering with Spatial Functions\nDESCRIPTION: Example of using spatial functions in WHERE clauses and with WKBElement instances.\nSOURCE: https://github.com/geoalchemy/geoalchemy2/blob/master/doc/orm_tutorial.rst#2025-04-23_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nlake = session.query(Lake).filter(\n            Lake.geom.ST_Buffer(2).ST_Area() > 33).one()\nprint lake.name\n```\n\n----------------------------------------\n\nTITLE: Calling Spatial Functions in GeoAlchemy\nDESCRIPTION: Demonstrates the change in calling spatial functions from using geoalchemy.functions to SQLAlchemy's func object with ST_ prefix.\nSOURCE: https://github.com/geoalchemy/geoalchemy2/blob/master/doc/migrate.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfunctions.buffer(functions.centroid(box), 10, 2)\n```\n\nLANGUAGE: python\nCODE:\n```\nfunc.ST_Buffer(func.ST_Centroid(box), 10, 2)\n```\n\n----------------------------------------\n\nTITLE: Using Raster Functions with Type Enforcement\nDESCRIPTION: Demonstrates how to use spatial functions with raster data types by explicitly specifying the return type.\nSOURCE: https://github.com/geoalchemy/geoalchemy2/blob/master/doc/orm_tutorial.rst#2025-04-23_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nquery = session.query(Lake.raster.ST_Transform(2154, type_=Raster))\n```\n\n----------------------------------------\n\nTITLE: Using Spatial Functions with Different Objects\nDESCRIPTION: Shows how to apply spatial functions to columns, WKTElement, and other objects using the ST_ prefix.\nSOURCE: https://github.com/geoalchemy/geoalchemy2/blob/master/doc/migrate.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nLake.geom.ST_Buffer(10, 2)\nlake_table.c.geom.ST_Buffer(10, 2)\nlake.geom.ST_Buffer(10, 2)\n```\n\n----------------------------------------\n\nTITLE: Applying Spatial Functions to WKBElement Objects\nDESCRIPTION: Example demonstrating how to apply spatial functions directly to WKBElement objects. This retrieves a specific lake and then calculates the area of its buffered geometry.\nSOURCE: https://github.com/geoalchemy/geoalchemy2/blob/master/doc/core_tutorial.rst#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n>>> s = select([lake_table], lake_table.c.name == 'Majeur')\n>>> result = conn.execute(s)\n>>> lake = result.fetchone()\n>>> bufferarea = conn.scalar(lake[lake_table.c.geom].ST_Buffer(2).ST_Area())\n>>> print '%s: %f' % (lake['name'], bufferarea)\nMajeur: 21.485781\n```\n\n----------------------------------------\n\nTITLE: Inserting Data with Geometry into SQLAlchemy Table\nDESCRIPTION: Creates an INSERT statement for the 'lake' table, including a geometry value specified as WKT. Demonstrates multiple ways to execute the insert.\nSOURCE: https://github.com/geoalchemy/geoalchemy2/blob/master/doc/core_tutorial.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nins = lake_table.insert().values(name='Majeur',\n                                 geom='POLYGON((0 0,1 0,1 1,0 1,0 0))')\n\nconn = engine.connect()\nresult = conn.execute(ins)\n\n# Alternative method\nconn.execute(lake_table.insert(),\n             name='Majeur', geom='POLYGON((0 0,1 0,1 1,0 1,0 0))')\n\n# Inserting multiple rows\nconn.execute(lake_table.insert(), [\n    {'name': 'Garde', 'geom': 'POLYGON((1 0,3 0,3 2,1 2,1 0))'},\n    {'name': 'Orta', 'geom': 'POLYGON((3 0,6 0,6 3,3 3,3 0))'}\n    ])\n```\n\n----------------------------------------\n\nTITLE: Connecting to SpatiaLite Database Using GeoAlchemy2 Plugin\nDESCRIPTION: Creates a SQLAlchemy engine for connecting to a SpatiaLite database using the GeoAlchemy2 plugin. This approach automatically loads the SpatiaLite extension when connecting.\nSOURCE: https://github.com/geoalchemy/geoalchemy2/blob/master/doc/spatialite_dialect.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import create_engine\nengine = create_engine(\n    \"sqlite:///gis.db\",\n    echo=True,\n    plugins=[\"geoalchemy2\"]\n)\n```\n\n----------------------------------------\n\nTITLE: Connecting to MySQL/MariaDB using GeoAlchemy2 Plugin\nDESCRIPTION: Creates a database engine using SQLAlchemy's create_engine with the GeoAlchemy2 plugin. This approach automatically handles parameter conversion for spatial queries.\nSOURCE: https://github.com/geoalchemy/geoalchemy2/blob/master/doc/mysql_mariadb_dialect.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import create_engine\nengine = create_engine(\n    \"mysql://user:password@host:port/dbname\",\n    echo=True,\n    plugins=[\"geoalchemy2\"]\n)\n```\n\n----------------------------------------\n\nTITLE: Registering Function Mapping Between PostGIS and SpatiaLite\nDESCRIPTION: Registers a function mapping to automatically translate PostGIS function calls (ST_Buffer) to their SpatiaLite equivalents (Buffer) when executing queries against a SpatiaLite database.\nSOURCE: https://github.com/geoalchemy/geoalchemy2/blob/master/doc/spatialite_dialect.rst#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ngeoalchemy2.functions.register_sqlite_mapping(\n    {\"ST_Buffer\": \"Buffer\"}\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Instances of Spatial Objects with GeoAlchemy2 in Python\nDESCRIPTION: Creates an instance of the Lake class with a name and a WKT (Well-Known Text) polygon geometry. Shows how to initialize spatial objects before persisting them to the database.\nSOURCE: https://github.com/geoalchemy/geoalchemy2/blob/master/doc/orm_tutorial.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> lake = Lake(name='Majeur', geom='POLYGON((0 0,1 0,1 1,0 1,0 0))')\n>>> lake.geom\n'POLYGON((0 0,1 0,1 1,0 1,0 0))'\n>>> str(lake.id)\n'None'\n```\n\n----------------------------------------\n\nTITLE: Reflecting Tables with Geometry Columns in SQLAlchemy\nDESCRIPTION: Demonstrates how to use SQLAlchemy's reflection to load table definitions from an existing database, including tables with geometry columns.\nSOURCE: https://github.com/geoalchemy/geoalchemy2/blob/master/doc/core_tutorial.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom geoalchemy2 import Geometry  # <= not used but must be imported\nfrom sqlalchemy import create_engine, MetaData\nengine = create_engine(\n    \"postgresql://myuser:mypass@mydb.host.tld/mydbname\",\n    plugins=[\"geoalchemy2\"]\n)\nmeta = MetaData()\nmeta.reflect(bind=engine)\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Spatial Objects to the Database in Python\nDESCRIPTION: Shows how to add multiple Lake objects with different geometry definitions to the database in a single operation using session.add_all().\nSOURCE: https://github.com/geoalchemy/geoalchemy2/blob/master/doc/orm_tutorial.rst#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> session.add_all([\n...     Lake(name='Garde', geom='POLYGON((1 0,3 0,3 2,1 2,1 0))'),\n...     Lake(name='Orta', geom='POLYGON((3 0,6 0,6 3,3 3,3 0))')\n... ])\n>>> session.commit()\n```\n\n----------------------------------------\n\nTITLE: Working with Raster Functions in GeoAlchemy2\nDESCRIPTION: Example showing how to use functions that can operate on both Geometry and Raster types. When using these functions with Raster data, the type_=Raster argument must be passed to enforce the correct return type.\nSOURCE: https://github.com/geoalchemy/geoalchemy2/blob/master/doc/core_tutorial.rst#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n>>> s = select([func.ST_Transform(\n                    lake_table.c.raster,\n                    2154,\n                    type_=Raster)\n                .label('transformed_raster')])\n```\n\n----------------------------------------\n\nTITLE: Configuring Alembic for SQLite with SpatiaLite in Python\nDESCRIPTION: Example of configuring Alembic's env.py file for SQLite databases with SpatiaLite extension. This setup ensures the SpatiaLite extension is loaded when the engine connects to the database.\nSOURCE: https://github.com/geoalchemy/geoalchemy2/blob/master/doc/alembic.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom geoalchemy2 import alembic_helpers\nfrom geoalchemy2 import load_spatialite\n\n\ndef run_migrations_offline():\n    # ...\n    context.configure(\n        # ...\n        include_object=alembic_helpers.include_object,\n        process_revision_directives=alembic_helpers.writer,\n        render_item=alembic_helpers.render_item,\n    )\n    # ...\n\n\ndef run_migrations_online():\n    # ...\n    if connectable.dialect.name == \"sqlite\":\n        # Load the SpatiaLite extension when the engine connects to the DB\n        listen(connectable, 'connect', load_spatialite)\n\n    with connectable.connect() as connection:\n        # ...\n        context.configure(\n            # ...\n            include_object=alembic_helpers.include_object,\n            process_revision_directives=alembic_helpers.writer,\n            render_item=alembic_helpers.render_item,\n        )\n        # ...\n```\n\n----------------------------------------\n\nTITLE: Custom Render Function for Alembic with GeoAlchemy 2 in Python\nDESCRIPTION: Example of a custom render_item function for Alembic to handle both GeoAlchemy 2 types and custom types. This function ensures proper imports are added to migration scripts for spatial and custom types.\nSOURCE: https://github.com/geoalchemy/geoalchemy2/blob/master/doc/alembic.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# ...\nfrom geoalchemy2 import alembic_helpers\nfrom my_package.custom_types import TheCustomType\n# ...\n\n\ndef render_item(obj_type, obj, autogen_context):\n    \"\"\"Apply custom rendering for selected items.\"\"\"\n    spatial_type = alembic_helpers.render_item(obj_type, obj, autogen_context)\n    if spatial_type:\n        return spatial_type\n\n    # For the custom type\n    if obj_type == 'type' and isinstance(obj, TheCustomType):\n        import_name = obj.__class__.__name__\n        autogen_context.imports.add(f\"from my_package.custom_types import {import_name}\")\n        return \"%r\" % obj\n\n    # default rendering for other objects\n    return False\n\n\ndef run_migrations_offline():\n    # ...\n    context.configure(\n        # ...\n        include_object=alembic_helpers.include_object,\n        process_revision_directives=alembic_helpers.writer,\n        render_item=render_item,\n    )\n    # ...\n\n\ndef run_migrations_online():\n    # ...\n    context.configure(\n        # ...\n        include_object=alembic_helpers.include_object,\n        process_revision_directives=alembic_helpers.writer,\n        render_item=render_item,\n    )\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Concise Buffer Area Calculation Query\nDESCRIPTION: Alternative syntax for calculating buffer areas using GeoAlchemy2's chainable method syntax.\nSOURCE: https://github.com/geoalchemy/geoalchemy2/blob/master/doc/orm_tutorial.rst#2025-04-23_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nquery = session.query(Lake.name,\n                   Lake.geom.ST_Buffer(2).ST_Area().label('bufferarea'))\nfor row in query:\n    print '%s: %f' % (row.name, row.bufferarea)\n```\n\n----------------------------------------\n\nTITLE: Autogenerated Alembic Migration Script for Spatial Table in Python\nDESCRIPTION: An example of an Alembic migration script automatically generated for a spatial table. This script includes commands to create the table and its spatial index, which may require manual adjustments.\nSOURCE: https://github.com/geoalchemy/geoalchemy2/blob/master/doc/alembic.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"Create new table\n\nRevision ID: <rev_id>\nRevises: <down_rev_id>\nCreate Date: <date>\n\n\"\"\"\nfrom alembic import op\nimport sqlalchemy as sa\n\n\n# revision identifiers, used by Alembic.\nrevision = \"<rev_id>\"\ndown_revision = \"<down_rev_id>\"\nbranch_labels = None\ndepends_on = None\n\n\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table(\n        \"lake\",\n        sa.Column(\"id\", sa.Integer(), nullable=False),\n        sa.Column(\n            \"geom\",\n            geoalchemy2.types.Geometry(\n                geometry_type=\"LINESTRING\",\n                srid=4326,\n                from_text=\"ST_GeomFromEWKT\",\n                name=\"geometry\",\n            ),\n            nullable=True,\n        ),\n        sa.PrimaryKeyConstraint(\"id\"),\n    )\n    op.create_index(\n        \"idx_lake_geom\",\n        \"lake\",\n        [\"geom\"],\n        unique=False,\n        postgresql_using=\"gist\",\n        postgresql_ops={},\n    )\n    # ### end Alembic commands ###\n\n\ndef downgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_index(\n        \"idx_lake_geom\",\n        table_name=\"lake\",\n        postgresql_using=\"gist\",\n        postgresql_ops={},\n    )\n    op.drop_table(\"lake\")\n    # ### end Alembic commands ###\n```\n\n----------------------------------------\n\nTITLE: Connecting to GeoPackage with SpatiaLite Extension\nDESCRIPTION: Creates a SQLAlchemy engine for connecting to a GeoPackage database file and attaches a listener that loads the SpatiaLite extension specifically configured for GeoPackage support.\nSOURCE: https://github.com/geoalchemy/geoalchemy2/blob/master/doc/spatialite_dialect.rst#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom geoalchemy2 import load_spatialite_gpkg\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.event import listen\n\nengine = create_engine(\"gpkg:///gis.gpkg\", echo=True)\nlisten(engine, \"connect\", load_spatialite_gpkg)\n```\n\n----------------------------------------\n\nTITLE: Creating Table Objects in a Database with SQLAlchemy\nDESCRIPTION: Demonstrates how to create or drop a database table using the __table__ property of a SQLAlchemy model class. The create and drop methods execute the corresponding DDL statements in the connected database.\nSOURCE: https://github.com/geoalchemy/geoalchemy2/blob/master/doc/orm_tutorial.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> Lake.__table__.create(engine)\n```\n\n----------------------------------------\n\nTITLE: Creating Table in Database with SQLAlchemy in Python\nDESCRIPTION: Executes DDL to create the previously defined 'lake' table in the connected database.\nSOURCE: https://github.com/geoalchemy/geoalchemy2/blob/master/doc/core_tutorial.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nlake_table.create(engine)\n```\n\n----------------------------------------\n\nTITLE: Defining Geometry Columns in GeoAlchemy\nDESCRIPTION: Shows the difference between defining geometry columns in GeoAlchemy 1 vs 2. The new version uses the Geometry type with an explicit geometry_type parameter instead of specific types like Polygon.\nSOURCE: https://github.com/geoalchemy/geoalchemy2/blob/master/doc/migrate.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ngeom = Column(Polygon)\n```\n\nLANGUAGE: python\nCODE:\n```\ngeom = Column(Geometry('POLYGON'))\n```\n\n----------------------------------------\n\nTITLE: Manual MySQL/MariaDB Connection with Event Listener\nDESCRIPTION: Demonstrates manual setup of database connection with explicit event listener registration for handling spatial query parameter conversion.\nSOURCE: https://github.com/geoalchemy/geoalchemy2/blob/master/doc/mysql_mariadb_dialect.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom geoalchemy2.admin.dialects.mysql import before_cursor_execute\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.event import listen\n\nengine = create_engine(\"mysql://user:password@host:port/dbname\", echo=True)\nlisten(engine, \"before_cursor_execute\", before_cursor_execute)\n```\n\n----------------------------------------\n\nTITLE: Connecting to SpatiaLite Database Using Manual Listener Approach\nDESCRIPTION: Creates a SQLAlchemy engine for connecting to a SpatiaLite database by manually attaching a listener that loads the SpatiaLite extension when a connection is established.\nSOURCE: https://github.com/geoalchemy/geoalchemy2/blob/master/doc/spatialite_dialect.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom geoalchemy2 import load_spatialite\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.event import listen\n\nengine = create_engine(\"sqlite:///gis.db\", echo=True)\nlisten(engine, \"connect\", load_spatialite)\n```\n\n----------------------------------------\n\nTITLE: Documenting _SpatialElement Class in GeoAlchemy2\nDESCRIPTION: Auto-generated documentation for the _SpatialElement class in GeoAlchemy2. This class likely serves as a base class for other spatial elements.\nSOURCE: https://github.com/geoalchemy/geoalchemy2/blob/master/doc/elements.rst#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: geoalchemy2.elements._SpatialElement\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Documenting WKTElement Class in GeoAlchemy2\nDESCRIPTION: Auto-generated documentation for the WKTElement class in GeoAlchemy2. This class likely represents Well-Known Text (WKT) geometric objects.\nSOURCE: https://github.com/geoalchemy/geoalchemy2/blob/master/doc/elements.rst#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: geoalchemy2.elements.WKTElement\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Documenting WKBElement Class in GeoAlchemy2\nDESCRIPTION: Auto-generated documentation for the WKBElement class in GeoAlchemy2. This class likely represents Well-Known Binary (WKB) geometric objects.\nSOURCE: https://github.com/geoalchemy/geoalchemy2/blob/master/doc/elements.rst#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: geoalchemy2.elements.WKBElement\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Documenting RasterElement Class in GeoAlchemy2\nDESCRIPTION: Auto-generated documentation for the RasterElement class in GeoAlchemy2. This class likely represents raster data elements.\nSOURCE: https://github.com/geoalchemy/geoalchemy2/blob/master/doc/elements.rst#2025-04-23_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: geoalchemy2.elements.RasterElement\n   :members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Documenting CompositeElement Class in GeoAlchemy2\nDESCRIPTION: Auto-generated documentation for the CompositeElement class in GeoAlchemy2. This class likely represents composite spatial elements.\nSOURCE: https://github.com/geoalchemy/geoalchemy2/blob/master/doc/elements.rst#2025-04-23_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: geoalchemy2.elements.CompositeElement\n   :members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Working with WKTElement in GeoAlchemy 2\nDESCRIPTION: Demonstrates the usage of WKTElement for specifying geometries with SRID, and direct string usage when no SRID is needed.\nSOURCE: https://github.com/geoalchemy/geoalchemy2/blob/master/doc/migrate.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nLake.geom.ST_Touches(WKTElement('POINT(1 1)', srid=4326))\n```\n\nLANGUAGE: python\nCODE:\n```\nLake.geom.ST_Touches('POINT(1 1)')\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx autodoc for GeoAlchemy2 Spatial Operators\nDESCRIPTION: A reStructuredText directive that configures the Sphinx automodule extension to generate documentation for the geoalchemy2.comparator module. It includes all members, special members, and shows inheritance information.\nSOURCE: https://github.com/geoalchemy/geoalchemy2/blob/master/doc/spatial_operators.rst#2025-04-23_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: geoalchemy2.comparator\n   :members:\n   :special-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Documenting GeoAlchemy2 Admin Plugin Module in Python\nDESCRIPTION: This code snippet uses Sphinx autodoc directives to automatically generate documentation for the GeoAlchemy2 admin plugin module. It includes all members, private members, and shows inheritance information.\nSOURCE: https://github.com/geoalchemy/geoalchemy2/blob/master/doc/plugin.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: geoalchemy2.admin.plugin\n   :members:\n   :private-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Documenting GeoAlchemy2 Shape Module with Sphinx\nDESCRIPTION: ReStructuredText directive for automatically generating documentation for the GeoAlchemy2 shape module. Includes all members, private members, undocumented members and inheritance information.\nSOURCE: https://github.com/geoalchemy/geoalchemy2/blob/master/doc/shape.rst#2025-04-23_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: geoalchemy2.shape\n   :members:\n   :private-members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Testing Database Connection in GeoAlchemy2\nDESCRIPTION: Establishes a connection to the SpatiaLite database to verify connectivity. This will trigger the load_spatialite function which initializes spatial metadata in the database.\nSOURCE: https://github.com/geoalchemy/geoalchemy2/blob/master/doc/spatialite_dialect.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nconn = engine.connect()\n```\n\n----------------------------------------\n\nTITLE: Closing Database Connection in GeoAlchemy2\nDESCRIPTION: Closes the active connection to the SpatiaLite database after testing connectivity.\nSOURCE: https://github.com/geoalchemy/geoalchemy2/blob/master/doc/spatialite_dialect.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nconn.close()\n```\n\n----------------------------------------\n\nTITLE: Listing Python Package Requirements for GeoAlchemy2 Development\nDESCRIPTION: This snippet enumerates the additional Python packages required for running tests and developing GeoAlchemy2. It includes database migration tools, linting utilities, testing frameworks, and geospatial libraries.\nSOURCE: https://github.com/geoalchemy/geoalchemy2/blob/master/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# Additional requirements for running the testsuite and development\nalembic\nflake8\nmysql\npytest\npytest-cov\npytest-html\npytest-mypy\nrasterio;implementation_name!='pypy'\n```\n\n----------------------------------------\n\nTITLE: Listing Python Package Requirements for GeoAlchemy2 Documentation\nDESCRIPTION: Lists the required Python packages needed to build the GeoAlchemy2 documentation. Includes Alembic for database migrations, Shapely for geometric operations, Sphinx for documentation generation, Sphinx-Gallery for code examples, and Pillow for image processing.\nSOURCE: https://github.com/geoalchemy/geoalchemy2/blob/master/requirements-doc.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nalembic\nshapely\nsphinx\nsphinx-gallery\npillow\n```\n\n----------------------------------------\n\nTITLE: Installing GeoAlchemy2 in Development Mode with Documentation Dependencies\nDESCRIPTION: This code installs the GeoAlchemy2 package in development mode (editable installation) and includes documentation dependencies from a requirements-doc.txt file.\nSOURCE: https://github.com/geoalchemy/geoalchemy2/blob/master/requirements-rtd.txt#2025-04-23_snippet_0\n\nLANGUAGE: plain\nCODE:\n```\n-e .\n-r requirements-doc.txt\n```\n\n----------------------------------------\n\nTITLE: Building and Running the GeoAlchemy2 Test Container\nDESCRIPTION: Commands for building, running, and cleaning up the Docker test container for GeoAlchemy2.\nSOURCE: https://github.com/geoalchemy/geoalchemy2/blob/master/TEST.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ ./test_container/build.sh\n$ ./test_container/run.sh\n```\n\nLANGUAGE: bash\nCODE:\n```\n# tox --workdir /output -vv\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo rm -rf test_container/output\n$ docker image rm geoalchemy2\n$ docker system prune\n```\n\n----------------------------------------\n\nTITLE: Installing PostgreSQL and PostGIS Dependencies on Ubuntu\nDESCRIPTION: Commands to install PostgreSQL, PostGIS, and required development packages on Ubuntu 22.04.\nSOURCE: https://github.com/geoalchemy/geoalchemy2/blob/master/TEST.rst#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo apt-get install postgresql postgresql-14-postgis-3 postgresql-14-postgis-3-scripts\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo apt-get install python3-dev libpq-dev libgeos-dev\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo apt-get install libsqlite3-mod-spatialite\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo apt-get install mysql-client mysql-server default-libmysqlclient-dev\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install -r requirements.txt\n$ pip install psycopg2\n```\n\n----------------------------------------\n\nTITLE: Setting Up PostGIS Database for GeoAlchemy2 Testing\nDESCRIPTION: SQL commands to create the 'gis' role, database, schema, and enable PostGIS extensions for testing.\nSOURCE: https://github.com/geoalchemy/geoalchemy2/blob/master/TEST.rst#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo -u postgres psql -c \"CREATE ROLE gis PASSWORD 'gis' SUPERUSER CREATEDB CREATEROLE INHERIT LOGIN;\"\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo -u postgres createdb -E UTF-8 gis\n$ sudo -u postgres psql -d gis -c 'CREATE SCHEMA gis;'\n$ sudo -u postgres psql -c 'GRANT CREATE ON DATABASE gis TO \"gis\";'\n$ sudo -u postgres psql -d gis -c 'GRANT USAGE,CREATE ON SCHEMA gis TO \"gis\";'\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo -u postgres psql -d gis -c \"CREATE EXTENSION postgis;\"\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo -u postgres psql -d gis -c \"CREATE EXTENSION postgis_raster;\"\n```\n\n----------------------------------------\n\nTITLE: Running GeoAlchemy2 Tests with pytest\nDESCRIPTION: Command to execute the GeoAlchemy2 test suite using pytest.\nSOURCE: https://github.com/geoalchemy/geoalchemy2/blob/master/TEST.rst#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ py.test\n```\n\n----------------------------------------\n\nTITLE: Setting Up MySQL Database for GeoAlchemy2 Testing\nDESCRIPTION: Commands to create the 'gis' role and database in MySQL for testing GeoAlchemy2.\nSOURCE: https://github.com/geoalchemy/geoalchemy2/blob/master/TEST.rst#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo mysql -e \"CREATE USER 'gis'@'%' IDENTIFIED BY 'gis';\"\n$ sudo mysql -e \"GRANT ALL PRIVILEGES ON *.* TO 'gis'@'%' WITH GRANT OPTION;\"\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ mysql -u gis --password=gis -e \"CREATE DATABASE gis;\"\n```\n\n----------------------------------------\n\nTITLE: Configuring SpatiaLite for GeoAlchemy2 Testing\nDESCRIPTION: Commands to set the path to the SpatiaLite module, required for running SpatiaLite functional tests.\nSOURCE: https://github.com/geoalchemy/geoalchemy2/blob/master/TEST.rst#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ export SPATIALITE_LIBRARY_PATH=\"/usr/lib/x86_64-linux-gnu/mod_spatialite.so\"\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Directive for GeoAlchemy2 Functions Module\nDESCRIPTION: Sphinx documentation directive that automatically generates documentation for all members of the geoalchemy2.functions module.\nSOURCE: https://github.com/geoalchemy/geoalchemy2/blob/master/doc/spatial_functions.rst#2025-04-23_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. _spatial_functions:\n\nSpatial Functions\n=================\n\n.. automodule:: geoalchemy2.functions\n   :members:\n```\n\n----------------------------------------\n\nTITLE: Sphinx Autodoc Directive for GeoAlchemy2 Types\nDESCRIPTION: ReStructuredText directive for automatically generating documentation from the geoalchemy2.types module. The directive includes all members, private members, and inheritance information.\nSOURCE: https://github.com/geoalchemy/geoalchemy2/blob/master/doc/types.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: geoalchemy2.types\n   :members:\n   :private-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Documentation Section Definition\nDESCRIPTION: ReStructuredText markup defining an anchor and section header for Alembic helpers documentation, followed by an automodule directive to generate API documentation.\nSOURCE: https://github.com/geoalchemy/geoalchemy2/blob/master/doc/alembic_helpers.rst#2025-04-23_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. _alembic_helpers:\n\nAlembic helpers\n===============\n\n.. automodule:: geoalchemy2.alembic_helpers\n   :members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Including External Changelog in RestructuredText Documentation\nDESCRIPTION: A RestructuredText directive that includes the CHANGES.txt file from the parent directory to display the project's version history within the documentation.\nSOURCE: https://github.com/geoalchemy/geoalchemy2/blob/master/doc/changelog.rst#2025-04-23_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. _changelog:\n\n.. include:: ../CHANGES.txt\n```"
  }
]