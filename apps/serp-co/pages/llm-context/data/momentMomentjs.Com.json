[
  {
    "owner": "moment",
    "repo": "momentjs.com",
    "content": "TITLE: Checking Validity of a Moment Object from a Non-Date String\nDESCRIPTION: Demonstrates how to check if a string is a valid date using Moment.js. Invalid date strings will return false when checked with the isValid() method.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/01-parsing/02-string.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmoment(\"not a real date\").isValid(); // false\n```\n\n----------------------------------------\n\nTITLE: Parsing Dates with Zone Preservation in Moment.js\nDESCRIPTION: Illustrates how to parse dates while preserving the input timezone using Moment.js. This method keeps the input zone passed in, assuming ambiguous input to be UTC.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/01-parsing/00-intro.md#2025-04-08_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.parseZone()\n```\n\n----------------------------------------\n\nTITLE: Strict Mode Date Parsing\nDESCRIPTION: Demonstrates strict parsing mode which validates format exactly\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/01-parsing/03-string-format.md#2025-04-08_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmoment('24/12/2019 09:15:00', \"DD MM YYYY hh:mm:ss\", true);\n```\n\n----------------------------------------\n\nTITLE: Calculating Relative Time with Moment.js\nDESCRIPTION: Demonstrates how to use the 'from' method to calculate the relative time between two moments. It shows that the method accepts various input types for the comparison time.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/04-displaying/03-from.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar a = moment([2007, 0, 28]);\nvar b = moment([2007, 0, 29]);\na.from(b) // \"a day ago\"\n```\n\n----------------------------------------\n\nTITLE: Parsing Dates with Strict Mode in Moment.js\nDESCRIPTION: Demonstrates how to use strict mode when parsing dates in Moment.js. Strict mode requires the input to exactly match the specified format, including separators.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/guides/moment/01-parsing/03-strict-mode.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmoment('01/01/2016', 'MM/DD/YYYY', true).format()\n\"2016-01-01T00:00:00-06:00\"\nmoment('01/01/2016 some text', 'MM/DD/YYYY', true).format()\n\"Invalid date\"\n```\n\n----------------------------------------\n\nTITLE: Checking Moment.js Date Validity and Overflow in JavaScript\nDESCRIPTION: Shows how to check if a Moment.js date is valid using isValid() and how to determine which date unit overflowed using invalidAt().\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/01-parsing/15-is-valid.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar m = moment(\"2011-10-10T10:20:90\");\nm.isValid(); // false\nm.invalidAt(); // 5 for seconds\n```\n\n----------------------------------------\n\nTITLE: Using endOf() Method in Moment.js\nDESCRIPTION: This example demonstrates how to use the endOf() method to set a moment object to the end of the current year. The method sets the time to 23:59:59.999 on December 31st of the current year.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/03-manipulating/04-end-of.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmoment().endOf(\"year\"); // set the moment to 12-31 23:59:59.999 this year\n```\n\n----------------------------------------\n\nTITLE: Getting Hours Component from Duration in Moment.js\nDESCRIPTION: Retrieves the hours component (0-23) from a duration object. This method returns only the hours part of the duration, not the total duration in hours.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/08-durations/07-hours.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.duration().hours();\n```\n\n----------------------------------------\n\nTITLE: Comparing Date Constructor and Moment.js Initialization in JavaScript\nDESCRIPTION: Demonstrates the difference between the native Date constructor and Moment.js initialization, showing how Moment.js applies stricter rules.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/01-parsing/15-is-valid.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nnew Date(2013, 25, 14).toString(); // \"Sat Feb 14 2015 00:00:00 GMT-0500 (EST)\"\nmoment([2015, 25, 35]).format();   // 'Invalid date'\n```\n\n----------------------------------------\n\nTITLE: Parsing Timezone Offset for a Regular Date in JavaScript\nDESCRIPTION: This example demonstrates how to use the zone.parse() method to determine the timezone offset for a specific date in New York. It creates a UTC timestamp and passes it to zone.parse() to get the offset in minutes.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment-timezone/02-zone-object/04-parse.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar zone = moment.tz.zone('America/New_York');\nzone.parse(Date.UTC(2012, 2, 19, 8, 30)); // 240\n```\n\n----------------------------------------\n\nTITLE: Getting Current Date and Time with Moment.js in JavaScript\nDESCRIPTION: This snippet demonstrates how to get the current date and time using Moment.js. It creates a new moment object representing the current instant. This is equivalent to calling moment() with a new Date() object.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/01-parsing/01-now.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar now = moment();\n```\n\n----------------------------------------\n\nTITLE: Custom Two-Digit Year Parsing\nDESCRIPTION: Shows how to customize two-digit year parsing behavior\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/01-parsing/03-string-format.md#2025-04-08_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.parseTwoDigitYear = function(yearString) {\n    return parseInt(yearString) + 2000;\n}\n```\n\n----------------------------------------\n\nTITLE: Escaping Characters in Moment.js Format Strings\nDESCRIPTION: Demonstrates how to escape characters in format strings using square brackets to include literal text in the output.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/04-displaying/01-format.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmoment().format('[today] dddd'); // 'today Sunday'\n```\n\n----------------------------------------\n\nTITLE: Using moment.max() with Multiple Moment Instances in JavaScript\nDESCRIPTION: This example demonstrates using moment.max() to find the most future-dated moment between two instances. It compares a moment from yesterday and a moment from tomorrow, returning the latter.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/02-get-set/21-max.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar a = moment().subtract(1, 'day');\nvar b = moment().add(1, 'day');\nmoment.max(a, b);  // b\n```\n\n----------------------------------------\n\nTITLE: Basic Date Formatting in Moment.js\nDESCRIPTION: Examples of using Moment.js format() method to display dates in different formats, including ISO 8601, custom patterns, and handling invalid dates.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/04-displaying/01-format.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmoment().format();                                // \"2014-09-08T08:02:17-05:00\" (ISO 8601, no fractional seconds)\nmoment().format(\"dddd, MMMM Do YYYY, h:mm:ss a\"); // \"Sunday, February 14th 2010, 3:25:50 pm\"\nmoment().format(\"ddd, hA\");                       // \"Sun, 3PM\"\nmoment().format(\"[Today is] dddd\");               // \"Today is Sunday\"\nmoment('gibberish').format('YYYY MM DD');         // \"Invalid date\"\n```\n\n----------------------------------------\n\nTITLE: Including and Using Moment.js in HTML\nDESCRIPTION: This snippet shows how to include Moment.js in an HTML file and use its basic functionality. It demonstrates loading the library via a script tag and using the moment() function to format the current date and time.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/00-use-it/02-browser.md#2025-04-08_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"moment.js\"></script>\n<script>\n\tmoment().format();\n</script>\n```\n\n----------------------------------------\n\nTITLE: Serializing Moment Duration to JSON\nDESCRIPTION: Demonstrates how to serialize a Moment.js duration object to JSON format. The duration is automatically converted to an ISO8601 duration string (PT5M represents 5 minutes). Invalid durations will return 'Invalid Date' in the JSON output.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/08-durations/17-as-json.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nJSON.stringify({\n    postDuration : moment.duration(5, 'm')\n}); // '{\"postDuration\":\"PT5M\"}'\n```\n\n----------------------------------------\n\nTITLE: Customizing Moment.js Default Format\nDESCRIPTION: Demonstrates how to change the default format in Moment.js and its impact on parsing dates. Shows that changing defaultFormat affects formatting but not parsing behavior, requiring explicit format specification for parsing custom formats.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/04-displaying/01-format.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.defaultFormat = \"DD.MM.YYYY HH:mm\";\n// parse with .toDate()\nmoment('20.07.2018 09:19').toDate() // Invalid date\n// format the date string with the new defaultFormat then parse\nmoment('20.07.2018 09:19', moment.defaultFormat).toDate() // Fri Jul 20 2018 09:19:00 GMT+0300\n```\n\n----------------------------------------\n\nTITLE: Filtering Timezone Data for Year Range in JavaScript\nDESCRIPTION: Demonstrates how to filter timezone data for a specific range of years (2012-2016). The function reduces the data set from the full timeline to only include entries within the specified range, significantly reducing the size of the timezone data.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment-timezone/05-data-utilities/06-filter-years.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar all    = { name : \"America/Los_Angeles\", abbrs : [...], offsets : [...] untils : [...]};\\nvar subset = moment.tz.filterYears(all, 2012, 2016);\\nall.untils.length;    // 186\\nsubset.untils.length; // 11\n```\n\n----------------------------------------\n\nTITLE: Converting Moment.js Object to Native JavaScript Date\nDESCRIPTION: This snippet demonstrates how to use the toDate() method to get a copy of the native Date object from a Moment.js object. It's important to note that changes to this Date object won't affect the original Moment.js object.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/04-displaying/11-as-javascript-date.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmoment().toDate();\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of moment.parseZone() in JavaScript\nDESCRIPTION: Examples of using moment.parseZone() to parse date strings with timezone offsets. The function preserves the timezone offset from the string rather than converting to local or UTC time.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/01-parsing/14-parse-zone.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.parseZone(\"2013-01-01T00:00:00-13:00\").utcOffset(); // -780 (\"-13:00\" in total minutes)\nmoment.parseZone('2013 01 01 05 -13:00', 'YYYY MM DD HH ZZ').utcOffset(); // -780  (\"-13:00\" in total minutes)\nmoment.parseZone('2013-01-01-13:00', ['DD MM YYYY ZZ', 'YYYY MM DD ZZ']).utcOffset(); // -780  (\"-13:00\" in total minutes);\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of fromNow() Method in Moment.js\nDESCRIPTION: Demonstrates how to use the fromNow() method to display relative time from the current moment. This example shows a date from 2007 displayed as '4 years ago'.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/04-displaying/02-fromnow.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmoment([2007, 0, 29]).fromNow(); // 4 years ago\n```\n\n----------------------------------------\n\nTITLE: ISO 8601 Format Examples\nDESCRIPTION: Examples of various valid ISO 8601 date and time formats, including calendar dates, week dates, and timestamps with different separators and timezone offsets.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/guides/moment/01-parsing/02-known-formats.md#2025-04-08_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n2013-02-08               # A calendar date part\n2013-W06-5               # A week date part\n2013-02-08T09            # An hour time part separated by a T\n2013-02-08 09            # An hour time part separated by a space\n2013-02-08 09:30:26      # An hour, minute, and second time part\n2013-02-08 09+07:00      # +-HH:mm\n```\n\n----------------------------------------\n\nTITLE: Getting UTC Offset in Moment.js\nDESCRIPTION: Demonstrates how to retrieve the UTC offset of the current Moment object in minutes. The returned value can be negative or positive, representing the offset from UTC.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/03-manipulating/09-utc-offset.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmoment().utcOffset(); // (-240, -120, -60, 0, 60, 120, 240, etc.)\n```\n\n----------------------------------------\n\nTITLE: Initializing Moment Object from JavaScript Date\nDESCRIPTION: Creates a Moment.js object by wrapping a native JavaScript Date object. The resulting Moment object is independent of the original Date object due to cloning, meaning changes to either object won't affect the other.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/01-parsing/09-date.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar day = new Date(2011, 9, 16);\nvar dayWrapper = moment(day);\n```\n\n----------------------------------------\n\nTITLE: Simplified Long Date Format Configuration in Moment.js\nDESCRIPTION: This snippet shows a simplified way to update the 'en' locale with long date formats. It omits the lowercase variants, which are automatically created by replacing long tokens with short token variants.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/07-customization/06-long-date-formats.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.updateLocale('en', {\n    longDateFormat : {\n        LT: \"h:mm A\",\n        LTS: \"h:mm:ss A\",\n        L: \"MM/DD/YYYY\",\n        LL: \"MMMM Do YYYY\",\n        LLL: \"MMMM Do YYYY LT\",\n        LLLL: \"dddd, MMMM Do YYYY LT\"\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Moment to Start of Time Units in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the startOf() method with different time units in Moment.js. It shows examples for year, month, quarter, week, day, hour, minute, and second.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/03-manipulating/03-start-of.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmoment().startOf('year');    // set to January 1st, 12:00 am this year\nmoment().startOf('month');   // set to the first of this month, 12:00 am\nmoment().startOf('quarter');  // set to the beginning of the current quarter, 1st day of months, 12:00 am\nmoment().startOf('week');    // set to the first day of this week, 12:00 am\nmoment().startOf('isoWeek'); // set to the first day of this week according to ISO 8601, 12:00 am\nmoment().startOf('day');     // set to 12:00 am today\nmoment().startOf('date');     // set to 12:00 am today\nmoment().startOf('hour');    // set to now, but with 0 mins, 0 secs, and 0 ms\nmoment().startOf('minute');  // set to now, but with 0 seconds and 0 milliseconds\nmoment().startOf('second');  // same as moment().milliseconds(0);\n```\n\n----------------------------------------\n\nTITLE: Creating Moment Object from Unix Timestamp in JavaScript\nDESCRIPTION: This snippet shows how to create a Moment.js object using a Unix timestamp in milliseconds. The timestamp represents the number of milliseconds since January 1, 1970, 12:00 AM UTC (Unix Epoch).\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/01-parsing/07-unix-timestamp-milliseconds.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar day = moment(1318781876406);\n```\n\n----------------------------------------\n\nTITLE: Creating a Moment object with no parameters\nDESCRIPTION: When no parameters are passed to moment(), it defaults to the current date and time.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/01-parsing/17-defaults.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmoment();  // current date and time\n```\n\n----------------------------------------\n\nTITLE: Parsing UTC Time with Moment.js\nDESCRIPTION: Creates a Moment.js date in the context of UTC time. The resulting date will have a UTC offset of +00:00.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/guides/moment/01-parsing/01-local-utc-zone.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.utc('2016-01-01T23:35:01');\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Moment.js in Node.js (CommonJS)\nDESCRIPTION: This snippet demonstrates how to require Moment.js in a Node.js environment using CommonJS syntax. It then shows a basic usage example of formatting the current date and time.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/00-use-it/01-node-js.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar moment = require('moment'); // require\nmoment().format();\n```\n\n----------------------------------------\n\nTITLE: Basic Date String Parsing in Moment.js\nDESCRIPTION: Demonstrates basic date string parsing with a specific format pattern\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/01-parsing/03-string-format.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmoment(\"12-25-1995\", \"MM-DD-YYYY\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Locale Week Settings in Moment.js (Different Versions)\nDESCRIPTION: Shows three different methods to configure the week settings in a locale based on the Moment.js version. For version 2.12.0 onward, use updateLocale; for versions 2.8.1 to 2.11.2, use locale; and for versions before 2.8.1 (deprecated), use lang.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/07-customization/16-dow-doy.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// From 2.12.0 onward\nmoment.updateLocale('en', {\n    week : {\n        dow : Int,\n        doy : Int\n     }\n});\n// From 2.8.1 to 2.11.2\nmoment.locale('en', {\n    week : {\n        dow : Int,\n        doy : Int\n    }\n});\n\n// Deprecated in 2.8.1\nmoment.lang('en', {\n    week : {\n        dow : Int,\n        doy : Int\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Date String Parsing in Moment.js\nDESCRIPTION: Demonstrates basic date string parsing with a specific format pattern\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/01-parsing/03-string-format.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmoment(\"12-25-1995\", \"MM-DD-YYYY\");\n```\n\n----------------------------------------\n\nTITLE: Converting Timezone Data with moment.tz.pack()\nDESCRIPTION: Demonstrates converting an unpacked timezone object containing time zone information (name, abbreviations, offsets, transition times, and population) into a compressed packed string format. The packed format is more efficient for storage and transmission.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment-timezone/05-data-utilities/01-pack.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar unpacked = {\n\tname       : 'Indian/Mauritius',\n\tabbrs      : ['LMT', 'MUT', 'MUST', 'MUT', 'MUST', 'MUT'],\n\toffsets    : [-230, -240, -300, -240, -300, -240],\n\tuntils     : [-1988164200000, 403041600000, 417034800000, 1224972000000, 1238274000000, null],\n\tpopulation : 150000\n};\nmoment.tz.pack(unpacked); // \"Indian/Mauritius|LMT MUT MUST|-3O -40 -50|012121|-2xorO 34unO 14L0 12kr0 11z0|15e4\"\n```\n\n----------------------------------------\n\nTITLE: UTC Getters and Setters in MomentJS\nDESCRIPTION: Shows how UTC mode uses Date#getUTC* and Date#setUTC* methods internally for operations\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/01-parsing/13-utc.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.utc().seconds(30).valueOf() === new Date().setUTCSeconds(30);\nmoment.utc().seconds()   === new Date().getUTCSeconds();\n```\n\n----------------------------------------\n\nTITLE: Linking Single Timezone Names in Moment.js\nDESCRIPTION: Links two timezone names to use the same timezone data. Uses the link format where timezone names are separated by a pipe character.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment-timezone/04-data-loading/02-adding-a-link.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.tz.link('America/Los_Angeles|US/Pacific');\n```\n\n----------------------------------------\n\nTITLE: Displaying Moment.js Date in ISO 8601 Format\nDESCRIPTION: Demonstrates how to output a Moment.js date in ISO 8601 format. This standardized format is useful for consistency across different systems.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/04-displaying/00-intro.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmoment().toISOString();\n```\n\n----------------------------------------\n\nTITLE: Formatting Long Twitter Time with Smart Pluralization\nDESCRIPTION: Shows how the twitterLong() method handles smart pluralization for single units of time.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/10-plugins/12-twitter.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmoment().subtract(1, 'hour').twitterLong();\n// 1 hour\n```\n\n----------------------------------------\n\nTITLE: Edge Case with Same Dates but Different Inclusivity in Moment.js isBetween\nDESCRIPTION: Shows that when from and to parameters are the same but inclusivity parameters differ, the method will return false.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/05-query/06-is-between.md#2025-04-08_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmoment('2016-10-30').isBetween('2016-10-30', '2016-10-30', undefined, '(]'); //false\n```\n\n----------------------------------------\n\nTITLE: Adding Basic Time Units in Moment.js\nDESCRIPTION: Basic example of adding time units using the add() method with a number and time unit string.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/03-manipulating/01-add.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmoment().add(7, 'days');\n```\n\n----------------------------------------\n\nTITLE: Formatting Moment.js Date with Specific Format String\nDESCRIPTION: Shows how to format a Moment.js date using a custom format string. The format() method allows for precise control over the output format of the date.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/04-displaying/00-intro.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmoment().format(\"dddd, MMMM Do YYYY, h:mm:ss a\");\n```\n\n----------------------------------------\n\nTITLE: Native JavaScript Date Handling of Local vs. ISO Formats\nDESCRIPTION: Illustrates how the native Date object inconsistently handles dates, treating ISO 8601 formatted dates (YYYY-MM-DD) as UTC while local formatted dates (MM/DD/YYYY) as local time.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/guides/moment/00-lib-concepts/04-js-date.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n//US local format\nvar a = new Date('1/1/2016'); \n//\"Fri Jan 01 2016 00:00:00 GMT-0600 (Central Standard Time)\"\n\n//ISO 8601\nvar a = new Date('2016-01-01');\n//\"Thu Dec 31 2015 18:00:00 GMT-0600 (Central Standard Time)\"\n```\n\n----------------------------------------\n\nTITLE: Comparing Local and UTC Moment Values\nDESCRIPTION: Illustrates that moments in local and UTC time represent the same point in time despite different displays\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/01-parsing/13-utc.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar a = moment();\nvar b = moment.utc();\na.format();  // 2013-02-04T10:35:24-08:00\nb.format();  // 2013-02-04T18:35:24+00:00\na.valueOf(); // 1360002924000\nb.valueOf(); // 1360002924000\n```\n\n----------------------------------------\n\nTITLE: Locale Specifier Substring Matching in Moment.js\nDESCRIPTION: This snippet shows how Moment.js tries locale specifier substrings from most-specific to least-specific until it finds a known locale.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/06-i18n/01-changing-locale.md#2025-04-08_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.locale('en-nz'); // 'en'\n```\n\n----------------------------------------\n\nTITLE: Subtracting Days from a Moment in JavaScript using MomentJS\nDESCRIPTION: Demonstrates how to subtract a number of days from a moment object using the subtract() method. This mutates the original moment by subtracting the specified time.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/03-manipulating/02-subtract.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmoment().subtract(7, 'days');\n```\n\n----------------------------------------\n\nTITLE: Using moment().to() Without Suffix in Moment.js\nDESCRIPTION: Demonstrates how to use the moment().to() method with the second parameter set to true to return the relative time without the suffix. This is useful for getting just the human-readable length of time.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/04-displaying/05-to.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar start = moment([2007, 0, 5]);\nvar end   = moment([2007, 0, 10]);\nend.to(start);       // \"5 days ago\"\nend.to(start, true); // \"5 days\"\n```\n\n----------------------------------------\n\nTITLE: Using Floating Point Precision with Moment.js diff()\nDESCRIPTION: This example demonstrates how to get a floating point result when calculating differences by passing true as the third argument to diff(). This shows both truncated integer and precise floating point differences in years.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/04-displaying/07-difference.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar a = moment([2008, 9]);\nvar b = moment([2007, 0]);\na.diff(b, 'years');       // 1\na.diff(b, 'years', true); // 1.75\n```\n\n----------------------------------------\n\nTITLE: Using Moment Timezone with ES Modules in Node.js\nDESCRIPTION: Example of importing and using moment-timezone with ES Modules or TypeScript. This demonstrates the preferred import method when using ECMAScript modules.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment-timezone/00-use-it/01-node-js.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport moment from 'moment-timezone';\nmoment().tz(\"America/Los_Angeles\").format();\n```\n\n----------------------------------------\n\nTITLE: Advanced Usage with Locale and Strictness Parameters\nDESCRIPTION: Examples demonstrating how to use locale and strictness arguments with moment.parseZone(). These parameters provide additional control over how the date string is parsed.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/01-parsing/14-parse-zone.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.parseZone(\"2013 01 01 -13:00\", 'YYYY MM DD ZZ', true).utcOffset(); // -780  (\"-13:00\" in total minutes)\nmoment.parseZone(\"2013-01-01-13:00\", 'YYYY MM DD ZZ', true).utcOffset(); // NaN (doesn't pass the strictness check)\nmoment.parseZone(\"2013 01 01 -13:00\", 'YYYY MM DD ZZ', 'fr', true).utcOffset(); // -780 (with locale and strictness argument)\nmoment.parseZone(\"2013 01 01 -13:00\", ['DD MM YYYY ZZ', 'YYYY MM DD ZZ'], 'fr', true).utcOffset(); // -780 (with locale and strictness argument alongside an array of formats)\n```\n\n----------------------------------------\n\nTITLE: Setting Day of Week with String Values in Moment.js\nDESCRIPTION: Shows how to set the day of the week using day names as strings. This feature is available from Moment.js version 2.1.0 and uses the current locale for parsing day names.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/02-get-set/06-day.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmoment().day(\"Sunday\");\nmoment().day(\"Monday\");\n```\n\n----------------------------------------\n\nTITLE: Checking Leap Years using Moment.js in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the isLeapYear() method from Moment.js to check if specific years are leap years. It shows examples for the years 2000 (a leap year), 2001 (not a leap year), and 2100 (not a leap year despite being divisible by 100).\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/05-query/09-is-leap-year.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmoment([2000]).isLeapYear() // true\nmoment([2001]).isLeapYear() // false\nmoment([2100]).isLeapYear() // false\n```\n\n----------------------------------------\n\nTITLE: Preventing UUID Parsing as Date in Moment.js\nDESCRIPTION: Shows how strict mode prevents incorrect parsing of UUIDs as dates, which can happen in non-strict mode due to the UUID starting with 7 digits.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/guides/moment/01-parsing/03-strict-mode.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n//UUID matches YYYYDDD because it starts with 7 digits\nmoment('5917238b-33ff-f849-cd63-80f4c9b37d0c', moment.ISO_8601).format()\n\"5917-08-26T00:00:00-05:00\"\n//strict mode fails because trailing data exists\nmoment('5917238b-33ff-f849-cd63-80f4c9b37d0c', moment.ISO_8601, true).format()\n\"Invalid date\"\n```\n\n----------------------------------------\n\nTITLE: Locale-Specific Parsing\nDESCRIPTION: Demonstrates parsing dates with specific locale settings\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/01-parsing/03-string-format.md#2025-04-08_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nmoment('2012 juillet', 'YYYY MMM', 'fr');\nmoment('2012 July',    'YYYY MMM', 'en');\nmoment('2012 July',    'YYYY MMM', ['qj', 'en']);\n```\n\n----------------------------------------\n\nTITLE: Parsing Date with Multiple Formats in Moment.js\nDESCRIPTION: Demonstrates parsing a date string using an array of possible formats. This allows for flexibility when the exact format is unknown.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/01-parsing/04-string-formats.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmoment(\"12-25-1995\", [\"MM-DD-YYYY\", \"YYYY-MM-DD\"]);\n```\n\n----------------------------------------\n\nTITLE: Calculating Days in Month using Moment.js in JavaScript\nDESCRIPTION: This snippet shows how to use the daysInMonth() method of Moment.js to determine the number of days in a specific month. It demonstrates the method for both a leap year February and a regular January.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/04-displaying/10-days-in-month.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmoment(\"2012-02\", \"YYYY-MM\").daysInMonth() // 29\nmoment(\"2012-01\", \"YYYY-MM\").daysInMonth() // 31\n```\n\n----------------------------------------\n\nTITLE: Handling Daylight Saving Time Transitions in JavaScript\nDESCRIPTION: This example shows how zone.parse() handles timestamps during daylight saving time transitions. It demonstrates the change in offset (from 300 to 240 minutes) that occurs during the spring transition in New York.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment-timezone/02-zone-object/04-parse.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar zone = moment.tz.zone('America/New_York');\nzone.parse(Date.UTC(2012, 2, 11, 1, 59)); // 300\nzone.parse(Date.UTC(2012, 2, 11, 2, 0)); // 240\n```\n\n----------------------------------------\n\nTITLE: Creating a Moment from Unix Timestamp in JavaScript\nDESCRIPTION: Demonstrates how to create a moment object from a Unix timestamp using the moment.unix() function. The timestamp represents seconds since the Unix Epoch.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/01-parsing/08-unix-timestamp.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar day = moment.unix(1318781876);\n```\n\n----------------------------------------\n\nTITLE: Updating and Defining Locales in Moment.js\nDESCRIPTION: This snippet demonstrates the correct usage of functions for modifying locales in Moment.js. It emphasizes using updateLocale for existing locales and defineLocale only for creating new ones to avoid unexpected behavior related to property inheritance.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/guides/moment/02-warnings/02-define-locale.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nUse moment.updateLocale(localeName, config) to change an existing locale. \nmoment.defineLocale(localeName, config) should only be used for creating a new locale\n```\n\n----------------------------------------\n\nTITLE: Using Shorthand Time Unit Notation in Moment.js\nDESCRIPTION: Example showing how to use shorthand notation for time units when adding time.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/03-manipulating/01-add.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmoment().add(7, 'd');\n```\n\n----------------------------------------\n\nTITLE: Using Shorthand Time Unit Notation in Moment.js\nDESCRIPTION: Example showing how to use shorthand notation for time units when adding time.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/03-manipulating/01-add.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmoment().add(7, 'd');\n```\n\n----------------------------------------\n\nTITLE: Retrieving Unix Timestamp in Milliseconds with Moment.js\nDESCRIPTION: This snippet demonstrates how to use the valueOf() method and the unary plus operator with Moment.js to obtain a Unix timestamp in milliseconds. Both methods return the number of milliseconds since the Unix Epoch for a given Moment object.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/04-displaying/08-unix-timestamp-milliseconds.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmoment(1318874398806).valueOf(); // 1318874398806\n+moment(1318874398806); // 1318874398806\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Moment.js isBetween Method\nDESCRIPTION: Demonstrates the basic usage of isBetween to check if a date falls between two other dates. The method returns true when the date is between the specified range and false otherwise.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/05-query/06-is-between.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmoment('2010-10-20').isBetween('2010-10-19', '2010-10-25'); // true\nmoment('2010-10-20').isBetween('2010-10-19', undefined); // true, since moment(undefined) evaluates as moment()\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Moment.js isBetween Method\nDESCRIPTION: Demonstrates the basic usage of isBetween to check if a date falls between two other dates. The method returns true when the date is between the specified range and false otherwise.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/05-query/06-is-between.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmoment('2010-10-20').isBetween('2010-10-19', '2010-10-25'); // true\nmoment('2010-10-20').isBetween('2010-10-19', undefined); // true, since moment(undefined) evaluates as moment()\n```\n\n----------------------------------------\n\nTITLE: Installing Moment.js via npm\nDESCRIPTION: This command installs the Moment.js library using npm (Node Package Manager). It adds Moment.js as a dependency to your Node.js project.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/00-use-it/01-node-js.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install moment\n```\n\n----------------------------------------\n\nTITLE: Setting meridiemParse for AM/PM Parsing in Moment.js\nDESCRIPTION: This snippet demonstrates how to set the meridiemParse property for AM/PM parsing in Moment.js. The meridiemParse property is a regular expression that defines what strings should be parsed as valid AM/PM input.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/07-customization/09-am-pm-parsing.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.updateLocale('en', {\n    meridiemParse : /[ap]\\.?m?\\.?/i\n});\n```\n\n----------------------------------------\n\nTITLE: Parsing Local Time with Moment.js\nDESCRIPTION: Creates a Moment.js date in the context of the user's local timezone. The resulting date will have the UTC offset of the local machine.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/guides/moment/01-parsing/01-local-utc-zone.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmoment('2016-01-01T23:35:01');\n```\n\n----------------------------------------\n\nTITLE: Using Moment.js Getters and Setters with Regular Date Objects\nDESCRIPTION: Demonstrates how Moment.js getter and setter methods map to native JavaScript Date object methods. Shows both the setter pattern (with parameter) and getter pattern (without parameter).\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/02-get-set/00-intro.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmoment().seconds(30).valueOf() === new Date().setSeconds(30);\nmoment().seconds()   === new Date().getSeconds();\n```\n\n----------------------------------------\n\nTITLE: Using Moment.js Getters and Setters with Regular Date Objects\nDESCRIPTION: Demonstrates how Moment.js getter and setter methods map to native JavaScript Date object methods. Shows both the setter pattern (with parameter) and getter pattern (without parameter).\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/02-get-set/00-intro.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmoment().seconds(30).valueOf() === new Date().setSeconds(30);\nmoment().seconds()   === new Date().getSeconds();\n```\n\n----------------------------------------\n\nTITLE: Using fromNow() With Boolean Parameter in Moment.js\nDESCRIPTION: Shows how to use the fromNow() method with an optional boolean parameter to control whether the suffix (ago/from now) is included in the output. Passing true removes the suffix.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/04-displaying/02-fromnow.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmoment([2007, 0, 29]).fromNow();     // 4 years ago\nmoment([2007, 0, 29]).fromNow(true); // 4 years\n```\n\n----------------------------------------\n\nTITLE: Accessing Moment.js Prototype in JavaScript\nDESCRIPTION: Demonstrates how to access the Moment.js prototype for extending functionality. The prototype is exposed through moment.fn, allowing developers to add custom methods.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/01-parsing/00-intro.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.fn\n```\n\n----------------------------------------\n\nTITLE: Formatting Date with Moment Timezone in JavaScript\nDESCRIPTION: This snippet demonstrates how to use Moment Timezone to format a date in a specific timezone. It creates a moment object, sets it to the 'America/Los_Angeles' timezone, and formats it.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment-timezone/00-use-it/02-browser.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmoment().tz(\"America/Los_Angeles\").format();\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Moment.js in Node.js (ES6)\nDESCRIPTION: This example shows how to import Moment.js using ES6 module syntax. It then demonstrates the same basic usage of formatting the current date and time.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/00-use-it/01-node-js.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport moment from 'moment';\nmoment().format();\n```\n\n----------------------------------------\n\nTITLE: Setting Time Units in Moment.js\nDESCRIPTION: Demonstrates how to use the set() method in Moment.js to set various time units. The method accepts either a string unit and integer value, or an object with unit-value pairs. Units are case-insensitive and support plural and short forms.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/02-get-set/20-set.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmoment().set('year', 2013);\nmoment().set('month', 3);  // April\nmoment().set('date', 1);\nmoment().set('hour', 13);\nmoment().set('minute', 20);\nmoment().set('second', 30);\nmoment().set('millisecond', 123);\n\nmoment().set({'year': 2013, 'month': 3});\n```\n\n----------------------------------------\n\nTITLE: Creating Durations with Specific Units in Moment.js\nDESCRIPTION: Creates duration objects with specific units of measurement such as seconds, minutes, hours, days, weeks, months, and years. From version 2.25.0, string values can also be used for numeric parameters.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/08-durations/01-creating.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.duration(2, 'seconds');\nmoment.duration(2, 'minutes');\nmoment.duration(2, 'hours');\nmoment.duration(2, 'days');\nmoment.duration(2, 'weeks');\nmoment.duration(2, 'months');\nmoment.duration(2, 'years');\nmoment.duration('2', 'years'); // from 2.25.0\n```\n\n----------------------------------------\n\nTITLE: Retrieving Date-Time Components with get() Method in Moment.js\nDESCRIPTION: This code demonstrates how to use the get() method to extract individual components of a date-time object in Moment.js. The method accepts various date-time units as string arguments and is equivalent to calling the corresponding unit method directly.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/02-get-set/19-get.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmoment().get('year');\nmoment().get('month');  // 0 to 11\nmoment().get('date');\nmoment().get('hour');\nmoment().get('minute');\nmoment().get('second');\nmoment().get('millisecond');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmoment().get(unit) === moment()[unit]()\n```\n\n----------------------------------------\n\nTITLE: Setting Day of Week with Numeric Values in Moment.js\nDESCRIPTION: Demonstrates how to set the day of the week using numeric values, including examples of setting to previous, current, and future weeks. The method accepts values from -7 to 24, adjusting the date accordingly.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/02-get-set/06-day.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmoment().day(-7); // last Sunday (0 - 7)\nmoment().day(0); // this Sunday (0)\nmoment().day(7); // next Sunday (0 + 7)\nmoment().day(10); // next Wednesday (3 + 7)\nmoment().day(24); // 3 Wednesdays from now (3 + 7 + 7 + 7)\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of moment.duration().humanize() in JavaScript\nDESCRIPTION: Demonstrates how to use the humanize method to convert duration objects into human-readable strings. This method converts time measurements into natural language descriptions like 'a minute', '2 minutes', or 'a day'.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/08-durations/03-humanize.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.duration(1, \"minutes\").humanize(); // a minute\nmoment.duration(2, \"minutes\").humanize(); // 2 minutes\nmoment.duration(24, \"hours\").humanize();  // a day\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of moment.duration().humanize() in JavaScript\nDESCRIPTION: Demonstrates how to use the humanize method to convert duration objects into human-readable strings. This method converts time measurements into natural language descriptions like 'a minute', '2 minutes', or 'a day'.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/08-durations/03-humanize.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.duration(1, \"minutes\").humanize(); // a minute\nmoment.duration(2, \"minutes\").humanize(); // 2 minutes\nmoment.duration(24, \"hours\").humanize();  // a day\n```\n\n----------------------------------------\n\nTITLE: Converting Moment Instance to Object in JavaScript using Moment.js\nDESCRIPTION: Demonstrates how to use the toObject() method to convert a Moment.js instance into a plain JavaScript object containing all date and time components.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/04-displaying/15-as-object.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmoment().toObject()  // {\n                     //     years: 2015\n                     //     months: 6\n                     //     date: 26,\n                     //     hours: 1,\n                     //     minutes: 53,\n                     //     seconds: 14,\n                     //     milliseconds: 600\n                     // }\n```\n\n----------------------------------------\n\nTITLE: Comparing Moments with Granularity in Moment.js\nDESCRIPTION: Compares moments with specified granularity units like year. When providing a unit, it will match all units equal or larger.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/05-query/02-is-same.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmoment('2010-10-20').isSame('2009-12-31', 'year');  // false\nmoment('2010-10-20').isSame('2010-01-01', 'year');  // true\nmoment('2010-10-20').isSame('2010-12-31', 'year');  // true\nmoment('2010-10-20').isSame('2011-01-01', 'year');  // false\n```\n\n----------------------------------------\n\nTITLE: Customizing Long Form Timezone Names with zoneName\nDESCRIPTION: Example showing how to override the zoneName method to provide long-form timezone names, which can be displayed using the 'zz' format token. This is useful for localizing timezone names.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment-timezone/01-using-timezones/04-formatting.md#2025-04-08_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar abbrs = {\n    EST : 'Eastern Standard Time',\n    EDT : 'Eastern Daylight Time',\n    CST : 'Central Standard Time',\n    CDT : 'Central Daylight Time',\n    MST : 'Mountain Standard Time',\n    MDT : 'Mountain Daylight Time',\n    PST : 'Pacific Standard Time',\n    PDT : 'Pacific Daylight Time',\n};\n\nmoment.fn.zoneName = function () {\n    var abbr = this.zoneAbbr();\n    return abbrs[abbr] || abbr;\n};\n\nmoment.tz([2012, 0], 'America/New_York').format('zz');    // Eastern Standard Time\nmoment.tz([2012, 5], 'America/New_York').format('zz');    // Eastern Daylight Time\nmoment.tz([2012, 0], 'America/Los_Angeles').format('zz'); // Pacific Standard Time\nmoment.tz([2012, 5], 'America/Los_Angeles').format('zz'); // Pacific Daylight Time\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Deprecated moment().zone() Usage in JavaScript\nDESCRIPTION: This snippet shows the deprecated usage of moment().zone() and its replacement moment().utcOffset(). It illustrates how the sign of the offset has been corrected in the new method.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/guides/moment/02-warnings/07-zone.md#2025-04-08_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nmoment().zone()\n360\n//is replaced by\nmoment().utcOffset()\n-360\n\nmoment().zone(420)\n//is replaced by \nmoment().utcOffset(-420)\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Minutes in Moment.js\nDESCRIPTION: Methods to get or set the minutes component of a Moment.js datetime object. Accepts values from 0-59 and will carry over to hours if range is exceeded.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/02-get-set/03-minute.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmoment().minute(Number);\nmoment().minute(); // Number\nmoment().minutes(Number);\nmoment().minutes(); // Number\n```\n\n----------------------------------------\n\nTITLE: Decimal Values in Time Addition\nDESCRIPTION: Demonstrates how decimal values are handled when adding time units.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/03-manipulating/01-add.md#2025-04-08_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nmoment().add(1.5, 'months') == moment().add(2, 'months')\nmoment().add(.7, 'years') == moment().add(8, 'months') //.7*12 = 8.4, rounded to 8\n```\n\n----------------------------------------\n\nTITLE: Basic Date Comparison with isSameOrAfter in Moment.js\nDESCRIPTION: Basic examples of using the isSameOrAfter method to compare dates in Moment.js. The method returns true if the first date is the same as or after the second date.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/05-query/05-is-same-or-after.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmoment('2010-10-20').isSameOrAfter('2010-10-19'); // true\nmoment('2010-10-20').isSameOrAfter('2010-10-20'); // true\nmoment('2010-10-20').isSameOrAfter('2010-10-21'); // false\n```\n\n----------------------------------------\n\nTITLE: Time Zone List Response Format in Moment.js\nDESCRIPTION: Example response from moment.tz.zonesForCountry() showing the returned array of timezone names sorted alphabetically.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment-timezone/01-using-timezones/08-getting-country-zones.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n[\"America/Adak\", \"America/Anchorage\", ... \"Pacific/Honolulu\"]\n```\n\n----------------------------------------\n\nTITLE: Initializing MomentJS with Complete Array Parameters\nDESCRIPTION: Creates a moment object using an array with all possible parameters: year, month, day, hour, minute, second, and millisecond. Month value is zero-indexed.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/01-parsing/10-array.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmoment([2010, 1, 14, 15, 25, 50, 125]); // February 14th, 3:25:50.125 PM\n```\n\n----------------------------------------\n\nTITLE: Converting Duration to Total Seconds in Moment.js\nDESCRIPTION: Shows how to use moment.duration().asSeconds() to convert a duration to its total length in seconds. Returns a decimal number representing the total duration in seconds.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/08-durations/05-seconds.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.duration(500).asSeconds(); // 0.5\nmoment.duration(1500).asSeconds(); // 1.5\nmoment.duration(15000).asSeconds(); // 15\n```\n\n----------------------------------------\n\nTITLE: Comparing Dates with isSameOrBefore in Moment.js\nDESCRIPTION: Demonstrates basic usage of the isSameOrBefore method to compare dates. The method returns true if the first date is the same as or before the second date, and false otherwise.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/05-query/04-is-same-or-before.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmoment('2010-10-20').isSameOrBefore('2010-10-21');  // true\nmoment('2010-10-20').isSameOrBefore('2010-10-20');  // true\nmoment('2010-10-20').isSameOrBefore('2010-10-19');  // false\n```\n\n----------------------------------------\n\nTITLE: Chaining Multiple Date Manipulations in Moment.js\nDESCRIPTION: This snippet demonstrates how to chain multiple date manipulation methods in Moment.js. It adds 7 days, subtracts 1 month, sets the year to 2009, and sets the time to midnight. This showcases the fluent interface pattern used by Moment.js.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/03-manipulating/00-intro.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmoment().add(7, 'days').subtract(1, 'months').year(2009).hours(0).minutes(0).seconds(0);\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Seconds with Moment.js\nDESCRIPTION: These methods allow you to get or set the seconds of a Moment.js object. They accept numbers from 0 to 59 and will bubble up to minutes if the range is exceeded. The 'second' and 'seconds' methods are aliases of each other.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/02-get-set/02-second.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmoment().second(Number);\nmoment().second(); // Number\nmoment().seconds(Number);\nmoment().seconds(); // Number\n```\n\n----------------------------------------\n\nTITLE: Defining a Locale with Undefined Parent in Moment.js\nDESCRIPTION: Creates a locale with a parent that hasn't been defined or loaded yet. Introduced in version 2.16.0, this allows for defining dependencies before the parent locale is available.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/07-customization/00-intro.md#2025-04-08_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.defineLocale('fakeLocale', {parentLocale:'xyz'})\n```\n\n----------------------------------------\n\nTITLE: Invalid Date Validation\nDESCRIPTION: Examples of validating parsed dates using isValid()\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/01-parsing/03-string-format.md#2025-04-08_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmoment(\"2010 13\",           \"YYYY MM\").isValid();     // false (not a real month)\nmoment(\"2010 11 31\",        \"YYYY MM DD\").isValid();  // false (not a real day)\nmoment(\"2010 2 29\",         \"YYYY MM DD\").isValid();  // false (not a leap year)\nmoment(\"2010 notamonth 29\", \"YYYY MMM DD\").isValid(); // false (not a real month name)\n```\n\n----------------------------------------\n\nTITLE: Default Current Time Comparison\nDESCRIPTION: Demonstrates the default behavior of isAfter() when no parameters are provided, comparing against current time.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/05-query/03-is-after.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmoment().isAfter(); // false\n```\n\n----------------------------------------\n\nTITLE: Switching Locales in Moment.js\nDESCRIPTION: This snippet shows how to switch between different locales in Moment.js and how it affects the output of date formatting functions.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/06-i18n/01-changing-locale.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.locale('fr');\nmoment(1316116057189).fromNow(); // il y a une heure\nmoment.locale('en');\nmoment(1316116057189).fromNow(); // an hour ago\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Moment Timezone in JavaScript\nDESCRIPTION: Demonstrates how to require moment-timezone and use it to format a date in a specific timezone.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment-timezone/00-use-it/04-webpack.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar moment = require('moment-timezone');\nmoment().tz(\"America/Los_Angeles\").format();\n```\n\n----------------------------------------\n\nTITLE: Converting Between UTC and Local Time in MomentJS\nDESCRIPTION: Shows how to switch between UTC and local time modes using the local() method\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/01-parsing/13-utc.md#2025-04-08_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar a = moment.utc([2011, 0, 1, 8]);\na.hours(); // 8 UTC\na.local();\na.hours(); // 0 PST\n```\n\n----------------------------------------\n\nTITLE: Converting Between UTC and Local Time in MomentJS\nDESCRIPTION: Shows how to switch between UTC and local time modes using the local() method\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/01-parsing/13-utc.md#2025-04-08_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar a = moment.utc([2011, 0, 1, 8]);\na.hours(); // 8 UTC\na.local();\na.hours(); // 0 PST\n```\n\n----------------------------------------\n\nTITLE: Setting the Quarter with Moment.js\nDESCRIPTION: Examples of setting the quarter (1-4) for a Moment.js date object using the quarter() method. Setting the quarter adjusts the month appropriately while preserving the day and time values.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/02-get-set/13-quarter.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmoment('2013-01-01T00:00:00.000').quarter(2) // '2013-04-01T00:00:00.000'\nmoment('2013-02-05T05:06:07.000').quarter(2).format() // '2013-05-05T05:06:07-07:00'\n```\n\n----------------------------------------\n\nTITLE: Getting Current Locale in Moment.js\nDESCRIPTION: Demonstrates how to check and change the current locale using moment.locale() method. Shows examples of setting the locale to English and French, and retrieving the active locale.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/06-i18n/06-getting-locale.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.locale('en'); // set to english\nmoment.locale(); // returns 'en'\nmoment.locale('fr'); // set to french\nmoment.locale(); // returns 'fr'\n```\n\n----------------------------------------\n\nTITLE: Supported Time Units for isSame Method\nDESCRIPTION: Lists the time units that are supported for the isSame method, which are the same units supported by the startOf method.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/05-query/02-is-same.md#2025-04-08_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nyear month week isoWeek day hour minute second\n```\n\n----------------------------------------\n\nTITLE: Parsing with Locale and Strictness in Moment.js\nDESCRIPTION: Shows how to parse dates with multiple formats while specifying locale and strictness. This allows for more precise control over the parsing process.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/01-parsing/04-string-formats.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmoment(\"29-06-1995\", [\"MM-DD-YYYY\", \"DD-MM-YYYY\"], 'fr');       // uses 'fr' locale\nmoment(\"29-06-1995\", [\"MM-DD-YYYY\", \"DD-MM-YYYY\"], true);       // uses strict parsing\nmoment(\"05-06-1995\", [\"MM-DD-YYYY\", \"DD-MM-YYYY\"], 'fr', true); // uses 'fr' locale and strict parsing\n```\n\n----------------------------------------\n\nTITLE: Parsing with Locale and Strictness in Moment.js\nDESCRIPTION: Shows how to parse dates with multiple formats while specifying locale and strictness. This allows for more precise control over the parsing process.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/01-parsing/04-string-formats.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmoment(\"29-06-1995\", [\"MM-DD-YYYY\", \"DD-MM-YYYY\"], 'fr');       // uses 'fr' locale\nmoment(\"29-06-1995\", [\"MM-DD-YYYY\", \"DD-MM-YYYY\"], true);       // uses strict parsing\nmoment(\"05-06-1995\", [\"MM-DD-YYYY\", \"DD-MM-YYYY\"], 'fr', true); // uses 'fr' locale and strict parsing\n```\n\n----------------------------------------\n\nTITLE: Importing Moment Timezone Without Data and Loading Custom Data\nDESCRIPTION: Example of importing moment-timezone without pre-loaded timezone data and then manually loading custom data. This approach provides maximum flexibility for custom timezone data.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment-timezone/00-use-it/01-node-js.md#2025-04-08_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport moment from 'moment-timezone/moment-timezone.js'; // or .min.js\nmoment.tz.load(customData);\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of isBefore Method in Moment.js\nDESCRIPTION: Demonstrates how to compare if one date is before another date using the isBefore method. The method returns true if the first moment is before the second moment.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/05-query/01-is-before.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmoment('2010-10-20').isBefore('2010-10-21'); // true\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of moment().to() Method in Moment.js\nDESCRIPTION: Demonstrates the basic use of moment().to() method to display the relative time between two moments. In this example, it shows the relationship between January 28, 2007 and January 29, 2007.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/04-displaying/05-to.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar a = moment([2007, 0, 28]);\nvar b = moment([2007, 0, 29]);\na.to(b) // \"in a day\"\n```\n\n----------------------------------------\n\nTITLE: Initializing MomentJS with Partial Array Parameters\nDESCRIPTION: Demonstrates creating moment objects with partial array parameters. Omitted values default to their lowest possible values.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/01-parsing/10-array.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmoment([2010]);        // January 1st\nmoment([2010, 6]);     // July 1st\nmoment([2010, 6, 10]); // July 10th\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting ISO Week Year with Moment.js\nDESCRIPTION: The isoWeekYear() method can be used to get the current ISO week-year of a moment object or set it to a new value. It accepts an optional number parameter to set the ISO week-year.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/02-get-set/16-iso-week-year.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmoment().isoWeekYear(Number);\nmoment().isoWeekYear(); // Number\n```\n\n----------------------------------------\n\nTITLE: Using a Function for Month Names in Moment.js\nDESCRIPTION: This snippet shows how to use a function to define month names in Moment.js. It allows for more complex logic, such as handling different grammatical cases based on the formatting string.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/07-customization/01-month-names.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.updateLocale('en', {\n    months : function (momentToFormat, format) {\n        // momentToFormat is the moment currently being formatted\n        // format is the formatting string\n        if (/^MMMM/.test(format)) { // if the format starts with 'MMMM'\n            return nominative[momentToFormat.month()];\n        } else {\n            return subjective[momentToFormat.month()];\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Weeks in Year using Moment.js\nDESCRIPTION: This snippet demonstrates how to use the weeksInYear() method in Moment.js. It returns the number of weeks in the current year based on the locale settings.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/02-get-set/17-weeks-in-year.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmoment().weeksInYear();\n```\n\n----------------------------------------\n\nTITLE: Different Parameter Types for moment().to() Method in Moment.js\nDESCRIPTION: Shows various ways to provide the target date to the moment().to() method, including passing a Moment object, array, Date object, or string. All formats result in the same relative time calculation.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/04-displaying/05-to.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar a = moment([2007, 0, 28]);\nvar b = moment([2007, 0, 29]);\na.to(b);                     // \"in a day\"\na.to([2007, 0, 29]);         // \"in a day\"\na.to(new Date(2007, 0, 29)); // \"in a day\"\na.to(\"2007-01-29\");          // \"in a day\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Moment Object from a String in JavaScript\nDESCRIPTION: Creates a Moment.js object from a string representing a date. This example creates a moment for Christmas Day 1995.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/01-parsing/02-string.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar day = moment(\"1995-12-25\");\n```\n\n----------------------------------------\n\nTITLE: Creating a Moment Object from a String in JavaScript\nDESCRIPTION: Creates a Moment.js object from a string representing a date. This example creates a moment for Christmas Day 1995.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/01-parsing/02-string.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar day = moment(\"1995-12-25\");\n```\n\n----------------------------------------\n\nTITLE: Using Locale-Specific Methods in Moment.js\nDESCRIPTION: Illustrates the various locale-specific methods available through the localeData object in Moment.js. These methods allow manipulation and formatting of dates, times, and other locale-dependent information.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/06-i18n/08-locale-data.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlocaleData.months(aMoment);  // full month name of aMoment\nlocaleData.monthsShort(aMoment);  // short month name of aMoment\nlocaleData.monthsParse(longOrShortMonthString);  // returns month id (0 to 11) of input\nlocaleData.weekdays(aMoment);  // full weekday name of aMoment\nlocaleData.weekdaysShort(aMoment);  // short weekday name of aMoment\nlocaleData.weekdaysMin(aMoment);  // min weekday name of aMoment\nlocaleData.weekdaysParse(minShortOrLongWeekdayString);  // returns weekday id (0 to 6) of input\nlocaleData.longDateFormat(dateFormat);  // returns the full format of abbreviated date-time formats LT, L, LL and so on\nlocaleData.isPM(amPmString);  // returns true iff amPmString represents PM\nlocaleData.meridiem(hours, minutes, isLower);  // returns am/pm string for particular time-of-day in upper/lower case\nlocaleData.calendar(key, aMoment);  // returns a format that would be used for calendar representation. Key is one of 'sameDay', 'nextDay', 'lastDay', 'nextWeek', 'prevWeek', 'sameElse'\nlocaleData.relativeTime(number, withoutSuffix, key, isFuture);  // returns relative time string, key is on of 's', 'm', 'mm', 'h', 'hh', 'd', 'dd', 'M', 'MM', 'y', 'yy'. Single letter when number is 1.\nlocaleData.pastFuture(diff, relTime);  // convert relTime string to past or future string depending on diff\nlocaleData.ordinal(number);  // convert number to ordinal string 1 -> 1st\nlocaleData.preparse(str);  // called before parsing on every input string\nlocaleData.postformat(str);  // called after formatting on every string\nlocaleData.week(aMoment);  // returns week-of-year of aMoment\nlocaleData.invalidDate();  // returns a translation of 'Invalid date'\nlocaleData.firstDayOfWeek();  // 0-6 (Sunday to Saturday)\nlocaleData.firstDayOfYear();  // 0-15 Used to determine first week of the year.\n```\n\n----------------------------------------\n\nTITLE: Referencing Moment.js Prototype Methods in JavaScript\nDESCRIPTION: Shows different ways to reference methods on the Moment.js prototype in documentation. This includes using moment#method notation, which is equivalent to accessing methods through moment.fn or Moment.prototype.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/01-parsing/00-intro.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nMoment.prototype.format == moment.fn.format == moment#format\n```\n\n----------------------------------------\n\nTITLE: Setting ISO Weekday Using Numbers in Moment.js\nDESCRIPTION: Example of setting the ISO weekday using numeric values where 1 represents Monday and 7 represents Sunday. If the provided value exceeds the range, it will bubble up to other weeks.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/02-get-set/08-iso-weekday.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmoment().isoWeekday(1); // Monday\nmoment().isoWeekday(7); // Sunday\n```\n\n----------------------------------------\n\nTITLE: Using instanceof Operator to Check for Moment Objects in JavaScript\nDESCRIPTION: Shows how to use the JavaScript instanceof operator to check if a variable is a moment object. This approach is available from version 2.11.0 and provides an alternative syntax for type checking.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/05-query/10-is-a-moment.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmoment() instanceof moment // true\n```\n\n----------------------------------------\n\nTITLE: Conceptualizing Moment.js diff() as Subtraction\nDESCRIPTION: This snippet provides a conceptual explanation of the diff() method by relating it to a subtraction operation. It shows how the order of moments determines whether the result is positive or negative.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/04-displaying/07-difference.md#2025-04-08_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n          // a < b\na.diff(b) // a - b < 0\nb.diff(a) // b - a > 0\n```\n\n----------------------------------------\n\nTITLE: Setting Default Time Zone in Moment.js\nDESCRIPTION: This snippet demonstrates how to set the default time zone for Moment.js to 'America/New_York'. This is a global setting that affects all new moment objects created after this call.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment-timezone/01-using-timezones/05-default-timezone.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.tz.setDefault(\"America/New_York\");\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Week Year in Moment.js\nDESCRIPTION: The weekYear() method can be used to get or set the week-year for a Moment object. When called without arguments, it returns the current week-year as a number. When called with a number argument, it sets the week-year to that value.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/02-get-set/15-week-year.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmoment().weekYear(Number);\nmoment().weekYear(); // Number\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Week of Year with MomentJS\nDESCRIPTION: Methods to get or set the week of the year in MomentJS. Both week() and weeks() functions are available, where week() can accept a number parameter to set the week, or return the current week number when called without parameters.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/02-get-set/10-week.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmoment().week(Number);\nmoment().week(); // Number\nmoment().weeks(Number);\nmoment().weeks(); // Number\n```\n\n----------------------------------------\n\nTITLE: Changing Timezone to UTC while Preserving Time in Moment.js\nDESCRIPTION: Demonstrates using utc(true) to change only the timezone to UTC without adjusting the time value, preserving the original time representation.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/03-manipulating/08-utc.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.parseZone('2016-05-03T22:15:01+02:00').utc(true).format(); //\"2016-05-03T22:15:01Z\"\n```\n\n----------------------------------------\n\nTITLE: Basic JSON Serialization with MomentJS\nDESCRIPTION: Demonstrates the default behavior of JSON.stringify() with Moment objects, which converts to UTC-adjusted ISO8601 strings\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/04-displaying/13-as-json.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nJSON.stringify({\n    postDate : moment()\n}); // '{\"postDate\":\"2013-02-04T22:44:30.652Z\"}'\n```\n\n----------------------------------------\n\nTITLE: Handling Invalid Moments in Min Operation\nDESCRIPTION: Shows how moment.min() handles invalid moment instances, returning an invalid moment if any input is invalid since version 2.10.5.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/02-get-set/22-min.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.min(moment(), moment.invalid()).isValid() === false\nmoment.min(moment.invalid(), moment()).isValid() === false\nmoment.min([moment(), moment.invalid()]).isValid() === false\nmoment.min([moment.invalid(), moment()]).isValid() === false\n```\n\n----------------------------------------\n\nTITLE: Subtracting Time from Moment.js Durations\nDESCRIPTION: Demonstrates how to subtract time from a Moment.js duration object using the subtract() method. The example shows subtracting one duration object from another and accessing the result in days.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/08-durations/13-subtract.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar a = moment.duration(3, 'd');\nvar b = moment.duration(2, 'd');\na.subtract(b).days(); // 1\n```\n\n----------------------------------------\n\nTITLE: Using moment.max() with Arrays of Moment Instances in JavaScript\nDESCRIPTION: This example shows how to find the latest date in an array of friends' birthdays. It fetches friend data, maps the birthday strings to moment objects, and passes the array to moment.max().\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/02-get-set/21-max.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar friends = fetchFriends(); /* [{name: 'Dan', birthday: '11.12.1977'}, {name: 'Mary', birthday: '11.12.1986'}, {name: 'Stephan', birthday: '11.01.1993'}]*/\nvar friendsBirthDays = friends.map(function(friend){\n    return moment(friend.birthday, 'DD.MM.YYYY');\n});\nmoment.max(friendsBirthDays);  // '11.01.1993'\n```\n\n----------------------------------------\n\nTITLE: Converting from Fixed Offset to UTC in Moment.js\nDESCRIPTION: Shows how to convert a timestamp with a fixed offset (+02:00) to UTC time using the parseZone() and utc() methods together.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/03-manipulating/08-utc.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.parseZone('2016-05-03T22:15:01+02:00').utc().format(); //\"2016-05-03T20:15:01Z\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Months from Moment.js Duration\nDESCRIPTION: These methods allow you to access month-related information from a Moment.js duration object. The months() method returns the number of months (0-11) in the duration, while asMonths() returns the total length of the duration in months.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/08-durations/10-months.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.duration().months();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.duration().asMonths();\n```\n\n----------------------------------------\n\nTITLE: Checking DST Status with Moment.js\nDESCRIPTION: Demonstrates how to check if a specific date is in Daylight Saving Time using the isDST() method. The example shows two dates in March 2011, before and after the DST transition, for the 'en' locale. Note that this implementation has known limitations and may not be accurate for all cases.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/05-query/07-is-daylight-saving-time.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmoment([2011, 2, 12]).isDST(); // false, March 12 2011 is not DST\nmoment([2011, 2, 14]).isDST(); // true, March 14 2011 is DST\n// This example is for \"en\" locale: https://www.timeanddate.com/time/dst/2011.html\n```\n\n----------------------------------------\n\nTITLE: Using moment.normalizeUnits Function to Standardize Unit Names\nDESCRIPTION: Shows how the moment.normalizeUnits function converts various unit aliases to their standardized form. The function handles different cases and plural forms, always returning the singular, lowercase canonical unit name.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/09-utilities/01-normalize-units.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.normalizeUnits('y');      // 'year'\nmoment.normalizeUnits('Y');      // 'year'\nmoment.normalizeUnits('year');   // 'year'\nmoment.normalizeUnits('years');  // 'year'\nmoment.normalizeUnits('YeARS');  // 'year'\n```\n\n----------------------------------------\n\nTITLE: Duration-Based Addition in Moment.js\nDESCRIPTION: Example of adding time using duration objects.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/03-manipulating/01-add.md#2025-04-08_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar duration = moment.duration({'days' : 1});\nmoment([2012, 0, 31]).add(duration); // February 1\n```\n\n----------------------------------------\n\nTITLE: Retrieving Time Zones for a Country in Moment.js\nDESCRIPTION: Gets a list of time zones for a specified country using an ISO 3166-1 two-letter country code. Returns an array of timezone names sorted alphabetically.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment-timezone/01-using-timezones/08-getting-country-zones.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.tz.zonesForCountry('US');\n```\n\n----------------------------------------\n\nTITLE: Timezone and UTC Parsing\nDESCRIPTION: Shows how to parse dates with timezone information\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/01-parsing/03-string-format.md#2025-04-08_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmoment(\"2010-10-20 4:30\",       \"YYYY-MM-DD HH:mm\");   // parsed as 4:30 local time\nmoment(\"2010-10-20 4:30 +0000\", \"YYYY-MM-DD HH:mm Z\"); // parsed as 4:30 UTC\n```\n\n----------------------------------------\n\nTITLE: Disabling Relative Time with moment-shortformat Plugin\nDESCRIPTION: Shows how to disable relative time templates when using the short() method by passing false as an argument. This removes the 'ago' or 'in' designations and displays just the time unit.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/10-plugins/21-shortformat.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmoment().subtract(1, 'hour').short(false);\n// 1h\n```\n\n----------------------------------------\n\nTITLE: Setting Locale Ordinal Function - Current Syntax\nDESCRIPTION: Example showing how to update the English locale with a custom ordinal function in MomentJS 2.12.0 and later. The function handles ordinal suffixes (st, nd, rd, th) based on the number value.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/07-customization/12-ordinal.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.updateLocale('en', {\n    ordinal : Function\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Moment Objects with Object Syntax in JavaScript\nDESCRIPTION: This code demonstrates various ways to create Moment.js objects using object syntax. It shows how to specify different time units including years, months, days, hours, minutes, seconds, and milliseconds. The snippet also illustrates the use of both full and abbreviated key names, as well as string values for the units.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/01-parsing/06-object.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmoment({ hour:15, minute:10 });\nmoment({ y    :2010, M     :3, d   :5, h    :15, m      :10, s      :3, ms          :123});\nmoment({ year :2010, month :3, day :5, hour :15, minute :10, second :3, millisecond :123});\nmoment({ years:2010, months:3, days:5, hours:15, minutes:10, seconds:3, milliseconds:123});\nmoment({ years:2010, months:3, date:5, hours:15, minutes:10, seconds:3, milliseconds:123});\nmoment({ years:'2010', months:'3', date:'5', hours:'15', minutes:'10', seconds:'3', milliseconds:'123'});  // from 2.11.0\n```\n\n----------------------------------------\n\nTITLE: Date Time Parsing Example\nDESCRIPTION: Example of parsing both date and time together\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/01-parsing/03-string-format.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmoment('24/12/2019 09:15:00', \"DD MM YYYY hh:mm:ss\");\n```\n\n----------------------------------------\n\nTITLE: Retrieving Time Zone Name in Moment.js\nDESCRIPTION: This snippet demonstrates how to access the name property of a time zone object in Moment.js. The name represents the unique identifier of the time zone, following the IANA Time Zone database naming convention.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment-timezone/02-zone-object/01-name.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nzone.name; // America/Los_Angeles\n```\n\n----------------------------------------\n\nTITLE: Large Time Unit Addition in Moment.js\nDESCRIPTION: Examples of adding large time values without upper limits.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/03-manipulating/01-add.md#2025-04-08_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmoment().add(1000000, 'milliseconds'); // a million milliseconds\nmoment().add(360, 'days'); // 360 days\n```\n\n----------------------------------------\n\nTITLE: Customizing Fiscal Quarter Start Month in Moment.js\nDESCRIPTION: Shows how to customize the starting month of the fiscal year by passing a month number to the fquarter() method. In this example, July (month 7) is set as the first month of the fiscal year.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/10-plugins/13-fquarter.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmoment(\"2013-01-01\").fquarter(7);\n// Q3 2012/13\n```\n\n----------------------------------------\n\nTITLE: Timestamp and Date Object Parsing\nDESCRIPTION: Demonstrates parsing Unix timestamps and Date objects with timezone support, showing equivalent ways to achieve the same result.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment-timezone/01-using-timezones/01-parsing-in-zone.md#2025-04-08_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar timestamp = 1403454068850,\n    date = new Date(timestamp);\n\nmoment.tz(timestamp, \"America/Los_Angeles\").format(); // 2014-06-22T09:21:08-07:00\nmoment(timestamp).tz(\"America/Los_Angeles\").format(); // 2014-06-22T09:21:08-07:00\n\nmoment.tz(date, \"America/Los_Angeles\").format();      // 2014-06-22T09:21:08-07:00\nmoment(date).tz(\"America/Los_Angeles\").format();      // 2014-06-22T09:21:08-07:00\n```\n\n----------------------------------------\n\nTITLE: Flexible Date Delimiter Parsing\nDESCRIPTION: Shows how Moment.js ignores non-alphanumeric characters when parsing dates\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/01-parsing/03-string-format.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmoment(\"12-25-1995\", \"MM-DD-YYYY\");\nmoment(\"12/25/1995\", \"MM-DD-YYYY\");\n```\n\n----------------------------------------\n\nTITLE: Installing MomentJS Website on Windows\nDESCRIPTION: Command to compile the MomentJS website on Windows using PowerShell. Requires PowerShell and npm to be installed as prerequisites.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/readme.md#2025-04-08_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n./compile.ps1\n\nPrerequisite: PowerShell and npm were installed.\n```\n\n----------------------------------------\n\nTITLE: Using moment-business plugin for weekday operations\nDESCRIPTION: This snippet demonstrates how to use the moment-business plugin to check if a date is a weekday and how to add workdays to a moment. The plugin provides methods for handling business days, considering Monday through Friday as work days.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/10-plugins/20-moment-business.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport business from 'moment-business';\n\n// true if the moment is Mon-Fri, false otherwise\nbusiness.isWeekDay(someMoment);\n\n// Adds five work days to the Moment\nbusiness.addWeekDays(someMoment, 5);\n```\n\n----------------------------------------\n\nTITLE: Updating Existing Locale Properties in Moment.js\nDESCRIPTION: Updates specific properties of an existing locale while maintaining others. Introduced in version 2.12.0, this function affects only newly created moments and changes the current global locale.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/07-customization/00-intro.md#2025-04-08_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.updateLocale('en', {\n  /**/\n});\n```\n\n----------------------------------------\n\nTITLE: DST Handling with Day Addition\nDESCRIPTION: Example of how daylight saving time is handled when adding days.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/03-manipulating/01-add.md#2025-04-08_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar m = moment(new Date(2011, 2, 12, 5, 0, 0)); // the day before DST in the US\nm.hours(); // 5\nm.add(1, 'days').hours(); // 5\n```\n\n----------------------------------------\n\nTITLE: Removing a Locale Definition in Moment.js\nDESCRIPTION: Demonstrates how to remove a previously defined locale by passing null as the second argument to moment.locale(). Once removed, the locale is no longer available for use.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/07-customization/00-intro.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.locale('fr'); // 'fr'\nmoment.locale('en'); // 'en'\nmoment.locale('fr', null);\nmoment.locale('fr'); // 'en'\n```\n\n----------------------------------------\n\nTITLE: Parsing ISO-8601 Strings with Moment.js\nDESCRIPTION: Demonstrates how to parse ISO-8601 formatted date strings using Moment.js. The example shows both direct parsing and parsing with a list of formats including ISO-8601.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/01-parsing/05-special-formats.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmoment(\"2010-01-01T05:06:07\", moment.ISO_8601);\nmoment(\"2010-01-01T05:06:07\", [\"YYYY\", moment.ISO_8601]);\n```\n\n----------------------------------------\n\nTITLE: Unit Hierarchy in isSame Comparisons\nDESCRIPTION: Demonstrates how when including a time unit parameter, the method checks that unit and all larger units. For example, 'month' checks month and year.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/05-query/02-is-same.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmoment('2010-01-01').isSame('2011-01-01', 'month'); // false, different year\nmoment('2010-01-01').isSame('2010-02-01', 'day');   // false, different month\n```\n\n----------------------------------------\n\nTITLE: Detailed Range Object Output in JavaScript\nDESCRIPTION: Demonstrates how to get a detailed object containing the numeric values for each time unit by passing true as the third parameter to preciseDiff.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/10-plugins/06-preciserange.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.preciseDiff(m1, m2, true);\n```\n\n----------------------------------------\n\nTITLE: Creating Durations with Multiple Units in Moment.js\nDESCRIPTION: Creates a duration object with multiple units of measurement using an object parameter. Both numeric and string values can be used for the unit amounts.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/08-durations/01-creating.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.duration({\n    seconds: 2,\n    minutes: 2,\n    hours: 2,\n    days: 2,\n    weeks: 2,\n    months: '2',\n    years: '2'\n});\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Year in Moment.js\nDESCRIPTION: These methods allow getting and setting the year for a moment object. The year() method is the preferred way to manipulate years, accepting numbers from -270,000 to 270,000. The years() method is deprecated as of version 2.6.0.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/02-get-set/14-year.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmoment().year(Number);\nmoment().year(); // Number\nmoment().years(Number);\nmoment().years(); // Number\n```\n\n----------------------------------------\n\nTITLE: Rounding Behavior when Subtracting Decimal Values in MomentJS (JavaScript)\nDESCRIPTION: Illustrates how MomentJS rounds decimal values when subtracting time. Months and years are converted to the nearest integer, affecting the final result.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/03-manipulating/02-subtract.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmoment().subtract(1.5, 'months') == moment().subtract(2, 'months')\nmoment().subtract(.7, 'years') == moment().subtract(8, 'months') //.7*12 = 8.4, rounded to 8\n```\n\n----------------------------------------\n\nTITLE: Preserving Time While Changing Time Zone in Moment.js\nDESCRIPTION: This snippet demonstrates using local(true) to change only the time zone without adjusting the time. When true is passed to local(), it maintains the same time but changes the time zone designation to the local time zone.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/03-manipulating/07-local.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.parseZone('2016-05-03T22:15:01+02:00').local(true).format(); //\"2016-05-03T22:15:01-05:00\"\n```\n\n----------------------------------------\n\nTITLE: Locale Change Effect on Existing Instances in Moment.js\nDESCRIPTION: This snippet demonstrates that changing the global locale doesn't affect existing Moment.js instances, but does affect new instances.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/06-i18n/01-changing-locale.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.locale('fr');\nvar m = moment(1316116057189);\nm.fromNow(); // il y a une heure\n\nmoment.locale('en');\nm.fromNow(); // il y a une heure\nmoment(1316116057189).fromNow(); // an hour ago\n```\n\n----------------------------------------\n\nTITLE: Using Moment Timezone with CommonJS in Node.js\nDESCRIPTION: Basic example of requiring and using moment-timezone in Node.js with CommonJS module format. This snippet shows how to format a date-time for a specific timezone.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment-timezone/00-use-it/01-node-js.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar moment = require('moment-timezone');\nmoment().tz(\"America/Los_Angeles\").format();\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Date of Month in Moment.js\nDESCRIPTION: Methods to get or set the day of the month in Moment.js. Accepts numbers from 1 to 31, and will bubble up to months if the range is exceeded. The deprecated 'dates()' method is mentioned with a recommendation to use 'date()' instead.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/02-get-set/05-date.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmoment().date(Number);\nmoment().date(); // Number\nmoment().dates(Number);\nmoment().dates(); // Number\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Bad: moment().date(day).month(month).year(year)\n\n// Good: moment().year(year).month(month).date(day)\n```\n\n----------------------------------------\n\nTITLE: Granularity Control with isSameOrAfter in Moment.js\nDESCRIPTION: Examples of using the isSameOrAfter method with granularity control to compare dates at a specific level of precision. The second parameter specifies the unit (e.g., 'year') to limit the comparison.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/05-query/05-is-same-or-after.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmoment('2010-10-20').isSameOrAfter('2011-12-31', 'year'); // false\nmoment('2010-10-20').isSameOrAfter('2010-01-01', 'year'); // true\nmoment('2010-10-20').isSameOrAfter('2009-12-31', 'year'); // true\n```\n\n----------------------------------------\n\nTITLE: Accessing Date Units with Aliases in Moment.js\nDESCRIPTION: Demonstrates how Moment.js allows various aliases for unit names when using the get method to access date components. The example shows that 'y', 'year', and 'years' are all treated as equivalent unit identifiers.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/09-utilities/01-normalize-units.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar m = moment();\nm.get('y');\nm.get('year');\nm.get('years');\n```\n\n----------------------------------------\n\nTITLE: Getting Millisecond Component with milliseconds()\nDESCRIPTION: Demonstrates using moment.duration().milliseconds() to get the millisecond component of a duration. Returns a number between 0 and 999, representing only the milliseconds part of the duration.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/08-durations/04-milliseconds.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.duration(500).milliseconds(); // 500\nmoment.duration(1500).milliseconds(); // 500\nmoment.duration(15000).milliseconds(); // 0\n```\n\n----------------------------------------\n\nTITLE: Setting UTC Offset with Hours in Moment.js\nDESCRIPTION: Illustrates how Moment.js interprets input values between -16 and 16 as hours instead of minutes when setting the UTC offset.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/03-manipulating/09-utc-offset.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// these are equivalent\nmoment().utcOffset(8);  // set hours offset\nmoment().utcOffset(480);  // set minutes offset (8 * 60)\n```\n\n----------------------------------------\n\nTITLE: Formatting Timezone Abbreviations with Moment.js Timezone\nDESCRIPTION: Examples of using the 'z' format token to display timezone abbreviations for different locations, showing how the abbreviation changes between standard time and daylight saving time.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment-timezone/01-using-timezones/04-formatting.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.tz([2012, 0], 'America/New_York').format('z');    // EST\nmoment.tz([2012, 5], 'America/New_York').format('z');    // EDT\nmoment.tz([2012, 0], 'America/Los_Angeles').format('z'); // PST\nmoment.tz([2012, 5], 'America/Los_Angeles').format('z'); // PDT\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Milliseconds in Moment.js\nDESCRIPTION: These methods allow getting or setting the milliseconds of a Moment object. They accept numbers from 0 to 999. If the range is exceeded, it will bubble up to the seconds.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/02-get-set/01-millisecond.md#2025-04-08_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nmoment().millisecond(Number);\nmoment().millisecond(); // Number\nmoment().milliseconds(Number);\nmoment().milliseconds(); // Number\n```\n\n----------------------------------------\n\nTITLE: Using Callback Functions for Calendar Formats in Moment.js\nDESCRIPTION: Shows how to use callback functions to dynamically determine calendar output formats based on context. This functionality was introduced in version 2.14.0 and allows for more complex conditional formatting.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/04-displaying/06-calendar-time.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmoment().calendar(null, {\n  sameDay: function (now) {\n    if (this.isBefore(now)) {\n      return '[Will Happen Today]';\n    } else {\n      return '[Happened Today]';\n    }\n    /* ... */\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using moment.isMoment() Method to Check for Moment Objects in JavaScript\nDESCRIPTION: Demonstrates how to use the moment.isMoment() utility function to check if a variable is a moment object. The method returns true only for moment objects and false for other types including undefined and native Date objects.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/05-query/10-is-a-moment.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.isMoment() // false\nmoment.isMoment(new Date()) // false\nmoment.isMoment(moment()) // true\n```\n\n----------------------------------------\n\nTITLE: Defining Month Names with Format and Standalone Forms in Moment.js\nDESCRIPTION: This snippet illustrates how to define month names using an object with format and standalone forms in Moment.js. It also shows how to specify a custom regular expression for determining when to use the format form.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/07-customization/01-month-names.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.updateLocale('en', {\n    months : {\n         format: 'sausio_vasario_kovo_balandžio_gegužės_birželio_liepos_rugpjūčio_rugsėjo_spalio_lapkričio_gruodžio'.split('_'),\n         standalone: 'sausis_vasaris_kovas_balandis_gegužė_birželis_liepa_rugpjūtis_rugsėjis_spalis_lapkritis_gruodis'.split('_'),\n         isFormat: /D[oD]?(\\[[^\\[\\]]*\\]|\\s+)+MMMM?|MMMM?(\\[[^\\[\\]]*\\]|\\s+)+D[oD]?/  // from 2.14.0\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Minutes from Moment.js Duration\nDESCRIPTION: The minutes() method retrieves the minutes component (0-59) from a Moment.js duration object. It returns the number of minutes within the hour.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/08-durations/06-minutes.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.duration().minutes();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Month Names in Moment.js\nDESCRIPTION: Shows how to get a list of all month names in the current locale using Moment.js. This returns an array of all 12 month names in their full form.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/06-i18n/07-listing-months-weekdays.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.months();\n```\n\n----------------------------------------\n\nTITLE: Setting Time Zone Offset with Hours in MomentJS\nDESCRIPTION: Demonstrates setting timezone offset using both minutes and hours format. Values between -16 and 16 are interpreted as hours.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/03-manipulating/10-timezone-offset.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// these are equivalent\nmoment().zone(480);\nmoment().zone(8);\n```\n\n----------------------------------------\n\nTITLE: Importing Pre-built Moment Timezone Bundles\nDESCRIPTION: Example of importing a pre-built moment-timezone bundle with a limited data range. This approach is useful for reducing bundle size by including only necessary timezone data.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment-timezone/00-use-it/01-node-js.md#2025-04-08_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport moment from 'moment-timezone/builds/moment-timezone-with-data-10-year-range.js'; // or .min.js\n```\n\n----------------------------------------\n\nTITLE: Explicit Moment.js Object Cloning\nDESCRIPTION: Shows how to explicitly clone a Moment.js object using the clone() method. This creates an independent copy of the moment object that maintains its own state separate from the original.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/01-parsing/12-moment-clone.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar a = moment([2012]);\nvar b = a.clone();\na.year(2000);\nb.year(); // 2012\n```\n\n----------------------------------------\n\nTITLE: Getting Seconds Component using Moment.js Duration\nDESCRIPTION: Demonstrates using moment.duration().seconds() to get the seconds component of a duration. Returns a number between 0 and 59, representing only the seconds part of the duration.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/08-durations/05-seconds.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.duration(500).seconds(); // 0\nmoment.duration(1500).seconds(); // 1\nmoment.duration(15000).seconds(); // 15\n```\n\n----------------------------------------\n\nTITLE: Handling Decimal Values in Day and Month Calculations\nDESCRIPTION: Shows how Moment.js handles decimal values for days and months by rounding to the nearest integer.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/guides/moment/00-lib-concepts/02-date-time-math.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmoment().add(1.5, 'days') == moment().add(2, 'days')\nmoment().add(-1.5, 'days') == moment().add(-2, 'days') == moment().subtract(1.5, 'days') == moment().subtract(2, 'days')\nmoment().add(2.3, 'months') == moment().add(2, 'months')\nmoment().add(-2.3, 'months') == moment().add(-2, 'months') == moment().subtract(2.3, 'months') == moment().subtract(2, 'months')\n```\n\n----------------------------------------\n\nTITLE: Setting Month by Name in Moment.js (JavaScript)\nDESCRIPTION: Demonstrates how to set the month using a string name in Moment.js. This functionality was introduced in version 2.1.0 and supports both full month names and abbreviations, parsed according to the current locale.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/02-get-set/12-month.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmoment().month(\"January\");\nmoment().month(\"Feb\");\n```\n\n----------------------------------------\n\nTITLE: Configuring QUnit.dump Object Depth Limit\nDESCRIPTION: Sets a configurable limit for the depth of objects when using QUnit.dump. This allows controlling how detailed object dumps are in test output.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/bower_components/qunit/History.md#2025-04-08_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nQUnit.dump.maxDepth = 5; // Set max object depth to 5 levels\n```\n\n----------------------------------------\n\nTITLE: Displaying Moment.js Date in Default Format\nDESCRIPTION: Demonstrates how to display a Moment.js date object using the default toString() method. This method returns the date in a standardized format.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/04-displaying/00-intro.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmoment().toString();\n```\n\n----------------------------------------\n\nTITLE: Multiple Input Format Timezone Parsing\nDESCRIPTION: Demonstrates parsing different input formats (arrays, strings, objects) with timezone support and how offsets are applied.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment-timezone/01-using-timezones/01-parsing-in-zone.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar arr = [2013, 5, 1],\n    str = \"2013-12-01\",\n    obj = { year : 2013, month : 5, day : 1 };\n\nmoment.tz(arr, \"America/Los_Angeles\").format(); // 2013-06-01T00:00:00-07:00\nmoment.tz(str, \"America/Los_Angeles\").format(); // 2013-12-01T00:00:00-08:00\nmoment.tz(obj, \"America/Los_Angeles\").format(); // 2013-06-01T00:00:00-07:00\n\nmoment.tz(arr, \"America/New_York\").format();    // 2013-06-01T00:00:00-04:00\nmoment.tz(str, \"America/New_York\").format();    // 2013-12-01T00:00:00-05:00\nmoment.tz(obj, \"America/New_York\").format();    // 2013-06-01T00:00:00-04:00\n```\n\n----------------------------------------\n\nTITLE: Getting ISO Weeks in Year with Moment.js\nDESCRIPTION: Returns the number of weeks in the current moment's year according to ISO 8601 week date standards. The result will be either 52 or 53 weeks depending on the specific year.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/02-get-set/18-iso-weeks-in-year.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmoment().isoWeeksInYear();\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Time Zone Names with Moment.js Timezone\nDESCRIPTION: This snippet demonstrates how to use the moment.tz.names() method to get an array of all available time zone names. The method returns a string array containing time zone identifiers.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment-timezone/01-using-timezones/07-getting-zone-names.md#2025-04-08_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nmoment.tz.names(); // [\"Africa/Abidjan\", \"Africa/Accra\", \"Africa/Addis_Ababa\", ...]\n```\n\n----------------------------------------\n\nTITLE: Accessing Locale Data in Moment.js\nDESCRIPTION: Demonstrates how to retrieve locale data for the current locale or a specific locale using Moment.js. This snippet shows how to get the locale data object, which provides access to various locale-specific methods.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/06-i18n/08-locale-data.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// get current locale\nvar currentLocaleData = moment.localeData();\nvar frLocaleData = moment.localeData('fr');\n```\n\n----------------------------------------\n\nTITLE: Moment.js Locale Configuration in TypeScript\nDESCRIPTION: Example showing how to import and switch between different locales in Moment.js using TypeScript. Demonstrates importing a specific locale and changing the active locale.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/00-use-it/09-typescript.md#2025-04-08_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as moment from 'moment';\nimport 'moment/locale/pt-br';\n\nconsole.log(moment.locale()); // en\nmoment.locale('fr');\nconsole.log(moment.locale()); // fr\nmoment.locale('pt-br');\nconsole.log(moment.locale()); // pt-br\n```\n\n----------------------------------------\n\nTITLE: Finding Minimum Date with Moment.js\nDESCRIPTION: Demonstrates how to find the earliest date between two Moment instances using both direct arguments and array syntax.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/02-get-set/22-min.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar a = moment().subtract(1, 'day');\nvar b = moment().add(1, 'day');\nmoment.min(a, b);  // a\nmoment.min([a, b]); // a\n```\n\n----------------------------------------\n\nTITLE: Parsing Ambiguous Dates with Moment.js\nDESCRIPTION: Shows how Moment.js correctly handles date formats by explicitly specifying the expected format (DD/MM/YYYY) and using strict parsing.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/guides/moment/00-lib-concepts/04-js-date.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmoment('01/12/2016', 'DD/MM/YYYY', true).format()\n\"2016-12-01T00:00:00-06:00\"\n```\n\n----------------------------------------\n\nTITLE: Customizing MomentJS JSON Serialization\nDESCRIPTION: Shows how to override the toJSON method to maintain local timezone offset in the output\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/04-displaying/13-as-json.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.fn.toJSON = function() { return this.format(); }\n```\n\n----------------------------------------\n\nTITLE: Creating a UTC Moment from Unix Timestamp in JavaScript\nDESCRIPTION: Illustrates how to create a UTC moment object from a Unix timestamp. Since moment.unix() creates a local mode object by default, .utc() is called to convert it to UTC.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/01-parsing/08-unix-timestamp.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar day = moment.unix(1318781876).utc();\n```\n\n----------------------------------------\n\nTITLE: Adding Time Durations with Moment.js\nDESCRIPTION: Demonstrates how to add two duration objects together using Moment.js. The example shows adding two durations of days and accessing the result using the days() method.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/08-durations/12-add.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar a = moment.duration(1, 'd');\nvar b = moment.duration(2, 'd');\na.add(b).days(); // 3\n```\n\n----------------------------------------\n\nTITLE: Various Input Types for max() Function in JavaScript\nDESCRIPTION: Shows different ways to use the max() function with various input types accepted by Moment.js, including moment objects, date strings, formatted strings, and native Date objects.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/03-manipulating/05-max.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmoment().max(moment().add(1, 'd'));\nmoment().max(\"2013-04-20T20:00:00+0800\");\nmoment().max(\"Jan 1 2001\", \"MMM D YYYY\");\nmoment().max(new Date(2012, 1, 8));\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Moment.js Fallback to JavaScript Date Construction\nDESCRIPTION: This code snippet illustrates the deprecated behavior of Moment.js falling back to JavaScript Date construction when no known format is found for a date string. This behavior will be removed in a future major release.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/guides/moment/02-warnings/01-js-date.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nMoment construction falls back to js Date. \nThis is discouraged and will be removed in an upcoming major release.\n```\n\n----------------------------------------\n\nTITLE: Setting UTC Offset with Minutes in Moment.js\nDESCRIPTION: Shows how to set the UTC offset by providing the number of minutes. This sets a fixed offset that won't change automatically for DST.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/03-manipulating/09-utc-offset.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmoment().utcOffset(120);\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack for Moment Timezone Data Optimization\nDESCRIPTION: Shows how to use moment-timezone-data-webpack-plugin to reduce bundle size by including only specific zones or limiting data to a range of years.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment-timezone/00-use-it/04-webpack.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// webpack.config.js\nconst MomentTimezoneDataPlugin = require('moment-timezone-data-webpack-plugin');\nconst currentYear = new Date().getFullYear();\n\nmodule.exports = {\n    plugins: [\n        // To include only specific zones, use the matchZones option\n        new MomentTimezoneDataPlugin({\n            matchZones: /^America/\n        }),\n\n        // To keep all zones but limit data to specific years, use the year range options\n        new MomentTimezoneDataPlugin({\n            startYear: currentYear - 5,\n            endYear: currentYear + 5,\n        }),\n    ],\n};\n```\n\n----------------------------------------\n\nTITLE: Modified JSON Serialization Result\nDESCRIPTION: Demonstrates the result of JSON serialization after customizing the toJSON method, showing local timezone offset\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/04-displaying/13-as-json.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nJSON.stringify({\n    postDate : moment()\n}); // '{\"postDate\":\"2013-02-04T14:44:30-08:00\"}'\n```\n\n----------------------------------------\n\nTITLE: Parsing Dates in Specific Time Zones with moment.tz()\nDESCRIPTION: Demonstrates how to parse dates in specific time zones using moment.tz(). Shows how the same timestamp parsed in different time zones results in different UTC times.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment-timezone/01-using-timezones/00-intro.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar a = moment.tz(\"2013-11-18 11:55\", \"Asia/Taipei\");\nvar b = moment.tz(\"2013-11-18 11:55\", \"America/Toronto\");\n\na.format(); // 2013-11-18T11:55:00+08:00\nb.format(); // 2013-11-18T11:55:00-05:00\n\na.utc().format(); // 2013-11-18T03:55Z\nb.utc().format(); // 2013-11-18T16:55Z\n```\n\n----------------------------------------\n\nTITLE: Clamping a Moment to a Range Using min() and max() in JavaScript\nDESCRIPTION: Shows how to use moment().min() in conjunction with moment().max() to clamp a moment to a specific range. This example creates a range from the start to the end of a week and limits a moment to that range.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/03-manipulating/06-min.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar start  = moment().startOf('week');\nvar end    = moment().endOf('week');\nvar actual = moment().min(start).max(end);\n```\n\n----------------------------------------\n\nTITLE: Creating a Locale with Parent Inheritance in Moment.js\nDESCRIPTION: Creates a locale that inherits properties from a parent locale using the parentLocale property. Introduced in version 2.12.0, this feature allows for extending existing locales without duplicating all settings.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/07-customization/00-intro.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.defineLocale('en-foo', {\n  parentLocale: 'en',\n  /* */\n});\n```\n\n----------------------------------------\n\nTITLE: Installing moment-strftime plugin via npm\nDESCRIPTION: Command to install the moment-strftime plugin using npm package manager.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/10-plugins/01-strftime.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install moment-strftime\n```\n\n----------------------------------------\n\nTITLE: Converting Moment.js Durations to Different Time Units\nDESCRIPTION: Demonstrates how to use the 'as' method to convert a Moment.js duration to hours, minutes, seconds, and milliseconds. This method provides an alternative to the specific asX methods, using the same shorthand keys as moment#add.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/08-durations/15-as.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nduration.as('hours');\nduration.as('minutes');\nduration.as('seconds');\nduration.as('milliseconds');\n```\n\n----------------------------------------\n\nTITLE: Parsing Duration Strings with Space Separator in Moment.js\nDESCRIPTION: Creates a duration object by parsing a duration string with a space between days and the rest of the time components. Introduced in version 2.11.0.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/08-durations/01-creating.md#2025-04-08_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.duration('7 23:59:59.999');\n```\n\n----------------------------------------\n\nTITLE: Installing Moment.js with npm\nDESCRIPTION: Command to install Moment.js as a dependency in your project using npm.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/00-use-it/08-webpack.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install moment\n```\n\n----------------------------------------\n\nTITLE: Querying Date Relationships with Moment.js in JavaScript\nDESCRIPTION: This snippet demonstrates how to use Moment.js to check if one date is before, after, or the same as another date. It also shows how to check if a date is between two other dates.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/05-query/00-intro.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmoment('2010-10-20').isBefore('2010-10-21'); // true\nmoment('2010-10-20').isBefore('2010-10-20'); // false\nmoment('2010-10-20').isBefore('2010-10-19'); // false\nmoment('2010-10-20').isBefore('2010-12-31', 'year'); // false\nmoment('2010-10-20').isBefore('2011-01-01', 'year'); // true\n\nmoment('2010-10-20').isAfter('2010-10-19'); // true\nmoment('2010-10-20').isAfter('2010-10-20'); // false\nmoment('2010-10-20').isAfter('2010-10-21'); // false\nmoment('2010-10-20').isAfter('2010-01-01', 'year'); // false\nmoment('2010-10-20').isAfter('2009-12-31', 'year'); // true\n\nmoment('2010-10-20').isSame('2010-10-20'); // true\nmoment('2010-10-20').isSame('2010-10-21'); // false\nmoment('2010-10-20').isSame('2010-01-01', 'year');  // true\nmoment('2010-10-20').isSame('2009-12-31', 'year');  // false\n\nmoment('2010-10-20').isBetween('2010-10-19', '2010-10-25'); // true\nmoment('2010-10-20').isBetween('2010-10-19', undefined); // true\n```\n\n----------------------------------------\n\nTITLE: Loading Moment.js with Require.js in Various Scenarios\nDESCRIPTION: Demonstrates different ways to use Moment.js with Require.js including loading just the core, loading with a specific locale, loading with all locales, and asynchronously loading locales as needed.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/00-use-it/04-require-js.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// only needing core\ndefine(['moment'], function (moment) {\n\tconsole.log(moment().format('LLLL'));  // 'Friday, June 24, 2016 1:42 AM'\n});\n\n// core with single locale\ndefine(['moment', 'moment/locale/de'], function (moment) {\n\tmoment.locale('de');\n\tconsole.log(moment().format('LLLL')); // 'Freitag, 24. Juni 2016 01:42'\n});\n\n// core with all locales\ndefine(['moment/min/moment-with-locales'], function (moment) {\n\tmoment.locale('de');\n\tconsole.log(moment().format('LLLL')); // 'Freitag, 24. Juni 2016 01:42'\n});\n\n// async load locale\ndefine(['require', 'moment'], function(require, moment) {\n  // Inside some module after the locale is detected. This is the\n  // case where the locale is not known before module load time.\n  require(['moment/locale/de'], function(localeModule) {\n    // here the locale is loaded, but not yet in use\n    console.log(moment().format('LLLL'));  // 'Friday, June 24, 2016 1:42 AM'\n\n    moment.locale('de');\n    // Use moment now that the locale has been properly set.\n    console.log(moment().format('LLLL')); // 'Freitag, 24. Juni 2016 01:42'\n  })\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Moment objects with only time units specified\nDESCRIPTION: When only hours, minutes, seconds, or milliseconds are specified, Moment.js defaults to the current day. This can be done using string format or object notation.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/01-parsing/17-defaults.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmoment(5, \"HH\");  // today, 5:00:00.000\nmoment({hour: 5});  // today, 5:00:00.000\nmoment({hour: 5, minute: 10});  // today, 5:10.00.000\nmoment({hour: 5, minute: 10, seconds: 20});  // today, 5:10.20.000\nmoment({hour: 5, minute: 10, seconds: 20, milliseconds: 300});  // today, 5:10.20.300\n```\n\n----------------------------------------\n\nTITLE: Parsing Durations with Mixed Signs in Moment.js\nDESCRIPTION: Creates a duration object with mixed positive and negative signs. Introduced in version 2.13.0.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/08-durations/01-creating.md#2025-04-08_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.duration('PT-6H3M')\n```\n\n----------------------------------------\n\nTITLE: Checking Leap Years and Daylight Saving Time with Moment.js in JavaScript\nDESCRIPTION: This snippet shows how to use Moment.js to determine if a given year is a leap year and if a date is in daylight saving time. It also demonstrates how to check if a date falls on a specific day of the week.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/05-query/00-intro.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmoment([2000]).isLeapYear(); // true\nmoment([2001]).isLeapYear(); // false\n\nmoment('2011-10-09T16:00:00.000').isDST(); // depends on the user's locale\n\nmoment().isLeapYear();    // false\nmoment().isDST();          // true\nmoment().isDSTShifted();   // false\nmoment([2011, 2, 12]).isDSTShifted(); // true\n\nmoment().isSunday();\nmoment().isMonday();\nmoment().isTuesday();\nmoment().isWednesday();\nmoment().isThursday();\nmoment().isFriday();\nmoment().isSaturday();\n```\n\n----------------------------------------\n\nTITLE: Simplified Calendar Format Parameter in Moment.js\nDESCRIPTION: Illustrates the simplified method signature introduced in version 2.25.0 that allows passing just the formats object. Both string formats and callback functions are supported in this syntax.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/04-displaying/06-calendar-time.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmoment().calendar({\n    sameDay: '[Today]',\n    nextDay: '[Tomorrow]',\n    nextWeek: 'dddd',\n    lastDay: '[Yesterday]',\n    lastWeek: '[Last] dddd',\n    sameElse: 'DD/MM/YYYY'\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmoment().calendar({\n  sameDay: function (now) {\n    if (this.isBefore(now)) {\n      return '[Will Happen Today]';\n    } else {\n      return '[Happened Today]';\n    }\n    /* ... */\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Loading Individual Locale in NodeJS with Moment.js\nDESCRIPTION: Demonstrates how to import and load a specific locale (French) in Moment.js. Shows both require and import syntax for loading Moment.js and its locale file.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/06-i18n/03-loading-into-nodejs.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar moment = require('moment');\n//or\n// import moment from 'moment';\n\n// import locale file(s)\nimport 'moment/locale/fr';\n\nmoment.locale('fr');\nmoment(1316116057189).fromNow(); // il y a 6 ans\n```\n\n----------------------------------------\n\nTITLE: Granular Date Comparison with Unit Parameter\nDESCRIPTION: Shows how to compare dates with specific granularity by passing a time unit parameter. The comparison checks all units down to the specified level.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/05-query/03-is-after.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmoment('2010-10-20').isAfter('2010-01-01', 'year'); // false\nmoment('2010-10-20').isAfter('2009-12-31', 'year'); // true\n```\n\n----------------------------------------\n\nTITLE: Implementing isPM Function for AM/PM Parsing in Moment.js\nDESCRIPTION: This snippet shows how to implement the isPM function for AM/PM parsing in Moment.js. The function should return true if the input string represents a time past 12 noon. This example checks if the first character of the lowercase input is 'p'.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/07-customization/09-am-pm-parsing.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.updateLocale('en', {\n    isPM : function (input) {\n        return ((input + '').toLowerCase()[0] === 'p');\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Cloning and Comparing Moment.js Duration Objects\nDESCRIPTION: This snippet demonstrates how to create a clone of a Moment.js duration object and shows that modifications to the original do not affect the clone. It creates two duration objects, clones one, modifies the original, and then compares their millisecond values.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/08-durations/02-clone.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar d1 = moment.duration();\nvar d2 = d1.clone();\nd1.add(1, 'second');\nd1.asMilliseconds() !== d2.asMilliseconds();\n```\n\n----------------------------------------\n\nTITLE: Converting Local Time to UTC in Moment.js\nDESCRIPTION: Demonstrates how to convert a local timestamp to UTC display using the utc() method, which changes the hours value to reflect UTC time.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/03-manipulating/08-utc.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar a = moment([2011, 0, 1, 8]);\na.hours(); // 8 PST\na.utc();\na.hours(); // 16 UTC\n```\n\n----------------------------------------\n\nTITLE: Setting ISO Weekday Using Day Names in Moment.js\nDESCRIPTION: Example of setting the ISO weekday using day names instead of numbers. This uses the moment's current locale for parsing the day names.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/02-get-set/08-iso-weekday.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmoment().isoWeekday(\"Sunday\");\nmoment().isoWeekday(\"Monday\");\n```\n\n----------------------------------------\n\nTITLE: Converting Moments Between Time Zones\nDESCRIPTION: Shows how to use moment.tz() to convert a moment from one time zone to another, updating the offset accordingly. The examples demonstrate converting the same date between America/Toronto and Europe/Berlin time zones.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment-timezone/01-using-timezones/03-converting-to-zone.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmoment(\"2013-11-18\").tz(\"America/Toronto\").format('Z'); // -05:00\nmoment(\"2013-11-18\").tz(\"Europe/Berlin\").format('Z');   // +01:00\n```\n\n----------------------------------------\n\nTITLE: Adding Suffixes with moment.duration().humanize() in JavaScript\nDESCRIPTION: Shows how to add relative time suffixes to humanized durations by passing true as an argument. This creates oriented durations like 'in a minute' instead of just 'a minute'.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/08-durations/03-humanize.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.duration(1, \"minutes\").humanize(true); // in a minute\n```\n\n----------------------------------------\n\nTITLE: Supported Time Units for isSameOrAfter in Moment.js\nDESCRIPTION: List of supported time units that can be used as the second parameter in the isSameOrAfter method for granularity control. These are the same units supported by the startOf method.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/05-query/05-is-same-or-after.md#2025-04-08_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nyear month week isoWeek day hour minute second\n```\n\n----------------------------------------\n\nTITLE: Using Granularity with isSameOrBefore in Moment.js\nDESCRIPTION: Shows how to use the second parameter of isSameOrBefore to limit the granularity of the comparison to a specific unit of time. In this case, it compares dates based on the year.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/05-query/04-is-same-or-before.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmoment('2010-10-20').isSameOrBefore('2009-12-31', 'year'); // false\nmoment('2010-10-20').isSameOrBefore('2010-12-31', 'year'); // true\nmoment('2010-10-20').isSameOrBefore('2011-01-01', 'year'); // true\n```\n\n----------------------------------------\n\nTITLE: Configuring Meridiem Function (2.12.0+)\nDESCRIPTION: Current method for setting the meridiem function in a locale configuration using updateLocale.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/07-customization/08-am-pm.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.updateLocale('en', {\n    meridiem : Function\n});\n```\n\n----------------------------------------\n\nTITLE: Displaying Moment.js Date Values\nDESCRIPTION: Demonstrates the correct methods to display or extract date values from a Moment.js object. These methods provide properly formatted and timezone-aware output, unlike accessing internal properties directly.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/guides/moment/00-lib-concepts/05-internal-properties.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n.format()\n```\n\nLANGUAGE: javascript\nCODE:\n```\n.toString()\n```\n\nLANGUAGE: javascript\nCODE:\n```\n.toISOString()\n```\n\nLANGUAGE: javascript\nCODE:\n```\n.toDate()\n```\n\n----------------------------------------\n\nTITLE: Handling Negative Durations with humanize() in JavaScript\nDESCRIPTION: Demonstrates how to represent time in the past using negative durations. When combined with the suffix parameter, it produces phrases like 'a minute ago'.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/08-durations/03-humanize.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.duration(-1, \"minutes\").humanize(true); // a minute ago\n```\n\n----------------------------------------\n\nTITLE: Using the zoneAbbr Method to Get Timezone Abbreviations\nDESCRIPTION: Examples of using the zoneAbbr() method to retrieve timezone abbreviations directly, which is what Moment.js uses internally when formatting the 'z' token.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment-timezone/01-using-timezones/04-formatting.md#2025-04-08_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.tz([2012, 0], 'America/New_York').zoneAbbr(); // EST\nmoment.tz([2012, 5], 'America/New_York').zoneAbbr(); // EDT\n```\n\n----------------------------------------\n\nTITLE: Setting Weekday Abbreviations Array in MomentJS\nDESCRIPTION: Demonstrates how to configure short weekday names using an array in MomentJS locale settings. This method allows direct specification of abbreviated weekday names for a given locale.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/07-customization/04-weekday-abbreviations.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.updateLocale('en', {\n    weekdaysShort : [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"]\n});\n```\n\n----------------------------------------\n\nTITLE: Converting Duration to Total Milliseconds with asMilliseconds()\nDESCRIPTION: Shows how to use moment.duration().asMilliseconds() to get the total length of a duration in milliseconds. Returns the complete duration converted to milliseconds.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/08-durations/04-milliseconds.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.duration(500).asMilliseconds(); // 500\nmoment.duration(1500).asMilliseconds(); // 1500\nmoment.duration(15000).asMilliseconds(); // 15000\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Order Importance in Moment.js isBetween Method\nDESCRIPTION: Shows how the order of arguments in isBetween matters. The smaller date should be provided as the first argument for correct results.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/05-query/06-is-between.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmoment('2010-10-20').isBetween('2010-10-19', '2010-10-25'); // true\nmoment('2010-10-20').isBetween('2010-10-25', '2010-10-19'); // false\n```\n\n----------------------------------------\n\nTITLE: Using Unit Granularity with Moment.js isBetween Method\nDESCRIPTION: Shows how to limit the granularity of comparison to a specific unit (like year, month, day) instead of the default milliseconds.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/05-query/06-is-between.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmoment('2010-10-20').isBetween('2010-01-01', '2012-01-01', 'year'); // false\nmoment('2010-10-20').isBetween('2009-12-31', '2012-01-01', 'year'); // true\n```\n\n----------------------------------------\n\nTITLE: Handling Invalid Durations with humanize() in JavaScript\nDESCRIPTION: Shows the output when trying to humanize an invalid duration object. Invalid durations are displayed as the localized version of 'Invalid Date'.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/08-durations/03-humanize.md#2025-04-08_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.duration.invalid().humanize(); // Invalid Date\n```\n\n----------------------------------------\n\nTITLE: Basic Timezone Parsing in Moment.js\nDESCRIPTION: Demonstrates basic timezone parsing using moment.tz constructor with different input formats including string dates and custom formats. Shows how the constructor handles timezone offsets.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment-timezone/01-using-timezones/01-parsing-in-zone.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar a = moment.tz(\"2013-11-18 11:55\", \"America/Toronto\");\nvar b = moment.tz(\"May 12th 2014 8PM\", \"MMM Do YYYY hA\", \"America/Toronto\");\nvar c = moment.tz(1403454068850, \"America/Toronto\");\na.format(); // 2013-11-18T11:55:00-05:00\nb.format(); // 2014-05-12T20:00:00-04:00\nc.format(); // 2014-06-22T12:21:08-04:00\n```\n\n----------------------------------------\n\nTITLE: Basic Timezone Parsing in Moment.js\nDESCRIPTION: Demonstrates basic timezone parsing using moment.tz constructor with different input formats including string dates and custom formats. Shows how the constructor handles timezone offsets.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment-timezone/01-using-timezones/01-parsing-in-zone.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar a = moment.tz(\"2013-11-18 11:55\", \"America/Toronto\");\nvar b = moment.tz(\"May 12th 2014 8PM\", \"MMM Do YYYY hA\", \"America/Toronto\");\nvar c = moment.tz(1403454068850, \"America/Toronto\");\na.format(); // 2013-11-18T11:55:00-05:00\nb.format(); // 2014-05-12T20:00:00-04:00\nc.format(); // 2014-06-22T12:21:08-04:00\n```\n\n----------------------------------------\n\nTITLE: Accessing Locale Data in Moment.js\nDESCRIPTION: Shows how to access locale data for a specific Moment.js instance using the localeData() method. Demonstrates changing locales and accessing month names in different languages.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/06-i18n/02-instance-locale.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar fr = moment().locale('fr');\nfr.localeData().months(moment([2012, 0])) // \"janvier\"\nfr.locale('en');\nfr.localeData().months(moment([2012, 0])) // \"January\"\n```\n\n----------------------------------------\n\nTITLE: Converting Moment.js Duration to Days\nDESCRIPTION: This snippet shows how to convert a Moment.js duration to its total length in days using the asDays() method.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/08-durations/08-days.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.duration().asDays();\n```\n\n----------------------------------------\n\nTITLE: Configuring Thresholds for Humanize Output in JavaScript\nDESCRIPTION: Demonstrates how to customize the relative time thresholds for the humanize method. These thresholds can be passed either as a sole argument or after the suffix argument since version 2.25.0.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/08-durations/03-humanize.md#2025-04-08_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.duration(-1, 'week').humanize(true, {d: 7, w: 4}); // a week ago\nmoment.duration(-1, 'week').humanize({d: 7, w: 4}); // a week\n```\n\n----------------------------------------\n\nTITLE: Parsing ISO 8601 Durations in Moment.js\nDESCRIPTION: Creates duration objects by parsing ISO 8601 duration strings. Introduced in version 2.3.0.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/08-durations/01-creating.md#2025-04-08_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.duration('P1Y2M3DT4H5M6S');\nmoment.duration('P1M');\n```\n\n----------------------------------------\n\nTITLE: Loading Custom French Locale in Moment.js\nDESCRIPTION: This snippet demonstrates how to load a custom French locale in Moment.js. It includes definitions for months, weekdays, date formats, relative time, and other locale-specific settings.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/06-i18n/01-changing-locale.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.locale('fr', {\n    months : 'janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre'.split('_'),\n    monthsShort : 'janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.'.split('_'),\n    monthsParseExact : true,\n    weekdays : 'dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi'.split('_'),\n    weekdaysShort : 'dim._lun._mar._mer._jeu._ven._sam.'.split('_'),\n    weekdaysMin : 'Di_Lu_Ma_Me_Je_Ve_Sa'.split('_'),\n    weekdaysParseExact : true,\n    longDateFormat : {\n        LT : 'HH:mm',\n        LTS : 'HH:mm:ss',\n        L : 'DD/MM/YYYY',\n        LL : 'D MMMM YYYY',\n        LLL : 'D MMMM YYYY HH:mm',\n        LLLL : 'dddd D MMMM YYYY HH:mm'\n    },\n    calendar : {\n        sameDay : '[Aujourd\\'hui à] LT',\n        nextDay : '[Demain à] LT',\n        nextWeek : 'dddd [à] LT',\n        lastDay : '[Hier à] LT',\n        lastWeek : 'dddd [dernier à] LT',\n        sameElse : 'L'\n    },\n    relativeTime : {\n        future : 'dans %s',\n        past : 'il y a %s',\n        s : 'quelques secondes',\n        m : 'une minute',\n        mm : '%d minutes',\n        h : 'une heure',\n        hh : '%d heures',\n        d : 'un jour',\n        dd : '%d jours',\n        M : 'un mois',\n        MM : '%d mois',\n        y : 'un an',\n        yy : '%d ans'\n    },\n    dayOfMonthOrdinalParse : /\\d{1,2}(er|e)/,\n    ordinal : function (number) {\n        return number + (number === 1 ? 'er' : 'e');\n    },\n    meridiemParse : /PD|MD/,\n    isPM : function (input) {\n        return input.charAt(0) === 'M';\n    },\n    // In case the meridiem units are not separated around 12, then implement\n    // this function (look at locale/id.js for an example).\n    // meridiemHour : function (hour, meridiem) {\n    //     return /* 0-23 hour, given meridiem token and hour 1-12 */ ;\n    // },\n    meridiem : function (hours, minutes, isLower) {\n        return hours < 12 ? 'PD' : 'MD';\n    },\n    week : {\n        dow : 1, // Monday is the first day of the week.\n        doy : 4  // Used to determine first week of the year.\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Converting Quarters and Years to Months\nDESCRIPTION: Demonstrates how Moment.js converts and rounds decimal values for quarters and years into months.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/guides/moment/00-lib-concepts/02-date-time-math.md#2025-04-08_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmoment().add(1.5, 'years') == moment().add(18, 'months')\nmoment().add(.8, 'years') == moment().add(9.6, 'months') == moment().add(10, 'months')\nmoment().add(1.5, 'quarters') == moment().add(4.5, 'months') == moment().add(5, 'months')\n```\n\n----------------------------------------\n\nTITLE: Legacy and Current Locale Methods in Moment.js\nDESCRIPTION: Shows both the current and deprecated methods for checking locale, noting the change from moment.lang() to moment.locale() in version 2.8.1.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/06-i18n/06-getting-locale.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// From version 2.8.1 onward\nmoment.locale();\n\n// Deprecated in version 2.8.1\nmoment.lang();\n```\n\n----------------------------------------\n\nTITLE: Creating a Moment with Partial Seconds from Unix Timestamp in JavaScript\nDESCRIPTION: Shows how to create a moment object from a Unix timestamp that includes partial seconds. The moment.unix() function preserves the fractional part of the timestamp.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/01-parsing/08-unix-timestamp.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar day = moment.unix(1318781876.721);\n```\n\n----------------------------------------\n\nTITLE: Changing Locales Locally with Moment.js\nDESCRIPTION: Demonstrates how to change locales locally for specific Moment.js instances without affecting the global locale. Shows various scenarios including setting single locales, multiple locales, and resetting locales.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/06-i18n/02-instance-locale.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.locale('en'); // default the locale to English\nvar localLocale = moment();\n\nlocalLocale.locale('fr'); // set this instance to use French\nlocalLocale.format('LLLL'); // dimanche 15 juillet 2012 11:01\nmoment().format('LLLL'); // Sunday, July 15 2012 11:01 AM\n\nmoment.locale('es'); // change the global locale to Spanish\nlocalLocale.format('LLLL'); // dimanche 15 juillet 2012 11:01\nmoment().format('LLLL'); // Domingo 15 Julio 2012 11:01\n\nlocalLocale.locale(['tq', 'fr']); // set this instance to the first localization found\nlocalLocale.format('LLLL'); // dimanche 15 juillet 2012 11:01\nmoment().format('LLLL'); // Sunday, July 15 2012 11:01 AM\n\nlocalLocale.locale(false); // reset the instance locale\nlocalLocale.format('LLLL'); // Domingo 15 Julio 2012 11:01\nmoment().format('LLLL'); // Domingo 15 Julio 2012 11:01\n```\n\n----------------------------------------\n\nTITLE: Basic isSame Usage in Moment.js\nDESCRIPTION: Checks if a moment is the same as another date. The argument is parsed as a moment if not already one.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/05-query/02-is-same.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmoment('2010-10-20').isSame('2010-10-20'); // true\n```\n\n----------------------------------------\n\nTITLE: Basic isSame Usage in Moment.js\nDESCRIPTION: Checks if a moment is the same as another date. The argument is parsed as a moment if not already one.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/05-query/02-is-same.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmoment('2010-10-20').isSame('2010-10-20'); // true\n```\n\n----------------------------------------\n\nTITLE: Loading All Locales in NodeJS with Moment.js\nDESCRIPTION: Shows how to import and use Moment.js with all locales included by using the moment-with-locales module. Demonstrates setting German locale after loading all locales.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/06-i18n/03-loading-into-nodejs.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport moment from 'moment/min/moment-with-locales';\n\nmoment.locale('de');\nmoment(1316116057189).fromNow(); // vor 6 Jahren\n```\n\n----------------------------------------\n\nTITLE: Format and Standalone Month Abbreviations in MomentJS\nDESCRIPTION: Demonstrates how to configure month abbreviations with separate format and standalone cases, introduced in version 2.11.0.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/07-customization/02-month-abbreviations.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.updateLocale('en', {\n    monthsShort : {\n        format: 'янв_фев_мар_апр_мая_июня_июля_авг_сен_окт_ноя_дек'.split('_'),\n        standalone: 'янв_фев_март_апр_май_июнь_июль_авг_сен_окт_ноя_дек'.split('_')\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Parsing ASP.NET JSON Date Format in JavaScript using Moment.js\nDESCRIPTION: Demonstrates how to parse an ASP.NET style JSON date string in the format /Date(timestamp-offset)/ using Moment.js. This format was commonly used in older ASP.NET applications before standardizing on ISO-8601.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/01-parsing/11-asp-net-json-date.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmoment(\"/Date(1198908717056-0700)/\"); // 2007-12-28T23:11:57.056-07:00\n```\n\n----------------------------------------\n\nTITLE: Installing Grunt CLI for QUnit Development\nDESCRIPTION: Instructions for setting up the development environment for QUnit using Node.js and Grunt. This snippet shows how to install the necessary tools to run Grunt tasks for linting and testing QUnit.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/bower_components/qunit/README.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g grunt-cli\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting ISO Week of Year in Moment.js\nDESCRIPTION: Demonstrates the usage of isoWeek() and isoWeeks() methods in Moment.js. These methods get or set the ISO week of the year according to ISO 8601 standards, where weeks start on Monday and the first week of the year contains January 4th.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/02-get-set/11-iso-week.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmoment().isoWeek(Number);\nmoment().isoWeek(); // Number\nmoment().isoWeeks(Number);\nmoment().isoWeeks(); // Number\n```\n\n----------------------------------------\n\nTITLE: Retrieving Weeks from Moment.js Duration Objects\nDESCRIPTION: These methods allow accessing the weeks component of a duration or converting the entire duration to weeks. The weeks() method returns weeks (0-4) as a subset of days, while asWeeks() converts the total duration to weeks (where 1 week equals 7 days).\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/08-durations/09-weeks.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.duration().weeks();\nmoment.duration().asWeeks();\n```\n\n----------------------------------------\n\nTITLE: Month Overflow Behavior in Moment.js (JavaScript)\nDESCRIPTION: Illustrates the change in behavior for month overflow scenarios between versions before and after 2.1.0. In newer versions, the date is clamped to the end of the target month instead of overflowing to the next month.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/02-get-set/12-month.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// before 2.1.0\nmoment([2012, 0, 31]).month(1).format(\"YYYY-MM-DD\"); // 2012-03-02\n// after 2.1.0\nmoment([2012, 0, 31]).month(1).format(\"YYYY-MM-DD\"); // 2012-02-29\n```\n\n----------------------------------------\n\nTITLE: Base60 Trailing Zero Handling\nDESCRIPTION: Shows how trailing zeros after decimal points are handled, demonstrating they are dropped regardless of specified precision.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment-timezone/05-data-utilities/03-pack-base-60.md#2025-04-08_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.tz.packBase60(1/6, 1); // .a\nmoment.tz.packBase60(1/6, 5); // .a\nmoment.tz.packBase60(59, 5);  // X\n```\n\n----------------------------------------\n\nTITLE: Basic Locale Loading with Script Tags in HTML\nDESCRIPTION: Demonstrates loading individual locale files using script tags with proper charset specification and setting the default locale.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/06-i18n/04-loading-into-browser.md#2025-04-08_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"moment.js\"></script>\n<script src=\"locale/fr.js\" charset=\"UTF-8\"></script>\n<script src=\"locale/pt.js\" charset=\"UTF-8\"></script>\n<script>\n  moment.locale('fr');  // Set the default/global locale\n  // ...\n</script>\n```\n\n----------------------------------------\n\nTITLE: Glued Hour and Minutes Parsing\nDESCRIPTION: Demonstrates parsing concatenated time formats\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/01-parsing/03-string-format.md#2025-04-08_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nmoment(\"123\", \"hmm\").format(\"HH:mm\") === \"01:23\"\nmoment(\"1234\", \"hmm\").format(\"HH:mm\") === \"12:34\"\n```\n\n----------------------------------------\n\nTITLE: Glued Hour and Minutes Parsing\nDESCRIPTION: Demonstrates parsing concatenated time formats\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/01-parsing/03-string-format.md#2025-04-08_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nmoment(\"123\", \"hmm\").format(\"HH:mm\") === \"01:23\"\nmoment(\"1234\", \"hmm\").format(\"HH:mm\") === \"12:34\"\n```\n\n----------------------------------------\n\nTITLE: Parsing Dates with Explicit Format in Moment.js\nDESCRIPTION: Examples of parsing date strings with explicitly specified formats using Moment.js. Shows how to parse dates in MM/DD/YYYY format and timestamps with hours, minutes, seconds and meridiem.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/guides/moment/01-parsing/02-known-formats.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmoment('01/01/2016', 'MM/DD/YYYY')\nmoment('2016-01-01 11:31:23 PM', 'YYYY-MM-DD hh:mm:ss a')\n```\n\n----------------------------------------\n\nTITLE: Setting Time Zone Offset with Minutes in MomentJS\nDESCRIPTION: Sets the time zone offset by specifying the number of minutes from GMT/UTC.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/03-manipulating/10-timezone-offset.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmoment().zone(120);\n```\n\n----------------------------------------\n\nTITLE: Date Arithmetic with Moment.js\nDESCRIPTION: Shows Moment.js's more intuitive API for date manipulation, using the add() method with a value and unit parameter to perform date arithmetic.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/guides/moment/00-lib-concepts/04-js-date.md#2025-04-08_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmoment('4/30/2016', 'MM/DD/YYYY').add(1, 'day')\n//\"2016-05-01T00:00:00-05:00\"\n```\n\n----------------------------------------\n\nTITLE: Converting Moment Object to String using toString()\nDESCRIPTION: Demonstrates how to convert a Moment.js object to a string representation using the toString() method. Returns a formatted string showing the date, time, and timezone in a format similar to JavaScript's native Date.toString() method.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/04-displaying/16-as-string.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmoment().toString() // \"Sat Apr 30 2016 16:59:46 GMT-0500\"\n```\n\n----------------------------------------\n\nTITLE: Preserving Local Time When Changing Time Zones\nDESCRIPTION: Demonstrates using the second parameter of moment.tz() to preserve local time when changing time zones. When true is passed, only the time zone and offset are updated, keeping the local time the same.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment-timezone/01-using-timezones/03-converting-to-zone.md#2025-04-08_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar m = moment.tz(\"2013-11-18 11:55\", \"America/Toronto\");\nm.format();                           // 2013-11-18T11:55:00-05:00\nm.tz('Europe/Berlin', true).format()  // 2013-11-18T11:55:00+01:00\n```\n\n----------------------------------------\n\nTITLE: Loading Locales with JSPM Module Import\nDESCRIPTION: Example of importing MomentJS and locale files using JSPM module system.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/06-i18n/04-loading-into-browser.md#2025-04-08_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as moment from 'moment';\nimport 'moment/locale/fr';\n```\n\n----------------------------------------\n\nTITLE: Installing Twix via npm\nDESCRIPTION: This command shows how to install the Twix plugin using npm package manager. This is the recommended installation method for projects using a Node.js-based build system.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/10-plugins/05-twix.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install twix\n```\n\n----------------------------------------\n\nTITLE: Setting Time Zone Offset with String Format in MomentJS\nDESCRIPTION: Sets the time zone offset using a string format like '-08:00'.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/03-manipulating/10-timezone-offset.md#2025-04-08_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmoment().zone(\"-08:00\");\n```\n\n----------------------------------------\n\nTITLE: Accessing Moment.js Creation Data with creationData()\nDESCRIPTION: Shows how to retrieve the original input parameters used to create a Moment.js object, including the input string, format, locale settings, UTC status, and strict parsing mode.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/01-parsing/16-creation-data.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmoment(\"2013-01-02\", \"YYYY-MM-DD\", true).creationData() === {\n    input: \"2013-01-02\",\n    format: \"YYYY-MM-DD\",\n    locale: Locale obj,\n    isUTC: false,\n    strict: true\n}\n```\n\n----------------------------------------\n\nTITLE: Using Forgiving Mode with Moment.js for Date Parsing\nDESCRIPTION: This example shows forgiving mode date parsing in Moment.js. When strict mode is not enabled, Moment.js attempts to parse the date even if it doesn't match the expected format, which can result in incorrect date interpretations as shown in the output.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/guides/moment/01-parsing/04-forgiving-mode.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmoment('01/12/2016', 'YYYY-MM-DD').format()\n\"2001-12-20T00:00:00-06:00\"\n```\n\n----------------------------------------\n\nTITLE: Converting UTC Time to Local Time in Moment.js\nDESCRIPTION: This snippet demonstrates how to convert a moment object created in UTC time to local time. It shows how the hours value changes after the conversion from UTC to local time (PST in this example).\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/03-manipulating/07-local.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar a = moment.utc([2011, 0, 1, 8]);\na.hours(); // 8 UTC\na.local();\na.hours(); // 0 PST\n```\n\n----------------------------------------\n\nTITLE: Setting UTC Offset with String in Moment.js\nDESCRIPTION: Demonstrates how to set the UTC offset using a string representation. This can be in various formats including hours:minutes or just hours.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/03-manipulating/09-utc-offset.md#2025-04-08_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// these are equivalent\nmoment().utcOffset(\"+08:00\");\nmoment().utcOffset(8);\nmoment().utcOffset(480);\n```\n\n----------------------------------------\n\nTITLE: Configuring Relative Time Rounding in Moment.js\nDESCRIPTION: This snippet demonstrates how to get the default rounding function, set a custom rounding function (Math.floor), and configure relative time thresholds. It then shows the effect of the custom rounding on a relative time calculation.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/07-customization/14-relative-time-rounding.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar roundingDefault = moment.relativeTimeRounding();\n\n// Round relative time evaluation down\nmoment.relativeTimeRounding(Math.floor);\n\nmoment.relativeTimeThreshold('s', 60);\nmoment.relativeTimeThreshold('m', 60);\nmoment.relativeTimeThreshold('h', 24);\nmoment.relativeTimeThreshold('d', 7);\nmoment.relativeTimeThreshold('w', 4);\nmoment.relativeTimeThreshold('M', 12);\n\nvar a = moment();\na.subtract({hours: 23, minutes: 59, seconds: 59});\na.toNow();  // == 'in 23 hours'  'Round down towards the nearest hour'\n\n// back to default\nmoment.relativeTimeRounding(roundingDefault);\n```\n\n----------------------------------------\n\nTITLE: Configuring Relative Time Rounding in Moment.js\nDESCRIPTION: This snippet demonstrates how to get the default rounding function, set a custom rounding function (Math.floor), and configure relative time thresholds. It then shows the effect of the custom rounding on a relative time calculation.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/07-customization/14-relative-time-rounding.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar roundingDefault = moment.relativeTimeRounding();\n\n// Round relative time evaluation down\nmoment.relativeTimeRounding(Math.floor);\n\nmoment.relativeTimeThreshold('s', 60);\nmoment.relativeTimeThreshold('m', 60);\nmoment.relativeTimeThreshold('h', 24);\nmoment.relativeTimeThreshold('d', 7);\nmoment.relativeTimeThreshold('w', 4);\nmoment.relativeTimeThreshold('M', 12);\n\nvar a = moment();\na.subtract({hours: 23, minutes: 59, seconds: 59});\na.toNow();  // == 'in 23 hours'  'Round down towards the nearest hour'\n\n// back to default\nmoment.relativeTimeRounding(roundingDefault);\n```\n\n----------------------------------------\n\nTITLE: Example Result of Moment.js Months Method\nDESCRIPTION: Shows the output of the moment.months() method, which returns an array of all 12 month names in English (default locale).\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/06-i18n/07-listing-months-weekdays.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n[ 'January',\n  'February',\n  'March',\n  'April',\n  'May',\n  'June',\n  'July',\n  'August',\n  'September',\n  'October',\n  'November',\n  'December' ]\n```\n\n----------------------------------------\n\nTITLE: Creating Invalid Moment Objects with Custom Parsing Flags in JavaScript\nDESCRIPTION: Creates an invalid Moment.js object with specific parsing flags to indicate the reason for invalidity. This example sets an invalidMonth flag with a custom value that can be retrieved with parsingFlags().\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/09-utilities/02-invalid.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar m = moment.invalid({invalidMonth: 'Actober'});\nm.parsingFlags().invalidMonth; // 'Actober'\n```\n\n----------------------------------------\n\nTITLE: Using Inclusivity Parameters with Moment.js isBetween Method\nDESCRIPTION: Demonstrates using inclusivity parameters introduced in version 2.13.0. Square brackets '[' indicate inclusion of a value, while parentheses '(' indicate exclusion.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/05-query/06-is-between.md#2025-04-08_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmoment('2016-10-30').isBetween('2016-10-30', '2016-12-30', undefined, '()'); //false\nmoment('2016-10-30').isBetween('2016-10-30', '2016-12-30', undefined, '[)'); //true\nmoment('2016-10-30').isBetween('2016-01-01', '2016-10-30', undefined, '()'); //false\nmoment('2016-10-30').isBetween('2016-01-01', '2016-10-30', undefined, '(]'); //true\nmoment('2016-10-30').isBetween('2016-10-30', '2016-10-30', undefined, '[]'); //true\n```\n\n----------------------------------------\n\nTITLE: Converting Moment to ISO Calendar Array in JavaScript\nDESCRIPTION: Demonstrates how to convert a moment instance to an ISO calendar array containing year, week of year, day of week, and minutes since midnight.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/10-plugins/07-isocalendar.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmoment().isocalendar(); // [2012, 8, 5, 870]\n```\n\n----------------------------------------\n\nTITLE: Formatting Long Twitter Time with Hours using Moment.js\nDESCRIPTION: Demonstrates using the twitterLong() method to format a timestamp from 5 hours ago in a human-readable format.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/10-plugins/12-twitter.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmoment().subtract(5, 'hours').twitterLong();\n// 5 hours\n```\n\n----------------------------------------\n\nTITLE: Timezone Handling in isSame Comparisons\nDESCRIPTION: Shows how timezone differences are handled when comparing moments. The timezone of the first moment is used for the comparison.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/05-query/02-is-same.md#2025-04-08_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Note: Australia/Sydney is UTC+11:00 on these dates\nmoment.tz(\"2018-11-09T10:00:00\", \"Australia/Sydney\").isSame(moment.tz(\"2018-11-08T12:00:00\", \"UTC\"), \"day\"); // false\nmoment.tz(\"2018-11-08T12:00:00\", \"UTC\").isSame(moment.tz(\"2018-11-09T10:00:00\", \"Australia/Sydney\"), \"day\"); // true\n```\n\n----------------------------------------\n\nTITLE: Implicit Moment.js Object Cloning\nDESCRIPTION: Demonstrates how to clone a Moment.js object implicitly by passing an existing moment to the moment() constructor. The clone creates an independent copy that won't be affected by changes to the original.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/01-parsing/12-moment-clone.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar a = moment([2012]);\nvar b = moment(a);\na.year(2000);\nb.year(); // 2012\n```\n\n----------------------------------------\n\nTITLE: Getting Specific Weekday by Index in Moment.js\nDESCRIPTION: Demonstrates how to retrieve a specific weekday name by passing an integer index to the weekdays method. In this example, the index 3 returns 'Wednesday'.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/06-i18n/07-listing-months-weekdays.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.weekdays(3); // 'Wednesday'\n```\n\n----------------------------------------\n\nTITLE: Using Moment.js Getters and Setters in UTC Mode\nDESCRIPTION: Shows how Moment.js getter and setter methods map to UTC methods of the native JavaScript Date object when in UTC mode. Demonstrates both setter and getter patterns.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/02-get-set/00-intro.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.utc().seconds(30).valueOf() === new Date().setUTCSeconds(30);\nmoment.utc().seconds()   === new Date().getUTCSeconds();\n```\n\n----------------------------------------\n\nTITLE: Creating UTC Moments with Array Parameters\nDESCRIPTION: Shows how to create a UTC moment object using an array of parameters instead of local timezone.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/01-parsing/10-array.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.utc([2010, 1, 14, 15, 25, 50, 125]);\n```\n\n----------------------------------------\n\nTITLE: Configuring Dynamic Weekday Abbreviations in MomentJS\nDESCRIPTION: Shows how to set up a callback function for dynamic weekday abbreviations in MomentJS locale settings. This approach provides more flexibility by allowing programmatic generation of weekday abbreviations based on the moment instance and format.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/07-customization/04-weekday-abbreviations.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.updateLocale('en', {\n    weekdaysShort : function (momentToFormat, format) {\n        return weekdaysShort[momentToFormat.day()];\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Duration in Milliseconds with Moment.js\nDESCRIPTION: Creates a duration object representing 100 milliseconds using the moment.duration() function.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/08-durations/01-creating.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.duration(100); // 100 milliseconds\n```\n\n----------------------------------------\n\nTITLE: Strict Parsing with Timezones\nDESCRIPTION: Shows how to use strict parsing mode with timezone support, which requires exact format matching including delimiters.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment-timezone/01-using-timezones/01-parsing-in-zone.md#2025-04-08_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.tz('It is 2012-05-25', 'YYYY-MM-DD', \"America/Toronto\").isValid();       // true \nmoment.tz('It is 2012-05-25', 'YYYY-MM-DD', true, \"America/Toronto\").isValid(); // false\nmoment.tz('2012-05-25', 'YYYY-MM-DD', true, \"America/Toronto\").isValid();       // true\nmoment.tz('2012-05.25', 'YYYY-MM-DD', true, \"America/Toronto\").isValid();       // false\n```\n\n----------------------------------------\n\nTITLE: Parsing with Fixed Timezone Offset in Moment.js\nDESCRIPTION: Uses moment.parseZone to create a Moment.js date that preserves the original timezone offset specified in the input string.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/guides/moment/01-parsing/01-local-utc-zone.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.parseZone(\"2013-01-01T00:00:00-13:00\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Weekday Names Using Callback Function\nDESCRIPTION: Shows how to use a callback function to dynamically generate weekday names. The function receives the moment object and format as parameters.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/07-customization/03-weekday-names.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.updateLocale('en', {\n    weekdays : function (momentToFormat, format) {\n        return weekdays[momentToFormat.day()];\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Combining Format and Index Parameters for Month Names in Moment.js\nDESCRIPTION: Shows how to combine both the format parameter and the integer index to get a specific month name with specific formatting rules applied.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/06-i18n/07-listing-months-weekdays.md#2025-04-08_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.monthsShort('-MMM-', 3); // 'apr'\n```\n\n----------------------------------------\n\nTITLE: Correct vs Incorrect Moment Timezone Import Patterns\nDESCRIPTION: Comparison of correct and incorrect ways to import moment-timezone. The recommended approach prevents versioning issues that can occur with package managers.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment-timezone/00-use-it/01-node-js.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Unnecessary, can cause issues with package managers\nimport moment from 'moment';\nimport 'moment-timezone';\n\n// Correct\nimport moment from 'moment-timezone';\n```\n\n----------------------------------------\n\nTITLE: Correct vs Incorrect Moment Timezone Import Patterns\nDESCRIPTION: Comparison of correct and incorrect ways to import moment-timezone. The recommended approach prevents versioning issues that can occur with package managers.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment-timezone/00-use-it/01-node-js.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Unnecessary, can cause issues with package managers\nimport moment from 'moment';\nimport 'moment-timezone';\n\n// Correct\nimport moment from 'moment-timezone';\n```\n\n----------------------------------------\n\nTITLE: Setting Invalid Date String in Moment.js (Latest Version)\nDESCRIPTION: This snippet demonstrates how to set the 'invalidDate' string for the English locale using the latest version of Moment.js (from 2.12.0 onward). It uses the 'moment.updateLocale()' method to customize the invalid date display.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/07-customization/18-invalid-date.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.updateLocale('en', {\n    invalidDate : String\n});\n```\n\n----------------------------------------\n\nTITLE: Converting Specific Offset to UTC in Moment.js\nDESCRIPTION: Demonstrates how moment.utc() converts a date with a specific offset to UTC time. The date is shifted from +02:00 to +00:00.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/guides/moment/01-parsing/01-local-utc-zone.md#2025-04-08_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.utc('2016-01-01T00:00:00+02:00').format()\n```\n\n----------------------------------------\n\nTITLE: Custom Locale Bundle Compilation with Grunt\nDESCRIPTION: Command to compile MomentJS with specific locales using Grunt task runner.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/06-i18n/04-loading-into-browser.md#2025-04-08_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngrunt transpile:fr,it\n```\n\n----------------------------------------\n\nTITLE: Using Twix Plugin with Moment.js\nDESCRIPTION: This code demonstrates the basic usage of the Twix plugin with Moment.js. It shows how to create a time range between two points, check if the range includes the current time, count the minutes in the range, and format the range in different ways.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/10-plugins/05-twix.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar t = moment(\"1/25/1982 9:30 AM\").twix(\"1/25/1982 1:30 PM\");\nt.isCurrent(); // false\nt.count('minutes'); // 241\nt.format();  // 'Jan 25, 1982, 9:30 AM - 1:30 PM'\nt.simpleFormat(\"h:m\"); // '9:30 - 1:30'\n```\n\n----------------------------------------\n\nTITLE: Installing Moment.js via Bower Package Manager\nDESCRIPTION: Command to install Moment.js as a project dependency using Bower. The --save flag adds moment to the project's bower.json dependencies.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/00-use-it/03-bower.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbower install --save moment\n```\n\n----------------------------------------\n\nTITLE: Reverting Locale Updates in Moment.js\nDESCRIPTION: Reverts previous updates to a locale by passing null as the second argument to moment.updateLocale(). This restores the locale to its original state.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/07-customization/00-intro.md#2025-04-08_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.updateLocale('en', null);\n```\n\n----------------------------------------\n\nTITLE: Supported Time Units for isBefore Method in Moment.js\nDESCRIPTION: Lists the time units supported for the isBefore method in Moment.js, which are the same as those supported for the startOf method.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/05-query/01-is-before.md#2025-04-08_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nyear month week isoWeek day hour minute second\n```\n\n----------------------------------------\n\nTITLE: Catching Out of Range Values in Moment.js\nDESCRIPTION: Demonstrates how strict mode catches out of range date values, which would otherwise be parsed incorrectly in non-strict mode.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/guides/moment/01-parsing/03-strict-mode.md#2025-04-08_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n//date has out of range value but is parsed anyways\nmoment('100110/09/2015', 'MM/DD/YYYY').format()\n\"2015-10-09T00:00:00-05:00\"\n//strict mode catches out of range issue\nmoment('100110/09/2015', 'MM/DD/YYYY', true).format()\n\"Invalid date\"\n```\n\n----------------------------------------\n\nTITLE: Parsing Specific Offsets in Fall Back Transitions with Moment.js Timezone\nDESCRIPTION: This snippet shows how to parse times with specific offsets during the fall daylight saving time transition in Moment.js Timezone. It demonstrates how to create moments for both instances of a duplicated hour by including the offset when parsing.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment-timezone/01-using-timezones/02-parsing-ambiguous-inputs.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.tz(\"2012-11-04 01:00:00-04:00\", \"America/New_York\"); // 2012-11-04T01:00:00-04:00\nmoment.tz(\"2012-11-04 01:00:00-05:00\", \"America/New_York\"); // 2012-11-04T01:00:00-05:00\n```\n\n----------------------------------------\n\nTITLE: Basic Locale Configuration for MomentJS\nDESCRIPTION: Shows different ways to update locale settings for relative time across different MomentJS versions. Demonstrates version-specific syntax changes from 2.8.1 to 2.12.0.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/07-customization/07-relative-time.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// From 2.12.0 onward\nmoment.updateLocale('en', {\n    relativeTime : Object\n});\n// From 2.8.1 to 2.11.2\nmoment.locale('en', {\n    relativeTime : Object\n});\n\n// Deprecated in 2.8.1\nmoment.lang('en', {\n    relativeTime : Object\n});\n```\n\n----------------------------------------\n\nTITLE: Finding Difference in Specific Units with Moment.js\nDESCRIPTION: This example shows how to get the difference between two moments in a specific unit of measurement (days in this case) by passing the unit as the second argument to diff().\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/04-displaying/07-difference.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar a = moment([2007, 0, 29]);\nvar b = moment([2007, 0, 28]);\na.diff(b, 'days') // 1\n```\n\n----------------------------------------\n\nTITLE: Handling Trailing Data in Date Parsing with Moment.js\nDESCRIPTION: Shows how strict mode prevents incorrect parsing when there is trailing data after the expected date format, which non-strict mode would ignore.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/guides/moment/01-parsing/03-strict-mode.md#2025-04-08_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n//wrong date is parsed because non-strict mode ignores data after format\nmoment('2016-12-31 11:32 PM').format('LT')\n\"11:32 AM\"\n//trailing data is noticed\nmoment('2016-12-31 11:32 PM', moment.ISO_8601, true).format('LT')\n\"Invalid date\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Unix Timestamp from Moment.js Date\nDESCRIPTION: Demonstrates how to get the Unix timestamp (seconds since epoch) from a Moment.js date. This is useful for timestamp-based operations or comparisons.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/04-displaying/00-intro.md#2025-04-08_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmoment().unix();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Unix Timestamp from Moment.js Date\nDESCRIPTION: Demonstrates how to get the Unix timestamp (seconds since epoch) from a Moment.js date. This is useful for timestamp-based operations or comparisons.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/04-displaying/00-intro.md#2025-04-08_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmoment().unix();\n```\n\n----------------------------------------\n\nTITLE: Updating Locale with Minimal Weekday Abbreviations Array in Moment.js\nDESCRIPTION: This snippet demonstrates how to update the 'en' locale in Moment.js with an array of two-letter weekday abbreviations. These abbreviations are intended for compact displays like calendar pickers.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/07-customization/05-weekday-min.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.updateLocale('en', {\n    weekdaysMin : [\"Su\", \"Mo\", \"Tu\", \"We\", \"Th\", \"Fr\", \"Sa\"]\n});\n```\n\n----------------------------------------\n\nTITLE: Using Locale with Suffixes in Duration Humanization\nDESCRIPTION: This snippet shows how to use locale settings with suffixes in duration humanization. It demonstrates both future and past tense formatting across English, French, and Spanish locales.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/08-durations/20-locale.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.duration(1, \"minutes\").locale(\"en\").humanize(true); // in a minute\nmoment.duration(1, \"minutes\").locale(\"fr\").humanize(true); // dans une minute\nmoment.duration(1, \"minutes\").locale(\"es\").humanize(true); // en un minuto\n\nmoment.duration(-1, \"minutes\").locale(\"en\").humanize(true); // a minute ago\nmoment.duration(-1, \"minutes\").locale(\"fr\").humanize(true); // il y a une minute\nmoment.duration(-1, \"minutes\").locale(\"es\").humanize(true); // hace un minuto\n```\n\n----------------------------------------\n\nTITLE: Specifying Multiple Locales in Moment.js\nDESCRIPTION: This snippet demonstrates how to specify a list of locales, where Moment.js will use the first one it has localizations for.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/06-i18n/01-changing-locale.md#2025-04-08_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.locale(['tq', 'fr']); // 'fr'\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Mutability in Moment.js\nDESCRIPTION: This snippet shows how adding one week to a moment object mutates the original object. It creates a moment object 'a', adds one week to it and assigns the result to 'b', then formats 'a' to show the mutation.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/guides/moment/00-lib-concepts/01-mutability.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar a = moment('2016-01-01'); \nvar b = a.add(1, 'week'); \na.format();\n\"2016-01-08T00:00:00-06:00\"\n```\n\n----------------------------------------\n\nTITLE: Linking Multiple Timezone Names in Moment.js\nDESCRIPTION: Links multiple pairs of timezone names by passing an array of link strings. Each string follows the link format with timezone names separated by a pipe character.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment-timezone/04-data-loading/02-adding-a-link.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.tz.link([\n\t'America/Los_Angeles|US/Pacific',\n\t'America/New_York|US/Eastern'\n]);\n```\n\n----------------------------------------\n\nTITLE: Listing Available Locales in Moment.js\nDESCRIPTION: Shows how to retrieve a list of all loaded and available locales using the moment.locales() method, introduced in version 2.12.0.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/06-i18n/06-getting-locale.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.locales()\n```\n\n----------------------------------------\n\nTITLE: Multiple Time Unit Addition in Moment.js\nDESCRIPTION: Demonstrates two ways to add multiple time units: chaining and object literal.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/03-manipulating/01-add.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmoment().add(7, 'days').add(1, 'months'); // with chaining\nmoment().add({days:7,months:1}); // with object literal\n```\n\n----------------------------------------\n\nTITLE: Multiple Time Unit Addition in Moment.js\nDESCRIPTION: Demonstrates two ways to add multiple time units: chaining and object literal.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/03-manipulating/01-add.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmoment().add(7, 'days').add(1, 'months'); // with chaining\nmoment().add({days:7,months:1}); // with object literal\n```\n\n----------------------------------------\n\nTITLE: Setting Minimal Weekday Abbreviations as a Function in Moment.js\nDESCRIPTION: This example shows how to set the weekdaysMin property as a callback function in Moment.js. The function dynamically returns the appropriate weekday abbreviation based on the moment and format provided.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/07-customization/05-weekday-min.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.updateLocale('en', {\n    weekdaysMin : function (momentToFormat, format) {\n        return weekdaysMin[momentToFormat.day()];\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Date Comparison using isAfter()\nDESCRIPTION: Demonstrates basic date comparison between two dates using the isAfter() method.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/05-query/03-is-after.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmoment('2010-10-20').isAfter('2010-10-19'); // true\n```\n\n----------------------------------------\n\nTITLE: Moment.js Consistent Handling of ISO Dates\nDESCRIPTION: Shows how Moment.js consistently interprets dates as local time regardless of format, providing more predictable behavior compared to native Date.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/guides/moment/00-lib-concepts/04-js-date.md#2025-04-08_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmoment('2016-01-01')\n//\"2016-01-01T00:00:00-06:00\"\n```\n\n----------------------------------------\n\nTITLE: Creating Moment objects with only day and time units\nDESCRIPTION: When only days and smaller units (hours, minutes, etc.) are specified, Moment.js defaults to the current month and year.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/01-parsing/17-defaults.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmoment(5, \"DD\");  // this month, 5th day-of-month\nmoment(\"4 05:06:07\", \"DD hh:mm:ss\");  // this month, 4th day-of-month, 05:06:07.000\n```\n\n----------------------------------------\n\nTITLE: Checking Date Objects with moment.isDate()\nDESCRIPTION: Demonstrates how to use moment.isDate() to validate if a variable is a native JavaScript Date object. The method returns true only for native Date objects and false for other types including undefined values and Moment objects.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/05-query/11-is-a-date.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.isDate(); // false\nmoment.isDate(new Date()); // true\nmoment.isDate(moment()); // false\n```\n\n----------------------------------------\n\nTITLE: Parsing ASP.NET Style Time Spans in Moment.js\nDESCRIPTION: Creates duration objects by parsing ASP.NET style time spans. Supports hour:minute:second format, with optional days prefixed with a dot, and partial seconds support.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/08-durations/01-creating.md#2025-04-08_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.duration('23:59:59');\nmoment.duration('23:59:59.999');\nmoment.duration('7.23:59:59.999');\nmoment.duration('23:59'); // added in 2.3.0\n```\n\n----------------------------------------\n\nTITLE: Deprecated Add/Subtract Method Usage in Moment.js\nDESCRIPTION: This code snippet shows the deprecated syntax for add and subtract methods in Moment.js. The order of parameters (period, number) is no longer supported.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/guides/moment/02-warnings/05-add-inverted-param.md#2025-04-08_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmoment().add(period, number) is deprecated. Please use moment().add(number, period)\nmoment().subtract(period, number) is deprecated. Please use moment().subtract(number, period)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Time Units from Duration Objects using get() Method in Moment.js\nDESCRIPTION: Demonstrates how to use the get() method on a Moment.js duration object to retrieve specific units of time. The method accepts a string parameter specifying the desired time unit. It works with hours, minutes, seconds, and milliseconds, using the same shorthand keys as moment#add.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/08-durations/16-get.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nduration.get('hours');\nduration.get('minutes');\nduration.get('seconds');\nduration.get('milliseconds');\n```\n\n----------------------------------------\n\nTITLE: Updating Locale with Long Date Formats in Moment.js\nDESCRIPTION: This snippet demonstrates how to update the 'en' locale with custom long date formats. It includes format tokens for various date and time representations, such as LT for time, L for short date, and LLLL for full date and time with day name.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/07-customization/06-long-date-formats.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.updateLocale('en', {\n    longDateFormat : {\n        LT: \"h:mm A\",\n        LTS: \"h:mm:ss A\",\n        L: \"MM/DD/YYYY\",\n        l: \"M/D/YYYY\",\n        LL: \"MMMM Do YYYY\",\n        ll: \"MMM D YYYY\",\n        LLL: \"MMMM Do YYYY LT\",\n        lll: \"MMM D YYYY LT\",\n        LLLL: \"dddd, MMMM Do YYYY LT\",\n        llll: \"ddd, MMM D YYYY LT\"\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Invalid Moments with moment.max() in JavaScript\nDESCRIPTION: This example demonstrates the behavior of moment.max() when invalid moment instances are included as arguments. From version 2.10.5, if any of the input moments is invalid, the result will be an invalid moment.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/02-get-set/21-max.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.max(moment(), moment.invalid()).isValid() === false\nmoment.max(moment.invalid(), moment()).isValid() === false\nmoment.max([moment(), moment.invalid()]).isValid() === false\nmoment.max([moment.invalid(), moment()]).isValid() === false\n```\n\n----------------------------------------\n\nTITLE: Finding Difference in Milliseconds with Moment.js\nDESCRIPTION: This example demonstrates how to calculate the difference between two moments in milliseconds using the diff() method. The result is 86400000 milliseconds, which equals one day.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/04-displaying/07-difference.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar a = moment([2007, 0, 29]);\nvar b = moment([2007, 0, 28]);\na.diff(b) // 86400000\n```\n\n----------------------------------------\n\nTITLE: Deprecated Syntax for Subtracting Seconds in MomentJS (JavaScript)\nDESCRIPTION: Shows the deprecated syntax for subtracting seconds from a moment, which was supported before version 2.8.0. This syntax is no longer recommended.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/03-manipulating/02-subtract.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmoment().subtract('seconds', 1); // Deprecated in 2.8.0\nmoment().subtract(1, 'seconds');\n```\n\n----------------------------------------\n\nTITLE: Checking Locale Changes in Moment.js\nDESCRIPTION: This snippet shows how to check if a locale change was successful in Moment.js. The locale() function returns the current locale.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/06-i18n/01-changing-locale.md#2025-04-08_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.locale('fr'); // 'fr'\nmoment.locale('tq'); // 'fr'\n```\n\n----------------------------------------\n\nTITLE: Retrieving and Setting Relative Time Thresholds in Moment.js\nDESCRIPTION: This snippet demonstrates how to retrieve existing relative time thresholds and set new ones using moment.relativeTimeThreshold(). It covers all available time units including seconds, minutes, hours, days, weeks, and months.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/07-customization/13-relative-time-threshold.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n  // Retrieve existing thresholds\n  moment.relativeTimeThreshold('ss'); // 44\n  moment.relativeTimeThreshold('s');  // 45\n  moment.relativeTimeThreshold('m');  // 45\n  moment.relativeTimeThreshold('h');  // 22\n  moment.relativeTimeThreshold('d');  // 26\n  moment.relativeTimeThreshold('w');  // null (disabled)\n  moment.relativeTimeThreshold('M');  // 11\n\n  // Set new thresholds\n  moment.relativeTimeThreshold('s', 40);\n  moment.relativeTimeThreshold('ss', 3);\n  moment.relativeTimeThreshold('m', 40);\n  moment.relativeTimeThreshold('h', 20);\n  moment.relativeTimeThreshold('d', 25);\n  moment.relativeTimeThreshold('w', 4);  // enables weeks\n  moment.relativeTimeThreshold('M', 10);\n```\n\n----------------------------------------\n\nTITLE: Setting Locale for Duration Humanization in Moment.js\nDESCRIPTION: This snippet demonstrates how to set different locales for a duration object and display the humanized output. It shows examples for English, French, and Spanish locales.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/08-durations/20-locale.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.duration(1, \"minutes\").locale(\"en\").humanize(); // a minute\nmoment.duration(1, \"minutes\").locale(\"fr\").humanize(); // une minute\nmoment.duration(1, \"minutes\").locale(\"es\").humanize(); // un minuto\n```\n\n----------------------------------------\n\nTITLE: Configuring Relative Time Strings in MomentJS\nDESCRIPTION: Demonstrates complete configuration of relative time strings including future/past prefixes, singular/plural forms for seconds, minutes, hours, days, weeks, months and years.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/07-customization/07-relative-time.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.updateLocale('en', {\n    relativeTime : {\n        future: \"in %s\",\n        past:   \"%s ago\",\n        s  : 'a few seconds',\n        ss : '%d seconds',\n        m:  \"a minute\",\n        mm: \"%d minutes\",\n        h:  \"an hour\",\n        hh: \"%d hours\",\n        d:  \"a day\",\n        dd: \"%d days\",\n        w:  \"a week\",\n        ww: \"%d weeks\",\n        M:  \"a month\",\n        MM: \"%d months\",\n        y:  \"a year\",\n        yy: \"%d years\"\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving UTC Offset from Zone in Moment.js Timezone\nDESCRIPTION: Demonstrates how to get the UTC offset in minutes for a specific timestamp using a Zone object. The offset can vary based on daylight saving time.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment-timezone/02-zone-object/03-offset.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.tz.zone('America/Los_Angeles').utcOffset(1403465838805); // 420\nmoment.tz.zone('America/Los_Angeles').utcOffset(1388563200000); // 480\n```\n\n----------------------------------------\n\nTITLE: Configuring Require.js for Moment.js Package\nDESCRIPTION: Sets up a Require.js configuration to properly load Moment.js using packages config. This allows Moment.js to be loaded correctly regardless of whether it was installed via Bower or npm.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/00-use-it/04-require-js.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nrequirejs.config({\n  packages: [{\n    name: 'moment',\n    // This location is relative to baseUrl. Choose bower_components\n    // or node_modules, depending on how moment was installed.\n    location: '[bower_components|node_modules]/moment',\n    main: 'moment'\n  }]\n});\n```\n\n----------------------------------------\n\nTITLE: Parsing Dates in Local Mode with Moment.js\nDESCRIPTION: Demonstrates how to parse dates in local mode using Moment.js. This mode assumes ambiguous input (without offset) to be local time and adjusts unambiguous input (with offset) to local time.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/01-parsing/00-intro.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmoment(...)\n```\n\n----------------------------------------\n\nTITLE: Parsing Dates in Local Mode with Moment.js\nDESCRIPTION: Demonstrates how to parse dates in local mode using Moment.js. This mode assumes ambiguous input (without offset) to be local time and adjusts unambiguous input (with offset) to local time.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/01-parsing/00-intro.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmoment(...)\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of fquarter() Method in Moment.js\nDESCRIPTION: Demonstrates the basic usage of the fquarter() method that returns a formatted fiscal quarter string. By default, the fiscal year starts in April, making January fall into Q4 of the previous fiscal year.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/10-plugins/13-fquarter.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmoment(\"2013-01-01\").fquarter();\n// Q4 2012/13\n```\n\n----------------------------------------\n\nTITLE: Setting UTC Offset with Time Preservation in Moment.js\nDESCRIPTION: Illustrates how to use the second parameter of utcOffset() to keep the same local time while changing the offset. This is useful for constructing moments with specific time zone offsets.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/03-manipulating/09-utc-offset.md#2025-04-08_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmoment([2016, 0, 1, 0, 0, 0]).utcOffset(-5, true) // Equivalent to \"2016-01-01T00:00:00-05:00\"\n```\n\n----------------------------------------\n\nTITLE: Basic Moment.js Usage with Webpack\nDESCRIPTION: Simple example showing how to require and use Moment.js in a JavaScript file that will be bundled with Webpack.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/00-use-it/08-webpack.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar moment = require('moment');\nmoment().format();\n```\n\n----------------------------------------\n\nTITLE: Using isBefore with Time Units in Moment.js\nDESCRIPTION: Shows how to limit the granularity of the comparison to specific time units (such as year). When a unit is specified, the comparison checks up to that level of precision.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/05-query/01-is-before.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmoment('2010-10-20').isBefore('2010-12-31', 'year'); // false\nmoment('2010-10-20').isBefore('2011-01-01', 'year'); // true\n```\n\n----------------------------------------\n\nTITLE: Custom Token Processing Function for MomentJS Relative Time\nDESCRIPTION: Function signature for custom token processing in relative time formatting. Allows advanced customization based on number, suffix presence, key type, and future/past context.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/07-customization/07-relative-time.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction (number, withoutSuffix, key, isFuture) {\n    return string;\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Moment Object to ISO 8601 String in JavaScript\nDESCRIPTION: Demonstrates how to format a moment object to an ISO8601 standard string. The method returns a UTC timestamp by default, but from version 2.20.0 can preserve local offset when passing true. Uses native Date.prototype.toISOString when available for better performance since version 2.8.4.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/04-displaying/14-as-iso-string.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmoment().toISOString() // 2013-02-04T22:44:30.652Z\n```\n\n----------------------------------------\n\nTITLE: Converting Moment Object to ISO 8601 String in JavaScript\nDESCRIPTION: Demonstrates how to format a moment object to an ISO8601 standard string. The method returns a UTC timestamp by default, but from version 2.20.0 can preserve local offset when passing true. Uses native Date.prototype.toISOString when available for better performance since version 2.8.4.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/04-displaying/14-as-iso-string.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmoment().toISOString() // 2013-02-04T22:44:30.652Z\n```\n\n----------------------------------------\n\nTITLE: Unpacking Timezone Data with Moment.js in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the moment.tz.unpack() function to convert a packed timezone string into an unpacked object. The function takes a packed string as input and returns an object with timezone details including name, abbreviations, offsets, transition times, and population.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment-timezone/05-data-utilities/02-unpack.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar packed = \"Indian/Mauritius|LMT MUT MUST|-3O -40 -50|012121|-2xorO 34unO 14L0 12kr0 11z0|15e4\";\n\nmoment.tz.unpack(packed);\n// {\n//     name       : 'Indian/Mauritius',\n//     abbrs      : ['LMT', 'MUT', 'MUST', 'MUT', 'MUST', 'MUT'],\n//     offsets    : [-230, -240, -300, -240, -300, -240],\n//     untils     : [-1988164200000, 403041600000, 417034800000, 1224972000000, 1238274000000, null],\n//     population : 150000\n// };\n```\n\n----------------------------------------\n\nTITLE: Installing Moment.js via npm\nDESCRIPTION: Command to install Moment.js package using npm package manager.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/00-use-it/07-browserify.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install moment\n```\n\n----------------------------------------\n\nTITLE: Time Zone with Offsets Response Format in Moment.js\nDESCRIPTION: Example response format when retrieving time zones with offsets, showing an array of objects containing zone names and their current UTC offsets in minutes.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment-timezone/01-using-timezones/08-getting-country-zones.md#2025-04-08_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n[\n   { name: \"Asia/Shanghai\", offset: -480 },\n   { name: \"Asia/Urumqi\", offset: -360 }\n]\n```\n\n----------------------------------------\n\nTITLE: Equivalent Manual Time Setting in Moment.js\nDESCRIPTION: These snippets show the manual equivalent of using startOf() for 'year' and 'hour'. They demonstrate how startOf() is a shortcut for setting multiple time components to their start values.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/03-manipulating/03-start-of.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmoment().startOf('year');\nmoment().month(0).date(1).hours(0).minutes(0).seconds(0).milliseconds(0);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmoment().startOf('hour');\nmoment().minutes(0).seconds(0).milliseconds(0)\n```\n\n----------------------------------------\n\nTITLE: Converting Duration to ISO 8601 String in JavaScript using Moment.js\nDESCRIPTION: Demonstrates how to convert a Moment.js duration object to an ISO 8601 compliant string format. The example shows converting a duration of 1 day to the format 'P1D', following the ISO 8601 standard for duration representation.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/08-durations/19-as-iso-string.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.duration(1, 'd').toISOString() // \"P1D\"\n```\n\n----------------------------------------\n\nTITLE: Converting Duration to ISO 8601 String in JavaScript using Moment.js\nDESCRIPTION: Demonstrates how to convert a Moment.js duration object to an ISO 8601 compliant string format. The example shows converting a duration of 1 day to the format 'P1D', following the ISO 8601 standard for duration representation.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/08-durations/19-as-iso-string.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.duration(1, 'd').toISOString() // \"P1D\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Locale Settings for AM/PM Parsing in Moment.js\nDESCRIPTION: This snippet demonstrates how to update the locale settings for AM/PM parsing in Moment.js. It shows the syntax for different versions of Moment.js, including the current method using updateLocale, the previous method using locale, and the deprecated method using lang.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/07-customization/09-am-pm-parsing.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// From 2.12.0 onward\nmoment.updateLocale('en', {\n    meridiemParse : RegExp\n    isPM : Function\n});\n\n// From 2.8.1 to 2.11.2\nmoment.locale('en', {\n    meridiemParse : RegExp\n    isPM : Function\n});\n\n// Deprecated in 2.8.1\nmoment.lang('en', {\n    meridiemParse : RegExp\n    isPM : Function\n});\n```\n\n----------------------------------------\n\nTITLE: Deprecated Syntax in Moment.js\nDESCRIPTION: Shows the deprecated syntax and its current replacement.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/03-manipulating/01-add.md#2025-04-08_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nmoment().add('seconds', 1); // Deprecated in 2.8.0\nmoment().add(1, 'seconds');\n```\n\n----------------------------------------\n\nTITLE: Loading All Locales with Browserify\nDESCRIPTION: Example showing how to include all available locales when using Moment.js with Browserify.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/00-use-it/07-browserify.md#2025-04-08_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar moment = require('moment');\nrequire(\"moment/min/locales.min\");\nmoment.locale('cs');\nconsole.log(moment.locale()); // cs\n```\n\n----------------------------------------\n\nTITLE: Converting Moment Object to Array in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the toArray() method in Moment.js. It returns an array that mirrors the parameters from new Date(), containing year, month, day, hour, minute, second, and millisecond.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/04-displaying/12-as-array.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmoment().toArray(); // [2013, 1, 4, 14, 40, 16, 154];\n```\n\n----------------------------------------\n\nTITLE: Converting Moment Object to Array in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the toArray() method in Moment.js. It returns an array that mirrors the parameters from new Date(), containing year, month, day, hour, minute, second, and millisecond.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/04-displaying/12-as-array.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmoment().toArray(); // [2013, 1, 4, 14, 40, 16, 154];\n```\n\n----------------------------------------\n\nTITLE: Basic Moment.js Usage with Browserify\nDESCRIPTION: Basic example showing how to require and use Moment.js with Browserify for date formatting.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/00-use-it/07-browserify.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar moment = require('moment');\nmoment().format();\n```\n\n----------------------------------------\n\nTITLE: Loading Moment.js with SystemJS Basic Configuration\nDESCRIPTION: Basic setup for loading Moment.js using SystemJS module loader. Configures the base URL path and imports the moment.js file.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/00-use-it/10-system-js.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<script src=\"system.js\"></script>\n<script>\n  System.config({\n    baseURL: '/app'\n  });\n\n  System.import('moment.js');\n </script>\n```\n\n----------------------------------------\n\nTITLE: Comparing Local vs UTC Time Format in MomentJS\nDESCRIPTION: Demonstrates the difference in output format between local time and UTC time using moment() and moment.utc()\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/01-parsing/13-utc.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmoment().format();     // 2013-02-04T10:35:24-08:00\nmoment.utc().format(); // 2013-02-04T18:35:24+00:00\n```\n\n----------------------------------------\n\nTITLE: Comparing Local vs UTC Time Format in MomentJS\nDESCRIPTION: Demonstrates the difference in output format between local time and UTC time using moment() and moment.utc()\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/01-parsing/13-utc.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmoment().format();     // 2013-02-04T10:35:24-08:00\nmoment.utc().format(); // 2013-02-04T18:35:24+00:00\n```\n\n----------------------------------------\n\nTITLE: Customizing Calendar Format Function in MomentJS\nDESCRIPTION: This code demonstrates how to modify the calendar format function in MomentJS to introduce custom tokens like 'thisMonth' and 'nextMonth' based on date differences. The function compares the current moment with a reference date and returns the appropriate token based on the time difference in days.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/07-customization/11-calendar-format.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.calendarFormat = function (myMoment, now) {\n\tvar diff = myMoment.diff(now, 'days', true);\n\tvar nextMonth = now.clone().add(1, 'month');\n\n\tvar retVal =  diff < -6 ? 'sameElse' :\n\t\tdiff < -1 ? 'lastWeek' :\n\t\tdiff < 0 ? 'lastDay' :\n\t\tdiff < 1 ? 'sameDay' :\n\t\tdiff < 2 ? 'nextDay' :\n\t\tdiff < 7 ? 'nextWeek' :\n\t\t// introduce thisMonth and nextMonth\n\t\t(myMoment.month() === now.month() && myMoment.year() === now.year()) ? 'thisMonth' :\n\t\t(nextMonth.month() === myMoment.month() && nextMonth.year() === myMoment.year()) ? 'nextMonth' : 'sameElse';\n\treturn retVal;\n};\n```\n\n----------------------------------------\n\nTITLE: Fallback Format for Distant Dates in moment-shortformat\nDESCRIPTION: Demonstrates how the moment-shortformat plugin handles dates that are far in the past or future. Instead of using the short format with hours, it falls back to a date representation.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/10-plugins/21-shortformat.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmoment().subtract(500, 'days').short();\n// 5 Mar, 1970\n```\n\n----------------------------------------\n\nTITLE: Setting Moment.js as Global for Specific Dependencies\nDESCRIPTION: SystemJS configuration to provide Moment.js as a global variable for specific dependency files only.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/00-use-it/10-system-js.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nSystem.config({\n  meta: {\n    'path/to/global-file.js': {\n      globals: {\n        moment: 'moment'\n      }\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Parsing Dates with Multiple Format Options in Moment.js\nDESCRIPTION: This example demonstrates how to parse date strings with multiple possible formats in Moment.js by passing an array of format strings. The same date represented in different formats ('12 March, 2016' and 'March 12, 2016') is correctly parsed using the format array ['DDMMMMY', 'MMMMDDY'].\nSOURCE: https://github.com/moment/momentjs.com/blob/master/guides/moment/01-parsing/05-multiple-formats.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmoment('12 March, 2016', ['DDMMMMY', 'MMMMDDY']).format()\n\"2016-03-12T00:00:00-06:00\"\nmoment('March 12, 2016', ['DDMMMMY', 'MMMMDDY']).format()\n\"2016-03-12T00:00:00-06:00\"\n```\n\n----------------------------------------\n\nTITLE: Getting the Quarter with Moment.js\nDESCRIPTION: Examples of retrieving the quarter (1-4) from a Moment.js date object using the quarter() method. The method determines which quarter of the year the date falls into.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/02-get-set/13-quarter.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmoment('2013-01-01T00:00:00.000').quarter() // 1\nmoment('2013-04-01T00:00:00.000').subtract(1, 'ms').quarter() // 1\nmoment('2013-04-01T00:00:00.000').quarter() // 2\nmoment('2013-07-01T00:00:00.000').subtract(1, 'ms').quarter() // 2\nmoment('2013-07-01T00:00:00.000').quarter() // 3\nmoment('2013-10-01T00:00:00.000').subtract(1, 'ms').quarter() // 3\nmoment('2013-10-01T00:00:00.000').quarter() // 4\nmoment('2014-01-01T00:00:00.000').subtract(1, 'ms').quarter() // 4\n```\n\n----------------------------------------\n\nTITLE: Getting the Quarter with Moment.js\nDESCRIPTION: Examples of retrieving the quarter (1-4) from a Moment.js date object using the quarter() method. The method determines which quarter of the year the date falls into.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/02-get-set/13-quarter.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmoment('2013-01-01T00:00:00.000').quarter() // 1\nmoment('2013-04-01T00:00:00.000').subtract(1, 'ms').quarter() // 1\nmoment('2013-04-01T00:00:00.000').quarter() // 2\nmoment('2013-07-01T00:00:00.000').subtract(1, 'ms').quarter() // 2\nmoment('2013-07-01T00:00:00.000').quarter() // 3\nmoment('2013-10-01T00:00:00.000').subtract(1, 'ms').quarter() // 3\nmoment('2013-10-01T00:00:00.000').quarter() // 4\nmoment('2014-01-01T00:00:00.000').subtract(1, 'ms').quarter() // 4\n```\n\n----------------------------------------\n\nTITLE: Complete Ordinal Function Implementation\nDESCRIPTION: Full implementation example of an ordinal function for English locale that handles all number cases and returns the number with its appropriate suffix. Includes support for the token parameter introduced in 2.1.0.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/07-customization/12-ordinal.md#2025-04-08_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.updateLocale('en', {\n    ordinal : function (number, token) {\n        var b = number % 10;\n        var output = (~~ (number % 100 / 10) === 1) ? 'th' :\n            (b === 1) ? 'st' :\n            (b === 2) ? 'nd' :\n            (b === 3) ? 'rd' : 'th';\n        return number + output;\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Intelligent Locale Search in Moment.js\nDESCRIPTION: This snippet demonstrates Moment.js's intelligent search through an array of locales and their substrings.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/06-i18n/01-changing-locale.md#2025-04-08_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.locale(['en-nz', 'en-au']); // 'en-au', not 'en'\n```\n\n----------------------------------------\n\nTITLE: Using Different Input Types with Moment.js 'from' Method\nDESCRIPTION: Illustrates the flexibility of the 'from' method by showing it can accept various input types, including Moment objects, arrays, Date objects, and strings representing dates.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/04-displaying/03-from.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar a = moment([2007, 0, 28]);\nvar b = moment([2007, 0, 29]);\na.from(b);                     // \"a day ago\"\na.from([2007, 0, 29]);         // \"a day ago\"\na.from(new Date(2007, 0, 29)); // \"a day ago\"\na.from(\"2007-01-29\");          // \"a day ago\"\n```\n\n----------------------------------------\n\nTITLE: Using Different Input Types with Moment.js 'from' Method\nDESCRIPTION: Illustrates the flexibility of the 'from' method by showing it can accept various input types, including Moment objects, arrays, Date objects, and strings representing dates.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/04-displaying/03-from.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar a = moment([2007, 0, 28]);\nvar b = moment([2007, 0, 29]);\na.from(b);                     // \"a day ago\"\na.from([2007, 0, 29]);         // \"a day ago\"\na.from(new Date(2007, 0, 29)); // \"a day ago\"\na.from(\"2007-01-29\");          // \"a day ago\"\n```\n\n----------------------------------------\n\nTITLE: Format Selection Heuristics in Moment.js\nDESCRIPTION: Illustrates how Moment.js selects the appropriate format when multiple options are provided. It prefers valid dates, stricter parsing, and earlier formats in the array.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/01-parsing/04-string-formats.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmoment(\"29-06-1995\", [\"MM-DD-YYYY\", \"DD-MM\", \"DD-MM-YYYY\"]); // uses the last format\nmoment(\"05-06-1995\", [\"MM-DD-YYYY\", \"DD-MM-YYYY\"]);          // uses the first format\n```\n\n----------------------------------------\n\nTITLE: Loading Minified Locales Bundle in HTML\nDESCRIPTION: Shows how to load all locales at once using the minified locales bundle file.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/06-i18n/04-loading-into-browser.md#2025-04-08_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"moment.js\"></script>\n<script src=\"min/locales.js\" charset=\"UTF-8\"></script>\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Weekday in Moment.js (Locale Aware)\nDESCRIPTION: Demonstrates how to get and set the day of the week using Moment.js weekday() method. The behavior changes based on the locale's first day of the week. It also shows how the method handles values outside the normal range.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/02-get-set/07-weekday.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// when Monday is the first day of the week\nmoment().weekday(-7); // last Monday\nmoment().weekday(7); // next Monday\n// when Sunday is the first day of the week\nmoment().weekday(-7); // last Sunday\nmoment().weekday(7); // next Sunday\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Weekday in Moment.js (Locale Aware)\nDESCRIPTION: Demonstrates how to get and set the day of the week using Moment.js weekday() method. The behavior changes based on the locale's first day of the week. It also shows how the method handles values outside the normal range.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/02-get-set/07-weekday.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// when Monday is the first day of the week\nmoment().weekday(-7); // last Monday\nmoment().weekday(7); // next Monday\n// when Sunday is the first day of the week\nmoment().weekday(-7); // last Sunday\nmoment().weekday(7); // next Sunday\n```\n\n----------------------------------------\n\nTITLE: Using max() to Clamp Moments from Server in JavaScript\nDESCRIPTION: Demonstrates how to use moment().max() to clamp a moment from server to prevent display issues caused by unsynchronized clocks. This helps avoid showing incorrect relative time strings.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/03-manipulating/05-max.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar momentFromServer = moment(input);\nvar clampedMoment = momentFromServer.max();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Locale-Specific Weekday Order in Moment.js\nDESCRIPTION: Shows how to get weekdays in locale-specific order by passing true as the first parameter. This example demonstrates getting Arabic weekdays, where Saturday is the first day of the week.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/06-i18n/07-listing-months-weekdays.md#2025-04-08_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.locale('ar');\nmoment.weekdays(true); // lists weekdays Saturday-Friday in Arabic\nmoment.weekdays(true, 2); //will result in Monday in Arabic\n```\n\n----------------------------------------\n\nTITLE: Including Moment Timezone Scripts in HTML\nDESCRIPTION: This snippet shows how to include the Moment.js and Moment Timezone scripts in an HTML file. It loads both the core library and the timezone data file.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment-timezone/00-use-it/02-browser.md#2025-04-08_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"moment.js\"></script>\n<script src=\"moment-timezone-with-data.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Locale Settings in Moment.js\nDESCRIPTION: Creates a new locale with custom settings in Moment.js. This allows for specific regional customizations while maintaining the core functionality of the library.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/07-customization/00-intro.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.locale('en-my-settings', {\n    // customizations.\n});\n```\n\n----------------------------------------\n\nTITLE: Converting Moment.js Duration to Total Minutes\nDESCRIPTION: The asMinutes() method converts the entire duration to minutes. It returns the total length of the duration expressed in minutes, which can exceed 59.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/08-durations/06-minutes.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.duration().asMinutes();\n```\n\n----------------------------------------\n\nTITLE: Format-Dependent Month Names in Moment.js\nDESCRIPTION: Demonstrates how to handle format-dependent month names in certain locales, such as Dutch where month abbreviations have context-specific formatting.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/06-i18n/07-listing-months-weekdays.md#2025-04-08_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.locale('nl');\nmoment.monthsShort(); // ['jan.', 'feb.', 'mrt.', ...]\nmoment.monthsShort('-MMM-'); // [ 'jan', 'feb', 'mrt', ...]\n```\n\n----------------------------------------\n\nTITLE: Parsing Dates with Specific Timezone using Moment Timezone\nDESCRIPTION: Demonstrates how to parse dates in a specific timezone using the moment-timezone plugin. This allows for parsing input in a particular time zone context.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/01-parsing/00-intro.md#2025-04-08_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.tz(...)\n```\n\n----------------------------------------\n\nTITLE: Parsing Dates with Specific Timezone using Moment Timezone\nDESCRIPTION: Demonstrates how to parse dates in a specific timezone using the moment-timezone plugin. This allows for parsing input in a particular time zone context.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/01-parsing/00-intro.md#2025-04-08_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.tz(...)\n```\n\n----------------------------------------\n\nTITLE: Avoiding Mutability with clone() in Moment.js\nDESCRIPTION: This snippet demonstrates how to avoid mutating the original moment object by using the clone() method. It creates a moment object 'a', clones it before adding one week to create 'b', then formats 'a' to show it remains unchanged.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/guides/moment/00-lib-concepts/01-mutability.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar a = moment('2016-01-01'); \nvar b = a.clone().add(1, 'week'); \na.format();\n\"2016-01-01T00:00:00-06:00\"\n```\n\n----------------------------------------\n\nTITLE: Defining Month Names Array in Moment.js\nDESCRIPTION: This snippet demonstrates how to update the locale in Moment.js with an array of month names. It provides a simple way to customize the names of months for a specific locale.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/07-customization/01-month-names.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.updateLocale('en', {\n    months : [\n        \"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\",\n        \"August\", \"September\", \"October\", \"November\", \"December\"\n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: Converting MomentJS Date to Unix Timestamp\nDESCRIPTION: Demonstrates how to convert a MomentJS date object to a Unix timestamp in seconds. The unix() method floors the timestamp to the nearest second and removes milliseconds component.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/04-displaying/09-unix-timestamp.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmoment(1318874398806).unix(); // 1318874398\n```\n\n----------------------------------------\n\nTITLE: Retrieving Days from Moment.js Duration\nDESCRIPTION: This snippet demonstrates how to get the number of days (0-30) from a Moment.js duration object using the days() method.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/08-durations/08-days.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.duration().days();\n```\n\n----------------------------------------\n\nTITLE: Setting Meridiem Function (Deprecated)\nDESCRIPTION: Deprecated method (pre-2.8.1) for setting the meridiem function using the lang method.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/07-customization/08-am-pm.md#2025-04-08_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.lang('en', {\n    meridiem : Function\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Month Abbreviation Array Configuration in MomentJS\nDESCRIPTION: Demonstrates how to set up basic month abbreviations using an array of three-letter month names in English locale.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/07-customization/02-month-abbreviations.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.updateLocale('en', {\n    monthsShort : [\n        \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\n        \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"\n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Negative Differences with Moment.js\nDESCRIPTION: This example shows how diff() returns negative values when the moment is earlier than the one being compared. It demonstrates the relationship between the order of moments and the sign of the result.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/04-displaying/07-difference.md#2025-04-08_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar a = moment();\nvar b = moment().add(1, 'seconds');\na.diff(b) // -1000\nb.diff(a) // 1000\n```\n\n----------------------------------------\n\nTITLE: Parsing with Explicit Offsets\nDESCRIPTION: Shows how moment.tz handles parsing when input strings contain explicit timezone offsets.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment-timezone/01-using-timezones/01-parsing-in-zone.md#2025-04-08_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar zone = \"America/Los_Angeles\";\nmoment.tz('2013-06-01T00:00:00',       zone).format(); // 2013-06-01T00:00:00-07:00\nmoment.tz('2013-06-01T00:00:00-04:00', zone).format(); // 2013-05-31T21:00:00-07:00\nmoment.tz('2013-06-01T00:00:00+00:00', zone).format(); // 2013-05-31T17:00:00-07:00\n```\n\n----------------------------------------\n\nTITLE: Retrieving Years from Duration in Moment.js\nDESCRIPTION: These methods allow working with the year component of durations in Moment.js. The years() method retrieves just the year portion of a duration, while asYears() converts the entire duration to a decimal value in years.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/08-durations/11-years.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.duration().years();\nmoment.duration().asYears();\n```\n\n----------------------------------------\n\nTITLE: Callback Function for Month Abbreviations in MomentJS\nDESCRIPTION: Shows how to use a callback function to provide different month abbreviations based on the format pattern, allowing for nominative and subjective cases.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/07-customization/02-month-abbreviations.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.updateLocale('en', {\n    monthsShort : function (momentToFormat, format) {\n        if (/^MMMM/.test(format)) {\n            return nominative[momentToFormat.month()];\n        } else {\n            return subjective[momentToFormat.month()];\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Converting Moment.js Date to JavaScript Date Object\nDESCRIPTION: Shows how to convert a Moment.js date to a native JavaScript Date object. This is useful when interfacing with APIs or functions that expect a standard Date object.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/04-displaying/00-intro.md#2025-04-08_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmoment().toDate();\n```\n\n----------------------------------------\n\nTITLE: Basic Precise Range Difference in JavaScript\nDESCRIPTION: Demonstrates how to get a human-readable string representation of the exact difference between two dates using the preciseDiff method.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/10-plugins/06-preciserange.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmoment(\"2014-01-01 12:00:00\").preciseDiff(\"2015-03-04 16:05:06\");\n```\n\n----------------------------------------\n\nTITLE: Setting Basic Weekday Names Array in MomentJS Locale\nDESCRIPTION: Demonstrates how to configure weekday names using a simple array of strings. This is the most basic approach for defining weekday names in English.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/07-customization/03-weekday-names.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.updateLocale('en', {\n    weekdays : [\n        \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"\n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Day of Year in Moment.js\nDESCRIPTION: The dayOfYear() function in Moment.js is used to get or set the day of the year. It accepts numbers from 1 to 366 and will adjust the year if the range is exceeded.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/02-get-set/09-day-of-year.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmoment().dayOfYear(Number);\nmoment().dayOfYear(); // Number\n```\n\n----------------------------------------\n\nTITLE: Creating a Duration Object from Moment Difference in JavaScript\nDESCRIPTION: This snippet shows how to calculate the time difference between two moment objects and convert it to a duration object. It creates two moment instances and then uses moment.duration() with the diff method to get the duration between them.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/08-durations/14-diffing.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n  var x = new moment()\n  var y = new moment()\n  var duration = moment.duration(x.diff(y))\n  // returns duration object with the duration between x and y\n```\n\n----------------------------------------\n\nTITLE: Formatting Relative Time Without Suffix in Moment.js\nDESCRIPTION: Shows how to use the 'from' method with a boolean parameter to return the relative time without a suffix. This is useful for generating human-readable lengths of time.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/04-displaying/03-from.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar start = moment([2007, 0, 5]);\nvar end   = moment([2007, 0, 10]);\nend.from(start);       // \"in 5 days\"\nend.from(start, true); // \"5 days\"\n```\n\n----------------------------------------\n\nTITLE: Formatting Relative Time Without Suffix in Moment.js\nDESCRIPTION: Shows how to use the 'from' method with a boolean parameter to return the relative time without a suffix. This is useful for generating human-readable lengths of time.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/04-displaying/03-from.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar start = moment([2007, 0, 5]);\nvar end   = moment([2007, 0, 10]);\nend.from(start);       // \"in 5 days\"\nend.from(start, true); // \"5 days\"\n```\n\n----------------------------------------\n\nTITLE: Setting Format-Specific Weekday Names with Standalone Cases\nDESCRIPTION: Advanced configuration showing how to set different forms of weekday names for standalone and format cases, with a regex pattern for format detection.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/07-customization/03-weekday-names.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.updateLocale('en', {\n    weekdays : {\n        standalone: 'Воскресенье_Понедельник_Вторник_Среда_Четверг_Пятница_Суббота'.split('_'),\n        format: 'Воскресенье_Понедельник_Вторник_Среду_Четверг_Пятницу_Субботу'.split('_'),\n        isFormat: /\\[ ?[Вв] ?(?:прошлую|следующую|эту)? ?\\] ?dddd/\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Using Moment.js inspect() Method\nDESCRIPTION: Demonstrates various ways to use the inspect() method with different moment object configurations, including UTC, timezone parsing, and invalid dates. The method returns a string that can be evaluated to reproduce the same moment object.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/04-displaying/17-inspect.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmoment().inspect() // 'moment(\"2016-11-09T22:23:27.861\")'\nmoment.utc().inspect() // 'moment.utc(\"2016-11-10T06:24:10.638+00:00\")'\nmoment.parseZone('2016-11-10T06:24:12.958+05:00').inspect() // 'moment.parseZone(\"2016-11-10T06:24:12.958+05:00\")'\nmoment(new Date('nope')).inspect() // 'moment.invalid(/* Invalid Date */)\nmoment('blah', 'YYYY').inspect() // 'moment.invalid(/* blah */)'\n```\n\n----------------------------------------\n\nTITLE: Disabling Relative Time Rounding in Moment.js\nDESCRIPTION: This snippet shows how to disable rounding completely by setting a custom function that retains the original value. It demonstrates the effect of this configuration on a relative time calculation, resulting in a more precise output.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/07-customization/14-relative-time-rounding.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar retainValue = function (value) {\n    return value;\n};\nmoment.relativeTimeRounding(retainValue);\n\nvar a = moment();\na.subtract({hours: 39});\na.toNow(); // == 'in 1.625 days', 'Round down towards the nearest year'\n```\n\n----------------------------------------\n\nTITLE: Disabling Relative Time Rounding in Moment.js\nDESCRIPTION: This snippet shows how to disable rounding completely by setting a custom function that retains the original value. It demonstrates the effect of this configuration on a relative time calculation, resulting in a more precise output.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/07-customization/14-relative-time-rounding.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar retainValue = function (value) {\n    return value;\n};\nmoment.relativeTimeRounding(retainValue);\n\nvar a = moment();\na.subtract({hours: 39});\na.toNow(); // == 'in 1.625 days', 'Round down towards the nearest year'\n```\n\n----------------------------------------\n\nTITLE: Checking Duration Objects Using moment.isDuration()\nDESCRIPTION: Shows various examples of using moment.isDuration() to check if different objects are valid Moment.js duration objects. The method returns true only for duration objects created using moment.duration(), and false for other types like Date objects or moment objects.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/08-durations/18-is-a-duration.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.isDuration() // false\nmoment.isDuration(new Date()) // false\nmoment.isDuration(moment()) // false\nmoment.isDuration(moment.duration()) // true\nmoment.isDuration(moment.duration(2, 'minutes')) // true\n```\n\n----------------------------------------\n\nTITLE: Setting Meridiem Function in MomentJS Locale (Current)\nDESCRIPTION: Example showing how to update the locale configuration with a custom meridiem function that returns different time period strings based on hour and minute values.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/07-customization/08-am-pm.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.updateLocale('zh-cn', {\n    meridiem : function (hour, minute, isLowercase) {\n        if (hour < 9) {\n            return \"早上\";\n        } else if (hour < 11 && minute < 30) {\n            return \"上午\";\n        } else if (hour < 13 && minute < 30) {\n            return \"中午\";\n        } else if (hour < 18) {\n            return \"下午\";\n        } else {\n            return \"晚上\";\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Time Zone Offset in MomentJS\nDESCRIPTION: Retrieves the time zone offset in minutes from GMT/UTC. Returns values like 60, 120, 240, etc.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/03-manipulating/10-timezone-offset.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmoment().zone();\n```\n\n----------------------------------------\n\nTITLE: Defining Calendar Formatting Strings in Moment.js\nDESCRIPTION: This snippet demonstrates how to define calendar formatting strings for different scenarios in Moment.js. It includes formats for yesterday, today, tomorrow, last week, next week, and default cases.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/07-customization/10-calendar.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.locale('en', {\n    calendar : {\n        lastDay : '[Yesterday at] LT',\n        sameDay : '[Today at] LT',\n        nextDay : '[Tomorrow at] LT',\n        lastWeek : '[last] dddd [at] LT',\n        nextWeek : 'dddd [at] LT',\n        sameElse : 'L'\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Locale Ordinal Function - Deprecated Syntax\nDESCRIPTION: Deprecated syntax for setting ordinal functions in MomentJS versions before 2.8.1.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/07-customization/12-ordinal.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.lang('en', {\n    ordinal : Function\n});\n```\n\n----------------------------------------\n\nTITLE: Month End Date Handling in Moment.js\nDESCRIPTION: Demonstrates how month-end dates are handled when adding months.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/03-manipulating/01-add.md#2025-04-08_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmoment([2010, 0, 31]);                  // January 31\nmoment([2010, 0, 31]).add(1, 'months'); // February 28\n```\n\n----------------------------------------\n\nTITLE: Disabling Moment.js Global Export in Require.js\nDESCRIPTION: Shows how to configure Require.js to prevent Moment.js from creating a global 'moment' variable. This is done by setting the noGlobal option in the module config.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/00-use-it/04-require-js.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nrequire.config({\n    config: {\n        moment: {\n            noGlobal: true\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Common Regional Week Settings in Moment.js\nDESCRIPTION: Demonstrates how to configure week settings for different regions including ISO-8601/Europe, US/Canada, Arab countries, and other common configurations. Each example shows the appropriate dow (first day of week) and doy (day of year) values with explanations.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/07-customization/16-dow-doy.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// ISO-8601, Europe\nmoment.updateLocale(\"en\", { week: {\n  dow: 1, // First day of week is Monday\n  doy: 4  // First week of year must contain 4 January (7 + 1 - 4)\n}});\n\n// US, Canada\nmoment.updateLocale(\"en\", { week: {\n  dow: 0, // First day of week is Sunday\n  doy: 6  // First week of year must contain 1 January (7 + 0 - 1)\n}});\n\n// Many Arab countries\nmoment.updateLocale(\"en\", { week: {\n  dow: 6, // First day of week is Saturday\n  doy: 12 // First week of year must contain 1 January (7 + 6 - 1)\n}});\n\n// Also common\nmoment.updateLocale(\"en\", { week: {\n  dow: 1, // First day of week is Monday\n  doy: 7  // First week of year must contain 1 January (7 + 1 - 1)\n}});\n```\n\n----------------------------------------\n\nTITLE: Month Addition with Date Preservation\nDESCRIPTION: Shows how adding months preserves the day of the month when possible.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/03-manipulating/01-add.md#2025-04-08_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmoment([2010, 1, 28]);                 // February 28\nmoment([2010, 1, 28]).add(1, 'month'); // March 28\n```\n\n----------------------------------------\n\nTITLE: Updating Locale with Custom Eras in Moment.js\nDESCRIPTION: This snippet demonstrates how to update the 'en' locale in Moment.js with custom era definitions. It defines two eras: Anno Domini (AD) and Before Christ (BC), specifying their time ranges, offsets, and naming conventions.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/07-customization/17-eras.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.updateLocale('en', {\n    eras: [{\n        since:  '0001-01-01',\n        until:  +Infinity,\n        offset: 1,\n        name:   'Anno Domini',\n        narrow: 'AD',\n        abbr:   'AD'\n    }, {\n        until:   -Infinity,\n        since:  '0000-12-31',\n        offset: 1,\n        name:   'Before Christ',\n        narrow: 'BC',\n        abbr:   'BC'\n    }],\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Moment.js in a Meteor Project\nDESCRIPTION: Command to add the Moment.js package to a Meteor application using the Meteor package manager. This installs the official momentjs:moment package from Atmosphere, Meteor's package repository.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/00-use-it/06-meteor.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmeteor add momentjs:moment\n```\n\n----------------------------------------\n\nTITLE: Defining Era Object Structure in Moment.js\nDESCRIPTION: This code snippet illustrates the structure of an era object in Moment.js. It shows the properties used to define an era, including its time range, offset, and various name formats. This structure is used when configuring eras for locales.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/07-customization/17-eras.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\neras: [{\n    since:  '0001-01-01', // the start of the era\n    until:  +Infinity,    // the end of the era, can be +/-Infinity\n    offset: 1,            // added to year to (mostly) avoid 0 era years\n    name:   'Anno Domini',// full name of era\n    narrow: 'AD',         // narrow name of era\n    abbr:   'AD'          // abbreviated name of era\n}]\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Invalid Moment Objects in JavaScript\nDESCRIPTION: Creates an invalid Moment.js object and demonstrates checking its validity, formatting, and inspecting parsing flags. The userInvalidated flag is set to true for manually invalidated objects.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/09-utilities/02-invalid.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar m = moment.invalid();\nm.isValid();                      // false\nm.format();                       // 'Invalid date'\nm.parsingFlags().userInvalidated; // true\n```\n\n----------------------------------------\n\nTITLE: Locale Loading Bug Example\nDESCRIPTION: Demonstrates the bug where moment.locale() fails to load properly when using Browserify.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/00-use-it/07-browserify.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar moment = require('moment');\nmoment.locale('cs');\nconsole.log(moment.locale()); // en\n```\n\n----------------------------------------\n\nTITLE: Setting Invalid Date String in Moment.js (Deprecated in 2.8.1)\nDESCRIPTION: This snippet illustrates the deprecated method of setting the 'invalidDate' string for the English locale in Moment.js versions prior to 2.8.1. It uses the 'moment.lang()' method, which is no longer recommended.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/07-customization/18-invalid-date.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.lang('en', {\n    invalidDate : String\n});\n```\n\n----------------------------------------\n\nTITLE: Alternative Approach Using utcOffset\nDESCRIPTION: An alternative way to achieve the same result as moment.parseZone() by using moment() to parse the string and then applying utcOffset() with the original string to maintain the timezone information.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/01-parsing/14-parse-zone.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar s = \"2013-01-01T00:00:00-13:00\";\nmoment(s).utcOffset(s);\n```\n\n----------------------------------------\n\nTITLE: Customizing Invalid Date String for Spanish Locale in Moment.js\nDESCRIPTION: This example demonstrates how to set a custom 'invalidDate' string for the Spanish locale using the current 'moment.updateLocale()' method. It sets the invalid date message to 'Fecha invalida'.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/07-customization/18-invalid-date.md#2025-04-08_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.updateLocale(\"es\", {\n  invalidDate: \"Fecha invalida\"\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Moment.js via NPM\nDESCRIPTION: Command to install Moment.js package using NPM package manager.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/00-use-it/09-typescript.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install moment\n```\n\n----------------------------------------\n\nTITLE: Configuring Require.js for Moment.js with Timezone Support\nDESCRIPTION: Example showing how to configure Require.js paths for Moment.js and use the timezone functionality. The code demonstrates setting up the module path and loading moment-timezone with data to format dates in specific timezones.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment-timezone/00-use-it/03-require-js.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nrequire.config({\n    paths: {\n        \"moment\": \"path/to/moment\"\n    }\n});\ndefine([\"path/to/moment-timezone-with-data\"], function (moment) {\n    moment().tz(\"America/Los_Angeles\").format();\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Calendar Locale in Moment.js (Current and Deprecated Methods)\nDESCRIPTION: This snippet shows how to configure calendar locale settings in Moment.js using both current and deprecated methods. It demonstrates the syntax for different versions of Moment.js, from 2.12.0 onward, 2.8.1 to 2.11.2, and the deprecated method in 2.8.1.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/07-customization/10-calendar.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// From 2.12.0 onward\nmoment.updateLocale('en', {\n    calendar : Object\n});\n// From 2.8.1 to 2.11.2\nmoment.locale('en', {\n    calendar : Object\n});\n\n// Deprecated in 2.8.1\nmoment.lang('en', {\n    calendar : Object\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Moment.js Usage in TypeScript\nDESCRIPTION: Demonstrates how to import and use Moment.js in a TypeScript file using require() syntax. Shows basic date formatting using the LLLL format.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/00-use-it/09-typescript.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst moment = require('moment');\n\nlet now = moment().format('LLLL');\n```\n\n----------------------------------------\n\nTITLE: Getting Timezone Abbreviations with Moment.js\nDESCRIPTION: Demonstrates how to retrieve timezone abbreviations for specific timestamps using the Zone.abbr() method. The method accepts a timestamp in milliseconds and returns the appropriate timezone abbreviation (like PST or PDT) based on the date and timezone.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment-timezone/02-zone-object/02-abbr.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.tz.zone('America/Los_Angeles').abbr(1403465838805); // PDT\nmoment.tz.zone('America/Los_Angeles').abbr(1388563200000); // PST\n```\n\n----------------------------------------\n\nTITLE: Setting UTC Offset from ISO8601 String in Moment.js\nDESCRIPTION: Shows how utcOffset() can extract and set the offset from an ISO8601 formatted string that includes an offset.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/03-manipulating/09-utc-offset.md#2025-04-08_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmoment().utcOffset(\"2013-03-07T07:00:00+08:00\");\n```\n\n----------------------------------------\n\nTITLE: Comparing Etc/GMT+1 and Europe/Madrid Timezone Offsets in Moment.js\nDESCRIPTION: Illustrates the difference between using Etc/GMT+1 (a fixed-offset identifier) and Europe/Madrid (a locality-based identifier) for formatting dates. This shows how POSIX compatibility affects Etc/GMT offsets.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment-timezone/02-zone-object/03-offset.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmoment().tz('Etc/GMT+1').format('YYYY-MM-DD HH:mm ZZ');\n// '2014-12-18 11:22 -0100'\nmoment().tz('Europe/Madrid').format('YYYY-MM-DD HH:mm ZZ');\n// '2014-12-18 13:22 +0100'\n```\n\n----------------------------------------\n\nTITLE: Converting Moment.js Date to OLE Automation Date in JavaScript\nDESCRIPTION: This snippet demonstrates how to convert a Moment.js date object to an OLE Automation date, which is represented as a floating point number.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/10-plugins/02-msdate.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmoment().toOADate(); // a floating point number\n```\n\n----------------------------------------\n\nTITLE: Linking Timezones in Moment.js\nDESCRIPTION: Demonstrates how to add timezone data and create links between identical timezone definitions. Shows how America/Los_Angeles and US/Pacific timezones are linked and produce identical output when formatting dates.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment-timezone/03-data-formats/03-link-format.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.tz.add('America/Los_Angeles|PST PDT|80 70|01010101010|1Lzm0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0');\nmoment.tz.link('America/Los_Angeles|US/Pacific');\nmoment.tz(\"2013-12-01\", \"America/Los_Angeles\").format(); // 2013-12-01T00:00:00-08:00\nmoment.tz(\"2013-12-01\", \"US/Pacific\").format();          // 2013-12-01T00:00:00-08:00\n```\n\n----------------------------------------\n\nTITLE: Using Callback Function for Dynamic Calendar Formatting in Moment.js\nDESCRIPTION: This snippet shows how to use a callback function for dynamic calendar formatting in Moment.js. The function takes the current moment as an argument and returns a formatting string based on the current time.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/07-customization/10-calendar.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction callback (now) {\n    return '[hoy a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';\n}\n```\n\n----------------------------------------\n\nTITLE: Using Java DateFormat patterns with Moment.js\nDESCRIPTION: Examples showing how to format dates using Java DateFormat patterns and convert Moment.js format strings to Java format patterns using the moment-jdateformatparser plugin.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/10-plugins/03-jdateformatparser.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmoment(\"2013-12-24 14:30\").formatWithJDF(\"dd.MM.yyyy\");  // returns the formatted date \"24.12.2013\"\nmoment().toJDFString(\"DD.MM.YYYY\");  // returns the Java format pattern \"dd.MM.yyyy\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Moment Timezone Data Utility Methods in JavaScript\nDESCRIPTION: This snippet shows the available utility methods in the moment.tz namespace. The core moment-timezone.js library includes unpack and unpackBase60 methods, while moment-timezone-utils.js provides additional methods for packing, creating links, and filtering timezone data.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment-timezone/05-data-utilities/00-intro.md#2025-04-08_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n// in moment-timezone.js\nmoment.tz.unpack\nmoment.tz.unpackBase60\n// in moment-timezone-utils.js\nmoment.tz.pack\nmoment.tz.packBase60\nmoment.tz.createLinks\nmoment.tz.filterYears\nmoment.tz.filterLinkPack\n```\n\n----------------------------------------\n\nTITLE: Converting from Fixed Offset to Local Time in Moment.js\nDESCRIPTION: This example shows how to convert a moment object with a fixed time zone offset (+02:00) to local time. The parseZone method preserves the input time zone, and local() converts it to the local time zone.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/03-manipulating/07-local.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.parseZone('2016-05-03T22:15:01+02:00').local().format(); // \"2016-05-03T15:15:01-05:00\"\n```\n\n----------------------------------------\n\nTITLE: Basic Base60 Conversion in JavaScript\nDESCRIPTION: Demonstrates basic conversion of base 10 numbers to base 60 strings using moment.tz.packBase60(). Shows examples with single-digit and multi-digit numbers.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment-timezone/05-data-utilities/03-pack-base-60.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.tz.packBase60(9);    // 9\nmoment.tz.packBase60(10);   // a\nmoment.tz.packBase60(59);   // X\nmoment.tz.packBase60(1337); // mh\n```\n\n----------------------------------------\n\nTITLE: Installing moment-range Plugin via npm\nDESCRIPTION: This snippet shows how to install the moment-range plugin using npm. The plugin extends Moment.js functionality to work with date ranges.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/10-plugins/04-range.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install moment-range\n```\n\n----------------------------------------\n\nTITLE: Base60 Leading Zero Handling\nDESCRIPTION: Demonstrates how the function handles leading zeros before decimal points, showing they are dropped in the output.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment-timezone/05-data-utilities/03-pack-base-60.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.tz.packBase60(1.1667, 1); // 1.a\nmoment.tz.packBase60(0.1667, 1); // .a\n```\n\n----------------------------------------\n\nTITLE: Using Strict Mode with Moment.js for Date Parsing\nDESCRIPTION: This example demonstrates strict mode date parsing in Moment.js where the format doesn't match the input string. When strict mode is enabled (third parameter is true), Moment.js returns 'Invalid date' when the input format doesn't match the expected format.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/guides/moment/01-parsing/04-forgiving-mode.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmoment('01/12/2016', 'YYYY-MM-DD', true).format()\n\"Invalid date\"\n```\n\n----------------------------------------\n\nTITLE: Creating Moment from ISO Calendar Array in JavaScript\nDESCRIPTION: Shows how to reconstruct a moment object from an ISO calendar array using the fromIsocalendar method and format it as a long date string.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/10-plugins/07-isocalendar.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.fromIsocalendar([2011, 51, 5, 870]).format('LLLL');\n// \"Friday, December 23 2011 2:30 PM\"\n```\n\n----------------------------------------\n\nTITLE: Filtering, Linking, and Packing Timezone Data with Moment.js\nDESCRIPTION: The moment.tz.filterLinkPack method takes an unpacked bundle, start year, and end year as inputs. It filters the data to the specified year range, creates links between timezones, and packs the data for efficient transport. This method is used to compress timezone data for the bundled data and library files on the Moment.js homepage.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment-timezone/05-data-utilities/07-filter-link-pack.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.tz.filterLinkPack(UnpackedBundle, Number, Number); // PackedBundle\n```\n\n----------------------------------------\n\nTITLE: Parsing Spring Forward Time Transitions in Moment.js Timezone\nDESCRIPTION: This snippet demonstrates how Moment.js Timezone handles parsing times during the spring daylight saving time transition when an hour is skipped. It shows that any time in the non-existent hour is automatically moved forward to the next valid time.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment-timezone/01-using-timezones/02-parsing-ambiguous-inputs.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.tz(\"2012-03-11 01:59:59\", \"America/New_York\").format() // 2012-03-11T01:59:59-05:00\nmoment.tz(\"2012-03-11 02:00:00\", \"America/New_York\").format() // 2012-03-11T03:00:00-04:00\nmoment.tz(\"2012-03-11 02:59:59\", \"America/New_York\").format() // 2012-03-11T03:59:59-04:00\nmoment.tz(\"2012-03-11 03:00:00\", \"America/New_York\").format() // 2012-03-11T03:00:00-04:00\n```\n\n----------------------------------------\n\nTITLE: Displaying Zone and Country Association from IANA tzdb\nDESCRIPTION: This snippet shows a line from the IANA tzdb 'zone1970.tab' file, which associates the Europe/Prague time zone with both Czechia (CZ) and Slovakia (SK).\nSOURCE: https://github.com/moment/momentjs.com/blob/master/guides/moment-timezone/01-data-calculations/04-country-zones.md#2025-04-08_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nCZ,SK\t+5005+01426\tEurope/Prague\n```\n\n----------------------------------------\n\nTITLE: Parsing and Formatting Hijri Dates with moment-hijri\nDESCRIPTION: Demonstrates how to parse a Hijri calendar date and format it to show both Hijri and Gregorian representations. Uses the iYYYY/iM/iD format for Hijri dates where 'i' prefix indicates Islamic calendar units.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/10-plugins/09-hijri.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nm = moment('1410/8/28', 'iYYYY/iM/iD'); // Parse a Hijri date.\nm.format('iYYYY/iM/iD [is] YYYY/M/D'); // 1410/8/28 is 1990/3/25\n```\n\n----------------------------------------\n\nTITLE: Running MomentJS Website Locally with Grunt\nDESCRIPTION: Command to start a local development server for the MomentJS website using Grunt. If errors occur with the default 0.0.0.0 address, users should switch to localhost instead.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/readme.md#2025-04-08_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngrunt server\n\nNote: Switch to Localhost instead of 0.0.0.0 if seeing errors.\n```\n\n----------------------------------------\n\nTITLE: Validating MomentJS Array Parameters\nDESCRIPTION: Examples of invalid date validation using isValid() method with array initialization.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/01-parsing/10-array.md#2025-04-08_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmoment([2010, 12]).isValid();     // false (not a real month)\nmoment([2010, 10, 31]).isValid(); // false (not a real day)\nmoment([2010, 1, 29]).isValid();  // false (not a leap year)\n```\n\n----------------------------------------\n\nTITLE: Installing moment-islamic-civil Plugin for Moment.js\nDESCRIPTION: This command installs the moment-islamic-civil plugin using npm. The plugin adds support for the Islamic Civil Calendar (Hijri calendar) to Moment.js, allowing for date calculations and formatting based on this calendar system.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/10-plugins/10-islamic-civil.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install moment-islamic-civil\n```\n\n----------------------------------------\n\nTITLE: Generating QUnit Authors List\nDESCRIPTION: Grunt task to generate a list of QUnit authors. This command updates the AUTHORS.txt file with new contributors as part of the release process.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/bower_components/qunit/README.md#2025-04-08_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngrunt authors\n```\n\n----------------------------------------\n\nTITLE: Optimizing Moment.js Locales with Webpack Plugin\nDESCRIPTION: Webpack configuration that uses moment-locales-webpack-plugin to strip unnecessary locale files and reduce bundle size. Shows examples of removing all locales except the default 'en' or keeping specific locales.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/00-use-it/08-webpack.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// webpack.config.js\nconst MomentLocalesPlugin = require('moment-locales-webpack-plugin');\n\nmodule.exports = {\n    plugins: [\n        // To strip all locales except \"en\"\n        new MomentLocalesPlugin(),\n\n        // Or: To strip all locales except \"en\", \"es-us\" and \"ru\"\n        // (\"en\" is built into Moment and can't be removed)\n        new MomentLocalesPlugin({\n            localesToKeep: ['es-us', 'ru'],\n        }),\n    ],\n};\n```\n\n----------------------------------------\n\nTITLE: Running QUnit Release Script\nDESCRIPTION: Command to execute the QUnit release script using Node.js. This script automates part of the release process for QUnit.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/bower_components/qunit/README.md#2025-04-08_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnode release.js --remote=jquery/qunit\n```\n\n----------------------------------------\n\nTITLE: Using moment-recur plugin for recurring date operations in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the moment-recur plugin to create intervals, test date matches, generate next and previous dates in a series, and modify recurrence rules. It showcases both length-based and calendar-based intervals.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/10-plugins/11-recur.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar interval = moment( \"01/01/2014\" ).recur().every(2).days(); // Length Interval\ninterval.matches( \"01/03/2014\" ); // true\ninterval.next( 2, \"L\" ); // [\"01/03/2014\", \"01/05/2014\"]\ninterval.forget( \"days\" ); // Remove a rule\ninterval.dayOfMonth( 10 ); // Calendar Interval\ninterval.matches( \"05/10/2014\" ); // true\ninterval.previous( 2, \"L\" ); // [\"12/10/2013\", \"11/10/2013\"]\n```\n\n----------------------------------------\n\nTITLE: Using assert.async for Asynchronous Tests\nDESCRIPTION: Implements assert.async for handling asynchronous tests. This allows defining async test points that must be called to complete a test.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/bower_components/qunit/History.md#2025-04-08_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nQUnit.test(\"async test\", function(assert) {\n  var done = assert.async();\n  setTimeout(function() {\n    assert.ok(true, \"Async assertion completed\");\n    done();\n  }, 100);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Looping Timer with Moment Duration\nDESCRIPTION: Creates a timer using moment.duration that executes a callback every 5 seconds in a loop. This showcases the basic usage of the moment-timer plugin with the loop option enabled.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/10-plugins/19-timer.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar timer = moment.duration(5, \"seconds\").timer({loop: true}, function() {\n  // Callback\n});\n```\n\n----------------------------------------\n\nTITLE: Formatting Short Twitter Time\nDESCRIPTION: Demonstrates using the twitterShort() method to format a timestamp in a condensed format, similar to Twitter's compact display.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/10-plugins/12-twitter.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmoment().subtract(6, 'days').twitterShort();\n// 6d\n```\n\n----------------------------------------\n\nTITLE: Skipping Tests with QUnit.skip\nDESCRIPTION: Implements QUnit.skip to allow skipping tests. This is useful for temporarily disabling tests without removing them.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/bower_components/qunit/History.md#2025-04-08_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nQUnit.skip(\"skipped test\", function(assert) {\n  assert.ok(false, \"This test should be skipped\");\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving the Current Time Zone of a Moment\nDESCRIPTION: Shows how moment.tz() without arguments returns the time zone name assigned to the moment instance or undefined if no time zone has been set.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment-timezone/01-using-timezones/03-converting-to-zone.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar m = moment.tz(\"2013-11-18 11:55\", \"America/Toronto\");\nm.tz();  // America/Toronto\nvar m = moment.tz(\"2013-11-18 11:55\");\nm.tz() === undefined;  // true\n```\n\n----------------------------------------\n\nTITLE: Using assert.throws with Error Instances\nDESCRIPTION: Extends the assert.throws method to accept Error instances for more specific error checking.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/bower_components/qunit/History.md#2025-04-08_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nassert.throws(\n  function() { throw new TypeError(\"Error message\"); },\n  new TypeError(\"Error message\"),\n  \"Throws TypeError with expected message\"\n);\n```\n\n----------------------------------------\n\nTITLE: Using moment-round Plugin for Time Interval Rounding in JavaScript\nDESCRIPTION: This example demonstrates how to use the moment-round plugin to round, ceil, and floor date/time values to specific intervals. The plugin extends moment.js with three methods that accept an interval value and a time unit parameter.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/10-plugins/15-round.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nrequire('moment-round');\nvar m = new moment(); // 2015-06-18 15:30:19\nm.round(5, 'seconds'); // 2015-06-18 15:30:20\nm.ceil(3, 'minutes'); // 2015-06-18 15:33:00\nm.floor(16, 'hours'); // 2015-06-18 00:00:00\nm.ceil(21, 'hours'); // 2015-06-18 21:00:00\nm.ceil(20, 'hours'); // 2015-06-19 00:00:00\n```\n\n----------------------------------------\n\nTITLE: DST Handling with Hour Addition\nDESCRIPTION: Shows how daylight saving time affects hour addition.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/03-manipulating/01-add.md#2025-04-08_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar m = moment(new Date(2011, 2, 12, 5, 0, 0)); // the day before DST in the US\nm.hours(); // 5\nm.add(24, 'hours').hours(); // 6 (but you may have to set the timezone first)\n```\n\n----------------------------------------\n\nTITLE: Using Basic Date Transformations with moment-transform in JavaScript\nDESCRIPTION: Examples of using moment-transform to manipulate dates through patterns. These examples show how to set specific times, like midnight tonight or 2:30pm today, and how to subtract days from the current date.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/10-plugins/16-transform.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmoment().transform('YYYY-MM-+01 00:00:00.000'); // Tonight at midnight\nmoment().transform('14:30:00.000'); // Today, 2:30 pm\nmoment().transform('YYYY-MM--30 00:00:00.000'); // 30 days ago\n```\n\n----------------------------------------\n\nTITLE: Checking DST Shift in MomentJS\nDESCRIPTION: Example showing how DST affects time parsing in the US, where 2:30 AM during the spring forward transition (when clocks move from 2:00 to 3:00) results in an adjusted time. The actual behavior is browser-dependent.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/05-query/08-is-dst-shifted.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmoment('2013-03-10 2:30', 'YYYY-MM-DD HH:mm').format();\n```\n\n----------------------------------------\n\nTITLE: Using moment-taiwan Plugin for Taiwan Calendar in JavaScript\nDESCRIPTION: This code demonstrates how to parse and format dates using the Taiwan calendar system with the moment-taiwan plugin. It shows parsing a Taiwan date, formatting with both Taiwan and Gregorian years, and retrieving the Taiwan year value.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/10-plugins/17-taiwan.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nm = moment('104/01/01', 'tYY/MM/DD') // Parse a Taiwan date\nm.format('tYY/MM/DD [is] YYYY/M/D') // 104/01/01 is 2015/01/01\n\nm.twYear() // 104\n```\n\n----------------------------------------\n\nTITLE: Using Custom Patterns with moment-transform in JavaScript\nDESCRIPTION: Examples of using moment-transform with custom patterns and strict mode. Shows how to specify a custom date format pattern and control whether non-alphabetic characters are mandatory in the pattern.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/10-plugins/16-transform.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmoment().transform('+01MMYYYY', 'DD/MM/YYYY', false); // Tomorrow, same time\nmoment().transform('+01MMYYYY', 'DD/MM/YYYY', true); // Invalid date\n```\n\n----------------------------------------\n\nTITLE: Formatting Duration with MomentJS Duration Plugin\nDESCRIPTION: Demonstrates how to format a duration of 123 minutes into hours and minutes using the moment-duration-format plugin. The example shows converting minutes into a 'h:mm' format pattern.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/10-plugins/18-duration-format.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.duration(123, \"minutes\").format(\"h:mm\");\n// \"2:03\"\n```\n\n----------------------------------------\n\nTITLE: Adding Single Timezone Data in Moment.js\nDESCRIPTION: Demonstrates how to add a single timezone data string for Los Angeles using moment.tz.add(). The packed string contains timezone abbreviations, offsets, and transition rules.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment-timezone/04-data-loading/01-adding-a-zone.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.tz.add('America/Los_Angeles|PST PDT|80 70|0101|1Lzm0 1zb0 Op0');\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of moment-shortformat Plugin for Moment.js\nDESCRIPTION: Demonstrates how to format past and future times in a short format using the moment-shortformat plugin. The plugin outputs short time representations with an 'ago' suffix for past times and 'in' prefix for future times.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/10-plugins/21-shortformat.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmoment().subtract(5, 'hours').short();\n// 5h ago\nmoment().add(5, 'hours').short();\n// in 5h\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Timezone Data in Moment.js\nDESCRIPTION: Shows how to add multiple timezone data strings simultaneously using an array. The example includes packed strings for both Los Angeles and New York timezones.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment-timezone/04-data-loading/01-adding-a-zone.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.tz.add([\n\t'America/Los_Angeles|PST PDT|80 70|0101|1Lzm0 1zb0 Op0',\n\t'America/New_York|EST EDT|50 40|0101|1Lz50 1zb0 Op0'\n]);\n```\n\n----------------------------------------\n\nTITLE: Checking if a date is a holiday in specific German states using moment-feiertage\nDESCRIPTION: This example demonstrates how to use the moment-feiertage plugin to check if a specific date (November 1, 2018) is a holiday in selected German states (BW, SH, TH). The function returns an object containing information about whether the date is a holiday in all tested states, the holiday name, states where it is a holiday, and the list of states that were tested.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/10-plugins/22-german-holiday.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar someDateInSomeStates = moment('2018-11-01').isHoliday(['BW', 'SH', 'TH']);\n/* returns {\n  allStates: false,\n  holidayName: 'Allerheiligen',\n  holidayStates: [ 'BW' ],\n  testedStates: [ 'BW', 'SH', 'TH' ]\n}*/\n```\n\n----------------------------------------\n\nTITLE: Retrieving Time Zones with Offsets in Moment.js\nDESCRIPTION: Gets time zones for a country with their current UTC offsets by passing true as the second parameter. Useful for sorting time zones by offset.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment-timezone/01-using-timezones/08-getting-country-zones.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.tz.zonesForCountry('CN', true);\n```\n\n----------------------------------------\n\nTITLE: Required Package Dependencies for Moment Timezone\nDESCRIPTION: Lists the required package name for Moment.js core dependency that must be installed to use moment-timezone functionality.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment-timezone/00-use-it/00-intro.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmoment@2.9.0+\n```\n\n----------------------------------------\n\nTITLE: Checking and Adding Timezone Zones in Moment.js\nDESCRIPTION: This snippet demonstrates how to check if a timezone zone exists using moment.tz.zone() which returns the Zone object if loaded or null if not. It also shows how to add a new timezone zone using moment.tz.add().\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment-timezone/04-data-loading/04-checking-if-a-zone-exists.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.tz.zone(\"UnloadedZone\"); // null\nmoment.tz.add(\"UnloadedZone|UZ|0|0|\");\nmoment.tz.zone(\"UnloadedZone\"); // Zone { name : \"UnloadedZone\", ...}\n```\n\n----------------------------------------\n\nTITLE: Converting Between Time Zones with tz()\nDESCRIPTION: Shows how to convert moments between different time zones using the tz() method. The example creates moments in UTC and converts them to different time zones while maintaining the same underlying UTC time.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment-timezone/01-using-timezones/00-intro.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar a = moment.utc(\"2013-11-18 11:55\").tz(\"Asia/Taipei\");\nvar b = moment.utc(\"2013-11-18 11:55\").tz(\"America/Toronto\");\n\na.format(); // 2013-11-18T19:55:00+08:00\nb.format(); // 2013-11-18T06:55:00-05:00\n\na.utc().format(); // 2013-11-18T11:55Z\nb.utc().format(); // 2013-11-18T11:55Z\n```\n\n----------------------------------------\n\nTITLE: Creating Timezone Links using moment.tz.createLinks()\nDESCRIPTION: Demonstrates how to use moment.tz.createLinks() to identify and link identical timezone zones, reducing data duplication. The function takes an UnpackedBundle object containing zones and links arrays, and returns a modified bundle where duplicate zones are replaced with links.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment-timezone/05-data-utilities/05-create-links.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar unlinked = {\n    zones : [\n        {name:\"Zone/One\",abbrs:[\"OST\",\"ODT\"],offsets:[60,120],untils:[403041600000,417034800000]},\n        {name:\"Zone/Two\",abbrs:[\"OST\",\"ODT\"],offsets:[60,120],untils:[403041600000,417034800000]}\n    ],\n    links : [],\n    version : \"2014x-doc-example\"\n};\n\nmoment.tz.createLinks(unlinked);\n\n{\n    zones : [\n        {name:\"Zone/One\",abbrs:[\"OST\",\"ODT\"],offsets:[60,120],untils:[403041600000,417034800000]}\n    ],\n    links : [\"Zone/One|Zone/Two\"],\n    version : \"2014x-doc-example\"\n}\n```\n\n----------------------------------------\n\nTITLE: DST-Aware Timezone Parsing\nDESCRIPTION: Shows how moment.tz handles Daylight Saving Time (DST) transitions automatically when parsing dates.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment-timezone/01-using-timezones/01-parsing-in-zone.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.tz(\"2013-12-01\", \"America/Los_Angeles\").format(); // 2013-12-01T00:00:00-08:00\nmoment.tz(\"2013-06-01\", \"America/Los_Angeles\").format(); // 2013-06-01T00:00:00-07:00\n```\n\n----------------------------------------\n\nTITLE: Parsing ISO 8601 Dates in Moment.js\nDESCRIPTION: Demonstrates how to parse dates in ISO 8601 format using the built-in moment.ISO_8601 constant.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/guides/moment/01-parsing/02-known-formats.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmoment('2016-01-01 12:25:32', moment.ISO_8601)\n```\n\n----------------------------------------\n\nTITLE: Parsing Fall Back Time Transitions in Moment.js Timezone\nDESCRIPTION: This snippet illustrates how Moment.js Timezone handles parsing times during the fall daylight saving time transition when an hour is repeated. It shows that the library always uses the earlier instance of a duplicated hour by default.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment-timezone/01-using-timezones/02-parsing-ambiguous-inputs.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.tz(\"2012-11-04 00:59:59\", \"America/New_York\"); // 2012-11-04T00:59:59-04:00\nmoment.tz(\"2012-11-04 01:00:00\", \"America/New_York\"); // 2012-11-04T01:00:00-04:00\nmoment.tz(\"2012-11-04 01:59:59\", \"America/New_York\"); // 2012-11-04T01:59:59-04:00\nmoment.tz(\"2012-11-04 02:00:00\", \"America/New_York\"); // 2012-11-04T02:00:00-05:00\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Time Source in Moment.js\nDESCRIPTION: Default implementation of Moment.js's time source function that returns the current timestamp in milliseconds since Unix epoch. This function is used internally by moment() and format() methods when current time is needed.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/07-customization/15-now.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.now = function () {\n    return +new Date();\n}\n```\n\n----------------------------------------\n\nTITLE: Maintaining Time Zone Consistency in Operations\nDESCRIPTION: Demonstrates how time zone information is consistently used in other operations like calculating the start of the day. The example shows how the startOf() method respects the current time zone.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment-timezone/01-using-timezones/03-converting-to-zone.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar m = moment.tz(\"2013-11-18 11:55\", \"America/Toronto\");\nm.format();                     // 2013-11-18T11:55:00-05:00\nm.startOf(\"day\").format();      // 2013-11-18T00:00:00-05:00\nm.tz(\"Europe/Berlin\").format(); // 2013-11-18T06:00:00+01:00\nm.startOf(\"day\").format();      // 2013-11-18T00:00:00+01:00\n```\n\n----------------------------------------\n\nTITLE: Parsing and Formatting Jalaali Dates\nDESCRIPTION: Example showing how to parse a Jalaali date and format it to display both Jalaali and Gregorian calendar representations. Uses special format tokens like jYYYY for Jalaali year, jM for Jalaali month, and jD for Jalaali day.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/10-plugins/08-jalaali.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar m = moment('1360/5/26', 'jYYYY/jM/jD'); // Parse a Jalaali date.\nm.format('jYYYY/jM/jD [is] YYYY/M/D'); // 1360/5/26 is 1981/8/17\n```\n\n----------------------------------------\n\nTITLE: Displaying Timezone Offsets and Abbreviations Together\nDESCRIPTION: Examples showing how to display both the timezone offset and abbreviation, demonstrating the difference between locations that observe DST (Denver) and those that don't (Phoenix).\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment-timezone/01-using-timezones/04-formatting.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Denver observes DST\nmoment.tz([2012, 0], 'America/Denver').format('Z z');  // -07:00 MST\nmoment.tz([2012, 5], 'America/Denver').format('Z z');  // -06:00 MDT\n// Phoenix does not observe DST\nmoment.tz([2012, 0], 'America/Phoenix').format('Z z'); // -07:00 MST\nmoment.tz([2012, 5], 'America/Phoenix').format('Z z'); // -07:00 MST\n```\n\n----------------------------------------\n\nTITLE: Creating Invalid Durations in Moment.js\nDESCRIPTION: Creates invalid duration objects by passing NaN or using the moment.duration.invalid() method. Introduced in version 2.18.0.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/08-durations/01-creating.md#2025-04-08_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.duration(NaN);\nmoment.duration(NaN, 'days');\nmoment.duration.invalid();\n```\n\n----------------------------------------\n\nTITLE: Dealing with Non-Unique Timezone Abbreviations\nDESCRIPTION: Example showing that timezone abbreviations can be ambiguous, as demonstrated by both US Central Standard Time and China Standard Time using the same 'CST' abbreviation.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment-timezone/01-using-timezones/04-formatting.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.tz('2016-01-01', 'America/Chicago').format('z');    // CST\nmoment.tz('2016-01-01', 'Asia/Shanghai').format('z');      // CST\n```\n\n----------------------------------------\n\nTITLE: Converting Specific Offset to Local Time in Moment.js\nDESCRIPTION: Demonstrates how moment() converts a date with a specific offset to the local timezone. The date is shifted from +02:00 to the local machine's offset (-06:00).\nSOURCE: https://github.com/moment/momentjs.com/blob/master/guides/moment/01-parsing/01-local-utc-zone.md#2025-04-08_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmoment('2016-01-01T00:00:00+02:00').format()\n```\n\n----------------------------------------\n\nTITLE: Timezone Format Variations by Region\nDESCRIPTION: Examples showing how the 'z' format token displays different types of output depending on the region - either an abbreviation or a numeric offset with varying character lengths.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment-timezone/01-using-timezones/04-formatting.md#2025-04-08_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.tz('America/Los_Angeles').format('z')  // \"PDT\"     (abbreviation)\nmoment.tz('Asia/Magadan').format('z')         // \"+11\"     (3-char offset)\nmoment.tz('Asia/Colombo').format('z')         // \"+0530\"   (5-char offset)\n```\n\n----------------------------------------\n\nTITLE: Simple Date Range Calculation in JavaScript\nDESCRIPTION: Shows how to calculate the precise difference between two dates using static method approach of moment.preciseDiff.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/10-plugins/06-preciserange.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.preciseDiff(\"2014-01-01 12:00:00\", \"2014-04-20 12:00:00\");\n```\n\n----------------------------------------\n\nTITLE: Resetting Default Time Zone to Local in Moment.js\nDESCRIPTION: This code shows how to reset the default time zone in Moment.js back to the local time zone. This is done by calling moment.tz.setDefault() with no arguments.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment-timezone/01-using-timezones/05-default-timezone.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.tz.setDefault();\n```\n\n----------------------------------------\n\nTITLE: Setting Up Calendar Quarters in Moment.js\nDESCRIPTION: Demonstrates how to configure the fquarter() method to use calendar quarters instead of fiscal quarters by setting January (month 1) as the first month of the year.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/10-plugins/13-fquarter.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmoment(\"2013-01-01\").fquarter(1);\n// Q1 2013\n```\n\n----------------------------------------\n\nTITLE: Detecting User Time Zone with Moment Timezone in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the moment.tz.guess() function to detect the user's time zone. It shows both cached and forced detection scenarios, illustrating how to bypass the cache when needed.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment-timezone/01-using-timezones/06-guessing-user-timezone.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.tz.guess(); // America/Chicago\n// suppose the client's timezone changes to Europe/Berlin\nmoment.tz.guess(); // America/Chicago\nmoment.tz.guess(true); // Europe/Berlin\nmoment.tz.guess(); // Europe/Berlin\n```\n\n----------------------------------------\n\nTITLE: Alternative Import Syntax for TypeScript\nDESCRIPTION: Shows the ES6 import syntax for Moment.js when using TypeScript with allowSyntheticDefaultImports enabled.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/00-use-it/09-typescript.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport moment from 'moment';\n```\n\n----------------------------------------\n\nTITLE: Defining Zone Object Structure in JavaScript for Moment Timezone\nDESCRIPTION: This snippet demonstrates the structure of a Zone object in Moment Timezone. It includes properties for name, abbreviations, timestamps, offsets, and population. This object is crucial for matching timestamps to specific timezone offsets.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment-timezone/02-zone-object/00-intro.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n\tname       : 'America/Los_Angeles',          // the unique identifier\n\tabbrs      : ['PDT', 'PST'],                 // the abbreviations\n\tuntils     : [1414918800000, 1425808800000], // the timestamps in milliseconds\n\toffsets    : [420, 480],                     // the offsets in minutes\n\tpopulation : 15000000                        // a rough population count for the largest city in this zone\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Moment.js as Global with SystemJS\nDESCRIPTION: Configuration to load Moment.js as a global variable using SystemJS meta configuration.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/00-use-it/10-system-js.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nSystem.config({\n  meta: {\n    'moment': { format: 'global' }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Loading Time Zone Data Structure in Moment.js\nDESCRIPTION: Example structure of a time zone data bundle containing zone definitions and timezone aliases. The bundle includes version information, zone definitions with UTC offsets and rules, and link aliases between timezone names.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment-timezone/04-data-loading/03-loading-a-data-bundle.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n\tversion : '2014e',\n\tzones : [\n\t\t'America/Los_Angeles|PST PDT|80 70|0101|1Lzm0 1zb0 Op0',\n\t\t'America/New_York|EST EDT|50 40|0101|1Lz50 1zb0 Op0'\n\t],\n\tlinks : [\n\t\t'America/Los_Angeles|US/Pacific',\n\t\t'America/New_York|US/Eastern'\n\t]\n}\n```\n\n----------------------------------------\n\nTITLE: Unpacked Timezone Format Example in JavaScript\nDESCRIPTION: A JavaScript example showing the unpacked format structure for Los Angeles timezone data between 2014 and 2018. The format includes the timezone name, abbreviations, timestamp boundaries, UTC offsets, population data, and country codes.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment-timezone/03-data-formats/01-unpacked-format.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n\tname       : 'America/Los_Angeles',\n\tabbrs      : ['PST', 'PDT','PST', 'PDT', 'PST', 'PDT', 'PST', 'PDT', 'PST', 'PDT', 'PST'],\n\tuntils     : [1394359200000, 1414918800000, 1425808800000, 1446368400000, 1457863200000, 1478422800000, 1489312800000, 1509872400000, 1520762400000, 1541322000000, null],\n\toffsets    : [480, 420, 480, 420, 480, 420, 480, 420, 480, 420, 480],\n\tpopulation : 15000000,\n\tcountries  : ['US']\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Time Zone Bundle using moment.tz.load()\nDESCRIPTION: Demonstrates how to load a time zone data bundle into Moment Timezone using the moment.tz.load() method. The method accepts an object containing version information, zone definitions, and timezone links.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment-timezone/04-data-loading/03-loading-a-data-bundle.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.tz.load({\n\tversion : '2014e',\n\tzones : [...],\n\tlinks : [...]\n})\n```\n\n----------------------------------------\n\nTITLE: Packed Timezone Data Example for Los Angeles in JavaScript\nDESCRIPTION: This snippet shows an example of packed timezone data for Los Angeles between 2014 and 2018. The string contains all necessary information to represent the timezone, including name, abbreviations, offsets, and timestamp differences.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment-timezone/03-data-formats/02-packed-format.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n'America/Los_Angeles|PST PDT|80 70|01010101010|1Lzm0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0|15e6'\n```\n\n----------------------------------------\n\nTITLE: Retrieving Time Zone Names using Moment.js Timezone Extension\nDESCRIPTION: This snippet demonstrates how to use the moment.tz.names() function to get an array of all available time zone names. The function returns a string array containing time zone identifiers.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment-timezone/04-data-loading/05-getting-zone-names.md#2025-04-08_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nmoment.tz.names(); // [\"Africa/Abidjan\", \"Africa/Accra\", \"Africa/Addis_Ababa\", ...]\n```\n\n----------------------------------------\n\nTITLE: Converting Base 60 to Base 10 Numbers using MomentJS Timezone\nDESCRIPTION: The moment.tz.unpackBase60() function converts a base 60 string representation into its corresponding base 10 number. It supports both integer and decimal values, with the decimal portion being converted according to base 60 rules. The function can handle single characters, multiple characters, and decimal numbers.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment-timezone/05-data-utilities/04-unpack-base-60.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.tz.unpackBase60('9');     // 9\nmoment.tz.unpackBase60('a');     // 10\nmoment.tz.unpackBase60('X');     // 59\nmoment.tz.unpackBase60('mh');    // 1337\nmoment.tz.unpackBase60('1.9');   // 1.15\nmoment.tz.unpackBase60('k.7op'); // 20.123449074074074\n```\n\n----------------------------------------\n\nTITLE: Base60 Conversion with Precision\nDESCRIPTION: Shows how to convert decimal numbers to base 60 strings with specified precision using an optional second parameter for number of decimal places.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment-timezone/05-data-utilities/03-pack-base-60.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.tz.packBase60(1.1667,   1); // 1.a\nmoment.tz.packBase60(20.12345, 3); // k.7op\nmoment.tz.packBase60(59,       1); // X\n```\n\n----------------------------------------\n\nTITLE: Filtering Timezone Data for Single Year in JavaScript\nDESCRIPTION: Shows how to filter timezone data for a single year (2012). When only one year parameter is provided, it's used as both the start and end year, resulting in a minimal dataset for that specific year.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment-timezone/05-data-utilities/06-filter-years.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar all    = { name : \"America/Los_Angeles\", abbrs : [...], offsets : [...] untils : [...]};\\nvar subset = moment.tz.filterYears(all, 2012);\\nall.untils.length;    // 186\\nsubset.untils.length; // 3\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Date Math vs Time Math with Daylight Savings\nDESCRIPTION: Shows how adding 1 day vs 24 hours can yield different results due to daylight savings time transitions.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/guides/moment/00-lib-concepts/02-date-time-math.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n//date math\nmoment('2016-03-12 13:00:00').add(1, 'day').format('LLL')\n\"March 13, 2016 1:00 PM\"\n//time math\nmoment('2016-03-12 13:00:00').add(24, 'hours').format('LLL')\n\"March 13, 2016 2:00 PM\"\n```\n\n----------------------------------------\n\nTITLE: Setting Locale Ordinal Function - Legacy Syntax\nDESCRIPTION: Example showing the older syntax for setting ordinal functions in MomentJS versions 2.8.1 to 2.11.2.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/07-customization/12-ordinal.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.locale('en', {\n    ordinal : Function\n});\n```\n\n----------------------------------------\n\nTITLE: Comparing Year vs Days Addition in Leap Years\nDESCRIPTION: Demonstrates how adding 1 year vs 365 days can produce different results in leap years.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/guides/moment/00-lib-concepts/02-date-time-math.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmoment('2016-01-01').add(1, 'year').format('LL')\n\"January 1, 2017\"\nmoment('2016-01-01').add(365, 'day').format('LL')\n\"December 31, 2016\"\n```\n\n----------------------------------------\n\nTITLE: Setting Meridiem Function (2.8.1 to 2.11.2)\nDESCRIPTION: Previous method for configuring the meridiem function using the locale method.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/07-customization/08-am-pm.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.locale('en', {\n    meridiem : Function\n});\n```\n\n----------------------------------------\n\nTITLE: Parsing Ambiguous Dates with Native JavaScript Date Object\nDESCRIPTION: Demonstrates how the native JavaScript Date object incorrectly interprets dates in DD/MM/YYYY format when run on a US computer, mistaking them for MM/DD/YYYY format.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/guides/moment/00-lib-concepts/04-js-date.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar a = new Date('01/12/2016'); //December 1 2016 in DD/MM/YYYY format\n//\"Tue Jan 12 2016 00:00:00 GMT-0600 (Central Standard Time)\"\n```\n\n----------------------------------------\n\nTITLE: Setting Invalid Date String in Moment.js (Version 2.8.1 to 2.11.2)\nDESCRIPTION: This code shows how to set the 'invalidDate' string for the English locale using Moment.js versions 2.8.1 to 2.11.2. It uses the 'moment.locale()' method for customization.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/07-customization/18-invalid-date.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.locale('en', {\n    invalidDate : String\n});\n```\n\n----------------------------------------\n\nTITLE: Date Arithmetic with Native JavaScript Date\nDESCRIPTION: Demonstrates the unintuitive approach required to add days to a date using the native Date object, which relies on overflowing date values.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/guides/moment/00-lib-concepts/04-js-date.md#2025-04-08_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar a = new Date('4/30/2016'); \na.setDate(a.getDate() + 1);\n```\n\n----------------------------------------\n\nTITLE: Locale Loading Workaround\nDESCRIPTION: Shows the correct way to load a specific locale with Browserify by explicitly requiring the locale file.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/00-use-it/07-browserify.md#2025-04-08_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar moment = require('moment');\nrequire('moment/locale/cs');\nconsole.log(moment.locale()); // cs\n```\n\n----------------------------------------\n\nTITLE: Separator Matching in Strict Mode with Moment.js\nDESCRIPTION: Illustrates how strict mode enforces exact separator matching in date formats, while forgiving mode allows for mismatched separators.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/guides/moment/01-parsing/03-strict-mode.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n//forgiving mode\nmoment('01-01-2016', 'MM/DD/YYYY', false).format()\n\"2016-01-01T00:00:00-06:00\"\n//strict mode\nmoment('01-01-2016', 'MM/DD/YYYY', true).format()\n\"Invalid date\"\n```\n\n----------------------------------------\n\nTITLE: Installing moment-jalaali via NPM\nDESCRIPTION: Command to install the moment-jalaali plugin using npm package manager\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/10-plugins/08-jalaali.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install moment-jalaali\n```\n\n----------------------------------------\n\nTITLE: Comparing Max Function Usage in Moment.js\nDESCRIPTION: Illustrates the equivalence between the deprecated moment().max function and the new moment.min function for date comparison.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/guides/moment/02-warnings/06-min-max.md#2025-04-08_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nmoment('2016-01-01').max('2016-02-01').format()\n\"2016-01-01T00:00:00-06:00\"\n//is equivalent to\nmoment.min(moment('2016-01-01'), moment('2016-02-01')).format()\n\"2016-01-01T00:00:00-06:00\"\n```\n\n----------------------------------------\n\nTITLE: Available Moment Timezone Build Files\nDESCRIPTION: Lists the three main build files available for moment-timezone with different data ranges for various use cases.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment-timezone/00-use-it/00-intro.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmoment-timezone-with-data.js\nmoment-timezone-with-data-10-year-range.js\nmoment-timezone-with-data-1970-2030.js\n```\n\n----------------------------------------\n\nTITLE: Page Frontmatter Definition in Markdown\nDESCRIPTION: YAML frontmatter defining the page title for a static site generator.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/guides/moment/03-externalresources/02-blogs.md#2025-04-08_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Blogs\n---\n```\n\n----------------------------------------\n\nTITLE: Loading Custom Compiled Locale Bundle in HTML\nDESCRIPTION: Shows how to include a custom compiled MomentJS bundle with selected locales.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/06-i18n/04-loading-into-browser.md#2025-04-08_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"min/moment-with-locales.custom.js\" charset=\"UTF-8\"></script>\n```\n\n----------------------------------------\n\nTITLE: HTML Blog Links and Descriptions\nDESCRIPTION: HTML formatted list of blog links with author descriptions and their contributions to the date/time programming community.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/guides/moment/03-externalresources/02-blogs.md#2025-04-08_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<b><a href=\"http://codeofmatt.com/\" target=\"_blank\">Matt Johnson's Blog</a></b>\n- Moment.js core contributor. Date and time concepts in programming.\n\n<b><a href=\"https://maggiepint.com/\" target=\"_blank\">Maggie Pint's Blog</a></b>\n- Moment.js core contributor. Moment.js development progress and roadmaps. Moment.js library help.\n\n<b><a href=\"http://www.creativedeletion.com/\" target=\"_blank\">Lau Taarnskov's blog</a></b>\n- Author - Elixir Calendar. Date and time programming concepts. Elixir date and time.\n\n<b><a href=\"https://codeblog.jonskeet.uk/\" target=\"_blank\">Jon Skeet's blog</a></b>\n- Author - NodaTime. Stack Overflow #1 user. Date and time programming concepts.\n```\n\n----------------------------------------\n\nTITLE: Comparing Min Function Usage in Moment.js\nDESCRIPTION: Demonstrates the equivalence between the deprecated moment().min function and the new moment.max function for date comparison.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/guides/moment/02-warnings/06-min-max.md#2025-04-08_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nmoment('2016-01-01').min('2016-02-01').format()\n\"2016-02-01T00:00:00-06:00\"\n//is equivalent to\nmoment.max(moment('2016-01-01'), moment('2016-02-01')).format()\n\"2016-02-01T00:00:00-06:00\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Backwards-Compatibility Zone Data from IANA tzdb\nDESCRIPTION: This snippet shows a line from the deprecated 'zone.tab' file in the IANA tzdb, which associates the Europe/Bratislava time zone with Slovakia (SK).\nSOURCE: https://github.com/moment/momentjs.com/blob/master/guides/moment-timezone/01-data-calculations/04-country-zones.md#2025-04-08_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nSK\t+4809+01707\tEurope/Bratislava\n```\n\n----------------------------------------\n\nTITLE: Displaying Locale Not Found Error in Moment.js\nDESCRIPTION: This code snippet shows the error message that Moment.js displays when a locale is not found. The error appears when attempting to use a locale that hasn't been properly loaded into the application.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/guides/moment/02-warnings/04-locale-not-found.md#2025-04-08_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nLocale <key> not found. Did you forget to load it?\n```\n\n----------------------------------------\n\nTITLE: Querying Zones and Countries in Moment Timezone\nDESCRIPTION: This JavaScript snippet demonstrates how to use Moment Timezone's country-related APIs to query zones for countries and countries for zones. It showcases the seemingly unintuitive but correct results based on the IANA tzdb data model.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/guides/moment-timezone/01-data-calculations/04-country-zones.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmoment.tz.zonesForCountry('CZ'); // [\"Europe/Prague\"]\nmoment.tz.zonesForCountry('SK'); // [\"Europe/Bratislava\", \"Europe/Prague\"]\n\nmoment.tz.zone('Europe/Bratislava').countries(); // [\"SK\"]\nmoment.tz.zone('Europe/Prague').countries();     // [\"CZ\", \"SK\"]\n```\n\n----------------------------------------\n\nTITLE: Incorrect Add Method Usage in Moment.js\nDESCRIPTION: This example demonstrates the incorrect way to use the add method in Moment.js. The parameters are in the deprecated order (period, number).\nSOURCE: https://github.com/moment/momentjs.com/blob/master/guides/moment/02-warnings/05-add-inverted-param.md#2025-04-08_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nmoment().add('hours', 3);\n```\n\n----------------------------------------\n\nTITLE: Installing MomentJS Website on Linux/UNIX\nDESCRIPTION: Command to compile the MomentJS website on Linux or UNIX systems. This executes the compilation script that prepares the website for local development.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/readme.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./compile.sh\n```\n\n----------------------------------------\n\nTITLE: Correct Add Method Usage in Moment.js\nDESCRIPTION: This example shows the correct way to use the add method in Moment.js. The parameters are in the correct order (number, period).\nSOURCE: https://github.com/moment/momentjs.com/blob/master/guides/moment/02-warnings/05-add-inverted-param.md#2025-04-08_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nmoment().add(3, 'hours');\n```\n\n----------------------------------------\n\nTITLE: Deprecation Warning for Min/Max Functions in Moment.js\nDESCRIPTION: Shows the deprecation warning for moment().min and moment().max functions, indicating their replacements.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/guides/moment/02-warnings/06-min-max.md#2025-04-08_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmoment().min is deprecated, use moment.max\nmoment().max is deprecated, use moment.min\n```\n\n----------------------------------------\n\nTITLE: Using moment().min() to Limit a Moment in JavaScript\nDESCRIPTION: Demonstrates how to use the deprecated moment().min() function to limit a moment to a minimum value. This function has been deprecated in version 2.7.0 and moment.max() is recommended instead.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/docs/moment/03-manipulating/06-min.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmoment().min(\"2013-04-20T20:00:00+0800\");\n```\n\n----------------------------------------\n\nTITLE: Updating QUnit Changelog with Git Extras\nDESCRIPTION: Command to update the changelog for QUnit releases using git-extras. This is part of the release process to document changes in the History.md file.\nSOURCE: https://github.com/moment/momentjs.com/blob/master/bower_components/qunit/README.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit changelog\n```"
  }
]