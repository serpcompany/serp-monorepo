[
  {
    "owner": "41y08h",
    "repo": "fquery",
    "content": "TITLE: Setting up QueryClientProvider in Flutter Main Function\nDESCRIPTION: Shows how to wrap the main app widget with QueryClientProvider to enable fquery functionality throughout the application.\nSOURCE: https://github.com/41y08h/fquery/blob/main/README.md#2025-04-22_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() {\n  runApp(\n    QueryClientProvider(\n      queryClient: queryClient,\n      child: CupertinoApp(\n```\n\n----------------------------------------\n\nTITLE: Querying Data with useQuery Hook in Flutter\nDESCRIPTION: Demonstrates how to use the useQuery hook to fetch and display a list of posts in a Flutter widget. It shows handling of loading, error, and success states.\nSOURCE: https://github.com/41y08h/fquery/blob/main/README.md#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass Posts extends HookWidget {\n  const Posts({Key? key}) : super(key: key);\n\n  @override\n  Widget build(BuildContext context) {\n    final posts = useQuery(['posts'], getPosts);\n\n    return Builder(\n      builder: (context) {\n        if (posts.isLoading) {\n          return const Center(child: CircularProgressIndicator());\n        }\n\n        if (posts.isError) {\n          return Center(child: Text(posts.error!.toString()));\n        }\n\n        return ListView.builder(\n          itemCount: posts.data!.length,\n          itemBuilder: (context, index) {\n            final post = posts.data![index];\n            return ListTile(\n              title: Text(post.title),\n            );\n          },\n        );\n      },\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Mutations with Optimistic Updates\nDESCRIPTION: Complex mutation example showing optimistic updates, error handling, and cache management.\nSOURCE: https://github.com/41y08h/fquery/blob/main/README.md#2025-04-22_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\nfinal addTodoMutation = useMutation<Todo, Exception, String, List<Todo>>(\n        todosAPI.add, onMutate: (text) async {\n      final previousTodos =\n          queryClient.getQueryData<List<Todo>>(['todos']) ?? [];\n\n      // Optimistically update the todo list\n      queryClient.setQueryData<List<Todo>>(['todos'], (previous) {\n        final id = Random().nextInt(pow(10, 6).toInt());\n        final newTodo = Todo(id: id, text: text);\n        return [...(previous ?? []), newTodo];\n      });\n\n      // Pass the original data as context to the next functions\n      return previousTodos;\n    }, onError: (err, text, previousTodos) {\n      // On failure, revert to original data\n      queryClient.setQueryData<List<Todo>>(\n        ['todos'],\n        (_) => previousTodos as List<Todo>,\n      );\n    }, onSettled: (data, error, variables, ctx) {\n      // Refetch the query anyway (either error or success)\n      // Or we can manually add the returned todo (result) in the onSuccess callback\n      client.invalidateQueries(['todos']);\n      todoInputController.clear();\n    });\n```\n\n----------------------------------------\n\nTITLE: Configuring Query Options in Flutter using useQuery Hook\nDESCRIPTION: Shows various configuration options available for customizing query behavior, including caching, refetching, and retry logic.\nSOURCE: https://github.com/41y08h/fquery/blob/main/README.md#2025-04-22_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nfinal posts = useQuery(\n  ['posts'],\n  getPosts,\n  enabled: true,\n  cacheDuration: const Duration(minutes: 5),\n  refetchInterval: null // The query will not re-fetch by default,\n  refetchOnMount: RefetchOnMount.stale,\n  staleDuration: const Duration(seconds: 10),\n  retryCount: 3,\n  retryDelay: const Duration(seconds: 1, milliseconds: 500)\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Infinite Query in Dart using FQuery\nDESCRIPTION: Example of implementing infinite scroll functionality using useInfiniteQuery hook. Demonstrates pagination with initialPageParam and getNextPageParam configuration.\nSOURCE: https://github.com/41y08h/fquery/blob/main/README.md#2025-04-22_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nfinal items = useInfiniteQuery<PageResult, Error, int>(\n  ['infinity'],\n  (page) => infinityAPI.get(page),\n  initialPageParam: 1,\n  getNextPageParam: ((lastPage, allPages, lastPageParam, allPageParam) {\n    return lastPage.hasMore ? lastPage.page + 1 : null;\n  }),\n);\n```\n\n----------------------------------------\n\nTITLE: Using InfiniteQueryBuilder Widget in Flutter\nDESCRIPTION: Implementation of infinite queries without HookWidget using InfiniteQueryBuilder. Shows how to handle loading states and errors.\nSOURCE: https://github.com/41y08h/fquery/blob/main/README.md#2025-04-22_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nInfiniteQueryBuilder<PageResult, Error, int>(\n  const ['infinity'],\n  (page) => infinityAPI.get(page),\n  initialPageParam: 1,\n  getNextPageParam: ((lastPage, allPages, lastPageParam, allPageParam) {\n    return lastPage.hasMore ? lastPage.page + 1 : null;\n  }),\n  builder: (context, items) {\n    if (items.isLoading) {\n      return const Center(child: CupertinoActivityIndicator());\n    }\n    if (items.isError) return Text(items.error.toString());\n\n    ...\n```\n\n----------------------------------------\n\nTITLE: Implementing Mutations with MutationBuilder in Dart\nDESCRIPTION: This snippet demonstrates how to use MutationBuilder to handle a delete operation on todos. It takes a mutation function and a builder parameter, and includes an onSuccess callback that updates the query data to remove the deleted item from the list.\nSOURCE: https://github.com/41y08h/fquery/blob/main/README.md#2025-04-22_snippet_14\n\nLANGUAGE: dart\nCODE:\n```\nMutationBuilder((id) async {\n  await todosAPI.delete(todo.id);\n  return id;\n}, onSuccess: (id, _, ctx) {\n  client.setQueryData<List<Todo>>(\n    ['todos'],\n    (previous) {\n      if (previous == null) return [];\n      return previous.where((e) {\n        return (e.id != id);\n      }).toList();\n    },\n  );\n}, builder: (context, mutation) {\n  return CupertinoButton(\n  ...\n```\n\n----------------------------------------\n\nTITLE: Using QueryBuilder Widget for Non-Hook Queries in Flutter\nDESCRIPTION: Demonstrates how to use the QueryBuilder widget to perform queries without extending the widget with HookWidget. It includes configuration options and state handling.\nSOURCE: https://github.com/41y08h/fquery/blob/main/README.md#2025-04-22_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nQueryBuilder<List<Todo>, Error>(\n  const ['todos'],\n  todosAPI.getAll,\n  refetchOnMount: RefetchOnMount.never,\n  refetchInterval: const Duration(seconds: 10),\n  enabled: isEnabled.value,\n  builder: (context, todos) {\n    if (todos.isLoading) {\n      return const Center(\n        child: CupertinoActivityIndicator(),\n      );\n    }\n    if (todos.isError) {\n      return Center(\n        child: Text(todos.error.toString()),\n      );\n    }\n\n    ...\n```\n\n----------------------------------------\n\nTITLE: Implementing Dependent Queries in Flutter\nDESCRIPTION: Demonstrates how to create dependent queries that rely on the results of other queries or specific conditions before executing.\nSOURCE: https://github.com/41y08h/fquery/blob/main/README.md#2025-04-22_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nfinal user = useQuery(['users', email], getUserByEmail);\n\n// This query will not execute until the above is successful and the username is available\nfinal username = user.data?.username;\nfinal posts = useQuery(['posts', ], getPosts, enabled: !username);\n\n\nfinal isAuthenticated = session != null;\nfinal keys = useQuery(['keys', session.id], enabled: isAuthenticated)\n```\n\n----------------------------------------\n\nTITLE: Query Cache Management with QueryClient\nDESCRIPTION: Configuration and initialization of QueryClient with default query options.\nSOURCE: https://github.com/41y08h/fquery/blob/main/README.md#2025-04-22_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nfinal queryClient = QueryClient(\n  defaultQueryOptions: DefaultQueryOptions(\n    cacheDuration: Duration(minutes: 20),\n    refetchInterval: Duration(minutes: 5),\n    refetchOnMount: RefetchOnMount.always,\n    staleDuration: Duration(minutes: 3),\n  ),\n);\n\nvoid main() {\n  runApp(\n    QueryClientProvider(\n      queryClient: queryClient,\n      child: CupertinoApp(\n```\n\n----------------------------------------\n\nTITLE: Dynamic Parallel Queries Implementation\nDESCRIPTION: Using useQueries hook for handling dynamic number of parallel queries with custom configuration.\nSOURCE: https://github.com/41y08h/fquery/blob/main/README.md#2025-04-22_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nfinal posts = useQueries<Post, Error>(\n  List<UseQueriesOptions<Post, Error>>.generate(text.value,\n  (i) => UseQueriesOptions(\n    queryKey: ['posts', i + 1],\n    fetcher: () => getPost(i + 1),\n    refetchOnMount: RefetchOnMount.never,\n  ),\n));\n```\n\n----------------------------------------\n\nTITLE: Implementing Parallel Queries in FQuery\nDESCRIPTION: Example of executing multiple queries in parallel using useQuery hook.\nSOURCE: https://github.com/41y08h/fquery/blob/main/README.md#2025-04-22_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\n// These will execute in parallel\nfinal posts = useQuery(['posts'], getProfile)\nfinal comments = useQuery(['comments'], getProfile)\n```\n\n----------------------------------------\n\nTITLE: Implementing a Query Function for Fetching Posts\nDESCRIPTION: Defines a function that fetches posts from an API and converts the response to a list of Post objects.\nSOURCE: https://github.com/41y08h/fquery/blob/main/README.md#2025-04-22_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nFuture<List<Post>> getPosts() async {\n  final res = await Dio().get('https://jsonplaceholder.typicode.com/posts');\n  return (res.data as List)\n      .map((e) => Post.fromJson(e as Map<String, dynamic>))\n      .toList();\n}\n```\n\n----------------------------------------\n\nTITLE: QueryClientBuilder Implementation\nDESCRIPTION: Using QueryClientBuilder widget to access query client instance in the widget tree.\nSOURCE: https://github.com/41y08h/fquery/blob/main/README.md#2025-04-22_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\nQueryClientBuilder(\n  builder: (context, queryClient) {\n    return MutationBuilder(\n      (id) async {\n        await todosAPI.delete(todo.id);\n        return id;\n      },\n      onSuccess: (id, _, ctx) {\n        queryClient.setQueryData<List<Todo>>(\n          ['todos'],\n          (previous) {\n            if (previous == null) return [];\n            return previous.where((e) {\n```\n\n----------------------------------------\n\nTITLE: Global Fetching State Management\nDESCRIPTION: Using useIsFetching hook to track the number of active fetch operations.\nSOURCE: https://github.com/41y08h/fquery/blob/main/README.md#2025-04-22_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nfinal fetchingCount = useIsFetching();\n```"
  }
]