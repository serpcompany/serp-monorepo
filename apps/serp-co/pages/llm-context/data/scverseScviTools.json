[
  {
    "owner": "scverse",
    "repo": "scvi-tools",
    "content": "TITLE: Installing scvi-tools via conda\nDESCRIPTION: This command installs scvi-tools using conda package manager from the conda-forge channel.\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/docs/installation.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nconda install scvi-tools -c conda-forge\n```\n\n----------------------------------------\n\nTITLE: Installing scvi-tools with Pip\nDESCRIPTION: This snippet provides the command to install scvi-tools using Pip. It requires Python and Pip to be installed. It uses the package index to install scvi-tools in the current Python environment. Ensure that an appropriate version of PyTorch is installed separately if needed for GPU compatibility.\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install scvi-tools\n```\n\n----------------------------------------\n\nTITLE: Importing scvi-tools Package in Python\nDESCRIPTION: Shows the basic import statement for the scvi-tools package, which is the recommended way to import the library for use in Python code.\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/docs/api/index.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport scvi\n```\n\n----------------------------------------\n\nTITLE: Installing scvi-tools via pip\nDESCRIPTION: This command installs or upgrades scvi-tools using pip package manager.\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/docs/installation.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install -U scvi-tools\n```\n\n----------------------------------------\n\nTITLE: Importing scvi-tools Library - Python\nDESCRIPTION: This snippet imports the scvi-tools library, enabling access to its functionality for managing single-cell genomics data. Ensure that the scvi-tools package is installed in your Python environment before using this code.\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/docs/api/datasets.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport scvi\n```\n\n----------------------------------------\n\nTITLE: Installing scvi-tools with Conda\nDESCRIPTION: This snippet provides the command to install scvi-tools using Conda. It requires Conda to be installed beforehand. The command installs scvi-tools from the conda-forge channel. No additional inputs are required and the tool will be available in the Conda environment afterwards.\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nconda install scvi-tools -c conda-forge\n```\n\n----------------------------------------\n\nTITLE: Saving and Loading SCVI Models in Python\nDESCRIPTION: Demonstrates how to save the state of a trained SCVI model to a file and subsequently load it for further training or inference. It requires the scvi-tools package. To save the model, use the 'save()' method, specifying the filename. To reload the model, utilize 'SCVI.load()' with the filename. Key parameters include the filename path with the '.pt' extension, indicating a PyTorch saved file.\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/docs/user_guide/use_case/saving_and_loading_models.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Saving a model\nmodel.save(\"my_model.pt\")\n\n# Loading a model\nmodel = scvi.model.SCVI.load(\"my_model.pt\")\n```\n\n----------------------------------------\n\nTITLE: Installing scvi-tools with tutorial dependencies\nDESCRIPTION: This command installs scvi-tools along with all dependencies required for tutorials.\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/docs/installation.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npip install -U scvi-tools[tutorials]\n```\n\n----------------------------------------\n\nTITLE: Installing scvi-tools with all optional dependencies\nDESCRIPTION: This command installs scvi-tools with all optional dependencies including autotune, criticism, and model hub.\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/docs/installation.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npip install -U scvi-tools[optional]\n```\n\n----------------------------------------\n\nTITLE: Installing scvi-tools with development dependencies\nDESCRIPTION: This command installs scvi-tools with development dependencies, including pre-commit and testing dependencies.\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/docs/installation.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npip install -U scvi-tools[dev]\n```\n\n----------------------------------------\n\nTITLE: Importing scvi-tools Package in Python\nDESCRIPTION: The basic import statement for using the scvi-tools package in Python. This is the foundation for accessing all functionality in the package.\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/docs/api/user.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport scvi\n```\n\n----------------------------------------\n\nTITLE: Differential Expression Analysis with SCVI\nDESCRIPTION: This code snippet demonstrates how to perform differential expression analysis using a trained SCVI model. It uses the `differential_expression()` method to compare gene expression between different clusters or conditions.\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/docs/user_guide/use_case/downstream_analysis_tasks.md#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n\"differential_expression = scvi.model.SCVI().differential_expression()\"\n```\n\n----------------------------------------\n\nTITLE: Getting Normalized Expression from scVI Model\nDESCRIPTION: Code to retrieve the normalized gene expression values from a trained scVI model, using multiple Monte Carlo samples for approximation.\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/docs/user_guide/models/scvi.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> model.get_normalized_expression(n_samples=10)\n```\n\n----------------------------------------\n\nTITLE: Creating a venv virtual environment for scvi-tools using uv\nDESCRIPTION: These commands install uv, create a virtual environment named '.scvi-env', and activate it for different operating systems.\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/docs/installation.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npip install -U uv\nuv venv .scvi-env\nsource .scvi-env/bin/activate  # for macOS and Linux\n.scvi-env\\Scripts\\activate  # for Windows\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of scAR for Ambient RNA Removal in Python\nDESCRIPTION: This snippet demonstrates the standard workflow for using scAR to remove ambient RNA from single-cell data. It loads annotated data, sets up the model with batch information, calculates the ambient profile, trains the model, and extracts denoised counts.\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/docs/user_guide/models/scar.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> adata = anndata.read_h5ad(path_to_anndata)\n>>> raw_adata = anndata.read_h5ad(path_to_raw_anndata)\n>>> scvi_external.SCAR.setup_anndata(adata, batch_key=\"batch\")\n>>> scvi_external.SCAR.get_ambient_profile(adata=adata, raw_adata=raw_adata, prob=0.995)\n>>> vae = scvi_external.SCAR(adata, ambient_profile=\"ambient_profile\")\n>>> vae.train()\n>>> adata.obsm[\"X_scAR\"] = vae.get_latent_representation()\n>>> adata.layers['denoised'] = vae.get_denoised_counts()\n```\n\n----------------------------------------\n\nTITLE: Creating a Nearest Neighbor Graph with scanpy Using scVI Latent Space\nDESCRIPTION: Code to construct a nearest neighbor graph using the scVI latent representation with scanpy's pp.neighbors function.\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/docs/user_guide/models/scvi.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> import scanpy as sc\n>>> sc.pp.neighbors(adata, use_rep=\"X_scvi\")\n>>> adata.obsp[\"distances\"]\n```\n\n----------------------------------------\n\nTITLE: Creating a conda virtual environment for scvi-tools\nDESCRIPTION: These commands create and activate a conda virtual environment named 'scvi-env' with Python 3.12.\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/docs/installation.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nconda create -n scvi-env python=3.12  # any python 3.10 to 3.13\nconda activate scvi-env\n```\n\n----------------------------------------\n\nTITLE: Dimensionality Reduction with totalVI in Scanpy\nDESCRIPTION: This code snippet demonstrates how to obtain the latent representation from a trained totalVI model and use it for dimensionality reduction and nearest neighbor graph construction using the Scanpy library. It highlights the integration of totalVI's latent space with standard single-cell analysis workflows.\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/docs/user_guide/models/totalvi.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n\n>>> latent = model.get_latent_representation()\n>>> adata.obsm[\"X_totalvi\"] = latent\n\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> import scanpy as sc\n>>> sc.pp.neighbors(adata, use_rep=\"X_totalvi\")\n>>> adata.obsp[\"distances\"]\n\n```\n\n----------------------------------------\n\nTITLE: Predicting Cell Types with scANVI\nDESCRIPTION: Executes prediction method on an annotated data object, storing cell type predictions in observation metadata\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/docs/user_guide/models/scanvi.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> adata.obs[\"scanvi_prediction\"] = model.predict()\n```\n\n----------------------------------------\n\nTITLE: Importing scvi-tools Package\nDESCRIPTION: Basic import statement for using the scvi-tools package.\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/docs/api/developer.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport scvi\n```\n\n----------------------------------------\n\nTITLE: Dimensionality Reduction with MultiVI\nDESCRIPTION: This snippet demonstrates how to obtain a low-dimensional representation of single-cell data using MultiVI's get_latent_representation method. It retrieves the mean of the approximate posterior distribution and stores it in the AnnData object for downstream analysis, such as nearest neighbor graph construction.\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/docs/user_guide/models/multivi.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> latent = model.get_latent_representation()\n>>> adata.obsm[\"X_mvi\"] = latent\n```\n\n----------------------------------------\n\nTITLE: Normalization and Denoising of RNA and Protein Expression\nDESCRIPTION: This code snippet shows how to use totalVI to normalize and denoise RNA and protein expression data. It demonstrates how to retrieve normalized expression values from the model, specifying the number of samples for Monte Carlo approximation.\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/docs/user_guide/models/totalvi.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> rna, protein = model.get_normalized_expression(n_samples=10)\n\n```\n\n----------------------------------------\n\nTITLE: Add scvi.external.Tangram for spatial data mapping\nDESCRIPTION: Adds the `scvi.external.Tangram` and `scvi.external.tangram.TangramMapper` classes. These classes implement Tangram, allowing for the mapping of scRNA-seq data to spatial data. This integration enables the transfer of information from single-cell RNA sequencing to spatial transcriptomics.\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/CHANGELOG.md#2025-04-16_snippet_14\n\nLANGUAGE: Python\nCODE:\n```\n\"Add {class}`scvi.external.Tangram` and {class}`scvi.external.tangram.TangramMapper` that\n    implement Tangram for mapping scRNA-seq data to spatial data [#1743].\"\n```\n\n----------------------------------------\n\nTITLE: Accessing the Latent Representation in scVI\nDESCRIPTION: Code to extract the latent representation from a trained scVI model and store it in the AnnData object for downstream analysis.\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/docs/user_guide/models/scvi.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> latent = model.get_latent_representation()\n>>> adata.obsm[\"X_scvi\"] = latent\n```\n\n----------------------------------------\n\nTITLE: Normalization/Denoising with MultiVI\nDESCRIPTION: This snippet demonstrates how to use MultiVI to obtain normalized expression values, effectively denoising the data or imputing missing modalities. It utilizes the get_normalized_expression method, specifying the number of Monte Carlo samples to use for approximating the expectation.\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/docs/user_guide/models/multivi.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> model.get_normalized_expression(n_samples=10)\n```\n\n----------------------------------------\n\nTITLE: Add scvi.external.SCAR for ambient RNA removal\nDESCRIPTION: The snippet describes the addition of the `scvi.external.SCAR` class. This class is an external model designed for the removal of ambient RNA. Ambient RNA removal is a crucial step in single-cell RNA sequencing analysis to improve data quality.\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/CHANGELOG.md#2025-04-16_snippet_16\n\nLANGUAGE: Python\nCODE:\n```\n\"Added {class}`~scvi.external.SCAR` as an external model for ambient RNA removal [#1683].\"\n```\n\n----------------------------------------\n\nTITLE: Differential Accessibility Analysis with PeakVI\nDESCRIPTION: This snippet uses the PeakVI model to perform differential accessibility analysis by assessing the differences in accessibility estimated by the generative model.\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/docs/user_guide/models/peakvi.md#2025-04-16_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nPeakVI.differential_accessibility()\n```\n\n----------------------------------------\n\nTITLE: Denoising/Imputation of accessibility with MultiVI\nDESCRIPTION: This snippet demonstrates how to use MultiVI to obtain normalized accessibility values, effectively denoising the data or imputing missing modalities. It utilizes the get_normalized_accessibility method, specifying the number of Monte Carlo samples to use for approximating the expectation.\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/docs/user_guide/models/multivi.md#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> model.get_normalized_accessibility(n_samples_overall=10)\n```\n\n----------------------------------------\n\nTITLE: Using Observed Library Size in scvi-tools Models in Python\nDESCRIPTION: New option to use observed library size instead of learning a latent library size variable, set to True by default for faster training without performance regression.\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/CHANGELOG.md#2025-04-16_snippet_29\n\nLANGUAGE: python\nCODE:\n```\nSCVI(use_observed_lib_size=True)\n```\n\n----------------------------------------\n\nTITLE: Imputing Gene Expression in Specific Cell Types with scvi-tools in Python\nDESCRIPTION: This code snippet demonstrates how to impute the spatial pattern of cell-type-specific gene expression for key gene modules identified within a cell type. It filters spots with low abundance, retrieves indices, and then uses the get_scale_for_ct function to impute the counts of selected genes, such as Cxcl9, Cxcl10, and Fcgr1, for Monocytes. Dependencies include numpy for filtering operations and scvi-tools for model interaction. The input requires predefined scvi-tools models and appropriate gene names.\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/docs/user_guide/models/destvi.md#2025-04-16_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n>>> # Filter spots with low abundance.\n>>> indices = np.where(st_adata.obsm[\"proportions\"][ct_name].values > 0.03)[0]\n>>> imputed_counts = st_model.get_scale_for_ct(\"Monocyte\", indices=indices)[[\"Cxcl9\", \"Cxcl10\", \"Fcgr1\"]]\n```\n\n----------------------------------------\n\nTITLE: Returning Latent Representation with PeakVI\nDESCRIPTION: This code snippet demonstrates how to obtain the mean latent representation from the PeakVI model for dimensionality reduction purposes. The result is stored in the 'X_peakvi' field of the adata object's observation matrix.\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/docs/user_guide/models/peakvi.md#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n>>> adata.obsm[\"X_peakvi\"] = model.get_latent_representation()\n```\n\n----------------------------------------\n\nTITLE: Setting Empirical Protein Background Prior in TOTALVI Model in Python\nDESCRIPTION: New option to initialize protein background parameters using empirical data, fitting a Gaussian mixture model per cell and aggregating results across batches.\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/CHANGELOG.md#2025-04-16_snippet_28\n\nLANGUAGE: python\nCODE:\n```\nTOTALVI(empirical_protein_background_prior=True)\n```\n\n----------------------------------------\n\nTITLE: Initializing CellAssign Model for Cell Type Prediction\nDESCRIPTION: Creates a CellAssign model with an annotated data matrix, marker gene matrix, and optional size factor key for cell type prediction\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/docs/user_guide/models/cellassign.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> model = CellAssign(adata, marker_gene_matrix, size_factor_key='size_factor')\n>>> model.train()\n>>> predictions = model.predict(adata)\n```\n\n----------------------------------------\n\nTITLE: Getting Cell Type Proportions with DestVI\nDESCRIPTION: This snippet demonstrates how to retrieve the estimated proportions of cell types in each spatial spot after training the DestVI model. It normalizes the learned cell type abundances for each spot, making the results interpretable for further analysis.\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/docs/user_guide/models/destvi.md#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nproportions = st_model.get_proportions()\n        st_adata.obsm[\"proportions\"] = proportions\n```\n\n----------------------------------------\n\nTITLE: Accessing scvi-tools Model Training History in Python\nDESCRIPTION: Model training history is now stored as pandas DataFrames, allowing easier access and analysis of training metrics.\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/CHANGELOG.md#2025-04-16_snippet_30\n\nLANGUAGE: python\nCODE:\n```\nmodel.history\n```\n\n----------------------------------------\n\nTITLE: Initializing Posterior Predictive Check for Multiple Models\nDESCRIPTION: Create a Posterior Predictive Check (PPC) object for comparing multiple single-cell RNA sequencing models using a single AnnData object. This allows for side-by-side evaluation of different model performances.\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/docs/user_guide/use_case/scvi_criticism.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nmodels_dict = {\"model1\": model1, \"model2\": model2}\nppc = PPC(adata, models_dict)\n```\n\n----------------------------------------\n\nTITLE: Nearest Neighbor Graph Creation with Scanpy\nDESCRIPTION: This code snippet shows how to create a nearest neighbor graph using scanpy based on the latent representation obtained from MethylVI. It uses the `sc.pp.neighbors` function to compute the neighborhood graph and stores the distances in `adata.obsp[\"distances\"]`.\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/docs/user_guide/models/methylvi.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> import scanpy as sc\n>>> sc.pp.neighbors(adata, use_rep=\"X_methylvi\")\n>>> adata.obsp[\"distances\"]\n\n```\n\n----------------------------------------\n\nTITLE: Add DNA sequences to AnnData objects with genomepy\nDESCRIPTION: This code snippet describes the addition of DNA sequences to AnnData objects using the genomepy library. It enhances the functionality of AnnData objects by incorporating DNA sequence information, which is useful for various genomic analyses. Requires `anndata` and `genomepy`.\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/CHANGELOG.md#2025-04-16_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\n\"{meth}`~scvi.data.add_dna_sequence` adds DNA sequences to {class}`~anndata.AnnData` objects using\n    [genomepy] {pr}`1839`,{pr}`1842`.\"\n```\n\n----------------------------------------\n\nTITLE: Dimensionality Reduction with MethylVI\nDESCRIPTION: This code snippet demonstrates how to use the MethylVI model to obtain a latent representation of single-cell data for dimensionality reduction. The `get_latent_representation()` method returns the mean of the approximate posterior distribution, which can then be stored in the `adata.obsm` slot for downstream analysis.\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/docs/user_guide/models/methylvi.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n\n>>> adata.obsm[\"X_methylvi\"] = model.get_latent_representation()\n\n```\n\n----------------------------------------\n\nTITLE: Creating Nearest Neighbor Graph in Scanpy with Python\nDESCRIPTION: The code snippet imports the Scanpy library and constructs a nearest neighbor graph using the precomputed latent representation stored in `X_resolvi`. The resulting distance matrix is stored in `adata.obsp['distances']`. This code requires that the Scanpy library is installed and assumes a previously processed anndata object.\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/docs/user_guide/models/resolvi.md#2025-04-16_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n>>> import scanpy as sc\n>>> sc.pp.neighbors(adata, use_rep=\"X_resolvi\")\n>>> adata.obsp[\"distances\"]\n```\n\n----------------------------------------\n\nTITLE: Importing VELOVI class in Python\nDESCRIPTION: Imports the VELOVI class from the scvi.external module for RNA velocity estimation using variational inference.\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/CHANGELOG.md#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom scvi.external import VELOVI\n```\n\n----------------------------------------\n\nTITLE: Calculating Ambient Profile Using Kneeplot Approach in Python\nDESCRIPTION: This snippet demonstrates how to calculate the ambient profile using a kneeplot approach based on total counts of droplets. It identifies cell-free droplets, generates a visualization, and calculates the ambient profile from the identified cell-free droplets.\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/docs/user_guide/models/scar.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> all_droplets = pd.DataFrame(raw_adata.X.sum(axis=1), index=raw_adata.obs_names, columns=['total_counts'])\n>>> all_droplets['droplets'] = 'cell-free droplets'\n>>> all_droplets['droplets'] = all_droplets['droplets'].mask(all_droplets['total_counts']>min_counts, 'other droplets')\n>>> all_droplets['droplets'] = all_droplets['droplets'].mask(all_droplets.index.isin(adata.obs_names), 'cells')\n>>> all_droplets.index.name = 'barcode'\n>>> all_droplets = all_droplets.sort_values(by='total_counts', ascending=False).reset_index().rename_axis(\"rank\").reset_index()\n>>> all_droplets = all_droplets.loc[all_droplets['total_counts']>0]\n>>> all_droplets = all_droplets.set_index('barcode').rename_axis('cells')\n\n>>> plt.figure(figsize=(3, 2), dpi=150)\n>>> ax = sns.lineplot(\n>>>     data=all_droplets,\n>>>     x='rank',\n>>>     y='total_counts',\n>>>     hue='droplets',\n>>>     hue_order=['other droplets', 'cell-free droplets', 'cells'],\n>>>     palette=sns.color_palette()[-3:],\n>>>     markers=False,\n>>>     lw=2,\n>>>     ci=None\n>>> )\n>>> ax.set_xscale('log')\n>>> ax.set_yscale('log')\n>>> ax.set_xlabel('sorted droplets');\n>>> ax.legend(loc='lower left', ncol=1, title=None, frameon=False)\n>>> ax.set_title(f'kneeplot')\n>>> sns.set_palette('muted')\n>>> sns.set_style('ticks')\n>>> sns.despine(offset=10, trim=False)\n\n>>> cell_free = raw_adata[raw_adata.obs_names.isin(all_droplets[all_droplets['droplets']=='cell-free droplets'].index)].copy()\n>>> cell_free = cell_free[:, adata.var_names]\n>>> # average and normalize the transcript in cell-free droplets\n>>> ambient_profile = pd.DataFrame((cell_free.X.sum(axis=0)/cell_free.X.sum()).A1, index=adata.var_names, columns=['ambient profile'])\n```\n\n----------------------------------------\n\nTITLE: Topic-based Dimensionality Reduction with LDA\nDESCRIPTION: This code snippet demonstrates how to retrieve the estimated topic proportions in each cell after training the Amortized LDA model. The `get_latent_representation()` method returns the topic proportions, which are then stored in the AnnData object for downstream analysis.\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/docs/user_guide/models/amortizedlda.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n\n>>> topic_prop = model.get_latent_representation()\n>>> adata.obsm[\"X_LDA\"] = topic_prop\n\n```\n\n----------------------------------------\n\nTITLE: Importing BetaBinomial class in Python\nDESCRIPTION: Imports the experimental BetaBinomial class from the scvi.distributions module for modeling scBS-seq methylation data using a Beta-Binomial distribution with mean-dispersion parameterization.\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/CHANGELOG.md#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom scvi.distributions import BetaBinomial\n```\n\n----------------------------------------\n\nTITLE: Computing Expected Accessibility with PeakVI\nDESCRIPTION: This snippet defines the expected accessibility value for a cell under the approximate posterior for the PeakVI model. It can be customized to use the mean or the sample from the distribution based on user preferences.\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/docs/user_guide/models/peakvi.md#2025-04-16_snippet_2\n\nLANGUAGE: Math\nCODE:\n```\n\\begin{align}\n   \\mathbb{E}_{q_\\eta(z_i \\mid x_i)}\\left[g_z\\left( z_i, s_i \\right) \\right],\n\\end{align}\n```\n\n----------------------------------------\n\nTITLE: Estimating Topic Proportions on Held-out Data\nDESCRIPTION: This code snippet shows how to estimate topic proportions on held-out data using a trained Amortized LDA model. The `get_latent_representation()` method is called with a new AnnData object (`test_adata`) to obtain topic proportions for the new data.\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/docs/user_guide/models/amortizedlda.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n\n>>> test_topic_prop = model.get_latent_representation(test_adata)\n\n```\n\n----------------------------------------\n\nTITLE: Importing MRVI class in Python\nDESCRIPTION: Imports the MRVI class from the scvi.external module for modeling sample-level heterogeneity in single-cell RNA-seq data.\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/CHANGELOG.md#2025-04-16_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom scvi.external import MRVI\n```\n\n----------------------------------------\n\nTITLE: Cell Type Proportion Retrieval in Python using Stereoscope\nDESCRIPTION: This snippet retrieves estimated cell type proportions from the spatial model after training, storing the results in the AnnData object. The proportions are calculated by normalizing across learned abundances for each spot.\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/docs/user_guide/models/stereoscope.md#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nproportions = spatial_model.get_proportions()\nst_adata.obsm[\"proportions\"] = proportions\n```\n\n----------------------------------------\n\nTITLE: Classifying Zero-Inflation using Model Outputs in Python\nDESCRIPTION: This Python snippet demonstrates how to classify genes as zero-inflated using AUTOZI model outputs. It shows how to extract posterior distributions from the model and calculate the probability of zero-inflation using Bayesian decision theory. The dependencies include the AUTOZI model and the 'scipy' library for statistical functions.\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/docs/user_guide/models/autozi.md#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n>>> outputs = model.get_alpha_betas()\n>>> alpha_posterior = outputs['alpha_posterior']\n>>> beta_posterior = outputs['beta_posterior']\n```\n\nLANGUAGE: Python\nCODE:\n```\n>>> from scipy.stats import beta\n>>> threshold = 0.5\n>>> zi_probs = beta.cdf(0.5, alpha_posterior, beta_posterior)\n```\n\n----------------------------------------\n\nTITLE: Importing METHYLVI class in Python\nDESCRIPTION: Imports the METHYLVI class from the scvi.external module for modeling methylation data from single-cell bisulfite sequencing (scBS-seq) experiments.\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/CHANGELOG.md#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom scvi.external import METHYLVI\n```\n\n----------------------------------------\n\nTITLE: Initializing LDVAE Model with LinearSCVI (Python)\nDESCRIPTION: This snippet refers to the `LinearSCVI` class within the `scvi.model` module. It is used to initialize the LDVAE model in Python, which is a linear decoder-based variant of scVI. This model is advantageous for interpretability and scalability.\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/docs/user_guide/models/linearscvi.md#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n\"{class}`~scvi.model.LinearSCVI`\"\n```\n\n----------------------------------------\n\nTITLE: Plotting Heatmap of Cell Type Proportions using Scanpy\nDESCRIPTION: This snippet imports Scanpy and utilizes it to plot a spatial heatmap of estimated cell type proportions from the AnnData object. It visualizes the distribution of a specific cell type across spatial locations.\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/docs/user_guide/models/stereoscope.md#2025-04-16_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nimport scanpy as sc\nsc.p1.embedding(st_adata, basis=\"location\", color=\"B cells\")\n```\n\n----------------------------------------\n\nTITLE: Importing SupervisedModuleClass in Python\nDESCRIPTION: Imports the SupervisedModuleClass from the scvi.module.base module for supervised learning tasks.\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/CHANGELOG.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom scvi.module.base import SupervisedModuleClass\n```\n\n----------------------------------------\n\nTITLE: Retrieving Latent Variables with scvi-tools in Python\nDESCRIPTION: This code snippet retrieves the latent variables, gamma, associated with cell-type-specific continuous covariates for B cells using an scvi-tools model. The retrieved values are then stored in the obsm attribute of an AnnData object. Required dependencies include scvi-tools and an initialized model (st_model) and AnnData object (st_adata). The expected output is the latent variables for the specified cell type.\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/docs/user_guide/models/destvi.md#2025-04-16_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n>>> gamma = st_model.get_gamma()[\"B cells\"]\n>>> st_adata.obsm[\"B_cells_gamma\"] = gamma\n```\n\n----------------------------------------\n\nTITLE: Predicting Cell Type Labels using MethylANVI\nDESCRIPTION: This Python snippet demonstrates how to predict cell type labels with the MethylANVI model, saving the predictions in the metadata dataframe 'mdata'. The method model.predict() is called to perform the task.\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/docs/user_guide/models/methylanvi.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> mdata.obs[\"methylanvi_prediction\"] = model.predict()\n```\n\n----------------------------------------\n\nTITLE: Importing RESOLVI class in Python\nDESCRIPTION: Imports the RESOLVI class from the scvi.external module for bias correction in single-cell resolved spatial transcriptomics.\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/CHANGELOG.md#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom scvi.external import RESOLVI\n```\n\n----------------------------------------\n\nTITLE: Feature Module Discovery with LDA\nDESCRIPTION: This code snippet illustrates how to retrieve the estimated feature-by-topic distribution from a trained Amortized LDA model. The `get_feature_by_topic()` method provides a Monte Carlo estimate of the logistic-Normal expectation, representing the feature-by-topic distribution.\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/docs/user_guide/models/amortizedlda.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n\n>>> feature_by_topic = model.get_feature_by_topic()\n\n```\n\n----------------------------------------\n\nTITLE: Utilizing TileDB with CensusSCVIDataModule\nDESCRIPTION: This code configures a CensusSCVIDataModule for working with TileDB, designed for training SCVI models on large, multi-dimensional datasets. It involves setting up a local dataset, querying with specific filters, and preparing the dataloader. Dependencies include cellxgene_census and tiledbsoma. Key inputs are experiment name, batch keys, and data queries. Expected output is a configured datamodule. TileDB excels in large-scale genomics and sparse data handling.\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/docs/user_guide/use_case/custom_dataloaders.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport cellxgene_census\nimport tiledbsoma as soma\nfrom cellxgene_census.experimental.ml import experiment_dataloader\nfrom cellxgene_census.experimental.ml.datamodule import CensusSCVIDataModule\nimport numpy as np\n\n# this test checks the local custom dataloder made by CZI and run several tests with it\ncensus = cellxgene_census.open_soma(census_version=\"stable\")\n\nexperiment_name = \"mus_musculus\"\nobs_value_filter = (\n    'is_primary_data == True and tissue_general in [\"kidney\"] and nnz >= 3000'\n)\n\nhv_idx = np.arange(100)  # just ot make it smaller and faster for debug\n\n# this is CZI part to be taken once all is ready\nbatch_keys = [\"dataset_id\", \"assay\", \"suspension_type\", \"donor_id\"]\ndatamodule = CensusSCVIDataModule(\n    census[\"census_data\"][experiment_name],\n    measurement_name=\"RNA\",\n    X_name=\"raw\",\n    obs_query=soma.AxisQuery(value_filter=obs_value_filter),\n    var_query=soma.AxisQuery(coords=(list(hv_idx),)),\n    batch_size=1024,\n    shuffle=True,\n    batch_keys=batch_keys,\n    dataloader_kwargs={\"num_workers\": 0, \"persistent_workers\": False},\n)\n\n\n# basicaly we should mimiC everything below to any model census in scvi\nadata_orig = synthetic_iid()\nscvi.model.SCVI.setup_anndata(adata_orig, batch_key=\"batch\")\nmodel = scvi.model.SCVI(adata_orig)\n```\n\n----------------------------------------\n\nTITLE: Importing SysVI class in Python\nDESCRIPTION: Imports the SysVI class from the scvi.external module for cycle consistency loss and VampPrior functionality.\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/CHANGELOG.md#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom scvi.external import SysVI\n```\n\n----------------------------------------\n\nTITLE: Reducing Dimensionality with scvi-tools in Python\nDESCRIPTION: The provided code snippet demonstrates how to extract a latent representation using the `get_latent_representation` method in ResolVI. `adata.obsm['X_resolvi']` stores the reduced dimensional data, which can be used for further analyses, such as clustering. This functionality depends on prior training of the model on appropriate input data.\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/docs/user_guide/models/resolvi.md#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n>>> adata.obsm[\"X_resolvi\"] = model.get_latent_representation()\n```\n\n----------------------------------------\n\nTITLE: Training SCVI Model in Non-Interactive Session with DDP\nDESCRIPTION: This snippet demonstrates how to initiate training of an SCVI model using multiple GPUs in a non-interactive environment. It utilizes ddp strategy to effectively manage data distribution across the GPUs, optimizing the training process.\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/docs/user_guide/use_case/multi_gpu_training.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nmodel.train(\n    ..., accelerator=\"gpu\", devices=-1, strategy=\"ddp_find_unused_parameters_true\"\n)\n```\n\n----------------------------------------\n\nTITLE: Add MuData support for TOTALVI\nDESCRIPTION: Experimental MuData support for {class}`~scvi.model.TOTALVI` via the method {meth}`~scvi.model.TOTALVI.setup_mudata`. For several of the existing `AnnDataField` classes, there is now a MuData counterpart with an additional `mod_key` argument used to indicate the modality where the data lives. These modified classes are simply wrapped versions of the original `AnnDataField` code via the new {class}`scvi.data.fields.MuDataWrapper` method [#1474].\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/CHANGELOG.md#2025-04-16_snippet_20\n\nLANGUAGE: Python\nCODE:\n```\n\"- Experimental MuData support for {class}`~scvi.model.TOTALVI` via the method\n    {meth}`~scvi.model.TOTALVI.setup_mudata`. For several of the existing `AnnDataField` classes,\n    there is now a MuData counterpart with an additional `mod_key` argument used to indicate the\n    modality where the data lives (e.g. {class}`~scvi.data.fields.LayerField` to\n    {class}`~scvi.data.fields.MuDataLayerField`). These modified classes are simply wrapped\n    versions of the original `AnnDataField` code via the new\n    {class}`scvi.data.fields.MuDataWrapper` method [#1474].\"\n```\n\n----------------------------------------\n\nTITLE: Nearest Neighbor Graph Creation with Scanpy\nDESCRIPTION: This snippet shows how to create a nearest neighbor graph using scanpy, leveraging the latent representation obtained from MultiVI. It uses the 'X_mvi' representation stored in the AnnData object and calculates distances between cells, which are then stored in the AnnData object.\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/docs/user_guide/models/multivi.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> import scanpy as sc\n>>> sc.pp.neighbors(adata, use_rep=\"X_mvi\")\n>>> adata.obsp[\"distances\"]\n```\n\n----------------------------------------\n\nTITLE: Training SCVI Model in Interactive Session with DDP\nDESCRIPTION: This snippet shows how to train an SCVI model in an interactive session (like Jupyter Notebook) using multiple GPUs. It specifies a different DDP strategy suitable for interactive environments, ensuring seamless training.\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/docs/user_guide/use_case/multi_gpu_training.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nmodel.train(\n    ...,\n    accelerator=\"gpu\",\n    devices=-1,\n    strategy=\"ddp_notebook_find_unused_parameters_true\",\n)\n```\n\n----------------------------------------\n\nTITLE: Add max_kl_weight and min_kl_weight to TrainingPlan\nDESCRIPTION: Adds `max_kl_weight` and `min_kl_weight` to {class}`~scvi.train.TrainingPlan` [#1595]. This provides more control over the KL divergence weight during training, allowing for a gradual increase or decrease of its influence.\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/CHANGELOG.md#2025-04-16_snippet_24\n\nLANGUAGE: Python\nCODE:\n```\n\"- Add `max_kl_weight` and `min_kl_weight` to {class}`~scvi.train.TrainingPlan` [#1595].\"\n```\n\n----------------------------------------\n\nTITLE: Creating Nearest Neighbor Graph with Scanpy\nDESCRIPTION: This code snippet shows how to use Scanpy to create a nearest neighbor graph based on the latent representation obtained from PeakVI. It first computes neighbors using the specified representation and stores distances in the 'distances' field.\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/docs/user_guide/models/peakvi.md#2025-04-16_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n>>> import scanpy as sc\n>>> sc.pp.neighbors(adata, use_rep=\"X_scvi\")\n>>> adata.obsp[\"distances\"]\n```\n\n----------------------------------------\n\nTITLE: Creating Model Criticism Report\nDESCRIPTION: Generate a comprehensive criticism report for a single-cell RNA sequencing model. This report provides detailed insights into model performance, including various evaluation metrics like coefficient of variation and differential expression analysis.\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/docs/user_guide/use_case/scvi_criticism.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ncreate_criticism_report(model)\n```\n\n----------------------------------------\n\nTITLE: Generalize Jax support for scvi-tools models\nDESCRIPTION: Major changes to Jax support for scvi-tools models to generalize beyond {class}`~scvi.model.JaxSCVI`. Support for Jax remains experimental and is subject to breaking changes:  Consistent module interface for Flax modules (Jax-backed) via {class}`~scvi.module.base.JaxModuleWrapper`, such that they are compatible with the existing {class}`~scvi.model.base.BaseModelClass` [#1506]. {class}`~scvi.train.JaxTrainingPlan` now leverages Pytorch Lightning to factor out Jax-specific training loop implementation [#1506]. Enable basic device management in Jax-backed modules [#1585].\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/CHANGELOG.md#2025-04-16_snippet_22\n\nLANGUAGE: Python\nCODE:\n```\n\"- Major changes to Jax support for scvi-tools models to generalize beyond\n    {class}`~scvi.model.JaxSCVI`. Support for Jax remains experimental and is subject to breaking\n    changes:\n\n    - Consistent module interface for Flax modules (Jax-backed) via\n        {class}`~scvi.module.base.JaxModuleWrapper`, such that they are compatible with the\n        existing {class}`~scvi.model.base.BaseModelClass` [#1506].\n    - {class}`~scvi.train.JaxTrainingPlan` now leverages Pytorch Lightning to factor out\n        Jax-specific training loop implementation [#1506].\n    - Enable basic device management in Jax-backed modules [#1585].\"\n```\n\n----------------------------------------\n\nTITLE: Calculating Ambient Profile Using get_ambient_profile Method in Python\nDESCRIPTION: This snippet shows how to calculate the ambient profile using the get_ambient_profile method, which is inspired by EmptyDrops. It loads annotated data and raw data, then calculates the ambient profile with a probability threshold of 0.995.\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/docs/user_guide/models/scar.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> adata = anndata.read_h5ad(path_to_anndata)\n>>> raw_adata = anndata.read_h5ad(path_to_raw_anndata)\n>>> scvi_external.SCAR.get_ambient_profile(adata=adata, raw_adata=raw_adata, prob=0.995)\n```\n\n----------------------------------------\n\nTITLE: SCVI Model Hyperparameter Tuning Example\nDESCRIPTION: This code snippet demonstrates how to run an autotune experiment for a SCVI model using Ray Tune. It defines a search space for `max_epochs` and `n_hidden` and specifies the metrics to track (`elbo_validation`). The experiment is configured to minimize the metric and uses the ASHA scheduler and HyperOpt searcher.\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/docs/user_guide/use_case/hyper_parameters_tuning.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n```python\nadata = synthetic_iid()\nSCVI.setup_anndata(adata)\n\nexperiment = run_autotune(\n    model_cls=SCVI,\n    data=adata,\n    metrics=[\"elbo_validation\"],\n    mode=\"min\",\n    search_space={\n        \"model_params\": {\n            \"n_hidden\": tune.choice([1, 2]),\n        },\n        \"train_params\": {\n            \"max_epochs\": tune.choice([1, 20]),\n        },\n    },\n    num_samples=2,\n    seed=0,\n    scheduler=\"asha\",\n    searcher=\"hyperopt\",\n)\n```\n```\n\n----------------------------------------\n\nTITLE: Accessing Factor Loadings in LDVAE (Python)\nDESCRIPTION: This snippet highlights the `get_loadings` function within the `LinearSCVI` class.  This function allows you to access the factor loading matrix W, enabling the interpretation of latent dimensions. This matrix W represents the linear relationship between latent space and genes.\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/docs/user_guide/models/linearscvi.md#2025-04-16_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n\"{func}`~scvi.model.LinearSCVI.get_loadings`\"\n```\n\n----------------------------------------\n\nTITLE: Performing Counterfactual Prediction with SCVI Model in Python\nDESCRIPTION: This code snippet demonstrates how to use the 'transform_batch' parameter in the SCVI model's 'get_normalized_expression' function to perform counterfactual prediction. It allows predicting normalized gene expression for cells as if they belonged to a different batch.\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/docs/user_guide/background/counterfactual_prediction.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nscvi.model.SCVI.get_normalized_expression(transform_batch=counterfactual_batch)\n```\n\n----------------------------------------\n\nTITLE: Fix compute_reconstruction_error bug\nDESCRIPTION: Fixes a bug in `compute_reconstruction_error` that caused the first batch to be ignored. This ensures that all data batches are correctly processed when computing the reconstruction error during model evaluation. See issue 1854 for more details.\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/CHANGELOG.md#2025-04-16_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\n\"Fix bug {meth}`~scvi.model.base._log_likelihood.compute_reconstruction_error` causing the first\n    batch to be ignored, see more details in {issue}`1854` {pr}`1857`.\"\n```\n\n----------------------------------------\n\nTITLE: Plotting Cell Type Proportions Spatially with Scanpy\nDESCRIPTION: This snippet shows how to plot the spatial distributions of estimated cell type proportions using the Scanpy library. It extracts and assigns the proportions for a specific cell type and visualizes them on a spatial plot.\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/docs/user_guide/models/destvi.md#2025-04-16_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nimport scanpy as sc\n        st_adata.obs['B cells'] = st_adata.obsm['proportions']['B cells']\n        sc.pl.spatial(st_adata, color=\"B cells\", spot_size=130)\n```\n\n----------------------------------------\n\nTITLE: Building Documentation Locally with Sphinx\nDESCRIPTION: Command to build documentation locally using Sphinx, generating HTML files in the docs/_build directory\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/docs/developer/maintenance.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython -m sphinx -b html docs docs/_build\n```\n\n----------------------------------------\n\nTITLE: Fix Poisson sampling in scvi.module.VAE.sample\nDESCRIPTION: Fixes a bug in the `Poisson sampling` within the `scvi.module.VAE.sample` method. This correction ensures that the Poisson sampling process works correctly within the Variational Autoencoder (VAE) framework. This relies on PyTorch for the poisson distribution.\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/CHANGELOG.md#2025-04-16_snippet_19\n\nLANGUAGE: Python\nCODE:\n```\n\"Fix Poisson sampling in {meth}`~scvi.module.VAE.sample` [#1702].\"\n```\n\n----------------------------------------\n\nTITLE: Using Early Stopping Callback in PyTorch Lightning\nDESCRIPTION: This code snippet demonstrates how to configure and use the Early Stopping callback in the training loop, specifying parameters such as monitoring metrics, patience, and minimum delta for improvements.\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/docs/user_guide/use_case/using_callbacks.md#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nearly_stopping_kwargs = {\n    \"early_stopping\": True,\n    \"early_stopping_monitor\": \"elbo_validation\",\n    \"early_stopping_patience\": 10,\n    \"early_stopping_min_delta\": 0.0,\n    \"check_val_every_n_epoch\": 1,\n}\nmodel.train(..., **early_stopping_kwargs)\n```\n\n----------------------------------------\n\nTITLE: Verifying scvi-tools installation\nDESCRIPTION: Command to verify that the scvi-tools package was successfully installed in the development environment.\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/docs/developer/code.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npip show scvi-tools\n```\n\n----------------------------------------\n\nTITLE: Fix get_likelihood_parameters failure\nDESCRIPTION: Fixes a bug in `get_likelihood_parameters()` that occurred when `gene_likelihood != \"zinb\"` within the `RNASeqMixin` class. This resolves an issue that prevented the correct retrieval of likelihood parameters under specific conditions, ensuring the method functions as expected. The bug fix pertains to a specific conditional case when gene likelihood is not ZINB.\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/CHANGELOG.md#2025-04-16_snippet_18\n\nLANGUAGE: Python\nCODE:\n```\n\"Fix `get_likelihood_parameters()` failure when `gene_likelihood != \"zinb\"` in\n    {class}`~scvi.model.base.RNASeqMixin` [#1618].\"\n```\n\n----------------------------------------\n\nTITLE: Using Model Checkpoint Callback in PyTorch Lightning\nDESCRIPTION: This snippet illustrates how to incorporate the SaveCheckpoint callback into the model training function, allowing for automatic saving of the best model based on monitored validation metrics and handling gradients or loss exceptions.\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/docs/user_guide/use_case/using_callbacks.md#2025-04-16_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nmodel.train(\n    ..., \n    callbacks=[\n        SaveCheckpoint(\n            monitor=\"elbo_validation\", load_best_on_end=True, check_nan_gradients=True\n        )\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing SCANVI Model from SCVI Model in Python\nDESCRIPTION: New method to initialize a SCANVI model from a pretrained SCVI model, replacing the previous default behavior of pretraining.\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/CHANGELOG.md#2025-04-16_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nSCANVI.from_scvi_model()\n```\n\n----------------------------------------\n\nTITLE: VAEMixin.get_latent_representation improvements\nDESCRIPTION: The snippet describes improvements made to `VAEMixin.get_latent_representation`. These improvements include a more explicit implementation and a better docstring, enhancing the clarity and usability of the method. It is related to latent representation extraction.\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/CHANGELOG.md#2025-04-16_snippet_17\n\nLANGUAGE: Python\nCODE:\n```\n\"{meth}`~scvi.model.base.VAEMixin.get_latent_representation`: more explicit and better docstring\n    [#1732].\"\n```\n\n----------------------------------------\n\nTITLE: Setting Up LamindDB with Mapped Collection\nDESCRIPTION: Initialize LamindDB and set up a MappedCollectionDataModule for SCVI training. This code snippet demonstrates creating a collection, retrieving artifacts, and configuring the dataloader. Dependencies include lamindb library and the scvi-tools library. Key parameters include collection name, batch size, and join type. The main output is a datamodule ready for training SCVI models. Not ideal for complex multi-dimensional data.\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/docs/user_guide/use_case/custom_dataloaders.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nos.system(\"lamin init --storage ./test-registries\")\nimport lamindb as ln\n\nln.setup.init(name=\"lamindb_instance_name\", storage=save_path)\n\n# a test for mapped collection\ncollection = ln.Collection.get(name=\"covid_normal_lung\")\nartifacts = collection.artifacts.all()\nartifacts.df()\n\ndatamodule = MappedCollectionDataModule(\n    collection, batch_key=\"assay\", batch_size=1024, join=\"inner\"\n)\nmodel = scvi.model.SCVI(adata=None, registry=datamodule.registry)\n```\n\n----------------------------------------\n\nTITLE: Add on_load callback to PyroBaseModuleClass\nDESCRIPTION: Adds {meth}`~scvi.module.base.PyroBaseModuleClass.on_load` callback which is called on {meth}`~scvi.model.base.BaseModuleClass.load` prior to loading the module state dict [#1542]. This allows performing actions before loading the state dict of a Pyro module.\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/CHANGELOG.md#2025-04-16_snippet_23\n\nLANGUAGE: Python\nCODE:\n```\n\"- Add {meth}`~scvi.module.base.PyroBaseModuleClass.on_load` callback which is called on\n    {meth}`~scvi.model.base.BaseModuleClass.load` prior to loading the module state dict [#1542].\"\n```\n\n----------------------------------------\n\nTITLE: Modify VAE generative method's outputs\nDESCRIPTION: Modification of the {meth}`~scvi.module.VAE.generative` method's outputs to return prior and likelihood properties as {class}`~torch.distributions.distribution.Distribution` objects. Concerned modules are {class}`~scvi.module.AmortizedLDAPyroModule`, {class}`AutoZIVAE`, {class}`~scvi.module.MULTIVAE`, {class}`~scvi.module.PEAKVAE`, {class}`~scvi.module.TOTALVAE`, {class}`~scvi.module.SCANVAE`, {class}`~scvi.module.VAE`, and {class}`~scvi.module.VAEC`. This allows facilitating the manipulation of these distributions for model training and inference.\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/CHANGELOG.md#2025-04-16_snippet_21\n\nLANGUAGE: Python\nCODE:\n```\n\"- Modification of the {meth}`~scvi.module.VAE.generative` method's outputs to return prior and\n    likelihood properties as {class}`~torch.distributions.distribution.Distribution` objects.\n    Concerned modules are {class}`~scvi.module.AmortizedLDAPyroModule`, {class}`AutoZIVAE`,\n    {class}`~scvi.module.MULTIVAE`, {class}`~scvi.module.PEAKVAE`, {class}`~scvi.module.TOTALVAE`,\n    {class}`~scvi.module.SCANVAE`, {class}`~scvi.module.VAE`, and {class}`~scvi.module.VAEC`. This\n    allows facilitating the manipulation of these distributions for model training and inference\n    [#1356].\"\n```\n\n----------------------------------------\n\nTITLE: Storing Raw UMI Count Data in AnnData for scvi-tools Models\nDESCRIPTION: Code example showing how to safely store raw UMI count data in an AnnData layer as part of a Scanpy workflow. All scvi-tools models require raw UMI count data as input.\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/docs/api/user.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nadata.layers[\"counts\"] = adata.X.copy()\n```\n\n----------------------------------------\n\nTITLE: Add latent mode support to scvi.model.SCVI\nDESCRIPTION: Adds latent mode support to the `scvi.model.SCVI` class. This allows loading a model using only latent representations, skipping the encoding step and speeding up inference. This is useful when full counts are unavailable but cached latent parameters exist.\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/CHANGELOG.md#2025-04-16_snippet_15\n\nLANGUAGE: Python\nCODE:\n```\n\"Add latent mode support in {class}`~scvi.model.SCVI` [#1672]. This allows for loading a model\n    using latent representations only (i.e. without the full counts). Not only does this speed up\n    inference by using the cached latent distribution parameters (thus skipping the encoding step),\n    but this also helps in scenarios where the full counts are not available but cached latent\n    parameters are. We provide utility functions and methods to dynamically convert a model to\n    latent mode.\"\n```\n\n----------------------------------------\n\nTITLE: Updating setup_anndata method in Python\nDESCRIPTION: Example showing how the setup_anndata method changed from a global function to a static class method for DESTVI and TOTALVI model classes.\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/CHANGELOG.md#2025-04-16_snippet_25\n\nLANGUAGE: Python\nCODE:\n```\n:::{figure} docs/\\_static/img/setup_anndata_before_after.svg\n:align: center\n:alt: setup_anndata before and after\n:class: img-fluid\n\n`setup_anndata` before and after\n:::\n```\n\n----------------------------------------\n\nTITLE: LossRecorder Removal in scvi.module.base\nDESCRIPTION: The `LossRecorder` class in `scvi.module.base` has been removed in favor of `LossOutput`. This change affects how loss values are recorded and accessed during training.  Users should update their code to use `LossOutput` instead.\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/CHANGELOG.md#2025-04-16_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\n\"{class}`~scvi.module.base.LossRecorder` has been removed in favor of\n    {class}`~scvi.module.base.LossOutput` {pr}`1869`.\"\n```\n\n----------------------------------------\n\nTITLE: Setting Up AnnData for scvi-tools in Python\nDESCRIPTION: Protein names are now stored in a specific location within the AnnData object when setting up data for scvi-tools models.\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/CHANGELOG.md#2025-04-16_snippet_31\n\nLANGUAGE: python\nCODE:\n```\nadata.uns[\"_scvi\"][\"protein_names\"]\n```\n\n----------------------------------------\n\nTITLE: VeloVI Class Definition\nDESCRIPTION: This snippet indicates the existence of a Python class named VELOVI within the scvi.external module.  It is part of the scvi-tools library and suggests the class encapsulates functionality related to VeloVI.\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/docs/user_guide/models/velovi.md#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n\"{class}`~scvi.external.VELOVI`\"\n```\n\n----------------------------------------\n\nTITLE: Importing METHYLANVI class in Python\nDESCRIPTION: Imports the METHYLANVI class from the scvi.external module for modeling methylation labelled data from single-cell bisulfite sequencing (scBS-seq).\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/CHANGELOG.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom scvi.external import METHYLANVI\n```\n\n----------------------------------------\n\nTITLE: Cloning the forked repository for scvi-tools development\nDESCRIPTION: Commands to clone a forked repository of scvi-tools to your local machine. Provides both HTTPS and SSH options for cloning.\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/docs/developer/code.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/{your-username}/scvi-tools.git\n# or with SSH\ngit clone git@github.com:{your-username}/scvi-tools.git\n\ncd scvi-tools\n```\n\n----------------------------------------\n\nTITLE: MrVI Class Definition\nDESCRIPTION: This snippet refers to the Python class `~scvi.external.MRVI` which represents the Multi-resolution Variational Inference model in the scvi-tools library. It is used for exploratory and comparative analyses of single-cell transcriptomics data with multi-sample, multi-batch experimental designs.\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/docs/user_guide/models/mrvi.md#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n\"{class}`~scvi.external.MRVI`\"\n```\n\n----------------------------------------\n\nTITLE: Importing Decipher class in Python\nDESCRIPTION: Imports the Decipher class from the scvi.external module for dimensionality reduction and interpretable representation learning in single-cell RNA sequencing data.\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/CHANGELOG.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom scvi.external import Decipher\n```\n\n----------------------------------------\n\nTITLE: Adding upstream remote for scvi-tools repository\nDESCRIPTION: Command to add the main scvi-tools repository as an upstream remote to keep your fork in sync with the original repository.\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/docs/developer/code.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit remote add upstream https://github.com/scverse/scvi-tools.git\n```\n\n----------------------------------------\n\nTITLE: Defining Doublet Simulation Formula in LaTeX\nDESCRIPTION: Mathematical formula showing how Solo simulates doublets by combining two single-cell transcriptomes drawn independently from the empirical data distribution.\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/docs/user_guide/models/solo.md#2025-04-16_snippet_0\n\nLANGUAGE: latex\nCODE:\n```\n\\begin{align}\n d_n  = x_{1} + x_{2},\n \\end{align}\n```\n\n----------------------------------------\n\nTITLE: Importing SemisupervisedTrainingMixin class in Python\nDESCRIPTION: Imports the SemisupervisedTrainingMixin class from the scvi.model.base module for semi-supervised training functionality.\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/CHANGELOG.md#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom scvi.model.base import SemisupervisedTrainingMixin\n```\n\n----------------------------------------\n\nTITLE: Creating Attributes Table in Jinja2\nDESCRIPTION: This snippet checks if attributes exist and generates a table for them in the documentation. It uses Jinja2's loop and conditional syntax to format and display each attribute correctly.\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/docs/_templates/autosummary/class.rst#2025-04-16_snippet_0\n\nLANGUAGE: Jinja\nCODE:\n```\n{% block attributes %}\n{% if attributes %}\nAttributes table\n~~~~~~~~~~~~~~~~~~\n\n.. autosummary::\n{% for item in attributes %}\n    ~{{ fullname }}.{{ item }}\n{%- endfor %}\n{% endif %}\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Installing scvi-tools development dependencies\nDESCRIPTION: Commands to install the development dependencies and the package in editable mode using pip or uv package managers.\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/docs/developer/code.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip install -e \".[dev]\"\n# or with uv\nuv pip install -e \".[dev]\"\n```\n\n----------------------------------------\n\nTITLE: Creating Methods Table in Jinja2\nDESCRIPTION: This snippet defines a block for methods documentation, which generates a table only if methods are present. It excludes the '__init__' method and formats the output accordingly.\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/docs/_templates/autosummary/class.rst#2025-04-16_snippet_1\n\nLANGUAGE: Jinja\nCODE:\n```\n{% block methods %}\n{% if methods %}\nMethods table\n~~~~~~~~~~~~~\n\n.. autosummary::\n{% for item in methods %}\n    {%- if item != '__init__' %}\n    ~{{ fullname }}.{{ item }}\n    {%- endif -%}\n{%- endfor %}\n{% endif %}\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Setting up pre-commit hooks for scvi-tools development\nDESCRIPTION: Commands to install and run pre-commit hooks for code quality checks before each commit in the scvi-tools repository.\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/docs/developer/code.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npre-commit install\n```\n\n----------------------------------------\n\nTITLE: Documenting Attributes in Jinja2\nDESCRIPTION: This snippet checks for attributes and generates their documentation using Jinja2's `autoattribute` directive. It formats the output by joining the object name and attribute name.\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/docs/_templates/autosummary/class.rst#2025-04-16_snippet_2\n\nLANGUAGE: Jinja\nCODE:\n```\n{% block attributes_documentation %}\n{% if attributes %}\nAttributes\n~~~~~~~~~~~\n\n{% for item in attributes %}\n\n.. autoattribute:: {{ [objname, item] | join(\".\") }}\n{%- endfor %}\n\n{% endif %}\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Creating a branch for scvi-tools code changes\nDESCRIPTION: Command to create a new git branch for implementing changes to the scvi-tools codebase.\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/docs/developer/code.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b my-change\n```\n\n----------------------------------------\n\nTITLE: Loading Reticulate in R for scvi-tools\nDESCRIPTION: This R code loads the Reticulate library to enable calling scvi-tools from R.\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/docs/installation.md#2025-04-16_snippet_8\n\nLANGUAGE: R\nCODE:\n```\nlibrary(reticulate)\n```\n\n----------------------------------------\n\nTITLE: Sphinx Class Documentation Structure Template\nDESCRIPTION: Jinja2 template that generates a structured Sphinx documentation page for a Python class. Includes sections for class inheritance, attributes table, methods table, detailed attributes documentation, and detailed methods documentation.\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/docs/_templates/class_no_inherited.rst#2025-04-16_snippet_0\n\nLANGUAGE: jinja2\nCODE:\n```\n{{ fullname | escape | underline}}\n\n.. currentmodule:: {{ module }}\n\n.. add toctree option to make autodoc generate the pages\n\n.. autoclass:: {{ objname }}\n   :show-inheritance:\n\n{% block attributes %}\n{% if attributes %}\nAttributes table\n~~~~~~~~~~~~~~~~\n\n.. autosummary::\n{% for item in attributes %}\n    {%- if item not in inherited_members%}\n        ~{{ fullname }}.{{ item }}\n    {%- endif -%}\n{%- endfor %}\n{% endif %}\n{% endblock %}\n\n\n{% block methods %}\n{% if methods %}\nMethods table\n~~~~~~~~~~~~~~\n\n.. autosummary::\n{% for item in methods %}\n    {%- if item != '__init__' and item not in inherited_members%}\n    ~{{ fullname }}.{{ item }}\n    {%- endif -%}\n\n{%- endfor %}\n{% endif %}\n{% endblock %}\n\n{% block attributes_documentation %}\n{% if attributes %}\nAttributes\n~~~~~~~~~~\n\n{% for item in attributes %}\n{%- if item not in inherited_members%}\n\n.. autoattribute:: {{ [objname, item] | join(\".\") }}\n{%- endif -%}\n{%- endfor %}\n\n{% endif %}\n{% endblock %}\n\n{% block methods_documentation %}\n{% if methods %}\nMethods\n~~~~~~~\n\n{% for item in methods %}\n{%- if item != '__init__' and item not in inherited_members%}\n\n.. automethod:: {{ [objname, item] | join(\".\") }}\n{%- endif -%}\n{%- endfor %}\n\n{% endif %}\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Committing changes to scvi-tools repository\nDESCRIPTION: Commands to stage and commit changes made to the scvi-tools codebase.\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/docs/developer/code.md#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ngit add .\ngit commit -m \"My change\"\n```\n\n----------------------------------------\n\nTITLE: Auto-Summary of Built-in Datasets - RST\nDESCRIPTION: This snippet generates an auto-summary of various pre-defined datasets available in scvi-tools, which can be useful for users to check available datasets for benchmarking. Ensure that the datasets are properly documented before including them in this summary.\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/docs/api/datasets.md#2025-04-16_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n.. autosummary::\n   :toctree: reference/\n   :nosignatures:\n\n   data.cellxgene\n   data.pbmc_seurat_v4_cite_seq\n   data.spleen_lymph_cite_seq\n   data.heart_cell_atlas_subsampled\n   data.pbmcs_10x_cite_seq\n   data.purified_pbmc_dataset\n   data.dataset_10x\n   data.brainlarge_dataset\n   data.pbmc_dataset\n   data.cortex\n   data.smfish\n   data.synthetic_iid\n   data.breast_cancer_dataset\n   data.mouse_ob_dataset\n   data.retina\n   data.prefrontalcortex_starmap\n   data.frontalcortex_dropseq\n```\n\n----------------------------------------\n\nTITLE: Running tests for scvi-tools\nDESCRIPTION: Commands to run pytest on all tests, specific test files, or individual tests to verify changes to the scvi-tools codebase.\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/docs/developer/code.md#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npytest  # run all tests\n# or\npytest tests/test_my_change.py  # run tests in a specific file\n# or\npytest tests/test_my_change.py::test_my_change  # run a specific test\n```\n\n----------------------------------------\n\nTITLE: Installing R and Reticulate for scvi-tools in conda\nDESCRIPTION: This command installs R, R essentials, and the Reticulate package in a conda environment for using scvi-tools with R.\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/docs/installation.md#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nconda install -c conda-forge r-base r-essentials r-reticulate\n```\n\n----------------------------------------\n\nTITLE: Current Module Declaration\nDESCRIPTION: RST directive to set the current module context for documentation.\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/docs/api/developer.md#2025-04-16_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. currentmodule:: scvi\n```\n\n----------------------------------------\n\nTITLE: Pushing changes to forked scvi-tools repository\nDESCRIPTION: Command to push the committed changes from your local branch to your forked repository on GitHub.\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/docs/developer/code.md#2025-04-16_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ngit push origin my-change\n```\n\n----------------------------------------\n\nTITLE: Including External Changelog using rST Include Directive\nDESCRIPTION: Uses the rST include directive to import a CHANGELOG.md file from one directory level up into the current documentation page. This allows maintaining the changelog separately while embedding it in the documentation.\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/docs/changelog.md#2025-04-16_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n{include} ../CHANGELOG.md\n```\n\n----------------------------------------\n\nTITLE: JaxTrainingPlan updates global_step correctly\nDESCRIPTION: The `JaxTrainingPlan` now correctly updates `global_step` through PyTorch Lightning by utilizing a dummy optimizer. This fixes a bug where the global step was not being properly tracked during training with Jax models within the PyTorch Lightning framework. This relies on both Jax and PyTorch Lightning.\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/CHANGELOG.md#2025-04-16_snippet_12\n\nLANGUAGE: Python\nCODE:\n```\n\"{class}`~scvi.train.JaxTrainingPlan` now correctly updates `global_step` through PyTorch\n    Lightning by using a dummy optimizer. {pr}`1791`.\"\n```\n\n----------------------------------------\n\nTITLE: Table of Contents Configuration in Markdown\nDESCRIPTION: Markdown configuration block for structuring the documentation table of contents, specifying a maximum depth of 2 levels and including 'code' and 'maintenance' sections.\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/docs/developer/index.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{toctree}\n:maxdepth: 2\n\ncode\nmaintenance\n```\n\n----------------------------------------\n\nTITLE: Manual Package Release Commands\nDESCRIPTION: Commands for manually building and publishing the package to PyPI using Hatch when the automated release workflow fails.\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/docs/developer/maintenance.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhatch build\nhatch publish\n```\n\n----------------------------------------\n\nTITLE: Generating Bibliography for Cited References in Markdown\nDESCRIPTION: This code snippet uses a Markdown directive to generate a bibliography of cited references. It specifically includes only the references that have been cited in the document.\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/docs/references.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```{bibliography}\n:cited:\n```\n```\n\n----------------------------------------\n\nTITLE: Installing Documentation Dependencies in Bash\nDESCRIPTION: Command to install documentation build dependencies for the scvi-tools project using pip with the docsbuild extra\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/docs/developer/maintenance.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip install -e \".[docsbuild]\"\n```\n\n----------------------------------------\n\nTITLE: Defining a Toctree for Model Hub Documentation in Markdown\nDESCRIPTION: This code snippet creates a table of contents tree (toctree) for model hub documentation, including links to notebooks about cellxgene census model and scvi hub operations. The maxdepth parameter limits the depth of displayed headers.\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/docs/tutorials/index_hub.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```{toctree}\n:maxdepth: 1\n\nnotebooks/hub/cellxgene_census_model\nnotebooks/hub/scvi_hub_intro_and_download\nnotebooks/hub/scvi_hub_upload_and_large_files\n```\n```\n\n----------------------------------------\n\nTITLE: Git Branch Structure Visualization in Text\nDESCRIPTION: ASCII diagram showing the branching and backporting structure between main development branch and release branches, illustrating how features and hotfixes are managed.\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/docs/developer/maintenance.md#2025-04-16_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nfeature foo <- head of branch main, main development branch\n|\nbug fix\n|\nfeature bar <- head of branch 0.14.x, release branch for the 0.14.x release series\n\\\n  my hotfix <- backported from main\n  |\n  my other hotfix <- backported from main, tagged as v0.14.1 (release)\n|\nfeature baz\n|\nmy hotfix\n|\nanother bug fix\n|\nmy other hotfix\n```\n\n----------------------------------------\n\nTITLE: Creating a Table of Contents with Toctree in Markdown\nDESCRIPTION: This snippet creates a structured table of contents using the toctree directive, linking to various quick start notebooks including API overview, data loading, and Python in R integration. The maxdepth parameter is set to 1 to limit the depth of the table of contents.\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/docs/tutorials/index_quick_start.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```{toctree}\n:maxdepth: 1\n\nnotebooks/quick_start/api_overview\nnotebooks/quick_start/data_loading\nnotebooks/quick_start/python_in_R\n```\n```\n\n----------------------------------------\n\nTITLE: Using sceasy for data handling in R\nDESCRIPTION: Reference to simplifying data handling in R tutorials using the sceasy package.\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/CHANGELOG.md#2025-04-16_snippet_26\n\nLANGUAGE: R\nCODE:\n```\n- Simplified data handling in R tutorials with sceasy and addressed bugs in package installation\n    ([#1122]).\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents for scBS-seq Documentation in Markdown\nDESCRIPTION: This code snippet defines a table of contents using Markdown syntax, specifically for a notebook related to MethylVI batch processing in the context of scBS-seq.\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/docs/tutorials/index_scbs.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```{toctree}\n:maxdepth: 1\n\nnotebooks/scbs/MethylVI_batch\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Current Module for Documentation - RST\nDESCRIPTION: This snippet sets the current module to 'scvi' for reStructuredText documentation generation, which is useful for auto-generating documentation of the library's functionality.\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/docs/api/datasets.md#2025-04-16_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. currentmodule:: scvi\n```\n\n----------------------------------------\n\nTITLE: Linking Notebooks in Documentation Structure\nDESCRIPTION: This snippet provides a table of contents structure for the project's documentation, specifically referring to notebooks detailing use cases like autotuning, minification, and interpretability. This is achieved using a toctree directive in Sphinx reStructuredText, specifying a maximum depth of 1 to list direct children.\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/docs/tutorials/index_use_cases.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Common Modelling Use Cases\\n\\n```{toctree}\\n:maxdepth: 1\\n\\nnotebooks/use_cases/autotune_scvi\\nnotebooks/use_cases/minification\\nnotebooks/use_cases/interpretability\\n```\n```\n\n----------------------------------------\n\nTITLE: Auto-Summary Documentation Block\nDESCRIPTION: RST directive block for generating automatic documentation summaries of various scvi-tools components.\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/docs/api/developer.md#2025-04-16_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n.. autosummary::\n   :toctree: reference/\n   :nosignatures:\n\n   data.AnnDataManager\n   data.AnnDataManagerValidationCheck\n   data.fields.BaseAnnDataField\n   data.fields.LayerField\n   data.fields.CategoricalObsField\n   data.fields.CategoricalVarField\n   data.fields.NumericalJointObsField\n   data.fields.NumericalJointVarField\n   data.fields.CategoricalJointObsField\n   data.fields.CategoricalJointVarField\n   data.fields.ObsmField\n   data.fields.VarmField\n   data.fields.ProteinObsmField\n   data.fields.StringUnsField\n   data.fields.LabelsWithUnlabeledObsField\n   data.fields.BaseMuDataWrapperClass\n   data.fields.MuDataWrapper\n   data.fields.MuDataLayerField\n   data.fields.MuDataProteinLayerField\n   data.fields.MuDataNumericalObsField\n   data.fields.MuDataNumericalVarField\n   data.fields.MuDataCategoricalObsField\n   data.fields.MuDataCategoricalVarField\n   data.fields.MuDataObsmField\n   data.fields.MuDataVarmField\n   data.fields.MuDataNumericalJointObsField\n   data.fields.MuDataNumericalJointVarField\n   data.fields.MuDataCategoricalJointObsField\n   data.fields.MuDataCategoricalJointVarField\n   data.AnnTorchDataset\n```\n\n----------------------------------------\n\nTITLE: Documenting Methods in Jinja2\nDESCRIPTION: This snippet similarly checks for methods and uses `automethod` to generate their documentation, again avoiding the `__init__` method. The method documentation is formatted by joining the object name and method name.\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/docs/_templates/autosummary/class.rst#2025-04-16_snippet_3\n\nLANGUAGE: Jinja\nCODE:\n```\n{% block methods_documentation %}\n{% if methods %}\nMethods\n~~~~~~~\n\n{% for item in methods %}\n{%- if item != '__init__' %}\n\n.. automethod:: {{ [objname, item] | join(\".\") }}\n{%- endif -%}\n{%- endfor %}\n\n{% endif %}\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry\nDESCRIPTION: Structured changelog entries organized by version numbers and dates, listing changes, improvements, bug fixes and contributor attributions\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/CHANGELOG.md#2025-04-16_snippet_32\n\nLANGUAGE: markdown\nCODE:\n```\n#### 0.6.2 (2020-4-01)\n\n- update highly variable gene selection to handle sparse matrices [@adam]\n- update DE docstrings [@pierre]\n- improve posterior save load to also handle subclasses [@pierre]\n- Create NB and ZINB distributions with torch and refactor code accordingly [@pierre]\n- typos in autozivae [@achille]\n- bug in csc sparse matrices in anndata data loader [@adam]\n```\n\n----------------------------------------\n\nTITLE: Documentation Navigation Structure in reStructuredText\nDESCRIPTION: Defines the documentation structure using toctree directive, organizing content into installation, tutorials, user guide, API reference and other sections. Hidden from main view but defines navigation hierarchy.\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/docs/index.md#2025-04-16_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n{toctree}\n:hidden: true\n:maxdepth: 3\n:titlesonly: true\n\ninstallation\ntutorials/index\nfaq\nuser_guide/index\napi/index\ndeveloper/index\nchangelog.md\nreferences\nDiscussion <https://discourse.scvi-tools.org>\nGitHub <https://github.com/scverse/scvi-tools>\nModel hub <https://huggingface.co/scvi-tools>\n```\n\n----------------------------------------\n\nTITLE: Defining Model Overview Table for scRNA-seq Analysis\nDESCRIPTION: Tabular representation of scRNA-seq models, their specific tasks, and corresponding research references\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/docs/user_guide/index.md#2025-04-16_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n* - :doc:`/user_guide/models/scvi`\n     - Dimensionality reduction, removal of unwanted variation, integration across replicates, donors, and technologies, differential expression, imputation, normalization of other cell- and sample-level confounding factors\n     - :cite:p:`Lopez18`\n```\n\n----------------------------------------\n\nTITLE: Config Parameters in Python Code References\nDESCRIPTION: Code parameter references showing various configuration options like batch_key='batch', dispersion='gene-batch', and categorical_covariate_keys=['assay_type', 'donor'] as used in different model contexts.\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/docs/faq.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nbatch_key=\"batch\"\ndispersion=\"gene-batch\"\nbatch_representation=\"embedding\"\nuse_observed_lib_size=False\ncategorical_covariate_keys=[\"assay_type\", \"donor\"]\nencode_covariates=True\ndeeply_inject_covariates=True\n```\n\n----------------------------------------\n\nTITLE: Defining Effect Size for Gene Expression in LaTeX\nDESCRIPTION: Mathematical definition of the effect size (log fold-change) for gene expression using LaTeX notation.\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/docs/user_guide/background/differential_expression.md#2025-04-16_snippet_2\n\nLANGUAGE: latex\nCODE:\n```\n\\begin{align}\n   \\beta_f\n   =\n   \\log_2 h_{f}^B - \\log_2 h_{f}^A.\n\\end{align}\n```\n\n----------------------------------------\n\nTITLE: Defining Decision Rule for Differential Expression in LaTeX\nDESCRIPTION: Mathematical definition of the decision rule for tagging features as differentially expressed using LaTeX notation.\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/docs/user_guide/background/differential_expression.md#2025-04-16_snippet_4\n\nLANGUAGE: latex\nCODE:\n```\n\\begin{align}\n   \\mu^k_f\n   =\n   \\begin{cases}\n     1 ~~\\textrm{if feature $g$ is tagged DE} \\\\\n     0 ~~\\textrm{otherwise}\n   \\end{cases},\n\\end{align}\n```\n\n----------------------------------------\n\nTITLE: Defining Null Hypothesis for Change Mode in LaTeX\nDESCRIPTION: Mathematical definition of the null hypothesis for the 'change' mode in differential expression analysis using LaTeX notation.\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/docs/user_guide/background/differential_expression.md#2025-04-16_snippet_3\n\nLANGUAGE: latex\nCODE:\n```\n\\begin{align}\n   \\lvert \\beta_f \\rvert\n   \\leq\n   \\delta.\n\\end{align}\n```\n\n----------------------------------------\n\nTITLE: Running pre-commit checks manually for scvi-tools\nDESCRIPTION: Commands to manually run pre-commit checks on modified files or all files in the scvi-tools repository.\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/docs/developer/code.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npre-commit  # check modified files\n# or\npre-commit run --all  # check all files\n```\n\n----------------------------------------\n\nTITLE: Defining Log Fold-Change in LaTeX\nDESCRIPTION: Mathematical definition of log fold-change between two cell states using LaTeX notation.\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/docs/user_guide/background/differential_expression.md#2025-04-16_snippet_0\n\nLANGUAGE: latex\nCODE:\n```\n\\begin{align}\n   \\beta_g := \\log h_{g}^B - \\log h_{g}^A,\n\\end{align}\n```\n\n----------------------------------------\n\nTITLE: Defining Aggregate Variational Posterior in LaTeX\nDESCRIPTION: Mathematical definition of the aggregate variational posterior for a cell state using LaTeX notation.\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/docs/user_guide/background/differential_expression.md#2025-04-16_snippet_1\n\nLANGUAGE: latex\nCODE:\n```\n\\begin{align}\n   \\hat P^C(\n     Z\n   ) =\n   \\frac\n   {1}\n   {\n     \\mathcal{N}_C\n   }\n   \\sum_{n \\in \\mathcal{N}_C}\n   p_\\theta(z \\mid x_n),\n\\end{align}\n```\n\n----------------------------------------\n\nTITLE: Defining False Discovery Proportion in LaTeX\nDESCRIPTION: Mathematical definition of the False Discovery Proportion for a specific family of decision rules using LaTeX notation.\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/docs/user_guide/background/differential_expression.md#2025-04-16_snippet_5\n\nLANGUAGE: latex\nCODE:\n```\n\\begin{align}\n   FDP_{\\mu^k}\n   =\n   \\frac\n   {\\sum_f (1 - d^f) \\mu_f^k}\n   {\\sum_f \\mu_f^k}\n   .\n\\end{align}\n```\n\n----------------------------------------\n\nTITLE: Rendering Model Tasks with reStructuredText\nDESCRIPTION: List-based table rendering of scvi-tools models, tasks, and references using reStructuredText syntax\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/docs/user_guide/index.md#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. list-table::\n   :widths: 15 100 25\n   :header-rows: 1\n\n   * - Model\n     - Tasks\n     - Reference\n```\n\n----------------------------------------\n\nTITLE: Configuring Tutorial Navigation Structure in Sphinx\nDESCRIPTION: Sphinx toctree directive that organizes tutorial documentation into a hierarchical structure with a maximum depth of 2 levels. Includes sections for quick start, scRNA-seq, ATAC-seq, scBS, multimodal, spatial, hub, use cases and development guides.\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/docs/tutorials/index.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{toctree}\n:maxdepth: 2\n\nindex_quick_start\nindex_scrna\nindex_atac\nindex_scbs\nindex_multimodal\nindex_spatial\nindex_hub\nindex_use_cases\nindex_dev\n```\n\n----------------------------------------\n\nTITLE: Generating Table of Contents for Spatial Transcriptomics Tutorials in Markdown\nDESCRIPTION: This code snippet creates a table of contents using the toctree directive in Markdown. It lists various Jupyter notebooks related to spatial transcriptomics analysis, setting the maximum depth to 1.\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/docs/tutorials/index_spatial.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```{toctree}\n:maxdepth: 1\n\nnotebooks/spatial/resolVI_tutorial\nnotebooks/spatial/DestVI_tutorial\nnotebooks/spatial/DestVI_in_R\nnotebooks/spatial/gimvi_tutorial\nnotebooks/spatial/tangram_scvi_tools\nnotebooks/spatial/stereoscope_heart_LV_tutorial\nnotebooks/spatial/cell2location_lymph_node_spatial_tutorial\n```\n```\n\n----------------------------------------\n\nTITLE: Generating Table of Contents for Multimodal Analysis Notebooks in Markdown\nDESCRIPTION: This code snippet creates a table of contents using Markdown syntax, listing various notebooks related to multimodal analysis techniques. It includes links to tutorials for totalVI, CITE-seq integration, reference mapping, and MultiVI, as well as an example of using totalVI in R.\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/docs/tutorials/index_multimodal.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```{toctree}\n:maxdepth: 1\n\nnotebooks/multimodal/totalVI\nnotebooks/multimodal/cite_scrna_integration_w_totalVI\nnotebooks/multimodal/totalVI_reference_mapping\nnotebooks/multimodal/totalvi_in_R\nnotebooks/multimodal/MultiVI_tutorial\n```\n```\n\n----------------------------------------\n\nTITLE: Table of Contents Directive\nDESCRIPTION: This snippet defines a table of contents using the `toctree` directive in reStructuredText. It specifies the maximum depth of the table of contents and includes a list of notebooks related to ATAC-seq analysis.\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/docs/tutorials/index_atac.md#2025-04-16_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n\n```{toctree}\n:maxdepth: 1\n\nnotebooks/atac/PeakVI\nnotebooks/atac/peakvi_in_R\nnotebooks/atac/scbasset\nnotebooks/atac/scbasset_batch\nnotebooks/atac/PoissonVI\n```\n\n```\n\n----------------------------------------\n\nTITLE: Creating Table of Contents in Markdown\nDESCRIPTION: This code snippet creates a table of contents using Markdown syntax, linking to development-related notebooks including data tutorials, module user guide, and model user guide.\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/docs/tutorials/index_dev.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```{toctree}\n:maxdepth: 1\n\nnotebooks/dev/data_tutorial\nnotebooks/dev/module_user_guide\nnotebooks/dev/model_user_guide\n```\n```\n\n----------------------------------------\n\nTITLE: Gene Expression Count Matrix in TSV Format\nDESCRIPTION: Tab-separated values file containing gene expression counts. Each row represents a gene (identified by gene symbol) and each column represents a sample. Values indicate the number of RNA transcripts detected for each gene in each sample.\nSOURCE: https://github.com/scverse/scvi-tools/blob/main/tests/test_data/immune_stimulated_expression_matrix.txt#2025-04-16_snippet_0\n\nLANGUAGE: tsv\nCODE:\n```\nCDK11B\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\nRP11-345P4.10\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n```"
  }
]