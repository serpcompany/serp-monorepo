[
  {
    "owner": "django-q2",
    "repo": "django-q2",
    "content": "TITLE: Creating and Executing Asynchronous Tasks in Django Q2\nDESCRIPTION: Demonstrates how to create and execute asynchronous tasks using Django Q2's async_task() function. It shows basic task creation, result retrieval, and using hooks for task completion.\nSOURCE: https://github.com/django-q2/django-q2/blob/master/docs/tasks.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom django_q.tasks import async_task, result\n\n# create the task\nasync_task('math.copysign', 2, -2)\n\n# or with import and storing the id\nimport math.copysign\n\ntask_id = async_task(copysign, 2, -2)\n\n# get the result\ntask_result = result(task_id)\n\n# result returns None if the task has not been executed yet\n# you can wait for it\ntask_result = result(task_id, 200)\n\n# but in most cases you will want to use a hook:\n\nasync_task('math.modf', 2.5, hook='hooks.print_result')\n\n# hooks.py\ndef print_result(task):\n    print(task.result)\n```\n\n----------------------------------------\n\nTITLE: Configuring Django Q2 with Q_CLUSTER Dictionary\nDESCRIPTION: Example configuration for Django Q2 in settings.py, showing various configuration options including worker settings, timeout values, Redis connection, and alternative cluster configurations for different task durations.\nSOURCE: https://github.com/django-q2/django-q2/blob/master/docs/configure.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# settings.py example\nQ_CLUSTER = {\n    'name': 'myproject',\n    'workers': 8,\n    'recycle': 500,\n    'timeout': 60,\n    'compress': True,\n    'save_limit': 250,\n    'queue_limit': 500,\n    'cpu_affinity': 1,\n    'label': 'Django Q2',\n    'redis': {\n        'host': '127.0.0.1',\n        'port': 6379,\n        'db': 0, },\n    'ALT_CLUSTERS': {\n        'long': {\n            'timeout': 3000,\n            'retry': 3600,\n            'max_attempts': 2,\n        },\n        'short': {\n            'timeout': 10,\n            'max_attempts': 1,\n        },\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Async Tasks in Django Q2\nDESCRIPTION: Examples of creating async tasks and handling results using Django Q2's task system\nSOURCE: https://github.com/django-q2/django-q2/blob/master/README.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom django_q.tasks import async_task, result\n\n# create the task\nasync_task('math.copysign', 2, -2)\n\n# or with a reference\nimport math.copysign\n\ntask_id = async_task(copysign, 2, -2)\n\n# get the result\ntask_result = result(task_id)\n\n# result returns None if the task has not been executed yet\n# you can wait for it\ntask_result = result(task_id, 200)\n\n# but in most cases you will want to use a hook:\n\nasync_task('math.modf', 2.5, hook='hooks.print_result')\n\n# hooks.py\ndef print_result(task):\n    print(task.result)\n```\n\n----------------------------------------\n\nTITLE: Using AsyncTask Class for Task Management in Django Q2\nDESCRIPTION: Shows how to use the AsyncTask class to create, configure, and execute tasks in Django Q2. It demonstrates setting task parameters, running tasks, and retrieving results with wait times.\nSOURCE: https://github.com/django-q2/django-q2/blob/master/docs/tasks.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# AsyncTask class instance example\nfrom django_q.tasks import AsyncTask\n\n# instantiate an async task\na = AsyncTask('math.floor', 1.5, group='math')\n\n# you can set or change keywords afterwards\na.cached = True\n\n# run it\na.run()\n\n# wait indefinitely for the result and print it\n# don't let the task return `None` or it will wait indefinitely\nprint(a.result(wait=-1))\n\n# change the args\na.args = (2.5,)\n\n# run it again\na.run()\n\n# wait max 10 seconds for the result and print it\n\nprint(a.result(wait=10))\n```\n\n----------------------------------------\n\nTITLE: Configuring Django Q2 Cluster Settings\nDESCRIPTION: Example configuration settings for Django Q2 cluster including worker count, timeout, compression, and Redis connection details\nSOURCE: https://github.com/django-q2/django-q2/blob/master/README.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nQ_CLUSTER = {\n    'name': 'myproject',\n    'workers': 8,\n    'recycle': 500,\n    'timeout': 60,\n    'compress': True,\n    'cpu_affinity': 1,\n    'save_limit': 250,\n    'queue_limit': 500,\n    'label': 'Django Q',\n    'redis': {\n        'host': '127.0.0.1',\n        'port': 6379,\n        'db': 0,\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Emails Asynchronously with Django Q2\nDESCRIPTION: Demonstrates how to send welcome and follow-up emails asynchronously using Django Q2's async_task and schedule functions. It shows immediate and delayed email sending.\nSOURCE: https://github.com/django-q2/django-q2/blob/master/docs/examples.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Welcome mail with follow up example\nfrom datetime import timedelta\nfrom django.utils import timezone\nfrom django_q.tasks import async_task, schedule\nfrom django_q.models import Schedule\n\n\ndef welcome_mail(user):\n    msg = 'Welcome to our website'\n    # send this message right away\n    async_task('django.core.mail.send_mail',\n            'Welcome',\n            msg,\n            'from@example.com',\n            [user.email])\n    # and this follow up email in one hour\n    msg = 'Here are some tips to get you started...'\n    schedule('django.core.mail.send_mail',\n             'Follow up',\n             msg,\n             'from@example.com',\n             [user.email],\n             schedule_type=Schedule.ONCE,\n             next_run=timezone.now() + timedelta(hours=1))\n\n    # since the `repeats` defaults to -1\n    # this schedule will erase itself after having run\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Django Q2 Signals in Python\nDESCRIPTION: This code snippet demonstrates how to connect to Django Q2 signals using the @receiver decorator. It includes examples for pre_enqueue, pre_execute, post_execute, and post_spawn signals, showing how to define callback functions for each signal.\nSOURCE: https://github.com/django-q2/django-q2/blob/master/docs/signals.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom django.dispatch import receiver\nfrom django_q.signals import pre_enqueue, pre_execute, post_execute, post_spawn\n\n@receiver(pre_enqueue)\ndef my_pre_enqueue_callback(sender, task, **kwargs):\n    print(f\"Task {task['name']} will be queued\")\n\n@receiver(pre_execute)\ndef my_pre_execute_callback(sender, func, task, **kwargs):\n    print(f\"Task {task['name']} will be executed by calling {func}\")\n\n@receiver(post_execute)\ndef my_post_execute_callback(sender, task, **kwargs):\n    print(f\"Task {task['name']} was executed with result {task['result']}\")\n\n@receiver(post_spawn)\ndef my_post_spawn_callback(sender, proc_name, **kwargs):\n    print(f\"Process {proc_name} has spawned\")\n```\n\n----------------------------------------\n\nTITLE: Handling Django Signals Asynchronously with Django Q2\nDESCRIPTION: Shows how to use Django Q2 to handle model signals asynchronously, specifically for notifying users about email changes. It includes two implementations: one using send_mass_mail and another using async_task for each email.\nSOURCE: https://github.com/django-q2/django-q2/blob/master/docs/examples.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Message on object change\nfrom django.contrib.auth.models import User\nfrom django.db.models.signals import pre_save\nfrom django.dispatch import receiver\nfrom django_q.tasks import async_task\n\n# set up the pre_save signal for our user\n@receiver(pre_save, sender=User)\ndef email_changed(sender, instance, **kwargs):\n    try:\n        user = sender.objects.get(pk=instance.pk)\n    except sender.DoesNotExist:\n        pass  # new user\n    else:\n        # has his email changed?\n        if not user.email == instance.email:\n            # tell everyone\n            async_task('tasks.inform_everyone', instance)\n```\n\nLANGUAGE: python\nCODE:\n```\n# tasks.py\ndef inform_everyone(user):\n    mails = []\n    for u in User.objects.exclude(pk=user.pk):\n        msg = f\"Dear {u.username}, {user.username} has a new email address: {user.email}\"\n        mails.append(('New email', msg,\n                      'from@example.com', [u.email]))\n    return send_mass_mail(mails)\n```\n\nLANGUAGE: python\nCODE:\n```\n# or do it async again\ndef inform_everyone_async(user):\n    for u in User.objects.exclude(pk=user.pk):\n        msg = f\"Dear {u.username}, {user.username} has a new email address: {user.email}\"\n        async_task('django.core.mail.send_mail',\n                'New email', msg, 'from@example.com', [u.email])\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Task Schedules in Django Q2\nDESCRIPTION: Examples of creating scheduled tasks using both the schedule() wrapper function and direct Schedule model creation. Shows basic task scheduling with different parameters.\nSOURCE: https://github.com/django-q2/django-q2/blob/master/docs/schedules.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Use the schedule wrapper\nfrom django_q.tasks import schedule\n\nschedule('math.copysign',\n         2, -2,\n         hook='hooks.print_result',\n         schedule_type='D')\n\n# Or create the object directly\nfrom django_q.models import Schedule\n\nSchedule.objects.create(func='math.copysign',\n                        hook='hooks.print_result',\n                        args='2,-2',\n                        schedule_type=Schedule.DAILY\n                        )\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Task Chain with async_chain in Python\nDESCRIPTION: Demonstrates how to create and execute a sequential chain of tasks using the async_chain function. Shows how to format the chain structure and retrieve group results.\nSOURCE: https://github.com/django-q2/django-q2/blob/master/docs/chain.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# async a chain of tasks\nfrom django_q.tasks import async_chain, result_group\n\n# the chain must be in the format\n# [(func,(args),{kwargs}),(func,(args),{kwargs}),..]]\ngroup_id = async_chain([('math.copysign', (1, -1)),\n                              ('math.floor', (1,))])\n\n# get group result\nresult_group(group_id, count=2)\n```\n\n----------------------------------------\n\nTITLE: Using async_iter to process iterable arguments asynchronously in Django Q2\nDESCRIPTION: Demonstrates how to use the async_iter function to process a list of arguments asynchronously. It creates 100 tasks for math.floor with different arguments, and then waits for the collated result.\nSOURCE: https://github.com/django-q2/django-q2/blob/master/docs/iterable.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Async Iterable example\nfrom django_q.tasks import async_iter, result\n\n# set up a list of arguments for math.floor\niter = [i for i in range(100)]\n\n# async_task iter them\nid=async_iter('math.floor',iter)\n\n# wait for the collated result for 1 second\nresult_list = result(id, wait=1000)\n```\n\n----------------------------------------\n\nTITLE: Starting Django Q2 Cluster using manage.py\nDESCRIPTION: Demonstrates how to start a Django Q2 cluster using the manage.py command. This command initializes the cluster and displays startup information.\nSOURCE: https://github.com/django-q2/django-q2/blob/master/docs/cluster.rst#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ python manage.py qcluster\n```\n\n----------------------------------------\n\nTITLE: Using AsyncTask Object with Groups in Django-Q\nDESCRIPTION: Demonstrates how to work with groups directly using the AsyncTask object. This example creates a task in the 'math' group with caching enabled, then waits until the group has 10 results before retrieving them.\nSOURCE: https://github.com/django-q2/django-q2/blob/master/docs/group.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom django_q.tasks import AsyncTask\n\n# add a task to the math group and run it cached\na = AsyncTask('math.floor', 2.5, group='math', cached=True)\n\n# wait until this tasks group has 10 results\nresult = a.result_group(count=10)\n```\n\n----------------------------------------\n\nTITLE: Advanced Task Scheduling with Options in Django Q2\nDESCRIPTION: Demonstrates advanced scheduling features including broker specification, time-based scheduling with repeats, and cron expressions.\nSOURCE: https://github.com/django-q2/django-q2/blob/master/docs/schedules.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# In case you want to use q_options\n# Specify the broker by using the property broker_name in q_options\nschedule('math.sqrt',\n         9,\n         hook='hooks.print_result',\n         q_options={'timeout': 30, 'broker_name': 'broker_1'},\n         schedule_type=Schedule.HOURLY)\n\n# Run a schedule every 5 minutes, starting at 6 today\n# for 2 hours\nfrom datetime import datetime\n\nschedule('math.hypot',\n         3, 4,\n         schedule_type=Schedule.MINUTES,\n         minutes=5,\n         repeats=24,\n         next_run=datetime.utcnow().replace(hour=18, minute=0))\n\n# Use a cron expression\nschedule('math.hypot',\n         3, 4,\n         schedule_type=Schedule.CRON,\n         cron = '0 22 * * 1-5')\n\n\n# Restrain a schedule to a specific cluster\nschedule('math.hypot',\n         3, 4,\n         schedule_type=Schedule.DAILY,\n         cluster='my_cluster')\n```\n\n----------------------------------------\n\nTITLE: Fetching and Filtering Group Results in Django-Q\nDESCRIPTION: Demonstrates how to fetch and filter task groups using various techniques. This example shows counting failures, working with success-only results, and comparing different methods to retrieve group results.\nSOURCE: https://github.com/django-q2/django-q2/blob/master/docs/group.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# fetch group example\nfrom django_q.tasks import fetch_group, count_group, result_group\n\n# count the number of failures\nfailure_count = count_group('modf', failures=True)\n\n# only use the successes\nresults = fetch_group('modf')\nif failure_count:\n    results = results.exclude(success=False)\nresults =  [task.result for task in successes]\n\n# this is the same as\nresults = fetch_group('modf', failures=False)\nresults =  [task.result for task in successes]\n\n# and the same as\nresults = result_group('modf') # filters failures by default\n```\n\n----------------------------------------\n\nTITLE: Configuring Django Q2 with Redis Connection URI\nDESCRIPTION: Shows how to configure Django Q2 with a Redis connection URI instead of individual connection parameters.\nSOURCE: https://github.com/django-q2/django-q2/blob/master/docs/configure.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nQ_CLUSTER = {\n    'redis': 'redis://h:asdfqwer1234asdf@ec2-111-1-1-1.compute-1.amazonaws.com:111'\n}\n```\n\n----------------------------------------\n\nTITLE: Using Chain Class for Sequential Task Execution in Python\nDESCRIPTION: Shows how to use the Chain class for a more convenient way of creating and executing task chains. Includes example of chain creation, task appending, and result retrieval.\nSOURCE: https://github.com/django-q2/django-q2/blob/master/docs/chain.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Chain async\nfrom django_q.tasks import Chain\n\n# create a chain that uses the cache backend\nchain = Chain(cached=True)\n\n# add some tasks\nchain.append('math.copysign', 1, -1)\nchain.append('math.floor', 1)\n\n# run it\nchain.run()\n\nprint(chain.result())\n```\n\n----------------------------------------\n\nTITLE: Real-time Haystack Indexing with Django Q2\nDESCRIPTION: Shows how to use Django Q2 for real-time updating of Haystack search indexes using model signals, demonstrating integration with a third-party search engine.\nSOURCE: https://github.com/django-q2/django-q2/blob/master/docs/examples.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Real time Haystack indexing\nfrom .models import Document\nfrom django.db.models.signals import post_save\nfrom django.dispatch import receiver\nfrom django_q.tasks import async_task\n\n# hook up the post save handler\n@receiver(post_save, sender=Document)\ndef document_changed(sender, instance, **kwargs):\n    async_task('tasks.index_object', sender, instance, save=False)\n    # turn off result saving to not flood your database\n```\n\nLANGUAGE: python\nCODE:\n```\n# tasks.py\nfrom haystack import connection_router, connections\n\ndef index_object(sender, instance):\n    # get possible backends\n    backends = connection_router.for_write(instance=instance)\n\n    for backend in backends:\n        # get the index for this model\n        index = connections[backend].get_unified_index()\\\n            .get_index(sender)\n        # update it\n        index.update_object(instance, using=backend)\n```\n\n----------------------------------------\n\nTITLE: Grouping Tasks and Retrieving Results in Django-Q\nDESCRIPTION: Example of creating a group of tasks and retrieving their results. This code creates four tasks that call math.modf with different values, groups them under 'modf', and then waits until all four tasks have completed before retrieving their results.\nSOURCE: https://github.com/django-q2/django-q2/blob/master/docs/group.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# result group example\nfrom django_q.tasks import async_task, result_group\n\nfor i in range(4):\n    async_task('math.modf', i, group='modf')\n\n# wait until the group has 4 results\nresult = result_group('modf', count=4)\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Installing Django Q2 Package Configuration\nDESCRIPTION: Example of adding django_q to INSTALLED_APPS in Django settings.py\nSOURCE: https://github.com/django-q2/django-q2/blob/master/README.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nINSTALLED_APPS = (\n    # other apps\n    'django_q',\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Django Q2 to INSTALLED_APPS\nDESCRIPTION: Configuration snippet to add Django Q2 to the INSTALLED_APPS setting in Django's settings.py file.\nSOURCE: https://github.com/django-q2/django-q2/blob/master/docs/install.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nINSTALLED_APPS = (\n    # other apps\n    'django_q',\n)\n```\n\n----------------------------------------\n\nTITLE: Using Iter class for convenient iterable task management in Django Q2\nDESCRIPTION: Shows how to use the Iter class which provides a more convenient interface for queuing multiple tasks. The example creates three tasks for math.copysign with different arguments and collects their results.\nSOURCE: https://github.com/django-q2/django-q2/blob/master/docs/iterable.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom django_q.tasks import Iter\n\ni = Iter('math.copysign')\n\n# add some arguments\ni.append(1, -1)\ni.append(2, -1)\ni.append(3, -1)\n\n# run it\ni.run()\n\n# get the results\nprint(i.result())\n```\n\n----------------------------------------\n\nTITLE: Starting Django Q2 cluster\nDESCRIPTION: Command to run the Django Q2 cluster for handling asynchronous tasks.\nSOURCE: https://github.com/django-q2/django-q2/blob/master/docs/install.rst#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ python manage.py qcluster\n```\n\n----------------------------------------\n\nTITLE: Implementing Cached Operations in Django Q2\nDESCRIPTION: Demonstrates how to use cached operations in Django Q2 for both individual tasks and group actions. It shows setting cache timeouts and retrieving cached results.\nSOURCE: https://github.com/django-q2/django-q2/blob/master/docs/tasks.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# simple cached example\nfrom django_q.tasks import async_task, result\n\n# cache the result for 10 seconds\nid = async_task('math.floor', 100, cached=10)\n\n# wait max 50ms for the result to appear in the cache\nresult(id, wait=50, cached=True)\n\n# or fetch the task object\ntask = fetch(id, cached=True)\n\n# and then save it to the database\ntask.save()\n```\n\nLANGUAGE: python\nCODE:\n```\n# cached group example\nfrom django_q.tasks import async_task, result_group\nfrom django_q.brokers import get_broker\n\n# set up a broker instance for better performance\nbroker = get_broker()\n\n# Async a hundred functions under a group label\nfor i in range(100):\n    async_task('math.frexp',\n            i,\n            group='frexp',\n            cached=True,\n            broker=broker)\n\n# wait max 50ms for one hundred results to return\nresult_group('frexp', wait=50, count=100, cached=True)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating the Retry and Timeout Interaction in Django Q2\nDESCRIPTION: Example code showing how retry settings interact with task execution, specifically demonstrating potential issues with long-running tasks when retry time is shorter than task execution time.\nSOURCE: https://github.com/django-q2/django-q2/blob/master/docs/configure.rst#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# settings.py\nQ_CLUSTER = {\n   'retry': 5,\n   'workers': 4,\n   'orm': 'default',\n}\n\n# example.py\n\nfrom django_q.tasks import async_task\n\nasync_task('time.sleep', 22)\n```\n\n----------------------------------------\n\nTITLE: Synchronous Testing of Tasks in Django Q2\nDESCRIPTION: Illustrates how to perform synchronous testing of tasks in Django Q2 by setting the sync parameter. It shows task creation, immediate execution, and error handling.\nSOURCE: https://github.com/django-q2/django-q2/blob/master/docs/tasks.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom django_q.tasks import async_task, fetch\n\n# create a synchronous task\ntask_id = async_task('my.buggy.code', sync=True)\n\n# the task will then be available immediately\ntask = fetch(task_id)\n\n# and can be examined\nif not task.success:\n    print('An error occurred: {}'.format(task.result))\n```\n\n----------------------------------------\n\nTITLE: Implementing Connection Pooling in Django Q2\nDESCRIPTION: Shows how to implement connection pooling in Django Q2 to optimize broker connections when making multiple calls to async_task(). It demonstrates setting up a reusable broker instance.\nSOURCE: https://github.com/django-q2/django-q2/blob/master/docs/tasks.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# broker connection economy example\nfrom django_q.tasks import async_task\nfrom django_q.brokers import get_broker\n\nbroker = get_broker()\nfor i in range(50):\n    async_task('math.modf', 2.5, broker=broker)\n```\n\n----------------------------------------\n\nTITLE: HTTP Health Check Server for Django-Q2 Clusters\nDESCRIPTION: A complete implementation of an HTTP server for monitoring Django-Q2 cluster health. The server checks if all clusters are in IDLE or WORKING status and returns a 200 status code if all clusters are healthy, or 500 if any are unhealthy. Requires Django-Q2 with cache enabled and needs to be run from a Django project's root directory.\nSOURCE: https://github.com/django-q2/django-q2/blob/master/docs/examples.rst#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom http.server import BaseHTTPRequestHandler, HTTPServer\nfrom mtt_app.settings.base import EMAIL_USE_TLS\n\nimport os\nimport django\n\n#  Set the correct path to you settings module\nos.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"my.settings.path\")\n\n# All django stuff has to come after the setup:\ndjango.setup()\n\nfrom django_q.status import Stat\nfrom django_q.conf import Conf\n\n# Set host and port settings\nhostName = \"localhost\"\nserverPort = 8080\n\n\nclass HealthCheckServer(BaseHTTPRequestHandler):\n    def do_GET(self):\n        \n        # Count the clusters and their status\n        happy_clusters = 0\n        total_clusters = 0\n\n        for stat in Stat.get_all():\n            total_clusters += 1\n            if stat.status in [Conf.IDLE, Conf.WORKING]:\n                happy_clusters += 1\n\n        # Return 200 response if there is at least 1 cluster running,\n        # and make sure all running clusters are happy\n        if total_clusters and happy_clusters == total_clusters:\n            response_code = 200\n        else:\n            response_code = 500\n\n        self.send_response(response_code)\n        self.send_header(\"Content-type\", \"text/html\")\n        self.end_headers()\n\n        self.wfile.write(\n            bytes(\"<html><head><title>Django-Q Heath Check</title></head>\", \"utf-8\")\n        )\n        self.wfile.write(\n            bytes(f\"<p>Health check returned {response_code} response</p>\", \"utf-8\")\n        )\n        self.wfile.write(\n            bytes(\n                f\"<p>{happy_clusters} of {total_clusters} cluster(s) are happy</p></html>\",\n                \"utf-8\",\n            )\n        )\n\n\nif __name__ == \"__main__\":\n    webServer = HTTPServer((hostName, serverPort), HealthCheckServer)\n    print(\"Server started at http://%s:%s\" % (hostName, serverPort))\n\n    try:\n        webServer.serve_forever()\n    except KeyboardInterrupt:\n        pass\n\n    webServer.server_close()\n    print(\"Server stopped.\")\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Broker for Django Q2\nDESCRIPTION: Example of creating a custom broker by extending the Broker base class. This shows how to implement a minimal custom broker with just the info method overridden.\nSOURCE: https://github.com/django-q2/django-q2/blob/master/docs/brokers.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# example Custom broker.py\nfrom django_q.brokers import Broker\n\nclass CustomBroker(Broker):\n    def info(self):\n        return 'My Custom Broker'\n```\n\n----------------------------------------\n\nTITLE: Installing Django Q2 with pip\nDESCRIPTION: Command to install the latest version of Django Q2 using pip package manager.\nSOURCE: https://github.com/django-q2/django-q2/blob/master/docs/install.rst#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ pip install django-q2\n```\n\n----------------------------------------\n\nTITLE: Checking Cluster Status Programmatically\nDESCRIPTION: Python code demonstrating how to check cluster status using the Stat class. Shows both checking all clusters and checking a specific cluster by ID.\nSOURCE: https://github.com/django-q2/django-q2/blob/master/docs/monitor.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom django_q.status import Stat\n\nfor stat in Stat.get_all():\n    print(stat.cluster_id, stat.status)\n\n# or if you know the cluster id\ncluster_id = 1234\nstat = Stat.get(cluster_id)\nprint(stat.status, stat.workers)\n```\n\n----------------------------------------\n\nTITLE: Starting Django Q2 Monitor\nDESCRIPTION: Command to start the Django Q2 monitor interface using manage.py\nSOURCE: https://github.com/django-q2/django-q2/blob/master/docs/monitor.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ python manage.py qmonitor\n```\n\n----------------------------------------\n\nTITLE: Migrating from Django-Q to Django-Q2\nDESCRIPTION: Commands to uninstall Django-Q, install Django-Q2, and run migrations for the upgrade process.\nSOURCE: https://github.com/django-q2/django-q2/blob/master/docs/install.rst#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ pip uninstall django-q # you might have to uninstall django-q add-ons as well\n$ pip install django-q2\n\n$ python manage.py migrate\n```\n\n----------------------------------------\n\nTITLE: Configuring Django Q2 with Django-Redis Cache Connection\nDESCRIPTION: Example showing how to configure Django Q2 to use an existing django-redis cache connection instead of direct Redis settings.\nSOURCE: https://github.com/django-q2/django-q2/blob/master/docs/configure.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# example django-redis connection\nQ_CLUSTER = {\n    'name': 'DJRedis',\n    'workers': 4,\n    'timeout': 90,\n    'django_redis': 'default'\n}\n```\n\n----------------------------------------\n\nTITLE: Running Django migrations for Django Q2\nDESCRIPTION: Command to run Django migrations to create necessary database tables for Django Q2.\nSOURCE: https://github.com/django-q2/django-q2/blob/master/docs/install.rst#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ python manage.py migrate\n```\n\n----------------------------------------\n\nTITLE: Creating Management Command Wrappers for Scheduling\nDESCRIPTION: Shows how to create wrapper functions for Django management commands to use with scheduling.\nSOURCE: https://github.com/django-q2/django-q2/blob/master/docs/schedules.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# tasks.py\nfrom django.core import management\n\n# wrapping `manage.py clearsessions`\ndef clear_sessions_command():\n    return management.call_command('clearsessions')\n\n# now you can schedule it to run every hour\nfrom django_q.tasks import schedule\n\nschedule('tasks.clear_sessions_command', schedule_type='H')\n```\n\n----------------------------------------\n\nTITLE: Accessing Group Functions from a Task Result in Django-Q\nDESCRIPTION: Shows how to access group-related functions directly from a task result instance. This example fetches a task by its ID, checks if its group has more than 100 tasks, prints the group results, and deletes the group.\nSOURCE: https://github.com/django-q2/django-q2/blob/master/docs/group.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom django_q.tasks import fetch\n\ntask = fetch('winter-speaker-alpha-ceiling')\nif  task.group_count() > 100:\n    print(task.group_result())\n    task.group_delete()\n    print('Deleted group {}'.format(task.group))\n```\n\n----------------------------------------\n\nTITLE: Configuring MongoDB Broker in Django Q2\nDESCRIPTION: Example configuration for using MongoDB as a message broker in Django Q2. Includes host and port settings, with additional parameters supported through pymongo's MongoClient.\nSOURCE: https://github.com/django-q2/django-q2/blob/master/docs/configure.rst#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# example MongoDB broker connection\n\nQ_CLUSTER = {\n    'name': 'MongoDB',\n    'workers': 8,\n    'timeout': 60,\n    'retry': 70,\n    'queue_limit': 100,\n    'mongo': {\n        'host': '127.0.0.1',\n        'port': 27017\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Group Calculations with Django Q2\nDESCRIPTION: Shows how to perform group calculations using Django Q2, demonstrating a Parzen-window estimation for probability density functions. It includes two implementations: one using result_group and another using async_iter.\nSOURCE: https://github.com/django-q2/django-q2/blob/master/docs/examples.rst#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# Group example with Parzen-window estimation\nimport numpy\n\nfrom django_q.tasks import async_task, result_group, delete_group\n\n# the estimation function\ndef parzen_estimation(x_samples, point_x, h):\n    k_n = 0\n    for row in x_samples:\n        x_i = (point_x - row[:, numpy.newaxis]) / h\n        for row in x_i:\n            if numpy.abs(row) > (1 / 2):\n                break\n        else:\n            k_n += 1\n    return h, (k_n / len(x_samples)) / (h ** point_x.shape[1])\n\n# create 100 calculations and return the collated result\ndef parzen_async():\n    # clear the previous results\n    delete_group('parzen', cached=True)\n    mu_vec = numpy.array([0, 0])\n    cov_mat = numpy.array([[1, 0], [0, 1]])\n    sample = numpy.random. \\\n        multivariate_normal(mu_vec, cov_mat, 10000)\n    widths = numpy.linspace(1.0, 1.2, 100)\n    x = numpy.array([[0], [0]])\n    # async_task them with a group label to the cache backend\n    for w in widths:\n        async_task(parzen_estimation, sample, x, w,\n                group='parzen', cached=True)\n    # return after 100 results\n    return result_group('parzen', count=100, cached=True)\n```\n\nLANGUAGE: python\nCODE:\n```\n# create 100 calculations and return the collated result\ndef parzen_async():\n    mu_vec = numpy.array([0, 0])\n```\n\n----------------------------------------\n\nTITLE: Viewing Django Q2 Cluster Info\nDESCRIPTION: Command to view a summary of cluster statistics\nSOURCE: https://github.com/django-q2/django-q2/blob/master/docs/monitor.rst#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ python manage.py qinfo\n```\n\n----------------------------------------\n\nTITLE: Starting Alternate Django Q2 Cluster for Multiple Queues\nDESCRIPTION: Shows how to start an alternate Django Q2 cluster for handling multiple queues. The example demonstrates starting a cluster for a 'long' queue on both Linux and Windows systems.\nSOURCE: https://github.com/django-q2/django-q2/blob/master/docs/cluster.rst#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# On Linux\n$ Q_CLUSTER_NAME=long python manage.py qcluster\n\n# On Windows\n$ python manage.py qcluster --name long\n```\n\n----------------------------------------\n\nTITLE: Executing Shell Commands with Django Q2\nDESCRIPTION: Demonstrates how to execute shell commands asynchronously using Django Q2, including examples for both Python 2 and Python 3 subprocess module usage.\nSOURCE: https://github.com/django-q2/django-q2/blob/master/docs/examples.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom django_q.tasks import async_task, result\n\n# make a backup copy of setup.py\nasync_task('subprocess.call', ['cp', 'setup.py', 'setup.py.bak'])\n\n# call ls -l and dump the output\ntask_id=async_task('subprocess.check_output', ['ls', '-l'])\n\n# get the result\ndir_list = result(task_id)\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom django_q.tasks import async_task, result\n\n# make a backup copy of setup.py\ntid = async_task('subprocess.run', ['cp', 'setup.py', 'setup.py.bak'])\n\n# get the result\nr=result(tid, 500)\n# we can now look at the original arguments\n>>> r.args\n['cp', 'setup.py', 'setup.py.bak']\n# and the returncode\n>>> r.returncode\n0\n\n# to capture the output we'll need a pipe\nfrom subprocess import PIPE\n\n# call ls -l and pipe the output\ntid = async_task('subprocess.run', ['ls', '-l'], stdout=PIPE)\n# get the result\nres = result(tid, 500)\n# print the output\nprint(res.stdout)\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom django_q.tasks import async_task, schedule\n\nasync_task('django.core.management.call_command','clearsessions')\n\n# or clear those sessions every hour\n\nschedule('django.core.management.call_command',\n     'clearsessions',\n     schedule_type='H')\n```\n\n----------------------------------------\n\nTITLE: Implementing Error Reporting Plugin for Django Q2\nDESCRIPTION: Guidelines for implementing a custom error reporting plugin for Django Q2. The plugin must expose a class with a 'report' method that handles error information. Configuration is done through the Q_CLUSTER dictionary in settings.py.\nSOURCE: https://github.com/django-q2/django-q2/blob/master/docs/errors.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass CustomErrorReporter:\n    def __init__(self, **kwargs):\n        # Initialize with settings from Q_CLUSTER\n        pass\n\n    def report(self, error_information):\n        # Implement error reporting logic\n        pass\n```\n\n----------------------------------------\n\nTITLE: Configuring Error Reporting in Django Q2 with Rollbar\nDESCRIPTION: Example of setting up error reporting in Django Q2 using Rollbar. Requires installation of Django Q2 with the appropriate extras for error reporting.\nSOURCE: https://github.com/django-q2/django-q2/blob/master/docs/configure.rst#2025-04-16_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n# error_reporter config--rollbar example\nQ_CLUSTER = {\n    'error_reporter': {\n        'rollbar': {\n            'access_token': '32we33a92a5224jiww8982',\n            'environment': 'Django-Q2'\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Circus Configuration for Django Q2 Cluster\nDESCRIPTION: Example configuration file (circus.ini) for running a Django Q2 cluster using the Circus process manager. It sets up a single watcher for the cluster process.\nSOURCE: https://github.com/django-q2/django-q2/blob/master/docs/cluster.rst#2025-04-16_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n[circus]\ncheck_delay = 5\nendpoint = tcp://127.0.0.1:5555\npubsub_endpoint = tcp://127.0.0.1:5556\nstats_endpoint = tcp://127.0.0.1:5557\n\n[watcher:django_q]\ncmd = python manage.py qcluster\nnumprocesses = 1\ncopy_env = True\n```\n\n----------------------------------------\n\nTITLE: Defining Task Class for Django Q2\nDESCRIPTION: Defines the Task class, which is a database model representing an executed task. It includes attributes for task identification, execution details, and methods for managing task groups and results.\nSOURCE: https://github.com/django-q2/django-q2/blob/master/docs/tasks.rst#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass Task:\n    id = uuid.uuid4()\n    name = 'humanized_version_of_id'\n    func = 'executed_function_or_reference'\n    hook = 'function_to_call_after_execution'\n    args = 'positional_arguments'\n    kwargs = 'keyword_arguments'\n    result = 'result_object_or_error'\n    started = 'task_creation_timestamp'\n    stopped = 'task_completion_timestamp'\n    success = 'execution_status'\n\n    def time_taken(self):\n        # Calculates time difference between started and stopped\n\n    def group_result(self, failures=False):\n        # Returns list of results from task's group\n\n    def group_count(self, failures=False):\n        # Returns count of task results in group\n\n    def group_delete(self, tasks=False):\n        # Resets group label and optionally deletes tasks\n\n    @classmethod\n    def get_result(cls, task_id):\n        # Gets result by task uuid or name\n\n    @classmethod\n    def get_result_group(cls, group_id, failures=False):\n        # Returns list of results from a task group\n\n    @classmethod\n    def get_task(cls, task_id):\n        # Fetches a single task object by uuid or name\n\n    @classmethod\n    def get_task_group(cls, group_id, failures=True):\n        # Gets a queryset of tasks with this group id\n\n    @classmethod\n    def get_group_count(cls, group_id, failures=False):\n        # Returns count of task results in a group\n\n    @classmethod\n    def delete_group(cls, group_id, objects=False):\n        # Deletes a group label and optionally tasks\n```\n\n----------------------------------------\n\nTITLE: Supervisor Configuration for Django Q2 Cluster\nDESCRIPTION: Example configuration file (supervisor.conf) for running a Django Q2 cluster using the Supervisor process manager. It ensures proper stopping of the cluster process.\nSOURCE: https://github.com/django-q2/django-q2/blob/master/docs/cluster.rst#2025-04-16_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n[program:django-q]\ncommand = python manage.py qcluster\nstopasgroup = true\n```\n\n----------------------------------------\n\nTITLE: Generating Reports Asynchronously with Django Q2\nDESCRIPTION: Demonstrates how to generate reports asynchronously using Django Q2, including error handling and sending the report via email using a hook function.\nSOURCE: https://github.com/django-q2/django-q2/blob/master/docs/examples.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Report generation with hook example\nfrom django_q.tasks import async_task\n\n# views.py\n# user requests a report.\ndef create_report(request):\n    async_task('tasks.create_html_report',\n            request.user,\n            hook='tasks.email_report')\n```\n\nLANGUAGE: python\nCODE:\n```\n# tasks.py\nfrom django_q.tasks import async_task\n\n# report generator\ndef create_html_report(user):\n    html_report = 'We had a great quarter!'\n    return html_report\n\n# report mailer\ndef email_report(task):\n    if task.success:\n        # Email the report\n        async_task('django.core.mail.send_mail',\n                'The report you requested',\n                task.result,\n                'from@example.com',\n                task.args[0].email)\n    else:\n        # Tell the admins something went wrong\n        async_task('django.core.mail.mail_admins',\n                'Report generation failed',\n                task.result)\n```\n\n----------------------------------------\n\nTITLE: Installing Django Q2 add-ons\nDESCRIPTION: Commands to install additional add-ons for Django Q2, including Rollbar and Sentry error reporters.\nSOURCE: https://github.com/django-q2/django-q2/blob/master/docs/install.rst#2025-04-16_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ pip install django-q2[rollbar]\n$ pip install django-q2[sentry]\n```\n\n----------------------------------------\n\nTITLE: Configuring Django Q2 with Django ORM as Broker\nDESCRIPTION: Example showing how to configure Django Q2 to use Django's database backend as a message broker by specifying the database connection.\nSOURCE: https://github.com/django-q2/django-q2/blob/master/docs/configure.rst#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# example ORM broker connection\n\nQ_CLUSTER = {\n    'name': 'DjangORM',\n\n```\n\n----------------------------------------\n\nTITLE: Output of Grouped Task Results in Django-Q\nDESCRIPTION: Shows the expected output from the previous example. The result is a list of tuples where each tuple contains the fractional and integer parts of the input numbers.\nSOURCE: https://github.com/django-q2/django-q2/blob/master/docs/group.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n[(0.0, 0.0), (0.0, 1.0), (0.0, 2.0), (0.0, 3.0)]\n```\n\n----------------------------------------\n\nTITLE: Implementing AsyncTask Class for Django Q2\nDESCRIPTION: Defines the AsyncTask class, which wraps the async_task function. It provides methods for running tasks, fetching results, and managing task groups asynchronously.\nSOURCE: https://github.com/django-q2/django-q2/blob/master/docs/tasks.rst#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nclass AsyncTask:\n    def __init__(self, func, *args, **kwargs):\n        self.id = None\n        self.started = False\n        self.func = func\n        self.args = args\n        self.kwargs = kwargs\n        self.broker = kwargs.get('broker')\n        self.sync = kwargs.get('sync', False)\n        self.save = kwargs.get('save')\n        self.hook = kwargs.get('hook')\n        self.group = kwargs.get('group')\n        self.cached = kwargs.get('cached', False)\n\n    def run(self):\n        # Send task to worker cluster for execution\n\n    def result(self, wait=0):\n        # Return task result, optionally waiting\n\n    def fetch(self, wait=0):\n        # Return full Task result instance\n\n    def result_group(self, failures=False, wait=0, count=None):\n        # Return list of results from task's group\n\n    def fetch_group(self, failures=True, wait=0, count=None):\n        # Return list of task results from task's group\n```\n\n----------------------------------------\n\nTITLE: Customizing Django Q2 Admin Interface in Python\nDESCRIPTION: Example showing how to customize the Django Q2 admin interface by creating a custom ModelAdmin class. This specific example demonstrates adding 'attempt_count' to the list display of failed tasks.\nSOURCE: https://github.com/django-q2/django-q2/blob/master/docs/admin.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom django_q import models as q_models\nfrom django_q import admin as q_admin\n\nadmin.site.unregister([q_models.Failure])\n@admin.register(q_models.Failure)\nclass ChildClassAdmin(q_admin.FailAdmin):\n    list_display = (\n        'name',\n        'func',\n        'result',\n        'started',\n        # add attempt_count to list_display\n        'attempt_count'\n    )\n```\n\n----------------------------------------\n\nTITLE: Configuring a Custom Broker in Django Q2 Settings\nDESCRIPTION: Example configuration for using a custom broker class with Django Q2. The broker_class setting points to the custom implementation path.\nSOURCE: https://github.com/django-q2/django-q2/blob/master/docs/brokers.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# example Custom broker class connection\n\nQ_CLUSTER = {\n    'name': 'Custom',\n    'workers': 8,\n    'timeout': 60,\n    'broker_class: 'myapp.broker.CustomBroker'\n}\n```\n\n----------------------------------------\n\nTITLE: Scheduling Django Management Commands\nDESCRIPTION: Examples of scheduling Django management commands using both direct command calls and wrapper functions.\nSOURCE: https://github.com/django-q2/django-q2/blob/master/docs/schedules.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom django_q.tasks import schedule\n\n# run `manage.py clearsession` every hour\nschedule('django.core.management.call_command',\n         'clearsessions',\n         schedule_type='H')\n```\n\n----------------------------------------\n\nTITLE: Async Processing of Parzen Estimation Tasks with Django-Q2\nDESCRIPTION: Demonstrates how to use Django-Q2's async_iter function to process multiple Parzen estimation calculations asynchronously. The code generates a multivariate normal sample, creates a list of arguments with different width parameters, and then processes them in parallel using async_iter. Results are cached and can be retrieved with a timeout.\nSOURCE: https://github.com/django-q2/django-q2/blob/master/docs/examples.rst#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ncov_mat = numpy.array([[1, 0], [0, 1]])\nsample = numpy.random. \\\n    multivariate_normal(mu_vec, cov_mat, 10000)\nwidths = numpy.linspace(1.0, 1.2, 100)\nx = numpy.array([[0], [0]])\n# async_task them with async_task iterable\nargs = [(sample, x, w) for w in widths]\nresult_id = async_iter(parzen_estimation, args, cached=True)\n# return the cached result or timeout after 10 seconds\nreturn result(result_id, wait=10000, cached=True)\n```\n\n----------------------------------------\n\nTITLE: Configuring Django Q2 with Amazon SQS as Broker\nDESCRIPTION: Example configuration for using Amazon SQS as the message broker for Django Q2, including AWS region and credential settings.\nSOURCE: https://github.com/django-q2/django-q2/blob/master/docs/configure.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# example SQS broker connection\n\nQ_CLUSTER = {\n    'name': 'SQSExample',\n    'workers': 4,\n    'timeout': 60,\n    'retry': 90,\n    'queue_limit': 100,\n    'bulk': 5,\n    'sqs': {\n        'aws_region': 'us-east-1',  # optional\n        'aws_access_key_id': 'ac-Idr.....YwflZBaaxI',  # optional\n        'aws_secret_access_key': '500f7b....b0f302e9'  # optional\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Django Q2 with IronMQ as Broker\nDESCRIPTION: Configuration example for using IronMQ as the message broker for Django Q2, including host, token, and project ID settings.\nSOURCE: https://github.com/django-q2/django-q2/blob/master/docs/configure.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# example IronMQ connection\n\nQ_CLUSTER = {\n    'name': 'IronBroker',\n    'workers': 8,\n    'timeout': 30,\n    'retry': 60,\n    'queue_limit': 50,\n    'bulk': 10,\n    'iron_mq': {\n        'host': 'mq-aws-us-east-1.iron.io',\n        'token': 'Et1En7.....0LuW39Q',\n        'project_id': '500f7b....b0f302e9'\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Chain Execution Result Output in Python\nDESCRIPTION: Shows the expected output format from executing a chain of tasks, displaying the results as a list.\nSOURCE: https://github.com/django-q2/django-q2/blob/master/docs/chain.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n[-1.0, 1]\n```\n\n----------------------------------------\n\nTITLE: Setting Up Custom Broker Class in Django Q2\nDESCRIPTION: Configuration example for using a custom broker class in Django Q2. The custom broker should inherit from the base Broker class or one of its children.\nSOURCE: https://github.com/django-q2/django-q2/blob/master/docs/configure.rst#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# example Custom broker class connection\n\nQ_CLUSTER = {\n    'name': 'Custom',\n    'workers': 8,\n    'timeout': 60,\n    'broker_class': 'myapp.broker.CustomBroker'\n}\n```\n\n----------------------------------------\n\nTITLE: Procfile Entry for Django Q2 Cluster\nDESCRIPTION: Provides an example Procfile entry for starting a Django Q2 cluster, which is useful for platforms like Heroku or when using Honcho.\nSOURCE: https://github.com/django-q2/django-q2/blob/master/docs/cluster.rst#2025-04-16_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nworker: python manage.py qcluster\n```\n\n----------------------------------------\n\nTITLE: Defining Success and Failure Proxy Models for Django Q2 Tasks\nDESCRIPTION: Defines Success and Failure classes as proxy models of Task, filtered by the success attribute.\nSOURCE: https://github.com/django-q2/django-q2/blob/master/docs/tasks.rst#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclass Success(Task):\n    # Proxy model of Task with success=True\n\nclass Failure(Task):\n    # Proxy model of Task with success=False\n```\n\n----------------------------------------\n\nTITLE: Viewing Django Q2 Configuration\nDESCRIPTION: Command to display the current configuration settings\nSOURCE: https://github.com/django-q2/django-q2/blob/master/docs/monitor.rst#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ python manage.py qinfo --config\n```\n\n----------------------------------------\n\nTITLE: Example output from the Iter class in Django Q2\nDESCRIPTION: Shows the expected output from the previous Iter example, a list containing the results of calling math.copysign on each set of arguments.\nSOURCE: https://github.com/django-q2/django-q2/blob/master/docs/iterable.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n[-1.0, -2.0, -3.0]\n```\n\n----------------------------------------\n\nTITLE: Installing optional dependencies for Django Q2\nDESCRIPTION: Commands to install various optional dependencies for enhanced functionality in Django Q2.\nSOURCE: https://github.com/django-q2/django-q2/blob/master/docs/install.rst#2025-04-16_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ pip install blessed\n$ pip install redis\n$ pip install psutil\n$ pip install setproctitle\n$ pip install hiredis\n$ pip install boto3\n$ pip install iron-mq\n$ pip install pymongo\n$ pip install rollbar\n$ pip install croniter\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Package Dependencies with Versions and Hashes\nDESCRIPTION: This code snippet defines the required Python packages for the Django Q2 project. It includes package names, version constraints, Python version compatibility, and SHA256 hash values for security verification. The format is suitable for use with pip, the Python package installer.\nSOURCE: https://github.com/django-q2/django-q2/blob/master/requirements.txt#2025-04-16_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\nasgiref==3.8.1 ; python_version >= \"3.8\" and python_version < \"4\" \\\n    --hash=sha256:3e1e3ecc849832fe52ccf2cb6686b7a55f82bb1d6aee72a58826471390335e47 \\\n    --hash=sha256:c343bd80a0bec947a9860adb4c432ffa7db769836c64238fc34bdc3fec84d590\nbackports-zoneinfo==0.2.1 ; python_version >= \"3.8\" and python_version < \"3.9\" \\\n    --hash=sha256:17746bd546106fa389c51dbea67c8b7c8f0d14b5526a579ca6ccf5ed72c526cf \\\n    --hash=sha256:1b13e654a55cd45672cb54ed12148cd33628f672548f373963b0bff67b217328 \\\n    --hash=sha256:1c5742112073a563c81f786e77514969acb58649bcdf6cdf0b4ed31a348d4546 \\\n    --hash=sha256:4a0f800587060bf8880f954dbef70de6c11bbe59c673c3d818921f042f9954a6 \\\n    --hash=sha256:5c144945a7752ca544b4b78c8c41544cdfaf9786f25fe5ffb10e838e19a27570 \\\n    --hash=sha256:7b0a64cda4145548fed9efc10322770f929b944ce5cee6c0dfe0c87bf4c0c8c9 \\\n    --hash=sha256:8439c030a11780786a2002261569bdf362264f605dfa4d65090b64b05c9f79a7 \\\n    --hash=sha256:8961c0f32cd0336fb8e8ead11a1f8cd99ec07145ec2931122faaac1c8f7fd987 \\\n    --hash=sha256:89a48c0d158a3cc3f654da4c2de1ceba85263fafb861b98b59040a5086259722 \\\n    --hash=sha256:a76b38c52400b762e48131494ba26be363491ac4f9a04c1b7e92483d169f6582 \\\n    --hash=sha256:da6013fd84a690242c310d77ddb8441a559e9cb3d3d59ebac9aca1a57b2e18bc \\\n    --hash=sha256:e55b384612d93be96506932a786bbcde5a2db7a9e6a4bb4bffe8b733f5b9036b \\\n    --hash=sha256:e81b76cace8eda1fca50e345242ba977f9be6ae3945af8d46326d776b4cf78d1 \\\n    --hash=sha256:e8236383a20872c0cdf5a62b554b27538db7fa1bbec52429d8d106effbaeca08 \\\n    --hash=sha256:f04e857b59d9d1ccc39ce2da1021d196e47234873820cbeaad210724b1ee28ac \\\n    --hash=sha256:fadbfe37f74051d024037f223b8e001611eac868b5c5b06144ef4d8b799862f2\ndjango-picklefield==3.2 ; python_version >= \"3.8\" and python_version < \"4\" \\\n    --hash=sha256:aa463f5d79d497dbe789f14b45180f00a51d0d670067d0729f352a3941cdfa4d \\\n    --hash=sha256:e9a73539d110f69825d9320db18bcb82e5189ff48dbed41821c026a20497764c\ndjango==4.2.11 ; python_version >= \"3.8\" and python_version < \"4\" \\\n    --hash=sha256:6e6ff3db2d8dd0c986b4eec8554c8e4f919b5c1ff62a5b4390c17aff2ed6e5c4 \\\n    --hash=sha256:ddc24a0a8280a0430baa37aff11f28574720af05888c62b7cfe71d219f4599d3\nimportlib-metadata==7.1.0 ; python_version >= \"3.8\" and python_version < \"3.10\" \\\n    --hash=sha256:30962b96c0c223483ed6cc7280e7f0199feb01a0e40cfae4d4450fc6fab1f570 \\\n    --hash=sha256:b78938b926ee8d5f020fc4772d487045805a55ddbad2ecf21c6d60938dc7fcd2\nsqlparse==0.5.0 ; python_version >= \"3.8\" and python_version < \"4\" \\\n    --hash=sha256:714d0a4932c059d16189f58ef5411ec2287a4360f17cdd0edd2d09d4c5087c93 \\\n    --hash=sha256:c204494cd97479d0e39f28c93d46c0b2d5959c7b9ab904762ea6c7af211c8663\ntyping-extensions==4.11.0 ; python_version >= \"3.8\" and python_version < \"3.11\" \\\n    --hash=sha256:83f085bd5ca59c80295fc2a82ab5dac679cbe02b9f33f7d83af68e241bea51b0 \\\n    --hash=sha256:c1f94d72897edaf4ce775bb7558d5b79d8126906a14ea5ed1635921406c0387a\ntzdata==2024.1 ; python_version >= \"3.8\" and python_version < \"4\" and sys_platform == \"win32\" \\\n    --hash=sha256:2674120f8d891909751c38abcdfd386ac0a5a1127954fbc332af6b5ceae07efd \\\n    --hash=sha256:9068bc196136463f5245e51efda838afa15aaeca9903f49050dfa2679db4d252\nzipp==3.18.1 ; python_version >= \"3.8\" and python_version < \"3.10\" \\\n    --hash=sha256:206f5a15f2af3dbaee80769fb7dc6f249695e940acca08dfb2a4769fe61e538b \\\n    --hash=sha256:2884ed22e7d8961de1c9a05142eb69a247f120291bc0206a00a7642f09b5b715\n```\n\n----------------------------------------\n\nTITLE: Specifying Sphinx Read the Docs Theme Version for Django-Q2 Documentation\nDESCRIPTION: This line specifies the exact version of the Sphinx Read the Docs theme required for the Django-Q2 project documentation. It ensures consistent rendering of the documentation across different environments.\nSOURCE: https://github.com/django-q2/django-q2/blob/master/docs/requirements.txt#2025-04-16_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\nsphinx-rtd-theme==1.0.0\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents in reStructuredText for Django Q2 Documentation\nDESCRIPTION: This snippet defines the table of contents for the Django Q2 documentation using reStructuredText syntax. It specifies the structure and hierarchy of the documentation, including sections for installation, configuration, tasks, and various features of Django Q2.\nSOURCE: https://github.com/django-q2/django-q2/blob/master/docs/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n   :maxdepth: 2\n\n    Installation <install>\n    Configuration <configure>\n    Brokers <brokers>\n    Tasks <tasks>\n    Groups <group>\n    Iterable <iterable>\n    Chains <chain>\n    Schedules <schedules>\n    Cluster <cluster>\n    Monitor <monitor>\n    Admin <admin>\n    Errors <errors>\n    Signals <signals>\n    Architecture <architecture>\n    Examples <examples>\n```\n\n----------------------------------------\n\nTITLE: Scheduling Tasks in Django Q2\nDESCRIPTION: Examples of creating scheduled tasks using both the schedule function and Schedule model\nSOURCE: https://github.com/django-q2/django-q2/blob/master/README.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Use the schedule function\nfrom django_q.tasks import schedule\n\nschedule('math.copysign',\n         2, -2,\n         hook='hooks.print_result',\n         schedule_type=Schedule.DAILY)\n\n# Or create the object directly\nfrom django_q.models import Schedule\n\nSchedule.objects.create(func='math.copysign',\n                        hook='hooks.print_result',\n                        args='2,-2',\n                        schedule_type=Schedule.DAILY\n                        )\n\n# Run a task every 5 minutes, starting at 6 today\n# for 2 hours\nfrom datetime import datetime\n\nschedule('math.hypot',\n         3, 4,\n         schedule_type=Schedule.MINUTES,\n         minutes=5,\n         repeats=24,\n         next_run=datetime.utcnow().replace(hour=18, minute=0))\n\n# Use a cron expression\nschedule('math.hypot',\n         3, 4,\n         schedule_type=Schedule.CRON,\n         cron = '0 22 * * 1-5')\n```"
  }
]