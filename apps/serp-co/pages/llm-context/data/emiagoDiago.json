[
  {
    "owner": "emiago",
    "repo": "diago",
    "content": "TITLE: Implementing a Basic Echo Test VoIP Application in Go using DIAGO\nDESCRIPTION: This example shows how to create a basic echo test VoIP application that answers incoming calls and plays a WAV file. It demonstrates the core functionality of DIAGO including dialog handling and audio playback.\nSOURCE: https://github.com/emiago/diago/blob/main/README.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nua, _ := sipgo.NewUA()\ndg := diago.NewDiago(ua)\n\ndg.Serve(ctx, func(inDialog *diago.DialogServerSession) {\n\tinDialog.Progress() // Progress -> 100 Trying\n\tinDialog.Answer(); // Answer\n\n\t// Make sure file below exists in work dir\n\tplayfile, err := os.Open(\"demo-echotest.wav\")\n\tif err != nil {\n\t\tfmt.Println(\"Failed to open file\", err)\n\t\treturn\n\t}\n\tdefer playfile.Close()\n\n\t// Create playback and play file.\n\tpb, _ := inDialog.PlaybackCreate()\n\tif err := pb.Play(playfile, \"audio/wav\"); err != nil {\n\t\tfmt.Println(\"Playing failed\", err)\n\t}\n})\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Tracing for SIP and RTP in DIAGO\nDESCRIPTION: This snippet demonstrates how to enable debugging traces for SIP, RTCP, and RTP packets. This is useful for troubleshooting and when submitting issues with the library.\nSOURCE: https://github.com/emiago/diago/blob/main/README.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nsip.SIPDebug = true // Enables SIP tracing\nmedia.RTCPDebug = true // Enables RTCP tracing\nmedia.RTPDebug = true // Enables RTP tracing. NOTE: It will dump every RTP Packet\n```\n\n----------------------------------------\n\nTITLE: Running DTMF Server\nDESCRIPTION: Command to start the DTMF detection server using Go\nSOURCE: https://github.com/emiago/diago/blob/main/examples/dtmf/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo run ./examples/dtmf\n```\n\n----------------------------------------\n\nTITLE: Testing DTMF Detection\nDESCRIPTION: Command to dial into the server and send DTMF tones using gophone utility. Tests with a sequence of digits and letters (1234ABCD)\nSOURCE: https://github.com/emiago/diago/blob/main/examples/dtmf/README.md#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngophone dial -dtmf=\"1234ABCD\" sip:112@127.0.0.1\n```\n\n----------------------------------------\n\nTITLE: Starting Diago Audio Playback Server\nDESCRIPTION: Command to run the audio playback example server from the Diago project. This starts a SIP server that can stream audio when clients connect to it.\nSOURCE: https://github.com/emiago/diago/blob/main/examples/playback/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo run ./examples/playback\n```\n\n----------------------------------------\n\nTITLE: Connecting to Diago Server with Gophone\nDESCRIPTION: Command to dial into the running Diago server using the gophone client. This connects to the SIP server at the specified address and routes audio output to the system speakers.\nSOURCE: https://github.com/emiago/diago/blob/main/examples/playback/README.md#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngophone dial -media=speaker sip:112@127.0.0.1\n```\n\n----------------------------------------\n\nTITLE: Running SIP Registration Example with Diago\nDESCRIPTION: Command to execute the registration example from the Diago project. This requires specifying a username and password for authentication, along with a SIP URI that includes the target user and endpoint address with port.\nSOURCE: https://github.com/emiago/diago/blob/main/examples/register/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo run ./examples/register -username <username> -password <pass> sip:myuser@127.0.0.1:5060 \n```\n\n----------------------------------------\n\nTITLE: Running SIP Bridge with Bob in Bash\nDESCRIPTION: Command to start a SIP bridge application that always bridges with bob on port 5090.\nSOURCE: https://github.com/emiago/diago/blob/main/examples/bridge/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo run ./examples/bridge sip:bob@127.0.0.1:5090\n```\n\n----------------------------------------\n\nTITLE: Dialing Through SIP Bridge in Shell\nDESCRIPTION: Command to dial the SIP server on port 5060 which will be bridged with bob on port 5090. Uses alice as the user agent.\nSOURCE: https://github.com/emiago/diago/blob/main/examples/bridge/README.md#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ngophone dial -ua alice sip:bob@127.0.0.1:5060\n```\n\n----------------------------------------\n\nTITLE: Starting SIP Receiver in Bash\nDESCRIPTION: Command to run a SIP receiver using gophone with user agent bob listening on port 5090.\nSOURCE: https://github.com/emiago/diago/blob/main/examples/bridge/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngophone answer -ua bob -l 127.0.0.1:5090\n```\n\n----------------------------------------\n\nTITLE: Running Playback Control Server in Go\nDESCRIPTION: Command to run the playback control example server implemented in Go. This server likely handles audio playback and control operations.\nSOURCE: https://github.com/emiago/diago/blob/main/examples/playback_control/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo run ./examples/playback_control\n```\n\n----------------------------------------\n\nTITLE: Dialing SIP Server with Audio Testing\nDESCRIPTION: Command to dial into the SIP server using gophone client. It connects to the local server on port 112 and uses the speaker for media output. This allows testing of audio playback, muting, and stopping.\nSOURCE: https://github.com/emiago/diago/blob/main/examples/playback_control/README.md#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngophone dial -media=speaker sip:112@127.0.0.1\n```\n\n----------------------------------------\n\nTITLE: Installing Opus C Library on Ubuntu and Fedora\nDESCRIPTION: Commands for installing the Opus C library on Ubuntu and Fedora operating systems. This library is likely a dependency for audio processing functionality in the package.\nSOURCE: https://github.com/emiago/diago/blob/main/audio/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n#Ubuntu \nsudo apt install libopus0\n\n# Fedora\nsudo dnf install opus-devel\nsudo dnf install opusfile-devel\n```"
  }
]