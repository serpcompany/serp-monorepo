[
  {
    "owner": "leoluz",
    "repo": "nvim-dap-go",
    "content": "TITLE: Registering nvim-dap-go plugin\nDESCRIPTION: Registers the nvim-dap-go plugin by calling the `setup` function in the Neovim configuration file (init.lua). This applies the default configurations for typical debugging scenarios.\nSOURCE: https://github.com/leoluz/nvim-dap-go/blob/main/doc/nvim-dap-go.txt#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nrequire('dap-go').setup()\n```\n\n----------------------------------------\n\nTITLE: Customizing nvim-dap-go configuration\nDESCRIPTION: Customizes the nvim-dap-go plugin by passing a configuration table to the `setup` function.  This example shows all possible configuration options, including adding additional dap configurations and customizing Delve settings, such as the path to the Delve executable, initialization timeout, and port.\nSOURCE: https://github.com/leoluz/nvim-dap-go/blob/main/doc/nvim-dap-go.txt#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nrequire('dap-go').setup {\n  -- Additional dap configurations can be added.\n  -- dap_configurations accepts a list of tables where each entry\n  -- represents a dap configuration. For more details see:\n  -- |dap-configuration|\n  dap_configurations = {\n    {\n      -- Must be \"go\" or it will be ignored by the plugin\n      type = \"go\",\n      name = \"Attach remote\",\n      mode = \"remote\",\n      request = \"attach\",\n    },\n  },\n  -- delve configurations\n  delve = {\n    -- the path to the executable dlv which will be used for debugging.\n    -- by default, this is the \"dlv\" executable on your PATH.\n    path = \"dlv\",\n    -- time to wait for delve to initialize the debug session.\n    -- default to 20 seconds\n    initialize_timeout_sec = 20,\n    -- a string that defines the port to start delve debugger.\n    -- default to string \"${port}\" which instructs nvim-dap\n    -- to start the process in a random available port.\n    -- if you set a port in your debug configuration, its value will be\n    -- assigned dynamically.\n    port = \"${port}\",\n    -- additional args to pass to dlv\n    args = {},\n    -- the build flags that are passed to delve.\n    -- defaults to empty string, but can be used to provide flags\n    -- such as \"-tags=unit\" to make sure the test suite is\n    -- compiled during debugging, for example.\n    -- passing build flags using args is ineffective, as those are\n    -- ignored by delve in dap mode.\n    build_flags = \"\",\n    -- whether the dlv process to be created detached or not. there is\n    -- an issue on delve versions < 1.24.0 for Windows where this needs to be\n    -- set to false, otherwise the dlv server creation will fail.\n    detached = vim.fn.has(\"win32\") == 0,\n  },\n  -- options related to running closest test\n  tests = {\n    -- enables verbosity when running the test.\n    verbose = false,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Delve in headless mode\nDESCRIPTION: Starts Delve in headless mode to enable remote debugging. This command specifies the address to listen on and the program to debug, along with any subcommands and flags.\nSOURCE: https://github.com/leoluz/nvim-dap-go/blob/main/doc/nvim-dap-go.txt#_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\ndlv debug -l 127.0.0.1:38697 --headless ./main.go -- subcommand --myflag=xyz\n```\n\n----------------------------------------\n\nTITLE: Defining key mappings for debugging functions\nDESCRIPTION: Defines key mappings for the `debug_test` and `debug_last_test` functions using `vim.keymap.set`. This allows easily invoking these functions with custom key combinations.\nSOURCE: https://github.com/leoluz/nvim-dap-go/blob/main/doc/nvim-dap-go.txt#_snippet_10\n\nLANGUAGE: lua\nCODE:\n```\nlocal dapgo = require('dap-go')\nvim.keymap.set(\"n\", \"<leader>dt\", dapgo.debug_test)\nvim.keymap.set(\"n\", \"<leader>dl\", dapgo.debug_last_test)\n```\n\n----------------------------------------\n\nTITLE: Debugging closest test\nDESCRIPTION: Debugs the closest test method above the cursor using the `debug_test` function.  An optional table argument can be passed to customize the dap configuration, such as overriding default build flags.\nSOURCE: https://github.com/leoluz/nvim-dap-go/blob/main/doc/nvim-dap-go.txt#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nrequire('dap-go').debug_test()\n```\n\n----------------------------------------\n\nTITLE: Debugging last test\nDESCRIPTION: Runs the last debugged test again from anywhere in the project using the `debug_last_test` function. Useful for quickly re-running a test after making changes.\nSOURCE: https://github.com/leoluz/nvim-dap-go/blob/main/doc/nvim-dap-go.txt#_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nrequire('dap-go').debug_last_test()\n```\n\n----------------------------------------\n\nTITLE: VSCode launch configuration for remote debugging\nDESCRIPTION: Example of a VSCode launch configuration file for remote debugging.  This configuration specifies the type as `go`, the request as `attach`, the mode as `remote`, and the port to connect to. It also includes a `substitutePath` to map paths between the local and remote environments.\nSOURCE: https://github.com/leoluz/nvim-dap-go/blob/main/doc/nvim-dap-go.txt#_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"name\": \"Remote debug API server\",\n            \"type\": \"go\",\n            \"request\": \"attach\",\n            \"mode\": \"remote\",\n            \"port\": 4444,\n            \"host\": \"127.0.0.1\",\n            \"substitutePath\": [\n                {\n                    \"from\": \"${workspaceFolder}\", \"to\": \"/usr/src/app\"\n                }\n            ]\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Registering debug configuration for remote attachment\nDESCRIPTION: Registers a new debug configuration for attaching to a remote Delve debugger. This configuration sets the `mode` to `remote` and the `request` to `attach`.\nSOURCE: https://github.com/leoluz/nvim-dap-go/blob/main/doc/nvim-dap-go.txt#_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\nrequire('dap-go').setup {\n  dap_configurations = {\n    {\n      type = \"go\",\n      name = \"Attach remote\",\n      mode = \"remote\",\n      request = \"attach\",\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing build flags for debugging\nDESCRIPTION: Customizes the build flags for debugging a test using the `debug_test` function with an optional configuration table. This allows overriding the default build flags, such as specifying integration tags.\nSOURCE: https://github.com/leoluz/nvim-dap-go/blob/main/doc/nvim-dap-go.txt#_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nrequire(\"dap-go\").debug_test({\n  buildFlags = \"-tags=integration\",\n})\n```\n\n----------------------------------------\n\nTITLE: Registering debug configuration with build flags\nDESCRIPTION: Registers a new debug configuration with build flags by adding an entry to the `dap_configurations` table. The `buildFlags` field is set to a function that will prompt the user for build flags.\nSOURCE: https://github.com/leoluz/nvim-dap-go/blob/main/doc/nvim-dap-go.txt#_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nrequire('dap-go').setup {\n  dap_configurations = {\n    {\n        type = \"go\",\n        name = \"Debug (Build Flags)\",\n        request = \"launch\",\n        program = \"${file}\",\n        buildFlags = require(\"dap-go\").get_build_flags,\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Registering debug config with build flags and args\nDESCRIPTION: Registers a new debug configuration that prompts for both build flags and command-line arguments. This is achieved by setting the `args` and `buildFlags` fields in the `dap_configurations` table to the `get_arguments` and `get_build_flags` functions respectively.\nSOURCE: https://github.com/leoluz/nvim-dap-go/blob/main/doc/nvim-dap-go.txt#_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nrequire(\"dap-go\").setup({\n    dap_configurations = {\n        {\n            type = \"go\",\n            name = \"Debug (Build Flags & Arguments)\",\n            request = \"launch\",\n            program = \"${file}\",\n            args = require(\"dap-go\").get_arguments,\n            buildFlags = require(\"dap-go\").get_build_flags,\n        },\n    }\n})\n```"
  }
]