[
  {
    "owner": "05bit",
    "repo": "peewee-async",
    "content": "TITLE: Initializing Peewee Async Database and Model Definition\nDESCRIPTION: Sets up a pooled PostgreSQL database connection and defines a PageBlock model using peewee_async.AioModel. Demonstrates basic model configuration and disabling synchronous queries for safety.\nSOURCE: https://github.com/05bit/peewee-async/blob/master/docs/peewee_async/quickstart.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nimport peewee\nimport logging\nfrom peewee_async import PooledPostgresqlDatabase\n\ndatabase = PooledPostgresqlDatabase('test')\n\n# Disable sync queries\ndatabase.set_allow_sync(False)\n\n# Let's define a simple model:\nclass PageBlock(peewee_async.AioModel):\n    key = peewee.CharField(max_length=40, unique=True)\n    text = peewee.TextField(default='')\n\n    class Meta:\n        database = database\n```\n\n----------------------------------------\n\nTITLE: Implementing Sync and Async Database Operations with Peewee-Async\nDESCRIPTION: Demonstrates how to use both synchronous and asynchronous database operations using peewee-async. Shows table creation, record insertion, querying, and deletion with async/await syntax.\nSOURCE: https://github.com/05bit/peewee-async/blob/master/docs/peewee_async/examples.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nimport peewee\nimport peewee_async\n\ndatabase = peewee_async.PostgresqlDatabase('test')\nloop = asyncio.get_event_loop()\n\nclass TestModel(peewee_async.AioModel):\n    text = peewee.CharField()\n\n    class Meta:\n        database = database\n\nasync with database.allow_sync():\n    # Create table synchronously!\n    TestModel.create_table(True)\n    # sync connection is closed automatically on exit\n\nasync def my_handler():\n    obj1 = TestModel.create(text=\"Yo, I can do it sync!\")\n    obj2 = await TestModel.aio_create(text=\"Not bad. Watch this, I'm async!\")\n\n    all_objects = await TestModel.select().aio_execute()\n    for obj in all_objects:\n        print(obj.text)\n\n    await TestModel.delete().aio_execute()\n\nloop.run_until_complete(database.connect_async(loop=loop))\nloop.run_until_complete(my_handler())\n```\n\n----------------------------------------\n\nTITLE: Using peewee-async with both synchronous and asynchronous operations\nDESCRIPTION: Complete example demonstrating how to set up a model and database with peewee-async, then perform both synchronous and asynchronous operations. Shows the ability to disable synchronous access when needed.\nSOURCE: https://github.com/05bit/peewee-async/blob/master/README.md#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nimport peewee\nimport peewee_async\n\n# Nothing special, just define model and database:\n\ndatabase = peewee_async.PooledPostgresqlDatabase(\n    database='db_name',\n    user='user',\n    host='127.0.0.1',\n    port='5432',\n    password='password',\n)\n\nclass TestModel(peewee_async.AioModel):\n    text = peewee.CharField()\n\n    class Meta:\n        database = database\n\n# Look, sync code is working!\n\nTestModel.create_table(True)\nTestModel.create(text=\"Yo, I can do it sync!\")\ndatabase.close()\n\n# No need for sync anymore!\n\ndatabase.set_allow_sync(False)\n\nasync def handler():\n    await TestModel.aio_create(text=\"Not bad. Watch this, I'm async!\")\n    all_objects = await TestModel.select().aio_execute()\n    for obj in all_objects:\n        print(obj.text)\n\nloop = asyncio.get_event_loop()\nloop.run_until_complete(handler())\nloop.close()\n\n# Clean up, can do it sync again:\nwith database.allow_sync():\n    TestModel.drop_table(True)\n\n# Expected output:\n# Yo, I can do it sync!\n# Not bad. Watch this, I'm async!\n```\n\n----------------------------------------\n\nTITLE: Performing Async CRUD Operations with Peewee\nDESCRIPTION: Demonstrates async create, read, and update operations using peewee-async's AioModel methods. Shows how to create records, fetch them by key, and update their values asynchronously.\nSOURCE: https://github.com/05bit/peewee-async/blob/master/docs/peewee_async/quickstart.rst#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nasync def my_async_func():\n    # Add new page block\n    await PageBlock.aio_create(\n        key='title',\n        text=\"Peewee is AWESOME with async!\"\n    )\n\n    # Get one by key\n    title = await PageBlock.aio_get(key='title')\n    print(\"Was:\", title.text)\n\n    # Save with new text using manager\n    title.text = \"Peewee is SUPER awesome with async!\"\n    await title.aio_save()\n    print(\"New:\", title.text)\n\nloop.run_until_complete(my_async_func())\nloop.close()\n```\n\n----------------------------------------\n\nTITLE: Using aio_atomic Context Manager for Transactions in Peewee-Async\nDESCRIPTION: Demonstrates how to use db.aio_atomic() as a context manager to handle transactions and nested savepoints. The code shows automatic commit on success and rollback on exceptions.\nSOURCE: https://github.com/05bit/peewee-async/blob/master/docs/peewee_async/transaction.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nasync with db.aio_atomic(): # BEGIN\n    await TestModel.aio_create(text='FOO') # INSERT INTO \"testmodel\" (\"text\", \"data\") VALUES ('FOO', '') RETURNING \"testmodel\".\"id\"\n\n    async with db.aio_atomic(): # SAVEPOINT PWASYNC__e83bf5fc118f4e28b0fbdac90ab857ca\n        await TestModel.update(text=\"BAR\").aio_execute() # UPDATE \"testmodel\" SET \"text\" = 'BAR'\n    # RELEASE SAVEPOINT PWASYNC__e83bf5fc118f4e28b0fbdac90ab857ca\n# COMMIT\n```\n\n----------------------------------------\n\nTITLE: Implementing Transactions with Peewee-Async\nDESCRIPTION: Shows how to use transactions in peewee-async with error handling. Demonstrates atomic operations and rollback functionality when exceptions occur.\nSOURCE: https://github.com/05bit/peewee-async/blob/master/docs/peewee_async/examples.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nimport peewee\nimport peewee_async\n\n# ... some init code ...\n\nasync def test():\n    obj = await TestModel.aio_create(text='FOO')\n    obj_id = obj.id\n\n    try:\n        async with database.aio_atomic():\n            await TestModel.update(text='BAR').where(TestModel.id == obj_id).aio_execute()\n            raise Exception('Fake error')\n    except:\n        res = await TestModel.aio_get(TestModel.id == obj_id)\n\n    print(res.text) # Should print 'FOO', not 'BAR'\n\nloop.run_until_complete(test())\n```\n\n----------------------------------------\n\nTITLE: Manual Connection Management for Batch Queries in Peewee-Async\nDESCRIPTION: Shows how to manually manage connections for optimizing batches of queries. By explicitly using the connection context manager, multiple queries can reuse the same connection, reducing connection overhead.\nSOURCE: https://github.com/05bit/peewee-async/blob/master/docs/peewee_async/connection.rst#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# acquire a connection and put it to connection_context context variable\nasync with database.aio_connection() as connection:\n    \n    # using the connection from the contextvar\n    await MyModel.aio_get(id=1)\n\n    # using the connection from the contextvar\n    await MyModel.aio_get(id=2)\n\n    # using the connection from the contextvar\n    await MyModel.aio_get(id=3)\n# release the connection set connection_context to None at the exit of the async contextmanager\n```\n\n----------------------------------------\n\nTITLE: Manual Transaction Management in Peewee-Async\nDESCRIPTION: Shows how to manually manage database transactions by acquiring a connection and using the Transaction class. This approach provides explicit control over beginning, committing, and rolling back transactions.\nSOURCE: https://github.com/05bit/peewee-async/blob/master/docs/peewee_async/transaction.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom peewee_async import Transaction\nasync with db.aio_connection() as connection:\n    tr = Transaction(connection)\n    await tr.begin() # BEGIN\n    await TestModel.aio_create(text='FOO')\n    try:\n        await TestModel.aio_create(text='FOO')\n    except:\n        await tr.rollback() # ROLLBACK\n    else:\n        await tr.commit() # COMMIT\n```\n\n----------------------------------------\n\nTITLE: Underlying Connection Context Management in Peewee-Async\nDESCRIPTION: Shows the underlying async context manager that handles connections when queries are executed. It either uses an existing connection from the contextvar or acquires a new one from the pool.\nSOURCE: https://github.com/05bit/peewee-async/blob/master/docs/peewee_async/connection.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nasync with database.aio_connection() as connection:\n    await execute_your_query()\n```\n\n----------------------------------------\n\nTITLE: Executing a Single Async Query in Peewee-Async\nDESCRIPTION: A basic example of executing a single asynchronous query in peewee-async. When this code runs, it automatically creates a connection context under the hood.\nSOURCE: https://github.com/05bit/peewee-async/blob/master/docs/peewee_async/connection.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nawait MyModel.aio_get(id=1)\n```\n\n----------------------------------------\n\nTITLE: Multiple Sequential Async Queries with Automatic Connection Management\nDESCRIPTION: Demonstrates how multiple sequential queries each acquire and release their own connection. Each query gets a fresh connection from the pool and releases it after completion.\nSOURCE: https://github.com/05bit/peewee-async/blob/master/docs/peewee_async/connection.rst#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# acquire a connection and put it to connection_context context variable\nawait MyModel.aio_get(id=1)\n# release the connection and set the connection_context to None\n\n# acquire a connection and put it to connection_context context variable\nawait MyModel.aio_get(id=2)\n# release the connection and set the connection_context to None\n\n# acquire a connection and put it to connection_context context variable\nawait MyModel.aio_get(id=3)\n# release the connection and set the connection_context to None\n```\n\n----------------------------------------\n\nTITLE: Raw SQL Transactions in Peewee-Async\nDESCRIPTION: Demonstrates using raw SQL commands for transaction management with custom isolation levels. This approach provides maximum flexibility for transaction control within a connection context.\nSOURCE: https://github.com/05bit/peewee-async/blob/master/docs/peewee_async/transaction.rst#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nasync with db.aio_connection() as connection:\n    await db.aio_execute_sql(sql=\"begin isolation level repeatable read;\")\n    await TestModel.aio_create(text='FOO')\n    try:\n        await TestModel.aio_create(text='FOO')\n    except:\n        await await db.aio_execute_sql(sql=\"ROLLBACK\")\n    else:\n        await await db.aio_execute_sql(sql=\"COMMIT\")\n```\n\n----------------------------------------\n\nTITLE: Creating Database Table with Sync Context\nDESCRIPTION: Shows how to create a database table using synchronous operation within an allowed context. This is intentionally synchronous for database initialization purposes.\nSOURCE: https://github.com/05bit/peewee-async/blob/master/docs/peewee_async/quickstart.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nwith database.allow_sync():\n   PageBlock.create_table(True)\n```\n\n----------------------------------------\n\nTITLE: Problematic Transaction Usage Across Multiple Tasks in Peewee-Async\nDESCRIPTION: Illustrates an incorrect pattern that can lead to bugs where transactions don't work as expected across multiple asyncio tasks. Each task gets its own connection from contextvar, so they don't share the transaction context.\nSOURCE: https://github.com/05bit/peewee-async/blob/master/docs/peewee_async/transaction.rst#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nasync with db.aio_atomic():\n    await asyncio.gather(TestModel.aio_create(text='FOO1'), TestModel.aio_create(text='FOO2'), TestModel.aio_create(text='FOO3'))\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Peewee-Async Examples\nDESCRIPTION: This command installs the required dependencies for running the peewee-async examples. It uses pip to install packages listed in the requirements.txt file located in the examples directory.\nSOURCE: https://github.com/05bit/peewee-async/blob/master/examples/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install -r examples/requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Installing peewee-async with PostgreSQL (aiopg backend) via pip\nDESCRIPTION: Command to install the peewee-async package with PostgreSQL aiopg backend support using pip package manager.\nSOURCE: https://github.com/05bit/peewee-async/blob/master/docs/peewee_async/installing.rst#2025-04-20_snippet_0\n\nLANGUAGE: console\nCODE:\n```\npip install peewee-async[postgresql]\n```\n\n----------------------------------------\n\nTITLE: Installing peewee-async with PostgreSQL aiopg backend\nDESCRIPTION: Command to install peewee-async with PostgreSQL aiopg backend using pip.\nSOURCE: https://github.com/05bit/peewee-async/blob/master/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install peewee-async[postgresql]\n```\n\n----------------------------------------\n\nTITLE: Installing peewee-async with PostgreSQL (psycopg3 backend) via pip\nDESCRIPTION: Command to install the peewee-async package with PostgreSQL psycopg3 backend support using pip package manager.\nSOURCE: https://github.com/05bit/peewee-async/blob/master/docs/peewee_async/installing.rst#2025-04-20_snippet_1\n\nLANGUAGE: console\nCODE:\n```\npip install peewee-async[psycopg]\n```\n\n----------------------------------------\n\nTITLE: Installing peewee-async with PostgreSQL psycopg3 backend\nDESCRIPTION: Command to install peewee-async with PostgreSQL psycopg3 backend using pip.\nSOURCE: https://github.com/05bit/peewee-async/blob/master/README.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install peewee-async[psycopg]\n```\n\n----------------------------------------\n\nTITLE: Installing peewee-async with MySQL backend via pip\nDESCRIPTION: Command to install the peewee-async package with MySQL backend support using pip package manager.\nSOURCE: https://github.com/05bit/peewee-async/blob/master/docs/peewee_async/installing.rst#2025-04-20_snippet_2\n\nLANGUAGE: console\nCODE:\n```\npip install peewee-async[mysql]\n```\n\n----------------------------------------\n\nTITLE: Installing peewee-async with MySQL backend\nDESCRIPTION: Command to install peewee-async with MySQL backend using pip.\nSOURCE: https://github.com/05bit/peewee-async/blob/master/README.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip install peewee-async[mysql]\n```\n\n----------------------------------------\n\nTITLE: Starting Postgres Database Container with Docker Compose\nDESCRIPTION: This command uses Docker Compose to start a Postgres database service. It's recommended for development purposes and uses default credentials.\nSOURCE: https://github.com/05bit/peewee-async/blob/master/examples/README.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up postgres\n```\n\n----------------------------------------\n\nTITLE: Creating Example Tables for Peewee-Async aiohttp Example\nDESCRIPTION: This Python command runs the aiohttp example script to create necessary tables in the database. It assumes the database connection settings are properly configured through environment variables.\nSOURCE: https://github.com/05bit/peewee-async/blob/master/examples/README.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython -m examples.aiohttp_example\n```\n\n----------------------------------------\n\nTITLE: Starting Peewee-Async aiohttp Example Application with Gunicorn\nDESCRIPTION: This command starts the example aiohttp application using Gunicorn. It binds to 127.0.0.1:8080, sets the log level to INFO, uses the aiohttp.GunicornWebWorker, and enables auto-reload for development.\nSOURCE: https://github.com/05bit/peewee-async/blob/master/examples/README.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngunicorn --bind 127.0.0.1:8080 --log-level INFO --access-logfile - \\\n      --worker-class aiohttp.GunicornWebWorker --reload \\\n      examples.aiohttp_example:app\n```\n\n----------------------------------------\n\nTITLE: Testing Peewee-Async aiohttp Example Application\nDESCRIPTION: This curl command tests the running example application by sending a GET request to the root endpoint with a query parameter 'p=1'. It demonstrates how to interact with the application once it's up and running.\nSOURCE: https://github.com/05bit/peewee-async/blob/master/examples/README.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'http://127.0.0.1:8080/?p=1'\n```\n\n----------------------------------------\n\nTITLE: Defining Python Package Dependencies for a peewee-async Project\nDESCRIPTION: This requirements file lists three dependencies: aiohttp for asynchronous HTTP, gunicorn as a WSGI HTTP server, and peewee-async with PostgreSQL extension, which provides async database operations with the peewee ORM.\nSOURCE: https://github.com/05bit/peewee-async/blob/master/examples/requirements.txt#2025-04-20_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\naiohttp\ngunicorn\npeewee-async[postgresql]\n```\n\n----------------------------------------\n\nTITLE: Cloning peewee-async repository from GitHub\nDESCRIPTION: Commands to clone the peewee-async source code repository from GitHub and navigate to the project directory for development.\nSOURCE: https://github.com/05bit/peewee-async/blob/master/docs/peewee_async/installing.rst#2025-04-20_snippet_3\n\nLANGUAGE: console\nCODE:\n```\ngit clone https://github.com/05bit/peewee-async.git\ncd peewee-async\n```\n\n----------------------------------------\n\nTITLE: Installing development dependencies using pip\nDESCRIPTION: Command to install peewee-async with development dependencies in editable mode using pip package manager.\nSOURCE: https://github.com/05bit/peewee-async/blob/master/docs/peewee_async/installing.rst#2025-04-20_snippet_4\n\nLANGUAGE: console\nCODE:\n```\npip install -e .[develop]\n```\n\n----------------------------------------\n\nTITLE: Installing development dependencies with pip\nDESCRIPTION: Command to install development dependencies for contributing to peewee-async using pip.\nSOURCE: https://github.com/05bit/peewee-async/blob/master/README.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npip install -e .[develop]\n```\n\n----------------------------------------\n\nTITLE: Installing development dependencies using poetry\nDESCRIPTION: Command to install peewee-async with development dependencies using the Poetry package manager.\nSOURCE: https://github.com/05bit/peewee-async/blob/master/docs/peewee_async/installing.rst#2025-04-20_snippet_5\n\nLANGUAGE: console\nCODE:\n```\npoetry install -E develop\n```\n\n----------------------------------------\n\nTITLE: Installing development dependencies with poetry\nDESCRIPTION: Command to install development dependencies for contributing to peewee-async using poetry.\nSOURCE: https://github.com/05bit/peewee-async/blob/master/README.md#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npoetry install -E develop\n```\n\n----------------------------------------\n\nTITLE: Starting Docker environment for testing\nDESCRIPTION: Command to start a Docker environment with PostgreSQL database for testing peewee-async in detached mode.\nSOURCE: https://github.com/05bit/peewee-async/blob/master/docs/peewee_async/installing.rst#2025-04-20_snippet_6\n\nLANGUAGE: console\nCODE:\n```\ndocker-compose up -d\n```\n\n----------------------------------------\n\nTITLE: Starting databases with Docker Compose\nDESCRIPTION: Command to start the required databases using Docker Compose for development and testing.\nSOURCE: https://github.com/05bit/peewee-async/blob/master/README.md#2025-04-20_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose up -d\n```\n\n----------------------------------------\n\nTITLE: Running tests with pytest\nDESCRIPTION: Command to run the test suite with pytest, showing verbose output and not capturing stdout/stderr.\nSOURCE: https://github.com/05bit/peewee-async/blob/master/README.md#2025-04-20_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npytest tests -v -s\n```\n\n----------------------------------------\n\nTITLE: Running pytest for peewee-async\nDESCRIPTION: Command to run the test suite for peewee-async using pytest with verbose output and without capturing stdout/stderr.\nSOURCE: https://github.com/05bit/peewee-async/blob/master/docs/peewee_async/installing.rst#2025-04-20_snippet_7\n\nLANGUAGE: console\nCODE:\n```\npytest -s -v\n```\n\n----------------------------------------\n\nTITLE: Installing Requirements for Peewee-Async Load Testing\nDESCRIPTION: Command to install the necessary requirements for the load testing setup using pip.\nSOURCE: https://github.com/05bit/peewee-async/blob/master/load-testing/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install requirments\n```\n\n----------------------------------------\n\nTITLE: Running the Peewee-Async Test Application\nDESCRIPTION: Command to start the test application using uvicorn, which will be the target of the load tests.\nSOURCE: https://github.com/05bit/peewee-async/blob/master/load-testing/README.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nuvicorn app:app\n```\n\n----------------------------------------\n\nTITLE: Executing Yandex Tank Load Tests for Peewee-Async\nDESCRIPTION: Docker command to run Yandex Tank, a load testing tool, mounting the current directory and using host network.\nSOURCE: https://github.com/05bit/peewee-async/blob/master/load-testing/README.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -v $(pwd):/var/loadtest --net host -it yandex/yandex-tank\n```\n\n----------------------------------------\n\nTITLE: Blocking PostgreSQL Connections with iptables\nDESCRIPTION: Firewall rule to make PostgreSQL connections unreachable, simulating network issues for testing purposes.\nSOURCE: https://github.com/05bit/peewee-async/blob/master/load-testing/README.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo iptables -I INPUT -p tcp --dport 5432 -j DROP\n```\n\n----------------------------------------\n\nTITLE: Reverting PostgreSQL Blocking Rule\nDESCRIPTION: Command to remove the previously added iptables rule, restoring PostgreSQL connectivity.\nSOURCE: https://github.com/05bit/peewee-async/blob/master/load-testing/README.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsudo iptables -D INPUT 1\n```\n\n----------------------------------------\n\nTITLE: Creating a PostgreSQL database for testing\nDESCRIPTION: Command to create a UTF-8 encoded PostgreSQL database named 'test' for testing purposes.\nSOURCE: https://github.com/05bit/peewee-async/blob/master/README.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncreatedb -E utf-8 test\n```\n\n----------------------------------------\n\nTITLE: Markdown Contributors List\nDESCRIPTION: A markdown formatted list of project contributors with GitHub usernames and real names.\nSOURCE: https://github.com/05bit/peewee-async/blob/master/CONTRIBUTORS.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* @rudyryk | Alexey Kinev <rudy@05bit.com>\n* @kalombos | Nikolay Gorshkov <nogamemorebrain@gmail.com>\n* @akerlay | Kirill Mineev\n* @mrbox | Jakub Paczkowski\n* @CyberROFL | Ilnaz Nizametdinov\n* @insolite | Oleg\n* @smagafurov\n* @Koos85\n* @spumer\n```"
  }
]